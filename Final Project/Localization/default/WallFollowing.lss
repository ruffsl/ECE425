
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000330  00800100  00006e1e  00006eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006e1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d2  00800430  00800430  000071e2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000071e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000880  00000000  00000000  00007242  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e9f  00000000  00000000  00007ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b5  00000000  00000000  00009961  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b11  00000000  00000000  00009e16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  0000b928  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e2b  00000000  00000000  0000bca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013ec  00000000  00000000  0000cad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 1e 24 	jmp	0x483c	; 0x483c <__vector_4>
      14:	0c 94 47 24 	jmp	0x488e	; 0x488e <__vector_5>
      18:	0c 94 70 24 	jmp	0x48e0	; 0x48e0 <__vector_6>
      1c:	0c 94 99 24 	jmp	0x4932	; 0x4932 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 ff 22 	jmp	0x45fe	; 0x45fe <__vector_9>
      28:	0c 94 28 23 	jmp	0x4650	; 0x4650 <__vector_10>
      2c:	0c 94 51 23 	jmp	0x46a2	; 0x46a2 <__vector_11>
      30:	0c 94 cc 23 	jmp	0x4798	; 0x4798 <__vector_12>
      34:	0c 94 7a 23 	jmp	0x46f4	; 0x46f4 <__vector_13>
      38:	0c 94 a3 23 	jmp	0x4746	; 0x4746 <__vector_14>
      3c:	0c 94 f5 23 	jmp	0x47ea	; 0x47ea <__vector_15>
      40:	0c 94 84 22 	jmp	0x4508	; 0x4508 <__vector_16>
      44:	0c 94 ad 22 	jmp	0x455a	; 0x455a <__vector_17>
      48:	0c 94 d6 22 	jmp	0x45ac	; 0x45ac <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	e9 1f       	adc	r30, r25
      7e:	ec 1f       	adc	r30, r28
      80:	ef 1f       	adc	r30, r31
      82:	f2 1f       	adc	r31, r18
      84:	fb 1f       	adc	r31, r27
      86:	f5 1f       	adc	r31, r21
      88:	f8 1f       	adc	r31, r24
      8a:	fe 1f       	adc	r31, r30
      8c:	01 20       	and	r0, r1
      8e:	04 20       	and	r0, r4
      90:	07 20       	and	r0, r7
      92:	0a 20       	and	r0, r10
      94:	0d 20       	and	r0, r13
      96:	10 20       	and	r1, r0
      98:	13 20       	and	r1, r3
      9a:	16 20       	and	r1, r6
      9c:	19 20       	and	r1, r9
      9e:	1c 20       	and	r1, r12
      a0:	1f 20       	and	r1, r15
      a2:	30 20       	and	r3, r0
      a4:	33 20       	and	r3, r3
      a6:	36 20       	and	r3, r6
      a8:	39 20       	and	r3, r9
      aa:	42 20       	and	r4, r2
      ac:	3c 20       	and	r3, r12
      ae:	3f 20       	and	r3, r15
      b0:	45 20       	and	r4, r5
      b2:	48 20       	and	r4, r8
      b4:	4b 20       	and	r4, r11
      b6:	4e 20       	and	r4, r14
      b8:	51 20       	and	r5, r1
      ba:	54 20       	and	r5, r4
      bc:	57 20       	and	r5, r7
      be:	5a 20       	and	r5, r10
      c0:	5d 20       	and	r5, r13
      c2:	60 20       	and	r6, r0
      c4:	63 20       	and	r6, r3
      c6:	66 20       	and	r6, r6
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ee e1       	ldi	r30, 0x1E	; 30
     676:	fe e6       	ldi	r31, 0x6E	; 110
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a0 33       	cpi	r26, 0x30	; 48
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	a0 e3       	ldi	r26, 0x30	; 48
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a2 30       	cpi	r26, 0x02	; 2
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 ef 19 	call	0x33de	; 0x33de <main>
     698:	0c 94 0d 37 	jmp	0x6e1a	; 0x6e1a <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 c2 21 	call	0x4384	; 0x4384 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 96 21 	call	0x432c	; 0x432c <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 2e 22 	call	0x445c	; 0x445c <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 ad 19 	call	0x335a	; 0x335a <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 90 19 	call	0x3320	; 0x3320 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 af 2c 	call	0x595e	; 0x595e <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 ad 19 	call	0x335a	; 0x335a <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 90 19 	call	0x3320	; 0x3320 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 af 2c 	call	0x595e	; 0x595e <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 ad 19 	call	0x335a	; 0x335a <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 90 19 	call	0x3320	; 0x3320 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 af 2c 	call	0x595e	; 0x595e <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 ad 19 	call	0x335a	; 0x335a <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 90 19 	call	0x3320	; 0x3320 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 af 2c 	call	0x595e	; 0x595e <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 ad 19 	call	0x335a	; 0x335a <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 90 19 	call	0x3320	; 0x3320 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 ad 19 	call	0x335a	; 0x335a <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 90 19 	call	0x3320	; 0x3320 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 cc 04 	sts	0x04CC, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 9a 20 	call	0x4134	; 0x4134 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 9a 20 	call	0x4134	; 0x4134 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 9a 20 	call	0x4134	; 0x4134 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 cc 04 	sts	0x04CC, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 9a 20 	call	0x4134	; 0x4134 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 9a 20 	call	0x4134	; 0x4134 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 9a 20 	call	0x4134	; 0x4134 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 07 1b 	call	0x360e	; 0x360e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 07 1b 	call	0x360e	; 0x360e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 07 1b 	call	0x360e	; 0x360e <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 07 1b 	call	0x360e	; 0x360e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	8f e3       	ldi	r24, 0x3F	; 63
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	a2 e6       	ldi	r26, 0x62	; 98
     c56:	b7 e0       	ldi	r27, 0x07	; 7
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	ea e5       	ldi	r30, 0x5A	; 90
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	87 ec       	ldi	r24, 0xC7	; 199
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 ea 06 	lds	r10, 0x06EA
     c9e:	b0 90 eb 06 	lds	r11, 0x06EB
     ca2:	c0 90 ec 06 	lds	r12, 0x06EC
     ca6:	d0 90 ed 06 	lds	r13, 0x06ED
			rtIR_old[i] = rtIR;
     caa:	e0 90 ee 06 	lds	r14, 0x06EE
     cae:	f0 90 ef 06 	lds	r15, 0x06EF
     cb2:	00 91 f0 06 	lds	r16, 0x06F0
     cb6:	10 91 f1 06 	lds	r17, 0x06F1
			ftIR_old[i] = ftIR;
     cba:	20 90 47 05 	lds	r2, 0x0547
     cbe:	30 90 48 05 	lds	r3, 0x0548
     cc2:	40 90 49 05 	lds	r4, 0x0549
     cc6:	50 90 4a 05 	lds	r5, 0x054A
			bkIR_old[i] = bkIR;
     cca:	20 91 51 05 	lds	r18, 0x0551
     cce:	30 91 52 05 	lds	r19, 0x0552
     cd2:	40 91 53 05 	lds	r20, 0x0553
     cd6:	50 91 54 05 	lds	r21, 0x0554
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e1 53       	subi	r30, 0x31	; 49
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	ee 50       	subi	r30, 0x0E	; 14
     cf0:	f9 4f       	sbci	r31, 0xF9	; 249
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e6 51       	subi	r30, 0x16	; 22
     cfe:	fa 4f       	sbci	r31, 0xFA	; 250
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e9 5a       	subi	r30, 0xA9	; 169
     d0c:	fa 4f       	sbci	r31, 0xFA	; 250
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a7 5c       	subi	r26, 0xC7	; 199
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 ea 06 	lds	r24, 0x06EA
     e0c:	90 91 eb 06 	lds	r25, 0x06EB
     e10:	a0 91 ec 06 	lds	r26, 0x06EC
     e14:	b0 91 ed 06 	lds	r27, 0x06ED
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 ee 06 	lds	r24, 0x06EE
     e28:	90 91 ef 06 	lds	r25, 0x06EF
     e2c:	a0 91 f0 06 	lds	r26, 0x06F0
     e30:	b0 91 f1 06 	lds	r27, 0x06F1
     e34:	80 93 f2 06 	sts	0x06F2, r24
     e38:	90 93 f3 06 	sts	0x06F3, r25
     e3c:	a0 93 f4 06 	sts	0x06F4, r26
     e40:	b0 93 f5 06 	sts	0x06F5, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 47 05 	lds	r24, 0x0547
     e48:	90 91 48 05 	lds	r25, 0x0548
     e4c:	a0 91 49 05 	lds	r26, 0x0549
     e50:	b0 91 4a 05 	lds	r27, 0x054A
     e54:	80 93 ea 05 	sts	0x05EA, r24
     e58:	90 93 eb 05 	sts	0x05EB, r25
     e5c:	a0 93 ec 05 	sts	0x05EC, r26
     e60:	b0 93 ed 05 	sts	0x05ED, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 51 05 	lds	r24, 0x0551
     e68:	90 91 52 05 	lds	r25, 0x0552
     e6c:	a0 91 53 05 	lds	r26, 0x0553
     e70:	b0 91 54 05 	lds	r27, 0x0554
     e74:	80 93 57 05 	sts	0x0557, r24
     e78:	90 93 58 05 	sts	0x0558, r25
     e7c:	a0 93 59 05 	sts	0x0559, r26
     e80:	b0 93 5a 05 	sts	0x055A, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
     e94:	60 93 ea 06 	sts	0x06EA, r22
     e98:	70 93 eb 06 	sts	0x06EB, r23
     e9c:	80 93 ec 06 	sts	0x06EC, r24
     ea0:	90 93 ed 06 	sts	0x06ED, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
     eb8:	60 93 ee 06 	sts	0x06EE, r22
     ebc:	70 93 ef 06 	sts	0x06EF, r23
     ec0:	80 93 f0 06 	sts	0x06F0, r24
     ec4:	90 93 f1 06 	sts	0x06F1, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
     edc:	60 93 47 05 	sts	0x0547, r22
     ee0:	70 93 48 05 	sts	0x0548, r23
     ee4:	80 93 49 05 	sts	0x0549, r24
     ee8:	90 93 4a 05 	sts	0x054A, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
     f00:	60 93 51 05 	sts	0x0551, r22
     f04:	70 93 52 05 	sts	0x0552, r23
     f08:	80 93 53 05 	sts	0x0553, r24
     f0c:	90 93 54 05 	sts	0x0554, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 4b 05 	sts	0x054B, r24
     f66:	90 93 4c 05 	sts	0x054C, r25
     f6a:	a0 93 4d 05 	sts	0x054D, r26
     f6e:	b0 93 4e 05 	sts	0x054E, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 4b 05 	lds	r18, 0x054B
     f7a:	30 91 4c 05 	lds	r19, 0x054C
     f7e:	40 91 4d 05 	lds	r20, 0x054D
     f82:	50 91 4e 05 	lds	r21, 0x054E
     f86:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 4b 05 	sts	0x054B, r22
     f92:	70 93 4c 05 	sts	0x054C, r23
     f96:	80 93 4d 05 	sts	0x054D, r24
     f9a:	90 93 4e 05 	sts	0x054E, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 e6 05 	lds	r18, 0x05E6
     fa6:	30 91 e7 05 	lds	r19, 0x05E7
     faa:	40 91 e8 05 	lds	r20, 0x05E8
     fae:	50 91 e9 05 	lds	r21, 0x05E9
     fb2:	0e 94 af 2c 	call	0x595e	; 0x595e <__subsf3>
     fb6:	2d ec       	ldi	r18, 0xCD	; 205
     fb8:	3c ec       	ldi	r19, 0xCC	; 204
     fba:	4c ec       	ldi	r20, 0xCC	; 204
     fbc:	5d e3       	ldi	r21, 0x3D	; 61
     fbe:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ee 5c       	subi	r30, 0xCE	; 206
    100c:	fd 4f       	sbci	r31, 0xFD	; 253
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ee 5b       	subi	r30, 0xBE	; 190
    101e:	fd 4f       	sbci	r31, 0xFD	; 253
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    1032:	60 91 47 05 	lds	r22, 0x0547
    1036:	70 91 48 05 	lds	r23, 0x0548
    103a:	80 91 49 05 	lds	r24, 0x0549
    103e:	90 91 4a 05 	lds	r25, 0x054A
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    104e:	f8 2e       	mov	r15, r24
    1050:	ff 1c       	adc	r15, r15
    1052:	ff 24       	eor	r15, r15
    1054:	ff 1c       	adc	r15, r15
    1056:	ff 0c       	add	r15, r15
    1058:	ff 0c       	add	r15, r15
    105a:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    105c:	60 91 ea 06 	lds	r22, 0x06EA
    1060:	70 91 eb 06 	lds	r23, 0x06EB
    1064:	80 91 ec 06 	lds	r24, 0x06EC
    1068:	90 91 ed 06 	lds	r25, 0x06ED
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 ef       	ldi	r20, 0xF0	; 240
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    1078:	08 2f       	mov	r16, r24
    107a:	00 1f       	adc	r16, r16
    107c:	00 27       	eor	r16, r16
    107e:	00 1f       	adc	r16, r16
    1080:	00 0f       	add	r16, r16
    1082:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    1084:	60 91 51 05 	lds	r22, 0x0551
    1088:	70 91 52 05 	lds	r23, 0x0552
    108c:	80 91 53 05 	lds	r24, 0x0553
    1090:	90 91 54 05 	lds	r25, 0x0554
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4c e0       	ldi	r20, 0x0C	; 12
    109a:	52 e4       	ldi	r21, 0x42	; 66
    109c:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    10a0:	18 2f       	mov	r17, r24
    10a2:	11 1f       	adc	r17, r17
    10a4:	11 27       	eor	r17, r17
    10a6:	11 1f       	adc	r17, r17
    10a8:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    10aa:	ee 24       	eor	r14, r14
    10ac:	60 91 ee 06 	lds	r22, 0x06EE
    10b0:	70 91 ef 06 	lds	r23, 0x06EF
    10b4:	80 91 f0 06 	lds	r24, 0x06F0
    10b8:	90 91 f1 06 	lds	r25, 0x06F1
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 ef       	ldi	r20, 0xF0	; 240
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	14 f4       	brge	.+4      	; 0x10d0 <checkWorld+0xa6>
    10cc:	ee 24       	eor	r14, r14
    10ce:	e3 94       	inc	r14
    10d0:	8f 2d       	mov	r24, r15
    10d2:	8e 0d       	add	r24, r14
    10d4:	80 0f       	add	r24, r16
    10d6:	81 0f       	add	r24, r17
    10d8:	80 93 4f 05 	sts	0x054F, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    10dc:	20 91 50 05 	lds	r18, 0x0550
    10e0:	e2 2f       	mov	r30, r18
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	e6 59       	subi	r30, 0x96	; 150
    10e6:	f8 4f       	sbci	r31, 0xF8	; 248
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	90 93 56 05 	sts	0x0556, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    10ee:	89 17       	cp	r24, r25
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <checkWorld+0xce>
		currentMoveWorld += 1;
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	20 93 50 05 	sts	0x0550, r18
	}
}
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	08 95       	ret

00001102 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	ff 24       	eor	r15, r15
    110e:	f3 94       	inc	r15
    1110:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1112:	c4 e2       	ldi	r28, 0x24	; 36
    1114:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    1116:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    111a:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	21 f0       	breq	.+8      	; 0x1128 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	11 f0       	breq	.+4      	; 0x1128 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	39 f4       	brne	.+14     	; 0x1136 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    1128:	e1 2f       	mov	r30, r17
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	ed 52       	subi	r30, 0x2D	; 45
    112e:	fa 4f       	sbci	r31, 0xFA	; 250
    1130:	00 83       	st	Z, r16
			i++;
    1132:	1f 5f       	subi	r17, 0xFF	; 255
    1134:	02 c0       	rjmp	.+4      	; 0x113a <movesInput+0x38>
		}

		if (btnHolder != 0){
    1136:	88 23       	and	r24, r24
    1138:	21 f1       	breq	.+72     	; 0x1182 <movesInput+0x80>
			LCD_clear();
    113a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    113e:	8d b7       	in	r24, 0x3d	; 61
    1140:	9e b7       	in	r25, 0x3e	; 62
    1142:	08 97       	sbiw	r24, 0x08	; 8
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	9e bf       	out	0x3e, r25	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	8d bf       	out	0x3d, r24	; 61
    114e:	ed b7       	in	r30, 0x3d	; 61
    1150:	fe b7       	in	r31, 0x3e	; 62
    1152:	31 96       	adiw	r30, 0x01	; 1
    1154:	ad b7       	in	r26, 0x3d	; 61
    1156:	be b7       	in	r27, 0x3e	; 62
    1158:	12 96       	adiw	r26, 0x02	; 2
    115a:	dc 93       	st	X, r29
    115c:	ce 93       	st	-X, r28
    115e:	11 97       	sbiw	r26, 0x01	; 1
    1160:	f2 82       	std	Z+2, r15	; 0x02
    1162:	13 82       	std	Z+3, r1	; 0x03
    1164:	04 83       	std	Z+4, r16	; 0x04
    1166:	15 82       	std	Z+5, r1	; 0x05
    1168:	16 83       	std	Z+6, r17	; 0x06
    116a:	17 82       	std	Z+7, r1	; 0x07
    116c:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
    1170:	f0 2e       	mov	r15, r16
    1172:	8d b7       	in	r24, 0x3d	; 61
    1174:	9e b7       	in	r25, 0x3e	; 62
    1176:	08 96       	adiw	r24, 0x08	; 8
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	9e bf       	out	0x3e, r25	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1182:	84 ef       	ldi	r24, 0xF4	; 244
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    118a:	1b 30       	cpi	r17, 0x0B	; 11
    118c:	20 f2       	brcs	.-120    	; 0x1116 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    118e:	1f 5f       	subi	r17, 0xFF	; 255
    1190:	e1 2f       	mov	r30, r17
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	ed 52       	subi	r30, 0x2D	; 45
    1196:	fa 4f       	sbci	r31, 0xFA	; 250
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	80 83       	st	Z, r24
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	08 95       	ret

000011a8 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    11b0:	c5 e5       	ldi	r28, 0x55	; 85
    11b2:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    11b4:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    11bc:	80 91 e6 06 	lds	r24, 0x06E6
    11c0:	88 0f       	add	r24, r24
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	39 f4       	brne	.+14     	; 0x11d6 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    11c8:	80 91 e6 06 	lds	r24, 0x06E6
    11cc:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    11ce:	8f 5f       	subi	r24, 0xFF	; 255
    11d0:	80 93 e6 06 	sts	0x06E6, r24
			i++;
    11d4:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    11d6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    11da:	00 d0       	rcall	.+0      	; 0x11dc <worldInput+0x34>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <worldInput+0x36>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <worldInput+0x38>
    11e0:	ed b7       	in	r30, 0x3d	; 61
    11e2:	fe b7       	in	r31, 0x3e	; 62
    11e4:	31 96       	adiw	r30, 0x01	; 1
    11e6:	ad b7       	in	r26, 0x3d	; 61
    11e8:	be b7       	in	r27, 0x3e	; 62
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	dc 93       	st	X, r29
    11ee:	ce 93       	st	-X, r28
    11f0:	11 97       	sbiw	r26, 0x01	; 1
    11f2:	80 91 e6 06 	lds	r24, 0x06E6
    11f6:	82 83       	std	Z+2, r24	; 0x02
    11f8:	13 82       	std	Z+3, r1	; 0x03
    11fa:	14 83       	std	Z+4, r17	; 0x04
    11fc:	15 82       	std	Z+5, r1	; 0x05
    11fe:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1202:	8d b7       	in	r24, 0x3d	; 61
    1204:	9e b7       	in	r25, 0x3e	; 62
    1206:	06 96       	adiw	r24, 0x06	; 6
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	9e bf       	out	0x3e, r25	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	8d bf       	out	0x3d, r24	; 61
    1212:	84 ef       	ldi	r24, 0xF4	; 244
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    121a:	14 30       	cpi	r17, 0x04	; 4
    121c:	58 f2       	brcs	.-106    	; 0x11b4 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    121e:	80 91 e6 06 	lds	r24, 0x06E6
    1222:	80 93 e7 06 	sts	0x06E7, r24
}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	08 95       	ret

0000122e <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    1236:	cd e7       	ldi	r28, 0x7D	; 125
    1238:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    123a:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	21 f4       	brne	.+8      	; 0x124a <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    1242:	80 91 e4 05 	lds	r24, 0x05E4
    1246:	88 0f       	add	r24, r24
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	41 f4       	brne	.+16     	; 0x125e <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    124e:	80 91 e4 05 	lds	r24, 0x05E4
    1252:	88 0f       	add	r24, r24
			currentOrientation += 1;
    1254:	8f 5f       	subi	r24, 0xFF	; 255
    1256:	80 93 e4 05 	sts	0x05E4, r24
			i++;
    125a:	1f 5f       	subi	r17, 0xFF	; 255
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    125e:	88 23       	and	r24, r24
    1260:	f1 f0       	breq	.+60     	; 0x129e <orientationInput+0x70>
			LCD_clear();
    1262:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    1266:	00 d0       	rcall	.+0      	; 0x1268 <orientationInput+0x3a>
    1268:	00 d0       	rcall	.+0      	; 0x126a <orientationInput+0x3c>
    126a:	00 d0       	rcall	.+0      	; 0x126c <orientationInput+0x3e>
    126c:	ed b7       	in	r30, 0x3d	; 61
    126e:	fe b7       	in	r31, 0x3e	; 62
    1270:	31 96       	adiw	r30, 0x01	; 1
    1272:	ad b7       	in	r26, 0x3d	; 61
    1274:	be b7       	in	r27, 0x3e	; 62
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	dc 93       	st	X, r29
    127a:	ce 93       	st	-X, r28
    127c:	11 97       	sbiw	r26, 0x01	; 1
    127e:	80 91 e4 05 	lds	r24, 0x05E4
    1282:	82 83       	std	Z+2, r24	; 0x02
    1284:	13 82       	std	Z+3, r1	; 0x03
    1286:	14 83       	std	Z+4, r17	; 0x04
    1288:	15 82       	std	Z+5, r1	; 0x05
    128a:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
    128e:	8d b7       	in	r24, 0x3d	; 61
    1290:	9e b7       	in	r25, 0x3e	; 62
    1292:	06 96       	adiw	r24, 0x06	; 6
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	9e bf       	out	0x3e, r25	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    129e:	84 ef       	ldi	r24, 0xF4	; 244
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    12a6:	12 30       	cpi	r17, 0x02	; 2
    12a8:	40 f2       	brcs	.-112    	; 0x123a <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    12aa:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
	switch(currentOrientation){
    12ae:	80 91 e4 05 	lds	r24, 0x05E4
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	51 f0       	breq	.+20     	; 0x12ca <orientationInput+0x9c>
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	28 f0       	brcs	.+10     	; 0x12c4 <orientationInput+0x96>
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	49 f0       	breq	.+18     	; 0x12d0 <orientationInput+0xa2>
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	71 f4       	brne	.+28     	; 0x12de <orientationInput+0xb0>
    12c2:	09 c0       	rjmp	.+18     	; 0x12d6 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    12c4:	8c ea       	ldi	r24, 0xAC	; 172
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    12ca:	8e ec       	ldi	r24, 0xCE	; 206
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    12d0:	8f ee       	ldi	r24, 0xEF	; 239
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    12d6:	81 e1       	ldi	r24, 0x11	; 17
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    12de:	80 91 e4 05 	lds	r24, 0x05E4
    12e2:	80 93 e3 05 	sts	0x05E3, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    12e6:	84 ef       	ldi	r24, 0xF4	; 244
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
}
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	08 95       	ret

000012f6 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    12f6:	2f 92       	push	r2
    12f8:	3f 92       	push	r3
    12fa:	4f 92       	push	r4
    12fc:	5f 92       	push	r5
    12fe:	6f 92       	push	r6
    1300:	7f 92       	push	r7
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	a0 97       	sbiw	r28, 0x20	; 32
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	2b 01       	movw	r4, r22
    132c:	3c 01       	movw	r6, r24
    132e:	2d 83       	std	Y+5, r18	; 0x05
    1330:	3e 83       	std	Y+6, r19	; 0x06
    1332:	4f 83       	std	Y+7, r20	; 0x07
    1334:	58 87       	std	Y+8, r21	; 0x08
    1336:	e9 86       	std	Y+9, r14	; 0x09
    1338:	fa 86       	std	Y+10, r15	; 0x0a
    133a:	0b 87       	std	Y+11, r16	; 0x0b
    133c:	1c 87       	std	Y+12, r17	; 0x0c
    133e:	ad 86       	std	Y+13, r10	; 0x0d
    1340:	be 86       	std	Y+14, r11	; 0x0e
    1342:	cf 86       	std	Y+15, r12	; 0x0f
    1344:	d8 8a       	std	Y+16, r13	; 0x10
    1346:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    1348:	33 24       	eor	r3, r3
    134a:	ca 01       	movw	r24, r20
    134c:	b9 01       	movw	r22, r18
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__gesf2>
    135a:	18 16       	cp	r1, r24
    135c:	14 f4       	brge	.+4      	; 0x1362 <move_arc_stnb+0x6c>
    135e:	33 24       	eor	r3, r3
    1360:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1362:	6d 81       	ldd	r22, Y+5	; 0x05
    1364:	7e 81       	ldd	r23, Y+6	; 0x06
    1366:	8f 81       	ldd	r24, Y+7	; 0x07
    1368:	98 85       	ldd	r25, Y+8	; 0x08
    136a:	2c ed       	ldi	r18, 0xDC	; 220
    136c:	38 eb       	ldi	r19, 0xB8	; 184
    136e:	48 e0       	ldi	r20, 0x08	; 8
    1370:	5e e3       	ldi	r21, 0x3E	; 62
    1372:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1376:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fixsfsi>
    137a:	9b 01       	movw	r18, r22
    137c:	77 ff       	sbrs	r23, 7
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <move_arc_stnb+0x90>
    1380:	30 95       	com	r19
    1382:	21 95       	neg	r18
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
    1386:	b9 01       	movw	r22, r18
    1388:	88 27       	eor	r24, r24
    138a:	77 fd       	sbrc	r23, 7
    138c:	80 95       	com	r24
    138e:	98 2f       	mov	r25, r24
    1390:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__floatsisf>
    1394:	69 83       	std	Y+1, r22	; 0x01
    1396:	7a 83       	std	Y+2, r23	; 0x02
    1398:	8b 83       	std	Y+3, r24	; 0x03
    139a:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    139c:	69 85       	ldd	r22, Y+9	; 0x09
    139e:	7a 85       	ldd	r23, Y+10	; 0x0a
    13a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a4:	2c ed       	ldi	r18, 0xDC	; 220
    13a6:	38 eb       	ldi	r19, 0xB8	; 184
    13a8:	48 e0       	ldi	r20, 0x08	; 8
    13aa:	5e e3       	ldi	r21, 0x3E	; 62
    13ac:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    13b0:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fixsfsi>
    13b4:	9b 01       	movw	r18, r22
    13b6:	77 ff       	sbrs	r23, 7
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <move_arc_stnb+0xca>
    13ba:	30 95       	com	r19
    13bc:	21 95       	neg	r18
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	b9 01       	movw	r22, r18
    13c2:	88 27       	eor	r24, r24
    13c4:	77 fd       	sbrc	r23, 7
    13c6:	80 95       	com	r24
    13c8:	98 2f       	mov	r25, r24
    13ca:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__floatsisf>
    13ce:	4b 01       	movw	r8, r22
    13d0:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    13d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    13d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    13d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d8:	98 89       	ldd	r25, Y+16	; 0x10
    13da:	2c ed       	ldi	r18, 0xDC	; 220
    13dc:	38 eb       	ldi	r19, 0xB8	; 184
    13de:	48 e0       	ldi	r20, 0x08	; 8
    13e0:	5e e3       	ldi	r21, 0x3E	; 62
    13e2:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    13e6:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fixsfsi>
    13ea:	9b 01       	movw	r18, r22
    13ec:	77 ff       	sbrs	r23, 7
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <move_arc_stnb+0x100>
    13f0:	30 95       	com	r19
    13f2:	21 95       	neg	r18
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	b9 01       	movw	r22, r18
    13f8:	88 27       	eor	r24, r24
    13fa:	77 fd       	sbrc	r23, 7
    13fc:	80 95       	com	r24
    13fe:	98 2f       	mov	r25, r24
    1400:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__floatsisf>
    1404:	6b 01       	movw	r12, r22
    1406:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1408:	c3 01       	movw	r24, r6
    140a:	b2 01       	movw	r22, r4
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	5f e4       	ldi	r21, 0x4F	; 79
    1414:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    1418:	88 23       	and	r24, r24
    141a:	a1 f5       	brne	.+104    	; 0x1484 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    141c:	69 81       	ldd	r22, Y+1	; 0x01
    141e:	7a 81       	ldd	r23, Y+2	; 0x02
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1428:	2b 01       	movw	r4, r22
    142a:	3c 01       	movw	r6, r24
    142c:	c5 01       	movw	r24, r10
    142e:	b4 01       	movw	r22, r8
    1430:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1434:	4b 01       	movw	r8, r22
    1436:	5c 01       	movw	r10, r24
    1438:	c7 01       	movw	r24, r14
    143a:	b6 01       	movw	r22, r12
    143c:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1440:	6b 01       	movw	r12, r22
    1442:	7c 01       	movw	r14, r24
    1444:	2d b7       	in	r18, 0x3d	; 61
    1446:	3e b7       	in	r19, 0x3e	; 62
    1448:	29 50       	subi	r18, 0x09	; 9
    144a:	30 40       	sbci	r19, 0x00	; 0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	3e bf       	out	0x3e, r19	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	2d bf       	out	0x3d, r18	; 61
    1456:	ed b7       	in	r30, 0x3d	; 61
    1458:	fe b7       	in	r31, 0x3e	; 62
    145a:	31 96       	adiw	r30, 0x01	; 1
    145c:	ad b7       	in	r26, 0x3d	; 61
    145e:	be b7       	in	r27, 0x3e	; 62
    1460:	12 96       	adiw	r26, 0x02	; 2
    1462:	5c 92       	st	X, r5
    1464:	4e 92       	st	-X, r4
    1466:	11 97       	sbiw	r26, 0x01	; 1
    1468:	93 82       	std	Z+3, r9	; 0x03
    146a:	82 82       	std	Z+2, r8	; 0x02
    146c:	75 83       	std	Z+5, r23	; 0x05
    146e:	64 83       	std	Z+4, r22	; 0x04
    1470:	26 82       	std	Z+6, r2	; 0x06
    1472:	10 86       	std	Z+8, r1	; 0x08
    1474:	17 82       	std	Z+7, r1	; 0x07
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	62 e0       	ldi	r22, 0x02	; 2
    147a:	43 2d       	mov	r20, r3
    147c:	92 01       	movw	r18, r4
    147e:	84 01       	movw	r16, r8
    1480:	76 01       	movw	r14, r12
    1482:	c1 c1       	rjmp	.+898    	; 0x1806 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1484:	c3 01       	movw	r24, r6
    1486:	b2 01       	movw	r22, r4
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    1494:	88 23       	and	r24, r24
    1496:	e9 f5       	brne	.+122    	; 0x1512 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1498:	69 81       	ldd	r22, Y+1	; 0x01
    149a:	7a 81       	ldd	r23, Y+2	; 0x02
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    14a4:	3b 01       	movw	r6, r22
    14a6:	c5 01       	movw	r24, r10
    14a8:	b4 01       	movw	r22, r8
    14aa:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    14ae:	8b 01       	movw	r16, r22
    14b0:	c7 01       	movw	r24, r14
    14b2:	b6 01       	movw	r22, r12
    14b4:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    14b8:	7b 01       	movw	r14, r22
    14ba:	2d b7       	in	r18, 0x3d	; 61
    14bc:	3e b7       	in	r19, 0x3e	; 62
    14be:	29 50       	subi	r18, 0x09	; 9
    14c0:	30 40       	sbci	r19, 0x00	; 0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	3e bf       	out	0x3e, r19	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	2d bf       	out	0x3d, r18	; 61
    14cc:	ed b7       	in	r30, 0x3d	; 61
    14ce:	fe b7       	in	r31, 0x3e	; 62
    14d0:	31 96       	adiw	r30, 0x01	; 1
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	33 20       	and	r3, r3
    14d6:	09 f4       	brne	.+2      	; 0x14da <move_arc_stnb+0x1e4>
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	71 82       	std	Z+1, r7	; 0x01
    14dc:	60 82       	st	Z, r6
    14de:	13 83       	std	Z+3, r17	; 0x03
    14e0:	02 83       	std	Z+2, r16	; 0x02
    14e2:	f5 82       	std	Z+5, r15	; 0x05
    14e4:	e4 82       	std	Z+4, r14	; 0x04
    14e6:	26 82       	std	Z+6, r2	; 0x06
    14e8:	10 86       	std	Z+8, r1	; 0x08
    14ea:	17 82       	std	Z+7, r1	; 0x07
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	93 01       	movw	r18, r6
    14f2:	c2 2c       	mov	r12, r2
    14f4:	aa 24       	eor	r10, r10
    14f6:	bb 24       	eor	r11, r11
    14f8:	83 2c       	mov	r8, r3
    14fa:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <STEPPER_move>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	ad b7       	in	r26, 0x3d	; 61
    1502:	be b7       	in	r27, 0x3e	; 62
    1504:	19 96       	adiw	r26, 0x09	; 9
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	be bf       	out	0x3e, r27	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	ad bf       	out	0x3d, r26	; 61
    1510:	89 c1       	rjmp	.+786    	; 0x1824 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1512:	c3 01       	movw	r24, r6
    1514:	b2 01       	movw	r22, r4
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__gesf2>
    1522:	18 16       	cp	r1, r24
    1524:	0c f0       	brlt	.+2      	; 0x1528 <move_arc_stnb+0x232>
    1526:	b1 c0       	rjmp	.+354    	; 0x168a <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1528:	66 e6       	ldi	r22, 0x66	; 102
    152a:	76 e6       	ldi	r23, 0x66	; 102
    152c:	8a ea       	ldi	r24, 0xAA	; 170
    152e:	91 ec       	ldi	r25, 0xC1	; 193
    1530:	a3 01       	movw	r20, r6
    1532:	92 01       	movw	r18, r4
    1534:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    1544:	7b 01       	movw	r14, r22
    1546:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1548:	66 e6       	ldi	r22, 0x66	; 102
    154a:	76 e6       	ldi	r23, 0x66	; 102
    154c:	8a ea       	ldi	r24, 0xAA	; 170
    154e:	91 e4       	ldi	r25, 0x41	; 65
    1550:	a3 01       	movw	r20, r6
    1552:	92 01       	movw	r18, r4
    1554:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    1564:	5b 01       	movw	r10, r22
    1566:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1568:	ed b7       	in	r30, 0x3d	; 61
    156a:	fe b7       	in	r31, 0x3e	; 62
    156c:	39 97       	sbiw	r30, 0x09	; 9
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	fe bf       	out	0x3e, r31	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	ed bf       	out	0x3d, r30	; 61
    1578:	8d b6       	in	r8, 0x3d	; 61
    157a:	9e b6       	in	r9, 0x3e	; 62
    157c:	08 94       	sec
    157e:	81 1c       	adc	r8, r1
    1580:	91 1c       	adc	r9, r1
    1582:	6d 81       	ldd	r22, Y+5	; 0x05
    1584:	7e 81       	ldd	r23, Y+6	; 0x06
    1586:	8f 81       	ldd	r24, Y+7	; 0x07
    1588:	98 85       	ldd	r25, Y+8	; 0x08
    158a:	a8 01       	movw	r20, r16
    158c:	97 01       	movw	r18, r14
    158e:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1592:	2c ed       	ldi	r18, 0xDC	; 220
    1594:	38 eb       	ldi	r19, 0xB8	; 184
    1596:	48 e0       	ldi	r20, 0x08	; 8
    1598:	5e e3       	ldi	r21, 0x3E	; 62
    159a:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    159e:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    15a2:	69 8b       	std	Y+17, r22	; 0x11
    15a4:	7a 8b       	std	Y+18, r23	; 0x12
    15a6:	8b 8b       	std	Y+19, r24	; 0x13
    15a8:	9c 8b       	std	Y+20, r25	; 0x14
    15aa:	69 85       	ldd	r22, Y+9	; 0x09
    15ac:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b2:	a8 01       	movw	r20, r16
    15b4:	97 01       	movw	r18, r14
    15b6:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    15ba:	2c ed       	ldi	r18, 0xDC	; 220
    15bc:	38 eb       	ldi	r19, 0xB8	; 184
    15be:	48 e0       	ldi	r20, 0x08	; 8
    15c0:	5e e3       	ldi	r21, 0x3E	; 62
    15c2:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    15c6:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    15ca:	6d 8b       	std	Y+21, r22	; 0x15
    15cc:	7e 8b       	std	Y+22, r23	; 0x16
    15ce:	8f 8b       	std	Y+23, r24	; 0x17
    15d0:	98 8f       	std	Y+24, r25	; 0x18
    15d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    15d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    15d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d8:	98 89       	ldd	r25, Y+16	; 0x10
    15da:	a8 01       	movw	r20, r16
    15dc:	97 01       	movw	r18, r14
    15de:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    15e2:	2c ed       	ldi	r18, 0xDC	; 220
    15e4:	38 eb       	ldi	r19, 0xB8	; 184
    15e6:	48 e0       	ldi	r20, 0x08	; 8
    15e8:	5e e3       	ldi	r21, 0x3E	; 62
    15ea:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    15ee:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    15f2:	2b 01       	movw	r4, r22
    15f4:	3c 01       	movw	r6, r24
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	a6 01       	movw	r20, r12
    1600:	95 01       	movw	r18, r10
    1602:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1606:	2c ed       	ldi	r18, 0xDC	; 220
    1608:	38 eb       	ldi	r19, 0xB8	; 184
    160a:	48 e0       	ldi	r20, 0x08	; 8
    160c:	5e e3       	ldi	r21, 0x3E	; 62
    160e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1612:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1616:	d4 01       	movw	r26, r8
    1618:	6d 93       	st	X+, r22
    161a:	7c 93       	st	X, r23
    161c:	69 85       	ldd	r22, Y+9	; 0x09
    161e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1620:	8b 85       	ldd	r24, Y+11	; 0x0b
    1622:	9c 85       	ldd	r25, Y+12	; 0x0c
    1624:	a6 01       	movw	r20, r12
    1626:	95 01       	movw	r18, r10
    1628:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    162c:	2c ed       	ldi	r18, 0xDC	; 220
    162e:	38 eb       	ldi	r19, 0xB8	; 184
    1630:	48 e0       	ldi	r20, 0x08	; 8
    1632:	5e e3       	ldi	r21, 0x3E	; 62
    1634:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1638:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    163c:	f4 01       	movw	r30, r8
    163e:	73 83       	std	Z+3, r23	; 0x03
    1640:	62 83       	std	Z+2, r22	; 0x02
    1642:	6d 85       	ldd	r22, Y+13	; 0x0d
    1644:	7e 85       	ldd	r23, Y+14	; 0x0e
    1646:	8f 85       	ldd	r24, Y+15	; 0x0f
    1648:	98 89       	ldd	r25, Y+16	; 0x10
    164a:	a6 01       	movw	r20, r12
    164c:	95 01       	movw	r18, r10
    164e:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1652:	2c ed       	ldi	r18, 0xDC	; 220
    1654:	38 eb       	ldi	r19, 0xB8	; 184
    1656:	48 e0       	ldi	r20, 0x08	; 8
    1658:	5e e3       	ldi	r21, 0x3E	; 62
    165a:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    165e:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1662:	d4 01       	movw	r26, r8
    1664:	15 96       	adiw	r26, 0x05	; 5
    1666:	7c 93       	st	X, r23
    1668:	6e 93       	st	-X, r22
    166a:	14 97       	sbiw	r26, 0x04	; 4
    166c:	16 96       	adiw	r26, 0x06	; 6
    166e:	2c 92       	st	X, r2
    1670:	16 97       	sbiw	r26, 0x06	; 6
    1672:	18 96       	adiw	r26, 0x08	; 8
    1674:	1c 92       	st	X, r1
    1676:	1e 92       	st	-X, r1
    1678:	17 97       	sbiw	r26, 0x07	; 7
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	62 e0       	ldi	r22, 0x02	; 2
    167e:	43 2d       	mov	r20, r3
    1680:	29 89       	ldd	r18, Y+17	; 0x11
    1682:	3a 89       	ldd	r19, Y+18	; 0x12
    1684:	0d 89       	ldd	r16, Y+21	; 0x15
    1686:	1e 89       	ldd	r17, Y+22	; 0x16
    1688:	bd c0       	rjmp	.+378    	; 0x1804 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    168a:	c3 01       	movw	r24, r6
    168c:	b2 01       	movw	r22, r4
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    169a:	87 fd       	sbrc	r24, 7
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <move_arc_stnb+0x3ac>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	c1 c0       	rjmp	.+386    	; 0x1824 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    16a2:	66 e6       	ldi	r22, 0x66	; 102
    16a4:	76 e6       	ldi	r23, 0x66	; 102
    16a6:	8a ea       	ldi	r24, 0xAA	; 170
    16a8:	91 e4       	ldi	r25, 0x41	; 65
    16aa:	a3 01       	movw	r20, r6
    16ac:	92 01       	movw	r18, r4
    16ae:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    16be:	7b 01       	movw	r14, r22
    16c0:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    16c2:	66 e6       	ldi	r22, 0x66	; 102
    16c4:	76 e6       	ldi	r23, 0x66	; 102
    16c6:	8a ea       	ldi	r24, 0xAA	; 170
    16c8:	91 ec       	ldi	r25, 0xC1	; 193
    16ca:	a3 01       	movw	r20, r6
    16cc:	92 01       	movw	r18, r4
    16ce:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    16de:	5b 01       	movw	r10, r22
    16e0:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    16e2:	2d b7       	in	r18, 0x3d	; 61
    16e4:	3e b7       	in	r19, 0x3e	; 62
    16e6:	29 50       	subi	r18, 0x09	; 9
    16e8:	30 40       	sbci	r19, 0x00	; 0
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	3e bf       	out	0x3e, r19	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	2d bf       	out	0x3d, r18	; 61
    16f4:	8d b6       	in	r8, 0x3d	; 61
    16f6:	9e b6       	in	r9, 0x3e	; 62
    16f8:	08 94       	sec
    16fa:	81 1c       	adc	r8, r1
    16fc:	91 1c       	adc	r9, r1
    16fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1700:	7e 81       	ldd	r23, Y+6	; 0x06
    1702:	8f 81       	ldd	r24, Y+7	; 0x07
    1704:	98 85       	ldd	r25, Y+8	; 0x08
    1706:	a8 01       	movw	r20, r16
    1708:	97 01       	movw	r18, r14
    170a:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    170e:	2c ed       	ldi	r18, 0xDC	; 220
    1710:	38 eb       	ldi	r19, 0xB8	; 184
    1712:	48 e0       	ldi	r20, 0x08	; 8
    1714:	5e e3       	ldi	r21, 0x3E	; 62
    1716:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    171a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    171e:	69 8f       	std	Y+25, r22	; 0x19
    1720:	7a 8f       	std	Y+26, r23	; 0x1a
    1722:	8b 8f       	std	Y+27, r24	; 0x1b
    1724:	9c 8f       	std	Y+28, r25	; 0x1c
    1726:	69 85       	ldd	r22, Y+9	; 0x09
    1728:	7a 85       	ldd	r23, Y+10	; 0x0a
    172a:	8b 85       	ldd	r24, Y+11	; 0x0b
    172c:	9c 85       	ldd	r25, Y+12	; 0x0c
    172e:	a8 01       	movw	r20, r16
    1730:	97 01       	movw	r18, r14
    1732:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1736:	2c ed       	ldi	r18, 0xDC	; 220
    1738:	38 eb       	ldi	r19, 0xB8	; 184
    173a:	48 e0       	ldi	r20, 0x08	; 8
    173c:	5e e3       	ldi	r21, 0x3E	; 62
    173e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1742:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1746:	6d 8f       	std	Y+29, r22	; 0x1d
    1748:	7e 8f       	std	Y+30, r23	; 0x1e
    174a:	8f 8f       	std	Y+31, r24	; 0x1f
    174c:	98 a3       	std	Y+32, r25	; 0x20
    174e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1750:	7e 85       	ldd	r23, Y+14	; 0x0e
    1752:	8f 85       	ldd	r24, Y+15	; 0x0f
    1754:	98 89       	ldd	r25, Y+16	; 0x10
    1756:	a8 01       	movw	r20, r16
    1758:	97 01       	movw	r18, r14
    175a:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    175e:	2c ed       	ldi	r18, 0xDC	; 220
    1760:	38 eb       	ldi	r19, 0xB8	; 184
    1762:	48 e0       	ldi	r20, 0x08	; 8
    1764:	5e e3       	ldi	r21, 0x3E	; 62
    1766:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    176a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    176e:	2b 01       	movw	r4, r22
    1770:	3c 01       	movw	r6, r24
    1772:	6d 81       	ldd	r22, Y+5	; 0x05
    1774:	7e 81       	ldd	r23, Y+6	; 0x06
    1776:	8f 81       	ldd	r24, Y+7	; 0x07
    1778:	98 85       	ldd	r25, Y+8	; 0x08
    177a:	a6 01       	movw	r20, r12
    177c:	95 01       	movw	r18, r10
    177e:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1782:	2c ed       	ldi	r18, 0xDC	; 220
    1784:	38 eb       	ldi	r19, 0xB8	; 184
    1786:	48 e0       	ldi	r20, 0x08	; 8
    1788:	5e e3       	ldi	r21, 0x3E	; 62
    178a:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    178e:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1792:	d4 01       	movw	r26, r8
    1794:	6d 93       	st	X+, r22
    1796:	7c 93       	st	X, r23
    1798:	69 85       	ldd	r22, Y+9	; 0x09
    179a:	7a 85       	ldd	r23, Y+10	; 0x0a
    179c:	8b 85       	ldd	r24, Y+11	; 0x0b
    179e:	9c 85       	ldd	r25, Y+12	; 0x0c
    17a0:	a6 01       	movw	r20, r12
    17a2:	95 01       	movw	r18, r10
    17a4:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    17a8:	2c ed       	ldi	r18, 0xDC	; 220
    17aa:	38 eb       	ldi	r19, 0xB8	; 184
    17ac:	48 e0       	ldi	r20, 0x08	; 8
    17ae:	5e e3       	ldi	r21, 0x3E	; 62
    17b0:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    17b4:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    17b8:	f4 01       	movw	r30, r8
    17ba:	73 83       	std	Z+3, r23	; 0x03
    17bc:	62 83       	std	Z+2, r22	; 0x02
    17be:	6d 85       	ldd	r22, Y+13	; 0x0d
    17c0:	7e 85       	ldd	r23, Y+14	; 0x0e
    17c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c4:	98 89       	ldd	r25, Y+16	; 0x10
    17c6:	a6 01       	movw	r20, r12
    17c8:	95 01       	movw	r18, r10
    17ca:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    17ce:	2c ed       	ldi	r18, 0xDC	; 220
    17d0:	38 eb       	ldi	r19, 0xB8	; 184
    17d2:	48 e0       	ldi	r20, 0x08	; 8
    17d4:	5e e3       	ldi	r21, 0x3E	; 62
    17d6:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    17da:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    17de:	d4 01       	movw	r26, r8
    17e0:	15 96       	adiw	r26, 0x05	; 5
    17e2:	7c 93       	st	X, r23
    17e4:	6e 93       	st	-X, r22
    17e6:	14 97       	sbiw	r26, 0x04	; 4
    17e8:	16 96       	adiw	r26, 0x06	; 6
    17ea:	2c 92       	st	X, r2
    17ec:	16 97       	sbiw	r26, 0x06	; 6
    17ee:	18 96       	adiw	r26, 0x08	; 8
    17f0:	1c 92       	st	X, r1
    17f2:	1e 92       	st	-X, r1
    17f4:	17 97       	sbiw	r26, 0x07	; 7
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	43 2d       	mov	r20, r3
    17fc:	29 8d       	ldd	r18, Y+25	; 0x19
    17fe:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1800:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1802:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1804:	72 01       	movw	r14, r4
    1806:	c2 2c       	mov	r12, r2
    1808:	aa 24       	eor	r10, r10
    180a:	bb 24       	eor	r11, r11
    180c:	83 2c       	mov	r8, r3
    180e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <STEPPER_move>
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	ed b7       	in	r30, 0x3d	; 61
    1816:	fe b7       	in	r31, 0x3e	; 62
    1818:	39 96       	adiw	r30, 0x09	; 9
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	fe bf       	out	0x3e, r31	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1824:	a0 96       	adiw	r28, 0x20	; 32
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	df 90       	pop	r13
    183e:	cf 90       	pop	r12
    1840:	bf 90       	pop	r11
    1842:	af 90       	pop	r10
    1844:	9f 90       	pop	r9
    1846:	8f 90       	pop	r8
    1848:	7f 90       	pop	r7
    184a:	6f 90       	pop	r6
    184c:	5f 90       	pop	r5
    184e:	4f 90       	pop	r4
    1850:	3f 90       	pop	r3
    1852:	2f 90       	pop	r2
    1854:	08 95       	ret

00001856 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    1856:	2f 92       	push	r2
    1858:	3f 92       	push	r3
    185a:	4f 92       	push	r4
    185c:	5f 92       	push	r5
    185e:	6f 92       	push	r6
    1860:	7f 92       	push	r7
    1862:	8f 92       	push	r8
    1864:	9f 92       	push	r9
    1866:	af 92       	push	r10
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	a0 97       	sbiw	r28, 0x20	; 32
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	2b 01       	movw	r4, r22
    188c:	3c 01       	movw	r6, r24
    188e:	2d 83       	std	Y+5, r18	; 0x05
    1890:	3e 83       	std	Y+6, r19	; 0x06
    1892:	4f 83       	std	Y+7, r20	; 0x07
    1894:	58 87       	std	Y+8, r21	; 0x08
    1896:	e9 86       	std	Y+9, r14	; 0x09
    1898:	fa 86       	std	Y+10, r15	; 0x0a
    189a:	0b 87       	std	Y+11, r16	; 0x0b
    189c:	1c 87       	std	Y+12, r17	; 0x0c
    189e:	ad 86       	std	Y+13, r10	; 0x0d
    18a0:	be 86       	std	Y+14, r11	; 0x0e
    18a2:	cf 86       	std	Y+15, r12	; 0x0f
    18a4:	d8 8a       	std	Y+16, r13	; 0x10
    18a6:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    18a8:	33 24       	eor	r3, r3
    18aa:	ca 01       	movw	r24, r20
    18ac:	b9 01       	movw	r22, r18
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__gesf2>
    18ba:	18 16       	cp	r1, r24
    18bc:	14 f4       	brge	.+4      	; 0x18c2 <move_arc_stwt+0x6c>
    18be:	33 24       	eor	r3, r3
    18c0:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    18c2:	6d 81       	ldd	r22, Y+5	; 0x05
    18c4:	7e 81       	ldd	r23, Y+6	; 0x06
    18c6:	8f 81       	ldd	r24, Y+7	; 0x07
    18c8:	98 85       	ldd	r25, Y+8	; 0x08
    18ca:	2c ed       	ldi	r18, 0xDC	; 220
    18cc:	38 eb       	ldi	r19, 0xB8	; 184
    18ce:	48 e0       	ldi	r20, 0x08	; 8
    18d0:	5e e3       	ldi	r21, 0x3E	; 62
    18d2:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    18d6:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fixsfsi>
    18da:	9b 01       	movw	r18, r22
    18dc:	77 ff       	sbrs	r23, 7
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <move_arc_stwt+0x90>
    18e0:	30 95       	com	r19
    18e2:	21 95       	neg	r18
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	b9 01       	movw	r22, r18
    18e8:	88 27       	eor	r24, r24
    18ea:	77 fd       	sbrc	r23, 7
    18ec:	80 95       	com	r24
    18ee:	98 2f       	mov	r25, r24
    18f0:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__floatsisf>
    18f4:	69 83       	std	Y+1, r22	; 0x01
    18f6:	7a 83       	std	Y+2, r23	; 0x02
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    18fc:	69 85       	ldd	r22, Y+9	; 0x09
    18fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1900:	8b 85       	ldd	r24, Y+11	; 0x0b
    1902:	9c 85       	ldd	r25, Y+12	; 0x0c
    1904:	2c ed       	ldi	r18, 0xDC	; 220
    1906:	38 eb       	ldi	r19, 0xB8	; 184
    1908:	48 e0       	ldi	r20, 0x08	; 8
    190a:	5e e3       	ldi	r21, 0x3E	; 62
    190c:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1910:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fixsfsi>
    1914:	9b 01       	movw	r18, r22
    1916:	77 ff       	sbrs	r23, 7
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <move_arc_stwt+0xca>
    191a:	30 95       	com	r19
    191c:	21 95       	neg	r18
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	b9 01       	movw	r22, r18
    1922:	88 27       	eor	r24, r24
    1924:	77 fd       	sbrc	r23, 7
    1926:	80 95       	com	r24
    1928:	98 2f       	mov	r25, r24
    192a:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__floatsisf>
    192e:	4b 01       	movw	r8, r22
    1930:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1932:	6d 85       	ldd	r22, Y+13	; 0x0d
    1934:	7e 85       	ldd	r23, Y+14	; 0x0e
    1936:	8f 85       	ldd	r24, Y+15	; 0x0f
    1938:	98 89       	ldd	r25, Y+16	; 0x10
    193a:	2c ed       	ldi	r18, 0xDC	; 220
    193c:	38 eb       	ldi	r19, 0xB8	; 184
    193e:	48 e0       	ldi	r20, 0x08	; 8
    1940:	5e e3       	ldi	r21, 0x3E	; 62
    1942:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1946:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fixsfsi>
    194a:	9b 01       	movw	r18, r22
    194c:	77 ff       	sbrs	r23, 7
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <move_arc_stwt+0x100>
    1950:	30 95       	com	r19
    1952:	21 95       	neg	r18
    1954:	3f 4f       	sbci	r19, 0xFF	; 255
    1956:	b9 01       	movw	r22, r18
    1958:	88 27       	eor	r24, r24
    195a:	77 fd       	sbrc	r23, 7
    195c:	80 95       	com	r24
    195e:	98 2f       	mov	r25, r24
    1960:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__floatsisf>
    1964:	6b 01       	movw	r12, r22
    1966:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1968:	c3 01       	movw	r24, r6
    196a:	b2 01       	movw	r22, r4
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	5f e4       	ldi	r21, 0x4F	; 79
    1974:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    1978:	88 23       	and	r24, r24
    197a:	a1 f5       	brne	.+104    	; 0x19e4 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    197c:	69 81       	ldd	r22, Y+1	; 0x01
    197e:	7a 81       	ldd	r23, Y+2	; 0x02
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1988:	2b 01       	movw	r4, r22
    198a:	3c 01       	movw	r6, r24
    198c:	c5 01       	movw	r24, r10
    198e:	b4 01       	movw	r22, r8
    1990:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1994:	4b 01       	movw	r8, r22
    1996:	5c 01       	movw	r10, r24
    1998:	c7 01       	movw	r24, r14
    199a:	b6 01       	movw	r22, r12
    199c:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    19a0:	6b 01       	movw	r12, r22
    19a2:	7c 01       	movw	r14, r24
    19a4:	2d b7       	in	r18, 0x3d	; 61
    19a6:	3e b7       	in	r19, 0x3e	; 62
    19a8:	29 50       	subi	r18, 0x09	; 9
    19aa:	30 40       	sbci	r19, 0x00	; 0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	3e bf       	out	0x3e, r19	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	2d bf       	out	0x3d, r18	; 61
    19b6:	ed b7       	in	r30, 0x3d	; 61
    19b8:	fe b7       	in	r31, 0x3e	; 62
    19ba:	31 96       	adiw	r30, 0x01	; 1
    19bc:	ad b7       	in	r26, 0x3d	; 61
    19be:	be b7       	in	r27, 0x3e	; 62
    19c0:	12 96       	adiw	r26, 0x02	; 2
    19c2:	5c 92       	st	X, r5
    19c4:	4e 92       	st	-X, r4
    19c6:	11 97       	sbiw	r26, 0x01	; 1
    19c8:	93 82       	std	Z+3, r9	; 0x03
    19ca:	82 82       	std	Z+2, r8	; 0x02
    19cc:	75 83       	std	Z+5, r23	; 0x05
    19ce:	64 83       	std	Z+4, r22	; 0x04
    19d0:	26 82       	std	Z+6, r2	; 0x06
    19d2:	10 86       	std	Z+8, r1	; 0x08
    19d4:	17 82       	std	Z+7, r1	; 0x07
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	43 2d       	mov	r20, r3
    19dc:	92 01       	movw	r18, r4
    19de:	84 01       	movw	r16, r8
    19e0:	76 01       	movw	r14, r12
    19e2:	c1 c1       	rjmp	.+898    	; 0x1d66 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    19e4:	c3 01       	movw	r24, r6
    19e6:	b2 01       	movw	r22, r4
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	e9 f5       	brne	.+122    	; 0x1a72 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    19f8:	69 81       	ldd	r22, Y+1	; 0x01
    19fa:	7a 81       	ldd	r23, Y+2	; 0x02
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1a04:	3b 01       	movw	r6, r22
    1a06:	c5 01       	movw	r24, r10
    1a08:	b4 01       	movw	r22, r8
    1a0a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1a0e:	8b 01       	movw	r16, r22
    1a10:	c7 01       	movw	r24, r14
    1a12:	b6 01       	movw	r22, r12
    1a14:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1a18:	7b 01       	movw	r14, r22
    1a1a:	2d b7       	in	r18, 0x3d	; 61
    1a1c:	3e b7       	in	r19, 0x3e	; 62
    1a1e:	29 50       	subi	r18, 0x09	; 9
    1a20:	30 40       	sbci	r19, 0x00	; 0
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	3e bf       	out	0x3e, r19	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	2d bf       	out	0x3d, r18	; 61
    1a2c:	ed b7       	in	r30, 0x3d	; 61
    1a2e:	fe b7       	in	r31, 0x3e	; 62
    1a30:	31 96       	adiw	r30, 0x01	; 1
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	33 20       	and	r3, r3
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <move_arc_stwt+0x1e4>
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	71 82       	std	Z+1, r7	; 0x01
    1a3c:	60 82       	st	Z, r6
    1a3e:	13 83       	std	Z+3, r17	; 0x03
    1a40:	02 83       	std	Z+2, r16	; 0x02
    1a42:	f5 82       	std	Z+5, r15	; 0x05
    1a44:	e4 82       	std	Z+4, r14	; 0x04
    1a46:	26 82       	std	Z+6, r2	; 0x06
    1a48:	10 86       	std	Z+8, r1	; 0x08
    1a4a:	17 82       	std	Z+7, r1	; 0x07
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	62 e0       	ldi	r22, 0x02	; 2
    1a50:	93 01       	movw	r18, r6
    1a52:	c2 2c       	mov	r12, r2
    1a54:	aa 24       	eor	r10, r10
    1a56:	bb 24       	eor	r11, r11
    1a58:	83 2c       	mov	r8, r3
    1a5a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <STEPPER_move>
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	ad b7       	in	r26, 0x3d	; 61
    1a62:	be b7       	in	r27, 0x3e	; 62
    1a64:	19 96       	adiw	r26, 0x09	; 9
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	be bf       	out	0x3e, r27	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	ad bf       	out	0x3d, r26	; 61
    1a70:	89 c1       	rjmp	.+786    	; 0x1d84 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1a72:	c3 01       	movw	r24, r6
    1a74:	b2 01       	movw	r22, r4
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__gesf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	0c f0       	brlt	.+2      	; 0x1a88 <move_arc_stwt+0x232>
    1a86:	b1 c0       	rjmp	.+354    	; 0x1bea <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1a88:	66 e6       	ldi	r22, 0x66	; 102
    1a8a:	76 e6       	ldi	r23, 0x66	; 102
    1a8c:	8a ea       	ldi	r24, 0xAA	; 170
    1a8e:	91 ec       	ldi	r25, 0xC1	; 193
    1a90:	a3 01       	movw	r20, r6
    1a92:	92 01       	movw	r18, r4
    1a94:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    1aa4:	7b 01       	movw	r14, r22
    1aa6:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1aa8:	66 e6       	ldi	r22, 0x66	; 102
    1aaa:	76 e6       	ldi	r23, 0x66	; 102
    1aac:	8a ea       	ldi	r24, 0xAA	; 170
    1aae:	91 e4       	ldi	r25, 0x41	; 65
    1ab0:	a3 01       	movw	r20, r6
    1ab2:	92 01       	movw	r18, r4
    1ab4:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    1ac4:	5b 01       	movw	r10, r22
    1ac6:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1ac8:	ed b7       	in	r30, 0x3d	; 61
    1aca:	fe b7       	in	r31, 0x3e	; 62
    1acc:	39 97       	sbiw	r30, 0x09	; 9
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	fe bf       	out	0x3e, r31	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	ed bf       	out	0x3d, r30	; 61
    1ad8:	8d b6       	in	r8, 0x3d	; 61
    1ada:	9e b6       	in	r9, 0x3e	; 62
    1adc:	08 94       	sec
    1ade:	81 1c       	adc	r8, r1
    1ae0:	91 1c       	adc	r9, r1
    1ae2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae8:	98 85       	ldd	r25, Y+8	; 0x08
    1aea:	a8 01       	movw	r20, r16
    1aec:	97 01       	movw	r18, r14
    1aee:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1af2:	2c ed       	ldi	r18, 0xDC	; 220
    1af4:	38 eb       	ldi	r19, 0xB8	; 184
    1af6:	48 e0       	ldi	r20, 0x08	; 8
    1af8:	5e e3       	ldi	r21, 0x3E	; 62
    1afa:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1afe:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1b02:	69 8b       	std	Y+17, r22	; 0x11
    1b04:	7a 8b       	std	Y+18, r23	; 0x12
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	9c 8b       	std	Y+20, r25	; 0x14
    1b0a:	69 85       	ldd	r22, Y+9	; 0x09
    1b0c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b10:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b12:	a8 01       	movw	r20, r16
    1b14:	97 01       	movw	r18, r14
    1b16:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1b1a:	2c ed       	ldi	r18, 0xDC	; 220
    1b1c:	38 eb       	ldi	r19, 0xB8	; 184
    1b1e:	48 e0       	ldi	r20, 0x08	; 8
    1b20:	5e e3       	ldi	r21, 0x3E	; 62
    1b22:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1b26:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1b2a:	6d 8b       	std	Y+21, r22	; 0x15
    1b2c:	7e 8b       	std	Y+22, r23	; 0x16
    1b2e:	8f 8b       	std	Y+23, r24	; 0x17
    1b30:	98 8f       	std	Y+24, r25	; 0x18
    1b32:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b34:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b38:	98 89       	ldd	r25, Y+16	; 0x10
    1b3a:	a8 01       	movw	r20, r16
    1b3c:	97 01       	movw	r18, r14
    1b3e:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1b42:	2c ed       	ldi	r18, 0xDC	; 220
    1b44:	38 eb       	ldi	r19, 0xB8	; 184
    1b46:	48 e0       	ldi	r20, 0x08	; 8
    1b48:	5e e3       	ldi	r21, 0x3E	; 62
    1b4a:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1b4e:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1b52:	2b 01       	movw	r4, r22
    1b54:	3c 01       	movw	r6, r24
    1b56:	6d 81       	ldd	r22, Y+5	; 0x05
    1b58:	7e 81       	ldd	r23, Y+6	; 0x06
    1b5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5c:	98 85       	ldd	r25, Y+8	; 0x08
    1b5e:	a6 01       	movw	r20, r12
    1b60:	95 01       	movw	r18, r10
    1b62:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1b66:	2c ed       	ldi	r18, 0xDC	; 220
    1b68:	38 eb       	ldi	r19, 0xB8	; 184
    1b6a:	48 e0       	ldi	r20, 0x08	; 8
    1b6c:	5e e3       	ldi	r21, 0x3E	; 62
    1b6e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1b72:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1b76:	d4 01       	movw	r26, r8
    1b78:	6d 93       	st	X+, r22
    1b7a:	7c 93       	st	X, r23
    1b7c:	69 85       	ldd	r22, Y+9	; 0x09
    1b7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b82:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b84:	a6 01       	movw	r20, r12
    1b86:	95 01       	movw	r18, r10
    1b88:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1b8c:	2c ed       	ldi	r18, 0xDC	; 220
    1b8e:	38 eb       	ldi	r19, 0xB8	; 184
    1b90:	48 e0       	ldi	r20, 0x08	; 8
    1b92:	5e e3       	ldi	r21, 0x3E	; 62
    1b94:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1b98:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1b9c:	f4 01       	movw	r30, r8
    1b9e:	73 83       	std	Z+3, r23	; 0x03
    1ba0:	62 83       	std	Z+2, r22	; 0x02
    1ba2:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ba4:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba8:	98 89       	ldd	r25, Y+16	; 0x10
    1baa:	a6 01       	movw	r20, r12
    1bac:	95 01       	movw	r18, r10
    1bae:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1bb2:	2c ed       	ldi	r18, 0xDC	; 220
    1bb4:	38 eb       	ldi	r19, 0xB8	; 184
    1bb6:	48 e0       	ldi	r20, 0x08	; 8
    1bb8:	5e e3       	ldi	r21, 0x3E	; 62
    1bba:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1bbe:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1bc2:	d4 01       	movw	r26, r8
    1bc4:	15 96       	adiw	r26, 0x05	; 5
    1bc6:	7c 93       	st	X, r23
    1bc8:	6e 93       	st	-X, r22
    1bca:	14 97       	sbiw	r26, 0x04	; 4
    1bcc:	16 96       	adiw	r26, 0x06	; 6
    1bce:	2c 92       	st	X, r2
    1bd0:	16 97       	sbiw	r26, 0x06	; 6
    1bd2:	18 96       	adiw	r26, 0x08	; 8
    1bd4:	1c 92       	st	X, r1
    1bd6:	1e 92       	st	-X, r1
    1bd8:	17 97       	sbiw	r26, 0x07	; 7
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	62 e0       	ldi	r22, 0x02	; 2
    1bde:	43 2d       	mov	r20, r3
    1be0:	29 89       	ldd	r18, Y+17	; 0x11
    1be2:	3a 89       	ldd	r19, Y+18	; 0x12
    1be4:	0d 89       	ldd	r16, Y+21	; 0x15
    1be6:	1e 89       	ldd	r17, Y+22	; 0x16
    1be8:	bd c0       	rjmp	.+378    	; 0x1d64 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1bea:	c3 01       	movw	r24, r6
    1bec:	b2 01       	movw	r22, r4
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    1bfa:	87 fd       	sbrc	r24, 7
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <move_arc_stwt+0x3ac>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	c1 c0       	rjmp	.+386    	; 0x1d84 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1c02:	66 e6       	ldi	r22, 0x66	; 102
    1c04:	76 e6       	ldi	r23, 0x66	; 102
    1c06:	8a ea       	ldi	r24, 0xAA	; 170
    1c08:	91 e4       	ldi	r25, 0x41	; 65
    1c0a:	a3 01       	movw	r20, r6
    1c0c:	92 01       	movw	r18, r4
    1c0e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    1c1e:	7b 01       	movw	r14, r22
    1c20:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1c22:	66 e6       	ldi	r22, 0x66	; 102
    1c24:	76 e6       	ldi	r23, 0x66	; 102
    1c26:	8a ea       	ldi	r24, 0xAA	; 170
    1c28:	91 ec       	ldi	r25, 0xC1	; 193
    1c2a:	a3 01       	movw	r20, r6
    1c2c:	92 01       	movw	r18, r4
    1c2e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e8       	ldi	r20, 0x80	; 128
    1c38:	5f e3       	ldi	r21, 0x3F	; 63
    1c3a:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    1c3e:	5b 01       	movw	r10, r22
    1c40:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1c42:	2d b7       	in	r18, 0x3d	; 61
    1c44:	3e b7       	in	r19, 0x3e	; 62
    1c46:	29 50       	subi	r18, 0x09	; 9
    1c48:	30 40       	sbci	r19, 0x00	; 0
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	3e bf       	out	0x3e, r19	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	2d bf       	out	0x3d, r18	; 61
    1c54:	8d b6       	in	r8, 0x3d	; 61
    1c56:	9e b6       	in	r9, 0x3e	; 62
    1c58:	08 94       	sec
    1c5a:	81 1c       	adc	r8, r1
    1c5c:	91 1c       	adc	r9, r1
    1c5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c60:	7e 81       	ldd	r23, Y+6	; 0x06
    1c62:	8f 81       	ldd	r24, Y+7	; 0x07
    1c64:	98 85       	ldd	r25, Y+8	; 0x08
    1c66:	a8 01       	movw	r20, r16
    1c68:	97 01       	movw	r18, r14
    1c6a:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1c6e:	2c ed       	ldi	r18, 0xDC	; 220
    1c70:	38 eb       	ldi	r19, 0xB8	; 184
    1c72:	48 e0       	ldi	r20, 0x08	; 8
    1c74:	5e e3       	ldi	r21, 0x3E	; 62
    1c76:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1c7a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1c7e:	69 8f       	std	Y+25, r22	; 0x19
    1c80:	7a 8f       	std	Y+26, r23	; 0x1a
    1c82:	8b 8f       	std	Y+27, r24	; 0x1b
    1c84:	9c 8f       	std	Y+28, r25	; 0x1c
    1c86:	69 85       	ldd	r22, Y+9	; 0x09
    1c88:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c8e:	a8 01       	movw	r20, r16
    1c90:	97 01       	movw	r18, r14
    1c92:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1c96:	2c ed       	ldi	r18, 0xDC	; 220
    1c98:	38 eb       	ldi	r19, 0xB8	; 184
    1c9a:	48 e0       	ldi	r20, 0x08	; 8
    1c9c:	5e e3       	ldi	r21, 0x3E	; 62
    1c9e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1ca2:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1ca6:	6d 8f       	std	Y+29, r22	; 0x1d
    1ca8:	7e 8f       	std	Y+30, r23	; 0x1e
    1caa:	8f 8f       	std	Y+31, r24	; 0x1f
    1cac:	98 a3       	std	Y+32, r25	; 0x20
    1cae:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cb0:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb4:	98 89       	ldd	r25, Y+16	; 0x10
    1cb6:	a8 01       	movw	r20, r16
    1cb8:	97 01       	movw	r18, r14
    1cba:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1cbe:	2c ed       	ldi	r18, 0xDC	; 220
    1cc0:	38 eb       	ldi	r19, 0xB8	; 184
    1cc2:	48 e0       	ldi	r20, 0x08	; 8
    1cc4:	5e e3       	ldi	r21, 0x3E	; 62
    1cc6:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1cca:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1cce:	2b 01       	movw	r4, r22
    1cd0:	3c 01       	movw	r6, r24
    1cd2:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd4:	7e 81       	ldd	r23, Y+6	; 0x06
    1cd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd8:	98 85       	ldd	r25, Y+8	; 0x08
    1cda:	a6 01       	movw	r20, r12
    1cdc:	95 01       	movw	r18, r10
    1cde:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1ce2:	2c ed       	ldi	r18, 0xDC	; 220
    1ce4:	38 eb       	ldi	r19, 0xB8	; 184
    1ce6:	48 e0       	ldi	r20, 0x08	; 8
    1ce8:	5e e3       	ldi	r21, 0x3E	; 62
    1cea:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1cee:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1cf2:	d4 01       	movw	r26, r8
    1cf4:	6d 93       	st	X+, r22
    1cf6:	7c 93       	st	X, r23
    1cf8:	69 85       	ldd	r22, Y+9	; 0x09
    1cfa:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cfc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cfe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d00:	a6 01       	movw	r20, r12
    1d02:	95 01       	movw	r18, r10
    1d04:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1d08:	2c ed       	ldi	r18, 0xDC	; 220
    1d0a:	38 eb       	ldi	r19, 0xB8	; 184
    1d0c:	48 e0       	ldi	r20, 0x08	; 8
    1d0e:	5e e3       	ldi	r21, 0x3E	; 62
    1d10:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1d14:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1d18:	f4 01       	movw	r30, r8
    1d1a:	73 83       	std	Z+3, r23	; 0x03
    1d1c:	62 83       	std	Z+2, r22	; 0x02
    1d1e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d20:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d24:	98 89       	ldd	r25, Y+16	; 0x10
    1d26:	a6 01       	movw	r20, r12
    1d28:	95 01       	movw	r18, r10
    1d2a:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    1d2e:	2c ed       	ldi	r18, 0xDC	; 220
    1d30:	38 eb       	ldi	r19, 0xB8	; 184
    1d32:	48 e0       	ldi	r20, 0x08	; 8
    1d34:	5e e3       	ldi	r21, 0x3E	; 62
    1d36:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    1d3a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1d3e:	d4 01       	movw	r26, r8
    1d40:	15 96       	adiw	r26, 0x05	; 5
    1d42:	7c 93       	st	X, r23
    1d44:	6e 93       	st	-X, r22
    1d46:	14 97       	sbiw	r26, 0x04	; 4
    1d48:	16 96       	adiw	r26, 0x06	; 6
    1d4a:	2c 92       	st	X, r2
    1d4c:	16 97       	sbiw	r26, 0x06	; 6
    1d4e:	18 96       	adiw	r26, 0x08	; 8
    1d50:	1c 92       	st	X, r1
    1d52:	1e 92       	st	-X, r1
    1d54:	17 97       	sbiw	r26, 0x07	; 7
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	62 e0       	ldi	r22, 0x02	; 2
    1d5a:	43 2d       	mov	r20, r3
    1d5c:	29 8d       	ldd	r18, Y+25	; 0x19
    1d5e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1d60:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1d62:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1d64:	72 01       	movw	r14, r4
    1d66:	c2 2c       	mov	r12, r2
    1d68:	aa 24       	eor	r10, r10
    1d6a:	bb 24       	eor	r11, r11
    1d6c:	83 2c       	mov	r8, r3
    1d6e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <STEPPER_move>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	ed b7       	in	r30, 0x3d	; 61
    1d76:	fe b7       	in	r31, 0x3e	; 62
    1d78:	39 96       	adiw	r30, 0x09	; 9
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	fe bf       	out	0x3e, r31	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1d84:	a0 96       	adiw	r28, 0x20	; 32
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
    1da8:	7f 90       	pop	r7
    1daa:	6f 90       	pop	r6
    1dac:	5f 90       	pop	r5
    1dae:	4f 90       	pop	r4
    1db0:	3f 90       	pop	r3
    1db2:	2f 90       	pop	r2
    1db4:	08 95       	ret

00001db6 <setOdometry>:
* Input Variables:	void
* Output Return:	float odometry 
* Overview:		    Sets the odometry to move
********************************************************************/
void setOdometry( float odometry )
{	
    1db6:	8f 92       	push	r8
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
	// Set the gloable odometryTrigger
	odometryTrigger = odometry;
    1dc6:	60 93 cf 05 	sts	0x05CF, r22
    1dca:	70 93 d0 05 	sts	0x05D0, r23
    1dce:	80 93 d1 05 	sts	0x05D1, r24
    1dd2:	90 93 d2 05 	sts	0x05D2, r25

	// Set the stepers
	STEPPER_move_stnb( STEPPER_BOTH, 
    1dd6:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    1dda:	8b 01       	movw	r16, r22
    1ddc:	9c 01       	movw	r18, r24
    1dde:	8d b7       	in	r24, 0x3d	; 61
    1de0:	9e b7       	in	r25, 0x3e	; 62
    1de2:	09 97       	sbiw	r24, 0x09	; 9
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	9e bf       	out	0x3e, r25	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	8d bf       	out	0x3d, r24	; 61
    1dee:	ed b7       	in	r30, 0x3d	; 61
    1df0:	fe b7       	in	r31, 0x3e	; 62
    1df2:	31 96       	adiw	r30, 0x01	; 1
    1df4:	ad b7       	in	r26, 0x3d	; 61
    1df6:	be b7       	in	r27, 0x3e	; 62
    1df8:	12 96       	adiw	r26, 0x02	; 2
    1dfa:	1c 93       	st	X, r17
    1dfc:	0e 93       	st	-X, r16
    1dfe:	11 97       	sbiw	r26, 0x01	; 1
    1e00:	84 ef       	ldi	r24, 0xF4	; 244
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	93 83       	std	Z+3, r25	; 0x03
    1e06:	82 83       	std	Z+2, r24	; 0x02
    1e08:	95 83       	std	Z+5, r25	; 0x05
    1e0a:	84 83       	std	Z+4, r24	; 0x04
    1e0c:	16 82       	std	Z+6, r1	; 0x06
    1e0e:	10 86       	std	Z+8, r1	; 0x08
    1e10:	17 82       	std	Z+7, r1	; 0x07
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	62 e0       	ldi	r22, 0x02	; 2
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	98 01       	movw	r18, r16
    1e1a:	04 ef       	ldi	r16, 0xF4	; 244
    1e1c:	11 e0       	ldi	r17, 0x01	; 1
    1e1e:	94 ef       	ldi	r25, 0xF4	; 244
    1e20:	e9 2e       	mov	r14, r25
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	f9 2e       	mov	r15, r25
    1e26:	cc 24       	eor	r12, r12
    1e28:	aa 24       	eor	r10, r10
    1e2a:	bb 24       	eor	r11, r11
    1e2c:	88 24       	eor	r8, r8
    1e2e:	83 94       	inc	r8
    1e30:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <STEPPER_move>
    1e34:	8d b7       	in	r24, 0x3d	; 61
    1e36:	9e b7       	in	r25, 0x3e	; 62
    1e38:	09 96       	adiw	r24, 0x09	; 9
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	9e bf       	out	0x3e, r25	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	8d bf       	out	0x3d, r24	; 61
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF, // Left
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF ); // Right
}
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	cf 90       	pop	r12
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	8f 90       	pop	r8
    1e54:	08 95       	ret

00001e56 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1e56:	0e 94 69 20 	call	0x40d2	; 0x40d2 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	21 70       	andi	r18, 0x01	; 1
    1e5e:	20 93 e8 06 	sts	0x06E8, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	82 70       	andi	r24, 0x02	; 2
    1e66:	90 70       	andi	r25, 0x00	; 0
    1e68:	95 95       	asr	r25
    1e6a:	87 95       	ror	r24
    1e6c:	80 93 e9 06 	sts	0x06E9, r24
}
    1e70:	08 95       	ret

00001e72 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1e72:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1e76:	60 93 df 05 	sts	0x05DF, r22
    1e7a:	70 93 e0 05 	sts	0x05E0, r23
    1e7e:	80 93 e1 05 	sts	0x05E1, r24
    1e82:	90 93 e2 05 	sts	0x05E2, r25
	leftLightVolt = getLeftLight();
    1e86:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1e8a:	60 93 77 07 	sts	0x0777, r22
    1e8e:	70 93 78 07 	sts	0x0778, r23
    1e92:	80 93 79 07 	sts	0x0779, r24
    1e96:	90 93 7a 07 	sts	0x077A, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1e9a:	08 95       	ret

00001e9c <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1e9c:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1ea0:	60 93 47 05 	sts	0x0547, r22
    1ea4:	70 93 48 05 	sts	0x0548, r23
    1ea8:	80 93 49 05 	sts	0x0549, r24
    1eac:	90 93 4a 05 	sts	0x054A, r25
	bkIR = getBackIR();
    1eb0:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1eb4:	60 93 51 05 	sts	0x0551, r22
    1eb8:	70 93 52 05 	sts	0x0552, r23
    1ebc:	80 93 53 05 	sts	0x0553, r24
    1ec0:	90 93 54 05 	sts	0x0554, r25
	ltIR = getLeftIR();
    1ec4:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1ec8:	60 93 ea 06 	sts	0x06EA, r22
    1ecc:	70 93 eb 06 	sts	0x06EB, r23
    1ed0:	80 93 ec 06 	sts	0x06EC, r24
    1ed4:	90 93 ed 06 	sts	0x06ED, r25
	rtIR = getRightIR();
    1ed8:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1edc:	60 93 ee 06 	sts	0x06EE, r22
    1ee0:	70 93 ef 06 	sts	0x06EF, r23
    1ee4:	80 93 f0 06 	sts	0x06F0, r24
    1ee8:	90 93 f1 06 	sts	0x06F1, r25
}
    1eec:	08 95       	ret

00001eee <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1eee:	cf 92       	push	r12
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	16 2f       	mov	r17, r22
    1f00:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1f02:	5f e1       	ldi	r21, 0x1F	; 31
    1f04:	f5 2e       	mov	r15, r21
    1f06:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1f08:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1f0a:	0f 2d       	mov	r16, r15
    1f0c:	06 95       	lsr	r16
    1f0e:	06 95       	lsr	r16
    1f10:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1f12:	c0 2f       	mov	r28, r16
    1f14:	d0 e0       	ldi	r29, 0x00	; 0
    1f16:	c1 2e       	mov	r12, r17
    1f18:	dd 24       	eor	r13, r13
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	b6 01       	movw	r22, r12
    1f1e:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1f22:	80 2f       	mov	r24, r16
    1f24:	61 2f       	mov	r22, r17
    1f26:	0e 94 b7 1a 	call	0x356e	; 0x356e <LCD_set_next_PGC>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	45 e0       	ldi	r20, 0x05	; 5
    1f2e:	ee 0f       	add	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	4a 95       	dec	r20
    1f34:	e1 f7       	brne	.-8      	; 0x1f2e <LCD_set_pixel+0x40>
    1f36:	2f 2d       	mov	r18, r15
    1f38:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1f3a:	ee 20       	and	r14, r14
    1f3c:	89 f0       	breq	.+34     	; 0x1f60 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1f3e:	ec 0d       	add	r30, r12
    1f40:	fd 1d       	adc	r31, r13
    1f42:	ee 59       	subi	r30, 0x9E	; 158
    1f44:	f9 4f       	sbci	r31, 0xF9	; 249
    1f46:	27 70       	andi	r18, 0x07	; 7
    1f48:	30 70       	andi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <LCD_set_pixel+0x66>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	2a 95       	dec	r18
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <LCD_set_pixel+0x62>
    1f58:	20 81       	ld	r18, Z
    1f5a:	28 2b       	or	r18, r24
    1f5c:	20 83       	st	Z, r18
    1f5e:	11 c0       	rjmp	.+34     	; 0x1f82 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1f60:	ec 0d       	add	r30, r12
    1f62:	fd 1d       	adc	r31, r13
    1f64:	ee 59       	subi	r30, 0x9E	; 158
    1f66:	f9 4f       	sbci	r31, 0xF9	; 249
    1f68:	27 70       	andi	r18, 0x07	; 7
    1f6a:	30 70       	andi	r19, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <LCD_set_pixel+0x88>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	2a 95       	dec	r18
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <LCD_set_pixel+0x84>
    1f7a:	80 95       	com	r24
    1f7c:	20 81       	ld	r18, Z
    1f7e:	82 23       	and	r24, r18
    1f80:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1f82:	35 e0       	ldi	r19, 0x05	; 5
    1f84:	cc 0f       	add	r28, r28
    1f86:	dd 1f       	adc	r29, r29
    1f88:	3a 95       	dec	r19
    1f8a:	e1 f7       	brne	.-8      	; 0x1f84 <LCD_set_pixel+0x96>
    1f8c:	cc 0d       	add	r28, r12
    1f8e:	dd 1d       	adc	r29, r13
    1f90:	ce 59       	subi	r28, 0x9E	; 158
    1f92:	d9 4f       	sbci	r29, 0xF9	; 249
    1f94:	88 81       	ld	r24, Y
    1f96:	61 e0       	ldi	r22, 0x01	; 1
    1f98:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
}
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	df 90       	pop	r13
    1faa:	cf 90       	pop	r12
    1fac:	08 95       	ret

00001fae <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1fae:	7f 92       	push	r7
    1fb0:	8f 92       	push	r8
    1fb2:	9f 92       	push	r9
    1fb4:	af 92       	push	r10
    1fb6:	bf 92       	push	r11
    1fb8:	cf 92       	push	r12
    1fba:	df 92       	push	r13
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	98 2e       	mov	r9, r24
    1fc6:	b6 2e       	mov	r11, r22
    1fc8:	c4 2e       	mov	r12, r20
    1fca:	a2 2e       	mov	r10, r18
    1fcc:	80 2e       	mov	r8, r16
    1fce:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1fd0:	bb 0c       	add	r11, r11
    1fd2:	bb 0c       	add	r11, r11
    1fd4:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1fd6:	dd 24       	eor	r13, r13
    1fd8:	23 e0       	ldi	r18, 0x03	; 3
    1fda:	cc 0c       	add	r12, r12
    1fdc:	dd 1c       	adc	r13, r13
    1fde:	2a 95       	dec	r18
    1fe0:	e1 f7       	brne	.-8      	; 0x1fda <printCell+0x2c>
    1fe2:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1fe4:	0f e1       	ldi	r16, 0x1F	; 31
    1fe6:	0b 19       	sub	r16, r11
    1fe8:	80 2f       	mov	r24, r16
    1fea:	6c 2d       	mov	r22, r12
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1ff2:	98 e1       	ldi	r25, 0x18	; 24
    1ff4:	e9 2e       	mov	r14, r25
    1ff6:	eb 18       	sub	r14, r11
    1ff8:	8e 2d       	mov	r24, r14
    1ffa:	6c 2d       	mov	r22, r12
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    2002:	87 e0       	ldi	r24, 0x07	; 7
    2004:	f8 2e       	mov	r15, r24
    2006:	fc 0c       	add	r15, r12
    2008:	80 2f       	mov	r24, r16
    200a:	6f 2d       	mov	r22, r15
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    2012:	8e 2d       	mov	r24, r14
    2014:	6f 2d       	mov	r22, r15
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	
	if(cell&0b1000){
    201c:	c9 2c       	mov	r12, r9
    201e:	93 fe       	sbrs	r9, 3
    2020:	24 c0       	rjmp	.+72     	; 0x206a <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    2022:	61 2f       	mov	r22, r17
    2024:	6f 5f       	subi	r22, 0xFF	; 255
    2026:	80 2f       	mov	r24, r16
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    202e:	61 2f       	mov	r22, r17
    2030:	6e 5f       	subi	r22, 0xFE	; 254
    2032:	80 2f       	mov	r24, r16
    2034:	41 e0       	ldi	r20, 0x01	; 1
    2036:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    203a:	61 2f       	mov	r22, r17
    203c:	6d 5f       	subi	r22, 0xFD	; 253
    203e:	80 2f       	mov	r24, r16
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    2046:	61 2f       	mov	r22, r17
    2048:	6c 5f       	subi	r22, 0xFC	; 252
    204a:	80 2f       	mov	r24, r16
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    2052:	61 2f       	mov	r22, r17
    2054:	6b 5f       	subi	r22, 0xFB	; 251
    2056:	80 2f       	mov	r24, r16
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    205e:	61 2f       	mov	r22, r17
    2060:	6a 5f       	subi	r22, 0xFA	; 250
    2062:	80 2f       	mov	r24, r16
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	}
	if(cell&0b0100){
    206a:	c2 fe       	sbrs	r12, 2
    206c:	25 c0       	rjmp	.+74     	; 0x20b8 <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    206e:	8b 2d       	mov	r24, r11
    2070:	80 95       	com	r24
    2072:	81 5e       	subi	r24, 0xE1	; 225
    2074:	6f 2d       	mov	r22, r15
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    207c:	8d e1       	ldi	r24, 0x1D	; 29
    207e:	8b 19       	sub	r24, r11
    2080:	6f 2d       	mov	r22, r15
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    2088:	8c e1       	ldi	r24, 0x1C	; 28
    208a:	8b 19       	sub	r24, r11
    208c:	6f 2d       	mov	r22, r15
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    2094:	8b e1       	ldi	r24, 0x1B	; 27
    2096:	8b 19       	sub	r24, r11
    2098:	6f 2d       	mov	r22, r15
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    20a0:	8a e1       	ldi	r24, 0x1A	; 26
    20a2:	8b 19       	sub	r24, r11
    20a4:	6f 2d       	mov	r22, r15
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    20ac:	89 e1       	ldi	r24, 0x19	; 25
    20ae:	8b 19       	sub	r24, r11
    20b0:	6f 2d       	mov	r22, r15
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	}
	if(cell&0b0010){
    20b8:	c1 fe       	sbrs	r12, 1
    20ba:	24 c0       	rjmp	.+72     	; 0x2104 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    20bc:	61 2f       	mov	r22, r17
    20be:	6f 5f       	subi	r22, 0xFF	; 255
    20c0:	8e 2d       	mov	r24, r14
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    20c8:	61 2f       	mov	r22, r17
    20ca:	6e 5f       	subi	r22, 0xFE	; 254
    20cc:	8e 2d       	mov	r24, r14
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    20d4:	61 2f       	mov	r22, r17
    20d6:	6d 5f       	subi	r22, 0xFD	; 253
    20d8:	8e 2d       	mov	r24, r14
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    20e0:	61 2f       	mov	r22, r17
    20e2:	6c 5f       	subi	r22, 0xFC	; 252
    20e4:	8e 2d       	mov	r24, r14
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    20ec:	61 2f       	mov	r22, r17
    20ee:	6b 5f       	subi	r22, 0xFB	; 251
    20f0:	8e 2d       	mov	r24, r14
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    20f8:	61 2f       	mov	r22, r17
    20fa:	6a 5f       	subi	r22, 0xFA	; 250
    20fc:	8e 2d       	mov	r24, r14
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	}
	if(cell&0b0001){
    2104:	c0 fe       	sbrs	r12, 0
    2106:	25 c0       	rjmp	.+74     	; 0x2152 <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    2108:	8b 2d       	mov	r24, r11
    210a:	80 95       	com	r24
    210c:	81 5e       	subi	r24, 0xE1	; 225
    210e:	61 2f       	mov	r22, r17
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    2116:	8d e1       	ldi	r24, 0x1D	; 29
    2118:	8b 19       	sub	r24, r11
    211a:	61 2f       	mov	r22, r17
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    2122:	8c e1       	ldi	r24, 0x1C	; 28
    2124:	8b 19       	sub	r24, r11
    2126:	61 2f       	mov	r22, r17
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    212e:	8b e1       	ldi	r24, 0x1B	; 27
    2130:	8b 19       	sub	r24, r11
    2132:	61 2f       	mov	r22, r17
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    213a:	8a e1       	ldi	r24, 0x1A	; 26
    213c:	8b 19       	sub	r24, r11
    213e:	61 2f       	mov	r22, r17
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    2146:	89 e1       	ldi	r24, 0x19	; 25
    2148:	8b 19       	sub	r24, r11
    214a:	61 2f       	mov	r22, r17
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	}	
	if(isrobot){
    2152:	aa 20       	and	r10, r10
    2154:	e1 f1       	breq	.+120    	; 0x21ce <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    2156:	bc e1       	ldi	r27, 0x1C	; 28
    2158:	eb 2e       	mov	r14, r27
    215a:	eb 18       	sub	r14, r11
    215c:	a3 e0       	ldi	r26, 0x03	; 3
    215e:	ca 2e       	mov	r12, r26
    2160:	c1 0e       	add	r12, r17
    2162:	8e 2d       	mov	r24, r14
    2164:	6c 2d       	mov	r22, r12
    2166:	4a 2d       	mov	r20, r10
    2168:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    216c:	fb e1       	ldi	r31, 0x1B	; 27
    216e:	ff 2e       	mov	r15, r31
    2170:	fb 18       	sub	r15, r11
    2172:	8f 2d       	mov	r24, r15
    2174:	6c 2d       	mov	r22, r12
    2176:	4a 2d       	mov	r20, r10
    2178:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    217c:	01 2f       	mov	r16, r17
    217e:	0c 5f       	subi	r16, 0xFC	; 252
    2180:	8e 2d       	mov	r24, r14
    2182:	60 2f       	mov	r22, r16
    2184:	4a 2d       	mov	r20, r10
    2186:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    218a:	8f 2d       	mov	r24, r15
    218c:	60 2f       	mov	r22, r16
    218e:	4a 2d       	mov	r20, r10
    2190:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		
		switch(orent){
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	88 16       	cp	r8, r24
    2198:	71 f0       	breq	.+28     	; 0x21b6 <printCell+0x208>
    219a:	88 16       	cp	r8, r24
    219c:	40 f0       	brcs	.+16     	; 0x21ae <printCell+0x200>
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	88 16       	cp	r8, r24
    21a2:	61 f0       	breq	.+24     	; 0x21bc <printCell+0x20e>
    21a4:	83 e0       	ldi	r24, 0x03	; 3
    21a6:	88 16       	cp	r8, r24
    21a8:	09 f0       	breq	.+2      	; 0x21ac <printCell+0x1fe>
    21aa:	4a c0       	rjmp	.+148    	; 0x2240 <printCell+0x292>
    21ac:	0b c0       	rjmp	.+22     	; 0x21c4 <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    21ae:	8d e1       	ldi	r24, 0x1D	; 29
    21b0:	8b 19       	sub	r24, r11
    21b2:	6c 2d       	mov	r22, r12
    21b4:	0a c0       	rjmp	.+20     	; 0x21ca <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    21b6:	1b 5f       	subi	r17, 0xFB	; 251
    21b8:	8e 2d       	mov	r24, r14
    21ba:	06 c0       	rjmp	.+12     	; 0x21c8 <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    21bc:	8a e1       	ldi	r24, 0x1A	; 26
    21be:	8b 19       	sub	r24, r11
    21c0:	60 2f       	mov	r22, r16
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    21c4:	1e 5f       	subi	r17, 0xFE	; 254
    21c6:	8f 2d       	mov	r24, r15
    21c8:	61 2f       	mov	r22, r17
    21ca:	4a 2d       	mov	r20, r10
    21cc:	37 c0       	rjmp	.+110    	; 0x223c <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    21ce:	77 20       	and	r7, r7
    21d0:	b9 f1       	breq	.+110    	; 0x2240 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    21d2:	ec e1       	ldi	r30, 0x1C	; 28
    21d4:	ce 2e       	mov	r12, r30
    21d6:	cb 18       	sub	r12, r11
    21d8:	73 e0       	ldi	r23, 0x03	; 3
    21da:	e7 2e       	mov	r14, r23
    21dc:	e1 0e       	add	r14, r17
    21de:	8c 2d       	mov	r24, r12
    21e0:	6e 2d       	mov	r22, r14
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    21e8:	0b e1       	ldi	r16, 0x1B	; 27
    21ea:	0b 19       	sub	r16, r11
    21ec:	80 2f       	mov	r24, r16
    21ee:	6e 2d       	mov	r22, r14
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    21f6:	64 e0       	ldi	r22, 0x04	; 4
    21f8:	f6 2e       	mov	r15, r22
    21fa:	f1 0e       	add	r15, r17
    21fc:	8c 2d       	mov	r24, r12
    21fe:	6f 2d       	mov	r22, r15
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    2206:	80 2f       	mov	r24, r16
    2208:	6f 2d       	mov	r22, r15
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    2210:	8d e1       	ldi	r24, 0x1D	; 29
    2212:	8b 19       	sub	r24, r11
    2214:	6e 2d       	mov	r22, r14
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    221c:	1b 5f       	subi	r17, 0xFB	; 251
    221e:	8c 2d       	mov	r24, r12
    2220:	61 2f       	mov	r22, r17
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    2228:	8a e1       	ldi	r24, 0x1A	; 26
    222a:	8b 19       	sub	r24, r11
    222c:	6f 2d       	mov	r22, r15
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    2234:	13 50       	subi	r17, 0x03	; 3
    2236:	80 2f       	mov	r24, r16
    2238:	61 2f       	mov	r22, r17
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		}
}
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	cf 90       	pop	r12
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	9f 90       	pop	r9
    2252:	8f 90       	pop	r8
    2254:	7f 90       	pop	r7
    2256:	08 95       	ret

00002258 <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    2258:	9f 92       	push	r9
    225a:	af 92       	push	r10
    225c:	bf 92       	push	r11
    225e:	cf 92       	push	r12
    2260:	df 92       	push	r13
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    2270:	80 91 e6 06 	lds	r24, 0x06E6
    2274:	a8 2e       	mov	r10, r24
    2276:	a6 94       	lsr	r10
    2278:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    227a:	43 e0       	ldi	r20, 0x03	; 3
    227c:	b4 2e       	mov	r11, r20
    227e:	b8 22       	and	r11, r24
    2280:	cc 24       	eor	r12, r12
    2282:	dd 24       	eor	r13, r13
    2284:	1e c0       	rjmp	.+60     	; 0x22c2 <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    2286:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    2288:	fa 14       	cp	r15, r10
    228a:	19 f0       	breq	.+6      	; 0x2292 <printMap+0x3a>
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	06 c0       	rjmp	.+12     	; 0x229e <printMap+0x46>
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	1b 15       	cp	r17, r11
    2298:	11 f4       	brne	.+4      	; 0x229e <printMap+0x46>
    229a:	21 e0       	ldi	r18, 0x01	; 1
    229c:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    229e:	6f 2d       	mov	r22, r15
    22a0:	41 2f       	mov	r20, r17
    22a2:	00 91 e4 05 	lds	r16, 0x05E4
    22a6:	e9 2c       	mov	r14, r9
    22a8:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    22ac:	1f 5f       	subi	r17, 0xFF	; 255
    22ae:	21 96       	adiw	r28, 0x01	; 1
    22b0:	14 30       	cpi	r17, 0x04	; 4
    22b2:	49 f7       	brne	.-46     	; 0x2286 <printMap+0x2e>
    22b4:	08 94       	sec
    22b6:	c1 1c       	adc	r12, r1
    22b8:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    22ba:	84 e0       	ldi	r24, 0x04	; 4
    22bc:	c8 16       	cp	r12, r24
    22be:	d1 04       	cpc	r13, r1
    22c0:	51 f0       	breq	.+20     	; 0x22d6 <printMap+0x7e>
    22c2:	fc 2c       	mov	r15, r12
    22c4:	e6 01       	movw	r28, r12
    22c6:	cc 0f       	add	r28, r28
    22c8:	dd 1f       	adc	r29, r29
    22ca:	cc 0f       	add	r28, r28
    22cc:	dd 1f       	adc	r29, r29
    22ce:	cc 53       	subi	r28, 0x3C	; 60
    22d0:	dc 4f       	sbci	r29, 0xFC	; 252
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	d8 cf       	rjmp	.-80     	; 0x2286 <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	ff 90       	pop	r15
    22e0:	ef 90       	pop	r14
    22e2:	df 90       	pop	r13
    22e4:	cf 90       	pop	r12
    22e6:	bf 90       	pop	r11
    22e8:	af 90       	pop	r10
    22ea:	9f 90       	pop	r9
    22ec:	08 95       	ret

000022ee <checkOdometry>:
*					sets the flag whe appropriate
********************************************************************/
char checkOdometry( char reset )
{	
	// Check for a reset
	if (reset){
    22ee:	88 23       	and	r24, r24
    22f0:	91 f0       	breq	.+36     	; 0x2316 <checkOdometry+0x28>
		odometryTrigger = 0;
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e0       	ldi	r26, 0x00	; 0
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	80 93 cf 05 	sts	0x05CF, r24
    22fe:	90 93 d0 05 	sts	0x05D0, r25
    2302:	a0 93 d1 05 	sts	0x05D1, r26
    2306:	b0 93 d2 05 	sts	0x05D2, r27
		STEPPER_set_steps(STEPPER_BOTH,odometryTrigger);
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	70 e0       	ldi	r23, 0x00	; 0
    2310:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_steps>
    2314:	17 c0       	rjmp	.+46     	; 0x2344 <checkOdometry+0x56>
		return SUCCESS;
	}

	// Get the current number of steps
	curr_step = STEPPER_get_nSteps();
    2316:	0e 94 75 1c 	call	0x38ea	; 0x38ea <STEPPER_get_nSteps>
    231a:	60 93 e2 06 	sts	0x06E2, r22
    231e:	70 93 e3 06 	sts	0x06E3, r23
    2322:	80 93 e4 06 	sts	0x06E4, r24
    2326:	90 93 e5 06 	sts	0x06E5, r25
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	80 91 e4 06 	lds	r24, 0x06E4
    2330:	90 91 e5 06 	lds	r25, 0x06E5
    2334:	20 91 e2 06 	lds	r18, 0x06E2
    2338:	30 91 e3 06 	lds	r19, 0x06E3
    233c:	82 0f       	add	r24, r18
    233e:	93 1f       	adc	r25, r19
    2340:	89 2b       	or	r24, r25
    2342:	09 f4       	brne	.+2      	; 0x2346 <checkOdometry+0x58>
    2344:	41 e0       	ldi	r20, 0x01	; 1
	}

	// But if not zero
	//then return fial
	return FAIL;
}
    2346:	84 2f       	mov	r24, r20
    2348:	08 95       	ret

0000234a <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{
    234a:	5f 92       	push	r5
    234c:	6f 92       	push	r6
    234e:	7f 92       	push	r7
    2350:	8f 92       	push	r8
    2352:	9f 92       	push	r9
    2354:	af 92       	push	r10
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
	// Check for collision
	if(ftIR <= IR_OBST_F_THRESH){
    2368:	e0 90 47 05 	lds	r14, 0x0547
    236c:	f0 90 48 05 	lds	r15, 0x0548
    2370:	00 91 49 05 	lds	r16, 0x0549
    2374:	10 91 4a 05 	lds	r17, 0x054A
    2378:	c8 01       	movw	r24, r16
    237a:	b7 01       	movw	r22, r14
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    2388:	18 16       	cp	r1, r24
    238a:	14 f0       	brlt	.+4      	; 0x2390 <moveWall+0x46>
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	1b c1       	rjmp	.+566    	; 0x25c6 <moveWall+0x27c>
		return SUCCESS;
	}

	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    2390:	55 24       	eor	r5, r5
    2392:	c8 01       	movw	r24, r16
    2394:	b7 01       	movw	r22, r14
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	14 f4       	brge	.+4      	; 0x23aa <moveWall+0x60>
    23a6:	55 24       	eor	r5, r5
    23a8:	53 94       	inc	r5
    23aa:	a0 90 ee 06 	lds	r10, 0x06EE
    23ae:	b0 90 ef 06 	lds	r11, 0x06EF
    23b2:	c0 90 f0 06 	lds	r12, 0x06F0
    23b6:	d0 90 f1 06 	lds	r13, 0x06F1
    23ba:	60 90 ea 06 	lds	r6, 0x06EA
    23be:	70 90 eb 06 	lds	r7, 0x06EB
    23c2:	80 90 ec 06 	lds	r8, 0x06EC
    23c6:	90 90 ed 06 	lds	r9, 0x06ED
	if(!isWall){
    23ca:	55 20       	and	r5, r5
    23cc:	41 f5       	brne	.+80     	; 0x241e <moveWall+0xd4>
    23ce:	60 91 51 05 	lds	r22, 0x0551
    23d2:	70 91 52 05 	lds	r23, 0x0552
    23d6:	80 91 53 05 	lds	r24, 0x0553
    23da:	90 91 54 05 	lds	r25, 0x0554
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    23ea:	87 fd       	sbrc	r24, 7
    23ec:	18 c0       	rjmp	.+48     	; 0x241e <moveWall+0xd4>
    23ee:	c6 01       	movw	r24, r12
    23f0:	b5 01       	movw	r22, r10
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e5       	ldi	r20, 0x50	; 80
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    23fe:	87 fd       	sbrc	r24, 7
    2400:	0e c0       	rjmp	.+28     	; 0x241e <moveWall+0xd4>
    2402:	c4 01       	movw	r24, r8
    2404:	b3 01       	movw	r22, r6
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e5       	ldi	r20, 0x50	; 80
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    2412:	87 fd       	sbrc	r24, 7
    2414:	04 c0       	rjmp	.+8      	; 0x241e <moveWall+0xd4>
	
		// Update the speeds the same to go forward
		STEPPER_set_speed(STEPPER_BOTH, MAX_SPEED_STEP);
    2416:	82 e0       	ldi	r24, 0x02	; 2
    2418:	64 ef       	ldi	r22, 0xF4	; 244
    241a:	71 e0       	ldi	r23, 0x01	; 1
    241c:	cf c0       	rjmp	.+414    	; 0x25bc <moveWall+0x272>
	BOOL isLEFT;
	float error;	
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    241e:	c6 01       	movw	r24, r12
    2420:	b5 01       	movw	r22, r10
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e5       	ldi	r20, 0x50	; 80
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__gesf2>
    242e:	18 16       	cp	r1, r24
    2430:	64 f4       	brge	.+24     	; 0x244a <moveWall+0x100>
		rtIR = IR_WALL_R_THRESH;
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a0 e5       	ldi	r26, 0x50	; 80
    2438:	b1 e4       	ldi	r27, 0x41	; 65
    243a:	80 93 ee 06 	sts	0x06EE, r24
    243e:	90 93 ef 06 	sts	0x06EF, r25
    2442:	a0 93 f0 06 	sts	0x06F0, r26
    2446:	b0 93 f1 06 	sts	0x06F1, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    244a:	c4 01       	movw	r24, r8
    244c:	b3 01       	movw	r22, r6
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e5       	ldi	r20, 0x50	; 80
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__gesf2>
    245a:	18 16       	cp	r1, r24
    245c:	14 f0       	brlt	.+4      	; 0x2462 <moveWall+0x118>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	0d c0       	rjmp	.+26     	; 0x247c <moveWall+0x132>
		ltIR = IR_WALL_L_THRESH;
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e5       	ldi	r26, 0x50	; 80
    2468:	b1 e4       	ldi	r27, 0x41	; 65
    246a:	80 93 ea 06 	sts	0x06EA, r24
    246e:	90 93 eb 06 	sts	0x06EB, r25
    2472:	a0 93 ec 06 	sts	0x06EC, r26
    2476:	b0 93 ed 06 	sts	0x06ED, r27
    247a:	81 e0       	ldi	r24, 0x01	; 1
		isLEFT = 1;
	}
	
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    247c:	55 20       	and	r5, r5
    247e:	21 f1       	breq	.+72     	; 0x24c8 <moveWall+0x17e>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2480:	88 23       	and	r24, r24
    2482:	29 f0       	breq	.+10     	; 0x248e <moveWall+0x144>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	8a e7       	ldi	r24, 0x7A	; 122
    248a:	94 e4       	ldi	r25, 0x44	; 68
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <moveWall+0x14c>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	8a e7       	ldi	r24, 0x7A	; 122
    2494:	94 ec       	ldi	r25, 0xC4	; 196
    2496:	a8 01       	movw	r20, r16
    2498:	97 01       	movw	r18, r14
    249a:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    249e:	20 91 ea 06 	lds	r18, 0x06EA
    24a2:	30 91 eb 06 	lds	r19, 0x06EB
    24a6:	40 91 ec 06 	lds	r20, 0x06EC
    24aa:	50 91 ed 06 	lds	r21, 0x06ED
    24ae:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    24b2:	9b 01       	movw	r18, r22
    24b4:	ac 01       	movw	r20, r24
    24b6:	60 91 ee 06 	lds	r22, 0x06EE
    24ba:	70 91 ef 06 	lds	r23, 0x06EF
    24be:	80 91 f0 06 	lds	r24, 0x06F0
    24c2:	90 91 f1 06 	lds	r25, 0x06F1
    24c6:	10 c0       	rjmp	.+32     	; 0x24e8 <moveWall+0x19e>
	// the error is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    24c8:	60 91 ee 06 	lds	r22, 0x06EE
    24cc:	70 91 ef 06 	lds	r23, 0x06EF
    24d0:	80 91 f0 06 	lds	r24, 0x06F0
    24d4:	90 91 f1 06 	lds	r25, 0x06F1
    24d8:	20 91 ea 06 	lds	r18, 0x06EA
    24dc:	30 91 eb 06 	lds	r19, 0x06EB
    24e0:	40 91 ec 06 	lds	r20, 0x06EC
    24e4:	50 91 ed 06 	lds	r21, 0x06ED
    24e8:	0e 94 af 2c 	call	0x595e	; 0x595e <__subsf3>
    24ec:	e6 2f       	mov	r30, r22
	}

	// Use the PID controller function to calculate error
	float effort = pidController(error, 0);
    24ee:	2e 2f       	mov	r18, r30
    24f0:	37 2f       	mov	r19, r23
    24f2:	48 2f       	mov	r20, r24
    24f4:	59 2f       	mov	r21, r25
    24f6:	b9 01       	movw	r22, r18
    24f8:	ca 01       	movw	r24, r20
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2500:	7b 01       	movw	r14, r22
    2502:	8c 01       	movw	r16, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2504:	0e 94 80 2d 	call	0x5b00	; 0x5b00 <__fixsfsi>
    2508:	eb 01       	movw	r28, r22
    250a:	77 ff       	sbrs	r23, 7
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <moveWall+0x1ca>
    250e:	d0 95       	com	r29
    2510:	c1 95       	neg	r28
    2512:	df 4f       	sbci	r29, 0xFF	; 255
    2514:	c5 36       	cpi	r28, 0x65	; 101
    2516:	d1 05       	cpc	r29, r1
    2518:	fc f0       	brlt	.+62     	; 0x2558 <moveWall+0x20e>
    251a:	c8 01       	movw	r24, r16
    251c:	b7 01       	movw	r22, r14
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <__cmpsf2>
    252a:	88 23       	and	r24, r24
    252c:	a9 f0       	breq	.+42     	; 0x2558 <moveWall+0x20e>
		effort = MAX_EFFORT*(effort/abs(effort));
    252e:	be 01       	movw	r22, r28
    2530:	88 27       	eor	r24, r24
    2532:	77 fd       	sbrc	r23, 7
    2534:	80 95       	com	r24
    2536:	98 2f       	mov	r25, r24
    2538:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__floatsisf>
    253c:	9b 01       	movw	r18, r22
    253e:	ac 01       	movw	r20, r24
    2540:	c8 01       	movw	r24, r16
    2542:	b7 01       	movw	r22, r14
    2544:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	48 ec       	ldi	r20, 0xC8	; 200
    254e:	52 e4       	ldi	r21, 0x42	; 66
    2550:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    2554:	7b 01       	movw	r14, r22
    2556:	8c 01       	movw	r16, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED_STEP/2 + (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
    2558:	c8 01       	movw	r24, r16
    255a:	b7 01       	movw	r22, r14
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	48 ec       	ldi	r20, 0xC8	; 200
    2562:	52 e4       	ldi	r21, 0x42	; 66
    2564:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    2568:	7b 01       	movw	r14, r22
    256a:	8c 01       	movw	r16, r24
	float stepper_speed_R = MAX_SPEED_STEP/2 - (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
	
	// Update the speeds the same to move with wall
	STEPPER_set_speed(STEPPER_LEFT, stepper_speed_L);
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a e7       	ldi	r20, 0x7A	; 122
    2572:	53 e4       	ldi	r21, 0x43	; 67
    2574:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a e7       	ldi	r20, 0x7A	; 122
    257e:	53 e4       	ldi	r21, 0x43	; 67
    2580:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    2584:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    2588:	9b 01       	movw	r18, r22
    258a:	ac 01       	movw	r20, r24
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	b9 01       	movw	r22, r18
    2590:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <STEPPER_set_speed>
	STEPPER_set_speed(STEPPER_RIGHT, stepper_speed_R);
    2594:	c8 01       	movw	r24, r16
    2596:	b7 01       	movw	r22, r14
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a e7       	ldi	r20, 0x7A	; 122
    259e:	53 ec       	ldi	r21, 0xC3	; 195
    25a0:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a e7       	ldi	r20, 0x7A	; 122
    25aa:	53 e4       	ldi	r21, 0x43	; 67
    25ac:	0e 94 b0 2c 	call	0x5960	; 0x5960 <__addsf3>
    25b0:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__fixunssfsi>
    25b4:	9b 01       	movw	r18, r22
    25b6:	ac 01       	movw	r20, r24
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	b9 01       	movw	r22, r18
    25bc:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <STEPPER_set_speed>
	
	// Return weather or not we are finished
	return checkOdometry(NO_RESET);
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	0e 94 77 11 	call	0x22ee	; 0x22ee <checkOdometry>
}
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	9f 90       	pop	r9
    25dc:	8f 90       	pop	r8
    25de:	7f 90       	pop	r7
    25e0:	6f 90       	pop	r6
    25e2:	5f 90       	pop	r5
    25e4:	08 95       	ret

000025e6 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    25e6:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <ATTINY_open>
    25ea:	90 93 cc 04 	sts	0x04CC, r25
    25ee:	80 93 cb 04 	sts	0x04CB, r24
	LEopstat = LED_open(); //open the LED module
    25f2:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LED_open>
    25f6:	90 93 ca 04 	sts	0x04CA, r25
    25fa:	80 93 c9 04 	sts	0x04C9, r24
	LCopstat = LCD_open(); //open the LCD module
    25fe:	0e 94 15 1a 	call	0x342a	; 0x342a <LCD_open>
    2602:	90 93 c8 04 	sts	0x04C8, r25
    2606:	80 93 c7 04 	sts	0x04C7, r24
	STEPPER_open(); // Open STEPPER module for use
    260a:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in tone mode
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	0e 94 1b 1c 	call	0x3836	; 0x3836 <SPKR_open>
	
	LED_open();
    2614:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <LED_open>
	I2C_open();
    2618:	0e 94 42 22 	call	0x4484	; 0x4484 <I2C_open>
	ADC_open();//open the ADC module
    261c:	0e 94 82 19 	call	0x3304	; 0x3304 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    2626:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <checkIR>
	prefilter(1);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    2630:	8f ee       	ldi	r24, 0xEF	; 239
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	a5 e8       	ldi	r26, 0x85	; 133
    2636:	b1 e4       	ldi	r27, 0x41	; 65
    2638:	80 93 cf 05 	sts	0x05CF, r24
    263c:	90 93 d0 05 	sts	0x05D0, r25
    2640:	a0 93 d1 05 	sts	0x05D1, r26
    2644:	b0 93 d2 05 	sts	0x05D2, r27
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	0a c0       	rjmp	.+20     	; 0x2662 <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    264e:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	80 32       	cpi	r24, 0x20	; 32
    2654:	91 05       	cpc	r25, r1
    2656:	d9 f7       	brne	.-10     	; 0x264e <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    2658:	2f 5f       	subi	r18, 0xFF	; 255
    265a:	3f 4f       	sbci	r19, 0xFF	; 255
    265c:	24 30       	cpi	r18, 0x04	; 4
    265e:	31 05       	cpc	r19, r1
    2660:	59 f0       	breq	.+22     	; 0x2678 <initializeRobot+0x92>
    2662:	f9 01       	movw	r30, r18
    2664:	55 e0       	ldi	r21, 0x05	; 5
    2666:	ee 0f       	add	r30, r30
    2668:	ff 1f       	adc	r31, r31
    266a:	5a 95       	dec	r21
    266c:	e1 f7       	brne	.-8      	; 0x2666 <initializeRobot+0x80>
    266e:	ee 59       	subi	r30, 0x9E	; 158
    2670:	f9 4f       	sbci	r31, 0xF9	; 249
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	eb cf       	rjmp	.-42     	; 0x264e <initializeRobot+0x68>
    2678:	08 95       	ret

0000267a <localize>:
* Output Return:	none
* Overview:			localize the robot
********************************************************************/
void localize (void)
{	
}
    267a:	08 95       	ret

0000267c <fourNeighborSearch>:
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    267c:	48 2f       	mov	r20, r24
    267e:	46 95       	lsr	r20
    2680:	46 95       	lsr	r20
	unsigned char curCol = (curCell&0b0011);
    2682:	58 2f       	mov	r21, r24
    2684:	53 70       	andi	r21, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 0){
    2686:	a4 2f       	mov	r26, r20
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	25 2f       	mov	r18, r21
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	fd 01       	movw	r30, r26
    2690:	ee 0f       	add	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	e2 0f       	add	r30, r18
    269a:	f3 1f       	adc	r31, r19
    269c:	e0 5c       	subi	r30, 0xC0	; 192
    269e:	fb 4f       	sbci	r31, 0xFB	; 251
    26a0:	80 81       	ld	r24, Z
    26a2:	88 23       	and	r24, r24
    26a4:	11 f4       	brne	.+4      	; 0x26aa <fourNeighborSearch+0x2e>
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	08 95       	ret
	
	// Perform a 4-neighbor search and store the lowest value
	
	// LCD_clear();
	//Check the north cell
	curRow--;
    26aa:	e4 2f       	mov	r30, r20
    26ac:	e1 50       	subi	r30, 0x01	; 1
	if((curRow)<WORLD_ROW_SIZE){
    26ae:	e4 30       	cpi	r30, 0x04	; 4
    26b0:	80 f4       	brcc	.+32     	; 0x26d2 <fourNeighborSearch+0x56>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	e2 0f       	add	r30, r18
    26be:	f3 1f       	adc	r31, r19
    26c0:	e0 5c       	subi	r30, 0xC0	; 192
    26c2:	fb 4f       	sbci	r31, 0xFB	; 251
    26c4:	e0 81       	ld	r30, Z
		// LCD_printf("NORTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    26c6:	e4 36       	cpi	r30, 0x64	; 100
    26c8:	20 f4       	brcc	.+8      	; 0x26d2 <fourNeighborSearch+0x56>
			minVal = curVal;
			nextOrientation = NORTH;
    26ca:	10 92 e5 05 	sts	0x05E5, r1
    26ce:	9e 2f       	mov	r25, r30
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <fourNeighborSearch+0x58>
    26d2:	94 e6       	ldi	r25, 0x64	; 100
		}
	}
	
	curRow++;
	curRow++;
    26d4:	84 2f       	mov	r24, r20
    26d6:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the south cell
	if((curRow)<WORLD_ROW_SIZE){
    26d8:	84 30       	cpi	r24, 0x04	; 4
    26da:	88 f4       	brcc	.+34     	; 0x26fe <fourNeighborSearch+0x82>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    26dc:	e8 2f       	mov	r30, r24
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	ee 0f       	add	r30, r30
    26e6:	ff 1f       	adc	r31, r31
    26e8:	e2 0f       	add	r30, r18
    26ea:	f3 1f       	adc	r31, r19
    26ec:	e0 5c       	subi	r30, 0xC0	; 192
    26ee:	fb 4f       	sbci	r31, 0xFB	; 251
    26f0:	e0 81       	ld	r30, Z
		// LCD_printf("SOUTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    26f2:	e9 17       	cp	r30, r25
    26f4:	20 f4       	brcc	.+8      	; 0x26fe <fourNeighborSearch+0x82>
			minVal = curVal;
			nextOrientation = SOUTH;
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	80 93 e5 05 	sts	0x05E5, r24
    26fc:	9e 2f       	mov	r25, r30
		}
	}
	
	curRow--;
	curCol++;
    26fe:	85 2f       	mov	r24, r21
    2700:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the east cell
	if((curCol)<WORLD_COLUMN_SIZE){
    2702:	84 30       	cpi	r24, 0x04	; 4
    2704:	81 f0       	breq	.+32     	; 0x2726 <fourNeighborSearch+0xaa>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
    2706:	fd 01       	movw	r30, r26
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	e8 0f       	add	r30, r24
    2712:	f1 1d       	adc	r31, r1
    2714:	e0 5c       	subi	r30, 0xC0	; 192
    2716:	fb 4f       	sbci	r31, 0xFB	; 251
    2718:	e0 81       	ld	r30, Z
		// LCD_printf("EAST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    271a:	e9 17       	cp	r30, r25
    271c:	20 f4       	brcc	.+8      	; 0x2726 <fourNeighborSearch+0xaa>
			minVal = curVal;
			nextOrientation = EAST;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	80 93 e5 05 	sts	0x05E5, r24
    2724:	9e 2f       	mov	r25, r30
		}
	}
	
	curCol--;
	curCol--;
    2726:	85 2f       	mov	r24, r21
    2728:	81 50       	subi	r24, 0x01	; 1
	// Check the west cell
	if((curCol)<WORLD_COLUMN_SIZE){
    272a:	84 30       	cpi	r24, 0x04	; 4
    272c:	80 f4       	brcc	.+32     	; 0x274e <fourNeighborSearch+0xd2>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
		// LCD_printf("WEST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    272e:	aa 0f       	add	r26, r26
    2730:	bb 1f       	adc	r27, r27
    2732:	aa 0f       	add	r26, r26
    2734:	bb 1f       	adc	r27, r27
    2736:	a8 0f       	add	r26, r24
    2738:	b1 1d       	adc	r27, r1
    273a:	a0 5c       	subi	r26, 0xC0	; 192
    273c:	bb 4f       	sbci	r27, 0xFB	; 251
    273e:	8c 91       	ld	r24, X
    2740:	89 17       	cp	r24, r25
    2742:	28 f4       	brcc	.+10     	; 0x274e <fourNeighborSearch+0xd2>
			minVal = curVal;
			nextOrientation = WEST;
    2744:	83 e0       	ldi	r24, 0x03	; 3
    2746:	80 93 e5 05 	sts	0x05E5, r24
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	08 95       	ret
    274e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    2750:	08 95       	ret

00002752 <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
void wavefrontMake(void)
{
    2752:	bf 92       	push	r11
    2754:	cf 92       	push	r12
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
	// User-defined goal location
	// unsigned char goalLocation = currentGoalWorld;
	// Extract x and y goal location
	int rowGoal = (currentGoalWorld>>2);
    2764:	80 91 55 05 	lds	r24, 0x0555
	int colGoal = (currentGoalWorld&0b0011);
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	23 70       	andi	r18, 0x03	; 3
    276e:	30 70       	andi	r19, 0x00	; 0
    2770:	86 95       	lsr	r24
    2772:	86 95       	lsr	r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	cc 27       	eor	r28, r28
    2778:	dd 27       	eor	r29, r29
    277a:	c8 1b       	sub	r28, r24
    277c:	d9 0b       	sbc	r29, r25
    277e:	00 e0       	ldi	r16, 0x00	; 0
    2780:	10 e0       	ldi	r17, 0x00	; 0
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    2782:	cc 24       	eor	r12, r12
    2784:	dd 24       	eor	r13, r13
    2786:	c2 1a       	sub	r12, r18
    2788:	d3 0a       	sbc	r13, r19
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
				ROBOT_METRIC_WORLD[row][col] = 99;
    278a:	f3 e6       	ldi	r31, 0x63	; 99
    278c:	bf 2e       	mov	r11, r31
    278e:	25 c0       	rjmp	.+74     	; 0x27da <wavefrontMake+0x88>
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
    2790:	8c 91       	ld	r24, X
    2792:	8f 30       	cpi	r24, 0x0F	; 15
    2794:	11 f4       	brne	.+4      	; 0x279a <wavefrontMake+0x48>
				ROBOT_METRIC_WORLD[row][col] = 99;
    2796:	b0 82       	st	Z, r11
    2798:	11 c0       	rjmp	.+34     	; 0x27bc <wavefrontMake+0x6a>
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
    279a:	9a 01       	movw	r18, r20
    279c:	57 ff       	sbrs	r21, 7
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <wavefrontMake+0x56>
    27a0:	22 27       	eor	r18, r18
    27a2:	33 27       	eor	r19, r19
    27a4:	24 1b       	sub	r18, r20
    27a6:	35 0b       	sbc	r19, r21
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
    27a8:	22 9f       	mul	r18, r18
    27aa:	c0 01       	movw	r24, r0
    27ac:	23 9f       	mul	r18, r19
    27ae:	90 0d       	add	r25, r0
    27b0:	32 9f       	mul	r19, r18
    27b2:	90 0d       	add	r25, r0
    27b4:	11 24       	eor	r1, r1
    27b6:	8e 0d       	add	r24, r14
    27b8:	9f 1d       	adc	r25, r15
    27ba:	80 83       	st	Z, r24
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
    27bc:	6f 5f       	subi	r22, 0xFF	; 255
    27be:	7f 4f       	sbci	r23, 0xFF	; 255
    27c0:	11 96       	adiw	r26, 0x01	; 1
    27c2:	31 96       	adiw	r30, 0x01	; 1
    27c4:	4f 5f       	subi	r20, 0xFF	; 255
    27c6:	5f 4f       	sbci	r21, 0xFF	; 255
    27c8:	64 30       	cpi	r22, 0x04	; 4
    27ca:	71 05       	cpc	r23, r1
    27cc:	09 f7       	brne	.-62     	; 0x2790 <wavefrontMake+0x3e>
	unsigned int rowDelta, colDelta;
	int row, col;
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
    27ce:	0f 5f       	subi	r16, 0xFF	; 255
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	21 96       	adiw	r28, 0x01	; 1
    27d4:	04 30       	cpi	r16, 0x04	; 4
    27d6:	11 05       	cpc	r17, r1
    27d8:	e9 f0       	breq	.+58     	; 0x2814 <wavefrontMake+0xc2>
				ROBOT_METRIC_WORLD[row][col] = 99;
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
    27da:	ce 01       	movw	r24, r28
    27dc:	d7 ff       	sbrs	r29, 7
    27de:	04 c0       	rjmp	.+8      	; 0x27e8 <wavefrontMake+0x96>
    27e0:	88 27       	eor	r24, r24
    27e2:	99 27       	eor	r25, r25
    27e4:	8c 1b       	sub	r24, r28
    27e6:	9d 0b       	sbc	r25, r29
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    27e8:	88 9f       	mul	r24, r24
    27ea:	70 01       	movw	r14, r0
    27ec:	89 9f       	mul	r24, r25
    27ee:	f0 0c       	add	r15, r0
    27f0:	98 9f       	mul	r25, r24
    27f2:	f0 0c       	add	r15, r0
    27f4:	11 24       	eor	r1, r1
    27f6:	c8 01       	movw	r24, r16
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	dc 01       	movw	r26, r24
    2802:	ac 53       	subi	r26, 0x3C	; 60
    2804:	bc 4f       	sbci	r27, 0xFC	; 252
    2806:	fc 01       	movw	r30, r24
    2808:	e0 5c       	subi	r30, 0xC0	; 192
    280a:	fb 4f       	sbci	r31, 0xFB	; 251
    280c:	a6 01       	movw	r20, r12
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	be cf       	rjmp	.-132    	; 0x2790 <wavefrontMake+0x3e>
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
			}
		}
	}
}
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	1f 91       	pop	r17
    281a:	0f 91       	pop	r16
    281c:	ff 90       	pop	r15
    281e:	ef 90       	pop	r14
    2820:	df 90       	pop	r13
    2822:	cf 90       	pop	r12
    2824:	bf 90       	pop	r11
    2826:	08 95       	ret

00002828 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    2828:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    282a:	10 91 e6 06 	lds	r17, 0x06E6
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,TO_MAP_ROTATE);
    282e:	80 91 4f 05 	lds	r24, 0x054F
    2832:	60 91 e4 05 	lds	r22, 0x05E4
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    283c:	e1 2f       	mov	r30, r17
    283e:	e6 95       	lsr	r30
    2840:	e6 95       	lsr	r30
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	ee 0f       	add	r30, r30
    2846:	ff 1f       	adc	r31, r31
    2848:	ee 0f       	add	r30, r30
    284a:	ff 1f       	adc	r31, r31
    284c:	13 70       	andi	r17, 0x03	; 3
    284e:	e1 0f       	add	r30, r17
    2850:	f1 1d       	adc	r31, r1
    2852:	ec 53       	subi	r30, 0x3C	; 60
    2854:	fc 4f       	sbci	r31, 0xFC	; 252
    2856:	80 83       	st	Z, r24
}
    2858:	1f 91       	pop	r17
    285a:	08 95       	ret

0000285c <checkFire>:
* Input Variables:	none
* Output Return:	unsigned char
* Overview:			Checks world for Fires
********************************************************************/
unsigned char checkFire(void)
{
    285c:	ef 92       	push	r14
    285e:	ff 92       	push	r15
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
	// Acquire the current gateway
	unsigned char curGate = currentGateway;
	
	// Acquire the current cell
	unsigned char curRow = (currentCellWorld>>2);
    2864:	00 91 e6 06 	lds	r16, 0x06E6
    2868:	10 2f       	mov	r17, r16
    286a:	16 95       	lsr	r17
    286c:	16 95       	lsr	r17
	unsigned char curCol = (currentCellWorld&0b0011);
    286e:	83 e0       	ldi	r24, 0x03	; 3
    2870:	e8 2e       	mov	r14, r24
    2872:	e0 22       	and	r14, r16
	unsigned char curCell = ROBOT_WORLD[curRow][curCol];
    2874:	e1 2f       	mov	r30, r17
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	ee 0d       	add	r30, r14
    2882:	f1 1d       	adc	r31, r1
    2884:	ec 53       	subi	r30, 0x3C	; 60
    2886:	fc 4f       	sbci	r31, 0xFC	; 252
    2888:	f0 80       	ld	r15, Z
	
	// Rotate the current gateway wrt to current orientation
	curGate = rotateCell (curGate, currentOrientation, TO_MAP_ROTATE);
    288a:	80 91 4f 05 	lds	r24, 0x054F
    288e:	60 91 e4 05 	lds	r22, 0x05E4
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Return the boolean value of the equality
	if (curGate != curCell){
    2898:	8f 15       	cp	r24, r15
    289a:	e9 f0       	breq	.+58     	; 0x28d6 <checkFire+0x7a>
		switch(curGate^curCell){
    289c:	8f 25       	eor	r24, r15
    289e:	82 30       	cpi	r24, 0x02	; 2
    28a0:	61 f0       	breq	.+24     	; 0x28ba <checkFire+0x5e>
    28a2:	83 30       	cpi	r24, 0x03	; 3
    28a4:	18 f4       	brcc	.+6      	; 0x28ac <checkFire+0x50>
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	b1 f4       	brne	.+44     	; 0x28d6 <checkFire+0x7a>
    28aa:	05 c0       	rjmp	.+10     	; 0x28b6 <checkFire+0x5a>
    28ac:	84 30       	cpi	r24, 0x04	; 4
    28ae:	69 f0       	breq	.+26     	; 0x28ca <checkFire+0x6e>
    28b0:	88 30       	cpi	r24, 0x08	; 8
    28b2:	89 f4       	brne	.+34     	; 0x28d6 <checkFire+0x7a>
    28b4:	0e c0       	rjmp	.+28     	; 0x28d2 <checkFire+0x76>
			case 0b0001:
				currentFireCell = (curRow<<2)+(curCol-1);
    28b6:	01 50       	subi	r16, 0x01	; 1
    28b8:	09 c0       	rjmp	.+18     	; 0x28cc <checkFire+0x70>
				break;
			case 0b0010:
				currentFireCell = ((curRow+1)<<2)+(curCol);
    28ba:	1f 5f       	subi	r17, 0xFF	; 255
    28bc:	11 0f       	add	r17, r17
    28be:	11 0f       	add	r17, r17
    28c0:	1e 0d       	add	r17, r14
    28c2:	10 93 76 07 	sts	0x0776, r17
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	07 c0       	rjmp	.+14     	; 0x28d8 <checkFire+0x7c>
				return SUCCESS;
				break;
			case 0b0100:
				currentFireCell = (curRow<<2)+(curCol+1);
    28ca:	0f 5f       	subi	r16, 0xFF	; 255
    28cc:	00 93 76 07 	sts	0x0776, r16
    28d0:	fa cf       	rjmp	.-12     	; 0x28c6 <checkFire+0x6a>
				return SUCCESS;
				break;
			case 0b1000:
				currentFireCell = ((curRow-1)<<2)+(curCol);
    28d2:	11 50       	subi	r17, 0x01	; 1
    28d4:	f3 cf       	rjmp	.-26     	; 0x28bc <checkFire+0x60>
				return SUCCESS;
    28d6:	80 e0       	ldi	r24, 0x00	; 0
		}
		return SUCCESS;
	}
	return FAIL;
	// return 0;
}
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	08 95       	ret

000028e2 <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    28ea:	08 2f       	mov	r16, r24
    28ec:	06 95       	lsr	r16
    28ee:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;			
    28f0:	93 e0       	ldi	r25, 0x03	; 3
    28f2:	f9 2e       	mov	r15, r25
    28f4:	f8 22       	and	r15, r24
		
	switch(curMove){
    28f6:	62 30       	cpi	r22, 0x02	; 2
    28f8:	31 f0       	breq	.+12     	; 0x2906 <shiftMap+0x24>
    28fa:	63 30       	cpi	r22, 0x03	; 3
    28fc:	a9 f0       	breq	.+42     	; 0x2928 <shiftMap+0x46>
    28fe:	61 30       	cpi	r22, 0x01	; 1
    2900:	b1 f4       	brne	.+44     	; 0x292e <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2902:	11 50       	subi	r17, 0x01	; 1
    2904:	12 c0       	rjmp	.+36     	; 0x292a <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2906:	41 30       	cpi	r20, 0x01	; 1
    2908:	49 f0       	breq	.+18     	; 0x291c <shiftMap+0x3a>
    290a:	41 30       	cpi	r20, 0x01	; 1
    290c:	28 f0       	brcs	.+10     	; 0x2918 <shiftMap+0x36>
    290e:	42 30       	cpi	r20, 0x02	; 2
    2910:	39 f0       	breq	.+14     	; 0x2920 <shiftMap+0x3e>
    2912:	43 30       	cpi	r20, 0x03	; 3
    2914:	b9 f4       	brne	.+46     	; 0x2944 <shiftMap+0x62>
    2916:	06 c0       	rjmp	.+12     	; 0x2924 <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    2918:	01 50       	subi	r16, 0x01	; 1
    291a:	14 c0       	rjmp	.+40     	; 0x2944 <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    291c:	f3 94       	inc	r15
    291e:	12 c0       	rjmp	.+36     	; 0x2944 <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    2920:	0f 5f       	subi	r16, 0xFF	; 255
    2922:	10 c0       	rjmp	.+32     	; 0x2944 <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    2924:	fa 94       	dec	r15
    2926:	0e c0       	rjmp	.+28     	; 0x2944 <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2928:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    292a:	13 70       	andi	r17, 0x03	; 3
    292c:	0b c0       	rjmp	.+22     	; 0x2944 <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    292e:	00 d0       	rcall	.+0      	; 0x2930 <shiftMap+0x4e>
    2930:	82 e5       	ldi	r24, 0x52	; 82
    2932:	92 e0       	ldi	r25, 0x02	; 2
    2934:	ed b7       	in	r30, 0x3d	; 61
    2936:	fe b7       	in	r31, 0x3e	; 62
    2938:	92 83       	std	Z+2, r25	; 0x02
    293a:	81 83       	std	Z+1, r24	; 0x01
    293c:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    2944:	10 93 e4 05 	sts	0x05E4, r17
    2948:	00 0f       	add	r16, r16
    294a:	00 0f       	add	r16, r16
	return currentCell;
}
    294c:	80 2f       	mov	r24, r16
    294e:	8f 0d       	add	r24, r15
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	ff 90       	pop	r15
    2956:	08 95       	ret

00002958 <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char row, unsigned char col)
{	
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	18 2f       	mov	r17, r24
    2964:	06 2f       	mov	r16, r22
    2966:	ff 24       	eor	r15, r15
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	2b c0       	rjmp	.+86     	; 0x29c2 <matchBranch+0x6a>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    296c:	15 30       	cpi	r17, 0x05	; 5
    296e:	88 f5       	brcc	.+98     	; 0x29d2 <matchBranch+0x7a>
    2970:	05 30       	cpi	r16, 0x05	; 5
    2972:	78 f5       	brcc	.+94     	; 0x29d2 <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    2974:	ef 2d       	mov	r30, r15
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	e0 5d       	subi	r30, 0xD0	; 208
    297a:	fb 4f       	sbci	r31, 0xFB	; 251
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    297c:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    297e:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    2980:	80 81       	ld	r24, Z
    2982:	6e 2d       	mov	r22, r14
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    298a:	e1 2f       	mov	r30, r17
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	ee 0f       	add	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	ee 0f       	add	r30, r30
    2994:	ff 1f       	adc	r31, r31
    2996:	e0 0f       	add	r30, r16
    2998:	f1 1d       	adc	r31, r1
    299a:	ec 53       	subi	r30, 0x3C	; 60
    299c:	fc 4f       	sbci	r31, 0xFC	; 252
    299e:	90 81       	ld	r25, Z
    29a0:	89 17       	cp	r24, r25
    29a2:	b9 f4       	brne	.+46     	; 0x29d2 <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		curCell = (curRow << 2) + curCol;
    29a4:	11 0f       	add	r17, r17
    29a6:	11 0f       	add	r17, r17
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		curCell = shiftMap(curCell, curMove, curOrnt);
    29a8:	81 2f       	mov	r24, r17
    29aa:	80 0f       	add	r24, r16
    29ac:	6d 2d       	mov	r22, r13
    29ae:	4e 2d       	mov	r20, r14
    29b0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <shiftMap>
    29b4:	98 2f       	mov	r25, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = curCell >> 2;
    29b6:	18 2f       	mov	r17, r24
    29b8:	16 95       	lsr	r17
    29ba:	16 95       	lsr	r17
		curCol = curCell & 0b0011;
    29bc:	08 2f       	mov	r16, r24
    29be:	03 70       	andi	r16, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    29c0:	f3 94       	inc	r15
    29c2:	80 91 3f 04 	lds	r24, 0x043F
    29c6:	f8 16       	cp	r15, r24
    29c8:	88 f2       	brcs	.-94     	; 0x296c <matchBranch+0x14>
		curRow = curCell >> 2;
		curCol = curCell & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	currentCellWorld = curCell;
    29ca:	90 93 e6 06 	sts	0x06E6, r25
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	01 c0       	rjmp	.+2      	; 0x29d4 <matchBranch+0x7c>
	return SUCCESS;
    29d2:	80 e0       	ldi	r24, 0x00	; 0
}
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	ff 90       	pop	r15
    29da:	ef 90       	pop	r14
    29dc:	df 90       	pop	r13
    29de:	08 95       	ret

000029e0 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    29e0:	80 91 4f 05 	lds	r24, 0x054F
    29e4:	80 fd       	sbrc	r24, 0
    29e6:	02 c0       	rjmp	.+4      	; 0x29ec <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	05 c0       	rjmp	.+10     	; 0x29f6 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    29ec:	83 fd       	sbrc	r24, 3
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    29f0:	82 e0       	ldi	r24, 0x02	; 2
    29f2:	01 c0       	rjmp	.+2      	; 0x29f6 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    29f4:	83 e0       	ldi	r24, 0x03	; 3
    29f6:	80 93 cd 04 	sts	0x04CD, r24
	}
	
	switch(oldMove){
    29fa:	80 91 ce 04 	lds	r24, 0x04CE
    29fe:	81 30       	cpi	r24, 0x01	; 1
    2a00:	29 f0       	breq	.+10     	; 0x2a0c <planMap+0x2c>
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	38 f0       	brcs	.+14     	; 0x2a14 <planMap+0x34>
    2a06:	84 30       	cpi	r24, 0x04	; 4
    2a08:	28 f4       	brcc	.+10     	; 0x2a14 <planMap+0x34>
    2a0a:	0f c0       	rjmp	.+30     	; 0x2a2a <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	80 93 cd 04 	sts	0x04CD, r24
    2a12:	0b c0       	rjmp	.+22     	; 0x2a2a <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    2a14:	00 d0       	rcall	.+0      	; 0x2a16 <planMap+0x36>
    2a16:	8b e5       	ldi	r24, 0x5B	; 91
    2a18:	92 e0       	ldi	r25, 0x02	; 2
    2a1a:	ed b7       	in	r30, 0x3d	; 61
    2a1c:	fe b7       	in	r31, 0x3e	; 62
    2a1e:	92 83       	std	Z+2, r25	; 0x02
    2a20:	81 83       	std	Z+1, r24	; 0x01
    2a22:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
    2a26:	0f 90       	pop	r0
    2a28:	0f 90       	pop	r0
			break;
	}
	
	oldMove = currentMove;
    2a2a:	80 91 cd 04 	lds	r24, 0x04CD
    2a2e:	80 93 ce 04 	sts	0x04CE, r24
}
    2a32:	08 95       	ret

00002a34 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch >= BRANCH_MAX){
    2a34:	80 91 3f 04 	lds	r24, 0x043F
    2a38:	85 30       	cpi	r24, 0x05	; 5
    2a3a:	80 f0       	brcs	.+32     	; 0x2a5c <planGateway+0x28>
    2a3c:	e0 e3       	ldi	r30, 0x30	; 48
    2a3e:	f4 e0       	ldi	r31, 0x04	; 4
		for(i = 0; i < BRANCH_MAX; i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    2a40:	81 81       	ldd	r24, Z+1	; 0x01
    2a42:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2a44:	86 81       	ldd	r24, Z+6	; 0x06
    2a46:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2a48:	83 85       	ldd	r24, Z+11	; 0x0b
    2a4a:	82 87       	std	Z+10, r24	; 0x0a
    2a4c:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch >= BRANCH_MAX){
		for(i = 0; i < BRANCH_MAX; i++){
    2a4e:	84 e0       	ldi	r24, 0x04	; 4
    2a50:	e5 33       	cpi	r30, 0x35	; 53
    2a52:	f8 07       	cpc	r31, r24
    2a54:	a9 f7       	brne	.-22     	; 0x2a40 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2a56:	84 e0       	ldi	r24, 0x04	; 4
    2a58:	80 93 3f 04 	sts	0x043F, r24
	}
	
	// Decide what the current move should be
	planMap();
    2a5c:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    2a60:	e0 91 3f 04 	lds	r30, 0x043F
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	e0 5d       	subi	r30, 0xD0	; 208
    2a68:	fb 4f       	sbci	r31, 0xFB	; 251
    2a6a:	80 91 4f 05 	lds	r24, 0x054F
    2a6e:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2a70:	90 91 cd 04 	lds	r25, 0x04CD
    2a74:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2a76:	80 91 e4 05 	lds	r24, 0x05E4
    2a7a:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2a7c:	92 30       	cpi	r25, 0x02	; 2
    2a7e:	b1 f0       	breq	.+44     	; 0x2aac <planGateway+0x78>
    2a80:	93 30       	cpi	r25, 0x03	; 3
    2a82:	21 f0       	breq	.+8      	; 0x2a8c <planGateway+0x58>
    2a84:	91 30       	cpi	r25, 0x01	; 1
    2a86:	39 f4       	brne	.+14     	; 0x2a96 <planGateway+0x62>
		case MOVE_LEFT:
			// If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2a88:	81 50       	subi	r24, 0x01	; 1
    2a8a:	01 c0       	rjmp	.+2      	; 0x2a8e <planGateway+0x5a>
			break;
		case MOVE_RIGHT:
			// If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2a8c:	8f 5f       	subi	r24, 0xFF	; 255
    2a8e:	83 70       	andi	r24, 0x03	; 3
    2a90:	80 93 e4 05 	sts	0x05E4, r24
    2a94:	0b c0       	rjmp	.+22     	; 0x2aac <planGateway+0x78>
			break;
		default:
			LCD_printf("Whatz2?!");
    2a96:	00 d0       	rcall	.+0      	; 0x2a98 <planGateway+0x64>
    2a98:	84 e6       	ldi	r24, 0x64	; 100
    2a9a:	92 e0       	ldi	r25, 0x02	; 2
    2a9c:	ed b7       	in	r30, 0x3d	; 61
    2a9e:	fe b7       	in	r31, 0x3e	; 62
    2aa0:	92 83       	std	Z+2, r25	; 0x02
    2aa2:	81 83       	std	Z+1, r24	; 0x01
    2aa4:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2aac:	80 91 3f 04 	lds	r24, 0x043F
    2ab0:	8f 5f       	subi	r24, 0xFF	; 255
    2ab2:	80 93 3f 04 	sts	0x043F, r24
}
    2ab6:	08 95       	ret

00002ab8 <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    2ab8:	90 91 e4 05 	lds	r25, 0x05E4
    2abc:	91 30       	cpi	r25, 0x01	; 1
    2abe:	91 f0       	breq	.+36     	; 0x2ae4 <planMetric+0x2c>
    2ac0:	91 30       	cpi	r25, 0x01	; 1
    2ac2:	28 f0       	brcs	.+10     	; 0x2ace <planMetric+0x16>
    2ac4:	92 30       	cpi	r25, 0x02	; 2
    2ac6:	d9 f0       	breq	.+54     	; 0x2afe <planMetric+0x46>
    2ac8:	93 30       	cpi	r25, 0x03	; 3
    2aca:	c1 f5       	brne	.+112    	; 0x2b3c <planMetric+0x84>
    2acc:	23 c0       	rjmp	.+70     	; 0x2b14 <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    2ace:	80 91 e5 05 	lds	r24, 0x05E5
    2ad2:	81 30       	cpi	r24, 0x01	; 1
    2ad4:	91 f0       	breq	.+36     	; 0x2afa <planMetric+0x42>
    2ad6:	81 30       	cpi	r24, 0x01	; 1
    2ad8:	68 f1       	brcs	.+90     	; 0x2b34 <planMetric+0x7c>
    2ada:	82 30       	cpi	r24, 0x02	; 2
    2adc:	49 f1       	breq	.+82     	; 0x2b30 <planMetric+0x78>
    2ade:	83 30       	cpi	r24, 0x03	; 3
    2ae0:	69 f5       	brne	.+90     	; 0x2b3c <planMetric+0x84>
    2ae2:	26 c0       	rjmp	.+76     	; 0x2b30 <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    2ae4:	80 91 e5 05 	lds	r24, 0x05E5
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	21 f1       	breq	.+72     	; 0x2b34 <planMetric+0x7c>
    2aec:	81 30       	cpi	r24, 0x01	; 1
    2aee:	e8 f0       	brcs	.+58     	; 0x2b2a <planMetric+0x72>
    2af0:	82 30       	cpi	r24, 0x02	; 2
    2af2:	19 f0       	breq	.+6      	; 0x2afa <planMetric+0x42>
    2af4:	83 30       	cpi	r24, 0x03	; 3
    2af6:	11 f5       	brne	.+68     	; 0x2b3c <planMetric+0x84>
    2af8:	18 c0       	rjmp	.+48     	; 0x2b2a <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    2afa:	83 e0       	ldi	r24, 0x03	; 3
    2afc:	1c c0       	rjmp	.+56     	; 0x2b36 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    2afe:	80 91 e5 05 	lds	r24, 0x05E5
    2b02:	81 30       	cpi	r24, 0x01	; 1
    2b04:	c1 f0       	breq	.+48     	; 0x2b36 <planMetric+0x7e>
    2b06:	81 30       	cpi	r24, 0x01	; 1
    2b08:	98 f0       	brcs	.+38     	; 0x2b30 <planMetric+0x78>
    2b0a:	82 30       	cpi	r24, 0x02	; 2
    2b0c:	a1 f0       	breq	.+40     	; 0x2b36 <planMetric+0x7e>
    2b0e:	83 30       	cpi	r24, 0x03	; 3
    2b10:	a9 f4       	brne	.+42     	; 0x2b3c <planMetric+0x84>
    2b12:	11 c0       	rjmp	.+34     	; 0x2b36 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    2b14:	80 91 e5 05 	lds	r24, 0x05E5
    2b18:	81 30       	cpi	r24, 0x01	; 1
    2b1a:	69 f0       	breq	.+26     	; 0x2b36 <planMetric+0x7e>
    2b1c:	81 30       	cpi	r24, 0x01	; 1
    2b1e:	28 f0       	brcs	.+10     	; 0x2b2a <planMetric+0x72>
    2b20:	82 30       	cpi	r24, 0x02	; 2
    2b22:	31 f0       	breq	.+12     	; 0x2b30 <planMetric+0x78>
    2b24:	83 30       	cpi	r24, 0x03	; 3
    2b26:	51 f4       	brne	.+20     	; 0x2b3c <planMetric+0x84>
    2b28:	05 c0       	rjmp	.+10     	; 0x2b34 <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    2b2a:	90 93 cd 04 	sts	0x04CD, r25
    2b2e:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	01 c0       	rjmp	.+2      	; 0x2b36 <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    2b34:	82 e0       	ldi	r24, 0x02	; 2
    2b36:	80 93 cd 04 	sts	0x04CD, r24
    2b3a:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    2b3c:	00 d0       	rcall	.+0      	; 0x2b3e <planMetric+0x86>
    2b3e:	8d e6       	ldi	r24, 0x6D	; 109
    2b40:	92 e0       	ldi	r25, 0x02	; 2
    2b42:	ed b7       	in	r30, 0x3d	; 61
    2b44:	fe b7       	in	r31, 0x3e	; 62
    2b46:	92 83       	std	Z+2, r25	; 0x02
    2b48:	81 83       	std	Z+1, r24	; 0x01
    2b4a:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	08 95       	ret

00002b54 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2b54:	cf 92       	push	r12
    2b56:	df 92       	push	r13
    2b58:	ef 92       	push	r14
    2b5a:	ff 92       	push	r15
    2b5c:	0f 93       	push	r16
    2b5e:	1f 93       	push	r17
    2b60:	df 93       	push	r29
    2b62:	cf 93       	push	r28
    2b64:	0f 92       	push	r0
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2b6a:	80 91 e6 06 	lds	r24, 0x06E6
    2b6e:	f8 2e       	mov	r15, r24
    2b70:	f6 94       	lsr	r15
    2b72:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2b74:	98 2f       	mov	r25, r24
    2b76:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2b78:	00 91 e4 05 	lds	r16, 0x05E4
    2b7c:	cc 24       	eor	r12, r12
    2b7e:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2b80:	f6 01       	movw	r30, r12
    2b82:	ed 52       	subi	r30, 0x2D	; 45
    2b84:	fa 4f       	sbci	r31, 0xFA	; 250
    2b86:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2b88:	ef 2d       	mov	r30, r15
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	ee 0f       	add	r30, r30
    2b8e:	ff 1f       	adc	r31, r31
    2b90:	ee 0f       	add	r30, r30
    2b92:	ff 1f       	adc	r31, r31
    2b94:	e9 0f       	add	r30, r25
    2b96:	f1 1d       	adc	r31, r1
    2b98:	ec 53       	subi	r30, 0x3C	; 60
    2b9a:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2b9c:	80 81       	ld	r24, Z
    2b9e:	60 2f       	mov	r22, r16
    2ba0:	41 e0       	ldi	r20, 0x01	; 1
    2ba2:	99 83       	std	Y+1, r25	; 0x01
    2ba4:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2ba8:	f6 01       	movw	r30, r12
    2baa:	e6 59       	subi	r30, 0x96	; 150
    2bac:	f8 4f       	sbci	r31, 0xF8	; 248
    2bae:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2bb0:	99 81       	ldd	r25, Y+1	; 0x01
    2bb2:	12 30       	cpi	r17, 0x02	; 2
    2bb4:	89 f4       	brne	.+34     	; 0x2bd8 <getGateways+0x84>
			switch(curOrient){
    2bb6:	01 30       	cpi	r16, 0x01	; 1
    2bb8:	49 f0       	breq	.+18     	; 0x2bcc <getGateways+0x78>
    2bba:	01 30       	cpi	r16, 0x01	; 1
    2bbc:	28 f0       	brcs	.+10     	; 0x2bc8 <getGateways+0x74>
    2bbe:	02 30       	cpi	r16, 0x02	; 2
    2bc0:	39 f0       	breq	.+14     	; 0x2bd0 <getGateways+0x7c>
    2bc2:	03 30       	cpi	r16, 0x03	; 3
    2bc4:	89 f4       	brne	.+34     	; 0x2be8 <getGateways+0x94>
    2bc6:	06 c0       	rjmp	.+12     	; 0x2bd4 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    2bc8:	fa 94       	dec	r15
    2bca:	0e c0       	rjmp	.+28     	; 0x2be8 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    2bcc:	9f 5f       	subi	r25, 0xFF	; 255
    2bce:	0c c0       	rjmp	.+24     	; 0x2be8 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    2bd0:	f3 94       	inc	r15
    2bd2:	0a c0       	rjmp	.+20     	; 0x2be8 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    2bd4:	91 50       	subi	r25, 0x01	; 1
    2bd6:	08 c0       	rjmp	.+16     	; 0x2be8 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    2bd8:	13 30       	cpi	r17, 0x03	; 3
    2bda:	11 f4       	brne	.+4      	; 0x2be0 <getGateways+0x8c>
			curOrient++;
    2bdc:	0f 5f       	subi	r16, 0xFF	; 255
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    2be0:	11 30       	cpi	r17, 0x01	; 1
    2be2:	11 f4       	brne	.+4      	; 0x2be8 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    2be4:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    2be6:	03 70       	andi	r16, 0x03	; 3
    2be8:	08 94       	sec
    2bea:	c1 1c       	adc	r12, r1
    2bec:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2bee:	8d e0       	ldi	r24, 0x0D	; 13
    2bf0:	c8 16       	cp	r12, r24
    2bf2:	d1 04       	cpc	r13, r1
    2bf4:	29 f6       	brne	.-118    	; 0x2b80 <getGateways+0x2c>
    2bf6:	cc 24       	eor	r12, r12
    2bf8:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2bfa:	96 e7       	ldi	r25, 0x76	; 118
    2bfc:	e9 2e       	mov	r14, r25
    2bfe:	92 e0       	ldi	r25, 0x02	; 2
    2c00:	f9 2e       	mov	r15, r25
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2c02:	f6 01       	movw	r30, r12
    2c04:	e6 59       	subi	r30, 0x96	; 150
    2c06:	f8 4f       	sbci	r31, 0xF8	; 248
    2c08:	00 81       	ld	r16, Z
		LCD_clear();
    2c0a:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2c0e:	20 2f       	mov	r18, r16
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	ad b7       	in	r26, 0x3d	; 61
    2c14:	be b7       	in	r27, 0x3e	; 62
    2c16:	54 97       	sbiw	r26, 0x14	; 20
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	be bf       	out	0x3e, r27	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	ad bf       	out	0x3d, r26	; 61
    2c22:	ed b7       	in	r30, 0x3d	; 61
    2c24:	fe b7       	in	r31, 0x3e	; 62
    2c26:	31 96       	adiw	r30, 0x01	; 1
    2c28:	12 96       	adiw	r26, 0x02	; 2
    2c2a:	fc 92       	st	X, r15
    2c2c:	ee 92       	st	-X, r14
    2c2e:	11 97       	sbiw	r26, 0x01	; 1
    2c30:	d3 82       	std	Z+3, r13	; 0x03
    2c32:	c2 82       	std	Z+2, r12	; 0x02
    2c34:	11 27       	eor	r17, r17
    2c36:	07 fd       	sbrc	r16, 7
    2c38:	10 95       	com	r17
    2c3a:	00 27       	eor	r16, r16
    2c3c:	11 0f       	add	r17, r17
    2c3e:	00 1f       	adc	r16, r16
    2c40:	11 27       	eor	r17, r17
    2c42:	15 83       	std	Z+5, r17	; 0x05
    2c44:	04 83       	std	Z+4, r16	; 0x04
    2c46:	c9 01       	movw	r24, r18
    2c48:	b6 e0       	ldi	r27, 0x06	; 6
    2c4a:	96 95       	lsr	r25
    2c4c:	87 95       	ror	r24
    2c4e:	ba 95       	dec	r27
    2c50:	e1 f7       	brne	.-8      	; 0x2c4a <getGateways+0xf6>
    2c52:	81 70       	andi	r24, 0x01	; 1
    2c54:	90 70       	andi	r25, 0x00	; 0
    2c56:	97 83       	std	Z+7, r25	; 0x07
    2c58:	86 83       	std	Z+6, r24	; 0x06
    2c5a:	c9 01       	movw	r24, r18
    2c5c:	a5 e0       	ldi	r26, 0x05	; 5
    2c5e:	96 95       	lsr	r25
    2c60:	87 95       	ror	r24
    2c62:	aa 95       	dec	r26
    2c64:	e1 f7       	brne	.-8      	; 0x2c5e <getGateways+0x10a>
    2c66:	81 70       	andi	r24, 0x01	; 1
    2c68:	90 70       	andi	r25, 0x00	; 0
    2c6a:	91 87       	std	Z+9, r25	; 0x09
    2c6c:	80 87       	std	Z+8, r24	; 0x08
    2c6e:	c9 01       	movw	r24, r18
    2c70:	74 e0       	ldi	r23, 0x04	; 4
    2c72:	96 95       	lsr	r25
    2c74:	87 95       	ror	r24
    2c76:	7a 95       	dec	r23
    2c78:	e1 f7       	brne	.-8      	; 0x2c72 <getGateways+0x11e>
    2c7a:	81 70       	andi	r24, 0x01	; 1
    2c7c:	90 70       	andi	r25, 0x00	; 0
    2c7e:	93 87       	std	Z+11, r25	; 0x0b
    2c80:	82 87       	std	Z+10, r24	; 0x0a
    2c82:	c9 01       	movw	r24, r18
    2c84:	63 e0       	ldi	r22, 0x03	; 3
    2c86:	96 95       	lsr	r25
    2c88:	87 95       	ror	r24
    2c8a:	6a 95       	dec	r22
    2c8c:	e1 f7       	brne	.-8      	; 0x2c86 <getGateways+0x132>
    2c8e:	81 70       	andi	r24, 0x01	; 1
    2c90:	90 70       	andi	r25, 0x00	; 0
    2c92:	95 87       	std	Z+13, r25	; 0x0d
    2c94:	84 87       	std	Z+12, r24	; 0x0c
    2c96:	c9 01       	movw	r24, r18
    2c98:	96 95       	lsr	r25
    2c9a:	87 95       	ror	r24
    2c9c:	96 95       	lsr	r25
    2c9e:	87 95       	ror	r24
    2ca0:	81 70       	andi	r24, 0x01	; 1
    2ca2:	90 70       	andi	r25, 0x00	; 0
    2ca4:	97 87       	std	Z+15, r25	; 0x0f
    2ca6:	86 87       	std	Z+14, r24	; 0x0e
    2ca8:	c9 01       	movw	r24, r18
    2caa:	96 95       	lsr	r25
    2cac:	87 95       	ror	r24
    2cae:	81 70       	andi	r24, 0x01	; 1
    2cb0:	90 70       	andi	r25, 0x00	; 0
    2cb2:	91 8b       	std	Z+17, r25	; 0x11
    2cb4:	80 8b       	std	Z+16, r24	; 0x10
    2cb6:	21 70       	andi	r18, 0x01	; 1
    2cb8:	30 70       	andi	r19, 0x00	; 0
    2cba:	33 8b       	std	Z+19, r19	; 0x13
    2cbc:	22 8b       	std	Z+18, r18	; 0x12
    2cbe:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    2cc2:	ed b7       	in	r30, 0x3d	; 61
    2cc4:	fe b7       	in	r31, 0x3e	; 62
    2cc6:	74 96       	adiw	r30, 0x14	; 20
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	fe bf       	out	0x3e, r31	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	ed bf       	out	0x3d, r30	; 61
    2cd2:	88 ee       	ldi	r24, 0xE8	; 232
    2cd4:	93 e0       	ldi	r25, 0x03	; 3
    2cd6:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
    2cda:	08 94       	sec
    2cdc:	c1 1c       	adc	r12, r1
    2cde:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2ce0:	fd e0       	ldi	r31, 0x0D	; 13
    2ce2:	cf 16       	cp	r12, r31
    2ce4:	d1 04       	cpc	r13, r1
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <getGateways+0x196>
    2ce8:	8c cf       	rjmp	.-232    	; 0x2c02 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    2cea:	0f 90       	pop	r0
    2cec:	cf 91       	pop	r28
    2cee:	df 91       	pop	r29
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	df 90       	pop	r13
    2cfa:	cf 90       	pop	r12
    2cfc:	08 95       	ret

00002cfe <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2cfe:	8f 92       	push	r8
    2d00:	af 92       	push	r10
    2d02:	bf 92       	push	r11
    2d04:	cf 92       	push	r12
    2d06:	df 92       	push	r13
    2d08:	ef 92       	push	r14
    2d0a:	ff 92       	push	r15
    2d0c:	0f 93       	push	r16
    2d0e:	1f 93       	push	r17
	char isDone = 0;
	pidController(0,RESET);
    2d10:	60 e0       	ldi	r22, 0x00	; 0
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	41 e0       	ldi	r20, 0x01	; 1
    2d1a:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
	switch(currentMove){
    2d1e:	80 91 cd 04 	lds	r24, 0x04CD
    2d22:	82 30       	cpi	r24, 0x02	; 2
    2d24:	69 f0       	breq	.+26     	; 0x2d40 <moveMap+0x42>
    2d26:	83 30       	cpi	r24, 0x03	; 3
    2d28:	c1 f0       	breq	.+48     	; 0x2d5a <moveMap+0x5c>
    2d2a:	81 30       	cpi	r24, 0x01	; 1
    2d2c:	d1 f5       	brne	.+116    	; 0x2da2 <moveMap+0xa4>
		case MOVE_LEFT:
			move_arc_stwt(POINT_TURN, LEFT_TURN, 30, 30, 0);
    2d2e:	60 e0       	ldi	r22, 0x00	; 0
    2d30:	70 e0       	ldi	r23, 0x00	; 0
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	44 e8       	ldi	r20, 0x84	; 132
    2d3c:	51 ec       	ldi	r21, 0xC1	; 193
    2d3e:	15 c0       	rjmp	.+42     	; 0x2d6a <moveMap+0x6c>
			TMRSRVC_delay(BRAKE_DELAY);
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	8a ea       	ldi	r24, 0xAA	; 170
    2d46:	93 e4       	ldi	r25, 0x43	; 67
    2d48:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <setOdometry>
			while(!isDone){
				checkIR();
    2d4c:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <checkIR>
				isDone = moveWall();
    2d50:	0e 94 a5 11 	call	0x234a	; 0x234a <moveWall>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
			while(!isDone){
    2d54:	88 23       	and	r24, r24
    2d56:	d1 f3       	breq	.-12     	; 0x2d4c <moveMap+0x4e>
    2d58:	17 c0       	rjmp	.+46     	; 0x2d88 <moveMap+0x8a>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			
			// move_arc_stwt(NO_TURN, 45, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 30, 30, 0);
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	44 e8       	ldi	r20, 0x84	; 132
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0f 2e       	mov	r0, r31
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	ef 2e       	mov	r14, r31
    2d70:	f0 e0       	ldi	r31, 0x00	; 0
    2d72:	ff 2e       	mov	r15, r31
    2d74:	f0 ef       	ldi	r31, 0xF0	; 240
    2d76:	0f 2f       	mov	r16, r31
    2d78:	f1 e4       	ldi	r31, 0x41	; 65
    2d7a:	1f 2f       	mov	r17, r31
    2d7c:	f0 2d       	mov	r31, r0
    2d7e:	57 01       	movw	r10, r14
    2d80:	68 01       	movw	r12, r16
    2d82:	88 24       	eor	r8, r8
    2d84:	0e 94 2b 0c 	call	0x1856	; 0x1856 <move_arc_stwt>
			
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_ON);
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	61 e0       	ldi	r22, 0x01	; 1
    2d8c:	0e 94 67 1f 	call	0x3ece	; 0x3ece <STEPPER_stop>
			TMRSRVC_delay(BRAKE_DELAY);
    2d90:	82 e3       	ldi	r24, 0x32	; 50
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    2d98:	82 e0       	ldi	r24, 0x02	; 2
    2d9a:	60 e0       	ldi	r22, 0x00	; 0
    2d9c:	0e 94 67 1f 	call	0x3ece	; 0x3ece <STEPPER_stop>
    2da0:	0b c0       	rjmp	.+22     	; 0x2db8 <moveMap+0xba>
			break;
		default:
			LCD_printf("Whatz2?!");
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <moveMap+0xa6>
    2da4:	84 e6       	ldi	r24, 0x64	; 100
    2da6:	92 e0       	ldi	r25, 0x02	; 2
    2da8:	ed b7       	in	r30, 0x3d	; 61
    2daa:	fe b7       	in	r31, 0x3e	; 62
    2dac:	92 83       	std	Z+2, r25	; 0x02
    2dae:	81 83       	std	Z+1, r24	; 0x01
    2db0:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
			break;
	}
}
    2db8:	1f 91       	pop	r17
    2dba:	0f 91       	pop	r16
    2dbc:	ff 90       	pop	r15
    2dbe:	ef 90       	pop	r14
    2dc0:	df 90       	pop	r13
    2dc2:	cf 90       	pop	r12
    2dc4:	bf 90       	pop	r11
    2dc6:	af 90       	pop	r10
    2dc8:	8f 90       	pop	r8
    2dca:	08 95       	ret

00002dcc <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    2dcc:	cf 92       	push	r12
    2dce:	df 92       	push	r13
    2dd0:	ef 92       	push	r14
    2dd2:	ff 92       	push	r15
    2dd4:	0f 93       	push	r16
    2dd6:	1f 93       	push	r17
    2dd8:	df 93       	push	r29
    2dda:	cf 93       	push	r28
    2ddc:	0f 92       	push	r0
    2dde:	cd b7       	in	r28, 0x3d	; 61
    2de0:	de b7       	in	r29, 0x3e	; 62
	unsigned char i = 0;
	
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    2de2:	e0 90 30 04 	lds	r14, 0x0430
	
	// Local variables for nested for loops 
	unsigned char row, col;
	
	// Stores the number of matching seeds
	matchSeeds = 0;
    2de6:	10 92 7e 07 	sts	0x077E, r1
    2dea:	00 e0       	ldi	r16, 0x00	; 0
    2dec:	10 e0       	ldi	r17, 0x00	; 0
    2dee:	1c c0       	rjmp	.+56     	; 0x2e28 <localizeGateway+0x5c>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    2df0:	f6 01       	movw	r30, r12
    2df2:	80 81       	ld	r24, Z
    2df4:	e8 16       	cp	r14, r24
    2df6:	69 f4       	brne	.+26     	; 0x2e12 <localizeGateway+0x46>
			
				//Check to see if we have a matching branch
				if(matchBranch(row,col)){
    2df8:	8f 2d       	mov	r24, r15
    2dfa:	69 2f       	mov	r22, r25
    2dfc:	99 83       	std	Y+1, r25	; 0x01
    2dfe:	0e 94 ac 14 	call	0x2958	; 0x2958 <matchBranch>
    2e02:	99 81       	ldd	r25, Y+1	; 0x01
    2e04:	88 23       	and	r24, r24
    2e06:	29 f0       	breq	.+10     	; 0x2e12 <localizeGateway+0x46>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    2e08:	80 91 7e 07 	lds	r24, 0x077E
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	80 93 7e 07 	sts	0x077E, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    2e12:	9f 5f       	subi	r25, 0xFF	; 255
    2e14:	08 94       	sec
    2e16:	c1 1c       	adc	r12, r1
    2e18:	d1 1c       	adc	r13, r1
    2e1a:	94 30       	cpi	r25, 0x04	; 4
    2e1c:	49 f7       	brne	.-46     	; 0x2df0 <localizeGateway+0x24>
    2e1e:	0f 5f       	subi	r16, 0xFF	; 255
    2e20:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    2e22:	04 30       	cpi	r16, 0x04	; 4
    2e24:	11 05       	cpc	r17, r1
    2e26:	61 f0       	breq	.+24     	; 0x2e40 <localizeGateway+0x74>
    2e28:	f0 2e       	mov	r15, r16
    2e2a:	68 01       	movw	r12, r16
    2e2c:	cc 0c       	add	r12, r12
    2e2e:	dd 1c       	adc	r13, r13
    2e30:	cc 0c       	add	r12, r12
    2e32:	dd 1c       	adc	r13, r13
    2e34:	84 ec       	ldi	r24, 0xC4	; 196
    2e36:	93 e0       	ldi	r25, 0x03	; 3
    2e38:	c8 0e       	add	r12, r24
    2e3a:	d9 1e       	adc	r13, r25
    2e3c:	90 e0       	ldi	r25, 0x00	; 0
    2e3e:	d8 cf       	rjmp	.-80     	; 0x2df0 <localizeGateway+0x24>
			}			
		}
	}
	
	
	SPKR_play_beep(500,1000,50);
    2e40:	64 ef       	ldi	r22, 0xF4	; 244
    2e42:	71 e0       	ldi	r23, 0x01	; 1
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	48 ee       	ldi	r20, 0xE8	; 232
    2e4a:	53 e0       	ldi	r21, 0x03	; 3
    2e4c:	22 e3       	ldi	r18, 0x32	; 50
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	0e 94 28 1c 	call	0x3850	; 0x3850 <SPKR_play_beep>
    2e54:	10 e0       	ldi	r17, 0x00	; 0
    2e56:	0b c0       	rjmp	.+22     	; 0x2e6e <localizeGateway+0xa2>
	for(i = 0; i < matchSeeds; i++){
		SPKR_play_beep(1000,1000,50);
    2e58:	68 ee       	ldi	r22, 0xE8	; 232
    2e5a:	73 e0       	ldi	r23, 0x03	; 3
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	48 ee       	ldi	r20, 0xE8	; 232
    2e62:	53 e0       	ldi	r21, 0x03	; 3
    2e64:	22 e3       	ldi	r18, 0x32	; 50
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	0e 94 28 1c 	call	0x3850	; 0x3850 <SPKR_play_beep>
		}
	}
	
	
	SPKR_play_beep(500,1000,50);
	for(i = 0; i < matchSeeds; i++){
    2e6c:	1f 5f       	subi	r17, 0xFF	; 255
    2e6e:	90 91 7e 07 	lds	r25, 0x077E
    2e72:	19 17       	cp	r17, r25
    2e74:	88 f3       	brcs	.-30     	; 0x2e58 <localizeGateway+0x8c>
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	91 30       	cpi	r25, 0x01	; 1
    2e7a:	09 f0       	breq	.+2      	; 0x2e7e <localizeGateway+0xb2>
    2e7c:	81 e0       	ldi	r24, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    2e7e:	0f 90       	pop	r0
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	1f 91       	pop	r17
    2e86:	0f 91       	pop	r16
    2e88:	ff 90       	pop	r15
    2e8a:	ef 90       	pop	r14
    2e8c:	df 90       	pop	r13
    2e8e:	cf 90       	pop	r12
    2e90:	08 95       	ret

00002e92 <map>:
* Input Variables:	none
* Output Return:	none
* Overview:			Makes the robot map the world
********************************************************************/
void map (void)
{
    2e92:	ef 92       	push	r14
    2e94:	ff 92       	push	r15
    2e96:	0f 93       	push	r16
    2e98:	1f 93       	push	r17
    2e9a:	cf 93       	push	r28
    2e9c:	df 93       	push	r29
	// Initialize State
	isMapping = 1;
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	80 93 7f 07 	sts	0x077F, r24
			break;
		}
		
		//Print Map
		LCD_clear();
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    2ea4:	e8 e9       	ldi	r30, 0x98	; 152
    2ea6:	ee 2e       	mov	r14, r30
    2ea8:	e2 e0       	ldi	r30, 0x02	; 2
    2eaa:	fe 2e       	mov	r15, r30
    2eac:	22 c1       	rjmp	.+580    	; 0x30f2 <map+0x260>
	
	// Mapping Loop
	while(isMapping)
	{	
		//Sense
		checkIR();	
    2eae:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <checkIR>
		checkWorld();
    2eb2:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		//Record
		setGateways();
    2eb6:	0e 94 14 14 	call	0x2828	; 0x2828 <setGateways>
				
		//Plan using the Map
		planMap();
    2eba:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <planMap>
		
		//Act on the Map
		moveMap();
    2ebe:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <moveMap>
		
		//Shift the Map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    2ec2:	80 91 e6 06 	lds	r24, 0x06E6
    2ec6:	60 91 cd 04 	lds	r22, 0x04CD
    2eca:	40 91 e4 05 	lds	r20, 0x05E4
    2ece:	0e 94 71 14 	call	0x28e2	; 0x28e2 <shiftMap>
    2ed2:	80 93 e6 06 	sts	0x06E6, r24
		
		//Break?
		isMapping = !((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    2ed6:	90 91 e7 06 	lds	r25, 0x06E7
    2eda:	98 17       	cp	r25, r24
    2edc:	41 f4       	brne	.+16     	; 0x2eee <map+0x5c>
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	90 91 e3 05 	lds	r25, 0x05E3
    2ee6:	80 91 e4 05 	lds	r24, 0x05E4
    2eea:	98 17       	cp	r25, r24
    2eec:	11 f0       	breq	.+4      	; 0x2ef2 <map+0x60>
    2eee:	21 e0       	ldi	r18, 0x01	; 1
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	20 93 7f 07 	sts	0x077F, r18
		if(!isMapping){			
    2ef6:	22 23       	and	r18, r18
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <map+0x6a>
    2efa:	00 c1       	rjmp	.+512    	; 0x30fc <map+0x26a>
			break;
		}
		
		//Print Map
		LCD_clear();
    2efc:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    2f00:	80 91 cd 04 	lds	r24, 0x04CD
    2f04:	28 2f       	mov	r18, r24
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	60 91 e6 06 	lds	r22, 0x06E6
    2f0c:	46 2f       	mov	r20, r22
    2f0e:	50 e0       	ldi	r21, 0x00	; 0
    2f10:	00 91 e4 05 	lds	r16, 0x05E4
    2f14:	a0 2f       	mov	r26, r16
    2f16:	b0 e0       	ldi	r27, 0x00	; 0
    2f18:	cd b7       	in	r28, 0x3d	; 61
    2f1a:	de b7       	in	r29, 0x3e	; 62
    2f1c:	e2 97       	sbiw	r28, 0x32	; 50
    2f1e:	0f b6       	in	r0, 0x3f	; 63
    2f20:	f8 94       	cli
    2f22:	de bf       	out	0x3e, r29	; 62
    2f24:	0f be       	out	0x3f, r0	; 63
    2f26:	cd bf       	out	0x3d, r28	; 61
    2f28:	ed b7       	in	r30, 0x3d	; 61
    2f2a:	fe b7       	in	r31, 0x3e	; 62
    2f2c:	31 96       	adiw	r30, 0x01	; 1
    2f2e:	fa 82       	std	Y+2, r15	; 0x02
    2f30:	e9 82       	std	Y+1, r14	; 0x01
    2f32:	99 27       	eor	r25, r25
    2f34:	87 fd       	sbrc	r24, 7
    2f36:	90 95       	com	r25
    2f38:	88 27       	eor	r24, r24
    2f3a:	99 0f       	add	r25, r25
    2f3c:	88 1f       	adc	r24, r24
    2f3e:	99 27       	eor	r25, r25
    2f40:	93 83       	std	Z+3, r25	; 0x03
    2f42:	82 83       	std	Z+2, r24	; 0x02
    2f44:	c9 01       	movw	r24, r18
    2f46:	16 e0       	ldi	r17, 0x06	; 6
    2f48:	96 95       	lsr	r25
    2f4a:	87 95       	ror	r24
    2f4c:	1a 95       	dec	r17
    2f4e:	e1 f7       	brne	.-8      	; 0x2f48 <map+0xb6>
    2f50:	81 70       	andi	r24, 0x01	; 1
    2f52:	90 70       	andi	r25, 0x00	; 0
    2f54:	95 83       	std	Z+5, r25	; 0x05
    2f56:	84 83       	std	Z+4, r24	; 0x04
    2f58:	c9 01       	movw	r24, r18
    2f5a:	75 e0       	ldi	r23, 0x05	; 5
    2f5c:	96 95       	lsr	r25
    2f5e:	87 95       	ror	r24
    2f60:	7a 95       	dec	r23
    2f62:	e1 f7       	brne	.-8      	; 0x2f5c <map+0xca>
    2f64:	81 70       	andi	r24, 0x01	; 1
    2f66:	90 70       	andi	r25, 0x00	; 0
    2f68:	97 83       	std	Z+7, r25	; 0x07
    2f6a:	86 83       	std	Z+6, r24	; 0x06
    2f6c:	c9 01       	movw	r24, r18
    2f6e:	14 e0       	ldi	r17, 0x04	; 4
    2f70:	96 95       	lsr	r25
    2f72:	87 95       	ror	r24
    2f74:	1a 95       	dec	r17
    2f76:	e1 f7       	brne	.-8      	; 0x2f70 <map+0xde>
    2f78:	81 70       	andi	r24, 0x01	; 1
    2f7a:	90 70       	andi	r25, 0x00	; 0
    2f7c:	91 87       	std	Z+9, r25	; 0x09
    2f7e:	80 87       	std	Z+8, r24	; 0x08
    2f80:	c9 01       	movw	r24, r18
    2f82:	73 e0       	ldi	r23, 0x03	; 3
    2f84:	96 95       	lsr	r25
    2f86:	87 95       	ror	r24
    2f88:	7a 95       	dec	r23
    2f8a:	e1 f7       	brne	.-8      	; 0x2f84 <map+0xf2>
    2f8c:	81 70       	andi	r24, 0x01	; 1
    2f8e:	90 70       	andi	r25, 0x00	; 0
    2f90:	93 87       	std	Z+11, r25	; 0x0b
    2f92:	82 87       	std	Z+10, r24	; 0x0a
    2f94:	c9 01       	movw	r24, r18
    2f96:	96 95       	lsr	r25
    2f98:	87 95       	ror	r24
    2f9a:	96 95       	lsr	r25
    2f9c:	87 95       	ror	r24
    2f9e:	81 70       	andi	r24, 0x01	; 1
    2fa0:	90 70       	andi	r25, 0x00	; 0
    2fa2:	95 87       	std	Z+13, r25	; 0x0d
    2fa4:	84 87       	std	Z+12, r24	; 0x0c
    2fa6:	c9 01       	movw	r24, r18
    2fa8:	96 95       	lsr	r25
    2faa:	87 95       	ror	r24
    2fac:	81 70       	andi	r24, 0x01	; 1
    2fae:	90 70       	andi	r25, 0x00	; 0
    2fb0:	97 87       	std	Z+15, r25	; 0x0f
    2fb2:	86 87       	std	Z+14, r24	; 0x0e
    2fb4:	21 70       	andi	r18, 0x01	; 1
    2fb6:	30 70       	andi	r19, 0x00	; 0
    2fb8:	31 8b       	std	Z+17, r19	; 0x11
    2fba:	20 8b       	std	Z+16, r18	; 0x10
    2fbc:	77 27       	eor	r23, r23
    2fbe:	67 fd       	sbrc	r22, 7
    2fc0:	70 95       	com	r23
    2fc2:	66 27       	eor	r22, r22
    2fc4:	77 0f       	add	r23, r23
    2fc6:	66 1f       	adc	r22, r22
    2fc8:	77 27       	eor	r23, r23
    2fca:	73 8b       	std	Z+19, r23	; 0x13
    2fcc:	62 8b       	std	Z+18, r22	; 0x12
    2fce:	ca 01       	movw	r24, r20
    2fd0:	26 e0       	ldi	r18, 0x06	; 6
    2fd2:	96 95       	lsr	r25
    2fd4:	87 95       	ror	r24
    2fd6:	2a 95       	dec	r18
    2fd8:	e1 f7       	brne	.-8      	; 0x2fd2 <map+0x140>
    2fda:	81 70       	andi	r24, 0x01	; 1
    2fdc:	90 70       	andi	r25, 0x00	; 0
    2fde:	95 8b       	std	Z+21, r25	; 0x15
    2fe0:	84 8b       	std	Z+20, r24	; 0x14
    2fe2:	ca 01       	movw	r24, r20
    2fe4:	15 e0       	ldi	r17, 0x05	; 5
    2fe6:	96 95       	lsr	r25
    2fe8:	87 95       	ror	r24
    2fea:	1a 95       	dec	r17
    2fec:	e1 f7       	brne	.-8      	; 0x2fe6 <map+0x154>
    2fee:	81 70       	andi	r24, 0x01	; 1
    2ff0:	90 70       	andi	r25, 0x00	; 0
    2ff2:	97 8b       	std	Z+23, r25	; 0x17
    2ff4:	86 8b       	std	Z+22, r24	; 0x16
    2ff6:	ca 01       	movw	r24, r20
    2ff8:	74 e0       	ldi	r23, 0x04	; 4
    2ffa:	96 95       	lsr	r25
    2ffc:	87 95       	ror	r24
    2ffe:	7a 95       	dec	r23
    3000:	e1 f7       	brne	.-8      	; 0x2ffa <map+0x168>
    3002:	81 70       	andi	r24, 0x01	; 1
    3004:	90 70       	andi	r25, 0x00	; 0
    3006:	91 8f       	std	Z+25, r25	; 0x19
    3008:	80 8f       	std	Z+24, r24	; 0x18
    300a:	ca 01       	movw	r24, r20
    300c:	63 e0       	ldi	r22, 0x03	; 3
    300e:	96 95       	lsr	r25
    3010:	87 95       	ror	r24
    3012:	6a 95       	dec	r22
    3014:	e1 f7       	brne	.-8      	; 0x300e <map+0x17c>
    3016:	81 70       	andi	r24, 0x01	; 1
    3018:	90 70       	andi	r25, 0x00	; 0
    301a:	93 8f       	std	Z+27, r25	; 0x1b
    301c:	82 8f       	std	Z+26, r24	; 0x1a
    301e:	ca 01       	movw	r24, r20
    3020:	96 95       	lsr	r25
    3022:	87 95       	ror	r24
    3024:	96 95       	lsr	r25
    3026:	87 95       	ror	r24
    3028:	81 70       	andi	r24, 0x01	; 1
    302a:	90 70       	andi	r25, 0x00	; 0
    302c:	95 8f       	std	Z+29, r25	; 0x1d
    302e:	84 8f       	std	Z+28, r24	; 0x1c
    3030:	ca 01       	movw	r24, r20
    3032:	96 95       	lsr	r25
    3034:	87 95       	ror	r24
    3036:	81 70       	andi	r24, 0x01	; 1
    3038:	90 70       	andi	r25, 0x00	; 0
    303a:	97 8f       	std	Z+31, r25	; 0x1f
    303c:	86 8f       	std	Z+30, r24	; 0x1e
    303e:	41 70       	andi	r20, 0x01	; 1
    3040:	50 70       	andi	r21, 0x00	; 0
    3042:	51 a3       	std	Z+33, r21	; 0x21
    3044:	40 a3       	std	Z+32, r20	; 0x20
    3046:	11 27       	eor	r17, r17
    3048:	07 fd       	sbrc	r16, 7
    304a:	10 95       	com	r17
    304c:	00 27       	eor	r16, r16
    304e:	11 0f       	add	r17, r17
    3050:	00 1f       	adc	r16, r16
    3052:	11 27       	eor	r17, r17
    3054:	13 a3       	std	Z+35, r17	; 0x23
    3056:	02 a3       	std	Z+34, r16	; 0x22
    3058:	cd 01       	movw	r24, r26
    305a:	06 e0       	ldi	r16, 0x06	; 6
    305c:	96 95       	lsr	r25
    305e:	87 95       	ror	r24
    3060:	0a 95       	dec	r16
    3062:	e1 f7       	brne	.-8      	; 0x305c <map+0x1ca>
    3064:	81 70       	andi	r24, 0x01	; 1
    3066:	90 70       	andi	r25, 0x00	; 0
    3068:	95 a3       	std	Z+37, r25	; 0x25
    306a:	84 a3       	std	Z+36, r24	; 0x24
    306c:	cd 01       	movw	r24, r26
    306e:	15 e0       	ldi	r17, 0x05	; 5
    3070:	96 95       	lsr	r25
    3072:	87 95       	ror	r24
    3074:	1a 95       	dec	r17
    3076:	e1 f7       	brne	.-8      	; 0x3070 <map+0x1de>
    3078:	81 70       	andi	r24, 0x01	; 1
    307a:	90 70       	andi	r25, 0x00	; 0
    307c:	97 a3       	std	Z+39, r25	; 0x27
    307e:	86 a3       	std	Z+38, r24	; 0x26
    3080:	cd 01       	movw	r24, r26
    3082:	74 e0       	ldi	r23, 0x04	; 4
    3084:	96 95       	lsr	r25
    3086:	87 95       	ror	r24
    3088:	7a 95       	dec	r23
    308a:	e1 f7       	brne	.-8      	; 0x3084 <map+0x1f2>
    308c:	81 70       	andi	r24, 0x01	; 1
    308e:	90 70       	andi	r25, 0x00	; 0
    3090:	91 a7       	std	Z+41, r25	; 0x29
    3092:	80 a7       	std	Z+40, r24	; 0x28
    3094:	cd 01       	movw	r24, r26
    3096:	63 e0       	ldi	r22, 0x03	; 3
    3098:	96 95       	lsr	r25
    309a:	87 95       	ror	r24
    309c:	6a 95       	dec	r22
    309e:	e1 f7       	brne	.-8      	; 0x3098 <map+0x206>
    30a0:	81 70       	andi	r24, 0x01	; 1
    30a2:	90 70       	andi	r25, 0x00	; 0
    30a4:	93 a7       	std	Z+43, r25	; 0x2b
    30a6:	82 a7       	std	Z+42, r24	; 0x2a
    30a8:	cd 01       	movw	r24, r26
    30aa:	96 95       	lsr	r25
    30ac:	87 95       	ror	r24
    30ae:	96 95       	lsr	r25
    30b0:	87 95       	ror	r24
    30b2:	81 70       	andi	r24, 0x01	; 1
    30b4:	90 70       	andi	r25, 0x00	; 0
    30b6:	95 a7       	std	Z+45, r25	; 0x2d
    30b8:	84 a7       	std	Z+44, r24	; 0x2c
    30ba:	cd 01       	movw	r24, r26
    30bc:	96 95       	lsr	r25
    30be:	87 95       	ror	r24
    30c0:	81 70       	andi	r24, 0x01	; 1
    30c2:	90 70       	andi	r25, 0x00	; 0
    30c4:	97 a7       	std	Z+47, r25	; 0x2f
    30c6:	86 a7       	std	Z+46, r24	; 0x2e
    30c8:	a1 70       	andi	r26, 0x01	; 1
    30ca:	b0 70       	andi	r27, 0x00	; 0
    30cc:	b1 ab       	std	Z+49, r27	; 0x31
    30ce:	a0 ab       	std	Z+48, r26	; 0x30
    30d0:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
		printMap(RESET);
    30d4:	ed b7       	in	r30, 0x3d	; 61
    30d6:	fe b7       	in	r31, 0x3e	; 62
    30d8:	f2 96       	adiw	r30, 0x32	; 50
    30da:	0f b6       	in	r0, 0x3f	; 63
    30dc:	f8 94       	cli
    30de:	fe bf       	out	0x3e, r31	; 62
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	ed bf       	out	0x3d, r30	; 61
    30e4:	81 e0       	ldi	r24, 0x01	; 1
    30e6:	0e 94 2c 11 	call	0x2258	; 0x2258 <printMap>
		TMRSRVC_delay(500);//wait 3 seconds
    30ea:	84 ef       	ldi	r24, 0xF4	; 244
    30ec:	91 e0       	ldi	r25, 0x01	; 1
    30ee:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
{
	// Initialize State
	isMapping = 1;
	
	// Mapping Loop
	while(isMapping)
    30f2:	80 91 7f 07 	lds	r24, 0x077F
    30f6:	88 23       	and	r24, r24
    30f8:	09 f0       	breq	.+2      	; 0x30fc <map+0x26a>
    30fa:	d9 ce       	rjmp	.-590    	; 0x2eae <map+0x1c>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
		printMap(RESET);
		TMRSRVC_delay(500);//wait 3 seconds
	}
	
}
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	ff 90       	pop	r15
    3106:	ef 90       	pop	r14
    3108:	08 95       	ret

0000310a <metric>:
{
	// currentCellWorld = 0b0000;
	//currentGoalWorld = 12;
	
	// Make metric map
	wavefrontMake();
    310a:	0e 94 a9 13 	call	0x2752	; 0x2752 <wavefrontMake>
	
	// Initialize State
	isGoal = 0;
    310e:	10 92 7b 07 	sts	0x077B, r1
    3112:	5a c0       	rjmp	.+180    	; 0x31c8 <metric+0xbe>
	
	// Metric Loop 
	while(!isGoal){
	
		LCD_clear();
    3114:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
		
		switch(currentOrientation){
    3118:	80 91 e4 05 	lds	r24, 0x05E4
    311c:	81 30       	cpi	r24, 0x01	; 1
    311e:	51 f0       	breq	.+20     	; 0x3134 <metric+0x2a>
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	28 f0       	brcs	.+10     	; 0x312e <metric+0x24>
    3124:	82 30       	cpi	r24, 0x02	; 2
    3126:	49 f0       	breq	.+18     	; 0x313a <metric+0x30>
    3128:	83 30       	cpi	r24, 0x03	; 3
    312a:	71 f4       	brne	.+28     	; 0x3148 <metric+0x3e>
    312c:	09 c0       	rjmp	.+18     	; 0x3140 <metric+0x36>
			case NORTH:
				LCD_printf("CurtOrent:NORTH\n");
    312e:	8b ee       	ldi	r24, 0xEB	; 235
    3130:	92 e0       	ldi	r25, 0x02	; 2
    3132:	08 c0       	rjmp	.+16     	; 0x3144 <metric+0x3a>
				break;
			case EAST:
				LCD_printf("CurtOrent:EAST\n");
    3134:	8b ef       	ldi	r24, 0xFB	; 251
    3136:	92 e0       	ldi	r25, 0x02	; 2
    3138:	05 c0       	rjmp	.+10     	; 0x3144 <metric+0x3a>
				break;
			case SOUTH:
				LCD_printf("CurtOrent:SOUTH\n");
    313a:	8a e0       	ldi	r24, 0x0A	; 10
    313c:	93 e0       	ldi	r25, 0x03	; 3
    313e:	02 c0       	rjmp	.+4      	; 0x3144 <metric+0x3a>
				break;
			case WEST:
				LCD_printf("CurtOrent:WEST\n");
    3140:	8a e1       	ldi	r24, 0x1A	; 26
    3142:	93 e0       	ldi	r25, 0x03	; 3
    3144:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <puts>
			default:
				break;
		}
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    3148:	80 91 e6 06 	lds	r24, 0x06E6
    314c:	0e 94 3e 13 	call	0x267c	; 0x267c <fourNeighborSearch>
    3150:	80 93 7b 07 	sts	0x077B, r24
		if(isGoal){
    3154:	88 23       	and	r24, r24
    3156:	e9 f5       	brne	.+122    	; 0x31d2 <metric+0xc8>
			break;
		}
				
		switch(nextOrientation){
    3158:	80 91 e5 05 	lds	r24, 0x05E5
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	51 f0       	breq	.+20     	; 0x3174 <metric+0x6a>
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	28 f0       	brcs	.+10     	; 0x316e <metric+0x64>
    3164:	82 30       	cpi	r24, 0x02	; 2
    3166:	49 f0       	breq	.+18     	; 0x317a <metric+0x70>
    3168:	83 30       	cpi	r24, 0x03	; 3
    316a:	71 f4       	brne	.+28     	; 0x3188 <metric+0x7e>
    316c:	09 c0       	rjmp	.+18     	; 0x3180 <metric+0x76>
			case NORTH:
				LCD_printf("NextOrent:NORTH\n");
    316e:	89 e2       	ldi	r24, 0x29	; 41
    3170:	93 e0       	ldi	r25, 0x03	; 3
    3172:	08 c0       	rjmp	.+16     	; 0x3184 <metric+0x7a>
				break;
			case EAST:
				LCD_printf("NextOrent:EAST\n");
    3174:	89 e3       	ldi	r24, 0x39	; 57
    3176:	93 e0       	ldi	r25, 0x03	; 3
    3178:	05 c0       	rjmp	.+10     	; 0x3184 <metric+0x7a>
				break;
			case SOUTH:
				LCD_printf("NextOrent:SOUTH\n");
    317a:	88 e4       	ldi	r24, 0x48	; 72
    317c:	93 e0       	ldi	r25, 0x03	; 3
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <metric+0x7a>
				break;
			case WEST:
				LCD_printf("NextOrent:WEST\n");
    3180:	88 e5       	ldi	r24, 0x58	; 88
    3182:	93 e0       	ldi	r25, 0x03	; 3
    3184:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <puts>
				break;
			default:
				break;
		}
		
		switch(currentMove){
    3188:	80 91 cd 04 	lds	r24, 0x04CD
    318c:	82 30       	cpi	r24, 0x02	; 2
    318e:	51 f0       	breq	.+20     	; 0x31a4 <metric+0x9a>
    3190:	83 30       	cpi	r24, 0x03	; 3
    3192:	29 f0       	breq	.+10     	; 0x319e <metric+0x94>
    3194:	81 30       	cpi	r24, 0x01	; 1
    3196:	51 f4       	brne	.+20     	; 0x31ac <metric+0xa2>
			case MOVE_LEFT:
				LCD_printf("CurMOVE:LEFT\n");
    3198:	87 e6       	ldi	r24, 0x67	; 103
    319a:	93 e0       	ldi	r25, 0x03	; 3
    319c:	05 c0       	rjmp	.+10     	; 0x31a8 <metric+0x9e>
				break;
			case MOVE_RIGHT:
				LCD_printf("CurMOVE:RIGHT\n");
    319e:	84 e7       	ldi	r24, 0x74	; 116
    31a0:	93 e0       	ldi	r25, 0x03	; 3
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <metric+0x9e>
				break;
			case MOVE_FORWARD:
				LCD_printf("CurMOVE:FORWARD\n");
    31a4:	82 e8       	ldi	r24, 0x82	; 130
    31a6:	93 e0       	ldi	r25, 0x03	; 3
    31a8:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <puts>
			default:
				break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    31ac:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <planMetric>
		
		// Act on the move
		moveMap();
    31b0:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    31b4:	80 91 e6 06 	lds	r24, 0x06E6
    31b8:	60 91 cd 04 	lds	r22, 0x04CD
    31bc:	40 91 e4 05 	lds	r20, 0x05E4
    31c0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <shiftMap>
    31c4:	80 93 e6 06 	sts	0x06E6, r24
	
	// Initialize State
	isGoal = 0;
	
	// Metric Loop 
	while(!isGoal){
    31c8:	80 91 7b 07 	lds	r24, 0x077B
    31cc:	88 23       	and	r24, r24
    31ce:	09 f4       	brne	.+2      	; 0x31d2 <metric+0xc8>
    31d0:	a1 cf       	rjmp	.-190    	; 0x3114 <metric+0xa>
    31d2:	08 95       	ret

000031d4 <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    31d4:	cf 93       	push	r28
    31d6:	df 93       	push	r29
	// initialize the robot
	initializeRobot();
    31d8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <initializeRobot>
	
		// Display the map
		LCD_clear();
    31dc:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
		LCD_printf("      New Map\n\n\n\n");
    31e0:	82 e9       	ldi	r24, 0x92	; 146
    31e2:	93 e0       	ldi	r25, 0x03	; 3
    31e4:	0e 94 7a 36 	call	0x6cf4	; 0x6cf4 <puts>
		printMap(RESET);
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	0e 94 2c 11 	call	0x2258	; 0x2258 <printMap>
		TMRSRVC_delay(1000);//wait 1 seconds
    31ee:	88 ee       	ldi	r24, 0xE8	; 232
    31f0:	93 e0       	ldi	r25, 0x03	; 3
    31f2:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
		LCD_clear();
    31f6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
	
	// Locilize the Robot
	// localize();
	
	// Initialize State
	isLost = 1;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	80 93 7c 07 	sts	0x077C, r24
	currentOrientation = NORTH;
    3200:	10 92 e4 05 	sts	0x05E4, r1
	oldMove = MOVE_STOP;
    3204:	84 e0       	ldi	r24, 0x04	; 4
    3206:	80 93 ce 04 	sts	0x04CE, r24
		// // printMap(RESET);
		// // TMRSRVC_delay(5000);//wait 5 seconds
		// // LCD_clear();
		
		
	currentCellWorld = 0;
    320a:	10 92 e6 06 	sts	0x06E6, r1
	isFire = 0;
    320e:	10 92 7d 07 	sts	0x077D, r1
    3212:	1b c0       	rjmp	.+54     	; 0x324a <CBOT_main+0x76>
	
	// Go firefight
	while(!isFire){
		//Sense Gateway
		checkIR();	
    3214:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <checkIR>
		checkWorld();
    3218:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		isFire = checkFire();
    321c:	0e 94 2e 14 	call	0x285c	; 0x285c <checkFire>
    3220:	80 93 7d 07 	sts	0x077D, r24
		if(isFire){
    3224:	88 23       	and	r24, r24
    3226:	19 f0       	breq	.+6      	; 0x322e <CBOT_main+0x5a>
    3228:	c0 e0       	ldi	r28, 0x00	; 0
    322a:	d0 e0       	ldi	r29, 0x00	; 0
    322c:	13 c0       	rjmp	.+38     	; 0x3254 <CBOT_main+0x80>
			break;
		}
		
		// Plan using Map
		planMap();
    322e:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <planMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    3232:	80 91 e6 06 	lds	r24, 0x06E6
    3236:	60 91 cd 04 	lds	r22, 0x04CD
    323a:	40 91 e4 05 	lds	r20, 0x05E4
    323e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <shiftMap>
    3242:	80 93 e6 06 	sts	0x06E6, r24
		
		// Act on the Map
		moveMap();
    3246:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <moveMap>
		
	currentCellWorld = 0;
	isFire = 0;
	
	// Go firefight
	while(!isFire){
    324a:	80 91 7d 07 	lds	r24, 0x077D
    324e:	88 23       	and	r24, r24
    3250:	09 f3       	breq	.-62     	; 0x3214 <CBOT_main+0x40>
    3252:	ea cf       	rjmp	.-44     	; 0x3228 <CBOT_main+0x54>
	}
	
	// Beep for the fire SIREN
	int ii;
	for (ii=0; ii<=3; ii++){
		SPKR_beep(250);	
    3254:	6a ef       	ldi	r22, 0xFA	; 250
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	80 e0       	ldi	r24, 0x00	; 0
    325a:	90 e0       	ldi	r25, 0x00	; 0
    325c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <SPKR_beep>
		TMRSRVC_delay(1000);
    3260:	88 ee       	ldi	r24, 0xE8	; 232
    3262:	93 e0       	ldi	r25, 0x03	; 3
    3264:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
		SPKR_beep(500);	
    3268:	64 ef       	ldi	r22, 0xF4	; 244
    326a:	71 e0       	ldi	r23, 0x01	; 1
    326c:	80 e0       	ldi	r24, 0x00	; 0
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <SPKR_beep>
		TMRSRVC_delay(1000);
    3274:	88 ee       	ldi	r24, 0xE8	; 232
    3276:	93 e0       	ldi	r25, 0x03	; 3
    3278:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
		moveMap();
	}
	
	// Beep for the fire SIREN
	int ii;
	for (ii=0; ii<=3; ii++){
    327c:	21 96       	adiw	r28, 0x01	; 1
    327e:	c4 30       	cpi	r28, 0x04	; 4
    3280:	d1 05       	cpc	r29, r1
    3282:	41 f7       	brne	.-48     	; 0x3254 <CBOT_main+0x80>
		SPKR_beep(250);	
		TMRSRVC_delay(1000);
		SPKR_beep(500);	
		TMRSRVC_delay(1000);
	}
	SPKR_beep(0);
    3284:	60 e0       	ldi	r22, 0x00	; 0
    3286:	70 e0       	ldi	r23, 0x00	; 0
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <SPKR_beep>
	// LCD_clear();
	// LCD_printf("Fire = %i\n\n\n\n", currentFireCell);
	// TMRSRVC_delay(5000);
	
	// Moves the Robot to the goal
	metric();
    3290:	0e 94 85 18 	call	0x310a	; 0x310a <metric>
	
		// Stop when home is reached
		STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    3294:	82 e0       	ldi	r24, 0x02	; 2
    3296:	60 e0       	ldi	r22, 0x00	; 0
    3298:	0e 94 67 1f 	call	0x3ece	; 0x3ece <STEPPER_stop>
		
		// Beep when home is reached
		SPKR_beep(500);
    329c:	64 ef       	ldi	r22, 0xF4	; 244
    329e:	71 e0       	ldi	r23, 0x01	; 1
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <SPKR_beep>
		TMRSRVC_delay(3000);//wait 3 seconds
    32a8:	88 eb       	ldi	r24, 0xB8	; 184
    32aa:	9b e0       	ldi	r25, 0x0B	; 11
    32ac:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
		SPKR_beep(0);
    32b0:	60 e0       	ldi	r22, 0x00	; 0
    32b2:	70 e0       	ldi	r23, 0x00	; 0
    32b4:	80 e0       	ldi	r24, 0x00	; 0
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <SPKR_beep>
		
		// Print that you are at home and the fire cell location
		LCD_clear();
    32bc:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
		LCD_printf("LOLZ\nI'm HOME\nFire at Cell: %i\n\n",currentFireCell);
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <CBOT_main+0xee>
    32c2:	00 d0       	rcall	.+0      	; 0x32c4 <CBOT_main+0xf0>
    32c4:	ed b7       	in	r30, 0x3d	; 61
    32c6:	fe b7       	in	r31, 0x3e	; 62
    32c8:	31 96       	adiw	r30, 0x01	; 1
    32ca:	83 ea       	ldi	r24, 0xA3	; 163
    32cc:	93 e0       	ldi	r25, 0x03	; 3
    32ce:	ad b7       	in	r26, 0x3d	; 61
    32d0:	be b7       	in	r27, 0x3e	; 62
    32d2:	12 96       	adiw	r26, 0x02	; 2
    32d4:	9c 93       	st	X, r25
    32d6:	8e 93       	st	-X, r24
    32d8:	11 97       	sbiw	r26, 0x01	; 1
    32da:	80 91 76 07 	lds	r24, 0x0776
    32de:	82 83       	std	Z+2, r24	; 0x02
    32e0:	13 82       	std	Z+3, r1	; 0x03
    32e2:	0e 94 68 36 	call	0x6cd0	; 0x6cd0 <printf>
		STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	82 e0       	ldi	r24, 0x02	; 2
    32f0:	60 e0       	ldi	r22, 0x00	; 0
    32f2:	0e 94 67 1f 	call	0x3ece	; 0x3ece <STEPPER_stop>
		TMRSRVC_delay(10000);//wait 10 seconds
    32f6:	80 e1       	ldi	r24, 0x10	; 16
    32f8:	97 e2       	ldi	r25, 0x27	; 39
    32fa:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/

}// end the CBOT_main()
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	08 95       	ret

00003304 <ADC_open>:
    3304:	8f e0       	ldi	r24, 0x0F	; 15
    3306:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    330a:	88 23       	and	r24, r24
    330c:	31 f4       	brne	.+12     	; 0x331a <ADC_open+0x16>
    330e:	0e 94 69 22 	call	0x44d2	; 0x44d2 <__ADC_init>
    3312:	8f e0       	ldi	r24, 0x0F	; 15
    3314:	61 e0       	ldi	r22, 0x01	; 1
    3316:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    331a:	8f e0       	ldi	r24, 0x0F	; 15
    331c:	91 e0       	ldi	r25, 0x01	; 1
    331e:	08 95       	ret

00003320 <ADC_sample>:
    3320:	8f e0       	ldi	r24, 0x0F	; 15
    3322:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    3326:	81 30       	cpi	r24, 0x01	; 1
    3328:	19 f0       	breq	.+6      	; 0x3330 <ADC_sample+0x10>
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	13 c0       	rjmp	.+38     	; 0x3356 <ADC_sample+0x36>
    3330:	80 91 7a 00 	lds	r24, 0x007A
    3334:	80 64       	ori	r24, 0x40	; 64
    3336:	80 93 7a 00 	sts	0x007A, r24
    333a:	80 91 7a 00 	lds	r24, 0x007A
    333e:	86 fd       	sbrc	r24, 6
    3340:	fc cf       	rjmp	.-8      	; 0x333a <ADC_sample+0x1a>
    3342:	30 91 78 00 	lds	r19, 0x0078
    3346:	20 91 79 00 	lds	r18, 0x0079
    334a:	92 2f       	mov	r25, r18
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	23 2f       	mov	r18, r19
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	28 2b       	or	r18, r24
    3354:	39 2b       	or	r19, r25
    3356:	c9 01       	movw	r24, r18
    3358:	08 95       	ret

0000335a <ADC_set_channel>:
    335a:	58 2f       	mov	r21, r24
    335c:	80 91 d4 03 	lds	r24, 0x03D4
    3360:	88 30       	cpi	r24, 0x08	; 8
    3362:	d8 f4       	brcc	.+54     	; 0x339a <ADC_set_channel+0x40>
    3364:	40 91 7e 00 	lds	r20, 0x007E
    3368:	21 e0       	ldi	r18, 0x01	; 1
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	b9 01       	movw	r22, r18
    336e:	02 c0       	rjmp	.+4      	; 0x3374 <ADC_set_channel+0x1a>
    3370:	66 0f       	add	r22, r22
    3372:	77 1f       	adc	r23, r23
    3374:	8a 95       	dec	r24
    3376:	e2 f7       	brpl	.-8      	; 0x3370 <ADC_set_channel+0x16>
    3378:	cb 01       	movw	r24, r22
    337a:	80 95       	com	r24
    337c:	84 23       	and	r24, r20
    337e:	80 93 7e 00 	sts	0x007E, r24
    3382:	80 91 7e 00 	lds	r24, 0x007E
    3386:	05 2e       	mov	r0, r21
    3388:	02 c0       	rjmp	.+4      	; 0x338e <ADC_set_channel+0x34>
    338a:	22 0f       	add	r18, r18
    338c:	33 1f       	adc	r19, r19
    338e:	0a 94       	dec	r0
    3390:	e2 f7       	brpl	.-8      	; 0x338a <ADC_set_channel+0x30>
    3392:	82 2b       	or	r24, r18
    3394:	80 93 7e 00 	sts	0x007E, r24
    3398:	0d c0       	rjmp	.+26     	; 0x33b4 <ADC_set_channel+0x5a>
    339a:	20 91 7e 00 	lds	r18, 0x007E
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	05 2e       	mov	r0, r21
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <ADC_set_channel+0x50>
    33a6:	88 0f       	add	r24, r24
    33a8:	99 1f       	adc	r25, r25
    33aa:	0a 94       	dec	r0
    33ac:	e2 f7       	brpl	.-8      	; 0x33a6 <ADC_set_channel+0x4c>
    33ae:	28 2b       	or	r18, r24
    33b0:	20 93 7e 00 	sts	0x007E, r18
    33b4:	50 93 d4 03 	sts	0x03D4, r21
    33b8:	80 91 7c 00 	lds	r24, 0x007C
    33bc:	5f 71       	andi	r21, 0x1F	; 31
    33be:	80 7e       	andi	r24, 0xE0	; 224
    33c0:	85 2b       	or	r24, r21
    33c2:	80 93 7c 00 	sts	0x007C, r24
    33c6:	08 95       	ret

000033c8 <ADC_set_VREF>:
    33c8:	ec e7       	ldi	r30, 0x7C	; 124
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	90 81       	ld	r25, Z
    33ce:	82 95       	swap	r24
    33d0:	88 0f       	add	r24, r24
    33d2:	88 0f       	add	r24, r24
    33d4:	80 7c       	andi	r24, 0xC0	; 192
    33d6:	9f 73       	andi	r25, 0x3F	; 63
    33d8:	98 2b       	or	r25, r24
    33da:	90 83       	st	Z, r25
    33dc:	08 95       	ret

000033de <main>:
    33de:	0e 94 82 22 	call	0x4504	; 0x4504 <CBOT_ISR_init>
    33e2:	0e 94 74 22 	call	0x44e8	; 0x44e8 <CBOT_init>
    33e6:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <CBOT_main>
    33ea:	80 e0       	ldi	r24, 0x00	; 0
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	08 95       	ret

000033f0 <LCD_clear>:
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	80 e4       	ldi	r24, 0x40	; 64
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    33fc:	00 e0       	ldi	r16, 0x00	; 0
    33fe:	80 2f       	mov	r24, r16
    3400:	60 e0       	ldi	r22, 0x00	; 0
    3402:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_set_PGC_addr>
    3406:	10 e0       	ldi	r17, 0x00	; 0
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	61 e0       	ldi	r22, 0x01	; 1
    340c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    3410:	1f 5f       	subi	r17, 0xFF	; 255
    3412:	10 38       	cpi	r17, 0x80	; 128
    3414:	c9 f7       	brne	.-14     	; 0x3408 <LCD_clear+0x18>
    3416:	0f 5f       	subi	r16, 0xFF	; 255
    3418:	04 30       	cpi	r16, 0x04	; 4
    341a:	89 f7       	brne	.-30     	; 0x33fe <LCD_clear+0xe>
    341c:	83 e0       	ldi	r24, 0x03	; 3
    341e:	60 e0       	ldi	r22, 0x00	; 0
    3420:	0e 94 b7 1a 	call	0x356e	; 0x356e <LCD_set_next_PGC>
    3424:	1f 91       	pop	r17
    3426:	0f 91       	pop	r16
    3428:	08 95       	ret

0000342a <LCD_open>:
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	82 e0       	ldi	r24, 0x02	; 2
    3430:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    3434:	88 23       	and	r24, r24
    3436:	11 f4       	brne	.+4      	; 0x343c <LCD_open+0x12>
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	06 c0       	rjmp	.+12     	; 0x3448 <LCD_open+0x1e>
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    3442:	88 23       	and	r24, r24
    3444:	19 f4       	brne	.+6      	; 0x344c <LCD_open+0x22>
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	6d c0       	rjmp	.+218    	; 0x3526 <LCD_open+0xfc>
    344c:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__LCD_init>
    3450:	85 e0       	ldi	r24, 0x05	; 5
    3452:	61 e0       	ldi	r22, 0x01	; 1
    3454:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    3458:	8e ea       	ldi	r24, 0xAE	; 174
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    3460:	82 ea       	ldi	r24, 0xA2	; 162
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    3468:	80 ea       	ldi	r24, 0xA0	; 160
    346a:	60 e0       	ldi	r22, 0x00	; 0
    346c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    3470:	00 e5       	ldi	r16, 0x50	; 80
    3472:	13 ec       	ldi	r17, 0xC3	; 195
    3474:	c8 01       	movw	r24, r16
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	f1 f7       	brne	.-4      	; 0x3476 <LCD_open+0x4c>
    347a:	80 ec       	ldi	r24, 0xC0	; 192
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    3482:	8f e2       	ldi	r24, 0x2F	; 47
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    348a:	81 e8       	ldi	r24, 0x81	; 129
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    3492:	86 e1       	ldi	r24, 0x16	; 22
    3494:	60 e0       	ldi	r22, 0x00	; 0
    3496:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    349a:	82 e2       	ldi	r24, 0x22	; 34
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    34a2:	c8 01       	movw	r24, r16
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	f1 f7       	brne	.-4      	; 0x34a4 <LCD_open+0x7a>
    34a8:	8f ea       	ldi	r24, 0xAF	; 175
    34aa:	60 e0       	ldi	r22, 0x00	; 0
    34ac:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    34b0:	86 ea       	ldi	r24, 0xA6	; 166
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    34b8:	85 ea       	ldi	r24, 0xA5	; 165
    34ba:	60 e0       	ldi	r22, 0x00	; 0
    34bc:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	28 e8       	ldi	r18, 0x88	; 136
    34c6:	33 e1       	ldi	r19, 0x13	; 19
    34c8:	f9 01       	movw	r30, r18
    34ca:	31 97       	sbiw	r30, 0x01	; 1
    34cc:	f1 f7       	brne	.-4      	; 0x34ca <LCD_open+0xa0>
    34ce:	01 96       	adiw	r24, 0x01	; 1
    34d0:	43 e0       	ldi	r20, 0x03	; 3
    34d2:	88 3e       	cpi	r24, 0xE8	; 232
    34d4:	94 07       	cpc	r25, r20
    34d6:	c1 f7       	brne	.-16     	; 0x34c8 <LCD_open+0x9e>
    34d8:	83 eb       	ldi	r24, 0xB3	; 179
    34da:	60 e0       	ldi	r22, 0x00	; 0
    34dc:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    34e0:	80 e4       	ldi	r24, 0x40	; 64
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    34e8:	83 e0       	ldi	r24, 0x03	; 3
    34ea:	60 e0       	ldi	r22, 0x00	; 0
    34ec:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_set_PGC_addr>
    34f0:	83 e0       	ldi	r24, 0x03	; 3
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	0e 94 b7 1a 	call	0x356e	; 0x356e <LCD_set_next_PGC>
    34f8:	10 92 ce 07 	sts	0x07CE, r1
    34fc:	10 92 d0 07 	sts	0x07D0, r1
    3500:	10 92 cf 07 	sts	0x07CF, r1
    3504:	8b e1       	ldi	r24, 0x1B	; 27
    3506:	94 e0       	ldi	r25, 0x04	; 4
    3508:	90 93 ff 07 	sts	0x07FF, r25
    350c:	80 93 fe 07 	sts	0x07FE, r24
    3510:	88 e1       	ldi	r24, 0x18	; 24
    3512:	0e 94 96 1a 	call	0x352c	; 0x352c <LCD_set_backlight>
    3516:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
    351a:	84 ea       	ldi	r24, 0xA4	; 164
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    3522:	85 e0       	ldi	r24, 0x05	; 5
    3524:	91 e0       	ldi	r25, 0x01	; 1
    3526:	1f 91       	pop	r17
    3528:	0f 91       	pop	r16
    352a:	08 95       	ret

0000352c <LCD_set_backlight>:
    352c:	1f 93       	push	r17
    352e:	18 2f       	mov	r17, r24
    3530:	85 e0       	ldi	r24, 0x05	; 5
    3532:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    3536:	81 30       	cpi	r24, 0x01	; 1
    3538:	c1 f4       	brne	.+48     	; 0x356a <LCD_set_backlight+0x3e>
    353a:	87 e0       	ldi	r24, 0x07	; 7
    353c:	0e 94 13 1b 	call	0x3626	; 0x3626 <SPI_set_slave_addr>
    3540:	82 e0       	ldi	r24, 0x02	; 2
    3542:	6a e0       	ldi	r22, 0x0A	; 10
    3544:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <SPI_transmit>
    3548:	82 e0       	ldi	r24, 0x02	; 2
    354a:	61 eb       	ldi	r22, 0xB1	; 177
    354c:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <SPI_transmit>
    3550:	61 2f       	mov	r22, r17
    3552:	11 32       	cpi	r17, 0x21	; 33
    3554:	08 f0       	brcs	.+2      	; 0x3558 <LCD_set_backlight+0x2c>
    3556:	60 e2       	ldi	r22, 0x20	; 32
    3558:	82 e0       	ldi	r24, 0x02	; 2
    355a:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <SPI_transmit>
    355e:	89 ee       	ldi	r24, 0xE9	; 233
    3560:	8a 95       	dec	r24
    3562:	f1 f7       	brne	.-4      	; 0x3560 <LCD_set_backlight+0x34>
    3564:	87 e0       	ldi	r24, 0x07	; 7
    3566:	0e 94 13 1b 	call	0x3626	; 0x3626 <SPI_set_slave_addr>
    356a:	1f 91       	pop	r17
    356c:	08 95       	ret

0000356e <LCD_set_next_PGC>:
    356e:	83 70       	andi	r24, 0x03	; 3
    3570:	6f 77       	andi	r22, 0x7F	; 127
    3572:	60 93 cc 07 	sts	0x07CC, r22
    3576:	80 93 cd 07 	sts	0x07CD, r24
    357a:	08 95       	ret

0000357c <LCD_set_PGC_addr>:
    357c:	0f 93       	push	r16
    357e:	1f 93       	push	r17
    3580:	06 2f       	mov	r16, r22
    3582:	16 2f       	mov	r17, r22
    3584:	1f 77       	andi	r17, 0x7F	; 127
    3586:	83 70       	andi	r24, 0x03	; 3
    3588:	80 6b       	ori	r24, 0xB0	; 176
    358a:	60 e0       	ldi	r22, 0x00	; 0
    358c:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    3590:	12 95       	swap	r17
    3592:	1f 70       	andi	r17, 0x0F	; 15
    3594:	81 2f       	mov	r24, r17
    3596:	80 61       	ori	r24, 0x10	; 16
    3598:	60 e0       	ldi	r22, 0x00	; 0
    359a:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    359e:	80 2f       	mov	r24, r16
    35a0:	8f 70       	andi	r24, 0x0F	; 15
    35a2:	60 e0       	ldi	r22, 0x00	; 0
    35a4:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	08 95       	ret

000035ae <LCD_write>:
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	08 2f       	mov	r16, r24
    35b4:	16 2f       	mov	r17, r22
    35b6:	85 e0       	ldi	r24, 0x05	; 5
    35b8:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    35bc:	81 30       	cpi	r24, 0x01	; 1
    35be:	79 f4       	brne	.+30     	; 0x35de <LCD_write+0x30>
    35c0:	11 23       	and	r17, r17
    35c2:	19 f0       	breq	.+6      	; 0x35ca <LCD_write+0x1c>
    35c4:	11 30       	cpi	r17, 0x01	; 1
    35c6:	21 f4       	brne	.+8      	; 0x35d0 <LCD_write+0x22>
    35c8:	02 c0       	rjmp	.+4      	; 0x35ce <LCD_write+0x20>
    35ca:	2b 98       	cbi	0x05, 3	; 5
    35cc:	01 c0       	rjmp	.+2      	; 0x35d0 <LCD_write+0x22>
    35ce:	2b 9a       	sbi	0x05, 3	; 5
    35d0:	86 e0       	ldi	r24, 0x06	; 6
    35d2:	8a 95       	dec	r24
    35d4:	f1 f7       	brne	.-4      	; 0x35d2 <LCD_write+0x24>
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	60 2f       	mov	r22, r16
    35da:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <SPI_transmit>
    35de:	1f 91       	pop	r17
    35e0:	0f 91       	pop	r16
    35e2:	08 95       	ret

000035e4 <LED_clr_pattern>:
    35e4:	1f 93       	push	r17
    35e6:	18 2f       	mov	r17, r24
    35e8:	86 e0       	ldi	r24, 0x06	; 6
    35ea:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    35ee:	81 30       	cpi	r24, 0x01	; 1
    35f0:	19 f4       	brne	.+6      	; 0x35f8 <LED_clr_pattern+0x14>
    35f2:	81 2f       	mov	r24, r17
    35f4:	0e 94 99 25 	call	0x4b32	; 0x4b32 <__LED_clr_pattern>
    35f8:	1f 91       	pop	r17
    35fa:	08 95       	ret

000035fc <LED_open>:
    35fc:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <__LED_init>
    3600:	86 e0       	ldi	r24, 0x06	; 6
    3602:	61 e0       	ldi	r22, 0x01	; 1
    3604:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    3608:	86 e0       	ldi	r24, 0x06	; 6
    360a:	91 e0       	ldi	r25, 0x01	; 1
    360c:	08 95       	ret

0000360e <LED_set_pattern>:
    360e:	1f 93       	push	r17
    3610:	18 2f       	mov	r17, r24
    3612:	86 e0       	ldi	r24, 0x06	; 6
    3614:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    3618:	81 30       	cpi	r24, 0x01	; 1
    361a:	19 f4       	brne	.+6      	; 0x3622 <LED_set_pattern+0x14>
    361c:	81 2f       	mov	r24, r17
    361e:	0e 94 a1 25 	call	0x4b42	; 0x4b42 <__LED_set_pattern>
    3622:	1f 91       	pop	r17
    3624:	08 95       	ret

00003626 <SPI_set_slave_addr>:
    3626:	1f 93       	push	r17
    3628:	18 2f       	mov	r17, r24
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    3630:	81 30       	cpi	r24, 0x01	; 1
    3632:	09 f0       	breq	.+2      	; 0x3636 <SPI_set_slave_addr+0x10>
    3634:	47 c0       	rjmp	.+142    	; 0x36c4 <SPI_set_slave_addr+0x9e>
    3636:	91 2f       	mov	r25, r17
    3638:	97 70       	andi	r25, 0x07	; 7
    363a:	80 91 d1 07 	lds	r24, 0x07D1
    363e:	98 17       	cp	r25, r24
    3640:	09 f4       	brne	.+2      	; 0x3644 <SPI_set_slave_addr+0x1e>
    3642:	40 c0       	rjmp	.+128    	; 0x36c4 <SPI_set_slave_addr+0x9e>
    3644:	90 93 d1 07 	sts	0x07D1, r25
    3648:	85 b1       	in	r24, 0x05	; 5
    364a:	88 7f       	andi	r24, 0xF8	; 248
    364c:	89 2b       	or	r24, r25
    364e:	85 b9       	out	0x05, r24	; 5
    3650:	93 30       	cpi	r25, 0x03	; 3
    3652:	11 f1       	breq	.+68     	; 0x3698 <SPI_set_slave_addr+0x72>
    3654:	94 30       	cpi	r25, 0x04	; 4
    3656:	28 f4       	brcc	.+10     	; 0x3662 <SPI_set_slave_addr+0x3c>
    3658:	91 30       	cpi	r25, 0x01	; 1
    365a:	51 f0       	breq	.+20     	; 0x3670 <SPI_set_slave_addr+0x4a>
    365c:	92 30       	cpi	r25, 0x02	; 2
    365e:	90 f4       	brcc	.+36     	; 0x3684 <SPI_set_slave_addr+0x5e>
    3660:	0c c0       	rjmp	.+24     	; 0x367a <SPI_set_slave_addr+0x54>
    3662:	95 30       	cpi	r25, 0x05	; 5
    3664:	19 f1       	breq	.+70     	; 0x36ac <SPI_set_slave_addr+0x86>
    3666:	95 30       	cpi	r25, 0x05	; 5
    3668:	e0 f0       	brcs	.+56     	; 0x36a2 <SPI_set_slave_addr+0x7c>
    366a:	96 30       	cpi	r25, 0x06	; 6
    366c:	21 f5       	brne	.+72     	; 0x36b6 <SPI_set_slave_addr+0x90>
    366e:	0f c0       	rjmp	.+30     	; 0x368e <SPI_set_slave_addr+0x68>
    3670:	e0 91 b2 04 	lds	r30, 0x04B2
    3674:	f0 91 b3 04 	lds	r31, 0x04B3
    3678:	22 c0       	rjmp	.+68     	; 0x36be <SPI_set_slave_addr+0x98>
    367a:	e0 91 b0 04 	lds	r30, 0x04B0
    367e:	f0 91 b1 04 	lds	r31, 0x04B1
    3682:	1d c0       	rjmp	.+58     	; 0x36be <SPI_set_slave_addr+0x98>
    3684:	e0 91 b4 04 	lds	r30, 0x04B4
    3688:	f0 91 b5 04 	lds	r31, 0x04B5
    368c:	18 c0       	rjmp	.+48     	; 0x36be <SPI_set_slave_addr+0x98>
    368e:	e0 91 bc 04 	lds	r30, 0x04BC
    3692:	f0 91 bd 04 	lds	r31, 0x04BD
    3696:	13 c0       	rjmp	.+38     	; 0x36be <SPI_set_slave_addr+0x98>
    3698:	e0 91 b6 04 	lds	r30, 0x04B6
    369c:	f0 91 b7 04 	lds	r31, 0x04B7
    36a0:	0e c0       	rjmp	.+28     	; 0x36be <SPI_set_slave_addr+0x98>
    36a2:	e0 91 b8 04 	lds	r30, 0x04B8
    36a6:	f0 91 b9 04 	lds	r31, 0x04B9
    36aa:	09 c0       	rjmp	.+18     	; 0x36be <SPI_set_slave_addr+0x98>
    36ac:	e0 91 ba 04 	lds	r30, 0x04BA
    36b0:	f0 91 bb 04 	lds	r31, 0x04BB
    36b4:	04 c0       	rjmp	.+8      	; 0x36be <SPI_set_slave_addr+0x98>
    36b6:	e0 91 be 04 	lds	r30, 0x04BE
    36ba:	f0 91 bf 04 	lds	r31, 0x04BF
    36be:	30 97       	sbiw	r30, 0x00	; 0
    36c0:	09 f0       	breq	.+2      	; 0x36c4 <SPI_set_slave_addr+0x9e>
    36c2:	09 95       	icall
    36c4:	1f 91       	pop	r17
    36c6:	08 95       	ret

000036c8 <SPI_transmit>:
    36c8:	1f 93       	push	r17
    36ca:	16 2f       	mov	r17, r22
    36cc:	0e 94 13 1b 	call	0x3626	; 0x3626 <SPI_set_slave_addr>
    36d0:	82 e0       	ldi	r24, 0x02	; 2
    36d2:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    36d6:	81 30       	cpi	r24, 0x01	; 1
    36d8:	21 f4       	brne	.+8      	; 0x36e2 <SPI_transmit+0x1a>
    36da:	1e bd       	out	0x2e, r17	; 46
    36dc:	0d b4       	in	r0, 0x2d	; 45
    36de:	07 fe       	sbrs	r0, 7
    36e0:	fd cf       	rjmp	.-6      	; 0x36dc <SPI_transmit+0x14>
    36e2:	1f 91       	pop	r17
    36e4:	08 95       	ret

000036e6 <SPKR_beep>:
    36e6:	9b 01       	movw	r18, r22
    36e8:	ac 01       	movw	r20, r24
    36ea:	80 91 51 04 	lds	r24, 0x0451
    36ee:	88 23       	and	r24, r24
    36f0:	81 f0       	breq	.+32     	; 0x3712 <SPKR_beep+0x2c>
    36f2:	da 01       	movw	r26, r20
    36f4:	c9 01       	movw	r24, r18
    36f6:	88 0f       	add	r24, r24
    36f8:	99 1f       	adc	r25, r25
    36fa:	aa 1f       	adc	r26, r26
    36fc:	bb 1f       	adc	r27, r27
    36fe:	90 93 5d 04 	sts	0x045D, r25
    3702:	80 93 5c 04 	sts	0x045C, r24
    3706:	21 15       	cp	r18, r1
    3708:	31 05       	cpc	r19, r1
    370a:	41 05       	cpc	r20, r1
    370c:	51 05       	cpc	r21, r1
    370e:	09 f4       	brne	.+2      	; 0x3712 <SPKR_beep+0x2c>
    3710:	5f 98       	cbi	0x0b, 7	; 11
    3712:	08 95       	ret

00003714 <__SPKR_set_up_freq_LUT>:
    3714:	0f 93       	push	r16
    3716:	1f 93       	push	r17
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	80 e2       	ldi	r24, 0x20	; 32
    371e:	91 e0       	ldi	r25, 0x01	; 1
    3720:	0e 94 49 34 	call	0x6892	; 0x6892 <malloc>
    3724:	9c 01       	movw	r18, r24
    3726:	90 93 5f 04 	sts	0x045F, r25
    372a:	80 93 5e 04 	sts	0x045E, r24
    372e:	89 2b       	or	r24, r25
    3730:	11 f4       	brne	.+4      	; 0x3736 <__SPKR_set_up_freq_LUT+0x22>
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	39 c0       	rjmp	.+114    	; 0x37a8 <__SPKR_set_up_freq_LUT+0x94>
    3736:	89 01       	movw	r16, r18
    3738:	c0 e0       	ldi	r28, 0x00	; 0
    373a:	d0 e0       	ldi	r29, 0x00	; 0
    373c:	be 01       	movw	r22, r28
    373e:	80 e0       	ldi	r24, 0x00	; 0
    3740:	90 e0       	ldi	r25, 0x00	; 0
    3742:	0e 94 b1 2d 	call	0x5b62	; 0x5b62 <__floatunsisf>
    3746:	20 e0       	ldi	r18, 0x00	; 0
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	40 ea       	ldi	r20, 0xA0	; 160
    374c:	51 e4       	ldi	r21, 0x41	; 65
    374e:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <__divsf3>
    3752:	27 ef       	ldi	r18, 0xF7	; 247
    3754:	35 e7       	ldi	r19, 0x75	; 117
    3756:	40 e0       	ldi	r20, 0x00	; 0
    3758:	5f e3       	ldi	r21, 0x3F	; 63
    375a:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    375e:	9b 01       	movw	r18, r22
    3760:	ac 01       	movw	r20, r24
    3762:	60 e0       	ldi	r22, 0x00	; 0
    3764:	70 e0       	ldi	r23, 0x00	; 0
    3766:	80 e2       	ldi	r24, 0x20	; 32
    3768:	91 e4       	ldi	r25, 0x41	; 65
    376a:	0e 94 04 2f 	call	0x5e08	; 0x5e08 <pow>
    376e:	9b 01       	movw	r18, r22
    3770:	ac 01       	movw	r20, r24
    3772:	ca 01       	movw	r24, r20
    3774:	b9 01       	movw	r22, r18
    3776:	2d ec       	ldi	r18, 0xCD	; 205
    3778:	3c ec       	ldi	r19, 0xCC	; 204
    377a:	42 e8       	ldi	r20, 0x82	; 130
    377c:	51 e4       	ldi	r21, 0x41	; 65
    377e:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__mulsf3>
    3782:	0e 94 67 2e 	call	0x5cce	; 0x5cce <lrint>
    3786:	2a e0       	ldi	r18, 0x0A	; 10
    3788:	30 e0       	ldi	r19, 0x00	; 0
    378a:	40 e0       	ldi	r20, 0x00	; 0
    378c:	50 e0       	ldi	r21, 0x00	; 0
    378e:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__mulsi3>
    3792:	f8 01       	movw	r30, r16
    3794:	61 93       	st	Z+, r22
    3796:	71 93       	st	Z+, r23
    3798:	81 93       	st	Z+, r24
    379a:	91 93       	st	Z+, r25
    379c:	8f 01       	movw	r16, r30
    379e:	21 96       	adiw	r28, 0x01	; 1
    37a0:	c8 34       	cpi	r28, 0x48	; 72
    37a2:	d1 05       	cpc	r29, r1
    37a4:	59 f6       	brne	.-106    	; 0x373c <__SPKR_set_up_freq_LUT+0x28>
    37a6:	81 e0       	ldi	r24, 0x01	; 1
    37a8:	df 91       	pop	r29
    37aa:	cf 91       	pop	r28
    37ac:	1f 91       	pop	r17
    37ae:	0f 91       	pop	r16
    37b0:	08 95       	ret

000037b2 <__SPKR_open_beep_mode>:
    37b2:	8a e0       	ldi	r24, 0x0A	; 10
    37b4:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    37b8:	88 23       	and	r24, r24
    37ba:	71 f4       	brne	.+28     	; 0x37d8 <__SPKR_open_beep_mode+0x26>
    37bc:	10 92 5b 04 	sts	0x045B, r1
    37c0:	10 92 5a 04 	sts	0x045A, r1
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <__SPKR_init>
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	80 93 51 04 	sts	0x0451, r24
    37d0:	8a e0       	ldi	r24, 0x0A	; 10
    37d2:	61 e0       	ldi	r22, 0x01	; 1
    37d4:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    37d8:	8a e0       	ldi	r24, 0x0A	; 10
    37da:	91 e0       	ldi	r25, 0x01	; 1
    37dc:	08 95       	ret

000037de <__SPKR_open_tone_mode>:
    37de:	1f 93       	push	r17
    37e0:	8b e0       	ldi	r24, 0x0B	; 11
    37e2:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    37e6:	88 23       	and	r24, r24
    37e8:	11 f0       	breq	.+4      	; 0x37ee <__SPKR_open_tone_mode+0x10>
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	21 c0       	rjmp	.+66     	; 0x3830 <__SPKR_open_tone_mode+0x52>
    37ee:	89 e0       	ldi	r24, 0x09	; 9
    37f0:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    37f4:	88 23       	and	r24, r24
    37f6:	d9 f4       	brne	.+54     	; 0x382e <__SPKR_open_tone_mode+0x50>
    37f8:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__SPKR_set_up_freq_LUT>
    37fc:	18 2f       	mov	r17, r24
    37fe:	81 30       	cpi	r24, 0x01	; 1
    3800:	b1 f4       	brne	.+44     	; 0x382e <__SPKR_open_tone_mode+0x50>
    3802:	10 92 52 04 	sts	0x0452, r1
    3806:	10 92 53 04 	sts	0x0453, r1
    380a:	10 92 54 04 	sts	0x0454, r1
    380e:	10 92 55 04 	sts	0x0455, r1
    3812:	8d e0       	ldi	r24, 0x0D	; 13
    3814:	6f e5       	ldi	r22, 0x5F	; 95
    3816:	76 e2       	ldi	r23, 0x26	; 38
    3818:	0e 94 c2 24 	call	0x4984	; 0x4984 <ISR_attach>
    381c:	82 e0       	ldi	r24, 0x02	; 2
    381e:	0e 94 dc 26 	call	0x4db8	; 0x4db8 <__SPKR_init>
    3822:	10 93 50 04 	sts	0x0450, r17
    3826:	89 e0       	ldi	r24, 0x09	; 9
    3828:	61 e0       	ldi	r22, 0x01	; 1
    382a:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    382e:	91 e0       	ldi	r25, 0x01	; 1
    3830:	89 e0       	ldi	r24, 0x09	; 9
    3832:	1f 91       	pop	r17
    3834:	08 95       	ret

00003836 <SPKR_open>:
    3836:	81 30       	cpi	r24, 0x01	; 1
    3838:	29 f0       	breq	.+10     	; 0x3844 <SPKR_open+0xe>
    383a:	82 30       	cpi	r24, 0x02	; 2
    383c:	31 f0       	breq	.+12     	; 0x384a <SPKR_open+0x14>
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	89 e0       	ldi	r24, 0x09	; 9
    3842:	08 95       	ret
    3844:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <__SPKR_open_beep_mode>
    3848:	08 95       	ret
    384a:	0e 94 ef 1b 	call	0x37de	; 0x37de <__SPKR_open_tone_mode>
    384e:	08 95       	ret

00003850 <SPKR_play_beep>:
    3850:	8f 92       	push	r8
    3852:	9f 92       	push	r9
    3854:	af 92       	push	r10
    3856:	bf 92       	push	r11
    3858:	cf 92       	push	r12
    385a:	df 92       	push	r13
    385c:	ef 92       	push	r14
    385e:	ff 92       	push	r15
    3860:	0f 93       	push	r16
    3862:	1f 93       	push	r17
    3864:	cf 93       	push	r28
    3866:	df 93       	push	r29
    3868:	4b 01       	movw	r8, r22
    386a:	5c 01       	movw	r10, r24
    386c:	ea 01       	movw	r28, r20
    386e:	b9 01       	movw	r22, r18
    3870:	21 15       	cp	r18, r1
    3872:	31 05       	cpc	r19, r1
    3874:	39 f1       	breq	.+78     	; 0x38c4 <SPKR_play_beep+0x74>
    3876:	9e 01       	movw	r18, r28
    3878:	44 27       	eor	r20, r20
    387a:	37 fd       	sbrc	r19, 7
    387c:	40 95       	com	r20
    387e:	54 2f       	mov	r21, r20
    3880:	65 36       	cpi	r22, 0x65	; 101
    3882:	71 05       	cpc	r23, r1
    3884:	10 f0       	brcs	.+4      	; 0x388a <SPKR_play_beep+0x3a>
    3886:	64 e6       	ldi	r22, 0x64	; 100
    3888:	70 e0       	ldi	r23, 0x00	; 0
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	90 e0       	ldi	r25, 0x00	; 0
    388e:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__mulsi3>
    3892:	24 e6       	ldi	r18, 0x64	; 100
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e0       	ldi	r20, 0x00	; 0
    3898:	50 e0       	ldi	r21, 0x00	; 0
    389a:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__udivmodsi4>
    389e:	79 01       	movw	r14, r18
    38a0:	8a 01       	movw	r16, r20
    38a2:	c5 01       	movw	r24, r10
    38a4:	b4 01       	movw	r22, r8
    38a6:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <SPKR_beep>
    38aa:	c7 01       	movw	r24, r14
    38ac:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	0e 94 73 1b 	call	0x36e6	; 0x36e6 <SPKR_beep>
    38bc:	ce 01       	movw	r24, r28
    38be:	8e 19       	sub	r24, r14
    38c0:	9f 09       	sbc	r25, r15
    38c2:	04 c0       	rjmp	.+8      	; 0x38cc <SPKR_play_beep+0x7c>
    38c4:	41 15       	cp	r20, r1
    38c6:	51 05       	cpc	r21, r1
    38c8:	19 f0       	breq	.+6      	; 0x38d0 <SPKR_play_beep+0x80>
    38ca:	ca 01       	movw	r24, r20
    38cc:	0e 94 37 21 	call	0x426e	; 0x426e <TMRSRVC_delay>
    38d0:	df 91       	pop	r29
    38d2:	cf 91       	pop	r28
    38d4:	1f 91       	pop	r17
    38d6:	0f 91       	pop	r16
    38d8:	ff 90       	pop	r15
    38da:	ef 90       	pop	r14
    38dc:	df 90       	pop	r13
    38de:	cf 90       	pop	r12
    38e0:	bf 90       	pop	r11
    38e2:	af 90       	pop	r10
    38e4:	9f 90       	pop	r9
    38e6:	8f 90       	pop	r8
    38e8:	08 95       	ret

000038ea <STEPPER_get_nSteps>:
    38ea:	80 91 92 07 	lds	r24, 0x0792
    38ee:	90 91 93 07 	lds	r25, 0x0793
    38f2:	20 91 94 07 	lds	r18, 0x0794
    38f6:	30 91 95 07 	lds	r19, 0x0795
    38fa:	bc 01       	movw	r22, r24
    38fc:	c9 01       	movw	r24, r18
    38fe:	08 95       	ret

00003900 <STEPPER_stepmode>:
    3900:	2f 92       	push	r2
    3902:	3f 92       	push	r3
    3904:	4f 92       	push	r4
    3906:	5f 92       	push	r5
    3908:	6f 92       	push	r6
    390a:	7f 92       	push	r7
    390c:	8f 92       	push	r8
    390e:	9f 92       	push	r9
    3910:	af 92       	push	r10
    3912:	bf 92       	push	r11
    3914:	cf 92       	push	r12
    3916:	df 92       	push	r13
    3918:	ef 92       	push	r14
    391a:	ff 92       	push	r15
    391c:	0f 93       	push	r16
    391e:	1f 93       	push	r17
    3920:	df 93       	push	r29
    3922:	cf 93       	push	r28
    3924:	cd b7       	in	r28, 0x3d	; 61
    3926:	de b7       	in	r29, 0x3e	; 62
    3928:	58 2e       	mov	r5, r24
    392a:	96 2e       	mov	r9, r22
    392c:	44 2e       	mov	r4, r20
    392e:	39 01       	movw	r6, r18
    3930:	3c 2c       	mov	r3, r12
    3932:	c9 8c       	ldd	r12, Y+25	; 0x19
    3934:	da 8c       	ldd	r13, Y+26	; 0x1a
    3936:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3938:	81 e0       	ldi	r24, 0x01	; 1
    393a:	68 17       	cp	r22, r24
    393c:	39 f1       	breq	.+78     	; 0x398c <STEPPER_stepmode+0x8c>
    393e:	68 17       	cp	r22, r24
    3940:	28 f0       	brcs	.+10     	; 0x394c <STEPPER_stepmode+0x4c>
    3942:	92 e0       	ldi	r25, 0x02	; 2
    3944:	69 17       	cp	r22, r25
    3946:	09 f0       	breq	.+2      	; 0x394a <STEPPER_stepmode+0x4a>
    3948:	85 c0       	rjmp	.+266    	; 0x3a54 <STEPPER_stepmode+0x154>
    394a:	49 c0       	rjmp	.+146    	; 0x39de <STEPPER_stepmode+0xde>
    394c:	80 e0       	ldi	r24, 0x00	; 0
    394e:	61 e0       	ldi	r22, 0x01	; 1
    3950:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <STEPPER_set_mode>
    3954:	80 e0       	ldi	r24, 0x00	; 0
    3956:	b7 01       	movw	r22, r14
    3958:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <STEPPER_set_accel>
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	64 2d       	mov	r22, r4
    3960:	a3 01       	movw	r20, r6
    3962:	98 01       	movw	r18, r16
    3964:	03 2d       	mov	r16, r3
    3966:	ee 24       	eor	r14, r14
    3968:	e3 94       	inc	r14
    396a:	e7 eb       	ldi	r30, 0xB7	; 183
    396c:	ce 2e       	mov	r12, r30
    396e:	e7 e0       	ldi	r30, 0x07	; 7
    3970:	de 2e       	mov	r13, r30
    3972:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <STEPPER_step>
    3976:	55 20       	and	r5, r5
    3978:	09 f0       	breq	.+2      	; 0x397c <STEPPER_stepmode+0x7c>
    397a:	6c c0       	rjmp	.+216    	; 0x3a54 <STEPPER_stepmode+0x154>
    397c:	00 d0       	rcall	.+0      	; 0x397e <STEPPER_stepmode+0x7e>
    397e:	0f 92       	push	r0
    3980:	ed b7       	in	r30, 0x3d	; 61
    3982:	fe b7       	in	r31, 0x3e	; 62
    3984:	11 82       	std	Z+1, r1	; 0x01
    3986:	b3 82       	std	Z+3, r11	; 0x03
    3988:	a2 82       	std	Z+2, r10	; 0x02
    398a:	23 c0       	rjmp	.+70     	; 0x39d2 <STEPPER_stepmode+0xd2>
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	61 e0       	ldi	r22, 0x01	; 1
    3990:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <STEPPER_set_mode>
    3994:	81 e0       	ldi	r24, 0x01	; 1
    3996:	b6 01       	movw	r22, r12
    3998:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <STEPPER_set_accel>
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	68 2d       	mov	r22, r8
    39a0:	4d 89       	ldd	r20, Y+21	; 0x15
    39a2:	5e 89       	ldd	r21, Y+22	; 0x16
    39a4:	2f 89       	ldd	r18, Y+23	; 0x17
    39a6:	38 8d       	ldd	r19, Y+24	; 0x18
    39a8:	02 2d       	mov	r16, r2
    39aa:	ee 24       	eor	r14, r14
    39ac:	e3 94       	inc	r14
    39ae:	77 eb       	ldi	r23, 0xB7	; 183
    39b0:	c7 2e       	mov	r12, r23
    39b2:	77 e0       	ldi	r23, 0x07	; 7
    39b4:	d7 2e       	mov	r13, r23
    39b6:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <STEPPER_step>
    39ba:	55 20       	and	r5, r5
    39bc:	09 f0       	breq	.+2      	; 0x39c0 <STEPPER_stepmode+0xc0>
    39be:	4a c0       	rjmp	.+148    	; 0x3a54 <STEPPER_stepmode+0x154>
    39c0:	00 d0       	rcall	.+0      	; 0x39c2 <STEPPER_stepmode+0xc2>
    39c2:	0f 92       	push	r0
    39c4:	ed b7       	in	r30, 0x3d	; 61
    39c6:	fe b7       	in	r31, 0x3e	; 62
    39c8:	91 82       	std	Z+1, r9	; 0x01
    39ca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39cc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39ce:	93 83       	std	Z+3, r25	; 0x03
    39d0:	82 83       	std	Z+2, r24	; 0x02
    39d2:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <STEPPER_wait_and_then>
    39d6:	0f 90       	pop	r0
    39d8:	0f 90       	pop	r0
    39da:	0f 90       	pop	r0
    39dc:	3b c0       	rjmp	.+118    	; 0x3a54 <STEPPER_stepmode+0x154>
    39de:	82 e0       	ldi	r24, 0x02	; 2
    39e0:	61 e0       	ldi	r22, 0x01	; 1
    39e2:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <STEPPER_set_mode>
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	b7 01       	movw	r22, r14
    39ea:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <STEPPER_set_accel>
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	b6 01       	movw	r22, r12
    39f2:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <STEPPER_set_accel>
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	64 2d       	mov	r22, r4
    39fa:	a3 01       	movw	r20, r6
    39fc:	98 01       	movw	r18, r16
    39fe:	03 2d       	mov	r16, r3
    3a00:	ee 24       	eor	r14, r14
    3a02:	e3 94       	inc	r14
    3a04:	97 eb       	ldi	r25, 0xB7	; 183
    3a06:	c9 2e       	mov	r12, r25
    3a08:	97 e0       	ldi	r25, 0x07	; 7
    3a0a:	d9 2e       	mov	r13, r25
    3a0c:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <STEPPER_step>
    3a10:	81 e0       	ldi	r24, 0x01	; 1
    3a12:	68 2d       	mov	r22, r8
    3a14:	4d 89       	ldd	r20, Y+21	; 0x15
    3a16:	5e 89       	ldd	r21, Y+22	; 0x16
    3a18:	2f 89       	ldd	r18, Y+23	; 0x17
    3a1a:	38 8d       	ldd	r19, Y+24	; 0x18
    3a1c:	02 2d       	mov	r16, r2
    3a1e:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <STEPPER_step>
    3a22:	55 20       	and	r5, r5
    3a24:	b9 f4       	brne	.+46     	; 0x3a54 <STEPPER_stepmode+0x154>
    3a26:	00 d0       	rcall	.+0      	; 0x3a28 <STEPPER_stepmode+0x128>
    3a28:	00 d0       	rcall	.+0      	; 0x3a2a <STEPPER_stepmode+0x12a>
    3a2a:	0f 92       	push	r0
    3a2c:	ad b7       	in	r26, 0x3d	; 61
    3a2e:	be b7       	in	r27, 0x3e	; 62
    3a30:	11 96       	adiw	r26, 0x01	; 1
    3a32:	ed b7       	in	r30, 0x3d	; 61
    3a34:	fe b7       	in	r31, 0x3e	; 62
    3a36:	91 82       	std	Z+1, r9	; 0x01
    3a38:	fd 01       	movw	r30, r26
    3a3a:	b2 82       	std	Z+2, r11	; 0x02
    3a3c:	a1 82       	std	Z+1, r10	; 0x01
    3a3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a40:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a42:	94 83       	std	Z+4, r25	; 0x04
    3a44:	83 83       	std	Z+3, r24	; 0x03
    3a46:	0e 94 8c 1f 	call	0x3f18	; 0x3f18 <STEPPER_wait_and_then>
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	cf 91       	pop	r28
    3a56:	df 91       	pop	r29
    3a58:	1f 91       	pop	r17
    3a5a:	0f 91       	pop	r16
    3a5c:	ff 90       	pop	r15
    3a5e:	ef 90       	pop	r14
    3a60:	df 90       	pop	r13
    3a62:	cf 90       	pop	r12
    3a64:	bf 90       	pop	r11
    3a66:	af 90       	pop	r10
    3a68:	9f 90       	pop	r9
    3a6a:	8f 90       	pop	r8
    3a6c:	7f 90       	pop	r7
    3a6e:	6f 90       	pop	r6
    3a70:	5f 90       	pop	r5
    3a72:	4f 90       	pop	r4
    3a74:	3f 90       	pop	r3
    3a76:	2f 90       	pop	r2
    3a78:	08 95       	ret

00003a7a <STEPPER_move>:
    3a7a:	6f 92       	push	r6
    3a7c:	7f 92       	push	r7
    3a7e:	8f 92       	push	r8
    3a80:	9f 92       	push	r9
    3a82:	af 92       	push	r10
    3a84:	bf 92       	push	r11
    3a86:	cf 92       	push	r12
    3a88:	df 92       	push	r13
    3a8a:	ef 92       	push	r14
    3a8c:	ff 92       	push	r15
    3a8e:	0f 93       	push	r16
    3a90:	1f 93       	push	r17
    3a92:	df 93       	push	r29
    3a94:	cf 93       	push	r28
    3a96:	cd b7       	in	r28, 0x3d	; 61
    3a98:	de b7       	in	r29, 0x3e	; 62
    3a9a:	94 2e       	mov	r9, r20
    3a9c:	7c 2d       	mov	r23, r12
    3a9e:	d5 01       	movw	r26, r10
    3aa0:	49 89       	ldd	r20, Y+17	; 0x11
    3aa2:	5a 89       	ldd	r21, Y+18	; 0x12
    3aa4:	ab 88       	ldd	r10, Y+19	; 0x13
    3aa6:	bc 88       	ldd	r11, Y+20	; 0x14
    3aa8:	cd 88       	ldd	r12, Y+21	; 0x15
    3aaa:	de 88       	ldd	r13, Y+22	; 0x16
    3aac:	9f 89       	ldd	r25, Y+23	; 0x17
    3aae:	81 30       	cpi	r24, 0x01	; 1
    3ab0:	09 f4       	brne	.+2      	; 0x3ab4 <STEPPER_move+0x3a>
    3ab2:	57 c0       	rjmp	.+174    	; 0x3b62 <STEPPER_move+0xe8>
    3ab4:	81 30       	cpi	r24, 0x01	; 1
    3ab6:	b8 f1       	brcs	.+110    	; 0x3b26 <STEPPER_move+0xac>
    3ab8:	82 30       	cpi	r24, 0x02	; 2
    3aba:	09 f0       	breq	.+2      	; 0x3abe <STEPPER_move+0x44>
    3abc:	76 c0       	rjmp	.+236    	; 0x3baa <STEPPER_move+0x130>
    3abe:	61 30       	cpi	r22, 0x01	; 1
    3ac0:	91 f0       	breq	.+36     	; 0x3ae6 <STEPPER_move+0x6c>
    3ac2:	61 30       	cpi	r22, 0x01	; 1
    3ac4:	20 f0       	brcs	.+8      	; 0x3ace <STEPPER_move+0x54>
    3ac6:	62 30       	cpi	r22, 0x02	; 2
    3ac8:	09 f0       	breq	.+2      	; 0x3acc <STEPPER_move+0x52>
    3aca:	6f c0       	rjmp	.+222    	; 0x3baa <STEPPER_move+0x130>
    3acc:	15 c0       	rjmp	.+42     	; 0x3af8 <STEPPER_move+0x7e>
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	60 e0       	ldi	r22, 0x00	; 0
    3ad2:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <STEPPER_set_mode>
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	b7 01       	movw	r22, r14
    3ada:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <STEPPER_set_accel>
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	69 2d       	mov	r22, r9
    3ae2:	a8 01       	movw	r20, r16
    3ae4:	1d c0       	rjmp	.+58     	; 0x3b20 <STEPPER_move+0xa6>
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	60 e0       	ldi	r22, 0x00	; 0
    3aea:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <STEPPER_set_mode>
    3aee:	81 e0       	ldi	r24, 0x01	; 1
    3af0:	b6 01       	movw	r22, r12
    3af2:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <STEPPER_set_accel>
    3af6:	11 c0       	rjmp	.+34     	; 0x3b1a <STEPPER_move+0xa0>
    3af8:	82 e0       	ldi	r24, 0x02	; 2
    3afa:	60 e0       	ldi	r22, 0x00	; 0
    3afc:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <STEPPER_set_mode>
    3b00:	80 e0       	ldi	r24, 0x00	; 0
    3b02:	b7 01       	movw	r22, r14
    3b04:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <STEPPER_set_accel>
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	b6 01       	movw	r22, r12
    3b0c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <STEPPER_set_accel>
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	69 2d       	mov	r22, r9
    3b14:	a8 01       	movw	r20, r16
    3b16:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <STEPPER_run>
    3b1a:	81 e0       	ldi	r24, 0x01	; 1
    3b1c:	68 2d       	mov	r22, r8
    3b1e:	a5 01       	movw	r20, r10
    3b20:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <STEPPER_run>
    3b24:	42 c0       	rjmp	.+132    	; 0x3baa <STEPPER_move+0x130>
    3b26:	ed b7       	in	r30, 0x3d	; 61
    3b28:	fe b7       	in	r31, 0x3e	; 62
    3b2a:	39 97       	sbiw	r30, 0x09	; 9
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	fe bf       	out	0x3e, r31	; 62
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	ed bf       	out	0x3d, r30	; 61
    3b36:	6d b6       	in	r6, 0x3d	; 61
    3b38:	7e b6       	in	r7, 0x3e	; 62
    3b3a:	08 94       	sec
    3b3c:	61 1c       	adc	r6, r1
    3b3e:	71 1c       	adc	r7, r1
    3b40:	52 83       	std	Z+2, r21	; 0x02
    3b42:	41 83       	std	Z+1, r20	; 0x01
    3b44:	f3 01       	movw	r30, r6
    3b46:	b3 82       	std	Z+3, r11	; 0x03
    3b48:	a2 82       	std	Z+2, r10	; 0x02
    3b4a:	d5 82       	std	Z+5, r13	; 0x05
    3b4c:	c4 82       	std	Z+4, r12	; 0x04
    3b4e:	96 83       	std	Z+6, r25	; 0x06
    3b50:	88 8d       	ldd	r24, Y+24	; 0x18
    3b52:	99 8d       	ldd	r25, Y+25	; 0x19
    3b54:	90 87       	std	Z+8, r25	; 0x08
    3b56:	87 83       	std	Z+7, r24	; 0x07
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	49 2d       	mov	r20, r9
    3b5c:	c7 2e       	mov	r12, r23
    3b5e:	5d 01       	movw	r10, r26
    3b60:	1a c0       	rjmp	.+52     	; 0x3b96 <STEPPER_move+0x11c>
    3b62:	ed b7       	in	r30, 0x3d	; 61
    3b64:	fe b7       	in	r31, 0x3e	; 62
    3b66:	39 97       	sbiw	r30, 0x09	; 9
    3b68:	0f b6       	in	r0, 0x3f	; 63
    3b6a:	f8 94       	cli
    3b6c:	fe bf       	out	0x3e, r31	; 62
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	ed bf       	out	0x3d, r30	; 61
    3b72:	ad b7       	in	r26, 0x3d	; 61
    3b74:	be b7       	in	r27, 0x3e	; 62
    3b76:	11 96       	adiw	r26, 0x01	; 1
    3b78:	52 83       	std	Z+2, r21	; 0x02
    3b7a:	41 83       	std	Z+1, r20	; 0x01
    3b7c:	fd 01       	movw	r30, r26
    3b7e:	b3 82       	std	Z+3, r11	; 0x03
    3b80:	a2 82       	std	Z+2, r10	; 0x02
    3b82:	d5 82       	std	Z+5, r13	; 0x05
    3b84:	c4 82       	std	Z+4, r12	; 0x04
    3b86:	96 83       	std	Z+6, r25	; 0x06
    3b88:	10 86       	std	Z+8, r1	; 0x08
    3b8a:	17 82       	std	Z+7, r1	; 0x07
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	49 2d       	mov	r20, r9
    3b90:	c7 2e       	mov	r12, r23
    3b92:	aa 24       	eor	r10, r10
    3b94:	bb 24       	eor	r11, r11
    3b96:	0e 94 80 1c 	call	0x3900	; 0x3900 <STEPPER_stepmode>
    3b9a:	8d b7       	in	r24, 0x3d	; 61
    3b9c:	9e b7       	in	r25, 0x3e	; 62
    3b9e:	09 96       	adiw	r24, 0x09	; 9
    3ba0:	0f b6       	in	r0, 0x3f	; 63
    3ba2:	f8 94       	cli
    3ba4:	9e bf       	out	0x3e, r25	; 62
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	8d bf       	out	0x3d, r24	; 61
    3baa:	cf 91       	pop	r28
    3bac:	df 91       	pop	r29
    3bae:	1f 91       	pop	r17
    3bb0:	0f 91       	pop	r16
    3bb2:	ff 90       	pop	r15
    3bb4:	ef 90       	pop	r14
    3bb6:	df 90       	pop	r13
    3bb8:	cf 90       	pop	r12
    3bba:	bf 90       	pop	r11
    3bbc:	af 90       	pop	r10
    3bbe:	9f 90       	pop	r9
    3bc0:	8f 90       	pop	r8
    3bc2:	7f 90       	pop	r7
    3bc4:	6f 90       	pop	r6
    3bc6:	08 95       	ret

00003bc8 <STEPPER_open>:
    3bc8:	0e 94 21 27 	call	0x4e42	; 0x4e42 <__STEPPER_init>
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	80 93 b6 07 	sts	0x07B6, r24
    3bd2:	e0 e8       	ldi	r30, 0x80	; 128
    3bd4:	f7 e0       	ldi	r31, 0x07	; 7
    3bd6:	11 92       	st	Z+, r1
    3bd8:	11 92       	st	Z+, r1
    3bda:	11 82       	std	Z+1, r1	; 0x01
    3bdc:	10 82       	st	Z, r1
    3bde:	32 96       	adiw	r30, 0x02	; 2
    3be0:	11 82       	std	Z+1, r1	; 0x01
    3be2:	10 82       	st	Z, r1
    3be4:	32 96       	adiw	r30, 0x02	; 2
    3be6:	11 82       	std	Z+1, r1	; 0x01
    3be8:	10 82       	st	Z, r1
    3bea:	32 96       	adiw	r30, 0x02	; 2
    3bec:	11 82       	std	Z+1, r1	; 0x01
    3bee:	10 82       	st	Z, r1
    3bf0:	32 96       	adiw	r30, 0x02	; 2
    3bf2:	11 82       	std	Z+1, r1	; 0x01
    3bf4:	10 82       	st	Z, r1
    3bf6:	32 96       	adiw	r30, 0x02	; 2
    3bf8:	11 82       	std	Z+1, r1	; 0x01
    3bfa:	10 82       	st	Z, r1
    3bfc:	32 96       	adiw	r30, 0x02	; 2
    3bfe:	11 82       	std	Z+1, r1	; 0x01
    3c00:	10 82       	st	Z, r1
    3c02:	32 96       	adiw	r30, 0x02	; 2
    3c04:	11 82       	std	Z+1, r1	; 0x01
    3c06:	10 82       	st	Z, r1
    3c08:	32 96       	adiw	r30, 0x02	; 2
    3c0a:	11 82       	std	Z+1, r1	; 0x01
    3c0c:	10 82       	st	Z, r1
    3c0e:	32 96       	adiw	r30, 0x02	; 2
    3c10:	11 82       	std	Z+1, r1	; 0x01
    3c12:	10 82       	st	Z, r1
    3c14:	32 96       	adiw	r30, 0x02	; 2
    3c16:	11 82       	std	Z+1, r1	; 0x01
    3c18:	10 82       	st	Z, r1
    3c1a:	32 96       	adiw	r30, 0x02	; 2
    3c1c:	11 82       	std	Z+1, r1	; 0x01
    3c1e:	10 82       	st	Z, r1
    3c20:	36 96       	adiw	r30, 0x06	; 6
    3c22:	11 92       	st	Z+, r1
    3c24:	11 92       	st	Z+, r1
    3c26:	11 92       	st	Z+, r1
    3c28:	10 82       	st	Z, r1
    3c2a:	32 96       	adiw	r30, 0x02	; 2
    3c2c:	11 92       	st	Z+, r1
    3c2e:	11 92       	st	Z+, r1
    3c30:	11 92       	st	Z+, r1
    3c32:	11 92       	st	Z+, r1
    3c34:	11 92       	st	Z+, r1
    3c36:	11 92       	st	Z+, r1
    3c38:	11 92       	st	Z+, r1
    3c3a:	11 82       	std	Z+1, r1	; 0x01
    3c3c:	10 82       	st	Z, r1
    3c3e:	32 96       	adiw	r30, 0x02	; 2
    3c40:	11 82       	std	Z+1, r1	; 0x01
    3c42:	10 82       	st	Z, r1
    3c44:	32 96       	adiw	r30, 0x02	; 2
    3c46:	11 82       	std	Z+1, r1	; 0x01
    3c48:	10 82       	st	Z, r1
    3c4a:	32 96       	adiw	r30, 0x02	; 2
    3c4c:	11 82       	std	Z+1, r1	; 0x01
    3c4e:	10 82       	st	Z, r1
    3c50:	76 97       	sbiw	r30, 0x16	; 22
    3c52:	11 82       	std	Z+1, r1	; 0x01
    3c54:	10 82       	st	Z, r1
    3c56:	32 96       	adiw	r30, 0x02	; 2
    3c58:	11 82       	std	Z+1, r1	; 0x01
    3c5a:	10 82       	st	Z, r1
    3c5c:	10 92 b5 07 	sts	0x07B5, r1
    3c60:	10 92 b4 07 	sts	0x07B4, r1
    3c64:	10 92 b6 07 	sts	0x07B6, r1
    3c68:	87 e0       	ldi	r24, 0x07	; 7
    3c6a:	61 e0       	ldi	r22, 0x01	; 1
    3c6c:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    3c70:	87 e0       	ldi	r24, 0x07	; 7
    3c72:	91 e0       	ldi	r25, 0x01	; 1
    3c74:	08 95       	ret

00003c76 <STEPPER_run>:
    3c76:	ef 92       	push	r14
    3c78:	ff 92       	push	r15
    3c7a:	0f 93       	push	r16
    3c7c:	1f 93       	push	r17
    3c7e:	18 2f       	mov	r17, r24
    3c80:	06 2f       	mov	r16, r22
    3c82:	7a 01       	movw	r14, r20
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <STEPPER_set_mode>
    3c8a:	81 2f       	mov	r24, r17
    3c8c:	60 2f       	mov	r22, r16
    3c8e:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <STEPPER_set_dir>
    3c92:	81 2f       	mov	r24, r17
    3c94:	b7 01       	movw	r22, r14
    3c96:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <STEPPER_set_speed>
    3c9a:	1f 91       	pop	r17
    3c9c:	0f 91       	pop	r16
    3c9e:	ff 90       	pop	r15
    3ca0:	ef 90       	pop	r14
    3ca2:	08 95       	ret

00003ca4 <STEPPER_set_accel>:
    3ca4:	48 2f       	mov	r20, r24
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	80 93 b6 07 	sts	0x07B6, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	23 e0       	ldi	r18, 0x03	; 3
    3cb0:	69 3e       	cpi	r22, 0xE9	; 233
    3cb2:	72 07       	cpc	r23, r18
    3cb4:	10 f0       	brcs	.+4      	; 0x3cba <STEPPER_set_accel+0x16>
    3cb6:	88 ee       	ldi	r24, 0xE8	; 232
    3cb8:	93 e0       	ldi	r25, 0x03	; 3
    3cba:	41 30       	cpi	r20, 0x01	; 1
    3cbc:	71 f0       	breq	.+28     	; 0x3cda <STEPPER_set_accel+0x36>
    3cbe:	41 30       	cpi	r20, 0x01	; 1
    3cc0:	18 f0       	brcs	.+6      	; 0x3cc8 <STEPPER_set_accel+0x24>
    3cc2:	42 30       	cpi	r20, 0x02	; 2
    3cc4:	71 f4       	brne	.+28     	; 0x3ce2 <STEPPER_set_accel+0x3e>
    3cc6:	05 c0       	rjmp	.+10     	; 0x3cd2 <STEPPER_set_accel+0x2e>
    3cc8:	90 93 8b 07 	sts	0x078B, r25
    3ccc:	80 93 8a 07 	sts	0x078A, r24
    3cd0:	08 c0       	rjmp	.+16     	; 0x3ce2 <STEPPER_set_accel+0x3e>
    3cd2:	90 93 8b 07 	sts	0x078B, r25
    3cd6:	80 93 8a 07 	sts	0x078A, r24
    3cda:	90 93 8d 07 	sts	0x078D, r25
    3cde:	80 93 8c 07 	sts	0x078C, r24
    3ce2:	10 92 b6 07 	sts	0x07B6, r1
    3ce6:	08 95       	ret

00003ce8 <STEPPER_set_dir>:
    3ce8:	98 2f       	mov	r25, r24
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	80 93 b6 07 	sts	0x07B6, r24
    3cf0:	91 30       	cpi	r25, 0x01	; 1
    3cf2:	51 f0       	breq	.+20     	; 0x3d08 <STEPPER_set_dir+0x20>
    3cf4:	91 30       	cpi	r25, 0x01	; 1
    3cf6:	18 f0       	brcs	.+6      	; 0x3cfe <STEPPER_set_dir+0x16>
    3cf8:	92 30       	cpi	r25, 0x02	; 2
    3cfa:	41 f4       	brne	.+16     	; 0x3d0c <STEPPER_set_dir+0x24>
    3cfc:	03 c0       	rjmp	.+6      	; 0x3d04 <STEPPER_set_dir+0x1c>
    3cfe:	60 93 a3 07 	sts	0x07A3, r22
    3d02:	04 c0       	rjmp	.+8      	; 0x3d0c <STEPPER_set_dir+0x24>
    3d04:	60 93 a3 07 	sts	0x07A3, r22
    3d08:	60 93 a4 07 	sts	0x07A4, r22
    3d0c:	10 92 b6 07 	sts	0x07B6, r1
    3d10:	08 95       	ret

00003d12 <STEPPER_set_mode>:
    3d12:	98 2f       	mov	r25, r24
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	80 93 b6 07 	sts	0x07B6, r24
    3d1a:	91 30       	cpi	r25, 0x01	; 1
    3d1c:	51 f0       	breq	.+20     	; 0x3d32 <STEPPER_set_mode+0x20>
    3d1e:	91 30       	cpi	r25, 0x01	; 1
    3d20:	18 f0       	brcs	.+6      	; 0x3d28 <STEPPER_set_mode+0x16>
    3d22:	92 30       	cpi	r25, 0x02	; 2
    3d24:	41 f4       	brne	.+16     	; 0x3d36 <STEPPER_set_mode+0x24>
    3d26:	03 c0       	rjmp	.+6      	; 0x3d2e <STEPPER_set_mode+0x1c>
    3d28:	60 93 80 07 	sts	0x0780, r22
    3d2c:	04 c0       	rjmp	.+8      	; 0x3d36 <STEPPER_set_mode+0x24>
    3d2e:	60 93 80 07 	sts	0x0780, r22
    3d32:	60 93 81 07 	sts	0x0781, r22
    3d36:	10 92 b6 07 	sts	0x07B6, r1
    3d3a:	08 95       	ret

00003d3c <STEPPER_set_speed>:
    3d3c:	48 2f       	mov	r20, r24
    3d3e:	81 e0       	ldi	r24, 0x01	; 1
    3d40:	80 93 b6 07 	sts	0x07B6, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	21 e0       	ldi	r18, 0x01	; 1
    3d48:	61 39       	cpi	r22, 0x91	; 145
    3d4a:	72 07       	cpc	r23, r18
    3d4c:	10 f0       	brcs	.+4      	; 0x3d52 <STEPPER_set_speed+0x16>
    3d4e:	80 e9       	ldi	r24, 0x90	; 144
    3d50:	91 e0       	ldi	r25, 0x01	; 1
    3d52:	41 30       	cpi	r20, 0x01	; 1
    3d54:	71 f0       	breq	.+28     	; 0x3d72 <STEPPER_set_speed+0x36>
    3d56:	41 30       	cpi	r20, 0x01	; 1
    3d58:	18 f0       	brcs	.+6      	; 0x3d60 <STEPPER_set_speed+0x24>
    3d5a:	42 30       	cpi	r20, 0x02	; 2
    3d5c:	71 f4       	brne	.+28     	; 0x3d7a <STEPPER_set_speed+0x3e>
    3d5e:	05 c0       	rjmp	.+10     	; 0x3d6a <STEPPER_set_speed+0x2e>
    3d60:	90 93 83 07 	sts	0x0783, r25
    3d64:	80 93 82 07 	sts	0x0782, r24
    3d68:	08 c0       	rjmp	.+16     	; 0x3d7a <STEPPER_set_speed+0x3e>
    3d6a:	90 93 83 07 	sts	0x0783, r25
    3d6e:	80 93 82 07 	sts	0x0782, r24
    3d72:	90 93 85 07 	sts	0x0785, r25
    3d76:	80 93 84 07 	sts	0x0784, r24
    3d7a:	10 92 b6 07 	sts	0x07B6, r1
    3d7e:	08 95       	ret

00003d80 <STEPPER_set_steps>:
    3d80:	98 2f       	mov	r25, r24
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	80 93 b6 07 	sts	0x07B6, r24
    3d88:	91 30       	cpi	r25, 0x01	; 1
    3d8a:	71 f0       	breq	.+28     	; 0x3da8 <STEPPER_set_steps+0x28>
    3d8c:	91 30       	cpi	r25, 0x01	; 1
    3d8e:	18 f0       	brcs	.+6      	; 0x3d96 <STEPPER_set_steps+0x16>
    3d90:	92 30       	cpi	r25, 0x02	; 2
    3d92:	71 f4       	brne	.+28     	; 0x3db0 <STEPPER_set_steps+0x30>
    3d94:	05 c0       	rjmp	.+10     	; 0x3da0 <STEPPER_set_steps+0x20>
    3d96:	70 93 93 07 	sts	0x0793, r23
    3d9a:	60 93 92 07 	sts	0x0792, r22
    3d9e:	08 c0       	rjmp	.+16     	; 0x3db0 <STEPPER_set_steps+0x30>
    3da0:	70 93 93 07 	sts	0x0793, r23
    3da4:	60 93 92 07 	sts	0x0792, r22
    3da8:	70 93 95 07 	sts	0x0795, r23
    3dac:	60 93 94 07 	sts	0x0794, r22
    3db0:	10 92 b6 07 	sts	0x07B6, r1
    3db4:	08 95       	ret

00003db6 <STEPPER_step>:
    3db6:	8f 92       	push	r8
    3db8:	9f 92       	push	r9
    3dba:	af 92       	push	r10
    3dbc:	bf 92       	push	r11
    3dbe:	cf 92       	push	r12
    3dc0:	df 92       	push	r13
    3dc2:	ef 92       	push	r14
    3dc4:	ff 92       	push	r15
    3dc6:	0f 93       	push	r16
    3dc8:	1f 93       	push	r17
    3dca:	cf 93       	push	r28
    3dcc:	df 93       	push	r29
    3dce:	18 2f       	mov	r17, r24
    3dd0:	f6 2e       	mov	r15, r22
    3dd2:	5a 01       	movw	r10, r20
    3dd4:	49 01       	movw	r8, r18
    3dd6:	e6 01       	movw	r28, r12
    3dd8:	61 e0       	ldi	r22, 0x01	; 1
    3dda:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <STEPPER_set_mode>
    3dde:	81 2f       	mov	r24, r17
    3de0:	b5 01       	movw	r22, r10
    3de2:	a4 01       	movw	r20, r8
    3de4:	0e 94 40 27 	call	0x4e80	; 0x4e80 <STEPPER_setup_decels>
    3de8:	81 2f       	mov	r24, r17
    3dea:	6f 2d       	mov	r22, r15
    3dec:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <STEPPER_set_dir>
    3df0:	81 2f       	mov	r24, r17
    3df2:	60 2f       	mov	r22, r16
    3df4:	0e 94 2b 27 	call	0x4e56	; 0x4e56 <STEPPER_set_stop_mode>
    3df8:	81 2f       	mov	r24, r17
    3dfa:	b5 01       	movw	r22, r10
    3dfc:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_steps>
    3e00:	c1 14       	cp	r12, r1
    3e02:	d1 04       	cpc	r13, r1
    3e04:	99 f0       	breq	.+38     	; 0x3e2c <STEPPER_step+0x76>
    3e06:	11 30       	cpi	r17, 0x01	; 1
    3e08:	49 f0       	breq	.+18     	; 0x3e1c <STEPPER_step+0x66>
    3e0a:	11 30       	cpi	r17, 0x01	; 1
    3e0c:	18 f0       	brcs	.+6      	; 0x3e14 <STEPPER_step+0x5e>
    3e0e:	12 30       	cpi	r17, 0x02	; 2
    3e10:	69 f4       	brne	.+26     	; 0x3e2c <STEPPER_step+0x76>
    3e12:	06 c0       	rjmp	.+12     	; 0x3e20 <STEPPER_step+0x6a>
    3e14:	18 82       	st	Y, r1
    3e16:	10 92 b2 07 	sts	0x07B2, r1
    3e1a:	08 c0       	rjmp	.+16     	; 0x3e2c <STEPPER_step+0x76>
    3e1c:	19 82       	std	Y+1, r1	; 0x01
    3e1e:	04 c0       	rjmp	.+8      	; 0x3e28 <STEPPER_step+0x72>
    3e20:	18 82       	st	Y, r1
    3e22:	19 82       	std	Y+1, r1	; 0x01
    3e24:	10 92 b2 07 	sts	0x07B2, r1
    3e28:	10 92 b3 07 	sts	0x07B3, r1
    3e2c:	d0 93 b5 07 	sts	0x07B5, r29
    3e30:	c0 93 b4 07 	sts	0x07B4, r28
    3e34:	ee 20       	and	r14, r14
    3e36:	b9 f5       	brne	.+110    	; 0x3ea6 <STEPPER_step+0xf0>
    3e38:	80 e6       	ldi	r24, 0x60	; 96
    3e3a:	94 e0       	ldi	r25, 0x04	; 4
    3e3c:	90 93 b5 07 	sts	0x07B5, r25
    3e40:	80 93 b4 07 	sts	0x07B4, r24
    3e44:	81 2f       	mov	r24, r17
    3e46:	b4 01       	movw	r22, r8
    3e48:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <STEPPER_set_speed>
    3e4c:	81 2f       	mov	r24, r17
    3e4e:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <STEPPER_go>
    3e52:	11 30       	cpi	r17, 0x01	; 1
    3e54:	71 f0       	breq	.+28     	; 0x3e72 <STEPPER_step+0xbc>
    3e56:	11 30       	cpi	r17, 0x01	; 1
    3e58:	18 f0       	brcs	.+6      	; 0x3e60 <STEPPER_step+0xaa>
    3e5a:	12 30       	cpi	r17, 0x02	; 2
    3e5c:	59 f5       	brne	.+86     	; 0x3eb4 <STEPPER_step+0xfe>
    3e5e:	12 c0       	rjmp	.+36     	; 0x3e84 <STEPPER_step+0xce>
    3e60:	10 92 60 04 	sts	0x0460, r1
    3e64:	10 92 b2 07 	sts	0x07B2, r1
    3e68:	80 91 60 04 	lds	r24, 0x0460
    3e6c:	88 23       	and	r24, r24
    3e6e:	e1 f3       	breq	.-8      	; 0x3e68 <STEPPER_step+0xb2>
    3e70:	21 c0       	rjmp	.+66     	; 0x3eb4 <STEPPER_step+0xfe>
    3e72:	10 92 61 04 	sts	0x0461, r1
    3e76:	10 92 b3 07 	sts	0x07B3, r1
    3e7a:	80 91 61 04 	lds	r24, 0x0461
    3e7e:	88 23       	and	r24, r24
    3e80:	e1 f3       	breq	.-8      	; 0x3e7a <STEPPER_step+0xc4>
    3e82:	18 c0       	rjmp	.+48     	; 0x3eb4 <STEPPER_step+0xfe>
    3e84:	10 92 60 04 	sts	0x0460, r1
    3e88:	10 92 61 04 	sts	0x0461, r1
    3e8c:	10 92 b2 07 	sts	0x07B2, r1
    3e90:	10 92 b3 07 	sts	0x07B3, r1
    3e94:	80 91 60 04 	lds	r24, 0x0460
    3e98:	88 23       	and	r24, r24
    3e9a:	e1 f3       	breq	.-8      	; 0x3e94 <STEPPER_step+0xde>
    3e9c:	80 91 61 04 	lds	r24, 0x0461
    3ea0:	88 23       	and	r24, r24
    3ea2:	c1 f3       	breq	.-16     	; 0x3e94 <STEPPER_step+0xde>
    3ea4:	07 c0       	rjmp	.+14     	; 0x3eb4 <STEPPER_step+0xfe>
    3ea6:	81 2f       	mov	r24, r17
    3ea8:	b4 01       	movw	r22, r8
    3eaa:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <STEPPER_set_speed>
    3eae:	81 2f       	mov	r24, r17
    3eb0:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <STEPPER_go>
    3eb4:	df 91       	pop	r29
    3eb6:	cf 91       	pop	r28
    3eb8:	1f 91       	pop	r17
    3eba:	0f 91       	pop	r16
    3ebc:	ff 90       	pop	r15
    3ebe:	ef 90       	pop	r14
    3ec0:	df 90       	pop	r13
    3ec2:	cf 90       	pop	r12
    3ec4:	bf 90       	pop	r11
    3ec6:	af 90       	pop	r10
    3ec8:	9f 90       	pop	r9
    3eca:	8f 90       	pop	r8
    3ecc:	08 95       	ret

00003ece <STEPPER_stop>:
    3ece:	0f 93       	push	r16
    3ed0:	1f 93       	push	r17
    3ed2:	18 2f       	mov	r17, r24
    3ed4:	06 2f       	mov	r16, r22
    3ed6:	66 23       	and	r22, r22
    3ed8:	49 f4       	brne	.+18     	; 0x3eec <STEPPER_stop+0x1e>
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	70 e0       	ldi	r23, 0x00	; 0
    3ede:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <STEPPER_set_speed>
    3ee2:	81 2f       	mov	r24, r17
    3ee4:	60 e0       	ldi	r22, 0x00	; 0
    3ee6:	70 e0       	ldi	r23, 0x00	; 0
    3ee8:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_steps>
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	80 93 b6 07 	sts	0x07B6, r24
    3ef2:	11 30       	cpi	r17, 0x01	; 1
    3ef4:	51 f0       	breq	.+20     	; 0x3f0a <STEPPER_stop+0x3c>
    3ef6:	11 30       	cpi	r17, 0x01	; 1
    3ef8:	18 f0       	brcs	.+6      	; 0x3f00 <STEPPER_stop+0x32>
    3efa:	12 30       	cpi	r17, 0x02	; 2
    3efc:	41 f4       	brne	.+16     	; 0x3f0e <STEPPER_stop+0x40>
    3efe:	03 c0       	rjmp	.+6      	; 0x3f06 <STEPPER_stop+0x38>
    3f00:	00 93 9e 07 	sts	0x079E, r16
    3f04:	04 c0       	rjmp	.+8      	; 0x3f0e <STEPPER_stop+0x40>
    3f06:	00 93 9e 07 	sts	0x079E, r16
    3f0a:	00 93 9f 07 	sts	0x079F, r16
    3f0e:	10 92 b6 07 	sts	0x07B6, r1
    3f12:	1f 91       	pop	r17
    3f14:	0f 91       	pop	r16
    3f16:	08 95       	ret

00003f18 <STEPPER_wait_and_then>:
    3f18:	cf 92       	push	r12
    3f1a:	df 92       	push	r13
    3f1c:	ef 92       	push	r14
    3f1e:	ff 92       	push	r15
    3f20:	0f 93       	push	r16
    3f22:	1f 93       	push	r17
    3f24:	df 93       	push	r29
    3f26:	cf 93       	push	r28
    3f28:	cd b7       	in	r28, 0x3d	; 61
    3f2a:	de b7       	in	r29, 0x3e	; 62
    3f2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f2e:	81 30       	cpi	r24, 0x01	; 1
    3f30:	61 f0       	breq	.+24     	; 0x3f4a <STEPPER_wait_and_then+0x32>
    3f32:	81 30       	cpi	r24, 0x01	; 1
    3f34:	18 f0       	brcs	.+6      	; 0x3f3c <STEPPER_wait_and_then+0x24>
    3f36:	82 30       	cpi	r24, 0x02	; 2
    3f38:	a1 f5       	brne	.+104    	; 0x3fa2 <STEPPER_wait_and_then+0x8a>
    3f3a:	11 c0       	rjmp	.+34     	; 0x3f5e <STEPPER_wait_and_then+0x46>
    3f3c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f3e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f40:	80 91 b7 07 	lds	r24, 0x07B7
    3f44:	88 23       	and	r24, r24
    3f46:	e1 f3       	breq	.-8      	; 0x3f40 <STEPPER_wait_and_then+0x28>
    3f48:	06 c0       	rjmp	.+12     	; 0x3f56 <STEPPER_wait_and_then+0x3e>
    3f4a:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f4c:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f4e:	80 91 b8 07 	lds	r24, 0x07B8
    3f52:	88 23       	and	r24, r24
    3f54:	e1 f3       	breq	.-8      	; 0x3f4e <STEPPER_wait_and_then+0x36>
    3f56:	30 97       	sbiw	r30, 0x00	; 0
    3f58:	21 f1       	breq	.+72     	; 0x3fa2 <STEPPER_wait_and_then+0x8a>
    3f5a:	09 95       	icall
    3f5c:	22 c0       	rjmp	.+68     	; 0x3fa2 <STEPPER_wait_and_then+0x8a>
    3f5e:	cc 84       	ldd	r12, Y+12	; 0x0c
    3f60:	dd 84       	ldd	r13, Y+13	; 0x0d
    3f62:	ee 84       	ldd	r14, Y+14	; 0x0e
    3f64:	ff 84       	ldd	r15, Y+15	; 0x0f
    3f66:	00 e0       	ldi	r16, 0x00	; 0
    3f68:	10 e0       	ldi	r17, 0x00	; 0
    3f6a:	00 23       	and	r16, r16
    3f6c:	51 f4       	brne	.+20     	; 0x3f82 <STEPPER_wait_and_then+0x6a>
    3f6e:	80 91 b7 07 	lds	r24, 0x07B7
    3f72:	88 23       	and	r24, r24
    3f74:	31 f0       	breq	.+12     	; 0x3f82 <STEPPER_wait_and_then+0x6a>
    3f76:	c1 14       	cp	r12, r1
    3f78:	d1 04       	cpc	r13, r1
    3f7a:	11 f0       	breq	.+4      	; 0x3f80 <STEPPER_wait_and_then+0x68>
    3f7c:	f6 01       	movw	r30, r12
    3f7e:	09 95       	icall
    3f80:	01 e0       	ldi	r16, 0x01	; 1
    3f82:	11 23       	and	r17, r17
    3f84:	51 f4       	brne	.+20     	; 0x3f9a <STEPPER_wait_and_then+0x82>
    3f86:	80 91 b8 07 	lds	r24, 0x07B8
    3f8a:	88 23       	and	r24, r24
    3f8c:	31 f0       	breq	.+12     	; 0x3f9a <STEPPER_wait_and_then+0x82>
    3f8e:	e1 14       	cp	r14, r1
    3f90:	f1 04       	cpc	r15, r1
    3f92:	11 f0       	breq	.+4      	; 0x3f98 <STEPPER_wait_and_then+0x80>
    3f94:	f7 01       	movw	r30, r14
    3f96:	09 95       	icall
    3f98:	11 e0       	ldi	r17, 0x01	; 1
    3f9a:	00 23       	and	r16, r16
    3f9c:	31 f3       	breq	.-52     	; 0x3f6a <STEPPER_wait_and_then+0x52>
    3f9e:	11 23       	and	r17, r17
    3fa0:	21 f3       	breq	.-56     	; 0x3f6a <STEPPER_wait_and_then+0x52>
    3fa2:	cf 91       	pop	r28
    3fa4:	df 91       	pop	r29
    3fa6:	1f 91       	pop	r17
    3fa8:	0f 91       	pop	r16
    3faa:	ff 90       	pop	r15
    3fac:	ef 90       	pop	r14
    3fae:	df 90       	pop	r13
    3fb0:	cf 90       	pop	r12
    3fb2:	08 95       	ret

00003fb4 <SYS_get_state>:
    3fb4:	e8 2f       	mov	r30, r24
    3fb6:	f0 e0       	ldi	r31, 0x00	; 0
    3fb8:	e3 31       	cpi	r30, 0x13	; 19
    3fba:	f1 05       	cpc	r31, r1
    3fbc:	40 f4       	brcc	.+16     	; 0x3fce <SYS_get_state+0x1a>
    3fbe:	e2 5c       	subi	r30, 0xC2	; 194
    3fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc2:	ee 0f       	add	r30, r30
    3fc4:	ff 1f       	adc	r31, r31
    3fc6:	05 90       	lpm	r0, Z+
    3fc8:	f4 91       	lpm	r31, Z+
    3fca:	e0 2d       	mov	r30, r0
    3fcc:	09 94       	ijmp
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	08 95       	ret
    3fd2:	80 91 b9 07 	lds	r24, 0x07B9
    3fd6:	08 95       	ret
    3fd8:	80 91 ba 07 	lds	r24, 0x07BA
    3fdc:	08 95       	ret
    3fde:	80 91 bb 07 	lds	r24, 0x07BB
    3fe2:	08 95       	ret
    3fe4:	80 91 bc 07 	lds	r24, 0x07BC
    3fe8:	08 95       	ret
    3fea:	80 91 bd 07 	lds	r24, 0x07BD
    3fee:	08 95       	ret
    3ff0:	80 91 bf 07 	lds	r24, 0x07BF
    3ff4:	08 95       	ret
    3ff6:	80 91 be 07 	lds	r24, 0x07BE
    3ffa:	08 95       	ret
    3ffc:	80 91 c0 07 	lds	r24, 0x07C0
    4000:	08 95       	ret
    4002:	80 91 c1 07 	lds	r24, 0x07C1
    4006:	08 95       	ret
    4008:	80 91 c2 07 	lds	r24, 0x07C2
    400c:	08 95       	ret
    400e:	80 91 c3 07 	lds	r24, 0x07C3
    4012:	08 95       	ret
    4014:	80 91 c4 07 	lds	r24, 0x07C4
    4018:	08 95       	ret
    401a:	80 91 c5 07 	lds	r24, 0x07C5
    401e:	08 95       	ret
    4020:	80 91 c6 07 	lds	r24, 0x07C6
    4024:	08 95       	ret
    4026:	80 91 c7 07 	lds	r24, 0x07C7
    402a:	08 95       	ret
    402c:	80 91 c8 07 	lds	r24, 0x07C8
    4030:	08 95       	ret
    4032:	80 91 c9 07 	lds	r24, 0x07C9
    4036:	08 95       	ret
    4038:	80 91 ca 07 	lds	r24, 0x07CA
    403c:	08 95       	ret
    403e:	80 91 cb 07 	lds	r24, 0x07CB
    4042:	08 95       	ret

00004044 <SYS_set_state>:
    4044:	e8 2f       	mov	r30, r24
    4046:	f0 e0       	ldi	r31, 0x00	; 0
    4048:	e3 31       	cpi	r30, 0x13	; 19
    404a:	f1 05       	cpc	r31, r1
    404c:	08 f0       	brcs	.+2      	; 0x4050 <SYS_set_state+0xc>
    404e:	40 c0       	rjmp	.+128    	; 0x40d0 <SYS_set_state+0x8c>
    4050:	ef 5a       	subi	r30, 0xAF	; 175
    4052:	ff 4f       	sbci	r31, 0xFF	; 255
    4054:	ee 0f       	add	r30, r30
    4056:	ff 1f       	adc	r31, r31
    4058:	05 90       	lpm	r0, Z+
    405a:	f4 91       	lpm	r31, Z+
    405c:	e0 2d       	mov	r30, r0
    405e:	09 94       	ijmp
    4060:	60 93 b9 07 	sts	0x07B9, r22
    4064:	08 95       	ret
    4066:	60 93 ba 07 	sts	0x07BA, r22
    406a:	08 95       	ret
    406c:	60 93 bb 07 	sts	0x07BB, r22
    4070:	08 95       	ret
    4072:	60 93 bc 07 	sts	0x07BC, r22
    4076:	08 95       	ret
    4078:	60 93 bd 07 	sts	0x07BD, r22
    407c:	08 95       	ret
    407e:	60 93 bf 07 	sts	0x07BF, r22
    4082:	08 95       	ret
    4084:	60 93 be 07 	sts	0x07BE, r22
    4088:	08 95       	ret
    408a:	60 93 c0 07 	sts	0x07C0, r22
    408e:	08 95       	ret
    4090:	60 93 c1 07 	sts	0x07C1, r22
    4094:	08 95       	ret
    4096:	60 93 c2 07 	sts	0x07C2, r22
    409a:	08 95       	ret
    409c:	60 93 c3 07 	sts	0x07C3, r22
    40a0:	08 95       	ret
    40a2:	60 93 c4 07 	sts	0x07C4, r22
    40a6:	08 95       	ret
    40a8:	60 93 c5 07 	sts	0x07C5, r22
    40ac:	08 95       	ret
    40ae:	60 93 c6 07 	sts	0x07C6, r22
    40b2:	08 95       	ret
    40b4:	60 93 c7 07 	sts	0x07C7, r22
    40b8:	08 95       	ret
    40ba:	60 93 c8 07 	sts	0x07C8, r22
    40be:	08 95       	ret
    40c0:	60 93 c9 07 	sts	0x07C9, r22
    40c4:	08 95       	ret
    40c6:	60 93 ca 07 	sts	0x07CA, r22
    40ca:	08 95       	ret
    40cc:	60 93 c9 07 	sts	0x07C9, r22
    40d0:	08 95       	ret

000040d2 <ATTINY_get_sensors>:
    40d2:	0f 93       	push	r16
    40d4:	1f 93       	push	r17
    40d6:	81 e0       	ldi	r24, 0x01	; 1
    40d8:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    40dc:	81 30       	cpi	r24, 0x01	; 1
    40de:	11 f0       	breq	.+4      	; 0x40e4 <ATTINY_get_sensors+0x12>
    40e0:	00 e0       	ldi	r16, 0x00	; 0
    40e2:	24 c0       	rjmp	.+72     	; 0x412c <ATTINY_get_sensors+0x5a>
    40e4:	87 e0       	ldi	r24, 0x07	; 7
    40e6:	0e 94 13 1b 	call	0x3626	; 0x3626 <SPI_set_slave_addr>
    40ea:	82 e0       	ldi	r24, 0x02	; 2
    40ec:	6a e0       	ldi	r22, 0x0A	; 10
    40ee:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <SPI_transmit>
    40f2:	82 e0       	ldi	r24, 0x02	; 2
    40f4:	62 eb       	ldi	r22, 0xB2	; 178
    40f6:	0e 94 64 1b 	call	0x36c8	; 0x36c8 <SPI_transmit>
    40fa:	18 ec       	ldi	r17, 0xC8	; 200
    40fc:	81 2f       	mov	r24, r17
    40fe:	8a 95       	dec	r24
    4100:	f1 f7       	brne	.-4      	; 0x40fe <ATTINY_get_sensors+0x2c>
    4102:	82 e0       	ldi	r24, 0x02	; 2
    4104:	60 e0       	ldi	r22, 0x00	; 0
    4106:	0e 94 44 26 	call	0x4c88	; 0x4c88 <SPI_receive>
    410a:	08 2f       	mov	r16, r24
    410c:	81 2f       	mov	r24, r17
    410e:	8a 95       	dec	r24
    4110:	f1 f7       	brne	.-4      	; 0x410e <ATTINY_get_sensors+0x3c>
    4112:	82 e0       	ldi	r24, 0x02	; 2
    4114:	60 e0       	ldi	r22, 0x00	; 0
    4116:	0e 94 44 26 	call	0x4c88	; 0x4c88 <SPI_receive>
    411a:	1a 95       	dec	r17
    411c:	f1 f7       	brne	.-4      	; 0x411a <ATTINY_get_sensors+0x48>
    411e:	87 e0       	ldi	r24, 0x07	; 7
    4120:	0e 94 13 1b 	call	0x3626	; 0x3626 <SPI_set_slave_addr>
    4124:	88 e8       	ldi	r24, 0x88	; 136
    4126:	93 e1       	ldi	r25, 0x13	; 19
    4128:	01 97       	sbiw	r24, 0x01	; 1
    412a:	f1 f7       	brne	.-4      	; 0x4128 <ATTINY_get_sensors+0x56>
    412c:	80 2f       	mov	r24, r16
    412e:	1f 91       	pop	r17
    4130:	0f 91       	pop	r16
    4132:	08 95       	ret

00004134 <ATTINY_get_SW_state>:
    4134:	1f 93       	push	r17
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
    413a:	18 2f       	mov	r17, r24
    413c:	80 91 63 04 	lds	r24, 0x0463
    4140:	88 23       	and	r24, r24
    4142:	41 f0       	breq	.+16     	; 0x4154 <ATTINY_get_SW_state+0x20>
    4144:	80 91 6d 04 	lds	r24, 0x046D
    4148:	88 23       	and	r24, r24
    414a:	99 f0       	breq	.+38     	; 0x4172 <ATTINY_get_SW_state+0x3e>
    414c:	10 92 63 04 	sts	0x0463, r1
    4150:	10 92 6d 04 	sts	0x046D, r1
    4154:	0e 94 69 20 	call	0x40d2	; 0x40d2 <ATTINY_get_sensors>
    4158:	80 93 62 04 	sts	0x0462, r24
    415c:	87 e6       	ldi	r24, 0x67	; 103
    415e:	94 e0       	ldi	r25, 0x04	; 4
    4160:	61 e0       	ldi	r22, 0x01	; 1
    4162:	40 e0       	ldi	r20, 0x00	; 0
    4164:	22 e3       	ldi	r18, 0x32	; 50
    4166:	30 e0       	ldi	r19, 0x00	; 0
    4168:	0e 94 58 21 	call	0x42b0	; 0x42b0 <TMRSRVC_new>
    416c:	81 e0       	ldi	r24, 0x01	; 1
    416e:	80 93 63 04 	sts	0x0463, r24
    4172:	90 91 62 04 	lds	r25, 0x0462
    4176:	a1 2f       	mov	r26, r17
    4178:	b0 e0       	ldi	r27, 0x00	; 0
    417a:	ed 01       	movw	r28, r26
    417c:	cb 5e       	subi	r28, 0xEB	; 235
    417e:	db 4f       	sbci	r29, 0xFB	; 251
    4180:	88 81       	ld	r24, Y
    4182:	88 23       	and	r24, r24
    4184:	69 f0       	breq	.+26     	; 0x41a0 <ATTINY_get_SW_state+0x6c>
    4186:	fd 01       	movw	r30, r26
    4188:	e8 5e       	subi	r30, 0xE8	; 232
    418a:	fb 4f       	sbci	r31, 0xFB	; 251
    418c:	80 81       	ld	r24, Z
    418e:	98 23       	and	r25, r24
    4190:	c1 f0       	breq	.+48     	; 0x41c2 <ATTINY_get_SW_state+0x8e>
    4192:	fd 01       	movw	r30, r26
    4194:	ec 59       	subi	r30, 0x9C	; 156
    4196:	fb 4f       	sbci	r31, 0xFB	; 251
    4198:	81 e0       	ldi	r24, 0x01	; 1
    419a:	80 83       	st	Z, r24
    419c:	18 82       	st	Y, r1
    419e:	11 c0       	rjmp	.+34     	; 0x41c2 <ATTINY_get_SW_state+0x8e>
    41a0:	fd 01       	movw	r30, r26
    41a2:	ec 59       	subi	r30, 0x9C	; 156
    41a4:	fb 4f       	sbci	r31, 0xFB	; 251
    41a6:	80 81       	ld	r24, Z
    41a8:	81 11       	cpse	r24, r1
    41aa:	10 82       	st	Z, r1
    41ac:	fd 01       	movw	r30, r26
    41ae:	e8 5e       	subi	r30, 0xE8	; 232
    41b0:	fb 4f       	sbci	r31, 0xFB	; 251
    41b2:	80 81       	ld	r24, Z
    41b4:	98 23       	and	r25, r24
    41b6:	29 f4       	brne	.+10     	; 0x41c2 <ATTINY_get_SW_state+0x8e>
    41b8:	fd 01       	movw	r30, r26
    41ba:	eb 5e       	subi	r30, 0xEB	; 235
    41bc:	fb 4f       	sbci	r31, 0xFB	; 251
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	80 83       	st	Z, r24
    41c2:	ac 59       	subi	r26, 0x9C	; 156
    41c4:	bb 4f       	sbci	r27, 0xFB	; 251
    41c6:	8c 91       	ld	r24, X
    41c8:	df 91       	pop	r29
    41ca:	cf 91       	pop	r28
    41cc:	1f 91       	pop	r17
    41ce:	08 95       	ret

000041d0 <ATTINY_open>:
    41d0:	82 e0       	ldi	r24, 0x02	; 2
    41d2:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    41d6:	88 23       	and	r24, r24
    41d8:	19 f4       	brne	.+6      	; 0x41e0 <ATTINY_open+0x10>
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	82 e0       	ldi	r24, 0x02	; 2
    41de:	08 95       	ret
    41e0:	10 92 e7 07 	sts	0x07E7, r1
    41e4:	10 92 e6 07 	sts	0x07E6, r1
    41e8:	10 92 e9 07 	sts	0x07E9, r1
    41ec:	10 92 e8 07 	sts	0x07E8, r1
    41f0:	10 92 eb 07 	sts	0x07EB, r1
    41f4:	10 92 ea 07 	sts	0x07EA, r1
    41f8:	10 92 ed 07 	sts	0x07ED, r1
    41fc:	10 92 ec 07 	sts	0x07EC, r1
    4200:	10 92 ef 07 	sts	0x07EF, r1
    4204:	10 92 ee 07 	sts	0x07EE, r1
    4208:	80 e9       	ldi	r24, 0x90	; 144
    420a:	91 e0       	ldi	r25, 0x01	; 1
    420c:	90 93 d3 07 	sts	0x07D3, r25
    4210:	80 93 d2 07 	sts	0x07D2, r24
    4214:	90 93 d5 07 	sts	0x07D5, r25
    4218:	80 93 d4 07 	sts	0x07D4, r24
    421c:	90 93 d7 07 	sts	0x07D7, r25
    4220:	80 93 d6 07 	sts	0x07D6, r24
    4224:	90 93 d9 07 	sts	0x07D9, r25
    4228:	80 93 d8 07 	sts	0x07D8, r24
    422c:	90 93 db 07 	sts	0x07DB, r25
    4230:	80 93 da 07 	sts	0x07DA, r24
    4234:	84 e3       	ldi	r24, 0x34	; 52
    4236:	98 e0       	ldi	r25, 0x08	; 8
    4238:	90 93 dd 07 	sts	0x07DD, r25
    423c:	80 93 dc 07 	sts	0x07DC, r24
    4240:	90 93 df 07 	sts	0x07DF, r25
    4244:	80 93 de 07 	sts	0x07DE, r24
    4248:	90 93 e1 07 	sts	0x07E1, r25
    424c:	80 93 e0 07 	sts	0x07E0, r24
    4250:	90 93 e3 07 	sts	0x07E3, r25
    4254:	80 93 e2 07 	sts	0x07E2, r24
    4258:	90 93 e5 07 	sts	0x07E5, r25
    425c:	80 93 e4 07 	sts	0x07E4, r24
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	61 e0       	ldi	r22, 0x01	; 1
    4264:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    4268:	91 e0       	ldi	r25, 0x01	; 1
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	08 95       	ret

0000426e <TMRSRVC_delay>:
    426e:	df 93       	push	r29
    4270:	cf 93       	push	r28
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
    4276:	29 97       	sbiw	r28, 0x09	; 9
    4278:	0f b6       	in	r0, 0x3f	; 63
    427a:	f8 94       	cli
    427c:	de bf       	out	0x3e, r29	; 62
    427e:	0f be       	out	0x3f, r0	; 63
    4280:	cd bf       	out	0x3d, r28	; 61
    4282:	9c 01       	movw	r18, r24
    4284:	ce 01       	movw	r24, r28
    4286:	01 96       	adiw	r24, 0x01	; 1
    4288:	61 e0       	ldi	r22, 0x01	; 1
    428a:	40 e0       	ldi	r20, 0x00	; 0
    428c:	0e 94 58 21 	call	0x42b0	; 0x42b0 <TMRSRVC_new>
    4290:	98 2f       	mov	r25, r24
    4292:	88 23       	and	r24, r24
    4294:	19 f4       	brne	.+6      	; 0x429c <TMRSRVC_delay+0x2e>
    4296:	8f 81       	ldd	r24, Y+7	; 0x07
    4298:	88 23       	and	r24, r24
    429a:	e9 f3       	breq	.-6      	; 0x4296 <TMRSRVC_delay+0x28>
    429c:	89 2f       	mov	r24, r25
    429e:	29 96       	adiw	r28, 0x09	; 9
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	08 95       	ret

000042b0 <TMRSRVC_new>:
    42b0:	ef 92       	push	r14
    42b2:	ff 92       	push	r15
    42b4:	0f 93       	push	r16
    42b6:	1f 93       	push	r17
    42b8:	cf 93       	push	r28
    42ba:	df 93       	push	r29
    42bc:	ec 01       	movw	r28, r24
    42be:	f6 2e       	mov	r15, r22
    42c0:	e4 2e       	mov	r14, r20
    42c2:	89 01       	movw	r16, r18
    42c4:	88 e0       	ldi	r24, 0x08	; 8
    42c6:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    42ca:	81 30       	cpi	r24, 0x01	; 1
    42cc:	11 f0       	breq	.+4      	; 0x42d2 <TMRSRVC_new+0x22>
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	26 c0       	rjmp	.+76     	; 0x431e <TMRSRVC_new+0x6e>
    42d2:	84 e0       	ldi	r24, 0x04	; 4
    42d4:	90 e0       	ldi	r25, 0x00	; 0
    42d6:	0e 94 49 34 	call	0x6892	; 0x6892 <malloc>
    42da:	fc 01       	movw	r30, r24
    42dc:	00 97       	sbiw	r24, 0x00	; 0
    42de:	11 f4       	brne	.+4      	; 0x42e4 <TMRSRVC_new+0x34>
    42e0:	82 e0       	ldi	r24, 0x02	; 2
    42e2:	1d c0       	rjmp	.+58     	; 0x431e <TMRSRVC_new+0x6e>
    42e4:	f9 82       	std	Y+1, r15	; 0x01
    42e6:	f0 fc       	sbrc	r15, 0
    42e8:	1e 82       	std	Y+6, r1	; 0x06
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	e8 16       	cp	r14, r24
    42ee:	19 f4       	brne	.+6      	; 0x42f6 <TMRSRVC_new+0x46>
    42f0:	89 81       	ldd	r24, Y+1	; 0x01
    42f2:	84 60       	ori	r24, 0x04	; 4
    42f4:	89 83       	std	Y+1, r24	; 0x01
    42f6:	89 81       	ldd	r24, Y+1	; 0x01
    42f8:	88 60       	ori	r24, 0x08	; 8
    42fa:	89 83       	std	Y+1, r24	; 0x01
    42fc:	1b 83       	std	Y+3, r17	; 0x03
    42fe:	0a 83       	std	Y+2, r16	; 0x02
    4300:	1d 83       	std	Y+5, r17	; 0x05
    4302:	0c 83       	std	Y+4, r16	; 0x04
    4304:	d1 83       	std	Z+1, r29	; 0x01
    4306:	c0 83       	st	Z, r28
    4308:	13 82       	std	Z+3, r1	; 0x03
    430a:	12 82       	std	Z+2, r1	; 0x02
    430c:	81 e0       	ldi	r24, 0x01	; 1
    430e:	80 93 c0 04 	sts	0x04C0, r24
    4312:	cf 01       	movw	r24, r30
    4314:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <TMRSRVC_insert>
    4318:	10 92 c0 04 	sts	0x04C0, r1
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	df 91       	pop	r29
    4320:	cf 91       	pop	r28
    4322:	1f 91       	pop	r17
    4324:	0f 91       	pop	r16
    4326:	ff 90       	pop	r15
    4328:	ef 90       	pop	r14
    432a:	08 95       	ret

0000432c <I2C_MSTR_get>:
    432c:	fc 01       	movw	r30, r24
    432e:	80 91 f3 07 	lds	r24, 0x07F3
    4332:	81 30       	cpi	r24, 0x01	; 1
    4334:	11 f0       	breq	.+4      	; 0x433a <I2C_MSTR_get+0xe>
    4336:	85 e0       	ldi	r24, 0x05	; 5
    4338:	08 95       	ret
    433a:	80 91 f4 07 	lds	r24, 0x07F4
    433e:	81 30       	cpi	r24, 0x01	; 1
    4340:	11 f0       	breq	.+4      	; 0x4346 <I2C_MSTR_get+0x1a>
    4342:	8a e0       	ldi	r24, 0x0A	; 10
    4344:	08 95       	ret
    4346:	61 30       	cpi	r22, 0x01	; 1
    4348:	11 f4       	brne	.+4      	; 0x434e <I2C_MSTR_get+0x22>
    434a:	84 ec       	ldi	r24, 0xC4	; 196
    434c:	01 c0       	rjmp	.+2      	; 0x4350 <I2C_MSTR_get+0x24>
    434e:	84 e8       	ldi	r24, 0x84	; 132
    4350:	80 93 bc 00 	sts	0x00BC, r24
    4354:	80 91 bc 00 	lds	r24, 0x00BC
    4358:	87 ff       	sbrs	r24, 7
    435a:	fc cf       	rjmp	.-8      	; 0x4354 <I2C_MSTR_get+0x28>
    435c:	61 30       	cpi	r22, 0x01	; 1
    435e:	31 f4       	brne	.+12     	; 0x436c <I2C_MSTR_get+0x40>
    4360:	80 91 b9 00 	lds	r24, 0x00B9
    4364:	88 7f       	andi	r24, 0xF8	; 248
    4366:	80 35       	cpi	r24, 0x50	; 80
    4368:	59 f4       	brne	.+22     	; 0x4380 <I2C_MSTR_get+0x54>
    436a:	05 c0       	rjmp	.+10     	; 0x4376 <I2C_MSTR_get+0x4a>
    436c:	80 91 b9 00 	lds	r24, 0x00B9
    4370:	88 7f       	andi	r24, 0xF8	; 248
    4372:	88 35       	cpi	r24, 0x58	; 88
    4374:	29 f4       	brne	.+10     	; 0x4380 <I2C_MSTR_get+0x54>
    4376:	80 91 bb 00 	lds	r24, 0x00BB
    437a:	80 83       	st	Z, r24
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	08 95       	ret
    4380:	82 e0       	ldi	r24, 0x02	; 2
    4382:	08 95       	ret

00004384 <I2C_MSTR_send>:
    4384:	98 2f       	mov	r25, r24
    4386:	80 91 f3 07 	lds	r24, 0x07F3
    438a:	81 30       	cpi	r24, 0x01	; 1
    438c:	11 f0       	breq	.+4      	; 0x4392 <I2C_MSTR_send+0xe>
    438e:	85 e0       	ldi	r24, 0x05	; 5
    4390:	08 95       	ret
    4392:	80 91 f4 07 	lds	r24, 0x07F4
    4396:	81 30       	cpi	r24, 0x01	; 1
    4398:	11 f0       	breq	.+4      	; 0x439e <I2C_MSTR_send+0x1a>
    439a:	8a e0       	ldi	r24, 0x0A	; 10
    439c:	08 95       	ret
    439e:	90 93 bb 00 	sts	0x00BB, r25
    43a2:	84 e8       	ldi	r24, 0x84	; 132
    43a4:	80 93 bc 00 	sts	0x00BC, r24
    43a8:	80 91 bc 00 	lds	r24, 0x00BC
    43ac:	87 ff       	sbrs	r24, 7
    43ae:	fc cf       	rjmp	.-8      	; 0x43a8 <I2C_MSTR_send+0x24>
    43b0:	80 91 b9 00 	lds	r24, 0x00B9
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	88 7f       	andi	r24, 0xF8	; 248
    43b8:	90 70       	andi	r25, 0x00	; 0
    43ba:	88 32       	cpi	r24, 0x28	; 40
    43bc:	91 05       	cpc	r25, r1
    43be:	21 f0       	breq	.+8      	; 0x43c8 <I2C_MSTR_send+0x44>
    43c0:	c0 97       	sbiw	r24, 0x30	; 48
    43c2:	21 f4       	brne	.+8      	; 0x43cc <I2C_MSTR_send+0x48>
    43c4:	83 e0       	ldi	r24, 0x03	; 3
    43c6:	08 95       	ret
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	08 95       	ret
    43cc:	8c e0       	ldi	r24, 0x0C	; 12
    43ce:	08 95       	ret

000043d0 <I2C_MSTR_start>:
    43d0:	98 2f       	mov	r25, r24
    43d2:	20 91 f3 07 	lds	r18, 0x07F3
    43d6:	21 30       	cpi	r18, 0x01	; 1
    43d8:	11 f0       	breq	.+4      	; 0x43de <I2C_MSTR_start+0xe>
    43da:	85 e0       	ldi	r24, 0x05	; 5
    43dc:	08 95       	ret
    43de:	80 91 f5 07 	lds	r24, 0x07F5
    43e2:	81 30       	cpi	r24, 0x01	; 1
    43e4:	11 f4       	brne	.+4      	; 0x43ea <I2C_MSTR_start+0x1a>
    43e6:	89 e0       	ldi	r24, 0x09	; 9
    43e8:	08 95       	ret
    43ea:	20 93 f4 07 	sts	0x07F4, r18
    43ee:	84 ea       	ldi	r24, 0xA4	; 164
    43f0:	80 93 bc 00 	sts	0x00BC, r24
    43f4:	80 91 bc 00 	lds	r24, 0x00BC
    43f8:	87 ff       	sbrs	r24, 7
    43fa:	fc cf       	rjmp	.-8      	; 0x43f4 <I2C_MSTR_start+0x24>
    43fc:	80 91 b9 00 	lds	r24, 0x00B9
    4400:	88 7f       	andi	r24, 0xF8	; 248
    4402:	88 30       	cpi	r24, 0x08	; 8
    4404:	39 f0       	breq	.+14     	; 0x4414 <I2C_MSTR_start+0x44>
    4406:	80 91 b9 00 	lds	r24, 0x00B9
    440a:	88 7f       	andi	r24, 0xF8	; 248
    440c:	80 31       	cpi	r24, 0x10	; 16
    440e:	11 f0       	breq	.+4      	; 0x4414 <I2C_MSTR_start+0x44>
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	08 95       	ret
    4414:	61 30       	cpi	r22, 0x01	; 1
    4416:	19 f4       	brne	.+6      	; 0x441e <I2C_MSTR_start+0x4e>
    4418:	99 0f       	add	r25, r25
    441a:	91 60       	ori	r25, 0x01	; 1
    441c:	03 c0       	rjmp	.+6      	; 0x4424 <I2C_MSTR_start+0x54>
    441e:	66 23       	and	r22, r22
    4420:	19 f4       	brne	.+6      	; 0x4428 <I2C_MSTR_start+0x58>
    4422:	99 0f       	add	r25, r25
    4424:	90 93 bb 00 	sts	0x00BB, r25
    4428:	84 e8       	ldi	r24, 0x84	; 132
    442a:	80 93 bc 00 	sts	0x00BC, r24
    442e:	80 91 bc 00 	lds	r24, 0x00BC
    4432:	87 ff       	sbrs	r24, 7
    4434:	fc cf       	rjmp	.-8      	; 0x442e <I2C_MSTR_start+0x5e>
    4436:	61 30       	cpi	r22, 0x01	; 1
    4438:	31 f4       	brne	.+12     	; 0x4446 <I2C_MSTR_start+0x76>
    443a:	80 91 b9 00 	lds	r24, 0x00B9
    443e:	88 7f       	andi	r24, 0xF8	; 248
    4440:	80 34       	cpi	r24, 0x40	; 64
    4442:	41 f4       	brne	.+16     	; 0x4454 <I2C_MSTR_start+0x84>
    4444:	09 c0       	rjmp	.+18     	; 0x4458 <I2C_MSTR_start+0x88>
    4446:	66 23       	and	r22, r22
    4448:	39 f4       	brne	.+14     	; 0x4458 <I2C_MSTR_start+0x88>
    444a:	80 91 b9 00 	lds	r24, 0x00B9
    444e:	88 7f       	andi	r24, 0xF8	; 248
    4450:	88 31       	cpi	r24, 0x18	; 24
    4452:	11 f0       	breq	.+4      	; 0x4458 <I2C_MSTR_start+0x88>
    4454:	82 e0       	ldi	r24, 0x02	; 2
    4456:	08 95       	ret
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	08 95       	ret

0000445c <I2C_MSTR_stop>:
    445c:	80 91 f4 07 	lds	r24, 0x07F4
    4460:	81 30       	cpi	r24, 0x01	; 1
    4462:	11 f0       	breq	.+4      	; 0x4468 <I2C_MSTR_stop+0xc>
    4464:	8a e0       	ldi	r24, 0x0A	; 10
    4466:	08 95       	ret
    4468:	80 91 f6 07 	lds	r24, 0x07F6
    446c:	81 30       	cpi	r24, 0x01	; 1
    446e:	29 f4       	brne	.+10     	; 0x447a <I2C_MSTR_stop+0x1e>
    4470:	85 e9       	ldi	r24, 0x95	; 149
    4472:	80 93 bc 00 	sts	0x00BC, r24
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	08 95       	ret
    447a:	84 e9       	ldi	r24, 0x94	; 148
    447c:	80 93 bc 00 	sts	0x00BC, r24
    4480:	80 e0       	ldi	r24, 0x00	; 0
    4482:	08 95       	ret

00004484 <I2C_open>:
    4484:	82 e1       	ldi	r24, 0x12	; 18
    4486:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    448a:	88 23       	and	r24, r24
    448c:	b1 f4       	brne	.+44     	; 0x44ba <I2C_open+0x36>
    448e:	10 92 f3 07 	sts	0x07F3, r1
    4492:	10 92 f4 07 	sts	0x07F4, r1
    4496:	10 92 f5 07 	sts	0x07F5, r1
    449a:	10 92 f6 07 	sts	0x07F6, r1
    449e:	10 92 f7 07 	sts	0x07F7, r1
    44a2:	0e 94 3c 28 	call	0x5078	; 0x5078 <__I2C_init>
    44a6:	87 e1       	ldi	r24, 0x17	; 23
    44a8:	60 e0       	ldi	r22, 0x00	; 0
    44aa:	0e 94 60 22 	call	0x44c0	; 0x44c0 <I2C_set_BRG>
    44ae:	0e 94 32 28 	call	0x5064	; 0x5064 <I2C_enable>
    44b2:	82 e1       	ldi	r24, 0x12	; 18
    44b4:	61 e0       	ldi	r22, 0x01	; 1
    44b6:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    44ba:	82 e1       	ldi	r24, 0x12	; 18
    44bc:	90 e0       	ldi	r25, 0x00	; 0
    44be:	08 95       	ret

000044c0 <I2C_set_BRG>:
    44c0:	63 70       	andi	r22, 0x03	; 3
    44c2:	60 93 b9 00 	sts	0x00B9, r22
    44c6:	80 93 b8 00 	sts	0x00B8, r24
    44ca:	81 e0       	ldi	r24, 0x01	; 1
    44cc:	80 93 f3 07 	sts	0x07F3, r24
    44d0:	08 95       	ret

000044d2 <__ADC_init>:
    44d2:	8f e1       	ldi	r24, 0x1F	; 31
    44d4:	80 93 7c 00 	sts	0x007C, r24
    44d8:	ea e7       	ldi	r30, 0x7A	; 122
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	87 e0       	ldi	r24, 0x07	; 7
    44de:	80 83       	st	Z, r24
    44e0:	80 81       	ld	r24, Z
    44e2:	80 68       	ori	r24, 0x80	; 128
    44e4:	80 83       	st	Z, r24
    44e6:	08 95       	ret

000044e8 <CBOT_init>:
    44e8:	0e 94 7d 27 	call	0x4efa	; 0x4efa <SYS_init>
    44ec:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <ATMEGA_open>
    44f0:	0e 94 d6 24 	call	0x49ac	; 0x49ac <ISR_open>
    44f4:	0e 94 09 28 	call	0x5012	; 0x5012 <TMRSRVC_open>
    44f8:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <SPI_open>
    44fc:	0e 94 e8 20 	call	0x41d0	; 0x41d0 <ATTINY_open>
    4500:	78 94       	sei
    4502:	08 95       	ret

00004504 <CBOT_ISR_init>:
    4504:	00 00       	nop
    4506:	08 95       	ret

00004508 <__vector_16>:
    4508:	1f 92       	push	r1
    450a:	0f 92       	push	r0
    450c:	0f b6       	in	r0, 0x3f	; 63
    450e:	0f 92       	push	r0
    4510:	11 24       	eor	r1, r1
    4512:	2f 93       	push	r18
    4514:	3f 93       	push	r19
    4516:	4f 93       	push	r20
    4518:	5f 93       	push	r21
    451a:	6f 93       	push	r22
    451c:	7f 93       	push	r23
    451e:	8f 93       	push	r24
    4520:	9f 93       	push	r25
    4522:	af 93       	push	r26
    4524:	bf 93       	push	r27
    4526:	ef 93       	push	r30
    4528:	ff 93       	push	r31
    452a:	e0 91 90 04 	lds	r30, 0x0490
    452e:	f0 91 91 04 	lds	r31, 0x0491
    4532:	30 97       	sbiw	r30, 0x00	; 0
    4534:	09 f0       	breq	.+2      	; 0x4538 <__vector_16+0x30>
    4536:	09 95       	icall
    4538:	ff 91       	pop	r31
    453a:	ef 91       	pop	r30
    453c:	bf 91       	pop	r27
    453e:	af 91       	pop	r26
    4540:	9f 91       	pop	r25
    4542:	8f 91       	pop	r24
    4544:	7f 91       	pop	r23
    4546:	6f 91       	pop	r22
    4548:	5f 91       	pop	r21
    454a:	4f 91       	pop	r20
    454c:	3f 91       	pop	r19
    454e:	2f 91       	pop	r18
    4550:	0f 90       	pop	r0
    4552:	0f be       	out	0x3f, r0	; 63
    4554:	0f 90       	pop	r0
    4556:	1f 90       	pop	r1
    4558:	18 95       	reti

0000455a <__vector_17>:
    455a:	1f 92       	push	r1
    455c:	0f 92       	push	r0
    455e:	0f b6       	in	r0, 0x3f	; 63
    4560:	0f 92       	push	r0
    4562:	11 24       	eor	r1, r1
    4564:	2f 93       	push	r18
    4566:	3f 93       	push	r19
    4568:	4f 93       	push	r20
    456a:	5f 93       	push	r21
    456c:	6f 93       	push	r22
    456e:	7f 93       	push	r23
    4570:	8f 93       	push	r24
    4572:	9f 93       	push	r25
    4574:	af 93       	push	r26
    4576:	bf 93       	push	r27
    4578:	ef 93       	push	r30
    457a:	ff 93       	push	r31
    457c:	e0 91 92 04 	lds	r30, 0x0492
    4580:	f0 91 93 04 	lds	r31, 0x0493
    4584:	30 97       	sbiw	r30, 0x00	; 0
    4586:	09 f0       	breq	.+2      	; 0x458a <__vector_17+0x30>
    4588:	09 95       	icall
    458a:	ff 91       	pop	r31
    458c:	ef 91       	pop	r30
    458e:	bf 91       	pop	r27
    4590:	af 91       	pop	r26
    4592:	9f 91       	pop	r25
    4594:	8f 91       	pop	r24
    4596:	7f 91       	pop	r23
    4598:	6f 91       	pop	r22
    459a:	5f 91       	pop	r21
    459c:	4f 91       	pop	r20
    459e:	3f 91       	pop	r19
    45a0:	2f 91       	pop	r18
    45a2:	0f 90       	pop	r0
    45a4:	0f be       	out	0x3f, r0	; 63
    45a6:	0f 90       	pop	r0
    45a8:	1f 90       	pop	r1
    45aa:	18 95       	reti

000045ac <__vector_18>:
    45ac:	1f 92       	push	r1
    45ae:	0f 92       	push	r0
    45b0:	0f b6       	in	r0, 0x3f	; 63
    45b2:	0f 92       	push	r0
    45b4:	11 24       	eor	r1, r1
    45b6:	2f 93       	push	r18
    45b8:	3f 93       	push	r19
    45ba:	4f 93       	push	r20
    45bc:	5f 93       	push	r21
    45be:	6f 93       	push	r22
    45c0:	7f 93       	push	r23
    45c2:	8f 93       	push	r24
    45c4:	9f 93       	push	r25
    45c6:	af 93       	push	r26
    45c8:	bf 93       	push	r27
    45ca:	ef 93       	push	r30
    45cc:	ff 93       	push	r31
    45ce:	e0 91 94 04 	lds	r30, 0x0494
    45d2:	f0 91 95 04 	lds	r31, 0x0495
    45d6:	30 97       	sbiw	r30, 0x00	; 0
    45d8:	09 f0       	breq	.+2      	; 0x45dc <__vector_18+0x30>
    45da:	09 95       	icall
    45dc:	ff 91       	pop	r31
    45de:	ef 91       	pop	r30
    45e0:	bf 91       	pop	r27
    45e2:	af 91       	pop	r26
    45e4:	9f 91       	pop	r25
    45e6:	8f 91       	pop	r24
    45e8:	7f 91       	pop	r23
    45ea:	6f 91       	pop	r22
    45ec:	5f 91       	pop	r21
    45ee:	4f 91       	pop	r20
    45f0:	3f 91       	pop	r19
    45f2:	2f 91       	pop	r18
    45f4:	0f 90       	pop	r0
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	0f 90       	pop	r0
    45fa:	1f 90       	pop	r1
    45fc:	18 95       	reti

000045fe <__vector_9>:
    45fe:	1f 92       	push	r1
    4600:	0f 92       	push	r0
    4602:	0f b6       	in	r0, 0x3f	; 63
    4604:	0f 92       	push	r0
    4606:	11 24       	eor	r1, r1
    4608:	2f 93       	push	r18
    460a:	3f 93       	push	r19
    460c:	4f 93       	push	r20
    460e:	5f 93       	push	r21
    4610:	6f 93       	push	r22
    4612:	7f 93       	push	r23
    4614:	8f 93       	push	r24
    4616:	9f 93       	push	r25
    4618:	af 93       	push	r26
    461a:	bf 93       	push	r27
    461c:	ef 93       	push	r30
    461e:	ff 93       	push	r31
    4620:	e0 91 82 04 	lds	r30, 0x0482
    4624:	f0 91 83 04 	lds	r31, 0x0483
    4628:	30 97       	sbiw	r30, 0x00	; 0
    462a:	09 f0       	breq	.+2      	; 0x462e <__vector_9+0x30>
    462c:	09 95       	icall
    462e:	ff 91       	pop	r31
    4630:	ef 91       	pop	r30
    4632:	bf 91       	pop	r27
    4634:	af 91       	pop	r26
    4636:	9f 91       	pop	r25
    4638:	8f 91       	pop	r24
    463a:	7f 91       	pop	r23
    463c:	6f 91       	pop	r22
    463e:	5f 91       	pop	r21
    4640:	4f 91       	pop	r20
    4642:	3f 91       	pop	r19
    4644:	2f 91       	pop	r18
    4646:	0f 90       	pop	r0
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	0f 90       	pop	r0
    464c:	1f 90       	pop	r1
    464e:	18 95       	reti

00004650 <__vector_10>:
    4650:	1f 92       	push	r1
    4652:	0f 92       	push	r0
    4654:	0f b6       	in	r0, 0x3f	; 63
    4656:	0f 92       	push	r0
    4658:	11 24       	eor	r1, r1
    465a:	2f 93       	push	r18
    465c:	3f 93       	push	r19
    465e:	4f 93       	push	r20
    4660:	5f 93       	push	r21
    4662:	6f 93       	push	r22
    4664:	7f 93       	push	r23
    4666:	8f 93       	push	r24
    4668:	9f 93       	push	r25
    466a:	af 93       	push	r26
    466c:	bf 93       	push	r27
    466e:	ef 93       	push	r30
    4670:	ff 93       	push	r31
    4672:	e0 91 84 04 	lds	r30, 0x0484
    4676:	f0 91 85 04 	lds	r31, 0x0485
    467a:	30 97       	sbiw	r30, 0x00	; 0
    467c:	09 f0       	breq	.+2      	; 0x4680 <__vector_10+0x30>
    467e:	09 95       	icall
    4680:	ff 91       	pop	r31
    4682:	ef 91       	pop	r30
    4684:	bf 91       	pop	r27
    4686:	af 91       	pop	r26
    4688:	9f 91       	pop	r25
    468a:	8f 91       	pop	r24
    468c:	7f 91       	pop	r23
    468e:	6f 91       	pop	r22
    4690:	5f 91       	pop	r21
    4692:	4f 91       	pop	r20
    4694:	3f 91       	pop	r19
    4696:	2f 91       	pop	r18
    4698:	0f 90       	pop	r0
    469a:	0f be       	out	0x3f, r0	; 63
    469c:	0f 90       	pop	r0
    469e:	1f 90       	pop	r1
    46a0:	18 95       	reti

000046a2 <__vector_11>:
    46a2:	1f 92       	push	r1
    46a4:	0f 92       	push	r0
    46a6:	0f b6       	in	r0, 0x3f	; 63
    46a8:	0f 92       	push	r0
    46aa:	11 24       	eor	r1, r1
    46ac:	2f 93       	push	r18
    46ae:	3f 93       	push	r19
    46b0:	4f 93       	push	r20
    46b2:	5f 93       	push	r21
    46b4:	6f 93       	push	r22
    46b6:	7f 93       	push	r23
    46b8:	8f 93       	push	r24
    46ba:	9f 93       	push	r25
    46bc:	af 93       	push	r26
    46be:	bf 93       	push	r27
    46c0:	ef 93       	push	r30
    46c2:	ff 93       	push	r31
    46c4:	e0 91 86 04 	lds	r30, 0x0486
    46c8:	f0 91 87 04 	lds	r31, 0x0487
    46cc:	30 97       	sbiw	r30, 0x00	; 0
    46ce:	09 f0       	breq	.+2      	; 0x46d2 <__vector_11+0x30>
    46d0:	09 95       	icall
    46d2:	ff 91       	pop	r31
    46d4:	ef 91       	pop	r30
    46d6:	bf 91       	pop	r27
    46d8:	af 91       	pop	r26
    46da:	9f 91       	pop	r25
    46dc:	8f 91       	pop	r24
    46de:	7f 91       	pop	r23
    46e0:	6f 91       	pop	r22
    46e2:	5f 91       	pop	r21
    46e4:	4f 91       	pop	r20
    46e6:	3f 91       	pop	r19
    46e8:	2f 91       	pop	r18
    46ea:	0f 90       	pop	r0
    46ec:	0f be       	out	0x3f, r0	; 63
    46ee:	0f 90       	pop	r0
    46f0:	1f 90       	pop	r1
    46f2:	18 95       	reti

000046f4 <__vector_13>:
    46f4:	1f 92       	push	r1
    46f6:	0f 92       	push	r0
    46f8:	0f b6       	in	r0, 0x3f	; 63
    46fa:	0f 92       	push	r0
    46fc:	11 24       	eor	r1, r1
    46fe:	2f 93       	push	r18
    4700:	3f 93       	push	r19
    4702:	4f 93       	push	r20
    4704:	5f 93       	push	r21
    4706:	6f 93       	push	r22
    4708:	7f 93       	push	r23
    470a:	8f 93       	push	r24
    470c:	9f 93       	push	r25
    470e:	af 93       	push	r26
    4710:	bf 93       	push	r27
    4712:	ef 93       	push	r30
    4714:	ff 93       	push	r31
    4716:	e0 91 8a 04 	lds	r30, 0x048A
    471a:	f0 91 8b 04 	lds	r31, 0x048B
    471e:	30 97       	sbiw	r30, 0x00	; 0
    4720:	09 f0       	breq	.+2      	; 0x4724 <__vector_13+0x30>
    4722:	09 95       	icall
    4724:	ff 91       	pop	r31
    4726:	ef 91       	pop	r30
    4728:	bf 91       	pop	r27
    472a:	af 91       	pop	r26
    472c:	9f 91       	pop	r25
    472e:	8f 91       	pop	r24
    4730:	7f 91       	pop	r23
    4732:	6f 91       	pop	r22
    4734:	5f 91       	pop	r21
    4736:	4f 91       	pop	r20
    4738:	3f 91       	pop	r19
    473a:	2f 91       	pop	r18
    473c:	0f 90       	pop	r0
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	0f 90       	pop	r0
    4742:	1f 90       	pop	r1
    4744:	18 95       	reti

00004746 <__vector_14>:
    4746:	1f 92       	push	r1
    4748:	0f 92       	push	r0
    474a:	0f b6       	in	r0, 0x3f	; 63
    474c:	0f 92       	push	r0
    474e:	11 24       	eor	r1, r1
    4750:	2f 93       	push	r18
    4752:	3f 93       	push	r19
    4754:	4f 93       	push	r20
    4756:	5f 93       	push	r21
    4758:	6f 93       	push	r22
    475a:	7f 93       	push	r23
    475c:	8f 93       	push	r24
    475e:	9f 93       	push	r25
    4760:	af 93       	push	r26
    4762:	bf 93       	push	r27
    4764:	ef 93       	push	r30
    4766:	ff 93       	push	r31
    4768:	e0 91 8c 04 	lds	r30, 0x048C
    476c:	f0 91 8d 04 	lds	r31, 0x048D
    4770:	30 97       	sbiw	r30, 0x00	; 0
    4772:	09 f0       	breq	.+2      	; 0x4776 <__vector_14+0x30>
    4774:	09 95       	icall
    4776:	ff 91       	pop	r31
    4778:	ef 91       	pop	r30
    477a:	bf 91       	pop	r27
    477c:	af 91       	pop	r26
    477e:	9f 91       	pop	r25
    4780:	8f 91       	pop	r24
    4782:	7f 91       	pop	r23
    4784:	6f 91       	pop	r22
    4786:	5f 91       	pop	r21
    4788:	4f 91       	pop	r20
    478a:	3f 91       	pop	r19
    478c:	2f 91       	pop	r18
    478e:	0f 90       	pop	r0
    4790:	0f be       	out	0x3f, r0	; 63
    4792:	0f 90       	pop	r0
    4794:	1f 90       	pop	r1
    4796:	18 95       	reti

00004798 <__vector_12>:
    4798:	1f 92       	push	r1
    479a:	0f 92       	push	r0
    479c:	0f b6       	in	r0, 0x3f	; 63
    479e:	0f 92       	push	r0
    47a0:	11 24       	eor	r1, r1
    47a2:	2f 93       	push	r18
    47a4:	3f 93       	push	r19
    47a6:	4f 93       	push	r20
    47a8:	5f 93       	push	r21
    47aa:	6f 93       	push	r22
    47ac:	7f 93       	push	r23
    47ae:	8f 93       	push	r24
    47b0:	9f 93       	push	r25
    47b2:	af 93       	push	r26
    47b4:	bf 93       	push	r27
    47b6:	ef 93       	push	r30
    47b8:	ff 93       	push	r31
    47ba:	e0 91 88 04 	lds	r30, 0x0488
    47be:	f0 91 89 04 	lds	r31, 0x0489
    47c2:	30 97       	sbiw	r30, 0x00	; 0
    47c4:	09 f0       	breq	.+2      	; 0x47c8 <__vector_12+0x30>
    47c6:	09 95       	icall
    47c8:	ff 91       	pop	r31
    47ca:	ef 91       	pop	r30
    47cc:	bf 91       	pop	r27
    47ce:	af 91       	pop	r26
    47d0:	9f 91       	pop	r25
    47d2:	8f 91       	pop	r24
    47d4:	7f 91       	pop	r23
    47d6:	6f 91       	pop	r22
    47d8:	5f 91       	pop	r21
    47da:	4f 91       	pop	r20
    47dc:	3f 91       	pop	r19
    47de:	2f 91       	pop	r18
    47e0:	0f 90       	pop	r0
    47e2:	0f be       	out	0x3f, r0	; 63
    47e4:	0f 90       	pop	r0
    47e6:	1f 90       	pop	r1
    47e8:	18 95       	reti

000047ea <__vector_15>:
    47ea:	1f 92       	push	r1
    47ec:	0f 92       	push	r0
    47ee:	0f b6       	in	r0, 0x3f	; 63
    47f0:	0f 92       	push	r0
    47f2:	11 24       	eor	r1, r1
    47f4:	2f 93       	push	r18
    47f6:	3f 93       	push	r19
    47f8:	4f 93       	push	r20
    47fa:	5f 93       	push	r21
    47fc:	6f 93       	push	r22
    47fe:	7f 93       	push	r23
    4800:	8f 93       	push	r24
    4802:	9f 93       	push	r25
    4804:	af 93       	push	r26
    4806:	bf 93       	push	r27
    4808:	ef 93       	push	r30
    480a:	ff 93       	push	r31
    480c:	e0 91 8e 04 	lds	r30, 0x048E
    4810:	f0 91 8f 04 	lds	r31, 0x048F
    4814:	30 97       	sbiw	r30, 0x00	; 0
    4816:	09 f0       	breq	.+2      	; 0x481a <__vector_15+0x30>
    4818:	09 95       	icall
    481a:	ff 91       	pop	r31
    481c:	ef 91       	pop	r30
    481e:	bf 91       	pop	r27
    4820:	af 91       	pop	r26
    4822:	9f 91       	pop	r25
    4824:	8f 91       	pop	r24
    4826:	7f 91       	pop	r23
    4828:	6f 91       	pop	r22
    482a:	5f 91       	pop	r21
    482c:	4f 91       	pop	r20
    482e:	3f 91       	pop	r19
    4830:	2f 91       	pop	r18
    4832:	0f 90       	pop	r0
    4834:	0f be       	out	0x3f, r0	; 63
    4836:	0f 90       	pop	r0
    4838:	1f 90       	pop	r1
    483a:	18 95       	reti

0000483c <__vector_4>:
    483c:	1f 92       	push	r1
    483e:	0f 92       	push	r0
    4840:	0f b6       	in	r0, 0x3f	; 63
    4842:	0f 92       	push	r0
    4844:	11 24       	eor	r1, r1
    4846:	2f 93       	push	r18
    4848:	3f 93       	push	r19
    484a:	4f 93       	push	r20
    484c:	5f 93       	push	r21
    484e:	6f 93       	push	r22
    4850:	7f 93       	push	r23
    4852:	8f 93       	push	r24
    4854:	9f 93       	push	r25
    4856:	af 93       	push	r26
    4858:	bf 93       	push	r27
    485a:	ef 93       	push	r30
    485c:	ff 93       	push	r31
    485e:	e0 91 78 04 	lds	r30, 0x0478
    4862:	f0 91 79 04 	lds	r31, 0x0479
    4866:	30 97       	sbiw	r30, 0x00	; 0
    4868:	09 f0       	breq	.+2      	; 0x486c <__vector_4+0x30>
    486a:	09 95       	icall
    486c:	ff 91       	pop	r31
    486e:	ef 91       	pop	r30
    4870:	bf 91       	pop	r27
    4872:	af 91       	pop	r26
    4874:	9f 91       	pop	r25
    4876:	8f 91       	pop	r24
    4878:	7f 91       	pop	r23
    487a:	6f 91       	pop	r22
    487c:	5f 91       	pop	r21
    487e:	4f 91       	pop	r20
    4880:	3f 91       	pop	r19
    4882:	2f 91       	pop	r18
    4884:	0f 90       	pop	r0
    4886:	0f be       	out	0x3f, r0	; 63
    4888:	0f 90       	pop	r0
    488a:	1f 90       	pop	r1
    488c:	18 95       	reti

0000488e <__vector_5>:
    488e:	1f 92       	push	r1
    4890:	0f 92       	push	r0
    4892:	0f b6       	in	r0, 0x3f	; 63
    4894:	0f 92       	push	r0
    4896:	11 24       	eor	r1, r1
    4898:	2f 93       	push	r18
    489a:	3f 93       	push	r19
    489c:	4f 93       	push	r20
    489e:	5f 93       	push	r21
    48a0:	6f 93       	push	r22
    48a2:	7f 93       	push	r23
    48a4:	8f 93       	push	r24
    48a6:	9f 93       	push	r25
    48a8:	af 93       	push	r26
    48aa:	bf 93       	push	r27
    48ac:	ef 93       	push	r30
    48ae:	ff 93       	push	r31
    48b0:	e0 91 7a 04 	lds	r30, 0x047A
    48b4:	f0 91 7b 04 	lds	r31, 0x047B
    48b8:	30 97       	sbiw	r30, 0x00	; 0
    48ba:	09 f0       	breq	.+2      	; 0x48be <__vector_5+0x30>
    48bc:	09 95       	icall
    48be:	ff 91       	pop	r31
    48c0:	ef 91       	pop	r30
    48c2:	bf 91       	pop	r27
    48c4:	af 91       	pop	r26
    48c6:	9f 91       	pop	r25
    48c8:	8f 91       	pop	r24
    48ca:	7f 91       	pop	r23
    48cc:	6f 91       	pop	r22
    48ce:	5f 91       	pop	r21
    48d0:	4f 91       	pop	r20
    48d2:	3f 91       	pop	r19
    48d4:	2f 91       	pop	r18
    48d6:	0f 90       	pop	r0
    48d8:	0f be       	out	0x3f, r0	; 63
    48da:	0f 90       	pop	r0
    48dc:	1f 90       	pop	r1
    48de:	18 95       	reti

000048e0 <__vector_6>:
    48e0:	1f 92       	push	r1
    48e2:	0f 92       	push	r0
    48e4:	0f b6       	in	r0, 0x3f	; 63
    48e6:	0f 92       	push	r0
    48e8:	11 24       	eor	r1, r1
    48ea:	2f 93       	push	r18
    48ec:	3f 93       	push	r19
    48ee:	4f 93       	push	r20
    48f0:	5f 93       	push	r21
    48f2:	6f 93       	push	r22
    48f4:	7f 93       	push	r23
    48f6:	8f 93       	push	r24
    48f8:	9f 93       	push	r25
    48fa:	af 93       	push	r26
    48fc:	bf 93       	push	r27
    48fe:	ef 93       	push	r30
    4900:	ff 93       	push	r31
    4902:	e0 91 7c 04 	lds	r30, 0x047C
    4906:	f0 91 7d 04 	lds	r31, 0x047D
    490a:	30 97       	sbiw	r30, 0x00	; 0
    490c:	09 f0       	breq	.+2      	; 0x4910 <__vector_6+0x30>
    490e:	09 95       	icall
    4910:	ff 91       	pop	r31
    4912:	ef 91       	pop	r30
    4914:	bf 91       	pop	r27
    4916:	af 91       	pop	r26
    4918:	9f 91       	pop	r25
    491a:	8f 91       	pop	r24
    491c:	7f 91       	pop	r23
    491e:	6f 91       	pop	r22
    4920:	5f 91       	pop	r21
    4922:	4f 91       	pop	r20
    4924:	3f 91       	pop	r19
    4926:	2f 91       	pop	r18
    4928:	0f 90       	pop	r0
    492a:	0f be       	out	0x3f, r0	; 63
    492c:	0f 90       	pop	r0
    492e:	1f 90       	pop	r1
    4930:	18 95       	reti

00004932 <__vector_7>:
    4932:	1f 92       	push	r1
    4934:	0f 92       	push	r0
    4936:	0f b6       	in	r0, 0x3f	; 63
    4938:	0f 92       	push	r0
    493a:	11 24       	eor	r1, r1
    493c:	2f 93       	push	r18
    493e:	3f 93       	push	r19
    4940:	4f 93       	push	r20
    4942:	5f 93       	push	r21
    4944:	6f 93       	push	r22
    4946:	7f 93       	push	r23
    4948:	8f 93       	push	r24
    494a:	9f 93       	push	r25
    494c:	af 93       	push	r26
    494e:	bf 93       	push	r27
    4950:	ef 93       	push	r30
    4952:	ff 93       	push	r31
    4954:	e0 91 7e 04 	lds	r30, 0x047E
    4958:	f0 91 7f 04 	lds	r31, 0x047F
    495c:	30 97       	sbiw	r30, 0x00	; 0
    495e:	09 f0       	breq	.+2      	; 0x4962 <__vector_7+0x30>
    4960:	09 95       	icall
    4962:	ff 91       	pop	r31
    4964:	ef 91       	pop	r30
    4966:	bf 91       	pop	r27
    4968:	af 91       	pop	r26
    496a:	9f 91       	pop	r25
    496c:	8f 91       	pop	r24
    496e:	7f 91       	pop	r23
    4970:	6f 91       	pop	r22
    4972:	5f 91       	pop	r21
    4974:	4f 91       	pop	r20
    4976:	3f 91       	pop	r19
    4978:	2f 91       	pop	r18
    497a:	0f 90       	pop	r0
    497c:	0f be       	out	0x3f, r0	; 63
    497e:	0f 90       	pop	r0
    4980:	1f 90       	pop	r1
    4982:	18 95       	reti

00004984 <ISR_attach>:
    4984:	e8 2f       	mov	r30, r24
    4986:	80 32       	cpi	r24, 0x20	; 32
    4988:	68 f4       	brcc	.+26     	; 0x49a4 <ISR_attach+0x20>
    498a:	80 51       	subi	r24, 0x10	; 16
    498c:	83 30       	cpi	r24, 0x03	; 3
    498e:	50 f0       	brcs	.+20     	; 0x49a4 <ISR_attach+0x20>
    4990:	f0 e0       	ldi	r31, 0x00	; 0
    4992:	ee 0f       	add	r30, r30
    4994:	ff 1f       	adc	r31, r31
    4996:	e0 59       	subi	r30, 0x90	; 144
    4998:	fb 4f       	sbci	r31, 0xFB	; 251
    499a:	20 81       	ld	r18, Z
    499c:	31 81       	ldd	r19, Z+1	; 0x01
    499e:	71 83       	std	Z+1, r23	; 0x01
    49a0:	60 83       	st	Z, r22
    49a2:	02 c0       	rjmp	.+4      	; 0x49a8 <ISR_attach+0x24>
    49a4:	20 e0       	ldi	r18, 0x00	; 0
    49a6:	30 e0       	ldi	r19, 0x00	; 0
    49a8:	c9 01       	movw	r24, r18
    49aa:	08 95       	ret

000049ac <ISR_open>:
    49ac:	80 e1       	ldi	r24, 0x10	; 16
    49ae:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    49b2:	88 23       	and	r24, r24
    49b4:	61 f4       	brne	.+24     	; 0x49ce <ISR_open+0x22>
    49b6:	e0 e7       	ldi	r30, 0x70	; 112
    49b8:	f4 e0       	ldi	r31, 0x04	; 4
    49ba:	11 92       	st	Z+, r1
    49bc:	11 92       	st	Z+, r1
    49be:	84 e0       	ldi	r24, 0x04	; 4
    49c0:	e0 3b       	cpi	r30, 0xB0	; 176
    49c2:	f8 07       	cpc	r31, r24
    49c4:	d1 f7       	brne	.-12     	; 0x49ba <ISR_open+0xe>
    49c6:	80 e1       	ldi	r24, 0x10	; 16
    49c8:	61 e0       	ldi	r22, 0x01	; 1
    49ca:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    49ce:	80 e1       	ldi	r24, 0x10	; 16
    49d0:	91 e0       	ldi	r25, 0x01	; 1
    49d2:	08 95       	ret

000049d4 <__LCD_init>:
    49d4:	23 9a       	sbi	0x04, 3	; 4
    49d6:	08 95       	ret

000049d8 <__LCD_putchar>:
    49d8:	ff 92       	push	r15
    49da:	0f 93       	push	r16
    49dc:	1f 93       	push	r17
    49de:	cf 93       	push	r28
    49e0:	df 93       	push	r29
    49e2:	f8 2e       	mov	r15, r24
    49e4:	8a e0       	ldi	r24, 0x0A	; 10
    49e6:	f8 16       	cp	r15, r24
    49e8:	b1 f0       	breq	.+44     	; 0x4a16 <__LCD_putchar+0x3e>
    49ea:	8f 15       	cp	r24, r15
    49ec:	48 f0       	brcs	.+18     	; 0x4a00 <__LCD_putchar+0x28>
    49ee:	e8 e0       	ldi	r30, 0x08	; 8
    49f0:	fe 16       	cp	r15, r30
    49f2:	b9 f1       	breq	.+110    	; 0x4a62 <__LCD_putchar+0x8a>
    49f4:	ef 15       	cp	r30, r15
    49f6:	38 f1       	brcs	.+78     	; 0x4a46 <__LCD_putchar+0x6e>
    49f8:	f7 e0       	ldi	r31, 0x07	; 7
    49fa:	ff 16       	cp	r15, r31
    49fc:	51 f4       	brne	.+20     	; 0x4a12 <__LCD_putchar+0x3a>
    49fe:	3b c0       	rjmp	.+118    	; 0x4a76 <__LCD_putchar+0x9e>
    4a00:	8d e0       	ldi	r24, 0x0D	; 13
    4a02:	f8 16       	cp	r15, r24
    4a04:	59 f0       	breq	.+22     	; 0x4a1c <__LCD_putchar+0x44>
    4a06:	eb e1       	ldi	r30, 0x1B	; 27
    4a08:	fe 16       	cp	r15, r30
    4a0a:	89 f0       	breq	.+34     	; 0x4a2e <__LCD_putchar+0x56>
    4a0c:	fc e0       	ldi	r31, 0x0C	; 12
    4a0e:	ff 16       	cp	r15, r31
    4a10:	41 f0       	breq	.+16     	; 0x4a22 <__LCD_putchar+0x4a>
    4a12:	01 e0       	ldi	r16, 0x01	; 1
    4a14:	41 c0       	rjmp	.+130    	; 0x4a98 <__LCD_putchar+0xc0>
    4a16:	10 92 cc 07 	sts	0x07CC, r1
    4a1a:	03 c0       	rjmp	.+6      	; 0x4a22 <__LCD_putchar+0x4a>
    4a1c:	10 92 cc 07 	sts	0x07CC, r1
    4a20:	3a c0       	rjmp	.+116    	; 0x4a96 <__LCD_putchar+0xbe>
    4a22:	80 91 cd 07 	lds	r24, 0x07CD
    4a26:	81 50       	subi	r24, 0x01	; 1
    4a28:	80 93 cd 07 	sts	0x07CD, r24
    4a2c:	34 c0       	rjmp	.+104    	; 0x4a96 <__LCD_putchar+0xbe>
    4a2e:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <LCD_clear>
    4a32:	14 c0       	rjmp	.+40     	; 0x4a5c <__LCD_putchar+0x84>
    4a34:	80 e0       	ldi	r24, 0x00	; 0
    4a36:	61 e0       	ldi	r22, 0x01	; 1
    4a38:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    4a3c:	80 91 cc 07 	lds	r24, 0x07CC
    4a40:	8f 5f       	subi	r24, 0xFF	; 255
    4a42:	80 93 cc 07 	sts	0x07CC, r24
    4a46:	80 91 cc 07 	lds	r24, 0x07CC
    4a4a:	87 ff       	sbrs	r24, 7
    4a4c:	f3 cf       	rjmp	.-26     	; 0x4a34 <__LCD_putchar+0x5c>
    4a4e:	10 92 cc 07 	sts	0x07CC, r1
    4a52:	80 91 cd 07 	lds	r24, 0x07CD
    4a56:	81 50       	subi	r24, 0x01	; 1
    4a58:	80 93 cd 07 	sts	0x07CD, r24
    4a5c:	00 e0       	ldi	r16, 0x00	; 0
    4a5e:	11 e0       	ldi	r17, 0x01	; 1
    4a60:	1c c0       	rjmp	.+56     	; 0x4a9a <__LCD_putchar+0xc2>
    4a62:	80 91 cc 07 	lds	r24, 0x07CC
    4a66:	88 23       	and	r24, r24
    4a68:	b1 f0       	breq	.+44     	; 0x4a96 <__LCD_putchar+0xbe>
    4a6a:	80 91 cc 07 	lds	r24, 0x07CC
    4a6e:	86 50       	subi	r24, 0x06	; 6
    4a70:	80 93 cc 07 	sts	0x07CC, r24
    4a74:	10 c0       	rjmp	.+32     	; 0x4a96 <__LCD_putchar+0xbe>
    4a76:	81 e0       	ldi	r24, 0x01	; 1
    4a78:	0e 94 1b 1c 	call	0x3836	; 0x3836 <SPKR_open>
    4a7c:	64 ef       	ldi	r22, 0xF4	; 244
    4a7e:	71 e0       	ldi	r23, 0x01	; 1
    4a80:	80 e0       	ldi	r24, 0x00	; 0
    4a82:	90 e0       	ldi	r25, 0x00	; 0
    4a84:	4d e7       	ldi	r20, 0x7D	; 125
    4a86:	50 e0       	ldi	r21, 0x00	; 0
    4a88:	24 e6       	ldi	r18, 0x64	; 100
    4a8a:	30 e0       	ldi	r19, 0x00	; 0
    4a8c:	0e 94 28 1c 	call	0x3850	; 0x3850 <SPKR_play_beep>
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <SPKR_close>
    4a96:	00 e0       	ldi	r16, 0x00	; 0
    4a98:	10 e0       	ldi	r17, 0x00	; 0
    4a9a:	80 91 cd 07 	lds	r24, 0x07CD
    4a9e:	60 91 cc 07 	lds	r22, 0x07CC
    4aa2:	0e 94 be 1a 	call	0x357c	; 0x357c <LCD_set_PGC_addr>
    4aa6:	00 23       	and	r16, r16
    4aa8:	51 f1       	breq	.+84     	; 0x4afe <__LCD_putchar+0x126>
    4aaa:	85 e0       	ldi	r24, 0x05	; 5
    4aac:	f8 9e       	mul	r15, r24
    4aae:	c0 01       	movw	r24, r0
    4ab0:	11 24       	eor	r1, r1
    4ab2:	ec 01       	movw	r28, r24
    4ab4:	c3 55       	subi	r28, 0x53	; 83
    4ab6:	df 4f       	sbci	r29, 0xFF	; 255
    4ab8:	8c 01       	movw	r16, r24
    4aba:	0e 54       	subi	r16, 0x4E	; 78
    4abc:	1f 4f       	sbci	r17, 0xFF	; 255
    4abe:	fe 01       	movw	r30, r28
    4ac0:	84 91       	lpm	r24, Z+
    4ac2:	61 e0       	ldi	r22, 0x01	; 1
    4ac4:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    4ac8:	21 96       	adiw	r28, 0x01	; 1
    4aca:	c0 17       	cp	r28, r16
    4acc:	d1 07       	cpc	r29, r17
    4ace:	b9 f7       	brne	.-18     	; 0x4abe <__LCD_putchar+0xe6>
    4ad0:	80 e0       	ldi	r24, 0x00	; 0
    4ad2:	61 e0       	ldi	r22, 0x01	; 1
    4ad4:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <LCD_write>
    4ad8:	80 91 cc 07 	lds	r24, 0x07CC
    4adc:	8a 5f       	subi	r24, 0xFA	; 250
    4ade:	80 93 cc 07 	sts	0x07CC, r24
    4ae2:	80 91 cc 07 	lds	r24, 0x07CC
    4ae6:	90 e0       	ldi	r25, 0x00	; 0
    4ae8:	8c 37       	cpi	r24, 0x7C	; 124
    4aea:	91 05       	cpc	r25, r1
    4aec:	3c f0       	brlt	.+14     	; 0x4afc <__LCD_putchar+0x124>
    4aee:	10 92 cc 07 	sts	0x07CC, r1
    4af2:	80 91 cd 07 	lds	r24, 0x07CD
    4af6:	81 50       	subi	r24, 0x01	; 1
    4af8:	80 93 cd 07 	sts	0x07CD, r24
    4afc:	11 e0       	ldi	r17, 0x01	; 1
    4afe:	80 91 cd 07 	lds	r24, 0x07CD
    4b02:	83 70       	andi	r24, 0x03	; 3
    4b04:	80 93 cd 07 	sts	0x07CD, r24
    4b08:	11 30       	cpi	r17, 0x01	; 1
    4b0a:	59 f4       	brne	.+22     	; 0x4b22 <__LCD_putchar+0x14a>
    4b0c:	80 91 ce 07 	lds	r24, 0x07CE
    4b10:	81 30       	cpi	r24, 0x01	; 1
    4b12:	39 f4       	brne	.+14     	; 0x4b22 <__LCD_putchar+0x14a>
    4b14:	e0 91 cf 07 	lds	r30, 0x07CF
    4b18:	f0 91 d0 07 	lds	r31, 0x07D0
    4b1c:	30 97       	sbiw	r30, 0x00	; 0
    4b1e:	09 f0       	breq	.+2      	; 0x4b22 <__LCD_putchar+0x14a>
    4b20:	09 95       	icall
    4b22:	80 e0       	ldi	r24, 0x00	; 0
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	df 91       	pop	r29
    4b28:	cf 91       	pop	r28
    4b2a:	1f 91       	pop	r17
    4b2c:	0f 91       	pop	r16
    4b2e:	ff 90       	pop	r15
    4b30:	08 95       	ret

00004b32 <__LED_clr_pattern>:
    4b32:	85 fd       	sbrc	r24, 5
    4b34:	5d 98       	cbi	0x0b, 5	; 11
    4b36:	86 fd       	sbrc	r24, 6
    4b38:	5e 98       	cbi	0x0b, 6	; 11
    4b3a:	08 95       	ret

00004b3c <__LED_init>:
    4b3c:	55 9a       	sbi	0x0a, 5	; 10
    4b3e:	56 9a       	sbi	0x0a, 6	; 10
    4b40:	08 95       	ret

00004b42 <__LED_set_pattern>:
    4b42:	85 fd       	sbrc	r24, 5
    4b44:	5d 9a       	sbi	0x0b, 5	; 11
    4b46:	86 fd       	sbrc	r24, 6
    4b48:	5e 9a       	sbi	0x0b, 6	; 11
    4b4a:	08 95       	ret

00004b4c <ATMEGA_open>:
    4b4c:	80 e0       	ldi	r24, 0x00	; 0
    4b4e:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    4b52:	88 23       	and	r24, r24
    4b54:	51 f4       	brne	.+20     	; 0x4b6a <ATMEGA_open+0x1e>
    4b56:	f8 94       	cli
    4b58:	0e 94 50 28 	call	0x50a0	; 0x50a0 <__ATMEGA_init>
    4b5c:	81 e0       	ldi	r24, 0x01	; 1
    4b5e:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <ATMEGA_set_clk_mode>
    4b62:	80 e0       	ldi	r24, 0x00	; 0
    4b64:	61 e0       	ldi	r22, 0x01	; 1
    4b66:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
    4b6c:	91 e0       	ldi	r25, 0x01	; 1
    4b6e:	08 95       	ret

00004b70 <ATMEGA_set_clk_mode>:
    4b70:	81 30       	cpi	r24, 0x01	; 1
    4b72:	49 f0       	breq	.+18     	; 0x4b86 <ATMEGA_set_clk_mode+0x16>
    4b74:	f8 94       	cli
    4b76:	81 30       	cpi	r24, 0x01	; 1
    4b78:	20 f1       	brcs	.+72     	; 0x4bc2 <ATMEGA_set_clk_mode+0x52>
    4b7a:	82 30       	cpi	r24, 0x02	; 2
    4b7c:	b1 f0       	breq	.+44     	; 0x4baa <ATMEGA_set_clk_mode+0x3a>
    4b7e:	83 30       	cpi	r24, 0x03	; 3
    4b80:	09 f0       	breq	.+2      	; 0x4b84 <ATMEGA_set_clk_mode+0x14>
    4b82:	45 c0       	rjmp	.+138    	; 0x4c0e <ATMEGA_set_clk_mode+0x9e>
    4b84:	17 c0       	rjmp	.+46     	; 0x4bb4 <ATMEGA_set_clk_mode+0x44>
    4b86:	2c 9a       	sbi	0x05, 4	; 5
    4b88:	80 e8       	ldi	r24, 0x80	; 128
    4b8a:	80 93 61 00 	sts	0x0061, r24
    4b8e:	10 92 61 00 	sts	0x0061, r1
    4b92:	80 e0       	ldi	r24, 0x00	; 0
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	00 00       	nop
    4b98:	01 96       	adiw	r24, 0x01	; 1
    4b9a:	88 32       	cpi	r24, 0x28	; 40
    4b9c:	91 05       	cpc	r25, r1
    4b9e:	d9 f7       	brne	.-10     	; 0x4b96 <ATMEGA_set_clk_mode+0x26>
    4ba0:	10 92 68 00 	sts	0x0068, r1
    4ba4:	10 92 6b 00 	sts	0x006B, r1
    4ba8:	08 95       	ret
    4baa:	80 e8       	ldi	r24, 0x80	; 128
    4bac:	80 93 61 00 	sts	0x0061, r24
    4bb0:	83 e0       	ldi	r24, 0x03	; 3
    4bb2:	04 c0       	rjmp	.+8      	; 0x4bbc <ATMEGA_set_clk_mode+0x4c>
    4bb4:	80 e8       	ldi	r24, 0x80	; 128
    4bb6:	80 93 61 00 	sts	0x0061, r24
    4bba:	88 e0       	ldi	r24, 0x08	; 8
    4bbc:	80 93 61 00 	sts	0x0061, r24
    4bc0:	28 c0       	rjmp	.+80     	; 0x4c12 <ATMEGA_set_clk_mode+0xa2>
    4bc2:	80 e0       	ldi	r24, 0x00	; 0
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	00 00       	nop
    4bc8:	01 96       	adiw	r24, 0x01	; 1
    4bca:	2d e6       	ldi	r18, 0x6D	; 109
    4bcc:	80 36       	cpi	r24, 0x60	; 96
    4bce:	92 07       	cpc	r25, r18
    4bd0:	d1 f7       	brne	.-12     	; 0x4bc6 <ATMEGA_set_clk_mode+0x56>
    4bd2:	2c 98       	cbi	0x05, 4	; 5
    4bd4:	80 e0       	ldi	r24, 0x00	; 0
    4bd6:	90 e0       	ldi	r25, 0x00	; 0
    4bd8:	00 00       	nop
    4bda:	01 96       	adiw	r24, 0x01	; 1
    4bdc:	2d e6       	ldi	r18, 0x6D	; 109
    4bde:	80 36       	cpi	r24, 0x60	; 96
    4be0:	92 07       	cpc	r25, r18
    4be2:	d1 f7       	brne	.-12     	; 0x4bd8 <ATMEGA_set_clk_mode+0x68>
    4be4:	10 92 7a 00 	sts	0x007A, r1
    4be8:	8f ef       	ldi	r24, 0xFF	; 255
    4bea:	80 93 64 00 	sts	0x0064, r24
    4bee:	80 91 68 00 	lds	r24, 0x0068
    4bf2:	81 60       	ori	r24, 0x01	; 1
    4bf4:	80 93 68 00 	sts	0x0068, r24
    4bf8:	80 91 6b 00 	lds	r24, 0x006B
    4bfc:	84 60       	ori	r24, 0x04	; 4
    4bfe:	80 93 6b 00 	sts	0x006B, r24
    4c02:	78 94       	sei
    4c04:	83 b7       	in	r24, 0x33	; 51
    4c06:	81 60       	ori	r24, 0x01	; 1
    4c08:	83 bf       	out	0x33, r24	; 51
    4c0a:	88 95       	sleep
    4c0c:	08 95       	ret
    4c0e:	82 30       	cpi	r24, 0x02	; 2
    4c10:	08 f0       	brcs	.+2      	; 0x4c14 <ATMEGA_set_clk_mode+0xa4>
    4c12:	78 94       	sei
    4c14:	08 95       	ret

00004c16 <SPI_open>:
    4c16:	0f 93       	push	r16
    4c18:	1f 93       	push	r17
    4c1a:	0e 94 7c 28 	call	0x50f8	; 0x50f8 <__SPI_init>
    4c1e:	80 e0       	ldi	r24, 0x00	; 0
    4c20:	6b e6       	ldi	r22, 0x6B	; 107
    4c22:	78 e2       	ldi	r23, 0x28	; 40
    4c24:	0e 94 56 26 	call	0x4cac	; 0x4cac <SPI_set_config_func>
    4c28:	81 e0       	ldi	r24, 0x01	; 1
    4c2a:	63 e6       	ldi	r22, 0x63	; 99
    4c2c:	78 e2       	ldi	r23, 0x28	; 40
    4c2e:	0e 94 56 26 	call	0x4cac	; 0x4cac <SPI_set_config_func>
    4c32:	82 e0       	ldi	r24, 0x02	; 2
    4c34:	6b e5       	ldi	r22, 0x5B	; 91
    4c36:	78 e2       	ldi	r23, 0x28	; 40
    4c38:	0e 94 56 26 	call	0x4cac	; 0x4cac <SPI_set_config_func>
    4c3c:	86 e0       	ldi	r24, 0x06	; 6
    4c3e:	63 e7       	ldi	r22, 0x73	; 115
    4c40:	78 e2       	ldi	r23, 0x28	; 40
    4c42:	0e 94 56 26 	call	0x4cac	; 0x4cac <SPI_set_config_func>
    4c46:	03 e5       	ldi	r16, 0x53	; 83
    4c48:	18 e2       	ldi	r17, 0x28	; 40
    4c4a:	83 e0       	ldi	r24, 0x03	; 3
    4c4c:	b8 01       	movw	r22, r16
    4c4e:	0e 94 56 26 	call	0x4cac	; 0x4cac <SPI_set_config_func>
    4c52:	84 e0       	ldi	r24, 0x04	; 4
    4c54:	b8 01       	movw	r22, r16
    4c56:	0e 94 56 26 	call	0x4cac	; 0x4cac <SPI_set_config_func>
    4c5a:	85 e0       	ldi	r24, 0x05	; 5
    4c5c:	b8 01       	movw	r22, r16
    4c5e:	0e 94 56 26 	call	0x4cac	; 0x4cac <SPI_set_config_func>
    4c62:	87 e0       	ldi	r24, 0x07	; 7
    4c64:	b8 01       	movw	r22, r16
    4c66:	0e 94 56 26 	call	0x4cac	; 0x4cac <SPI_set_config_func>
    4c6a:	82 e0       	ldi	r24, 0x02	; 2
    4c6c:	61 e0       	ldi	r22, 0x01	; 1
    4c6e:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    4c72:	8f ef       	ldi	r24, 0xFF	; 255
    4c74:	80 93 d1 07 	sts	0x07D1, r24
    4c78:	87 e0       	ldi	r24, 0x07	; 7
    4c7a:	0e 94 13 1b 	call	0x3626	; 0x3626 <SPI_set_slave_addr>
    4c7e:	82 e0       	ldi	r24, 0x02	; 2
    4c80:	91 e0       	ldi	r25, 0x01	; 1
    4c82:	1f 91       	pop	r17
    4c84:	0f 91       	pop	r16
    4c86:	08 95       	ret

00004c88 <SPI_receive>:
    4c88:	1f 93       	push	r17
    4c8a:	16 2f       	mov	r17, r22
    4c8c:	0e 94 13 1b 	call	0x3626	; 0x3626 <SPI_set_slave_addr>
    4c90:	82 e0       	ldi	r24, 0x02	; 2
    4c92:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    4c96:	81 30       	cpi	r24, 0x01	; 1
    4c98:	11 f0       	breq	.+4      	; 0x4c9e <SPI_receive+0x16>
    4c9a:	80 e0       	ldi	r24, 0x00	; 0
    4c9c:	05 c0       	rjmp	.+10     	; 0x4ca8 <SPI_receive+0x20>
    4c9e:	1e bd       	out	0x2e, r17	; 46
    4ca0:	0d b4       	in	r0, 0x2d	; 45
    4ca2:	07 fe       	sbrs	r0, 7
    4ca4:	fd cf       	rjmp	.-6      	; 0x4ca0 <SPI_receive+0x18>
    4ca6:	8e b5       	in	r24, 0x2e	; 46
    4ca8:	1f 91       	pop	r17
    4caa:	08 95       	ret

00004cac <SPI_set_config_func>:
    4cac:	e8 2f       	mov	r30, r24
    4cae:	f0 e0       	ldi	r31, 0x00	; 0
    4cb0:	ee 0f       	add	r30, r30
    4cb2:	ff 1f       	adc	r31, r31
    4cb4:	e0 55       	subi	r30, 0x50	; 80
    4cb6:	fb 4f       	sbci	r31, 0xFB	; 251
    4cb8:	71 83       	std	Z+1, r23	; 0x01
    4cba:	60 83       	st	Z, r22
    4cbc:	08 95       	ret

00004cbe <__SPKR_TIMER1_COMPA_vect>:
    4cbe:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <SPKR_clk>
    4cc2:	08 95       	ret

00004cc4 <SPKR_clk>:
    4cc4:	80 91 52 04 	lds	r24, 0x0452
    4cc8:	90 91 53 04 	lds	r25, 0x0453
    4ccc:	a0 91 54 04 	lds	r26, 0x0454
    4cd0:	b0 91 55 04 	lds	r27, 0x0455
    4cd4:	20 91 56 04 	lds	r18, 0x0456
    4cd8:	30 91 57 04 	lds	r19, 0x0457
    4cdc:	40 91 58 04 	lds	r20, 0x0458
    4ce0:	50 91 59 04 	lds	r21, 0x0459
    4ce4:	28 0f       	add	r18, r24
    4ce6:	39 1f       	adc	r19, r25
    4ce8:	4a 1f       	adc	r20, r26
    4cea:	5b 1f       	adc	r21, r27
    4cec:	20 93 52 04 	sts	0x0452, r18
    4cf0:	30 93 53 04 	sts	0x0453, r19
    4cf4:	40 93 54 04 	sts	0x0454, r20
    4cf8:	50 93 55 04 	sts	0x0455, r21
    4cfc:	80 91 52 04 	lds	r24, 0x0452
    4d00:	90 91 53 04 	lds	r25, 0x0453
    4d04:	a0 91 54 04 	lds	r26, 0x0454
    4d08:	b0 91 55 04 	lds	r27, 0x0455
    4d0c:	88 51       	subi	r24, 0x18	; 24
    4d0e:	96 4f       	sbci	r25, 0xF6	; 246
    4d10:	a0 40       	sbci	r26, 0x00	; 0
    4d12:	b0 40       	sbci	r27, 0x00	; 0
    4d14:	bc f0       	brlt	.+46     	; 0x4d44 <SPKR_clk+0x80>
    4d16:	8b b1       	in	r24, 0x0b	; 11
    4d18:	80 58       	subi	r24, 0x80	; 128
    4d1a:	8b b9       	out	0x0b, r24	; 11
    4d1c:	80 91 52 04 	lds	r24, 0x0452
    4d20:	90 91 53 04 	lds	r25, 0x0453
    4d24:	a0 91 54 04 	lds	r26, 0x0454
    4d28:	b0 91 55 04 	lds	r27, 0x0455
    4d2c:	88 51       	subi	r24, 0x18	; 24
    4d2e:	96 4f       	sbci	r25, 0xF6	; 246
    4d30:	a0 40       	sbci	r26, 0x00	; 0
    4d32:	b0 40       	sbci	r27, 0x00	; 0
    4d34:	80 93 52 04 	sts	0x0452, r24
    4d38:	90 93 53 04 	sts	0x0453, r25
    4d3c:	a0 93 54 04 	sts	0x0454, r26
    4d40:	b0 93 55 04 	sts	0x0455, r27
    4d44:	08 95       	ret

00004d46 <__SPKR_close_beep_mode>:
    4d46:	8a e0       	ldi	r24, 0x0A	; 10
    4d48:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    4d4c:	81 30       	cpi	r24, 0x01	; 1
    4d4e:	41 f4       	brne	.+16     	; 0x4d60 <__SPKR_close_beep_mode+0x1a>
    4d50:	0e 94 83 28 	call	0x5106	; 0x5106 <__SPKR_close>
    4d54:	10 92 51 04 	sts	0x0451, r1
    4d58:	8a e0       	ldi	r24, 0x0A	; 10
    4d5a:	60 e0       	ldi	r22, 0x00	; 0
    4d5c:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    4d60:	08 95       	ret

00004d62 <__SPKR_close_tone_mode>:
    4d62:	89 e0       	ldi	r24, 0x09	; 9
    4d64:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    4d68:	81 30       	cpi	r24, 0x01	; 1
    4d6a:	d9 f4       	brne	.+54     	; 0x4da2 <__SPKR_close_tone_mode+0x40>
    4d6c:	80 91 50 04 	lds	r24, 0x0450
    4d70:	88 23       	and	r24, r24
    4d72:	11 f0       	breq	.+4      	; 0x4d78 <__SPKR_close_tone_mode+0x16>
    4d74:	0e 94 06 27 	call	0x4e0c	; 0x4e0c <__SPKR_stop>
    4d78:	82 e0       	ldi	r24, 0x02	; 2
    4d7a:	0e 94 83 28 	call	0x5106	; 0x5106 <__SPKR_close>
    4d7e:	80 91 5e 04 	lds	r24, 0x045E
    4d82:	90 91 5f 04 	lds	r25, 0x045F
    4d86:	00 97       	sbiw	r24, 0x00	; 0
    4d88:	31 f0       	breq	.+12     	; 0x4d96 <__SPKR_close_tone_mode+0x34>
    4d8a:	0e 94 f6 34 	call	0x69ec	; 0x69ec <free>
    4d8e:	10 92 5f 04 	sts	0x045F, r1
    4d92:	10 92 5e 04 	sts	0x045E, r1
    4d96:	10 92 50 04 	sts	0x0450, r1
    4d9a:	89 e0       	ldi	r24, 0x09	; 9
    4d9c:	60 e0       	ldi	r22, 0x00	; 0
    4d9e:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    4da2:	08 95       	ret

00004da4 <SPKR_close>:
    4da4:	81 30       	cpi	r24, 0x01	; 1
    4da6:	29 f0       	breq	.+10     	; 0x4db2 <SPKR_close+0xe>
    4da8:	82 30       	cpi	r24, 0x02	; 2
    4daa:	29 f4       	brne	.+10     	; 0x4db6 <SPKR_close+0x12>
    4dac:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <__SPKR_close_tone_mode>
    4db0:	08 95       	ret
    4db2:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <__SPKR_close_beep_mode>
    4db6:	08 95       	ret

00004db8 <__SPKR_init>:
    4db8:	98 2f       	mov	r25, r24
    4dba:	80 91 50 04 	lds	r24, 0x0450
    4dbe:	88 23       	and	r24, r24
    4dc0:	31 f4       	brne	.+12     	; 0x4dce <__SPKR_init+0x16>
    4dc2:	80 91 51 04 	lds	r24, 0x0451
    4dc6:	88 23       	and	r24, r24
    4dc8:	11 f4       	brne	.+4      	; 0x4dce <__SPKR_init+0x16>
    4dca:	57 9a       	sbi	0x0a, 7	; 10
    4dcc:	5f 98       	cbi	0x0b, 7	; 11
    4dce:	80 91 50 04 	lds	r24, 0x0450
    4dd2:	88 23       	and	r24, r24
    4dd4:	d1 f4       	brne	.+52     	; 0x4e0a <__SPKR_init+0x52>
    4dd6:	92 30       	cpi	r25, 0x02	; 2
    4dd8:	c1 f4       	brne	.+48     	; 0x4e0a <__SPKR_init+0x52>
    4dda:	10 92 80 00 	sts	0x0080, r1
    4dde:	10 92 81 00 	sts	0x0081, r1
    4de2:	80 91 81 00 	lds	r24, 0x0081
    4de6:	88 60       	ori	r24, 0x08	; 8
    4de8:	80 93 81 00 	sts	0x0081, r24
    4dec:	80 91 81 00 	lds	r24, 0x0081
    4df0:	81 60       	ori	r24, 0x01	; 1
    4df2:	80 93 81 00 	sts	0x0081, r24
    4df6:	10 92 85 00 	sts	0x0085, r1
    4dfa:	10 92 84 00 	sts	0x0084, r1
    4dfe:	81 e0       	ldi	r24, 0x01	; 1
    4e00:	80 93 89 00 	sts	0x0089, r24
    4e04:	80 e9       	ldi	r24, 0x90	; 144
    4e06:	80 93 88 00 	sts	0x0088, r24
    4e0a:	08 95       	ret

00004e0c <__SPKR_stop>:
    4e0c:	ef e6       	ldi	r30, 0x6F	; 111
    4e0e:	f0 e0       	ldi	r31, 0x00	; 0
    4e10:	80 81       	ld	r24, Z
    4e12:	8d 7f       	andi	r24, 0xFD	; 253
    4e14:	80 83       	st	Z, r24
    4e16:	08 95       	ret

00004e18 <STEPPER_go>:
    4e18:	98 2f       	mov	r25, r24
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	80 93 b6 07 	sts	0x07B6, r24
    4e20:	91 30       	cpi	r25, 0x01	; 1
    4e22:	51 f0       	breq	.+20     	; 0x4e38 <STEPPER_go+0x20>
    4e24:	91 30       	cpi	r25, 0x01	; 1
    4e26:	18 f0       	brcs	.+6      	; 0x4e2e <STEPPER_go+0x16>
    4e28:	92 30       	cpi	r25, 0x02	; 2
    4e2a:	41 f4       	brne	.+16     	; 0x4e3c <STEPPER_go+0x24>
    4e2c:	03 c0       	rjmp	.+6      	; 0x4e34 <STEPPER_go+0x1c>
    4e2e:	10 92 9e 07 	sts	0x079E, r1
    4e32:	04 c0       	rjmp	.+8      	; 0x4e3c <STEPPER_go+0x24>
    4e34:	10 92 9e 07 	sts	0x079E, r1
    4e38:	10 92 9f 07 	sts	0x079F, r1
    4e3c:	10 92 b6 07 	sts	0x07B6, r1
    4e40:	08 95       	ret

00004e42 <__STEPPER_init>:
    4e42:	3a 9a       	sbi	0x07, 2	; 7
    4e44:	3b 9a       	sbi	0x07, 3	; 7
    4e46:	3c 9a       	sbi	0x07, 4	; 7
    4e48:	3d 9a       	sbi	0x07, 5	; 7
    4e4a:	3e 9a       	sbi	0x07, 6	; 7
    4e4c:	3f 9a       	sbi	0x07, 7	; 7
    4e4e:	88 b1       	in	r24, 0x08	; 8
    4e50:	83 70       	andi	r24, 0x03	; 3
    4e52:	88 b9       	out	0x08, r24	; 8
    4e54:	08 95       	ret

00004e56 <STEPPER_set_stop_mode>:
    4e56:	98 2f       	mov	r25, r24
    4e58:	81 e0       	ldi	r24, 0x01	; 1
    4e5a:	80 93 b6 07 	sts	0x07B6, r24
    4e5e:	91 30       	cpi	r25, 0x01	; 1
    4e60:	51 f0       	breq	.+20     	; 0x4e76 <STEPPER_set_stop_mode+0x20>
    4e62:	91 30       	cpi	r25, 0x01	; 1
    4e64:	18 f0       	brcs	.+6      	; 0x4e6c <STEPPER_set_stop_mode+0x16>
    4e66:	92 30       	cpi	r25, 0x02	; 2
    4e68:	41 f4       	brne	.+16     	; 0x4e7a <STEPPER_set_stop_mode+0x24>
    4e6a:	03 c0       	rjmp	.+6      	; 0x4e72 <STEPPER_set_stop_mode+0x1c>
    4e6c:	60 93 a0 07 	sts	0x07A0, r22
    4e70:	04 c0       	rjmp	.+8      	; 0x4e7a <STEPPER_set_stop_mode+0x24>
    4e72:	60 93 a0 07 	sts	0x07A0, r22
    4e76:	60 93 a1 07 	sts	0x07A1, r22
    4e7a:	10 92 b6 07 	sts	0x07B6, r1
    4e7e:	08 95       	ret

00004e80 <STEPPER_setup_decels>:
    4e80:	0f 93       	push	r16
    4e82:	1f 93       	push	r17
    4e84:	cf 93       	push	r28
    4e86:	df 93       	push	r29
    4e88:	eb 01       	movw	r28, r22
    4e8a:	8a 01       	movw	r16, r20
    4e8c:	81 30       	cpi	r24, 0x01	; 1
    4e8e:	01 f1       	breq	.+64     	; 0x4ed0 <STEPPER_setup_decels+0x50>
    4e90:	81 30       	cpi	r24, 0x01	; 1
    4e92:	18 f0       	brcs	.+6      	; 0x4e9a <STEPPER_setup_decels+0x1a>
    4e94:	82 30       	cpi	r24, 0x02	; 2
    4e96:	61 f5       	brne	.+88     	; 0x4ef0 <STEPPER_setup_decels+0x70>
    4e98:	0d c0       	rjmp	.+26     	; 0x4eb4 <STEPPER_setup_decels+0x34>
    4e9a:	80 91 8a 07 	lds	r24, 0x078A
    4e9e:	90 91 8b 07 	lds	r25, 0x078B
    4ea2:	89 2b       	or	r24, r25
    4ea4:	11 f0       	breq	.+4      	; 0x4eaa <STEPPER_setup_decels+0x2a>
    4ea6:	80 e0       	ldi	r24, 0x00	; 0
    4ea8:	1a c0       	rjmp	.+52     	; 0x4ede <STEPPER_setup_decels+0x5e>
    4eaa:	10 92 97 07 	sts	0x0797, r1
    4eae:	10 92 96 07 	sts	0x0796, r1
    4eb2:	1e c0       	rjmp	.+60     	; 0x4ef0 <STEPPER_setup_decels+0x70>
    4eb4:	80 91 8a 07 	lds	r24, 0x078A
    4eb8:	90 91 8b 07 	lds	r25, 0x078B
    4ebc:	89 2b       	or	r24, r25
    4ebe:	21 f0       	breq	.+8      	; 0x4ec8 <STEPPER_setup_decels+0x48>
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	0e 94 9f 28 	call	0x513e	; 0x513e <STEPPER_set_decel_step_values>
    4ec6:	04 c0       	rjmp	.+8      	; 0x4ed0 <STEPPER_setup_decels+0x50>
    4ec8:	10 92 97 07 	sts	0x0797, r1
    4ecc:	10 92 96 07 	sts	0x0796, r1
    4ed0:	80 91 8c 07 	lds	r24, 0x078C
    4ed4:	90 91 8d 07 	lds	r25, 0x078D
    4ed8:	89 2b       	or	r24, r25
    4eda:	31 f0       	breq	.+12     	; 0x4ee8 <STEPPER_setup_decels+0x68>
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	be 01       	movw	r22, r28
    4ee0:	a8 01       	movw	r20, r16
    4ee2:	0e 94 9f 28 	call	0x513e	; 0x513e <STEPPER_set_decel_step_values>
    4ee6:	04 c0       	rjmp	.+8      	; 0x4ef0 <STEPPER_setup_decels+0x70>
    4ee8:	10 92 99 07 	sts	0x0799, r1
    4eec:	10 92 98 07 	sts	0x0798, r1
    4ef0:	df 91       	pop	r29
    4ef2:	cf 91       	pop	r28
    4ef4:	1f 91       	pop	r17
    4ef6:	0f 91       	pop	r16
    4ef8:	08 95       	ret

00004efa <SYS_init>:
    4efa:	10 92 b9 07 	sts	0x07B9, r1
    4efe:	10 92 ba 07 	sts	0x07BA, r1
    4f02:	10 92 be 07 	sts	0x07BE, r1
    4f06:	10 92 bb 07 	sts	0x07BB, r1
    4f0a:	10 92 bd 07 	sts	0x07BD, r1
    4f0e:	10 92 bf 07 	sts	0x07BF, r1
    4f12:	10 92 c0 07 	sts	0x07C0, r1
    4f16:	10 92 c1 07 	sts	0x07C1, r1
    4f1a:	10 92 c2 07 	sts	0x07C2, r1
    4f1e:	10 92 c3 07 	sts	0x07C3, r1
    4f22:	10 92 c4 07 	sts	0x07C4, r1
    4f26:	10 92 c5 07 	sts	0x07C5, r1
    4f2a:	10 92 c6 07 	sts	0x07C6, r1
    4f2e:	10 92 c7 07 	sts	0x07C7, r1
    4f32:	10 92 c8 07 	sts	0x07C8, r1
    4f36:	10 92 c9 07 	sts	0x07C9, r1
    4f3a:	10 92 ca 07 	sts	0x07CA, r1
    4f3e:	08 95       	ret

00004f40 <TMRSRVC_insert>:
    4f40:	cf 92       	push	r12
    4f42:	df 92       	push	r13
    4f44:	ef 92       	push	r14
    4f46:	ff 92       	push	r15
    4f48:	0f 93       	push	r16
    4f4a:	1f 93       	push	r17
    4f4c:	cf 93       	push	r28
    4f4e:	df 93       	push	r29
    4f50:	ec 01       	movw	r28, r24
    4f52:	80 91 f0 07 	lds	r24, 0x07F0
    4f56:	88 23       	and	r24, r24
    4f58:	39 f4       	brne	.+14     	; 0x4f68 <TMRSRVC_insert+0x28>
    4f5a:	d0 93 f2 07 	sts	0x07F2, r29
    4f5e:	c0 93 f1 07 	sts	0x07F1, r28
    4f62:	0e 94 2e 28 	call	0x505c	; 0x505c <TMRSRVC_start>
    4f66:	47 c0       	rjmp	.+142    	; 0x4ff6 <TMRSRVC_insert+0xb6>
    4f68:	c0 90 f1 07 	lds	r12, 0x07F1
    4f6c:	d0 90 f2 07 	lds	r13, 0x07F2
    4f70:	00 e0       	ldi	r16, 0x00	; 0
    4f72:	10 e0       	ldi	r17, 0x00	; 0
    4f74:	ee 24       	eor	r14, r14
    4f76:	ff 24       	eor	r15, r15
    4f78:	37 c0       	rjmp	.+110    	; 0x4fe8 <TMRSRVC_insert+0xa8>
    4f7a:	a8 81       	ld	r26, Y
    4f7c:	b9 81       	ldd	r27, Y+1	; 0x01
    4f7e:	fd 01       	movw	r30, r26
    4f80:	64 81       	ldd	r22, Z+4	; 0x04
    4f82:	75 81       	ldd	r23, Z+5	; 0x05
    4f84:	f6 01       	movw	r30, r12
    4f86:	40 81       	ld	r20, Z
    4f88:	51 81       	ldd	r21, Z+1	; 0x01
    4f8a:	fa 01       	movw	r30, r20
    4f8c:	84 81       	ldd	r24, Z+4	; 0x04
    4f8e:	95 81       	ldd	r25, Z+5	; 0x05
    4f90:	9b 01       	movw	r18, r22
    4f92:	28 1b       	sub	r18, r24
    4f94:	39 0b       	sbc	r19, r25
    4f96:	37 ff       	sbrs	r19, 7
    4f98:	0f c0       	rjmp	.+30     	; 0x4fb8 <TMRSRVC_insert+0x78>
    4f9a:	86 1b       	sub	r24, r22
    4f9c:	97 0b       	sbc	r25, r23
    4f9e:	95 83       	std	Z+5, r25	; 0x05
    4fa0:	84 83       	std	Z+4, r24	; 0x04
    4fa2:	db 82       	std	Y+3, r13	; 0x03
    4fa4:	ca 82       	std	Y+2, r12	; 0x02
    4fa6:	01 2b       	or	r16, r17
    4fa8:	29 f4       	brne	.+10     	; 0x4fb4 <TMRSRVC_insert+0x74>
    4faa:	d0 93 f2 07 	sts	0x07F2, r29
    4fae:	c0 93 f1 07 	sts	0x07F1, r28
    4fb2:	21 c0       	rjmp	.+66     	; 0x4ff6 <TMRSRVC_insert+0xb6>
    4fb4:	f7 01       	movw	r30, r14
    4fb6:	0c c0       	rjmp	.+24     	; 0x4fd0 <TMRSRVC_insert+0x90>
    4fb8:	f6 01       	movw	r30, r12
    4fba:	82 81       	ldd	r24, Z+2	; 0x02
    4fbc:	93 81       	ldd	r25, Z+3	; 0x03
    4fbe:	21 15       	cp	r18, r1
    4fc0:	31 05       	cpc	r19, r1
    4fc2:	49 f4       	brne	.+18     	; 0x4fd6 <TMRSRVC_insert+0x96>
    4fc4:	fd 01       	movw	r30, r26
    4fc6:	15 82       	std	Z+5, r1	; 0x05
    4fc8:	14 82       	std	Z+4, r1	; 0x04
    4fca:	9b 83       	std	Y+3, r25	; 0x03
    4fcc:	8a 83       	std	Y+2, r24	; 0x02
    4fce:	f6 01       	movw	r30, r12
    4fd0:	d3 83       	std	Z+3, r29	; 0x03
    4fd2:	c2 83       	std	Z+2, r28	; 0x02
    4fd4:	10 c0       	rjmp	.+32     	; 0x4ff6 <TMRSRVC_insert+0xb6>
    4fd6:	fd 01       	movw	r30, r26
    4fd8:	35 83       	std	Z+5, r19	; 0x05
    4fda:	24 83       	std	Z+4, r18	; 0x04
    4fdc:	00 97       	sbiw	r24, 0x00	; 0
    4fde:	b9 f3       	breq	.-18     	; 0x4fce <TMRSRVC_insert+0x8e>
    4fe0:	0f 5f       	subi	r16, 0xFF	; 255
    4fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    4fe4:	76 01       	movw	r14, r12
    4fe6:	6c 01       	movw	r12, r24
    4fe8:	80 91 f0 07 	lds	r24, 0x07F0
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	08 17       	cp	r16, r24
    4ff0:	19 07       	cpc	r17, r25
    4ff2:	18 f2       	brcs	.-122    	; 0x4f7a <TMRSRVC_insert+0x3a>
    4ff4:	ec cf       	rjmp	.-40     	; 0x4fce <TMRSRVC_insert+0x8e>
    4ff6:	80 91 f0 07 	lds	r24, 0x07F0
    4ffa:	8f 5f       	subi	r24, 0xFF	; 255
    4ffc:	80 93 f0 07 	sts	0x07F0, r24
    5000:	df 91       	pop	r29
    5002:	cf 91       	pop	r28
    5004:	1f 91       	pop	r17
    5006:	0f 91       	pop	r16
    5008:	ff 90       	pop	r15
    500a:	ef 90       	pop	r14
    500c:	df 90       	pop	r13
    500e:	cf 90       	pop	r12
    5010:	08 95       	ret

00005012 <TMRSRVC_open>:
    5012:	88 e0       	ldi	r24, 0x08	; 8
    5014:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    5018:	88 23       	and	r24, r24
    501a:	b9 f4       	brne	.+46     	; 0x504a <TMRSRVC_open+0x38>
    501c:	10 92 f0 07 	sts	0x07F0, r1
    5020:	10 92 f2 07 	sts	0x07F2, r1
    5024:	10 92 f1 07 	sts	0x07F1, r1
    5028:	10 92 c0 04 	sts	0x04C0, r1
    502c:	10 92 c1 04 	sts	0x04C1, r1
    5030:	80 e1       	ldi	r24, 0x10	; 16
    5032:	6c e0       	ldi	r22, 0x0C	; 12
    5034:	79 e2       	ldi	r23, 0x29	; 41
    5036:	0e 94 3f 28 	call	0x507e	; 0x507e <__ISR_attach>
    503a:	0e 94 13 29 	call	0x5226	; 0x5226 <__TMRSRVC_init>
    503e:	0e 94 28 28 	call	0x5050	; 0x5050 <__TMRSRVC_start>
    5042:	88 e0       	ldi	r24, 0x08	; 8
    5044:	61 e0       	ldi	r22, 0x01	; 1
    5046:	0e 94 22 20 	call	0x4044	; 0x4044 <SYS_set_state>
    504a:	88 e0       	ldi	r24, 0x08	; 8
    504c:	91 e0       	ldi	r25, 0x01	; 1
    504e:	08 95       	ret

00005050 <__TMRSRVC_start>:
    5050:	ee e6       	ldi	r30, 0x6E	; 110
    5052:	f0 e0       	ldi	r31, 0x00	; 0
    5054:	80 81       	ld	r24, Z
    5056:	82 60       	ori	r24, 0x02	; 2
    5058:	80 83       	st	Z, r24
    505a:	08 95       	ret

0000505c <TMRSRVC_start>:
    505c:	81 e0       	ldi	r24, 0x01	; 1
    505e:	80 93 c1 04 	sts	0x04C1, r24
    5062:	08 95       	ret

00005064 <I2C_enable>:
    5064:	80 91 f3 07 	lds	r24, 0x07F3
    5068:	81 30       	cpi	r24, 0x01	; 1
    506a:	29 f4       	brne	.+10     	; 0x5076 <I2C_enable+0x12>
    506c:	80 91 bc 00 	lds	r24, 0x00BC
    5070:	84 60       	ori	r24, 0x04	; 4
    5072:	80 93 bc 00 	sts	0x00BC, r24
    5076:	08 95       	ret

00005078 <__I2C_init>:
    5078:	38 98       	cbi	0x07, 0	; 7
    507a:	39 98       	cbi	0x07, 1	; 7
    507c:	08 95       	ret

0000507e <__ISR_attach>:
    507e:	80 32       	cpi	r24, 0x20	; 32
    5080:	18 f0       	brcs	.+6      	; 0x5088 <__ISR_attach+0xa>
    5082:	20 e0       	ldi	r18, 0x00	; 0
    5084:	30 e0       	ldi	r19, 0x00	; 0
    5086:	0a c0       	rjmp	.+20     	; 0x509c <__ISR_attach+0x1e>
    5088:	e8 2f       	mov	r30, r24
    508a:	f0 e0       	ldi	r31, 0x00	; 0
    508c:	ee 0f       	add	r30, r30
    508e:	ff 1f       	adc	r31, r31
    5090:	e0 59       	subi	r30, 0x90	; 144
    5092:	fb 4f       	sbci	r31, 0xFB	; 251
    5094:	20 81       	ld	r18, Z
    5096:	31 81       	ldd	r19, Z+1	; 0x01
    5098:	71 83       	std	Z+1, r23	; 0x01
    509a:	60 83       	st	Z, r22
    509c:	c9 01       	movw	r24, r18
    509e:	08 95       	ret

000050a0 <__ATMEGA_init>:
    50a0:	24 9a       	sbi	0x04, 4	; 4
    50a2:	2c 9a       	sbi	0x05, 4	; 5
    50a4:	08 95       	ret

000050a6 <SPI_default_config>:
    50a6:	83 e5       	ldi	r24, 0x53	; 83
    50a8:	8c bd       	out	0x2c, r24	; 44
    50aa:	81 e0       	ldi	r24, 0x01	; 1
    50ac:	8d bd       	out	0x2d, r24	; 45
    50ae:	8d e0       	ldi	r24, 0x0D	; 13
    50b0:	8a 95       	dec	r24
    50b2:	f1 f7       	brne	.-4      	; 0x50b0 <SPI_default_config+0xa>
    50b4:	08 95       	ret

000050b6 <SPI_ATtiny0_config>:
    50b6:	83 e5       	ldi	r24, 0x53	; 83
    50b8:	8c bd       	out	0x2c, r24	; 44
    50ba:	1d bc       	out	0x2d, r1	; 45
    50bc:	84 ef       	ldi	r24, 0xF4	; 244
    50be:	91 e0       	ldi	r25, 0x01	; 1
    50c0:	01 97       	sbiw	r24, 0x01	; 1
    50c2:	f1 f7       	brne	.-4      	; 0x50c0 <SPI_ATtiny0_config+0xa>
    50c4:	08 95       	ret

000050c6 <SPI_PSXC_config>:
    50c6:	8f e7       	ldi	r24, 0x7F	; 127
    50c8:	8c bd       	out	0x2c, r24	; 44
    50ca:	1d bc       	out	0x2d, r1	; 45
    50cc:	84 ef       	ldi	r24, 0xF4	; 244
    50ce:	91 e0       	ldi	r25, 0x01	; 1
    50d0:	01 97       	sbiw	r24, 0x01	; 1
    50d2:	f1 f7       	brne	.-4      	; 0x50d0 <SPI_PSXC_config+0xa>
    50d4:	08 95       	ret

000050d6 <SPI_LCD_config>:
    50d6:	83 e5       	ldi	r24, 0x53	; 83
    50d8:	8c bd       	out	0x2c, r24	; 44
    50da:	81 e0       	ldi	r24, 0x01	; 1
    50dc:	8d bd       	out	0x2d, r24	; 45
    50de:	8d e0       	ldi	r24, 0x0D	; 13
    50e0:	8a 95       	dec	r24
    50e2:	f1 f7       	brne	.-4      	; 0x50e0 <SPI_LCD_config+0xa>
    50e4:	08 95       	ret

000050e6 <SPI_FLASH_config>:
    50e6:	83 e5       	ldi	r24, 0x53	; 83
    50e8:	8c bd       	out	0x2c, r24	; 44
    50ea:	81 e0       	ldi	r24, 0x01	; 1
    50ec:	8d bd       	out	0x2d, r24	; 45
    50ee:	84 ef       	ldi	r24, 0xF4	; 244
    50f0:	91 e0       	ldi	r25, 0x01	; 1
    50f2:	01 97       	sbiw	r24, 0x01	; 1
    50f4:	f1 f7       	brne	.-4      	; 0x50f2 <SPI_FLASH_config+0xc>
    50f6:	08 95       	ret

000050f8 <__SPI_init>:
    50f8:	25 9a       	sbi	0x04, 5	; 4
    50fa:	26 98       	cbi	0x04, 6	; 4
    50fc:	27 9a       	sbi	0x04, 7	; 4
    50fe:	20 9a       	sbi	0x04, 0	; 4
    5100:	21 9a       	sbi	0x04, 1	; 4
    5102:	22 9a       	sbi	0x04, 2	; 4
    5104:	08 95       	ret

00005106 <__SPKR_close>:
    5106:	82 30       	cpi	r24, 0x02	; 2
    5108:	29 f4       	brne	.+10     	; 0x5114 <__SPKR_close+0xe>
    510a:	80 91 81 00 	lds	r24, 0x0081
    510e:	8e 7f       	andi	r24, 0xFE	; 254
    5110:	80 93 81 00 	sts	0x0081, r24
    5114:	80 91 50 04 	lds	r24, 0x0450
    5118:	81 30       	cpi	r24, 0x01	; 1
    511a:	31 f4       	brne	.+12     	; 0x5128 <__SPKR_close+0x22>
    511c:	80 91 51 04 	lds	r24, 0x0451
    5120:	81 30       	cpi	r24, 0x01	; 1
    5122:	11 f4       	brne	.+4      	; 0x5128 <__SPKR_close+0x22>
    5124:	00 00       	nop
    5126:	08 95       	ret
    5128:	80 91 50 04 	lds	r24, 0x0450
    512c:	81 30       	cpi	r24, 0x01	; 1
    512e:	21 f0       	breq	.+8      	; 0x5138 <__SPKR_close+0x32>
    5130:	80 91 51 04 	lds	r24, 0x0451
    5134:	81 30       	cpi	r24, 0x01	; 1
    5136:	11 f4       	brne	.+4      	; 0x513c <__SPKR_close+0x36>
    5138:	5f 98       	cbi	0x0b, 7	; 11
    513a:	57 98       	cbi	0x0a, 7	; 10
    513c:	08 95       	ret

0000513e <STEPPER_set_decel_step_values>:
    513e:	ef 92       	push	r14
    5140:	ff 92       	push	r15
    5142:	0f 93       	push	r16
    5144:	1f 93       	push	r17
    5146:	cf 93       	push	r28
    5148:	df 93       	push	r29
    514a:	eb 01       	movw	r28, r22
    514c:	88 23       	and	r24, r24
    514e:	21 f0       	breq	.+8      	; 0x5158 <STEPPER_set_decel_step_values+0x1a>
    5150:	81 30       	cpi	r24, 0x01	; 1
    5152:	09 f0       	breq	.+2      	; 0x5156 <STEPPER_set_decel_step_values+0x18>
    5154:	5a c0       	rjmp	.+180    	; 0x520a <STEPPER_set_decel_step_values+0xcc>
    5156:	2d c0       	rjmp	.+90     	; 0x51b2 <STEPPER_set_decel_step_values+0x74>
    5158:	9a 01       	movw	r18, r20
    515a:	40 e0       	ldi	r20, 0x00	; 0
    515c:	50 e0       	ldi	r21, 0x00	; 0
    515e:	ca 01       	movw	r24, r20
    5160:	b9 01       	movw	r22, r18
    5162:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__mulsi3>
    5166:	20 91 8a 07 	lds	r18, 0x078A
    516a:	30 91 8b 07 	lds	r19, 0x078B
    516e:	22 0f       	add	r18, r18
    5170:	33 1f       	adc	r19, r19
    5172:	40 e0       	ldi	r20, 0x00	; 0
    5174:	50 e0       	ldi	r21, 0x00	; 0
    5176:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__udivmodsi4>
    517a:	79 01       	movw	r14, r18
    517c:	8a 01       	movw	r16, r20
    517e:	a8 01       	movw	r20, r16
    5180:	97 01       	movw	r18, r14
    5182:	22 0f       	add	r18, r18
    5184:	33 1f       	adc	r19, r19
    5186:	44 1f       	adc	r20, r20
    5188:	55 1f       	adc	r21, r21
    518a:	ce 01       	movw	r24, r28
    518c:	a0 e0       	ldi	r26, 0x00	; 0
    518e:	b0 e0       	ldi	r27, 0x00	; 0
    5190:	82 17       	cp	r24, r18
    5192:	93 07       	cpc	r25, r19
    5194:	a4 07       	cpc	r26, r20
    5196:	b5 07       	cpc	r27, r21
    5198:	28 f0       	brcs	.+10     	; 0x51a4 <STEPPER_set_decel_step_values+0x66>
    519a:	f0 92 97 07 	sts	0x0797, r15
    519e:	e0 92 96 07 	sts	0x0796, r14
    51a2:	33 c0       	rjmp	.+102    	; 0x520a <STEPPER_set_decel_step_values+0xcc>
    51a4:	d6 95       	lsr	r29
    51a6:	c7 95       	ror	r28
    51a8:	d0 93 97 07 	sts	0x0797, r29
    51ac:	c0 93 96 07 	sts	0x0796, r28
    51b0:	2c c0       	rjmp	.+88     	; 0x520a <STEPPER_set_decel_step_values+0xcc>
    51b2:	9a 01       	movw	r18, r20
    51b4:	40 e0       	ldi	r20, 0x00	; 0
    51b6:	50 e0       	ldi	r21, 0x00	; 0
    51b8:	ca 01       	movw	r24, r20
    51ba:	b9 01       	movw	r22, r18
    51bc:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__mulsi3>
    51c0:	20 91 8c 07 	lds	r18, 0x078C
    51c4:	30 91 8d 07 	lds	r19, 0x078D
    51c8:	22 0f       	add	r18, r18
    51ca:	33 1f       	adc	r19, r19
    51cc:	40 e0       	ldi	r20, 0x00	; 0
    51ce:	50 e0       	ldi	r21, 0x00	; 0
    51d0:	0e 94 f0 33 	call	0x67e0	; 0x67e0 <__udivmodsi4>
    51d4:	79 01       	movw	r14, r18
    51d6:	8a 01       	movw	r16, r20
    51d8:	a8 01       	movw	r20, r16
    51da:	97 01       	movw	r18, r14
    51dc:	22 0f       	add	r18, r18
    51de:	33 1f       	adc	r19, r19
    51e0:	44 1f       	adc	r20, r20
    51e2:	55 1f       	adc	r21, r21
    51e4:	ce 01       	movw	r24, r28
    51e6:	a0 e0       	ldi	r26, 0x00	; 0
    51e8:	b0 e0       	ldi	r27, 0x00	; 0
    51ea:	82 17       	cp	r24, r18
    51ec:	93 07       	cpc	r25, r19
    51ee:	a4 07       	cpc	r26, r20
    51f0:	b5 07       	cpc	r27, r21
    51f2:	28 f0       	brcs	.+10     	; 0x51fe <STEPPER_set_decel_step_values+0xc0>
    51f4:	f0 92 99 07 	sts	0x0799, r15
    51f8:	e0 92 98 07 	sts	0x0798, r14
    51fc:	06 c0       	rjmp	.+12     	; 0x520a <STEPPER_set_decel_step_values+0xcc>
    51fe:	d6 95       	lsr	r29
    5200:	c7 95       	ror	r28
    5202:	d0 93 99 07 	sts	0x0799, r29
    5206:	c0 93 98 07 	sts	0x0798, r28
    520a:	df 91       	pop	r29
    520c:	cf 91       	pop	r28
    520e:	1f 91       	pop	r17
    5210:	0f 91       	pop	r16
    5212:	ff 90       	pop	r15
    5214:	ef 90       	pop	r14
    5216:	08 95       	ret

00005218 <__TIMER0_COMPA_vect>:
    5218:	0e 94 1c 29 	call	0x5238	; 0x5238 <TMRSRVC_tick>
    521c:	0e 94 5c 29 	call	0x52b8	; 0x52b8 <STEPPER_clk>
    5220:	0e 94 35 29 	call	0x526a	; 0x526a <SPKR_beep_clk>
    5224:	08 95       	ret

00005226 <__TMRSRVC_init>:
    5226:	84 b5       	in	r24, 0x24	; 36
    5228:	82 60       	ori	r24, 0x02	; 2
    522a:	84 bd       	out	0x24, r24	; 36
    522c:	85 b5       	in	r24, 0x25	; 37
    522e:	84 60       	ori	r24, 0x04	; 4
    5230:	85 bd       	out	0x25, r24	; 37
    5232:	8e e4       	ldi	r24, 0x4E	; 78
    5234:	87 bd       	out	0x27, r24	; 39
    5236:	08 95       	ret

00005238 <TMRSRVC_tick>:
    5238:	88 e0       	ldi	r24, 0x08	; 8
    523a:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    523e:	88 23       	and	r24, r24
    5240:	11 f4       	brne	.+4      	; 0x5246 <TMRSRVC_tick+0xe>
    5242:	84 e0       	ldi	r24, 0x04	; 4
    5244:	08 95       	ret
    5246:	80 91 c1 04 	lds	r24, 0x04C1
    524a:	88 23       	and	r24, r24
    524c:	11 f4       	brne	.+4      	; 0x5252 <TMRSRVC_tick+0x1a>
    524e:	83 e0       	ldi	r24, 0x03	; 3
    5250:	08 95       	ret
    5252:	80 91 c0 04 	lds	r24, 0x04C0
    5256:	88 23       	and	r24, r24
    5258:	11 f0       	breq	.+4      	; 0x525e <TMRSRVC_tick+0x26>
    525a:	82 e0       	ldi	r24, 0x02	; 2
    525c:	08 95       	ret
    525e:	0e 94 a9 2b 	call	0x5752	; 0x5752 <TMRSRVC_process>
    5262:	81 30       	cpi	r24, 0x01	; 1
    5264:	e1 f3       	breq	.-8      	; 0x525e <TMRSRVC_tick+0x26>
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	08 95       	ret

0000526a <SPKR_beep_clk>:
    526a:	80 91 51 04 	lds	r24, 0x0451
    526e:	81 30       	cpi	r24, 0x01	; 1
    5270:	11 f5       	brne	.+68     	; 0x52b6 <SPKR_beep_clk+0x4c>
    5272:	80 91 5a 04 	lds	r24, 0x045A
    5276:	90 91 5b 04 	lds	r25, 0x045B
    527a:	20 91 5c 04 	lds	r18, 0x045C
    527e:	30 91 5d 04 	lds	r19, 0x045D
    5282:	28 0f       	add	r18, r24
    5284:	39 1f       	adc	r19, r25
    5286:	30 93 5b 04 	sts	0x045B, r19
    528a:	20 93 5a 04 	sts	0x045A, r18
    528e:	80 91 5a 04 	lds	r24, 0x045A
    5292:	90 91 5b 04 	lds	r25, 0x045B
    5296:	88 5e       	subi	r24, 0xE8	; 232
    5298:	93 40       	sbci	r25, 0x03	; 3
    529a:	6c f0       	brlt	.+26     	; 0x52b6 <SPKR_beep_clk+0x4c>
    529c:	8b b1       	in	r24, 0x0b	; 11
    529e:	80 58       	subi	r24, 0x80	; 128
    52a0:	8b b9       	out	0x0b, r24	; 11
    52a2:	80 91 5a 04 	lds	r24, 0x045A
    52a6:	90 91 5b 04 	lds	r25, 0x045B
    52aa:	88 5e       	subi	r24, 0xE8	; 232
    52ac:	93 40       	sbci	r25, 0x03	; 3
    52ae:	90 93 5b 04 	sts	0x045B, r25
    52b2:	80 93 5a 04 	sts	0x045A, r24
    52b6:	08 95       	ret

000052b8 <STEPPER_clk>:
    52b8:	87 e0       	ldi	r24, 0x07	; 7
    52ba:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <SYS_get_state>
    52be:	81 30       	cpi	r24, 0x01	; 1
    52c0:	09 f0       	breq	.+2      	; 0x52c4 <STEPPER_clk+0xc>
    52c2:	aa c0       	rjmp	.+340    	; 0x5418 <STEPPER_clk+0x160>
    52c4:	80 91 8a 07 	lds	r24, 0x078A
    52c8:	90 91 8b 07 	lds	r25, 0x078B
    52cc:	89 2b       	or	r24, r25
    52ce:	09 f1       	breq	.+66     	; 0x5312 <STEPPER_clk+0x5a>
    52d0:	80 91 ae 07 	lds	r24, 0x07AE
    52d4:	90 91 af 07 	lds	r25, 0x07AF
    52d8:	20 91 8a 07 	lds	r18, 0x078A
    52dc:	30 91 8b 07 	lds	r19, 0x078B
    52e0:	82 0f       	add	r24, r18
    52e2:	93 1f       	adc	r25, r19
    52e4:	90 93 af 07 	sts	0x07AF, r25
    52e8:	80 93 ae 07 	sts	0x07AE, r24
    52ec:	80 91 ae 07 	lds	r24, 0x07AE
    52f0:	90 91 af 07 	lds	r25, 0x07AF
    52f4:	88 5e       	subi	r24, 0xE8	; 232
    52f6:	93 40       	sbci	r25, 0x03	; 3
    52f8:	a4 f0       	brlt	.+40     	; 0x5322 <STEPPER_clk+0x6a>
    52fa:	80 91 ae 07 	lds	r24, 0x07AE
    52fe:	90 91 af 07 	lds	r25, 0x07AF
    5302:	88 5e       	subi	r24, 0xE8	; 232
    5304:	93 40       	sbci	r25, 0x03	; 3
    5306:	90 93 af 07 	sts	0x07AF, r25
    530a:	80 93 ae 07 	sts	0x07AE, r24
    530e:	41 e0       	ldi	r20, 0x01	; 1
    5310:	09 c0       	rjmp	.+18     	; 0x5324 <STEPPER_clk+0x6c>
    5312:	80 91 82 07 	lds	r24, 0x0782
    5316:	90 91 83 07 	lds	r25, 0x0783
    531a:	90 93 87 07 	sts	0x0787, r25
    531e:	80 93 86 07 	sts	0x0786, r24
    5322:	40 e0       	ldi	r20, 0x00	; 0
    5324:	80 91 8c 07 	lds	r24, 0x078C
    5328:	90 91 8d 07 	lds	r25, 0x078D
    532c:	89 2b       	or	r24, r25
    532e:	09 f1       	breq	.+66     	; 0x5372 <STEPPER_clk+0xba>
    5330:	80 91 b0 07 	lds	r24, 0x07B0
    5334:	90 91 b1 07 	lds	r25, 0x07B1
    5338:	20 91 8c 07 	lds	r18, 0x078C
    533c:	30 91 8d 07 	lds	r19, 0x078D
    5340:	82 0f       	add	r24, r18
    5342:	93 1f       	adc	r25, r19
    5344:	90 93 b1 07 	sts	0x07B1, r25
    5348:	80 93 b0 07 	sts	0x07B0, r24
    534c:	80 91 b0 07 	lds	r24, 0x07B0
    5350:	90 91 b1 07 	lds	r25, 0x07B1
    5354:	88 5e       	subi	r24, 0xE8	; 232
    5356:	93 40       	sbci	r25, 0x03	; 3
    5358:	a4 f0       	brlt	.+40     	; 0x5382 <STEPPER_clk+0xca>
    535a:	80 91 b0 07 	lds	r24, 0x07B0
    535e:	90 91 b1 07 	lds	r25, 0x07B1
    5362:	88 5e       	subi	r24, 0xE8	; 232
    5364:	93 40       	sbci	r25, 0x03	; 3
    5366:	90 93 b1 07 	sts	0x07B1, r25
    536a:	80 93 b0 07 	sts	0x07B0, r24
    536e:	61 e0       	ldi	r22, 0x01	; 1
    5370:	09 c0       	rjmp	.+18     	; 0x5384 <STEPPER_clk+0xcc>
    5372:	80 91 84 07 	lds	r24, 0x0784
    5376:	90 91 85 07 	lds	r25, 0x0785
    537a:	90 93 89 07 	sts	0x0789, r25
    537e:	80 93 88 07 	sts	0x0788, r24
    5382:	60 e0       	ldi	r22, 0x00	; 0
    5384:	84 2f       	mov	r24, r20
    5386:	0e 94 0d 2a 	call	0x541a	; 0x541a <STEPPER_process_accel>
    538a:	80 91 aa 07 	lds	r24, 0x07AA
    538e:	90 91 ab 07 	lds	r25, 0x07AB
    5392:	20 91 86 07 	lds	r18, 0x0786
    5396:	30 91 87 07 	lds	r19, 0x0787
    539a:	28 0f       	add	r18, r24
    539c:	39 1f       	adc	r19, r25
    539e:	30 93 ab 07 	sts	0x07AB, r19
    53a2:	20 93 aa 07 	sts	0x07AA, r18
    53a6:	80 91 aa 07 	lds	r24, 0x07AA
    53aa:	90 91 ab 07 	lds	r25, 0x07AB
    53ae:	88 5e       	subi	r24, 0xE8	; 232
    53b0:	93 40       	sbci	r25, 0x03	; 3
    53b2:	14 f4       	brge	.+4      	; 0x53b8 <STEPPER_clk+0x100>
    53b4:	40 e0       	ldi	r20, 0x00	; 0
    53b6:	0b c0       	rjmp	.+22     	; 0x53ce <STEPPER_clk+0x116>
    53b8:	80 91 aa 07 	lds	r24, 0x07AA
    53bc:	90 91 ab 07 	lds	r25, 0x07AB
    53c0:	88 5e       	subi	r24, 0xE8	; 232
    53c2:	93 40       	sbci	r25, 0x03	; 3
    53c4:	90 93 ab 07 	sts	0x07AB, r25
    53c8:	80 93 aa 07 	sts	0x07AA, r24
    53cc:	41 e0       	ldi	r20, 0x01	; 1
    53ce:	80 91 ac 07 	lds	r24, 0x07AC
    53d2:	90 91 ad 07 	lds	r25, 0x07AD
    53d6:	20 91 88 07 	lds	r18, 0x0788
    53da:	30 91 89 07 	lds	r19, 0x0789
    53de:	28 0f       	add	r18, r24
    53e0:	39 1f       	adc	r19, r25
    53e2:	30 93 ad 07 	sts	0x07AD, r19
    53e6:	20 93 ac 07 	sts	0x07AC, r18
    53ea:	80 91 ac 07 	lds	r24, 0x07AC
    53ee:	90 91 ad 07 	lds	r25, 0x07AD
    53f2:	88 5e       	subi	r24, 0xE8	; 232
    53f4:	93 40       	sbci	r25, 0x03	; 3
    53f6:	14 f4       	brge	.+4      	; 0x53fc <STEPPER_clk+0x144>
    53f8:	60 e0       	ldi	r22, 0x00	; 0
    53fa:	0b c0       	rjmp	.+22     	; 0x5412 <STEPPER_clk+0x15a>
    53fc:	80 91 ac 07 	lds	r24, 0x07AC
    5400:	90 91 ad 07 	lds	r25, 0x07AD
    5404:	88 5e       	subi	r24, 0xE8	; 232
    5406:	93 40       	sbci	r25, 0x03	; 3
    5408:	90 93 ad 07 	sts	0x07AD, r25
    540c:	80 93 ac 07 	sts	0x07AC, r24
    5410:	61 e0       	ldi	r22, 0x01	; 1
    5412:	84 2f       	mov	r24, r20
    5414:	0e 94 52 2a 	call	0x54a4	; 0x54a4 <STEPPER_process_run_mode>
    5418:	08 95       	ret

0000541a <STEPPER_process_accel>:
    541a:	88 23       	and	r24, r24
    541c:	f1 f0       	breq	.+60     	; 0x545a <STEPPER_process_accel+0x40>
    541e:	20 91 82 07 	lds	r18, 0x0782
    5422:	30 91 83 07 	lds	r19, 0x0783
    5426:	80 91 86 07 	lds	r24, 0x0786
    542a:	90 91 87 07 	lds	r25, 0x0787
    542e:	28 1b       	sub	r18, r24
    5430:	39 0b       	sbc	r19, r25
    5432:	12 16       	cp	r1, r18
    5434:	13 06       	cpc	r1, r19
    5436:	34 f4       	brge	.+12     	; 0x5444 <STEPPER_process_accel+0x2a>
    5438:	80 91 86 07 	lds	r24, 0x0786
    543c:	90 91 87 07 	lds	r25, 0x0787
    5440:	01 96       	adiw	r24, 0x01	; 1
    5442:	07 c0       	rjmp	.+14     	; 0x5452 <STEPPER_process_accel+0x38>
    5444:	23 2b       	or	r18, r19
    5446:	49 f0       	breq	.+18     	; 0x545a <STEPPER_process_accel+0x40>
    5448:	80 91 86 07 	lds	r24, 0x0786
    544c:	90 91 87 07 	lds	r25, 0x0787
    5450:	01 97       	sbiw	r24, 0x01	; 1
    5452:	90 93 87 07 	sts	0x0787, r25
    5456:	80 93 86 07 	sts	0x0786, r24
    545a:	66 23       	and	r22, r22
    545c:	11 f1       	breq	.+68     	; 0x54a2 <STEPPER_process_accel+0x88>
    545e:	20 91 84 07 	lds	r18, 0x0784
    5462:	30 91 85 07 	lds	r19, 0x0785
    5466:	80 91 88 07 	lds	r24, 0x0788
    546a:	90 91 89 07 	lds	r25, 0x0789
    546e:	28 1b       	sub	r18, r24
    5470:	39 0b       	sbc	r19, r25
    5472:	12 16       	cp	r1, r18
    5474:	13 06       	cpc	r1, r19
    5476:	54 f4       	brge	.+20     	; 0x548c <STEPPER_process_accel+0x72>
    5478:	80 91 88 07 	lds	r24, 0x0788
    547c:	90 91 89 07 	lds	r25, 0x0789
    5480:	01 96       	adiw	r24, 0x01	; 1
    5482:	90 93 89 07 	sts	0x0789, r25
    5486:	80 93 88 07 	sts	0x0788, r24
    548a:	08 95       	ret
    548c:	23 2b       	or	r18, r19
    548e:	49 f0       	breq	.+18     	; 0x54a2 <STEPPER_process_accel+0x88>
    5490:	80 91 88 07 	lds	r24, 0x0788
    5494:	90 91 89 07 	lds	r25, 0x0789
    5498:	01 97       	sbiw	r24, 0x01	; 1
    549a:	90 93 89 07 	sts	0x0789, r25
    549e:	80 93 88 07 	sts	0x0788, r24
    54a2:	08 95       	ret

000054a4 <STEPPER_process_run_mode>:
    54a4:	0f 93       	push	r16
    54a6:	1f 93       	push	r17
    54a8:	18 2f       	mov	r17, r24
    54aa:	06 2f       	mov	r16, r22
    54ac:	80 91 b6 07 	lds	r24, 0x07B6
    54b0:	88 23       	and	r24, r24
    54b2:	09 f0       	breq	.+2      	; 0x54b6 <STEPPER_process_run_mode+0x12>
    54b4:	e7 c0       	rjmp	.+462    	; 0x5684 <STEPPER_process_run_mode+0x1e0>
    54b6:	80 91 9e 07 	lds	r24, 0x079E
    54ba:	88 23       	and	r24, r24
    54bc:	09 f0       	breq	.+2      	; 0x54c0 <STEPPER_process_run_mode+0x1c>
    54be:	5a c0       	rjmp	.+180    	; 0x5574 <STEPPER_process_run_mode+0xd0>
    54c0:	80 91 86 07 	lds	r24, 0x0786
    54c4:	90 91 87 07 	lds	r25, 0x0787
    54c8:	89 2b       	or	r24, r25
    54ca:	e9 f4       	brne	.+58     	; 0x5506 <STEPPER_process_run_mode+0x62>
    54cc:	80 91 c2 04 	lds	r24, 0x04C2
    54d0:	83 7e       	andi	r24, 0xE3	; 227
    54d2:	80 93 c2 04 	sts	0x04C2, r24
    54d6:	10 92 a7 07 	sts	0x07A7, r1
    54da:	80 91 b2 07 	lds	r24, 0x07B2
    54de:	88 23       	and	r24, r24
    54e0:	09 f4       	brne	.+2      	; 0x54e4 <STEPPER_process_run_mode+0x40>
    54e2:	5d c0       	rjmp	.+186    	; 0x559e <STEPPER_process_run_mode+0xfa>
    54e4:	60 91 a0 07 	lds	r22, 0x07A0
    54e8:	80 e0       	ldi	r24, 0x00	; 0
    54ea:	0e 94 67 1f 	call	0x3ece	; 0x3ece <STEPPER_stop>
    54ee:	e0 91 b4 07 	lds	r30, 0x07B4
    54f2:	f0 91 b5 07 	lds	r31, 0x07B5
    54f6:	30 97       	sbiw	r30, 0x00	; 0
    54f8:	09 f4       	brne	.+2      	; 0x54fc <STEPPER_process_run_mode+0x58>
    54fa:	51 c0       	rjmp	.+162    	; 0x559e <STEPPER_process_run_mode+0xfa>
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	80 83       	st	Z, r24
    5500:	10 92 b2 07 	sts	0x07B2, r1
    5504:	4c c0       	rjmp	.+152    	; 0x559e <STEPPER_process_run_mode+0xfa>
    5506:	80 91 80 07 	lds	r24, 0x0780
    550a:	81 30       	cpi	r24, 0x01	; 1
    550c:	41 f4       	brne	.+16     	; 0x551e <STEPPER_process_run_mode+0x7a>
    550e:	80 91 92 07 	lds	r24, 0x0792
    5512:	90 91 93 07 	lds	r25, 0x0793
    5516:	01 97       	sbiw	r24, 0x01	; 1
    5518:	11 f4       	brne	.+4      	; 0x551e <STEPPER_process_run_mode+0x7a>
    551a:	11 e0       	ldi	r17, 0x01	; 1
    551c:	02 c0       	rjmp	.+4      	; 0x5522 <STEPPER_process_run_mode+0x7e>
    551e:	11 23       	and	r17, r17
    5520:	f1 f1       	breq	.+124    	; 0x559e <STEPPER_process_run_mode+0xfa>
    5522:	e0 91 a5 07 	lds	r30, 0x07A5
    5526:	f0 e0       	ldi	r31, 0x00	; 0
    5528:	e3 5f       	subi	r30, 0xF3	; 243
    552a:	fb 4f       	sbci	r31, 0xFB	; 251
    552c:	90 91 c2 04 	lds	r25, 0x04C2
    5530:	93 7e       	andi	r25, 0xE3	; 227
    5532:	80 81       	ld	r24, Z
    5534:	89 2b       	or	r24, r25
    5536:	80 93 c2 04 	sts	0x04C2, r24
    553a:	80 91 a3 07 	lds	r24, 0x07A3
    553e:	88 23       	and	r24, r24
    5540:	21 f4       	brne	.+8      	; 0x554a <STEPPER_process_run_mode+0xa6>
    5542:	80 91 a5 07 	lds	r24, 0x07A5
    5546:	8f 5f       	subi	r24, 0xFF	; 255
    5548:	03 c0       	rjmp	.+6      	; 0x5550 <STEPPER_process_run_mode+0xac>
    554a:	80 91 a5 07 	lds	r24, 0x07A5
    554e:	81 50       	subi	r24, 0x01	; 1
    5550:	80 93 a5 07 	sts	0x07A5, r24
    5554:	80 91 a5 07 	lds	r24, 0x07A5
    5558:	83 70       	andi	r24, 0x03	; 3
    555a:	80 93 a5 07 	sts	0x07A5, r24
    555e:	81 e0       	ldi	r24, 0x01	; 1
    5560:	80 93 a7 07 	sts	0x07A7, r24
    5564:	80 91 80 07 	lds	r24, 0x0780
    5568:	81 30       	cpi	r24, 0x01	; 1
    556a:	c9 f4       	brne	.+50     	; 0x559e <STEPPER_process_run_mode+0xfa>
    556c:	80 e0       	ldi	r24, 0x00	; 0
    556e:	0e 94 55 2b 	call	0x56aa	; 0x56aa <STEPPER_process_step_mode>
    5572:	15 c0       	rjmp	.+42     	; 0x559e <STEPPER_process_run_mode+0xfa>
    5574:	90 91 c2 04 	lds	r25, 0x04C2
    5578:	93 7e       	andi	r25, 0xE3	; 227
    557a:	90 93 c2 04 	sts	0x04C2, r25
    557e:	e0 91 a5 07 	lds	r30, 0x07A5
    5582:	f0 e0       	ldi	r31, 0x00	; 0
    5584:	e3 5f       	subi	r30, 0xF3	; 243
    5586:	fb 4f       	sbci	r31, 0xFB	; 251
    5588:	80 81       	ld	r24, Z
    558a:	89 2b       	or	r24, r25
    558c:	80 93 c2 04 	sts	0x04C2, r24
    5590:	82 e0       	ldi	r24, 0x02	; 2
    5592:	80 93 a7 07 	sts	0x07A7, r24
    5596:	10 92 87 07 	sts	0x0787, r1
    559a:	10 92 86 07 	sts	0x0786, r1
    559e:	80 91 9f 07 	lds	r24, 0x079F
    55a2:	88 23       	and	r24, r24
    55a4:	09 f0       	breq	.+2      	; 0x55a8 <STEPPER_process_run_mode+0x104>
    55a6:	59 c0       	rjmp	.+178    	; 0x565a <STEPPER_process_run_mode+0x1b6>
    55a8:	80 91 88 07 	lds	r24, 0x0788
    55ac:	90 91 89 07 	lds	r25, 0x0789
    55b0:	89 2b       	or	r24, r25
    55b2:	e9 f4       	brne	.+58     	; 0x55ee <STEPPER_process_run_mode+0x14a>
    55b4:	80 91 c2 04 	lds	r24, 0x04C2
    55b8:	8f 71       	andi	r24, 0x1F	; 31
    55ba:	80 93 c2 04 	sts	0x04C2, r24
    55be:	10 92 a8 07 	sts	0x07A8, r1
    55c2:	80 91 b3 07 	lds	r24, 0x07B3
    55c6:	88 23       	and	r24, r24
    55c8:	09 f4       	brne	.+2      	; 0x55cc <STEPPER_process_run_mode+0x128>
    55ca:	5c c0       	rjmp	.+184    	; 0x5684 <STEPPER_process_run_mode+0x1e0>
    55cc:	60 91 a1 07 	lds	r22, 0x07A1
    55d0:	81 e0       	ldi	r24, 0x01	; 1
    55d2:	0e 94 67 1f 	call	0x3ece	; 0x3ece <STEPPER_stop>
    55d6:	e0 91 b4 07 	lds	r30, 0x07B4
    55da:	f0 91 b5 07 	lds	r31, 0x07B5
    55de:	30 97       	sbiw	r30, 0x00	; 0
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <STEPPER_process_run_mode+0x140>
    55e2:	50 c0       	rjmp	.+160    	; 0x5684 <STEPPER_process_run_mode+0x1e0>
    55e4:	81 e0       	ldi	r24, 0x01	; 1
    55e6:	81 83       	std	Z+1, r24	; 0x01
    55e8:	10 92 b3 07 	sts	0x07B3, r1
    55ec:	4b c0       	rjmp	.+150    	; 0x5684 <STEPPER_process_run_mode+0x1e0>
    55ee:	80 91 81 07 	lds	r24, 0x0781
    55f2:	81 30       	cpi	r24, 0x01	; 1
    55f4:	41 f4       	brne	.+16     	; 0x5606 <STEPPER_process_run_mode+0x162>
    55f6:	80 91 94 07 	lds	r24, 0x0794
    55fa:	90 91 95 07 	lds	r25, 0x0795
    55fe:	01 97       	sbiw	r24, 0x01	; 1
    5600:	11 f4       	brne	.+4      	; 0x5606 <STEPPER_process_run_mode+0x162>
    5602:	01 e0       	ldi	r16, 0x01	; 1
    5604:	02 c0       	rjmp	.+4      	; 0x560a <STEPPER_process_run_mode+0x166>
    5606:	00 23       	and	r16, r16
    5608:	e9 f1       	breq	.+122    	; 0x5684 <STEPPER_process_run_mode+0x1e0>
    560a:	e0 91 a6 07 	lds	r30, 0x07A6
    560e:	f0 e0       	ldi	r31, 0x00	; 0
    5610:	ef 5e       	subi	r30, 0xEF	; 239
    5612:	fb 4f       	sbci	r31, 0xFB	; 251
    5614:	90 91 c2 04 	lds	r25, 0x04C2
    5618:	9f 71       	andi	r25, 0x1F	; 31
    561a:	80 81       	ld	r24, Z
    561c:	89 2b       	or	r24, r25
    561e:	80 93 c2 04 	sts	0x04C2, r24
    5622:	80 91 a4 07 	lds	r24, 0x07A4
    5626:	88 23       	and	r24, r24
    5628:	21 f4       	brne	.+8      	; 0x5632 <STEPPER_process_run_mode+0x18e>
    562a:	80 91 a6 07 	lds	r24, 0x07A6
    562e:	8f 5f       	subi	r24, 0xFF	; 255
    5630:	03 c0       	rjmp	.+6      	; 0x5638 <STEPPER_process_run_mode+0x194>
    5632:	80 91 a6 07 	lds	r24, 0x07A6
    5636:	81 50       	subi	r24, 0x01	; 1
    5638:	80 93 a6 07 	sts	0x07A6, r24
    563c:	80 91 a6 07 	lds	r24, 0x07A6
    5640:	83 70       	andi	r24, 0x03	; 3
    5642:	80 93 a6 07 	sts	0x07A6, r24
    5646:	81 e0       	ldi	r24, 0x01	; 1
    5648:	80 93 a8 07 	sts	0x07A8, r24
    564c:	80 91 81 07 	lds	r24, 0x0781
    5650:	81 30       	cpi	r24, 0x01	; 1
    5652:	c1 f4       	brne	.+48     	; 0x5684 <STEPPER_process_run_mode+0x1e0>
    5654:	0e 94 55 2b 	call	0x56aa	; 0x56aa <STEPPER_process_step_mode>
    5658:	15 c0       	rjmp	.+42     	; 0x5684 <STEPPER_process_run_mode+0x1e0>
    565a:	90 91 c2 04 	lds	r25, 0x04C2
    565e:	9f 71       	andi	r25, 0x1F	; 31
    5660:	90 93 c2 04 	sts	0x04C2, r25
    5664:	e0 91 a6 07 	lds	r30, 0x07A6
    5668:	f0 e0       	ldi	r31, 0x00	; 0
    566a:	ef 5e       	subi	r30, 0xEF	; 239
    566c:	fb 4f       	sbci	r31, 0xFB	; 251
    566e:	80 81       	ld	r24, Z
    5670:	89 2b       	or	r24, r25
    5672:	80 93 c2 04 	sts	0x04C2, r24
    5676:	82 e0       	ldi	r24, 0x02	; 2
    5678:	80 93 a8 07 	sts	0x07A8, r24
    567c:	10 92 89 07 	sts	0x0789, r1
    5680:	10 92 88 07 	sts	0x0788, r1
    5684:	80 91 a9 07 	lds	r24, 0x07A9
    5688:	88 23       	and	r24, r24
    568a:	31 f4       	brne	.+12     	; 0x5698 <STEPPER_process_run_mode+0x1f4>
    568c:	82 ec       	ldi	r24, 0xC2	; 194
    568e:	94 e0       	ldi	r25, 0x04	; 4
    5690:	61 2f       	mov	r22, r17
    5692:	40 2f       	mov	r20, r16
    5694:	0e 94 17 2c 	call	0x582e	; 0x582e <STEPPER_process_pwm>
    5698:	88 b1       	in	r24, 0x08	; 8
    569a:	83 70       	andi	r24, 0x03	; 3
    569c:	90 91 c2 04 	lds	r25, 0x04C2
    56a0:	89 2b       	or	r24, r25
    56a2:	88 b9       	out	0x08, r24	; 8
    56a4:	1f 91       	pop	r17
    56a6:	0f 91       	pop	r16
    56a8:	08 95       	ret

000056aa <STEPPER_process_step_mode>:
    56aa:	88 23       	and	r24, r24
    56ac:	21 f0       	breq	.+8      	; 0x56b6 <STEPPER_process_step_mode+0xc>
    56ae:	81 30       	cpi	r24, 0x01	; 1
    56b0:	09 f0       	breq	.+2      	; 0x56b4 <STEPPER_process_step_mode+0xa>
    56b2:	4e c0       	rjmp	.+156    	; 0x5750 <STEPPER_process_step_mode+0xa6>
    56b4:	27 c0       	rjmp	.+78     	; 0x5704 <STEPPER_process_step_mode+0x5a>
    56b6:	80 91 92 07 	lds	r24, 0x0792
    56ba:	90 91 93 07 	lds	r25, 0x0793
    56be:	89 2b       	or	r24, r25
    56c0:	49 f0       	breq	.+18     	; 0x56d4 <STEPPER_process_step_mode+0x2a>
    56c2:	80 91 92 07 	lds	r24, 0x0792
    56c6:	90 91 93 07 	lds	r25, 0x0793
    56ca:	01 97       	sbiw	r24, 0x01	; 1
    56cc:	90 93 93 07 	sts	0x0793, r25
    56d0:	80 93 92 07 	sts	0x0792, r24
    56d4:	80 91 b2 07 	lds	r24, 0x07B2
    56d8:	88 23       	and	r24, r24
    56da:	d1 f5       	brne	.+116    	; 0x5750 <STEPPER_process_step_mode+0xa6>
    56dc:	20 91 92 07 	lds	r18, 0x0792
    56e0:	30 91 93 07 	lds	r19, 0x0793
    56e4:	80 91 96 07 	lds	r24, 0x0796
    56e8:	90 91 97 07 	lds	r25, 0x0797
    56ec:	28 17       	cp	r18, r24
    56ee:	39 07       	cpc	r19, r25
    56f0:	79 f5       	brne	.+94     	; 0x5750 <STEPPER_process_step_mode+0xa6>
    56f2:	80 e0       	ldi	r24, 0x00	; 0
    56f4:	60 e0       	ldi	r22, 0x00	; 0
    56f6:	70 e0       	ldi	r23, 0x00	; 0
    56f8:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <STEPPER_set_speed>
    56fc:	81 e0       	ldi	r24, 0x01	; 1
    56fe:	80 93 b2 07 	sts	0x07B2, r24
    5702:	08 95       	ret
    5704:	80 91 94 07 	lds	r24, 0x0794
    5708:	90 91 95 07 	lds	r25, 0x0795
    570c:	89 2b       	or	r24, r25
    570e:	49 f0       	breq	.+18     	; 0x5722 <STEPPER_process_step_mode+0x78>
    5710:	80 91 94 07 	lds	r24, 0x0794
    5714:	90 91 95 07 	lds	r25, 0x0795
    5718:	01 97       	sbiw	r24, 0x01	; 1
    571a:	90 93 95 07 	sts	0x0795, r25
    571e:	80 93 94 07 	sts	0x0794, r24
    5722:	80 91 b3 07 	lds	r24, 0x07B3
    5726:	88 23       	and	r24, r24
    5728:	99 f4       	brne	.+38     	; 0x5750 <STEPPER_process_step_mode+0xa6>
    572a:	20 91 94 07 	lds	r18, 0x0794
    572e:	30 91 95 07 	lds	r19, 0x0795
    5732:	80 91 98 07 	lds	r24, 0x0798
    5736:	90 91 99 07 	lds	r25, 0x0799
    573a:	28 17       	cp	r18, r24
    573c:	39 07       	cpc	r19, r25
    573e:	41 f4       	brne	.+16     	; 0x5750 <STEPPER_process_step_mode+0xa6>
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	60 e0       	ldi	r22, 0x00	; 0
    5744:	70 e0       	ldi	r23, 0x00	; 0
    5746:	0e 94 9e 1e 	call	0x3d3c	; 0x3d3c <STEPPER_set_speed>
    574a:	81 e0       	ldi	r24, 0x01	; 1
    574c:	80 93 b3 07 	sts	0x07B3, r24
    5750:	08 95       	ret

00005752 <TMRSRVC_process>:
    5752:	ff 92       	push	r15
    5754:	0f 93       	push	r16
    5756:	1f 93       	push	r17
    5758:	cf 93       	push	r28
    575a:	df 93       	push	r29
    575c:	80 91 f0 07 	lds	r24, 0x07F0
    5760:	88 23       	and	r24, r24
    5762:	09 f4       	brne	.+2      	; 0x5766 <TMRSRVC_process+0x14>
    5764:	59 c0       	rjmp	.+178    	; 0x5818 <TMRSRVC_process+0xc6>
    5766:	00 91 f1 07 	lds	r16, 0x07F1
    576a:	10 91 f2 07 	lds	r17, 0x07F2
    576e:	f8 01       	movw	r30, r16
    5770:	c0 81       	ld	r28, Z
    5772:	d1 81       	ldd	r29, Z+1	; 0x01
    5774:	8c 81       	ldd	r24, Y+4	; 0x04
    5776:	9d 81       	ldd	r25, Y+5	; 0x05
    5778:	01 97       	sbiw	r24, 0x01	; 1
    577a:	9d 83       	std	Y+5, r25	; 0x05
    577c:	8c 83       	std	Y+4, r24	; 0x04
    577e:	18 16       	cp	r1, r24
    5780:	19 06       	cpc	r1, r25
    5782:	0c f4       	brge	.+2      	; 0x5786 <TMRSRVC_process+0x34>
    5784:	49 c0       	rjmp	.+146    	; 0x5818 <TMRSRVC_process+0xc6>
    5786:	89 81       	ldd	r24, Y+1	; 0x01
    5788:	80 ff       	sbrs	r24, 0
    578a:	05 c0       	rjmp	.+10     	; 0x5796 <TMRSRVC_process+0x44>
    578c:	8e 81       	ldd	r24, Y+6	; 0x06
    578e:	88 23       	and	r24, r24
    5790:	11 f4       	brne	.+4      	; 0x5796 <TMRSRVC_process+0x44>
    5792:	81 e0       	ldi	r24, 0x01	; 1
    5794:	8e 83       	std	Y+6, r24	; 0x06
    5796:	89 81       	ldd	r24, Y+1	; 0x01
    5798:	81 ff       	sbrs	r24, 1
    579a:	03 c0       	rjmp	.+6      	; 0x57a2 <TMRSRVC_process+0x50>
    579c:	ef 81       	ldd	r30, Y+7	; 0x07
    579e:	f8 85       	ldd	r31, Y+8	; 0x08
    57a0:	09 95       	icall
    57a2:	80 91 f0 07 	lds	r24, 0x07F0
    57a6:	82 30       	cpi	r24, 0x02	; 2
    57a8:	a8 f0       	brcs	.+42     	; 0x57d4 <TMRSRVC_process+0x82>
    57aa:	f8 01       	movw	r30, r16
    57ac:	82 81       	ldd	r24, Z+2	; 0x02
    57ae:	93 81       	ldd	r25, Z+3	; 0x03
    57b0:	90 93 f2 07 	sts	0x07F2, r25
    57b4:	80 93 f1 07 	sts	0x07F1, r24
    57b8:	13 82       	std	Z+3, r1	; 0x03
    57ba:	12 82       	std	Z+2, r1	; 0x02
    57bc:	e0 91 00 00 	lds	r30, 0x0000
    57c0:	f0 91 01 00 	lds	r31, 0x0001
    57c4:	84 81       	ldd	r24, Z+4	; 0x04
    57c6:	95 81       	ldd	r25, Z+5	; 0x05
    57c8:	18 16       	cp	r1, r24
    57ca:	19 06       	cpc	r1, r25
    57cc:	3c f0       	brlt	.+14     	; 0x57dc <TMRSRVC_process+0x8a>
    57ce:	ff 24       	eor	r15, r15
    57d0:	f3 94       	inc	r15
    57d2:	05 c0       	rjmp	.+10     	; 0x57de <TMRSRVC_process+0x8c>
    57d4:	10 92 f2 07 	sts	0x07F2, r1
    57d8:	10 92 f1 07 	sts	0x07F1, r1
    57dc:	ff 24       	eor	r15, r15
    57de:	80 91 f0 07 	lds	r24, 0x07F0
    57e2:	81 50       	subi	r24, 0x01	; 1
    57e4:	80 93 f0 07 	sts	0x07F0, r24
    57e8:	80 91 f0 07 	lds	r24, 0x07F0
    57ec:	88 23       	and	r24, r24
    57ee:	11 f4       	brne	.+4      	; 0x57f4 <TMRSRVC_process+0xa2>
    57f0:	0e 94 14 2c 	call	0x5828	; 0x5828 <TMRSRVC_stop>
    57f4:	89 81       	ldd	r24, Y+1	; 0x01
    57f6:	82 ff       	sbrs	r24, 2
    57f8:	08 c0       	rjmp	.+16     	; 0x580a <TMRSRVC_process+0xb8>
    57fa:	8a 81       	ldd	r24, Y+2	; 0x02
    57fc:	9b 81       	ldd	r25, Y+3	; 0x03
    57fe:	9d 83       	std	Y+5, r25	; 0x05
    5800:	8c 83       	std	Y+4, r24	; 0x04
    5802:	c8 01       	movw	r24, r16
    5804:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <TMRSRVC_insert>
    5808:	08 c0       	rjmp	.+16     	; 0x581a <TMRSRVC_process+0xc8>
    580a:	c8 01       	movw	r24, r16
    580c:	0e 94 f6 34 	call	0x69ec	; 0x69ec <free>
    5810:	89 81       	ldd	r24, Y+1	; 0x01
    5812:	8f 7e       	andi	r24, 0xEF	; 239
    5814:	89 83       	std	Y+1, r24	; 0x01
    5816:	01 c0       	rjmp	.+2      	; 0x581a <TMRSRVC_process+0xc8>
    5818:	ff 24       	eor	r15, r15
    581a:	8f 2d       	mov	r24, r15
    581c:	df 91       	pop	r29
    581e:	cf 91       	pop	r28
    5820:	1f 91       	pop	r17
    5822:	0f 91       	pop	r16
    5824:	ff 90       	pop	r15
    5826:	08 95       	ret

00005828 <TMRSRVC_stop>:
    5828:	10 92 c1 04 	sts	0x04C1, r1
    582c:	08 95       	ret

0000582e <STEPPER_process_pwm>:
    582e:	fc 01       	movw	r30, r24
    5830:	80 91 a7 07 	lds	r24, 0x07A7
    5834:	82 30       	cpi	r24, 0x02	; 2
    5836:	69 f4       	brne	.+26     	; 0x5852 <STEPPER_process_pwm+0x24>
    5838:	80 91 c6 04 	lds	r24, 0x04C6
    583c:	91 e0       	ldi	r25, 0x01	; 1
    583e:	89 27       	eor	r24, r25
    5840:	80 93 c6 04 	sts	0x04C6, r24
    5844:	88 23       	and	r24, r24
    5846:	09 f0       	breq	.+2      	; 0x584a <STEPPER_process_pwm+0x1c>
    5848:	3e c0       	rjmp	.+124    	; 0x58c6 <STEPPER_process_pwm+0x98>
    584a:	80 81       	ld	r24, Z
    584c:	83 7e       	andi	r24, 0xE3	; 227
    584e:	80 83       	st	Z, r24
    5850:	3a c0       	rjmp	.+116    	; 0x58c6 <STEPPER_process_pwm+0x98>
    5852:	80 91 86 07 	lds	r24, 0x0786
    5856:	90 91 87 07 	lds	r25, 0x0787
    585a:	c3 97       	sbiw	r24, 0x33	; 51
    585c:	a4 f5       	brge	.+104    	; 0x58c6 <STEPPER_process_pwm+0x98>
    585e:	66 23       	and	r22, r22
    5860:	d1 f0       	breq	.+52     	; 0x5896 <STEPPER_process_pwm+0x68>
    5862:	20 91 86 07 	lds	r18, 0x0786
    5866:	30 91 87 07 	lds	r19, 0x0787
    586a:	80 e6       	ldi	r24, 0x60	; 96
    586c:	90 e0       	ldi	r25, 0x00	; 0
    586e:	bc 01       	movw	r22, r24
    5870:	26 9f       	mul	r18, r22
    5872:	c0 01       	movw	r24, r0
    5874:	27 9f       	mul	r18, r23
    5876:	90 0d       	add	r25, r0
    5878:	36 9f       	mul	r19, r22
    587a:	90 0d       	add	r25, r0
    587c:	11 24       	eor	r1, r1
    587e:	88 0f       	add	r24, r24
    5880:	89 2f       	mov	r24, r25
    5882:	88 1f       	adc	r24, r24
    5884:	99 0b       	sbc	r25, r25
    5886:	90 93 9b 07 	sts	0x079B, r25
    588a:	80 93 9a 07 	sts	0x079A, r24
    588e:	81 e0       	ldi	r24, 0x01	; 1
    5890:	80 93 c4 04 	sts	0x04C4, r24
    5894:	18 c0       	rjmp	.+48     	; 0x58c6 <STEPPER_process_pwm+0x98>
    5896:	80 91 c4 04 	lds	r24, 0x04C4
    589a:	88 23       	and	r24, r24
    589c:	a1 f0       	breq	.+40     	; 0x58c6 <STEPPER_process_pwm+0x98>
    589e:	80 91 9a 07 	lds	r24, 0x079A
    58a2:	90 91 9b 07 	lds	r25, 0x079B
    58a6:	01 97       	sbiw	r24, 0x01	; 1
    58a8:	90 93 9b 07 	sts	0x079B, r25
    58ac:	80 93 9a 07 	sts	0x079A, r24
    58b0:	80 91 9a 07 	lds	r24, 0x079A
    58b4:	90 91 9b 07 	lds	r25, 0x079B
    58b8:	89 2b       	or	r24, r25
    58ba:	29 f4       	brne	.+10     	; 0x58c6 <STEPPER_process_pwm+0x98>
    58bc:	80 81       	ld	r24, Z
    58be:	83 7e       	andi	r24, 0xE3	; 227
    58c0:	80 83       	st	Z, r24
    58c2:	10 92 c4 04 	sts	0x04C4, r1
    58c6:	80 91 a8 07 	lds	r24, 0x07A8
    58ca:	82 30       	cpi	r24, 0x02	; 2
    58cc:	69 f4       	brne	.+26     	; 0x58e8 <STEPPER_process_pwm+0xba>
    58ce:	80 91 c5 04 	lds	r24, 0x04C5
    58d2:	91 e0       	ldi	r25, 0x01	; 1
    58d4:	89 27       	eor	r24, r25
    58d6:	80 93 c5 04 	sts	0x04C5, r24
    58da:	88 23       	and	r24, r24
    58dc:	09 f0       	breq	.+2      	; 0x58e0 <STEPPER_process_pwm+0xb2>
    58de:	3e c0       	rjmp	.+124    	; 0x595c <STEPPER_process_pwm+0x12e>
    58e0:	80 81       	ld	r24, Z
    58e2:	8f 71       	andi	r24, 0x1F	; 31
    58e4:	80 83       	st	Z, r24
    58e6:	08 95       	ret
    58e8:	80 91 88 07 	lds	r24, 0x0788
    58ec:	90 91 89 07 	lds	r25, 0x0789
    58f0:	c3 97       	sbiw	r24, 0x33	; 51
    58f2:	a4 f5       	brge	.+104    	; 0x595c <STEPPER_process_pwm+0x12e>
    58f4:	44 23       	and	r20, r20
    58f6:	d1 f0       	breq	.+52     	; 0x592c <STEPPER_process_pwm+0xfe>
    58f8:	20 91 88 07 	lds	r18, 0x0788
    58fc:	30 91 89 07 	lds	r19, 0x0789
    5900:	80 e6       	ldi	r24, 0x60	; 96
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	ac 01       	movw	r20, r24
    5906:	24 9f       	mul	r18, r20
    5908:	c0 01       	movw	r24, r0
    590a:	25 9f       	mul	r18, r21
    590c:	90 0d       	add	r25, r0
    590e:	34 9f       	mul	r19, r20
    5910:	90 0d       	add	r25, r0
    5912:	11 24       	eor	r1, r1
    5914:	88 0f       	add	r24, r24
    5916:	89 2f       	mov	r24, r25
    5918:	88 1f       	adc	r24, r24
    591a:	99 0b       	sbc	r25, r25
    591c:	90 93 9d 07 	sts	0x079D, r25
    5920:	80 93 9c 07 	sts	0x079C, r24
    5924:	81 e0       	ldi	r24, 0x01	; 1
    5926:	80 93 c3 04 	sts	0x04C3, r24
    592a:	08 95       	ret
    592c:	80 91 c3 04 	lds	r24, 0x04C3
    5930:	88 23       	and	r24, r24
    5932:	a1 f0       	breq	.+40     	; 0x595c <STEPPER_process_pwm+0x12e>
    5934:	80 91 9c 07 	lds	r24, 0x079C
    5938:	90 91 9d 07 	lds	r25, 0x079D
    593c:	01 97       	sbiw	r24, 0x01	; 1
    593e:	90 93 9d 07 	sts	0x079D, r25
    5942:	80 93 9c 07 	sts	0x079C, r24
    5946:	80 91 9c 07 	lds	r24, 0x079C
    594a:	90 91 9d 07 	lds	r25, 0x079D
    594e:	89 2b       	or	r24, r25
    5950:	29 f4       	brne	.+10     	; 0x595c <STEPPER_process_pwm+0x12e>
    5952:	80 81       	ld	r24, Z
    5954:	8f 71       	andi	r24, 0x1F	; 31
    5956:	80 83       	st	Z, r24
    5958:	10 92 c3 04 	sts	0x04C3, r1
    595c:	08 95       	ret

0000595e <__subsf3>:
    595e:	50 58       	subi	r21, 0x80	; 128

00005960 <__addsf3>:
    5960:	bb 27       	eor	r27, r27
    5962:	aa 27       	eor	r26, r26
    5964:	0e d0       	rcall	.+28     	; 0x5982 <__addsf3x>
    5966:	75 c1       	rjmp	.+746    	; 0x5c52 <__fp_round>
    5968:	66 d1       	rcall	.+716    	; 0x5c36 <__fp_pscA>
    596a:	30 f0       	brcs	.+12     	; 0x5978 <__addsf3+0x18>
    596c:	6b d1       	rcall	.+726    	; 0x5c44 <__fp_pscB>
    596e:	20 f0       	brcs	.+8      	; 0x5978 <__addsf3+0x18>
    5970:	31 f4       	brne	.+12     	; 0x597e <__addsf3+0x1e>
    5972:	9f 3f       	cpi	r25, 0xFF	; 255
    5974:	11 f4       	brne	.+4      	; 0x597a <__addsf3+0x1a>
    5976:	1e f4       	brtc	.+6      	; 0x597e <__addsf3+0x1e>
    5978:	5b c1       	rjmp	.+694    	; 0x5c30 <__fp_nan>
    597a:	0e f4       	brtc	.+2      	; 0x597e <__addsf3+0x1e>
    597c:	e0 95       	com	r30
    597e:	e7 fb       	bst	r30, 7
    5980:	51 c1       	rjmp	.+674    	; 0x5c24 <__fp_inf>

00005982 <__addsf3x>:
    5982:	e9 2f       	mov	r30, r25
    5984:	77 d1       	rcall	.+750    	; 0x5c74 <__fp_split3>
    5986:	80 f3       	brcs	.-32     	; 0x5968 <__addsf3+0x8>
    5988:	ba 17       	cp	r27, r26
    598a:	62 07       	cpc	r22, r18
    598c:	73 07       	cpc	r23, r19
    598e:	84 07       	cpc	r24, r20
    5990:	95 07       	cpc	r25, r21
    5992:	18 f0       	brcs	.+6      	; 0x599a <__addsf3x+0x18>
    5994:	71 f4       	brne	.+28     	; 0x59b2 <__addsf3x+0x30>
    5996:	9e f5       	brtc	.+102    	; 0x59fe <__addsf3x+0x7c>
    5998:	8f c1       	rjmp	.+798    	; 0x5cb8 <__fp_zero>
    599a:	0e f4       	brtc	.+2      	; 0x599e <__addsf3x+0x1c>
    599c:	e0 95       	com	r30
    599e:	0b 2e       	mov	r0, r27
    59a0:	ba 2f       	mov	r27, r26
    59a2:	a0 2d       	mov	r26, r0
    59a4:	0b 01       	movw	r0, r22
    59a6:	b9 01       	movw	r22, r18
    59a8:	90 01       	movw	r18, r0
    59aa:	0c 01       	movw	r0, r24
    59ac:	ca 01       	movw	r24, r20
    59ae:	a0 01       	movw	r20, r0
    59b0:	11 24       	eor	r1, r1
    59b2:	ff 27       	eor	r31, r31
    59b4:	59 1b       	sub	r21, r25
    59b6:	99 f0       	breq	.+38     	; 0x59de <__addsf3x+0x5c>
    59b8:	59 3f       	cpi	r21, 0xF9	; 249
    59ba:	50 f4       	brcc	.+20     	; 0x59d0 <__addsf3x+0x4e>
    59bc:	50 3e       	cpi	r21, 0xE0	; 224
    59be:	68 f1       	brcs	.+90     	; 0x5a1a <__addsf3x+0x98>
    59c0:	1a 16       	cp	r1, r26
    59c2:	f0 40       	sbci	r31, 0x00	; 0
    59c4:	a2 2f       	mov	r26, r18
    59c6:	23 2f       	mov	r18, r19
    59c8:	34 2f       	mov	r19, r20
    59ca:	44 27       	eor	r20, r20
    59cc:	58 5f       	subi	r21, 0xF8	; 248
    59ce:	f3 cf       	rjmp	.-26     	; 0x59b6 <__addsf3x+0x34>
    59d0:	46 95       	lsr	r20
    59d2:	37 95       	ror	r19
    59d4:	27 95       	ror	r18
    59d6:	a7 95       	ror	r26
    59d8:	f0 40       	sbci	r31, 0x00	; 0
    59da:	53 95       	inc	r21
    59dc:	c9 f7       	brne	.-14     	; 0x59d0 <__addsf3x+0x4e>
    59de:	7e f4       	brtc	.+30     	; 0x59fe <__addsf3x+0x7c>
    59e0:	1f 16       	cp	r1, r31
    59e2:	ba 0b       	sbc	r27, r26
    59e4:	62 0b       	sbc	r22, r18
    59e6:	73 0b       	sbc	r23, r19
    59e8:	84 0b       	sbc	r24, r20
    59ea:	ba f0       	brmi	.+46     	; 0x5a1a <__addsf3x+0x98>
    59ec:	91 50       	subi	r25, 0x01	; 1
    59ee:	a1 f0       	breq	.+40     	; 0x5a18 <__addsf3x+0x96>
    59f0:	ff 0f       	add	r31, r31
    59f2:	bb 1f       	adc	r27, r27
    59f4:	66 1f       	adc	r22, r22
    59f6:	77 1f       	adc	r23, r23
    59f8:	88 1f       	adc	r24, r24
    59fa:	c2 f7       	brpl	.-16     	; 0x59ec <__addsf3x+0x6a>
    59fc:	0e c0       	rjmp	.+28     	; 0x5a1a <__addsf3x+0x98>
    59fe:	ba 0f       	add	r27, r26
    5a00:	62 1f       	adc	r22, r18
    5a02:	73 1f       	adc	r23, r19
    5a04:	84 1f       	adc	r24, r20
    5a06:	48 f4       	brcc	.+18     	; 0x5a1a <__addsf3x+0x98>
    5a08:	87 95       	ror	r24
    5a0a:	77 95       	ror	r23
    5a0c:	67 95       	ror	r22
    5a0e:	b7 95       	ror	r27
    5a10:	f7 95       	ror	r31
    5a12:	9e 3f       	cpi	r25, 0xFE	; 254
    5a14:	08 f0       	brcs	.+2      	; 0x5a18 <__addsf3x+0x96>
    5a16:	b3 cf       	rjmp	.-154    	; 0x597e <__addsf3+0x1e>
    5a18:	93 95       	inc	r25
    5a1a:	88 0f       	add	r24, r24
    5a1c:	08 f0       	brcs	.+2      	; 0x5a20 <__addsf3x+0x9e>
    5a1e:	99 27       	eor	r25, r25
    5a20:	ee 0f       	add	r30, r30
    5a22:	97 95       	ror	r25
    5a24:	87 95       	ror	r24
    5a26:	08 95       	ret

00005a28 <__cmpsf2>:
    5a28:	d9 d0       	rcall	.+434    	; 0x5bdc <__fp_cmp>
    5a2a:	08 f4       	brcc	.+2      	; 0x5a2e <__cmpsf2+0x6>
    5a2c:	81 e0       	ldi	r24, 0x01	; 1
    5a2e:	08 95       	ret

00005a30 <__divsf3>:
    5a30:	0c d0       	rcall	.+24     	; 0x5a4a <__divsf3x>
    5a32:	0f c1       	rjmp	.+542    	; 0x5c52 <__fp_round>
    5a34:	07 d1       	rcall	.+526    	; 0x5c44 <__fp_pscB>
    5a36:	40 f0       	brcs	.+16     	; 0x5a48 <__divsf3+0x18>
    5a38:	fe d0       	rcall	.+508    	; 0x5c36 <__fp_pscA>
    5a3a:	30 f0       	brcs	.+12     	; 0x5a48 <__divsf3+0x18>
    5a3c:	21 f4       	brne	.+8      	; 0x5a46 <__divsf3+0x16>
    5a3e:	5f 3f       	cpi	r21, 0xFF	; 255
    5a40:	19 f0       	breq	.+6      	; 0x5a48 <__divsf3+0x18>
    5a42:	f0 c0       	rjmp	.+480    	; 0x5c24 <__fp_inf>
    5a44:	51 11       	cpse	r21, r1
    5a46:	39 c1       	rjmp	.+626    	; 0x5cba <__fp_szero>
    5a48:	f3 c0       	rjmp	.+486    	; 0x5c30 <__fp_nan>

00005a4a <__divsf3x>:
    5a4a:	14 d1       	rcall	.+552    	; 0x5c74 <__fp_split3>
    5a4c:	98 f3       	brcs	.-26     	; 0x5a34 <__divsf3+0x4>

00005a4e <__divsf3_pse>:
    5a4e:	99 23       	and	r25, r25
    5a50:	c9 f3       	breq	.-14     	; 0x5a44 <__divsf3+0x14>
    5a52:	55 23       	and	r21, r21
    5a54:	b1 f3       	breq	.-20     	; 0x5a42 <__divsf3+0x12>
    5a56:	95 1b       	sub	r25, r21
    5a58:	55 0b       	sbc	r21, r21
    5a5a:	bb 27       	eor	r27, r27
    5a5c:	aa 27       	eor	r26, r26
    5a5e:	62 17       	cp	r22, r18
    5a60:	73 07       	cpc	r23, r19
    5a62:	84 07       	cpc	r24, r20
    5a64:	38 f0       	brcs	.+14     	; 0x5a74 <__divsf3_pse+0x26>
    5a66:	9f 5f       	subi	r25, 0xFF	; 255
    5a68:	5f 4f       	sbci	r21, 0xFF	; 255
    5a6a:	22 0f       	add	r18, r18
    5a6c:	33 1f       	adc	r19, r19
    5a6e:	44 1f       	adc	r20, r20
    5a70:	aa 1f       	adc	r26, r26
    5a72:	a9 f3       	breq	.-22     	; 0x5a5e <__divsf3_pse+0x10>
    5a74:	33 d0       	rcall	.+102    	; 0x5adc <__divsf3_pse+0x8e>
    5a76:	0e 2e       	mov	r0, r30
    5a78:	3a f0       	brmi	.+14     	; 0x5a88 <__divsf3_pse+0x3a>
    5a7a:	e0 e8       	ldi	r30, 0x80	; 128
    5a7c:	30 d0       	rcall	.+96     	; 0x5ade <__divsf3_pse+0x90>
    5a7e:	91 50       	subi	r25, 0x01	; 1
    5a80:	50 40       	sbci	r21, 0x00	; 0
    5a82:	e6 95       	lsr	r30
    5a84:	00 1c       	adc	r0, r0
    5a86:	ca f7       	brpl	.-14     	; 0x5a7a <__divsf3_pse+0x2c>
    5a88:	29 d0       	rcall	.+82     	; 0x5adc <__divsf3_pse+0x8e>
    5a8a:	fe 2f       	mov	r31, r30
    5a8c:	27 d0       	rcall	.+78     	; 0x5adc <__divsf3_pse+0x8e>
    5a8e:	66 0f       	add	r22, r22
    5a90:	77 1f       	adc	r23, r23
    5a92:	88 1f       	adc	r24, r24
    5a94:	bb 1f       	adc	r27, r27
    5a96:	26 17       	cp	r18, r22
    5a98:	37 07       	cpc	r19, r23
    5a9a:	48 07       	cpc	r20, r24
    5a9c:	ab 07       	cpc	r26, r27
    5a9e:	b0 e8       	ldi	r27, 0x80	; 128
    5aa0:	09 f0       	breq	.+2      	; 0x5aa4 <__divsf3_pse+0x56>
    5aa2:	bb 0b       	sbc	r27, r27
    5aa4:	80 2d       	mov	r24, r0
    5aa6:	bf 01       	movw	r22, r30
    5aa8:	ff 27       	eor	r31, r31
    5aaa:	93 58       	subi	r25, 0x83	; 131
    5aac:	5f 4f       	sbci	r21, 0xFF	; 255
    5aae:	2a f0       	brmi	.+10     	; 0x5aba <__divsf3_pse+0x6c>
    5ab0:	9e 3f       	cpi	r25, 0xFE	; 254
    5ab2:	51 05       	cpc	r21, r1
    5ab4:	68 f0       	brcs	.+26     	; 0x5ad0 <__divsf3_pse+0x82>
    5ab6:	b6 c0       	rjmp	.+364    	; 0x5c24 <__fp_inf>
    5ab8:	00 c1       	rjmp	.+512    	; 0x5cba <__fp_szero>
    5aba:	5f 3f       	cpi	r21, 0xFF	; 255
    5abc:	ec f3       	brlt	.-6      	; 0x5ab8 <__divsf3_pse+0x6a>
    5abe:	98 3e       	cpi	r25, 0xE8	; 232
    5ac0:	dc f3       	brlt	.-10     	; 0x5ab8 <__divsf3_pse+0x6a>
    5ac2:	86 95       	lsr	r24
    5ac4:	77 95       	ror	r23
    5ac6:	67 95       	ror	r22
    5ac8:	b7 95       	ror	r27
    5aca:	f7 95       	ror	r31
    5acc:	9f 5f       	subi	r25, 0xFF	; 255
    5ace:	c9 f7       	brne	.-14     	; 0x5ac2 <__divsf3_pse+0x74>
    5ad0:	88 0f       	add	r24, r24
    5ad2:	91 1d       	adc	r25, r1
    5ad4:	96 95       	lsr	r25
    5ad6:	87 95       	ror	r24
    5ad8:	97 f9       	bld	r25, 7
    5ada:	08 95       	ret
    5adc:	e1 e0       	ldi	r30, 0x01	; 1
    5ade:	66 0f       	add	r22, r22
    5ae0:	77 1f       	adc	r23, r23
    5ae2:	88 1f       	adc	r24, r24
    5ae4:	bb 1f       	adc	r27, r27
    5ae6:	62 17       	cp	r22, r18
    5ae8:	73 07       	cpc	r23, r19
    5aea:	84 07       	cpc	r24, r20
    5aec:	ba 07       	cpc	r27, r26
    5aee:	20 f0       	brcs	.+8      	; 0x5af8 <__divsf3_pse+0xaa>
    5af0:	62 1b       	sub	r22, r18
    5af2:	73 0b       	sbc	r23, r19
    5af4:	84 0b       	sbc	r24, r20
    5af6:	ba 0b       	sbc	r27, r26
    5af8:	ee 1f       	adc	r30, r30
    5afa:	88 f7       	brcc	.-30     	; 0x5ade <__divsf3_pse+0x90>
    5afc:	e0 95       	com	r30
    5afe:	08 95       	ret

00005b00 <__fixsfsi>:
    5b00:	04 d0       	rcall	.+8      	; 0x5b0a <__fixunssfsi>
    5b02:	68 94       	set
    5b04:	b1 11       	cpse	r27, r1
    5b06:	d9 c0       	rjmp	.+434    	; 0x5cba <__fp_szero>
    5b08:	08 95       	ret

00005b0a <__fixunssfsi>:
    5b0a:	bc d0       	rcall	.+376    	; 0x5c84 <__fp_splitA>
    5b0c:	88 f0       	brcs	.+34     	; 0x5b30 <__fixunssfsi+0x26>
    5b0e:	9f 57       	subi	r25, 0x7F	; 127
    5b10:	90 f0       	brcs	.+36     	; 0x5b36 <__fixunssfsi+0x2c>
    5b12:	b9 2f       	mov	r27, r25
    5b14:	99 27       	eor	r25, r25
    5b16:	b7 51       	subi	r27, 0x17	; 23
    5b18:	a0 f0       	brcs	.+40     	; 0x5b42 <__fixunssfsi+0x38>
    5b1a:	d1 f0       	breq	.+52     	; 0x5b50 <__fixunssfsi+0x46>
    5b1c:	66 0f       	add	r22, r22
    5b1e:	77 1f       	adc	r23, r23
    5b20:	88 1f       	adc	r24, r24
    5b22:	99 1f       	adc	r25, r25
    5b24:	1a f0       	brmi	.+6      	; 0x5b2c <__fixunssfsi+0x22>
    5b26:	ba 95       	dec	r27
    5b28:	c9 f7       	brne	.-14     	; 0x5b1c <__fixunssfsi+0x12>
    5b2a:	12 c0       	rjmp	.+36     	; 0x5b50 <__fixunssfsi+0x46>
    5b2c:	b1 30       	cpi	r27, 0x01	; 1
    5b2e:	81 f0       	breq	.+32     	; 0x5b50 <__fixunssfsi+0x46>
    5b30:	c3 d0       	rcall	.+390    	; 0x5cb8 <__fp_zero>
    5b32:	b1 e0       	ldi	r27, 0x01	; 1
    5b34:	08 95       	ret
    5b36:	c0 c0       	rjmp	.+384    	; 0x5cb8 <__fp_zero>
    5b38:	67 2f       	mov	r22, r23
    5b3a:	78 2f       	mov	r23, r24
    5b3c:	88 27       	eor	r24, r24
    5b3e:	b8 5f       	subi	r27, 0xF8	; 248
    5b40:	39 f0       	breq	.+14     	; 0x5b50 <__fixunssfsi+0x46>
    5b42:	b9 3f       	cpi	r27, 0xF9	; 249
    5b44:	cc f3       	brlt	.-14     	; 0x5b38 <__fixunssfsi+0x2e>
    5b46:	86 95       	lsr	r24
    5b48:	77 95       	ror	r23
    5b4a:	67 95       	ror	r22
    5b4c:	b3 95       	inc	r27
    5b4e:	d9 f7       	brne	.-10     	; 0x5b46 <__fixunssfsi+0x3c>
    5b50:	3e f4       	brtc	.+14     	; 0x5b60 <__fixunssfsi+0x56>
    5b52:	90 95       	com	r25
    5b54:	80 95       	com	r24
    5b56:	70 95       	com	r23
    5b58:	61 95       	neg	r22
    5b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b5c:	8f 4f       	sbci	r24, 0xFF	; 255
    5b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b60:	08 95       	ret

00005b62 <__floatunsisf>:
    5b62:	e8 94       	clt
    5b64:	09 c0       	rjmp	.+18     	; 0x5b78 <__floatsisf+0x12>

00005b66 <__floatsisf>:
    5b66:	97 fb       	bst	r25, 7
    5b68:	3e f4       	brtc	.+14     	; 0x5b78 <__floatsisf+0x12>
    5b6a:	90 95       	com	r25
    5b6c:	80 95       	com	r24
    5b6e:	70 95       	com	r23
    5b70:	61 95       	neg	r22
    5b72:	7f 4f       	sbci	r23, 0xFF	; 255
    5b74:	8f 4f       	sbci	r24, 0xFF	; 255
    5b76:	9f 4f       	sbci	r25, 0xFF	; 255
    5b78:	99 23       	and	r25, r25
    5b7a:	a9 f0       	breq	.+42     	; 0x5ba6 <__floatsisf+0x40>
    5b7c:	f9 2f       	mov	r31, r25
    5b7e:	96 e9       	ldi	r25, 0x96	; 150
    5b80:	bb 27       	eor	r27, r27
    5b82:	93 95       	inc	r25
    5b84:	f6 95       	lsr	r31
    5b86:	87 95       	ror	r24
    5b88:	77 95       	ror	r23
    5b8a:	67 95       	ror	r22
    5b8c:	b7 95       	ror	r27
    5b8e:	f1 11       	cpse	r31, r1
    5b90:	f8 cf       	rjmp	.-16     	; 0x5b82 <__floatsisf+0x1c>
    5b92:	fa f4       	brpl	.+62     	; 0x5bd2 <__floatsisf+0x6c>
    5b94:	bb 0f       	add	r27, r27
    5b96:	11 f4       	brne	.+4      	; 0x5b9c <__floatsisf+0x36>
    5b98:	60 ff       	sbrs	r22, 0
    5b9a:	1b c0       	rjmp	.+54     	; 0x5bd2 <__floatsisf+0x6c>
    5b9c:	6f 5f       	subi	r22, 0xFF	; 255
    5b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    5ba0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ba2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba4:	16 c0       	rjmp	.+44     	; 0x5bd2 <__floatsisf+0x6c>
    5ba6:	88 23       	and	r24, r24
    5ba8:	11 f0       	breq	.+4      	; 0x5bae <__floatsisf+0x48>
    5baa:	96 e9       	ldi	r25, 0x96	; 150
    5bac:	11 c0       	rjmp	.+34     	; 0x5bd0 <__floatsisf+0x6a>
    5bae:	77 23       	and	r23, r23
    5bb0:	21 f0       	breq	.+8      	; 0x5bba <__floatsisf+0x54>
    5bb2:	9e e8       	ldi	r25, 0x8E	; 142
    5bb4:	87 2f       	mov	r24, r23
    5bb6:	76 2f       	mov	r23, r22
    5bb8:	05 c0       	rjmp	.+10     	; 0x5bc4 <__floatsisf+0x5e>
    5bba:	66 23       	and	r22, r22
    5bbc:	71 f0       	breq	.+28     	; 0x5bda <__floatsisf+0x74>
    5bbe:	96 e8       	ldi	r25, 0x86	; 134
    5bc0:	86 2f       	mov	r24, r22
    5bc2:	70 e0       	ldi	r23, 0x00	; 0
    5bc4:	60 e0       	ldi	r22, 0x00	; 0
    5bc6:	2a f0       	brmi	.+10     	; 0x5bd2 <__floatsisf+0x6c>
    5bc8:	9a 95       	dec	r25
    5bca:	66 0f       	add	r22, r22
    5bcc:	77 1f       	adc	r23, r23
    5bce:	88 1f       	adc	r24, r24
    5bd0:	da f7       	brpl	.-10     	; 0x5bc8 <__floatsisf+0x62>
    5bd2:	88 0f       	add	r24, r24
    5bd4:	96 95       	lsr	r25
    5bd6:	87 95       	ror	r24
    5bd8:	97 f9       	bld	r25, 7
    5bda:	08 95       	ret

00005bdc <__fp_cmp>:
    5bdc:	99 0f       	add	r25, r25
    5bde:	00 08       	sbc	r0, r0
    5be0:	55 0f       	add	r21, r21
    5be2:	aa 0b       	sbc	r26, r26
    5be4:	e0 e8       	ldi	r30, 0x80	; 128
    5be6:	fe ef       	ldi	r31, 0xFE	; 254
    5be8:	16 16       	cp	r1, r22
    5bea:	17 06       	cpc	r1, r23
    5bec:	e8 07       	cpc	r30, r24
    5bee:	f9 07       	cpc	r31, r25
    5bf0:	c0 f0       	brcs	.+48     	; 0x5c22 <__fp_cmp+0x46>
    5bf2:	12 16       	cp	r1, r18
    5bf4:	13 06       	cpc	r1, r19
    5bf6:	e4 07       	cpc	r30, r20
    5bf8:	f5 07       	cpc	r31, r21
    5bfa:	98 f0       	brcs	.+38     	; 0x5c22 <__fp_cmp+0x46>
    5bfc:	62 1b       	sub	r22, r18
    5bfe:	73 0b       	sbc	r23, r19
    5c00:	84 0b       	sbc	r24, r20
    5c02:	95 0b       	sbc	r25, r21
    5c04:	39 f4       	brne	.+14     	; 0x5c14 <__fp_cmp+0x38>
    5c06:	0a 26       	eor	r0, r26
    5c08:	61 f0       	breq	.+24     	; 0x5c22 <__fp_cmp+0x46>
    5c0a:	23 2b       	or	r18, r19
    5c0c:	24 2b       	or	r18, r20
    5c0e:	25 2b       	or	r18, r21
    5c10:	21 f4       	brne	.+8      	; 0x5c1a <__fp_cmp+0x3e>
    5c12:	08 95       	ret
    5c14:	0a 26       	eor	r0, r26
    5c16:	09 f4       	brne	.+2      	; 0x5c1a <__fp_cmp+0x3e>
    5c18:	a1 40       	sbci	r26, 0x01	; 1
    5c1a:	a6 95       	lsr	r26
    5c1c:	8f ef       	ldi	r24, 0xFF	; 255
    5c1e:	81 1d       	adc	r24, r1
    5c20:	81 1d       	adc	r24, r1
    5c22:	08 95       	ret

00005c24 <__fp_inf>:
    5c24:	97 f9       	bld	r25, 7
    5c26:	9f 67       	ori	r25, 0x7F	; 127
    5c28:	80 e8       	ldi	r24, 0x80	; 128
    5c2a:	70 e0       	ldi	r23, 0x00	; 0
    5c2c:	60 e0       	ldi	r22, 0x00	; 0
    5c2e:	08 95       	ret

00005c30 <__fp_nan>:
    5c30:	9f ef       	ldi	r25, 0xFF	; 255
    5c32:	80 ec       	ldi	r24, 0xC0	; 192
    5c34:	08 95       	ret

00005c36 <__fp_pscA>:
    5c36:	00 24       	eor	r0, r0
    5c38:	0a 94       	dec	r0
    5c3a:	16 16       	cp	r1, r22
    5c3c:	17 06       	cpc	r1, r23
    5c3e:	18 06       	cpc	r1, r24
    5c40:	09 06       	cpc	r0, r25
    5c42:	08 95       	ret

00005c44 <__fp_pscB>:
    5c44:	00 24       	eor	r0, r0
    5c46:	0a 94       	dec	r0
    5c48:	12 16       	cp	r1, r18
    5c4a:	13 06       	cpc	r1, r19
    5c4c:	14 06       	cpc	r1, r20
    5c4e:	05 06       	cpc	r0, r21
    5c50:	08 95       	ret

00005c52 <__fp_round>:
    5c52:	09 2e       	mov	r0, r25
    5c54:	03 94       	inc	r0
    5c56:	00 0c       	add	r0, r0
    5c58:	11 f4       	brne	.+4      	; 0x5c5e <__fp_round+0xc>
    5c5a:	88 23       	and	r24, r24
    5c5c:	52 f0       	brmi	.+20     	; 0x5c72 <__fp_round+0x20>
    5c5e:	bb 0f       	add	r27, r27
    5c60:	40 f4       	brcc	.+16     	; 0x5c72 <__fp_round+0x20>
    5c62:	bf 2b       	or	r27, r31
    5c64:	11 f4       	brne	.+4      	; 0x5c6a <__fp_round+0x18>
    5c66:	60 ff       	sbrs	r22, 0
    5c68:	04 c0       	rjmp	.+8      	; 0x5c72 <__fp_round+0x20>
    5c6a:	6f 5f       	subi	r22, 0xFF	; 255
    5c6c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c70:	9f 4f       	sbci	r25, 0xFF	; 255
    5c72:	08 95       	ret

00005c74 <__fp_split3>:
    5c74:	57 fd       	sbrc	r21, 7
    5c76:	90 58       	subi	r25, 0x80	; 128
    5c78:	44 0f       	add	r20, r20
    5c7a:	55 1f       	adc	r21, r21
    5c7c:	59 f0       	breq	.+22     	; 0x5c94 <__fp_splitA+0x10>
    5c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    5c80:	71 f0       	breq	.+28     	; 0x5c9e <__fp_splitA+0x1a>
    5c82:	47 95       	ror	r20

00005c84 <__fp_splitA>:
    5c84:	88 0f       	add	r24, r24
    5c86:	97 fb       	bst	r25, 7
    5c88:	99 1f       	adc	r25, r25
    5c8a:	61 f0       	breq	.+24     	; 0x5ca4 <__fp_splitA+0x20>
    5c8c:	9f 3f       	cpi	r25, 0xFF	; 255
    5c8e:	79 f0       	breq	.+30     	; 0x5cae <__fp_splitA+0x2a>
    5c90:	87 95       	ror	r24
    5c92:	08 95       	ret
    5c94:	12 16       	cp	r1, r18
    5c96:	13 06       	cpc	r1, r19
    5c98:	14 06       	cpc	r1, r20
    5c9a:	55 1f       	adc	r21, r21
    5c9c:	f2 cf       	rjmp	.-28     	; 0x5c82 <__fp_split3+0xe>
    5c9e:	46 95       	lsr	r20
    5ca0:	f1 df       	rcall	.-30     	; 0x5c84 <__fp_splitA>
    5ca2:	08 c0       	rjmp	.+16     	; 0x5cb4 <__fp_splitA+0x30>
    5ca4:	16 16       	cp	r1, r22
    5ca6:	17 06       	cpc	r1, r23
    5ca8:	18 06       	cpc	r1, r24
    5caa:	99 1f       	adc	r25, r25
    5cac:	f1 cf       	rjmp	.-30     	; 0x5c90 <__fp_splitA+0xc>
    5cae:	86 95       	lsr	r24
    5cb0:	71 05       	cpc	r23, r1
    5cb2:	61 05       	cpc	r22, r1
    5cb4:	08 94       	sec
    5cb6:	08 95       	ret

00005cb8 <__fp_zero>:
    5cb8:	e8 94       	clt

00005cba <__fp_szero>:
    5cba:	bb 27       	eor	r27, r27
    5cbc:	66 27       	eor	r22, r22
    5cbe:	77 27       	eor	r23, r23
    5cc0:	cb 01       	movw	r24, r22
    5cc2:	97 f9       	bld	r25, 7
    5cc4:	08 95       	ret

00005cc6 <__gesf2>:
    5cc6:	8a df       	rcall	.-236    	; 0x5bdc <__fp_cmp>
    5cc8:	08 f4       	brcc	.+2      	; 0x5ccc <__gesf2+0x6>
    5cca:	8f ef       	ldi	r24, 0xFF	; 255
    5ccc:	08 95       	ret

00005cce <lrint>:
    5cce:	da df       	rcall	.-76     	; 0x5c84 <__fp_splitA>
    5cd0:	a8 f1       	brcs	.+106    	; 0x5d3c <lrint+0x6e>
    5cd2:	9e 57       	subi	r25, 0x7E	; 126
    5cd4:	a8 f1       	brcs	.+106    	; 0x5d40 <lrint+0x72>
    5cd6:	98 51       	subi	r25, 0x18	; 24
    5cd8:	60 f0       	brcs	.+24     	; 0x5cf2 <lrint+0x24>
    5cda:	39 f1       	breq	.+78     	; 0x5d2a <lrint+0x5c>
    5cdc:	98 30       	cpi	r25, 0x08	; 8
    5cde:	70 f5       	brcc	.+92     	; 0x5d3c <lrint+0x6e>
    5ce0:	09 2e       	mov	r0, r25
    5ce2:	99 27       	eor	r25, r25
    5ce4:	66 0f       	add	r22, r22
    5ce6:	77 1f       	adc	r23, r23
    5ce8:	88 1f       	adc	r24, r24
    5cea:	99 1f       	adc	r25, r25
    5cec:	0a 94       	dec	r0
    5cee:	d1 f7       	brne	.-12     	; 0x5ce4 <lrint+0x16>
    5cf0:	1c c0       	rjmp	.+56     	; 0x5d2a <lrint+0x5c>
    5cf2:	bb 27       	eor	r27, r27
    5cf4:	99 3f       	cpi	r25, 0xF9	; 249
    5cf6:	4c f4       	brge	.+18     	; 0x5d0a <lrint+0x3c>
    5cf8:	b1 11       	cpse	r27, r1
    5cfa:	b1 e0       	ldi	r27, 0x01	; 1
    5cfc:	b6 2b       	or	r27, r22
    5cfe:	67 2f       	mov	r22, r23
    5d00:	78 2f       	mov	r23, r24
    5d02:	88 27       	eor	r24, r24
    5d04:	98 5f       	subi	r25, 0xF8	; 248
    5d06:	b1 f7       	brne	.-20     	; 0x5cf4 <lrint+0x26>
    5d08:	08 c0       	rjmp	.+16     	; 0x5d1a <lrint+0x4c>
    5d0a:	86 95       	lsr	r24
    5d0c:	77 95       	ror	r23
    5d0e:	67 95       	ror	r22
    5d10:	b7 95       	ror	r27
    5d12:	08 f4       	brcc	.+2      	; 0x5d16 <lrint+0x48>
    5d14:	b1 60       	ori	r27, 0x01	; 1
    5d16:	93 95       	inc	r25
    5d18:	c1 f7       	brne	.-16     	; 0x5d0a <lrint+0x3c>
    5d1a:	bb 0f       	add	r27, r27
    5d1c:	30 f4       	brcc	.+12     	; 0x5d2a <lrint+0x5c>
    5d1e:	11 f4       	brne	.+4      	; 0x5d24 <lrint+0x56>
    5d20:	60 ff       	sbrs	r22, 0
    5d22:	03 c0       	rjmp	.+6      	; 0x5d2a <lrint+0x5c>
    5d24:	6f 5f       	subi	r22, 0xFF	; 255
    5d26:	7f 4f       	sbci	r23, 0xFF	; 255
    5d28:	8f 4f       	sbci	r24, 0xFF	; 255
    5d2a:	3e f4       	brtc	.+14     	; 0x5d3a <lrint+0x6c>
    5d2c:	90 95       	com	r25
    5d2e:	80 95       	com	r24
    5d30:	70 95       	com	r23
    5d32:	61 95       	neg	r22
    5d34:	7f 4f       	sbci	r23, 0xFF	; 255
    5d36:	8f 4f       	sbci	r24, 0xFF	; 255
    5d38:	9f 4f       	sbci	r25, 0xFF	; 255
    5d3a:	08 95       	ret
    5d3c:	68 94       	set
    5d3e:	bd cf       	rjmp	.-134    	; 0x5cba <__fp_szero>
    5d40:	bb cf       	rjmp	.-138    	; 0x5cb8 <__fp_zero>

00005d42 <__mulsf3>:
    5d42:	0b d0       	rcall	.+22     	; 0x5d5a <__mulsf3x>
    5d44:	86 cf       	rjmp	.-244    	; 0x5c52 <__fp_round>
    5d46:	77 df       	rcall	.-274    	; 0x5c36 <__fp_pscA>
    5d48:	28 f0       	brcs	.+10     	; 0x5d54 <__mulsf3+0x12>
    5d4a:	7c df       	rcall	.-264    	; 0x5c44 <__fp_pscB>
    5d4c:	18 f0       	brcs	.+6      	; 0x5d54 <__mulsf3+0x12>
    5d4e:	95 23       	and	r25, r21
    5d50:	09 f0       	breq	.+2      	; 0x5d54 <__mulsf3+0x12>
    5d52:	68 cf       	rjmp	.-304    	; 0x5c24 <__fp_inf>
    5d54:	6d cf       	rjmp	.-294    	; 0x5c30 <__fp_nan>
    5d56:	11 24       	eor	r1, r1
    5d58:	b0 cf       	rjmp	.-160    	; 0x5cba <__fp_szero>

00005d5a <__mulsf3x>:
    5d5a:	8c df       	rcall	.-232    	; 0x5c74 <__fp_split3>
    5d5c:	a0 f3       	brcs	.-24     	; 0x5d46 <__mulsf3+0x4>

00005d5e <__mulsf3_pse>:
    5d5e:	95 9f       	mul	r25, r21
    5d60:	d1 f3       	breq	.-12     	; 0x5d56 <__mulsf3+0x14>
    5d62:	95 0f       	add	r25, r21
    5d64:	50 e0       	ldi	r21, 0x00	; 0
    5d66:	55 1f       	adc	r21, r21
    5d68:	62 9f       	mul	r22, r18
    5d6a:	f0 01       	movw	r30, r0
    5d6c:	72 9f       	mul	r23, r18
    5d6e:	bb 27       	eor	r27, r27
    5d70:	f0 0d       	add	r31, r0
    5d72:	b1 1d       	adc	r27, r1
    5d74:	63 9f       	mul	r22, r19
    5d76:	aa 27       	eor	r26, r26
    5d78:	f0 0d       	add	r31, r0
    5d7a:	b1 1d       	adc	r27, r1
    5d7c:	aa 1f       	adc	r26, r26
    5d7e:	64 9f       	mul	r22, r20
    5d80:	66 27       	eor	r22, r22
    5d82:	b0 0d       	add	r27, r0
    5d84:	a1 1d       	adc	r26, r1
    5d86:	66 1f       	adc	r22, r22
    5d88:	82 9f       	mul	r24, r18
    5d8a:	22 27       	eor	r18, r18
    5d8c:	b0 0d       	add	r27, r0
    5d8e:	a1 1d       	adc	r26, r1
    5d90:	62 1f       	adc	r22, r18
    5d92:	73 9f       	mul	r23, r19
    5d94:	b0 0d       	add	r27, r0
    5d96:	a1 1d       	adc	r26, r1
    5d98:	62 1f       	adc	r22, r18
    5d9a:	83 9f       	mul	r24, r19
    5d9c:	a0 0d       	add	r26, r0
    5d9e:	61 1d       	adc	r22, r1
    5da0:	22 1f       	adc	r18, r18
    5da2:	74 9f       	mul	r23, r20
    5da4:	33 27       	eor	r19, r19
    5da6:	a0 0d       	add	r26, r0
    5da8:	61 1d       	adc	r22, r1
    5daa:	23 1f       	adc	r18, r19
    5dac:	84 9f       	mul	r24, r20
    5dae:	60 0d       	add	r22, r0
    5db0:	21 1d       	adc	r18, r1
    5db2:	82 2f       	mov	r24, r18
    5db4:	76 2f       	mov	r23, r22
    5db6:	6a 2f       	mov	r22, r26
    5db8:	11 24       	eor	r1, r1
    5dba:	9f 57       	subi	r25, 0x7F	; 127
    5dbc:	50 40       	sbci	r21, 0x00	; 0
    5dbe:	8a f0       	brmi	.+34     	; 0x5de2 <__mulsf3_pse+0x84>
    5dc0:	e1 f0       	breq	.+56     	; 0x5dfa <__mulsf3_pse+0x9c>
    5dc2:	88 23       	and	r24, r24
    5dc4:	4a f0       	brmi	.+18     	; 0x5dd8 <__mulsf3_pse+0x7a>
    5dc6:	ee 0f       	add	r30, r30
    5dc8:	ff 1f       	adc	r31, r31
    5dca:	bb 1f       	adc	r27, r27
    5dcc:	66 1f       	adc	r22, r22
    5dce:	77 1f       	adc	r23, r23
    5dd0:	88 1f       	adc	r24, r24
    5dd2:	91 50       	subi	r25, 0x01	; 1
    5dd4:	50 40       	sbci	r21, 0x00	; 0
    5dd6:	a9 f7       	brne	.-22     	; 0x5dc2 <__mulsf3_pse+0x64>
    5dd8:	9e 3f       	cpi	r25, 0xFE	; 254
    5dda:	51 05       	cpc	r21, r1
    5ddc:	70 f0       	brcs	.+28     	; 0x5dfa <__mulsf3_pse+0x9c>
    5dde:	22 cf       	rjmp	.-444    	; 0x5c24 <__fp_inf>
    5de0:	6c cf       	rjmp	.-296    	; 0x5cba <__fp_szero>
    5de2:	5f 3f       	cpi	r21, 0xFF	; 255
    5de4:	ec f3       	brlt	.-6      	; 0x5de0 <__mulsf3_pse+0x82>
    5de6:	98 3e       	cpi	r25, 0xE8	; 232
    5de8:	dc f3       	brlt	.-10     	; 0x5de0 <__mulsf3_pse+0x82>
    5dea:	86 95       	lsr	r24
    5dec:	77 95       	ror	r23
    5dee:	67 95       	ror	r22
    5df0:	b7 95       	ror	r27
    5df2:	f7 95       	ror	r31
    5df4:	e7 95       	ror	r30
    5df6:	9f 5f       	subi	r25, 0xFF	; 255
    5df8:	c1 f7       	brne	.-16     	; 0x5dea <__mulsf3_pse+0x8c>
    5dfa:	fe 2b       	or	r31, r30
    5dfc:	88 0f       	add	r24, r24
    5dfe:	91 1d       	adc	r25, r1
    5e00:	96 95       	lsr	r25
    5e02:	87 95       	ror	r24
    5e04:	97 f9       	bld	r25, 7
    5e06:	08 95       	ret

00005e08 <pow>:
    5e08:	fa 01       	movw	r30, r20
    5e0a:	ee 0f       	add	r30, r30
    5e0c:	ff 1f       	adc	r31, r31
    5e0e:	30 96       	adiw	r30, 0x00	; 0
    5e10:	21 05       	cpc	r18, r1
    5e12:	31 05       	cpc	r19, r1
    5e14:	99 f1       	breq	.+102    	; 0x5e7c <pow+0x74>
    5e16:	61 15       	cp	r22, r1
    5e18:	71 05       	cpc	r23, r1
    5e1a:	61 f4       	brne	.+24     	; 0x5e34 <pow+0x2c>
    5e1c:	80 38       	cpi	r24, 0x80	; 128
    5e1e:	bf e3       	ldi	r27, 0x3F	; 63
    5e20:	9b 07       	cpc	r25, r27
    5e22:	49 f1       	breq	.+82     	; 0x5e76 <pow+0x6e>
    5e24:	68 94       	set
    5e26:	90 38       	cpi	r25, 0x80	; 128
    5e28:	81 05       	cpc	r24, r1
    5e2a:	61 f0       	breq	.+24     	; 0x5e44 <pow+0x3c>
    5e2c:	80 38       	cpi	r24, 0x80	; 128
    5e2e:	bf ef       	ldi	r27, 0xFF	; 255
    5e30:	9b 07       	cpc	r25, r27
    5e32:	41 f0       	breq	.+16     	; 0x5e44 <pow+0x3c>
    5e34:	99 23       	and	r25, r25
    5e36:	42 f5       	brpl	.+80     	; 0x5e88 <pow+0x80>
    5e38:	ff 3f       	cpi	r31, 0xFF	; 255
    5e3a:	e1 05       	cpc	r30, r1
    5e3c:	31 05       	cpc	r19, r1
    5e3e:	21 05       	cpc	r18, r1
    5e40:	11 f1       	breq	.+68     	; 0x5e86 <pow+0x7e>
    5e42:	e8 94       	clt
    5e44:	08 94       	sec
    5e46:	e7 95       	ror	r30
    5e48:	d9 01       	movw	r26, r18
    5e4a:	aa 23       	and	r26, r26
    5e4c:	29 f4       	brne	.+10     	; 0x5e58 <pow+0x50>
    5e4e:	ab 2f       	mov	r26, r27
    5e50:	be 2f       	mov	r27, r30
    5e52:	f8 5f       	subi	r31, 0xF8	; 248
    5e54:	d0 f3       	brcs	.-12     	; 0x5e4a <pow+0x42>
    5e56:	10 c0       	rjmp	.+32     	; 0x5e78 <pow+0x70>
    5e58:	ff 5f       	subi	r31, 0xFF	; 255
    5e5a:	70 f4       	brcc	.+28     	; 0x5e78 <pow+0x70>
    5e5c:	a6 95       	lsr	r26
    5e5e:	e0 f7       	brcc	.-8      	; 0x5e58 <pow+0x50>
    5e60:	f7 39       	cpi	r31, 0x97	; 151
    5e62:	50 f0       	brcs	.+20     	; 0x5e78 <pow+0x70>
    5e64:	19 f0       	breq	.+6      	; 0x5e6c <pow+0x64>
    5e66:	ff 3a       	cpi	r31, 0xAF	; 175
    5e68:	38 f4       	brcc	.+14     	; 0x5e78 <pow+0x70>
    5e6a:	9f 77       	andi	r25, 0x7F	; 127
    5e6c:	9f 93       	push	r25
    5e6e:	0c d0       	rcall	.+24     	; 0x5e88 <pow+0x80>
    5e70:	0f 90       	pop	r0
    5e72:	07 fc       	sbrc	r0, 7
    5e74:	90 58       	subi	r25, 0x80	; 128
    5e76:	08 95       	ret
    5e78:	3e f0       	brts	.+14     	; 0x5e88 <pow+0x80>
    5e7a:	da ce       	rjmp	.-588    	; 0x5c30 <__fp_nan>
    5e7c:	60 e0       	ldi	r22, 0x00	; 0
    5e7e:	70 e0       	ldi	r23, 0x00	; 0
    5e80:	80 e8       	ldi	r24, 0x80	; 128
    5e82:	9f e3       	ldi	r25, 0x3F	; 63
    5e84:	08 95       	ret
    5e86:	4f e7       	ldi	r20, 0x7F	; 127
    5e88:	9f 77       	andi	r25, 0x7F	; 127
    5e8a:	5f 93       	push	r21
    5e8c:	4f 93       	push	r20
    5e8e:	3f 93       	push	r19
    5e90:	2f 93       	push	r18
    5e92:	9e d0       	rcall	.+316    	; 0x5fd0 <log>
    5e94:	2f 91       	pop	r18
    5e96:	3f 91       	pop	r19
    5e98:	4f 91       	pop	r20
    5e9a:	5f 91       	pop	r21
    5e9c:	52 df       	rcall	.-348    	; 0x5d42 <__mulsf3>
    5e9e:	05 c0       	rjmp	.+10     	; 0x5eaa <exp>
    5ea0:	19 f4       	brne	.+6      	; 0x5ea8 <pow+0xa0>
    5ea2:	0e f0       	brts	.+2      	; 0x5ea6 <pow+0x9e>
    5ea4:	bf ce       	rjmp	.-642    	; 0x5c24 <__fp_inf>
    5ea6:	08 cf       	rjmp	.-496    	; 0x5cb8 <__fp_zero>
    5ea8:	c3 ce       	rjmp	.-634    	; 0x5c30 <__fp_nan>

00005eaa <exp>:
    5eaa:	ec de       	rcall	.-552    	; 0x5c84 <__fp_splitA>
    5eac:	c8 f3       	brcs	.-14     	; 0x5ea0 <pow+0x98>
    5eae:	96 38       	cpi	r25, 0x86	; 134
    5eb0:	c0 f7       	brcc	.-16     	; 0x5ea2 <pow+0x9a>
    5eb2:	07 f8       	bld	r0, 7
    5eb4:	0f 92       	push	r0
    5eb6:	e8 94       	clt
    5eb8:	2b e3       	ldi	r18, 0x3B	; 59
    5eba:	3a ea       	ldi	r19, 0xAA	; 170
    5ebc:	48 eb       	ldi	r20, 0xB8	; 184
    5ebe:	5f e7       	ldi	r21, 0x7F	; 127
    5ec0:	4e df       	rcall	.-356    	; 0x5d5e <__mulsf3_pse>
    5ec2:	0f 92       	push	r0
    5ec4:	0f 92       	push	r0
    5ec6:	0f 92       	push	r0
    5ec8:	4d b7       	in	r20, 0x3d	; 61
    5eca:	5e b7       	in	r21, 0x3e	; 62
    5ecc:	0f 92       	push	r0
    5ece:	c0 d0       	rcall	.+384    	; 0x6050 <modf>
    5ed0:	e8 ec       	ldi	r30, 0xC8	; 200
    5ed2:	f0 e0       	ldi	r31, 0x00	; 0
    5ed4:	16 d0       	rcall	.+44     	; 0x5f02 <__fp_powser>
    5ed6:	4f 91       	pop	r20
    5ed8:	5f 91       	pop	r21
    5eda:	ef 91       	pop	r30
    5edc:	ff 91       	pop	r31
    5ede:	e5 95       	asr	r30
    5ee0:	ee 1f       	adc	r30, r30
    5ee2:	ff 1f       	adc	r31, r31
    5ee4:	49 f0       	breq	.+18     	; 0x5ef8 <exp+0x4e>
    5ee6:	fe 57       	subi	r31, 0x7E	; 126
    5ee8:	e0 68       	ori	r30, 0x80	; 128
    5eea:	44 27       	eor	r20, r20
    5eec:	ee 0f       	add	r30, r30
    5eee:	44 1f       	adc	r20, r20
    5ef0:	fa 95       	dec	r31
    5ef2:	e1 f7       	brne	.-8      	; 0x5eec <exp+0x42>
    5ef4:	41 95       	neg	r20
    5ef6:	55 0b       	sbc	r21, r21
    5ef8:	32 d0       	rcall	.+100    	; 0x5f5e <ldexp>
    5efa:	0f 90       	pop	r0
    5efc:	07 fe       	sbrs	r0, 7
    5efe:	26 c0       	rjmp	.+76     	; 0x5f4c <inverse>
    5f00:	08 95       	ret

00005f02 <__fp_powser>:
    5f02:	df 93       	push	r29
    5f04:	cf 93       	push	r28
    5f06:	1f 93       	push	r17
    5f08:	0f 93       	push	r16
    5f0a:	ff 92       	push	r15
    5f0c:	ef 92       	push	r14
    5f0e:	df 92       	push	r13
    5f10:	7b 01       	movw	r14, r22
    5f12:	8c 01       	movw	r16, r24
    5f14:	68 94       	set
    5f16:	05 c0       	rjmp	.+10     	; 0x5f22 <__fp_powser+0x20>
    5f18:	da 2e       	mov	r13, r26
    5f1a:	ef 01       	movw	r28, r30
    5f1c:	1e df       	rcall	.-452    	; 0x5d5a <__mulsf3x>
    5f1e:	fe 01       	movw	r30, r28
    5f20:	e8 94       	clt
    5f22:	a5 91       	lpm	r26, Z+
    5f24:	25 91       	lpm	r18, Z+
    5f26:	35 91       	lpm	r19, Z+
    5f28:	45 91       	lpm	r20, Z+
    5f2a:	55 91       	lpm	r21, Z+
    5f2c:	ae f3       	brts	.-22     	; 0x5f18 <__fp_powser+0x16>
    5f2e:	ef 01       	movw	r28, r30
    5f30:	28 dd       	rcall	.-1456   	; 0x5982 <__addsf3x>
    5f32:	fe 01       	movw	r30, r28
    5f34:	97 01       	movw	r18, r14
    5f36:	a8 01       	movw	r20, r16
    5f38:	da 94       	dec	r13
    5f3a:	79 f7       	brne	.-34     	; 0x5f1a <__fp_powser+0x18>
    5f3c:	df 90       	pop	r13
    5f3e:	ef 90       	pop	r14
    5f40:	ff 90       	pop	r15
    5f42:	0f 91       	pop	r16
    5f44:	1f 91       	pop	r17
    5f46:	cf 91       	pop	r28
    5f48:	df 91       	pop	r29
    5f4a:	08 95       	ret

00005f4c <inverse>:
    5f4c:	9b 01       	movw	r18, r22
    5f4e:	ac 01       	movw	r20, r24
    5f50:	60 e0       	ldi	r22, 0x00	; 0
    5f52:	70 e0       	ldi	r23, 0x00	; 0
    5f54:	80 e8       	ldi	r24, 0x80	; 128
    5f56:	9f e3       	ldi	r25, 0x3F	; 63
    5f58:	6b cd       	rjmp	.-1322   	; 0x5a30 <__divsf3>
    5f5a:	64 ce       	rjmp	.-824    	; 0x5c24 <__fp_inf>
    5f5c:	ac c0       	rjmp	.+344    	; 0x60b6 <__fp_mpack>

00005f5e <ldexp>:
    5f5e:	92 de       	rcall	.-732    	; 0x5c84 <__fp_splitA>
    5f60:	e8 f3       	brcs	.-6      	; 0x5f5c <inverse+0x10>
    5f62:	99 23       	and	r25, r25
    5f64:	d9 f3       	breq	.-10     	; 0x5f5c <inverse+0x10>
    5f66:	94 0f       	add	r25, r20
    5f68:	51 1d       	adc	r21, r1
    5f6a:	bb f3       	brvs	.-18     	; 0x5f5a <inverse+0xe>
    5f6c:	91 50       	subi	r25, 0x01	; 1
    5f6e:	50 40       	sbci	r21, 0x00	; 0
    5f70:	94 f0       	brlt	.+36     	; 0x5f96 <ldexp+0x38>
    5f72:	59 f0       	breq	.+22     	; 0x5f8a <ldexp+0x2c>
    5f74:	88 23       	and	r24, r24
    5f76:	32 f0       	brmi	.+12     	; 0x5f84 <ldexp+0x26>
    5f78:	66 0f       	add	r22, r22
    5f7a:	77 1f       	adc	r23, r23
    5f7c:	88 1f       	adc	r24, r24
    5f7e:	91 50       	subi	r25, 0x01	; 1
    5f80:	50 40       	sbci	r21, 0x00	; 0
    5f82:	c1 f7       	brne	.-16     	; 0x5f74 <ldexp+0x16>
    5f84:	9e 3f       	cpi	r25, 0xFE	; 254
    5f86:	51 05       	cpc	r21, r1
    5f88:	44 f7       	brge	.-48     	; 0x5f5a <inverse+0xe>
    5f8a:	88 0f       	add	r24, r24
    5f8c:	91 1d       	adc	r25, r1
    5f8e:	96 95       	lsr	r25
    5f90:	87 95       	ror	r24
    5f92:	97 f9       	bld	r25, 7
    5f94:	08 95       	ret
    5f96:	5f 3f       	cpi	r21, 0xFF	; 255
    5f98:	ac f0       	brlt	.+42     	; 0x5fc4 <ldexp+0x66>
    5f9a:	98 3e       	cpi	r25, 0xE8	; 232
    5f9c:	9c f0       	brlt	.+38     	; 0x5fc4 <ldexp+0x66>
    5f9e:	bb 27       	eor	r27, r27
    5fa0:	86 95       	lsr	r24
    5fa2:	77 95       	ror	r23
    5fa4:	67 95       	ror	r22
    5fa6:	b7 95       	ror	r27
    5fa8:	08 f4       	brcc	.+2      	; 0x5fac <ldexp+0x4e>
    5faa:	b1 60       	ori	r27, 0x01	; 1
    5fac:	93 95       	inc	r25
    5fae:	c1 f7       	brne	.-16     	; 0x5fa0 <ldexp+0x42>
    5fb0:	bb 0f       	add	r27, r27
    5fb2:	58 f7       	brcc	.-42     	; 0x5f8a <ldexp+0x2c>
    5fb4:	11 f4       	brne	.+4      	; 0x5fba <ldexp+0x5c>
    5fb6:	60 ff       	sbrs	r22, 0
    5fb8:	e8 cf       	rjmp	.-48     	; 0x5f8a <ldexp+0x2c>
    5fba:	6f 5f       	subi	r22, 0xFF	; 255
    5fbc:	7f 4f       	sbci	r23, 0xFF	; 255
    5fbe:	8f 4f       	sbci	r24, 0xFF	; 255
    5fc0:	9f 4f       	sbci	r25, 0xFF	; 255
    5fc2:	e3 cf       	rjmp	.-58     	; 0x5f8a <ldexp+0x2c>
    5fc4:	7a ce       	rjmp	.-780    	; 0x5cba <__fp_szero>
    5fc6:	0e f0       	brts	.+2      	; 0x5fca <ldexp+0x6c>
    5fc8:	76 c0       	rjmp	.+236    	; 0x60b6 <__fp_mpack>
    5fca:	32 ce       	rjmp	.-924    	; 0x5c30 <__fp_nan>
    5fcc:	68 94       	set
    5fce:	2a ce       	rjmp	.-940    	; 0x5c24 <__fp_inf>

00005fd0 <log>:
    5fd0:	59 de       	rcall	.-846    	; 0x5c84 <__fp_splitA>
    5fd2:	c8 f3       	brcs	.-14     	; 0x5fc6 <ldexp+0x68>
    5fd4:	99 23       	and	r25, r25
    5fd6:	d1 f3       	breq	.-12     	; 0x5fcc <ldexp+0x6e>
    5fd8:	c6 f3       	brts	.-16     	; 0x5fca <ldexp+0x6c>
    5fda:	df 93       	push	r29
    5fdc:	cf 93       	push	r28
    5fde:	1f 93       	push	r17
    5fe0:	0f 93       	push	r16
    5fe2:	ff 92       	push	r15
    5fe4:	c9 2f       	mov	r28, r25
    5fe6:	dd 27       	eor	r29, r29
    5fe8:	88 23       	and	r24, r24
    5fea:	2a f0       	brmi	.+10     	; 0x5ff6 <log+0x26>
    5fec:	21 97       	sbiw	r28, 0x01	; 1
    5fee:	66 0f       	add	r22, r22
    5ff0:	77 1f       	adc	r23, r23
    5ff2:	88 1f       	adc	r24, r24
    5ff4:	da f7       	brpl	.-10     	; 0x5fec <log+0x1c>
    5ff6:	20 e0       	ldi	r18, 0x00	; 0
    5ff8:	30 e0       	ldi	r19, 0x00	; 0
    5ffa:	40 e8       	ldi	r20, 0x80	; 128
    5ffc:	5f eb       	ldi	r21, 0xBF	; 191
    5ffe:	9f e3       	ldi	r25, 0x3F	; 63
    6000:	88 39       	cpi	r24, 0x98	; 152
    6002:	20 f0       	brcs	.+8      	; 0x600c <log+0x3c>
    6004:	80 3e       	cpi	r24, 0xE0	; 224
    6006:	30 f0       	brcs	.+12     	; 0x6014 <log+0x44>
    6008:	21 96       	adiw	r28, 0x01	; 1
    600a:	8f 77       	andi	r24, 0x7F	; 127
    600c:	a9 dc       	rcall	.-1710   	; 0x5960 <__addsf3>
    600e:	e0 ef       	ldi	r30, 0xF0	; 240
    6010:	f0 e0       	ldi	r31, 0x00	; 0
    6012:	03 c0       	rjmp	.+6      	; 0x601a <log+0x4a>
    6014:	a5 dc       	rcall	.-1718   	; 0x5960 <__addsf3>
    6016:	ed e1       	ldi	r30, 0x1D	; 29
    6018:	f1 e0       	ldi	r31, 0x01	; 1
    601a:	73 df       	rcall	.-282    	; 0x5f02 <__fp_powser>
    601c:	8b 01       	movw	r16, r22
    601e:	be 01       	movw	r22, r28
    6020:	ec 01       	movw	r28, r24
    6022:	fb 2e       	mov	r15, r27
    6024:	6f 57       	subi	r22, 0x7F	; 127
    6026:	71 09       	sbc	r23, r1
    6028:	75 95       	asr	r23
    602a:	77 1f       	adc	r23, r23
    602c:	88 0b       	sbc	r24, r24
    602e:	99 0b       	sbc	r25, r25
    6030:	9a dd       	rcall	.-1228   	; 0x5b66 <__floatsisf>
    6032:	28 e1       	ldi	r18, 0x18	; 24
    6034:	32 e7       	ldi	r19, 0x72	; 114
    6036:	41 e3       	ldi	r20, 0x31	; 49
    6038:	5f e3       	ldi	r21, 0x3F	; 63
    603a:	8f de       	rcall	.-738    	; 0x5d5a <__mulsf3x>
    603c:	af 2d       	mov	r26, r15
    603e:	98 01       	movw	r18, r16
    6040:	ae 01       	movw	r20, r28
    6042:	ff 90       	pop	r15
    6044:	0f 91       	pop	r16
    6046:	1f 91       	pop	r17
    6048:	cf 91       	pop	r28
    604a:	df 91       	pop	r29
    604c:	9a dc       	rcall	.-1740   	; 0x5982 <__addsf3x>
    604e:	01 ce       	rjmp	.-1022   	; 0x5c52 <__fp_round>

00006050 <modf>:
    6050:	fa 01       	movw	r30, r20
    6052:	dc 01       	movw	r26, r24
    6054:	aa 0f       	add	r26, r26
    6056:	bb 1f       	adc	r27, r27
    6058:	9b 01       	movw	r18, r22
    605a:	ac 01       	movw	r20, r24
    605c:	bf 57       	subi	r27, 0x7F	; 127
    605e:	28 f4       	brcc	.+10     	; 0x606a <modf+0x1a>
    6060:	22 27       	eor	r18, r18
    6062:	33 27       	eor	r19, r19
    6064:	44 27       	eor	r20, r20
    6066:	50 78       	andi	r21, 0x80	; 128
    6068:	1f c0       	rjmp	.+62     	; 0x60a8 <modf+0x58>
    606a:	b7 51       	subi	r27, 0x17	; 23
    606c:	88 f4       	brcc	.+34     	; 0x6090 <modf+0x40>
    606e:	ab 2f       	mov	r26, r27
    6070:	00 24       	eor	r0, r0
    6072:	46 95       	lsr	r20
    6074:	37 95       	ror	r19
    6076:	27 95       	ror	r18
    6078:	01 1c       	adc	r0, r1
    607a:	a3 95       	inc	r26
    607c:	d2 f3       	brmi	.-12     	; 0x6072 <modf+0x22>
    607e:	00 20       	and	r0, r0
    6080:	69 f0       	breq	.+26     	; 0x609c <modf+0x4c>
    6082:	22 0f       	add	r18, r18
    6084:	33 1f       	adc	r19, r19
    6086:	44 1f       	adc	r20, r20
    6088:	b3 95       	inc	r27
    608a:	da f3       	brmi	.-10     	; 0x6082 <modf+0x32>
    608c:	0d d0       	rcall	.+26     	; 0x60a8 <modf+0x58>
    608e:	67 cc       	rjmp	.-1842   	; 0x595e <__subsf3>
    6090:	61 30       	cpi	r22, 0x01	; 1
    6092:	71 05       	cpc	r23, r1
    6094:	a0 e8       	ldi	r26, 0x80	; 128
    6096:	8a 07       	cpc	r24, r26
    6098:	b9 46       	sbci	r27, 0x69	; 105
    609a:	30 f4       	brcc	.+12     	; 0x60a8 <modf+0x58>
    609c:	9b 01       	movw	r18, r22
    609e:	ac 01       	movw	r20, r24
    60a0:	66 27       	eor	r22, r22
    60a2:	77 27       	eor	r23, r23
    60a4:	88 27       	eor	r24, r24
    60a6:	90 78       	andi	r25, 0x80	; 128
    60a8:	30 96       	adiw	r30, 0x00	; 0
    60aa:	21 f0       	breq	.+8      	; 0x60b4 <modf+0x64>
    60ac:	20 83       	st	Z, r18
    60ae:	31 83       	std	Z+1, r19	; 0x01
    60b0:	42 83       	std	Z+2, r20	; 0x02
    60b2:	53 83       	std	Z+3, r21	; 0x03
    60b4:	08 95       	ret

000060b6 <__fp_mpack>:
    60b6:	9f 3f       	cpi	r25, 0xFF	; 255
    60b8:	31 f0       	breq	.+12     	; 0x60c6 <__fp_mpack_finite+0xc>

000060ba <__fp_mpack_finite>:
    60ba:	91 50       	subi	r25, 0x01	; 1
    60bc:	20 f4       	brcc	.+8      	; 0x60c6 <__fp_mpack_finite+0xc>
    60be:	87 95       	ror	r24
    60c0:	77 95       	ror	r23
    60c2:	67 95       	ror	r22
    60c4:	b7 95       	ror	r27
    60c6:	88 0f       	add	r24, r24
    60c8:	91 1d       	adc	r25, r1
    60ca:	96 95       	lsr	r25
    60cc:	87 95       	ror	r24
    60ce:	97 f9       	bld	r25, 7
    60d0:	08 95       	ret

000060d2 <vfprintf>:
    60d2:	a1 e1       	ldi	r26, 0x11	; 17
    60d4:	b0 e0       	ldi	r27, 0x00	; 0
    60d6:	ee e6       	ldi	r30, 0x6E	; 110
    60d8:	f0 e3       	ldi	r31, 0x30	; 48
    60da:	a4 c3       	rjmp	.+1864   	; 0x6824 <__prologue_saves__>
    60dc:	3c 01       	movw	r6, r24
    60de:	7f 87       	std	Y+15, r23	; 0x0f
    60e0:	6e 87       	std	Y+14, r22	; 0x0e
    60e2:	6a 01       	movw	r12, r20
    60e4:	fc 01       	movw	r30, r24
    60e6:	17 82       	std	Z+7, r1	; 0x07
    60e8:	16 82       	std	Z+6, r1	; 0x06
    60ea:	83 81       	ldd	r24, Z+3	; 0x03
    60ec:	81 fd       	sbrc	r24, 1
    60ee:	03 c0       	rjmp	.+6      	; 0x60f6 <vfprintf+0x24>
    60f0:	6f ef       	ldi	r22, 0xFF	; 255
    60f2:	7f ef       	ldi	r23, 0xFF	; 255
    60f4:	52 c3       	rjmp	.+1700   	; 0x679a <vfprintf+0x6c8>
    60f6:	9e 01       	movw	r18, r28
    60f8:	2f 5f       	subi	r18, 0xFF	; 255
    60fa:	3f 4f       	sbci	r19, 0xFF	; 255
    60fc:	39 8b       	std	Y+17, r19	; 0x11
    60fe:	28 8b       	std	Y+16, r18	; 0x10
    6100:	f3 01       	movw	r30, r6
    6102:	23 81       	ldd	r18, Z+3	; 0x03
    6104:	ee 85       	ldd	r30, Y+14	; 0x0e
    6106:	ff 85       	ldd	r31, Y+15	; 0x0f
    6108:	23 fd       	sbrc	r18, 3
    610a:	85 91       	lpm	r24, Z+
    610c:	23 ff       	sbrs	r18, 3
    610e:	81 91       	ld	r24, Z+
    6110:	ff 87       	std	Y+15, r31	; 0x0f
    6112:	ee 87       	std	Y+14, r30	; 0x0e
    6114:	88 23       	and	r24, r24
    6116:	09 f4       	brne	.+2      	; 0x611a <vfprintf+0x48>
    6118:	3d c3       	rjmp	.+1658   	; 0x6794 <vfprintf+0x6c2>
    611a:	85 32       	cpi	r24, 0x25	; 37
    611c:	51 f4       	brne	.+20     	; 0x6132 <vfprintf+0x60>
    611e:	ee 85       	ldd	r30, Y+14	; 0x0e
    6120:	ff 85       	ldd	r31, Y+15	; 0x0f
    6122:	23 fd       	sbrc	r18, 3
    6124:	85 91       	lpm	r24, Z+
    6126:	23 ff       	sbrs	r18, 3
    6128:	81 91       	ld	r24, Z+
    612a:	ff 87       	std	Y+15, r31	; 0x0f
    612c:	ee 87       	std	Y+14, r30	; 0x0e
    612e:	85 32       	cpi	r24, 0x25	; 37
    6130:	21 f4       	brne	.+8      	; 0x613a <vfprintf+0x68>
    6132:	90 e0       	ldi	r25, 0x00	; 0
    6134:	b3 01       	movw	r22, r6
    6136:	a0 d5       	rcall	.+2880   	; 0x6c78 <fputc>
    6138:	e3 cf       	rjmp	.-58     	; 0x6100 <vfprintf+0x2e>
    613a:	98 2f       	mov	r25, r24
    613c:	10 e0       	ldi	r17, 0x00	; 0
    613e:	88 24       	eor	r8, r8
    6140:	99 24       	eor	r9, r9
    6142:	10 32       	cpi	r17, 0x20	; 32
    6144:	b0 f4       	brcc	.+44     	; 0x6172 <vfprintf+0xa0>
    6146:	9b 32       	cpi	r25, 0x2B	; 43
    6148:	69 f0       	breq	.+26     	; 0x6164 <vfprintf+0x92>
    614a:	9c 32       	cpi	r25, 0x2C	; 44
    614c:	28 f4       	brcc	.+10     	; 0x6158 <vfprintf+0x86>
    614e:	90 32       	cpi	r25, 0x20	; 32
    6150:	51 f0       	breq	.+20     	; 0x6166 <vfprintf+0x94>
    6152:	93 32       	cpi	r25, 0x23	; 35
    6154:	71 f4       	brne	.+28     	; 0x6172 <vfprintf+0xa0>
    6156:	0b c0       	rjmp	.+22     	; 0x616e <vfprintf+0x9c>
    6158:	9d 32       	cpi	r25, 0x2D	; 45
    615a:	39 f0       	breq	.+14     	; 0x616a <vfprintf+0x98>
    615c:	90 33       	cpi	r25, 0x30	; 48
    615e:	49 f4       	brne	.+18     	; 0x6172 <vfprintf+0xa0>
    6160:	11 60       	ori	r17, 0x01	; 1
    6162:	28 c0       	rjmp	.+80     	; 0x61b4 <vfprintf+0xe2>
    6164:	12 60       	ori	r17, 0x02	; 2
    6166:	14 60       	ori	r17, 0x04	; 4
    6168:	25 c0       	rjmp	.+74     	; 0x61b4 <vfprintf+0xe2>
    616a:	18 60       	ori	r17, 0x08	; 8
    616c:	23 c0       	rjmp	.+70     	; 0x61b4 <vfprintf+0xe2>
    616e:	10 61       	ori	r17, 0x10	; 16
    6170:	21 c0       	rjmp	.+66     	; 0x61b4 <vfprintf+0xe2>
    6172:	17 fd       	sbrc	r17, 7
    6174:	2a c0       	rjmp	.+84     	; 0x61ca <vfprintf+0xf8>
    6176:	89 2f       	mov	r24, r25
    6178:	80 53       	subi	r24, 0x30	; 48
    617a:	8a 30       	cpi	r24, 0x0A	; 10
    617c:	78 f4       	brcc	.+30     	; 0x619c <vfprintf+0xca>
    617e:	16 ff       	sbrs	r17, 6
    6180:	06 c0       	rjmp	.+12     	; 0x618e <vfprintf+0xbc>
    6182:	fa e0       	ldi	r31, 0x0A	; 10
    6184:	9f 9e       	mul	r9, r31
    6186:	90 2c       	mov	r9, r0
    6188:	11 24       	eor	r1, r1
    618a:	98 0e       	add	r9, r24
    618c:	13 c0       	rjmp	.+38     	; 0x61b4 <vfprintf+0xe2>
    618e:	3a e0       	ldi	r19, 0x0A	; 10
    6190:	83 9e       	mul	r8, r19
    6192:	80 2c       	mov	r8, r0
    6194:	11 24       	eor	r1, r1
    6196:	88 0e       	add	r8, r24
    6198:	10 62       	ori	r17, 0x20	; 32
    619a:	0c c0       	rjmp	.+24     	; 0x61b4 <vfprintf+0xe2>
    619c:	9e 32       	cpi	r25, 0x2E	; 46
    619e:	21 f4       	brne	.+8      	; 0x61a8 <vfprintf+0xd6>
    61a0:	16 fd       	sbrc	r17, 6
    61a2:	f8 c2       	rjmp	.+1520   	; 0x6794 <vfprintf+0x6c2>
    61a4:	10 64       	ori	r17, 0x40	; 64
    61a6:	06 c0       	rjmp	.+12     	; 0x61b4 <vfprintf+0xe2>
    61a8:	9c 36       	cpi	r25, 0x6C	; 108
    61aa:	11 f4       	brne	.+4      	; 0x61b0 <vfprintf+0xde>
    61ac:	10 68       	ori	r17, 0x80	; 128
    61ae:	02 c0       	rjmp	.+4      	; 0x61b4 <vfprintf+0xe2>
    61b0:	98 36       	cpi	r25, 0x68	; 104
    61b2:	59 f4       	brne	.+22     	; 0x61ca <vfprintf+0xf8>
    61b4:	ee 85       	ldd	r30, Y+14	; 0x0e
    61b6:	ff 85       	ldd	r31, Y+15	; 0x0f
    61b8:	23 fd       	sbrc	r18, 3
    61ba:	95 91       	lpm	r25, Z+
    61bc:	23 ff       	sbrs	r18, 3
    61be:	91 91       	ld	r25, Z+
    61c0:	ff 87       	std	Y+15, r31	; 0x0f
    61c2:	ee 87       	std	Y+14, r30	; 0x0e
    61c4:	99 23       	and	r25, r25
    61c6:	09 f0       	breq	.+2      	; 0x61ca <vfprintf+0xf8>
    61c8:	bc cf       	rjmp	.-136    	; 0x6142 <vfprintf+0x70>
    61ca:	89 2f       	mov	r24, r25
    61cc:	85 54       	subi	r24, 0x45	; 69
    61ce:	83 30       	cpi	r24, 0x03	; 3
    61d0:	20 f4       	brcc	.+8      	; 0x61da <vfprintf+0x108>
    61d2:	81 2f       	mov	r24, r17
    61d4:	80 61       	ori	r24, 0x10	; 16
    61d6:	90 5e       	subi	r25, 0xE0	; 224
    61d8:	07 c0       	rjmp	.+14     	; 0x61e8 <vfprintf+0x116>
    61da:	89 2f       	mov	r24, r25
    61dc:	85 56       	subi	r24, 0x65	; 101
    61de:	83 30       	cpi	r24, 0x03	; 3
    61e0:	08 f0       	brcs	.+2      	; 0x61e4 <vfprintf+0x112>
    61e2:	8f c1       	rjmp	.+798    	; 0x6502 <vfprintf+0x430>
    61e4:	81 2f       	mov	r24, r17
    61e6:	8f 7e       	andi	r24, 0xEF	; 239
    61e8:	86 fd       	sbrc	r24, 6
    61ea:	02 c0       	rjmp	.+4      	; 0x61f0 <vfprintf+0x11e>
    61ec:	76 e0       	ldi	r23, 0x06	; 6
    61ee:	97 2e       	mov	r9, r23
    61f0:	6f e3       	ldi	r22, 0x3F	; 63
    61f2:	f6 2e       	mov	r15, r22
    61f4:	f8 22       	and	r15, r24
    61f6:	95 36       	cpi	r25, 0x65	; 101
    61f8:	19 f4       	brne	.+6      	; 0x6200 <vfprintf+0x12e>
    61fa:	f0 e4       	ldi	r31, 0x40	; 64
    61fc:	ff 2a       	or	r15, r31
    61fe:	07 c0       	rjmp	.+14     	; 0x620e <vfprintf+0x13c>
    6200:	96 36       	cpi	r25, 0x66	; 102
    6202:	19 f4       	brne	.+6      	; 0x620a <vfprintf+0x138>
    6204:	20 e8       	ldi	r18, 0x80	; 128
    6206:	f2 2a       	or	r15, r18
    6208:	02 c0       	rjmp	.+4      	; 0x620e <vfprintf+0x13c>
    620a:	91 10       	cpse	r9, r1
    620c:	9a 94       	dec	r9
    620e:	f7 fe       	sbrs	r15, 7
    6210:	0a c0       	rjmp	.+20     	; 0x6226 <vfprintf+0x154>
    6212:	3b e3       	ldi	r19, 0x3B	; 59
    6214:	39 15       	cp	r19, r9
    6216:	18 f4       	brcc	.+6      	; 0x621e <vfprintf+0x14c>
    6218:	5c e3       	ldi	r21, 0x3C	; 60
    621a:	b5 2e       	mov	r11, r21
    621c:	02 c0       	rjmp	.+4      	; 0x6222 <vfprintf+0x150>
    621e:	b9 2c       	mov	r11, r9
    6220:	b3 94       	inc	r11
    6222:	27 e0       	ldi	r18, 0x07	; 7
    6224:	09 c0       	rjmp	.+18     	; 0x6238 <vfprintf+0x166>
    6226:	47 e0       	ldi	r20, 0x07	; 7
    6228:	49 15       	cp	r20, r9
    622a:	20 f4       	brcc	.+8      	; 0x6234 <vfprintf+0x162>
    622c:	bb 24       	eor	r11, r11
    622e:	47 e0       	ldi	r20, 0x07	; 7
    6230:	94 2e       	mov	r9, r20
    6232:	f7 cf       	rjmp	.-18     	; 0x6222 <vfprintf+0x150>
    6234:	29 2d       	mov	r18, r9
    6236:	bb 24       	eor	r11, r11
    6238:	c6 01       	movw	r24, r12
    623a:	04 96       	adiw	r24, 0x04	; 4
    623c:	9d 87       	std	Y+13, r25	; 0x0d
    623e:	8c 87       	std	Y+12, r24	; 0x0c
    6240:	f6 01       	movw	r30, r12
    6242:	60 81       	ld	r22, Z
    6244:	71 81       	ldd	r23, Z+1	; 0x01
    6246:	82 81       	ldd	r24, Z+2	; 0x02
    6248:	93 81       	ldd	r25, Z+3	; 0x03
    624a:	ae 01       	movw	r20, r28
    624c:	4f 5f       	subi	r20, 0xFF	; 255
    624e:	5f 4f       	sbci	r21, 0xFF	; 255
    6250:	0b 2d       	mov	r16, r11
    6252:	24 d4       	rcall	.+2120   	; 0x6a9c <__ftoa_engine>
    6254:	6c 01       	movw	r12, r24
    6256:	09 81       	ldd	r16, Y+1	; 0x01
    6258:	20 2e       	mov	r2, r16
    625a:	33 24       	eor	r3, r3
    625c:	00 ff       	sbrs	r16, 0
    625e:	04 c0       	rjmp	.+8      	; 0x6268 <vfprintf+0x196>
    6260:	03 fd       	sbrc	r16, 3
    6262:	02 c0       	rjmp	.+4      	; 0x6268 <vfprintf+0x196>
    6264:	1d e2       	ldi	r17, 0x2D	; 45
    6266:	09 c0       	rjmp	.+18     	; 0x627a <vfprintf+0x1a8>
    6268:	f1 fe       	sbrs	r15, 1
    626a:	02 c0       	rjmp	.+4      	; 0x6270 <vfprintf+0x19e>
    626c:	1b e2       	ldi	r17, 0x2B	; 43
    626e:	05 c0       	rjmp	.+10     	; 0x627a <vfprintf+0x1a8>
    6270:	f2 fc       	sbrc	r15, 2
    6272:	02 c0       	rjmp	.+4      	; 0x6278 <vfprintf+0x1a6>
    6274:	10 e0       	ldi	r17, 0x00	; 0
    6276:	01 c0       	rjmp	.+2      	; 0x627a <vfprintf+0x1a8>
    6278:	10 e2       	ldi	r17, 0x20	; 32
    627a:	c1 01       	movw	r24, r2
    627c:	8c 70       	andi	r24, 0x0C	; 12
    627e:	90 70       	andi	r25, 0x00	; 0
    6280:	89 2b       	or	r24, r25
    6282:	a1 f1       	breq	.+104    	; 0x62ec <vfprintf+0x21a>
    6284:	11 23       	and	r17, r17
    6286:	11 f4       	brne	.+4      	; 0x628c <vfprintf+0x1ba>
    6288:	83 e0       	ldi	r24, 0x03	; 3
    628a:	01 c0       	rjmp	.+2      	; 0x628e <vfprintf+0x1bc>
    628c:	84 e0       	ldi	r24, 0x04	; 4
    628e:	88 15       	cp	r24, r8
    6290:	10 f0       	brcs	.+4      	; 0x6296 <vfprintf+0x1c4>
    6292:	88 24       	eor	r8, r8
    6294:	09 c0       	rjmp	.+18     	; 0x62a8 <vfprintf+0x1d6>
    6296:	88 1a       	sub	r8, r24
    6298:	f3 fc       	sbrc	r15, 3
    629a:	06 c0       	rjmp	.+12     	; 0x62a8 <vfprintf+0x1d6>
    629c:	80 e2       	ldi	r24, 0x20	; 32
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	b3 01       	movw	r22, r6
    62a2:	ea d4       	rcall	.+2516   	; 0x6c78 <fputc>
    62a4:	8a 94       	dec	r8
    62a6:	d1 f7       	brne	.-12     	; 0x629c <vfprintf+0x1ca>
    62a8:	11 23       	and	r17, r17
    62aa:	21 f0       	breq	.+8      	; 0x62b4 <vfprintf+0x1e2>
    62ac:	81 2f       	mov	r24, r17
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	b3 01       	movw	r22, r6
    62b2:	e2 d4       	rcall	.+2500   	; 0x6c78 <fputc>
    62b4:	23 fe       	sbrs	r2, 3
    62b6:	03 c0       	rjmp	.+6      	; 0x62be <vfprintf+0x1ec>
    62b8:	0f e5       	ldi	r16, 0x5F	; 95
    62ba:	15 e0       	ldi	r17, 0x05	; 5
    62bc:	0d c0       	rjmp	.+26     	; 0x62d8 <vfprintf+0x206>
    62be:	03 e6       	ldi	r16, 0x63	; 99
    62c0:	15 e0       	ldi	r17, 0x05	; 5
    62c2:	0a c0       	rjmp	.+20     	; 0x62d8 <vfprintf+0x206>
    62c4:	e1 14       	cp	r14, r1
    62c6:	f1 04       	cpc	r15, r1
    62c8:	09 f0       	breq	.+2      	; 0x62cc <vfprintf+0x1fa>
    62ca:	80 52       	subi	r24, 0x20	; 32
    62cc:	90 e0       	ldi	r25, 0x00	; 0
    62ce:	b3 01       	movw	r22, r6
    62d0:	d3 d4       	rcall	.+2470   	; 0x6c78 <fputc>
    62d2:	0f 5f       	subi	r16, 0xFF	; 255
    62d4:	1f 4f       	sbci	r17, 0xFF	; 255
    62d6:	05 c0       	rjmp	.+10     	; 0x62e2 <vfprintf+0x210>
    62d8:	ef 2c       	mov	r14, r15
    62da:	ff 24       	eor	r15, r15
    62dc:	f0 e1       	ldi	r31, 0x10	; 16
    62de:	ef 22       	and	r14, r31
    62e0:	ff 24       	eor	r15, r15
    62e2:	f8 01       	movw	r30, r16
    62e4:	84 91       	lpm	r24, Z+
    62e6:	88 23       	and	r24, r24
    62e8:	69 f7       	brne	.-38     	; 0x62c4 <vfprintf+0x1f2>
    62ea:	08 c1       	rjmp	.+528    	; 0x64fc <vfprintf+0x42a>
    62ec:	f7 fe       	sbrs	r15, 7
    62ee:	12 c0       	rjmp	.+36     	; 0x6314 <vfprintf+0x242>
    62f0:	bc 0c       	add	r11, r12
    62f2:	24 fe       	sbrs	r2, 4
    62f4:	04 c0       	rjmp	.+8      	; 0x62fe <vfprintf+0x22c>
    62f6:	8a 81       	ldd	r24, Y+2	; 0x02
    62f8:	81 33       	cpi	r24, 0x31	; 49
    62fa:	09 f4       	brne	.+2      	; 0x62fe <vfprintf+0x22c>
    62fc:	ba 94       	dec	r11
    62fe:	1b 14       	cp	r1, r11
    6300:	1c f0       	brlt	.+6      	; 0x6308 <vfprintf+0x236>
    6302:	bb 24       	eor	r11, r11
    6304:	b3 94       	inc	r11
    6306:	2d c0       	rjmp	.+90     	; 0x6362 <vfprintf+0x290>
    6308:	f8 e0       	ldi	r31, 0x08	; 8
    630a:	fb 15       	cp	r31, r11
    630c:	50 f5       	brcc	.+84     	; 0x6362 <vfprintf+0x290>
    630e:	38 e0       	ldi	r19, 0x08	; 8
    6310:	b3 2e       	mov	r11, r19
    6312:	27 c0       	rjmp	.+78     	; 0x6362 <vfprintf+0x290>
    6314:	f6 fc       	sbrc	r15, 6
    6316:	25 c0       	rjmp	.+74     	; 0x6362 <vfprintf+0x290>
    6318:	89 2d       	mov	r24, r9
    631a:	90 e0       	ldi	r25, 0x00	; 0
    631c:	8c 15       	cp	r24, r12
    631e:	9d 05       	cpc	r25, r13
    6320:	4c f0       	brlt	.+18     	; 0x6334 <vfprintf+0x262>
    6322:	2c ef       	ldi	r18, 0xFC	; 252
    6324:	c2 16       	cp	r12, r18
    6326:	2f ef       	ldi	r18, 0xFF	; 255
    6328:	d2 06       	cpc	r13, r18
    632a:	24 f0       	brlt	.+8      	; 0x6334 <vfprintf+0x262>
    632c:	30 e8       	ldi	r19, 0x80	; 128
    632e:	f3 2a       	or	r15, r19
    6330:	01 c0       	rjmp	.+2      	; 0x6334 <vfprintf+0x262>
    6332:	9a 94       	dec	r9
    6334:	99 20       	and	r9, r9
    6336:	49 f0       	breq	.+18     	; 0x634a <vfprintf+0x278>
    6338:	e2 e0       	ldi	r30, 0x02	; 2
    633a:	f0 e0       	ldi	r31, 0x00	; 0
    633c:	ec 0f       	add	r30, r28
    633e:	fd 1f       	adc	r31, r29
    6340:	e9 0d       	add	r30, r9
    6342:	f1 1d       	adc	r31, r1
    6344:	80 81       	ld	r24, Z
    6346:	80 33       	cpi	r24, 0x30	; 48
    6348:	a1 f3       	breq	.-24     	; 0x6332 <vfprintf+0x260>
    634a:	f7 fe       	sbrs	r15, 7
    634c:	0a c0       	rjmp	.+20     	; 0x6362 <vfprintf+0x290>
    634e:	b9 2c       	mov	r11, r9
    6350:	b3 94       	inc	r11
    6352:	89 2d       	mov	r24, r9
    6354:	90 e0       	ldi	r25, 0x00	; 0
    6356:	c8 16       	cp	r12, r24
    6358:	d9 06       	cpc	r13, r25
    635a:	14 f0       	brlt	.+4      	; 0x6360 <vfprintf+0x28e>
    635c:	99 24       	eor	r9, r9
    635e:	01 c0       	rjmp	.+2      	; 0x6362 <vfprintf+0x290>
    6360:	9c 18       	sub	r9, r12
    6362:	f7 fc       	sbrc	r15, 7
    6364:	03 c0       	rjmp	.+6      	; 0x636c <vfprintf+0x29a>
    6366:	25 e0       	ldi	r18, 0x05	; 5
    6368:	30 e0       	ldi	r19, 0x00	; 0
    636a:	09 c0       	rjmp	.+18     	; 0x637e <vfprintf+0x2ac>
    636c:	1c 14       	cp	r1, r12
    636e:	1d 04       	cpc	r1, r13
    6370:	1c f0       	brlt	.+6      	; 0x6378 <vfprintf+0x2a6>
    6372:	21 e0       	ldi	r18, 0x01	; 1
    6374:	30 e0       	ldi	r19, 0x00	; 0
    6376:	03 c0       	rjmp	.+6      	; 0x637e <vfprintf+0x2ac>
    6378:	96 01       	movw	r18, r12
    637a:	2f 5f       	subi	r18, 0xFF	; 255
    637c:	3f 4f       	sbci	r19, 0xFF	; 255
    637e:	11 23       	and	r17, r17
    6380:	11 f0       	breq	.+4      	; 0x6386 <vfprintf+0x2b4>
    6382:	2f 5f       	subi	r18, 0xFF	; 255
    6384:	3f 4f       	sbci	r19, 0xFF	; 255
    6386:	99 20       	and	r9, r9
    6388:	29 f0       	breq	.+10     	; 0x6394 <vfprintf+0x2c2>
    638a:	89 2d       	mov	r24, r9
    638c:	90 e0       	ldi	r25, 0x00	; 0
    638e:	01 96       	adiw	r24, 0x01	; 1
    6390:	28 0f       	add	r18, r24
    6392:	39 1f       	adc	r19, r25
    6394:	88 2d       	mov	r24, r8
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	28 17       	cp	r18, r24
    639a:	39 07       	cpc	r19, r25
    639c:	14 f0       	brlt	.+4      	; 0x63a2 <vfprintf+0x2d0>
    639e:	88 24       	eor	r8, r8
    63a0:	01 c0       	rjmp	.+2      	; 0x63a4 <vfprintf+0x2d2>
    63a2:	82 1a       	sub	r8, r18
    63a4:	4f 2c       	mov	r4, r15
    63a6:	55 24       	eor	r5, r5
    63a8:	c2 01       	movw	r24, r4
    63aa:	89 70       	andi	r24, 0x09	; 9
    63ac:	90 70       	andi	r25, 0x00	; 0
    63ae:	89 2b       	or	r24, r25
    63b0:	31 f0       	breq	.+12     	; 0x63be <vfprintf+0x2ec>
    63b2:	07 c0       	rjmp	.+14     	; 0x63c2 <vfprintf+0x2f0>
    63b4:	80 e2       	ldi	r24, 0x20	; 32
    63b6:	90 e0       	ldi	r25, 0x00	; 0
    63b8:	b3 01       	movw	r22, r6
    63ba:	5e d4       	rcall	.+2236   	; 0x6c78 <fputc>
    63bc:	8a 94       	dec	r8
    63be:	88 20       	and	r8, r8
    63c0:	c9 f7       	brne	.-14     	; 0x63b4 <vfprintf+0x2e2>
    63c2:	11 23       	and	r17, r17
    63c4:	21 f0       	breq	.+8      	; 0x63ce <vfprintf+0x2fc>
    63c6:	81 2f       	mov	r24, r17
    63c8:	90 e0       	ldi	r25, 0x00	; 0
    63ca:	b3 01       	movw	r22, r6
    63cc:	55 d4       	rcall	.+2218   	; 0x6c78 <fputc>
    63ce:	43 fe       	sbrs	r4, 3
    63d0:	06 c0       	rjmp	.+12     	; 0x63de <vfprintf+0x30c>
    63d2:	07 c0       	rjmp	.+14     	; 0x63e2 <vfprintf+0x310>
    63d4:	80 e3       	ldi	r24, 0x30	; 48
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	b3 01       	movw	r22, r6
    63da:	4e d4       	rcall	.+2204   	; 0x6c78 <fputc>
    63dc:	8a 94       	dec	r8
    63de:	88 20       	and	r8, r8
    63e0:	c9 f7       	brne	.-14     	; 0x63d4 <vfprintf+0x302>
    63e2:	f7 fe       	sbrs	r15, 7
    63e4:	44 c0       	rjmp	.+136    	; 0x646e <vfprintf+0x39c>
    63e6:	86 01       	movw	r16, r12
    63e8:	d7 fe       	sbrs	r13, 7
    63ea:	02 c0       	rjmp	.+4      	; 0x63f0 <vfprintf+0x31e>
    63ec:	00 e0       	ldi	r16, 0x00	; 0
    63ee:	10 e0       	ldi	r17, 0x00	; 0
    63f0:	76 01       	movw	r14, r12
    63f2:	08 94       	sec
    63f4:	e1 1c       	adc	r14, r1
    63f6:	f1 1c       	adc	r15, r1
    63f8:	e0 1a       	sub	r14, r16
    63fa:	f1 0a       	sbc	r15, r17
    63fc:	41 e0       	ldi	r20, 0x01	; 1
    63fe:	50 e0       	ldi	r21, 0x00	; 0
    6400:	4c 0f       	add	r20, r28
    6402:	5d 1f       	adc	r21, r29
    6404:	e4 0e       	add	r14, r20
    6406:	f5 1e       	adc	r15, r21
    6408:	26 01       	movw	r4, r12
    640a:	4b 18       	sub	r4, r11
    640c:	51 08       	sbc	r5, r1
    640e:	89 2d       	mov	r24, r9
    6410:	90 e0       	ldi	r25, 0x00	; 0
    6412:	aa 24       	eor	r10, r10
    6414:	bb 24       	eor	r11, r11
    6416:	a8 1a       	sub	r10, r24
    6418:	b9 0a       	sbc	r11, r25
    641a:	5f ef       	ldi	r21, 0xFF	; 255
    641c:	0f 3f       	cpi	r16, 0xFF	; 255
    641e:	15 07       	cpc	r17, r21
    6420:	21 f4       	brne	.+8      	; 0x642a <vfprintf+0x358>
    6422:	8e e2       	ldi	r24, 0x2E	; 46
    6424:	90 e0       	ldi	r25, 0x00	; 0
    6426:	b3 01       	movw	r22, r6
    6428:	27 d4       	rcall	.+2126   	; 0x6c78 <fputc>
    642a:	c0 16       	cp	r12, r16
    642c:	d1 06       	cpc	r13, r17
    642e:	34 f0       	brlt	.+12     	; 0x643c <vfprintf+0x36a>
    6430:	40 16       	cp	r4, r16
    6432:	51 06       	cpc	r5, r17
    6434:	1c f4       	brge	.+6      	; 0x643c <vfprintf+0x36a>
    6436:	f7 01       	movw	r30, r14
    6438:	80 81       	ld	r24, Z
    643a:	01 c0       	rjmp	.+2      	; 0x643e <vfprintf+0x36c>
    643c:	80 e3       	ldi	r24, 0x30	; 48
    643e:	01 50       	subi	r16, 0x01	; 1
    6440:	10 40       	sbci	r17, 0x00	; 0
    6442:	08 94       	sec
    6444:	e1 1c       	adc	r14, r1
    6446:	f1 1c       	adc	r15, r1
    6448:	0a 15       	cp	r16, r10
    644a:	1b 05       	cpc	r17, r11
    644c:	24 f0       	brlt	.+8      	; 0x6456 <vfprintf+0x384>
    644e:	90 e0       	ldi	r25, 0x00	; 0
    6450:	b3 01       	movw	r22, r6
    6452:	12 d4       	rcall	.+2084   	; 0x6c78 <fputc>
    6454:	e2 cf       	rjmp	.-60     	; 0x641a <vfprintf+0x348>
    6456:	0c 15       	cp	r16, r12
    6458:	1d 05       	cpc	r17, r13
    645a:	39 f4       	brne	.+14     	; 0x646a <vfprintf+0x398>
    645c:	9a 81       	ldd	r25, Y+2	; 0x02
    645e:	96 33       	cpi	r25, 0x36	; 54
    6460:	18 f4       	brcc	.+6      	; 0x6468 <vfprintf+0x396>
    6462:	95 33       	cpi	r25, 0x35	; 53
    6464:	11 f4       	brne	.+4      	; 0x646a <vfprintf+0x398>
    6466:	24 fe       	sbrs	r2, 4
    6468:	81 e3       	ldi	r24, 0x31	; 49
    646a:	90 e0       	ldi	r25, 0x00	; 0
    646c:	45 c0       	rjmp	.+138    	; 0x64f8 <vfprintf+0x426>
    646e:	8a 81       	ldd	r24, Y+2	; 0x02
    6470:	81 33       	cpi	r24, 0x31	; 49
    6472:	09 f0       	breq	.+2      	; 0x6476 <vfprintf+0x3a4>
    6474:	0f 7e       	andi	r16, 0xEF	; 239
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	b3 01       	movw	r22, r6
    647a:	fe d3       	rcall	.+2044   	; 0x6c78 <fputc>
    647c:	99 20       	and	r9, r9
    647e:	91 f0       	breq	.+36     	; 0x64a4 <vfprintf+0x3d2>
    6480:	8e e2       	ldi	r24, 0x2E	; 46
    6482:	90 e0       	ldi	r25, 0x00	; 0
    6484:	b3 01       	movw	r22, r6
    6486:	f8 d3       	rcall	.+2032   	; 0x6c78 <fputc>
    6488:	12 e0       	ldi	r17, 0x02	; 2
    648a:	e1 e0       	ldi	r30, 0x01	; 1
    648c:	f0 e0       	ldi	r31, 0x00	; 0
    648e:	ec 0f       	add	r30, r28
    6490:	fd 1f       	adc	r31, r29
    6492:	e1 0f       	add	r30, r17
    6494:	f1 1d       	adc	r31, r1
    6496:	1f 5f       	subi	r17, 0xFF	; 255
    6498:	80 81       	ld	r24, Z
    649a:	90 e0       	ldi	r25, 0x00	; 0
    649c:	b3 01       	movw	r22, r6
    649e:	ec d3       	rcall	.+2008   	; 0x6c78 <fputc>
    64a0:	9a 94       	dec	r9
    64a2:	99 f7       	brne	.-26     	; 0x648a <vfprintf+0x3b8>
    64a4:	44 fc       	sbrc	r4, 4
    64a6:	03 c0       	rjmp	.+6      	; 0x64ae <vfprintf+0x3dc>
    64a8:	85 e6       	ldi	r24, 0x65	; 101
    64aa:	90 e0       	ldi	r25, 0x00	; 0
    64ac:	02 c0       	rjmp	.+4      	; 0x64b2 <vfprintf+0x3e0>
    64ae:	85 e4       	ldi	r24, 0x45	; 69
    64b0:	90 e0       	ldi	r25, 0x00	; 0
    64b2:	b3 01       	movw	r22, r6
    64b4:	e1 d3       	rcall	.+1986   	; 0x6c78 <fputc>
    64b6:	d7 fc       	sbrc	r13, 7
    64b8:	05 c0       	rjmp	.+10     	; 0x64c4 <vfprintf+0x3f2>
    64ba:	c1 14       	cp	r12, r1
    64bc:	d1 04       	cpc	r13, r1
    64be:	41 f4       	brne	.+16     	; 0x64d0 <vfprintf+0x3fe>
    64c0:	04 ff       	sbrs	r16, 4
    64c2:	06 c0       	rjmp	.+12     	; 0x64d0 <vfprintf+0x3fe>
    64c4:	d0 94       	com	r13
    64c6:	c1 94       	neg	r12
    64c8:	d1 08       	sbc	r13, r1
    64ca:	d3 94       	inc	r13
    64cc:	8d e2       	ldi	r24, 0x2D	; 45
    64ce:	01 c0       	rjmp	.+2      	; 0x64d2 <vfprintf+0x400>
    64d0:	8b e2       	ldi	r24, 0x2B	; 43
    64d2:	90 e0       	ldi	r25, 0x00	; 0
    64d4:	b3 01       	movw	r22, r6
    64d6:	d0 d3       	rcall	.+1952   	; 0x6c78 <fputc>
    64d8:	80 e3       	ldi	r24, 0x30	; 48
    64da:	05 c0       	rjmp	.+10     	; 0x64e6 <vfprintf+0x414>
    64dc:	8f 5f       	subi	r24, 0xFF	; 255
    64de:	26 ef       	ldi	r18, 0xF6	; 246
    64e0:	3f ef       	ldi	r19, 0xFF	; 255
    64e2:	c2 0e       	add	r12, r18
    64e4:	d3 1e       	adc	r13, r19
    64e6:	3a e0       	ldi	r19, 0x0A	; 10
    64e8:	c3 16       	cp	r12, r19
    64ea:	d1 04       	cpc	r13, r1
    64ec:	bc f7       	brge	.-18     	; 0x64dc <vfprintf+0x40a>
    64ee:	90 e0       	ldi	r25, 0x00	; 0
    64f0:	b3 01       	movw	r22, r6
    64f2:	c2 d3       	rcall	.+1924   	; 0x6c78 <fputc>
    64f4:	c6 01       	movw	r24, r12
    64f6:	c0 96       	adiw	r24, 0x30	; 48
    64f8:	b3 01       	movw	r22, r6
    64fa:	be d3       	rcall	.+1916   	; 0x6c78 <fputc>
    64fc:	cc 84       	ldd	r12, Y+12	; 0x0c
    64fe:	dd 84       	ldd	r13, Y+13	; 0x0d
    6500:	46 c1       	rjmp	.+652    	; 0x678e <vfprintf+0x6bc>
    6502:	93 36       	cpi	r25, 0x63	; 99
    6504:	31 f0       	breq	.+12     	; 0x6512 <vfprintf+0x440>
    6506:	93 37       	cpi	r25, 0x73	; 115
    6508:	99 f0       	breq	.+38     	; 0x6530 <vfprintf+0x45e>
    650a:	93 35       	cpi	r25, 0x53	; 83
    650c:	09 f0       	breq	.+2      	; 0x6510 <vfprintf+0x43e>
    650e:	55 c0       	rjmp	.+170    	; 0x65ba <vfprintf+0x4e8>
    6510:	22 c0       	rjmp	.+68     	; 0x6556 <vfprintf+0x484>
    6512:	f6 01       	movw	r30, r12
    6514:	80 81       	ld	r24, Z
    6516:	89 83       	std	Y+1, r24	; 0x01
    6518:	5e 01       	movw	r10, r28
    651a:	08 94       	sec
    651c:	a1 1c       	adc	r10, r1
    651e:	b1 1c       	adc	r11, r1
    6520:	22 e0       	ldi	r18, 0x02	; 2
    6522:	30 e0       	ldi	r19, 0x00	; 0
    6524:	c2 0e       	add	r12, r18
    6526:	d3 1e       	adc	r13, r19
    6528:	21 e0       	ldi	r18, 0x01	; 1
    652a:	e2 2e       	mov	r14, r18
    652c:	f1 2c       	mov	r15, r1
    652e:	11 c0       	rjmp	.+34     	; 0x6552 <vfprintf+0x480>
    6530:	f6 01       	movw	r30, r12
    6532:	a0 80       	ld	r10, Z
    6534:	b1 80       	ldd	r11, Z+1	; 0x01
    6536:	16 fd       	sbrc	r17, 6
    6538:	03 c0       	rjmp	.+6      	; 0x6540 <vfprintf+0x46e>
    653a:	6f ef       	ldi	r22, 0xFF	; 255
    653c:	7f ef       	ldi	r23, 0xFF	; 255
    653e:	02 c0       	rjmp	.+4      	; 0x6544 <vfprintf+0x472>
    6540:	69 2d       	mov	r22, r9
    6542:	70 e0       	ldi	r23, 0x00	; 0
    6544:	22 e0       	ldi	r18, 0x02	; 2
    6546:	30 e0       	ldi	r19, 0x00	; 0
    6548:	c2 0e       	add	r12, r18
    654a:	d3 1e       	adc	r13, r19
    654c:	c5 01       	movw	r24, r10
    654e:	89 d3       	rcall	.+1810   	; 0x6c62 <strnlen>
    6550:	7c 01       	movw	r14, r24
    6552:	1f 77       	andi	r17, 0x7F	; 127
    6554:	12 c0       	rjmp	.+36     	; 0x657a <vfprintf+0x4a8>
    6556:	f6 01       	movw	r30, r12
    6558:	a0 80       	ld	r10, Z
    655a:	b1 80       	ldd	r11, Z+1	; 0x01
    655c:	16 fd       	sbrc	r17, 6
    655e:	03 c0       	rjmp	.+6      	; 0x6566 <vfprintf+0x494>
    6560:	6f ef       	ldi	r22, 0xFF	; 255
    6562:	7f ef       	ldi	r23, 0xFF	; 255
    6564:	02 c0       	rjmp	.+4      	; 0x656a <vfprintf+0x498>
    6566:	69 2d       	mov	r22, r9
    6568:	70 e0       	ldi	r23, 0x00	; 0
    656a:	22 e0       	ldi	r18, 0x02	; 2
    656c:	30 e0       	ldi	r19, 0x00	; 0
    656e:	c2 0e       	add	r12, r18
    6570:	d3 1e       	adc	r13, r19
    6572:	c5 01       	movw	r24, r10
    6574:	6b d3       	rcall	.+1750   	; 0x6c4c <strnlen_P>
    6576:	7c 01       	movw	r14, r24
    6578:	10 68       	ori	r17, 0x80	; 128
    657a:	13 ff       	sbrs	r17, 3
    657c:	06 c0       	rjmp	.+12     	; 0x658a <vfprintf+0x4b8>
    657e:	19 c0       	rjmp	.+50     	; 0x65b2 <vfprintf+0x4e0>
    6580:	80 e2       	ldi	r24, 0x20	; 32
    6582:	90 e0       	ldi	r25, 0x00	; 0
    6584:	b3 01       	movw	r22, r6
    6586:	78 d3       	rcall	.+1776   	; 0x6c78 <fputc>
    6588:	8a 94       	dec	r8
    658a:	88 2d       	mov	r24, r8
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	e8 16       	cp	r14, r24
    6590:	f9 06       	cpc	r15, r25
    6592:	b0 f3       	brcs	.-20     	; 0x6580 <vfprintf+0x4ae>
    6594:	0e c0       	rjmp	.+28     	; 0x65b2 <vfprintf+0x4e0>
    6596:	f5 01       	movw	r30, r10
    6598:	17 fd       	sbrc	r17, 7
    659a:	85 91       	lpm	r24, Z+
    659c:	17 ff       	sbrs	r17, 7
    659e:	81 91       	ld	r24, Z+
    65a0:	5f 01       	movw	r10, r30
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	b3 01       	movw	r22, r6
    65a6:	68 d3       	rcall	.+1744   	; 0x6c78 <fputc>
    65a8:	81 10       	cpse	r8, r1
    65aa:	8a 94       	dec	r8
    65ac:	08 94       	sec
    65ae:	e1 08       	sbc	r14, r1
    65b0:	f1 08       	sbc	r15, r1
    65b2:	e1 14       	cp	r14, r1
    65b4:	f1 04       	cpc	r15, r1
    65b6:	79 f7       	brne	.-34     	; 0x6596 <vfprintf+0x4c4>
    65b8:	ea c0       	rjmp	.+468    	; 0x678e <vfprintf+0x6bc>
    65ba:	94 36       	cpi	r25, 0x64	; 100
    65bc:	11 f0       	breq	.+4      	; 0x65c2 <vfprintf+0x4f0>
    65be:	99 36       	cpi	r25, 0x69	; 105
    65c0:	81 f5       	brne	.+96     	; 0x6622 <vfprintf+0x550>
    65c2:	17 ff       	sbrs	r17, 7
    65c4:	08 c0       	rjmp	.+16     	; 0x65d6 <vfprintf+0x504>
    65c6:	f6 01       	movw	r30, r12
    65c8:	20 81       	ld	r18, Z
    65ca:	31 81       	ldd	r19, Z+1	; 0x01
    65cc:	42 81       	ldd	r20, Z+2	; 0x02
    65ce:	53 81       	ldd	r21, Z+3	; 0x03
    65d0:	84 e0       	ldi	r24, 0x04	; 4
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	0a c0       	rjmp	.+20     	; 0x65ea <vfprintf+0x518>
    65d6:	f6 01       	movw	r30, r12
    65d8:	80 81       	ld	r24, Z
    65da:	91 81       	ldd	r25, Z+1	; 0x01
    65dc:	9c 01       	movw	r18, r24
    65de:	44 27       	eor	r20, r20
    65e0:	37 fd       	sbrc	r19, 7
    65e2:	40 95       	com	r20
    65e4:	54 2f       	mov	r21, r20
    65e6:	82 e0       	ldi	r24, 0x02	; 2
    65e8:	90 e0       	ldi	r25, 0x00	; 0
    65ea:	c8 0e       	add	r12, r24
    65ec:	d9 1e       	adc	r13, r25
    65ee:	9f e6       	ldi	r25, 0x6F	; 111
    65f0:	f9 2e       	mov	r15, r25
    65f2:	f1 22       	and	r15, r17
    65f4:	57 ff       	sbrs	r21, 7
    65f6:	09 c0       	rjmp	.+18     	; 0x660a <vfprintf+0x538>
    65f8:	50 95       	com	r21
    65fa:	40 95       	com	r20
    65fc:	30 95       	com	r19
    65fe:	21 95       	neg	r18
    6600:	3f 4f       	sbci	r19, 0xFF	; 255
    6602:	4f 4f       	sbci	r20, 0xFF	; 255
    6604:	5f 4f       	sbci	r21, 0xFF	; 255
    6606:	90 e8       	ldi	r25, 0x80	; 128
    6608:	f9 2a       	or	r15, r25
    660a:	ca 01       	movw	r24, r20
    660c:	b9 01       	movw	r22, r18
    660e:	ae 01       	movw	r20, r28
    6610:	4f 5f       	subi	r20, 0xFF	; 255
    6612:	5f 4f       	sbci	r21, 0xFF	; 255
    6614:	2a e0       	ldi	r18, 0x0A	; 10
    6616:	30 e0       	ldi	r19, 0x00	; 0
    6618:	a2 d3       	rcall	.+1860   	; 0x6d5e <__ultoa_invert>
    661a:	e8 2e       	mov	r14, r24
    661c:	e8 89       	ldd	r30, Y+16	; 0x10
    661e:	ee 1a       	sub	r14, r30
    6620:	40 c0       	rjmp	.+128    	; 0x66a2 <vfprintf+0x5d0>
    6622:	95 37       	cpi	r25, 0x75	; 117
    6624:	21 f4       	brne	.+8      	; 0x662e <vfprintf+0x55c>
    6626:	1f 7e       	andi	r17, 0xEF	; 239
    6628:	2a e0       	ldi	r18, 0x0A	; 10
    662a:	30 e0       	ldi	r19, 0x00	; 0
    662c:	1c c0       	rjmp	.+56     	; 0x6666 <vfprintf+0x594>
    662e:	19 7f       	andi	r17, 0xF9	; 249
    6630:	9f 36       	cpi	r25, 0x6F	; 111
    6632:	61 f0       	breq	.+24     	; 0x664c <vfprintf+0x57a>
    6634:	90 37       	cpi	r25, 0x70	; 112
    6636:	20 f4       	brcc	.+8      	; 0x6640 <vfprintf+0x56e>
    6638:	98 35       	cpi	r25, 0x58	; 88
    663a:	09 f0       	breq	.+2      	; 0x663e <vfprintf+0x56c>
    663c:	ab c0       	rjmp	.+342    	; 0x6794 <vfprintf+0x6c2>
    663e:	0f c0       	rjmp	.+30     	; 0x665e <vfprintf+0x58c>
    6640:	90 37       	cpi	r25, 0x70	; 112
    6642:	39 f0       	breq	.+14     	; 0x6652 <vfprintf+0x580>
    6644:	98 37       	cpi	r25, 0x78	; 120
    6646:	09 f0       	breq	.+2      	; 0x664a <vfprintf+0x578>
    6648:	a5 c0       	rjmp	.+330    	; 0x6794 <vfprintf+0x6c2>
    664a:	04 c0       	rjmp	.+8      	; 0x6654 <vfprintf+0x582>
    664c:	28 e0       	ldi	r18, 0x08	; 8
    664e:	30 e0       	ldi	r19, 0x00	; 0
    6650:	0a c0       	rjmp	.+20     	; 0x6666 <vfprintf+0x594>
    6652:	10 61       	ori	r17, 0x10	; 16
    6654:	14 fd       	sbrc	r17, 4
    6656:	14 60       	ori	r17, 0x04	; 4
    6658:	20 e1       	ldi	r18, 0x10	; 16
    665a:	30 e0       	ldi	r19, 0x00	; 0
    665c:	04 c0       	rjmp	.+8      	; 0x6666 <vfprintf+0x594>
    665e:	14 fd       	sbrc	r17, 4
    6660:	16 60       	ori	r17, 0x06	; 6
    6662:	20 e1       	ldi	r18, 0x10	; 16
    6664:	32 e0       	ldi	r19, 0x02	; 2
    6666:	17 ff       	sbrs	r17, 7
    6668:	08 c0       	rjmp	.+16     	; 0x667a <vfprintf+0x5a8>
    666a:	f6 01       	movw	r30, r12
    666c:	60 81       	ld	r22, Z
    666e:	71 81       	ldd	r23, Z+1	; 0x01
    6670:	82 81       	ldd	r24, Z+2	; 0x02
    6672:	93 81       	ldd	r25, Z+3	; 0x03
    6674:	44 e0       	ldi	r20, 0x04	; 4
    6676:	50 e0       	ldi	r21, 0x00	; 0
    6678:	08 c0       	rjmp	.+16     	; 0x668a <vfprintf+0x5b8>
    667a:	f6 01       	movw	r30, r12
    667c:	80 81       	ld	r24, Z
    667e:	91 81       	ldd	r25, Z+1	; 0x01
    6680:	bc 01       	movw	r22, r24
    6682:	80 e0       	ldi	r24, 0x00	; 0
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	42 e0       	ldi	r20, 0x02	; 2
    6688:	50 e0       	ldi	r21, 0x00	; 0
    668a:	c4 0e       	add	r12, r20
    668c:	d5 1e       	adc	r13, r21
    668e:	ae 01       	movw	r20, r28
    6690:	4f 5f       	subi	r20, 0xFF	; 255
    6692:	5f 4f       	sbci	r21, 0xFF	; 255
    6694:	64 d3       	rcall	.+1736   	; 0x6d5e <__ultoa_invert>
    6696:	e8 2e       	mov	r14, r24
    6698:	58 89       	ldd	r21, Y+16	; 0x10
    669a:	e5 1a       	sub	r14, r21
    669c:	8f e7       	ldi	r24, 0x7F	; 127
    669e:	f8 2e       	mov	r15, r24
    66a0:	f1 22       	and	r15, r17
    66a2:	f6 fe       	sbrs	r15, 6
    66a4:	0b c0       	rjmp	.+22     	; 0x66bc <vfprintf+0x5ea>
    66a6:	8e ef       	ldi	r24, 0xFE	; 254
    66a8:	f8 22       	and	r15, r24
    66aa:	e9 14       	cp	r14, r9
    66ac:	38 f4       	brcc	.+14     	; 0x66bc <vfprintf+0x5ea>
    66ae:	f4 fe       	sbrs	r15, 4
    66b0:	07 c0       	rjmp	.+14     	; 0x66c0 <vfprintf+0x5ee>
    66b2:	f2 fc       	sbrc	r15, 2
    66b4:	05 c0       	rjmp	.+10     	; 0x66c0 <vfprintf+0x5ee>
    66b6:	9f ee       	ldi	r25, 0xEF	; 239
    66b8:	f9 22       	and	r15, r25
    66ba:	02 c0       	rjmp	.+4      	; 0x66c0 <vfprintf+0x5ee>
    66bc:	1e 2d       	mov	r17, r14
    66be:	01 c0       	rjmp	.+2      	; 0x66c2 <vfprintf+0x5f0>
    66c0:	19 2d       	mov	r17, r9
    66c2:	f4 fe       	sbrs	r15, 4
    66c4:	0d c0       	rjmp	.+26     	; 0x66e0 <vfprintf+0x60e>
    66c6:	fe 01       	movw	r30, r28
    66c8:	ee 0d       	add	r30, r14
    66ca:	f1 1d       	adc	r31, r1
    66cc:	80 81       	ld	r24, Z
    66ce:	80 33       	cpi	r24, 0x30	; 48
    66d0:	19 f4       	brne	.+6      	; 0x66d8 <vfprintf+0x606>
    66d2:	e9 ee       	ldi	r30, 0xE9	; 233
    66d4:	fe 22       	and	r15, r30
    66d6:	08 c0       	rjmp	.+16     	; 0x66e8 <vfprintf+0x616>
    66d8:	1f 5f       	subi	r17, 0xFF	; 255
    66da:	f2 fe       	sbrs	r15, 2
    66dc:	05 c0       	rjmp	.+10     	; 0x66e8 <vfprintf+0x616>
    66de:	03 c0       	rjmp	.+6      	; 0x66e6 <vfprintf+0x614>
    66e0:	8f 2d       	mov	r24, r15
    66e2:	86 78       	andi	r24, 0x86	; 134
    66e4:	09 f0       	breq	.+2      	; 0x66e8 <vfprintf+0x616>
    66e6:	1f 5f       	subi	r17, 0xFF	; 255
    66e8:	0f 2d       	mov	r16, r15
    66ea:	f3 fc       	sbrc	r15, 3
    66ec:	13 c0       	rjmp	.+38     	; 0x6714 <vfprintf+0x642>
    66ee:	f0 fe       	sbrs	r15, 0
    66f0:	0e c0       	rjmp	.+28     	; 0x670e <vfprintf+0x63c>
    66f2:	18 15       	cp	r17, r8
    66f4:	10 f0       	brcs	.+4      	; 0x66fa <vfprintf+0x628>
    66f6:	9e 2c       	mov	r9, r14
    66f8:	0a c0       	rjmp	.+20     	; 0x670e <vfprintf+0x63c>
    66fa:	9e 2c       	mov	r9, r14
    66fc:	98 0c       	add	r9, r8
    66fe:	91 1a       	sub	r9, r17
    6700:	18 2d       	mov	r17, r8
    6702:	05 c0       	rjmp	.+10     	; 0x670e <vfprintf+0x63c>
    6704:	80 e2       	ldi	r24, 0x20	; 32
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	b3 01       	movw	r22, r6
    670a:	b6 d2       	rcall	.+1388   	; 0x6c78 <fputc>
    670c:	1f 5f       	subi	r17, 0xFF	; 255
    670e:	18 15       	cp	r17, r8
    6710:	c8 f3       	brcs	.-14     	; 0x6704 <vfprintf+0x632>
    6712:	04 c0       	rjmp	.+8      	; 0x671c <vfprintf+0x64a>
    6714:	18 15       	cp	r17, r8
    6716:	10 f4       	brcc	.+4      	; 0x671c <vfprintf+0x64a>
    6718:	81 1a       	sub	r8, r17
    671a:	01 c0       	rjmp	.+2      	; 0x671e <vfprintf+0x64c>
    671c:	88 24       	eor	r8, r8
    671e:	04 ff       	sbrs	r16, 4
    6720:	0e c0       	rjmp	.+28     	; 0x673e <vfprintf+0x66c>
    6722:	80 e3       	ldi	r24, 0x30	; 48
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	b3 01       	movw	r22, r6
    6728:	a7 d2       	rcall	.+1358   	; 0x6c78 <fputc>
    672a:	02 ff       	sbrs	r16, 2
    672c:	1b c0       	rjmp	.+54     	; 0x6764 <vfprintf+0x692>
    672e:	01 fd       	sbrc	r16, 1
    6730:	03 c0       	rjmp	.+6      	; 0x6738 <vfprintf+0x666>
    6732:	88 e7       	ldi	r24, 0x78	; 120
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	0e c0       	rjmp	.+28     	; 0x6754 <vfprintf+0x682>
    6738:	88 e5       	ldi	r24, 0x58	; 88
    673a:	90 e0       	ldi	r25, 0x00	; 0
    673c:	0b c0       	rjmp	.+22     	; 0x6754 <vfprintf+0x682>
    673e:	80 2f       	mov	r24, r16
    6740:	86 78       	andi	r24, 0x86	; 134
    6742:	81 f0       	breq	.+32     	; 0x6764 <vfprintf+0x692>
    6744:	01 ff       	sbrs	r16, 1
    6746:	02 c0       	rjmp	.+4      	; 0x674c <vfprintf+0x67a>
    6748:	8b e2       	ldi	r24, 0x2B	; 43
    674a:	01 c0       	rjmp	.+2      	; 0x674e <vfprintf+0x67c>
    674c:	80 e2       	ldi	r24, 0x20	; 32
    674e:	f7 fc       	sbrc	r15, 7
    6750:	8d e2       	ldi	r24, 0x2D	; 45
    6752:	90 e0       	ldi	r25, 0x00	; 0
    6754:	b3 01       	movw	r22, r6
    6756:	90 d2       	rcall	.+1312   	; 0x6c78 <fputc>
    6758:	05 c0       	rjmp	.+10     	; 0x6764 <vfprintf+0x692>
    675a:	80 e3       	ldi	r24, 0x30	; 48
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	b3 01       	movw	r22, r6
    6760:	8b d2       	rcall	.+1302   	; 0x6c78 <fputc>
    6762:	9a 94       	dec	r9
    6764:	e9 14       	cp	r14, r9
    6766:	c8 f3       	brcs	.-14     	; 0x675a <vfprintf+0x688>
    6768:	ea 94       	dec	r14
    676a:	e1 e0       	ldi	r30, 0x01	; 1
    676c:	f0 e0       	ldi	r31, 0x00	; 0
    676e:	ec 0f       	add	r30, r28
    6770:	fd 1f       	adc	r31, r29
    6772:	ee 0d       	add	r30, r14
    6774:	f1 1d       	adc	r31, r1
    6776:	80 81       	ld	r24, Z
    6778:	90 e0       	ldi	r25, 0x00	; 0
    677a:	b3 01       	movw	r22, r6
    677c:	7d d2       	rcall	.+1274   	; 0x6c78 <fputc>
    677e:	ee 20       	and	r14, r14
    6780:	99 f7       	brne	.-26     	; 0x6768 <vfprintf+0x696>
    6782:	05 c0       	rjmp	.+10     	; 0x678e <vfprintf+0x6bc>
    6784:	80 e2       	ldi	r24, 0x20	; 32
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	b3 01       	movw	r22, r6
    678a:	76 d2       	rcall	.+1260   	; 0x6c78 <fputc>
    678c:	8a 94       	dec	r8
    678e:	88 20       	and	r8, r8
    6790:	c9 f7       	brne	.-14     	; 0x6784 <vfprintf+0x6b2>
    6792:	b6 cc       	rjmp	.-1684   	; 0x6100 <vfprintf+0x2e>
    6794:	f3 01       	movw	r30, r6
    6796:	66 81       	ldd	r22, Z+6	; 0x06
    6798:	77 81       	ldd	r23, Z+7	; 0x07
    679a:	cb 01       	movw	r24, r22
    679c:	61 96       	adiw	r28, 0x11	; 17
    679e:	e2 e1       	ldi	r30, 0x12	; 18
    67a0:	5d c0       	rjmp	.+186    	; 0x685c <__epilogue_restores__>

000067a2 <__mulsi3>:
    67a2:	62 9f       	mul	r22, r18
    67a4:	d0 01       	movw	r26, r0
    67a6:	73 9f       	mul	r23, r19
    67a8:	f0 01       	movw	r30, r0
    67aa:	82 9f       	mul	r24, r18
    67ac:	e0 0d       	add	r30, r0
    67ae:	f1 1d       	adc	r31, r1
    67b0:	64 9f       	mul	r22, r20
    67b2:	e0 0d       	add	r30, r0
    67b4:	f1 1d       	adc	r31, r1
    67b6:	92 9f       	mul	r25, r18
    67b8:	f0 0d       	add	r31, r0
    67ba:	83 9f       	mul	r24, r19
    67bc:	f0 0d       	add	r31, r0
    67be:	74 9f       	mul	r23, r20
    67c0:	f0 0d       	add	r31, r0
    67c2:	65 9f       	mul	r22, r21
    67c4:	f0 0d       	add	r31, r0
    67c6:	99 27       	eor	r25, r25
    67c8:	72 9f       	mul	r23, r18
    67ca:	b0 0d       	add	r27, r0
    67cc:	e1 1d       	adc	r30, r1
    67ce:	f9 1f       	adc	r31, r25
    67d0:	63 9f       	mul	r22, r19
    67d2:	b0 0d       	add	r27, r0
    67d4:	e1 1d       	adc	r30, r1
    67d6:	f9 1f       	adc	r31, r25
    67d8:	bd 01       	movw	r22, r26
    67da:	cf 01       	movw	r24, r30
    67dc:	11 24       	eor	r1, r1
    67de:	08 95       	ret

000067e0 <__udivmodsi4>:
    67e0:	a1 e2       	ldi	r26, 0x21	; 33
    67e2:	1a 2e       	mov	r1, r26
    67e4:	aa 1b       	sub	r26, r26
    67e6:	bb 1b       	sub	r27, r27
    67e8:	fd 01       	movw	r30, r26
    67ea:	0d c0       	rjmp	.+26     	; 0x6806 <__udivmodsi4_ep>

000067ec <__udivmodsi4_loop>:
    67ec:	aa 1f       	adc	r26, r26
    67ee:	bb 1f       	adc	r27, r27
    67f0:	ee 1f       	adc	r30, r30
    67f2:	ff 1f       	adc	r31, r31
    67f4:	a2 17       	cp	r26, r18
    67f6:	b3 07       	cpc	r27, r19
    67f8:	e4 07       	cpc	r30, r20
    67fa:	f5 07       	cpc	r31, r21
    67fc:	20 f0       	brcs	.+8      	; 0x6806 <__udivmodsi4_ep>
    67fe:	a2 1b       	sub	r26, r18
    6800:	b3 0b       	sbc	r27, r19
    6802:	e4 0b       	sbc	r30, r20
    6804:	f5 0b       	sbc	r31, r21

00006806 <__udivmodsi4_ep>:
    6806:	66 1f       	adc	r22, r22
    6808:	77 1f       	adc	r23, r23
    680a:	88 1f       	adc	r24, r24
    680c:	99 1f       	adc	r25, r25
    680e:	1a 94       	dec	r1
    6810:	69 f7       	brne	.-38     	; 0x67ec <__udivmodsi4_loop>
    6812:	60 95       	com	r22
    6814:	70 95       	com	r23
    6816:	80 95       	com	r24
    6818:	90 95       	com	r25
    681a:	9b 01       	movw	r18, r22
    681c:	ac 01       	movw	r20, r24
    681e:	bd 01       	movw	r22, r26
    6820:	cf 01       	movw	r24, r30
    6822:	08 95       	ret

00006824 <__prologue_saves__>:
    6824:	2f 92       	push	r2
    6826:	3f 92       	push	r3
    6828:	4f 92       	push	r4
    682a:	5f 92       	push	r5
    682c:	6f 92       	push	r6
    682e:	7f 92       	push	r7
    6830:	8f 92       	push	r8
    6832:	9f 92       	push	r9
    6834:	af 92       	push	r10
    6836:	bf 92       	push	r11
    6838:	cf 92       	push	r12
    683a:	df 92       	push	r13
    683c:	ef 92       	push	r14
    683e:	ff 92       	push	r15
    6840:	0f 93       	push	r16
    6842:	1f 93       	push	r17
    6844:	cf 93       	push	r28
    6846:	df 93       	push	r29
    6848:	cd b7       	in	r28, 0x3d	; 61
    684a:	de b7       	in	r29, 0x3e	; 62
    684c:	ca 1b       	sub	r28, r26
    684e:	db 0b       	sbc	r29, r27
    6850:	0f b6       	in	r0, 0x3f	; 63
    6852:	f8 94       	cli
    6854:	de bf       	out	0x3e, r29	; 62
    6856:	0f be       	out	0x3f, r0	; 63
    6858:	cd bf       	out	0x3d, r28	; 61
    685a:	09 94       	ijmp

0000685c <__epilogue_restores__>:
    685c:	2a 88       	ldd	r2, Y+18	; 0x12
    685e:	39 88       	ldd	r3, Y+17	; 0x11
    6860:	48 88       	ldd	r4, Y+16	; 0x10
    6862:	5f 84       	ldd	r5, Y+15	; 0x0f
    6864:	6e 84       	ldd	r6, Y+14	; 0x0e
    6866:	7d 84       	ldd	r7, Y+13	; 0x0d
    6868:	8c 84       	ldd	r8, Y+12	; 0x0c
    686a:	9b 84       	ldd	r9, Y+11	; 0x0b
    686c:	aa 84       	ldd	r10, Y+10	; 0x0a
    686e:	b9 84       	ldd	r11, Y+9	; 0x09
    6870:	c8 84       	ldd	r12, Y+8	; 0x08
    6872:	df 80       	ldd	r13, Y+7	; 0x07
    6874:	ee 80       	ldd	r14, Y+6	; 0x06
    6876:	fd 80       	ldd	r15, Y+5	; 0x05
    6878:	0c 81       	ldd	r16, Y+4	; 0x04
    687a:	1b 81       	ldd	r17, Y+3	; 0x03
    687c:	aa 81       	ldd	r26, Y+2	; 0x02
    687e:	b9 81       	ldd	r27, Y+1	; 0x01
    6880:	ce 0f       	add	r28, r30
    6882:	d1 1d       	adc	r29, r1
    6884:	0f b6       	in	r0, 0x3f	; 63
    6886:	f8 94       	cli
    6888:	de bf       	out	0x3e, r29	; 62
    688a:	0f be       	out	0x3f, r0	; 63
    688c:	cd bf       	out	0x3d, r28	; 61
    688e:	ed 01       	movw	r28, r26
    6890:	08 95       	ret

00006892 <malloc>:
    6892:	cf 93       	push	r28
    6894:	df 93       	push	r29
    6896:	bc 01       	movw	r22, r24
    6898:	82 30       	cpi	r24, 0x02	; 2
    689a:	91 05       	cpc	r25, r1
    689c:	10 f4       	brcc	.+4      	; 0x68a2 <malloc+0x10>
    689e:	62 e0       	ldi	r22, 0x02	; 2
    68a0:	70 e0       	ldi	r23, 0x00	; 0
    68a2:	a0 91 fa 07 	lds	r26, 0x07FA
    68a6:	b0 91 fb 07 	lds	r27, 0x07FB
    68aa:	ed 01       	movw	r28, r26
    68ac:	e0 e0       	ldi	r30, 0x00	; 0
    68ae:	f0 e0       	ldi	r31, 0x00	; 0
    68b0:	40 e0       	ldi	r20, 0x00	; 0
    68b2:	50 e0       	ldi	r21, 0x00	; 0
    68b4:	21 c0       	rjmp	.+66     	; 0x68f8 <malloc+0x66>
    68b6:	88 81       	ld	r24, Y
    68b8:	99 81       	ldd	r25, Y+1	; 0x01
    68ba:	86 17       	cp	r24, r22
    68bc:	97 07       	cpc	r25, r23
    68be:	69 f4       	brne	.+26     	; 0x68da <malloc+0x48>
    68c0:	8a 81       	ldd	r24, Y+2	; 0x02
    68c2:	9b 81       	ldd	r25, Y+3	; 0x03
    68c4:	30 97       	sbiw	r30, 0x00	; 0
    68c6:	19 f0       	breq	.+6      	; 0x68ce <malloc+0x3c>
    68c8:	93 83       	std	Z+3, r25	; 0x03
    68ca:	82 83       	std	Z+2, r24	; 0x02
    68cc:	04 c0       	rjmp	.+8      	; 0x68d6 <malloc+0x44>
    68ce:	90 93 fb 07 	sts	0x07FB, r25
    68d2:	80 93 fa 07 	sts	0x07FA, r24
    68d6:	fe 01       	movw	r30, r28
    68d8:	34 c0       	rjmp	.+104    	; 0x6942 <malloc+0xb0>
    68da:	68 17       	cp	r22, r24
    68dc:	79 07       	cpc	r23, r25
    68de:	38 f4       	brcc	.+14     	; 0x68ee <malloc+0x5c>
    68e0:	41 15       	cp	r20, r1
    68e2:	51 05       	cpc	r21, r1
    68e4:	19 f0       	breq	.+6      	; 0x68ec <malloc+0x5a>
    68e6:	84 17       	cp	r24, r20
    68e8:	95 07       	cpc	r25, r21
    68ea:	08 f4       	brcc	.+2      	; 0x68ee <malloc+0x5c>
    68ec:	ac 01       	movw	r20, r24
    68ee:	fe 01       	movw	r30, r28
    68f0:	8a 81       	ldd	r24, Y+2	; 0x02
    68f2:	9b 81       	ldd	r25, Y+3	; 0x03
    68f4:	9c 01       	movw	r18, r24
    68f6:	e9 01       	movw	r28, r18
    68f8:	20 97       	sbiw	r28, 0x00	; 0
    68fa:	e9 f6       	brne	.-70     	; 0x68b6 <malloc+0x24>
    68fc:	41 15       	cp	r20, r1
    68fe:	51 05       	cpc	r21, r1
    6900:	a9 f1       	breq	.+106    	; 0x696c <malloc+0xda>
    6902:	ca 01       	movw	r24, r20
    6904:	86 1b       	sub	r24, r22
    6906:	97 0b       	sbc	r25, r23
    6908:	04 97       	sbiw	r24, 0x04	; 4
    690a:	08 f4       	brcc	.+2      	; 0x690e <malloc+0x7c>
    690c:	ba 01       	movw	r22, r20
    690e:	e0 e0       	ldi	r30, 0x00	; 0
    6910:	f0 e0       	ldi	r31, 0x00	; 0
    6912:	2a c0       	rjmp	.+84     	; 0x6968 <malloc+0xd6>
    6914:	8d 91       	ld	r24, X+
    6916:	9c 91       	ld	r25, X
    6918:	11 97       	sbiw	r26, 0x01	; 1
    691a:	84 17       	cp	r24, r20
    691c:	95 07       	cpc	r25, r21
    691e:	f9 f4       	brne	.+62     	; 0x695e <malloc+0xcc>
    6920:	64 17       	cp	r22, r20
    6922:	75 07       	cpc	r23, r21
    6924:	81 f4       	brne	.+32     	; 0x6946 <malloc+0xb4>
    6926:	12 96       	adiw	r26, 0x02	; 2
    6928:	8d 91       	ld	r24, X+
    692a:	9c 91       	ld	r25, X
    692c:	13 97       	sbiw	r26, 0x03	; 3
    692e:	30 97       	sbiw	r30, 0x00	; 0
    6930:	19 f0       	breq	.+6      	; 0x6938 <malloc+0xa6>
    6932:	93 83       	std	Z+3, r25	; 0x03
    6934:	82 83       	std	Z+2, r24	; 0x02
    6936:	04 c0       	rjmp	.+8      	; 0x6940 <malloc+0xae>
    6938:	90 93 fb 07 	sts	0x07FB, r25
    693c:	80 93 fa 07 	sts	0x07FA, r24
    6940:	fd 01       	movw	r30, r26
    6942:	32 96       	adiw	r30, 0x02	; 2
    6944:	4f c0       	rjmp	.+158    	; 0x69e4 <malloc+0x152>
    6946:	ca 01       	movw	r24, r20
    6948:	86 1b       	sub	r24, r22
    694a:	97 0b       	sbc	r25, r23
    694c:	fd 01       	movw	r30, r26
    694e:	e8 0f       	add	r30, r24
    6950:	f9 1f       	adc	r31, r25
    6952:	61 93       	st	Z+, r22
    6954:	71 93       	st	Z+, r23
    6956:	02 97       	sbiw	r24, 0x02	; 2
    6958:	8d 93       	st	X+, r24
    695a:	9c 93       	st	X, r25
    695c:	43 c0       	rjmp	.+134    	; 0x69e4 <malloc+0x152>
    695e:	fd 01       	movw	r30, r26
    6960:	82 81       	ldd	r24, Z+2	; 0x02
    6962:	93 81       	ldd	r25, Z+3	; 0x03
    6964:	9c 01       	movw	r18, r24
    6966:	d9 01       	movw	r26, r18
    6968:	10 97       	sbiw	r26, 0x00	; 0
    696a:	a1 f6       	brne	.-88     	; 0x6914 <malloc+0x82>
    696c:	80 91 f8 07 	lds	r24, 0x07F8
    6970:	90 91 f9 07 	lds	r25, 0x07F9
    6974:	89 2b       	or	r24, r25
    6976:	41 f4       	brne	.+16     	; 0x6988 <malloc+0xf6>
    6978:	80 91 2b 04 	lds	r24, 0x042B
    697c:	90 91 2c 04 	lds	r25, 0x042C
    6980:	90 93 f9 07 	sts	0x07F9, r25
    6984:	80 93 f8 07 	sts	0x07F8, r24
    6988:	40 91 2d 04 	lds	r20, 0x042D
    698c:	50 91 2e 04 	lds	r21, 0x042E
    6990:	41 15       	cp	r20, r1
    6992:	51 05       	cpc	r21, r1
    6994:	41 f4       	brne	.+16     	; 0x69a6 <malloc+0x114>
    6996:	4d b7       	in	r20, 0x3d	; 61
    6998:	5e b7       	in	r21, 0x3e	; 62
    699a:	80 91 29 04 	lds	r24, 0x0429
    699e:	90 91 2a 04 	lds	r25, 0x042A
    69a2:	48 1b       	sub	r20, r24
    69a4:	59 0b       	sbc	r21, r25
    69a6:	20 91 f8 07 	lds	r18, 0x07F8
    69aa:	30 91 f9 07 	lds	r19, 0x07F9
    69ae:	24 17       	cp	r18, r20
    69b0:	35 07       	cpc	r19, r21
    69b2:	b0 f4       	brcc	.+44     	; 0x69e0 <malloc+0x14e>
    69b4:	ca 01       	movw	r24, r20
    69b6:	82 1b       	sub	r24, r18
    69b8:	93 0b       	sbc	r25, r19
    69ba:	86 17       	cp	r24, r22
    69bc:	97 07       	cpc	r25, r23
    69be:	80 f0       	brcs	.+32     	; 0x69e0 <malloc+0x14e>
    69c0:	ab 01       	movw	r20, r22
    69c2:	4e 5f       	subi	r20, 0xFE	; 254
    69c4:	5f 4f       	sbci	r21, 0xFF	; 255
    69c6:	84 17       	cp	r24, r20
    69c8:	95 07       	cpc	r25, r21
    69ca:	50 f0       	brcs	.+20     	; 0x69e0 <malloc+0x14e>
    69cc:	42 0f       	add	r20, r18
    69ce:	53 1f       	adc	r21, r19
    69d0:	50 93 f9 07 	sts	0x07F9, r21
    69d4:	40 93 f8 07 	sts	0x07F8, r20
    69d8:	f9 01       	movw	r30, r18
    69da:	61 93       	st	Z+, r22
    69dc:	71 93       	st	Z+, r23
    69de:	02 c0       	rjmp	.+4      	; 0x69e4 <malloc+0x152>
    69e0:	e0 e0       	ldi	r30, 0x00	; 0
    69e2:	f0 e0       	ldi	r31, 0x00	; 0
    69e4:	cf 01       	movw	r24, r30
    69e6:	df 91       	pop	r29
    69e8:	cf 91       	pop	r28
    69ea:	08 95       	ret

000069ec <free>:
    69ec:	cf 93       	push	r28
    69ee:	df 93       	push	r29
    69f0:	00 97       	sbiw	r24, 0x00	; 0
    69f2:	09 f4       	brne	.+2      	; 0x69f6 <free+0xa>
    69f4:	50 c0       	rjmp	.+160    	; 0x6a96 <free+0xaa>
    69f6:	ec 01       	movw	r28, r24
    69f8:	22 97       	sbiw	r28, 0x02	; 2
    69fa:	1b 82       	std	Y+3, r1	; 0x03
    69fc:	1a 82       	std	Y+2, r1	; 0x02
    69fe:	a0 91 fa 07 	lds	r26, 0x07FA
    6a02:	b0 91 fb 07 	lds	r27, 0x07FB
    6a06:	10 97       	sbiw	r26, 0x00	; 0
    6a08:	09 f1       	breq	.+66     	; 0x6a4c <free+0x60>
    6a0a:	40 e0       	ldi	r20, 0x00	; 0
    6a0c:	50 e0       	ldi	r21, 0x00	; 0
    6a0e:	ac 17       	cp	r26, r28
    6a10:	bd 07       	cpc	r27, r29
    6a12:	08 f1       	brcs	.+66     	; 0x6a56 <free+0x6a>
    6a14:	bb 83       	std	Y+3, r27	; 0x03
    6a16:	aa 83       	std	Y+2, r26	; 0x02
    6a18:	fe 01       	movw	r30, r28
    6a1a:	21 91       	ld	r18, Z+
    6a1c:	31 91       	ld	r19, Z+
    6a1e:	e2 0f       	add	r30, r18
    6a20:	f3 1f       	adc	r31, r19
    6a22:	ae 17       	cp	r26, r30
    6a24:	bf 07       	cpc	r27, r31
    6a26:	79 f4       	brne	.+30     	; 0x6a46 <free+0x5a>
    6a28:	8d 91       	ld	r24, X+
    6a2a:	9c 91       	ld	r25, X
    6a2c:	11 97       	sbiw	r26, 0x01	; 1
    6a2e:	28 0f       	add	r18, r24
    6a30:	39 1f       	adc	r19, r25
    6a32:	2e 5f       	subi	r18, 0xFE	; 254
    6a34:	3f 4f       	sbci	r19, 0xFF	; 255
    6a36:	39 83       	std	Y+1, r19	; 0x01
    6a38:	28 83       	st	Y, r18
    6a3a:	12 96       	adiw	r26, 0x02	; 2
    6a3c:	8d 91       	ld	r24, X+
    6a3e:	9c 91       	ld	r25, X
    6a40:	13 97       	sbiw	r26, 0x03	; 3
    6a42:	9b 83       	std	Y+3, r25	; 0x03
    6a44:	8a 83       	std	Y+2, r24	; 0x02
    6a46:	41 15       	cp	r20, r1
    6a48:	51 05       	cpc	r21, r1
    6a4a:	71 f4       	brne	.+28     	; 0x6a68 <free+0x7c>
    6a4c:	d0 93 fb 07 	sts	0x07FB, r29
    6a50:	c0 93 fa 07 	sts	0x07FA, r28
    6a54:	20 c0       	rjmp	.+64     	; 0x6a96 <free+0xaa>
    6a56:	12 96       	adiw	r26, 0x02	; 2
    6a58:	8d 91       	ld	r24, X+
    6a5a:	9c 91       	ld	r25, X
    6a5c:	13 97       	sbiw	r26, 0x03	; 3
    6a5e:	ad 01       	movw	r20, r26
    6a60:	00 97       	sbiw	r24, 0x00	; 0
    6a62:	11 f0       	breq	.+4      	; 0x6a68 <free+0x7c>
    6a64:	dc 01       	movw	r26, r24
    6a66:	d3 cf       	rjmp	.-90     	; 0x6a0e <free+0x22>
    6a68:	fa 01       	movw	r30, r20
    6a6a:	d3 83       	std	Z+3, r29	; 0x03
    6a6c:	c2 83       	std	Z+2, r28	; 0x02
    6a6e:	21 91       	ld	r18, Z+
    6a70:	31 91       	ld	r19, Z+
    6a72:	e2 0f       	add	r30, r18
    6a74:	f3 1f       	adc	r31, r19
    6a76:	ce 17       	cp	r28, r30
    6a78:	df 07       	cpc	r29, r31
    6a7a:	69 f4       	brne	.+26     	; 0x6a96 <free+0xaa>
    6a7c:	88 81       	ld	r24, Y
    6a7e:	99 81       	ldd	r25, Y+1	; 0x01
    6a80:	28 0f       	add	r18, r24
    6a82:	39 1f       	adc	r19, r25
    6a84:	2e 5f       	subi	r18, 0xFE	; 254
    6a86:	3f 4f       	sbci	r19, 0xFF	; 255
    6a88:	fa 01       	movw	r30, r20
    6a8a:	31 83       	std	Z+1, r19	; 0x01
    6a8c:	20 83       	st	Z, r18
    6a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    6a90:	9b 81       	ldd	r25, Y+3	; 0x03
    6a92:	93 83       	std	Z+3, r25	; 0x03
    6a94:	82 83       	std	Z+2, r24	; 0x02
    6a96:	df 91       	pop	r29
    6a98:	cf 91       	pop	r28
    6a9a:	08 95       	ret

00006a9c <__ftoa_engine>:
    6a9c:	28 30       	cpi	r18, 0x08	; 8
    6a9e:	08 f0       	brcs	.+2      	; 0x6aa2 <__ftoa_engine+0x6>
    6aa0:	27 e0       	ldi	r18, 0x07	; 7
    6aa2:	33 27       	eor	r19, r19
    6aa4:	da 01       	movw	r26, r20
    6aa6:	99 0f       	add	r25, r25
    6aa8:	31 1d       	adc	r19, r1
    6aaa:	87 fd       	sbrc	r24, 7
    6aac:	91 60       	ori	r25, 0x01	; 1
    6aae:	00 96       	adiw	r24, 0x00	; 0
    6ab0:	61 05       	cpc	r22, r1
    6ab2:	71 05       	cpc	r23, r1
    6ab4:	39 f4       	brne	.+14     	; 0x6ac4 <__ftoa_engine+0x28>
    6ab6:	32 60       	ori	r19, 0x02	; 2
    6ab8:	2e 5f       	subi	r18, 0xFE	; 254
    6aba:	3d 93       	st	X+, r19
    6abc:	30 e3       	ldi	r19, 0x30	; 48
    6abe:	2a 95       	dec	r18
    6ac0:	e1 f7       	brne	.-8      	; 0x6aba <__ftoa_engine+0x1e>
    6ac2:	08 95       	ret
    6ac4:	9f 3f       	cpi	r25, 0xFF	; 255
    6ac6:	30 f0       	brcs	.+12     	; 0x6ad4 <__ftoa_engine+0x38>
    6ac8:	80 38       	cpi	r24, 0x80	; 128
    6aca:	71 05       	cpc	r23, r1
    6acc:	61 05       	cpc	r22, r1
    6ace:	09 f0       	breq	.+2      	; 0x6ad2 <__ftoa_engine+0x36>
    6ad0:	3c 5f       	subi	r19, 0xFC	; 252
    6ad2:	3c 5f       	subi	r19, 0xFC	; 252
    6ad4:	3d 93       	st	X+, r19
    6ad6:	91 30       	cpi	r25, 0x01	; 1
    6ad8:	08 f0       	brcs	.+2      	; 0x6adc <__ftoa_engine+0x40>
    6ada:	80 68       	ori	r24, 0x80	; 128
    6adc:	91 1d       	adc	r25, r1
    6ade:	df 93       	push	r29
    6ae0:	cf 93       	push	r28
    6ae2:	1f 93       	push	r17
    6ae4:	0f 93       	push	r16
    6ae6:	ff 92       	push	r15
    6ae8:	ef 92       	push	r14
    6aea:	19 2f       	mov	r17, r25
    6aec:	98 7f       	andi	r25, 0xF8	; 248
    6aee:	96 95       	lsr	r25
    6af0:	e9 2f       	mov	r30, r25
    6af2:	96 95       	lsr	r25
    6af4:	96 95       	lsr	r25
    6af6:	e9 0f       	add	r30, r25
    6af8:	ff 27       	eor	r31, r31
    6afa:	ef 53       	subi	r30, 0x3F	; 63
    6afc:	fa 4f       	sbci	r31, 0xFA	; 250
    6afe:	99 27       	eor	r25, r25
    6b00:	33 27       	eor	r19, r19
    6b02:	ee 24       	eor	r14, r14
    6b04:	ff 24       	eor	r15, r15
    6b06:	a7 01       	movw	r20, r14
    6b08:	e7 01       	movw	r28, r14
    6b0a:	05 90       	lpm	r0, Z+
    6b0c:	08 94       	sec
    6b0e:	07 94       	ror	r0
    6b10:	28 f4       	brcc	.+10     	; 0x6b1c <__ftoa_engine+0x80>
    6b12:	36 0f       	add	r19, r22
    6b14:	e7 1e       	adc	r14, r23
    6b16:	f8 1e       	adc	r15, r24
    6b18:	49 1f       	adc	r20, r25
    6b1a:	51 1d       	adc	r21, r1
    6b1c:	66 0f       	add	r22, r22
    6b1e:	77 1f       	adc	r23, r23
    6b20:	88 1f       	adc	r24, r24
    6b22:	99 1f       	adc	r25, r25
    6b24:	06 94       	lsr	r0
    6b26:	a1 f7       	brne	.-24     	; 0x6b10 <__ftoa_engine+0x74>
    6b28:	05 90       	lpm	r0, Z+
    6b2a:	07 94       	ror	r0
    6b2c:	28 f4       	brcc	.+10     	; 0x6b38 <__ftoa_engine+0x9c>
    6b2e:	e7 0e       	add	r14, r23
    6b30:	f8 1e       	adc	r15, r24
    6b32:	49 1f       	adc	r20, r25
    6b34:	56 1f       	adc	r21, r22
    6b36:	c1 1d       	adc	r28, r1
    6b38:	77 0f       	add	r23, r23
    6b3a:	88 1f       	adc	r24, r24
    6b3c:	99 1f       	adc	r25, r25
    6b3e:	66 1f       	adc	r22, r22
    6b40:	06 94       	lsr	r0
    6b42:	a1 f7       	brne	.-24     	; 0x6b2c <__ftoa_engine+0x90>
    6b44:	05 90       	lpm	r0, Z+
    6b46:	07 94       	ror	r0
    6b48:	28 f4       	brcc	.+10     	; 0x6b54 <__ftoa_engine+0xb8>
    6b4a:	f8 0e       	add	r15, r24
    6b4c:	49 1f       	adc	r20, r25
    6b4e:	56 1f       	adc	r21, r22
    6b50:	c7 1f       	adc	r28, r23
    6b52:	d1 1d       	adc	r29, r1
    6b54:	88 0f       	add	r24, r24
    6b56:	99 1f       	adc	r25, r25
    6b58:	66 1f       	adc	r22, r22
    6b5a:	77 1f       	adc	r23, r23
    6b5c:	06 94       	lsr	r0
    6b5e:	a1 f7       	brne	.-24     	; 0x6b48 <__ftoa_engine+0xac>
    6b60:	05 90       	lpm	r0, Z+
    6b62:	07 94       	ror	r0
    6b64:	20 f4       	brcc	.+8      	; 0x6b6e <__ftoa_engine+0xd2>
    6b66:	49 0f       	add	r20, r25
    6b68:	56 1f       	adc	r21, r22
    6b6a:	c7 1f       	adc	r28, r23
    6b6c:	d8 1f       	adc	r29, r24
    6b6e:	99 0f       	add	r25, r25
    6b70:	66 1f       	adc	r22, r22
    6b72:	77 1f       	adc	r23, r23
    6b74:	88 1f       	adc	r24, r24
    6b76:	06 94       	lsr	r0
    6b78:	a9 f7       	brne	.-22     	; 0x6b64 <__ftoa_engine+0xc8>
    6b7a:	84 91       	lpm	r24, Z+
    6b7c:	10 95       	com	r17
    6b7e:	17 70       	andi	r17, 0x07	; 7
    6b80:	41 f0       	breq	.+16     	; 0x6b92 <__ftoa_engine+0xf6>
    6b82:	d6 95       	lsr	r29
    6b84:	c7 95       	ror	r28
    6b86:	57 95       	ror	r21
    6b88:	47 95       	ror	r20
    6b8a:	f7 94       	ror	r15
    6b8c:	e7 94       	ror	r14
    6b8e:	1a 95       	dec	r17
    6b90:	c1 f7       	brne	.-16     	; 0x6b82 <__ftoa_engine+0xe6>
    6b92:	e7 e6       	ldi	r30, 0x67	; 103
    6b94:	f5 e0       	ldi	r31, 0x05	; 5
    6b96:	68 94       	set
    6b98:	15 90       	lpm	r1, Z+
    6b9a:	15 91       	lpm	r17, Z+
    6b9c:	35 91       	lpm	r19, Z+
    6b9e:	65 91       	lpm	r22, Z+
    6ba0:	95 91       	lpm	r25, Z+
    6ba2:	05 90       	lpm	r0, Z+
    6ba4:	7f e2       	ldi	r23, 0x2F	; 47
    6ba6:	73 95       	inc	r23
    6ba8:	e1 18       	sub	r14, r1
    6baa:	f1 0a       	sbc	r15, r17
    6bac:	43 0b       	sbc	r20, r19
    6bae:	56 0b       	sbc	r21, r22
    6bb0:	c9 0b       	sbc	r28, r25
    6bb2:	d0 09       	sbc	r29, r0
    6bb4:	c0 f7       	brcc	.-16     	; 0x6ba6 <__ftoa_engine+0x10a>
    6bb6:	e1 0c       	add	r14, r1
    6bb8:	f1 1e       	adc	r15, r17
    6bba:	43 1f       	adc	r20, r19
    6bbc:	56 1f       	adc	r21, r22
    6bbe:	c9 1f       	adc	r28, r25
    6bc0:	d0 1d       	adc	r29, r0
    6bc2:	7e f4       	brtc	.+30     	; 0x6be2 <__ftoa_engine+0x146>
    6bc4:	70 33       	cpi	r23, 0x30	; 48
    6bc6:	11 f4       	brne	.+4      	; 0x6bcc <__ftoa_engine+0x130>
    6bc8:	8a 95       	dec	r24
    6bca:	e6 cf       	rjmp	.-52     	; 0x6b98 <__ftoa_engine+0xfc>
    6bcc:	e8 94       	clt
    6bce:	01 50       	subi	r16, 0x01	; 1
    6bd0:	30 f0       	brcs	.+12     	; 0x6bde <__ftoa_engine+0x142>
    6bd2:	08 0f       	add	r16, r24
    6bd4:	0a f4       	brpl	.+2      	; 0x6bd8 <__ftoa_engine+0x13c>
    6bd6:	00 27       	eor	r16, r16
    6bd8:	02 17       	cp	r16, r18
    6bda:	08 f4       	brcc	.+2      	; 0x6bde <__ftoa_engine+0x142>
    6bdc:	20 2f       	mov	r18, r16
    6bde:	23 95       	inc	r18
    6be0:	02 2f       	mov	r16, r18
    6be2:	7a 33       	cpi	r23, 0x3A	; 58
    6be4:	28 f0       	brcs	.+10     	; 0x6bf0 <__ftoa_engine+0x154>
    6be6:	79 e3       	ldi	r23, 0x39	; 57
    6be8:	7d 93       	st	X+, r23
    6bea:	2a 95       	dec	r18
    6bec:	e9 f7       	brne	.-6      	; 0x6be8 <__ftoa_engine+0x14c>
    6bee:	10 c0       	rjmp	.+32     	; 0x6c10 <__ftoa_engine+0x174>
    6bf0:	7d 93       	st	X+, r23
    6bf2:	2a 95       	dec	r18
    6bf4:	89 f6       	brne	.-94     	; 0x6b98 <__ftoa_engine+0xfc>
    6bf6:	06 94       	lsr	r0
    6bf8:	97 95       	ror	r25
    6bfa:	67 95       	ror	r22
    6bfc:	37 95       	ror	r19
    6bfe:	17 95       	ror	r17
    6c00:	17 94       	ror	r1
    6c02:	e1 18       	sub	r14, r1
    6c04:	f1 0a       	sbc	r15, r17
    6c06:	43 0b       	sbc	r20, r19
    6c08:	56 0b       	sbc	r21, r22
    6c0a:	c9 0b       	sbc	r28, r25
    6c0c:	d0 09       	sbc	r29, r0
    6c0e:	98 f0       	brcs	.+38     	; 0x6c36 <__ftoa_engine+0x19a>
    6c10:	23 95       	inc	r18
    6c12:	7e 91       	ld	r23, -X
    6c14:	73 95       	inc	r23
    6c16:	7a 33       	cpi	r23, 0x3A	; 58
    6c18:	08 f0       	brcs	.+2      	; 0x6c1c <__ftoa_engine+0x180>
    6c1a:	70 e3       	ldi	r23, 0x30	; 48
    6c1c:	7c 93       	st	X, r23
    6c1e:	20 13       	cpse	r18, r16
    6c20:	b8 f7       	brcc	.-18     	; 0x6c10 <__ftoa_engine+0x174>
    6c22:	7e 91       	ld	r23, -X
    6c24:	70 61       	ori	r23, 0x10	; 16
    6c26:	7d 93       	st	X+, r23
    6c28:	30 f0       	brcs	.+12     	; 0x6c36 <__ftoa_engine+0x19a>
    6c2a:	83 95       	inc	r24
    6c2c:	71 e3       	ldi	r23, 0x31	; 49
    6c2e:	7d 93       	st	X+, r23
    6c30:	70 e3       	ldi	r23, 0x30	; 48
    6c32:	2a 95       	dec	r18
    6c34:	e1 f7       	brne	.-8      	; 0x6c2e <__ftoa_engine+0x192>
    6c36:	11 24       	eor	r1, r1
    6c38:	ef 90       	pop	r14
    6c3a:	ff 90       	pop	r15
    6c3c:	0f 91       	pop	r16
    6c3e:	1f 91       	pop	r17
    6c40:	cf 91       	pop	r28
    6c42:	df 91       	pop	r29
    6c44:	99 27       	eor	r25, r25
    6c46:	87 fd       	sbrc	r24, 7
    6c48:	90 95       	com	r25
    6c4a:	08 95       	ret

00006c4c <strnlen_P>:
    6c4c:	fc 01       	movw	r30, r24
    6c4e:	05 90       	lpm	r0, Z+
    6c50:	61 50       	subi	r22, 0x01	; 1
    6c52:	70 40       	sbci	r23, 0x00	; 0
    6c54:	01 10       	cpse	r0, r1
    6c56:	d8 f7       	brcc	.-10     	; 0x6c4e <strnlen_P+0x2>
    6c58:	80 95       	com	r24
    6c5a:	90 95       	com	r25
    6c5c:	8e 0f       	add	r24, r30
    6c5e:	9f 1f       	adc	r25, r31
    6c60:	08 95       	ret

00006c62 <strnlen>:
    6c62:	fc 01       	movw	r30, r24
    6c64:	61 50       	subi	r22, 0x01	; 1
    6c66:	70 40       	sbci	r23, 0x00	; 0
    6c68:	01 90       	ld	r0, Z+
    6c6a:	01 10       	cpse	r0, r1
    6c6c:	d8 f7       	brcc	.-10     	; 0x6c64 <strnlen+0x2>
    6c6e:	80 95       	com	r24
    6c70:	90 95       	com	r25
    6c72:	8e 0f       	add	r24, r30
    6c74:	9f 1f       	adc	r25, r31
    6c76:	08 95       	ret

00006c78 <fputc>:
    6c78:	0f 93       	push	r16
    6c7a:	1f 93       	push	r17
    6c7c:	cf 93       	push	r28
    6c7e:	df 93       	push	r29
    6c80:	8c 01       	movw	r16, r24
    6c82:	eb 01       	movw	r28, r22
    6c84:	8b 81       	ldd	r24, Y+3	; 0x03
    6c86:	81 ff       	sbrs	r24, 1
    6c88:	1b c0       	rjmp	.+54     	; 0x6cc0 <fputc+0x48>
    6c8a:	82 ff       	sbrs	r24, 2
    6c8c:	0d c0       	rjmp	.+26     	; 0x6ca8 <fputc+0x30>
    6c8e:	2e 81       	ldd	r18, Y+6	; 0x06
    6c90:	3f 81       	ldd	r19, Y+7	; 0x07
    6c92:	8c 81       	ldd	r24, Y+4	; 0x04
    6c94:	9d 81       	ldd	r25, Y+5	; 0x05
    6c96:	28 17       	cp	r18, r24
    6c98:	39 07       	cpc	r19, r25
    6c9a:	64 f4       	brge	.+24     	; 0x6cb4 <fputc+0x3c>
    6c9c:	e8 81       	ld	r30, Y
    6c9e:	f9 81       	ldd	r31, Y+1	; 0x01
    6ca0:	01 93       	st	Z+, r16
    6ca2:	f9 83       	std	Y+1, r31	; 0x01
    6ca4:	e8 83       	st	Y, r30
    6ca6:	06 c0       	rjmp	.+12     	; 0x6cb4 <fputc+0x3c>
    6ca8:	e8 85       	ldd	r30, Y+8	; 0x08
    6caa:	f9 85       	ldd	r31, Y+9	; 0x09
    6cac:	80 2f       	mov	r24, r16
    6cae:	09 95       	icall
    6cb0:	89 2b       	or	r24, r25
    6cb2:	31 f4       	brne	.+12     	; 0x6cc0 <fputc+0x48>
    6cb4:	8e 81       	ldd	r24, Y+6	; 0x06
    6cb6:	9f 81       	ldd	r25, Y+7	; 0x07
    6cb8:	01 96       	adiw	r24, 0x01	; 1
    6cba:	9f 83       	std	Y+7, r25	; 0x07
    6cbc:	8e 83       	std	Y+6, r24	; 0x06
    6cbe:	02 c0       	rjmp	.+4      	; 0x6cc4 <fputc+0x4c>
    6cc0:	0f ef       	ldi	r16, 0xFF	; 255
    6cc2:	1f ef       	ldi	r17, 0xFF	; 255
    6cc4:	c8 01       	movw	r24, r16
    6cc6:	df 91       	pop	r29
    6cc8:	cf 91       	pop	r28
    6cca:	1f 91       	pop	r17
    6ccc:	0f 91       	pop	r16
    6cce:	08 95       	ret

00006cd0 <printf>:
    6cd0:	a0 e0       	ldi	r26, 0x00	; 0
    6cd2:	b0 e0       	ldi	r27, 0x00	; 0
    6cd4:	ed e6       	ldi	r30, 0x6D	; 109
    6cd6:	f6 e3       	ldi	r31, 0x36	; 54
    6cd8:	b5 cd       	rjmp	.-1174   	; 0x6844 <__prologue_saves__+0x20>
    6cda:	fe 01       	movw	r30, r28
    6cdc:	35 96       	adiw	r30, 0x05	; 5
    6cde:	61 91       	ld	r22, Z+
    6ce0:	71 91       	ld	r23, Z+
    6ce2:	80 91 fe 07 	lds	r24, 0x07FE
    6ce6:	90 91 ff 07 	lds	r25, 0x07FF
    6cea:	af 01       	movw	r20, r30
    6cec:	f2 d9       	rcall	.-3100   	; 0x60d2 <vfprintf>
    6cee:	20 96       	adiw	r28, 0x00	; 0
    6cf0:	e2 e0       	ldi	r30, 0x02	; 2
    6cf2:	c4 cd       	rjmp	.-1144   	; 0x687c <__epilogue_restores__+0x20>

00006cf4 <puts>:
    6cf4:	0f 93       	push	r16
    6cf6:	1f 93       	push	r17
    6cf8:	cf 93       	push	r28
    6cfa:	df 93       	push	r29
    6cfc:	8c 01       	movw	r16, r24
    6cfe:	e0 91 fe 07 	lds	r30, 0x07FE
    6d02:	f0 91 ff 07 	lds	r31, 0x07FF
    6d06:	83 81       	ldd	r24, Z+3	; 0x03
    6d08:	81 ff       	sbrs	r24, 1
    6d0a:	21 c0       	rjmp	.+66     	; 0x6d4e <puts+0x5a>
    6d0c:	c0 e0       	ldi	r28, 0x00	; 0
    6d0e:	d0 e0       	ldi	r29, 0x00	; 0
    6d10:	0d c0       	rjmp	.+26     	; 0x6d2c <puts+0x38>
    6d12:	e0 91 fe 07 	lds	r30, 0x07FE
    6d16:	f0 91 ff 07 	lds	r31, 0x07FF
    6d1a:	20 85       	ldd	r18, Z+8	; 0x08
    6d1c:	31 85       	ldd	r19, Z+9	; 0x09
    6d1e:	bf 01       	movw	r22, r30
    6d20:	f9 01       	movw	r30, r18
    6d22:	09 95       	icall
    6d24:	89 2b       	or	r24, r25
    6d26:	11 f0       	breq	.+4      	; 0x6d2c <puts+0x38>
    6d28:	cf ef       	ldi	r28, 0xFF	; 255
    6d2a:	df ef       	ldi	r29, 0xFF	; 255
    6d2c:	f8 01       	movw	r30, r16
    6d2e:	81 91       	ld	r24, Z+
    6d30:	8f 01       	movw	r16, r30
    6d32:	88 23       	and	r24, r24
    6d34:	71 f7       	brne	.-36     	; 0x6d12 <puts+0x1e>
    6d36:	e0 91 fe 07 	lds	r30, 0x07FE
    6d3a:	f0 91 ff 07 	lds	r31, 0x07FF
    6d3e:	20 85       	ldd	r18, Z+8	; 0x08
    6d40:	31 85       	ldd	r19, Z+9	; 0x09
    6d42:	8a e0       	ldi	r24, 0x0A	; 10
    6d44:	bf 01       	movw	r22, r30
    6d46:	f9 01       	movw	r30, r18
    6d48:	09 95       	icall
    6d4a:	89 2b       	or	r24, r25
    6d4c:	11 f0       	breq	.+4      	; 0x6d52 <puts+0x5e>
    6d4e:	cf ef       	ldi	r28, 0xFF	; 255
    6d50:	df ef       	ldi	r29, 0xFF	; 255
    6d52:	ce 01       	movw	r24, r28
    6d54:	df 91       	pop	r29
    6d56:	cf 91       	pop	r28
    6d58:	1f 91       	pop	r17
    6d5a:	0f 91       	pop	r16
    6d5c:	08 95       	ret

00006d5e <__ultoa_invert>:
    6d5e:	fa 01       	movw	r30, r20
    6d60:	aa 27       	eor	r26, r26
    6d62:	28 30       	cpi	r18, 0x08	; 8
    6d64:	51 f1       	breq	.+84     	; 0x6dba <__ultoa_invert+0x5c>
    6d66:	20 31       	cpi	r18, 0x10	; 16
    6d68:	81 f1       	breq	.+96     	; 0x6dca <__ultoa_invert+0x6c>
    6d6a:	e8 94       	clt
    6d6c:	6f 93       	push	r22
    6d6e:	6e 7f       	andi	r22, 0xFE	; 254
    6d70:	6e 5f       	subi	r22, 0xFE	; 254
    6d72:	7f 4f       	sbci	r23, 0xFF	; 255
    6d74:	8f 4f       	sbci	r24, 0xFF	; 255
    6d76:	9f 4f       	sbci	r25, 0xFF	; 255
    6d78:	af 4f       	sbci	r26, 0xFF	; 255
    6d7a:	b1 e0       	ldi	r27, 0x01	; 1
    6d7c:	3e d0       	rcall	.+124    	; 0x6dfa <__ultoa_invert+0x9c>
    6d7e:	b4 e0       	ldi	r27, 0x04	; 4
    6d80:	3c d0       	rcall	.+120    	; 0x6dfa <__ultoa_invert+0x9c>
    6d82:	67 0f       	add	r22, r23
    6d84:	78 1f       	adc	r23, r24
    6d86:	89 1f       	adc	r24, r25
    6d88:	9a 1f       	adc	r25, r26
    6d8a:	a1 1d       	adc	r26, r1
    6d8c:	68 0f       	add	r22, r24
    6d8e:	79 1f       	adc	r23, r25
    6d90:	8a 1f       	adc	r24, r26
    6d92:	91 1d       	adc	r25, r1
    6d94:	a1 1d       	adc	r26, r1
    6d96:	6a 0f       	add	r22, r26
    6d98:	71 1d       	adc	r23, r1
    6d9a:	81 1d       	adc	r24, r1
    6d9c:	91 1d       	adc	r25, r1
    6d9e:	a1 1d       	adc	r26, r1
    6da0:	20 d0       	rcall	.+64     	; 0x6de2 <__ultoa_invert+0x84>
    6da2:	09 f4       	brne	.+2      	; 0x6da6 <__ultoa_invert+0x48>
    6da4:	68 94       	set
    6da6:	3f 91       	pop	r19
    6da8:	2a e0       	ldi	r18, 0x0A	; 10
    6daa:	26 9f       	mul	r18, r22
    6dac:	11 24       	eor	r1, r1
    6dae:	30 19       	sub	r19, r0
    6db0:	30 5d       	subi	r19, 0xD0	; 208
    6db2:	31 93       	st	Z+, r19
    6db4:	de f6       	brtc	.-74     	; 0x6d6c <__ultoa_invert+0xe>
    6db6:	cf 01       	movw	r24, r30
    6db8:	08 95       	ret
    6dba:	46 2f       	mov	r20, r22
    6dbc:	47 70       	andi	r20, 0x07	; 7
    6dbe:	40 5d       	subi	r20, 0xD0	; 208
    6dc0:	41 93       	st	Z+, r20
    6dc2:	b3 e0       	ldi	r27, 0x03	; 3
    6dc4:	0f d0       	rcall	.+30     	; 0x6de4 <__ultoa_invert+0x86>
    6dc6:	c9 f7       	brne	.-14     	; 0x6dba <__ultoa_invert+0x5c>
    6dc8:	f6 cf       	rjmp	.-20     	; 0x6db6 <__ultoa_invert+0x58>
    6dca:	46 2f       	mov	r20, r22
    6dcc:	4f 70       	andi	r20, 0x0F	; 15
    6dce:	40 5d       	subi	r20, 0xD0	; 208
    6dd0:	4a 33       	cpi	r20, 0x3A	; 58
    6dd2:	18 f0       	brcs	.+6      	; 0x6dda <__ultoa_invert+0x7c>
    6dd4:	49 5d       	subi	r20, 0xD9	; 217
    6dd6:	31 fd       	sbrc	r19, 1
    6dd8:	40 52       	subi	r20, 0x20	; 32
    6dda:	41 93       	st	Z+, r20
    6ddc:	02 d0       	rcall	.+4      	; 0x6de2 <__ultoa_invert+0x84>
    6dde:	a9 f7       	brne	.-22     	; 0x6dca <__ultoa_invert+0x6c>
    6de0:	ea cf       	rjmp	.-44     	; 0x6db6 <__ultoa_invert+0x58>
    6de2:	b4 e0       	ldi	r27, 0x04	; 4
    6de4:	a6 95       	lsr	r26
    6de6:	97 95       	ror	r25
    6de8:	87 95       	ror	r24
    6dea:	77 95       	ror	r23
    6dec:	67 95       	ror	r22
    6dee:	ba 95       	dec	r27
    6df0:	c9 f7       	brne	.-14     	; 0x6de4 <__ultoa_invert+0x86>
    6df2:	00 97       	sbiw	r24, 0x00	; 0
    6df4:	61 05       	cpc	r22, r1
    6df6:	71 05       	cpc	r23, r1
    6df8:	08 95       	ret
    6dfa:	9b 01       	movw	r18, r22
    6dfc:	ac 01       	movw	r20, r24
    6dfe:	0a 2e       	mov	r0, r26
    6e00:	06 94       	lsr	r0
    6e02:	57 95       	ror	r21
    6e04:	47 95       	ror	r20
    6e06:	37 95       	ror	r19
    6e08:	27 95       	ror	r18
    6e0a:	ba 95       	dec	r27
    6e0c:	c9 f7       	brne	.-14     	; 0x6e00 <__ultoa_invert+0xa2>
    6e0e:	62 0f       	add	r22, r18
    6e10:	73 1f       	adc	r23, r19
    6e12:	84 1f       	adc	r24, r20
    6e14:	95 1f       	adc	r25, r21
    6e16:	a0 1d       	adc	r26, r0
    6e18:	08 95       	ret

00006e1a <_exit>:
    6e1a:	f8 94       	cli

00006e1c <__stop_program>:
    6e1c:	ff cf       	rjmp	.-2      	; 0x6e1c <__stop_program>
