
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000380  00800100  00006d8e  00006e22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003cf  00800480  00800480  000071a2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000071a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000811  00000000  00000000  00007202  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dd0  00000000  00000000  00007a13  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000047a  00000000  00000000  000097e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001aa4  00000000  00000000  00009c5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  0000b704  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000dfe  00000000  00000000  0000ba54  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001328  00000000  00000000  0000c852  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 89 23 	jmp	0x4712	; 0x4712 <__vector_4>
      14:	0c 94 b2 23 	jmp	0x4764	; 0x4764 <__vector_5>
      18:	0c 94 db 23 	jmp	0x47b6	; 0x47b6 <__vector_6>
      1c:	0c 94 04 24 	jmp	0x4808	; 0x4808 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <__vector_9>
      28:	0c 94 93 22 	jmp	0x4526	; 0x4526 <__vector_10>
      2c:	0c 94 bc 22 	jmp	0x4578	; 0x4578 <__vector_11>
      30:	0c 94 37 23 	jmp	0x466e	; 0x466e <__vector_12>
      34:	0c 94 e5 22 	jmp	0x45ca	; 0x45ca <__vector_13>
      38:	0c 94 0e 23 	jmp	0x461c	; 0x461c <__vector_14>
      3c:	0c 94 60 23 	jmp	0x46c0	; 0x46c0 <__vector_15>
      40:	0c 94 ef 21 	jmp	0x43de	; 0x43de <__vector_16>
      44:	0c 94 18 22 	jmp	0x4430	; 0x4430 <__vector_17>
      48:	0c 94 41 22 	jmp	0x4482	; 0x4482 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	54 1f       	adc	r21, r20
      7e:	57 1f       	adc	r21, r23
      80:	5a 1f       	adc	r21, r26
      82:	5d 1f       	adc	r21, r29
      84:	66 1f       	adc	r22, r22
      86:	60 1f       	adc	r22, r16
      88:	63 1f       	adc	r22, r19
      8a:	69 1f       	adc	r22, r25
      8c:	6c 1f       	adc	r22, r28
      8e:	6f 1f       	adc	r22, r31
      90:	72 1f       	adc	r23, r18
      92:	75 1f       	adc	r23, r21
      94:	78 1f       	adc	r23, r24
      96:	7b 1f       	adc	r23, r27
      98:	7e 1f       	adc	r23, r30
      9a:	81 1f       	adc	r24, r17
      9c:	84 1f       	adc	r24, r20
      9e:	87 1f       	adc	r24, r23
      a0:	8a 1f       	adc	r24, r26
      a2:	9b 1f       	adc	r25, r27
      a4:	9e 1f       	adc	r25, r30
      a6:	a1 1f       	adc	r26, r17
      a8:	a4 1f       	adc	r26, r20
      aa:	ad 1f       	adc	r26, r29
      ac:	a7 1f       	adc	r26, r23
      ae:	aa 1f       	adc	r26, r26
      b0:	b0 1f       	adc	r27, r16
      b2:	b3 1f       	adc	r27, r19
      b4:	b6 1f       	adc	r27, r22
      b6:	b9 1f       	adc	r27, r25
      b8:	bc 1f       	adc	r27, r28
      ba:	bf 1f       	adc	r27, r31
      bc:	c2 1f       	adc	r28, r18
      be:	c5 1f       	adc	r28, r21
      c0:	c8 1f       	adc	r28, r24
      c2:	cb 1f       	adc	r28, r27
      c4:	ce 1f       	adc	r28, r30
      c6:	d1 1f       	adc	r29, r17
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ee e8       	ldi	r30, 0x8E	; 142
     676:	fd e6       	ldi	r31, 0x6D	; 109
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a0 38       	cpi	r26, 0x80	; 128
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	a0 e8       	ldi	r26, 0x80	; 128
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	af 34       	cpi	r26, 0x4F	; 79
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 a7 19 	call	0x334e	; 0x334e <main>
     698:	0c 94 c5 36 	jmp	0x6d8a	; 0x6d8a <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 2d 21 	call	0x425a	; 0x425a <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 53 21 	call	0x42a6	; 0x42a6 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 01 21 	call	0x4202	; 0x4202 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 99 21 	call	0x4332	; 0x4332 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 9c 19 	call	0x3338	; 0x3338 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 65 19 	call	0x32ca	; 0x32ca <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 9c 19 	call	0x3338	; 0x3338 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 65 19 	call	0x32ca	; 0x32ca <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 9c 19 	call	0x3338	; 0x3338 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 65 19 	call	0x32ca	; 0x32ca <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 9c 19 	call	0x3338	; 0x3338 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 65 19 	call	0x32ca	; 0x32ca <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 9c 19 	call	0x3338	; 0x3338 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 65 19 	call	0x32ca	; 0x32ca <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 9c 19 	call	0x3338	; 0x3338 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 65 19 	call	0x32ca	; 0x32ca <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 1d 05 	sts	0x051D, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 05 20 	call	0x400a	; 0x400a <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 05 20 	call	0x400a	; 0x400a <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 05 20 	call	0x400a	; 0x400a <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 1d 05 	sts	0x051D, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 05 20 	call	0x400a	; 0x400a <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 05 20 	call	0x400a	; 0x400a <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 05 20 	call	0x400a	; 0x400a <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 32 36 	call	0x6c64	; 0x6c64 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 bf 1a 	call	0x357e	; 0x357e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 aa 1a 	call	0x3554	; 0x3554 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 aa 1a 	call	0x3554	; 0x3554 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 32 36 	call	0x6c64	; 0x6c64 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 bf 1a 	call	0x357e	; 0x357e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 aa 1a 	call	0x3554	; 0x3554 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 aa 1a 	call	0x3554	; 0x3554 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 32 36 	call	0x6c64	; 0x6c64 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 bf 1a 	call	0x357e	; 0x357e <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 bf 1a 	call	0x357e	; 0x357e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 aa 1a 	call	0x3554	; 0x3554 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 aa 1a 	call	0x3554	; 0x3554 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	8e e8       	ldi	r24, 0x8E	; 142
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	a1 eb       	ldi	r26, 0xB1	; 177
     c56:	b7 e0       	ldi	r27, 0x07	; 7
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e9 ea       	ldi	r30, 0xA9	; 169
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	86 e1       	ldi	r24, 0x16	; 22
     c66:	96 e0       	ldi	r25, 0x06	; 6
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 39 07 	lds	r10, 0x0739
     c9e:	b0 90 3a 07 	lds	r11, 0x073A
     ca2:	c0 90 3b 07 	lds	r12, 0x073B
     ca6:	d0 90 3c 07 	lds	r13, 0x073C
			rtIR_old[i] = rtIR;
     caa:	e0 90 3d 07 	lds	r14, 0x073D
     cae:	f0 90 3e 07 	lds	r15, 0x073E
     cb2:	00 91 3f 07 	lds	r16, 0x073F
     cb6:	10 91 40 07 	lds	r17, 0x0740
			ftIR_old[i] = ftIR;
     cba:	20 90 96 05 	lds	r2, 0x0596
     cbe:	30 90 97 05 	lds	r3, 0x0597
     cc2:	40 90 98 05 	lds	r4, 0x0598
     cc6:	50 90 99 05 	lds	r5, 0x0599
			bkIR_old[i] = bkIR;
     cca:	20 91 a0 05 	lds	r18, 0x05A0
     cce:	30 91 a1 05 	lds	r19, 0x05A1
     cd2:	40 91 a2 05 	lds	r20, 0x05A2
     cd6:	50 91 a3 05 	lds	r21, 0x05A3
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e2 5e       	subi	r30, 0xE2	; 226
     ce2:	fa 4f       	sbci	r31, 0xFA	; 250
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	ef 5b       	subi	r30, 0xBF	; 191
     cf0:	f8 4f       	sbci	r31, 0xF8	; 248
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e7 5c       	subi	r30, 0xC7	; 199
     cfe:	f9 4f       	sbci	r31, 0xF9	; 249
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	ea 55       	subi	r30, 0x5A	; 90
     d0c:	fa 4f       	sbci	r31, 0xFA	; 250
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a6 51       	subi	r26, 0x16	; 22
     e02:	b5 40       	sbci	r27, 0x05	; 5
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 39 07 	lds	r24, 0x0739
     e0c:	90 91 3a 07 	lds	r25, 0x073A
     e10:	a0 91 3b 07 	lds	r26, 0x073B
     e14:	b0 91 3c 07 	lds	r27, 0x073C
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 3d 07 	lds	r24, 0x073D
     e28:	90 91 3e 07 	lds	r25, 0x073E
     e2c:	a0 91 3f 07 	lds	r26, 0x073F
     e30:	b0 91 40 07 	lds	r27, 0x0740
     e34:	80 93 41 07 	sts	0x0741, r24
     e38:	90 93 42 07 	sts	0x0742, r25
     e3c:	a0 93 43 07 	sts	0x0743, r26
     e40:	b0 93 44 07 	sts	0x0744, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 96 05 	lds	r24, 0x0596
     e48:	90 91 97 05 	lds	r25, 0x0597
     e4c:	a0 91 98 05 	lds	r26, 0x0598
     e50:	b0 91 99 05 	lds	r27, 0x0599
     e54:	80 93 39 06 	sts	0x0639, r24
     e58:	90 93 3a 06 	sts	0x063A, r25
     e5c:	a0 93 3b 06 	sts	0x063B, r26
     e60:	b0 93 3c 06 	sts	0x063C, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 a0 05 	lds	r24, 0x05A0
     e68:	90 91 a1 05 	lds	r25, 0x05A1
     e6c:	a0 91 a2 05 	lds	r26, 0x05A2
     e70:	b0 91 a3 05 	lds	r27, 0x05A3
     e74:	80 93 a6 05 	sts	0x05A6, r24
     e78:	90 93 a7 05 	sts	0x05A7, r25
     e7c:	a0 93 a8 05 	sts	0x05A8, r26
     e80:	b0 93 a9 05 	sts	0x05A9, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
     e94:	60 93 39 07 	sts	0x0739, r22
     e98:	70 93 3a 07 	sts	0x073A, r23
     e9c:	80 93 3b 07 	sts	0x073B, r24
     ea0:	90 93 3c 07 	sts	0x073C, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
     eb8:	60 93 3d 07 	sts	0x073D, r22
     ebc:	70 93 3e 07 	sts	0x073E, r23
     ec0:	80 93 3f 07 	sts	0x073F, r24
     ec4:	90 93 40 07 	sts	0x0740, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
     edc:	60 93 96 05 	sts	0x0596, r22
     ee0:	70 93 97 05 	sts	0x0597, r23
     ee4:	80 93 98 05 	sts	0x0598, r24
     ee8:	90 93 99 05 	sts	0x0599, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
     f00:	60 93 a0 05 	sts	0x05A0, r22
     f04:	70 93 a1 05 	sts	0x05A1, r23
     f08:	80 93 a2 05 	sts	0x05A2, r24
     f0c:	90 93 a3 05 	sts	0x05A3, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 9a 05 	sts	0x059A, r24
     f66:	90 93 9b 05 	sts	0x059B, r25
     f6a:	a0 93 9c 05 	sts	0x059C, r26
     f6e:	b0 93 9d 05 	sts	0x059D, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 9a 05 	lds	r18, 0x059A
     f7a:	30 91 9b 05 	lds	r19, 0x059B
     f7e:	40 91 9c 05 	lds	r20, 0x059C
     f82:	50 91 9d 05 	lds	r21, 0x059D
     f86:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 9a 05 	sts	0x059A, r22
     f92:	70 93 9b 05 	sts	0x059B, r23
     f96:	80 93 9c 05 	sts	0x059C, r24
     f9a:	90 93 9d 05 	sts	0x059D, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 35 06 	lds	r18, 0x0635
     fa6:	30 91 36 06 	lds	r19, 0x0636
     faa:	40 91 37 06 	lds	r20, 0x0637
     fae:	50 91 38 06 	lds	r21, 0x0638
     fb2:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__subsf3>
     fb6:	2d ec       	ldi	r18, 0xCD	; 205
     fb8:	3c ec       	ldi	r19, 0xCC	; 204
     fba:	4c ec       	ldi	r20, 0xCC	; 204
     fbc:	5d e3       	ldi	r21, 0x3D	; 61
     fbe:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a0 97       	sbiw	r28, 0x20	; 32
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	2d 83       	std	Y+5, r18	; 0x05
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	e9 86       	std	Y+9, r14	; 0x09
    106c:	fa 86       	std	Y+10, r15	; 0x0a
    106e:	0b 87       	std	Y+11, r16	; 0x0b
    1070:	1c 87       	std	Y+12, r17	; 0x0c
    1072:	ad 86       	std	Y+13, r10	; 0x0d
    1074:	be 86       	std	Y+14, r11	; 0x0e
    1076:	cf 86       	std	Y+15, r12	; 0x0f
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    107c:	33 24       	eor	r3, r3
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	14 f4       	brge	.+4      	; 0x1096 <move_arc_stnb+0x6c>
    1092:	33 24       	eor	r3, r3
    1094:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1096:	6d 81       	ldd	r22, Y+5	; 0x05
    1098:	7e 81       	ldd	r23, Y+6	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	2c ed       	ldi	r18, 0xDC	; 220
    10a0:	38 eb       	ldi	r19, 0xB8	; 184
    10a2:	48 e0       	ldi	r20, 0x08	; 8
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    10aa:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	77 ff       	sbrs	r23, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <move_arc_stnb+0x90>
    10b4:	30 95       	com	r19
    10b6:	21 95       	neg	r18
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	b9 01       	movw	r22, r18
    10bc:	88 27       	eor	r24, r24
    10be:	77 fd       	sbrc	r23, 7
    10c0:	80 95       	com	r24
    10c2:	98 2f       	mov	r25, r24
    10c4:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__floatsisf>
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    10d0:	69 85       	ldd	r22, Y+9	; 0x09
    10d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	2c ed       	ldi	r18, 0xDC	; 220
    10da:	38 eb       	ldi	r19, 0xB8	; 184
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    10e4:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__fixsfsi>
    10e8:	9b 01       	movw	r18, r22
    10ea:	77 ff       	sbrs	r23, 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <move_arc_stnb+0xca>
    10ee:	30 95       	com	r19
    10f0:	21 95       	neg	r18
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__floatsisf>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1106:	6d 85       	ldd	r22, Y+13	; 0x0d
    1108:	7e 85       	ldd	r23, Y+14	; 0x0e
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	2c ed       	ldi	r18, 0xDC	; 220
    1110:	38 eb       	ldi	r19, 0xB8	; 184
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	5e e3       	ldi	r21, 0x3E	; 62
    1116:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    111a:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	77 ff       	sbrs	r23, 7
    1122:	03 c0       	rjmp	.+6      	; 0x112a <move_arc_stnb+0x100>
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__floatsisf>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	5f e4       	ldi	r21, 0x4F	; 79
    1148:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	a1 f5       	brne	.+104    	; 0x11b8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	2d b7       	in	r18, 0x3d	; 61
    117a:	3e b7       	in	r19, 0x3e	; 62
    117c:	29 50       	subi	r18, 0x09	; 9
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	3e bf       	out	0x3e, r19	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	2d bf       	out	0x3d, r18	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	ad b7       	in	r26, 0x3d	; 61
    1192:	be b7       	in	r27, 0x3e	; 62
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	5c 92       	st	X, r5
    1198:	4e 92       	st	-X, r4
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	93 82       	std	Z+3, r9	; 0x03
    119e:	82 82       	std	Z+2, r8	; 0x02
    11a0:	75 83       	std	Z+5, r23	; 0x05
    11a2:	64 83       	std	Z+4, r22	; 0x04
    11a4:	26 82       	std	Z+6, r2	; 0x06
    11a6:	10 86       	std	Z+8, r1	; 0x08
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	43 2d       	mov	r20, r3
    11b0:	92 01       	movw	r18, r4
    11b2:	84 01       	movw	r16, r8
    11b4:	76 01       	movw	r14, r12
    11b6:	c1 c1       	rjmp	.+898    	; 0x153a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	e9 f5       	brne	.+122    	; 0x1246 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    11d8:	3b 01       	movw	r6, r22
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    11e2:	8b 01       	movw	r16, r22
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    11ec:	7b 01       	movw	r14, r22
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	29 50       	subi	r18, 0x09	; 9
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	3e bf       	out	0x3e, r19	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	2d bf       	out	0x3d, r18	; 61
    1200:	ed b7       	in	r30, 0x3d	; 61
    1202:	fe b7       	in	r31, 0x3e	; 62
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <move_arc_stnb+0x1e4>
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	71 82       	std	Z+1, r7	; 0x01
    1210:	60 82       	st	Z, r6
    1212:	13 83       	std	Z+3, r17	; 0x03
    1214:	02 83       	std	Z+2, r16	; 0x02
    1216:	f5 82       	std	Z+5, r15	; 0x05
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	26 82       	std	Z+6, r2	; 0x06
    121c:	10 86       	std	Z+8, r1	; 0x08
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	93 01       	movw	r18, r6
    1226:	c2 2c       	mov	r12, r2
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	83 2c       	mov	r8, r3
    122e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <STEPPER_move>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	be bf       	out	0x3e, r27	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ad bf       	out	0x3d, r26	; 61
    1244:	89 c1       	rjmp	.+786    	; 0x1558 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1246:	c3 01       	movw	r24, r6
    1248:	b2 01       	movw	r22, r4
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__gesf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <move_arc_stnb+0x232>
    125a:	b1 c0       	rjmp	.+354    	; 0x13be <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    125c:	66 e6       	ldi	r22, 0x66	; 102
    125e:	76 e6       	ldi	r23, 0x66	; 102
    1260:	8a ea       	ldi	r24, 0xAA	; 170
    1262:	91 ec       	ldi	r25, 0xC1	; 193
    1264:	a3 01       	movw	r20, r6
    1266:	92 01       	movw	r18, r4
    1268:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    127c:	66 e6       	ldi	r22, 0x66	; 102
    127e:	76 e6       	ldi	r23, 0x66	; 102
    1280:	8a ea       	ldi	r24, 0xAA	; 170
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	a3 01       	movw	r20, r6
    1286:	92 01       	movw	r18, r4
    1288:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	39 97       	sbiw	r30, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8d b6       	in	r8, 0x3d	; 61
    12ae:	9e b6       	in	r9, 0x3e	; 62
    12b0:	08 94       	sec
    12b2:	81 1c       	adc	r8, r1
    12b4:	91 1c       	adc	r9, r1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	a8 01       	movw	r20, r16
    12c0:	97 01       	movw	r18, r14
    12c2:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    12c6:	2c ed       	ldi	r18, 0xDC	; 220
    12c8:	38 eb       	ldi	r19, 0xB8	; 184
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    12d2:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    12d6:	69 8b       	std	Y+17, r22	; 0x11
    12d8:	7a 8b       	std	Y+18, r23	; 0x12
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    12ee:	2c ed       	ldi	r18, 0xDC	; 220
    12f0:	38 eb       	ldi	r19, 0xB8	; 184
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	5e e3       	ldi	r21, 0x3E	; 62
    12f6:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    12fa:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	6d 85       	ldd	r22, Y+13	; 0x0d
    1308:	7e 85       	ldd	r23, Y+14	; 0x0e
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	a8 01       	movw	r20, r16
    1310:	97 01       	movw	r18, r14
    1312:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1316:	2c ed       	ldi	r18, 0xDC	; 220
    1318:	38 eb       	ldi	r19, 0xB8	; 184
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1322:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1326:	2b 01       	movw	r4, r22
    1328:	3c 01       	movw	r6, r24
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	7e 81       	ldd	r23, Y+6	; 0x06
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a6 01       	movw	r20, r12
    1334:	95 01       	movw	r18, r10
    1336:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    133a:	2c ed       	ldi	r18, 0xDC	; 220
    133c:	38 eb       	ldi	r19, 0xB8	; 184
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1346:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    134a:	d4 01       	movw	r26, r8
    134c:	6d 93       	st	X+, r22
    134e:	7c 93       	st	X, r23
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1360:	2c ed       	ldi	r18, 0xDC	; 220
    1362:	38 eb       	ldi	r19, 0xB8	; 184
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	5e e3       	ldi	r21, 0x3E	; 62
    1368:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    136c:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1370:	f4 01       	movw	r30, r8
    1372:	73 83       	std	Z+3, r23	; 0x03
    1374:	62 83       	std	Z+2, r22	; 0x02
    1376:	6d 85       	ldd	r22, Y+13	; 0x0d
    1378:	7e 85       	ldd	r23, Y+14	; 0x0e
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	a6 01       	movw	r20, r12
    1380:	95 01       	movw	r18, r10
    1382:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1386:	2c ed       	ldi	r18, 0xDC	; 220
    1388:	38 eb       	ldi	r19, 0xB8	; 184
    138a:	48 e0       	ldi	r20, 0x08	; 8
    138c:	5e e3       	ldi	r21, 0x3E	; 62
    138e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1392:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1396:	d4 01       	movw	r26, r8
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	7c 93       	st	X, r23
    139c:	6e 93       	st	-X, r22
    139e:	14 97       	sbiw	r26, 0x04	; 4
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2c 92       	st	X, r2
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	1c 92       	st	X, r1
    13aa:	1e 92       	st	-X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	43 2d       	mov	r20, r3
    13b4:	29 89       	ldd	r18, Y+17	; 0x11
    13b6:	3a 89       	ldd	r19, Y+18	; 0x12
    13b8:	0d 89       	ldd	r16, Y+21	; 0x15
    13ba:	1e 89       	ldd	r17, Y+22	; 0x16
    13bc:	bd c0       	rjmp	.+378    	; 0x1538 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    13ce:	87 fd       	sbrc	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <move_arc_stnb+0x3ac>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	c1 c0       	rjmp	.+386    	; 0x1558 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    13d6:	66 e6       	ldi	r22, 0x66	; 102
    13d8:	76 e6       	ldi	r23, 0x66	; 102
    13da:	8a ea       	ldi	r24, 0xAA	; 170
    13dc:	91 e4       	ldi	r25, 0x41	; 65
    13de:	a3 01       	movw	r20, r6
    13e0:	92 01       	movw	r18, r4
    13e2:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    13f6:	66 e6       	ldi	r22, 0x66	; 102
    13f8:	76 e6       	ldi	r23, 0x66	; 102
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	91 ec       	ldi	r25, 0xC1	; 193
    13fe:	a3 01       	movw	r20, r6
    1400:	92 01       	movw	r18, r4
    1402:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    1412:	5b 01       	movw	r10, r22
    1414:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1416:	2d b7       	in	r18, 0x3d	; 61
    1418:	3e b7       	in	r19, 0x3e	; 62
    141a:	29 50       	subi	r18, 0x09	; 9
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	3e bf       	out	0x3e, r19	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	2d bf       	out	0x3d, r18	; 61
    1428:	8d b6       	in	r8, 0x3d	; 61
    142a:	9e b6       	in	r9, 0x3e	; 62
    142c:	08 94       	sec
    142e:	81 1c       	adc	r8, r1
    1430:	91 1c       	adc	r9, r1
    1432:	6d 81       	ldd	r22, Y+5	; 0x05
    1434:	7e 81       	ldd	r23, Y+6	; 0x06
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1442:	2c ed       	ldi	r18, 0xDC	; 220
    1444:	38 eb       	ldi	r19, 0xB8	; 184
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    144e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1452:	69 8f       	std	Y+25, r22	; 0x19
    1454:	7a 8f       	std	Y+26, r23	; 0x1a
    1456:	8b 8f       	std	Y+27, r24	; 0x1b
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	69 85       	ldd	r22, Y+9	; 0x09
    145c:	7a 85       	ldd	r23, Y+10	; 0x0a
    145e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1460:	9c 85       	ldd	r25, Y+12	; 0x0c
    1462:	a8 01       	movw	r20, r16
    1464:	97 01       	movw	r18, r14
    1466:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    146a:	2c ed       	ldi	r18, 0xDC	; 220
    146c:	38 eb       	ldi	r19, 0xB8	; 184
    146e:	48 e0       	ldi	r20, 0x08	; 8
    1470:	5e e3       	ldi	r21, 0x3E	; 62
    1472:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1476:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    147a:	6d 8f       	std	Y+29, r22	; 0x1d
    147c:	7e 8f       	std	Y+30, r23	; 0x1e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	a8 01       	movw	r20, r16
    148c:	97 01       	movw	r18, r14
    148e:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1492:	2c ed       	ldi	r18, 0xDC	; 220
    1494:	38 eb       	ldi	r19, 0xB8	; 184
    1496:	48 e0       	ldi	r20, 0x08	; 8
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    149e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    14a2:	2b 01       	movw	r4, r22
    14a4:	3c 01       	movw	r6, r24
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	a6 01       	movw	r20, r12
    14b0:	95 01       	movw	r18, r10
    14b2:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    14b6:	2c ed       	ldi	r18, 0xDC	; 220
    14b8:	38 eb       	ldi	r19, 0xB8	; 184
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    14c2:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    14c6:	d4 01       	movw	r26, r8
    14c8:	6d 93       	st	X+, r22
    14ca:	7c 93       	st	X, r23
    14cc:	69 85       	ldd	r22, Y+9	; 0x09
    14ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d4:	a6 01       	movw	r20, r12
    14d6:	95 01       	movw	r18, r10
    14d8:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    14dc:	2c ed       	ldi	r18, 0xDC	; 220
    14de:	38 eb       	ldi	r19, 0xB8	; 184
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	5e e3       	ldi	r21, 0x3E	; 62
    14e4:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    14e8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    14ec:	f4 01       	movw	r30, r8
    14ee:	73 83       	std	Z+3, r23	; 0x03
    14f0:	62 83       	std	Z+2, r22	; 0x02
    14f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1502:	2c ed       	ldi	r18, 0xDC	; 220
    1504:	38 eb       	ldi	r19, 0xB8	; 184
    1506:	48 e0       	ldi	r20, 0x08	; 8
    1508:	5e e3       	ldi	r21, 0x3E	; 62
    150a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    150e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1512:	d4 01       	movw	r26, r8
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	7c 93       	st	X, r23
    1518:	6e 93       	st	-X, r22
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	16 96       	adiw	r26, 0x06	; 6
    151e:	2c 92       	st	X, r2
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	18 96       	adiw	r26, 0x08	; 8
    1524:	1c 92       	st	X, r1
    1526:	1e 92       	st	-X, r1
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	43 2d       	mov	r20, r3
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1534:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1536:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1538:	72 01       	movw	r14, r4
    153a:	c2 2c       	mov	r12, r2
    153c:	aa 24       	eor	r10, r10
    153e:	bb 24       	eor	r11, r11
    1540:	83 2c       	mov	r8, r3
    1542:	0e 94 a8 1c 	call	0x3950	; 0x3950 <STEPPER_move>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	39 96       	adiw	r30, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	fe bf       	out	0x3e, r31	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	2b 01       	movw	r4, r22
    15c0:	3c 01       	movw	r6, r24
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	e9 86       	std	Y+9, r14	; 0x09
    15cc:	fa 86       	std	Y+10, r15	; 0x0a
    15ce:	0b 87       	std	Y+11, r16	; 0x0b
    15d0:	1c 87       	std	Y+12, r17	; 0x0c
    15d2:	ad 86       	std	Y+13, r10	; 0x0d
    15d4:	be 86       	std	Y+14, r11	; 0x0e
    15d6:	cf 86       	std	Y+15, r12	; 0x0f
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    15dc:	33 24       	eor	r3, r3
    15de:	ca 01       	movw	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	14 f4       	brge	.+4      	; 0x15f6 <move_arc_stwt+0x6c>
    15f2:	33 24       	eor	r3, r3
    15f4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	2c ed       	ldi	r18, 0xDC	; 220
    1600:	38 eb       	ldi	r19, 0xB8	; 184
    1602:	48 e0       	ldi	r20, 0x08	; 8
    1604:	5e e3       	ldi	r21, 0x3E	; 62
    1606:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    160a:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	77 ff       	sbrs	r23, 7
    1612:	03 c0       	rjmp	.+6      	; 0x161a <move_arc_stwt+0x90>
    1614:	30 95       	com	r19
    1616:	21 95       	neg	r18
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	b9 01       	movw	r22, r18
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__floatsisf>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	2c ed       	ldi	r18, 0xDC	; 220
    163a:	38 eb       	ldi	r19, 0xB8	; 184
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	5e e3       	ldi	r21, 0x3E	; 62
    1640:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1644:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__fixsfsi>
    1648:	9b 01       	movw	r18, r22
    164a:	77 ff       	sbrs	r23, 7
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <move_arc_stwt+0xca>
    164e:	30 95       	com	r19
    1650:	21 95       	neg	r18
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	b9 01       	movw	r22, r18
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__floatsisf>
    1662:	4b 01       	movw	r8, r22
    1664:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1666:	6d 85       	ldd	r22, Y+13	; 0x0d
    1668:	7e 85       	ldd	r23, Y+14	; 0x0e
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	2c ed       	ldi	r18, 0xDC	; 220
    1670:	38 eb       	ldi	r19, 0xB8	; 184
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	5e e3       	ldi	r21, 0x3E	; 62
    1676:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    167a:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 ff       	sbrs	r23, 7
    1682:	03 c0       	rjmp	.+6      	; 0x168a <move_arc_stwt+0x100>
    1684:	30 95       	com	r19
    1686:	21 95       	neg	r18
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__floatsisf>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	5f e4       	ldi	r21, 0x4F	; 79
    16a8:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	a1 f5       	brne	.+104    	; 0x1718 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    16b0:	69 81       	ldd	r22, Y+1	; 0x01
    16b2:	7a 81       	ldd	r23, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	c5 01       	movw	r24, r10
    16c2:	b4 01       	movw	r22, r8
    16c4:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	29 50       	subi	r18, 0x09	; 9
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	3e bf       	out	0x3e, r19	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	2d bf       	out	0x3d, r18	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ad b7       	in	r26, 0x3d	; 61
    16f2:	be b7       	in	r27, 0x3e	; 62
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	5c 92       	st	X, r5
    16f8:	4e 92       	st	-X, r4
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	93 82       	std	Z+3, r9	; 0x03
    16fe:	82 82       	std	Z+2, r8	; 0x02
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    1704:	26 82       	std	Z+6, r2	; 0x06
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	43 2d       	mov	r20, r3
    1710:	92 01       	movw	r18, r4
    1712:	84 01       	movw	r16, r8
    1714:	76 01       	movw	r14, r12
    1716:	c1 c1       	rjmp	.+898    	; 0x1a9a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	e9 f5       	brne	.+122    	; 0x17a6 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1738:	3b 01       	movw	r6, r22
    173a:	c5 01       	movw	r24, r10
    173c:	b4 01       	movw	r22, r8
    173e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1742:	8b 01       	movw	r16, r22
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    174c:	7b 01       	movw	r14, r22
    174e:	2d b7       	in	r18, 0x3d	; 61
    1750:	3e b7       	in	r19, 0x3e	; 62
    1752:	29 50       	subi	r18, 0x09	; 9
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	2d bf       	out	0x3d, r18	; 61
    1760:	ed b7       	in	r30, 0x3d	; 61
    1762:	fe b7       	in	r31, 0x3e	; 62
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	33 20       	and	r3, r3
    176a:	09 f4       	brne	.+2      	; 0x176e <move_arc_stwt+0x1e4>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	71 82       	std	Z+1, r7	; 0x01
    1770:	60 82       	st	Z, r6
    1772:	13 83       	std	Z+3, r17	; 0x03
    1774:	02 83       	std	Z+2, r16	; 0x02
    1776:	f5 82       	std	Z+5, r15	; 0x05
    1778:	e4 82       	std	Z+4, r14	; 0x04
    177a:	26 82       	std	Z+6, r2	; 0x06
    177c:	10 86       	std	Z+8, r1	; 0x08
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	93 01       	movw	r18, r6
    1786:	c2 2c       	mov	r12, r2
    1788:	aa 24       	eor	r10, r10
    178a:	bb 24       	eor	r11, r11
    178c:	83 2c       	mov	r8, r3
    178e:	0e 94 a8 1c 	call	0x3950	; 0x3950 <STEPPER_move>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	19 96       	adiw	r26, 0x09	; 9
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	be bf       	out	0x3e, r27	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	ad bf       	out	0x3d, r26	; 61
    17a4:	89 c1       	rjmp	.+786    	; 0x1ab8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <move_arc_stwt+0x232>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17bc:	66 e6       	ldi	r22, 0x66	; 102
    17be:	76 e6       	ldi	r23, 0x66	; 102
    17c0:	8a ea       	ldi	r24, 0xAA	; 170
    17c2:	91 ec       	ldi	r25, 0xC1	; 193
    17c4:	a3 01       	movw	r20, r6
    17c6:	92 01       	movw	r18, r4
    17c8:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    17d8:	7b 01       	movw	r14, r22
    17da:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17dc:	66 e6       	ldi	r22, 0x66	; 102
    17de:	76 e6       	ldi	r23, 0x66	; 102
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	91 e4       	ldi	r25, 0x41	; 65
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    17f8:	5b 01       	movw	r10, r22
    17fa:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    17fc:	ed b7       	in	r30, 0x3d	; 61
    17fe:	fe b7       	in	r31, 0x3e	; 62
    1800:	39 97       	sbiw	r30, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	8d b6       	in	r8, 0x3d	; 61
    180e:	9e b6       	in	r9, 0x3e	; 62
    1810:	08 94       	sec
    1812:	81 1c       	adc	r8, r1
    1814:	91 1c       	adc	r9, r1
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	a8 01       	movw	r20, r16
    1820:	97 01       	movw	r18, r14
    1822:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1826:	2c ed       	ldi	r18, 0xDC	; 220
    1828:	38 eb       	ldi	r19, 0xB8	; 184
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	5e e3       	ldi	r21, 0x3E	; 62
    182e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1832:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1836:	69 8b       	std	Y+17, r22	; 0x11
    1838:	7a 8b       	std	Y+18, r23	; 0x12
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	69 85       	ldd	r22, Y+9	; 0x09
    1840:	7a 85       	ldd	r23, Y+10	; 0x0a
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	a8 01       	movw	r20, r16
    1848:	97 01       	movw	r18, r14
    184a:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    184e:	2c ed       	ldi	r18, 0xDC	; 220
    1850:	38 eb       	ldi	r19, 0xB8	; 184
    1852:	48 e0       	ldi	r20, 0x08	; 8
    1854:	5e e3       	ldi	r21, 0x3E	; 62
    1856:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    185a:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	6d 85       	ldd	r22, Y+13	; 0x0d
    1868:	7e 85       	ldd	r23, Y+14	; 0x0e
    186a:	8f 85       	ldd	r24, Y+15	; 0x0f
    186c:	98 89       	ldd	r25, Y+16	; 0x10
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1876:	2c ed       	ldi	r18, 0xDC	; 220
    1878:	38 eb       	ldi	r19, 0xB8	; 184
    187a:	48 e0       	ldi	r20, 0x08	; 8
    187c:	5e e3       	ldi	r21, 0x3E	; 62
    187e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1882:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1886:	2b 01       	movw	r4, r22
    1888:	3c 01       	movw	r6, r24
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	a6 01       	movw	r20, r12
    1894:	95 01       	movw	r18, r10
    1896:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    189a:	2c ed       	ldi	r18, 0xDC	; 220
    189c:	38 eb       	ldi	r19, 0xB8	; 184
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    18a6:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    18aa:	d4 01       	movw	r26, r8
    18ac:	6d 93       	st	X+, r22
    18ae:	7c 93       	st	X, r23
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    18c0:	2c ed       	ldi	r18, 0xDC	; 220
    18c2:	38 eb       	ldi	r19, 0xB8	; 184
    18c4:	48 e0       	ldi	r20, 0x08	; 8
    18c6:	5e e3       	ldi	r21, 0x3E	; 62
    18c8:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    18cc:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    18d0:	f4 01       	movw	r30, r8
    18d2:	73 83       	std	Z+3, r23	; 0x03
    18d4:	62 83       	std	Z+2, r22	; 0x02
    18d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	a6 01       	movw	r20, r12
    18e0:	95 01       	movw	r18, r10
    18e2:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    18e6:	2c ed       	ldi	r18, 0xDC	; 220
    18e8:	38 eb       	ldi	r19, 0xB8	; 184
    18ea:	48 e0       	ldi	r20, 0x08	; 8
    18ec:	5e e3       	ldi	r21, 0x3E	; 62
    18ee:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    18f2:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    18f6:	d4 01       	movw	r26, r8
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	7c 93       	st	X, r23
    18fc:	6e 93       	st	-X, r22
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	2c 92       	st	X, r2
    1904:	16 97       	sbiw	r26, 0x06	; 6
    1906:	18 96       	adiw	r26, 0x08	; 8
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	43 2d       	mov	r20, r3
    1914:	29 89       	ldd	r18, Y+17	; 0x11
    1916:	3a 89       	ldd	r19, Y+18	; 0x12
    1918:	0d 89       	ldd	r16, Y+21	; 0x15
    191a:	1e 89       	ldd	r17, Y+22	; 0x16
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    192e:	87 fd       	sbrc	r24, 7
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <move_arc_stwt+0x3ac>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c1 c0       	rjmp	.+386    	; 0x1ab8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1936:	66 e6       	ldi	r22, 0x66	; 102
    1938:	76 e6       	ldi	r23, 0x66	; 102
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	91 e4       	ldi	r25, 0x41	; 65
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1956:	66 e6       	ldi	r22, 0x66	; 102
    1958:	76 e6       	ldi	r23, 0x66	; 102
    195a:	8a ea       	ldi	r24, 0xAA	; 170
    195c:	91 ec       	ldi	r25, 0xC1	; 193
    195e:	a3 01       	movw	r20, r6
    1960:	92 01       	movw	r18, r4
    1962:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    1972:	5b 01       	movw	r10, r22
    1974:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1976:	2d b7       	in	r18, 0x3d	; 61
    1978:	3e b7       	in	r19, 0x3e	; 62
    197a:	29 50       	subi	r18, 0x09	; 9
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	3e bf       	out	0x3e, r19	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	2d bf       	out	0x3d, r18	; 61
    1988:	8d b6       	in	r8, 0x3d	; 61
    198a:	9e b6       	in	r9, 0x3e	; 62
    198c:	08 94       	sec
    198e:	81 1c       	adc	r8, r1
    1990:	91 1c       	adc	r9, r1
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	a8 01       	movw	r20, r16
    199c:	97 01       	movw	r18, r14
    199e:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    19a2:	2c ed       	ldi	r18, 0xDC	; 220
    19a4:	38 eb       	ldi	r19, 0xB8	; 184
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	5e e3       	ldi	r21, 0x3E	; 62
    19aa:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    19ae:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    19b2:	69 8f       	std	Y+25, r22	; 0x19
    19b4:	7a 8f       	std	Y+26, r23	; 0x1a
    19b6:	8b 8f       	std	Y+27, r24	; 0x1b
    19b8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	a8 01       	movw	r20, r16
    19c4:	97 01       	movw	r18, r14
    19c6:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    19ca:	2c ed       	ldi	r18, 0xDC	; 220
    19cc:	38 eb       	ldi	r19, 0xB8	; 184
    19ce:	48 e0       	ldi	r20, 0x08	; 8
    19d0:	5e e3       	ldi	r21, 0x3E	; 62
    19d2:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    19d6:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    19da:	6d 8f       	std	Y+29, r22	; 0x1d
    19dc:	7e 8f       	std	Y+30, r23	; 0x1e
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	a8 01       	movw	r20, r16
    19ec:	97 01       	movw	r18, r14
    19ee:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    19f2:	2c ed       	ldi	r18, 0xDC	; 220
    19f4:	38 eb       	ldi	r19, 0xB8	; 184
    19f6:	48 e0       	ldi	r20, 0x08	; 8
    19f8:	5e e3       	ldi	r21, 0x3E	; 62
    19fa:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    19fe:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1a02:	2b 01       	movw	r4, r22
    1a04:	3c 01       	movw	r6, r24
    1a06:	6d 81       	ldd	r22, Y+5	; 0x05
    1a08:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1a16:	2c ed       	ldi	r18, 0xDC	; 220
    1a18:	38 eb       	ldi	r19, 0xB8	; 184
    1a1a:	48 e0       	ldi	r20, 0x08	; 8
    1a1c:	5e e3       	ldi	r21, 0x3E	; 62
    1a1e:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1a22:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1a26:	d4 01       	movw	r26, r8
    1a28:	6d 93       	st	X+, r22
    1a2a:	7c 93       	st	X, r23
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1a3c:	2c ed       	ldi	r18, 0xDC	; 220
    1a3e:	38 eb       	ldi	r19, 0xB8	; 184
    1a40:	48 e0       	ldi	r20, 0x08	; 8
    1a42:	5e e3       	ldi	r21, 0x3E	; 62
    1a44:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1a48:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	73 83       	std	Z+3, r23	; 0x03
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    1a62:	2c ed       	ldi	r18, 0xDC	; 220
    1a64:	38 eb       	ldi	r19, 0xB8	; 184
    1a66:	48 e0       	ldi	r20, 0x08	; 8
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    1a6e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1a72:	d4 01       	movw	r26, r8
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	7c 93       	st	X, r23
    1a78:	6e 93       	st	-X, r22
    1a7a:	14 97       	sbiw	r26, 0x04	; 4
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	2c 92       	st	X, r2
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	18 96       	adiw	r26, 0x08	; 8
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	17 97       	sbiw	r26, 0x07	; 7
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	43 2d       	mov	r20, r3
    1a90:	29 8d       	ldd	r18, Y+25	; 0x19
    1a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a94:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a98:	72 01       	movw	r14, r4
    1a9a:	c2 2c       	mov	r12, r2
    1a9c:	aa 24       	eor	r10, r10
    1a9e:	bb 24       	eor	r11, r11
    1aa0:	83 2c       	mov	r8, r3
    1aa2:	0e 94 a8 1c 	call	0x3950	; 0x3950 <STEPPER_move>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	39 96       	adiw	r30, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ab8:	a0 96       	adiw	r28, 0x20	; 32
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <setOdometry>:
* Input Variables:	void
* Output Return:	float odometry 
* Overview:		    Sets the odometry to move
********************************************************************/
void setOdometry( float odometry )
{	
    1aea:	8f 92       	push	r8
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
	// Set the gloable odometryTrigger
	odometryTrigger = odometry;
    1afa:	60 93 1e 06 	sts	0x061E, r22
    1afe:	70 93 1f 06 	sts	0x061F, r23
    1b02:	80 93 20 06 	sts	0x0620, r24
    1b06:	90 93 21 06 	sts	0x0621, r25

	// Set the stepers
	STEPPER_move_stnb( STEPPER_BOTH, 
    1b0a:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    1b0e:	8b 01       	movw	r16, r22
    1b10:	9c 01       	movw	r18, r24
    1b12:	8d b7       	in	r24, 0x3d	; 61
    1b14:	9e b7       	in	r25, 0x3e	; 62
    1b16:	09 97       	sbiw	r24, 0x09	; 9
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	9e bf       	out	0x3e, r25	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	8d bf       	out	0x3d, r24	; 61
    1b22:	ed b7       	in	r30, 0x3d	; 61
    1b24:	fe b7       	in	r31, 0x3e	; 62
    1b26:	31 96       	adiw	r30, 0x01	; 1
    1b28:	ad b7       	in	r26, 0x3d	; 61
    1b2a:	be b7       	in	r27, 0x3e	; 62
    1b2c:	12 96       	adiw	r26, 0x02	; 2
    1b2e:	1c 93       	st	X, r17
    1b30:	0e 93       	st	-X, r16
    1b32:	11 97       	sbiw	r26, 0x01	; 1
    1b34:	84 ef       	ldi	r24, 0xF4	; 244
    1b36:	91 e0       	ldi	r25, 0x01	; 1
    1b38:	93 83       	std	Z+3, r25	; 0x03
    1b3a:	82 83       	std	Z+2, r24	; 0x02
    1b3c:	95 83       	std	Z+5, r25	; 0x05
    1b3e:	84 83       	std	Z+4, r24	; 0x04
    1b40:	16 82       	std	Z+6, r1	; 0x06
    1b42:	10 86       	std	Z+8, r1	; 0x08
    1b44:	17 82       	std	Z+7, r1	; 0x07
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	98 01       	movw	r18, r16
    1b4e:	04 ef       	ldi	r16, 0xF4	; 244
    1b50:	11 e0       	ldi	r17, 0x01	; 1
    1b52:	94 ef       	ldi	r25, 0xF4	; 244
    1b54:	e9 2e       	mov	r14, r25
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	f9 2e       	mov	r15, r25
    1b5a:	cc 24       	eor	r12, r12
    1b5c:	aa 24       	eor	r10, r10
    1b5e:	bb 24       	eor	r11, r11
    1b60:	88 24       	eor	r8, r8
    1b62:	83 94       	inc	r8
    1b64:	0e 94 a8 1c 	call	0x3950	; 0x3950 <STEPPER_move>
    1b68:	8d b7       	in	r24, 0x3d	; 61
    1b6a:	9e b7       	in	r25, 0x3e	; 62
    1b6c:	09 96       	adiw	r24, 0x09	; 9
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	9e bf       	out	0x3e, r25	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	8d bf       	out	0x3d, r24	; 61
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF, // Left
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF ); // Right
}
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	8f 90       	pop	r8
    1b88:	08 95       	ret

00001b8a <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1b8a:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1b8e:	28 2f       	mov	r18, r24
    1b90:	21 70       	andi	r18, 0x01	; 1
    1b92:	20 93 37 07 	sts	0x0737, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	82 70       	andi	r24, 0x02	; 2
    1b9a:	90 70       	andi	r25, 0x00	; 0
    1b9c:	95 95       	asr	r25
    1b9e:	87 95       	ror	r24
    1ba0:	80 93 38 07 	sts	0x0738, r24
}
    1ba4:	08 95       	ret

00001ba6 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1ba6:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1baa:	60 93 2e 06 	sts	0x062E, r22
    1bae:	70 93 2f 06 	sts	0x062F, r23
    1bb2:	80 93 30 06 	sts	0x0630, r24
    1bb6:	90 93 31 06 	sts	0x0631, r25
	leftLightVolt = getLeftLight();
    1bba:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1bbe:	60 93 c5 07 	sts	0x07C5, r22
    1bc2:	70 93 c6 07 	sts	0x07C6, r23
    1bc6:	80 93 c7 07 	sts	0x07C7, r24
    1bca:	90 93 c8 07 	sts	0x07C8, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1bce:	08 95       	ret

00001bd0 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1bd0:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1bd4:	60 93 96 05 	sts	0x0596, r22
    1bd8:	70 93 97 05 	sts	0x0597, r23
    1bdc:	80 93 98 05 	sts	0x0598, r24
    1be0:	90 93 99 05 	sts	0x0599, r25
	bkIR = getBackIR();
    1be4:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1be8:	60 93 a0 05 	sts	0x05A0, r22
    1bec:	70 93 a1 05 	sts	0x05A1, r23
    1bf0:	80 93 a2 05 	sts	0x05A2, r24
    1bf4:	90 93 a3 05 	sts	0x05A3, r25
	ltIR = getLeftIR();
    1bf8:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1bfc:	60 93 39 07 	sts	0x0739, r22
    1c00:	70 93 3a 07 	sts	0x073A, r23
    1c04:	80 93 3b 07 	sts	0x073B, r24
    1c08:	90 93 3c 07 	sts	0x073C, r25
	rtIR = getRightIR();
    1c0c:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1c10:	60 93 3d 07 	sts	0x073D, r22
    1c14:	70 93 3e 07 	sts	0x073E, r23
    1c18:	80 93 3f 07 	sts	0x073F, r24
    1c1c:	90 93 40 07 	sts	0x0740, r25
}
    1c20:	08 95       	ret

00001c22 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1c22:	cf 92       	push	r12
    1c24:	df 92       	push	r13
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	16 2f       	mov	r17, r22
    1c34:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1c36:	5f e1       	ldi	r21, 0x1F	; 31
    1c38:	f5 2e       	mov	r15, r21
    1c3a:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1c3c:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1c3e:	0f 2d       	mov	r16, r15
    1c40:	06 95       	lsr	r16
    1c42:	06 95       	lsr	r16
    1c44:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1c46:	c0 2f       	mov	r28, r16
    1c48:	d0 e0       	ldi	r29, 0x00	; 0
    1c4a:	c1 2e       	mov	r12, r17
    1c4c:	dd 24       	eor	r13, r13
    1c4e:	ce 01       	movw	r24, r28
    1c50:	b6 01       	movw	r22, r12
    1c52:	0e 94 76 1a 	call	0x34ec	; 0x34ec <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1c56:	80 2f       	mov	r24, r16
    1c58:	61 2f       	mov	r22, r17
    1c5a:	0e 94 6f 1a 	call	0x34de	; 0x34de <LCD_set_next_PGC>
    1c5e:	fe 01       	movw	r30, r28
    1c60:	45 e0       	ldi	r20, 0x05	; 5
    1c62:	ee 0f       	add	r30, r30
    1c64:	ff 1f       	adc	r31, r31
    1c66:	4a 95       	dec	r20
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <LCD_set_pixel+0x40>
    1c6a:	2f 2d       	mov	r18, r15
    1c6c:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1c6e:	ee 20       	and	r14, r14
    1c70:	89 f0       	breq	.+34     	; 0x1c94 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1c72:	ec 0d       	add	r30, r12
    1c74:	fd 1d       	adc	r31, r13
    1c76:	ef 54       	subi	r30, 0x4F	; 79
    1c78:	f9 4f       	sbci	r31, 0xF9	; 249
    1c7a:	27 70       	andi	r18, 0x07	; 7
    1c7c:	30 70       	andi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <LCD_set_pixel+0x66>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	2a 95       	dec	r18
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <LCD_set_pixel+0x62>
    1c8c:	20 81       	ld	r18, Z
    1c8e:	28 2b       	or	r18, r24
    1c90:	20 83       	st	Z, r18
    1c92:	11 c0       	rjmp	.+34     	; 0x1cb6 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1c94:	ec 0d       	add	r30, r12
    1c96:	fd 1d       	adc	r31, r13
    1c98:	ef 54       	subi	r30, 0x4F	; 79
    1c9a:	f9 4f       	sbci	r31, 0xF9	; 249
    1c9c:	27 70       	andi	r18, 0x07	; 7
    1c9e:	30 70       	andi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <LCD_set_pixel+0x88>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	2a 95       	dec	r18
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <LCD_set_pixel+0x84>
    1cae:	80 95       	com	r24
    1cb0:	20 81       	ld	r18, Z
    1cb2:	82 23       	and	r24, r18
    1cb4:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1cb6:	35 e0       	ldi	r19, 0x05	; 5
    1cb8:	cc 0f       	add	r28, r28
    1cba:	dd 1f       	adc	r29, r29
    1cbc:	3a 95       	dec	r19
    1cbe:	e1 f7       	brne	.-8      	; 0x1cb8 <LCD_set_pixel+0x96>
    1cc0:	cc 0d       	add	r28, r12
    1cc2:	dd 1d       	adc	r29, r13
    1cc4:	cf 54       	subi	r28, 0x4F	; 79
    1cc6:	d9 4f       	sbci	r29, 0xF9	; 249
    1cc8:	88 81       	ld	r24, Y
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
}
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	08 95       	ret

00001ce2 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1ce2:	7f 92       	push	r7
    1ce4:	8f 92       	push	r8
    1ce6:	9f 92       	push	r9
    1ce8:	af 92       	push	r10
    1cea:	bf 92       	push	r11
    1cec:	cf 92       	push	r12
    1cee:	df 92       	push	r13
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	98 2e       	mov	r9, r24
    1cfa:	b6 2e       	mov	r11, r22
    1cfc:	c4 2e       	mov	r12, r20
    1cfe:	a2 2e       	mov	r10, r18
    1d00:	80 2e       	mov	r8, r16
    1d02:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1d04:	bb 0c       	add	r11, r11
    1d06:	bb 0c       	add	r11, r11
    1d08:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1d0a:	dd 24       	eor	r13, r13
    1d0c:	23 e0       	ldi	r18, 0x03	; 3
    1d0e:	cc 0c       	add	r12, r12
    1d10:	dd 1c       	adc	r13, r13
    1d12:	2a 95       	dec	r18
    1d14:	e1 f7       	brne	.-8      	; 0x1d0e <printCell+0x2c>
    1d16:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1d18:	0f e1       	ldi	r16, 0x1F	; 31
    1d1a:	0b 19       	sub	r16, r11
    1d1c:	80 2f       	mov	r24, r16
    1d1e:	6c 2d       	mov	r22, r12
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1d26:	98 e1       	ldi	r25, 0x18	; 24
    1d28:	e9 2e       	mov	r14, r25
    1d2a:	eb 18       	sub	r14, r11
    1d2c:	8e 2d       	mov	r24, r14
    1d2e:	6c 2d       	mov	r22, r12
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1d36:	87 e0       	ldi	r24, 0x07	; 7
    1d38:	f8 2e       	mov	r15, r24
    1d3a:	fc 0c       	add	r15, r12
    1d3c:	80 2f       	mov	r24, r16
    1d3e:	6f 2d       	mov	r22, r15
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1d46:	8e 2d       	mov	r24, r14
    1d48:	6f 2d       	mov	r22, r15
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	
	if(cell&0b1000){
    1d50:	c9 2c       	mov	r12, r9
    1d52:	93 fe       	sbrs	r9, 3
    1d54:	24 c0       	rjmp	.+72     	; 0x1d9e <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1d56:	61 2f       	mov	r22, r17
    1d58:	6f 5f       	subi	r22, 0xFF	; 255
    1d5a:	80 2f       	mov	r24, r16
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1d62:	61 2f       	mov	r22, r17
    1d64:	6e 5f       	subi	r22, 0xFE	; 254
    1d66:	80 2f       	mov	r24, r16
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1d6e:	61 2f       	mov	r22, r17
    1d70:	6d 5f       	subi	r22, 0xFD	; 253
    1d72:	80 2f       	mov	r24, r16
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1d7a:	61 2f       	mov	r22, r17
    1d7c:	6c 5f       	subi	r22, 0xFC	; 252
    1d7e:	80 2f       	mov	r24, r16
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1d86:	61 2f       	mov	r22, r17
    1d88:	6b 5f       	subi	r22, 0xFB	; 251
    1d8a:	80 2f       	mov	r24, r16
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1d92:	61 2f       	mov	r22, r17
    1d94:	6a 5f       	subi	r22, 0xFA	; 250
    1d96:	80 2f       	mov	r24, r16
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	}
	if(cell&0b0100){
    1d9e:	c2 fe       	sbrs	r12, 2
    1da0:	25 c0       	rjmp	.+74     	; 0x1dec <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1da2:	8b 2d       	mov	r24, r11
    1da4:	80 95       	com	r24
    1da6:	81 5e       	subi	r24, 0xE1	; 225
    1da8:	6f 2d       	mov	r22, r15
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1db0:	8d e1       	ldi	r24, 0x1D	; 29
    1db2:	8b 19       	sub	r24, r11
    1db4:	6f 2d       	mov	r22, r15
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1dbc:	8c e1       	ldi	r24, 0x1C	; 28
    1dbe:	8b 19       	sub	r24, r11
    1dc0:	6f 2d       	mov	r22, r15
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1dc8:	8b e1       	ldi	r24, 0x1B	; 27
    1dca:	8b 19       	sub	r24, r11
    1dcc:	6f 2d       	mov	r22, r15
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1dd4:	8a e1       	ldi	r24, 0x1A	; 26
    1dd6:	8b 19       	sub	r24, r11
    1dd8:	6f 2d       	mov	r22, r15
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1de0:	89 e1       	ldi	r24, 0x19	; 25
    1de2:	8b 19       	sub	r24, r11
    1de4:	6f 2d       	mov	r22, r15
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	}
	if(cell&0b0010){
    1dec:	c1 fe       	sbrs	r12, 1
    1dee:	24 c0       	rjmp	.+72     	; 0x1e38 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1df0:	61 2f       	mov	r22, r17
    1df2:	6f 5f       	subi	r22, 0xFF	; 255
    1df4:	8e 2d       	mov	r24, r14
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1dfc:	61 2f       	mov	r22, r17
    1dfe:	6e 5f       	subi	r22, 0xFE	; 254
    1e00:	8e 2d       	mov	r24, r14
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1e08:	61 2f       	mov	r22, r17
    1e0a:	6d 5f       	subi	r22, 0xFD	; 253
    1e0c:	8e 2d       	mov	r24, r14
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1e14:	61 2f       	mov	r22, r17
    1e16:	6c 5f       	subi	r22, 0xFC	; 252
    1e18:	8e 2d       	mov	r24, r14
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1e20:	61 2f       	mov	r22, r17
    1e22:	6b 5f       	subi	r22, 0xFB	; 251
    1e24:	8e 2d       	mov	r24, r14
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1e2c:	61 2f       	mov	r22, r17
    1e2e:	6a 5f       	subi	r22, 0xFA	; 250
    1e30:	8e 2d       	mov	r24, r14
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	}
	if(cell&0b0001){
    1e38:	c0 fe       	sbrs	r12, 0
    1e3a:	25 c0       	rjmp	.+74     	; 0x1e86 <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1e3c:	8b 2d       	mov	r24, r11
    1e3e:	80 95       	com	r24
    1e40:	81 5e       	subi	r24, 0xE1	; 225
    1e42:	61 2f       	mov	r22, r17
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1e4a:	8d e1       	ldi	r24, 0x1D	; 29
    1e4c:	8b 19       	sub	r24, r11
    1e4e:	61 2f       	mov	r22, r17
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1e56:	8c e1       	ldi	r24, 0x1C	; 28
    1e58:	8b 19       	sub	r24, r11
    1e5a:	61 2f       	mov	r22, r17
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1e62:	8b e1       	ldi	r24, 0x1B	; 27
    1e64:	8b 19       	sub	r24, r11
    1e66:	61 2f       	mov	r22, r17
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1e6e:	8a e1       	ldi	r24, 0x1A	; 26
    1e70:	8b 19       	sub	r24, r11
    1e72:	61 2f       	mov	r22, r17
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1e7a:	89 e1       	ldi	r24, 0x19	; 25
    1e7c:	8b 19       	sub	r24, r11
    1e7e:	61 2f       	mov	r22, r17
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	}	
	if(isrobot){
    1e86:	aa 20       	and	r10, r10
    1e88:	e1 f1       	breq	.+120    	; 0x1f02 <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1e8a:	bc e1       	ldi	r27, 0x1C	; 28
    1e8c:	eb 2e       	mov	r14, r27
    1e8e:	eb 18       	sub	r14, r11
    1e90:	a3 e0       	ldi	r26, 0x03	; 3
    1e92:	ca 2e       	mov	r12, r26
    1e94:	c1 0e       	add	r12, r17
    1e96:	8e 2d       	mov	r24, r14
    1e98:	6c 2d       	mov	r22, r12
    1e9a:	4a 2d       	mov	r20, r10
    1e9c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1ea0:	fb e1       	ldi	r31, 0x1B	; 27
    1ea2:	ff 2e       	mov	r15, r31
    1ea4:	fb 18       	sub	r15, r11
    1ea6:	8f 2d       	mov	r24, r15
    1ea8:	6c 2d       	mov	r22, r12
    1eaa:	4a 2d       	mov	r20, r10
    1eac:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1eb0:	01 2f       	mov	r16, r17
    1eb2:	0c 5f       	subi	r16, 0xFC	; 252
    1eb4:	8e 2d       	mov	r24, r14
    1eb6:	60 2f       	mov	r22, r16
    1eb8:	4a 2d       	mov	r20, r10
    1eba:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1ebe:	8f 2d       	mov	r24, r15
    1ec0:	60 2f       	mov	r22, r16
    1ec2:	4a 2d       	mov	r20, r10
    1ec4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		
		switch(orent){
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	88 16       	cp	r8, r24
    1ecc:	71 f0       	breq	.+28     	; 0x1eea <printCell+0x208>
    1ece:	88 16       	cp	r8, r24
    1ed0:	40 f0       	brcs	.+16     	; 0x1ee2 <printCell+0x200>
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	88 16       	cp	r8, r24
    1ed6:	61 f0       	breq	.+24     	; 0x1ef0 <printCell+0x20e>
    1ed8:	83 e0       	ldi	r24, 0x03	; 3
    1eda:	88 16       	cp	r8, r24
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <printCell+0x1fe>
    1ede:	4a c0       	rjmp	.+148    	; 0x1f74 <printCell+0x292>
    1ee0:	0b c0       	rjmp	.+22     	; 0x1ef8 <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1ee2:	8d e1       	ldi	r24, 0x1D	; 29
    1ee4:	8b 19       	sub	r24, r11
    1ee6:	6c 2d       	mov	r22, r12
    1ee8:	0a c0       	rjmp	.+20     	; 0x1efe <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1eea:	1b 5f       	subi	r17, 0xFB	; 251
    1eec:	8e 2d       	mov	r24, r14
    1eee:	06 c0       	rjmp	.+12     	; 0x1efc <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    1ef0:	8a e1       	ldi	r24, 0x1A	; 26
    1ef2:	8b 19       	sub	r24, r11
    1ef4:	60 2f       	mov	r22, r16
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    1ef8:	1e 5f       	subi	r17, 0xFE	; 254
    1efa:	8f 2d       	mov	r24, r15
    1efc:	61 2f       	mov	r22, r17
    1efe:	4a 2d       	mov	r20, r10
    1f00:	37 c0       	rjmp	.+110    	; 0x1f70 <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    1f02:	77 20       	and	r7, r7
    1f04:	b9 f1       	breq	.+110    	; 0x1f74 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1f06:	ec e1       	ldi	r30, 0x1C	; 28
    1f08:	ce 2e       	mov	r12, r30
    1f0a:	cb 18       	sub	r12, r11
    1f0c:	73 e0       	ldi	r23, 0x03	; 3
    1f0e:	e7 2e       	mov	r14, r23
    1f10:	e1 0e       	add	r14, r17
    1f12:	8c 2d       	mov	r24, r12
    1f14:	6e 2d       	mov	r22, r14
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1f1c:	0b e1       	ldi	r16, 0x1B	; 27
    1f1e:	0b 19       	sub	r16, r11
    1f20:	80 2f       	mov	r24, r16
    1f22:	6e 2d       	mov	r22, r14
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1f2a:	64 e0       	ldi	r22, 0x04	; 4
    1f2c:	f6 2e       	mov	r15, r22
    1f2e:	f1 0e       	add	r15, r17
    1f30:	8c 2d       	mov	r24, r12
    1f32:	6f 2d       	mov	r22, r15
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1f3a:	80 2f       	mov	r24, r16
    1f3c:	6f 2d       	mov	r22, r15
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1f44:	8d e1       	ldi	r24, 0x1D	; 29
    1f46:	8b 19       	sub	r24, r11
    1f48:	6e 2d       	mov	r22, r14
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1f50:	1b 5f       	subi	r17, 0xFB	; 251
    1f52:	8c 2d       	mov	r24, r12
    1f54:	61 2f       	mov	r22, r17
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    1f5c:	8a e1       	ldi	r24, 0x1A	; 26
    1f5e:	8b 19       	sub	r24, r11
    1f60:	6f 2d       	mov	r22, r15
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    1f68:	13 50       	subi	r17, 0x03	; 3
    1f6a:	80 2f       	mov	r24, r16
    1f6c:	61 2f       	mov	r22, r17
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		}
}
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	9f 90       	pop	r9
    1f86:	8f 90       	pop	r8
    1f88:	7f 90       	pop	r7
    1f8a:	08 95       	ret

00001f8c <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    1f8c:	9f 92       	push	r9
    1f8e:	af 92       	push	r10
    1f90:	bf 92       	push	r11
    1f92:	cf 92       	push	r12
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1fa4:	80 91 35 07 	lds	r24, 0x0735
    1fa8:	a8 2e       	mov	r10, r24
    1faa:	a6 94       	lsr	r10
    1fac:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    1fae:	43 e0       	ldi	r20, 0x03	; 3
    1fb0:	b4 2e       	mov	r11, r20
    1fb2:	b8 22       	and	r11, r24
    1fb4:	cc 24       	eor	r12, r12
    1fb6:	dd 24       	eor	r13, r13
    1fb8:	1e c0       	rjmp	.+60     	; 0x1ff6 <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1fba:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    1fbc:	fa 14       	cp	r15, r10
    1fbe:	19 f0       	breq	.+6      	; 0x1fc6 <printMap+0x3a>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <printMap+0x46>
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	1b 15       	cp	r17, r11
    1fcc:	11 f4       	brne	.+4      	; 0x1fd2 <printMap+0x46>
    1fce:	21 e0       	ldi	r18, 0x01	; 1
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    1fd2:	6f 2d       	mov	r22, r15
    1fd4:	41 2f       	mov	r20, r17
    1fd6:	00 91 33 06 	lds	r16, 0x0633
    1fda:	e9 2c       	mov	r14, r9
    1fdc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1fe0:	1f 5f       	subi	r17, 0xFF	; 255
    1fe2:	21 96       	adiw	r28, 0x01	; 1
    1fe4:	14 30       	cpi	r17, 0x04	; 4
    1fe6:	49 f7       	brne	.-46     	; 0x1fba <printMap+0x2e>
    1fe8:	08 94       	sec
    1fea:	c1 1c       	adc	r12, r1
    1fec:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	c8 16       	cp	r12, r24
    1ff2:	d1 04       	cpc	r13, r1
    1ff4:	51 f0       	breq	.+20     	; 0x200a <printMap+0x7e>
    1ff6:	fc 2c       	mov	r15, r12
    1ff8:	e6 01       	movw	r28, r12
    1ffa:	cc 0f       	add	r28, r28
    1ffc:	dd 1f       	adc	r29, r29
    1ffe:	cc 0f       	add	r28, r28
    2000:	dd 1f       	adc	r29, r29
    2002:	cb 5e       	subi	r28, 0xEB	; 235
    2004:	db 4f       	sbci	r29, 0xFB	; 251
    2006:	10 e0       	ldi	r17, 0x00	; 0
    2008:	d8 cf       	rjmp	.-80     	; 0x1fba <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	ff 90       	pop	r15
    2014:	ef 90       	pop	r14
    2016:	df 90       	pop	r13
    2018:	cf 90       	pop	r12
    201a:	bf 90       	pop	r11
    201c:	af 90       	pop	r10
    201e:	9f 90       	pop	r9
    2020:	08 95       	ret

00002022 <checkOdometry>:
*					sets the flag whe appropriate
********************************************************************/
char checkOdometry( char reset )
{	
	// Check for a reset
	if (reset){
    2022:	88 23       	and	r24, r24
    2024:	91 f0       	breq	.+36     	; 0x204a <checkOdometry+0x28>
		odometryTrigger = 0;
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	80 93 1e 06 	sts	0x061E, r24
    2032:	90 93 1f 06 	sts	0x061F, r25
    2036:	a0 93 20 06 	sts	0x0620, r26
    203a:	b0 93 21 06 	sts	0x0621, r27
		STEPPER_set_steps(STEPPER_BOTH,odometryTrigger);
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <STEPPER_set_steps>
    2048:	17 c0       	rjmp	.+46     	; 0x2078 <checkOdometry+0x56>
		return SUCCESS;
	}

	// Get the current number of steps
	curr_step = STEPPER_get_nSteps();
    204a:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <STEPPER_get_nSteps>
    204e:	60 93 31 07 	sts	0x0731, r22
    2052:	70 93 32 07 	sts	0x0732, r23
    2056:	80 93 33 07 	sts	0x0733, r24
    205a:	90 93 34 07 	sts	0x0734, r25
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	80 91 33 07 	lds	r24, 0x0733
    2064:	90 91 34 07 	lds	r25, 0x0734
    2068:	20 91 31 07 	lds	r18, 0x0731
    206c:	30 91 32 07 	lds	r19, 0x0732
    2070:	82 0f       	add	r24, r18
    2072:	93 1f       	adc	r25, r19
    2074:	89 2b       	or	r24, r25
    2076:	09 f4       	brne	.+2      	; 0x207a <checkOdometry+0x58>
    2078:	41 e0       	ldi	r20, 0x01	; 1
	}

	// But if not zero
	//then return fial
	return FAIL;
}
    207a:	84 2f       	mov	r24, r20
    207c:	08 95       	ret

0000207e <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{
    207e:	5f 92       	push	r5
    2080:	6f 92       	push	r6
    2082:	7f 92       	push	r7
    2084:	8f 92       	push	r8
    2086:	9f 92       	push	r9
    2088:	af 92       	push	r10
    208a:	bf 92       	push	r11
    208c:	cf 92       	push	r12
    208e:	df 92       	push	r13
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
	// Check for collision
	if(ftIR <= IR_OBST_F_THRESH){
    209c:	e0 90 96 05 	lds	r14, 0x0596
    20a0:	f0 90 97 05 	lds	r15, 0x0597
    20a4:	00 91 98 05 	lds	r16, 0x0598
    20a8:	10 91 99 05 	lds	r17, 0x0599
    20ac:	c8 01       	movw	r24, r16
    20ae:	b7 01       	movw	r22, r14
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e2       	ldi	r20, 0x20	; 32
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	14 f0       	brlt	.+4      	; 0x20c4 <moveWall+0x46>
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	15 c1       	rjmp	.+554    	; 0x22ee <moveWall+0x270>
		return SUCCESS;
	}

	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    20c4:	55 24       	eor	r5, r5
    20c6:	c8 01       	movw	r24, r16
    20c8:	b7 01       	movw	r22, r14
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	14 f4       	brge	.+4      	; 0x20de <moveWall+0x60>
    20da:	55 24       	eor	r5, r5
    20dc:	53 94       	inc	r5
    20de:	a0 90 3d 07 	lds	r10, 0x073D
    20e2:	b0 90 3e 07 	lds	r11, 0x073E
    20e6:	c0 90 3f 07 	lds	r12, 0x073F
    20ea:	d0 90 40 07 	lds	r13, 0x0740
    20ee:	60 90 39 07 	lds	r6, 0x0739
    20f2:	70 90 3a 07 	lds	r7, 0x073A
    20f6:	80 90 3b 07 	lds	r8, 0x073B
    20fa:	90 90 3c 07 	lds	r9, 0x073C
	if(!isWall){
    20fe:	55 20       	and	r5, r5
    2100:	41 f5       	brne	.+80     	; 0x2152 <moveWall+0xd4>
    2102:	60 91 a0 05 	lds	r22, 0x05A0
    2106:	70 91 a1 05 	lds	r23, 0x05A1
    210a:	80 91 a2 05 	lds	r24, 0x05A2
    210e:	90 91 a3 05 	lds	r25, 0x05A3
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e7       	ldi	r20, 0x70	; 112
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    211e:	87 fd       	sbrc	r24, 7
    2120:	18 c0       	rjmp	.+48     	; 0x2152 <moveWall+0xd4>
    2122:	c6 01       	movw	r24, r12
    2124:	b5 01       	movw	r22, r10
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e7       	ldi	r20, 0x70	; 112
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    2132:	87 fd       	sbrc	r24, 7
    2134:	0e c0       	rjmp	.+28     	; 0x2152 <moveWall+0xd4>
    2136:	c4 01       	movw	r24, r8
    2138:	b3 01       	movw	r22, r6
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e7       	ldi	r20, 0x70	; 112
    2140:	51 e4       	ldi	r21, 0x41	; 65
    2142:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    2146:	87 fd       	sbrc	r24, 7
    2148:	04 c0       	rjmp	.+8      	; 0x2152 <moveWall+0xd4>
	
		// Update the speeds the same to go forward
		STEPPER_set_speed(STEPPER_BOTH, MAX_SPEED_STEP);
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	64 ef       	ldi	r22, 0xF4	; 244
    214e:	71 e0       	ldi	r23, 0x01	; 1
    2150:	c9 c0       	rjmp	.+402    	; 0x22e4 <moveWall+0x266>
	BOOL isLEFT;
	float error;	
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2152:	c6 01       	movw	r24, r12
    2154:	b5 01       	movw	r22, r10
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e7       	ldi	r20, 0x70	; 112
    215c:	51 e4       	ldi	r21, 0x41	; 65
    215e:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__gesf2>
    2162:	18 16       	cp	r1, r24
    2164:	64 f4       	brge	.+24     	; 0x217e <moveWall+0x100>
		rtIR = IR_WALL_R_THRESH-18;
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a0 e4       	ldi	r26, 0x40	; 64
    216c:	b0 ec       	ldi	r27, 0xC0	; 192
    216e:	80 93 3d 07 	sts	0x073D, r24
    2172:	90 93 3e 07 	sts	0x073E, r25
    2176:	a0 93 3f 07 	sts	0x073F, r26
    217a:	b0 93 40 07 	sts	0x0740, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    217e:	c4 01       	movw	r24, r8
    2180:	b3 01       	movw	r22, r6
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e7       	ldi	r20, 0x70	; 112
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 1b 2e 	call	0x5c36	; 0x5c36 <__gesf2>
    218e:	18 16       	cp	r1, r24
    2190:	14 f0       	brlt	.+4      	; 0x2196 <moveWall+0x118>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	0d c0       	rjmp	.+26     	; 0x21b0 <moveWall+0x132>
		ltIR = IR_WALL_L_THRESH-18;
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e4       	ldi	r26, 0x40	; 64
    219c:	b0 ec       	ldi	r27, 0xC0	; 192
    219e:	80 93 39 07 	sts	0x0739, r24
    21a2:	90 93 3a 07 	sts	0x073A, r25
    21a6:	a0 93 3b 07 	sts	0x073B, r26
    21aa:	b0 93 3c 07 	sts	0x073C, r27
    21ae:	81 e0       	ldi	r24, 0x01	; 1
		isLEFT = 1;
	}
	
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    21b0:	55 20       	and	r5, r5
    21b2:	21 f1       	breq	.+72     	; 0x21fc <moveWall+0x17e>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    21b4:	88 23       	and	r24, r24
    21b6:	29 f0       	breq	.+10     	; 0x21c2 <moveWall+0x144>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	8a e7       	ldi	r24, 0x7A	; 122
    21be:	94 e4       	ldi	r25, 0x44	; 68
    21c0:	04 c0       	rjmp	.+8      	; 0x21ca <moveWall+0x14c>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	8a e7       	ldi	r24, 0x7A	; 122
    21c8:	94 ec       	ldi	r25, 0xC4	; 196
    21ca:	a8 01       	movw	r20, r16
    21cc:	97 01       	movw	r18, r14
    21ce:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    21d2:	20 91 39 07 	lds	r18, 0x0739
    21d6:	30 91 3a 07 	lds	r19, 0x073A
    21da:	40 91 3b 07 	lds	r20, 0x073B
    21de:	50 91 3c 07 	lds	r21, 0x073C
    21e2:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    21e6:	9b 01       	movw	r18, r22
    21e8:	ac 01       	movw	r20, r24
    21ea:	60 91 3d 07 	lds	r22, 0x073D
    21ee:	70 91 3e 07 	lds	r23, 0x073E
    21f2:	80 91 3f 07 	lds	r24, 0x073F
    21f6:	90 91 40 07 	lds	r25, 0x0740
    21fa:	10 c0       	rjmp	.+32     	; 0x221c <moveWall+0x19e>
	// the error is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    21fc:	60 91 3d 07 	lds	r22, 0x073D
    2200:	70 91 3e 07 	lds	r23, 0x073E
    2204:	80 91 3f 07 	lds	r24, 0x073F
    2208:	90 91 40 07 	lds	r25, 0x0740
    220c:	20 91 39 07 	lds	r18, 0x0739
    2210:	30 91 3a 07 	lds	r19, 0x073A
    2214:	40 91 3b 07 	lds	r20, 0x073B
    2218:	50 91 3c 07 	lds	r21, 0x073C
    221c:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2220:	90 58       	subi	r25, 0x80	; 128
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2228:	7b 01       	movw	r14, r22
    222a:	8c 01       	movw	r16, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    222c:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <__fixsfsi>
    2230:	eb 01       	movw	r28, r22
    2232:	77 ff       	sbrs	r23, 7
    2234:	03 c0       	rjmp	.+6      	; 0x223c <moveWall+0x1be>
    2236:	d0 95       	com	r29
    2238:	c1 95       	neg	r28
    223a:	df 4f       	sbci	r29, 0xFF	; 255
    223c:	c5 36       	cpi	r28, 0x65	; 101
    223e:	d1 05       	cpc	r29, r1
    2240:	fc f0       	brlt	.+62     	; 0x2280 <moveWall+0x202>
    2242:	c8 01       	movw	r24, r16
    2244:	b7 01       	movw	r22, r14
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    2252:	88 23       	and	r24, r24
    2254:	a9 f0       	breq	.+42     	; 0x2280 <moveWall+0x202>
		effort = MAX_EFFORT*(effort/abs(effort));
    2256:	be 01       	movw	r22, r28
    2258:	88 27       	eor	r24, r24
    225a:	77 fd       	sbrc	r23, 7
    225c:	80 95       	com	r24
    225e:	98 2f       	mov	r25, r24
    2260:	0e 94 6b 2d 	call	0x5ad6	; 0x5ad6 <__floatsisf>
    2264:	9b 01       	movw	r18, r22
    2266:	ac 01       	movw	r20, r24
    2268:	c8 01       	movw	r24, r16
    226a:	b7 01       	movw	r22, r14
    226c:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	48 ec       	ldi	r20, 0xC8	; 200
    2276:	52 e4       	ldi	r21, 0x42	; 66
    2278:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    227c:	7b 01       	movw	r14, r22
    227e:	8c 01       	movw	r16, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED_STEP/2 + (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
    2280:	c8 01       	movw	r24, r16
    2282:	b7 01       	movw	r22, r14
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	48 ec       	ldi	r20, 0xC8	; 200
    228a:	52 e4       	ldi	r21, 0x42	; 66
    228c:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    2290:	7b 01       	movw	r14, r22
    2292:	8c 01       	movw	r16, r24
	float stepper_speed_R = MAX_SPEED_STEP/2 - (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
	
	// Update the speeds the same to move with wall
	STEPPER_set_speed(STEPPER_LEFT, stepper_speed_L);
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a e7       	ldi	r20, 0x7A	; 122
    229a:	53 e4       	ldi	r21, 0x43	; 67
    229c:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a e7       	ldi	r20, 0x7A	; 122
    22a6:	53 e4       	ldi	r21, 0x43	; 67
    22a8:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    22ac:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    22b0:	9b 01       	movw	r18, r22
    22b2:	ac 01       	movw	r20, r24
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	b9 01       	movw	r22, r18
    22b8:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <STEPPER_set_speed>
	STEPPER_set_speed(STEPPER_RIGHT, stepper_speed_R);
    22bc:	c8 01       	movw	r24, r16
    22be:	b7 01       	movw	r22, r14
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	4a e7       	ldi	r20, 0x7A	; 122
    22c6:	53 ec       	ldi	r21, 0xC3	; 195
    22c8:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a e7       	ldi	r20, 0x7A	; 122
    22d2:	53 e4       	ldi	r21, 0x43	; 67
    22d4:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__addsf3>
    22d8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__fixunssfsi>
    22dc:	9b 01       	movw	r18, r22
    22de:	ac 01       	movw	r20, r24
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	b9 01       	movw	r22, r18
    22e4:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <STEPPER_set_speed>
	
	// Return weather or not we are finished
	return checkOdometry(NO_RESET);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	0e 94 11 10 	call	0x2022	; 0x2022 <checkOdometry>
}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	bf 90       	pop	r11
    2300:	af 90       	pop	r10
    2302:	9f 90       	pop	r9
    2304:	8f 90       	pop	r8
    2306:	7f 90       	pop	r7
    2308:	6f 90       	pop	r6
    230a:	5f 90       	pop	r5
    230c:	08 95       	ret

0000230e <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    230e:	0e 94 53 20 	call	0x40a6	; 0x40a6 <ATTINY_open>
    2312:	90 93 1d 05 	sts	0x051D, r25
    2316:	80 93 1c 05 	sts	0x051C, r24
	LEopstat = LED_open(); //open the LED module
    231a:	0e 94 b6 1a 	call	0x356c	; 0x356c <LED_open>
    231e:	90 93 1b 05 	sts	0x051B, r25
    2322:	80 93 1a 05 	sts	0x051A, r24
	LCopstat = LCD_open(); //open the LCD module
    2326:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_open>
    232a:	90 93 19 05 	sts	0x0519, r25
    232e:	80 93 18 05 	sts	0x0518, r24
	STEPPER_open(); // Open STEPPER module for use
    2332:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in tone mode
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <SPKR_open>
	
	LED_open();
    233c:	0e 94 b6 1a 	call	0x356c	; 0x356c <LED_open>
	I2C_open();
    2340:	0e 94 ad 21 	call	0x435a	; 0x435a <I2C_open>
	ADC_open();//open the ADC module
    2344:	0e 94 3a 19 	call	0x3274	; 0x3274 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	0e 94 9c 19 	call	0x3338	; 0x3338 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    234e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <checkIR>
	prefilter(1);
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    2358:	8f ee       	ldi	r24, 0xEF	; 239
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a5 e8       	ldi	r26, 0x85	; 133
    235e:	b1 e4       	ldi	r27, 0x41	; 65
    2360:	80 93 1e 06 	sts	0x061E, r24
    2364:	90 93 1f 06 	sts	0x061F, r25
    2368:	a0 93 20 06 	sts	0x0620, r26
    236c:	b0 93 21 06 	sts	0x0621, r27
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	0a c0       	rjmp	.+20     	; 0x238a <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    2376:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	80 32       	cpi	r24, 0x20	; 32
    237c:	91 05       	cpc	r25, r1
    237e:	d9 f7       	brne	.-10     	; 0x2376 <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    2380:	2f 5f       	subi	r18, 0xFF	; 255
    2382:	3f 4f       	sbci	r19, 0xFF	; 255
    2384:	24 30       	cpi	r18, 0x04	; 4
    2386:	31 05       	cpc	r19, r1
    2388:	59 f0       	breq	.+22     	; 0x23a0 <initializeRobot+0x92>
    238a:	f9 01       	movw	r30, r18
    238c:	55 e0       	ldi	r21, 0x05	; 5
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	5a 95       	dec	r21
    2394:	e1 f7       	brne	.-8      	; 0x238e <initializeRobot+0x80>
    2396:	ef 54       	subi	r30, 0x4F	; 79
    2398:	f9 4f       	sbci	r31, 0xF9	; 249
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	eb cf       	rjmp	.-42     	; 0x2376 <initializeRobot+0x68>
    23a0:	08 95       	ret

000023a2 <fourNeighborSearch>:
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    23a2:	48 2f       	mov	r20, r24
    23a4:	46 95       	lsr	r20
    23a6:	46 95       	lsr	r20
	unsigned char curCol = (curCell&0b0011);
    23a8:	58 2f       	mov	r21, r24
    23aa:	53 70       	andi	r21, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 0){
    23ac:	a4 2f       	mov	r26, r20
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	25 2f       	mov	r18, r21
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	fd 01       	movw	r30, r26
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	e2 0f       	add	r30, r18
    23c0:	f3 1f       	adc	r31, r19
    23c2:	ef 56       	subi	r30, 0x6F	; 111
    23c4:	fb 4f       	sbci	r31, 0xFB	; 251
    23c6:	80 81       	ld	r24, Z
    23c8:	88 23       	and	r24, r24
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <fourNeighborSearch+0x2e>
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	08 95       	ret
	
	// Perform a 4-neighbor search and store the lowest value
	
	// LCD_clear();
	//Check the north cell
	curRow--;
    23d0:	e4 2f       	mov	r30, r20
    23d2:	e1 50       	subi	r30, 0x01	; 1
	if((curRow)<WORLD_ROW_SIZE){
    23d4:	e4 30       	cpi	r30, 0x04	; 4
    23d6:	80 f4       	brcc	.+32     	; 0x23f8 <fourNeighborSearch+0x56>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	e2 0f       	add	r30, r18
    23e4:	f3 1f       	adc	r31, r19
    23e6:	ef 56       	subi	r30, 0x6F	; 111
    23e8:	fb 4f       	sbci	r31, 0xFB	; 251
    23ea:	e0 81       	ld	r30, Z
		// LCD_printf("NORTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    23ec:	e4 36       	cpi	r30, 0x64	; 100
    23ee:	20 f4       	brcc	.+8      	; 0x23f8 <fourNeighborSearch+0x56>
			minVal = curVal;
			nextOrientation = NORTH;
    23f0:	10 92 34 06 	sts	0x0634, r1
    23f4:	9e 2f       	mov	r25, r30
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <fourNeighborSearch+0x58>
    23f8:	94 e6       	ldi	r25, 0x64	; 100
		}
	}
	
	curRow++;
	curRow++;
    23fa:	84 2f       	mov	r24, r20
    23fc:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the south cell
	if((curRow)<WORLD_ROW_SIZE){
    23fe:	84 30       	cpi	r24, 0x04	; 4
    2400:	88 f4       	brcc	.+34     	; 0x2424 <fourNeighborSearch+0x82>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    2402:	e8 2f       	mov	r30, r24
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	ee 0f       	add	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	e2 0f       	add	r30, r18
    2410:	f3 1f       	adc	r31, r19
    2412:	ef 56       	subi	r30, 0x6F	; 111
    2414:	fb 4f       	sbci	r31, 0xFB	; 251
    2416:	e0 81       	ld	r30, Z
		// LCD_printf("SOUTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2418:	e9 17       	cp	r30, r25
    241a:	20 f4       	brcc	.+8      	; 0x2424 <fourNeighborSearch+0x82>
			minVal = curVal;
			nextOrientation = SOUTH;
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	80 93 34 06 	sts	0x0634, r24
    2422:	9e 2f       	mov	r25, r30
		}
	}
	
	curRow--;
	curCol++;
    2424:	85 2f       	mov	r24, r21
    2426:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the east cell
	if((curCol)<WORLD_COLUMN_SIZE){
    2428:	84 30       	cpi	r24, 0x04	; 4
    242a:	81 f0       	breq	.+32     	; 0x244c <fourNeighborSearch+0xaa>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
    242c:	fd 01       	movw	r30, r26
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	e8 0f       	add	r30, r24
    2438:	f1 1d       	adc	r31, r1
    243a:	ef 56       	subi	r30, 0x6F	; 111
    243c:	fb 4f       	sbci	r31, 0xFB	; 251
    243e:	e0 81       	ld	r30, Z
		// LCD_printf("EAST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2440:	e9 17       	cp	r30, r25
    2442:	20 f4       	brcc	.+8      	; 0x244c <fourNeighborSearch+0xaa>
			minVal = curVal;
			nextOrientation = EAST;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	80 93 34 06 	sts	0x0634, r24
    244a:	9e 2f       	mov	r25, r30
		}
	}
	
	curCol--;
	curCol--;
    244c:	85 2f       	mov	r24, r21
    244e:	81 50       	subi	r24, 0x01	; 1
	// Check the west cell
	if((curCol)<WORLD_COLUMN_SIZE){
    2450:	84 30       	cpi	r24, 0x04	; 4
    2452:	80 f4       	brcc	.+32     	; 0x2474 <fourNeighborSearch+0xd2>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
		// LCD_printf("WEST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2454:	aa 0f       	add	r26, r26
    2456:	bb 1f       	adc	r27, r27
    2458:	aa 0f       	add	r26, r26
    245a:	bb 1f       	adc	r27, r27
    245c:	a8 0f       	add	r26, r24
    245e:	b1 1d       	adc	r27, r1
    2460:	af 56       	subi	r26, 0x6F	; 111
    2462:	bb 4f       	sbci	r27, 0xFB	; 251
    2464:	8c 91       	ld	r24, X
    2466:	89 17       	cp	r24, r25
    2468:	28 f4       	brcc	.+10     	; 0x2474 <fourNeighborSearch+0xd2>
			minVal = curVal;
			nextOrientation = WEST;
    246a:	83 e0       	ldi	r24, 0x03	; 3
    246c:	80 93 34 06 	sts	0x0634, r24
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	08 95       	ret
    2474:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    2476:	08 95       	ret

00002478 <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
void wavefrontMake(void)
{
    2478:	bf 92       	push	r11
    247a:	cf 92       	push	r12
    247c:	df 92       	push	r13
    247e:	ef 92       	push	r14
    2480:	ff 92       	push	r15
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
	// User-defined goal location
	// unsigned char goalLocation = currentGoalWorld;
	// Extract x and y goal location
	int rowGoal = (currentGoalWorld>>2);
    248a:	80 91 a4 05 	lds	r24, 0x05A4
	int colGoal = (currentGoalWorld&0b0011);
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	23 70       	andi	r18, 0x03	; 3
    2494:	30 70       	andi	r19, 0x00	; 0
    2496:	86 95       	lsr	r24
    2498:	86 95       	lsr	r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	cc 27       	eor	r28, r28
    249e:	dd 27       	eor	r29, r29
    24a0:	c8 1b       	sub	r28, r24
    24a2:	d9 0b       	sbc	r29, r25
    24a4:	00 e0       	ldi	r16, 0x00	; 0
    24a6:	10 e0       	ldi	r17, 0x00	; 0
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    24a8:	cc 24       	eor	r12, r12
    24aa:	dd 24       	eor	r13, r13
    24ac:	c2 1a       	sub	r12, r18
    24ae:	d3 0a       	sbc	r13, r19
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
				ROBOT_METRIC_WORLD[row][col] = 99;
    24b0:	f3 e6       	ldi	r31, 0x63	; 99
    24b2:	bf 2e       	mov	r11, r31
    24b4:	25 c0       	rjmp	.+74     	; 0x2500 <wavefrontMake+0x88>
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
    24b6:	8c 91       	ld	r24, X
    24b8:	8f 30       	cpi	r24, 0x0F	; 15
    24ba:	11 f4       	brne	.+4      	; 0x24c0 <wavefrontMake+0x48>
				ROBOT_METRIC_WORLD[row][col] = 99;
    24bc:	b0 82       	st	Z, r11
    24be:	11 c0       	rjmp	.+34     	; 0x24e2 <wavefrontMake+0x6a>
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
    24c0:	9a 01       	movw	r18, r20
    24c2:	57 ff       	sbrs	r21, 7
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <wavefrontMake+0x56>
    24c6:	22 27       	eor	r18, r18
    24c8:	33 27       	eor	r19, r19
    24ca:	24 1b       	sub	r18, r20
    24cc:	35 0b       	sbc	r19, r21
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
    24ce:	22 9f       	mul	r18, r18
    24d0:	c0 01       	movw	r24, r0
    24d2:	23 9f       	mul	r18, r19
    24d4:	90 0d       	add	r25, r0
    24d6:	32 9f       	mul	r19, r18
    24d8:	90 0d       	add	r25, r0
    24da:	11 24       	eor	r1, r1
    24dc:	8e 0d       	add	r24, r14
    24de:	9f 1d       	adc	r25, r15
    24e0:	80 83       	st	Z, r24
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
    24e2:	6f 5f       	subi	r22, 0xFF	; 255
    24e4:	7f 4f       	sbci	r23, 0xFF	; 255
    24e6:	11 96       	adiw	r26, 0x01	; 1
    24e8:	31 96       	adiw	r30, 0x01	; 1
    24ea:	4f 5f       	subi	r20, 0xFF	; 255
    24ec:	5f 4f       	sbci	r21, 0xFF	; 255
    24ee:	64 30       	cpi	r22, 0x04	; 4
    24f0:	71 05       	cpc	r23, r1
    24f2:	09 f7       	brne	.-62     	; 0x24b6 <wavefrontMake+0x3e>
	unsigned int rowDelta, colDelta;
	int row, col;
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
    24f4:	0f 5f       	subi	r16, 0xFF	; 255
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	21 96       	adiw	r28, 0x01	; 1
    24fa:	04 30       	cpi	r16, 0x04	; 4
    24fc:	11 05       	cpc	r17, r1
    24fe:	e9 f0       	breq	.+58     	; 0x253a <wavefrontMake+0xc2>
				ROBOT_METRIC_WORLD[row][col] = 99;
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
    2500:	ce 01       	movw	r24, r28
    2502:	d7 ff       	sbrs	r29, 7
    2504:	04 c0       	rjmp	.+8      	; 0x250e <wavefrontMake+0x96>
    2506:	88 27       	eor	r24, r24
    2508:	99 27       	eor	r25, r25
    250a:	8c 1b       	sub	r24, r28
    250c:	9d 0b       	sbc	r25, r29
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    250e:	88 9f       	mul	r24, r24
    2510:	70 01       	movw	r14, r0
    2512:	89 9f       	mul	r24, r25
    2514:	f0 0c       	add	r15, r0
    2516:	98 9f       	mul	r25, r24
    2518:	f0 0c       	add	r15, r0
    251a:	11 24       	eor	r1, r1
    251c:	c8 01       	movw	r24, r16
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	dc 01       	movw	r26, r24
    2528:	ab 5e       	subi	r26, 0xEB	; 235
    252a:	bb 4f       	sbci	r27, 0xFB	; 251
    252c:	fc 01       	movw	r30, r24
    252e:	ef 56       	subi	r30, 0x6F	; 111
    2530:	fb 4f       	sbci	r31, 0xFB	; 251
    2532:	a6 01       	movw	r20, r12
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	be cf       	rjmp	.-132    	; 0x24b6 <wavefrontMake+0x3e>
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
			}
		}
	}
}
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	df 90       	pop	r13
    2548:	cf 90       	pop	r12
    254a:	bf 90       	pop	r11
    254c:	08 95       	ret

0000254e <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    254e:	ef 92       	push	r14
    2550:	ff 92       	push	r15
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    2556:	60 91 96 05 	lds	r22, 0x0596
    255a:	70 91 97 05 	lds	r23, 0x0597
    255e:	80 91 98 05 	lds	r24, 0x0598
    2562:	90 91 99 05 	lds	r25, 0x0599
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    2572:	f8 2e       	mov	r15, r24
    2574:	ff 1c       	adc	r15, r15
    2576:	ff 24       	eor	r15, r15
    2578:	ff 1c       	adc	r15, r15
    257a:	ff 0c       	add	r15, r15
    257c:	ff 0c       	add	r15, r15
    257e:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    2580:	60 91 39 07 	lds	r22, 0x0739
    2584:	70 91 3a 07 	lds	r23, 0x073A
    2588:	80 91 3b 07 	lds	r24, 0x073B
    258c:	90 91 3c 07 	lds	r25, 0x073C
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 ef       	ldi	r20, 0xF0	; 240
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    259c:	08 2f       	mov	r16, r24
    259e:	00 1f       	adc	r16, r16
    25a0:	00 27       	eor	r16, r16
    25a2:	00 1f       	adc	r16, r16
    25a4:	00 0f       	add	r16, r16
    25a6:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    25a8:	60 91 a0 05 	lds	r22, 0x05A0
    25ac:	70 91 a1 05 	lds	r23, 0x05A1
    25b0:	80 91 a2 05 	lds	r24, 0x05A2
    25b4:	90 91 a3 05 	lds	r25, 0x05A3
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4c e0       	ldi	r20, 0x0C	; 12
    25be:	52 e4       	ldi	r21, 0x42	; 66
    25c0:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    25c4:	18 2f       	mov	r17, r24
    25c6:	11 1f       	adc	r17, r17
    25c8:	11 27       	eor	r17, r17
    25ca:	11 1f       	adc	r17, r17
    25cc:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    25ce:	ee 24       	eor	r14, r14
    25d0:	60 91 3d 07 	lds	r22, 0x073D
    25d4:	70 91 3e 07 	lds	r23, 0x073E
    25d8:	80 91 3f 07 	lds	r24, 0x073F
    25dc:	90 91 40 07 	lds	r25, 0x0740
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 ef       	ldi	r20, 0xF0	; 240
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 cc 2c 	call	0x5998	; 0x5998 <__cmpsf2>
    25ec:	88 23       	and	r24, r24
    25ee:	14 f4       	brge	.+4      	; 0x25f4 <checkWorld+0xa6>
    25f0:	ee 24       	eor	r14, r14
    25f2:	e3 94       	inc	r14
    25f4:	8f 2d       	mov	r24, r15
    25f6:	8e 0d       	add	r24, r14
    25f8:	80 0f       	add	r24, r16
    25fa:	81 0f       	add	r24, r17
    25fc:	80 93 9e 05 	sts	0x059E, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    2600:	20 91 9f 05 	lds	r18, 0x059F
    2604:	e2 2f       	mov	r30, r18
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	e7 54       	subi	r30, 0x47	; 71
    260a:	f8 4f       	sbci	r31, 0xF8	; 248
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	90 93 a5 05 	sts	0x05A5, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    2612:	89 17       	cp	r24, r25
    2614:	19 f4       	brne	.+6      	; 0x261c <checkWorld+0xce>
		currentMoveWorld += 1;
    2616:	2f 5f       	subi	r18, 0xFF	; 255
    2618:	20 93 9f 05 	sts	0x059F, r18
	}
}
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	08 95       	ret

00002626 <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    2626:	ff 92       	push	r15
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    262e:	08 2f       	mov	r16, r24
    2630:	06 95       	lsr	r16
    2632:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    2634:	a3 e0       	ldi	r26, 0x03	; 3
    2636:	fa 2e       	mov	r15, r26
    2638:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(curMove){
    263a:	62 30       	cpi	r22, 0x02	; 2
    263c:	31 f0       	breq	.+12     	; 0x264a <shiftMap+0x24>
    263e:	63 30       	cpi	r22, 0x03	; 3
    2640:	a9 f0       	breq	.+42     	; 0x266c <shiftMap+0x46>
    2642:	61 30       	cpi	r22, 0x01	; 1
    2644:	b1 f4       	brne	.+44     	; 0x2672 <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2646:	11 50       	subi	r17, 0x01	; 1
    2648:	12 c0       	rjmp	.+36     	; 0x266e <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    264a:	41 30       	cpi	r20, 0x01	; 1
    264c:	49 f0       	breq	.+18     	; 0x2660 <shiftMap+0x3a>
    264e:	41 30       	cpi	r20, 0x01	; 1
    2650:	28 f0       	brcs	.+10     	; 0x265c <shiftMap+0x36>
    2652:	42 30       	cpi	r20, 0x02	; 2
    2654:	39 f0       	breq	.+14     	; 0x2664 <shiftMap+0x3e>
    2656:	43 30       	cpi	r20, 0x03	; 3
    2658:	b9 f4       	brne	.+46     	; 0x2688 <shiftMap+0x62>
    265a:	06 c0       	rjmp	.+12     	; 0x2668 <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    265c:	01 50       	subi	r16, 0x01	; 1
    265e:	14 c0       	rjmp	.+40     	; 0x2688 <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    2660:	f3 94       	inc	r15
    2662:	12 c0       	rjmp	.+36     	; 0x2688 <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    2664:	0f 5f       	subi	r16, 0xFF	; 255
    2666:	10 c0       	rjmp	.+32     	; 0x2688 <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    2668:	fa 94       	dec	r15
    266a:	0e c0       	rjmp	.+28     	; 0x2688 <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    266c:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    266e:	13 70       	andi	r17, 0x03	; 3
    2670:	0b c0       	rjmp	.+22     	; 0x2688 <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    2672:	00 d0       	rcall	.+0      	; 0x2674 <shiftMap+0x4e>
    2674:	84 e4       	ldi	r24, 0x44	; 68
    2676:	91 e0       	ldi	r25, 0x01	; 1
    2678:	ed b7       	in	r30, 0x3d	; 61
    267a:	fe b7       	in	r31, 0x3e	; 62
    267c:	92 83       	std	Z+2, r25	; 0x02
    267e:	81 83       	std	Z+1, r24	; 0x01
    2680:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    2688:	10 93 33 06 	sts	0x0633, r17
    268c:	00 0f       	add	r16, r16
    268e:	00 0f       	add	r16, r16
	return currentCell;
}
    2690:	80 2f       	mov	r24, r16
    2692:	8f 0d       	add	r24, r15
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	ff 90       	pop	r15
    269a:	08 95       	ret

0000269c <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    269c:	80 91 9e 05 	lds	r24, 0x059E
    26a0:	80 fd       	sbrc	r24, 0
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	05 c0       	rjmp	.+10     	; 0x26b2 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    26a8:	83 fd       	sbrc	r24, 3
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	80 93 c9 07 	sts	0x07C9, r24
	}
	
	switch(oldMove){
    26b6:	80 91 ca 07 	lds	r24, 0x07CA
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	29 f0       	breq	.+10     	; 0x26c8 <planMap+0x2c>
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	38 f0       	brcs	.+14     	; 0x26d0 <planMap+0x34>
    26c2:	84 30       	cpi	r24, 0x04	; 4
    26c4:	28 f4       	brcc	.+10     	; 0x26d0 <planMap+0x34>
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	80 93 c9 07 	sts	0x07C9, r24
    26ce:	0b c0       	rjmp	.+22     	; 0x26e6 <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <planMap+0x36>
    26d2:	8d e4       	ldi	r24, 0x4D	; 77
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	ed b7       	in	r30, 0x3d	; 61
    26d8:	fe b7       	in	r31, 0x3e	; 62
    26da:	92 83       	std	Z+2, r25	; 0x02
    26dc:	81 83       	std	Z+1, r24	; 0x01
    26de:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    26e6:	80 91 c9 07 	lds	r24, 0x07C9
    26ea:	80 93 ca 07 	sts	0x07CA, r24
}
    26ee:	08 95       	ret

000026f0 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    26f0:	80 91 90 04 	lds	r24, 0x0490
    26f4:	85 30       	cpi	r24, 0x05	; 5
    26f6:	80 f0       	brcs	.+32     	; 0x2718 <planGateway+0x28>
    26f8:	e1 e8       	ldi	r30, 0x81	; 129
    26fa:	f4 e0       	ldi	r31, 0x04	; 4
		for(i = 0; i<=(BRANCH_MAX-1); i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    26fc:	81 81       	ldd	r24, Z+1	; 0x01
    26fe:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2700:	86 81       	ldd	r24, Z+6	; 0x06
    2702:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2704:	83 85       	ldd	r24, Z+11	; 0x0b
    2706:	82 87       	std	Z+10, r24	; 0x0a
    2708:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<=(BRANCH_MAX-1); i++){
    270a:	84 e0       	ldi	r24, 0x04	; 4
    270c:	e6 38       	cpi	r30, 0x86	; 134
    270e:	f8 07       	cpc	r31, r24
    2710:	a9 f7       	brne	.-22     	; 0x26fc <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2712:	84 e0       	ldi	r24, 0x04	; 4
    2714:	80 93 90 04 	sts	0x0490, r24
	}
	
	// Decide what the current move should be
	planMap();
    2718:	0e 94 4e 13 	call	0x269c	; 0x269c <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    271c:	e0 91 90 04 	lds	r30, 0x0490
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	ef 57       	subi	r30, 0x7F	; 127
    2724:	fb 4f       	sbci	r31, 0xFB	; 251
    2726:	80 91 9e 05 	lds	r24, 0x059E
    272a:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    272c:	90 91 c9 07 	lds	r25, 0x07C9
    2730:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2732:	80 91 33 06 	lds	r24, 0x0633
    2736:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2738:	91 30       	cpi	r25, 0x01	; 1
    273a:	19 f0       	breq	.+6      	; 0x2742 <planGateway+0x52>
    273c:	93 30       	cpi	r25, 0x03	; 3
    273e:	41 f4       	brne	.+16     	; 0x2750 <planGateway+0x60>
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <planGateway+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2742:	81 50       	subi	r24, 0x01	; 1
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <planGateway+0x58>
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	83 70       	andi	r24, 0x03	; 3
    274a:	80 93 33 06 	sts	0x0633, r24
    274e:	0b c0       	rjmp	.+22     	; 0x2766 <planGateway+0x76>
			break;
		default:
			LCD_printf("Whatz2?!");
    2750:	00 d0       	rcall	.+0      	; 0x2752 <planGateway+0x62>
    2752:	86 e5       	ldi	r24, 0x56	; 86
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	ed b7       	in	r30, 0x3d	; 61
    2758:	fe b7       	in	r31, 0x3e	; 62
    275a:	92 83       	std	Z+2, r25	; 0x02
    275c:	81 83       	std	Z+1, r24	; 0x01
    275e:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2766:	80 91 90 04 	lds	r24, 0x0490
    276a:	8f 5f       	subi	r24, 0xFF	; 255
    276c:	80 93 90 04 	sts	0x0490, r24
}
    2770:	08 95       	ret

00002772 <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    2772:	90 91 33 06 	lds	r25, 0x0633
    2776:	91 30       	cpi	r25, 0x01	; 1
    2778:	91 f0       	breq	.+36     	; 0x279e <planMetric+0x2c>
    277a:	91 30       	cpi	r25, 0x01	; 1
    277c:	28 f0       	brcs	.+10     	; 0x2788 <planMetric+0x16>
    277e:	92 30       	cpi	r25, 0x02	; 2
    2780:	d9 f0       	breq	.+54     	; 0x27b8 <planMetric+0x46>
    2782:	93 30       	cpi	r25, 0x03	; 3
    2784:	c1 f5       	brne	.+112    	; 0x27f6 <planMetric+0x84>
    2786:	23 c0       	rjmp	.+70     	; 0x27ce <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    2788:	80 91 34 06 	lds	r24, 0x0634
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	91 f0       	breq	.+36     	; 0x27b4 <planMetric+0x42>
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	68 f1       	brcs	.+90     	; 0x27ee <planMetric+0x7c>
    2794:	82 30       	cpi	r24, 0x02	; 2
    2796:	49 f1       	breq	.+82     	; 0x27ea <planMetric+0x78>
    2798:	83 30       	cpi	r24, 0x03	; 3
    279a:	69 f5       	brne	.+90     	; 0x27f6 <planMetric+0x84>
    279c:	26 c0       	rjmp	.+76     	; 0x27ea <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    279e:	80 91 34 06 	lds	r24, 0x0634
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	21 f1       	breq	.+72     	; 0x27ee <planMetric+0x7c>
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	e8 f0       	brcs	.+58     	; 0x27e4 <planMetric+0x72>
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <planMetric+0x42>
    27ae:	83 30       	cpi	r24, 0x03	; 3
    27b0:	11 f5       	brne	.+68     	; 0x27f6 <planMetric+0x84>
    27b2:	18 c0       	rjmp	.+48     	; 0x27e4 <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    27b4:	83 e0       	ldi	r24, 0x03	; 3
    27b6:	1c c0       	rjmp	.+56     	; 0x27f0 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    27b8:	80 91 34 06 	lds	r24, 0x0634
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	c1 f0       	breq	.+48     	; 0x27f0 <planMetric+0x7e>
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	98 f0       	brcs	.+38     	; 0x27ea <planMetric+0x78>
    27c4:	82 30       	cpi	r24, 0x02	; 2
    27c6:	a1 f0       	breq	.+40     	; 0x27f0 <planMetric+0x7e>
    27c8:	83 30       	cpi	r24, 0x03	; 3
    27ca:	a9 f4       	brne	.+42     	; 0x27f6 <planMetric+0x84>
    27cc:	11 c0       	rjmp	.+34     	; 0x27f0 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    27ce:	80 91 34 06 	lds	r24, 0x0634
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	69 f0       	breq	.+26     	; 0x27f0 <planMetric+0x7e>
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	28 f0       	brcs	.+10     	; 0x27e4 <planMetric+0x72>
    27da:	82 30       	cpi	r24, 0x02	; 2
    27dc:	31 f0       	breq	.+12     	; 0x27ea <planMetric+0x78>
    27de:	83 30       	cpi	r24, 0x03	; 3
    27e0:	51 f4       	brne	.+20     	; 0x27f6 <planMetric+0x84>
    27e2:	05 c0       	rjmp	.+10     	; 0x27ee <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    27e4:	90 93 c9 07 	sts	0x07C9, r25
    27e8:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	01 c0       	rjmp	.+2      	; 0x27f0 <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	80 93 c9 07 	sts	0x07C9, r24
    27f4:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <planMetric+0x86>
    27f8:	8f e5       	ldi	r24, 0x5F	; 95
    27fa:	91 e0       	ldi	r25, 0x01	; 1
    27fc:	ed b7       	in	r30, 0x3d	; 61
    27fe:	fe b7       	in	r31, 0x3e	; 62
    2800:	92 83       	std	Z+2, r25	; 0x02
    2802:	81 83       	std	Z+1, r24	; 0x01
    2804:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	08 95       	ret

0000280e <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    280e:	8f 92       	push	r8
    2810:	af 92       	push	r10
    2812:	bf 92       	push	r11
    2814:	cf 92       	push	r12
    2816:	df 92       	push	r13
    2818:	ef 92       	push	r14
    281a:	ff 92       	push	r15
    281c:	0f 93       	push	r16
    281e:	1f 93       	push	r17
	LCD_clear();
    2820:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	char isDone = 0;
	
	currentMove = moveCommands[currentMoveWorld];
    2824:	e0 91 9f 05 	lds	r30, 0x059F
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	ee 5d       	subi	r30, 0xDE	; 222
    282c:	f9 4f       	sbci	r31, 0xF9	; 249
    282e:	e0 81       	ld	r30, Z
    2830:	e0 93 c9 07 	sts	0x07C9, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	e1 30       	cpi	r30, 0x01	; 1
    2838:	09 f4       	brne	.+2      	; 0x283c <moveWorld+0x2e>
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	e3 30       	cpi	r30, 0x03	; 3
    2840:	09 f4       	brne	.+2      	; 0x2844 <moveWorld+0x36>
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	89 2b       	or	r24, r25
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	80 91 ca 07 	lds	r24, 0x07CA
    2852:	82 30       	cpi	r24, 0x02	; 2
    2854:	11 f4       	brne	.+4      	; 0x285a <moveWorld+0x4c>
    2856:	41 e0       	ldi	r20, 0x01	; 1
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	24 23       	and	r18, r20
    285c:	35 23       	and	r19, r21
    285e:	23 2b       	or	r18, r19
    2860:	b9 f0       	breq	.+46     	; 0x2890 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	70 e0       	ldi	r23, 0x00	; 0
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	9f e4       	ldi	r25, 0x4F	; 79
    286a:	28 e4       	ldi	r18, 0x48	; 72
    286c:	31 ee       	ldi	r19, 0xE1	; 225
    286e:	46 eb       	ldi	r20, 0xB6	; 182
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0f 2e       	mov	r0, r31
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	ef 2e       	mov	r14, r31
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	ff 2e       	mov	r15, r31
    287c:	f0 e2       	ldi	r31, 0x20	; 32
    287e:	0f 2f       	mov	r16, r31
    2880:	f1 e4       	ldi	r31, 0x41	; 65
    2882:	1f 2f       	mov	r17, r31
    2884:	f0 2d       	mov	r31, r0
    2886:	57 01       	movw	r10, r14
    2888:	68 01       	movw	r12, r16
    288a:	88 24       	eor	r8, r8
    288c:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    2890:	20 91 ca 07 	lds	r18, 0x07CA
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	21 30       	cpi	r18, 0x01	; 1
    2898:	09 f4       	brne	.+2      	; 0x289c <moveWorld+0x8e>
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	23 30       	cpi	r18, 0x03	; 3
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <moveWorld+0x96>
    28a2:	91 e0       	ldi	r25, 0x01	; 1
    28a4:	89 2b       	or	r24, r25
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	80 91 c9 07 	lds	r24, 0x07C9
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	11 f4       	brne	.+4      	; 0x28ba <moveWorld+0xac>
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	24 23       	and	r18, r20
    28bc:	35 23       	and	r19, r21
    28be:	23 2b       	or	r18, r19
    28c0:	b9 f0       	breq	.+46     	; 0x28f0 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	9f e4       	ldi	r25, 0x4F	; 79
    28ca:	25 e3       	ldi	r18, 0x35	; 53
    28cc:	3f ee       	ldi	r19, 0xEF	; 239
    28ce:	40 ea       	ldi	r20, 0xA0	; 160
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0f 2e       	mov	r0, r31
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	ef 2e       	mov	r14, r31
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	ff 2e       	mov	r15, r31
    28dc:	f0 e2       	ldi	r31, 0x20	; 32
    28de:	0f 2f       	mov	r16, r31
    28e0:	f1 e4       	ldi	r31, 0x41	; 65
    28e2:	1f 2f       	mov	r17, r31
    28e4:	f0 2d       	mov	r31, r0
    28e6:	57 01       	movw	r10, r14
    28e8:	68 01       	movw	r12, r16
    28ea:	88 24       	eor	r8, r8
    28ec:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	switch(currentMove){
    28f0:	80 91 c9 07 	lds	r24, 0x07C9
    28f4:	82 30       	cpi	r24, 0x02	; 2
    28f6:	c1 f1       	breq	.+112    	; 0x2968 <moveWorld+0x15a>
    28f8:	83 30       	cpi	r24, 0x03	; 3
    28fa:	09 f4       	brne	.+2      	; 0x28fe <moveWorld+0xf0>
    28fc:	77 c0       	rjmp	.+238    	; 0x29ec <moveWorld+0x1de>
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	09 f0       	breq	.+2      	; 0x2904 <moveWorld+0xf6>
    2902:	b5 c0       	rjmp	.+362    	; 0x2a6e <moveWorld+0x260>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2904:	8d b7       	in	r24, 0x3d	; 61
    2906:	9e b7       	in	r25, 0x3e	; 62
    2908:	08 97       	sbiw	r24, 0x08	; 8
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	9e bf       	out	0x3e, r25	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	8d bf       	out	0x3d, r24	; 61
    2914:	ed b7       	in	r30, 0x3d	; 61
    2916:	fe b7       	in	r31, 0x3e	; 62
    2918:	31 96       	adiw	r30, 0x01	; 1
    291a:	88 e6       	ldi	r24, 0x68	; 104
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	ad b7       	in	r26, 0x3d	; 61
    2920:	be b7       	in	r27, 0x3e	; 62
    2922:	12 96       	adiw	r26, 0x02	; 2
    2924:	9c 93       	st	X, r25
    2926:	8e 93       	st	-X, r24
    2928:	11 97       	sbiw	r26, 0x01	; 1
    292a:	80 91 9f 05 	lds	r24, 0x059F
    292e:	82 83       	std	Z+2, r24	; 0x02
    2930:	13 82       	std	Z+3, r1	; 0x03
    2932:	80 91 9e 05 	lds	r24, 0x059E
    2936:	84 83       	std	Z+4, r24	; 0x04
    2938:	15 82       	std	Z+5, r1	; 0x05
    293a:	80 91 a5 05 	lds	r24, 0x05A5
    293e:	86 83       	std	Z+6, r24	; 0x06
    2940:	17 82       	std	Z+7, r1	; 0x07
    2942:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2946:	ed b7       	in	r30, 0x3d	; 61
    2948:	fe b7       	in	r31, 0x3e	; 62
    294a:	38 96       	adiw	r30, 0x08	; 8
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	fe bf       	out	0x3e, r31	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	ed bf       	out	0x3d, r30	; 61
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4c e8       	ldi	r20, 0x8C	; 140
    2964:	51 ec       	ldi	r21, 0xC1	; 193
    2966:	73 c0       	rjmp	.+230    	; 0x2a4e <moveWorld+0x240>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2968:	8d b7       	in	r24, 0x3d	; 61
    296a:	9e b7       	in	r25, 0x3e	; 62
    296c:	08 97       	sbiw	r24, 0x08	; 8
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	9e bf       	out	0x3e, r25	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	8d bf       	out	0x3d, r24	; 61
    2978:	ed b7       	in	r30, 0x3d	; 61
    297a:	fe b7       	in	r31, 0x3e	; 62
    297c:	31 96       	adiw	r30, 0x01	; 1
    297e:	83 e9       	ldi	r24, 0x93	; 147
    2980:	91 e0       	ldi	r25, 0x01	; 1
    2982:	ad b7       	in	r26, 0x3d	; 61
    2984:	be b7       	in	r27, 0x3e	; 62
    2986:	12 96       	adiw	r26, 0x02	; 2
    2988:	9c 93       	st	X, r25
    298a:	8e 93       	st	-X, r24
    298c:	11 97       	sbiw	r26, 0x01	; 1
    298e:	80 91 9f 05 	lds	r24, 0x059F
    2992:	82 83       	std	Z+2, r24	; 0x02
    2994:	13 82       	std	Z+3, r1	; 0x03
    2996:	80 91 9e 05 	lds	r24, 0x059E
    299a:	84 83       	std	Z+4, r24	; 0x04
    299c:	15 82       	std	Z+5, r1	; 0x05
    299e:	80 91 a5 05 	lds	r24, 0x05A5
    29a2:	86 83       	std	Z+6, r24	; 0x06
    29a4:	17 82       	std	Z+7, r1	; 0x07
    29a6:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
		
			setOdometry(WALL_STEP);
    29aa:	ed b7       	in	r30, 0x3d	; 61
    29ac:	fe b7       	in	r31, 0x3e	; 62
    29ae:	38 96       	adiw	r30, 0x08	; 8
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	fe bf       	out	0x3e, r31	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	ed bf       	out	0x3d, r30	; 61
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	86 e9       	ldi	r24, 0x96	; 150
    29c0:	93 e4       	ldi	r25, 0x43	; 67
    29c2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <setOdometry>
			while(!isDone){
				checkIR();
    29c6:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <checkIR>
				isDone = moveWall();
    29ca:	0e 94 3f 10 	call	0x207e	; 0x207e <moveWall>
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
			// TMRSRVC_delay(1000);//wait 1 seconds
		
			setOdometry(WALL_STEP);
			while(!isDone){
    29ce:	88 23       	and	r24, r24
    29d0:	d1 f3       	breq	.-12     	; 0x29c6 <moveWorld+0x1b8>
				checkIR();
				isDone = moveWall();
			}
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_ON);
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	61 e0       	ldi	r22, 0x01	; 1
    29d6:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <STEPPER_stop>
			TMRSRVC_delay(100);//wait .1 seconds
    29da:	84 e6       	ldi	r24, 0x64	; 100
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <STEPPER_stop>
    29ea:	53 c0       	rjmp	.+166    	; 0x2a92 <moveWorld+0x284>
			
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    29ec:	8d b7       	in	r24, 0x3d	; 61
    29ee:	9e b7       	in	r25, 0x3e	; 62
    29f0:	08 97       	sbiw	r24, 0x08	; 8
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	9e bf       	out	0x3e, r25	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	8d bf       	out	0x3d, r24	; 61
    29fc:	ed b7       	in	r30, 0x3d	; 61
    29fe:	fe b7       	in	r31, 0x3e	; 62
    2a00:	31 96       	adiw	r30, 0x01	; 1
    2a02:	81 ec       	ldi	r24, 0xC1	; 193
    2a04:	91 e0       	ldi	r25, 0x01	; 1
    2a06:	ad b7       	in	r26, 0x3d	; 61
    2a08:	be b7       	in	r27, 0x3e	; 62
    2a0a:	12 96       	adiw	r26, 0x02	; 2
    2a0c:	9c 93       	st	X, r25
    2a0e:	8e 93       	st	-X, r24
    2a10:	11 97       	sbiw	r26, 0x01	; 1
    2a12:	80 91 9f 05 	lds	r24, 0x059F
    2a16:	82 83       	std	Z+2, r24	; 0x02
    2a18:	13 82       	std	Z+3, r1	; 0x03
    2a1a:	80 91 9e 05 	lds	r24, 0x059E
    2a1e:	84 83       	std	Z+4, r24	; 0x04
    2a20:	15 82       	std	Z+5, r1	; 0x05
    2a22:	80 91 a5 05 	lds	r24, 0x05A5
    2a26:	86 83       	std	Z+6, r24	; 0x06
    2a28:	17 82       	std	Z+7, r1	; 0x07
    2a2a:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2a2e:	ed b7       	in	r30, 0x3d	; 61
    2a30:	fe b7       	in	r31, 0x3e	; 62
    2a32:	38 96       	adiw	r30, 0x08	; 8
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	fe bf       	out	0x3e, r31	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	ed bf       	out	0x3d, r30	; 61
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	70 e0       	ldi	r23, 0x00	; 0
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4c e8       	ldi	r20, 0x8C	; 140
    2a4c:	51 e4       	ldi	r21, 0x41	; 65
    2a4e:	0f 2e       	mov	r0, r31
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	ef 2e       	mov	r14, r31
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	ff 2e       	mov	r15, r31
    2a58:	f0 e2       	ldi	r31, 0x20	; 32
    2a5a:	0f 2f       	mov	r16, r31
    2a5c:	f1 e4       	ldi	r31, 0x41	; 65
    2a5e:	1f 2f       	mov	r17, r31
    2a60:	f0 2d       	mov	r31, r0
    2a62:	57 01       	movw	r10, r14
    2a64:	68 01       	movw	r12, r16
    2a66:	88 24       	eor	r8, r8
    2a68:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2a6c:	12 c0       	rjmp	.+36     	; 0x2a92 <moveWorld+0x284>
			break;
		default:
			LCD_printf("Whatz4?!");
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <moveWorld+0x262>
    2a70:	8d ee       	ldi	r24, 0xED	; 237
    2a72:	91 e0       	ldi	r25, 0x01	; 1
    2a74:	ad b7       	in	r26, 0x3d	; 61
    2a76:	be b7       	in	r27, 0x3e	; 62
    2a78:	12 96       	adiw	r26, 0x02	; 2
    2a7a:	9c 93       	st	X, r25
    2a7c:	8e 93       	st	-X, r24
    2a7e:	11 97       	sbiw	r26, 0x01	; 1
    2a80:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <STEPPER_stop>
    2a90:	ff cf       	rjmp	.-2      	; 0x2a90 <moveWorld+0x282>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2a92:	80 91 c9 07 	lds	r24, 0x07C9
    2a96:	80 93 ca 07 	sts	0x07CA, r24
	return 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
    2aa8:	bf 90       	pop	r11
    2aaa:	af 90       	pop	r10
    2aac:	8f 90       	pop	r8
    2aae:	08 95       	ret

00002ab0 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    2ab0:	ff 92       	push	r15
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	ff 24       	eor	r15, r15
    2abc:	f3 94       	inc	r15
    2abe:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2ac0:	c6 ef       	ldi	r28, 0xF6	; 246
    2ac2:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    2ac4:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    2ac8:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    2aca:	81 30       	cpi	r24, 0x01	; 1
    2acc:	21 f0       	breq	.+8      	; 0x2ad6 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2ace:	82 30       	cpi	r24, 0x02	; 2
    2ad0:	11 f0       	breq	.+4      	; 0x2ad6 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    2ad2:	83 30       	cpi	r24, 0x03	; 3
    2ad4:	39 f4       	brne	.+14     	; 0x2ae4 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    2ad6:	e1 2f       	mov	r30, r17
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	ee 5d       	subi	r30, 0xDE	; 222
    2adc:	f9 4f       	sbci	r31, 0xF9	; 249
    2ade:	00 83       	st	Z, r16
			i++;
    2ae0:	1f 5f       	subi	r17, 0xFF	; 255
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <movesInput+0x38>
		}

		if (btnHolder != 0){
    2ae4:	88 23       	and	r24, r24
    2ae6:	21 f1       	breq	.+72     	; 0x2b30 <movesInput+0x80>
			LCD_clear();
    2ae8:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2aec:	8d b7       	in	r24, 0x3d	; 61
    2aee:	9e b7       	in	r25, 0x3e	; 62
    2af0:	08 97       	sbiw	r24, 0x08	; 8
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	9e bf       	out	0x3e, r25	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	8d bf       	out	0x3d, r24	; 61
    2afc:	ed b7       	in	r30, 0x3d	; 61
    2afe:	fe b7       	in	r31, 0x3e	; 62
    2b00:	31 96       	adiw	r30, 0x01	; 1
    2b02:	ad b7       	in	r26, 0x3d	; 61
    2b04:	be b7       	in	r27, 0x3e	; 62
    2b06:	12 96       	adiw	r26, 0x02	; 2
    2b08:	dc 93       	st	X, r29
    2b0a:	ce 93       	st	-X, r28
    2b0c:	11 97       	sbiw	r26, 0x01	; 1
    2b0e:	f2 82       	std	Z+2, r15	; 0x02
    2b10:	13 82       	std	Z+3, r1	; 0x03
    2b12:	04 83       	std	Z+4, r16	; 0x04
    2b14:	15 82       	std	Z+5, r1	; 0x05
    2b16:	16 83       	std	Z+6, r17	; 0x06
    2b18:	17 82       	std	Z+7, r1	; 0x07
    2b1a:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
    2b1e:	f0 2e       	mov	r15, r16
    2b20:	8d b7       	in	r24, 0x3d	; 61
    2b22:	9e b7       	in	r25, 0x3e	; 62
    2b24:	08 96       	adiw	r24, 0x08	; 8
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	9e bf       	out	0x3e, r25	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2b30:	84 ef       	ldi	r24, 0xF4	; 244
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    2b38:	1b 30       	cpi	r17, 0x0B	; 11
    2b3a:	20 f2       	brcs	.-120    	; 0x2ac4 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    2b3c:	1f 5f       	subi	r17, 0xFF	; 255
    2b3e:	e1 2f       	mov	r30, r17
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	ee 5d       	subi	r30, 0xDE	; 222
    2b44:	f9 4f       	sbci	r31, 0xF9	; 249
    2b46:	84 e0       	ldi	r24, 0x04	; 4
    2b48:	80 83       	st	Z, r24
}
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	1f 91       	pop	r17
    2b50:	0f 91       	pop	r16
    2b52:	ff 90       	pop	r15
    2b54:	08 95       	ret

00002b56 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2b5e:	c7 e2       	ldi	r28, 0x27	; 39
    2b60:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    2b62:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	21 f4       	brne	.+8      	; 0x2b72 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    2b6a:	80 91 35 07 	lds	r24, 0x0735
    2b6e:	88 0f       	add	r24, r24
    2b70:	06 c0       	rjmp	.+12     	; 0x2b7e <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2b72:	82 30       	cpi	r24, 0x02	; 2
    2b74:	39 f4       	brne	.+14     	; 0x2b84 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    2b76:	80 91 35 07 	lds	r24, 0x0735
    2b7a:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    2b7c:	8f 5f       	subi	r24, 0xFF	; 255
    2b7e:	80 93 35 07 	sts	0x0735, r24
			i++;
    2b82:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    2b84:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <worldInput+0x34>
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <worldInput+0x36>
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <worldInput+0x38>
    2b8e:	ed b7       	in	r30, 0x3d	; 61
    2b90:	fe b7       	in	r31, 0x3e	; 62
    2b92:	31 96       	adiw	r30, 0x01	; 1
    2b94:	ad b7       	in	r26, 0x3d	; 61
    2b96:	be b7       	in	r27, 0x3e	; 62
    2b98:	12 96       	adiw	r26, 0x02	; 2
    2b9a:	dc 93       	st	X, r29
    2b9c:	ce 93       	st	-X, r28
    2b9e:	11 97       	sbiw	r26, 0x01	; 1
    2ba0:	80 91 35 07 	lds	r24, 0x0735
    2ba4:	82 83       	std	Z+2, r24	; 0x02
    2ba6:	13 82       	std	Z+3, r1	; 0x03
    2ba8:	14 83       	std	Z+4, r17	; 0x04
    2baa:	15 82       	std	Z+5, r1	; 0x05
    2bac:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2bb0:	8d b7       	in	r24, 0x3d	; 61
    2bb2:	9e b7       	in	r25, 0x3e	; 62
    2bb4:	06 96       	adiw	r24, 0x06	; 6
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	9e bf       	out	0x3e, r25	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	8d bf       	out	0x3d, r24	; 61
    2bc0:	84 ef       	ldi	r24, 0xF4	; 244
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    2bc8:	14 30       	cpi	r17, 0x04	; 4
    2bca:	58 f2       	brcs	.-106    	; 0x2b62 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    2bcc:	80 91 35 07 	lds	r24, 0x0735
    2bd0:	80 93 36 07 	sts	0x0736, r24
}
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	08 95       	ret

00002bdc <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    2bdc:	1f 93       	push	r17
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2be4:	cf e4       	ldi	r28, 0x4F	; 79
    2be6:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    2be8:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	21 f4       	brne	.+8      	; 0x2bf8 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    2bf0:	80 91 33 06 	lds	r24, 0x0633
    2bf4:	88 0f       	add	r24, r24
    2bf6:	06 c0       	rjmp	.+12     	; 0x2c04 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2bf8:	82 30       	cpi	r24, 0x02	; 2
    2bfa:	41 f4       	brne	.+16     	; 0x2c0c <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    2bfc:	80 91 33 06 	lds	r24, 0x0633
    2c00:	88 0f       	add	r24, r24
			currentOrientation += 1;
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	80 93 33 06 	sts	0x0633, r24
			i++;
    2c08:	1f 5f       	subi	r17, 0xFF	; 255
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    2c0c:	88 23       	and	r24, r24
    2c0e:	f1 f0       	breq	.+60     	; 0x2c4c <orientationInput+0x70>
			LCD_clear();
    2c10:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <orientationInput+0x3a>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <orientationInput+0x3c>
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <orientationInput+0x3e>
    2c1a:	ed b7       	in	r30, 0x3d	; 61
    2c1c:	fe b7       	in	r31, 0x3e	; 62
    2c1e:	31 96       	adiw	r30, 0x01	; 1
    2c20:	ad b7       	in	r26, 0x3d	; 61
    2c22:	be b7       	in	r27, 0x3e	; 62
    2c24:	12 96       	adiw	r26, 0x02	; 2
    2c26:	dc 93       	st	X, r29
    2c28:	ce 93       	st	-X, r28
    2c2a:	11 97       	sbiw	r26, 0x01	; 1
    2c2c:	80 91 33 06 	lds	r24, 0x0633
    2c30:	82 83       	std	Z+2, r24	; 0x02
    2c32:	13 82       	std	Z+3, r1	; 0x03
    2c34:	14 83       	std	Z+4, r17	; 0x04
    2c36:	15 82       	std	Z+5, r1	; 0x05
    2c38:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
    2c3c:	8d b7       	in	r24, 0x3d	; 61
    2c3e:	9e b7       	in	r25, 0x3e	; 62
    2c40:	06 96       	adiw	r24, 0x06	; 6
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	9e bf       	out	0x3e, r25	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2c4c:	84 ef       	ldi	r24, 0xF4	; 244
    2c4e:	91 e0       	ldi	r25, 0x01	; 1
    2c50:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    2c54:	12 30       	cpi	r17, 0x02	; 2
    2c56:	40 f2       	brcs	.-112    	; 0x2be8 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    2c58:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
	switch(currentOrientation){
    2c5c:	80 91 33 06 	lds	r24, 0x0633
    2c60:	81 30       	cpi	r24, 0x01	; 1
    2c62:	51 f0       	breq	.+20     	; 0x2c78 <orientationInput+0x9c>
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	28 f0       	brcs	.+10     	; 0x2c72 <orientationInput+0x96>
    2c68:	82 30       	cpi	r24, 0x02	; 2
    2c6a:	49 f0       	breq	.+18     	; 0x2c7e <orientationInput+0xa2>
    2c6c:	83 30       	cpi	r24, 0x03	; 3
    2c6e:	71 f4       	brne	.+28     	; 0x2c8c <orientationInput+0xb0>
    2c70:	09 c0       	rjmp	.+18     	; 0x2c84 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    2c72:	8e e7       	ldi	r24, 0x7E	; 126
    2c74:	92 e0       	ldi	r25, 0x02	; 2
    2c76:	08 c0       	rjmp	.+16     	; 0x2c88 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    2c78:	80 ea       	ldi	r24, 0xA0	; 160
    2c7a:	92 e0       	ldi	r25, 0x02	; 2
    2c7c:	05 c0       	rjmp	.+10     	; 0x2c88 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    2c7e:	81 ec       	ldi	r24, 0xC1	; 193
    2c80:	92 e0       	ldi	r25, 0x02	; 2
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    2c84:	83 ee       	ldi	r24, 0xE3	; 227
    2c86:	92 e0       	ldi	r25, 0x02	; 2
    2c88:	0e 94 32 36 	call	0x6c64	; 0x6c64 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    2c8c:	80 91 33 06 	lds	r24, 0x0633
    2c90:	80 93 32 06 	sts	0x0632, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    2c94:	84 ef       	ldi	r24, 0xF4	; 244
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
}
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	08 95       	ret

00002ca4 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2ca4:	cf 92       	push	r12
    2ca6:	df 92       	push	r13
    2ca8:	ef 92       	push	r14
    2caa:	ff 92       	push	r15
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	0f 92       	push	r0
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2cba:	80 91 35 07 	lds	r24, 0x0735
    2cbe:	f8 2e       	mov	r15, r24
    2cc0:	f6 94       	lsr	r15
    2cc2:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2cc8:	00 91 33 06 	lds	r16, 0x0633
    2ccc:	cc 24       	eor	r12, r12
    2cce:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2cd0:	f6 01       	movw	r30, r12
    2cd2:	ee 5d       	subi	r30, 0xDE	; 222
    2cd4:	f9 4f       	sbci	r31, 0xF9	; 249
    2cd6:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2cd8:	ef 2d       	mov	r30, r15
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	ee 0f       	add	r30, r30
    2cde:	ff 1f       	adc	r31, r31
    2ce0:	ee 0f       	add	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	e9 0f       	add	r30, r25
    2ce6:	f1 1d       	adc	r31, r1
    2ce8:	eb 5e       	subi	r30, 0xEB	; 235
    2cea:	fb 4f       	sbci	r31, 0xFB	; 251
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2cec:	80 81       	ld	r24, Z
    2cee:	60 2f       	mov	r22, r16
    2cf0:	41 e0       	ldi	r20, 0x01	; 1
    2cf2:	99 83       	std	Y+1, r25	; 0x01
    2cf4:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2cf8:	f6 01       	movw	r30, r12
    2cfa:	e7 54       	subi	r30, 0x47	; 71
    2cfc:	f8 4f       	sbci	r31, 0xF8	; 248
    2cfe:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2d00:	99 81       	ldd	r25, Y+1	; 0x01
    2d02:	12 30       	cpi	r17, 0x02	; 2
    2d04:	89 f4       	brne	.+34     	; 0x2d28 <getGateways+0x84>
			switch(curOrient){
    2d06:	01 30       	cpi	r16, 0x01	; 1
    2d08:	49 f0       	breq	.+18     	; 0x2d1c <getGateways+0x78>
    2d0a:	01 30       	cpi	r16, 0x01	; 1
    2d0c:	28 f0       	brcs	.+10     	; 0x2d18 <getGateways+0x74>
    2d0e:	02 30       	cpi	r16, 0x02	; 2
    2d10:	39 f0       	breq	.+14     	; 0x2d20 <getGateways+0x7c>
    2d12:	03 30       	cpi	r16, 0x03	; 3
    2d14:	89 f4       	brne	.+34     	; 0x2d38 <getGateways+0x94>
    2d16:	06 c0       	rjmp	.+12     	; 0x2d24 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    2d18:	fa 94       	dec	r15
    2d1a:	0e c0       	rjmp	.+28     	; 0x2d38 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    2d1c:	9f 5f       	subi	r25, 0xFF	; 255
    2d1e:	0c c0       	rjmp	.+24     	; 0x2d38 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    2d20:	f3 94       	inc	r15
    2d22:	0a c0       	rjmp	.+20     	; 0x2d38 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    2d24:	91 50       	subi	r25, 0x01	; 1
    2d26:	08 c0       	rjmp	.+16     	; 0x2d38 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    2d28:	13 30       	cpi	r17, 0x03	; 3
    2d2a:	11 f4       	brne	.+4      	; 0x2d30 <getGateways+0x8c>
			curOrient++;
    2d2c:	0f 5f       	subi	r16, 0xFF	; 255
    2d2e:	03 c0       	rjmp	.+6      	; 0x2d36 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    2d30:	11 30       	cpi	r17, 0x01	; 1
    2d32:	11 f4       	brne	.+4      	; 0x2d38 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    2d34:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    2d36:	03 70       	andi	r16, 0x03	; 3
    2d38:	08 94       	sec
    2d3a:	c1 1c       	adc	r12, r1
    2d3c:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2d3e:	8d e0       	ldi	r24, 0x0D	; 13
    2d40:	c8 16       	cp	r12, r24
    2d42:	d1 04       	cpc	r13, r1
    2d44:	29 f6       	brne	.-118    	; 0x2cd0 <getGateways+0x2c>
    2d46:	cc 24       	eor	r12, r12
    2d48:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2d4a:	e4 e0       	ldi	r30, 0x04	; 4
    2d4c:	ee 2e       	mov	r14, r30
    2d4e:	e3 e0       	ldi	r30, 0x03	; 3
    2d50:	fe 2e       	mov	r15, r30
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2d52:	f6 01       	movw	r30, r12
    2d54:	e7 54       	subi	r30, 0x47	; 71
    2d56:	f8 4f       	sbci	r31, 0xF8	; 248
    2d58:	00 81       	ld	r16, Z
		LCD_clear();
    2d5a:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2d5e:	20 2f       	mov	r18, r16
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	ad b7       	in	r26, 0x3d	; 61
    2d64:	be b7       	in	r27, 0x3e	; 62
    2d66:	54 97       	sbiw	r26, 0x14	; 20
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	be bf       	out	0x3e, r27	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	ad bf       	out	0x3d, r26	; 61
    2d72:	ed b7       	in	r30, 0x3d	; 61
    2d74:	fe b7       	in	r31, 0x3e	; 62
    2d76:	31 96       	adiw	r30, 0x01	; 1
    2d78:	12 96       	adiw	r26, 0x02	; 2
    2d7a:	fc 92       	st	X, r15
    2d7c:	ee 92       	st	-X, r14
    2d7e:	11 97       	sbiw	r26, 0x01	; 1
    2d80:	d3 82       	std	Z+3, r13	; 0x03
    2d82:	c2 82       	std	Z+2, r12	; 0x02
    2d84:	11 27       	eor	r17, r17
    2d86:	07 fd       	sbrc	r16, 7
    2d88:	10 95       	com	r17
    2d8a:	00 27       	eor	r16, r16
    2d8c:	11 0f       	add	r17, r17
    2d8e:	00 1f       	adc	r16, r16
    2d90:	11 27       	eor	r17, r17
    2d92:	15 83       	std	Z+5, r17	; 0x05
    2d94:	04 83       	std	Z+4, r16	; 0x04
    2d96:	c9 01       	movw	r24, r18
    2d98:	66 e0       	ldi	r22, 0x06	; 6
    2d9a:	96 95       	lsr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	6a 95       	dec	r22
    2da0:	e1 f7       	brne	.-8      	; 0x2d9a <getGateways+0xf6>
    2da2:	81 70       	andi	r24, 0x01	; 1
    2da4:	90 70       	andi	r25, 0x00	; 0
    2da6:	97 83       	std	Z+7, r25	; 0x07
    2da8:	86 83       	std	Z+6, r24	; 0x06
    2daa:	c9 01       	movw	r24, r18
    2dac:	55 e0       	ldi	r21, 0x05	; 5
    2dae:	96 95       	lsr	r25
    2db0:	87 95       	ror	r24
    2db2:	5a 95       	dec	r21
    2db4:	e1 f7       	brne	.-8      	; 0x2dae <getGateways+0x10a>
    2db6:	81 70       	andi	r24, 0x01	; 1
    2db8:	90 70       	andi	r25, 0x00	; 0
    2dba:	91 87       	std	Z+9, r25	; 0x09
    2dbc:	80 87       	std	Z+8, r24	; 0x08
    2dbe:	c9 01       	movw	r24, r18
    2dc0:	44 e0       	ldi	r20, 0x04	; 4
    2dc2:	96 95       	lsr	r25
    2dc4:	87 95       	ror	r24
    2dc6:	4a 95       	dec	r20
    2dc8:	e1 f7       	brne	.-8      	; 0x2dc2 <getGateways+0x11e>
    2dca:	81 70       	andi	r24, 0x01	; 1
    2dcc:	90 70       	andi	r25, 0x00	; 0
    2dce:	93 87       	std	Z+11, r25	; 0x0b
    2dd0:	82 87       	std	Z+10, r24	; 0x0a
    2dd2:	c9 01       	movw	r24, r18
    2dd4:	03 e0       	ldi	r16, 0x03	; 3
    2dd6:	96 95       	lsr	r25
    2dd8:	87 95       	ror	r24
    2dda:	0a 95       	dec	r16
    2ddc:	e1 f7       	brne	.-8      	; 0x2dd6 <getGateways+0x132>
    2dde:	81 70       	andi	r24, 0x01	; 1
    2de0:	90 70       	andi	r25, 0x00	; 0
    2de2:	95 87       	std	Z+13, r25	; 0x0d
    2de4:	84 87       	std	Z+12, r24	; 0x0c
    2de6:	c9 01       	movw	r24, r18
    2de8:	96 95       	lsr	r25
    2dea:	87 95       	ror	r24
    2dec:	96 95       	lsr	r25
    2dee:	87 95       	ror	r24
    2df0:	81 70       	andi	r24, 0x01	; 1
    2df2:	90 70       	andi	r25, 0x00	; 0
    2df4:	97 87       	std	Z+15, r25	; 0x0f
    2df6:	86 87       	std	Z+14, r24	; 0x0e
    2df8:	c9 01       	movw	r24, r18
    2dfa:	96 95       	lsr	r25
    2dfc:	87 95       	ror	r24
    2dfe:	81 70       	andi	r24, 0x01	; 1
    2e00:	90 70       	andi	r25, 0x00	; 0
    2e02:	91 8b       	std	Z+17, r25	; 0x11
    2e04:	80 8b       	std	Z+16, r24	; 0x10
    2e06:	21 70       	andi	r18, 0x01	; 1
    2e08:	30 70       	andi	r19, 0x00	; 0
    2e0a:	33 8b       	std	Z+19, r19	; 0x13
    2e0c:	22 8b       	std	Z+18, r18	; 0x12
    2e0e:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    2e12:	ed b7       	in	r30, 0x3d	; 61
    2e14:	fe b7       	in	r31, 0x3e	; 62
    2e16:	74 96       	adiw	r30, 0x14	; 20
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	fe bf       	out	0x3e, r31	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	ed bf       	out	0x3d, r30	; 61
    2e22:	88 ee       	ldi	r24, 0xE8	; 232
    2e24:	93 e0       	ldi	r25, 0x03	; 3
    2e26:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
    2e2a:	08 94       	sec
    2e2c:	c1 1c       	adc	r12, r1
    2e2e:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2e30:	fd e0       	ldi	r31, 0x0D	; 13
    2e32:	cf 16       	cp	r12, r31
    2e34:	d1 04       	cpc	r13, r1
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <getGateways+0x196>
    2e38:	8c cf       	rjmp	.-232    	; 0x2d52 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    2e3a:	0f 90       	pop	r0
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	df 90       	pop	r13
    2e4a:	cf 90       	pop	r12
    2e4c:	08 95       	ret

00002e4e <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    2e4e:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    2e50:	10 91 35 07 	lds	r17, 0x0735
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    2e54:	80 91 9e 05 	lds	r24, 0x059E
    2e58:	60 91 33 06 	lds	r22, 0x0633
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    2e62:	e1 2f       	mov	r30, r17
    2e64:	e6 95       	lsr	r30
    2e66:	e6 95       	lsr	r30
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	ee 0f       	add	r30, r30
    2e6c:	ff 1f       	adc	r31, r31
    2e6e:	ee 0f       	add	r30, r30
    2e70:	ff 1f       	adc	r31, r31
    2e72:	13 70       	andi	r17, 0x03	; 3
    2e74:	e1 0f       	add	r30, r17
    2e76:	f1 1d       	adc	r31, r1
    2e78:	eb 5e       	subi	r30, 0xEB	; 235
    2e7a:	fb 4f       	sbci	r31, 0xFB	; 251
    2e7c:	80 83       	st	Z, r24
}
    2e7e:	1f 91       	pop	r17
    2e80:	08 95       	ret

00002e82 <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    2e82:	df 92       	push	r13
    2e84:	ef 92       	push	r14
    2e86:	ff 92       	push	r15
    2e88:	0f 93       	push	r16
    2e8a:	1f 93       	push	r17
    2e8c:	16 2f       	mov	r17, r22
    2e8e:	04 2f       	mov	r16, r20
    2e90:	ff 24       	eor	r15, r15
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	2b c0       	rjmp	.+86     	; 0x2eec <matchBranch+0x6a>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    2e96:	15 30       	cpi	r17, 0x05	; 5
    2e98:	88 f5       	brcc	.+98     	; 0x2efc <matchBranch+0x7a>
    2e9a:	05 30       	cpi	r16, 0x05	; 5
    2e9c:	78 f5       	brcc	.+94     	; 0x2efc <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    2e9e:	ef 2d       	mov	r30, r15
    2ea0:	f0 e0       	ldi	r31, 0x00	; 0
    2ea2:	ef 57       	subi	r30, 0x7F	; 127
    2ea4:	fb 4f       	sbci	r31, 0xFB	; 251
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    2ea6:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    2ea8:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    2eaa:	80 81       	ld	r24, Z
    2eac:	6e 2d       	mov	r22, r14
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    2eb4:	e1 2f       	mov	r30, r17
    2eb6:	f0 e0       	ldi	r31, 0x00	; 0
    2eb8:	ee 0f       	add	r30, r30
    2eba:	ff 1f       	adc	r31, r31
    2ebc:	ee 0f       	add	r30, r30
    2ebe:	ff 1f       	adc	r31, r31
    2ec0:	e0 0f       	add	r30, r16
    2ec2:	f1 1d       	adc	r31, r1
    2ec4:	eb 5e       	subi	r30, 0xEB	; 235
    2ec6:	fb 4f       	sbci	r31, 0xFB	; 251
    2ec8:	90 81       	ld	r25, Z
    2eca:	89 17       	cp	r24, r25
    2ecc:	b9 f4       	brne	.+46     	; 0x2efc <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		curCell = (curRow << 2) + curCol;
    2ece:	11 0f       	add	r17, r17
    2ed0:	11 0f       	add	r17, r17
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		curCell = shiftMap(curCell, curMove, curOrnt);
    2ed2:	81 2f       	mov	r24, r17
    2ed4:	80 0f       	add	r24, r16
    2ed6:	6d 2d       	mov	r22, r13
    2ed8:	4e 2d       	mov	r20, r14
    2eda:	0e 94 13 13 	call	0x2626	; 0x2626 <shiftMap>
    2ede:	98 2f       	mov	r25, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = curCell >> 2;
    2ee0:	18 2f       	mov	r17, r24
    2ee2:	16 95       	lsr	r17
    2ee4:	16 95       	lsr	r17
		curCol = curCell & 0b0011;
    2ee6:	08 2f       	mov	r16, r24
    2ee8:	03 70       	andi	r16, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    2eea:	f3 94       	inc	r15
    2eec:	80 91 90 04 	lds	r24, 0x0490
    2ef0:	f8 16       	cp	r15, r24
    2ef2:	88 f2       	brcs	.-94     	; 0x2e96 <matchBranch+0x14>
		curRow = curCell >> 2;
		curCol = curCell & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	currentCellWorld = curCell;
    2ef4:	90 93 35 07 	sts	0x0735, r25
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <matchBranch+0x7c>
	return SUCCESS;
    2efc:	80 e0       	ldi	r24, 0x00	; 0
}
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	ff 90       	pop	r15
    2f04:	ef 90       	pop	r14
    2f06:	df 90       	pop	r13
    2f08:	08 95       	ret

00002f0a <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    2f0a:	df 92       	push	r13
    2f0c:	ef 92       	push	r14
    2f0e:	ff 92       	push	r15
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    2f18:	d0 90 81 04 	lds	r13, 0x0481
	// Local variables for nested for loops 
	unsigned char row, col;
	// Stores the number of matching seeds
	matchSeeds = 0;
    2f1c:	10 92 cb 07 	sts	0x07CB, r1
    2f20:	00 e0       	ldi	r16, 0x00	; 0
    2f22:	10 e0       	ldi	r17, 0x00	; 0
    2f24:	1a c0       	rjmp	.+52     	; 0x2f5a <localizeGateway+0x50>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    2f26:	88 81       	ld	r24, Y
    2f28:	d8 16       	cp	r13, r24
    2f2a:	69 f4       	brne	.+26     	; 0x2f46 <localizeGateway+0x3c>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    2f2c:	85 e1       	ldi	r24, 0x15	; 21
    2f2e:	94 e0       	ldi	r25, 0x04	; 4
    2f30:	6e 2d       	mov	r22, r14
    2f32:	4f 2d       	mov	r20, r15
    2f34:	0e 94 41 17 	call	0x2e82	; 0x2e82 <matchBranch>
    2f38:	88 23       	and	r24, r24
    2f3a:	29 f0       	breq	.+10     	; 0x2f46 <localizeGateway+0x3c>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    2f3c:	80 91 cb 07 	lds	r24, 0x07CB
    2f40:	8f 5f       	subi	r24, 0xFF	; 255
    2f42:	80 93 cb 07 	sts	0x07CB, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    2f46:	f3 94       	inc	r15
    2f48:	21 96       	adiw	r28, 0x01	; 1
    2f4a:	84 e0       	ldi	r24, 0x04	; 4
    2f4c:	f8 16       	cp	r15, r24
    2f4e:	59 f7       	brne	.-42     	; 0x2f26 <localizeGateway+0x1c>
    2f50:	0f 5f       	subi	r16, 0xFF	; 255
    2f52:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    2f54:	04 30       	cpi	r16, 0x04	; 4
    2f56:	11 05       	cpc	r17, r1
    2f58:	51 f0       	breq	.+20     	; 0x2f6e <localizeGateway+0x64>
    2f5a:	e0 2e       	mov	r14, r16
    2f5c:	e8 01       	movw	r28, r16
    2f5e:	cc 0f       	add	r28, r28
    2f60:	dd 1f       	adc	r29, r29
    2f62:	cc 0f       	add	r28, r28
    2f64:	dd 1f       	adc	r29, r29
    2f66:	cb 5e       	subi	r28, 0xEB	; 235
    2f68:	db 4f       	sbci	r29, 0xFB	; 251
    2f6a:	ff 24       	eor	r15, r15
    2f6c:	dc cf       	rjmp	.-72     	; 0x2f26 <localizeGateway+0x1c>
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	80 91 cb 07 	lds	r24, 0x07CB
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	09 f0       	breq	.+2      	; 0x2f7a <localizeGateway+0x70>
    2f78:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    2f7a:	89 2f       	mov	r24, r25
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	df 90       	pop	r13
    2f8a:	08 95       	ret

00002f8c <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2f8c:	8f 92       	push	r8
    2f8e:	af 92       	push	r10
    2f90:	bf 92       	push	r11
    2f92:	cf 92       	push	r12
    2f94:	df 92       	push	r13
    2f96:	ef 92       	push	r14
    2f98:	ff 92       	push	r15
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
	char isDone = 0;
	pidController(0,RESET);
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
	switch(currentMove){
    2fac:	80 91 c9 07 	lds	r24, 0x07C9
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	69 f0       	breq	.+26     	; 0x2fce <moveMap+0x42>
    2fb4:	83 30       	cpi	r24, 0x03	; 3
    2fb6:	c1 f0       	breq	.+48     	; 0x2fe8 <moveMap+0x5c>
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	d1 f5       	brne	.+116    	; 0x3030 <moveMap+0xa4>
		case MOVE_LEFT:
			move_arc_stwt(POINT_TURN, LEFT_TURN, 30, 30, 0);
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	70 e0       	ldi	r23, 0x00	; 0
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4c e8       	ldi	r20, 0x8C	; 140
    2fca:	51 ec       	ldi	r21, 0xC1	; 193
    2fcc:	15 c0       	rjmp	.+42     	; 0x2ff8 <moveMap+0x6c>
			TMRSRVC_delay(BRAKE_DELAY);
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	86 e9       	ldi	r24, 0x96	; 150
    2fd4:	93 e4       	ldi	r25, 0x43	; 67
    2fd6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <setOdometry>
			while(!isDone){
				checkIR();
    2fda:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <checkIR>
				isDone = moveWall();
    2fde:	0e 94 3f 10 	call	0x207e	; 0x207e <moveWall>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
			while(!isDone){
    2fe2:	88 23       	and	r24, r24
    2fe4:	d1 f3       	breq	.-12     	; 0x2fda <moveMap+0x4e>
    2fe6:	17 c0       	rjmp	.+46     	; 0x3016 <moveMap+0x8a>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			
			// move_arc_stwt(NO_TURN, 45, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 30, 30, 0);
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	4c e8       	ldi	r20, 0x8C	; 140
    2ff6:	51 e4       	ldi	r21, 0x41	; 65
    2ff8:	0f 2e       	mov	r0, r31
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	ef 2e       	mov	r14, r31
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	ff 2e       	mov	r15, r31
    3002:	f0 ef       	ldi	r31, 0xF0	; 240
    3004:	0f 2f       	mov	r16, r31
    3006:	f1 e4       	ldi	r31, 0x41	; 65
    3008:	1f 2f       	mov	r17, r31
    300a:	f0 2d       	mov	r31, r0
    300c:	57 01       	movw	r10, r14
    300e:	68 01       	movw	r12, r16
    3010:	88 24       	eor	r8, r8
    3012:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_ON);
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	61 e0       	ldi	r22, 0x01	; 1
    301a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <STEPPER_stop>
			TMRSRVC_delay(BRAKE_DELAY);
    301e:	82 e3       	ldi	r24, 0x32	; 50
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    3026:	82 e0       	ldi	r24, 0x02	; 2
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <STEPPER_stop>
    302e:	0b c0       	rjmp	.+22     	; 0x3046 <moveMap+0xba>
			break;
		default:
			LCD_printf("Whatz2?!");
    3030:	00 d0       	rcall	.+0      	; 0x3032 <moveMap+0xa6>
    3032:	86 e5       	ldi	r24, 0x56	; 86
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	ed b7       	in	r30, 0x3d	; 61
    3038:	fe b7       	in	r31, 0x3e	; 62
    303a:	92 83       	std	Z+2, r25	; 0x02
    303c:	81 83       	std	Z+1, r24	; 0x01
    303e:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
			break;
	}
}
    3046:	1f 91       	pop	r17
    3048:	0f 91       	pop	r16
    304a:	ff 90       	pop	r15
    304c:	ef 90       	pop	r14
    304e:	df 90       	pop	r13
    3050:	cf 90       	pop	r12
    3052:	bf 90       	pop	r11
    3054:	af 90       	pop	r10
    3056:	8f 90       	pop	r8
    3058:	08 95       	ret

0000305a <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
	// initialize the robot
	initializeRobot();
    3062:	0e 94 87 11 	call	0x230e	; 0x230e <initializeRobot>
	
	// Loop variables for print debug
	// unsigned char i, branch, move, orent;
	
	// Display the map
	LCD_clear();
    3066:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    306a:	86 e2       	ldi	r24, 0x26	; 38
    306c:	93 e0       	ldi	r25, 0x03	; 3
    306e:	0e 94 32 36 	call	0x6c64	; 0x6c64 <puts>
	printMap(RESET);
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    3078:	88 ee       	ldi	r24, 0xE8	; 232
    307a:	93 e0       	ldi	r25, 0x03	; 3
    307c:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
	LCD_clear();
    3080:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
		// LCD_printf("Ornt  ");
		// for(i = 0; i<BRANCH_MAX; i++){
			// orent = localizeGateways[2][i];
			// LCD_printf("%3d", orent);
		// }
		LCD_printf("isLost %1d ",isLost);
    3084:	07 e3       	ldi	r16, 0x37	; 55
    3086:	13 e0       	ldi	r17, 0x03	; 3
		LCD_printf("seeds: %1d", matchSeeds);
    3088:	c3 e4       	ldi	r28, 0x43	; 67
    308a:	d3 e0       	ldi	r29, 0x03	; 3
    308c:	36 c0       	rjmp	.+108    	; 0x30fa <CBOT_main+0xa0>
	
	// Localization Loop 
	while(isLost)
	{	
		//Sense Gateway
		checkIR();	
    308e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <checkIR>
		checkWorld();
    3092:	0e 94 a7 12 	call	0x254e	; 0x254e <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    3096:	0e 94 78 13 	call	0x26f0	; 0x26f0 <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    309a:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <localizeGateway>
    309e:	80 93 14 04 	sts	0x0414, r24
				
		//Print Tree		
		LCD_clear();
    30a2:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
		// LCD_printf("Ornt  ");
		// for(i = 0; i<BRANCH_MAX; i++){
			// orent = localizeGateways[2][i];
			// LCD_printf("%3d", orent);
		// }
		LCD_printf("isLost %1d ",isLost);
    30a6:	00 d0       	rcall	.+0      	; 0x30a8 <CBOT_main+0x4e>
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <CBOT_main+0x50>
    30aa:	ed b7       	in	r30, 0x3d	; 61
    30ac:	fe b7       	in	r31, 0x3e	; 62
    30ae:	31 96       	adiw	r30, 0x01	; 1
    30b0:	ad b7       	in	r26, 0x3d	; 61
    30b2:	be b7       	in	r27, 0x3e	; 62
    30b4:	12 96       	adiw	r26, 0x02	; 2
    30b6:	1c 93       	st	X, r17
    30b8:	0e 93       	st	-X, r16
    30ba:	11 97       	sbiw	r26, 0x01	; 1
    30bc:	80 91 14 04 	lds	r24, 0x0414
    30c0:	82 83       	std	Z+2, r24	; 0x02
    30c2:	13 82       	std	Z+3, r1	; 0x03
    30c4:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
		LCD_printf("seeds: %1d", matchSeeds);
    30c8:	ed b7       	in	r30, 0x3d	; 61
    30ca:	fe b7       	in	r31, 0x3e	; 62
    30cc:	31 96       	adiw	r30, 0x01	; 1
    30ce:	ad b7       	in	r26, 0x3d	; 61
    30d0:	be b7       	in	r27, 0x3e	; 62
    30d2:	12 96       	adiw	r26, 0x02	; 2
    30d4:	dc 93       	st	X, r29
    30d6:	ce 93       	st	-X, r28
    30d8:	11 97       	sbiw	r26, 0x01	; 1
    30da:	80 91 cb 07 	lds	r24, 0x07CB
    30de:	82 83       	std	Z+2, r24	; 0x02
    30e0:	13 82       	std	Z+3, r1	; 0x03
    30e2:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
		
		// TMRSRVC_delay(5000);//wait 5 seconds
		
		//Act on the Gateway
		moveMap();
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <moveMap>
		
		// Break if not isLost
		if(!isLost){
    30f2:	80 91 14 04 	lds	r24, 0x0414
    30f6:	88 23       	and	r24, r24
    30f8:	21 f0       	breq	.+8      	; 0x3102 <CBOT_main+0xa8>
	printMap(RESET);
	TMRSRVC_delay(1000);//wait 1 seconds
	LCD_clear();
	
	// Localization Loop 
	while(isLost)
    30fa:	80 91 14 04 	lds	r24, 0x0414
    30fe:	88 23       	and	r24, r24
    3100:	31 f6       	brne	.-116    	; 0x308e <CBOT_main+0x34>
		if(!isLost){
			break;
		}
	}
	
	SPKR_beep(500);	
    3102:	64 ef       	ldi	r22, 0xF4	; 244
    3104:	71 e0       	ldi	r23, 0x01	; 1
    3106:	80 e0       	ldi	r24, 0x00	; 0
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPKR_beep>
	LCD_clear();
    310e:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
	LCD_printf("LOLZ\nI'm found!");
    3112:	00 d0       	rcall	.+0      	; 0x3114 <CBOT_main+0xba>
    3114:	8e e4       	ldi	r24, 0x4E	; 78
    3116:	93 e0       	ldi	r25, 0x03	; 3
    3118:	ed b7       	in	r30, 0x3d	; 61
    311a:	fe b7       	in	r31, 0x3e	; 62
    311c:	92 83       	std	Z+2, r25	; 0x02
    311e:	81 83       	std	Z+1, r24	; 0x01
    3120:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
	TMRSRVC_delay(3000);//wait 3 seconds
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	88 eb       	ldi	r24, 0xB8	; 184
    312a:	9b e0       	ldi	r25, 0x0B	; 11
    312c:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
	SPKR_beep(0);
    3130:	60 e0       	ldi	r22, 0x00	; 0
    3132:	70 e0       	ldi	r23, 0x00	; 0
    3134:	80 e0       	ldi	r24, 0x00	; 0
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPKR_beep>
	
	LCD_clear();
    313c:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    3140:	86 e2       	ldi	r24, 0x26	; 38
    3142:	93 e0       	ldi	r25, 0x03	; 3
    3144:	0e 94 32 36 	call	0x6c64	; 0x6c64 <puts>
	printMap(RESET);
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <printMap>
	TMRSRVC_delay(5000);//wait 5 seconds
    314e:	88 e8       	ldi	r24, 0x88	; 136
    3150:	93 e1       	ldi	r25, 0x13	; 19
    3152:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
	LCD_clear();
    3156:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
	
	// currentCellWorld = 0b0000;
	currentGoalWorld = 12;
    315a:	8c e0       	ldi	r24, 0x0C	; 12
    315c:	80 93 a4 05 	sts	0x05A4, r24
	
	// Make metric map
	wavefrontMake();
    3160:	0e 94 3c 12 	call	0x2478	; 0x2478 <wavefrontMake>
    3164:	5a c0       	rjmp	.+180    	; 0x321a <CBOT_main+0x1c0>
	
	// Metric Loop 
	while(!isGoal){
	
		LCD_clear();
    3166:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
		switch(currentOrientation){
    316a:	80 91 33 06 	lds	r24, 0x0633
    316e:	81 30       	cpi	r24, 0x01	; 1
    3170:	51 f0       	breq	.+20     	; 0x3186 <CBOT_main+0x12c>
    3172:	81 30       	cpi	r24, 0x01	; 1
    3174:	28 f0       	brcs	.+10     	; 0x3180 <CBOT_main+0x126>
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	49 f0       	breq	.+18     	; 0x318c <CBOT_main+0x132>
    317a:	83 30       	cpi	r24, 0x03	; 3
    317c:	71 f4       	brne	.+28     	; 0x319a <CBOT_main+0x140>
    317e:	09 c0       	rjmp	.+18     	; 0x3192 <CBOT_main+0x138>
			case NORTH:
				LCD_printf("CurtOrent:NORTH\n");
    3180:	8e e5       	ldi	r24, 0x5E	; 94
    3182:	93 e0       	ldi	r25, 0x03	; 3
    3184:	08 c0       	rjmp	.+16     	; 0x3196 <CBOT_main+0x13c>
				break;
			case EAST:
				LCD_printf("CurtOrent:EAST\n");
    3186:	8e e6       	ldi	r24, 0x6E	; 110
    3188:	93 e0       	ldi	r25, 0x03	; 3
    318a:	05 c0       	rjmp	.+10     	; 0x3196 <CBOT_main+0x13c>
				break;
			case SOUTH:
				LCD_printf("CurtOrent:SOUTH\n");
    318c:	8d e7       	ldi	r24, 0x7D	; 125
    318e:	93 e0       	ldi	r25, 0x03	; 3
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <CBOT_main+0x13c>
				break;
			case WEST:
				LCD_printf("CurtOrent:WEST\n");
    3192:	8d e8       	ldi	r24, 0x8D	; 141
    3194:	93 e0       	ldi	r25, 0x03	; 3
    3196:	0e 94 32 36 	call	0x6c64	; 0x6c64 <puts>
			default:
				break;
		}
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    319a:	80 91 35 07 	lds	r24, 0x0735
    319e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <fourNeighborSearch>
    31a2:	80 93 80 04 	sts	0x0480, r24
		if(isGoal){
    31a6:	88 23       	and	r24, r24
    31a8:	e9 f5       	brne	.+122    	; 0x3224 <CBOT_main+0x1ca>
		
		// if(nextOrientation != SOUTH){
			// break;
		// }
				
		switch(nextOrientation){
    31aa:	80 91 34 06 	lds	r24, 0x0634
    31ae:	81 30       	cpi	r24, 0x01	; 1
    31b0:	51 f0       	breq	.+20     	; 0x31c6 <CBOT_main+0x16c>
    31b2:	81 30       	cpi	r24, 0x01	; 1
    31b4:	28 f0       	brcs	.+10     	; 0x31c0 <CBOT_main+0x166>
    31b6:	82 30       	cpi	r24, 0x02	; 2
    31b8:	49 f0       	breq	.+18     	; 0x31cc <CBOT_main+0x172>
    31ba:	83 30       	cpi	r24, 0x03	; 3
    31bc:	71 f4       	brne	.+28     	; 0x31da <CBOT_main+0x180>
    31be:	09 c0       	rjmp	.+18     	; 0x31d2 <CBOT_main+0x178>
			case NORTH:
				LCD_printf("NextOrent:NORTH\n");
    31c0:	8c e9       	ldi	r24, 0x9C	; 156
    31c2:	93 e0       	ldi	r25, 0x03	; 3
    31c4:	08 c0       	rjmp	.+16     	; 0x31d6 <CBOT_main+0x17c>
				break;
			case EAST:
				LCD_printf("NextOrent:EAST\n");
    31c6:	8c ea       	ldi	r24, 0xAC	; 172
    31c8:	93 e0       	ldi	r25, 0x03	; 3
    31ca:	05 c0       	rjmp	.+10     	; 0x31d6 <CBOT_main+0x17c>
				break;
			case SOUTH:
				LCD_printf("NextOrent:SOUTH\n");
    31cc:	8b eb       	ldi	r24, 0xBB	; 187
    31ce:	93 e0       	ldi	r25, 0x03	; 3
    31d0:	02 c0       	rjmp	.+4      	; 0x31d6 <CBOT_main+0x17c>
				break;
			case WEST:
				LCD_printf("NextOrent:WEST\n");
    31d2:	8b ec       	ldi	r24, 0xCB	; 203
    31d4:	93 e0       	ldi	r25, 0x03	; 3
    31d6:	0e 94 32 36 	call	0x6c64	; 0x6c64 <puts>
				break;
			default:
				break;
		}
		
		switch(currentMove){
    31da:	80 91 c9 07 	lds	r24, 0x07C9
    31de:	82 30       	cpi	r24, 0x02	; 2
    31e0:	51 f0       	breq	.+20     	; 0x31f6 <CBOT_main+0x19c>
    31e2:	83 30       	cpi	r24, 0x03	; 3
    31e4:	29 f0       	breq	.+10     	; 0x31f0 <CBOT_main+0x196>
    31e6:	81 30       	cpi	r24, 0x01	; 1
    31e8:	51 f4       	brne	.+20     	; 0x31fe <CBOT_main+0x1a4>
			case MOVE_LEFT:
				LCD_printf("CurMOVE:LEFT\n");
    31ea:	8a ed       	ldi	r24, 0xDA	; 218
    31ec:	93 e0       	ldi	r25, 0x03	; 3
    31ee:	05 c0       	rjmp	.+10     	; 0x31fa <CBOT_main+0x1a0>
				break;
			case MOVE_RIGHT:
				LCD_printf("CurMOVE:RIGHT\n");
    31f0:	87 ee       	ldi	r24, 0xE7	; 231
    31f2:	93 e0       	ldi	r25, 0x03	; 3
    31f4:	02 c0       	rjmp	.+4      	; 0x31fa <CBOT_main+0x1a0>
				break;
			case MOVE_FORWARD:
				LCD_printf("CurMOVE:FORWARD\n");
    31f6:	85 ef       	ldi	r24, 0xF5	; 245
    31f8:	93 e0       	ldi	r25, 0x03	; 3
    31fa:	0e 94 32 36 	call	0x6c64	; 0x6c64 <puts>
			default:
				break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    31fe:	0e 94 b9 13 	call	0x2772	; 0x2772 <planMetric>
		
		// Act on the move
		moveMap();
    3202:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    3206:	80 91 35 07 	lds	r24, 0x0735
    320a:	60 91 c9 07 	lds	r22, 0x07C9
    320e:	40 91 33 06 	lds	r20, 0x0633
    3212:	0e 94 13 13 	call	0x2626	; 0x2626 <shiftMap>
    3216:	80 93 35 07 	sts	0x0735, r24
	
	// Make metric map
	wavefrontMake();
	
	// Metric Loop 
	while(!isGoal){
    321a:	80 91 80 04 	lds	r24, 0x0480
    321e:	88 23       	and	r24, r24
    3220:	09 f4       	brne	.+2      	; 0x3224 <CBOT_main+0x1ca>
    3222:	a1 cf       	rjmp	.-190    	; 0x3166 <CBOT_main+0x10c>
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
		// TMRSRVC_delay(2000);//wait 1 seconds
	}
	
	SPKR_beep(500);	
    3224:	64 ef       	ldi	r22, 0xF4	; 244
    3226:	71 e0       	ldi	r23, 0x01	; 1
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPKR_beep>
	LCD_clear();
    3230:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
	LCD_printf("LOLZ\nI'm here!");
    3234:	00 d0       	rcall	.+0      	; 0x3236 <CBOT_main+0x1dc>
    3236:	85 e0       	ldi	r24, 0x05	; 5
    3238:	94 e0       	ldi	r25, 0x04	; 4
    323a:	ad b7       	in	r26, 0x3d	; 61
    323c:	be b7       	in	r27, 0x3e	; 62
    323e:	12 96       	adiw	r26, 0x02	; 2
    3240:	9c 93       	st	X, r25
    3242:	8e 93       	st	-X, r24
    3244:	11 97       	sbiw	r26, 0x01	; 1
    3246:	0e 94 20 36 	call	0x6c40	; 0x6c40 <printf>
	STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    324a:	0f 90       	pop	r0
    324c:	0f 90       	pop	r0
    324e:	82 e0       	ldi	r24, 0x02	; 2
    3250:	60 e0       	ldi	r22, 0x00	; 0
    3252:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <STEPPER_stop>
	TMRSRVC_delay(5000);//wait 3 seconds
    3256:	88 e8       	ldi	r24, 0x88	; 136
    3258:	93 e1       	ldi	r25, 0x13	; 19
    325a:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
	SPKR_beep(0);	
    325e:	60 e0       	ldi	r22, 0x00	; 0
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPKR_beep>
		// LCD_clear();
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/
}// end the CBOT_main()
    326a:	df 91       	pop	r29
    326c:	cf 91       	pop	r28
    326e:	1f 91       	pop	r17
    3270:	0f 91       	pop	r16
    3272:	08 95       	ret

00003274 <ADC_open>:
    3274:	8f e0       	ldi	r24, 0x0F	; 15
    3276:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    327a:	88 23       	and	r24, r24
    327c:	31 f4       	brne	.+12     	; 0x328a <ADC_open+0x16>
    327e:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <__ADC_init>
    3282:	8f e0       	ldi	r24, 0x0F	; 15
    3284:	61 e0       	ldi	r22, 0x01	; 1
    3286:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    328a:	8f e0       	ldi	r24, 0x0F	; 15
    328c:	91 e0       	ldi	r25, 0x01	; 1
    328e:	08 95       	ret

00003290 <ADC_sample>:
    3290:	8f e0       	ldi	r24, 0x0F	; 15
    3292:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    3296:	81 30       	cpi	r24, 0x01	; 1
    3298:	19 f0       	breq	.+6      	; 0x32a0 <ADC_sample+0x10>
    329a:	20 e0       	ldi	r18, 0x00	; 0
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	13 c0       	rjmp	.+38     	; 0x32c6 <ADC_sample+0x36>
    32a0:	80 91 7a 00 	lds	r24, 0x007A
    32a4:	80 64       	ori	r24, 0x40	; 64
    32a6:	80 93 7a 00 	sts	0x007A, r24
    32aa:	80 91 7a 00 	lds	r24, 0x007A
    32ae:	86 fd       	sbrc	r24, 6
    32b0:	fc cf       	rjmp	.-8      	; 0x32aa <ADC_sample+0x1a>
    32b2:	30 91 78 00 	lds	r19, 0x0078
    32b6:	20 91 79 00 	lds	r18, 0x0079
    32ba:	92 2f       	mov	r25, r18
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	23 2f       	mov	r18, r19
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	28 2b       	or	r18, r24
    32c4:	39 2b       	or	r19, r25
    32c6:	c9 01       	movw	r24, r18
    32c8:	08 95       	ret

000032ca <ADC_set_channel>:
    32ca:	58 2f       	mov	r21, r24
    32cc:	80 91 25 04 	lds	r24, 0x0425
    32d0:	88 30       	cpi	r24, 0x08	; 8
    32d2:	d8 f4       	brcc	.+54     	; 0x330a <ADC_set_channel+0x40>
    32d4:	40 91 7e 00 	lds	r20, 0x007E
    32d8:	21 e0       	ldi	r18, 0x01	; 1
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	b9 01       	movw	r22, r18
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <ADC_set_channel+0x1a>
    32e0:	66 0f       	add	r22, r22
    32e2:	77 1f       	adc	r23, r23
    32e4:	8a 95       	dec	r24
    32e6:	e2 f7       	brpl	.-8      	; 0x32e0 <ADC_set_channel+0x16>
    32e8:	cb 01       	movw	r24, r22
    32ea:	80 95       	com	r24
    32ec:	84 23       	and	r24, r20
    32ee:	80 93 7e 00 	sts	0x007E, r24
    32f2:	80 91 7e 00 	lds	r24, 0x007E
    32f6:	05 2e       	mov	r0, r21
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <ADC_set_channel+0x34>
    32fa:	22 0f       	add	r18, r18
    32fc:	33 1f       	adc	r19, r19
    32fe:	0a 94       	dec	r0
    3300:	e2 f7       	brpl	.-8      	; 0x32fa <ADC_set_channel+0x30>
    3302:	82 2b       	or	r24, r18
    3304:	80 93 7e 00 	sts	0x007E, r24
    3308:	0d c0       	rjmp	.+26     	; 0x3324 <ADC_set_channel+0x5a>
    330a:	20 91 7e 00 	lds	r18, 0x007E
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	05 2e       	mov	r0, r21
    3314:	02 c0       	rjmp	.+4      	; 0x331a <ADC_set_channel+0x50>
    3316:	88 0f       	add	r24, r24
    3318:	99 1f       	adc	r25, r25
    331a:	0a 94       	dec	r0
    331c:	e2 f7       	brpl	.-8      	; 0x3316 <ADC_set_channel+0x4c>
    331e:	28 2b       	or	r18, r24
    3320:	20 93 7e 00 	sts	0x007E, r18
    3324:	50 93 25 04 	sts	0x0425, r21
    3328:	80 91 7c 00 	lds	r24, 0x007C
    332c:	5f 71       	andi	r21, 0x1F	; 31
    332e:	80 7e       	andi	r24, 0xE0	; 224
    3330:	85 2b       	or	r24, r21
    3332:	80 93 7c 00 	sts	0x007C, r24
    3336:	08 95       	ret

00003338 <ADC_set_VREF>:
    3338:	ec e7       	ldi	r30, 0x7C	; 124
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	90 81       	ld	r25, Z
    333e:	82 95       	swap	r24
    3340:	88 0f       	add	r24, r24
    3342:	88 0f       	add	r24, r24
    3344:	80 7c       	andi	r24, 0xC0	; 192
    3346:	9f 73       	andi	r25, 0x3F	; 63
    3348:	98 2b       	or	r25, r24
    334a:	90 83       	st	Z, r25
    334c:	08 95       	ret

0000334e <main>:
    334e:	0e 94 ed 21 	call	0x43da	; 0x43da <CBOT_ISR_init>
    3352:	0e 94 df 21 	call	0x43be	; 0x43be <CBOT_init>
    3356:	0e 94 2d 18 	call	0x305a	; 0x305a <CBOT_main>
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	08 95       	ret

00003360 <LCD_clear>:
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	80 e4       	ldi	r24, 0x40	; 64
    3366:	60 e0       	ldi	r22, 0x00	; 0
    3368:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    336c:	00 e0       	ldi	r16, 0x00	; 0
    336e:	80 2f       	mov	r24, r16
    3370:	60 e0       	ldi	r22, 0x00	; 0
    3372:	0e 94 76 1a 	call	0x34ec	; 0x34ec <LCD_set_PGC_addr>
    3376:	10 e0       	ldi	r17, 0x00	; 0
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	61 e0       	ldi	r22, 0x01	; 1
    337c:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3380:	1f 5f       	subi	r17, 0xFF	; 255
    3382:	10 38       	cpi	r17, 0x80	; 128
    3384:	c9 f7       	brne	.-14     	; 0x3378 <LCD_clear+0x18>
    3386:	0f 5f       	subi	r16, 0xFF	; 255
    3388:	04 30       	cpi	r16, 0x04	; 4
    338a:	89 f7       	brne	.-30     	; 0x336e <LCD_clear+0xe>
    338c:	83 e0       	ldi	r24, 0x03	; 3
    338e:	60 e0       	ldi	r22, 0x00	; 0
    3390:	0e 94 6f 1a 	call	0x34de	; 0x34de <LCD_set_next_PGC>
    3394:	1f 91       	pop	r17
    3396:	0f 91       	pop	r16
    3398:	08 95       	ret

0000339a <LCD_open>:
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	82 e0       	ldi	r24, 0x02	; 2
    33a0:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    33a4:	88 23       	and	r24, r24
    33a6:	11 f4       	brne	.+4      	; 0x33ac <LCD_open+0x12>
    33a8:	82 e0       	ldi	r24, 0x02	; 2
    33aa:	06 c0       	rjmp	.+12     	; 0x33b8 <LCD_open+0x1e>
    33ac:	81 e0       	ldi	r24, 0x01	; 1
    33ae:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    33b2:	88 23       	and	r24, r24
    33b4:	19 f4       	brne	.+6      	; 0x33bc <LCD_open+0x22>
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	6d c0       	rjmp	.+218    	; 0x3496 <LCD_open+0xfc>
    33bc:	0e 94 55 24 	call	0x48aa	; 0x48aa <__LCD_init>
    33c0:	85 e0       	ldi	r24, 0x05	; 5
    33c2:	61 e0       	ldi	r22, 0x01	; 1
    33c4:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    33c8:	8e ea       	ldi	r24, 0xAE	; 174
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    33d0:	82 ea       	ldi	r24, 0xA2	; 162
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    33d8:	80 ea       	ldi	r24, 0xA0	; 160
    33da:	60 e0       	ldi	r22, 0x00	; 0
    33dc:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    33e0:	00 e5       	ldi	r16, 0x50	; 80
    33e2:	13 ec       	ldi	r17, 0xC3	; 195
    33e4:	c8 01       	movw	r24, r16
    33e6:	01 97       	sbiw	r24, 0x01	; 1
    33e8:	f1 f7       	brne	.-4      	; 0x33e6 <LCD_open+0x4c>
    33ea:	80 ec       	ldi	r24, 0xC0	; 192
    33ec:	60 e0       	ldi	r22, 0x00	; 0
    33ee:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    33f2:	8f e2       	ldi	r24, 0x2F	; 47
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    33fa:	81 e8       	ldi	r24, 0x81	; 129
    33fc:	60 e0       	ldi	r22, 0x00	; 0
    33fe:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3402:	86 e1       	ldi	r24, 0x16	; 22
    3404:	60 e0       	ldi	r22, 0x00	; 0
    3406:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    340a:	82 e2       	ldi	r24, 0x22	; 34
    340c:	60 e0       	ldi	r22, 0x00	; 0
    340e:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3412:	c8 01       	movw	r24, r16
    3414:	01 97       	sbiw	r24, 0x01	; 1
    3416:	f1 f7       	brne	.-4      	; 0x3414 <LCD_open+0x7a>
    3418:	8f ea       	ldi	r24, 0xAF	; 175
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3420:	86 ea       	ldi	r24, 0xA6	; 166
    3422:	60 e0       	ldi	r22, 0x00	; 0
    3424:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3428:	85 ea       	ldi	r24, 0xA5	; 165
    342a:	60 e0       	ldi	r22, 0x00	; 0
    342c:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3430:	80 e0       	ldi	r24, 0x00	; 0
    3432:	90 e0       	ldi	r25, 0x00	; 0
    3434:	28 e8       	ldi	r18, 0x88	; 136
    3436:	33 e1       	ldi	r19, 0x13	; 19
    3438:	f9 01       	movw	r30, r18
    343a:	31 97       	sbiw	r30, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <LCD_open+0xa0>
    343e:	01 96       	adiw	r24, 0x01	; 1
    3440:	43 e0       	ldi	r20, 0x03	; 3
    3442:	88 3e       	cpi	r24, 0xE8	; 232
    3444:	94 07       	cpc	r25, r20
    3446:	c1 f7       	brne	.-16     	; 0x3438 <LCD_open+0x9e>
    3448:	83 eb       	ldi	r24, 0xB3	; 179
    344a:	60 e0       	ldi	r22, 0x00	; 0
    344c:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3450:	80 e4       	ldi	r24, 0x40	; 64
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3458:	83 e0       	ldi	r24, 0x03	; 3
    345a:	60 e0       	ldi	r22, 0x00	; 0
    345c:	0e 94 76 1a 	call	0x34ec	; 0x34ec <LCD_set_PGC_addr>
    3460:	83 e0       	ldi	r24, 0x03	; 3
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	0e 94 6f 1a 	call	0x34de	; 0x34de <LCD_set_next_PGC>
    3468:	10 92 1b 08 	sts	0x081B, r1
    346c:	10 92 1d 08 	sts	0x081D, r1
    3470:	10 92 1c 08 	sts	0x081C, r1
    3474:	8c e6       	ldi	r24, 0x6C	; 108
    3476:	94 e0       	ldi	r25, 0x04	; 4
    3478:	90 93 4c 08 	sts	0x084C, r25
    347c:	80 93 4b 08 	sts	0x084B, r24
    3480:	88 e1       	ldi	r24, 0x18	; 24
    3482:	0e 94 4e 1a 	call	0x349c	; 0x349c <LCD_set_backlight>
    3486:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
    348a:	84 ea       	ldi	r24, 0xA4	; 164
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3492:	85 e0       	ldi	r24, 0x05	; 5
    3494:	91 e0       	ldi	r25, 0x01	; 1
    3496:	1f 91       	pop	r17
    3498:	0f 91       	pop	r16
    349a:	08 95       	ret

0000349c <LCD_set_backlight>:
    349c:	1f 93       	push	r17
    349e:	18 2f       	mov	r17, r24
    34a0:	85 e0       	ldi	r24, 0x05	; 5
    34a2:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    34a6:	81 30       	cpi	r24, 0x01	; 1
    34a8:	c1 f4       	brne	.+48     	; 0x34da <LCD_set_backlight+0x3e>
    34aa:	87 e0       	ldi	r24, 0x07	; 7
    34ac:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SPI_set_slave_addr>
    34b0:	82 e0       	ldi	r24, 0x02	; 2
    34b2:	6a e0       	ldi	r22, 0x0A	; 10
    34b4:	0e 94 1c 1b 	call	0x3638	; 0x3638 <SPI_transmit>
    34b8:	82 e0       	ldi	r24, 0x02	; 2
    34ba:	61 eb       	ldi	r22, 0xB1	; 177
    34bc:	0e 94 1c 1b 	call	0x3638	; 0x3638 <SPI_transmit>
    34c0:	61 2f       	mov	r22, r17
    34c2:	11 32       	cpi	r17, 0x21	; 33
    34c4:	08 f0       	brcs	.+2      	; 0x34c8 <LCD_set_backlight+0x2c>
    34c6:	60 e2       	ldi	r22, 0x20	; 32
    34c8:	82 e0       	ldi	r24, 0x02	; 2
    34ca:	0e 94 1c 1b 	call	0x3638	; 0x3638 <SPI_transmit>
    34ce:	89 ee       	ldi	r24, 0xE9	; 233
    34d0:	8a 95       	dec	r24
    34d2:	f1 f7       	brne	.-4      	; 0x34d0 <LCD_set_backlight+0x34>
    34d4:	87 e0       	ldi	r24, 0x07	; 7
    34d6:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SPI_set_slave_addr>
    34da:	1f 91       	pop	r17
    34dc:	08 95       	ret

000034de <LCD_set_next_PGC>:
    34de:	83 70       	andi	r24, 0x03	; 3
    34e0:	6f 77       	andi	r22, 0x7F	; 127
    34e2:	60 93 19 08 	sts	0x0819, r22
    34e6:	80 93 1a 08 	sts	0x081A, r24
    34ea:	08 95       	ret

000034ec <LCD_set_PGC_addr>:
    34ec:	0f 93       	push	r16
    34ee:	1f 93       	push	r17
    34f0:	06 2f       	mov	r16, r22
    34f2:	16 2f       	mov	r17, r22
    34f4:	1f 77       	andi	r17, 0x7F	; 127
    34f6:	83 70       	andi	r24, 0x03	; 3
    34f8:	80 6b       	ori	r24, 0xB0	; 176
    34fa:	60 e0       	ldi	r22, 0x00	; 0
    34fc:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3500:	12 95       	swap	r17
    3502:	1f 70       	andi	r17, 0x0F	; 15
    3504:	81 2f       	mov	r24, r17
    3506:	80 61       	ori	r24, 0x10	; 16
    3508:	60 e0       	ldi	r22, 0x00	; 0
    350a:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    350e:	80 2f       	mov	r24, r16
    3510:	8f 70       	andi	r24, 0x0F	; 15
    3512:	60 e0       	ldi	r22, 0x00	; 0
    3514:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	08 95       	ret

0000351e <LCD_write>:
    351e:	0f 93       	push	r16
    3520:	1f 93       	push	r17
    3522:	08 2f       	mov	r16, r24
    3524:	16 2f       	mov	r17, r22
    3526:	85 e0       	ldi	r24, 0x05	; 5
    3528:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	79 f4       	brne	.+30     	; 0x354e <LCD_write+0x30>
    3530:	11 23       	and	r17, r17
    3532:	19 f0       	breq	.+6      	; 0x353a <LCD_write+0x1c>
    3534:	11 30       	cpi	r17, 0x01	; 1
    3536:	21 f4       	brne	.+8      	; 0x3540 <LCD_write+0x22>
    3538:	02 c0       	rjmp	.+4      	; 0x353e <LCD_write+0x20>
    353a:	2b 98       	cbi	0x05, 3	; 5
    353c:	01 c0       	rjmp	.+2      	; 0x3540 <LCD_write+0x22>
    353e:	2b 9a       	sbi	0x05, 3	; 5
    3540:	86 e0       	ldi	r24, 0x06	; 6
    3542:	8a 95       	dec	r24
    3544:	f1 f7       	brne	.-4      	; 0x3542 <LCD_write+0x24>
    3546:	80 e0       	ldi	r24, 0x00	; 0
    3548:	60 2f       	mov	r22, r16
    354a:	0e 94 1c 1b 	call	0x3638	; 0x3638 <SPI_transmit>
    354e:	1f 91       	pop	r17
    3550:	0f 91       	pop	r16
    3552:	08 95       	ret

00003554 <LED_clr_pattern>:
    3554:	1f 93       	push	r17
    3556:	18 2f       	mov	r17, r24
    3558:	86 e0       	ldi	r24, 0x06	; 6
    355a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    355e:	81 30       	cpi	r24, 0x01	; 1
    3560:	19 f4       	brne	.+6      	; 0x3568 <LED_clr_pattern+0x14>
    3562:	81 2f       	mov	r24, r17
    3564:	0e 94 04 25 	call	0x4a08	; 0x4a08 <__LED_clr_pattern>
    3568:	1f 91       	pop	r17
    356a:	08 95       	ret

0000356c <LED_open>:
    356c:	0e 94 09 25 	call	0x4a12	; 0x4a12 <__LED_init>
    3570:	86 e0       	ldi	r24, 0x06	; 6
    3572:	61 e0       	ldi	r22, 0x01	; 1
    3574:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    3578:	86 e0       	ldi	r24, 0x06	; 6
    357a:	91 e0       	ldi	r25, 0x01	; 1
    357c:	08 95       	ret

0000357e <LED_set_pattern>:
    357e:	1f 93       	push	r17
    3580:	18 2f       	mov	r17, r24
    3582:	86 e0       	ldi	r24, 0x06	; 6
    3584:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    3588:	81 30       	cpi	r24, 0x01	; 1
    358a:	19 f4       	brne	.+6      	; 0x3592 <LED_set_pattern+0x14>
    358c:	81 2f       	mov	r24, r17
    358e:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <__LED_set_pattern>
    3592:	1f 91       	pop	r17
    3594:	08 95       	ret

00003596 <SPI_set_slave_addr>:
    3596:	1f 93       	push	r17
    3598:	18 2f       	mov	r17, r24
    359a:	82 e0       	ldi	r24, 0x02	; 2
    359c:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    35a0:	81 30       	cpi	r24, 0x01	; 1
    35a2:	09 f0       	breq	.+2      	; 0x35a6 <SPI_set_slave_addr+0x10>
    35a4:	47 c0       	rjmp	.+142    	; 0x3634 <SPI_set_slave_addr+0x9e>
    35a6:	91 2f       	mov	r25, r17
    35a8:	97 70       	andi	r25, 0x07	; 7
    35aa:	80 91 1e 08 	lds	r24, 0x081E
    35ae:	98 17       	cp	r25, r24
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <SPI_set_slave_addr+0x1e>
    35b2:	40 c0       	rjmp	.+128    	; 0x3634 <SPI_set_slave_addr+0x9e>
    35b4:	90 93 1e 08 	sts	0x081E, r25
    35b8:	85 b1       	in	r24, 0x05	; 5
    35ba:	88 7f       	andi	r24, 0xF8	; 248
    35bc:	89 2b       	or	r24, r25
    35be:	85 b9       	out	0x05, r24	; 5
    35c0:	93 30       	cpi	r25, 0x03	; 3
    35c2:	11 f1       	breq	.+68     	; 0x3608 <SPI_set_slave_addr+0x72>
    35c4:	94 30       	cpi	r25, 0x04	; 4
    35c6:	28 f4       	brcc	.+10     	; 0x35d2 <SPI_set_slave_addr+0x3c>
    35c8:	91 30       	cpi	r25, 0x01	; 1
    35ca:	51 f0       	breq	.+20     	; 0x35e0 <SPI_set_slave_addr+0x4a>
    35cc:	92 30       	cpi	r25, 0x02	; 2
    35ce:	90 f4       	brcc	.+36     	; 0x35f4 <SPI_set_slave_addr+0x5e>
    35d0:	0c c0       	rjmp	.+24     	; 0x35ea <SPI_set_slave_addr+0x54>
    35d2:	95 30       	cpi	r25, 0x05	; 5
    35d4:	19 f1       	breq	.+70     	; 0x361c <SPI_set_slave_addr+0x86>
    35d6:	95 30       	cpi	r25, 0x05	; 5
    35d8:	e0 f0       	brcs	.+56     	; 0x3612 <SPI_set_slave_addr+0x7c>
    35da:	96 30       	cpi	r25, 0x06	; 6
    35dc:	21 f5       	brne	.+72     	; 0x3626 <SPI_set_slave_addr+0x90>
    35de:	0f c0       	rjmp	.+30     	; 0x35fe <SPI_set_slave_addr+0x68>
    35e0:	e0 91 03 05 	lds	r30, 0x0503
    35e4:	f0 91 04 05 	lds	r31, 0x0504
    35e8:	22 c0       	rjmp	.+68     	; 0x362e <SPI_set_slave_addr+0x98>
    35ea:	e0 91 01 05 	lds	r30, 0x0501
    35ee:	f0 91 02 05 	lds	r31, 0x0502
    35f2:	1d c0       	rjmp	.+58     	; 0x362e <SPI_set_slave_addr+0x98>
    35f4:	e0 91 05 05 	lds	r30, 0x0505
    35f8:	f0 91 06 05 	lds	r31, 0x0506
    35fc:	18 c0       	rjmp	.+48     	; 0x362e <SPI_set_slave_addr+0x98>
    35fe:	e0 91 0d 05 	lds	r30, 0x050D
    3602:	f0 91 0e 05 	lds	r31, 0x050E
    3606:	13 c0       	rjmp	.+38     	; 0x362e <SPI_set_slave_addr+0x98>
    3608:	e0 91 07 05 	lds	r30, 0x0507
    360c:	f0 91 08 05 	lds	r31, 0x0508
    3610:	0e c0       	rjmp	.+28     	; 0x362e <SPI_set_slave_addr+0x98>
    3612:	e0 91 09 05 	lds	r30, 0x0509
    3616:	f0 91 0a 05 	lds	r31, 0x050A
    361a:	09 c0       	rjmp	.+18     	; 0x362e <SPI_set_slave_addr+0x98>
    361c:	e0 91 0b 05 	lds	r30, 0x050B
    3620:	f0 91 0c 05 	lds	r31, 0x050C
    3624:	04 c0       	rjmp	.+8      	; 0x362e <SPI_set_slave_addr+0x98>
    3626:	e0 91 0f 05 	lds	r30, 0x050F
    362a:	f0 91 10 05 	lds	r31, 0x0510
    362e:	30 97       	sbiw	r30, 0x00	; 0
    3630:	09 f0       	breq	.+2      	; 0x3634 <SPI_set_slave_addr+0x9e>
    3632:	09 95       	icall
    3634:	1f 91       	pop	r17
    3636:	08 95       	ret

00003638 <SPI_transmit>:
    3638:	1f 93       	push	r17
    363a:	16 2f       	mov	r17, r22
    363c:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SPI_set_slave_addr>
    3640:	82 e0       	ldi	r24, 0x02	; 2
    3642:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    3646:	81 30       	cpi	r24, 0x01	; 1
    3648:	21 f4       	brne	.+8      	; 0x3652 <SPI_transmit+0x1a>
    364a:	1e bd       	out	0x2e, r17	; 46
    364c:	0d b4       	in	r0, 0x2d	; 45
    364e:	07 fe       	sbrs	r0, 7
    3650:	fd cf       	rjmp	.-6      	; 0x364c <SPI_transmit+0x14>
    3652:	1f 91       	pop	r17
    3654:	08 95       	ret

00003656 <SPKR_beep>:
    3656:	9b 01       	movw	r18, r22
    3658:	ac 01       	movw	r20, r24
    365a:	80 91 a2 04 	lds	r24, 0x04A2
    365e:	88 23       	and	r24, r24
    3660:	81 f0       	breq	.+32     	; 0x3682 <SPKR_beep+0x2c>
    3662:	da 01       	movw	r26, r20
    3664:	c9 01       	movw	r24, r18
    3666:	88 0f       	add	r24, r24
    3668:	99 1f       	adc	r25, r25
    366a:	aa 1f       	adc	r26, r26
    366c:	bb 1f       	adc	r27, r27
    366e:	90 93 ae 04 	sts	0x04AE, r25
    3672:	80 93 ad 04 	sts	0x04AD, r24
    3676:	21 15       	cp	r18, r1
    3678:	31 05       	cpc	r19, r1
    367a:	41 05       	cpc	r20, r1
    367c:	51 05       	cpc	r21, r1
    367e:	09 f4       	brne	.+2      	; 0x3682 <SPKR_beep+0x2c>
    3680:	5f 98       	cbi	0x0b, 7	; 11
    3682:	08 95       	ret

00003684 <__SPKR_set_up_freq_LUT>:
    3684:	0f 93       	push	r16
    3686:	1f 93       	push	r17
    3688:	cf 93       	push	r28
    368a:	df 93       	push	r29
    368c:	80 e2       	ldi	r24, 0x20	; 32
    368e:	91 e0       	ldi	r25, 0x01	; 1
    3690:	0e 94 01 34 	call	0x6802	; 0x6802 <malloc>
    3694:	9c 01       	movw	r18, r24
    3696:	90 93 b0 04 	sts	0x04B0, r25
    369a:	80 93 af 04 	sts	0x04AF, r24
    369e:	89 2b       	or	r24, r25
    36a0:	11 f4       	brne	.+4      	; 0x36a6 <__SPKR_set_up_freq_LUT+0x22>
    36a2:	80 e0       	ldi	r24, 0x00	; 0
    36a4:	39 c0       	rjmp	.+114    	; 0x3718 <__SPKR_set_up_freq_LUT+0x94>
    36a6:	89 01       	movw	r16, r18
    36a8:	c0 e0       	ldi	r28, 0x00	; 0
    36aa:	d0 e0       	ldi	r29, 0x00	; 0
    36ac:	be 01       	movw	r22, r28
    36ae:	80 e0       	ldi	r24, 0x00	; 0
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <__floatunsisf>
    36b6:	20 e0       	ldi	r18, 0x00	; 0
    36b8:	30 e0       	ldi	r19, 0x00	; 0
    36ba:	40 ea       	ldi	r20, 0xA0	; 160
    36bc:	51 e4       	ldi	r21, 0x41	; 65
    36be:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__divsf3>
    36c2:	27 ef       	ldi	r18, 0xF7	; 247
    36c4:	35 e7       	ldi	r19, 0x75	; 117
    36c6:	40 e0       	ldi	r20, 0x00	; 0
    36c8:	5f e3       	ldi	r21, 0x3F	; 63
    36ca:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    36ce:	9b 01       	movw	r18, r22
    36d0:	ac 01       	movw	r20, r24
    36d2:	60 e0       	ldi	r22, 0x00	; 0
    36d4:	70 e0       	ldi	r23, 0x00	; 0
    36d6:	80 e2       	ldi	r24, 0x20	; 32
    36d8:	91 e4       	ldi	r25, 0x41	; 65
    36da:	0e 94 bc 2e 	call	0x5d78	; 0x5d78 <pow>
    36de:	9b 01       	movw	r18, r22
    36e0:	ac 01       	movw	r20, r24
    36e2:	ca 01       	movw	r24, r20
    36e4:	b9 01       	movw	r22, r18
    36e6:	2d ec       	ldi	r18, 0xCD	; 205
    36e8:	3c ec       	ldi	r19, 0xCC	; 204
    36ea:	42 e8       	ldi	r20, 0x82	; 130
    36ec:	51 e4       	ldi	r21, 0x41	; 65
    36ee:	0e 94 59 2e 	call	0x5cb2	; 0x5cb2 <__mulsf3>
    36f2:	0e 94 1f 2e 	call	0x5c3e	; 0x5c3e <lrint>
    36f6:	2a e0       	ldi	r18, 0x0A	; 10
    36f8:	30 e0       	ldi	r19, 0x00	; 0
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	0e 94 89 33 	call	0x6712	; 0x6712 <__mulsi3>
    3702:	f8 01       	movw	r30, r16
    3704:	61 93       	st	Z+, r22
    3706:	71 93       	st	Z+, r23
    3708:	81 93       	st	Z+, r24
    370a:	91 93       	st	Z+, r25
    370c:	8f 01       	movw	r16, r30
    370e:	21 96       	adiw	r28, 0x01	; 1
    3710:	c8 34       	cpi	r28, 0x48	; 72
    3712:	d1 05       	cpc	r29, r1
    3714:	59 f6       	brne	.-106    	; 0x36ac <__SPKR_set_up_freq_LUT+0x28>
    3716:	81 e0       	ldi	r24, 0x01	; 1
    3718:	df 91       	pop	r29
    371a:	cf 91       	pop	r28
    371c:	1f 91       	pop	r17
    371e:	0f 91       	pop	r16
    3720:	08 95       	ret

00003722 <__SPKR_open_beep_mode>:
    3722:	8a e0       	ldi	r24, 0x0A	; 10
    3724:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    3728:	88 23       	and	r24, r24
    372a:	71 f4       	brne	.+28     	; 0x3748 <__SPKR_open_beep_mode+0x26>
    372c:	10 92 ac 04 	sts	0x04AC, r1
    3730:	10 92 ab 04 	sts	0x04AB, r1
    3734:	81 e0       	ldi	r24, 0x01	; 1
    3736:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__SPKR_init>
    373a:	81 e0       	ldi	r24, 0x01	; 1
    373c:	80 93 a2 04 	sts	0x04A2, r24
    3740:	8a e0       	ldi	r24, 0x0A	; 10
    3742:	61 e0       	ldi	r22, 0x01	; 1
    3744:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    3748:	8a e0       	ldi	r24, 0x0A	; 10
    374a:	91 e0       	ldi	r25, 0x01	; 1
    374c:	08 95       	ret

0000374e <__SPKR_open_tone_mode>:
    374e:	1f 93       	push	r17
    3750:	8b e0       	ldi	r24, 0x0B	; 11
    3752:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    3756:	88 23       	and	r24, r24
    3758:	11 f0       	breq	.+4      	; 0x375e <__SPKR_open_tone_mode+0x10>
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	21 c0       	rjmp	.+66     	; 0x37a0 <__SPKR_open_tone_mode+0x52>
    375e:	89 e0       	ldi	r24, 0x09	; 9
    3760:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    3764:	88 23       	and	r24, r24
    3766:	d9 f4       	brne	.+54     	; 0x379e <__SPKR_open_tone_mode+0x50>
    3768:	0e 94 42 1b 	call	0x3684	; 0x3684 <__SPKR_set_up_freq_LUT>
    376c:	18 2f       	mov	r17, r24
    376e:	81 30       	cpi	r24, 0x01	; 1
    3770:	b1 f4       	brne	.+44     	; 0x379e <__SPKR_open_tone_mode+0x50>
    3772:	10 92 a3 04 	sts	0x04A3, r1
    3776:	10 92 a4 04 	sts	0x04A4, r1
    377a:	10 92 a5 04 	sts	0x04A5, r1
    377e:	10 92 a6 04 	sts	0x04A6, r1
    3782:	8d e0       	ldi	r24, 0x0D	; 13
    3784:	6a ec       	ldi	r22, 0xCA	; 202
    3786:	75 e2       	ldi	r23, 0x25	; 37
    3788:	0e 94 2d 24 	call	0x485a	; 0x485a <ISR_attach>
    378c:	82 e0       	ldi	r24, 0x02	; 2
    378e:	0e 94 47 26 	call	0x4c8e	; 0x4c8e <__SPKR_init>
    3792:	10 93 a1 04 	sts	0x04A1, r17
    3796:	89 e0       	ldi	r24, 0x09	; 9
    3798:	61 e0       	ldi	r22, 0x01	; 1
    379a:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    379e:	91 e0       	ldi	r25, 0x01	; 1
    37a0:	89 e0       	ldi	r24, 0x09	; 9
    37a2:	1f 91       	pop	r17
    37a4:	08 95       	ret

000037a6 <SPKR_open>:
    37a6:	81 30       	cpi	r24, 0x01	; 1
    37a8:	29 f0       	breq	.+10     	; 0x37b4 <SPKR_open+0xe>
    37aa:	82 30       	cpi	r24, 0x02	; 2
    37ac:	31 f0       	breq	.+12     	; 0x37ba <SPKR_open+0x14>
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	89 e0       	ldi	r24, 0x09	; 9
    37b2:	08 95       	ret
    37b4:	0e 94 91 1b 	call	0x3722	; 0x3722 <__SPKR_open_beep_mode>
    37b8:	08 95       	ret
    37ba:	0e 94 a7 1b 	call	0x374e	; 0x374e <__SPKR_open_tone_mode>
    37be:	08 95       	ret

000037c0 <STEPPER_get_nSteps>:
    37c0:	80 91 df 07 	lds	r24, 0x07DF
    37c4:	90 91 e0 07 	lds	r25, 0x07E0
    37c8:	20 91 e1 07 	lds	r18, 0x07E1
    37cc:	30 91 e2 07 	lds	r19, 0x07E2
    37d0:	bc 01       	movw	r22, r24
    37d2:	c9 01       	movw	r24, r18
    37d4:	08 95       	ret

000037d6 <STEPPER_stepmode>:
    37d6:	2f 92       	push	r2
    37d8:	3f 92       	push	r3
    37da:	4f 92       	push	r4
    37dc:	5f 92       	push	r5
    37de:	6f 92       	push	r6
    37e0:	7f 92       	push	r7
    37e2:	8f 92       	push	r8
    37e4:	9f 92       	push	r9
    37e6:	af 92       	push	r10
    37e8:	bf 92       	push	r11
    37ea:	cf 92       	push	r12
    37ec:	df 92       	push	r13
    37ee:	ef 92       	push	r14
    37f0:	ff 92       	push	r15
    37f2:	0f 93       	push	r16
    37f4:	1f 93       	push	r17
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    37fe:	58 2e       	mov	r5, r24
    3800:	96 2e       	mov	r9, r22
    3802:	44 2e       	mov	r4, r20
    3804:	39 01       	movw	r6, r18
    3806:	3c 2c       	mov	r3, r12
    3808:	c9 8c       	ldd	r12, Y+25	; 0x19
    380a:	da 8c       	ldd	r13, Y+26	; 0x1a
    380c:	2b 8c       	ldd	r2, Y+27	; 0x1b
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	68 17       	cp	r22, r24
    3812:	39 f1       	breq	.+78     	; 0x3862 <STEPPER_stepmode+0x8c>
    3814:	68 17       	cp	r22, r24
    3816:	28 f0       	brcs	.+10     	; 0x3822 <STEPPER_stepmode+0x4c>
    3818:	92 e0       	ldi	r25, 0x02	; 2
    381a:	69 17       	cp	r22, r25
    381c:	09 f0       	breq	.+2      	; 0x3820 <STEPPER_stepmode+0x4a>
    381e:	85 c0       	rjmp	.+266    	; 0x392a <STEPPER_stepmode+0x154>
    3820:	49 c0       	rjmp	.+146    	; 0x38b4 <STEPPER_stepmode+0xde>
    3822:	80 e0       	ldi	r24, 0x00	; 0
    3824:	61 e0       	ldi	r22, 0x01	; 1
    3826:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <STEPPER_set_mode>
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	b7 01       	movw	r22, r14
    382e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <STEPPER_set_accel>
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	64 2d       	mov	r22, r4
    3836:	a3 01       	movw	r20, r6
    3838:	98 01       	movw	r18, r16
    383a:	03 2d       	mov	r16, r3
    383c:	ee 24       	eor	r14, r14
    383e:	e3 94       	inc	r14
    3840:	e4 e0       	ldi	r30, 0x04	; 4
    3842:	ce 2e       	mov	r12, r30
    3844:	e8 e0       	ldi	r30, 0x08	; 8
    3846:	de 2e       	mov	r13, r30
    3848:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <STEPPER_step>
    384c:	55 20       	and	r5, r5
    384e:	09 f0       	breq	.+2      	; 0x3852 <STEPPER_stepmode+0x7c>
    3850:	6c c0       	rjmp	.+216    	; 0x392a <STEPPER_stepmode+0x154>
    3852:	00 d0       	rcall	.+0      	; 0x3854 <STEPPER_stepmode+0x7e>
    3854:	0f 92       	push	r0
    3856:	ed b7       	in	r30, 0x3d	; 61
    3858:	fe b7       	in	r31, 0x3e	; 62
    385a:	11 82       	std	Z+1, r1	; 0x01
    385c:	b3 82       	std	Z+3, r11	; 0x03
    385e:	a2 82       	std	Z+2, r10	; 0x02
    3860:	23 c0       	rjmp	.+70     	; 0x38a8 <STEPPER_stepmode+0xd2>
    3862:	81 e0       	ldi	r24, 0x01	; 1
    3864:	61 e0       	ldi	r22, 0x01	; 1
    3866:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <STEPPER_set_mode>
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	b6 01       	movw	r22, r12
    386e:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <STEPPER_set_accel>
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	68 2d       	mov	r22, r8
    3876:	4d 89       	ldd	r20, Y+21	; 0x15
    3878:	5e 89       	ldd	r21, Y+22	; 0x16
    387a:	2f 89       	ldd	r18, Y+23	; 0x17
    387c:	38 8d       	ldd	r19, Y+24	; 0x18
    387e:	02 2d       	mov	r16, r2
    3880:	ee 24       	eor	r14, r14
    3882:	e3 94       	inc	r14
    3884:	74 e0       	ldi	r23, 0x04	; 4
    3886:	c7 2e       	mov	r12, r23
    3888:	78 e0       	ldi	r23, 0x08	; 8
    388a:	d7 2e       	mov	r13, r23
    388c:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <STEPPER_step>
    3890:	55 20       	and	r5, r5
    3892:	09 f0       	breq	.+2      	; 0x3896 <STEPPER_stepmode+0xc0>
    3894:	4a c0       	rjmp	.+148    	; 0x392a <STEPPER_stepmode+0x154>
    3896:	00 d0       	rcall	.+0      	; 0x3898 <STEPPER_stepmode+0xc2>
    3898:	0f 92       	push	r0
    389a:	ed b7       	in	r30, 0x3d	; 61
    389c:	fe b7       	in	r31, 0x3e	; 62
    389e:	91 82       	std	Z+1, r9	; 0x01
    38a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38a4:	93 83       	std	Z+3, r25	; 0x03
    38a6:	82 83       	std	Z+2, r24	; 0x02
    38a8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_wait_and_then>
    38ac:	0f 90       	pop	r0
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	3b c0       	rjmp	.+118    	; 0x392a <STEPPER_stepmode+0x154>
    38b4:	82 e0       	ldi	r24, 0x02	; 2
    38b6:	61 e0       	ldi	r22, 0x01	; 1
    38b8:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <STEPPER_set_mode>
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	b7 01       	movw	r22, r14
    38c0:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <STEPPER_set_accel>
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	b6 01       	movw	r22, r12
    38c8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <STEPPER_set_accel>
    38cc:	80 e0       	ldi	r24, 0x00	; 0
    38ce:	64 2d       	mov	r22, r4
    38d0:	a3 01       	movw	r20, r6
    38d2:	98 01       	movw	r18, r16
    38d4:	03 2d       	mov	r16, r3
    38d6:	ee 24       	eor	r14, r14
    38d8:	e3 94       	inc	r14
    38da:	94 e0       	ldi	r25, 0x04	; 4
    38dc:	c9 2e       	mov	r12, r25
    38de:	98 e0       	ldi	r25, 0x08	; 8
    38e0:	d9 2e       	mov	r13, r25
    38e2:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <STEPPER_step>
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	68 2d       	mov	r22, r8
    38ea:	4d 89       	ldd	r20, Y+21	; 0x15
    38ec:	5e 89       	ldd	r21, Y+22	; 0x16
    38ee:	2f 89       	ldd	r18, Y+23	; 0x17
    38f0:	38 8d       	ldd	r19, Y+24	; 0x18
    38f2:	02 2d       	mov	r16, r2
    38f4:	0e 94 46 1e 	call	0x3c8c	; 0x3c8c <STEPPER_step>
    38f8:	55 20       	and	r5, r5
    38fa:	b9 f4       	brne	.+46     	; 0x392a <STEPPER_stepmode+0x154>
    38fc:	00 d0       	rcall	.+0      	; 0x38fe <STEPPER_stepmode+0x128>
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <STEPPER_stepmode+0x12a>
    3900:	0f 92       	push	r0
    3902:	ad b7       	in	r26, 0x3d	; 61
    3904:	be b7       	in	r27, 0x3e	; 62
    3906:	11 96       	adiw	r26, 0x01	; 1
    3908:	ed b7       	in	r30, 0x3d	; 61
    390a:	fe b7       	in	r31, 0x3e	; 62
    390c:	91 82       	std	Z+1, r9	; 0x01
    390e:	fd 01       	movw	r30, r26
    3910:	b2 82       	std	Z+2, r11	; 0x02
    3912:	a1 82       	std	Z+1, r10	; 0x01
    3914:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3916:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3918:	94 83       	std	Z+4, r25	; 0x04
    391a:	83 83       	std	Z+3, r24	; 0x03
    391c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_wait_and_then>
    3920:	0f 90       	pop	r0
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	cf 91       	pop	r28
    392c:	df 91       	pop	r29
    392e:	1f 91       	pop	r17
    3930:	0f 91       	pop	r16
    3932:	ff 90       	pop	r15
    3934:	ef 90       	pop	r14
    3936:	df 90       	pop	r13
    3938:	cf 90       	pop	r12
    393a:	bf 90       	pop	r11
    393c:	af 90       	pop	r10
    393e:	9f 90       	pop	r9
    3940:	8f 90       	pop	r8
    3942:	7f 90       	pop	r7
    3944:	6f 90       	pop	r6
    3946:	5f 90       	pop	r5
    3948:	4f 90       	pop	r4
    394a:	3f 90       	pop	r3
    394c:	2f 90       	pop	r2
    394e:	08 95       	ret

00003950 <STEPPER_move>:
    3950:	6f 92       	push	r6
    3952:	7f 92       	push	r7
    3954:	8f 92       	push	r8
    3956:	9f 92       	push	r9
    3958:	af 92       	push	r10
    395a:	bf 92       	push	r11
    395c:	cf 92       	push	r12
    395e:	df 92       	push	r13
    3960:	ef 92       	push	r14
    3962:	ff 92       	push	r15
    3964:	0f 93       	push	r16
    3966:	1f 93       	push	r17
    3968:	df 93       	push	r29
    396a:	cf 93       	push	r28
    396c:	cd b7       	in	r28, 0x3d	; 61
    396e:	de b7       	in	r29, 0x3e	; 62
    3970:	94 2e       	mov	r9, r20
    3972:	7c 2d       	mov	r23, r12
    3974:	d5 01       	movw	r26, r10
    3976:	49 89       	ldd	r20, Y+17	; 0x11
    3978:	5a 89       	ldd	r21, Y+18	; 0x12
    397a:	ab 88       	ldd	r10, Y+19	; 0x13
    397c:	bc 88       	ldd	r11, Y+20	; 0x14
    397e:	cd 88       	ldd	r12, Y+21	; 0x15
    3980:	de 88       	ldd	r13, Y+22	; 0x16
    3982:	9f 89       	ldd	r25, Y+23	; 0x17
    3984:	81 30       	cpi	r24, 0x01	; 1
    3986:	09 f4       	brne	.+2      	; 0x398a <STEPPER_move+0x3a>
    3988:	57 c0       	rjmp	.+174    	; 0x3a38 <STEPPER_move+0xe8>
    398a:	81 30       	cpi	r24, 0x01	; 1
    398c:	b8 f1       	brcs	.+110    	; 0x39fc <STEPPER_move+0xac>
    398e:	82 30       	cpi	r24, 0x02	; 2
    3990:	09 f0       	breq	.+2      	; 0x3994 <STEPPER_move+0x44>
    3992:	76 c0       	rjmp	.+236    	; 0x3a80 <STEPPER_move+0x130>
    3994:	61 30       	cpi	r22, 0x01	; 1
    3996:	91 f0       	breq	.+36     	; 0x39bc <STEPPER_move+0x6c>
    3998:	61 30       	cpi	r22, 0x01	; 1
    399a:	20 f0       	brcs	.+8      	; 0x39a4 <STEPPER_move+0x54>
    399c:	62 30       	cpi	r22, 0x02	; 2
    399e:	09 f0       	breq	.+2      	; 0x39a2 <STEPPER_move+0x52>
    39a0:	6f c0       	rjmp	.+222    	; 0x3a80 <STEPPER_move+0x130>
    39a2:	15 c0       	rjmp	.+42     	; 0x39ce <STEPPER_move+0x7e>
    39a4:	80 e0       	ldi	r24, 0x00	; 0
    39a6:	60 e0       	ldi	r22, 0x00	; 0
    39a8:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <STEPPER_set_mode>
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	b7 01       	movw	r22, r14
    39b0:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <STEPPER_set_accel>
    39b4:	80 e0       	ldi	r24, 0x00	; 0
    39b6:	69 2d       	mov	r22, r9
    39b8:	a8 01       	movw	r20, r16
    39ba:	1d c0       	rjmp	.+58     	; 0x39f6 <STEPPER_move+0xa6>
    39bc:	81 e0       	ldi	r24, 0x01	; 1
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <STEPPER_set_mode>
    39c4:	81 e0       	ldi	r24, 0x01	; 1
    39c6:	b6 01       	movw	r22, r12
    39c8:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <STEPPER_set_accel>
    39cc:	11 c0       	rjmp	.+34     	; 0x39f0 <STEPPER_move+0xa0>
    39ce:	82 e0       	ldi	r24, 0x02	; 2
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <STEPPER_set_mode>
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	b7 01       	movw	r22, r14
    39da:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <STEPPER_set_accel>
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	b6 01       	movw	r22, r12
    39e2:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <STEPPER_set_accel>
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	69 2d       	mov	r22, r9
    39ea:	a8 01       	movw	r20, r16
    39ec:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_run>
    39f0:	81 e0       	ldi	r24, 0x01	; 1
    39f2:	68 2d       	mov	r22, r8
    39f4:	a5 01       	movw	r20, r10
    39f6:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_run>
    39fa:	42 c0       	rjmp	.+132    	; 0x3a80 <STEPPER_move+0x130>
    39fc:	ed b7       	in	r30, 0x3d	; 61
    39fe:	fe b7       	in	r31, 0x3e	; 62
    3a00:	39 97       	sbiw	r30, 0x09	; 9
    3a02:	0f b6       	in	r0, 0x3f	; 63
    3a04:	f8 94       	cli
    3a06:	fe bf       	out	0x3e, r31	; 62
    3a08:	0f be       	out	0x3f, r0	; 63
    3a0a:	ed bf       	out	0x3d, r30	; 61
    3a0c:	6d b6       	in	r6, 0x3d	; 61
    3a0e:	7e b6       	in	r7, 0x3e	; 62
    3a10:	08 94       	sec
    3a12:	61 1c       	adc	r6, r1
    3a14:	71 1c       	adc	r7, r1
    3a16:	52 83       	std	Z+2, r21	; 0x02
    3a18:	41 83       	std	Z+1, r20	; 0x01
    3a1a:	f3 01       	movw	r30, r6
    3a1c:	b3 82       	std	Z+3, r11	; 0x03
    3a1e:	a2 82       	std	Z+2, r10	; 0x02
    3a20:	d5 82       	std	Z+5, r13	; 0x05
    3a22:	c4 82       	std	Z+4, r12	; 0x04
    3a24:	96 83       	std	Z+6, r25	; 0x06
    3a26:	88 8d       	ldd	r24, Y+24	; 0x18
    3a28:	99 8d       	ldd	r25, Y+25	; 0x19
    3a2a:	90 87       	std	Z+8, r25	; 0x08
    3a2c:	87 83       	std	Z+7, r24	; 0x07
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	49 2d       	mov	r20, r9
    3a32:	c7 2e       	mov	r12, r23
    3a34:	5d 01       	movw	r10, r26
    3a36:	1a c0       	rjmp	.+52     	; 0x3a6c <STEPPER_move+0x11c>
    3a38:	ed b7       	in	r30, 0x3d	; 61
    3a3a:	fe b7       	in	r31, 0x3e	; 62
    3a3c:	39 97       	sbiw	r30, 0x09	; 9
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	fe bf       	out	0x3e, r31	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	ed bf       	out	0x3d, r30	; 61
    3a48:	ad b7       	in	r26, 0x3d	; 61
    3a4a:	be b7       	in	r27, 0x3e	; 62
    3a4c:	11 96       	adiw	r26, 0x01	; 1
    3a4e:	52 83       	std	Z+2, r21	; 0x02
    3a50:	41 83       	std	Z+1, r20	; 0x01
    3a52:	fd 01       	movw	r30, r26
    3a54:	b3 82       	std	Z+3, r11	; 0x03
    3a56:	a2 82       	std	Z+2, r10	; 0x02
    3a58:	d5 82       	std	Z+5, r13	; 0x05
    3a5a:	c4 82       	std	Z+4, r12	; 0x04
    3a5c:	96 83       	std	Z+6, r25	; 0x06
    3a5e:	10 86       	std	Z+8, r1	; 0x08
    3a60:	17 82       	std	Z+7, r1	; 0x07
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	49 2d       	mov	r20, r9
    3a66:	c7 2e       	mov	r12, r23
    3a68:	aa 24       	eor	r10, r10
    3a6a:	bb 24       	eor	r11, r11
    3a6c:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <STEPPER_stepmode>
    3a70:	8d b7       	in	r24, 0x3d	; 61
    3a72:	9e b7       	in	r25, 0x3e	; 62
    3a74:	09 96       	adiw	r24, 0x09	; 9
    3a76:	0f b6       	in	r0, 0x3f	; 63
    3a78:	f8 94       	cli
    3a7a:	9e bf       	out	0x3e, r25	; 62
    3a7c:	0f be       	out	0x3f, r0	; 63
    3a7e:	8d bf       	out	0x3d, r24	; 61
    3a80:	cf 91       	pop	r28
    3a82:	df 91       	pop	r29
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	df 90       	pop	r13
    3a8e:	cf 90       	pop	r12
    3a90:	bf 90       	pop	r11
    3a92:	af 90       	pop	r10
    3a94:	9f 90       	pop	r9
    3a96:	8f 90       	pop	r8
    3a98:	7f 90       	pop	r7
    3a9a:	6f 90       	pop	r6
    3a9c:	08 95       	ret

00003a9e <STEPPER_open>:
    3a9e:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__STEPPER_init>
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	80 93 03 08 	sts	0x0803, r24
    3aa8:	ed ec       	ldi	r30, 0xCD	; 205
    3aaa:	f7 e0       	ldi	r31, 0x07	; 7
    3aac:	11 92       	st	Z+, r1
    3aae:	11 92       	st	Z+, r1
    3ab0:	11 82       	std	Z+1, r1	; 0x01
    3ab2:	10 82       	st	Z, r1
    3ab4:	32 96       	adiw	r30, 0x02	; 2
    3ab6:	11 82       	std	Z+1, r1	; 0x01
    3ab8:	10 82       	st	Z, r1
    3aba:	32 96       	adiw	r30, 0x02	; 2
    3abc:	11 82       	std	Z+1, r1	; 0x01
    3abe:	10 82       	st	Z, r1
    3ac0:	32 96       	adiw	r30, 0x02	; 2
    3ac2:	11 82       	std	Z+1, r1	; 0x01
    3ac4:	10 82       	st	Z, r1
    3ac6:	32 96       	adiw	r30, 0x02	; 2
    3ac8:	11 82       	std	Z+1, r1	; 0x01
    3aca:	10 82       	st	Z, r1
    3acc:	32 96       	adiw	r30, 0x02	; 2
    3ace:	11 82       	std	Z+1, r1	; 0x01
    3ad0:	10 82       	st	Z, r1
    3ad2:	32 96       	adiw	r30, 0x02	; 2
    3ad4:	11 82       	std	Z+1, r1	; 0x01
    3ad6:	10 82       	st	Z, r1
    3ad8:	32 96       	adiw	r30, 0x02	; 2
    3ada:	11 82       	std	Z+1, r1	; 0x01
    3adc:	10 82       	st	Z, r1
    3ade:	32 96       	adiw	r30, 0x02	; 2
    3ae0:	11 82       	std	Z+1, r1	; 0x01
    3ae2:	10 82       	st	Z, r1
    3ae4:	32 96       	adiw	r30, 0x02	; 2
    3ae6:	11 82       	std	Z+1, r1	; 0x01
    3ae8:	10 82       	st	Z, r1
    3aea:	32 96       	adiw	r30, 0x02	; 2
    3aec:	11 82       	std	Z+1, r1	; 0x01
    3aee:	10 82       	st	Z, r1
    3af0:	32 96       	adiw	r30, 0x02	; 2
    3af2:	11 82       	std	Z+1, r1	; 0x01
    3af4:	10 82       	st	Z, r1
    3af6:	36 96       	adiw	r30, 0x06	; 6
    3af8:	11 92       	st	Z+, r1
    3afa:	11 92       	st	Z+, r1
    3afc:	11 92       	st	Z+, r1
    3afe:	10 82       	st	Z, r1
    3b00:	32 96       	adiw	r30, 0x02	; 2
    3b02:	11 92       	st	Z+, r1
    3b04:	11 92       	st	Z+, r1
    3b06:	11 92       	st	Z+, r1
    3b08:	11 92       	st	Z+, r1
    3b0a:	11 92       	st	Z+, r1
    3b0c:	11 92       	st	Z+, r1
    3b0e:	11 92       	st	Z+, r1
    3b10:	11 82       	std	Z+1, r1	; 0x01
    3b12:	10 82       	st	Z, r1
    3b14:	32 96       	adiw	r30, 0x02	; 2
    3b16:	11 82       	std	Z+1, r1	; 0x01
    3b18:	10 82       	st	Z, r1
    3b1a:	32 96       	adiw	r30, 0x02	; 2
    3b1c:	11 82       	std	Z+1, r1	; 0x01
    3b1e:	10 82       	st	Z, r1
    3b20:	32 96       	adiw	r30, 0x02	; 2
    3b22:	11 82       	std	Z+1, r1	; 0x01
    3b24:	10 82       	st	Z, r1
    3b26:	76 97       	sbiw	r30, 0x16	; 22
    3b28:	11 82       	std	Z+1, r1	; 0x01
    3b2a:	10 82       	st	Z, r1
    3b2c:	32 96       	adiw	r30, 0x02	; 2
    3b2e:	11 82       	std	Z+1, r1	; 0x01
    3b30:	10 82       	st	Z, r1
    3b32:	10 92 02 08 	sts	0x0802, r1
    3b36:	10 92 01 08 	sts	0x0801, r1
    3b3a:	10 92 03 08 	sts	0x0803, r1
    3b3e:	87 e0       	ldi	r24, 0x07	; 7
    3b40:	61 e0       	ldi	r22, 0x01	; 1
    3b42:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    3b46:	87 e0       	ldi	r24, 0x07	; 7
    3b48:	91 e0       	ldi	r25, 0x01	; 1
    3b4a:	08 95       	ret

00003b4c <STEPPER_run>:
    3b4c:	ef 92       	push	r14
    3b4e:	ff 92       	push	r15
    3b50:	0f 93       	push	r16
    3b52:	1f 93       	push	r17
    3b54:	18 2f       	mov	r17, r24
    3b56:	06 2f       	mov	r16, r22
    3b58:	7a 01       	movw	r14, r20
    3b5a:	60 e0       	ldi	r22, 0x00	; 0
    3b5c:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <STEPPER_set_mode>
    3b60:	81 2f       	mov	r24, r17
    3b62:	60 2f       	mov	r22, r16
    3b64:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <STEPPER_set_dir>
    3b68:	81 2f       	mov	r24, r17
    3b6a:	b7 01       	movw	r22, r14
    3b6c:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <STEPPER_set_speed>
    3b70:	1f 91       	pop	r17
    3b72:	0f 91       	pop	r16
    3b74:	ff 90       	pop	r15
    3b76:	ef 90       	pop	r14
    3b78:	08 95       	ret

00003b7a <STEPPER_set_accel>:
    3b7a:	48 2f       	mov	r20, r24
    3b7c:	81 e0       	ldi	r24, 0x01	; 1
    3b7e:	80 93 03 08 	sts	0x0803, r24
    3b82:	cb 01       	movw	r24, r22
    3b84:	23 e0       	ldi	r18, 0x03	; 3
    3b86:	69 3e       	cpi	r22, 0xE9	; 233
    3b88:	72 07       	cpc	r23, r18
    3b8a:	10 f0       	brcs	.+4      	; 0x3b90 <STEPPER_set_accel+0x16>
    3b8c:	88 ee       	ldi	r24, 0xE8	; 232
    3b8e:	93 e0       	ldi	r25, 0x03	; 3
    3b90:	41 30       	cpi	r20, 0x01	; 1
    3b92:	71 f0       	breq	.+28     	; 0x3bb0 <STEPPER_set_accel+0x36>
    3b94:	41 30       	cpi	r20, 0x01	; 1
    3b96:	18 f0       	brcs	.+6      	; 0x3b9e <STEPPER_set_accel+0x24>
    3b98:	42 30       	cpi	r20, 0x02	; 2
    3b9a:	71 f4       	brne	.+28     	; 0x3bb8 <STEPPER_set_accel+0x3e>
    3b9c:	05 c0       	rjmp	.+10     	; 0x3ba8 <STEPPER_set_accel+0x2e>
    3b9e:	90 93 d8 07 	sts	0x07D8, r25
    3ba2:	80 93 d7 07 	sts	0x07D7, r24
    3ba6:	08 c0       	rjmp	.+16     	; 0x3bb8 <STEPPER_set_accel+0x3e>
    3ba8:	90 93 d8 07 	sts	0x07D8, r25
    3bac:	80 93 d7 07 	sts	0x07D7, r24
    3bb0:	90 93 da 07 	sts	0x07DA, r25
    3bb4:	80 93 d9 07 	sts	0x07D9, r24
    3bb8:	10 92 03 08 	sts	0x0803, r1
    3bbc:	08 95       	ret

00003bbe <STEPPER_set_dir>:
    3bbe:	98 2f       	mov	r25, r24
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	80 93 03 08 	sts	0x0803, r24
    3bc6:	91 30       	cpi	r25, 0x01	; 1
    3bc8:	51 f0       	breq	.+20     	; 0x3bde <STEPPER_set_dir+0x20>
    3bca:	91 30       	cpi	r25, 0x01	; 1
    3bcc:	18 f0       	brcs	.+6      	; 0x3bd4 <STEPPER_set_dir+0x16>
    3bce:	92 30       	cpi	r25, 0x02	; 2
    3bd0:	41 f4       	brne	.+16     	; 0x3be2 <STEPPER_set_dir+0x24>
    3bd2:	03 c0       	rjmp	.+6      	; 0x3bda <STEPPER_set_dir+0x1c>
    3bd4:	60 93 f0 07 	sts	0x07F0, r22
    3bd8:	04 c0       	rjmp	.+8      	; 0x3be2 <STEPPER_set_dir+0x24>
    3bda:	60 93 f0 07 	sts	0x07F0, r22
    3bde:	60 93 f1 07 	sts	0x07F1, r22
    3be2:	10 92 03 08 	sts	0x0803, r1
    3be6:	08 95       	ret

00003be8 <STEPPER_set_mode>:
    3be8:	98 2f       	mov	r25, r24
    3bea:	81 e0       	ldi	r24, 0x01	; 1
    3bec:	80 93 03 08 	sts	0x0803, r24
    3bf0:	91 30       	cpi	r25, 0x01	; 1
    3bf2:	51 f0       	breq	.+20     	; 0x3c08 <STEPPER_set_mode+0x20>
    3bf4:	91 30       	cpi	r25, 0x01	; 1
    3bf6:	18 f0       	brcs	.+6      	; 0x3bfe <STEPPER_set_mode+0x16>
    3bf8:	92 30       	cpi	r25, 0x02	; 2
    3bfa:	41 f4       	brne	.+16     	; 0x3c0c <STEPPER_set_mode+0x24>
    3bfc:	03 c0       	rjmp	.+6      	; 0x3c04 <STEPPER_set_mode+0x1c>
    3bfe:	60 93 cd 07 	sts	0x07CD, r22
    3c02:	04 c0       	rjmp	.+8      	; 0x3c0c <STEPPER_set_mode+0x24>
    3c04:	60 93 cd 07 	sts	0x07CD, r22
    3c08:	60 93 ce 07 	sts	0x07CE, r22
    3c0c:	10 92 03 08 	sts	0x0803, r1
    3c10:	08 95       	ret

00003c12 <STEPPER_set_speed>:
    3c12:	48 2f       	mov	r20, r24
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	80 93 03 08 	sts	0x0803, r24
    3c1a:	cb 01       	movw	r24, r22
    3c1c:	21 e0       	ldi	r18, 0x01	; 1
    3c1e:	61 39       	cpi	r22, 0x91	; 145
    3c20:	72 07       	cpc	r23, r18
    3c22:	10 f0       	brcs	.+4      	; 0x3c28 <STEPPER_set_speed+0x16>
    3c24:	80 e9       	ldi	r24, 0x90	; 144
    3c26:	91 e0       	ldi	r25, 0x01	; 1
    3c28:	41 30       	cpi	r20, 0x01	; 1
    3c2a:	71 f0       	breq	.+28     	; 0x3c48 <STEPPER_set_speed+0x36>
    3c2c:	41 30       	cpi	r20, 0x01	; 1
    3c2e:	18 f0       	brcs	.+6      	; 0x3c36 <STEPPER_set_speed+0x24>
    3c30:	42 30       	cpi	r20, 0x02	; 2
    3c32:	71 f4       	brne	.+28     	; 0x3c50 <STEPPER_set_speed+0x3e>
    3c34:	05 c0       	rjmp	.+10     	; 0x3c40 <STEPPER_set_speed+0x2e>
    3c36:	90 93 d0 07 	sts	0x07D0, r25
    3c3a:	80 93 cf 07 	sts	0x07CF, r24
    3c3e:	08 c0       	rjmp	.+16     	; 0x3c50 <STEPPER_set_speed+0x3e>
    3c40:	90 93 d0 07 	sts	0x07D0, r25
    3c44:	80 93 cf 07 	sts	0x07CF, r24
    3c48:	90 93 d2 07 	sts	0x07D2, r25
    3c4c:	80 93 d1 07 	sts	0x07D1, r24
    3c50:	10 92 03 08 	sts	0x0803, r1
    3c54:	08 95       	ret

00003c56 <STEPPER_set_steps>:
    3c56:	98 2f       	mov	r25, r24
    3c58:	81 e0       	ldi	r24, 0x01	; 1
    3c5a:	80 93 03 08 	sts	0x0803, r24
    3c5e:	91 30       	cpi	r25, 0x01	; 1
    3c60:	71 f0       	breq	.+28     	; 0x3c7e <STEPPER_set_steps+0x28>
    3c62:	91 30       	cpi	r25, 0x01	; 1
    3c64:	18 f0       	brcs	.+6      	; 0x3c6c <STEPPER_set_steps+0x16>
    3c66:	92 30       	cpi	r25, 0x02	; 2
    3c68:	71 f4       	brne	.+28     	; 0x3c86 <STEPPER_set_steps+0x30>
    3c6a:	05 c0       	rjmp	.+10     	; 0x3c76 <STEPPER_set_steps+0x20>
    3c6c:	70 93 e0 07 	sts	0x07E0, r23
    3c70:	60 93 df 07 	sts	0x07DF, r22
    3c74:	08 c0       	rjmp	.+16     	; 0x3c86 <STEPPER_set_steps+0x30>
    3c76:	70 93 e0 07 	sts	0x07E0, r23
    3c7a:	60 93 df 07 	sts	0x07DF, r22
    3c7e:	70 93 e2 07 	sts	0x07E2, r23
    3c82:	60 93 e1 07 	sts	0x07E1, r22
    3c86:	10 92 03 08 	sts	0x0803, r1
    3c8a:	08 95       	ret

00003c8c <STEPPER_step>:
    3c8c:	8f 92       	push	r8
    3c8e:	9f 92       	push	r9
    3c90:	af 92       	push	r10
    3c92:	bf 92       	push	r11
    3c94:	cf 92       	push	r12
    3c96:	df 92       	push	r13
    3c98:	ef 92       	push	r14
    3c9a:	ff 92       	push	r15
    3c9c:	0f 93       	push	r16
    3c9e:	1f 93       	push	r17
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
    3ca4:	18 2f       	mov	r17, r24
    3ca6:	f6 2e       	mov	r15, r22
    3ca8:	5a 01       	movw	r10, r20
    3caa:	49 01       	movw	r8, r18
    3cac:	e6 01       	movw	r28, r12
    3cae:	61 e0       	ldi	r22, 0x01	; 1
    3cb0:	0e 94 f4 1d 	call	0x3be8	; 0x3be8 <STEPPER_set_mode>
    3cb4:	81 2f       	mov	r24, r17
    3cb6:	b5 01       	movw	r22, r10
    3cb8:	a4 01       	movw	r20, r8
    3cba:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <STEPPER_setup_decels>
    3cbe:	81 2f       	mov	r24, r17
    3cc0:	6f 2d       	mov	r22, r15
    3cc2:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <STEPPER_set_dir>
    3cc6:	81 2f       	mov	r24, r17
    3cc8:	60 2f       	mov	r22, r16
    3cca:	0e 94 e3 26 	call	0x4dc6	; 0x4dc6 <STEPPER_set_stop_mode>
    3cce:	81 2f       	mov	r24, r17
    3cd0:	b5 01       	movw	r22, r10
    3cd2:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <STEPPER_set_steps>
    3cd6:	c1 14       	cp	r12, r1
    3cd8:	d1 04       	cpc	r13, r1
    3cda:	99 f0       	breq	.+38     	; 0x3d02 <STEPPER_step+0x76>
    3cdc:	11 30       	cpi	r17, 0x01	; 1
    3cde:	49 f0       	breq	.+18     	; 0x3cf2 <STEPPER_step+0x66>
    3ce0:	11 30       	cpi	r17, 0x01	; 1
    3ce2:	18 f0       	brcs	.+6      	; 0x3cea <STEPPER_step+0x5e>
    3ce4:	12 30       	cpi	r17, 0x02	; 2
    3ce6:	69 f4       	brne	.+26     	; 0x3d02 <STEPPER_step+0x76>
    3ce8:	06 c0       	rjmp	.+12     	; 0x3cf6 <STEPPER_step+0x6a>
    3cea:	18 82       	st	Y, r1
    3cec:	10 92 ff 07 	sts	0x07FF, r1
    3cf0:	08 c0       	rjmp	.+16     	; 0x3d02 <STEPPER_step+0x76>
    3cf2:	19 82       	std	Y+1, r1	; 0x01
    3cf4:	04 c0       	rjmp	.+8      	; 0x3cfe <STEPPER_step+0x72>
    3cf6:	18 82       	st	Y, r1
    3cf8:	19 82       	std	Y+1, r1	; 0x01
    3cfa:	10 92 ff 07 	sts	0x07FF, r1
    3cfe:	10 92 00 08 	sts	0x0800, r1
    3d02:	d0 93 02 08 	sts	0x0802, r29
    3d06:	c0 93 01 08 	sts	0x0801, r28
    3d0a:	ee 20       	and	r14, r14
    3d0c:	b9 f5       	brne	.+110    	; 0x3d7c <STEPPER_step+0xf0>
    3d0e:	81 eb       	ldi	r24, 0xB1	; 177
    3d10:	94 e0       	ldi	r25, 0x04	; 4
    3d12:	90 93 02 08 	sts	0x0802, r25
    3d16:	80 93 01 08 	sts	0x0801, r24
    3d1a:	81 2f       	mov	r24, r17
    3d1c:	b4 01       	movw	r22, r8
    3d1e:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <STEPPER_set_speed>
    3d22:	81 2f       	mov	r24, r17
    3d24:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <STEPPER_go>
    3d28:	11 30       	cpi	r17, 0x01	; 1
    3d2a:	71 f0       	breq	.+28     	; 0x3d48 <STEPPER_step+0xbc>
    3d2c:	11 30       	cpi	r17, 0x01	; 1
    3d2e:	18 f0       	brcs	.+6      	; 0x3d36 <STEPPER_step+0xaa>
    3d30:	12 30       	cpi	r17, 0x02	; 2
    3d32:	59 f5       	brne	.+86     	; 0x3d8a <STEPPER_step+0xfe>
    3d34:	12 c0       	rjmp	.+36     	; 0x3d5a <STEPPER_step+0xce>
    3d36:	10 92 b1 04 	sts	0x04B1, r1
    3d3a:	10 92 ff 07 	sts	0x07FF, r1
    3d3e:	80 91 b1 04 	lds	r24, 0x04B1
    3d42:	88 23       	and	r24, r24
    3d44:	e1 f3       	breq	.-8      	; 0x3d3e <STEPPER_step+0xb2>
    3d46:	21 c0       	rjmp	.+66     	; 0x3d8a <STEPPER_step+0xfe>
    3d48:	10 92 b2 04 	sts	0x04B2, r1
    3d4c:	10 92 00 08 	sts	0x0800, r1
    3d50:	80 91 b2 04 	lds	r24, 0x04B2
    3d54:	88 23       	and	r24, r24
    3d56:	e1 f3       	breq	.-8      	; 0x3d50 <STEPPER_step+0xc4>
    3d58:	18 c0       	rjmp	.+48     	; 0x3d8a <STEPPER_step+0xfe>
    3d5a:	10 92 b1 04 	sts	0x04B1, r1
    3d5e:	10 92 b2 04 	sts	0x04B2, r1
    3d62:	10 92 ff 07 	sts	0x07FF, r1
    3d66:	10 92 00 08 	sts	0x0800, r1
    3d6a:	80 91 b1 04 	lds	r24, 0x04B1
    3d6e:	88 23       	and	r24, r24
    3d70:	e1 f3       	breq	.-8      	; 0x3d6a <STEPPER_step+0xde>
    3d72:	80 91 b2 04 	lds	r24, 0x04B2
    3d76:	88 23       	and	r24, r24
    3d78:	c1 f3       	breq	.-16     	; 0x3d6a <STEPPER_step+0xde>
    3d7a:	07 c0       	rjmp	.+14     	; 0x3d8a <STEPPER_step+0xfe>
    3d7c:	81 2f       	mov	r24, r17
    3d7e:	b4 01       	movw	r22, r8
    3d80:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <STEPPER_set_speed>
    3d84:	81 2f       	mov	r24, r17
    3d86:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <STEPPER_go>
    3d8a:	df 91       	pop	r29
    3d8c:	cf 91       	pop	r28
    3d8e:	1f 91       	pop	r17
    3d90:	0f 91       	pop	r16
    3d92:	ff 90       	pop	r15
    3d94:	ef 90       	pop	r14
    3d96:	df 90       	pop	r13
    3d98:	cf 90       	pop	r12
    3d9a:	bf 90       	pop	r11
    3d9c:	af 90       	pop	r10
    3d9e:	9f 90       	pop	r9
    3da0:	8f 90       	pop	r8
    3da2:	08 95       	ret

00003da4 <STEPPER_stop>:
    3da4:	0f 93       	push	r16
    3da6:	1f 93       	push	r17
    3da8:	18 2f       	mov	r17, r24
    3daa:	06 2f       	mov	r16, r22
    3dac:	66 23       	and	r22, r22
    3dae:	49 f4       	brne	.+18     	; 0x3dc2 <STEPPER_stop+0x1e>
    3db0:	60 e0       	ldi	r22, 0x00	; 0
    3db2:	70 e0       	ldi	r23, 0x00	; 0
    3db4:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <STEPPER_set_speed>
    3db8:	81 2f       	mov	r24, r17
    3dba:	60 e0       	ldi	r22, 0x00	; 0
    3dbc:	70 e0       	ldi	r23, 0x00	; 0
    3dbe:	0e 94 2b 1e 	call	0x3c56	; 0x3c56 <STEPPER_set_steps>
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	80 93 03 08 	sts	0x0803, r24
    3dc8:	11 30       	cpi	r17, 0x01	; 1
    3dca:	51 f0       	breq	.+20     	; 0x3de0 <STEPPER_stop+0x3c>
    3dcc:	11 30       	cpi	r17, 0x01	; 1
    3dce:	18 f0       	brcs	.+6      	; 0x3dd6 <STEPPER_stop+0x32>
    3dd0:	12 30       	cpi	r17, 0x02	; 2
    3dd2:	41 f4       	brne	.+16     	; 0x3de4 <STEPPER_stop+0x40>
    3dd4:	03 c0       	rjmp	.+6      	; 0x3ddc <STEPPER_stop+0x38>
    3dd6:	00 93 eb 07 	sts	0x07EB, r16
    3dda:	04 c0       	rjmp	.+8      	; 0x3de4 <STEPPER_stop+0x40>
    3ddc:	00 93 eb 07 	sts	0x07EB, r16
    3de0:	00 93 ec 07 	sts	0x07EC, r16
    3de4:	10 92 03 08 	sts	0x0803, r1
    3de8:	1f 91       	pop	r17
    3dea:	0f 91       	pop	r16
    3dec:	08 95       	ret

00003dee <STEPPER_wait_and_then>:
    3dee:	cf 92       	push	r12
    3df0:	df 92       	push	r13
    3df2:	ef 92       	push	r14
    3df4:	ff 92       	push	r15
    3df6:	0f 93       	push	r16
    3df8:	1f 93       	push	r17
    3dfa:	df 93       	push	r29
    3dfc:	cf 93       	push	r28
    3dfe:	cd b7       	in	r28, 0x3d	; 61
    3e00:	de b7       	in	r29, 0x3e	; 62
    3e02:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e04:	81 30       	cpi	r24, 0x01	; 1
    3e06:	61 f0       	breq	.+24     	; 0x3e20 <STEPPER_wait_and_then+0x32>
    3e08:	81 30       	cpi	r24, 0x01	; 1
    3e0a:	18 f0       	brcs	.+6      	; 0x3e12 <STEPPER_wait_and_then+0x24>
    3e0c:	82 30       	cpi	r24, 0x02	; 2
    3e0e:	a1 f5       	brne	.+104    	; 0x3e78 <STEPPER_wait_and_then+0x8a>
    3e10:	11 c0       	rjmp	.+34     	; 0x3e34 <STEPPER_wait_and_then+0x46>
    3e12:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e14:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e16:	80 91 04 08 	lds	r24, 0x0804
    3e1a:	88 23       	and	r24, r24
    3e1c:	e1 f3       	breq	.-8      	; 0x3e16 <STEPPER_wait_and_then+0x28>
    3e1e:	06 c0       	rjmp	.+12     	; 0x3e2c <STEPPER_wait_and_then+0x3e>
    3e20:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e22:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e24:	80 91 05 08 	lds	r24, 0x0805
    3e28:	88 23       	and	r24, r24
    3e2a:	e1 f3       	breq	.-8      	; 0x3e24 <STEPPER_wait_and_then+0x36>
    3e2c:	30 97       	sbiw	r30, 0x00	; 0
    3e2e:	21 f1       	breq	.+72     	; 0x3e78 <STEPPER_wait_and_then+0x8a>
    3e30:	09 95       	icall
    3e32:	22 c0       	rjmp	.+68     	; 0x3e78 <STEPPER_wait_and_then+0x8a>
    3e34:	cc 84       	ldd	r12, Y+12	; 0x0c
    3e36:	dd 84       	ldd	r13, Y+13	; 0x0d
    3e38:	ee 84       	ldd	r14, Y+14	; 0x0e
    3e3a:	ff 84       	ldd	r15, Y+15	; 0x0f
    3e3c:	00 e0       	ldi	r16, 0x00	; 0
    3e3e:	10 e0       	ldi	r17, 0x00	; 0
    3e40:	00 23       	and	r16, r16
    3e42:	51 f4       	brne	.+20     	; 0x3e58 <STEPPER_wait_and_then+0x6a>
    3e44:	80 91 04 08 	lds	r24, 0x0804
    3e48:	88 23       	and	r24, r24
    3e4a:	31 f0       	breq	.+12     	; 0x3e58 <STEPPER_wait_and_then+0x6a>
    3e4c:	c1 14       	cp	r12, r1
    3e4e:	d1 04       	cpc	r13, r1
    3e50:	11 f0       	breq	.+4      	; 0x3e56 <STEPPER_wait_and_then+0x68>
    3e52:	f6 01       	movw	r30, r12
    3e54:	09 95       	icall
    3e56:	01 e0       	ldi	r16, 0x01	; 1
    3e58:	11 23       	and	r17, r17
    3e5a:	51 f4       	brne	.+20     	; 0x3e70 <STEPPER_wait_and_then+0x82>
    3e5c:	80 91 05 08 	lds	r24, 0x0805
    3e60:	88 23       	and	r24, r24
    3e62:	31 f0       	breq	.+12     	; 0x3e70 <STEPPER_wait_and_then+0x82>
    3e64:	e1 14       	cp	r14, r1
    3e66:	f1 04       	cpc	r15, r1
    3e68:	11 f0       	breq	.+4      	; 0x3e6e <STEPPER_wait_and_then+0x80>
    3e6a:	f7 01       	movw	r30, r14
    3e6c:	09 95       	icall
    3e6e:	11 e0       	ldi	r17, 0x01	; 1
    3e70:	00 23       	and	r16, r16
    3e72:	31 f3       	breq	.-52     	; 0x3e40 <STEPPER_wait_and_then+0x52>
    3e74:	11 23       	and	r17, r17
    3e76:	21 f3       	breq	.-56     	; 0x3e40 <STEPPER_wait_and_then+0x52>
    3e78:	cf 91       	pop	r28
    3e7a:	df 91       	pop	r29
    3e7c:	1f 91       	pop	r17
    3e7e:	0f 91       	pop	r16
    3e80:	ff 90       	pop	r15
    3e82:	ef 90       	pop	r14
    3e84:	df 90       	pop	r13
    3e86:	cf 90       	pop	r12
    3e88:	08 95       	ret

00003e8a <SYS_get_state>:
    3e8a:	e8 2f       	mov	r30, r24
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	e3 31       	cpi	r30, 0x13	; 19
    3e90:	f1 05       	cpc	r31, r1
    3e92:	40 f4       	brcc	.+16     	; 0x3ea4 <SYS_get_state+0x1a>
    3e94:	e2 5c       	subi	r30, 0xC2	; 194
    3e96:	ff 4f       	sbci	r31, 0xFF	; 255
    3e98:	ee 0f       	add	r30, r30
    3e9a:	ff 1f       	adc	r31, r31
    3e9c:	05 90       	lpm	r0, Z+
    3e9e:	f4 91       	lpm	r31, Z+
    3ea0:	e0 2d       	mov	r30, r0
    3ea2:	09 94       	ijmp
    3ea4:	80 e0       	ldi	r24, 0x00	; 0
    3ea6:	08 95       	ret
    3ea8:	80 91 06 08 	lds	r24, 0x0806
    3eac:	08 95       	ret
    3eae:	80 91 07 08 	lds	r24, 0x0807
    3eb2:	08 95       	ret
    3eb4:	80 91 08 08 	lds	r24, 0x0808
    3eb8:	08 95       	ret
    3eba:	80 91 09 08 	lds	r24, 0x0809
    3ebe:	08 95       	ret
    3ec0:	80 91 0a 08 	lds	r24, 0x080A
    3ec4:	08 95       	ret
    3ec6:	80 91 0c 08 	lds	r24, 0x080C
    3eca:	08 95       	ret
    3ecc:	80 91 0b 08 	lds	r24, 0x080B
    3ed0:	08 95       	ret
    3ed2:	80 91 0d 08 	lds	r24, 0x080D
    3ed6:	08 95       	ret
    3ed8:	80 91 0e 08 	lds	r24, 0x080E
    3edc:	08 95       	ret
    3ede:	80 91 0f 08 	lds	r24, 0x080F
    3ee2:	08 95       	ret
    3ee4:	80 91 10 08 	lds	r24, 0x0810
    3ee8:	08 95       	ret
    3eea:	80 91 11 08 	lds	r24, 0x0811
    3eee:	08 95       	ret
    3ef0:	80 91 12 08 	lds	r24, 0x0812
    3ef4:	08 95       	ret
    3ef6:	80 91 13 08 	lds	r24, 0x0813
    3efa:	08 95       	ret
    3efc:	80 91 14 08 	lds	r24, 0x0814
    3f00:	08 95       	ret
    3f02:	80 91 15 08 	lds	r24, 0x0815
    3f06:	08 95       	ret
    3f08:	80 91 16 08 	lds	r24, 0x0816
    3f0c:	08 95       	ret
    3f0e:	80 91 17 08 	lds	r24, 0x0817
    3f12:	08 95       	ret
    3f14:	80 91 18 08 	lds	r24, 0x0818
    3f18:	08 95       	ret

00003f1a <SYS_set_state>:
    3f1a:	e8 2f       	mov	r30, r24
    3f1c:	f0 e0       	ldi	r31, 0x00	; 0
    3f1e:	e3 31       	cpi	r30, 0x13	; 19
    3f20:	f1 05       	cpc	r31, r1
    3f22:	08 f0       	brcs	.+2      	; 0x3f26 <SYS_set_state+0xc>
    3f24:	40 c0       	rjmp	.+128    	; 0x3fa6 <SYS_set_state+0x8c>
    3f26:	ef 5a       	subi	r30, 0xAF	; 175
    3f28:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2a:	ee 0f       	add	r30, r30
    3f2c:	ff 1f       	adc	r31, r31
    3f2e:	05 90       	lpm	r0, Z+
    3f30:	f4 91       	lpm	r31, Z+
    3f32:	e0 2d       	mov	r30, r0
    3f34:	09 94       	ijmp
    3f36:	60 93 06 08 	sts	0x0806, r22
    3f3a:	08 95       	ret
    3f3c:	60 93 07 08 	sts	0x0807, r22
    3f40:	08 95       	ret
    3f42:	60 93 08 08 	sts	0x0808, r22
    3f46:	08 95       	ret
    3f48:	60 93 09 08 	sts	0x0809, r22
    3f4c:	08 95       	ret
    3f4e:	60 93 0a 08 	sts	0x080A, r22
    3f52:	08 95       	ret
    3f54:	60 93 0c 08 	sts	0x080C, r22
    3f58:	08 95       	ret
    3f5a:	60 93 0b 08 	sts	0x080B, r22
    3f5e:	08 95       	ret
    3f60:	60 93 0d 08 	sts	0x080D, r22
    3f64:	08 95       	ret
    3f66:	60 93 0e 08 	sts	0x080E, r22
    3f6a:	08 95       	ret
    3f6c:	60 93 0f 08 	sts	0x080F, r22
    3f70:	08 95       	ret
    3f72:	60 93 10 08 	sts	0x0810, r22
    3f76:	08 95       	ret
    3f78:	60 93 11 08 	sts	0x0811, r22
    3f7c:	08 95       	ret
    3f7e:	60 93 12 08 	sts	0x0812, r22
    3f82:	08 95       	ret
    3f84:	60 93 13 08 	sts	0x0813, r22
    3f88:	08 95       	ret
    3f8a:	60 93 14 08 	sts	0x0814, r22
    3f8e:	08 95       	ret
    3f90:	60 93 15 08 	sts	0x0815, r22
    3f94:	08 95       	ret
    3f96:	60 93 16 08 	sts	0x0816, r22
    3f9a:	08 95       	ret
    3f9c:	60 93 17 08 	sts	0x0817, r22
    3fa0:	08 95       	ret
    3fa2:	60 93 16 08 	sts	0x0816, r22
    3fa6:	08 95       	ret

00003fa8 <ATTINY_get_sensors>:
    3fa8:	0f 93       	push	r16
    3faa:	1f 93       	push	r17
    3fac:	81 e0       	ldi	r24, 0x01	; 1
    3fae:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    3fb2:	81 30       	cpi	r24, 0x01	; 1
    3fb4:	11 f0       	breq	.+4      	; 0x3fba <ATTINY_get_sensors+0x12>
    3fb6:	00 e0       	ldi	r16, 0x00	; 0
    3fb8:	24 c0       	rjmp	.+72     	; 0x4002 <ATTINY_get_sensors+0x5a>
    3fba:	87 e0       	ldi	r24, 0x07	; 7
    3fbc:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SPI_set_slave_addr>
    3fc0:	82 e0       	ldi	r24, 0x02	; 2
    3fc2:	6a e0       	ldi	r22, 0x0A	; 10
    3fc4:	0e 94 1c 1b 	call	0x3638	; 0x3638 <SPI_transmit>
    3fc8:	82 e0       	ldi	r24, 0x02	; 2
    3fca:	62 eb       	ldi	r22, 0xB2	; 178
    3fcc:	0e 94 1c 1b 	call	0x3638	; 0x3638 <SPI_transmit>
    3fd0:	18 ec       	ldi	r17, 0xC8	; 200
    3fd2:	81 2f       	mov	r24, r17
    3fd4:	8a 95       	dec	r24
    3fd6:	f1 f7       	brne	.-4      	; 0x3fd4 <ATTINY_get_sensors+0x2c>
    3fd8:	82 e0       	ldi	r24, 0x02	; 2
    3fda:	60 e0       	ldi	r22, 0x00	; 0
    3fdc:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <SPI_receive>
    3fe0:	08 2f       	mov	r16, r24
    3fe2:	81 2f       	mov	r24, r17
    3fe4:	8a 95       	dec	r24
    3fe6:	f1 f7       	brne	.-4      	; 0x3fe4 <ATTINY_get_sensors+0x3c>
    3fe8:	82 e0       	ldi	r24, 0x02	; 2
    3fea:	60 e0       	ldi	r22, 0x00	; 0
    3fec:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <SPI_receive>
    3ff0:	1a 95       	dec	r17
    3ff2:	f1 f7       	brne	.-4      	; 0x3ff0 <ATTINY_get_sensors+0x48>
    3ff4:	87 e0       	ldi	r24, 0x07	; 7
    3ff6:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SPI_set_slave_addr>
    3ffa:	88 e8       	ldi	r24, 0x88	; 136
    3ffc:	93 e1       	ldi	r25, 0x13	; 19
    3ffe:	01 97       	sbiw	r24, 0x01	; 1
    4000:	f1 f7       	brne	.-4      	; 0x3ffe <ATTINY_get_sensors+0x56>
    4002:	80 2f       	mov	r24, r16
    4004:	1f 91       	pop	r17
    4006:	0f 91       	pop	r16
    4008:	08 95       	ret

0000400a <ATTINY_get_SW_state>:
    400a:	1f 93       	push	r17
    400c:	cf 93       	push	r28
    400e:	df 93       	push	r29
    4010:	18 2f       	mov	r17, r24
    4012:	80 91 b4 04 	lds	r24, 0x04B4
    4016:	88 23       	and	r24, r24
    4018:	41 f0       	breq	.+16     	; 0x402a <ATTINY_get_SW_state+0x20>
    401a:	80 91 be 04 	lds	r24, 0x04BE
    401e:	88 23       	and	r24, r24
    4020:	99 f0       	breq	.+38     	; 0x4048 <ATTINY_get_SW_state+0x3e>
    4022:	10 92 b4 04 	sts	0x04B4, r1
    4026:	10 92 be 04 	sts	0x04BE, r1
    402a:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <ATTINY_get_sensors>
    402e:	80 93 b3 04 	sts	0x04B3, r24
    4032:	88 eb       	ldi	r24, 0xB8	; 184
    4034:	94 e0       	ldi	r25, 0x04	; 4
    4036:	61 e0       	ldi	r22, 0x01	; 1
    4038:	40 e0       	ldi	r20, 0x00	; 0
    403a:	22 e3       	ldi	r18, 0x32	; 50
    403c:	30 e0       	ldi	r19, 0x00	; 0
    403e:	0e 94 c3 20 	call	0x4186	; 0x4186 <TMRSRVC_new>
    4042:	81 e0       	ldi	r24, 0x01	; 1
    4044:	80 93 b4 04 	sts	0x04B4, r24
    4048:	90 91 b3 04 	lds	r25, 0x04B3
    404c:	a1 2f       	mov	r26, r17
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	ed 01       	movw	r28, r26
    4052:	ca 59       	subi	r28, 0x9A	; 154
    4054:	db 4f       	sbci	r29, 0xFB	; 251
    4056:	88 81       	ld	r24, Y
    4058:	88 23       	and	r24, r24
    405a:	69 f0       	breq	.+26     	; 0x4076 <ATTINY_get_SW_state+0x6c>
    405c:	fd 01       	movw	r30, r26
    405e:	e7 59       	subi	r30, 0x97	; 151
    4060:	fb 4f       	sbci	r31, 0xFB	; 251
    4062:	80 81       	ld	r24, Z
    4064:	98 23       	and	r25, r24
    4066:	c1 f0       	breq	.+48     	; 0x4098 <ATTINY_get_SW_state+0x8e>
    4068:	fd 01       	movw	r30, r26
    406a:	eb 54       	subi	r30, 0x4B	; 75
    406c:	fb 4f       	sbci	r31, 0xFB	; 251
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	80 83       	st	Z, r24
    4072:	18 82       	st	Y, r1
    4074:	11 c0       	rjmp	.+34     	; 0x4098 <ATTINY_get_SW_state+0x8e>
    4076:	fd 01       	movw	r30, r26
    4078:	eb 54       	subi	r30, 0x4B	; 75
    407a:	fb 4f       	sbci	r31, 0xFB	; 251
    407c:	80 81       	ld	r24, Z
    407e:	81 11       	cpse	r24, r1
    4080:	10 82       	st	Z, r1
    4082:	fd 01       	movw	r30, r26
    4084:	e7 59       	subi	r30, 0x97	; 151
    4086:	fb 4f       	sbci	r31, 0xFB	; 251
    4088:	80 81       	ld	r24, Z
    408a:	98 23       	and	r25, r24
    408c:	29 f4       	brne	.+10     	; 0x4098 <ATTINY_get_SW_state+0x8e>
    408e:	fd 01       	movw	r30, r26
    4090:	ea 59       	subi	r30, 0x9A	; 154
    4092:	fb 4f       	sbci	r31, 0xFB	; 251
    4094:	81 e0       	ldi	r24, 0x01	; 1
    4096:	80 83       	st	Z, r24
    4098:	ab 54       	subi	r26, 0x4B	; 75
    409a:	bb 4f       	sbci	r27, 0xFB	; 251
    409c:	8c 91       	ld	r24, X
    409e:	df 91       	pop	r29
    40a0:	cf 91       	pop	r28
    40a2:	1f 91       	pop	r17
    40a4:	08 95       	ret

000040a6 <ATTINY_open>:
    40a6:	82 e0       	ldi	r24, 0x02	; 2
    40a8:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    40ac:	88 23       	and	r24, r24
    40ae:	19 f4       	brne	.+6      	; 0x40b6 <ATTINY_open+0x10>
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	82 e0       	ldi	r24, 0x02	; 2
    40b4:	08 95       	ret
    40b6:	10 92 34 08 	sts	0x0834, r1
    40ba:	10 92 33 08 	sts	0x0833, r1
    40be:	10 92 36 08 	sts	0x0836, r1
    40c2:	10 92 35 08 	sts	0x0835, r1
    40c6:	10 92 38 08 	sts	0x0838, r1
    40ca:	10 92 37 08 	sts	0x0837, r1
    40ce:	10 92 3a 08 	sts	0x083A, r1
    40d2:	10 92 39 08 	sts	0x0839, r1
    40d6:	10 92 3c 08 	sts	0x083C, r1
    40da:	10 92 3b 08 	sts	0x083B, r1
    40de:	80 e9       	ldi	r24, 0x90	; 144
    40e0:	91 e0       	ldi	r25, 0x01	; 1
    40e2:	90 93 20 08 	sts	0x0820, r25
    40e6:	80 93 1f 08 	sts	0x081F, r24
    40ea:	90 93 22 08 	sts	0x0822, r25
    40ee:	80 93 21 08 	sts	0x0821, r24
    40f2:	90 93 24 08 	sts	0x0824, r25
    40f6:	80 93 23 08 	sts	0x0823, r24
    40fa:	90 93 26 08 	sts	0x0826, r25
    40fe:	80 93 25 08 	sts	0x0825, r24
    4102:	90 93 28 08 	sts	0x0828, r25
    4106:	80 93 27 08 	sts	0x0827, r24
    410a:	84 e3       	ldi	r24, 0x34	; 52
    410c:	98 e0       	ldi	r25, 0x08	; 8
    410e:	90 93 2a 08 	sts	0x082A, r25
    4112:	80 93 29 08 	sts	0x0829, r24
    4116:	90 93 2c 08 	sts	0x082C, r25
    411a:	80 93 2b 08 	sts	0x082B, r24
    411e:	90 93 2e 08 	sts	0x082E, r25
    4122:	80 93 2d 08 	sts	0x082D, r24
    4126:	90 93 30 08 	sts	0x0830, r25
    412a:	80 93 2f 08 	sts	0x082F, r24
    412e:	90 93 32 08 	sts	0x0832, r25
    4132:	80 93 31 08 	sts	0x0831, r24
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	61 e0       	ldi	r22, 0x01	; 1
    413a:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    413e:	91 e0       	ldi	r25, 0x01	; 1
    4140:	81 e0       	ldi	r24, 0x01	; 1
    4142:	08 95       	ret

00004144 <TMRSRVC_delay>:
    4144:	df 93       	push	r29
    4146:	cf 93       	push	r28
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    414c:	29 97       	sbiw	r28, 0x09	; 9
    414e:	0f b6       	in	r0, 0x3f	; 63
    4150:	f8 94       	cli
    4152:	de bf       	out	0x3e, r29	; 62
    4154:	0f be       	out	0x3f, r0	; 63
    4156:	cd bf       	out	0x3d, r28	; 61
    4158:	9c 01       	movw	r18, r24
    415a:	ce 01       	movw	r24, r28
    415c:	01 96       	adiw	r24, 0x01	; 1
    415e:	61 e0       	ldi	r22, 0x01	; 1
    4160:	40 e0       	ldi	r20, 0x00	; 0
    4162:	0e 94 c3 20 	call	0x4186	; 0x4186 <TMRSRVC_new>
    4166:	98 2f       	mov	r25, r24
    4168:	88 23       	and	r24, r24
    416a:	19 f4       	brne	.+6      	; 0x4172 <TMRSRVC_delay+0x2e>
    416c:	8f 81       	ldd	r24, Y+7	; 0x07
    416e:	88 23       	and	r24, r24
    4170:	e9 f3       	breq	.-6      	; 0x416c <TMRSRVC_delay+0x28>
    4172:	89 2f       	mov	r24, r25
    4174:	29 96       	adiw	r28, 0x09	; 9
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	f8 94       	cli
    417a:	de bf       	out	0x3e, r29	; 62
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	cd bf       	out	0x3d, r28	; 61
    4180:	cf 91       	pop	r28
    4182:	df 91       	pop	r29
    4184:	08 95       	ret

00004186 <TMRSRVC_new>:
    4186:	ef 92       	push	r14
    4188:	ff 92       	push	r15
    418a:	0f 93       	push	r16
    418c:	1f 93       	push	r17
    418e:	cf 93       	push	r28
    4190:	df 93       	push	r29
    4192:	ec 01       	movw	r28, r24
    4194:	f6 2e       	mov	r15, r22
    4196:	e4 2e       	mov	r14, r20
    4198:	89 01       	movw	r16, r18
    419a:	88 e0       	ldi	r24, 0x08	; 8
    419c:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    41a0:	81 30       	cpi	r24, 0x01	; 1
    41a2:	11 f0       	breq	.+4      	; 0x41a8 <TMRSRVC_new+0x22>
    41a4:	81 e0       	ldi	r24, 0x01	; 1
    41a6:	26 c0       	rjmp	.+76     	; 0x41f4 <TMRSRVC_new+0x6e>
    41a8:	84 e0       	ldi	r24, 0x04	; 4
    41aa:	90 e0       	ldi	r25, 0x00	; 0
    41ac:	0e 94 01 34 	call	0x6802	; 0x6802 <malloc>
    41b0:	fc 01       	movw	r30, r24
    41b2:	00 97       	sbiw	r24, 0x00	; 0
    41b4:	11 f4       	brne	.+4      	; 0x41ba <TMRSRVC_new+0x34>
    41b6:	82 e0       	ldi	r24, 0x02	; 2
    41b8:	1d c0       	rjmp	.+58     	; 0x41f4 <TMRSRVC_new+0x6e>
    41ba:	f9 82       	std	Y+1, r15	; 0x01
    41bc:	f0 fc       	sbrc	r15, 0
    41be:	1e 82       	std	Y+6, r1	; 0x06
    41c0:	81 e0       	ldi	r24, 0x01	; 1
    41c2:	e8 16       	cp	r14, r24
    41c4:	19 f4       	brne	.+6      	; 0x41cc <TMRSRVC_new+0x46>
    41c6:	89 81       	ldd	r24, Y+1	; 0x01
    41c8:	84 60       	ori	r24, 0x04	; 4
    41ca:	89 83       	std	Y+1, r24	; 0x01
    41cc:	89 81       	ldd	r24, Y+1	; 0x01
    41ce:	88 60       	ori	r24, 0x08	; 8
    41d0:	89 83       	std	Y+1, r24	; 0x01
    41d2:	1b 83       	std	Y+3, r17	; 0x03
    41d4:	0a 83       	std	Y+2, r16	; 0x02
    41d6:	1d 83       	std	Y+5, r17	; 0x05
    41d8:	0c 83       	std	Y+4, r16	; 0x04
    41da:	d1 83       	std	Z+1, r29	; 0x01
    41dc:	c0 83       	st	Z, r28
    41de:	13 82       	std	Z+3, r1	; 0x03
    41e0:	12 82       	std	Z+2, r1	; 0x02
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	80 93 11 05 	sts	0x0511, r24
    41e8:	cf 01       	movw	r24, r30
    41ea:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <TMRSRVC_insert>
    41ee:	10 92 11 05 	sts	0x0511, r1
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	df 91       	pop	r29
    41f6:	cf 91       	pop	r28
    41f8:	1f 91       	pop	r17
    41fa:	0f 91       	pop	r16
    41fc:	ff 90       	pop	r15
    41fe:	ef 90       	pop	r14
    4200:	08 95       	ret

00004202 <I2C_MSTR_get>:
    4202:	fc 01       	movw	r30, r24
    4204:	80 91 40 08 	lds	r24, 0x0840
    4208:	81 30       	cpi	r24, 0x01	; 1
    420a:	11 f0       	breq	.+4      	; 0x4210 <I2C_MSTR_get+0xe>
    420c:	85 e0       	ldi	r24, 0x05	; 5
    420e:	08 95       	ret
    4210:	80 91 41 08 	lds	r24, 0x0841
    4214:	81 30       	cpi	r24, 0x01	; 1
    4216:	11 f0       	breq	.+4      	; 0x421c <I2C_MSTR_get+0x1a>
    4218:	8a e0       	ldi	r24, 0x0A	; 10
    421a:	08 95       	ret
    421c:	61 30       	cpi	r22, 0x01	; 1
    421e:	11 f4       	brne	.+4      	; 0x4224 <I2C_MSTR_get+0x22>
    4220:	84 ec       	ldi	r24, 0xC4	; 196
    4222:	01 c0       	rjmp	.+2      	; 0x4226 <I2C_MSTR_get+0x24>
    4224:	84 e8       	ldi	r24, 0x84	; 132
    4226:	80 93 bc 00 	sts	0x00BC, r24
    422a:	80 91 bc 00 	lds	r24, 0x00BC
    422e:	87 ff       	sbrs	r24, 7
    4230:	fc cf       	rjmp	.-8      	; 0x422a <I2C_MSTR_get+0x28>
    4232:	61 30       	cpi	r22, 0x01	; 1
    4234:	31 f4       	brne	.+12     	; 0x4242 <I2C_MSTR_get+0x40>
    4236:	80 91 b9 00 	lds	r24, 0x00B9
    423a:	88 7f       	andi	r24, 0xF8	; 248
    423c:	80 35       	cpi	r24, 0x50	; 80
    423e:	59 f4       	brne	.+22     	; 0x4256 <I2C_MSTR_get+0x54>
    4240:	05 c0       	rjmp	.+10     	; 0x424c <I2C_MSTR_get+0x4a>
    4242:	80 91 b9 00 	lds	r24, 0x00B9
    4246:	88 7f       	andi	r24, 0xF8	; 248
    4248:	88 35       	cpi	r24, 0x58	; 88
    424a:	29 f4       	brne	.+10     	; 0x4256 <I2C_MSTR_get+0x54>
    424c:	80 91 bb 00 	lds	r24, 0x00BB
    4250:	80 83       	st	Z, r24
    4252:	80 e0       	ldi	r24, 0x00	; 0
    4254:	08 95       	ret
    4256:	82 e0       	ldi	r24, 0x02	; 2
    4258:	08 95       	ret

0000425a <I2C_MSTR_send>:
    425a:	98 2f       	mov	r25, r24
    425c:	80 91 40 08 	lds	r24, 0x0840
    4260:	81 30       	cpi	r24, 0x01	; 1
    4262:	11 f0       	breq	.+4      	; 0x4268 <I2C_MSTR_send+0xe>
    4264:	85 e0       	ldi	r24, 0x05	; 5
    4266:	08 95       	ret
    4268:	80 91 41 08 	lds	r24, 0x0841
    426c:	81 30       	cpi	r24, 0x01	; 1
    426e:	11 f0       	breq	.+4      	; 0x4274 <I2C_MSTR_send+0x1a>
    4270:	8a e0       	ldi	r24, 0x0A	; 10
    4272:	08 95       	ret
    4274:	90 93 bb 00 	sts	0x00BB, r25
    4278:	84 e8       	ldi	r24, 0x84	; 132
    427a:	80 93 bc 00 	sts	0x00BC, r24
    427e:	80 91 bc 00 	lds	r24, 0x00BC
    4282:	87 ff       	sbrs	r24, 7
    4284:	fc cf       	rjmp	.-8      	; 0x427e <I2C_MSTR_send+0x24>
    4286:	80 91 b9 00 	lds	r24, 0x00B9
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	88 7f       	andi	r24, 0xF8	; 248
    428e:	90 70       	andi	r25, 0x00	; 0
    4290:	88 32       	cpi	r24, 0x28	; 40
    4292:	91 05       	cpc	r25, r1
    4294:	21 f0       	breq	.+8      	; 0x429e <I2C_MSTR_send+0x44>
    4296:	c0 97       	sbiw	r24, 0x30	; 48
    4298:	21 f4       	brne	.+8      	; 0x42a2 <I2C_MSTR_send+0x48>
    429a:	83 e0       	ldi	r24, 0x03	; 3
    429c:	08 95       	ret
    429e:	80 e0       	ldi	r24, 0x00	; 0
    42a0:	08 95       	ret
    42a2:	8c e0       	ldi	r24, 0x0C	; 12
    42a4:	08 95       	ret

000042a6 <I2C_MSTR_start>:
    42a6:	98 2f       	mov	r25, r24
    42a8:	20 91 40 08 	lds	r18, 0x0840
    42ac:	21 30       	cpi	r18, 0x01	; 1
    42ae:	11 f0       	breq	.+4      	; 0x42b4 <I2C_MSTR_start+0xe>
    42b0:	85 e0       	ldi	r24, 0x05	; 5
    42b2:	08 95       	ret
    42b4:	80 91 42 08 	lds	r24, 0x0842
    42b8:	81 30       	cpi	r24, 0x01	; 1
    42ba:	11 f4       	brne	.+4      	; 0x42c0 <I2C_MSTR_start+0x1a>
    42bc:	89 e0       	ldi	r24, 0x09	; 9
    42be:	08 95       	ret
    42c0:	20 93 41 08 	sts	0x0841, r18
    42c4:	84 ea       	ldi	r24, 0xA4	; 164
    42c6:	80 93 bc 00 	sts	0x00BC, r24
    42ca:	80 91 bc 00 	lds	r24, 0x00BC
    42ce:	87 ff       	sbrs	r24, 7
    42d0:	fc cf       	rjmp	.-8      	; 0x42ca <I2C_MSTR_start+0x24>
    42d2:	80 91 b9 00 	lds	r24, 0x00B9
    42d6:	88 7f       	andi	r24, 0xF8	; 248
    42d8:	88 30       	cpi	r24, 0x08	; 8
    42da:	39 f0       	breq	.+14     	; 0x42ea <I2C_MSTR_start+0x44>
    42dc:	80 91 b9 00 	lds	r24, 0x00B9
    42e0:	88 7f       	andi	r24, 0xF8	; 248
    42e2:	80 31       	cpi	r24, 0x10	; 16
    42e4:	11 f0       	breq	.+4      	; 0x42ea <I2C_MSTR_start+0x44>
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	08 95       	ret
    42ea:	61 30       	cpi	r22, 0x01	; 1
    42ec:	19 f4       	brne	.+6      	; 0x42f4 <I2C_MSTR_start+0x4e>
    42ee:	99 0f       	add	r25, r25
    42f0:	91 60       	ori	r25, 0x01	; 1
    42f2:	03 c0       	rjmp	.+6      	; 0x42fa <I2C_MSTR_start+0x54>
    42f4:	66 23       	and	r22, r22
    42f6:	19 f4       	brne	.+6      	; 0x42fe <I2C_MSTR_start+0x58>
    42f8:	99 0f       	add	r25, r25
    42fa:	90 93 bb 00 	sts	0x00BB, r25
    42fe:	84 e8       	ldi	r24, 0x84	; 132
    4300:	80 93 bc 00 	sts	0x00BC, r24
    4304:	80 91 bc 00 	lds	r24, 0x00BC
    4308:	87 ff       	sbrs	r24, 7
    430a:	fc cf       	rjmp	.-8      	; 0x4304 <I2C_MSTR_start+0x5e>
    430c:	61 30       	cpi	r22, 0x01	; 1
    430e:	31 f4       	brne	.+12     	; 0x431c <I2C_MSTR_start+0x76>
    4310:	80 91 b9 00 	lds	r24, 0x00B9
    4314:	88 7f       	andi	r24, 0xF8	; 248
    4316:	80 34       	cpi	r24, 0x40	; 64
    4318:	41 f4       	brne	.+16     	; 0x432a <I2C_MSTR_start+0x84>
    431a:	09 c0       	rjmp	.+18     	; 0x432e <I2C_MSTR_start+0x88>
    431c:	66 23       	and	r22, r22
    431e:	39 f4       	brne	.+14     	; 0x432e <I2C_MSTR_start+0x88>
    4320:	80 91 b9 00 	lds	r24, 0x00B9
    4324:	88 7f       	andi	r24, 0xF8	; 248
    4326:	88 31       	cpi	r24, 0x18	; 24
    4328:	11 f0       	breq	.+4      	; 0x432e <I2C_MSTR_start+0x88>
    432a:	82 e0       	ldi	r24, 0x02	; 2
    432c:	08 95       	ret
    432e:	80 e0       	ldi	r24, 0x00	; 0
    4330:	08 95       	ret

00004332 <I2C_MSTR_stop>:
    4332:	80 91 41 08 	lds	r24, 0x0841
    4336:	81 30       	cpi	r24, 0x01	; 1
    4338:	11 f0       	breq	.+4      	; 0x433e <I2C_MSTR_stop+0xc>
    433a:	8a e0       	ldi	r24, 0x0A	; 10
    433c:	08 95       	ret
    433e:	80 91 43 08 	lds	r24, 0x0843
    4342:	81 30       	cpi	r24, 0x01	; 1
    4344:	29 f4       	brne	.+10     	; 0x4350 <I2C_MSTR_stop+0x1e>
    4346:	85 e9       	ldi	r24, 0x95	; 149
    4348:	80 93 bc 00 	sts	0x00BC, r24
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	08 95       	ret
    4350:	84 e9       	ldi	r24, 0x94	; 148
    4352:	80 93 bc 00 	sts	0x00BC, r24
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	08 95       	ret

0000435a <I2C_open>:
    435a:	82 e1       	ldi	r24, 0x12	; 18
    435c:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    4360:	88 23       	and	r24, r24
    4362:	b1 f4       	brne	.+44     	; 0x4390 <I2C_open+0x36>
    4364:	10 92 40 08 	sts	0x0840, r1
    4368:	10 92 41 08 	sts	0x0841, r1
    436c:	10 92 42 08 	sts	0x0842, r1
    4370:	10 92 43 08 	sts	0x0843, r1
    4374:	10 92 44 08 	sts	0x0844, r1
    4378:	0e 94 f4 27 	call	0x4fe8	; 0x4fe8 <__I2C_init>
    437c:	87 e1       	ldi	r24, 0x17	; 23
    437e:	60 e0       	ldi	r22, 0x00	; 0
    4380:	0e 94 cb 21 	call	0x4396	; 0x4396 <I2C_set_BRG>
    4384:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <I2C_enable>
    4388:	82 e1       	ldi	r24, 0x12	; 18
    438a:	61 e0       	ldi	r22, 0x01	; 1
    438c:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    4390:	82 e1       	ldi	r24, 0x12	; 18
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	08 95       	ret

00004396 <I2C_set_BRG>:
    4396:	63 70       	andi	r22, 0x03	; 3
    4398:	60 93 b9 00 	sts	0x00B9, r22
    439c:	80 93 b8 00 	sts	0x00B8, r24
    43a0:	81 e0       	ldi	r24, 0x01	; 1
    43a2:	80 93 40 08 	sts	0x0840, r24
    43a6:	08 95       	ret

000043a8 <__ADC_init>:
    43a8:	8f e1       	ldi	r24, 0x1F	; 31
    43aa:	80 93 7c 00 	sts	0x007C, r24
    43ae:	ea e7       	ldi	r30, 0x7A	; 122
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	87 e0       	ldi	r24, 0x07	; 7
    43b4:	80 83       	st	Z, r24
    43b6:	80 81       	ld	r24, Z
    43b8:	80 68       	ori	r24, 0x80	; 128
    43ba:	80 83       	st	Z, r24
    43bc:	08 95       	ret

000043be <CBOT_init>:
    43be:	0e 94 35 27 	call	0x4e6a	; 0x4e6a <SYS_init>
    43c2:	0e 94 11 25 	call	0x4a22	; 0x4a22 <ATMEGA_open>
    43c6:	0e 94 41 24 	call	0x4882	; 0x4882 <ISR_open>
    43ca:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <TMRSRVC_open>
    43ce:	0e 94 76 25 	call	0x4aec	; 0x4aec <SPI_open>
    43d2:	0e 94 53 20 	call	0x40a6	; 0x40a6 <ATTINY_open>
    43d6:	78 94       	sei
    43d8:	08 95       	ret

000043da <CBOT_ISR_init>:
    43da:	00 00       	nop
    43dc:	08 95       	ret

000043de <__vector_16>:
    43de:	1f 92       	push	r1
    43e0:	0f 92       	push	r0
    43e2:	0f b6       	in	r0, 0x3f	; 63
    43e4:	0f 92       	push	r0
    43e6:	11 24       	eor	r1, r1
    43e8:	2f 93       	push	r18
    43ea:	3f 93       	push	r19
    43ec:	4f 93       	push	r20
    43ee:	5f 93       	push	r21
    43f0:	6f 93       	push	r22
    43f2:	7f 93       	push	r23
    43f4:	8f 93       	push	r24
    43f6:	9f 93       	push	r25
    43f8:	af 93       	push	r26
    43fa:	bf 93       	push	r27
    43fc:	ef 93       	push	r30
    43fe:	ff 93       	push	r31
    4400:	e0 91 e1 04 	lds	r30, 0x04E1
    4404:	f0 91 e2 04 	lds	r31, 0x04E2
    4408:	30 97       	sbiw	r30, 0x00	; 0
    440a:	09 f0       	breq	.+2      	; 0x440e <__vector_16+0x30>
    440c:	09 95       	icall
    440e:	ff 91       	pop	r31
    4410:	ef 91       	pop	r30
    4412:	bf 91       	pop	r27
    4414:	af 91       	pop	r26
    4416:	9f 91       	pop	r25
    4418:	8f 91       	pop	r24
    441a:	7f 91       	pop	r23
    441c:	6f 91       	pop	r22
    441e:	5f 91       	pop	r21
    4420:	4f 91       	pop	r20
    4422:	3f 91       	pop	r19
    4424:	2f 91       	pop	r18
    4426:	0f 90       	pop	r0
    4428:	0f be       	out	0x3f, r0	; 63
    442a:	0f 90       	pop	r0
    442c:	1f 90       	pop	r1
    442e:	18 95       	reti

00004430 <__vector_17>:
    4430:	1f 92       	push	r1
    4432:	0f 92       	push	r0
    4434:	0f b6       	in	r0, 0x3f	; 63
    4436:	0f 92       	push	r0
    4438:	11 24       	eor	r1, r1
    443a:	2f 93       	push	r18
    443c:	3f 93       	push	r19
    443e:	4f 93       	push	r20
    4440:	5f 93       	push	r21
    4442:	6f 93       	push	r22
    4444:	7f 93       	push	r23
    4446:	8f 93       	push	r24
    4448:	9f 93       	push	r25
    444a:	af 93       	push	r26
    444c:	bf 93       	push	r27
    444e:	ef 93       	push	r30
    4450:	ff 93       	push	r31
    4452:	e0 91 e3 04 	lds	r30, 0x04E3
    4456:	f0 91 e4 04 	lds	r31, 0x04E4
    445a:	30 97       	sbiw	r30, 0x00	; 0
    445c:	09 f0       	breq	.+2      	; 0x4460 <__vector_17+0x30>
    445e:	09 95       	icall
    4460:	ff 91       	pop	r31
    4462:	ef 91       	pop	r30
    4464:	bf 91       	pop	r27
    4466:	af 91       	pop	r26
    4468:	9f 91       	pop	r25
    446a:	8f 91       	pop	r24
    446c:	7f 91       	pop	r23
    446e:	6f 91       	pop	r22
    4470:	5f 91       	pop	r21
    4472:	4f 91       	pop	r20
    4474:	3f 91       	pop	r19
    4476:	2f 91       	pop	r18
    4478:	0f 90       	pop	r0
    447a:	0f be       	out	0x3f, r0	; 63
    447c:	0f 90       	pop	r0
    447e:	1f 90       	pop	r1
    4480:	18 95       	reti

00004482 <__vector_18>:
    4482:	1f 92       	push	r1
    4484:	0f 92       	push	r0
    4486:	0f b6       	in	r0, 0x3f	; 63
    4488:	0f 92       	push	r0
    448a:	11 24       	eor	r1, r1
    448c:	2f 93       	push	r18
    448e:	3f 93       	push	r19
    4490:	4f 93       	push	r20
    4492:	5f 93       	push	r21
    4494:	6f 93       	push	r22
    4496:	7f 93       	push	r23
    4498:	8f 93       	push	r24
    449a:	9f 93       	push	r25
    449c:	af 93       	push	r26
    449e:	bf 93       	push	r27
    44a0:	ef 93       	push	r30
    44a2:	ff 93       	push	r31
    44a4:	e0 91 e5 04 	lds	r30, 0x04E5
    44a8:	f0 91 e6 04 	lds	r31, 0x04E6
    44ac:	30 97       	sbiw	r30, 0x00	; 0
    44ae:	09 f0       	breq	.+2      	; 0x44b2 <__vector_18+0x30>
    44b0:	09 95       	icall
    44b2:	ff 91       	pop	r31
    44b4:	ef 91       	pop	r30
    44b6:	bf 91       	pop	r27
    44b8:	af 91       	pop	r26
    44ba:	9f 91       	pop	r25
    44bc:	8f 91       	pop	r24
    44be:	7f 91       	pop	r23
    44c0:	6f 91       	pop	r22
    44c2:	5f 91       	pop	r21
    44c4:	4f 91       	pop	r20
    44c6:	3f 91       	pop	r19
    44c8:	2f 91       	pop	r18
    44ca:	0f 90       	pop	r0
    44cc:	0f be       	out	0x3f, r0	; 63
    44ce:	0f 90       	pop	r0
    44d0:	1f 90       	pop	r1
    44d2:	18 95       	reti

000044d4 <__vector_9>:
    44d4:	1f 92       	push	r1
    44d6:	0f 92       	push	r0
    44d8:	0f b6       	in	r0, 0x3f	; 63
    44da:	0f 92       	push	r0
    44dc:	11 24       	eor	r1, r1
    44de:	2f 93       	push	r18
    44e0:	3f 93       	push	r19
    44e2:	4f 93       	push	r20
    44e4:	5f 93       	push	r21
    44e6:	6f 93       	push	r22
    44e8:	7f 93       	push	r23
    44ea:	8f 93       	push	r24
    44ec:	9f 93       	push	r25
    44ee:	af 93       	push	r26
    44f0:	bf 93       	push	r27
    44f2:	ef 93       	push	r30
    44f4:	ff 93       	push	r31
    44f6:	e0 91 d3 04 	lds	r30, 0x04D3
    44fa:	f0 91 d4 04 	lds	r31, 0x04D4
    44fe:	30 97       	sbiw	r30, 0x00	; 0
    4500:	09 f0       	breq	.+2      	; 0x4504 <__vector_9+0x30>
    4502:	09 95       	icall
    4504:	ff 91       	pop	r31
    4506:	ef 91       	pop	r30
    4508:	bf 91       	pop	r27
    450a:	af 91       	pop	r26
    450c:	9f 91       	pop	r25
    450e:	8f 91       	pop	r24
    4510:	7f 91       	pop	r23
    4512:	6f 91       	pop	r22
    4514:	5f 91       	pop	r21
    4516:	4f 91       	pop	r20
    4518:	3f 91       	pop	r19
    451a:	2f 91       	pop	r18
    451c:	0f 90       	pop	r0
    451e:	0f be       	out	0x3f, r0	; 63
    4520:	0f 90       	pop	r0
    4522:	1f 90       	pop	r1
    4524:	18 95       	reti

00004526 <__vector_10>:
    4526:	1f 92       	push	r1
    4528:	0f 92       	push	r0
    452a:	0f b6       	in	r0, 0x3f	; 63
    452c:	0f 92       	push	r0
    452e:	11 24       	eor	r1, r1
    4530:	2f 93       	push	r18
    4532:	3f 93       	push	r19
    4534:	4f 93       	push	r20
    4536:	5f 93       	push	r21
    4538:	6f 93       	push	r22
    453a:	7f 93       	push	r23
    453c:	8f 93       	push	r24
    453e:	9f 93       	push	r25
    4540:	af 93       	push	r26
    4542:	bf 93       	push	r27
    4544:	ef 93       	push	r30
    4546:	ff 93       	push	r31
    4548:	e0 91 d5 04 	lds	r30, 0x04D5
    454c:	f0 91 d6 04 	lds	r31, 0x04D6
    4550:	30 97       	sbiw	r30, 0x00	; 0
    4552:	09 f0       	breq	.+2      	; 0x4556 <__vector_10+0x30>
    4554:	09 95       	icall
    4556:	ff 91       	pop	r31
    4558:	ef 91       	pop	r30
    455a:	bf 91       	pop	r27
    455c:	af 91       	pop	r26
    455e:	9f 91       	pop	r25
    4560:	8f 91       	pop	r24
    4562:	7f 91       	pop	r23
    4564:	6f 91       	pop	r22
    4566:	5f 91       	pop	r21
    4568:	4f 91       	pop	r20
    456a:	3f 91       	pop	r19
    456c:	2f 91       	pop	r18
    456e:	0f 90       	pop	r0
    4570:	0f be       	out	0x3f, r0	; 63
    4572:	0f 90       	pop	r0
    4574:	1f 90       	pop	r1
    4576:	18 95       	reti

00004578 <__vector_11>:
    4578:	1f 92       	push	r1
    457a:	0f 92       	push	r0
    457c:	0f b6       	in	r0, 0x3f	; 63
    457e:	0f 92       	push	r0
    4580:	11 24       	eor	r1, r1
    4582:	2f 93       	push	r18
    4584:	3f 93       	push	r19
    4586:	4f 93       	push	r20
    4588:	5f 93       	push	r21
    458a:	6f 93       	push	r22
    458c:	7f 93       	push	r23
    458e:	8f 93       	push	r24
    4590:	9f 93       	push	r25
    4592:	af 93       	push	r26
    4594:	bf 93       	push	r27
    4596:	ef 93       	push	r30
    4598:	ff 93       	push	r31
    459a:	e0 91 d7 04 	lds	r30, 0x04D7
    459e:	f0 91 d8 04 	lds	r31, 0x04D8
    45a2:	30 97       	sbiw	r30, 0x00	; 0
    45a4:	09 f0       	breq	.+2      	; 0x45a8 <__vector_11+0x30>
    45a6:	09 95       	icall
    45a8:	ff 91       	pop	r31
    45aa:	ef 91       	pop	r30
    45ac:	bf 91       	pop	r27
    45ae:	af 91       	pop	r26
    45b0:	9f 91       	pop	r25
    45b2:	8f 91       	pop	r24
    45b4:	7f 91       	pop	r23
    45b6:	6f 91       	pop	r22
    45b8:	5f 91       	pop	r21
    45ba:	4f 91       	pop	r20
    45bc:	3f 91       	pop	r19
    45be:	2f 91       	pop	r18
    45c0:	0f 90       	pop	r0
    45c2:	0f be       	out	0x3f, r0	; 63
    45c4:	0f 90       	pop	r0
    45c6:	1f 90       	pop	r1
    45c8:	18 95       	reti

000045ca <__vector_13>:
    45ca:	1f 92       	push	r1
    45cc:	0f 92       	push	r0
    45ce:	0f b6       	in	r0, 0x3f	; 63
    45d0:	0f 92       	push	r0
    45d2:	11 24       	eor	r1, r1
    45d4:	2f 93       	push	r18
    45d6:	3f 93       	push	r19
    45d8:	4f 93       	push	r20
    45da:	5f 93       	push	r21
    45dc:	6f 93       	push	r22
    45de:	7f 93       	push	r23
    45e0:	8f 93       	push	r24
    45e2:	9f 93       	push	r25
    45e4:	af 93       	push	r26
    45e6:	bf 93       	push	r27
    45e8:	ef 93       	push	r30
    45ea:	ff 93       	push	r31
    45ec:	e0 91 db 04 	lds	r30, 0x04DB
    45f0:	f0 91 dc 04 	lds	r31, 0x04DC
    45f4:	30 97       	sbiw	r30, 0x00	; 0
    45f6:	09 f0       	breq	.+2      	; 0x45fa <__vector_13+0x30>
    45f8:	09 95       	icall
    45fa:	ff 91       	pop	r31
    45fc:	ef 91       	pop	r30
    45fe:	bf 91       	pop	r27
    4600:	af 91       	pop	r26
    4602:	9f 91       	pop	r25
    4604:	8f 91       	pop	r24
    4606:	7f 91       	pop	r23
    4608:	6f 91       	pop	r22
    460a:	5f 91       	pop	r21
    460c:	4f 91       	pop	r20
    460e:	3f 91       	pop	r19
    4610:	2f 91       	pop	r18
    4612:	0f 90       	pop	r0
    4614:	0f be       	out	0x3f, r0	; 63
    4616:	0f 90       	pop	r0
    4618:	1f 90       	pop	r1
    461a:	18 95       	reti

0000461c <__vector_14>:
    461c:	1f 92       	push	r1
    461e:	0f 92       	push	r0
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	0f 92       	push	r0
    4624:	11 24       	eor	r1, r1
    4626:	2f 93       	push	r18
    4628:	3f 93       	push	r19
    462a:	4f 93       	push	r20
    462c:	5f 93       	push	r21
    462e:	6f 93       	push	r22
    4630:	7f 93       	push	r23
    4632:	8f 93       	push	r24
    4634:	9f 93       	push	r25
    4636:	af 93       	push	r26
    4638:	bf 93       	push	r27
    463a:	ef 93       	push	r30
    463c:	ff 93       	push	r31
    463e:	e0 91 dd 04 	lds	r30, 0x04DD
    4642:	f0 91 de 04 	lds	r31, 0x04DE
    4646:	30 97       	sbiw	r30, 0x00	; 0
    4648:	09 f0       	breq	.+2      	; 0x464c <__vector_14+0x30>
    464a:	09 95       	icall
    464c:	ff 91       	pop	r31
    464e:	ef 91       	pop	r30
    4650:	bf 91       	pop	r27
    4652:	af 91       	pop	r26
    4654:	9f 91       	pop	r25
    4656:	8f 91       	pop	r24
    4658:	7f 91       	pop	r23
    465a:	6f 91       	pop	r22
    465c:	5f 91       	pop	r21
    465e:	4f 91       	pop	r20
    4660:	3f 91       	pop	r19
    4662:	2f 91       	pop	r18
    4664:	0f 90       	pop	r0
    4666:	0f be       	out	0x3f, r0	; 63
    4668:	0f 90       	pop	r0
    466a:	1f 90       	pop	r1
    466c:	18 95       	reti

0000466e <__vector_12>:
    466e:	1f 92       	push	r1
    4670:	0f 92       	push	r0
    4672:	0f b6       	in	r0, 0x3f	; 63
    4674:	0f 92       	push	r0
    4676:	11 24       	eor	r1, r1
    4678:	2f 93       	push	r18
    467a:	3f 93       	push	r19
    467c:	4f 93       	push	r20
    467e:	5f 93       	push	r21
    4680:	6f 93       	push	r22
    4682:	7f 93       	push	r23
    4684:	8f 93       	push	r24
    4686:	9f 93       	push	r25
    4688:	af 93       	push	r26
    468a:	bf 93       	push	r27
    468c:	ef 93       	push	r30
    468e:	ff 93       	push	r31
    4690:	e0 91 d9 04 	lds	r30, 0x04D9
    4694:	f0 91 da 04 	lds	r31, 0x04DA
    4698:	30 97       	sbiw	r30, 0x00	; 0
    469a:	09 f0       	breq	.+2      	; 0x469e <__vector_12+0x30>
    469c:	09 95       	icall
    469e:	ff 91       	pop	r31
    46a0:	ef 91       	pop	r30
    46a2:	bf 91       	pop	r27
    46a4:	af 91       	pop	r26
    46a6:	9f 91       	pop	r25
    46a8:	8f 91       	pop	r24
    46aa:	7f 91       	pop	r23
    46ac:	6f 91       	pop	r22
    46ae:	5f 91       	pop	r21
    46b0:	4f 91       	pop	r20
    46b2:	3f 91       	pop	r19
    46b4:	2f 91       	pop	r18
    46b6:	0f 90       	pop	r0
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	0f 90       	pop	r0
    46bc:	1f 90       	pop	r1
    46be:	18 95       	reti

000046c0 <__vector_15>:
    46c0:	1f 92       	push	r1
    46c2:	0f 92       	push	r0
    46c4:	0f b6       	in	r0, 0x3f	; 63
    46c6:	0f 92       	push	r0
    46c8:	11 24       	eor	r1, r1
    46ca:	2f 93       	push	r18
    46cc:	3f 93       	push	r19
    46ce:	4f 93       	push	r20
    46d0:	5f 93       	push	r21
    46d2:	6f 93       	push	r22
    46d4:	7f 93       	push	r23
    46d6:	8f 93       	push	r24
    46d8:	9f 93       	push	r25
    46da:	af 93       	push	r26
    46dc:	bf 93       	push	r27
    46de:	ef 93       	push	r30
    46e0:	ff 93       	push	r31
    46e2:	e0 91 df 04 	lds	r30, 0x04DF
    46e6:	f0 91 e0 04 	lds	r31, 0x04E0
    46ea:	30 97       	sbiw	r30, 0x00	; 0
    46ec:	09 f0       	breq	.+2      	; 0x46f0 <__vector_15+0x30>
    46ee:	09 95       	icall
    46f0:	ff 91       	pop	r31
    46f2:	ef 91       	pop	r30
    46f4:	bf 91       	pop	r27
    46f6:	af 91       	pop	r26
    46f8:	9f 91       	pop	r25
    46fa:	8f 91       	pop	r24
    46fc:	7f 91       	pop	r23
    46fe:	6f 91       	pop	r22
    4700:	5f 91       	pop	r21
    4702:	4f 91       	pop	r20
    4704:	3f 91       	pop	r19
    4706:	2f 91       	pop	r18
    4708:	0f 90       	pop	r0
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	0f 90       	pop	r0
    470e:	1f 90       	pop	r1
    4710:	18 95       	reti

00004712 <__vector_4>:
    4712:	1f 92       	push	r1
    4714:	0f 92       	push	r0
    4716:	0f b6       	in	r0, 0x3f	; 63
    4718:	0f 92       	push	r0
    471a:	11 24       	eor	r1, r1
    471c:	2f 93       	push	r18
    471e:	3f 93       	push	r19
    4720:	4f 93       	push	r20
    4722:	5f 93       	push	r21
    4724:	6f 93       	push	r22
    4726:	7f 93       	push	r23
    4728:	8f 93       	push	r24
    472a:	9f 93       	push	r25
    472c:	af 93       	push	r26
    472e:	bf 93       	push	r27
    4730:	ef 93       	push	r30
    4732:	ff 93       	push	r31
    4734:	e0 91 c9 04 	lds	r30, 0x04C9
    4738:	f0 91 ca 04 	lds	r31, 0x04CA
    473c:	30 97       	sbiw	r30, 0x00	; 0
    473e:	09 f0       	breq	.+2      	; 0x4742 <__vector_4+0x30>
    4740:	09 95       	icall
    4742:	ff 91       	pop	r31
    4744:	ef 91       	pop	r30
    4746:	bf 91       	pop	r27
    4748:	af 91       	pop	r26
    474a:	9f 91       	pop	r25
    474c:	8f 91       	pop	r24
    474e:	7f 91       	pop	r23
    4750:	6f 91       	pop	r22
    4752:	5f 91       	pop	r21
    4754:	4f 91       	pop	r20
    4756:	3f 91       	pop	r19
    4758:	2f 91       	pop	r18
    475a:	0f 90       	pop	r0
    475c:	0f be       	out	0x3f, r0	; 63
    475e:	0f 90       	pop	r0
    4760:	1f 90       	pop	r1
    4762:	18 95       	reti

00004764 <__vector_5>:
    4764:	1f 92       	push	r1
    4766:	0f 92       	push	r0
    4768:	0f b6       	in	r0, 0x3f	; 63
    476a:	0f 92       	push	r0
    476c:	11 24       	eor	r1, r1
    476e:	2f 93       	push	r18
    4770:	3f 93       	push	r19
    4772:	4f 93       	push	r20
    4774:	5f 93       	push	r21
    4776:	6f 93       	push	r22
    4778:	7f 93       	push	r23
    477a:	8f 93       	push	r24
    477c:	9f 93       	push	r25
    477e:	af 93       	push	r26
    4780:	bf 93       	push	r27
    4782:	ef 93       	push	r30
    4784:	ff 93       	push	r31
    4786:	e0 91 cb 04 	lds	r30, 0x04CB
    478a:	f0 91 cc 04 	lds	r31, 0x04CC
    478e:	30 97       	sbiw	r30, 0x00	; 0
    4790:	09 f0       	breq	.+2      	; 0x4794 <__vector_5+0x30>
    4792:	09 95       	icall
    4794:	ff 91       	pop	r31
    4796:	ef 91       	pop	r30
    4798:	bf 91       	pop	r27
    479a:	af 91       	pop	r26
    479c:	9f 91       	pop	r25
    479e:	8f 91       	pop	r24
    47a0:	7f 91       	pop	r23
    47a2:	6f 91       	pop	r22
    47a4:	5f 91       	pop	r21
    47a6:	4f 91       	pop	r20
    47a8:	3f 91       	pop	r19
    47aa:	2f 91       	pop	r18
    47ac:	0f 90       	pop	r0
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	0f 90       	pop	r0
    47b2:	1f 90       	pop	r1
    47b4:	18 95       	reti

000047b6 <__vector_6>:
    47b6:	1f 92       	push	r1
    47b8:	0f 92       	push	r0
    47ba:	0f b6       	in	r0, 0x3f	; 63
    47bc:	0f 92       	push	r0
    47be:	11 24       	eor	r1, r1
    47c0:	2f 93       	push	r18
    47c2:	3f 93       	push	r19
    47c4:	4f 93       	push	r20
    47c6:	5f 93       	push	r21
    47c8:	6f 93       	push	r22
    47ca:	7f 93       	push	r23
    47cc:	8f 93       	push	r24
    47ce:	9f 93       	push	r25
    47d0:	af 93       	push	r26
    47d2:	bf 93       	push	r27
    47d4:	ef 93       	push	r30
    47d6:	ff 93       	push	r31
    47d8:	e0 91 cd 04 	lds	r30, 0x04CD
    47dc:	f0 91 ce 04 	lds	r31, 0x04CE
    47e0:	30 97       	sbiw	r30, 0x00	; 0
    47e2:	09 f0       	breq	.+2      	; 0x47e6 <__vector_6+0x30>
    47e4:	09 95       	icall
    47e6:	ff 91       	pop	r31
    47e8:	ef 91       	pop	r30
    47ea:	bf 91       	pop	r27
    47ec:	af 91       	pop	r26
    47ee:	9f 91       	pop	r25
    47f0:	8f 91       	pop	r24
    47f2:	7f 91       	pop	r23
    47f4:	6f 91       	pop	r22
    47f6:	5f 91       	pop	r21
    47f8:	4f 91       	pop	r20
    47fa:	3f 91       	pop	r19
    47fc:	2f 91       	pop	r18
    47fe:	0f 90       	pop	r0
    4800:	0f be       	out	0x3f, r0	; 63
    4802:	0f 90       	pop	r0
    4804:	1f 90       	pop	r1
    4806:	18 95       	reti

00004808 <__vector_7>:
    4808:	1f 92       	push	r1
    480a:	0f 92       	push	r0
    480c:	0f b6       	in	r0, 0x3f	; 63
    480e:	0f 92       	push	r0
    4810:	11 24       	eor	r1, r1
    4812:	2f 93       	push	r18
    4814:	3f 93       	push	r19
    4816:	4f 93       	push	r20
    4818:	5f 93       	push	r21
    481a:	6f 93       	push	r22
    481c:	7f 93       	push	r23
    481e:	8f 93       	push	r24
    4820:	9f 93       	push	r25
    4822:	af 93       	push	r26
    4824:	bf 93       	push	r27
    4826:	ef 93       	push	r30
    4828:	ff 93       	push	r31
    482a:	e0 91 cf 04 	lds	r30, 0x04CF
    482e:	f0 91 d0 04 	lds	r31, 0x04D0
    4832:	30 97       	sbiw	r30, 0x00	; 0
    4834:	09 f0       	breq	.+2      	; 0x4838 <__vector_7+0x30>
    4836:	09 95       	icall
    4838:	ff 91       	pop	r31
    483a:	ef 91       	pop	r30
    483c:	bf 91       	pop	r27
    483e:	af 91       	pop	r26
    4840:	9f 91       	pop	r25
    4842:	8f 91       	pop	r24
    4844:	7f 91       	pop	r23
    4846:	6f 91       	pop	r22
    4848:	5f 91       	pop	r21
    484a:	4f 91       	pop	r20
    484c:	3f 91       	pop	r19
    484e:	2f 91       	pop	r18
    4850:	0f 90       	pop	r0
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	0f 90       	pop	r0
    4856:	1f 90       	pop	r1
    4858:	18 95       	reti

0000485a <ISR_attach>:
    485a:	e8 2f       	mov	r30, r24
    485c:	80 32       	cpi	r24, 0x20	; 32
    485e:	68 f4       	brcc	.+26     	; 0x487a <ISR_attach+0x20>
    4860:	80 51       	subi	r24, 0x10	; 16
    4862:	83 30       	cpi	r24, 0x03	; 3
    4864:	50 f0       	brcs	.+20     	; 0x487a <ISR_attach+0x20>
    4866:	f0 e0       	ldi	r31, 0x00	; 0
    4868:	ee 0f       	add	r30, r30
    486a:	ff 1f       	adc	r31, r31
    486c:	ef 53       	subi	r30, 0x3F	; 63
    486e:	fb 4f       	sbci	r31, 0xFB	; 251
    4870:	20 81       	ld	r18, Z
    4872:	31 81       	ldd	r19, Z+1	; 0x01
    4874:	71 83       	std	Z+1, r23	; 0x01
    4876:	60 83       	st	Z, r22
    4878:	02 c0       	rjmp	.+4      	; 0x487e <ISR_attach+0x24>
    487a:	20 e0       	ldi	r18, 0x00	; 0
    487c:	30 e0       	ldi	r19, 0x00	; 0
    487e:	c9 01       	movw	r24, r18
    4880:	08 95       	ret

00004882 <ISR_open>:
    4882:	80 e1       	ldi	r24, 0x10	; 16
    4884:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    4888:	88 23       	and	r24, r24
    488a:	61 f4       	brne	.+24     	; 0x48a4 <ISR_open+0x22>
    488c:	e1 ec       	ldi	r30, 0xC1	; 193
    488e:	f4 e0       	ldi	r31, 0x04	; 4
    4890:	11 92       	st	Z+, r1
    4892:	11 92       	st	Z+, r1
    4894:	85 e0       	ldi	r24, 0x05	; 5
    4896:	e1 30       	cpi	r30, 0x01	; 1
    4898:	f8 07       	cpc	r31, r24
    489a:	d1 f7       	brne	.-12     	; 0x4890 <ISR_open+0xe>
    489c:	80 e1       	ldi	r24, 0x10	; 16
    489e:	61 e0       	ldi	r22, 0x01	; 1
    48a0:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    48a4:	80 e1       	ldi	r24, 0x10	; 16
    48a6:	91 e0       	ldi	r25, 0x01	; 1
    48a8:	08 95       	ret

000048aa <__LCD_init>:
    48aa:	23 9a       	sbi	0x04, 3	; 4
    48ac:	08 95       	ret

000048ae <__LCD_putchar>:
    48ae:	ff 92       	push	r15
    48b0:	0f 93       	push	r16
    48b2:	1f 93       	push	r17
    48b4:	cf 93       	push	r28
    48b6:	df 93       	push	r29
    48b8:	f8 2e       	mov	r15, r24
    48ba:	8a e0       	ldi	r24, 0x0A	; 10
    48bc:	f8 16       	cp	r15, r24
    48be:	b1 f0       	breq	.+44     	; 0x48ec <__LCD_putchar+0x3e>
    48c0:	8f 15       	cp	r24, r15
    48c2:	48 f0       	brcs	.+18     	; 0x48d6 <__LCD_putchar+0x28>
    48c4:	e8 e0       	ldi	r30, 0x08	; 8
    48c6:	fe 16       	cp	r15, r30
    48c8:	b9 f1       	breq	.+110    	; 0x4938 <__LCD_putchar+0x8a>
    48ca:	ef 15       	cp	r30, r15
    48cc:	38 f1       	brcs	.+78     	; 0x491c <__LCD_putchar+0x6e>
    48ce:	f7 e0       	ldi	r31, 0x07	; 7
    48d0:	ff 16       	cp	r15, r31
    48d2:	51 f4       	brne	.+20     	; 0x48e8 <__LCD_putchar+0x3a>
    48d4:	3b c0       	rjmp	.+118    	; 0x494c <__LCD_putchar+0x9e>
    48d6:	8d e0       	ldi	r24, 0x0D	; 13
    48d8:	f8 16       	cp	r15, r24
    48da:	59 f0       	breq	.+22     	; 0x48f2 <__LCD_putchar+0x44>
    48dc:	eb e1       	ldi	r30, 0x1B	; 27
    48de:	fe 16       	cp	r15, r30
    48e0:	89 f0       	breq	.+34     	; 0x4904 <__LCD_putchar+0x56>
    48e2:	fc e0       	ldi	r31, 0x0C	; 12
    48e4:	ff 16       	cp	r15, r31
    48e6:	41 f0       	breq	.+16     	; 0x48f8 <__LCD_putchar+0x4a>
    48e8:	01 e0       	ldi	r16, 0x01	; 1
    48ea:	41 c0       	rjmp	.+130    	; 0x496e <__LCD_putchar+0xc0>
    48ec:	10 92 19 08 	sts	0x0819, r1
    48f0:	03 c0       	rjmp	.+6      	; 0x48f8 <__LCD_putchar+0x4a>
    48f2:	10 92 19 08 	sts	0x0819, r1
    48f6:	3a c0       	rjmp	.+116    	; 0x496c <__LCD_putchar+0xbe>
    48f8:	80 91 1a 08 	lds	r24, 0x081A
    48fc:	81 50       	subi	r24, 0x01	; 1
    48fe:	80 93 1a 08 	sts	0x081A, r24
    4902:	34 c0       	rjmp	.+104    	; 0x496c <__LCD_putchar+0xbe>
    4904:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_clear>
    4908:	14 c0       	rjmp	.+40     	; 0x4932 <__LCD_putchar+0x84>
    490a:	80 e0       	ldi	r24, 0x00	; 0
    490c:	61 e0       	ldi	r22, 0x01	; 1
    490e:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    4912:	80 91 19 08 	lds	r24, 0x0819
    4916:	8f 5f       	subi	r24, 0xFF	; 255
    4918:	80 93 19 08 	sts	0x0819, r24
    491c:	80 91 19 08 	lds	r24, 0x0819
    4920:	87 ff       	sbrs	r24, 7
    4922:	f3 cf       	rjmp	.-26     	; 0x490a <__LCD_putchar+0x5c>
    4924:	10 92 19 08 	sts	0x0819, r1
    4928:	80 91 1a 08 	lds	r24, 0x081A
    492c:	81 50       	subi	r24, 0x01	; 1
    492e:	80 93 1a 08 	sts	0x081A, r24
    4932:	00 e0       	ldi	r16, 0x00	; 0
    4934:	11 e0       	ldi	r17, 0x01	; 1
    4936:	1c c0       	rjmp	.+56     	; 0x4970 <__LCD_putchar+0xc2>
    4938:	80 91 19 08 	lds	r24, 0x0819
    493c:	88 23       	and	r24, r24
    493e:	b1 f0       	breq	.+44     	; 0x496c <__LCD_putchar+0xbe>
    4940:	80 91 19 08 	lds	r24, 0x0819
    4944:	86 50       	subi	r24, 0x06	; 6
    4946:	80 93 19 08 	sts	0x0819, r24
    494a:	10 c0       	rjmp	.+32     	; 0x496c <__LCD_putchar+0xbe>
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <SPKR_open>
    4952:	64 ef       	ldi	r22, 0xF4	; 244
    4954:	71 e0       	ldi	r23, 0x01	; 1
    4956:	80 e0       	ldi	r24, 0x00	; 0
    4958:	90 e0       	ldi	r25, 0x00	; 0
    495a:	4d e7       	ldi	r20, 0x7D	; 125
    495c:	50 e0       	ldi	r21, 0x00	; 0
    495e:	24 e6       	ldi	r18, 0x64	; 100
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	0e 94 71 26 	call	0x4ce2	; 0x4ce2 <SPKR_play_beep>
    4966:	81 e0       	ldi	r24, 0x01	; 1
    4968:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <SPKR_close>
    496c:	00 e0       	ldi	r16, 0x00	; 0
    496e:	10 e0       	ldi	r17, 0x00	; 0
    4970:	80 91 1a 08 	lds	r24, 0x081A
    4974:	60 91 19 08 	lds	r22, 0x0819
    4978:	0e 94 76 1a 	call	0x34ec	; 0x34ec <LCD_set_PGC_addr>
    497c:	00 23       	and	r16, r16
    497e:	51 f1       	breq	.+84     	; 0x49d4 <__LCD_putchar+0x126>
    4980:	85 e0       	ldi	r24, 0x05	; 5
    4982:	f8 9e       	mul	r15, r24
    4984:	c0 01       	movw	r24, r0
    4986:	11 24       	eor	r1, r1
    4988:	ec 01       	movw	r28, r24
    498a:	c3 55       	subi	r28, 0x53	; 83
    498c:	df 4f       	sbci	r29, 0xFF	; 255
    498e:	8c 01       	movw	r16, r24
    4990:	0e 54       	subi	r16, 0x4E	; 78
    4992:	1f 4f       	sbci	r17, 0xFF	; 255
    4994:	fe 01       	movw	r30, r28
    4996:	84 91       	lpm	r24, Z+
    4998:	61 e0       	ldi	r22, 0x01	; 1
    499a:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    499e:	21 96       	adiw	r28, 0x01	; 1
    49a0:	c0 17       	cp	r28, r16
    49a2:	d1 07       	cpc	r29, r17
    49a4:	b9 f7       	brne	.-18     	; 0x4994 <__LCD_putchar+0xe6>
    49a6:	80 e0       	ldi	r24, 0x00	; 0
    49a8:	61 e0       	ldi	r22, 0x01	; 1
    49aa:	0e 94 8f 1a 	call	0x351e	; 0x351e <LCD_write>
    49ae:	80 91 19 08 	lds	r24, 0x0819
    49b2:	8a 5f       	subi	r24, 0xFA	; 250
    49b4:	80 93 19 08 	sts	0x0819, r24
    49b8:	80 91 19 08 	lds	r24, 0x0819
    49bc:	90 e0       	ldi	r25, 0x00	; 0
    49be:	8c 37       	cpi	r24, 0x7C	; 124
    49c0:	91 05       	cpc	r25, r1
    49c2:	3c f0       	brlt	.+14     	; 0x49d2 <__LCD_putchar+0x124>
    49c4:	10 92 19 08 	sts	0x0819, r1
    49c8:	80 91 1a 08 	lds	r24, 0x081A
    49cc:	81 50       	subi	r24, 0x01	; 1
    49ce:	80 93 1a 08 	sts	0x081A, r24
    49d2:	11 e0       	ldi	r17, 0x01	; 1
    49d4:	80 91 1a 08 	lds	r24, 0x081A
    49d8:	83 70       	andi	r24, 0x03	; 3
    49da:	80 93 1a 08 	sts	0x081A, r24
    49de:	11 30       	cpi	r17, 0x01	; 1
    49e0:	59 f4       	brne	.+22     	; 0x49f8 <__LCD_putchar+0x14a>
    49e2:	80 91 1b 08 	lds	r24, 0x081B
    49e6:	81 30       	cpi	r24, 0x01	; 1
    49e8:	39 f4       	brne	.+14     	; 0x49f8 <__LCD_putchar+0x14a>
    49ea:	e0 91 1c 08 	lds	r30, 0x081C
    49ee:	f0 91 1d 08 	lds	r31, 0x081D
    49f2:	30 97       	sbiw	r30, 0x00	; 0
    49f4:	09 f0       	breq	.+2      	; 0x49f8 <__LCD_putchar+0x14a>
    49f6:	09 95       	icall
    49f8:	80 e0       	ldi	r24, 0x00	; 0
    49fa:	90 e0       	ldi	r25, 0x00	; 0
    49fc:	df 91       	pop	r29
    49fe:	cf 91       	pop	r28
    4a00:	1f 91       	pop	r17
    4a02:	0f 91       	pop	r16
    4a04:	ff 90       	pop	r15
    4a06:	08 95       	ret

00004a08 <__LED_clr_pattern>:
    4a08:	85 fd       	sbrc	r24, 5
    4a0a:	5d 98       	cbi	0x0b, 5	; 11
    4a0c:	86 fd       	sbrc	r24, 6
    4a0e:	5e 98       	cbi	0x0b, 6	; 11
    4a10:	08 95       	ret

00004a12 <__LED_init>:
    4a12:	55 9a       	sbi	0x0a, 5	; 10
    4a14:	56 9a       	sbi	0x0a, 6	; 10
    4a16:	08 95       	ret

00004a18 <__LED_set_pattern>:
    4a18:	85 fd       	sbrc	r24, 5
    4a1a:	5d 9a       	sbi	0x0b, 5	; 11
    4a1c:	86 fd       	sbrc	r24, 6
    4a1e:	5e 9a       	sbi	0x0b, 6	; 11
    4a20:	08 95       	ret

00004a22 <ATMEGA_open>:
    4a22:	80 e0       	ldi	r24, 0x00	; 0
    4a24:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    4a28:	88 23       	and	r24, r24
    4a2a:	51 f4       	brne	.+20     	; 0x4a40 <ATMEGA_open+0x1e>
    4a2c:	f8 94       	cli
    4a2e:	0e 94 08 28 	call	0x5010	; 0x5010 <__ATMEGA_init>
    4a32:	81 e0       	ldi	r24, 0x01	; 1
    4a34:	0e 94 23 25 	call	0x4a46	; 0x4a46 <ATMEGA_set_clk_mode>
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	61 e0       	ldi	r22, 0x01	; 1
    4a3c:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    4a40:	80 e0       	ldi	r24, 0x00	; 0
    4a42:	91 e0       	ldi	r25, 0x01	; 1
    4a44:	08 95       	ret

00004a46 <ATMEGA_set_clk_mode>:
    4a46:	81 30       	cpi	r24, 0x01	; 1
    4a48:	49 f0       	breq	.+18     	; 0x4a5c <ATMEGA_set_clk_mode+0x16>
    4a4a:	f8 94       	cli
    4a4c:	81 30       	cpi	r24, 0x01	; 1
    4a4e:	20 f1       	brcs	.+72     	; 0x4a98 <ATMEGA_set_clk_mode+0x52>
    4a50:	82 30       	cpi	r24, 0x02	; 2
    4a52:	b1 f0       	breq	.+44     	; 0x4a80 <ATMEGA_set_clk_mode+0x3a>
    4a54:	83 30       	cpi	r24, 0x03	; 3
    4a56:	09 f0       	breq	.+2      	; 0x4a5a <ATMEGA_set_clk_mode+0x14>
    4a58:	45 c0       	rjmp	.+138    	; 0x4ae4 <ATMEGA_set_clk_mode+0x9e>
    4a5a:	17 c0       	rjmp	.+46     	; 0x4a8a <ATMEGA_set_clk_mode+0x44>
    4a5c:	2c 9a       	sbi	0x05, 4	; 5
    4a5e:	80 e8       	ldi	r24, 0x80	; 128
    4a60:	80 93 61 00 	sts	0x0061, r24
    4a64:	10 92 61 00 	sts	0x0061, r1
    4a68:	80 e0       	ldi	r24, 0x00	; 0
    4a6a:	90 e0       	ldi	r25, 0x00	; 0
    4a6c:	00 00       	nop
    4a6e:	01 96       	adiw	r24, 0x01	; 1
    4a70:	88 32       	cpi	r24, 0x28	; 40
    4a72:	91 05       	cpc	r25, r1
    4a74:	d9 f7       	brne	.-10     	; 0x4a6c <ATMEGA_set_clk_mode+0x26>
    4a76:	10 92 68 00 	sts	0x0068, r1
    4a7a:	10 92 6b 00 	sts	0x006B, r1
    4a7e:	08 95       	ret
    4a80:	80 e8       	ldi	r24, 0x80	; 128
    4a82:	80 93 61 00 	sts	0x0061, r24
    4a86:	83 e0       	ldi	r24, 0x03	; 3
    4a88:	04 c0       	rjmp	.+8      	; 0x4a92 <ATMEGA_set_clk_mode+0x4c>
    4a8a:	80 e8       	ldi	r24, 0x80	; 128
    4a8c:	80 93 61 00 	sts	0x0061, r24
    4a90:	88 e0       	ldi	r24, 0x08	; 8
    4a92:	80 93 61 00 	sts	0x0061, r24
    4a96:	28 c0       	rjmp	.+80     	; 0x4ae8 <ATMEGA_set_clk_mode+0xa2>
    4a98:	80 e0       	ldi	r24, 0x00	; 0
    4a9a:	90 e0       	ldi	r25, 0x00	; 0
    4a9c:	00 00       	nop
    4a9e:	01 96       	adiw	r24, 0x01	; 1
    4aa0:	2d e6       	ldi	r18, 0x6D	; 109
    4aa2:	80 36       	cpi	r24, 0x60	; 96
    4aa4:	92 07       	cpc	r25, r18
    4aa6:	d1 f7       	brne	.-12     	; 0x4a9c <ATMEGA_set_clk_mode+0x56>
    4aa8:	2c 98       	cbi	0x05, 4	; 5
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	00 00       	nop
    4ab0:	01 96       	adiw	r24, 0x01	; 1
    4ab2:	2d e6       	ldi	r18, 0x6D	; 109
    4ab4:	80 36       	cpi	r24, 0x60	; 96
    4ab6:	92 07       	cpc	r25, r18
    4ab8:	d1 f7       	brne	.-12     	; 0x4aae <ATMEGA_set_clk_mode+0x68>
    4aba:	10 92 7a 00 	sts	0x007A, r1
    4abe:	8f ef       	ldi	r24, 0xFF	; 255
    4ac0:	80 93 64 00 	sts	0x0064, r24
    4ac4:	80 91 68 00 	lds	r24, 0x0068
    4ac8:	81 60       	ori	r24, 0x01	; 1
    4aca:	80 93 68 00 	sts	0x0068, r24
    4ace:	80 91 6b 00 	lds	r24, 0x006B
    4ad2:	84 60       	ori	r24, 0x04	; 4
    4ad4:	80 93 6b 00 	sts	0x006B, r24
    4ad8:	78 94       	sei
    4ada:	83 b7       	in	r24, 0x33	; 51
    4adc:	81 60       	ori	r24, 0x01	; 1
    4ade:	83 bf       	out	0x33, r24	; 51
    4ae0:	88 95       	sleep
    4ae2:	08 95       	ret
    4ae4:	82 30       	cpi	r24, 0x02	; 2
    4ae6:	08 f0       	brcs	.+2      	; 0x4aea <ATMEGA_set_clk_mode+0xa4>
    4ae8:	78 94       	sei
    4aea:	08 95       	ret

00004aec <SPI_open>:
    4aec:	0f 93       	push	r16
    4aee:	1f 93       	push	r17
    4af0:	0e 94 34 28 	call	0x5068	; 0x5068 <__SPI_init>
    4af4:	80 e0       	ldi	r24, 0x00	; 0
    4af6:	63 e2       	ldi	r22, 0x23	; 35
    4af8:	78 e2       	ldi	r23, 0x28	; 40
    4afa:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <SPI_set_config_func>
    4afe:	81 e0       	ldi	r24, 0x01	; 1
    4b00:	6b e1       	ldi	r22, 0x1B	; 27
    4b02:	78 e2       	ldi	r23, 0x28	; 40
    4b04:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <SPI_set_config_func>
    4b08:	82 e0       	ldi	r24, 0x02	; 2
    4b0a:	63 e1       	ldi	r22, 0x13	; 19
    4b0c:	78 e2       	ldi	r23, 0x28	; 40
    4b0e:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <SPI_set_config_func>
    4b12:	86 e0       	ldi	r24, 0x06	; 6
    4b14:	6b e2       	ldi	r22, 0x2B	; 43
    4b16:	78 e2       	ldi	r23, 0x28	; 40
    4b18:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <SPI_set_config_func>
    4b1c:	0b e0       	ldi	r16, 0x0B	; 11
    4b1e:	18 e2       	ldi	r17, 0x28	; 40
    4b20:	83 e0       	ldi	r24, 0x03	; 3
    4b22:	b8 01       	movw	r22, r16
    4b24:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <SPI_set_config_func>
    4b28:	84 e0       	ldi	r24, 0x04	; 4
    4b2a:	b8 01       	movw	r22, r16
    4b2c:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <SPI_set_config_func>
    4b30:	85 e0       	ldi	r24, 0x05	; 5
    4b32:	b8 01       	movw	r22, r16
    4b34:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <SPI_set_config_func>
    4b38:	87 e0       	ldi	r24, 0x07	; 7
    4b3a:	b8 01       	movw	r22, r16
    4b3c:	0e 94 c1 25 	call	0x4b82	; 0x4b82 <SPI_set_config_func>
    4b40:	82 e0       	ldi	r24, 0x02	; 2
    4b42:	61 e0       	ldi	r22, 0x01	; 1
    4b44:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    4b48:	8f ef       	ldi	r24, 0xFF	; 255
    4b4a:	80 93 1e 08 	sts	0x081E, r24
    4b4e:	87 e0       	ldi	r24, 0x07	; 7
    4b50:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SPI_set_slave_addr>
    4b54:	82 e0       	ldi	r24, 0x02	; 2
    4b56:	91 e0       	ldi	r25, 0x01	; 1
    4b58:	1f 91       	pop	r17
    4b5a:	0f 91       	pop	r16
    4b5c:	08 95       	ret

00004b5e <SPI_receive>:
    4b5e:	1f 93       	push	r17
    4b60:	16 2f       	mov	r17, r22
    4b62:	0e 94 cb 1a 	call	0x3596	; 0x3596 <SPI_set_slave_addr>
    4b66:	82 e0       	ldi	r24, 0x02	; 2
    4b68:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    4b6c:	81 30       	cpi	r24, 0x01	; 1
    4b6e:	11 f0       	breq	.+4      	; 0x4b74 <SPI_receive+0x16>
    4b70:	80 e0       	ldi	r24, 0x00	; 0
    4b72:	05 c0       	rjmp	.+10     	; 0x4b7e <SPI_receive+0x20>
    4b74:	1e bd       	out	0x2e, r17	; 46
    4b76:	0d b4       	in	r0, 0x2d	; 45
    4b78:	07 fe       	sbrs	r0, 7
    4b7a:	fd cf       	rjmp	.-6      	; 0x4b76 <SPI_receive+0x18>
    4b7c:	8e b5       	in	r24, 0x2e	; 46
    4b7e:	1f 91       	pop	r17
    4b80:	08 95       	ret

00004b82 <SPI_set_config_func>:
    4b82:	e8 2f       	mov	r30, r24
    4b84:	f0 e0       	ldi	r31, 0x00	; 0
    4b86:	ee 0f       	add	r30, r30
    4b88:	ff 1f       	adc	r31, r31
    4b8a:	ef 5f       	subi	r30, 0xFF	; 255
    4b8c:	fa 4f       	sbci	r31, 0xFA	; 250
    4b8e:	71 83       	std	Z+1, r23	; 0x01
    4b90:	60 83       	st	Z, r22
    4b92:	08 95       	ret

00004b94 <__SPKR_TIMER1_COMPA_vect>:
    4b94:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <SPKR_clk>
    4b98:	08 95       	ret

00004b9a <SPKR_clk>:
    4b9a:	80 91 a3 04 	lds	r24, 0x04A3
    4b9e:	90 91 a4 04 	lds	r25, 0x04A4
    4ba2:	a0 91 a5 04 	lds	r26, 0x04A5
    4ba6:	b0 91 a6 04 	lds	r27, 0x04A6
    4baa:	20 91 a7 04 	lds	r18, 0x04A7
    4bae:	30 91 a8 04 	lds	r19, 0x04A8
    4bb2:	40 91 a9 04 	lds	r20, 0x04A9
    4bb6:	50 91 aa 04 	lds	r21, 0x04AA
    4bba:	28 0f       	add	r18, r24
    4bbc:	39 1f       	adc	r19, r25
    4bbe:	4a 1f       	adc	r20, r26
    4bc0:	5b 1f       	adc	r21, r27
    4bc2:	20 93 a3 04 	sts	0x04A3, r18
    4bc6:	30 93 a4 04 	sts	0x04A4, r19
    4bca:	40 93 a5 04 	sts	0x04A5, r20
    4bce:	50 93 a6 04 	sts	0x04A6, r21
    4bd2:	80 91 a3 04 	lds	r24, 0x04A3
    4bd6:	90 91 a4 04 	lds	r25, 0x04A4
    4bda:	a0 91 a5 04 	lds	r26, 0x04A5
    4bde:	b0 91 a6 04 	lds	r27, 0x04A6
    4be2:	88 51       	subi	r24, 0x18	; 24
    4be4:	96 4f       	sbci	r25, 0xF6	; 246
    4be6:	a0 40       	sbci	r26, 0x00	; 0
    4be8:	b0 40       	sbci	r27, 0x00	; 0
    4bea:	bc f0       	brlt	.+46     	; 0x4c1a <SPKR_clk+0x80>
    4bec:	8b b1       	in	r24, 0x0b	; 11
    4bee:	80 58       	subi	r24, 0x80	; 128
    4bf0:	8b b9       	out	0x0b, r24	; 11
    4bf2:	80 91 a3 04 	lds	r24, 0x04A3
    4bf6:	90 91 a4 04 	lds	r25, 0x04A4
    4bfa:	a0 91 a5 04 	lds	r26, 0x04A5
    4bfe:	b0 91 a6 04 	lds	r27, 0x04A6
    4c02:	88 51       	subi	r24, 0x18	; 24
    4c04:	96 4f       	sbci	r25, 0xF6	; 246
    4c06:	a0 40       	sbci	r26, 0x00	; 0
    4c08:	b0 40       	sbci	r27, 0x00	; 0
    4c0a:	80 93 a3 04 	sts	0x04A3, r24
    4c0e:	90 93 a4 04 	sts	0x04A4, r25
    4c12:	a0 93 a5 04 	sts	0x04A5, r26
    4c16:	b0 93 a6 04 	sts	0x04A6, r27
    4c1a:	08 95       	ret

00004c1c <__SPKR_close_beep_mode>:
    4c1c:	8a e0       	ldi	r24, 0x0A	; 10
    4c1e:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    4c22:	81 30       	cpi	r24, 0x01	; 1
    4c24:	41 f4       	brne	.+16     	; 0x4c36 <__SPKR_close_beep_mode+0x1a>
    4c26:	0e 94 3b 28 	call	0x5076	; 0x5076 <__SPKR_close>
    4c2a:	10 92 a2 04 	sts	0x04A2, r1
    4c2e:	8a e0       	ldi	r24, 0x0A	; 10
    4c30:	60 e0       	ldi	r22, 0x00	; 0
    4c32:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    4c36:	08 95       	ret

00004c38 <__SPKR_close_tone_mode>:
    4c38:	89 e0       	ldi	r24, 0x09	; 9
    4c3a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    4c3e:	81 30       	cpi	r24, 0x01	; 1
    4c40:	d9 f4       	brne	.+54     	; 0x4c78 <__SPKR_close_tone_mode+0x40>
    4c42:	80 91 a1 04 	lds	r24, 0x04A1
    4c46:	88 23       	and	r24, r24
    4c48:	11 f0       	breq	.+4      	; 0x4c4e <__SPKR_close_tone_mode+0x16>
    4c4a:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <__SPKR_stop>
    4c4e:	82 e0       	ldi	r24, 0x02	; 2
    4c50:	0e 94 3b 28 	call	0x5076	; 0x5076 <__SPKR_close>
    4c54:	80 91 af 04 	lds	r24, 0x04AF
    4c58:	90 91 b0 04 	lds	r25, 0x04B0
    4c5c:	00 97       	sbiw	r24, 0x00	; 0
    4c5e:	31 f0       	breq	.+12     	; 0x4c6c <__SPKR_close_tone_mode+0x34>
    4c60:	0e 94 ae 34 	call	0x695c	; 0x695c <free>
    4c64:	10 92 b0 04 	sts	0x04B0, r1
    4c68:	10 92 af 04 	sts	0x04AF, r1
    4c6c:	10 92 a1 04 	sts	0x04A1, r1
    4c70:	89 e0       	ldi	r24, 0x09	; 9
    4c72:	60 e0       	ldi	r22, 0x00	; 0
    4c74:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    4c78:	08 95       	ret

00004c7a <SPKR_close>:
    4c7a:	81 30       	cpi	r24, 0x01	; 1
    4c7c:	29 f0       	breq	.+10     	; 0x4c88 <SPKR_close+0xe>
    4c7e:	82 30       	cpi	r24, 0x02	; 2
    4c80:	29 f4       	brne	.+10     	; 0x4c8c <SPKR_close+0x12>
    4c82:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <__SPKR_close_tone_mode>
    4c86:	08 95       	ret
    4c88:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <__SPKR_close_beep_mode>
    4c8c:	08 95       	ret

00004c8e <__SPKR_init>:
    4c8e:	98 2f       	mov	r25, r24
    4c90:	80 91 a1 04 	lds	r24, 0x04A1
    4c94:	88 23       	and	r24, r24
    4c96:	31 f4       	brne	.+12     	; 0x4ca4 <__SPKR_init+0x16>
    4c98:	80 91 a2 04 	lds	r24, 0x04A2
    4c9c:	88 23       	and	r24, r24
    4c9e:	11 f4       	brne	.+4      	; 0x4ca4 <__SPKR_init+0x16>
    4ca0:	57 9a       	sbi	0x0a, 7	; 10
    4ca2:	5f 98       	cbi	0x0b, 7	; 11
    4ca4:	80 91 a1 04 	lds	r24, 0x04A1
    4ca8:	88 23       	and	r24, r24
    4caa:	d1 f4       	brne	.+52     	; 0x4ce0 <__SPKR_init+0x52>
    4cac:	92 30       	cpi	r25, 0x02	; 2
    4cae:	c1 f4       	brne	.+48     	; 0x4ce0 <__SPKR_init+0x52>
    4cb0:	10 92 80 00 	sts	0x0080, r1
    4cb4:	10 92 81 00 	sts	0x0081, r1
    4cb8:	80 91 81 00 	lds	r24, 0x0081
    4cbc:	88 60       	ori	r24, 0x08	; 8
    4cbe:	80 93 81 00 	sts	0x0081, r24
    4cc2:	80 91 81 00 	lds	r24, 0x0081
    4cc6:	81 60       	ori	r24, 0x01	; 1
    4cc8:	80 93 81 00 	sts	0x0081, r24
    4ccc:	10 92 85 00 	sts	0x0085, r1
    4cd0:	10 92 84 00 	sts	0x0084, r1
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	80 93 89 00 	sts	0x0089, r24
    4cda:	80 e9       	ldi	r24, 0x90	; 144
    4cdc:	80 93 88 00 	sts	0x0088, r24
    4ce0:	08 95       	ret

00004ce2 <SPKR_play_beep>:
    4ce2:	8f 92       	push	r8
    4ce4:	9f 92       	push	r9
    4ce6:	af 92       	push	r10
    4ce8:	bf 92       	push	r11
    4cea:	cf 92       	push	r12
    4cec:	df 92       	push	r13
    4cee:	ef 92       	push	r14
    4cf0:	ff 92       	push	r15
    4cf2:	0f 93       	push	r16
    4cf4:	1f 93       	push	r17
    4cf6:	cf 93       	push	r28
    4cf8:	df 93       	push	r29
    4cfa:	4b 01       	movw	r8, r22
    4cfc:	5c 01       	movw	r10, r24
    4cfe:	ea 01       	movw	r28, r20
    4d00:	b9 01       	movw	r22, r18
    4d02:	21 15       	cp	r18, r1
    4d04:	31 05       	cpc	r19, r1
    4d06:	39 f1       	breq	.+78     	; 0x4d56 <SPKR_play_beep+0x74>
    4d08:	9e 01       	movw	r18, r28
    4d0a:	44 27       	eor	r20, r20
    4d0c:	37 fd       	sbrc	r19, 7
    4d0e:	40 95       	com	r20
    4d10:	54 2f       	mov	r21, r20
    4d12:	65 36       	cpi	r22, 0x65	; 101
    4d14:	71 05       	cpc	r23, r1
    4d16:	10 f0       	brcs	.+4      	; 0x4d1c <SPKR_play_beep+0x3a>
    4d18:	64 e6       	ldi	r22, 0x64	; 100
    4d1a:	70 e0       	ldi	r23, 0x00	; 0
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	0e 94 89 33 	call	0x6712	; 0x6712 <__mulsi3>
    4d24:	24 e6       	ldi	r18, 0x64	; 100
    4d26:	30 e0       	ldi	r19, 0x00	; 0
    4d28:	40 e0       	ldi	r20, 0x00	; 0
    4d2a:	50 e0       	ldi	r21, 0x00	; 0
    4d2c:	0e 94 a8 33 	call	0x6750	; 0x6750 <__udivmodsi4>
    4d30:	79 01       	movw	r14, r18
    4d32:	8a 01       	movw	r16, r20
    4d34:	c5 01       	movw	r24, r10
    4d36:	b4 01       	movw	r22, r8
    4d38:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPKR_beep>
    4d3c:	c7 01       	movw	r24, r14
    4d3e:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
    4d42:	60 e0       	ldi	r22, 0x00	; 0
    4d44:	70 e0       	ldi	r23, 0x00	; 0
    4d46:	80 e0       	ldi	r24, 0x00	; 0
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	0e 94 2b 1b 	call	0x3656	; 0x3656 <SPKR_beep>
    4d4e:	ce 01       	movw	r24, r28
    4d50:	8e 19       	sub	r24, r14
    4d52:	9f 09       	sbc	r25, r15
    4d54:	04 c0       	rjmp	.+8      	; 0x4d5e <SPKR_play_beep+0x7c>
    4d56:	41 15       	cp	r20, r1
    4d58:	51 05       	cpc	r21, r1
    4d5a:	19 f0       	breq	.+6      	; 0x4d62 <SPKR_play_beep+0x80>
    4d5c:	ca 01       	movw	r24, r20
    4d5e:	0e 94 a2 20 	call	0x4144	; 0x4144 <TMRSRVC_delay>
    4d62:	df 91       	pop	r29
    4d64:	cf 91       	pop	r28
    4d66:	1f 91       	pop	r17
    4d68:	0f 91       	pop	r16
    4d6a:	ff 90       	pop	r15
    4d6c:	ef 90       	pop	r14
    4d6e:	df 90       	pop	r13
    4d70:	cf 90       	pop	r12
    4d72:	bf 90       	pop	r11
    4d74:	af 90       	pop	r10
    4d76:	9f 90       	pop	r9
    4d78:	8f 90       	pop	r8
    4d7a:	08 95       	ret

00004d7c <__SPKR_stop>:
    4d7c:	ef e6       	ldi	r30, 0x6F	; 111
    4d7e:	f0 e0       	ldi	r31, 0x00	; 0
    4d80:	80 81       	ld	r24, Z
    4d82:	8d 7f       	andi	r24, 0xFD	; 253
    4d84:	80 83       	st	Z, r24
    4d86:	08 95       	ret

00004d88 <STEPPER_go>:
    4d88:	98 2f       	mov	r25, r24
    4d8a:	81 e0       	ldi	r24, 0x01	; 1
    4d8c:	80 93 03 08 	sts	0x0803, r24
    4d90:	91 30       	cpi	r25, 0x01	; 1
    4d92:	51 f0       	breq	.+20     	; 0x4da8 <STEPPER_go+0x20>
    4d94:	91 30       	cpi	r25, 0x01	; 1
    4d96:	18 f0       	brcs	.+6      	; 0x4d9e <STEPPER_go+0x16>
    4d98:	92 30       	cpi	r25, 0x02	; 2
    4d9a:	41 f4       	brne	.+16     	; 0x4dac <STEPPER_go+0x24>
    4d9c:	03 c0       	rjmp	.+6      	; 0x4da4 <STEPPER_go+0x1c>
    4d9e:	10 92 eb 07 	sts	0x07EB, r1
    4da2:	04 c0       	rjmp	.+8      	; 0x4dac <STEPPER_go+0x24>
    4da4:	10 92 eb 07 	sts	0x07EB, r1
    4da8:	10 92 ec 07 	sts	0x07EC, r1
    4dac:	10 92 03 08 	sts	0x0803, r1
    4db0:	08 95       	ret

00004db2 <__STEPPER_init>:
    4db2:	3a 9a       	sbi	0x07, 2	; 7
    4db4:	3b 9a       	sbi	0x07, 3	; 7
    4db6:	3c 9a       	sbi	0x07, 4	; 7
    4db8:	3d 9a       	sbi	0x07, 5	; 7
    4dba:	3e 9a       	sbi	0x07, 6	; 7
    4dbc:	3f 9a       	sbi	0x07, 7	; 7
    4dbe:	88 b1       	in	r24, 0x08	; 8
    4dc0:	83 70       	andi	r24, 0x03	; 3
    4dc2:	88 b9       	out	0x08, r24	; 8
    4dc4:	08 95       	ret

00004dc6 <STEPPER_set_stop_mode>:
    4dc6:	98 2f       	mov	r25, r24
    4dc8:	81 e0       	ldi	r24, 0x01	; 1
    4dca:	80 93 03 08 	sts	0x0803, r24
    4dce:	91 30       	cpi	r25, 0x01	; 1
    4dd0:	51 f0       	breq	.+20     	; 0x4de6 <STEPPER_set_stop_mode+0x20>
    4dd2:	91 30       	cpi	r25, 0x01	; 1
    4dd4:	18 f0       	brcs	.+6      	; 0x4ddc <STEPPER_set_stop_mode+0x16>
    4dd6:	92 30       	cpi	r25, 0x02	; 2
    4dd8:	41 f4       	brne	.+16     	; 0x4dea <STEPPER_set_stop_mode+0x24>
    4dda:	03 c0       	rjmp	.+6      	; 0x4de2 <STEPPER_set_stop_mode+0x1c>
    4ddc:	60 93 ed 07 	sts	0x07ED, r22
    4de0:	04 c0       	rjmp	.+8      	; 0x4dea <STEPPER_set_stop_mode+0x24>
    4de2:	60 93 ed 07 	sts	0x07ED, r22
    4de6:	60 93 ee 07 	sts	0x07EE, r22
    4dea:	10 92 03 08 	sts	0x0803, r1
    4dee:	08 95       	ret

00004df0 <STEPPER_setup_decels>:
    4df0:	0f 93       	push	r16
    4df2:	1f 93       	push	r17
    4df4:	cf 93       	push	r28
    4df6:	df 93       	push	r29
    4df8:	eb 01       	movw	r28, r22
    4dfa:	8a 01       	movw	r16, r20
    4dfc:	81 30       	cpi	r24, 0x01	; 1
    4dfe:	01 f1       	breq	.+64     	; 0x4e40 <STEPPER_setup_decels+0x50>
    4e00:	81 30       	cpi	r24, 0x01	; 1
    4e02:	18 f0       	brcs	.+6      	; 0x4e0a <STEPPER_setup_decels+0x1a>
    4e04:	82 30       	cpi	r24, 0x02	; 2
    4e06:	61 f5       	brne	.+88     	; 0x4e60 <STEPPER_setup_decels+0x70>
    4e08:	0d c0       	rjmp	.+26     	; 0x4e24 <STEPPER_setup_decels+0x34>
    4e0a:	80 91 d7 07 	lds	r24, 0x07D7
    4e0e:	90 91 d8 07 	lds	r25, 0x07D8
    4e12:	89 2b       	or	r24, r25
    4e14:	11 f0       	breq	.+4      	; 0x4e1a <STEPPER_setup_decels+0x2a>
    4e16:	80 e0       	ldi	r24, 0x00	; 0
    4e18:	1a c0       	rjmp	.+52     	; 0x4e4e <STEPPER_setup_decels+0x5e>
    4e1a:	10 92 e4 07 	sts	0x07E4, r1
    4e1e:	10 92 e3 07 	sts	0x07E3, r1
    4e22:	1e c0       	rjmp	.+60     	; 0x4e60 <STEPPER_setup_decels+0x70>
    4e24:	80 91 d7 07 	lds	r24, 0x07D7
    4e28:	90 91 d8 07 	lds	r25, 0x07D8
    4e2c:	89 2b       	or	r24, r25
    4e2e:	21 f0       	breq	.+8      	; 0x4e38 <STEPPER_setup_decels+0x48>
    4e30:	80 e0       	ldi	r24, 0x00	; 0
    4e32:	0e 94 57 28 	call	0x50ae	; 0x50ae <STEPPER_set_decel_step_values>
    4e36:	04 c0       	rjmp	.+8      	; 0x4e40 <STEPPER_setup_decels+0x50>
    4e38:	10 92 e4 07 	sts	0x07E4, r1
    4e3c:	10 92 e3 07 	sts	0x07E3, r1
    4e40:	80 91 d9 07 	lds	r24, 0x07D9
    4e44:	90 91 da 07 	lds	r25, 0x07DA
    4e48:	89 2b       	or	r24, r25
    4e4a:	31 f0       	breq	.+12     	; 0x4e58 <STEPPER_setup_decels+0x68>
    4e4c:	81 e0       	ldi	r24, 0x01	; 1
    4e4e:	be 01       	movw	r22, r28
    4e50:	a8 01       	movw	r20, r16
    4e52:	0e 94 57 28 	call	0x50ae	; 0x50ae <STEPPER_set_decel_step_values>
    4e56:	04 c0       	rjmp	.+8      	; 0x4e60 <STEPPER_setup_decels+0x70>
    4e58:	10 92 e6 07 	sts	0x07E6, r1
    4e5c:	10 92 e5 07 	sts	0x07E5, r1
    4e60:	df 91       	pop	r29
    4e62:	cf 91       	pop	r28
    4e64:	1f 91       	pop	r17
    4e66:	0f 91       	pop	r16
    4e68:	08 95       	ret

00004e6a <SYS_init>:
    4e6a:	10 92 06 08 	sts	0x0806, r1
    4e6e:	10 92 07 08 	sts	0x0807, r1
    4e72:	10 92 0b 08 	sts	0x080B, r1
    4e76:	10 92 08 08 	sts	0x0808, r1
    4e7a:	10 92 0a 08 	sts	0x080A, r1
    4e7e:	10 92 0c 08 	sts	0x080C, r1
    4e82:	10 92 0d 08 	sts	0x080D, r1
    4e86:	10 92 0e 08 	sts	0x080E, r1
    4e8a:	10 92 0f 08 	sts	0x080F, r1
    4e8e:	10 92 10 08 	sts	0x0810, r1
    4e92:	10 92 11 08 	sts	0x0811, r1
    4e96:	10 92 12 08 	sts	0x0812, r1
    4e9a:	10 92 13 08 	sts	0x0813, r1
    4e9e:	10 92 14 08 	sts	0x0814, r1
    4ea2:	10 92 15 08 	sts	0x0815, r1
    4ea6:	10 92 16 08 	sts	0x0816, r1
    4eaa:	10 92 17 08 	sts	0x0817, r1
    4eae:	08 95       	ret

00004eb0 <TMRSRVC_insert>:
    4eb0:	cf 92       	push	r12
    4eb2:	df 92       	push	r13
    4eb4:	ef 92       	push	r14
    4eb6:	ff 92       	push	r15
    4eb8:	0f 93       	push	r16
    4eba:	1f 93       	push	r17
    4ebc:	cf 93       	push	r28
    4ebe:	df 93       	push	r29
    4ec0:	ec 01       	movw	r28, r24
    4ec2:	80 91 3d 08 	lds	r24, 0x083D
    4ec6:	88 23       	and	r24, r24
    4ec8:	39 f4       	brne	.+14     	; 0x4ed8 <TMRSRVC_insert+0x28>
    4eca:	d0 93 3f 08 	sts	0x083F, r29
    4ece:	c0 93 3e 08 	sts	0x083E, r28
    4ed2:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <TMRSRVC_start>
    4ed6:	47 c0       	rjmp	.+142    	; 0x4f66 <TMRSRVC_insert+0xb6>
    4ed8:	c0 90 3e 08 	lds	r12, 0x083E
    4edc:	d0 90 3f 08 	lds	r13, 0x083F
    4ee0:	00 e0       	ldi	r16, 0x00	; 0
    4ee2:	10 e0       	ldi	r17, 0x00	; 0
    4ee4:	ee 24       	eor	r14, r14
    4ee6:	ff 24       	eor	r15, r15
    4ee8:	37 c0       	rjmp	.+110    	; 0x4f58 <TMRSRVC_insert+0xa8>
    4eea:	a8 81       	ld	r26, Y
    4eec:	b9 81       	ldd	r27, Y+1	; 0x01
    4eee:	fd 01       	movw	r30, r26
    4ef0:	64 81       	ldd	r22, Z+4	; 0x04
    4ef2:	75 81       	ldd	r23, Z+5	; 0x05
    4ef4:	f6 01       	movw	r30, r12
    4ef6:	40 81       	ld	r20, Z
    4ef8:	51 81       	ldd	r21, Z+1	; 0x01
    4efa:	fa 01       	movw	r30, r20
    4efc:	84 81       	ldd	r24, Z+4	; 0x04
    4efe:	95 81       	ldd	r25, Z+5	; 0x05
    4f00:	9b 01       	movw	r18, r22
    4f02:	28 1b       	sub	r18, r24
    4f04:	39 0b       	sbc	r19, r25
    4f06:	37 ff       	sbrs	r19, 7
    4f08:	0f c0       	rjmp	.+30     	; 0x4f28 <TMRSRVC_insert+0x78>
    4f0a:	86 1b       	sub	r24, r22
    4f0c:	97 0b       	sbc	r25, r23
    4f0e:	95 83       	std	Z+5, r25	; 0x05
    4f10:	84 83       	std	Z+4, r24	; 0x04
    4f12:	db 82       	std	Y+3, r13	; 0x03
    4f14:	ca 82       	std	Y+2, r12	; 0x02
    4f16:	01 2b       	or	r16, r17
    4f18:	29 f4       	brne	.+10     	; 0x4f24 <TMRSRVC_insert+0x74>
    4f1a:	d0 93 3f 08 	sts	0x083F, r29
    4f1e:	c0 93 3e 08 	sts	0x083E, r28
    4f22:	21 c0       	rjmp	.+66     	; 0x4f66 <TMRSRVC_insert+0xb6>
    4f24:	f7 01       	movw	r30, r14
    4f26:	0c c0       	rjmp	.+24     	; 0x4f40 <TMRSRVC_insert+0x90>
    4f28:	f6 01       	movw	r30, r12
    4f2a:	82 81       	ldd	r24, Z+2	; 0x02
    4f2c:	93 81       	ldd	r25, Z+3	; 0x03
    4f2e:	21 15       	cp	r18, r1
    4f30:	31 05       	cpc	r19, r1
    4f32:	49 f4       	brne	.+18     	; 0x4f46 <TMRSRVC_insert+0x96>
    4f34:	fd 01       	movw	r30, r26
    4f36:	15 82       	std	Z+5, r1	; 0x05
    4f38:	14 82       	std	Z+4, r1	; 0x04
    4f3a:	9b 83       	std	Y+3, r25	; 0x03
    4f3c:	8a 83       	std	Y+2, r24	; 0x02
    4f3e:	f6 01       	movw	r30, r12
    4f40:	d3 83       	std	Z+3, r29	; 0x03
    4f42:	c2 83       	std	Z+2, r28	; 0x02
    4f44:	10 c0       	rjmp	.+32     	; 0x4f66 <TMRSRVC_insert+0xb6>
    4f46:	fd 01       	movw	r30, r26
    4f48:	35 83       	std	Z+5, r19	; 0x05
    4f4a:	24 83       	std	Z+4, r18	; 0x04
    4f4c:	00 97       	sbiw	r24, 0x00	; 0
    4f4e:	b9 f3       	breq	.-18     	; 0x4f3e <TMRSRVC_insert+0x8e>
    4f50:	0f 5f       	subi	r16, 0xFF	; 255
    4f52:	1f 4f       	sbci	r17, 0xFF	; 255
    4f54:	76 01       	movw	r14, r12
    4f56:	6c 01       	movw	r12, r24
    4f58:	80 91 3d 08 	lds	r24, 0x083D
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	08 17       	cp	r16, r24
    4f60:	19 07       	cpc	r17, r25
    4f62:	18 f2       	brcs	.-122    	; 0x4eea <TMRSRVC_insert+0x3a>
    4f64:	ec cf       	rjmp	.-40     	; 0x4f3e <TMRSRVC_insert+0x8e>
    4f66:	80 91 3d 08 	lds	r24, 0x083D
    4f6a:	8f 5f       	subi	r24, 0xFF	; 255
    4f6c:	80 93 3d 08 	sts	0x083D, r24
    4f70:	df 91       	pop	r29
    4f72:	cf 91       	pop	r28
    4f74:	1f 91       	pop	r17
    4f76:	0f 91       	pop	r16
    4f78:	ff 90       	pop	r15
    4f7a:	ef 90       	pop	r14
    4f7c:	df 90       	pop	r13
    4f7e:	cf 90       	pop	r12
    4f80:	08 95       	ret

00004f82 <TMRSRVC_open>:
    4f82:	88 e0       	ldi	r24, 0x08	; 8
    4f84:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    4f88:	88 23       	and	r24, r24
    4f8a:	b9 f4       	brne	.+46     	; 0x4fba <TMRSRVC_open+0x38>
    4f8c:	10 92 3d 08 	sts	0x083D, r1
    4f90:	10 92 3f 08 	sts	0x083F, r1
    4f94:	10 92 3e 08 	sts	0x083E, r1
    4f98:	10 92 11 05 	sts	0x0511, r1
    4f9c:	10 92 12 05 	sts	0x0512, r1
    4fa0:	80 e1       	ldi	r24, 0x10	; 16
    4fa2:	64 ec       	ldi	r22, 0xC4	; 196
    4fa4:	78 e2       	ldi	r23, 0x28	; 40
    4fa6:	0e 94 f7 27 	call	0x4fee	; 0x4fee <__ISR_attach>
    4faa:	0e 94 cb 28 	call	0x5196	; 0x5196 <__TMRSRVC_init>
    4fae:	0e 94 e0 27 	call	0x4fc0	; 0x4fc0 <__TMRSRVC_start>
    4fb2:	88 e0       	ldi	r24, 0x08	; 8
    4fb4:	61 e0       	ldi	r22, 0x01	; 1
    4fb6:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <SYS_set_state>
    4fba:	88 e0       	ldi	r24, 0x08	; 8
    4fbc:	91 e0       	ldi	r25, 0x01	; 1
    4fbe:	08 95       	ret

00004fc0 <__TMRSRVC_start>:
    4fc0:	ee e6       	ldi	r30, 0x6E	; 110
    4fc2:	f0 e0       	ldi	r31, 0x00	; 0
    4fc4:	80 81       	ld	r24, Z
    4fc6:	82 60       	ori	r24, 0x02	; 2
    4fc8:	80 83       	st	Z, r24
    4fca:	08 95       	ret

00004fcc <TMRSRVC_start>:
    4fcc:	81 e0       	ldi	r24, 0x01	; 1
    4fce:	80 93 12 05 	sts	0x0512, r24
    4fd2:	08 95       	ret

00004fd4 <I2C_enable>:
    4fd4:	80 91 40 08 	lds	r24, 0x0840
    4fd8:	81 30       	cpi	r24, 0x01	; 1
    4fda:	29 f4       	brne	.+10     	; 0x4fe6 <I2C_enable+0x12>
    4fdc:	80 91 bc 00 	lds	r24, 0x00BC
    4fe0:	84 60       	ori	r24, 0x04	; 4
    4fe2:	80 93 bc 00 	sts	0x00BC, r24
    4fe6:	08 95       	ret

00004fe8 <__I2C_init>:
    4fe8:	38 98       	cbi	0x07, 0	; 7
    4fea:	39 98       	cbi	0x07, 1	; 7
    4fec:	08 95       	ret

00004fee <__ISR_attach>:
    4fee:	80 32       	cpi	r24, 0x20	; 32
    4ff0:	18 f0       	brcs	.+6      	; 0x4ff8 <__ISR_attach+0xa>
    4ff2:	20 e0       	ldi	r18, 0x00	; 0
    4ff4:	30 e0       	ldi	r19, 0x00	; 0
    4ff6:	0a c0       	rjmp	.+20     	; 0x500c <__ISR_attach+0x1e>
    4ff8:	e8 2f       	mov	r30, r24
    4ffa:	f0 e0       	ldi	r31, 0x00	; 0
    4ffc:	ee 0f       	add	r30, r30
    4ffe:	ff 1f       	adc	r31, r31
    5000:	ef 53       	subi	r30, 0x3F	; 63
    5002:	fb 4f       	sbci	r31, 0xFB	; 251
    5004:	20 81       	ld	r18, Z
    5006:	31 81       	ldd	r19, Z+1	; 0x01
    5008:	71 83       	std	Z+1, r23	; 0x01
    500a:	60 83       	st	Z, r22
    500c:	c9 01       	movw	r24, r18
    500e:	08 95       	ret

00005010 <__ATMEGA_init>:
    5010:	24 9a       	sbi	0x04, 4	; 4
    5012:	2c 9a       	sbi	0x05, 4	; 5
    5014:	08 95       	ret

00005016 <SPI_default_config>:
    5016:	83 e5       	ldi	r24, 0x53	; 83
    5018:	8c bd       	out	0x2c, r24	; 44
    501a:	81 e0       	ldi	r24, 0x01	; 1
    501c:	8d bd       	out	0x2d, r24	; 45
    501e:	8d e0       	ldi	r24, 0x0D	; 13
    5020:	8a 95       	dec	r24
    5022:	f1 f7       	brne	.-4      	; 0x5020 <SPI_default_config+0xa>
    5024:	08 95       	ret

00005026 <SPI_ATtiny0_config>:
    5026:	83 e5       	ldi	r24, 0x53	; 83
    5028:	8c bd       	out	0x2c, r24	; 44
    502a:	1d bc       	out	0x2d, r1	; 45
    502c:	84 ef       	ldi	r24, 0xF4	; 244
    502e:	91 e0       	ldi	r25, 0x01	; 1
    5030:	01 97       	sbiw	r24, 0x01	; 1
    5032:	f1 f7       	brne	.-4      	; 0x5030 <SPI_ATtiny0_config+0xa>
    5034:	08 95       	ret

00005036 <SPI_PSXC_config>:
    5036:	8f e7       	ldi	r24, 0x7F	; 127
    5038:	8c bd       	out	0x2c, r24	; 44
    503a:	1d bc       	out	0x2d, r1	; 45
    503c:	84 ef       	ldi	r24, 0xF4	; 244
    503e:	91 e0       	ldi	r25, 0x01	; 1
    5040:	01 97       	sbiw	r24, 0x01	; 1
    5042:	f1 f7       	brne	.-4      	; 0x5040 <SPI_PSXC_config+0xa>
    5044:	08 95       	ret

00005046 <SPI_LCD_config>:
    5046:	83 e5       	ldi	r24, 0x53	; 83
    5048:	8c bd       	out	0x2c, r24	; 44
    504a:	81 e0       	ldi	r24, 0x01	; 1
    504c:	8d bd       	out	0x2d, r24	; 45
    504e:	8d e0       	ldi	r24, 0x0D	; 13
    5050:	8a 95       	dec	r24
    5052:	f1 f7       	brne	.-4      	; 0x5050 <SPI_LCD_config+0xa>
    5054:	08 95       	ret

00005056 <SPI_FLASH_config>:
    5056:	83 e5       	ldi	r24, 0x53	; 83
    5058:	8c bd       	out	0x2c, r24	; 44
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	8d bd       	out	0x2d, r24	; 45
    505e:	84 ef       	ldi	r24, 0xF4	; 244
    5060:	91 e0       	ldi	r25, 0x01	; 1
    5062:	01 97       	sbiw	r24, 0x01	; 1
    5064:	f1 f7       	brne	.-4      	; 0x5062 <SPI_FLASH_config+0xc>
    5066:	08 95       	ret

00005068 <__SPI_init>:
    5068:	25 9a       	sbi	0x04, 5	; 4
    506a:	26 98       	cbi	0x04, 6	; 4
    506c:	27 9a       	sbi	0x04, 7	; 4
    506e:	20 9a       	sbi	0x04, 0	; 4
    5070:	21 9a       	sbi	0x04, 1	; 4
    5072:	22 9a       	sbi	0x04, 2	; 4
    5074:	08 95       	ret

00005076 <__SPKR_close>:
    5076:	82 30       	cpi	r24, 0x02	; 2
    5078:	29 f4       	brne	.+10     	; 0x5084 <__SPKR_close+0xe>
    507a:	80 91 81 00 	lds	r24, 0x0081
    507e:	8e 7f       	andi	r24, 0xFE	; 254
    5080:	80 93 81 00 	sts	0x0081, r24
    5084:	80 91 a1 04 	lds	r24, 0x04A1
    5088:	81 30       	cpi	r24, 0x01	; 1
    508a:	31 f4       	brne	.+12     	; 0x5098 <__SPKR_close+0x22>
    508c:	80 91 a2 04 	lds	r24, 0x04A2
    5090:	81 30       	cpi	r24, 0x01	; 1
    5092:	11 f4       	brne	.+4      	; 0x5098 <__SPKR_close+0x22>
    5094:	00 00       	nop
    5096:	08 95       	ret
    5098:	80 91 a1 04 	lds	r24, 0x04A1
    509c:	81 30       	cpi	r24, 0x01	; 1
    509e:	21 f0       	breq	.+8      	; 0x50a8 <__SPKR_close+0x32>
    50a0:	80 91 a2 04 	lds	r24, 0x04A2
    50a4:	81 30       	cpi	r24, 0x01	; 1
    50a6:	11 f4       	brne	.+4      	; 0x50ac <__SPKR_close+0x36>
    50a8:	5f 98       	cbi	0x0b, 7	; 11
    50aa:	57 98       	cbi	0x0a, 7	; 10
    50ac:	08 95       	ret

000050ae <STEPPER_set_decel_step_values>:
    50ae:	ef 92       	push	r14
    50b0:	ff 92       	push	r15
    50b2:	0f 93       	push	r16
    50b4:	1f 93       	push	r17
    50b6:	cf 93       	push	r28
    50b8:	df 93       	push	r29
    50ba:	eb 01       	movw	r28, r22
    50bc:	88 23       	and	r24, r24
    50be:	21 f0       	breq	.+8      	; 0x50c8 <STEPPER_set_decel_step_values+0x1a>
    50c0:	81 30       	cpi	r24, 0x01	; 1
    50c2:	09 f0       	breq	.+2      	; 0x50c6 <STEPPER_set_decel_step_values+0x18>
    50c4:	5a c0       	rjmp	.+180    	; 0x517a <STEPPER_set_decel_step_values+0xcc>
    50c6:	2d c0       	rjmp	.+90     	; 0x5122 <STEPPER_set_decel_step_values+0x74>
    50c8:	9a 01       	movw	r18, r20
    50ca:	40 e0       	ldi	r20, 0x00	; 0
    50cc:	50 e0       	ldi	r21, 0x00	; 0
    50ce:	ca 01       	movw	r24, r20
    50d0:	b9 01       	movw	r22, r18
    50d2:	0e 94 89 33 	call	0x6712	; 0x6712 <__mulsi3>
    50d6:	20 91 d7 07 	lds	r18, 0x07D7
    50da:	30 91 d8 07 	lds	r19, 0x07D8
    50de:	22 0f       	add	r18, r18
    50e0:	33 1f       	adc	r19, r19
    50e2:	40 e0       	ldi	r20, 0x00	; 0
    50e4:	50 e0       	ldi	r21, 0x00	; 0
    50e6:	0e 94 a8 33 	call	0x6750	; 0x6750 <__udivmodsi4>
    50ea:	79 01       	movw	r14, r18
    50ec:	8a 01       	movw	r16, r20
    50ee:	a8 01       	movw	r20, r16
    50f0:	97 01       	movw	r18, r14
    50f2:	22 0f       	add	r18, r18
    50f4:	33 1f       	adc	r19, r19
    50f6:	44 1f       	adc	r20, r20
    50f8:	55 1f       	adc	r21, r21
    50fa:	ce 01       	movw	r24, r28
    50fc:	a0 e0       	ldi	r26, 0x00	; 0
    50fe:	b0 e0       	ldi	r27, 0x00	; 0
    5100:	82 17       	cp	r24, r18
    5102:	93 07       	cpc	r25, r19
    5104:	a4 07       	cpc	r26, r20
    5106:	b5 07       	cpc	r27, r21
    5108:	28 f0       	brcs	.+10     	; 0x5114 <STEPPER_set_decel_step_values+0x66>
    510a:	f0 92 e4 07 	sts	0x07E4, r15
    510e:	e0 92 e3 07 	sts	0x07E3, r14
    5112:	33 c0       	rjmp	.+102    	; 0x517a <STEPPER_set_decel_step_values+0xcc>
    5114:	d6 95       	lsr	r29
    5116:	c7 95       	ror	r28
    5118:	d0 93 e4 07 	sts	0x07E4, r29
    511c:	c0 93 e3 07 	sts	0x07E3, r28
    5120:	2c c0       	rjmp	.+88     	; 0x517a <STEPPER_set_decel_step_values+0xcc>
    5122:	9a 01       	movw	r18, r20
    5124:	40 e0       	ldi	r20, 0x00	; 0
    5126:	50 e0       	ldi	r21, 0x00	; 0
    5128:	ca 01       	movw	r24, r20
    512a:	b9 01       	movw	r22, r18
    512c:	0e 94 89 33 	call	0x6712	; 0x6712 <__mulsi3>
    5130:	20 91 d9 07 	lds	r18, 0x07D9
    5134:	30 91 da 07 	lds	r19, 0x07DA
    5138:	22 0f       	add	r18, r18
    513a:	33 1f       	adc	r19, r19
    513c:	40 e0       	ldi	r20, 0x00	; 0
    513e:	50 e0       	ldi	r21, 0x00	; 0
    5140:	0e 94 a8 33 	call	0x6750	; 0x6750 <__udivmodsi4>
    5144:	79 01       	movw	r14, r18
    5146:	8a 01       	movw	r16, r20
    5148:	a8 01       	movw	r20, r16
    514a:	97 01       	movw	r18, r14
    514c:	22 0f       	add	r18, r18
    514e:	33 1f       	adc	r19, r19
    5150:	44 1f       	adc	r20, r20
    5152:	55 1f       	adc	r21, r21
    5154:	ce 01       	movw	r24, r28
    5156:	a0 e0       	ldi	r26, 0x00	; 0
    5158:	b0 e0       	ldi	r27, 0x00	; 0
    515a:	82 17       	cp	r24, r18
    515c:	93 07       	cpc	r25, r19
    515e:	a4 07       	cpc	r26, r20
    5160:	b5 07       	cpc	r27, r21
    5162:	28 f0       	brcs	.+10     	; 0x516e <STEPPER_set_decel_step_values+0xc0>
    5164:	f0 92 e6 07 	sts	0x07E6, r15
    5168:	e0 92 e5 07 	sts	0x07E5, r14
    516c:	06 c0       	rjmp	.+12     	; 0x517a <STEPPER_set_decel_step_values+0xcc>
    516e:	d6 95       	lsr	r29
    5170:	c7 95       	ror	r28
    5172:	d0 93 e6 07 	sts	0x07E6, r29
    5176:	c0 93 e5 07 	sts	0x07E5, r28
    517a:	df 91       	pop	r29
    517c:	cf 91       	pop	r28
    517e:	1f 91       	pop	r17
    5180:	0f 91       	pop	r16
    5182:	ff 90       	pop	r15
    5184:	ef 90       	pop	r14
    5186:	08 95       	ret

00005188 <__TIMER0_COMPA_vect>:
    5188:	0e 94 d4 28 	call	0x51a8	; 0x51a8 <TMRSRVC_tick>
    518c:	0e 94 14 29 	call	0x5228	; 0x5228 <STEPPER_clk>
    5190:	0e 94 ed 28 	call	0x51da	; 0x51da <SPKR_beep_clk>
    5194:	08 95       	ret

00005196 <__TMRSRVC_init>:
    5196:	84 b5       	in	r24, 0x24	; 36
    5198:	82 60       	ori	r24, 0x02	; 2
    519a:	84 bd       	out	0x24, r24	; 36
    519c:	85 b5       	in	r24, 0x25	; 37
    519e:	84 60       	ori	r24, 0x04	; 4
    51a0:	85 bd       	out	0x25, r24	; 37
    51a2:	8e e4       	ldi	r24, 0x4E	; 78
    51a4:	87 bd       	out	0x27, r24	; 39
    51a6:	08 95       	ret

000051a8 <TMRSRVC_tick>:
    51a8:	88 e0       	ldi	r24, 0x08	; 8
    51aa:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    51ae:	88 23       	and	r24, r24
    51b0:	11 f4       	brne	.+4      	; 0x51b6 <TMRSRVC_tick+0xe>
    51b2:	84 e0       	ldi	r24, 0x04	; 4
    51b4:	08 95       	ret
    51b6:	80 91 12 05 	lds	r24, 0x0512
    51ba:	88 23       	and	r24, r24
    51bc:	11 f4       	brne	.+4      	; 0x51c2 <TMRSRVC_tick+0x1a>
    51be:	83 e0       	ldi	r24, 0x03	; 3
    51c0:	08 95       	ret
    51c2:	80 91 11 05 	lds	r24, 0x0511
    51c6:	88 23       	and	r24, r24
    51c8:	11 f0       	breq	.+4      	; 0x51ce <TMRSRVC_tick+0x26>
    51ca:	82 e0       	ldi	r24, 0x02	; 2
    51cc:	08 95       	ret
    51ce:	0e 94 61 2b 	call	0x56c2	; 0x56c2 <TMRSRVC_process>
    51d2:	81 30       	cpi	r24, 0x01	; 1
    51d4:	e1 f3       	breq	.-8      	; 0x51ce <TMRSRVC_tick+0x26>
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	08 95       	ret

000051da <SPKR_beep_clk>:
    51da:	80 91 a2 04 	lds	r24, 0x04A2
    51de:	81 30       	cpi	r24, 0x01	; 1
    51e0:	11 f5       	brne	.+68     	; 0x5226 <SPKR_beep_clk+0x4c>
    51e2:	80 91 ab 04 	lds	r24, 0x04AB
    51e6:	90 91 ac 04 	lds	r25, 0x04AC
    51ea:	20 91 ad 04 	lds	r18, 0x04AD
    51ee:	30 91 ae 04 	lds	r19, 0x04AE
    51f2:	28 0f       	add	r18, r24
    51f4:	39 1f       	adc	r19, r25
    51f6:	30 93 ac 04 	sts	0x04AC, r19
    51fa:	20 93 ab 04 	sts	0x04AB, r18
    51fe:	80 91 ab 04 	lds	r24, 0x04AB
    5202:	90 91 ac 04 	lds	r25, 0x04AC
    5206:	88 5e       	subi	r24, 0xE8	; 232
    5208:	93 40       	sbci	r25, 0x03	; 3
    520a:	6c f0       	brlt	.+26     	; 0x5226 <SPKR_beep_clk+0x4c>
    520c:	8b b1       	in	r24, 0x0b	; 11
    520e:	80 58       	subi	r24, 0x80	; 128
    5210:	8b b9       	out	0x0b, r24	; 11
    5212:	80 91 ab 04 	lds	r24, 0x04AB
    5216:	90 91 ac 04 	lds	r25, 0x04AC
    521a:	88 5e       	subi	r24, 0xE8	; 232
    521c:	93 40       	sbci	r25, 0x03	; 3
    521e:	90 93 ac 04 	sts	0x04AC, r25
    5222:	80 93 ab 04 	sts	0x04AB, r24
    5226:	08 95       	ret

00005228 <STEPPER_clk>:
    5228:	87 e0       	ldi	r24, 0x07	; 7
    522a:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <SYS_get_state>
    522e:	81 30       	cpi	r24, 0x01	; 1
    5230:	09 f0       	breq	.+2      	; 0x5234 <STEPPER_clk+0xc>
    5232:	aa c0       	rjmp	.+340    	; 0x5388 <STEPPER_clk+0x160>
    5234:	80 91 d7 07 	lds	r24, 0x07D7
    5238:	90 91 d8 07 	lds	r25, 0x07D8
    523c:	89 2b       	or	r24, r25
    523e:	09 f1       	breq	.+66     	; 0x5282 <STEPPER_clk+0x5a>
    5240:	80 91 fb 07 	lds	r24, 0x07FB
    5244:	90 91 fc 07 	lds	r25, 0x07FC
    5248:	20 91 d7 07 	lds	r18, 0x07D7
    524c:	30 91 d8 07 	lds	r19, 0x07D8
    5250:	82 0f       	add	r24, r18
    5252:	93 1f       	adc	r25, r19
    5254:	90 93 fc 07 	sts	0x07FC, r25
    5258:	80 93 fb 07 	sts	0x07FB, r24
    525c:	80 91 fb 07 	lds	r24, 0x07FB
    5260:	90 91 fc 07 	lds	r25, 0x07FC
    5264:	88 5e       	subi	r24, 0xE8	; 232
    5266:	93 40       	sbci	r25, 0x03	; 3
    5268:	a4 f0       	brlt	.+40     	; 0x5292 <STEPPER_clk+0x6a>
    526a:	80 91 fb 07 	lds	r24, 0x07FB
    526e:	90 91 fc 07 	lds	r25, 0x07FC
    5272:	88 5e       	subi	r24, 0xE8	; 232
    5274:	93 40       	sbci	r25, 0x03	; 3
    5276:	90 93 fc 07 	sts	0x07FC, r25
    527a:	80 93 fb 07 	sts	0x07FB, r24
    527e:	41 e0       	ldi	r20, 0x01	; 1
    5280:	09 c0       	rjmp	.+18     	; 0x5294 <STEPPER_clk+0x6c>
    5282:	80 91 cf 07 	lds	r24, 0x07CF
    5286:	90 91 d0 07 	lds	r25, 0x07D0
    528a:	90 93 d4 07 	sts	0x07D4, r25
    528e:	80 93 d3 07 	sts	0x07D3, r24
    5292:	40 e0       	ldi	r20, 0x00	; 0
    5294:	80 91 d9 07 	lds	r24, 0x07D9
    5298:	90 91 da 07 	lds	r25, 0x07DA
    529c:	89 2b       	or	r24, r25
    529e:	09 f1       	breq	.+66     	; 0x52e2 <STEPPER_clk+0xba>
    52a0:	80 91 fd 07 	lds	r24, 0x07FD
    52a4:	90 91 fe 07 	lds	r25, 0x07FE
    52a8:	20 91 d9 07 	lds	r18, 0x07D9
    52ac:	30 91 da 07 	lds	r19, 0x07DA
    52b0:	82 0f       	add	r24, r18
    52b2:	93 1f       	adc	r25, r19
    52b4:	90 93 fe 07 	sts	0x07FE, r25
    52b8:	80 93 fd 07 	sts	0x07FD, r24
    52bc:	80 91 fd 07 	lds	r24, 0x07FD
    52c0:	90 91 fe 07 	lds	r25, 0x07FE
    52c4:	88 5e       	subi	r24, 0xE8	; 232
    52c6:	93 40       	sbci	r25, 0x03	; 3
    52c8:	a4 f0       	brlt	.+40     	; 0x52f2 <STEPPER_clk+0xca>
    52ca:	80 91 fd 07 	lds	r24, 0x07FD
    52ce:	90 91 fe 07 	lds	r25, 0x07FE
    52d2:	88 5e       	subi	r24, 0xE8	; 232
    52d4:	93 40       	sbci	r25, 0x03	; 3
    52d6:	90 93 fe 07 	sts	0x07FE, r25
    52da:	80 93 fd 07 	sts	0x07FD, r24
    52de:	61 e0       	ldi	r22, 0x01	; 1
    52e0:	09 c0       	rjmp	.+18     	; 0x52f4 <STEPPER_clk+0xcc>
    52e2:	80 91 d1 07 	lds	r24, 0x07D1
    52e6:	90 91 d2 07 	lds	r25, 0x07D2
    52ea:	90 93 d6 07 	sts	0x07D6, r25
    52ee:	80 93 d5 07 	sts	0x07D5, r24
    52f2:	60 e0       	ldi	r22, 0x00	; 0
    52f4:	84 2f       	mov	r24, r20
    52f6:	0e 94 c5 29 	call	0x538a	; 0x538a <STEPPER_process_accel>
    52fa:	80 91 f7 07 	lds	r24, 0x07F7
    52fe:	90 91 f8 07 	lds	r25, 0x07F8
    5302:	20 91 d3 07 	lds	r18, 0x07D3
    5306:	30 91 d4 07 	lds	r19, 0x07D4
    530a:	28 0f       	add	r18, r24
    530c:	39 1f       	adc	r19, r25
    530e:	30 93 f8 07 	sts	0x07F8, r19
    5312:	20 93 f7 07 	sts	0x07F7, r18
    5316:	80 91 f7 07 	lds	r24, 0x07F7
    531a:	90 91 f8 07 	lds	r25, 0x07F8
    531e:	88 5e       	subi	r24, 0xE8	; 232
    5320:	93 40       	sbci	r25, 0x03	; 3
    5322:	14 f4       	brge	.+4      	; 0x5328 <STEPPER_clk+0x100>
    5324:	40 e0       	ldi	r20, 0x00	; 0
    5326:	0b c0       	rjmp	.+22     	; 0x533e <STEPPER_clk+0x116>
    5328:	80 91 f7 07 	lds	r24, 0x07F7
    532c:	90 91 f8 07 	lds	r25, 0x07F8
    5330:	88 5e       	subi	r24, 0xE8	; 232
    5332:	93 40       	sbci	r25, 0x03	; 3
    5334:	90 93 f8 07 	sts	0x07F8, r25
    5338:	80 93 f7 07 	sts	0x07F7, r24
    533c:	41 e0       	ldi	r20, 0x01	; 1
    533e:	80 91 f9 07 	lds	r24, 0x07F9
    5342:	90 91 fa 07 	lds	r25, 0x07FA
    5346:	20 91 d5 07 	lds	r18, 0x07D5
    534a:	30 91 d6 07 	lds	r19, 0x07D6
    534e:	28 0f       	add	r18, r24
    5350:	39 1f       	adc	r19, r25
    5352:	30 93 fa 07 	sts	0x07FA, r19
    5356:	20 93 f9 07 	sts	0x07F9, r18
    535a:	80 91 f9 07 	lds	r24, 0x07F9
    535e:	90 91 fa 07 	lds	r25, 0x07FA
    5362:	88 5e       	subi	r24, 0xE8	; 232
    5364:	93 40       	sbci	r25, 0x03	; 3
    5366:	14 f4       	brge	.+4      	; 0x536c <STEPPER_clk+0x144>
    5368:	60 e0       	ldi	r22, 0x00	; 0
    536a:	0b c0       	rjmp	.+22     	; 0x5382 <STEPPER_clk+0x15a>
    536c:	80 91 f9 07 	lds	r24, 0x07F9
    5370:	90 91 fa 07 	lds	r25, 0x07FA
    5374:	88 5e       	subi	r24, 0xE8	; 232
    5376:	93 40       	sbci	r25, 0x03	; 3
    5378:	90 93 fa 07 	sts	0x07FA, r25
    537c:	80 93 f9 07 	sts	0x07F9, r24
    5380:	61 e0       	ldi	r22, 0x01	; 1
    5382:	84 2f       	mov	r24, r20
    5384:	0e 94 0a 2a 	call	0x5414	; 0x5414 <STEPPER_process_run_mode>
    5388:	08 95       	ret

0000538a <STEPPER_process_accel>:
    538a:	88 23       	and	r24, r24
    538c:	f1 f0       	breq	.+60     	; 0x53ca <STEPPER_process_accel+0x40>
    538e:	20 91 cf 07 	lds	r18, 0x07CF
    5392:	30 91 d0 07 	lds	r19, 0x07D0
    5396:	80 91 d3 07 	lds	r24, 0x07D3
    539a:	90 91 d4 07 	lds	r25, 0x07D4
    539e:	28 1b       	sub	r18, r24
    53a0:	39 0b       	sbc	r19, r25
    53a2:	12 16       	cp	r1, r18
    53a4:	13 06       	cpc	r1, r19
    53a6:	34 f4       	brge	.+12     	; 0x53b4 <STEPPER_process_accel+0x2a>
    53a8:	80 91 d3 07 	lds	r24, 0x07D3
    53ac:	90 91 d4 07 	lds	r25, 0x07D4
    53b0:	01 96       	adiw	r24, 0x01	; 1
    53b2:	07 c0       	rjmp	.+14     	; 0x53c2 <STEPPER_process_accel+0x38>
    53b4:	23 2b       	or	r18, r19
    53b6:	49 f0       	breq	.+18     	; 0x53ca <STEPPER_process_accel+0x40>
    53b8:	80 91 d3 07 	lds	r24, 0x07D3
    53bc:	90 91 d4 07 	lds	r25, 0x07D4
    53c0:	01 97       	sbiw	r24, 0x01	; 1
    53c2:	90 93 d4 07 	sts	0x07D4, r25
    53c6:	80 93 d3 07 	sts	0x07D3, r24
    53ca:	66 23       	and	r22, r22
    53cc:	11 f1       	breq	.+68     	; 0x5412 <STEPPER_process_accel+0x88>
    53ce:	20 91 d1 07 	lds	r18, 0x07D1
    53d2:	30 91 d2 07 	lds	r19, 0x07D2
    53d6:	80 91 d5 07 	lds	r24, 0x07D5
    53da:	90 91 d6 07 	lds	r25, 0x07D6
    53de:	28 1b       	sub	r18, r24
    53e0:	39 0b       	sbc	r19, r25
    53e2:	12 16       	cp	r1, r18
    53e4:	13 06       	cpc	r1, r19
    53e6:	54 f4       	brge	.+20     	; 0x53fc <STEPPER_process_accel+0x72>
    53e8:	80 91 d5 07 	lds	r24, 0x07D5
    53ec:	90 91 d6 07 	lds	r25, 0x07D6
    53f0:	01 96       	adiw	r24, 0x01	; 1
    53f2:	90 93 d6 07 	sts	0x07D6, r25
    53f6:	80 93 d5 07 	sts	0x07D5, r24
    53fa:	08 95       	ret
    53fc:	23 2b       	or	r18, r19
    53fe:	49 f0       	breq	.+18     	; 0x5412 <STEPPER_process_accel+0x88>
    5400:	80 91 d5 07 	lds	r24, 0x07D5
    5404:	90 91 d6 07 	lds	r25, 0x07D6
    5408:	01 97       	sbiw	r24, 0x01	; 1
    540a:	90 93 d6 07 	sts	0x07D6, r25
    540e:	80 93 d5 07 	sts	0x07D5, r24
    5412:	08 95       	ret

00005414 <STEPPER_process_run_mode>:
    5414:	0f 93       	push	r16
    5416:	1f 93       	push	r17
    5418:	18 2f       	mov	r17, r24
    541a:	06 2f       	mov	r16, r22
    541c:	80 91 03 08 	lds	r24, 0x0803
    5420:	88 23       	and	r24, r24
    5422:	09 f0       	breq	.+2      	; 0x5426 <STEPPER_process_run_mode+0x12>
    5424:	e7 c0       	rjmp	.+462    	; 0x55f4 <STEPPER_process_run_mode+0x1e0>
    5426:	80 91 eb 07 	lds	r24, 0x07EB
    542a:	88 23       	and	r24, r24
    542c:	09 f0       	breq	.+2      	; 0x5430 <STEPPER_process_run_mode+0x1c>
    542e:	5a c0       	rjmp	.+180    	; 0x54e4 <STEPPER_process_run_mode+0xd0>
    5430:	80 91 d3 07 	lds	r24, 0x07D3
    5434:	90 91 d4 07 	lds	r25, 0x07D4
    5438:	89 2b       	or	r24, r25
    543a:	e9 f4       	brne	.+58     	; 0x5476 <STEPPER_process_run_mode+0x62>
    543c:	80 91 13 05 	lds	r24, 0x0513
    5440:	83 7e       	andi	r24, 0xE3	; 227
    5442:	80 93 13 05 	sts	0x0513, r24
    5446:	10 92 f4 07 	sts	0x07F4, r1
    544a:	80 91 ff 07 	lds	r24, 0x07FF
    544e:	88 23       	and	r24, r24
    5450:	09 f4       	brne	.+2      	; 0x5454 <STEPPER_process_run_mode+0x40>
    5452:	5d c0       	rjmp	.+186    	; 0x550e <STEPPER_process_run_mode+0xfa>
    5454:	60 91 ed 07 	lds	r22, 0x07ED
    5458:	80 e0       	ldi	r24, 0x00	; 0
    545a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <STEPPER_stop>
    545e:	e0 91 01 08 	lds	r30, 0x0801
    5462:	f0 91 02 08 	lds	r31, 0x0802
    5466:	30 97       	sbiw	r30, 0x00	; 0
    5468:	09 f4       	brne	.+2      	; 0x546c <STEPPER_process_run_mode+0x58>
    546a:	51 c0       	rjmp	.+162    	; 0x550e <STEPPER_process_run_mode+0xfa>
    546c:	81 e0       	ldi	r24, 0x01	; 1
    546e:	80 83       	st	Z, r24
    5470:	10 92 ff 07 	sts	0x07FF, r1
    5474:	4c c0       	rjmp	.+152    	; 0x550e <STEPPER_process_run_mode+0xfa>
    5476:	80 91 cd 07 	lds	r24, 0x07CD
    547a:	81 30       	cpi	r24, 0x01	; 1
    547c:	41 f4       	brne	.+16     	; 0x548e <STEPPER_process_run_mode+0x7a>
    547e:	80 91 df 07 	lds	r24, 0x07DF
    5482:	90 91 e0 07 	lds	r25, 0x07E0
    5486:	01 97       	sbiw	r24, 0x01	; 1
    5488:	11 f4       	brne	.+4      	; 0x548e <STEPPER_process_run_mode+0x7a>
    548a:	11 e0       	ldi	r17, 0x01	; 1
    548c:	02 c0       	rjmp	.+4      	; 0x5492 <STEPPER_process_run_mode+0x7e>
    548e:	11 23       	and	r17, r17
    5490:	f1 f1       	breq	.+124    	; 0x550e <STEPPER_process_run_mode+0xfa>
    5492:	e0 91 f2 07 	lds	r30, 0x07F2
    5496:	f0 e0       	ldi	r31, 0x00	; 0
    5498:	e2 5a       	subi	r30, 0xA2	; 162
    549a:	fb 4f       	sbci	r31, 0xFB	; 251
    549c:	90 91 13 05 	lds	r25, 0x0513
    54a0:	93 7e       	andi	r25, 0xE3	; 227
    54a2:	80 81       	ld	r24, Z
    54a4:	89 2b       	or	r24, r25
    54a6:	80 93 13 05 	sts	0x0513, r24
    54aa:	80 91 f0 07 	lds	r24, 0x07F0
    54ae:	88 23       	and	r24, r24
    54b0:	21 f4       	brne	.+8      	; 0x54ba <STEPPER_process_run_mode+0xa6>
    54b2:	80 91 f2 07 	lds	r24, 0x07F2
    54b6:	8f 5f       	subi	r24, 0xFF	; 255
    54b8:	03 c0       	rjmp	.+6      	; 0x54c0 <STEPPER_process_run_mode+0xac>
    54ba:	80 91 f2 07 	lds	r24, 0x07F2
    54be:	81 50       	subi	r24, 0x01	; 1
    54c0:	80 93 f2 07 	sts	0x07F2, r24
    54c4:	80 91 f2 07 	lds	r24, 0x07F2
    54c8:	83 70       	andi	r24, 0x03	; 3
    54ca:	80 93 f2 07 	sts	0x07F2, r24
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	80 93 f4 07 	sts	0x07F4, r24
    54d4:	80 91 cd 07 	lds	r24, 0x07CD
    54d8:	81 30       	cpi	r24, 0x01	; 1
    54da:	c9 f4       	brne	.+50     	; 0x550e <STEPPER_process_run_mode+0xfa>
    54dc:	80 e0       	ldi	r24, 0x00	; 0
    54de:	0e 94 0d 2b 	call	0x561a	; 0x561a <STEPPER_process_step_mode>
    54e2:	15 c0       	rjmp	.+42     	; 0x550e <STEPPER_process_run_mode+0xfa>
    54e4:	90 91 13 05 	lds	r25, 0x0513
    54e8:	93 7e       	andi	r25, 0xE3	; 227
    54ea:	90 93 13 05 	sts	0x0513, r25
    54ee:	e0 91 f2 07 	lds	r30, 0x07F2
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	e2 5a       	subi	r30, 0xA2	; 162
    54f6:	fb 4f       	sbci	r31, 0xFB	; 251
    54f8:	80 81       	ld	r24, Z
    54fa:	89 2b       	or	r24, r25
    54fc:	80 93 13 05 	sts	0x0513, r24
    5500:	82 e0       	ldi	r24, 0x02	; 2
    5502:	80 93 f4 07 	sts	0x07F4, r24
    5506:	10 92 d4 07 	sts	0x07D4, r1
    550a:	10 92 d3 07 	sts	0x07D3, r1
    550e:	80 91 ec 07 	lds	r24, 0x07EC
    5512:	88 23       	and	r24, r24
    5514:	09 f0       	breq	.+2      	; 0x5518 <STEPPER_process_run_mode+0x104>
    5516:	59 c0       	rjmp	.+178    	; 0x55ca <STEPPER_process_run_mode+0x1b6>
    5518:	80 91 d5 07 	lds	r24, 0x07D5
    551c:	90 91 d6 07 	lds	r25, 0x07D6
    5520:	89 2b       	or	r24, r25
    5522:	e9 f4       	brne	.+58     	; 0x555e <STEPPER_process_run_mode+0x14a>
    5524:	80 91 13 05 	lds	r24, 0x0513
    5528:	8f 71       	andi	r24, 0x1F	; 31
    552a:	80 93 13 05 	sts	0x0513, r24
    552e:	10 92 f5 07 	sts	0x07F5, r1
    5532:	80 91 00 08 	lds	r24, 0x0800
    5536:	88 23       	and	r24, r24
    5538:	09 f4       	brne	.+2      	; 0x553c <STEPPER_process_run_mode+0x128>
    553a:	5c c0       	rjmp	.+184    	; 0x55f4 <STEPPER_process_run_mode+0x1e0>
    553c:	60 91 ee 07 	lds	r22, 0x07EE
    5540:	81 e0       	ldi	r24, 0x01	; 1
    5542:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <STEPPER_stop>
    5546:	e0 91 01 08 	lds	r30, 0x0801
    554a:	f0 91 02 08 	lds	r31, 0x0802
    554e:	30 97       	sbiw	r30, 0x00	; 0
    5550:	09 f4       	brne	.+2      	; 0x5554 <STEPPER_process_run_mode+0x140>
    5552:	50 c0       	rjmp	.+160    	; 0x55f4 <STEPPER_process_run_mode+0x1e0>
    5554:	81 e0       	ldi	r24, 0x01	; 1
    5556:	81 83       	std	Z+1, r24	; 0x01
    5558:	10 92 00 08 	sts	0x0800, r1
    555c:	4b c0       	rjmp	.+150    	; 0x55f4 <STEPPER_process_run_mode+0x1e0>
    555e:	80 91 ce 07 	lds	r24, 0x07CE
    5562:	81 30       	cpi	r24, 0x01	; 1
    5564:	41 f4       	brne	.+16     	; 0x5576 <STEPPER_process_run_mode+0x162>
    5566:	80 91 e1 07 	lds	r24, 0x07E1
    556a:	90 91 e2 07 	lds	r25, 0x07E2
    556e:	01 97       	sbiw	r24, 0x01	; 1
    5570:	11 f4       	brne	.+4      	; 0x5576 <STEPPER_process_run_mode+0x162>
    5572:	01 e0       	ldi	r16, 0x01	; 1
    5574:	02 c0       	rjmp	.+4      	; 0x557a <STEPPER_process_run_mode+0x166>
    5576:	00 23       	and	r16, r16
    5578:	e9 f1       	breq	.+122    	; 0x55f4 <STEPPER_process_run_mode+0x1e0>
    557a:	e0 91 f3 07 	lds	r30, 0x07F3
    557e:	f0 e0       	ldi	r31, 0x00	; 0
    5580:	ee 59       	subi	r30, 0x9E	; 158
    5582:	fb 4f       	sbci	r31, 0xFB	; 251
    5584:	90 91 13 05 	lds	r25, 0x0513
    5588:	9f 71       	andi	r25, 0x1F	; 31
    558a:	80 81       	ld	r24, Z
    558c:	89 2b       	or	r24, r25
    558e:	80 93 13 05 	sts	0x0513, r24
    5592:	80 91 f1 07 	lds	r24, 0x07F1
    5596:	88 23       	and	r24, r24
    5598:	21 f4       	brne	.+8      	; 0x55a2 <STEPPER_process_run_mode+0x18e>
    559a:	80 91 f3 07 	lds	r24, 0x07F3
    559e:	8f 5f       	subi	r24, 0xFF	; 255
    55a0:	03 c0       	rjmp	.+6      	; 0x55a8 <STEPPER_process_run_mode+0x194>
    55a2:	80 91 f3 07 	lds	r24, 0x07F3
    55a6:	81 50       	subi	r24, 0x01	; 1
    55a8:	80 93 f3 07 	sts	0x07F3, r24
    55ac:	80 91 f3 07 	lds	r24, 0x07F3
    55b0:	83 70       	andi	r24, 0x03	; 3
    55b2:	80 93 f3 07 	sts	0x07F3, r24
    55b6:	81 e0       	ldi	r24, 0x01	; 1
    55b8:	80 93 f5 07 	sts	0x07F5, r24
    55bc:	80 91 ce 07 	lds	r24, 0x07CE
    55c0:	81 30       	cpi	r24, 0x01	; 1
    55c2:	c1 f4       	brne	.+48     	; 0x55f4 <STEPPER_process_run_mode+0x1e0>
    55c4:	0e 94 0d 2b 	call	0x561a	; 0x561a <STEPPER_process_step_mode>
    55c8:	15 c0       	rjmp	.+42     	; 0x55f4 <STEPPER_process_run_mode+0x1e0>
    55ca:	90 91 13 05 	lds	r25, 0x0513
    55ce:	9f 71       	andi	r25, 0x1F	; 31
    55d0:	90 93 13 05 	sts	0x0513, r25
    55d4:	e0 91 f3 07 	lds	r30, 0x07F3
    55d8:	f0 e0       	ldi	r31, 0x00	; 0
    55da:	ee 59       	subi	r30, 0x9E	; 158
    55dc:	fb 4f       	sbci	r31, 0xFB	; 251
    55de:	80 81       	ld	r24, Z
    55e0:	89 2b       	or	r24, r25
    55e2:	80 93 13 05 	sts	0x0513, r24
    55e6:	82 e0       	ldi	r24, 0x02	; 2
    55e8:	80 93 f5 07 	sts	0x07F5, r24
    55ec:	10 92 d6 07 	sts	0x07D6, r1
    55f0:	10 92 d5 07 	sts	0x07D5, r1
    55f4:	80 91 f6 07 	lds	r24, 0x07F6
    55f8:	88 23       	and	r24, r24
    55fa:	31 f4       	brne	.+12     	; 0x5608 <STEPPER_process_run_mode+0x1f4>
    55fc:	83 e1       	ldi	r24, 0x13	; 19
    55fe:	95 e0       	ldi	r25, 0x05	; 5
    5600:	61 2f       	mov	r22, r17
    5602:	40 2f       	mov	r20, r16
    5604:	0e 94 cf 2b 	call	0x579e	; 0x579e <STEPPER_process_pwm>
    5608:	88 b1       	in	r24, 0x08	; 8
    560a:	83 70       	andi	r24, 0x03	; 3
    560c:	90 91 13 05 	lds	r25, 0x0513
    5610:	89 2b       	or	r24, r25
    5612:	88 b9       	out	0x08, r24	; 8
    5614:	1f 91       	pop	r17
    5616:	0f 91       	pop	r16
    5618:	08 95       	ret

0000561a <STEPPER_process_step_mode>:
    561a:	88 23       	and	r24, r24
    561c:	21 f0       	breq	.+8      	; 0x5626 <STEPPER_process_step_mode+0xc>
    561e:	81 30       	cpi	r24, 0x01	; 1
    5620:	09 f0       	breq	.+2      	; 0x5624 <STEPPER_process_step_mode+0xa>
    5622:	4e c0       	rjmp	.+156    	; 0x56c0 <STEPPER_process_step_mode+0xa6>
    5624:	27 c0       	rjmp	.+78     	; 0x5674 <STEPPER_process_step_mode+0x5a>
    5626:	80 91 df 07 	lds	r24, 0x07DF
    562a:	90 91 e0 07 	lds	r25, 0x07E0
    562e:	89 2b       	or	r24, r25
    5630:	49 f0       	breq	.+18     	; 0x5644 <STEPPER_process_step_mode+0x2a>
    5632:	80 91 df 07 	lds	r24, 0x07DF
    5636:	90 91 e0 07 	lds	r25, 0x07E0
    563a:	01 97       	sbiw	r24, 0x01	; 1
    563c:	90 93 e0 07 	sts	0x07E0, r25
    5640:	80 93 df 07 	sts	0x07DF, r24
    5644:	80 91 ff 07 	lds	r24, 0x07FF
    5648:	88 23       	and	r24, r24
    564a:	d1 f5       	brne	.+116    	; 0x56c0 <STEPPER_process_step_mode+0xa6>
    564c:	20 91 df 07 	lds	r18, 0x07DF
    5650:	30 91 e0 07 	lds	r19, 0x07E0
    5654:	80 91 e3 07 	lds	r24, 0x07E3
    5658:	90 91 e4 07 	lds	r25, 0x07E4
    565c:	28 17       	cp	r18, r24
    565e:	39 07       	cpc	r19, r25
    5660:	79 f5       	brne	.+94     	; 0x56c0 <STEPPER_process_step_mode+0xa6>
    5662:	80 e0       	ldi	r24, 0x00	; 0
    5664:	60 e0       	ldi	r22, 0x00	; 0
    5666:	70 e0       	ldi	r23, 0x00	; 0
    5668:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <STEPPER_set_speed>
    566c:	81 e0       	ldi	r24, 0x01	; 1
    566e:	80 93 ff 07 	sts	0x07FF, r24
    5672:	08 95       	ret
    5674:	80 91 e1 07 	lds	r24, 0x07E1
    5678:	90 91 e2 07 	lds	r25, 0x07E2
    567c:	89 2b       	or	r24, r25
    567e:	49 f0       	breq	.+18     	; 0x5692 <STEPPER_process_step_mode+0x78>
    5680:	80 91 e1 07 	lds	r24, 0x07E1
    5684:	90 91 e2 07 	lds	r25, 0x07E2
    5688:	01 97       	sbiw	r24, 0x01	; 1
    568a:	90 93 e2 07 	sts	0x07E2, r25
    568e:	80 93 e1 07 	sts	0x07E1, r24
    5692:	80 91 00 08 	lds	r24, 0x0800
    5696:	88 23       	and	r24, r24
    5698:	99 f4       	brne	.+38     	; 0x56c0 <STEPPER_process_step_mode+0xa6>
    569a:	20 91 e1 07 	lds	r18, 0x07E1
    569e:	30 91 e2 07 	lds	r19, 0x07E2
    56a2:	80 91 e5 07 	lds	r24, 0x07E5
    56a6:	90 91 e6 07 	lds	r25, 0x07E6
    56aa:	28 17       	cp	r18, r24
    56ac:	39 07       	cpc	r19, r25
    56ae:	41 f4       	brne	.+16     	; 0x56c0 <STEPPER_process_step_mode+0xa6>
    56b0:	81 e0       	ldi	r24, 0x01	; 1
    56b2:	60 e0       	ldi	r22, 0x00	; 0
    56b4:	70 e0       	ldi	r23, 0x00	; 0
    56b6:	0e 94 09 1e 	call	0x3c12	; 0x3c12 <STEPPER_set_speed>
    56ba:	81 e0       	ldi	r24, 0x01	; 1
    56bc:	80 93 00 08 	sts	0x0800, r24
    56c0:	08 95       	ret

000056c2 <TMRSRVC_process>:
    56c2:	ff 92       	push	r15
    56c4:	0f 93       	push	r16
    56c6:	1f 93       	push	r17
    56c8:	cf 93       	push	r28
    56ca:	df 93       	push	r29
    56cc:	80 91 3d 08 	lds	r24, 0x083D
    56d0:	88 23       	and	r24, r24
    56d2:	09 f4       	brne	.+2      	; 0x56d6 <TMRSRVC_process+0x14>
    56d4:	59 c0       	rjmp	.+178    	; 0x5788 <TMRSRVC_process+0xc6>
    56d6:	00 91 3e 08 	lds	r16, 0x083E
    56da:	10 91 3f 08 	lds	r17, 0x083F
    56de:	f8 01       	movw	r30, r16
    56e0:	c0 81       	ld	r28, Z
    56e2:	d1 81       	ldd	r29, Z+1	; 0x01
    56e4:	8c 81       	ldd	r24, Y+4	; 0x04
    56e6:	9d 81       	ldd	r25, Y+5	; 0x05
    56e8:	01 97       	sbiw	r24, 0x01	; 1
    56ea:	9d 83       	std	Y+5, r25	; 0x05
    56ec:	8c 83       	std	Y+4, r24	; 0x04
    56ee:	18 16       	cp	r1, r24
    56f0:	19 06       	cpc	r1, r25
    56f2:	0c f4       	brge	.+2      	; 0x56f6 <TMRSRVC_process+0x34>
    56f4:	49 c0       	rjmp	.+146    	; 0x5788 <TMRSRVC_process+0xc6>
    56f6:	89 81       	ldd	r24, Y+1	; 0x01
    56f8:	80 ff       	sbrs	r24, 0
    56fa:	05 c0       	rjmp	.+10     	; 0x5706 <TMRSRVC_process+0x44>
    56fc:	8e 81       	ldd	r24, Y+6	; 0x06
    56fe:	88 23       	and	r24, r24
    5700:	11 f4       	brne	.+4      	; 0x5706 <TMRSRVC_process+0x44>
    5702:	81 e0       	ldi	r24, 0x01	; 1
    5704:	8e 83       	std	Y+6, r24	; 0x06
    5706:	89 81       	ldd	r24, Y+1	; 0x01
    5708:	81 ff       	sbrs	r24, 1
    570a:	03 c0       	rjmp	.+6      	; 0x5712 <TMRSRVC_process+0x50>
    570c:	ef 81       	ldd	r30, Y+7	; 0x07
    570e:	f8 85       	ldd	r31, Y+8	; 0x08
    5710:	09 95       	icall
    5712:	80 91 3d 08 	lds	r24, 0x083D
    5716:	82 30       	cpi	r24, 0x02	; 2
    5718:	a8 f0       	brcs	.+42     	; 0x5744 <TMRSRVC_process+0x82>
    571a:	f8 01       	movw	r30, r16
    571c:	82 81       	ldd	r24, Z+2	; 0x02
    571e:	93 81       	ldd	r25, Z+3	; 0x03
    5720:	90 93 3f 08 	sts	0x083F, r25
    5724:	80 93 3e 08 	sts	0x083E, r24
    5728:	13 82       	std	Z+3, r1	; 0x03
    572a:	12 82       	std	Z+2, r1	; 0x02
    572c:	e0 91 00 00 	lds	r30, 0x0000
    5730:	f0 91 01 00 	lds	r31, 0x0001
    5734:	84 81       	ldd	r24, Z+4	; 0x04
    5736:	95 81       	ldd	r25, Z+5	; 0x05
    5738:	18 16       	cp	r1, r24
    573a:	19 06       	cpc	r1, r25
    573c:	3c f0       	brlt	.+14     	; 0x574c <TMRSRVC_process+0x8a>
    573e:	ff 24       	eor	r15, r15
    5740:	f3 94       	inc	r15
    5742:	05 c0       	rjmp	.+10     	; 0x574e <TMRSRVC_process+0x8c>
    5744:	10 92 3f 08 	sts	0x083F, r1
    5748:	10 92 3e 08 	sts	0x083E, r1
    574c:	ff 24       	eor	r15, r15
    574e:	80 91 3d 08 	lds	r24, 0x083D
    5752:	81 50       	subi	r24, 0x01	; 1
    5754:	80 93 3d 08 	sts	0x083D, r24
    5758:	80 91 3d 08 	lds	r24, 0x083D
    575c:	88 23       	and	r24, r24
    575e:	11 f4       	brne	.+4      	; 0x5764 <TMRSRVC_process+0xa2>
    5760:	0e 94 cc 2b 	call	0x5798	; 0x5798 <TMRSRVC_stop>
    5764:	89 81       	ldd	r24, Y+1	; 0x01
    5766:	82 ff       	sbrs	r24, 2
    5768:	08 c0       	rjmp	.+16     	; 0x577a <TMRSRVC_process+0xb8>
    576a:	8a 81       	ldd	r24, Y+2	; 0x02
    576c:	9b 81       	ldd	r25, Y+3	; 0x03
    576e:	9d 83       	std	Y+5, r25	; 0x05
    5770:	8c 83       	std	Y+4, r24	; 0x04
    5772:	c8 01       	movw	r24, r16
    5774:	0e 94 58 27 	call	0x4eb0	; 0x4eb0 <TMRSRVC_insert>
    5778:	08 c0       	rjmp	.+16     	; 0x578a <TMRSRVC_process+0xc8>
    577a:	c8 01       	movw	r24, r16
    577c:	0e 94 ae 34 	call	0x695c	; 0x695c <free>
    5780:	89 81       	ldd	r24, Y+1	; 0x01
    5782:	8f 7e       	andi	r24, 0xEF	; 239
    5784:	89 83       	std	Y+1, r24	; 0x01
    5786:	01 c0       	rjmp	.+2      	; 0x578a <TMRSRVC_process+0xc8>
    5788:	ff 24       	eor	r15, r15
    578a:	8f 2d       	mov	r24, r15
    578c:	df 91       	pop	r29
    578e:	cf 91       	pop	r28
    5790:	1f 91       	pop	r17
    5792:	0f 91       	pop	r16
    5794:	ff 90       	pop	r15
    5796:	08 95       	ret

00005798 <TMRSRVC_stop>:
    5798:	10 92 12 05 	sts	0x0512, r1
    579c:	08 95       	ret

0000579e <STEPPER_process_pwm>:
    579e:	fc 01       	movw	r30, r24
    57a0:	80 91 f4 07 	lds	r24, 0x07F4
    57a4:	82 30       	cpi	r24, 0x02	; 2
    57a6:	69 f4       	brne	.+26     	; 0x57c2 <STEPPER_process_pwm+0x24>
    57a8:	80 91 17 05 	lds	r24, 0x0517
    57ac:	91 e0       	ldi	r25, 0x01	; 1
    57ae:	89 27       	eor	r24, r25
    57b0:	80 93 17 05 	sts	0x0517, r24
    57b4:	88 23       	and	r24, r24
    57b6:	09 f0       	breq	.+2      	; 0x57ba <STEPPER_process_pwm+0x1c>
    57b8:	3e c0       	rjmp	.+124    	; 0x5836 <STEPPER_process_pwm+0x98>
    57ba:	80 81       	ld	r24, Z
    57bc:	83 7e       	andi	r24, 0xE3	; 227
    57be:	80 83       	st	Z, r24
    57c0:	3a c0       	rjmp	.+116    	; 0x5836 <STEPPER_process_pwm+0x98>
    57c2:	80 91 d3 07 	lds	r24, 0x07D3
    57c6:	90 91 d4 07 	lds	r25, 0x07D4
    57ca:	c3 97       	sbiw	r24, 0x33	; 51
    57cc:	a4 f5       	brge	.+104    	; 0x5836 <STEPPER_process_pwm+0x98>
    57ce:	66 23       	and	r22, r22
    57d0:	d1 f0       	breq	.+52     	; 0x5806 <STEPPER_process_pwm+0x68>
    57d2:	20 91 d3 07 	lds	r18, 0x07D3
    57d6:	30 91 d4 07 	lds	r19, 0x07D4
    57da:	80 e6       	ldi	r24, 0x60	; 96
    57dc:	90 e0       	ldi	r25, 0x00	; 0
    57de:	bc 01       	movw	r22, r24
    57e0:	26 9f       	mul	r18, r22
    57e2:	c0 01       	movw	r24, r0
    57e4:	27 9f       	mul	r18, r23
    57e6:	90 0d       	add	r25, r0
    57e8:	36 9f       	mul	r19, r22
    57ea:	90 0d       	add	r25, r0
    57ec:	11 24       	eor	r1, r1
    57ee:	88 0f       	add	r24, r24
    57f0:	89 2f       	mov	r24, r25
    57f2:	88 1f       	adc	r24, r24
    57f4:	99 0b       	sbc	r25, r25
    57f6:	90 93 e8 07 	sts	0x07E8, r25
    57fa:	80 93 e7 07 	sts	0x07E7, r24
    57fe:	81 e0       	ldi	r24, 0x01	; 1
    5800:	80 93 15 05 	sts	0x0515, r24
    5804:	18 c0       	rjmp	.+48     	; 0x5836 <STEPPER_process_pwm+0x98>
    5806:	80 91 15 05 	lds	r24, 0x0515
    580a:	88 23       	and	r24, r24
    580c:	a1 f0       	breq	.+40     	; 0x5836 <STEPPER_process_pwm+0x98>
    580e:	80 91 e7 07 	lds	r24, 0x07E7
    5812:	90 91 e8 07 	lds	r25, 0x07E8
    5816:	01 97       	sbiw	r24, 0x01	; 1
    5818:	90 93 e8 07 	sts	0x07E8, r25
    581c:	80 93 e7 07 	sts	0x07E7, r24
    5820:	80 91 e7 07 	lds	r24, 0x07E7
    5824:	90 91 e8 07 	lds	r25, 0x07E8
    5828:	89 2b       	or	r24, r25
    582a:	29 f4       	brne	.+10     	; 0x5836 <STEPPER_process_pwm+0x98>
    582c:	80 81       	ld	r24, Z
    582e:	83 7e       	andi	r24, 0xE3	; 227
    5830:	80 83       	st	Z, r24
    5832:	10 92 15 05 	sts	0x0515, r1
    5836:	80 91 f5 07 	lds	r24, 0x07F5
    583a:	82 30       	cpi	r24, 0x02	; 2
    583c:	69 f4       	brne	.+26     	; 0x5858 <STEPPER_process_pwm+0xba>
    583e:	80 91 16 05 	lds	r24, 0x0516
    5842:	91 e0       	ldi	r25, 0x01	; 1
    5844:	89 27       	eor	r24, r25
    5846:	80 93 16 05 	sts	0x0516, r24
    584a:	88 23       	and	r24, r24
    584c:	09 f0       	breq	.+2      	; 0x5850 <STEPPER_process_pwm+0xb2>
    584e:	3e c0       	rjmp	.+124    	; 0x58cc <STEPPER_process_pwm+0x12e>
    5850:	80 81       	ld	r24, Z
    5852:	8f 71       	andi	r24, 0x1F	; 31
    5854:	80 83       	st	Z, r24
    5856:	08 95       	ret
    5858:	80 91 d5 07 	lds	r24, 0x07D5
    585c:	90 91 d6 07 	lds	r25, 0x07D6
    5860:	c3 97       	sbiw	r24, 0x33	; 51
    5862:	a4 f5       	brge	.+104    	; 0x58cc <STEPPER_process_pwm+0x12e>
    5864:	44 23       	and	r20, r20
    5866:	d1 f0       	breq	.+52     	; 0x589c <STEPPER_process_pwm+0xfe>
    5868:	20 91 d5 07 	lds	r18, 0x07D5
    586c:	30 91 d6 07 	lds	r19, 0x07D6
    5870:	80 e6       	ldi	r24, 0x60	; 96
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	ac 01       	movw	r20, r24
    5876:	24 9f       	mul	r18, r20
    5878:	c0 01       	movw	r24, r0
    587a:	25 9f       	mul	r18, r21
    587c:	90 0d       	add	r25, r0
    587e:	34 9f       	mul	r19, r20
    5880:	90 0d       	add	r25, r0
    5882:	11 24       	eor	r1, r1
    5884:	88 0f       	add	r24, r24
    5886:	89 2f       	mov	r24, r25
    5888:	88 1f       	adc	r24, r24
    588a:	99 0b       	sbc	r25, r25
    588c:	90 93 ea 07 	sts	0x07EA, r25
    5890:	80 93 e9 07 	sts	0x07E9, r24
    5894:	81 e0       	ldi	r24, 0x01	; 1
    5896:	80 93 14 05 	sts	0x0514, r24
    589a:	08 95       	ret
    589c:	80 91 14 05 	lds	r24, 0x0514
    58a0:	88 23       	and	r24, r24
    58a2:	a1 f0       	breq	.+40     	; 0x58cc <STEPPER_process_pwm+0x12e>
    58a4:	80 91 e9 07 	lds	r24, 0x07E9
    58a8:	90 91 ea 07 	lds	r25, 0x07EA
    58ac:	01 97       	sbiw	r24, 0x01	; 1
    58ae:	90 93 ea 07 	sts	0x07EA, r25
    58b2:	80 93 e9 07 	sts	0x07E9, r24
    58b6:	80 91 e9 07 	lds	r24, 0x07E9
    58ba:	90 91 ea 07 	lds	r25, 0x07EA
    58be:	89 2b       	or	r24, r25
    58c0:	29 f4       	brne	.+10     	; 0x58cc <STEPPER_process_pwm+0x12e>
    58c2:	80 81       	ld	r24, Z
    58c4:	8f 71       	andi	r24, 0x1F	; 31
    58c6:	80 83       	st	Z, r24
    58c8:	10 92 14 05 	sts	0x0514, r1
    58cc:	08 95       	ret

000058ce <__subsf3>:
    58ce:	50 58       	subi	r21, 0x80	; 128

000058d0 <__addsf3>:
    58d0:	bb 27       	eor	r27, r27
    58d2:	aa 27       	eor	r26, r26
    58d4:	0e d0       	rcall	.+28     	; 0x58f2 <__addsf3x>
    58d6:	75 c1       	rjmp	.+746    	; 0x5bc2 <__fp_round>
    58d8:	66 d1       	rcall	.+716    	; 0x5ba6 <__fp_pscA>
    58da:	30 f0       	brcs	.+12     	; 0x58e8 <__addsf3+0x18>
    58dc:	6b d1       	rcall	.+726    	; 0x5bb4 <__fp_pscB>
    58de:	20 f0       	brcs	.+8      	; 0x58e8 <__addsf3+0x18>
    58e0:	31 f4       	brne	.+12     	; 0x58ee <__addsf3+0x1e>
    58e2:	9f 3f       	cpi	r25, 0xFF	; 255
    58e4:	11 f4       	brne	.+4      	; 0x58ea <__addsf3+0x1a>
    58e6:	1e f4       	brtc	.+6      	; 0x58ee <__addsf3+0x1e>
    58e8:	5b c1       	rjmp	.+694    	; 0x5ba0 <__fp_nan>
    58ea:	0e f4       	brtc	.+2      	; 0x58ee <__addsf3+0x1e>
    58ec:	e0 95       	com	r30
    58ee:	e7 fb       	bst	r30, 7
    58f0:	51 c1       	rjmp	.+674    	; 0x5b94 <__fp_inf>

000058f2 <__addsf3x>:
    58f2:	e9 2f       	mov	r30, r25
    58f4:	77 d1       	rcall	.+750    	; 0x5be4 <__fp_split3>
    58f6:	80 f3       	brcs	.-32     	; 0x58d8 <__addsf3+0x8>
    58f8:	ba 17       	cp	r27, r26
    58fa:	62 07       	cpc	r22, r18
    58fc:	73 07       	cpc	r23, r19
    58fe:	84 07       	cpc	r24, r20
    5900:	95 07       	cpc	r25, r21
    5902:	18 f0       	brcs	.+6      	; 0x590a <__addsf3x+0x18>
    5904:	71 f4       	brne	.+28     	; 0x5922 <__addsf3x+0x30>
    5906:	9e f5       	brtc	.+102    	; 0x596e <__addsf3x+0x7c>
    5908:	8f c1       	rjmp	.+798    	; 0x5c28 <__fp_zero>
    590a:	0e f4       	brtc	.+2      	; 0x590e <__addsf3x+0x1c>
    590c:	e0 95       	com	r30
    590e:	0b 2e       	mov	r0, r27
    5910:	ba 2f       	mov	r27, r26
    5912:	a0 2d       	mov	r26, r0
    5914:	0b 01       	movw	r0, r22
    5916:	b9 01       	movw	r22, r18
    5918:	90 01       	movw	r18, r0
    591a:	0c 01       	movw	r0, r24
    591c:	ca 01       	movw	r24, r20
    591e:	a0 01       	movw	r20, r0
    5920:	11 24       	eor	r1, r1
    5922:	ff 27       	eor	r31, r31
    5924:	59 1b       	sub	r21, r25
    5926:	99 f0       	breq	.+38     	; 0x594e <__addsf3x+0x5c>
    5928:	59 3f       	cpi	r21, 0xF9	; 249
    592a:	50 f4       	brcc	.+20     	; 0x5940 <__addsf3x+0x4e>
    592c:	50 3e       	cpi	r21, 0xE0	; 224
    592e:	68 f1       	brcs	.+90     	; 0x598a <__addsf3x+0x98>
    5930:	1a 16       	cp	r1, r26
    5932:	f0 40       	sbci	r31, 0x00	; 0
    5934:	a2 2f       	mov	r26, r18
    5936:	23 2f       	mov	r18, r19
    5938:	34 2f       	mov	r19, r20
    593a:	44 27       	eor	r20, r20
    593c:	58 5f       	subi	r21, 0xF8	; 248
    593e:	f3 cf       	rjmp	.-26     	; 0x5926 <__addsf3x+0x34>
    5940:	46 95       	lsr	r20
    5942:	37 95       	ror	r19
    5944:	27 95       	ror	r18
    5946:	a7 95       	ror	r26
    5948:	f0 40       	sbci	r31, 0x00	; 0
    594a:	53 95       	inc	r21
    594c:	c9 f7       	brne	.-14     	; 0x5940 <__addsf3x+0x4e>
    594e:	7e f4       	brtc	.+30     	; 0x596e <__addsf3x+0x7c>
    5950:	1f 16       	cp	r1, r31
    5952:	ba 0b       	sbc	r27, r26
    5954:	62 0b       	sbc	r22, r18
    5956:	73 0b       	sbc	r23, r19
    5958:	84 0b       	sbc	r24, r20
    595a:	ba f0       	brmi	.+46     	; 0x598a <__addsf3x+0x98>
    595c:	91 50       	subi	r25, 0x01	; 1
    595e:	a1 f0       	breq	.+40     	; 0x5988 <__addsf3x+0x96>
    5960:	ff 0f       	add	r31, r31
    5962:	bb 1f       	adc	r27, r27
    5964:	66 1f       	adc	r22, r22
    5966:	77 1f       	adc	r23, r23
    5968:	88 1f       	adc	r24, r24
    596a:	c2 f7       	brpl	.-16     	; 0x595c <__addsf3x+0x6a>
    596c:	0e c0       	rjmp	.+28     	; 0x598a <__addsf3x+0x98>
    596e:	ba 0f       	add	r27, r26
    5970:	62 1f       	adc	r22, r18
    5972:	73 1f       	adc	r23, r19
    5974:	84 1f       	adc	r24, r20
    5976:	48 f4       	brcc	.+18     	; 0x598a <__addsf3x+0x98>
    5978:	87 95       	ror	r24
    597a:	77 95       	ror	r23
    597c:	67 95       	ror	r22
    597e:	b7 95       	ror	r27
    5980:	f7 95       	ror	r31
    5982:	9e 3f       	cpi	r25, 0xFE	; 254
    5984:	08 f0       	brcs	.+2      	; 0x5988 <__addsf3x+0x96>
    5986:	b3 cf       	rjmp	.-154    	; 0x58ee <__addsf3+0x1e>
    5988:	93 95       	inc	r25
    598a:	88 0f       	add	r24, r24
    598c:	08 f0       	brcs	.+2      	; 0x5990 <__addsf3x+0x9e>
    598e:	99 27       	eor	r25, r25
    5990:	ee 0f       	add	r30, r30
    5992:	97 95       	ror	r25
    5994:	87 95       	ror	r24
    5996:	08 95       	ret

00005998 <__cmpsf2>:
    5998:	d9 d0       	rcall	.+434    	; 0x5b4c <__fp_cmp>
    599a:	08 f4       	brcc	.+2      	; 0x599e <__cmpsf2+0x6>
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	08 95       	ret

000059a0 <__divsf3>:
    59a0:	0c d0       	rcall	.+24     	; 0x59ba <__divsf3x>
    59a2:	0f c1       	rjmp	.+542    	; 0x5bc2 <__fp_round>
    59a4:	07 d1       	rcall	.+526    	; 0x5bb4 <__fp_pscB>
    59a6:	40 f0       	brcs	.+16     	; 0x59b8 <__divsf3+0x18>
    59a8:	fe d0       	rcall	.+508    	; 0x5ba6 <__fp_pscA>
    59aa:	30 f0       	brcs	.+12     	; 0x59b8 <__divsf3+0x18>
    59ac:	21 f4       	brne	.+8      	; 0x59b6 <__divsf3+0x16>
    59ae:	5f 3f       	cpi	r21, 0xFF	; 255
    59b0:	19 f0       	breq	.+6      	; 0x59b8 <__divsf3+0x18>
    59b2:	f0 c0       	rjmp	.+480    	; 0x5b94 <__fp_inf>
    59b4:	51 11       	cpse	r21, r1
    59b6:	39 c1       	rjmp	.+626    	; 0x5c2a <__fp_szero>
    59b8:	f3 c0       	rjmp	.+486    	; 0x5ba0 <__fp_nan>

000059ba <__divsf3x>:
    59ba:	14 d1       	rcall	.+552    	; 0x5be4 <__fp_split3>
    59bc:	98 f3       	brcs	.-26     	; 0x59a4 <__divsf3+0x4>

000059be <__divsf3_pse>:
    59be:	99 23       	and	r25, r25
    59c0:	c9 f3       	breq	.-14     	; 0x59b4 <__divsf3+0x14>
    59c2:	55 23       	and	r21, r21
    59c4:	b1 f3       	breq	.-20     	; 0x59b2 <__divsf3+0x12>
    59c6:	95 1b       	sub	r25, r21
    59c8:	55 0b       	sbc	r21, r21
    59ca:	bb 27       	eor	r27, r27
    59cc:	aa 27       	eor	r26, r26
    59ce:	62 17       	cp	r22, r18
    59d0:	73 07       	cpc	r23, r19
    59d2:	84 07       	cpc	r24, r20
    59d4:	38 f0       	brcs	.+14     	; 0x59e4 <__divsf3_pse+0x26>
    59d6:	9f 5f       	subi	r25, 0xFF	; 255
    59d8:	5f 4f       	sbci	r21, 0xFF	; 255
    59da:	22 0f       	add	r18, r18
    59dc:	33 1f       	adc	r19, r19
    59de:	44 1f       	adc	r20, r20
    59e0:	aa 1f       	adc	r26, r26
    59e2:	a9 f3       	breq	.-22     	; 0x59ce <__divsf3_pse+0x10>
    59e4:	33 d0       	rcall	.+102    	; 0x5a4c <__divsf3_pse+0x8e>
    59e6:	0e 2e       	mov	r0, r30
    59e8:	3a f0       	brmi	.+14     	; 0x59f8 <__divsf3_pse+0x3a>
    59ea:	e0 e8       	ldi	r30, 0x80	; 128
    59ec:	30 d0       	rcall	.+96     	; 0x5a4e <__divsf3_pse+0x90>
    59ee:	91 50       	subi	r25, 0x01	; 1
    59f0:	50 40       	sbci	r21, 0x00	; 0
    59f2:	e6 95       	lsr	r30
    59f4:	00 1c       	adc	r0, r0
    59f6:	ca f7       	brpl	.-14     	; 0x59ea <__divsf3_pse+0x2c>
    59f8:	29 d0       	rcall	.+82     	; 0x5a4c <__divsf3_pse+0x8e>
    59fa:	fe 2f       	mov	r31, r30
    59fc:	27 d0       	rcall	.+78     	; 0x5a4c <__divsf3_pse+0x8e>
    59fe:	66 0f       	add	r22, r22
    5a00:	77 1f       	adc	r23, r23
    5a02:	88 1f       	adc	r24, r24
    5a04:	bb 1f       	adc	r27, r27
    5a06:	26 17       	cp	r18, r22
    5a08:	37 07       	cpc	r19, r23
    5a0a:	48 07       	cpc	r20, r24
    5a0c:	ab 07       	cpc	r26, r27
    5a0e:	b0 e8       	ldi	r27, 0x80	; 128
    5a10:	09 f0       	breq	.+2      	; 0x5a14 <__divsf3_pse+0x56>
    5a12:	bb 0b       	sbc	r27, r27
    5a14:	80 2d       	mov	r24, r0
    5a16:	bf 01       	movw	r22, r30
    5a18:	ff 27       	eor	r31, r31
    5a1a:	93 58       	subi	r25, 0x83	; 131
    5a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a1e:	2a f0       	brmi	.+10     	; 0x5a2a <__divsf3_pse+0x6c>
    5a20:	9e 3f       	cpi	r25, 0xFE	; 254
    5a22:	51 05       	cpc	r21, r1
    5a24:	68 f0       	brcs	.+26     	; 0x5a40 <__divsf3_pse+0x82>
    5a26:	b6 c0       	rjmp	.+364    	; 0x5b94 <__fp_inf>
    5a28:	00 c1       	rjmp	.+512    	; 0x5c2a <__fp_szero>
    5a2a:	5f 3f       	cpi	r21, 0xFF	; 255
    5a2c:	ec f3       	brlt	.-6      	; 0x5a28 <__divsf3_pse+0x6a>
    5a2e:	98 3e       	cpi	r25, 0xE8	; 232
    5a30:	dc f3       	brlt	.-10     	; 0x5a28 <__divsf3_pse+0x6a>
    5a32:	86 95       	lsr	r24
    5a34:	77 95       	ror	r23
    5a36:	67 95       	ror	r22
    5a38:	b7 95       	ror	r27
    5a3a:	f7 95       	ror	r31
    5a3c:	9f 5f       	subi	r25, 0xFF	; 255
    5a3e:	c9 f7       	brne	.-14     	; 0x5a32 <__divsf3_pse+0x74>
    5a40:	88 0f       	add	r24, r24
    5a42:	91 1d       	adc	r25, r1
    5a44:	96 95       	lsr	r25
    5a46:	87 95       	ror	r24
    5a48:	97 f9       	bld	r25, 7
    5a4a:	08 95       	ret
    5a4c:	e1 e0       	ldi	r30, 0x01	; 1
    5a4e:	66 0f       	add	r22, r22
    5a50:	77 1f       	adc	r23, r23
    5a52:	88 1f       	adc	r24, r24
    5a54:	bb 1f       	adc	r27, r27
    5a56:	62 17       	cp	r22, r18
    5a58:	73 07       	cpc	r23, r19
    5a5a:	84 07       	cpc	r24, r20
    5a5c:	ba 07       	cpc	r27, r26
    5a5e:	20 f0       	brcs	.+8      	; 0x5a68 <__divsf3_pse+0xaa>
    5a60:	62 1b       	sub	r22, r18
    5a62:	73 0b       	sbc	r23, r19
    5a64:	84 0b       	sbc	r24, r20
    5a66:	ba 0b       	sbc	r27, r26
    5a68:	ee 1f       	adc	r30, r30
    5a6a:	88 f7       	brcc	.-30     	; 0x5a4e <__divsf3_pse+0x90>
    5a6c:	e0 95       	com	r30
    5a6e:	08 95       	ret

00005a70 <__fixsfsi>:
    5a70:	04 d0       	rcall	.+8      	; 0x5a7a <__fixunssfsi>
    5a72:	68 94       	set
    5a74:	b1 11       	cpse	r27, r1
    5a76:	d9 c0       	rjmp	.+434    	; 0x5c2a <__fp_szero>
    5a78:	08 95       	ret

00005a7a <__fixunssfsi>:
    5a7a:	bc d0       	rcall	.+376    	; 0x5bf4 <__fp_splitA>
    5a7c:	88 f0       	brcs	.+34     	; 0x5aa0 <__fixunssfsi+0x26>
    5a7e:	9f 57       	subi	r25, 0x7F	; 127
    5a80:	90 f0       	brcs	.+36     	; 0x5aa6 <__fixunssfsi+0x2c>
    5a82:	b9 2f       	mov	r27, r25
    5a84:	99 27       	eor	r25, r25
    5a86:	b7 51       	subi	r27, 0x17	; 23
    5a88:	a0 f0       	brcs	.+40     	; 0x5ab2 <__fixunssfsi+0x38>
    5a8a:	d1 f0       	breq	.+52     	; 0x5ac0 <__fixunssfsi+0x46>
    5a8c:	66 0f       	add	r22, r22
    5a8e:	77 1f       	adc	r23, r23
    5a90:	88 1f       	adc	r24, r24
    5a92:	99 1f       	adc	r25, r25
    5a94:	1a f0       	brmi	.+6      	; 0x5a9c <__fixunssfsi+0x22>
    5a96:	ba 95       	dec	r27
    5a98:	c9 f7       	brne	.-14     	; 0x5a8c <__fixunssfsi+0x12>
    5a9a:	12 c0       	rjmp	.+36     	; 0x5ac0 <__fixunssfsi+0x46>
    5a9c:	b1 30       	cpi	r27, 0x01	; 1
    5a9e:	81 f0       	breq	.+32     	; 0x5ac0 <__fixunssfsi+0x46>
    5aa0:	c3 d0       	rcall	.+390    	; 0x5c28 <__fp_zero>
    5aa2:	b1 e0       	ldi	r27, 0x01	; 1
    5aa4:	08 95       	ret
    5aa6:	c0 c0       	rjmp	.+384    	; 0x5c28 <__fp_zero>
    5aa8:	67 2f       	mov	r22, r23
    5aaa:	78 2f       	mov	r23, r24
    5aac:	88 27       	eor	r24, r24
    5aae:	b8 5f       	subi	r27, 0xF8	; 248
    5ab0:	39 f0       	breq	.+14     	; 0x5ac0 <__fixunssfsi+0x46>
    5ab2:	b9 3f       	cpi	r27, 0xF9	; 249
    5ab4:	cc f3       	brlt	.-14     	; 0x5aa8 <__fixunssfsi+0x2e>
    5ab6:	86 95       	lsr	r24
    5ab8:	77 95       	ror	r23
    5aba:	67 95       	ror	r22
    5abc:	b3 95       	inc	r27
    5abe:	d9 f7       	brne	.-10     	; 0x5ab6 <__fixunssfsi+0x3c>
    5ac0:	3e f4       	brtc	.+14     	; 0x5ad0 <__fixunssfsi+0x56>
    5ac2:	90 95       	com	r25
    5ac4:	80 95       	com	r24
    5ac6:	70 95       	com	r23
    5ac8:	61 95       	neg	r22
    5aca:	7f 4f       	sbci	r23, 0xFF	; 255
    5acc:	8f 4f       	sbci	r24, 0xFF	; 255
    5ace:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad0:	08 95       	ret

00005ad2 <__floatunsisf>:
    5ad2:	e8 94       	clt
    5ad4:	09 c0       	rjmp	.+18     	; 0x5ae8 <__floatsisf+0x12>

00005ad6 <__floatsisf>:
    5ad6:	97 fb       	bst	r25, 7
    5ad8:	3e f4       	brtc	.+14     	; 0x5ae8 <__floatsisf+0x12>
    5ada:	90 95       	com	r25
    5adc:	80 95       	com	r24
    5ade:	70 95       	com	r23
    5ae0:	61 95       	neg	r22
    5ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae8:	99 23       	and	r25, r25
    5aea:	a9 f0       	breq	.+42     	; 0x5b16 <__floatsisf+0x40>
    5aec:	f9 2f       	mov	r31, r25
    5aee:	96 e9       	ldi	r25, 0x96	; 150
    5af0:	bb 27       	eor	r27, r27
    5af2:	93 95       	inc	r25
    5af4:	f6 95       	lsr	r31
    5af6:	87 95       	ror	r24
    5af8:	77 95       	ror	r23
    5afa:	67 95       	ror	r22
    5afc:	b7 95       	ror	r27
    5afe:	f1 11       	cpse	r31, r1
    5b00:	f8 cf       	rjmp	.-16     	; 0x5af2 <__floatsisf+0x1c>
    5b02:	fa f4       	brpl	.+62     	; 0x5b42 <__floatsisf+0x6c>
    5b04:	bb 0f       	add	r27, r27
    5b06:	11 f4       	brne	.+4      	; 0x5b0c <__floatsisf+0x36>
    5b08:	60 ff       	sbrs	r22, 0
    5b0a:	1b c0       	rjmp	.+54     	; 0x5b42 <__floatsisf+0x6c>
    5b0c:	6f 5f       	subi	r22, 0xFF	; 255
    5b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    5b10:	8f 4f       	sbci	r24, 0xFF	; 255
    5b12:	9f 4f       	sbci	r25, 0xFF	; 255
    5b14:	16 c0       	rjmp	.+44     	; 0x5b42 <__floatsisf+0x6c>
    5b16:	88 23       	and	r24, r24
    5b18:	11 f0       	breq	.+4      	; 0x5b1e <__floatsisf+0x48>
    5b1a:	96 e9       	ldi	r25, 0x96	; 150
    5b1c:	11 c0       	rjmp	.+34     	; 0x5b40 <__floatsisf+0x6a>
    5b1e:	77 23       	and	r23, r23
    5b20:	21 f0       	breq	.+8      	; 0x5b2a <__floatsisf+0x54>
    5b22:	9e e8       	ldi	r25, 0x8E	; 142
    5b24:	87 2f       	mov	r24, r23
    5b26:	76 2f       	mov	r23, r22
    5b28:	05 c0       	rjmp	.+10     	; 0x5b34 <__floatsisf+0x5e>
    5b2a:	66 23       	and	r22, r22
    5b2c:	71 f0       	breq	.+28     	; 0x5b4a <__floatsisf+0x74>
    5b2e:	96 e8       	ldi	r25, 0x86	; 134
    5b30:	86 2f       	mov	r24, r22
    5b32:	70 e0       	ldi	r23, 0x00	; 0
    5b34:	60 e0       	ldi	r22, 0x00	; 0
    5b36:	2a f0       	brmi	.+10     	; 0x5b42 <__floatsisf+0x6c>
    5b38:	9a 95       	dec	r25
    5b3a:	66 0f       	add	r22, r22
    5b3c:	77 1f       	adc	r23, r23
    5b3e:	88 1f       	adc	r24, r24
    5b40:	da f7       	brpl	.-10     	; 0x5b38 <__floatsisf+0x62>
    5b42:	88 0f       	add	r24, r24
    5b44:	96 95       	lsr	r25
    5b46:	87 95       	ror	r24
    5b48:	97 f9       	bld	r25, 7
    5b4a:	08 95       	ret

00005b4c <__fp_cmp>:
    5b4c:	99 0f       	add	r25, r25
    5b4e:	00 08       	sbc	r0, r0
    5b50:	55 0f       	add	r21, r21
    5b52:	aa 0b       	sbc	r26, r26
    5b54:	e0 e8       	ldi	r30, 0x80	; 128
    5b56:	fe ef       	ldi	r31, 0xFE	; 254
    5b58:	16 16       	cp	r1, r22
    5b5a:	17 06       	cpc	r1, r23
    5b5c:	e8 07       	cpc	r30, r24
    5b5e:	f9 07       	cpc	r31, r25
    5b60:	c0 f0       	brcs	.+48     	; 0x5b92 <__fp_cmp+0x46>
    5b62:	12 16       	cp	r1, r18
    5b64:	13 06       	cpc	r1, r19
    5b66:	e4 07       	cpc	r30, r20
    5b68:	f5 07       	cpc	r31, r21
    5b6a:	98 f0       	brcs	.+38     	; 0x5b92 <__fp_cmp+0x46>
    5b6c:	62 1b       	sub	r22, r18
    5b6e:	73 0b       	sbc	r23, r19
    5b70:	84 0b       	sbc	r24, r20
    5b72:	95 0b       	sbc	r25, r21
    5b74:	39 f4       	brne	.+14     	; 0x5b84 <__fp_cmp+0x38>
    5b76:	0a 26       	eor	r0, r26
    5b78:	61 f0       	breq	.+24     	; 0x5b92 <__fp_cmp+0x46>
    5b7a:	23 2b       	or	r18, r19
    5b7c:	24 2b       	or	r18, r20
    5b7e:	25 2b       	or	r18, r21
    5b80:	21 f4       	brne	.+8      	; 0x5b8a <__fp_cmp+0x3e>
    5b82:	08 95       	ret
    5b84:	0a 26       	eor	r0, r26
    5b86:	09 f4       	brne	.+2      	; 0x5b8a <__fp_cmp+0x3e>
    5b88:	a1 40       	sbci	r26, 0x01	; 1
    5b8a:	a6 95       	lsr	r26
    5b8c:	8f ef       	ldi	r24, 0xFF	; 255
    5b8e:	81 1d       	adc	r24, r1
    5b90:	81 1d       	adc	r24, r1
    5b92:	08 95       	ret

00005b94 <__fp_inf>:
    5b94:	97 f9       	bld	r25, 7
    5b96:	9f 67       	ori	r25, 0x7F	; 127
    5b98:	80 e8       	ldi	r24, 0x80	; 128
    5b9a:	70 e0       	ldi	r23, 0x00	; 0
    5b9c:	60 e0       	ldi	r22, 0x00	; 0
    5b9e:	08 95       	ret

00005ba0 <__fp_nan>:
    5ba0:	9f ef       	ldi	r25, 0xFF	; 255
    5ba2:	80 ec       	ldi	r24, 0xC0	; 192
    5ba4:	08 95       	ret

00005ba6 <__fp_pscA>:
    5ba6:	00 24       	eor	r0, r0
    5ba8:	0a 94       	dec	r0
    5baa:	16 16       	cp	r1, r22
    5bac:	17 06       	cpc	r1, r23
    5bae:	18 06       	cpc	r1, r24
    5bb0:	09 06       	cpc	r0, r25
    5bb2:	08 95       	ret

00005bb4 <__fp_pscB>:
    5bb4:	00 24       	eor	r0, r0
    5bb6:	0a 94       	dec	r0
    5bb8:	12 16       	cp	r1, r18
    5bba:	13 06       	cpc	r1, r19
    5bbc:	14 06       	cpc	r1, r20
    5bbe:	05 06       	cpc	r0, r21
    5bc0:	08 95       	ret

00005bc2 <__fp_round>:
    5bc2:	09 2e       	mov	r0, r25
    5bc4:	03 94       	inc	r0
    5bc6:	00 0c       	add	r0, r0
    5bc8:	11 f4       	brne	.+4      	; 0x5bce <__fp_round+0xc>
    5bca:	88 23       	and	r24, r24
    5bcc:	52 f0       	brmi	.+20     	; 0x5be2 <__fp_round+0x20>
    5bce:	bb 0f       	add	r27, r27
    5bd0:	40 f4       	brcc	.+16     	; 0x5be2 <__fp_round+0x20>
    5bd2:	bf 2b       	or	r27, r31
    5bd4:	11 f4       	brne	.+4      	; 0x5bda <__fp_round+0x18>
    5bd6:	60 ff       	sbrs	r22, 0
    5bd8:	04 c0       	rjmp	.+8      	; 0x5be2 <__fp_round+0x20>
    5bda:	6f 5f       	subi	r22, 0xFF	; 255
    5bdc:	7f 4f       	sbci	r23, 0xFF	; 255
    5bde:	8f 4f       	sbci	r24, 0xFF	; 255
    5be0:	9f 4f       	sbci	r25, 0xFF	; 255
    5be2:	08 95       	ret

00005be4 <__fp_split3>:
    5be4:	57 fd       	sbrc	r21, 7
    5be6:	90 58       	subi	r25, 0x80	; 128
    5be8:	44 0f       	add	r20, r20
    5bea:	55 1f       	adc	r21, r21
    5bec:	59 f0       	breq	.+22     	; 0x5c04 <__fp_splitA+0x10>
    5bee:	5f 3f       	cpi	r21, 0xFF	; 255
    5bf0:	71 f0       	breq	.+28     	; 0x5c0e <__fp_splitA+0x1a>
    5bf2:	47 95       	ror	r20

00005bf4 <__fp_splitA>:
    5bf4:	88 0f       	add	r24, r24
    5bf6:	97 fb       	bst	r25, 7
    5bf8:	99 1f       	adc	r25, r25
    5bfa:	61 f0       	breq	.+24     	; 0x5c14 <__fp_splitA+0x20>
    5bfc:	9f 3f       	cpi	r25, 0xFF	; 255
    5bfe:	79 f0       	breq	.+30     	; 0x5c1e <__fp_splitA+0x2a>
    5c00:	87 95       	ror	r24
    5c02:	08 95       	ret
    5c04:	12 16       	cp	r1, r18
    5c06:	13 06       	cpc	r1, r19
    5c08:	14 06       	cpc	r1, r20
    5c0a:	55 1f       	adc	r21, r21
    5c0c:	f2 cf       	rjmp	.-28     	; 0x5bf2 <__fp_split3+0xe>
    5c0e:	46 95       	lsr	r20
    5c10:	f1 df       	rcall	.-30     	; 0x5bf4 <__fp_splitA>
    5c12:	08 c0       	rjmp	.+16     	; 0x5c24 <__fp_splitA+0x30>
    5c14:	16 16       	cp	r1, r22
    5c16:	17 06       	cpc	r1, r23
    5c18:	18 06       	cpc	r1, r24
    5c1a:	99 1f       	adc	r25, r25
    5c1c:	f1 cf       	rjmp	.-30     	; 0x5c00 <__fp_splitA+0xc>
    5c1e:	86 95       	lsr	r24
    5c20:	71 05       	cpc	r23, r1
    5c22:	61 05       	cpc	r22, r1
    5c24:	08 94       	sec
    5c26:	08 95       	ret

00005c28 <__fp_zero>:
    5c28:	e8 94       	clt

00005c2a <__fp_szero>:
    5c2a:	bb 27       	eor	r27, r27
    5c2c:	66 27       	eor	r22, r22
    5c2e:	77 27       	eor	r23, r23
    5c30:	cb 01       	movw	r24, r22
    5c32:	97 f9       	bld	r25, 7
    5c34:	08 95       	ret

00005c36 <__gesf2>:
    5c36:	8a df       	rcall	.-236    	; 0x5b4c <__fp_cmp>
    5c38:	08 f4       	brcc	.+2      	; 0x5c3c <__gesf2+0x6>
    5c3a:	8f ef       	ldi	r24, 0xFF	; 255
    5c3c:	08 95       	ret

00005c3e <lrint>:
    5c3e:	da df       	rcall	.-76     	; 0x5bf4 <__fp_splitA>
    5c40:	a8 f1       	brcs	.+106    	; 0x5cac <lrint+0x6e>
    5c42:	9e 57       	subi	r25, 0x7E	; 126
    5c44:	a8 f1       	brcs	.+106    	; 0x5cb0 <lrint+0x72>
    5c46:	98 51       	subi	r25, 0x18	; 24
    5c48:	60 f0       	brcs	.+24     	; 0x5c62 <lrint+0x24>
    5c4a:	39 f1       	breq	.+78     	; 0x5c9a <lrint+0x5c>
    5c4c:	98 30       	cpi	r25, 0x08	; 8
    5c4e:	70 f5       	brcc	.+92     	; 0x5cac <lrint+0x6e>
    5c50:	09 2e       	mov	r0, r25
    5c52:	99 27       	eor	r25, r25
    5c54:	66 0f       	add	r22, r22
    5c56:	77 1f       	adc	r23, r23
    5c58:	88 1f       	adc	r24, r24
    5c5a:	99 1f       	adc	r25, r25
    5c5c:	0a 94       	dec	r0
    5c5e:	d1 f7       	brne	.-12     	; 0x5c54 <lrint+0x16>
    5c60:	1c c0       	rjmp	.+56     	; 0x5c9a <lrint+0x5c>
    5c62:	bb 27       	eor	r27, r27
    5c64:	99 3f       	cpi	r25, 0xF9	; 249
    5c66:	4c f4       	brge	.+18     	; 0x5c7a <lrint+0x3c>
    5c68:	b1 11       	cpse	r27, r1
    5c6a:	b1 e0       	ldi	r27, 0x01	; 1
    5c6c:	b6 2b       	or	r27, r22
    5c6e:	67 2f       	mov	r22, r23
    5c70:	78 2f       	mov	r23, r24
    5c72:	88 27       	eor	r24, r24
    5c74:	98 5f       	subi	r25, 0xF8	; 248
    5c76:	b1 f7       	brne	.-20     	; 0x5c64 <lrint+0x26>
    5c78:	08 c0       	rjmp	.+16     	; 0x5c8a <lrint+0x4c>
    5c7a:	86 95       	lsr	r24
    5c7c:	77 95       	ror	r23
    5c7e:	67 95       	ror	r22
    5c80:	b7 95       	ror	r27
    5c82:	08 f4       	brcc	.+2      	; 0x5c86 <lrint+0x48>
    5c84:	b1 60       	ori	r27, 0x01	; 1
    5c86:	93 95       	inc	r25
    5c88:	c1 f7       	brne	.-16     	; 0x5c7a <lrint+0x3c>
    5c8a:	bb 0f       	add	r27, r27
    5c8c:	30 f4       	brcc	.+12     	; 0x5c9a <lrint+0x5c>
    5c8e:	11 f4       	brne	.+4      	; 0x5c94 <lrint+0x56>
    5c90:	60 ff       	sbrs	r22, 0
    5c92:	03 c0       	rjmp	.+6      	; 0x5c9a <lrint+0x5c>
    5c94:	6f 5f       	subi	r22, 0xFF	; 255
    5c96:	7f 4f       	sbci	r23, 0xFF	; 255
    5c98:	8f 4f       	sbci	r24, 0xFF	; 255
    5c9a:	3e f4       	brtc	.+14     	; 0x5caa <lrint+0x6c>
    5c9c:	90 95       	com	r25
    5c9e:	80 95       	com	r24
    5ca0:	70 95       	com	r23
    5ca2:	61 95       	neg	r22
    5ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    5caa:	08 95       	ret
    5cac:	68 94       	set
    5cae:	bd cf       	rjmp	.-134    	; 0x5c2a <__fp_szero>
    5cb0:	bb cf       	rjmp	.-138    	; 0x5c28 <__fp_zero>

00005cb2 <__mulsf3>:
    5cb2:	0b d0       	rcall	.+22     	; 0x5cca <__mulsf3x>
    5cb4:	86 cf       	rjmp	.-244    	; 0x5bc2 <__fp_round>
    5cb6:	77 df       	rcall	.-274    	; 0x5ba6 <__fp_pscA>
    5cb8:	28 f0       	brcs	.+10     	; 0x5cc4 <__mulsf3+0x12>
    5cba:	7c df       	rcall	.-264    	; 0x5bb4 <__fp_pscB>
    5cbc:	18 f0       	brcs	.+6      	; 0x5cc4 <__mulsf3+0x12>
    5cbe:	95 23       	and	r25, r21
    5cc0:	09 f0       	breq	.+2      	; 0x5cc4 <__mulsf3+0x12>
    5cc2:	68 cf       	rjmp	.-304    	; 0x5b94 <__fp_inf>
    5cc4:	6d cf       	rjmp	.-294    	; 0x5ba0 <__fp_nan>
    5cc6:	11 24       	eor	r1, r1
    5cc8:	b0 cf       	rjmp	.-160    	; 0x5c2a <__fp_szero>

00005cca <__mulsf3x>:
    5cca:	8c df       	rcall	.-232    	; 0x5be4 <__fp_split3>
    5ccc:	a0 f3       	brcs	.-24     	; 0x5cb6 <__mulsf3+0x4>

00005cce <__mulsf3_pse>:
    5cce:	95 9f       	mul	r25, r21
    5cd0:	d1 f3       	breq	.-12     	; 0x5cc6 <__mulsf3+0x14>
    5cd2:	95 0f       	add	r25, r21
    5cd4:	50 e0       	ldi	r21, 0x00	; 0
    5cd6:	55 1f       	adc	r21, r21
    5cd8:	62 9f       	mul	r22, r18
    5cda:	f0 01       	movw	r30, r0
    5cdc:	72 9f       	mul	r23, r18
    5cde:	bb 27       	eor	r27, r27
    5ce0:	f0 0d       	add	r31, r0
    5ce2:	b1 1d       	adc	r27, r1
    5ce4:	63 9f       	mul	r22, r19
    5ce6:	aa 27       	eor	r26, r26
    5ce8:	f0 0d       	add	r31, r0
    5cea:	b1 1d       	adc	r27, r1
    5cec:	aa 1f       	adc	r26, r26
    5cee:	64 9f       	mul	r22, r20
    5cf0:	66 27       	eor	r22, r22
    5cf2:	b0 0d       	add	r27, r0
    5cf4:	a1 1d       	adc	r26, r1
    5cf6:	66 1f       	adc	r22, r22
    5cf8:	82 9f       	mul	r24, r18
    5cfa:	22 27       	eor	r18, r18
    5cfc:	b0 0d       	add	r27, r0
    5cfe:	a1 1d       	adc	r26, r1
    5d00:	62 1f       	adc	r22, r18
    5d02:	73 9f       	mul	r23, r19
    5d04:	b0 0d       	add	r27, r0
    5d06:	a1 1d       	adc	r26, r1
    5d08:	62 1f       	adc	r22, r18
    5d0a:	83 9f       	mul	r24, r19
    5d0c:	a0 0d       	add	r26, r0
    5d0e:	61 1d       	adc	r22, r1
    5d10:	22 1f       	adc	r18, r18
    5d12:	74 9f       	mul	r23, r20
    5d14:	33 27       	eor	r19, r19
    5d16:	a0 0d       	add	r26, r0
    5d18:	61 1d       	adc	r22, r1
    5d1a:	23 1f       	adc	r18, r19
    5d1c:	84 9f       	mul	r24, r20
    5d1e:	60 0d       	add	r22, r0
    5d20:	21 1d       	adc	r18, r1
    5d22:	82 2f       	mov	r24, r18
    5d24:	76 2f       	mov	r23, r22
    5d26:	6a 2f       	mov	r22, r26
    5d28:	11 24       	eor	r1, r1
    5d2a:	9f 57       	subi	r25, 0x7F	; 127
    5d2c:	50 40       	sbci	r21, 0x00	; 0
    5d2e:	8a f0       	brmi	.+34     	; 0x5d52 <__mulsf3_pse+0x84>
    5d30:	e1 f0       	breq	.+56     	; 0x5d6a <__mulsf3_pse+0x9c>
    5d32:	88 23       	and	r24, r24
    5d34:	4a f0       	brmi	.+18     	; 0x5d48 <__mulsf3_pse+0x7a>
    5d36:	ee 0f       	add	r30, r30
    5d38:	ff 1f       	adc	r31, r31
    5d3a:	bb 1f       	adc	r27, r27
    5d3c:	66 1f       	adc	r22, r22
    5d3e:	77 1f       	adc	r23, r23
    5d40:	88 1f       	adc	r24, r24
    5d42:	91 50       	subi	r25, 0x01	; 1
    5d44:	50 40       	sbci	r21, 0x00	; 0
    5d46:	a9 f7       	brne	.-22     	; 0x5d32 <__mulsf3_pse+0x64>
    5d48:	9e 3f       	cpi	r25, 0xFE	; 254
    5d4a:	51 05       	cpc	r21, r1
    5d4c:	70 f0       	brcs	.+28     	; 0x5d6a <__mulsf3_pse+0x9c>
    5d4e:	22 cf       	rjmp	.-444    	; 0x5b94 <__fp_inf>
    5d50:	6c cf       	rjmp	.-296    	; 0x5c2a <__fp_szero>
    5d52:	5f 3f       	cpi	r21, 0xFF	; 255
    5d54:	ec f3       	brlt	.-6      	; 0x5d50 <__mulsf3_pse+0x82>
    5d56:	98 3e       	cpi	r25, 0xE8	; 232
    5d58:	dc f3       	brlt	.-10     	; 0x5d50 <__mulsf3_pse+0x82>
    5d5a:	86 95       	lsr	r24
    5d5c:	77 95       	ror	r23
    5d5e:	67 95       	ror	r22
    5d60:	b7 95       	ror	r27
    5d62:	f7 95       	ror	r31
    5d64:	e7 95       	ror	r30
    5d66:	9f 5f       	subi	r25, 0xFF	; 255
    5d68:	c1 f7       	brne	.-16     	; 0x5d5a <__mulsf3_pse+0x8c>
    5d6a:	fe 2b       	or	r31, r30
    5d6c:	88 0f       	add	r24, r24
    5d6e:	91 1d       	adc	r25, r1
    5d70:	96 95       	lsr	r25
    5d72:	87 95       	ror	r24
    5d74:	97 f9       	bld	r25, 7
    5d76:	08 95       	ret

00005d78 <pow>:
    5d78:	fa 01       	movw	r30, r20
    5d7a:	ee 0f       	add	r30, r30
    5d7c:	ff 1f       	adc	r31, r31
    5d7e:	30 96       	adiw	r30, 0x00	; 0
    5d80:	21 05       	cpc	r18, r1
    5d82:	31 05       	cpc	r19, r1
    5d84:	99 f1       	breq	.+102    	; 0x5dec <pow+0x74>
    5d86:	61 15       	cp	r22, r1
    5d88:	71 05       	cpc	r23, r1
    5d8a:	61 f4       	brne	.+24     	; 0x5da4 <pow+0x2c>
    5d8c:	80 38       	cpi	r24, 0x80	; 128
    5d8e:	bf e3       	ldi	r27, 0x3F	; 63
    5d90:	9b 07       	cpc	r25, r27
    5d92:	49 f1       	breq	.+82     	; 0x5de6 <pow+0x6e>
    5d94:	68 94       	set
    5d96:	90 38       	cpi	r25, 0x80	; 128
    5d98:	81 05       	cpc	r24, r1
    5d9a:	61 f0       	breq	.+24     	; 0x5db4 <pow+0x3c>
    5d9c:	80 38       	cpi	r24, 0x80	; 128
    5d9e:	bf ef       	ldi	r27, 0xFF	; 255
    5da0:	9b 07       	cpc	r25, r27
    5da2:	41 f0       	breq	.+16     	; 0x5db4 <pow+0x3c>
    5da4:	99 23       	and	r25, r25
    5da6:	42 f5       	brpl	.+80     	; 0x5df8 <pow+0x80>
    5da8:	ff 3f       	cpi	r31, 0xFF	; 255
    5daa:	e1 05       	cpc	r30, r1
    5dac:	31 05       	cpc	r19, r1
    5dae:	21 05       	cpc	r18, r1
    5db0:	11 f1       	breq	.+68     	; 0x5df6 <pow+0x7e>
    5db2:	e8 94       	clt
    5db4:	08 94       	sec
    5db6:	e7 95       	ror	r30
    5db8:	d9 01       	movw	r26, r18
    5dba:	aa 23       	and	r26, r26
    5dbc:	29 f4       	brne	.+10     	; 0x5dc8 <pow+0x50>
    5dbe:	ab 2f       	mov	r26, r27
    5dc0:	be 2f       	mov	r27, r30
    5dc2:	f8 5f       	subi	r31, 0xF8	; 248
    5dc4:	d0 f3       	brcs	.-12     	; 0x5dba <pow+0x42>
    5dc6:	10 c0       	rjmp	.+32     	; 0x5de8 <pow+0x70>
    5dc8:	ff 5f       	subi	r31, 0xFF	; 255
    5dca:	70 f4       	brcc	.+28     	; 0x5de8 <pow+0x70>
    5dcc:	a6 95       	lsr	r26
    5dce:	e0 f7       	brcc	.-8      	; 0x5dc8 <pow+0x50>
    5dd0:	f7 39       	cpi	r31, 0x97	; 151
    5dd2:	50 f0       	brcs	.+20     	; 0x5de8 <pow+0x70>
    5dd4:	19 f0       	breq	.+6      	; 0x5ddc <pow+0x64>
    5dd6:	ff 3a       	cpi	r31, 0xAF	; 175
    5dd8:	38 f4       	brcc	.+14     	; 0x5de8 <pow+0x70>
    5dda:	9f 77       	andi	r25, 0x7F	; 127
    5ddc:	9f 93       	push	r25
    5dde:	0c d0       	rcall	.+24     	; 0x5df8 <pow+0x80>
    5de0:	0f 90       	pop	r0
    5de2:	07 fc       	sbrc	r0, 7
    5de4:	90 58       	subi	r25, 0x80	; 128
    5de6:	08 95       	ret
    5de8:	3e f0       	brts	.+14     	; 0x5df8 <pow+0x80>
    5dea:	da ce       	rjmp	.-588    	; 0x5ba0 <__fp_nan>
    5dec:	60 e0       	ldi	r22, 0x00	; 0
    5dee:	70 e0       	ldi	r23, 0x00	; 0
    5df0:	80 e8       	ldi	r24, 0x80	; 128
    5df2:	9f e3       	ldi	r25, 0x3F	; 63
    5df4:	08 95       	ret
    5df6:	4f e7       	ldi	r20, 0x7F	; 127
    5df8:	9f 77       	andi	r25, 0x7F	; 127
    5dfa:	5f 93       	push	r21
    5dfc:	4f 93       	push	r20
    5dfe:	3f 93       	push	r19
    5e00:	2f 93       	push	r18
    5e02:	9e d0       	rcall	.+316    	; 0x5f40 <log>
    5e04:	2f 91       	pop	r18
    5e06:	3f 91       	pop	r19
    5e08:	4f 91       	pop	r20
    5e0a:	5f 91       	pop	r21
    5e0c:	52 df       	rcall	.-348    	; 0x5cb2 <__mulsf3>
    5e0e:	05 c0       	rjmp	.+10     	; 0x5e1a <exp>
    5e10:	19 f4       	brne	.+6      	; 0x5e18 <pow+0xa0>
    5e12:	0e f0       	brts	.+2      	; 0x5e16 <pow+0x9e>
    5e14:	bf ce       	rjmp	.-642    	; 0x5b94 <__fp_inf>
    5e16:	08 cf       	rjmp	.-496    	; 0x5c28 <__fp_zero>
    5e18:	c3 ce       	rjmp	.-634    	; 0x5ba0 <__fp_nan>

00005e1a <exp>:
    5e1a:	ec de       	rcall	.-552    	; 0x5bf4 <__fp_splitA>
    5e1c:	c8 f3       	brcs	.-14     	; 0x5e10 <pow+0x98>
    5e1e:	96 38       	cpi	r25, 0x86	; 134
    5e20:	c0 f7       	brcc	.-16     	; 0x5e12 <pow+0x9a>
    5e22:	07 f8       	bld	r0, 7
    5e24:	0f 92       	push	r0
    5e26:	e8 94       	clt
    5e28:	2b e3       	ldi	r18, 0x3B	; 59
    5e2a:	3a ea       	ldi	r19, 0xAA	; 170
    5e2c:	48 eb       	ldi	r20, 0xB8	; 184
    5e2e:	5f e7       	ldi	r21, 0x7F	; 127
    5e30:	4e df       	rcall	.-356    	; 0x5cce <__mulsf3_pse>
    5e32:	0f 92       	push	r0
    5e34:	0f 92       	push	r0
    5e36:	0f 92       	push	r0
    5e38:	4d b7       	in	r20, 0x3d	; 61
    5e3a:	5e b7       	in	r21, 0x3e	; 62
    5e3c:	0f 92       	push	r0
    5e3e:	c0 d0       	rcall	.+384    	; 0x5fc0 <modf>
    5e40:	e8 ec       	ldi	r30, 0xC8	; 200
    5e42:	f0 e0       	ldi	r31, 0x00	; 0
    5e44:	16 d0       	rcall	.+44     	; 0x5e72 <__fp_powser>
    5e46:	4f 91       	pop	r20
    5e48:	5f 91       	pop	r21
    5e4a:	ef 91       	pop	r30
    5e4c:	ff 91       	pop	r31
    5e4e:	e5 95       	asr	r30
    5e50:	ee 1f       	adc	r30, r30
    5e52:	ff 1f       	adc	r31, r31
    5e54:	49 f0       	breq	.+18     	; 0x5e68 <exp+0x4e>
    5e56:	fe 57       	subi	r31, 0x7E	; 126
    5e58:	e0 68       	ori	r30, 0x80	; 128
    5e5a:	44 27       	eor	r20, r20
    5e5c:	ee 0f       	add	r30, r30
    5e5e:	44 1f       	adc	r20, r20
    5e60:	fa 95       	dec	r31
    5e62:	e1 f7       	brne	.-8      	; 0x5e5c <exp+0x42>
    5e64:	41 95       	neg	r20
    5e66:	55 0b       	sbc	r21, r21
    5e68:	32 d0       	rcall	.+100    	; 0x5ece <ldexp>
    5e6a:	0f 90       	pop	r0
    5e6c:	07 fe       	sbrs	r0, 7
    5e6e:	26 c0       	rjmp	.+76     	; 0x5ebc <inverse>
    5e70:	08 95       	ret

00005e72 <__fp_powser>:
    5e72:	df 93       	push	r29
    5e74:	cf 93       	push	r28
    5e76:	1f 93       	push	r17
    5e78:	0f 93       	push	r16
    5e7a:	ff 92       	push	r15
    5e7c:	ef 92       	push	r14
    5e7e:	df 92       	push	r13
    5e80:	7b 01       	movw	r14, r22
    5e82:	8c 01       	movw	r16, r24
    5e84:	68 94       	set
    5e86:	05 c0       	rjmp	.+10     	; 0x5e92 <__fp_powser+0x20>
    5e88:	da 2e       	mov	r13, r26
    5e8a:	ef 01       	movw	r28, r30
    5e8c:	1e df       	rcall	.-452    	; 0x5cca <__mulsf3x>
    5e8e:	fe 01       	movw	r30, r28
    5e90:	e8 94       	clt
    5e92:	a5 91       	lpm	r26, Z+
    5e94:	25 91       	lpm	r18, Z+
    5e96:	35 91       	lpm	r19, Z+
    5e98:	45 91       	lpm	r20, Z+
    5e9a:	55 91       	lpm	r21, Z+
    5e9c:	ae f3       	brts	.-22     	; 0x5e88 <__fp_powser+0x16>
    5e9e:	ef 01       	movw	r28, r30
    5ea0:	28 dd       	rcall	.-1456   	; 0x58f2 <__addsf3x>
    5ea2:	fe 01       	movw	r30, r28
    5ea4:	97 01       	movw	r18, r14
    5ea6:	a8 01       	movw	r20, r16
    5ea8:	da 94       	dec	r13
    5eaa:	79 f7       	brne	.-34     	; 0x5e8a <__fp_powser+0x18>
    5eac:	df 90       	pop	r13
    5eae:	ef 90       	pop	r14
    5eb0:	ff 90       	pop	r15
    5eb2:	0f 91       	pop	r16
    5eb4:	1f 91       	pop	r17
    5eb6:	cf 91       	pop	r28
    5eb8:	df 91       	pop	r29
    5eba:	08 95       	ret

00005ebc <inverse>:
    5ebc:	9b 01       	movw	r18, r22
    5ebe:	ac 01       	movw	r20, r24
    5ec0:	60 e0       	ldi	r22, 0x00	; 0
    5ec2:	70 e0       	ldi	r23, 0x00	; 0
    5ec4:	80 e8       	ldi	r24, 0x80	; 128
    5ec6:	9f e3       	ldi	r25, 0x3F	; 63
    5ec8:	6b cd       	rjmp	.-1322   	; 0x59a0 <__divsf3>
    5eca:	64 ce       	rjmp	.-824    	; 0x5b94 <__fp_inf>
    5ecc:	ac c0       	rjmp	.+344    	; 0x6026 <__fp_mpack>

00005ece <ldexp>:
    5ece:	92 de       	rcall	.-732    	; 0x5bf4 <__fp_splitA>
    5ed0:	e8 f3       	brcs	.-6      	; 0x5ecc <inverse+0x10>
    5ed2:	99 23       	and	r25, r25
    5ed4:	d9 f3       	breq	.-10     	; 0x5ecc <inverse+0x10>
    5ed6:	94 0f       	add	r25, r20
    5ed8:	51 1d       	adc	r21, r1
    5eda:	bb f3       	brvs	.-18     	; 0x5eca <inverse+0xe>
    5edc:	91 50       	subi	r25, 0x01	; 1
    5ede:	50 40       	sbci	r21, 0x00	; 0
    5ee0:	94 f0       	brlt	.+36     	; 0x5f06 <ldexp+0x38>
    5ee2:	59 f0       	breq	.+22     	; 0x5efa <ldexp+0x2c>
    5ee4:	88 23       	and	r24, r24
    5ee6:	32 f0       	brmi	.+12     	; 0x5ef4 <ldexp+0x26>
    5ee8:	66 0f       	add	r22, r22
    5eea:	77 1f       	adc	r23, r23
    5eec:	88 1f       	adc	r24, r24
    5eee:	91 50       	subi	r25, 0x01	; 1
    5ef0:	50 40       	sbci	r21, 0x00	; 0
    5ef2:	c1 f7       	brne	.-16     	; 0x5ee4 <ldexp+0x16>
    5ef4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ef6:	51 05       	cpc	r21, r1
    5ef8:	44 f7       	brge	.-48     	; 0x5eca <inverse+0xe>
    5efa:	88 0f       	add	r24, r24
    5efc:	91 1d       	adc	r25, r1
    5efe:	96 95       	lsr	r25
    5f00:	87 95       	ror	r24
    5f02:	97 f9       	bld	r25, 7
    5f04:	08 95       	ret
    5f06:	5f 3f       	cpi	r21, 0xFF	; 255
    5f08:	ac f0       	brlt	.+42     	; 0x5f34 <ldexp+0x66>
    5f0a:	98 3e       	cpi	r25, 0xE8	; 232
    5f0c:	9c f0       	brlt	.+38     	; 0x5f34 <ldexp+0x66>
    5f0e:	bb 27       	eor	r27, r27
    5f10:	86 95       	lsr	r24
    5f12:	77 95       	ror	r23
    5f14:	67 95       	ror	r22
    5f16:	b7 95       	ror	r27
    5f18:	08 f4       	brcc	.+2      	; 0x5f1c <ldexp+0x4e>
    5f1a:	b1 60       	ori	r27, 0x01	; 1
    5f1c:	93 95       	inc	r25
    5f1e:	c1 f7       	brne	.-16     	; 0x5f10 <ldexp+0x42>
    5f20:	bb 0f       	add	r27, r27
    5f22:	58 f7       	brcc	.-42     	; 0x5efa <ldexp+0x2c>
    5f24:	11 f4       	brne	.+4      	; 0x5f2a <ldexp+0x5c>
    5f26:	60 ff       	sbrs	r22, 0
    5f28:	e8 cf       	rjmp	.-48     	; 0x5efa <ldexp+0x2c>
    5f2a:	6f 5f       	subi	r22, 0xFF	; 255
    5f2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5f30:	9f 4f       	sbci	r25, 0xFF	; 255
    5f32:	e3 cf       	rjmp	.-58     	; 0x5efa <ldexp+0x2c>
    5f34:	7a ce       	rjmp	.-780    	; 0x5c2a <__fp_szero>
    5f36:	0e f0       	brts	.+2      	; 0x5f3a <ldexp+0x6c>
    5f38:	76 c0       	rjmp	.+236    	; 0x6026 <__fp_mpack>
    5f3a:	32 ce       	rjmp	.-924    	; 0x5ba0 <__fp_nan>
    5f3c:	68 94       	set
    5f3e:	2a ce       	rjmp	.-940    	; 0x5b94 <__fp_inf>

00005f40 <log>:
    5f40:	59 de       	rcall	.-846    	; 0x5bf4 <__fp_splitA>
    5f42:	c8 f3       	brcs	.-14     	; 0x5f36 <ldexp+0x68>
    5f44:	99 23       	and	r25, r25
    5f46:	d1 f3       	breq	.-12     	; 0x5f3c <ldexp+0x6e>
    5f48:	c6 f3       	brts	.-16     	; 0x5f3a <ldexp+0x6c>
    5f4a:	df 93       	push	r29
    5f4c:	cf 93       	push	r28
    5f4e:	1f 93       	push	r17
    5f50:	0f 93       	push	r16
    5f52:	ff 92       	push	r15
    5f54:	c9 2f       	mov	r28, r25
    5f56:	dd 27       	eor	r29, r29
    5f58:	88 23       	and	r24, r24
    5f5a:	2a f0       	brmi	.+10     	; 0x5f66 <log+0x26>
    5f5c:	21 97       	sbiw	r28, 0x01	; 1
    5f5e:	66 0f       	add	r22, r22
    5f60:	77 1f       	adc	r23, r23
    5f62:	88 1f       	adc	r24, r24
    5f64:	da f7       	brpl	.-10     	; 0x5f5c <log+0x1c>
    5f66:	20 e0       	ldi	r18, 0x00	; 0
    5f68:	30 e0       	ldi	r19, 0x00	; 0
    5f6a:	40 e8       	ldi	r20, 0x80	; 128
    5f6c:	5f eb       	ldi	r21, 0xBF	; 191
    5f6e:	9f e3       	ldi	r25, 0x3F	; 63
    5f70:	88 39       	cpi	r24, 0x98	; 152
    5f72:	20 f0       	brcs	.+8      	; 0x5f7c <log+0x3c>
    5f74:	80 3e       	cpi	r24, 0xE0	; 224
    5f76:	30 f0       	brcs	.+12     	; 0x5f84 <log+0x44>
    5f78:	21 96       	adiw	r28, 0x01	; 1
    5f7a:	8f 77       	andi	r24, 0x7F	; 127
    5f7c:	a9 dc       	rcall	.-1710   	; 0x58d0 <__addsf3>
    5f7e:	e0 ef       	ldi	r30, 0xF0	; 240
    5f80:	f0 e0       	ldi	r31, 0x00	; 0
    5f82:	03 c0       	rjmp	.+6      	; 0x5f8a <log+0x4a>
    5f84:	a5 dc       	rcall	.-1718   	; 0x58d0 <__addsf3>
    5f86:	ed e1       	ldi	r30, 0x1D	; 29
    5f88:	f1 e0       	ldi	r31, 0x01	; 1
    5f8a:	73 df       	rcall	.-282    	; 0x5e72 <__fp_powser>
    5f8c:	8b 01       	movw	r16, r22
    5f8e:	be 01       	movw	r22, r28
    5f90:	ec 01       	movw	r28, r24
    5f92:	fb 2e       	mov	r15, r27
    5f94:	6f 57       	subi	r22, 0x7F	; 127
    5f96:	71 09       	sbc	r23, r1
    5f98:	75 95       	asr	r23
    5f9a:	77 1f       	adc	r23, r23
    5f9c:	88 0b       	sbc	r24, r24
    5f9e:	99 0b       	sbc	r25, r25
    5fa0:	9a dd       	rcall	.-1228   	; 0x5ad6 <__floatsisf>
    5fa2:	28 e1       	ldi	r18, 0x18	; 24
    5fa4:	32 e7       	ldi	r19, 0x72	; 114
    5fa6:	41 e3       	ldi	r20, 0x31	; 49
    5fa8:	5f e3       	ldi	r21, 0x3F	; 63
    5faa:	8f de       	rcall	.-738    	; 0x5cca <__mulsf3x>
    5fac:	af 2d       	mov	r26, r15
    5fae:	98 01       	movw	r18, r16
    5fb0:	ae 01       	movw	r20, r28
    5fb2:	ff 90       	pop	r15
    5fb4:	0f 91       	pop	r16
    5fb6:	1f 91       	pop	r17
    5fb8:	cf 91       	pop	r28
    5fba:	df 91       	pop	r29
    5fbc:	9a dc       	rcall	.-1740   	; 0x58f2 <__addsf3x>
    5fbe:	01 ce       	rjmp	.-1022   	; 0x5bc2 <__fp_round>

00005fc0 <modf>:
    5fc0:	fa 01       	movw	r30, r20
    5fc2:	dc 01       	movw	r26, r24
    5fc4:	aa 0f       	add	r26, r26
    5fc6:	bb 1f       	adc	r27, r27
    5fc8:	9b 01       	movw	r18, r22
    5fca:	ac 01       	movw	r20, r24
    5fcc:	bf 57       	subi	r27, 0x7F	; 127
    5fce:	28 f4       	brcc	.+10     	; 0x5fda <modf+0x1a>
    5fd0:	22 27       	eor	r18, r18
    5fd2:	33 27       	eor	r19, r19
    5fd4:	44 27       	eor	r20, r20
    5fd6:	50 78       	andi	r21, 0x80	; 128
    5fd8:	1f c0       	rjmp	.+62     	; 0x6018 <modf+0x58>
    5fda:	b7 51       	subi	r27, 0x17	; 23
    5fdc:	88 f4       	brcc	.+34     	; 0x6000 <modf+0x40>
    5fde:	ab 2f       	mov	r26, r27
    5fe0:	00 24       	eor	r0, r0
    5fe2:	46 95       	lsr	r20
    5fe4:	37 95       	ror	r19
    5fe6:	27 95       	ror	r18
    5fe8:	01 1c       	adc	r0, r1
    5fea:	a3 95       	inc	r26
    5fec:	d2 f3       	brmi	.-12     	; 0x5fe2 <modf+0x22>
    5fee:	00 20       	and	r0, r0
    5ff0:	69 f0       	breq	.+26     	; 0x600c <modf+0x4c>
    5ff2:	22 0f       	add	r18, r18
    5ff4:	33 1f       	adc	r19, r19
    5ff6:	44 1f       	adc	r20, r20
    5ff8:	b3 95       	inc	r27
    5ffa:	da f3       	brmi	.-10     	; 0x5ff2 <modf+0x32>
    5ffc:	0d d0       	rcall	.+26     	; 0x6018 <modf+0x58>
    5ffe:	67 cc       	rjmp	.-1842   	; 0x58ce <__subsf3>
    6000:	61 30       	cpi	r22, 0x01	; 1
    6002:	71 05       	cpc	r23, r1
    6004:	a0 e8       	ldi	r26, 0x80	; 128
    6006:	8a 07       	cpc	r24, r26
    6008:	b9 46       	sbci	r27, 0x69	; 105
    600a:	30 f4       	brcc	.+12     	; 0x6018 <modf+0x58>
    600c:	9b 01       	movw	r18, r22
    600e:	ac 01       	movw	r20, r24
    6010:	66 27       	eor	r22, r22
    6012:	77 27       	eor	r23, r23
    6014:	88 27       	eor	r24, r24
    6016:	90 78       	andi	r25, 0x80	; 128
    6018:	30 96       	adiw	r30, 0x00	; 0
    601a:	21 f0       	breq	.+8      	; 0x6024 <modf+0x64>
    601c:	20 83       	st	Z, r18
    601e:	31 83       	std	Z+1, r19	; 0x01
    6020:	42 83       	std	Z+2, r20	; 0x02
    6022:	53 83       	std	Z+3, r21	; 0x03
    6024:	08 95       	ret

00006026 <__fp_mpack>:
    6026:	9f 3f       	cpi	r25, 0xFF	; 255
    6028:	31 f0       	breq	.+12     	; 0x6036 <__fp_mpack_finite+0xc>

0000602a <__fp_mpack_finite>:
    602a:	91 50       	subi	r25, 0x01	; 1
    602c:	20 f4       	brcc	.+8      	; 0x6036 <__fp_mpack_finite+0xc>
    602e:	87 95       	ror	r24
    6030:	77 95       	ror	r23
    6032:	67 95       	ror	r22
    6034:	b7 95       	ror	r27
    6036:	88 0f       	add	r24, r24
    6038:	91 1d       	adc	r25, r1
    603a:	96 95       	lsr	r25
    603c:	87 95       	ror	r24
    603e:	97 f9       	bld	r25, 7
    6040:	08 95       	ret

00006042 <vfprintf>:
    6042:	a1 e1       	ldi	r26, 0x11	; 17
    6044:	b0 e0       	ldi	r27, 0x00	; 0
    6046:	e6 e2       	ldi	r30, 0x26	; 38
    6048:	f0 e3       	ldi	r31, 0x30	; 48
    604a:	a4 c3       	rjmp	.+1864   	; 0x6794 <__prologue_saves__>
    604c:	3c 01       	movw	r6, r24
    604e:	7f 87       	std	Y+15, r23	; 0x0f
    6050:	6e 87       	std	Y+14, r22	; 0x0e
    6052:	6a 01       	movw	r12, r20
    6054:	fc 01       	movw	r30, r24
    6056:	17 82       	std	Z+7, r1	; 0x07
    6058:	16 82       	std	Z+6, r1	; 0x06
    605a:	83 81       	ldd	r24, Z+3	; 0x03
    605c:	81 fd       	sbrc	r24, 1
    605e:	03 c0       	rjmp	.+6      	; 0x6066 <vfprintf+0x24>
    6060:	6f ef       	ldi	r22, 0xFF	; 255
    6062:	7f ef       	ldi	r23, 0xFF	; 255
    6064:	52 c3       	rjmp	.+1700   	; 0x670a <vfprintf+0x6c8>
    6066:	9e 01       	movw	r18, r28
    6068:	2f 5f       	subi	r18, 0xFF	; 255
    606a:	3f 4f       	sbci	r19, 0xFF	; 255
    606c:	39 8b       	std	Y+17, r19	; 0x11
    606e:	28 8b       	std	Y+16, r18	; 0x10
    6070:	f3 01       	movw	r30, r6
    6072:	23 81       	ldd	r18, Z+3	; 0x03
    6074:	ee 85       	ldd	r30, Y+14	; 0x0e
    6076:	ff 85       	ldd	r31, Y+15	; 0x0f
    6078:	23 fd       	sbrc	r18, 3
    607a:	85 91       	lpm	r24, Z+
    607c:	23 ff       	sbrs	r18, 3
    607e:	81 91       	ld	r24, Z+
    6080:	ff 87       	std	Y+15, r31	; 0x0f
    6082:	ee 87       	std	Y+14, r30	; 0x0e
    6084:	88 23       	and	r24, r24
    6086:	09 f4       	brne	.+2      	; 0x608a <vfprintf+0x48>
    6088:	3d c3       	rjmp	.+1658   	; 0x6704 <vfprintf+0x6c2>
    608a:	85 32       	cpi	r24, 0x25	; 37
    608c:	51 f4       	brne	.+20     	; 0x60a2 <vfprintf+0x60>
    608e:	ee 85       	ldd	r30, Y+14	; 0x0e
    6090:	ff 85       	ldd	r31, Y+15	; 0x0f
    6092:	23 fd       	sbrc	r18, 3
    6094:	85 91       	lpm	r24, Z+
    6096:	23 ff       	sbrs	r18, 3
    6098:	81 91       	ld	r24, Z+
    609a:	ff 87       	std	Y+15, r31	; 0x0f
    609c:	ee 87       	std	Y+14, r30	; 0x0e
    609e:	85 32       	cpi	r24, 0x25	; 37
    60a0:	21 f4       	brne	.+8      	; 0x60aa <vfprintf+0x68>
    60a2:	90 e0       	ldi	r25, 0x00	; 0
    60a4:	b3 01       	movw	r22, r6
    60a6:	a0 d5       	rcall	.+2880   	; 0x6be8 <fputc>
    60a8:	e3 cf       	rjmp	.-58     	; 0x6070 <vfprintf+0x2e>
    60aa:	98 2f       	mov	r25, r24
    60ac:	10 e0       	ldi	r17, 0x00	; 0
    60ae:	88 24       	eor	r8, r8
    60b0:	99 24       	eor	r9, r9
    60b2:	10 32       	cpi	r17, 0x20	; 32
    60b4:	b0 f4       	brcc	.+44     	; 0x60e2 <vfprintf+0xa0>
    60b6:	9b 32       	cpi	r25, 0x2B	; 43
    60b8:	69 f0       	breq	.+26     	; 0x60d4 <vfprintf+0x92>
    60ba:	9c 32       	cpi	r25, 0x2C	; 44
    60bc:	28 f4       	brcc	.+10     	; 0x60c8 <vfprintf+0x86>
    60be:	90 32       	cpi	r25, 0x20	; 32
    60c0:	51 f0       	breq	.+20     	; 0x60d6 <vfprintf+0x94>
    60c2:	93 32       	cpi	r25, 0x23	; 35
    60c4:	71 f4       	brne	.+28     	; 0x60e2 <vfprintf+0xa0>
    60c6:	0b c0       	rjmp	.+22     	; 0x60de <vfprintf+0x9c>
    60c8:	9d 32       	cpi	r25, 0x2D	; 45
    60ca:	39 f0       	breq	.+14     	; 0x60da <vfprintf+0x98>
    60cc:	90 33       	cpi	r25, 0x30	; 48
    60ce:	49 f4       	brne	.+18     	; 0x60e2 <vfprintf+0xa0>
    60d0:	11 60       	ori	r17, 0x01	; 1
    60d2:	28 c0       	rjmp	.+80     	; 0x6124 <vfprintf+0xe2>
    60d4:	12 60       	ori	r17, 0x02	; 2
    60d6:	14 60       	ori	r17, 0x04	; 4
    60d8:	25 c0       	rjmp	.+74     	; 0x6124 <vfprintf+0xe2>
    60da:	18 60       	ori	r17, 0x08	; 8
    60dc:	23 c0       	rjmp	.+70     	; 0x6124 <vfprintf+0xe2>
    60de:	10 61       	ori	r17, 0x10	; 16
    60e0:	21 c0       	rjmp	.+66     	; 0x6124 <vfprintf+0xe2>
    60e2:	17 fd       	sbrc	r17, 7
    60e4:	2a c0       	rjmp	.+84     	; 0x613a <vfprintf+0xf8>
    60e6:	89 2f       	mov	r24, r25
    60e8:	80 53       	subi	r24, 0x30	; 48
    60ea:	8a 30       	cpi	r24, 0x0A	; 10
    60ec:	78 f4       	brcc	.+30     	; 0x610c <vfprintf+0xca>
    60ee:	16 ff       	sbrs	r17, 6
    60f0:	06 c0       	rjmp	.+12     	; 0x60fe <vfprintf+0xbc>
    60f2:	fa e0       	ldi	r31, 0x0A	; 10
    60f4:	9f 9e       	mul	r9, r31
    60f6:	90 2c       	mov	r9, r0
    60f8:	11 24       	eor	r1, r1
    60fa:	98 0e       	add	r9, r24
    60fc:	13 c0       	rjmp	.+38     	; 0x6124 <vfprintf+0xe2>
    60fe:	3a e0       	ldi	r19, 0x0A	; 10
    6100:	83 9e       	mul	r8, r19
    6102:	80 2c       	mov	r8, r0
    6104:	11 24       	eor	r1, r1
    6106:	88 0e       	add	r8, r24
    6108:	10 62       	ori	r17, 0x20	; 32
    610a:	0c c0       	rjmp	.+24     	; 0x6124 <vfprintf+0xe2>
    610c:	9e 32       	cpi	r25, 0x2E	; 46
    610e:	21 f4       	brne	.+8      	; 0x6118 <vfprintf+0xd6>
    6110:	16 fd       	sbrc	r17, 6
    6112:	f8 c2       	rjmp	.+1520   	; 0x6704 <vfprintf+0x6c2>
    6114:	10 64       	ori	r17, 0x40	; 64
    6116:	06 c0       	rjmp	.+12     	; 0x6124 <vfprintf+0xe2>
    6118:	9c 36       	cpi	r25, 0x6C	; 108
    611a:	11 f4       	brne	.+4      	; 0x6120 <vfprintf+0xde>
    611c:	10 68       	ori	r17, 0x80	; 128
    611e:	02 c0       	rjmp	.+4      	; 0x6124 <vfprintf+0xe2>
    6120:	98 36       	cpi	r25, 0x68	; 104
    6122:	59 f4       	brne	.+22     	; 0x613a <vfprintf+0xf8>
    6124:	ee 85       	ldd	r30, Y+14	; 0x0e
    6126:	ff 85       	ldd	r31, Y+15	; 0x0f
    6128:	23 fd       	sbrc	r18, 3
    612a:	95 91       	lpm	r25, Z+
    612c:	23 ff       	sbrs	r18, 3
    612e:	91 91       	ld	r25, Z+
    6130:	ff 87       	std	Y+15, r31	; 0x0f
    6132:	ee 87       	std	Y+14, r30	; 0x0e
    6134:	99 23       	and	r25, r25
    6136:	09 f0       	breq	.+2      	; 0x613a <vfprintf+0xf8>
    6138:	bc cf       	rjmp	.-136    	; 0x60b2 <vfprintf+0x70>
    613a:	89 2f       	mov	r24, r25
    613c:	85 54       	subi	r24, 0x45	; 69
    613e:	83 30       	cpi	r24, 0x03	; 3
    6140:	20 f4       	brcc	.+8      	; 0x614a <vfprintf+0x108>
    6142:	81 2f       	mov	r24, r17
    6144:	80 61       	ori	r24, 0x10	; 16
    6146:	90 5e       	subi	r25, 0xE0	; 224
    6148:	07 c0       	rjmp	.+14     	; 0x6158 <vfprintf+0x116>
    614a:	89 2f       	mov	r24, r25
    614c:	85 56       	subi	r24, 0x65	; 101
    614e:	83 30       	cpi	r24, 0x03	; 3
    6150:	08 f0       	brcs	.+2      	; 0x6154 <vfprintf+0x112>
    6152:	8f c1       	rjmp	.+798    	; 0x6472 <vfprintf+0x430>
    6154:	81 2f       	mov	r24, r17
    6156:	8f 7e       	andi	r24, 0xEF	; 239
    6158:	86 fd       	sbrc	r24, 6
    615a:	02 c0       	rjmp	.+4      	; 0x6160 <vfprintf+0x11e>
    615c:	76 e0       	ldi	r23, 0x06	; 6
    615e:	97 2e       	mov	r9, r23
    6160:	6f e3       	ldi	r22, 0x3F	; 63
    6162:	f6 2e       	mov	r15, r22
    6164:	f8 22       	and	r15, r24
    6166:	95 36       	cpi	r25, 0x65	; 101
    6168:	19 f4       	brne	.+6      	; 0x6170 <vfprintf+0x12e>
    616a:	f0 e4       	ldi	r31, 0x40	; 64
    616c:	ff 2a       	or	r15, r31
    616e:	07 c0       	rjmp	.+14     	; 0x617e <vfprintf+0x13c>
    6170:	96 36       	cpi	r25, 0x66	; 102
    6172:	19 f4       	brne	.+6      	; 0x617a <vfprintf+0x138>
    6174:	20 e8       	ldi	r18, 0x80	; 128
    6176:	f2 2a       	or	r15, r18
    6178:	02 c0       	rjmp	.+4      	; 0x617e <vfprintf+0x13c>
    617a:	91 10       	cpse	r9, r1
    617c:	9a 94       	dec	r9
    617e:	f7 fe       	sbrs	r15, 7
    6180:	0a c0       	rjmp	.+20     	; 0x6196 <vfprintf+0x154>
    6182:	3b e3       	ldi	r19, 0x3B	; 59
    6184:	39 15       	cp	r19, r9
    6186:	18 f4       	brcc	.+6      	; 0x618e <vfprintf+0x14c>
    6188:	5c e3       	ldi	r21, 0x3C	; 60
    618a:	b5 2e       	mov	r11, r21
    618c:	02 c0       	rjmp	.+4      	; 0x6192 <vfprintf+0x150>
    618e:	b9 2c       	mov	r11, r9
    6190:	b3 94       	inc	r11
    6192:	27 e0       	ldi	r18, 0x07	; 7
    6194:	09 c0       	rjmp	.+18     	; 0x61a8 <vfprintf+0x166>
    6196:	47 e0       	ldi	r20, 0x07	; 7
    6198:	49 15       	cp	r20, r9
    619a:	20 f4       	brcc	.+8      	; 0x61a4 <vfprintf+0x162>
    619c:	bb 24       	eor	r11, r11
    619e:	47 e0       	ldi	r20, 0x07	; 7
    61a0:	94 2e       	mov	r9, r20
    61a2:	f7 cf       	rjmp	.-18     	; 0x6192 <vfprintf+0x150>
    61a4:	29 2d       	mov	r18, r9
    61a6:	bb 24       	eor	r11, r11
    61a8:	c6 01       	movw	r24, r12
    61aa:	04 96       	adiw	r24, 0x04	; 4
    61ac:	9d 87       	std	Y+13, r25	; 0x0d
    61ae:	8c 87       	std	Y+12, r24	; 0x0c
    61b0:	f6 01       	movw	r30, r12
    61b2:	60 81       	ld	r22, Z
    61b4:	71 81       	ldd	r23, Z+1	; 0x01
    61b6:	82 81       	ldd	r24, Z+2	; 0x02
    61b8:	93 81       	ldd	r25, Z+3	; 0x03
    61ba:	ae 01       	movw	r20, r28
    61bc:	4f 5f       	subi	r20, 0xFF	; 255
    61be:	5f 4f       	sbci	r21, 0xFF	; 255
    61c0:	0b 2d       	mov	r16, r11
    61c2:	24 d4       	rcall	.+2120   	; 0x6a0c <__ftoa_engine>
    61c4:	6c 01       	movw	r12, r24
    61c6:	09 81       	ldd	r16, Y+1	; 0x01
    61c8:	20 2e       	mov	r2, r16
    61ca:	33 24       	eor	r3, r3
    61cc:	00 ff       	sbrs	r16, 0
    61ce:	04 c0       	rjmp	.+8      	; 0x61d8 <vfprintf+0x196>
    61d0:	03 fd       	sbrc	r16, 3
    61d2:	02 c0       	rjmp	.+4      	; 0x61d8 <vfprintf+0x196>
    61d4:	1d e2       	ldi	r17, 0x2D	; 45
    61d6:	09 c0       	rjmp	.+18     	; 0x61ea <vfprintf+0x1a8>
    61d8:	f1 fe       	sbrs	r15, 1
    61da:	02 c0       	rjmp	.+4      	; 0x61e0 <vfprintf+0x19e>
    61dc:	1b e2       	ldi	r17, 0x2B	; 43
    61de:	05 c0       	rjmp	.+10     	; 0x61ea <vfprintf+0x1a8>
    61e0:	f2 fc       	sbrc	r15, 2
    61e2:	02 c0       	rjmp	.+4      	; 0x61e8 <vfprintf+0x1a6>
    61e4:	10 e0       	ldi	r17, 0x00	; 0
    61e6:	01 c0       	rjmp	.+2      	; 0x61ea <vfprintf+0x1a8>
    61e8:	10 e2       	ldi	r17, 0x20	; 32
    61ea:	c1 01       	movw	r24, r2
    61ec:	8c 70       	andi	r24, 0x0C	; 12
    61ee:	90 70       	andi	r25, 0x00	; 0
    61f0:	89 2b       	or	r24, r25
    61f2:	a1 f1       	breq	.+104    	; 0x625c <vfprintf+0x21a>
    61f4:	11 23       	and	r17, r17
    61f6:	11 f4       	brne	.+4      	; 0x61fc <vfprintf+0x1ba>
    61f8:	83 e0       	ldi	r24, 0x03	; 3
    61fa:	01 c0       	rjmp	.+2      	; 0x61fe <vfprintf+0x1bc>
    61fc:	84 e0       	ldi	r24, 0x04	; 4
    61fe:	88 15       	cp	r24, r8
    6200:	10 f0       	brcs	.+4      	; 0x6206 <vfprintf+0x1c4>
    6202:	88 24       	eor	r8, r8
    6204:	09 c0       	rjmp	.+18     	; 0x6218 <vfprintf+0x1d6>
    6206:	88 1a       	sub	r8, r24
    6208:	f3 fc       	sbrc	r15, 3
    620a:	06 c0       	rjmp	.+12     	; 0x6218 <vfprintf+0x1d6>
    620c:	80 e2       	ldi	r24, 0x20	; 32
    620e:	90 e0       	ldi	r25, 0x00	; 0
    6210:	b3 01       	movw	r22, r6
    6212:	ea d4       	rcall	.+2516   	; 0x6be8 <fputc>
    6214:	8a 94       	dec	r8
    6216:	d1 f7       	brne	.-12     	; 0x620c <vfprintf+0x1ca>
    6218:	11 23       	and	r17, r17
    621a:	21 f0       	breq	.+8      	; 0x6224 <vfprintf+0x1e2>
    621c:	81 2f       	mov	r24, r17
    621e:	90 e0       	ldi	r25, 0x00	; 0
    6220:	b3 01       	movw	r22, r6
    6222:	e2 d4       	rcall	.+2500   	; 0x6be8 <fputc>
    6224:	23 fe       	sbrs	r2, 3
    6226:	03 c0       	rjmp	.+6      	; 0x622e <vfprintf+0x1ec>
    6228:	0f e5       	ldi	r16, 0x5F	; 95
    622a:	15 e0       	ldi	r17, 0x05	; 5
    622c:	0d c0       	rjmp	.+26     	; 0x6248 <vfprintf+0x206>
    622e:	03 e6       	ldi	r16, 0x63	; 99
    6230:	15 e0       	ldi	r17, 0x05	; 5
    6232:	0a c0       	rjmp	.+20     	; 0x6248 <vfprintf+0x206>
    6234:	e1 14       	cp	r14, r1
    6236:	f1 04       	cpc	r15, r1
    6238:	09 f0       	breq	.+2      	; 0x623c <vfprintf+0x1fa>
    623a:	80 52       	subi	r24, 0x20	; 32
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	b3 01       	movw	r22, r6
    6240:	d3 d4       	rcall	.+2470   	; 0x6be8 <fputc>
    6242:	0f 5f       	subi	r16, 0xFF	; 255
    6244:	1f 4f       	sbci	r17, 0xFF	; 255
    6246:	05 c0       	rjmp	.+10     	; 0x6252 <vfprintf+0x210>
    6248:	ef 2c       	mov	r14, r15
    624a:	ff 24       	eor	r15, r15
    624c:	f0 e1       	ldi	r31, 0x10	; 16
    624e:	ef 22       	and	r14, r31
    6250:	ff 24       	eor	r15, r15
    6252:	f8 01       	movw	r30, r16
    6254:	84 91       	lpm	r24, Z+
    6256:	88 23       	and	r24, r24
    6258:	69 f7       	brne	.-38     	; 0x6234 <vfprintf+0x1f2>
    625a:	08 c1       	rjmp	.+528    	; 0x646c <vfprintf+0x42a>
    625c:	f7 fe       	sbrs	r15, 7
    625e:	12 c0       	rjmp	.+36     	; 0x6284 <vfprintf+0x242>
    6260:	bc 0c       	add	r11, r12
    6262:	24 fe       	sbrs	r2, 4
    6264:	04 c0       	rjmp	.+8      	; 0x626e <vfprintf+0x22c>
    6266:	8a 81       	ldd	r24, Y+2	; 0x02
    6268:	81 33       	cpi	r24, 0x31	; 49
    626a:	09 f4       	brne	.+2      	; 0x626e <vfprintf+0x22c>
    626c:	ba 94       	dec	r11
    626e:	1b 14       	cp	r1, r11
    6270:	1c f0       	brlt	.+6      	; 0x6278 <vfprintf+0x236>
    6272:	bb 24       	eor	r11, r11
    6274:	b3 94       	inc	r11
    6276:	2d c0       	rjmp	.+90     	; 0x62d2 <vfprintf+0x290>
    6278:	f8 e0       	ldi	r31, 0x08	; 8
    627a:	fb 15       	cp	r31, r11
    627c:	50 f5       	brcc	.+84     	; 0x62d2 <vfprintf+0x290>
    627e:	38 e0       	ldi	r19, 0x08	; 8
    6280:	b3 2e       	mov	r11, r19
    6282:	27 c0       	rjmp	.+78     	; 0x62d2 <vfprintf+0x290>
    6284:	f6 fc       	sbrc	r15, 6
    6286:	25 c0       	rjmp	.+74     	; 0x62d2 <vfprintf+0x290>
    6288:	89 2d       	mov	r24, r9
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	8c 15       	cp	r24, r12
    628e:	9d 05       	cpc	r25, r13
    6290:	4c f0       	brlt	.+18     	; 0x62a4 <vfprintf+0x262>
    6292:	2c ef       	ldi	r18, 0xFC	; 252
    6294:	c2 16       	cp	r12, r18
    6296:	2f ef       	ldi	r18, 0xFF	; 255
    6298:	d2 06       	cpc	r13, r18
    629a:	24 f0       	brlt	.+8      	; 0x62a4 <vfprintf+0x262>
    629c:	30 e8       	ldi	r19, 0x80	; 128
    629e:	f3 2a       	or	r15, r19
    62a0:	01 c0       	rjmp	.+2      	; 0x62a4 <vfprintf+0x262>
    62a2:	9a 94       	dec	r9
    62a4:	99 20       	and	r9, r9
    62a6:	49 f0       	breq	.+18     	; 0x62ba <vfprintf+0x278>
    62a8:	e2 e0       	ldi	r30, 0x02	; 2
    62aa:	f0 e0       	ldi	r31, 0x00	; 0
    62ac:	ec 0f       	add	r30, r28
    62ae:	fd 1f       	adc	r31, r29
    62b0:	e9 0d       	add	r30, r9
    62b2:	f1 1d       	adc	r31, r1
    62b4:	80 81       	ld	r24, Z
    62b6:	80 33       	cpi	r24, 0x30	; 48
    62b8:	a1 f3       	breq	.-24     	; 0x62a2 <vfprintf+0x260>
    62ba:	f7 fe       	sbrs	r15, 7
    62bc:	0a c0       	rjmp	.+20     	; 0x62d2 <vfprintf+0x290>
    62be:	b9 2c       	mov	r11, r9
    62c0:	b3 94       	inc	r11
    62c2:	89 2d       	mov	r24, r9
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	c8 16       	cp	r12, r24
    62c8:	d9 06       	cpc	r13, r25
    62ca:	14 f0       	brlt	.+4      	; 0x62d0 <vfprintf+0x28e>
    62cc:	99 24       	eor	r9, r9
    62ce:	01 c0       	rjmp	.+2      	; 0x62d2 <vfprintf+0x290>
    62d0:	9c 18       	sub	r9, r12
    62d2:	f7 fc       	sbrc	r15, 7
    62d4:	03 c0       	rjmp	.+6      	; 0x62dc <vfprintf+0x29a>
    62d6:	25 e0       	ldi	r18, 0x05	; 5
    62d8:	30 e0       	ldi	r19, 0x00	; 0
    62da:	09 c0       	rjmp	.+18     	; 0x62ee <vfprintf+0x2ac>
    62dc:	1c 14       	cp	r1, r12
    62de:	1d 04       	cpc	r1, r13
    62e0:	1c f0       	brlt	.+6      	; 0x62e8 <vfprintf+0x2a6>
    62e2:	21 e0       	ldi	r18, 0x01	; 1
    62e4:	30 e0       	ldi	r19, 0x00	; 0
    62e6:	03 c0       	rjmp	.+6      	; 0x62ee <vfprintf+0x2ac>
    62e8:	96 01       	movw	r18, r12
    62ea:	2f 5f       	subi	r18, 0xFF	; 255
    62ec:	3f 4f       	sbci	r19, 0xFF	; 255
    62ee:	11 23       	and	r17, r17
    62f0:	11 f0       	breq	.+4      	; 0x62f6 <vfprintf+0x2b4>
    62f2:	2f 5f       	subi	r18, 0xFF	; 255
    62f4:	3f 4f       	sbci	r19, 0xFF	; 255
    62f6:	99 20       	and	r9, r9
    62f8:	29 f0       	breq	.+10     	; 0x6304 <vfprintf+0x2c2>
    62fa:	89 2d       	mov	r24, r9
    62fc:	90 e0       	ldi	r25, 0x00	; 0
    62fe:	01 96       	adiw	r24, 0x01	; 1
    6300:	28 0f       	add	r18, r24
    6302:	39 1f       	adc	r19, r25
    6304:	88 2d       	mov	r24, r8
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	28 17       	cp	r18, r24
    630a:	39 07       	cpc	r19, r25
    630c:	14 f0       	brlt	.+4      	; 0x6312 <vfprintf+0x2d0>
    630e:	88 24       	eor	r8, r8
    6310:	01 c0       	rjmp	.+2      	; 0x6314 <vfprintf+0x2d2>
    6312:	82 1a       	sub	r8, r18
    6314:	4f 2c       	mov	r4, r15
    6316:	55 24       	eor	r5, r5
    6318:	c2 01       	movw	r24, r4
    631a:	89 70       	andi	r24, 0x09	; 9
    631c:	90 70       	andi	r25, 0x00	; 0
    631e:	89 2b       	or	r24, r25
    6320:	31 f0       	breq	.+12     	; 0x632e <vfprintf+0x2ec>
    6322:	07 c0       	rjmp	.+14     	; 0x6332 <vfprintf+0x2f0>
    6324:	80 e2       	ldi	r24, 0x20	; 32
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	b3 01       	movw	r22, r6
    632a:	5e d4       	rcall	.+2236   	; 0x6be8 <fputc>
    632c:	8a 94       	dec	r8
    632e:	88 20       	and	r8, r8
    6330:	c9 f7       	brne	.-14     	; 0x6324 <vfprintf+0x2e2>
    6332:	11 23       	and	r17, r17
    6334:	21 f0       	breq	.+8      	; 0x633e <vfprintf+0x2fc>
    6336:	81 2f       	mov	r24, r17
    6338:	90 e0       	ldi	r25, 0x00	; 0
    633a:	b3 01       	movw	r22, r6
    633c:	55 d4       	rcall	.+2218   	; 0x6be8 <fputc>
    633e:	43 fe       	sbrs	r4, 3
    6340:	06 c0       	rjmp	.+12     	; 0x634e <vfprintf+0x30c>
    6342:	07 c0       	rjmp	.+14     	; 0x6352 <vfprintf+0x310>
    6344:	80 e3       	ldi	r24, 0x30	; 48
    6346:	90 e0       	ldi	r25, 0x00	; 0
    6348:	b3 01       	movw	r22, r6
    634a:	4e d4       	rcall	.+2204   	; 0x6be8 <fputc>
    634c:	8a 94       	dec	r8
    634e:	88 20       	and	r8, r8
    6350:	c9 f7       	brne	.-14     	; 0x6344 <vfprintf+0x302>
    6352:	f7 fe       	sbrs	r15, 7
    6354:	44 c0       	rjmp	.+136    	; 0x63de <vfprintf+0x39c>
    6356:	86 01       	movw	r16, r12
    6358:	d7 fe       	sbrs	r13, 7
    635a:	02 c0       	rjmp	.+4      	; 0x6360 <vfprintf+0x31e>
    635c:	00 e0       	ldi	r16, 0x00	; 0
    635e:	10 e0       	ldi	r17, 0x00	; 0
    6360:	76 01       	movw	r14, r12
    6362:	08 94       	sec
    6364:	e1 1c       	adc	r14, r1
    6366:	f1 1c       	adc	r15, r1
    6368:	e0 1a       	sub	r14, r16
    636a:	f1 0a       	sbc	r15, r17
    636c:	41 e0       	ldi	r20, 0x01	; 1
    636e:	50 e0       	ldi	r21, 0x00	; 0
    6370:	4c 0f       	add	r20, r28
    6372:	5d 1f       	adc	r21, r29
    6374:	e4 0e       	add	r14, r20
    6376:	f5 1e       	adc	r15, r21
    6378:	26 01       	movw	r4, r12
    637a:	4b 18       	sub	r4, r11
    637c:	51 08       	sbc	r5, r1
    637e:	89 2d       	mov	r24, r9
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	aa 24       	eor	r10, r10
    6384:	bb 24       	eor	r11, r11
    6386:	a8 1a       	sub	r10, r24
    6388:	b9 0a       	sbc	r11, r25
    638a:	5f ef       	ldi	r21, 0xFF	; 255
    638c:	0f 3f       	cpi	r16, 0xFF	; 255
    638e:	15 07       	cpc	r17, r21
    6390:	21 f4       	brne	.+8      	; 0x639a <vfprintf+0x358>
    6392:	8e e2       	ldi	r24, 0x2E	; 46
    6394:	90 e0       	ldi	r25, 0x00	; 0
    6396:	b3 01       	movw	r22, r6
    6398:	27 d4       	rcall	.+2126   	; 0x6be8 <fputc>
    639a:	c0 16       	cp	r12, r16
    639c:	d1 06       	cpc	r13, r17
    639e:	34 f0       	brlt	.+12     	; 0x63ac <vfprintf+0x36a>
    63a0:	40 16       	cp	r4, r16
    63a2:	51 06       	cpc	r5, r17
    63a4:	1c f4       	brge	.+6      	; 0x63ac <vfprintf+0x36a>
    63a6:	f7 01       	movw	r30, r14
    63a8:	80 81       	ld	r24, Z
    63aa:	01 c0       	rjmp	.+2      	; 0x63ae <vfprintf+0x36c>
    63ac:	80 e3       	ldi	r24, 0x30	; 48
    63ae:	01 50       	subi	r16, 0x01	; 1
    63b0:	10 40       	sbci	r17, 0x00	; 0
    63b2:	08 94       	sec
    63b4:	e1 1c       	adc	r14, r1
    63b6:	f1 1c       	adc	r15, r1
    63b8:	0a 15       	cp	r16, r10
    63ba:	1b 05       	cpc	r17, r11
    63bc:	24 f0       	brlt	.+8      	; 0x63c6 <vfprintf+0x384>
    63be:	90 e0       	ldi	r25, 0x00	; 0
    63c0:	b3 01       	movw	r22, r6
    63c2:	12 d4       	rcall	.+2084   	; 0x6be8 <fputc>
    63c4:	e2 cf       	rjmp	.-60     	; 0x638a <vfprintf+0x348>
    63c6:	0c 15       	cp	r16, r12
    63c8:	1d 05       	cpc	r17, r13
    63ca:	39 f4       	brne	.+14     	; 0x63da <vfprintf+0x398>
    63cc:	9a 81       	ldd	r25, Y+2	; 0x02
    63ce:	96 33       	cpi	r25, 0x36	; 54
    63d0:	18 f4       	brcc	.+6      	; 0x63d8 <vfprintf+0x396>
    63d2:	95 33       	cpi	r25, 0x35	; 53
    63d4:	11 f4       	brne	.+4      	; 0x63da <vfprintf+0x398>
    63d6:	24 fe       	sbrs	r2, 4
    63d8:	81 e3       	ldi	r24, 0x31	; 49
    63da:	90 e0       	ldi	r25, 0x00	; 0
    63dc:	45 c0       	rjmp	.+138    	; 0x6468 <vfprintf+0x426>
    63de:	8a 81       	ldd	r24, Y+2	; 0x02
    63e0:	81 33       	cpi	r24, 0x31	; 49
    63e2:	09 f0       	breq	.+2      	; 0x63e6 <vfprintf+0x3a4>
    63e4:	0f 7e       	andi	r16, 0xEF	; 239
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	b3 01       	movw	r22, r6
    63ea:	fe d3       	rcall	.+2044   	; 0x6be8 <fputc>
    63ec:	99 20       	and	r9, r9
    63ee:	91 f0       	breq	.+36     	; 0x6414 <vfprintf+0x3d2>
    63f0:	8e e2       	ldi	r24, 0x2E	; 46
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	b3 01       	movw	r22, r6
    63f6:	f8 d3       	rcall	.+2032   	; 0x6be8 <fputc>
    63f8:	12 e0       	ldi	r17, 0x02	; 2
    63fa:	e1 e0       	ldi	r30, 0x01	; 1
    63fc:	f0 e0       	ldi	r31, 0x00	; 0
    63fe:	ec 0f       	add	r30, r28
    6400:	fd 1f       	adc	r31, r29
    6402:	e1 0f       	add	r30, r17
    6404:	f1 1d       	adc	r31, r1
    6406:	1f 5f       	subi	r17, 0xFF	; 255
    6408:	80 81       	ld	r24, Z
    640a:	90 e0       	ldi	r25, 0x00	; 0
    640c:	b3 01       	movw	r22, r6
    640e:	ec d3       	rcall	.+2008   	; 0x6be8 <fputc>
    6410:	9a 94       	dec	r9
    6412:	99 f7       	brne	.-26     	; 0x63fa <vfprintf+0x3b8>
    6414:	44 fc       	sbrc	r4, 4
    6416:	03 c0       	rjmp	.+6      	; 0x641e <vfprintf+0x3dc>
    6418:	85 e6       	ldi	r24, 0x65	; 101
    641a:	90 e0       	ldi	r25, 0x00	; 0
    641c:	02 c0       	rjmp	.+4      	; 0x6422 <vfprintf+0x3e0>
    641e:	85 e4       	ldi	r24, 0x45	; 69
    6420:	90 e0       	ldi	r25, 0x00	; 0
    6422:	b3 01       	movw	r22, r6
    6424:	e1 d3       	rcall	.+1986   	; 0x6be8 <fputc>
    6426:	d7 fc       	sbrc	r13, 7
    6428:	05 c0       	rjmp	.+10     	; 0x6434 <vfprintf+0x3f2>
    642a:	c1 14       	cp	r12, r1
    642c:	d1 04       	cpc	r13, r1
    642e:	41 f4       	brne	.+16     	; 0x6440 <vfprintf+0x3fe>
    6430:	04 ff       	sbrs	r16, 4
    6432:	06 c0       	rjmp	.+12     	; 0x6440 <vfprintf+0x3fe>
    6434:	d0 94       	com	r13
    6436:	c1 94       	neg	r12
    6438:	d1 08       	sbc	r13, r1
    643a:	d3 94       	inc	r13
    643c:	8d e2       	ldi	r24, 0x2D	; 45
    643e:	01 c0       	rjmp	.+2      	; 0x6442 <vfprintf+0x400>
    6440:	8b e2       	ldi	r24, 0x2B	; 43
    6442:	90 e0       	ldi	r25, 0x00	; 0
    6444:	b3 01       	movw	r22, r6
    6446:	d0 d3       	rcall	.+1952   	; 0x6be8 <fputc>
    6448:	80 e3       	ldi	r24, 0x30	; 48
    644a:	05 c0       	rjmp	.+10     	; 0x6456 <vfprintf+0x414>
    644c:	8f 5f       	subi	r24, 0xFF	; 255
    644e:	26 ef       	ldi	r18, 0xF6	; 246
    6450:	3f ef       	ldi	r19, 0xFF	; 255
    6452:	c2 0e       	add	r12, r18
    6454:	d3 1e       	adc	r13, r19
    6456:	3a e0       	ldi	r19, 0x0A	; 10
    6458:	c3 16       	cp	r12, r19
    645a:	d1 04       	cpc	r13, r1
    645c:	bc f7       	brge	.-18     	; 0x644c <vfprintf+0x40a>
    645e:	90 e0       	ldi	r25, 0x00	; 0
    6460:	b3 01       	movw	r22, r6
    6462:	c2 d3       	rcall	.+1924   	; 0x6be8 <fputc>
    6464:	c6 01       	movw	r24, r12
    6466:	c0 96       	adiw	r24, 0x30	; 48
    6468:	b3 01       	movw	r22, r6
    646a:	be d3       	rcall	.+1916   	; 0x6be8 <fputc>
    646c:	cc 84       	ldd	r12, Y+12	; 0x0c
    646e:	dd 84       	ldd	r13, Y+13	; 0x0d
    6470:	46 c1       	rjmp	.+652    	; 0x66fe <vfprintf+0x6bc>
    6472:	93 36       	cpi	r25, 0x63	; 99
    6474:	31 f0       	breq	.+12     	; 0x6482 <vfprintf+0x440>
    6476:	93 37       	cpi	r25, 0x73	; 115
    6478:	99 f0       	breq	.+38     	; 0x64a0 <vfprintf+0x45e>
    647a:	93 35       	cpi	r25, 0x53	; 83
    647c:	09 f0       	breq	.+2      	; 0x6480 <vfprintf+0x43e>
    647e:	55 c0       	rjmp	.+170    	; 0x652a <vfprintf+0x4e8>
    6480:	22 c0       	rjmp	.+68     	; 0x64c6 <vfprintf+0x484>
    6482:	f6 01       	movw	r30, r12
    6484:	80 81       	ld	r24, Z
    6486:	89 83       	std	Y+1, r24	; 0x01
    6488:	5e 01       	movw	r10, r28
    648a:	08 94       	sec
    648c:	a1 1c       	adc	r10, r1
    648e:	b1 1c       	adc	r11, r1
    6490:	22 e0       	ldi	r18, 0x02	; 2
    6492:	30 e0       	ldi	r19, 0x00	; 0
    6494:	c2 0e       	add	r12, r18
    6496:	d3 1e       	adc	r13, r19
    6498:	21 e0       	ldi	r18, 0x01	; 1
    649a:	e2 2e       	mov	r14, r18
    649c:	f1 2c       	mov	r15, r1
    649e:	11 c0       	rjmp	.+34     	; 0x64c2 <vfprintf+0x480>
    64a0:	f6 01       	movw	r30, r12
    64a2:	a0 80       	ld	r10, Z
    64a4:	b1 80       	ldd	r11, Z+1	; 0x01
    64a6:	16 fd       	sbrc	r17, 6
    64a8:	03 c0       	rjmp	.+6      	; 0x64b0 <vfprintf+0x46e>
    64aa:	6f ef       	ldi	r22, 0xFF	; 255
    64ac:	7f ef       	ldi	r23, 0xFF	; 255
    64ae:	02 c0       	rjmp	.+4      	; 0x64b4 <vfprintf+0x472>
    64b0:	69 2d       	mov	r22, r9
    64b2:	70 e0       	ldi	r23, 0x00	; 0
    64b4:	22 e0       	ldi	r18, 0x02	; 2
    64b6:	30 e0       	ldi	r19, 0x00	; 0
    64b8:	c2 0e       	add	r12, r18
    64ba:	d3 1e       	adc	r13, r19
    64bc:	c5 01       	movw	r24, r10
    64be:	89 d3       	rcall	.+1810   	; 0x6bd2 <strnlen>
    64c0:	7c 01       	movw	r14, r24
    64c2:	1f 77       	andi	r17, 0x7F	; 127
    64c4:	12 c0       	rjmp	.+36     	; 0x64ea <vfprintf+0x4a8>
    64c6:	f6 01       	movw	r30, r12
    64c8:	a0 80       	ld	r10, Z
    64ca:	b1 80       	ldd	r11, Z+1	; 0x01
    64cc:	16 fd       	sbrc	r17, 6
    64ce:	03 c0       	rjmp	.+6      	; 0x64d6 <vfprintf+0x494>
    64d0:	6f ef       	ldi	r22, 0xFF	; 255
    64d2:	7f ef       	ldi	r23, 0xFF	; 255
    64d4:	02 c0       	rjmp	.+4      	; 0x64da <vfprintf+0x498>
    64d6:	69 2d       	mov	r22, r9
    64d8:	70 e0       	ldi	r23, 0x00	; 0
    64da:	22 e0       	ldi	r18, 0x02	; 2
    64dc:	30 e0       	ldi	r19, 0x00	; 0
    64de:	c2 0e       	add	r12, r18
    64e0:	d3 1e       	adc	r13, r19
    64e2:	c5 01       	movw	r24, r10
    64e4:	6b d3       	rcall	.+1750   	; 0x6bbc <strnlen_P>
    64e6:	7c 01       	movw	r14, r24
    64e8:	10 68       	ori	r17, 0x80	; 128
    64ea:	13 ff       	sbrs	r17, 3
    64ec:	06 c0       	rjmp	.+12     	; 0x64fa <vfprintf+0x4b8>
    64ee:	19 c0       	rjmp	.+50     	; 0x6522 <vfprintf+0x4e0>
    64f0:	80 e2       	ldi	r24, 0x20	; 32
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	b3 01       	movw	r22, r6
    64f6:	78 d3       	rcall	.+1776   	; 0x6be8 <fputc>
    64f8:	8a 94       	dec	r8
    64fa:	88 2d       	mov	r24, r8
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	e8 16       	cp	r14, r24
    6500:	f9 06       	cpc	r15, r25
    6502:	b0 f3       	brcs	.-20     	; 0x64f0 <vfprintf+0x4ae>
    6504:	0e c0       	rjmp	.+28     	; 0x6522 <vfprintf+0x4e0>
    6506:	f5 01       	movw	r30, r10
    6508:	17 fd       	sbrc	r17, 7
    650a:	85 91       	lpm	r24, Z+
    650c:	17 ff       	sbrs	r17, 7
    650e:	81 91       	ld	r24, Z+
    6510:	5f 01       	movw	r10, r30
    6512:	90 e0       	ldi	r25, 0x00	; 0
    6514:	b3 01       	movw	r22, r6
    6516:	68 d3       	rcall	.+1744   	; 0x6be8 <fputc>
    6518:	81 10       	cpse	r8, r1
    651a:	8a 94       	dec	r8
    651c:	08 94       	sec
    651e:	e1 08       	sbc	r14, r1
    6520:	f1 08       	sbc	r15, r1
    6522:	e1 14       	cp	r14, r1
    6524:	f1 04       	cpc	r15, r1
    6526:	79 f7       	brne	.-34     	; 0x6506 <vfprintf+0x4c4>
    6528:	ea c0       	rjmp	.+468    	; 0x66fe <vfprintf+0x6bc>
    652a:	94 36       	cpi	r25, 0x64	; 100
    652c:	11 f0       	breq	.+4      	; 0x6532 <vfprintf+0x4f0>
    652e:	99 36       	cpi	r25, 0x69	; 105
    6530:	81 f5       	brne	.+96     	; 0x6592 <vfprintf+0x550>
    6532:	17 ff       	sbrs	r17, 7
    6534:	08 c0       	rjmp	.+16     	; 0x6546 <vfprintf+0x504>
    6536:	f6 01       	movw	r30, r12
    6538:	20 81       	ld	r18, Z
    653a:	31 81       	ldd	r19, Z+1	; 0x01
    653c:	42 81       	ldd	r20, Z+2	; 0x02
    653e:	53 81       	ldd	r21, Z+3	; 0x03
    6540:	84 e0       	ldi	r24, 0x04	; 4
    6542:	90 e0       	ldi	r25, 0x00	; 0
    6544:	0a c0       	rjmp	.+20     	; 0x655a <vfprintf+0x518>
    6546:	f6 01       	movw	r30, r12
    6548:	80 81       	ld	r24, Z
    654a:	91 81       	ldd	r25, Z+1	; 0x01
    654c:	9c 01       	movw	r18, r24
    654e:	44 27       	eor	r20, r20
    6550:	37 fd       	sbrc	r19, 7
    6552:	40 95       	com	r20
    6554:	54 2f       	mov	r21, r20
    6556:	82 e0       	ldi	r24, 0x02	; 2
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	c8 0e       	add	r12, r24
    655c:	d9 1e       	adc	r13, r25
    655e:	9f e6       	ldi	r25, 0x6F	; 111
    6560:	f9 2e       	mov	r15, r25
    6562:	f1 22       	and	r15, r17
    6564:	57 ff       	sbrs	r21, 7
    6566:	09 c0       	rjmp	.+18     	; 0x657a <vfprintf+0x538>
    6568:	50 95       	com	r21
    656a:	40 95       	com	r20
    656c:	30 95       	com	r19
    656e:	21 95       	neg	r18
    6570:	3f 4f       	sbci	r19, 0xFF	; 255
    6572:	4f 4f       	sbci	r20, 0xFF	; 255
    6574:	5f 4f       	sbci	r21, 0xFF	; 255
    6576:	90 e8       	ldi	r25, 0x80	; 128
    6578:	f9 2a       	or	r15, r25
    657a:	ca 01       	movw	r24, r20
    657c:	b9 01       	movw	r22, r18
    657e:	ae 01       	movw	r20, r28
    6580:	4f 5f       	subi	r20, 0xFF	; 255
    6582:	5f 4f       	sbci	r21, 0xFF	; 255
    6584:	2a e0       	ldi	r18, 0x0A	; 10
    6586:	30 e0       	ldi	r19, 0x00	; 0
    6588:	a2 d3       	rcall	.+1860   	; 0x6cce <__ultoa_invert>
    658a:	e8 2e       	mov	r14, r24
    658c:	e8 89       	ldd	r30, Y+16	; 0x10
    658e:	ee 1a       	sub	r14, r30
    6590:	40 c0       	rjmp	.+128    	; 0x6612 <vfprintf+0x5d0>
    6592:	95 37       	cpi	r25, 0x75	; 117
    6594:	21 f4       	brne	.+8      	; 0x659e <vfprintf+0x55c>
    6596:	1f 7e       	andi	r17, 0xEF	; 239
    6598:	2a e0       	ldi	r18, 0x0A	; 10
    659a:	30 e0       	ldi	r19, 0x00	; 0
    659c:	1c c0       	rjmp	.+56     	; 0x65d6 <vfprintf+0x594>
    659e:	19 7f       	andi	r17, 0xF9	; 249
    65a0:	9f 36       	cpi	r25, 0x6F	; 111
    65a2:	61 f0       	breq	.+24     	; 0x65bc <vfprintf+0x57a>
    65a4:	90 37       	cpi	r25, 0x70	; 112
    65a6:	20 f4       	brcc	.+8      	; 0x65b0 <vfprintf+0x56e>
    65a8:	98 35       	cpi	r25, 0x58	; 88
    65aa:	09 f0       	breq	.+2      	; 0x65ae <vfprintf+0x56c>
    65ac:	ab c0       	rjmp	.+342    	; 0x6704 <vfprintf+0x6c2>
    65ae:	0f c0       	rjmp	.+30     	; 0x65ce <vfprintf+0x58c>
    65b0:	90 37       	cpi	r25, 0x70	; 112
    65b2:	39 f0       	breq	.+14     	; 0x65c2 <vfprintf+0x580>
    65b4:	98 37       	cpi	r25, 0x78	; 120
    65b6:	09 f0       	breq	.+2      	; 0x65ba <vfprintf+0x578>
    65b8:	a5 c0       	rjmp	.+330    	; 0x6704 <vfprintf+0x6c2>
    65ba:	04 c0       	rjmp	.+8      	; 0x65c4 <vfprintf+0x582>
    65bc:	28 e0       	ldi	r18, 0x08	; 8
    65be:	30 e0       	ldi	r19, 0x00	; 0
    65c0:	0a c0       	rjmp	.+20     	; 0x65d6 <vfprintf+0x594>
    65c2:	10 61       	ori	r17, 0x10	; 16
    65c4:	14 fd       	sbrc	r17, 4
    65c6:	14 60       	ori	r17, 0x04	; 4
    65c8:	20 e1       	ldi	r18, 0x10	; 16
    65ca:	30 e0       	ldi	r19, 0x00	; 0
    65cc:	04 c0       	rjmp	.+8      	; 0x65d6 <vfprintf+0x594>
    65ce:	14 fd       	sbrc	r17, 4
    65d0:	16 60       	ori	r17, 0x06	; 6
    65d2:	20 e1       	ldi	r18, 0x10	; 16
    65d4:	32 e0       	ldi	r19, 0x02	; 2
    65d6:	17 ff       	sbrs	r17, 7
    65d8:	08 c0       	rjmp	.+16     	; 0x65ea <vfprintf+0x5a8>
    65da:	f6 01       	movw	r30, r12
    65dc:	60 81       	ld	r22, Z
    65de:	71 81       	ldd	r23, Z+1	; 0x01
    65e0:	82 81       	ldd	r24, Z+2	; 0x02
    65e2:	93 81       	ldd	r25, Z+3	; 0x03
    65e4:	44 e0       	ldi	r20, 0x04	; 4
    65e6:	50 e0       	ldi	r21, 0x00	; 0
    65e8:	08 c0       	rjmp	.+16     	; 0x65fa <vfprintf+0x5b8>
    65ea:	f6 01       	movw	r30, r12
    65ec:	80 81       	ld	r24, Z
    65ee:	91 81       	ldd	r25, Z+1	; 0x01
    65f0:	bc 01       	movw	r22, r24
    65f2:	80 e0       	ldi	r24, 0x00	; 0
    65f4:	90 e0       	ldi	r25, 0x00	; 0
    65f6:	42 e0       	ldi	r20, 0x02	; 2
    65f8:	50 e0       	ldi	r21, 0x00	; 0
    65fa:	c4 0e       	add	r12, r20
    65fc:	d5 1e       	adc	r13, r21
    65fe:	ae 01       	movw	r20, r28
    6600:	4f 5f       	subi	r20, 0xFF	; 255
    6602:	5f 4f       	sbci	r21, 0xFF	; 255
    6604:	64 d3       	rcall	.+1736   	; 0x6cce <__ultoa_invert>
    6606:	e8 2e       	mov	r14, r24
    6608:	58 89       	ldd	r21, Y+16	; 0x10
    660a:	e5 1a       	sub	r14, r21
    660c:	8f e7       	ldi	r24, 0x7F	; 127
    660e:	f8 2e       	mov	r15, r24
    6610:	f1 22       	and	r15, r17
    6612:	f6 fe       	sbrs	r15, 6
    6614:	0b c0       	rjmp	.+22     	; 0x662c <vfprintf+0x5ea>
    6616:	8e ef       	ldi	r24, 0xFE	; 254
    6618:	f8 22       	and	r15, r24
    661a:	e9 14       	cp	r14, r9
    661c:	38 f4       	brcc	.+14     	; 0x662c <vfprintf+0x5ea>
    661e:	f4 fe       	sbrs	r15, 4
    6620:	07 c0       	rjmp	.+14     	; 0x6630 <vfprintf+0x5ee>
    6622:	f2 fc       	sbrc	r15, 2
    6624:	05 c0       	rjmp	.+10     	; 0x6630 <vfprintf+0x5ee>
    6626:	9f ee       	ldi	r25, 0xEF	; 239
    6628:	f9 22       	and	r15, r25
    662a:	02 c0       	rjmp	.+4      	; 0x6630 <vfprintf+0x5ee>
    662c:	1e 2d       	mov	r17, r14
    662e:	01 c0       	rjmp	.+2      	; 0x6632 <vfprintf+0x5f0>
    6630:	19 2d       	mov	r17, r9
    6632:	f4 fe       	sbrs	r15, 4
    6634:	0d c0       	rjmp	.+26     	; 0x6650 <vfprintf+0x60e>
    6636:	fe 01       	movw	r30, r28
    6638:	ee 0d       	add	r30, r14
    663a:	f1 1d       	adc	r31, r1
    663c:	80 81       	ld	r24, Z
    663e:	80 33       	cpi	r24, 0x30	; 48
    6640:	19 f4       	brne	.+6      	; 0x6648 <vfprintf+0x606>
    6642:	e9 ee       	ldi	r30, 0xE9	; 233
    6644:	fe 22       	and	r15, r30
    6646:	08 c0       	rjmp	.+16     	; 0x6658 <vfprintf+0x616>
    6648:	1f 5f       	subi	r17, 0xFF	; 255
    664a:	f2 fe       	sbrs	r15, 2
    664c:	05 c0       	rjmp	.+10     	; 0x6658 <vfprintf+0x616>
    664e:	03 c0       	rjmp	.+6      	; 0x6656 <vfprintf+0x614>
    6650:	8f 2d       	mov	r24, r15
    6652:	86 78       	andi	r24, 0x86	; 134
    6654:	09 f0       	breq	.+2      	; 0x6658 <vfprintf+0x616>
    6656:	1f 5f       	subi	r17, 0xFF	; 255
    6658:	0f 2d       	mov	r16, r15
    665a:	f3 fc       	sbrc	r15, 3
    665c:	13 c0       	rjmp	.+38     	; 0x6684 <vfprintf+0x642>
    665e:	f0 fe       	sbrs	r15, 0
    6660:	0e c0       	rjmp	.+28     	; 0x667e <vfprintf+0x63c>
    6662:	18 15       	cp	r17, r8
    6664:	10 f0       	brcs	.+4      	; 0x666a <vfprintf+0x628>
    6666:	9e 2c       	mov	r9, r14
    6668:	0a c0       	rjmp	.+20     	; 0x667e <vfprintf+0x63c>
    666a:	9e 2c       	mov	r9, r14
    666c:	98 0c       	add	r9, r8
    666e:	91 1a       	sub	r9, r17
    6670:	18 2d       	mov	r17, r8
    6672:	05 c0       	rjmp	.+10     	; 0x667e <vfprintf+0x63c>
    6674:	80 e2       	ldi	r24, 0x20	; 32
    6676:	90 e0       	ldi	r25, 0x00	; 0
    6678:	b3 01       	movw	r22, r6
    667a:	b6 d2       	rcall	.+1388   	; 0x6be8 <fputc>
    667c:	1f 5f       	subi	r17, 0xFF	; 255
    667e:	18 15       	cp	r17, r8
    6680:	c8 f3       	brcs	.-14     	; 0x6674 <vfprintf+0x632>
    6682:	04 c0       	rjmp	.+8      	; 0x668c <vfprintf+0x64a>
    6684:	18 15       	cp	r17, r8
    6686:	10 f4       	brcc	.+4      	; 0x668c <vfprintf+0x64a>
    6688:	81 1a       	sub	r8, r17
    668a:	01 c0       	rjmp	.+2      	; 0x668e <vfprintf+0x64c>
    668c:	88 24       	eor	r8, r8
    668e:	04 ff       	sbrs	r16, 4
    6690:	0e c0       	rjmp	.+28     	; 0x66ae <vfprintf+0x66c>
    6692:	80 e3       	ldi	r24, 0x30	; 48
    6694:	90 e0       	ldi	r25, 0x00	; 0
    6696:	b3 01       	movw	r22, r6
    6698:	a7 d2       	rcall	.+1358   	; 0x6be8 <fputc>
    669a:	02 ff       	sbrs	r16, 2
    669c:	1b c0       	rjmp	.+54     	; 0x66d4 <vfprintf+0x692>
    669e:	01 fd       	sbrc	r16, 1
    66a0:	03 c0       	rjmp	.+6      	; 0x66a8 <vfprintf+0x666>
    66a2:	88 e7       	ldi	r24, 0x78	; 120
    66a4:	90 e0       	ldi	r25, 0x00	; 0
    66a6:	0e c0       	rjmp	.+28     	; 0x66c4 <vfprintf+0x682>
    66a8:	88 e5       	ldi	r24, 0x58	; 88
    66aa:	90 e0       	ldi	r25, 0x00	; 0
    66ac:	0b c0       	rjmp	.+22     	; 0x66c4 <vfprintf+0x682>
    66ae:	80 2f       	mov	r24, r16
    66b0:	86 78       	andi	r24, 0x86	; 134
    66b2:	81 f0       	breq	.+32     	; 0x66d4 <vfprintf+0x692>
    66b4:	01 ff       	sbrs	r16, 1
    66b6:	02 c0       	rjmp	.+4      	; 0x66bc <vfprintf+0x67a>
    66b8:	8b e2       	ldi	r24, 0x2B	; 43
    66ba:	01 c0       	rjmp	.+2      	; 0x66be <vfprintf+0x67c>
    66bc:	80 e2       	ldi	r24, 0x20	; 32
    66be:	f7 fc       	sbrc	r15, 7
    66c0:	8d e2       	ldi	r24, 0x2D	; 45
    66c2:	90 e0       	ldi	r25, 0x00	; 0
    66c4:	b3 01       	movw	r22, r6
    66c6:	90 d2       	rcall	.+1312   	; 0x6be8 <fputc>
    66c8:	05 c0       	rjmp	.+10     	; 0x66d4 <vfprintf+0x692>
    66ca:	80 e3       	ldi	r24, 0x30	; 48
    66cc:	90 e0       	ldi	r25, 0x00	; 0
    66ce:	b3 01       	movw	r22, r6
    66d0:	8b d2       	rcall	.+1302   	; 0x6be8 <fputc>
    66d2:	9a 94       	dec	r9
    66d4:	e9 14       	cp	r14, r9
    66d6:	c8 f3       	brcs	.-14     	; 0x66ca <vfprintf+0x688>
    66d8:	ea 94       	dec	r14
    66da:	e1 e0       	ldi	r30, 0x01	; 1
    66dc:	f0 e0       	ldi	r31, 0x00	; 0
    66de:	ec 0f       	add	r30, r28
    66e0:	fd 1f       	adc	r31, r29
    66e2:	ee 0d       	add	r30, r14
    66e4:	f1 1d       	adc	r31, r1
    66e6:	80 81       	ld	r24, Z
    66e8:	90 e0       	ldi	r25, 0x00	; 0
    66ea:	b3 01       	movw	r22, r6
    66ec:	7d d2       	rcall	.+1274   	; 0x6be8 <fputc>
    66ee:	ee 20       	and	r14, r14
    66f0:	99 f7       	brne	.-26     	; 0x66d8 <vfprintf+0x696>
    66f2:	05 c0       	rjmp	.+10     	; 0x66fe <vfprintf+0x6bc>
    66f4:	80 e2       	ldi	r24, 0x20	; 32
    66f6:	90 e0       	ldi	r25, 0x00	; 0
    66f8:	b3 01       	movw	r22, r6
    66fa:	76 d2       	rcall	.+1260   	; 0x6be8 <fputc>
    66fc:	8a 94       	dec	r8
    66fe:	88 20       	and	r8, r8
    6700:	c9 f7       	brne	.-14     	; 0x66f4 <vfprintf+0x6b2>
    6702:	b6 cc       	rjmp	.-1684   	; 0x6070 <vfprintf+0x2e>
    6704:	f3 01       	movw	r30, r6
    6706:	66 81       	ldd	r22, Z+6	; 0x06
    6708:	77 81       	ldd	r23, Z+7	; 0x07
    670a:	cb 01       	movw	r24, r22
    670c:	61 96       	adiw	r28, 0x11	; 17
    670e:	e2 e1       	ldi	r30, 0x12	; 18
    6710:	5d c0       	rjmp	.+186    	; 0x67cc <__epilogue_restores__>

00006712 <__mulsi3>:
    6712:	62 9f       	mul	r22, r18
    6714:	d0 01       	movw	r26, r0
    6716:	73 9f       	mul	r23, r19
    6718:	f0 01       	movw	r30, r0
    671a:	82 9f       	mul	r24, r18
    671c:	e0 0d       	add	r30, r0
    671e:	f1 1d       	adc	r31, r1
    6720:	64 9f       	mul	r22, r20
    6722:	e0 0d       	add	r30, r0
    6724:	f1 1d       	adc	r31, r1
    6726:	92 9f       	mul	r25, r18
    6728:	f0 0d       	add	r31, r0
    672a:	83 9f       	mul	r24, r19
    672c:	f0 0d       	add	r31, r0
    672e:	74 9f       	mul	r23, r20
    6730:	f0 0d       	add	r31, r0
    6732:	65 9f       	mul	r22, r21
    6734:	f0 0d       	add	r31, r0
    6736:	99 27       	eor	r25, r25
    6738:	72 9f       	mul	r23, r18
    673a:	b0 0d       	add	r27, r0
    673c:	e1 1d       	adc	r30, r1
    673e:	f9 1f       	adc	r31, r25
    6740:	63 9f       	mul	r22, r19
    6742:	b0 0d       	add	r27, r0
    6744:	e1 1d       	adc	r30, r1
    6746:	f9 1f       	adc	r31, r25
    6748:	bd 01       	movw	r22, r26
    674a:	cf 01       	movw	r24, r30
    674c:	11 24       	eor	r1, r1
    674e:	08 95       	ret

00006750 <__udivmodsi4>:
    6750:	a1 e2       	ldi	r26, 0x21	; 33
    6752:	1a 2e       	mov	r1, r26
    6754:	aa 1b       	sub	r26, r26
    6756:	bb 1b       	sub	r27, r27
    6758:	fd 01       	movw	r30, r26
    675a:	0d c0       	rjmp	.+26     	; 0x6776 <__udivmodsi4_ep>

0000675c <__udivmodsi4_loop>:
    675c:	aa 1f       	adc	r26, r26
    675e:	bb 1f       	adc	r27, r27
    6760:	ee 1f       	adc	r30, r30
    6762:	ff 1f       	adc	r31, r31
    6764:	a2 17       	cp	r26, r18
    6766:	b3 07       	cpc	r27, r19
    6768:	e4 07       	cpc	r30, r20
    676a:	f5 07       	cpc	r31, r21
    676c:	20 f0       	brcs	.+8      	; 0x6776 <__udivmodsi4_ep>
    676e:	a2 1b       	sub	r26, r18
    6770:	b3 0b       	sbc	r27, r19
    6772:	e4 0b       	sbc	r30, r20
    6774:	f5 0b       	sbc	r31, r21

00006776 <__udivmodsi4_ep>:
    6776:	66 1f       	adc	r22, r22
    6778:	77 1f       	adc	r23, r23
    677a:	88 1f       	adc	r24, r24
    677c:	99 1f       	adc	r25, r25
    677e:	1a 94       	dec	r1
    6780:	69 f7       	brne	.-38     	; 0x675c <__udivmodsi4_loop>
    6782:	60 95       	com	r22
    6784:	70 95       	com	r23
    6786:	80 95       	com	r24
    6788:	90 95       	com	r25
    678a:	9b 01       	movw	r18, r22
    678c:	ac 01       	movw	r20, r24
    678e:	bd 01       	movw	r22, r26
    6790:	cf 01       	movw	r24, r30
    6792:	08 95       	ret

00006794 <__prologue_saves__>:
    6794:	2f 92       	push	r2
    6796:	3f 92       	push	r3
    6798:	4f 92       	push	r4
    679a:	5f 92       	push	r5
    679c:	6f 92       	push	r6
    679e:	7f 92       	push	r7
    67a0:	8f 92       	push	r8
    67a2:	9f 92       	push	r9
    67a4:	af 92       	push	r10
    67a6:	bf 92       	push	r11
    67a8:	cf 92       	push	r12
    67aa:	df 92       	push	r13
    67ac:	ef 92       	push	r14
    67ae:	ff 92       	push	r15
    67b0:	0f 93       	push	r16
    67b2:	1f 93       	push	r17
    67b4:	cf 93       	push	r28
    67b6:	df 93       	push	r29
    67b8:	cd b7       	in	r28, 0x3d	; 61
    67ba:	de b7       	in	r29, 0x3e	; 62
    67bc:	ca 1b       	sub	r28, r26
    67be:	db 0b       	sbc	r29, r27
    67c0:	0f b6       	in	r0, 0x3f	; 63
    67c2:	f8 94       	cli
    67c4:	de bf       	out	0x3e, r29	; 62
    67c6:	0f be       	out	0x3f, r0	; 63
    67c8:	cd bf       	out	0x3d, r28	; 61
    67ca:	09 94       	ijmp

000067cc <__epilogue_restores__>:
    67cc:	2a 88       	ldd	r2, Y+18	; 0x12
    67ce:	39 88       	ldd	r3, Y+17	; 0x11
    67d0:	48 88       	ldd	r4, Y+16	; 0x10
    67d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    67d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    67d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    67d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    67da:	9b 84       	ldd	r9, Y+11	; 0x0b
    67dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    67de:	b9 84       	ldd	r11, Y+9	; 0x09
    67e0:	c8 84       	ldd	r12, Y+8	; 0x08
    67e2:	df 80       	ldd	r13, Y+7	; 0x07
    67e4:	ee 80       	ldd	r14, Y+6	; 0x06
    67e6:	fd 80       	ldd	r15, Y+5	; 0x05
    67e8:	0c 81       	ldd	r16, Y+4	; 0x04
    67ea:	1b 81       	ldd	r17, Y+3	; 0x03
    67ec:	aa 81       	ldd	r26, Y+2	; 0x02
    67ee:	b9 81       	ldd	r27, Y+1	; 0x01
    67f0:	ce 0f       	add	r28, r30
    67f2:	d1 1d       	adc	r29, r1
    67f4:	0f b6       	in	r0, 0x3f	; 63
    67f6:	f8 94       	cli
    67f8:	de bf       	out	0x3e, r29	; 62
    67fa:	0f be       	out	0x3f, r0	; 63
    67fc:	cd bf       	out	0x3d, r28	; 61
    67fe:	ed 01       	movw	r28, r26
    6800:	08 95       	ret

00006802 <malloc>:
    6802:	cf 93       	push	r28
    6804:	df 93       	push	r29
    6806:	bc 01       	movw	r22, r24
    6808:	82 30       	cpi	r24, 0x02	; 2
    680a:	91 05       	cpc	r25, r1
    680c:	10 f4       	brcc	.+4      	; 0x6812 <malloc+0x10>
    680e:	62 e0       	ldi	r22, 0x02	; 2
    6810:	70 e0       	ldi	r23, 0x00	; 0
    6812:	a0 91 47 08 	lds	r26, 0x0847
    6816:	b0 91 48 08 	lds	r27, 0x0848
    681a:	ed 01       	movw	r28, r26
    681c:	e0 e0       	ldi	r30, 0x00	; 0
    681e:	f0 e0       	ldi	r31, 0x00	; 0
    6820:	40 e0       	ldi	r20, 0x00	; 0
    6822:	50 e0       	ldi	r21, 0x00	; 0
    6824:	21 c0       	rjmp	.+66     	; 0x6868 <malloc+0x66>
    6826:	88 81       	ld	r24, Y
    6828:	99 81       	ldd	r25, Y+1	; 0x01
    682a:	86 17       	cp	r24, r22
    682c:	97 07       	cpc	r25, r23
    682e:	69 f4       	brne	.+26     	; 0x684a <malloc+0x48>
    6830:	8a 81       	ldd	r24, Y+2	; 0x02
    6832:	9b 81       	ldd	r25, Y+3	; 0x03
    6834:	30 97       	sbiw	r30, 0x00	; 0
    6836:	19 f0       	breq	.+6      	; 0x683e <malloc+0x3c>
    6838:	93 83       	std	Z+3, r25	; 0x03
    683a:	82 83       	std	Z+2, r24	; 0x02
    683c:	04 c0       	rjmp	.+8      	; 0x6846 <malloc+0x44>
    683e:	90 93 48 08 	sts	0x0848, r25
    6842:	80 93 47 08 	sts	0x0847, r24
    6846:	fe 01       	movw	r30, r28
    6848:	34 c0       	rjmp	.+104    	; 0x68b2 <malloc+0xb0>
    684a:	68 17       	cp	r22, r24
    684c:	79 07       	cpc	r23, r25
    684e:	38 f4       	brcc	.+14     	; 0x685e <malloc+0x5c>
    6850:	41 15       	cp	r20, r1
    6852:	51 05       	cpc	r21, r1
    6854:	19 f0       	breq	.+6      	; 0x685c <malloc+0x5a>
    6856:	84 17       	cp	r24, r20
    6858:	95 07       	cpc	r25, r21
    685a:	08 f4       	brcc	.+2      	; 0x685e <malloc+0x5c>
    685c:	ac 01       	movw	r20, r24
    685e:	fe 01       	movw	r30, r28
    6860:	8a 81       	ldd	r24, Y+2	; 0x02
    6862:	9b 81       	ldd	r25, Y+3	; 0x03
    6864:	9c 01       	movw	r18, r24
    6866:	e9 01       	movw	r28, r18
    6868:	20 97       	sbiw	r28, 0x00	; 0
    686a:	e9 f6       	brne	.-70     	; 0x6826 <malloc+0x24>
    686c:	41 15       	cp	r20, r1
    686e:	51 05       	cpc	r21, r1
    6870:	a9 f1       	breq	.+106    	; 0x68dc <malloc+0xda>
    6872:	ca 01       	movw	r24, r20
    6874:	86 1b       	sub	r24, r22
    6876:	97 0b       	sbc	r25, r23
    6878:	04 97       	sbiw	r24, 0x04	; 4
    687a:	08 f4       	brcc	.+2      	; 0x687e <malloc+0x7c>
    687c:	ba 01       	movw	r22, r20
    687e:	e0 e0       	ldi	r30, 0x00	; 0
    6880:	f0 e0       	ldi	r31, 0x00	; 0
    6882:	2a c0       	rjmp	.+84     	; 0x68d8 <malloc+0xd6>
    6884:	8d 91       	ld	r24, X+
    6886:	9c 91       	ld	r25, X
    6888:	11 97       	sbiw	r26, 0x01	; 1
    688a:	84 17       	cp	r24, r20
    688c:	95 07       	cpc	r25, r21
    688e:	f9 f4       	brne	.+62     	; 0x68ce <malloc+0xcc>
    6890:	64 17       	cp	r22, r20
    6892:	75 07       	cpc	r23, r21
    6894:	81 f4       	brne	.+32     	; 0x68b6 <malloc+0xb4>
    6896:	12 96       	adiw	r26, 0x02	; 2
    6898:	8d 91       	ld	r24, X+
    689a:	9c 91       	ld	r25, X
    689c:	13 97       	sbiw	r26, 0x03	; 3
    689e:	30 97       	sbiw	r30, 0x00	; 0
    68a0:	19 f0       	breq	.+6      	; 0x68a8 <malloc+0xa6>
    68a2:	93 83       	std	Z+3, r25	; 0x03
    68a4:	82 83       	std	Z+2, r24	; 0x02
    68a6:	04 c0       	rjmp	.+8      	; 0x68b0 <malloc+0xae>
    68a8:	90 93 48 08 	sts	0x0848, r25
    68ac:	80 93 47 08 	sts	0x0847, r24
    68b0:	fd 01       	movw	r30, r26
    68b2:	32 96       	adiw	r30, 0x02	; 2
    68b4:	4f c0       	rjmp	.+158    	; 0x6954 <malloc+0x152>
    68b6:	ca 01       	movw	r24, r20
    68b8:	86 1b       	sub	r24, r22
    68ba:	97 0b       	sbc	r25, r23
    68bc:	fd 01       	movw	r30, r26
    68be:	e8 0f       	add	r30, r24
    68c0:	f9 1f       	adc	r31, r25
    68c2:	61 93       	st	Z+, r22
    68c4:	71 93       	st	Z+, r23
    68c6:	02 97       	sbiw	r24, 0x02	; 2
    68c8:	8d 93       	st	X+, r24
    68ca:	9c 93       	st	X, r25
    68cc:	43 c0       	rjmp	.+134    	; 0x6954 <malloc+0x152>
    68ce:	fd 01       	movw	r30, r26
    68d0:	82 81       	ldd	r24, Z+2	; 0x02
    68d2:	93 81       	ldd	r25, Z+3	; 0x03
    68d4:	9c 01       	movw	r18, r24
    68d6:	d9 01       	movw	r26, r18
    68d8:	10 97       	sbiw	r26, 0x00	; 0
    68da:	a1 f6       	brne	.-88     	; 0x6884 <malloc+0x82>
    68dc:	80 91 45 08 	lds	r24, 0x0845
    68e0:	90 91 46 08 	lds	r25, 0x0846
    68e4:	89 2b       	or	r24, r25
    68e6:	41 f4       	brne	.+16     	; 0x68f8 <malloc+0xf6>
    68e8:	80 91 7c 04 	lds	r24, 0x047C
    68ec:	90 91 7d 04 	lds	r25, 0x047D
    68f0:	90 93 46 08 	sts	0x0846, r25
    68f4:	80 93 45 08 	sts	0x0845, r24
    68f8:	40 91 7e 04 	lds	r20, 0x047E
    68fc:	50 91 7f 04 	lds	r21, 0x047F
    6900:	41 15       	cp	r20, r1
    6902:	51 05       	cpc	r21, r1
    6904:	41 f4       	brne	.+16     	; 0x6916 <malloc+0x114>
    6906:	4d b7       	in	r20, 0x3d	; 61
    6908:	5e b7       	in	r21, 0x3e	; 62
    690a:	80 91 7a 04 	lds	r24, 0x047A
    690e:	90 91 7b 04 	lds	r25, 0x047B
    6912:	48 1b       	sub	r20, r24
    6914:	59 0b       	sbc	r21, r25
    6916:	20 91 45 08 	lds	r18, 0x0845
    691a:	30 91 46 08 	lds	r19, 0x0846
    691e:	24 17       	cp	r18, r20
    6920:	35 07       	cpc	r19, r21
    6922:	b0 f4       	brcc	.+44     	; 0x6950 <malloc+0x14e>
    6924:	ca 01       	movw	r24, r20
    6926:	82 1b       	sub	r24, r18
    6928:	93 0b       	sbc	r25, r19
    692a:	86 17       	cp	r24, r22
    692c:	97 07       	cpc	r25, r23
    692e:	80 f0       	brcs	.+32     	; 0x6950 <malloc+0x14e>
    6930:	ab 01       	movw	r20, r22
    6932:	4e 5f       	subi	r20, 0xFE	; 254
    6934:	5f 4f       	sbci	r21, 0xFF	; 255
    6936:	84 17       	cp	r24, r20
    6938:	95 07       	cpc	r25, r21
    693a:	50 f0       	brcs	.+20     	; 0x6950 <malloc+0x14e>
    693c:	42 0f       	add	r20, r18
    693e:	53 1f       	adc	r21, r19
    6940:	50 93 46 08 	sts	0x0846, r21
    6944:	40 93 45 08 	sts	0x0845, r20
    6948:	f9 01       	movw	r30, r18
    694a:	61 93       	st	Z+, r22
    694c:	71 93       	st	Z+, r23
    694e:	02 c0       	rjmp	.+4      	; 0x6954 <malloc+0x152>
    6950:	e0 e0       	ldi	r30, 0x00	; 0
    6952:	f0 e0       	ldi	r31, 0x00	; 0
    6954:	cf 01       	movw	r24, r30
    6956:	df 91       	pop	r29
    6958:	cf 91       	pop	r28
    695a:	08 95       	ret

0000695c <free>:
    695c:	cf 93       	push	r28
    695e:	df 93       	push	r29
    6960:	00 97       	sbiw	r24, 0x00	; 0
    6962:	09 f4       	brne	.+2      	; 0x6966 <free+0xa>
    6964:	50 c0       	rjmp	.+160    	; 0x6a06 <free+0xaa>
    6966:	ec 01       	movw	r28, r24
    6968:	22 97       	sbiw	r28, 0x02	; 2
    696a:	1b 82       	std	Y+3, r1	; 0x03
    696c:	1a 82       	std	Y+2, r1	; 0x02
    696e:	a0 91 47 08 	lds	r26, 0x0847
    6972:	b0 91 48 08 	lds	r27, 0x0848
    6976:	10 97       	sbiw	r26, 0x00	; 0
    6978:	09 f1       	breq	.+66     	; 0x69bc <free+0x60>
    697a:	40 e0       	ldi	r20, 0x00	; 0
    697c:	50 e0       	ldi	r21, 0x00	; 0
    697e:	ac 17       	cp	r26, r28
    6980:	bd 07       	cpc	r27, r29
    6982:	08 f1       	brcs	.+66     	; 0x69c6 <free+0x6a>
    6984:	bb 83       	std	Y+3, r27	; 0x03
    6986:	aa 83       	std	Y+2, r26	; 0x02
    6988:	fe 01       	movw	r30, r28
    698a:	21 91       	ld	r18, Z+
    698c:	31 91       	ld	r19, Z+
    698e:	e2 0f       	add	r30, r18
    6990:	f3 1f       	adc	r31, r19
    6992:	ae 17       	cp	r26, r30
    6994:	bf 07       	cpc	r27, r31
    6996:	79 f4       	brne	.+30     	; 0x69b6 <free+0x5a>
    6998:	8d 91       	ld	r24, X+
    699a:	9c 91       	ld	r25, X
    699c:	11 97       	sbiw	r26, 0x01	; 1
    699e:	28 0f       	add	r18, r24
    69a0:	39 1f       	adc	r19, r25
    69a2:	2e 5f       	subi	r18, 0xFE	; 254
    69a4:	3f 4f       	sbci	r19, 0xFF	; 255
    69a6:	39 83       	std	Y+1, r19	; 0x01
    69a8:	28 83       	st	Y, r18
    69aa:	12 96       	adiw	r26, 0x02	; 2
    69ac:	8d 91       	ld	r24, X+
    69ae:	9c 91       	ld	r25, X
    69b0:	13 97       	sbiw	r26, 0x03	; 3
    69b2:	9b 83       	std	Y+3, r25	; 0x03
    69b4:	8a 83       	std	Y+2, r24	; 0x02
    69b6:	41 15       	cp	r20, r1
    69b8:	51 05       	cpc	r21, r1
    69ba:	71 f4       	brne	.+28     	; 0x69d8 <free+0x7c>
    69bc:	d0 93 48 08 	sts	0x0848, r29
    69c0:	c0 93 47 08 	sts	0x0847, r28
    69c4:	20 c0       	rjmp	.+64     	; 0x6a06 <free+0xaa>
    69c6:	12 96       	adiw	r26, 0x02	; 2
    69c8:	8d 91       	ld	r24, X+
    69ca:	9c 91       	ld	r25, X
    69cc:	13 97       	sbiw	r26, 0x03	; 3
    69ce:	ad 01       	movw	r20, r26
    69d0:	00 97       	sbiw	r24, 0x00	; 0
    69d2:	11 f0       	breq	.+4      	; 0x69d8 <free+0x7c>
    69d4:	dc 01       	movw	r26, r24
    69d6:	d3 cf       	rjmp	.-90     	; 0x697e <free+0x22>
    69d8:	fa 01       	movw	r30, r20
    69da:	d3 83       	std	Z+3, r29	; 0x03
    69dc:	c2 83       	std	Z+2, r28	; 0x02
    69de:	21 91       	ld	r18, Z+
    69e0:	31 91       	ld	r19, Z+
    69e2:	e2 0f       	add	r30, r18
    69e4:	f3 1f       	adc	r31, r19
    69e6:	ce 17       	cp	r28, r30
    69e8:	df 07       	cpc	r29, r31
    69ea:	69 f4       	brne	.+26     	; 0x6a06 <free+0xaa>
    69ec:	88 81       	ld	r24, Y
    69ee:	99 81       	ldd	r25, Y+1	; 0x01
    69f0:	28 0f       	add	r18, r24
    69f2:	39 1f       	adc	r19, r25
    69f4:	2e 5f       	subi	r18, 0xFE	; 254
    69f6:	3f 4f       	sbci	r19, 0xFF	; 255
    69f8:	fa 01       	movw	r30, r20
    69fa:	31 83       	std	Z+1, r19	; 0x01
    69fc:	20 83       	st	Z, r18
    69fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6a00:	9b 81       	ldd	r25, Y+3	; 0x03
    6a02:	93 83       	std	Z+3, r25	; 0x03
    6a04:	82 83       	std	Z+2, r24	; 0x02
    6a06:	df 91       	pop	r29
    6a08:	cf 91       	pop	r28
    6a0a:	08 95       	ret

00006a0c <__ftoa_engine>:
    6a0c:	28 30       	cpi	r18, 0x08	; 8
    6a0e:	08 f0       	brcs	.+2      	; 0x6a12 <__ftoa_engine+0x6>
    6a10:	27 e0       	ldi	r18, 0x07	; 7
    6a12:	33 27       	eor	r19, r19
    6a14:	da 01       	movw	r26, r20
    6a16:	99 0f       	add	r25, r25
    6a18:	31 1d       	adc	r19, r1
    6a1a:	87 fd       	sbrc	r24, 7
    6a1c:	91 60       	ori	r25, 0x01	; 1
    6a1e:	00 96       	adiw	r24, 0x00	; 0
    6a20:	61 05       	cpc	r22, r1
    6a22:	71 05       	cpc	r23, r1
    6a24:	39 f4       	brne	.+14     	; 0x6a34 <__ftoa_engine+0x28>
    6a26:	32 60       	ori	r19, 0x02	; 2
    6a28:	2e 5f       	subi	r18, 0xFE	; 254
    6a2a:	3d 93       	st	X+, r19
    6a2c:	30 e3       	ldi	r19, 0x30	; 48
    6a2e:	2a 95       	dec	r18
    6a30:	e1 f7       	brne	.-8      	; 0x6a2a <__ftoa_engine+0x1e>
    6a32:	08 95       	ret
    6a34:	9f 3f       	cpi	r25, 0xFF	; 255
    6a36:	30 f0       	brcs	.+12     	; 0x6a44 <__ftoa_engine+0x38>
    6a38:	80 38       	cpi	r24, 0x80	; 128
    6a3a:	71 05       	cpc	r23, r1
    6a3c:	61 05       	cpc	r22, r1
    6a3e:	09 f0       	breq	.+2      	; 0x6a42 <__ftoa_engine+0x36>
    6a40:	3c 5f       	subi	r19, 0xFC	; 252
    6a42:	3c 5f       	subi	r19, 0xFC	; 252
    6a44:	3d 93       	st	X+, r19
    6a46:	91 30       	cpi	r25, 0x01	; 1
    6a48:	08 f0       	brcs	.+2      	; 0x6a4c <__ftoa_engine+0x40>
    6a4a:	80 68       	ori	r24, 0x80	; 128
    6a4c:	91 1d       	adc	r25, r1
    6a4e:	df 93       	push	r29
    6a50:	cf 93       	push	r28
    6a52:	1f 93       	push	r17
    6a54:	0f 93       	push	r16
    6a56:	ff 92       	push	r15
    6a58:	ef 92       	push	r14
    6a5a:	19 2f       	mov	r17, r25
    6a5c:	98 7f       	andi	r25, 0xF8	; 248
    6a5e:	96 95       	lsr	r25
    6a60:	e9 2f       	mov	r30, r25
    6a62:	96 95       	lsr	r25
    6a64:	96 95       	lsr	r25
    6a66:	e9 0f       	add	r30, r25
    6a68:	ff 27       	eor	r31, r31
    6a6a:	ef 53       	subi	r30, 0x3F	; 63
    6a6c:	fa 4f       	sbci	r31, 0xFA	; 250
    6a6e:	99 27       	eor	r25, r25
    6a70:	33 27       	eor	r19, r19
    6a72:	ee 24       	eor	r14, r14
    6a74:	ff 24       	eor	r15, r15
    6a76:	a7 01       	movw	r20, r14
    6a78:	e7 01       	movw	r28, r14
    6a7a:	05 90       	lpm	r0, Z+
    6a7c:	08 94       	sec
    6a7e:	07 94       	ror	r0
    6a80:	28 f4       	brcc	.+10     	; 0x6a8c <__ftoa_engine+0x80>
    6a82:	36 0f       	add	r19, r22
    6a84:	e7 1e       	adc	r14, r23
    6a86:	f8 1e       	adc	r15, r24
    6a88:	49 1f       	adc	r20, r25
    6a8a:	51 1d       	adc	r21, r1
    6a8c:	66 0f       	add	r22, r22
    6a8e:	77 1f       	adc	r23, r23
    6a90:	88 1f       	adc	r24, r24
    6a92:	99 1f       	adc	r25, r25
    6a94:	06 94       	lsr	r0
    6a96:	a1 f7       	brne	.-24     	; 0x6a80 <__ftoa_engine+0x74>
    6a98:	05 90       	lpm	r0, Z+
    6a9a:	07 94       	ror	r0
    6a9c:	28 f4       	brcc	.+10     	; 0x6aa8 <__ftoa_engine+0x9c>
    6a9e:	e7 0e       	add	r14, r23
    6aa0:	f8 1e       	adc	r15, r24
    6aa2:	49 1f       	adc	r20, r25
    6aa4:	56 1f       	adc	r21, r22
    6aa6:	c1 1d       	adc	r28, r1
    6aa8:	77 0f       	add	r23, r23
    6aaa:	88 1f       	adc	r24, r24
    6aac:	99 1f       	adc	r25, r25
    6aae:	66 1f       	adc	r22, r22
    6ab0:	06 94       	lsr	r0
    6ab2:	a1 f7       	brne	.-24     	; 0x6a9c <__ftoa_engine+0x90>
    6ab4:	05 90       	lpm	r0, Z+
    6ab6:	07 94       	ror	r0
    6ab8:	28 f4       	brcc	.+10     	; 0x6ac4 <__ftoa_engine+0xb8>
    6aba:	f8 0e       	add	r15, r24
    6abc:	49 1f       	adc	r20, r25
    6abe:	56 1f       	adc	r21, r22
    6ac0:	c7 1f       	adc	r28, r23
    6ac2:	d1 1d       	adc	r29, r1
    6ac4:	88 0f       	add	r24, r24
    6ac6:	99 1f       	adc	r25, r25
    6ac8:	66 1f       	adc	r22, r22
    6aca:	77 1f       	adc	r23, r23
    6acc:	06 94       	lsr	r0
    6ace:	a1 f7       	brne	.-24     	; 0x6ab8 <__ftoa_engine+0xac>
    6ad0:	05 90       	lpm	r0, Z+
    6ad2:	07 94       	ror	r0
    6ad4:	20 f4       	brcc	.+8      	; 0x6ade <__ftoa_engine+0xd2>
    6ad6:	49 0f       	add	r20, r25
    6ad8:	56 1f       	adc	r21, r22
    6ada:	c7 1f       	adc	r28, r23
    6adc:	d8 1f       	adc	r29, r24
    6ade:	99 0f       	add	r25, r25
    6ae0:	66 1f       	adc	r22, r22
    6ae2:	77 1f       	adc	r23, r23
    6ae4:	88 1f       	adc	r24, r24
    6ae6:	06 94       	lsr	r0
    6ae8:	a9 f7       	brne	.-22     	; 0x6ad4 <__ftoa_engine+0xc8>
    6aea:	84 91       	lpm	r24, Z+
    6aec:	10 95       	com	r17
    6aee:	17 70       	andi	r17, 0x07	; 7
    6af0:	41 f0       	breq	.+16     	; 0x6b02 <__ftoa_engine+0xf6>
    6af2:	d6 95       	lsr	r29
    6af4:	c7 95       	ror	r28
    6af6:	57 95       	ror	r21
    6af8:	47 95       	ror	r20
    6afa:	f7 94       	ror	r15
    6afc:	e7 94       	ror	r14
    6afe:	1a 95       	dec	r17
    6b00:	c1 f7       	brne	.-16     	; 0x6af2 <__ftoa_engine+0xe6>
    6b02:	e7 e6       	ldi	r30, 0x67	; 103
    6b04:	f5 e0       	ldi	r31, 0x05	; 5
    6b06:	68 94       	set
    6b08:	15 90       	lpm	r1, Z+
    6b0a:	15 91       	lpm	r17, Z+
    6b0c:	35 91       	lpm	r19, Z+
    6b0e:	65 91       	lpm	r22, Z+
    6b10:	95 91       	lpm	r25, Z+
    6b12:	05 90       	lpm	r0, Z+
    6b14:	7f e2       	ldi	r23, 0x2F	; 47
    6b16:	73 95       	inc	r23
    6b18:	e1 18       	sub	r14, r1
    6b1a:	f1 0a       	sbc	r15, r17
    6b1c:	43 0b       	sbc	r20, r19
    6b1e:	56 0b       	sbc	r21, r22
    6b20:	c9 0b       	sbc	r28, r25
    6b22:	d0 09       	sbc	r29, r0
    6b24:	c0 f7       	brcc	.-16     	; 0x6b16 <__ftoa_engine+0x10a>
    6b26:	e1 0c       	add	r14, r1
    6b28:	f1 1e       	adc	r15, r17
    6b2a:	43 1f       	adc	r20, r19
    6b2c:	56 1f       	adc	r21, r22
    6b2e:	c9 1f       	adc	r28, r25
    6b30:	d0 1d       	adc	r29, r0
    6b32:	7e f4       	brtc	.+30     	; 0x6b52 <__ftoa_engine+0x146>
    6b34:	70 33       	cpi	r23, 0x30	; 48
    6b36:	11 f4       	brne	.+4      	; 0x6b3c <__ftoa_engine+0x130>
    6b38:	8a 95       	dec	r24
    6b3a:	e6 cf       	rjmp	.-52     	; 0x6b08 <__ftoa_engine+0xfc>
    6b3c:	e8 94       	clt
    6b3e:	01 50       	subi	r16, 0x01	; 1
    6b40:	30 f0       	brcs	.+12     	; 0x6b4e <__ftoa_engine+0x142>
    6b42:	08 0f       	add	r16, r24
    6b44:	0a f4       	brpl	.+2      	; 0x6b48 <__ftoa_engine+0x13c>
    6b46:	00 27       	eor	r16, r16
    6b48:	02 17       	cp	r16, r18
    6b4a:	08 f4       	brcc	.+2      	; 0x6b4e <__ftoa_engine+0x142>
    6b4c:	20 2f       	mov	r18, r16
    6b4e:	23 95       	inc	r18
    6b50:	02 2f       	mov	r16, r18
    6b52:	7a 33       	cpi	r23, 0x3A	; 58
    6b54:	28 f0       	brcs	.+10     	; 0x6b60 <__ftoa_engine+0x154>
    6b56:	79 e3       	ldi	r23, 0x39	; 57
    6b58:	7d 93       	st	X+, r23
    6b5a:	2a 95       	dec	r18
    6b5c:	e9 f7       	brne	.-6      	; 0x6b58 <__ftoa_engine+0x14c>
    6b5e:	10 c0       	rjmp	.+32     	; 0x6b80 <__ftoa_engine+0x174>
    6b60:	7d 93       	st	X+, r23
    6b62:	2a 95       	dec	r18
    6b64:	89 f6       	brne	.-94     	; 0x6b08 <__ftoa_engine+0xfc>
    6b66:	06 94       	lsr	r0
    6b68:	97 95       	ror	r25
    6b6a:	67 95       	ror	r22
    6b6c:	37 95       	ror	r19
    6b6e:	17 95       	ror	r17
    6b70:	17 94       	ror	r1
    6b72:	e1 18       	sub	r14, r1
    6b74:	f1 0a       	sbc	r15, r17
    6b76:	43 0b       	sbc	r20, r19
    6b78:	56 0b       	sbc	r21, r22
    6b7a:	c9 0b       	sbc	r28, r25
    6b7c:	d0 09       	sbc	r29, r0
    6b7e:	98 f0       	brcs	.+38     	; 0x6ba6 <__ftoa_engine+0x19a>
    6b80:	23 95       	inc	r18
    6b82:	7e 91       	ld	r23, -X
    6b84:	73 95       	inc	r23
    6b86:	7a 33       	cpi	r23, 0x3A	; 58
    6b88:	08 f0       	brcs	.+2      	; 0x6b8c <__ftoa_engine+0x180>
    6b8a:	70 e3       	ldi	r23, 0x30	; 48
    6b8c:	7c 93       	st	X, r23
    6b8e:	20 13       	cpse	r18, r16
    6b90:	b8 f7       	brcc	.-18     	; 0x6b80 <__ftoa_engine+0x174>
    6b92:	7e 91       	ld	r23, -X
    6b94:	70 61       	ori	r23, 0x10	; 16
    6b96:	7d 93       	st	X+, r23
    6b98:	30 f0       	brcs	.+12     	; 0x6ba6 <__ftoa_engine+0x19a>
    6b9a:	83 95       	inc	r24
    6b9c:	71 e3       	ldi	r23, 0x31	; 49
    6b9e:	7d 93       	st	X+, r23
    6ba0:	70 e3       	ldi	r23, 0x30	; 48
    6ba2:	2a 95       	dec	r18
    6ba4:	e1 f7       	brne	.-8      	; 0x6b9e <__ftoa_engine+0x192>
    6ba6:	11 24       	eor	r1, r1
    6ba8:	ef 90       	pop	r14
    6baa:	ff 90       	pop	r15
    6bac:	0f 91       	pop	r16
    6bae:	1f 91       	pop	r17
    6bb0:	cf 91       	pop	r28
    6bb2:	df 91       	pop	r29
    6bb4:	99 27       	eor	r25, r25
    6bb6:	87 fd       	sbrc	r24, 7
    6bb8:	90 95       	com	r25
    6bba:	08 95       	ret

00006bbc <strnlen_P>:
    6bbc:	fc 01       	movw	r30, r24
    6bbe:	05 90       	lpm	r0, Z+
    6bc0:	61 50       	subi	r22, 0x01	; 1
    6bc2:	70 40       	sbci	r23, 0x00	; 0
    6bc4:	01 10       	cpse	r0, r1
    6bc6:	d8 f7       	brcc	.-10     	; 0x6bbe <strnlen_P+0x2>
    6bc8:	80 95       	com	r24
    6bca:	90 95       	com	r25
    6bcc:	8e 0f       	add	r24, r30
    6bce:	9f 1f       	adc	r25, r31
    6bd0:	08 95       	ret

00006bd2 <strnlen>:
    6bd2:	fc 01       	movw	r30, r24
    6bd4:	61 50       	subi	r22, 0x01	; 1
    6bd6:	70 40       	sbci	r23, 0x00	; 0
    6bd8:	01 90       	ld	r0, Z+
    6bda:	01 10       	cpse	r0, r1
    6bdc:	d8 f7       	brcc	.-10     	; 0x6bd4 <strnlen+0x2>
    6bde:	80 95       	com	r24
    6be0:	90 95       	com	r25
    6be2:	8e 0f       	add	r24, r30
    6be4:	9f 1f       	adc	r25, r31
    6be6:	08 95       	ret

00006be8 <fputc>:
    6be8:	0f 93       	push	r16
    6bea:	1f 93       	push	r17
    6bec:	cf 93       	push	r28
    6bee:	df 93       	push	r29
    6bf0:	8c 01       	movw	r16, r24
    6bf2:	eb 01       	movw	r28, r22
    6bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    6bf6:	81 ff       	sbrs	r24, 1
    6bf8:	1b c0       	rjmp	.+54     	; 0x6c30 <fputc+0x48>
    6bfa:	82 ff       	sbrs	r24, 2
    6bfc:	0d c0       	rjmp	.+26     	; 0x6c18 <fputc+0x30>
    6bfe:	2e 81       	ldd	r18, Y+6	; 0x06
    6c00:	3f 81       	ldd	r19, Y+7	; 0x07
    6c02:	8c 81       	ldd	r24, Y+4	; 0x04
    6c04:	9d 81       	ldd	r25, Y+5	; 0x05
    6c06:	28 17       	cp	r18, r24
    6c08:	39 07       	cpc	r19, r25
    6c0a:	64 f4       	brge	.+24     	; 0x6c24 <fputc+0x3c>
    6c0c:	e8 81       	ld	r30, Y
    6c0e:	f9 81       	ldd	r31, Y+1	; 0x01
    6c10:	01 93       	st	Z+, r16
    6c12:	f9 83       	std	Y+1, r31	; 0x01
    6c14:	e8 83       	st	Y, r30
    6c16:	06 c0       	rjmp	.+12     	; 0x6c24 <fputc+0x3c>
    6c18:	e8 85       	ldd	r30, Y+8	; 0x08
    6c1a:	f9 85       	ldd	r31, Y+9	; 0x09
    6c1c:	80 2f       	mov	r24, r16
    6c1e:	09 95       	icall
    6c20:	89 2b       	or	r24, r25
    6c22:	31 f4       	brne	.+12     	; 0x6c30 <fputc+0x48>
    6c24:	8e 81       	ldd	r24, Y+6	; 0x06
    6c26:	9f 81       	ldd	r25, Y+7	; 0x07
    6c28:	01 96       	adiw	r24, 0x01	; 1
    6c2a:	9f 83       	std	Y+7, r25	; 0x07
    6c2c:	8e 83       	std	Y+6, r24	; 0x06
    6c2e:	02 c0       	rjmp	.+4      	; 0x6c34 <fputc+0x4c>
    6c30:	0f ef       	ldi	r16, 0xFF	; 255
    6c32:	1f ef       	ldi	r17, 0xFF	; 255
    6c34:	c8 01       	movw	r24, r16
    6c36:	df 91       	pop	r29
    6c38:	cf 91       	pop	r28
    6c3a:	1f 91       	pop	r17
    6c3c:	0f 91       	pop	r16
    6c3e:	08 95       	ret

00006c40 <printf>:
    6c40:	a0 e0       	ldi	r26, 0x00	; 0
    6c42:	b0 e0       	ldi	r27, 0x00	; 0
    6c44:	e5 e2       	ldi	r30, 0x25	; 37
    6c46:	f6 e3       	ldi	r31, 0x36	; 54
    6c48:	b5 cd       	rjmp	.-1174   	; 0x67b4 <__prologue_saves__+0x20>
    6c4a:	fe 01       	movw	r30, r28
    6c4c:	35 96       	adiw	r30, 0x05	; 5
    6c4e:	61 91       	ld	r22, Z+
    6c50:	71 91       	ld	r23, Z+
    6c52:	80 91 4b 08 	lds	r24, 0x084B
    6c56:	90 91 4c 08 	lds	r25, 0x084C
    6c5a:	af 01       	movw	r20, r30
    6c5c:	f2 d9       	rcall	.-3100   	; 0x6042 <vfprintf>
    6c5e:	20 96       	adiw	r28, 0x00	; 0
    6c60:	e2 e0       	ldi	r30, 0x02	; 2
    6c62:	c4 cd       	rjmp	.-1144   	; 0x67ec <__epilogue_restores__+0x20>

00006c64 <puts>:
    6c64:	0f 93       	push	r16
    6c66:	1f 93       	push	r17
    6c68:	cf 93       	push	r28
    6c6a:	df 93       	push	r29
    6c6c:	8c 01       	movw	r16, r24
    6c6e:	e0 91 4b 08 	lds	r30, 0x084B
    6c72:	f0 91 4c 08 	lds	r31, 0x084C
    6c76:	83 81       	ldd	r24, Z+3	; 0x03
    6c78:	81 ff       	sbrs	r24, 1
    6c7a:	21 c0       	rjmp	.+66     	; 0x6cbe <puts+0x5a>
    6c7c:	c0 e0       	ldi	r28, 0x00	; 0
    6c7e:	d0 e0       	ldi	r29, 0x00	; 0
    6c80:	0d c0       	rjmp	.+26     	; 0x6c9c <puts+0x38>
    6c82:	e0 91 4b 08 	lds	r30, 0x084B
    6c86:	f0 91 4c 08 	lds	r31, 0x084C
    6c8a:	20 85       	ldd	r18, Z+8	; 0x08
    6c8c:	31 85       	ldd	r19, Z+9	; 0x09
    6c8e:	bf 01       	movw	r22, r30
    6c90:	f9 01       	movw	r30, r18
    6c92:	09 95       	icall
    6c94:	89 2b       	or	r24, r25
    6c96:	11 f0       	breq	.+4      	; 0x6c9c <puts+0x38>
    6c98:	cf ef       	ldi	r28, 0xFF	; 255
    6c9a:	df ef       	ldi	r29, 0xFF	; 255
    6c9c:	f8 01       	movw	r30, r16
    6c9e:	81 91       	ld	r24, Z+
    6ca0:	8f 01       	movw	r16, r30
    6ca2:	88 23       	and	r24, r24
    6ca4:	71 f7       	brne	.-36     	; 0x6c82 <puts+0x1e>
    6ca6:	e0 91 4b 08 	lds	r30, 0x084B
    6caa:	f0 91 4c 08 	lds	r31, 0x084C
    6cae:	20 85       	ldd	r18, Z+8	; 0x08
    6cb0:	31 85       	ldd	r19, Z+9	; 0x09
    6cb2:	8a e0       	ldi	r24, 0x0A	; 10
    6cb4:	bf 01       	movw	r22, r30
    6cb6:	f9 01       	movw	r30, r18
    6cb8:	09 95       	icall
    6cba:	89 2b       	or	r24, r25
    6cbc:	11 f0       	breq	.+4      	; 0x6cc2 <puts+0x5e>
    6cbe:	cf ef       	ldi	r28, 0xFF	; 255
    6cc0:	df ef       	ldi	r29, 0xFF	; 255
    6cc2:	ce 01       	movw	r24, r28
    6cc4:	df 91       	pop	r29
    6cc6:	cf 91       	pop	r28
    6cc8:	1f 91       	pop	r17
    6cca:	0f 91       	pop	r16
    6ccc:	08 95       	ret

00006cce <__ultoa_invert>:
    6cce:	fa 01       	movw	r30, r20
    6cd0:	aa 27       	eor	r26, r26
    6cd2:	28 30       	cpi	r18, 0x08	; 8
    6cd4:	51 f1       	breq	.+84     	; 0x6d2a <__ultoa_invert+0x5c>
    6cd6:	20 31       	cpi	r18, 0x10	; 16
    6cd8:	81 f1       	breq	.+96     	; 0x6d3a <__ultoa_invert+0x6c>
    6cda:	e8 94       	clt
    6cdc:	6f 93       	push	r22
    6cde:	6e 7f       	andi	r22, 0xFE	; 254
    6ce0:	6e 5f       	subi	r22, 0xFE	; 254
    6ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ce8:	af 4f       	sbci	r26, 0xFF	; 255
    6cea:	b1 e0       	ldi	r27, 0x01	; 1
    6cec:	3e d0       	rcall	.+124    	; 0x6d6a <__ultoa_invert+0x9c>
    6cee:	b4 e0       	ldi	r27, 0x04	; 4
    6cf0:	3c d0       	rcall	.+120    	; 0x6d6a <__ultoa_invert+0x9c>
    6cf2:	67 0f       	add	r22, r23
    6cf4:	78 1f       	adc	r23, r24
    6cf6:	89 1f       	adc	r24, r25
    6cf8:	9a 1f       	adc	r25, r26
    6cfa:	a1 1d       	adc	r26, r1
    6cfc:	68 0f       	add	r22, r24
    6cfe:	79 1f       	adc	r23, r25
    6d00:	8a 1f       	adc	r24, r26
    6d02:	91 1d       	adc	r25, r1
    6d04:	a1 1d       	adc	r26, r1
    6d06:	6a 0f       	add	r22, r26
    6d08:	71 1d       	adc	r23, r1
    6d0a:	81 1d       	adc	r24, r1
    6d0c:	91 1d       	adc	r25, r1
    6d0e:	a1 1d       	adc	r26, r1
    6d10:	20 d0       	rcall	.+64     	; 0x6d52 <__ultoa_invert+0x84>
    6d12:	09 f4       	brne	.+2      	; 0x6d16 <__ultoa_invert+0x48>
    6d14:	68 94       	set
    6d16:	3f 91       	pop	r19
    6d18:	2a e0       	ldi	r18, 0x0A	; 10
    6d1a:	26 9f       	mul	r18, r22
    6d1c:	11 24       	eor	r1, r1
    6d1e:	30 19       	sub	r19, r0
    6d20:	30 5d       	subi	r19, 0xD0	; 208
    6d22:	31 93       	st	Z+, r19
    6d24:	de f6       	brtc	.-74     	; 0x6cdc <__ultoa_invert+0xe>
    6d26:	cf 01       	movw	r24, r30
    6d28:	08 95       	ret
    6d2a:	46 2f       	mov	r20, r22
    6d2c:	47 70       	andi	r20, 0x07	; 7
    6d2e:	40 5d       	subi	r20, 0xD0	; 208
    6d30:	41 93       	st	Z+, r20
    6d32:	b3 e0       	ldi	r27, 0x03	; 3
    6d34:	0f d0       	rcall	.+30     	; 0x6d54 <__ultoa_invert+0x86>
    6d36:	c9 f7       	brne	.-14     	; 0x6d2a <__ultoa_invert+0x5c>
    6d38:	f6 cf       	rjmp	.-20     	; 0x6d26 <__ultoa_invert+0x58>
    6d3a:	46 2f       	mov	r20, r22
    6d3c:	4f 70       	andi	r20, 0x0F	; 15
    6d3e:	40 5d       	subi	r20, 0xD0	; 208
    6d40:	4a 33       	cpi	r20, 0x3A	; 58
    6d42:	18 f0       	brcs	.+6      	; 0x6d4a <__ultoa_invert+0x7c>
    6d44:	49 5d       	subi	r20, 0xD9	; 217
    6d46:	31 fd       	sbrc	r19, 1
    6d48:	40 52       	subi	r20, 0x20	; 32
    6d4a:	41 93       	st	Z+, r20
    6d4c:	02 d0       	rcall	.+4      	; 0x6d52 <__ultoa_invert+0x84>
    6d4e:	a9 f7       	brne	.-22     	; 0x6d3a <__ultoa_invert+0x6c>
    6d50:	ea cf       	rjmp	.-44     	; 0x6d26 <__ultoa_invert+0x58>
    6d52:	b4 e0       	ldi	r27, 0x04	; 4
    6d54:	a6 95       	lsr	r26
    6d56:	97 95       	ror	r25
    6d58:	87 95       	ror	r24
    6d5a:	77 95       	ror	r23
    6d5c:	67 95       	ror	r22
    6d5e:	ba 95       	dec	r27
    6d60:	c9 f7       	brne	.-14     	; 0x6d54 <__ultoa_invert+0x86>
    6d62:	00 97       	sbiw	r24, 0x00	; 0
    6d64:	61 05       	cpc	r22, r1
    6d66:	71 05       	cpc	r23, r1
    6d68:	08 95       	ret
    6d6a:	9b 01       	movw	r18, r22
    6d6c:	ac 01       	movw	r20, r24
    6d6e:	0a 2e       	mov	r0, r26
    6d70:	06 94       	lsr	r0
    6d72:	57 95       	ror	r21
    6d74:	47 95       	ror	r20
    6d76:	37 95       	ror	r19
    6d78:	27 95       	ror	r18
    6d7a:	ba 95       	dec	r27
    6d7c:	c9 f7       	brne	.-14     	; 0x6d70 <__ultoa_invert+0xa2>
    6d7e:	62 0f       	add	r22, r18
    6d80:	73 1f       	adc	r23, r19
    6d82:	84 1f       	adc	r24, r20
    6d84:	95 1f       	adc	r25, r21
    6d86:	a0 1d       	adc	r26, r0
    6d88:	08 95       	ret

00006d8a <_exit>:
    6d8a:	f8 94       	cli

00006d8c <__stop_program>:
    6d8c:	ff cf       	rjmp	.-2      	; 0x6d8c <__stop_program>
