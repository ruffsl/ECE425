
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000252  00800100  00006d54  00006de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d2  00800352  00800352  0000703a  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000084d  00000000  00000000  0000709a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e0f  00000000  00000000  000078e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000464  00000000  00000000  000096f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a93  00000000  00000000  00009b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  0000b5f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ddd  00000000  00000000  0000b940  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001494  00000000  00000000  0000c71d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 6c 23 	jmp	0x46d8	; 0x46d8 <__vector_4>
      14:	0c 94 95 23 	jmp	0x472a	; 0x472a <__vector_5>
      18:	0c 94 be 23 	jmp	0x477c	; 0x477c <__vector_6>
      1c:	0c 94 e7 23 	jmp	0x47ce	; 0x47ce <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 4d 22 	jmp	0x449a	; 0x449a <__vector_9>
      28:	0c 94 76 22 	jmp	0x44ec	; 0x44ec <__vector_10>
      2c:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__vector_11>
      30:	0c 94 1a 23 	jmp	0x4634	; 0x4634 <__vector_12>
      34:	0c 94 c8 22 	jmp	0x4590	; 0x4590 <__vector_13>
      38:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <__vector_14>
      3c:	0c 94 43 23 	jmp	0x4686	; 0x4686 <__vector_15>
      40:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__vector_16>
      44:	0c 94 fb 21 	jmp	0x43f6	; 0x43f6 <__vector_17>
      48:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	37 1f       	adc	r19, r23
      7e:	3a 1f       	adc	r19, r26
      80:	3d 1f       	adc	r19, r29
      82:	40 1f       	adc	r20, r16
      84:	49 1f       	adc	r20, r25
      86:	43 1f       	adc	r20, r19
      88:	46 1f       	adc	r20, r22
      8a:	4c 1f       	adc	r20, r28
      8c:	4f 1f       	adc	r20, r31
      8e:	52 1f       	adc	r21, r18
      90:	55 1f       	adc	r21, r21
      92:	58 1f       	adc	r21, r24
      94:	5b 1f       	adc	r21, r27
      96:	5e 1f       	adc	r21, r30
      98:	61 1f       	adc	r22, r17
      9a:	64 1f       	adc	r22, r20
      9c:	67 1f       	adc	r22, r23
      9e:	6a 1f       	adc	r22, r26
      a0:	6d 1f       	adc	r22, r29
      a2:	7e 1f       	adc	r23, r30
      a4:	81 1f       	adc	r24, r17
      a6:	84 1f       	adc	r24, r20
      a8:	87 1f       	adc	r24, r23
      aa:	90 1f       	adc	r25, r16
      ac:	8a 1f       	adc	r24, r26
      ae:	8d 1f       	adc	r24, r29
      b0:	93 1f       	adc	r25, r19
      b2:	96 1f       	adc	r25, r22
      b4:	99 1f       	adc	r25, r25
      b6:	9c 1f       	adc	r25, r28
      b8:	9f 1f       	adc	r25, r31
      ba:	a2 1f       	adc	r26, r18
      bc:	a5 1f       	adc	r26, r21
      be:	a8 1f       	adc	r26, r24
      c0:	ab 1f       	adc	r26, r27
      c2:	ae 1f       	adc	r26, r30
      c4:	b1 1f       	adc	r27, r17
      c6:	b4 1f       	adc	r27, r20
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e4 e5       	ldi	r30, 0x54	; 84
     676:	fd e6       	ldi	r31, 0x6D	; 109
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a2 35       	cpi	r26, 0x52	; 82
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	a2 e5       	ldi	r26, 0x52	; 82
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a4 32       	cpi	r26, 0x24	; 36
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 8a 19 	call	0x3314	; 0x3314 <main>
     698:	0c 94 a8 36 	jmp	0x6d50	; 0x6d50 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 10 21 	call	0x4220	; 0x4220 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 7f 19 	call	0x32fe	; 0x32fe <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 2b 19 	call	0x3256	; 0x3256 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 7f 19 	call	0x32fe	; 0x32fe <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 2b 19 	call	0x3256	; 0x3256 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 7f 19 	call	0x32fe	; 0x32fe <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 2b 19 	call	0x3256	; 0x3256 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 7f 19 	call	0x32fe	; 0x32fe <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 2b 19 	call	0x3256	; 0x3256 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 7f 19 	call	0x32fe	; 0x32fe <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 2b 19 	call	0x3256	; 0x3256 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 7f 19 	call	0x32fe	; 0x32fe <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 48 19 	call	0x3290	; 0x3290 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 2b 19 	call	0x3256	; 0x3256 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 ee 03 	sts	0x03EE, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 ee 03 	sts	0x03EE, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 e8 1f 	call	0x3fd0	; 0x3fd0 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 8d 1a 	call	0x351a	; 0x351a <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 8d 1a 	call	0x351a	; 0x351a <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 8d 1a 	call	0x351a	; 0x351a <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 8d 1a 	call	0x351a	; 0x351a <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 a2 1a 	call	0x3544	; 0x3544 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 8d 1a 	call	0x351a	; 0x351a <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 8d 1a 	call	0x351a	; 0x351a <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	81 e6       	ldi	r24, 0x61	; 97
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	a4 e8       	ldi	r26, 0x84	; 132
     c56:	b6 e0       	ldi	r27, 0x06	; 6
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	ec e7       	ldi	r30, 0x7C	; 124
     c5e:	f5 e0       	ldi	r31, 0x05	; 5
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	89 ee       	ldi	r24, 0xE9	; 233
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 0c 06 	lds	r10, 0x060C
     c9e:	b0 90 0d 06 	lds	r11, 0x060D
     ca2:	c0 90 0e 06 	lds	r12, 0x060E
     ca6:	d0 90 0f 06 	lds	r13, 0x060F
			rtIR_old[i] = rtIR;
     caa:	e0 90 10 06 	lds	r14, 0x0610
     cae:	f0 90 11 06 	lds	r15, 0x0611
     cb2:	00 91 12 06 	lds	r16, 0x0612
     cb6:	10 91 13 06 	lds	r17, 0x0613
			ftIR_old[i] = ftIR;
     cba:	20 90 69 04 	lds	r2, 0x0469
     cbe:	30 90 6a 04 	lds	r3, 0x046A
     cc2:	40 90 6b 04 	lds	r4, 0x046B
     cc6:	50 90 6c 04 	lds	r5, 0x046C
			bkIR_old[i] = bkIR;
     cca:	20 91 73 04 	lds	r18, 0x0473
     cce:	30 91 74 04 	lds	r19, 0x0474
     cd2:	40 91 75 04 	lds	r20, 0x0475
     cd6:	50 91 76 04 	lds	r21, 0x0476
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	ef 50       	subi	r30, 0x0F	; 15
     ce2:	fc 4f       	sbci	r31, 0xFC	; 252
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	ec 5e       	subi	r30, 0xEC	; 236
     cf0:	f9 4f       	sbci	r31, 0xF9	; 249
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e4 5f       	subi	r30, 0xF4	; 244
     cfe:	fa 4f       	sbci	r31, 0xFA	; 250
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e7 58       	subi	r30, 0x87	; 135
     d0c:	fb 4f       	sbci	r31, 0xFB	; 251
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a9 5e       	subi	r26, 0xE9	; 233
     e02:	b3 40       	sbci	r27, 0x03	; 3
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 0c 06 	lds	r24, 0x060C
     e0c:	90 91 0d 06 	lds	r25, 0x060D
     e10:	a0 91 0e 06 	lds	r26, 0x060E
     e14:	b0 91 0f 06 	lds	r27, 0x060F
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 10 06 	lds	r24, 0x0610
     e28:	90 91 11 06 	lds	r25, 0x0611
     e2c:	a0 91 12 06 	lds	r26, 0x0612
     e30:	b0 91 13 06 	lds	r27, 0x0613
     e34:	80 93 14 06 	sts	0x0614, r24
     e38:	90 93 15 06 	sts	0x0615, r25
     e3c:	a0 93 16 06 	sts	0x0616, r26
     e40:	b0 93 17 06 	sts	0x0617, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 69 04 	lds	r24, 0x0469
     e48:	90 91 6a 04 	lds	r25, 0x046A
     e4c:	a0 91 6b 04 	lds	r26, 0x046B
     e50:	b0 91 6c 04 	lds	r27, 0x046C
     e54:	80 93 0c 05 	sts	0x050C, r24
     e58:	90 93 0d 05 	sts	0x050D, r25
     e5c:	a0 93 0e 05 	sts	0x050E, r26
     e60:	b0 93 0f 05 	sts	0x050F, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 73 04 	lds	r24, 0x0473
     e68:	90 91 74 04 	lds	r25, 0x0474
     e6c:	a0 91 75 04 	lds	r26, 0x0475
     e70:	b0 91 76 04 	lds	r27, 0x0476
     e74:	80 93 79 04 	sts	0x0479, r24
     e78:	90 93 7a 04 	sts	0x047A, r25
     e7c:	a0 93 7b 04 	sts	0x047B, r26
     e80:	b0 93 7c 04 	sts	0x047C, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
     e94:	60 93 0c 06 	sts	0x060C, r22
     e98:	70 93 0d 06 	sts	0x060D, r23
     e9c:	80 93 0e 06 	sts	0x060E, r24
     ea0:	90 93 0f 06 	sts	0x060F, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
     eb8:	60 93 10 06 	sts	0x0610, r22
     ebc:	70 93 11 06 	sts	0x0611, r23
     ec0:	80 93 12 06 	sts	0x0612, r24
     ec4:	90 93 13 06 	sts	0x0613, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
     edc:	60 93 69 04 	sts	0x0469, r22
     ee0:	70 93 6a 04 	sts	0x046A, r23
     ee4:	80 93 6b 04 	sts	0x046B, r24
     ee8:	90 93 6c 04 	sts	0x046C, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
     f00:	60 93 73 04 	sts	0x0473, r22
     f04:	70 93 74 04 	sts	0x0474, r23
     f08:	80 93 75 04 	sts	0x0475, r24
     f0c:	90 93 76 04 	sts	0x0476, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 6d 04 	sts	0x046D, r24
     f66:	90 93 6e 04 	sts	0x046E, r25
     f6a:	a0 93 6f 04 	sts	0x046F, r26
     f6e:	b0 93 70 04 	sts	0x0470, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 6d 04 	lds	r18, 0x046D
     f7a:	30 91 6e 04 	lds	r19, 0x046E
     f7e:	40 91 6f 04 	lds	r20, 0x046F
     f82:	50 91 70 04 	lds	r21, 0x0470
     f86:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 6d 04 	sts	0x046D, r22
     f92:	70 93 6e 04 	sts	0x046E, r23
     f96:	80 93 6f 04 	sts	0x046F, r24
     f9a:	90 93 70 04 	sts	0x0470, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 08 05 	lds	r18, 0x0508
     fa6:	30 91 09 05 	lds	r19, 0x0509
     faa:	40 91 0a 05 	lds	r20, 0x050A
     fae:	50 91 0b 05 	lds	r21, 0x050B
     fb2:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__subsf3>
     fb6:	2d ec       	ldi	r18, 0xCD	; 205
     fb8:	3c ec       	ldi	r19, 0xCC	; 204
     fba:	4c ec       	ldi	r20, 0xCC	; 204
     fbc:	5d e3       	ldi	r21, 0x3D	; 61
     fbe:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    1032:	60 91 69 04 	lds	r22, 0x0469
    1036:	70 91 6a 04 	lds	r23, 0x046A
    103a:	80 91 6b 04 	lds	r24, 0x046B
    103e:	90 91 6c 04 	lds	r25, 0x046C
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    104e:	f8 2e       	mov	r15, r24
    1050:	ff 1c       	adc	r15, r15
    1052:	ff 24       	eor	r15, r15
    1054:	ff 1c       	adc	r15, r15
    1056:	ff 0c       	add	r15, r15
    1058:	ff 0c       	add	r15, r15
    105a:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    105c:	60 91 0c 06 	lds	r22, 0x060C
    1060:	70 91 0d 06 	lds	r23, 0x060D
    1064:	80 91 0e 06 	lds	r24, 0x060E
    1068:	90 91 0f 06 	lds	r25, 0x060F
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 ef       	ldi	r20, 0xF0	; 240
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    1078:	08 2f       	mov	r16, r24
    107a:	00 1f       	adc	r16, r16
    107c:	00 27       	eor	r16, r16
    107e:	00 1f       	adc	r16, r16
    1080:	00 0f       	add	r16, r16
    1082:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    1084:	60 91 73 04 	lds	r22, 0x0473
    1088:	70 91 74 04 	lds	r23, 0x0474
    108c:	80 91 75 04 	lds	r24, 0x0475
    1090:	90 91 76 04 	lds	r25, 0x0476
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4c e0       	ldi	r20, 0x0C	; 12
    109a:	52 e4       	ldi	r21, 0x42	; 66
    109c:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    10a0:	18 2f       	mov	r17, r24
    10a2:	11 1f       	adc	r17, r17
    10a4:	11 27       	eor	r17, r17
    10a6:	11 1f       	adc	r17, r17
    10a8:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    10aa:	ee 24       	eor	r14, r14
    10ac:	60 91 10 06 	lds	r22, 0x0610
    10b0:	70 91 11 06 	lds	r23, 0x0611
    10b4:	80 91 12 06 	lds	r24, 0x0612
    10b8:	90 91 13 06 	lds	r25, 0x0613
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 ef       	ldi	r20, 0xF0	; 240
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	14 f4       	brge	.+4      	; 0x10d0 <checkWorld+0xa6>
    10cc:	ee 24       	eor	r14, r14
    10ce:	e3 94       	inc	r14
    10d0:	8f 2d       	mov	r24, r15
    10d2:	8e 0d       	add	r24, r14
    10d4:	80 0f       	add	r24, r16
    10d6:	81 0f       	add	r24, r17
    10d8:	80 93 71 04 	sts	0x0471, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    10dc:	20 91 72 04 	lds	r18, 0x0472
    10e0:	e2 2f       	mov	r30, r18
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	e4 57       	subi	r30, 0x74	; 116
    10e6:	f9 4f       	sbci	r31, 0xF9	; 249
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	90 93 78 04 	sts	0x0478, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    10ee:	89 17       	cp	r24, r25
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <checkWorld+0xce>
		currentMoveWorld += 1;
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	20 93 72 04 	sts	0x0472, r18
	}
}
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	08 95       	ret

00001102 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    1102:	2f 92       	push	r2
    1104:	3f 92       	push	r3
    1106:	4f 92       	push	r4
    1108:	5f 92       	push	r5
    110a:	6f 92       	push	r6
    110c:	7f 92       	push	r7
    110e:	8f 92       	push	r8
    1110:	9f 92       	push	r9
    1112:	af 92       	push	r10
    1114:	bf 92       	push	r11
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	a0 97       	sbiw	r28, 0x20	; 32
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	2b 01       	movw	r4, r22
    1138:	3c 01       	movw	r6, r24
    113a:	2d 83       	std	Y+5, r18	; 0x05
    113c:	3e 83       	std	Y+6, r19	; 0x06
    113e:	4f 83       	std	Y+7, r20	; 0x07
    1140:	58 87       	std	Y+8, r21	; 0x08
    1142:	e9 86       	std	Y+9, r14	; 0x09
    1144:	fa 86       	std	Y+10, r15	; 0x0a
    1146:	0b 87       	std	Y+11, r16	; 0x0b
    1148:	1c 87       	std	Y+12, r17	; 0x0c
    114a:	ad 86       	std	Y+13, r10	; 0x0d
    114c:	be 86       	std	Y+14, r11	; 0x0e
    114e:	cf 86       	std	Y+15, r12	; 0x0f
    1150:	d8 8a       	std	Y+16, r13	; 0x10
    1152:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    1154:	33 24       	eor	r3, r3
    1156:	ca 01       	movw	r24, r20
    1158:	b9 01       	movw	r22, r18
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__gesf2>
    1166:	18 16       	cp	r1, r24
    1168:	14 f4       	brge	.+4      	; 0x116e <move_arc_stnb+0x6c>
    116a:	33 24       	eor	r3, r3
    116c:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    116e:	6d 81       	ldd	r22, Y+5	; 0x05
    1170:	7e 81       	ldd	r23, Y+6	; 0x06
    1172:	8f 81       	ldd	r24, Y+7	; 0x07
    1174:	98 85       	ldd	r25, Y+8	; 0x08
    1176:	2c ed       	ldi	r18, 0xDC	; 220
    1178:	38 eb       	ldi	r19, 0xB8	; 184
    117a:	48 e0       	ldi	r20, 0x08	; 8
    117c:	5e e3       	ldi	r21, 0x3E	; 62
    117e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1182:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__fixsfsi>
    1186:	9b 01       	movw	r18, r22
    1188:	77 ff       	sbrs	r23, 7
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <move_arc_stnb+0x90>
    118c:	30 95       	com	r19
    118e:	21 95       	neg	r18
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	b9 01       	movw	r22, r18
    1194:	88 27       	eor	r24, r24
    1196:	77 fd       	sbrc	r23, 7
    1198:	80 95       	com	r24
    119a:	98 2f       	mov	r25, r24
    119c:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <__floatsisf>
    11a0:	69 83       	std	Y+1, r22	; 0x01
    11a2:	7a 83       	std	Y+2, r23	; 0x02
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    11a8:	69 85       	ldd	r22, Y+9	; 0x09
    11aa:	7a 85       	ldd	r23, Y+10	; 0x0a
    11ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b0:	2c ed       	ldi	r18, 0xDC	; 220
    11b2:	38 eb       	ldi	r19, 0xB8	; 184
    11b4:	48 e0       	ldi	r20, 0x08	; 8
    11b6:	5e e3       	ldi	r21, 0x3E	; 62
    11b8:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    11bc:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__fixsfsi>
    11c0:	9b 01       	movw	r18, r22
    11c2:	77 ff       	sbrs	r23, 7
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <move_arc_stnb+0xca>
    11c6:	30 95       	com	r19
    11c8:	21 95       	neg	r18
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	b9 01       	movw	r22, r18
    11ce:	88 27       	eor	r24, r24
    11d0:	77 fd       	sbrc	r23, 7
    11d2:	80 95       	com	r24
    11d4:	98 2f       	mov	r25, r24
    11d6:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <__floatsisf>
    11da:	4b 01       	movw	r8, r22
    11dc:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    11de:	6d 85       	ldd	r22, Y+13	; 0x0d
    11e0:	7e 85       	ldd	r23, Y+14	; 0x0e
    11e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e4:	98 89       	ldd	r25, Y+16	; 0x10
    11e6:	2c ed       	ldi	r18, 0xDC	; 220
    11e8:	38 eb       	ldi	r19, 0xB8	; 184
    11ea:	48 e0       	ldi	r20, 0x08	; 8
    11ec:	5e e3       	ldi	r21, 0x3E	; 62
    11ee:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    11f2:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__fixsfsi>
    11f6:	9b 01       	movw	r18, r22
    11f8:	77 ff       	sbrs	r23, 7
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <move_arc_stnb+0x100>
    11fc:	30 95       	com	r19
    11fe:	21 95       	neg	r18
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	b9 01       	movw	r22, r18
    1204:	88 27       	eor	r24, r24
    1206:	77 fd       	sbrc	r23, 7
    1208:	80 95       	com	r24
    120a:	98 2f       	mov	r25, r24
    120c:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <__floatsisf>
    1210:	6b 01       	movw	r12, r22
    1212:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1214:	c3 01       	movw	r24, r6
    1216:	b2 01       	movw	r22, r4
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	5f e4       	ldi	r21, 0x4F	; 79
    1220:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    1224:	88 23       	and	r24, r24
    1226:	a1 f5       	brne	.+104    	; 0x1290 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1228:	69 81       	ldd	r22, Y+1	; 0x01
    122a:	7a 81       	ldd	r23, Y+2	; 0x02
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1234:	2b 01       	movw	r4, r22
    1236:	3c 01       	movw	r6, r24
    1238:	c5 01       	movw	r24, r10
    123a:	b4 01       	movw	r22, r8
    123c:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1240:	4b 01       	movw	r8, r22
    1242:	5c 01       	movw	r10, r24
    1244:	c7 01       	movw	r24, r14
    1246:	b6 01       	movw	r22, r12
    1248:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    124c:	6b 01       	movw	r12, r22
    124e:	7c 01       	movw	r14, r24
    1250:	2d b7       	in	r18, 0x3d	; 61
    1252:	3e b7       	in	r19, 0x3e	; 62
    1254:	29 50       	subi	r18, 0x09	; 9
    1256:	30 40       	sbci	r19, 0x00	; 0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	3e bf       	out	0x3e, r19	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	2d bf       	out	0x3d, r18	; 61
    1262:	ed b7       	in	r30, 0x3d	; 61
    1264:	fe b7       	in	r31, 0x3e	; 62
    1266:	31 96       	adiw	r30, 0x01	; 1
    1268:	ad b7       	in	r26, 0x3d	; 61
    126a:	be b7       	in	r27, 0x3e	; 62
    126c:	12 96       	adiw	r26, 0x02	; 2
    126e:	5c 92       	st	X, r5
    1270:	4e 92       	st	-X, r4
    1272:	11 97       	sbiw	r26, 0x01	; 1
    1274:	93 82       	std	Z+3, r9	; 0x03
    1276:	82 82       	std	Z+2, r8	; 0x02
    1278:	75 83       	std	Z+5, r23	; 0x05
    127a:	64 83       	std	Z+4, r22	; 0x04
    127c:	26 82       	std	Z+6, r2	; 0x06
    127e:	10 86       	std	Z+8, r1	; 0x08
    1280:	17 82       	std	Z+7, r1	; 0x07
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	62 e0       	ldi	r22, 0x02	; 2
    1286:	43 2d       	mov	r20, r3
    1288:	92 01       	movw	r18, r4
    128a:	84 01       	movw	r16, r8
    128c:	76 01       	movw	r14, r12
    128e:	c1 c1       	rjmp	.+898    	; 0x1612 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1290:	c3 01       	movw	r24, r6
    1292:	b2 01       	movw	r22, r4
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	e9 f5       	brne	.+122    	; 0x131e <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    12a4:	69 81       	ldd	r22, Y+1	; 0x01
    12a6:	7a 81       	ldd	r23, Y+2	; 0x02
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    12b0:	3b 01       	movw	r6, r22
    12b2:	c5 01       	movw	r24, r10
    12b4:	b4 01       	movw	r22, r8
    12b6:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    12ba:	8b 01       	movw	r16, r22
    12bc:	c7 01       	movw	r24, r14
    12be:	b6 01       	movw	r22, r12
    12c0:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    12c4:	7b 01       	movw	r14, r22
    12c6:	2d b7       	in	r18, 0x3d	; 61
    12c8:	3e b7       	in	r19, 0x3e	; 62
    12ca:	29 50       	subi	r18, 0x09	; 9
    12cc:	30 40       	sbci	r19, 0x00	; 0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	3e bf       	out	0x3e, r19	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	2d bf       	out	0x3d, r18	; 61
    12d8:	ed b7       	in	r30, 0x3d	; 61
    12da:	fe b7       	in	r31, 0x3e	; 62
    12dc:	31 96       	adiw	r30, 0x01	; 1
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	33 20       	and	r3, r3
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <move_arc_stnb+0x1e4>
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	71 82       	std	Z+1, r7	; 0x01
    12e8:	60 82       	st	Z, r6
    12ea:	13 83       	std	Z+3, r17	; 0x03
    12ec:	02 83       	std	Z+2, r16	; 0x02
    12ee:	f5 82       	std	Z+5, r15	; 0x05
    12f0:	e4 82       	std	Z+4, r14	; 0x04
    12f2:	26 82       	std	Z+6, r2	; 0x06
    12f4:	10 86       	std	Z+8, r1	; 0x08
    12f6:	17 82       	std	Z+7, r1	; 0x07
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	62 e0       	ldi	r22, 0x02	; 2
    12fc:	93 01       	movw	r18, r6
    12fe:	c2 2c       	mov	r12, r2
    1300:	aa 24       	eor	r10, r10
    1302:	bb 24       	eor	r11, r11
    1304:	83 2c       	mov	r8, r3
    1306:	0e 94 8b 1c 	call	0x3916	; 0x3916 <STEPPER_move>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	ad b7       	in	r26, 0x3d	; 61
    130e:	be b7       	in	r27, 0x3e	; 62
    1310:	19 96       	adiw	r26, 0x09	; 9
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	be bf       	out	0x3e, r27	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	ad bf       	out	0x3d, r26	; 61
    131c:	89 c1       	rjmp	.+786    	; 0x1630 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    131e:	c3 01       	movw	r24, r6
    1320:	b2 01       	movw	r22, r4
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__gesf2>
    132e:	18 16       	cp	r1, r24
    1330:	0c f0       	brlt	.+2      	; 0x1334 <move_arc_stnb+0x232>
    1332:	b1 c0       	rjmp	.+354    	; 0x1496 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1334:	66 e6       	ldi	r22, 0x66	; 102
    1336:	76 e6       	ldi	r23, 0x66	; 102
    1338:	8a ea       	ldi	r24, 0xAA	; 170
    133a:	91 ec       	ldi	r25, 0xC1	; 193
    133c:	a3 01       	movw	r20, r6
    133e:	92 01       	movw	r18, r4
    1340:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	5f e3       	ldi	r21, 0x3F	; 63
    134c:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    1350:	7b 01       	movw	r14, r22
    1352:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1354:	66 e6       	ldi	r22, 0x66	; 102
    1356:	76 e6       	ldi	r23, 0x66	; 102
    1358:	8a ea       	ldi	r24, 0xAA	; 170
    135a:	91 e4       	ldi	r25, 0x41	; 65
    135c:	a3 01       	movw	r20, r6
    135e:	92 01       	movw	r18, r4
    1360:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    1370:	5b 01       	movw	r10, r22
    1372:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1374:	ed b7       	in	r30, 0x3d	; 61
    1376:	fe b7       	in	r31, 0x3e	; 62
    1378:	39 97       	sbiw	r30, 0x09	; 9
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	fe bf       	out	0x3e, r31	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	ed bf       	out	0x3d, r30	; 61
    1384:	8d b6       	in	r8, 0x3d	; 61
    1386:	9e b6       	in	r9, 0x3e	; 62
    1388:	08 94       	sec
    138a:	81 1c       	adc	r8, r1
    138c:	91 1c       	adc	r9, r1
    138e:	6d 81       	ldd	r22, Y+5	; 0x05
    1390:	7e 81       	ldd	r23, Y+6	; 0x06
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	98 85       	ldd	r25, Y+8	; 0x08
    1396:	a8 01       	movw	r20, r16
    1398:	97 01       	movw	r18, r14
    139a:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    139e:	2c ed       	ldi	r18, 0xDC	; 220
    13a0:	38 eb       	ldi	r19, 0xB8	; 184
    13a2:	48 e0       	ldi	r20, 0x08	; 8
    13a4:	5e e3       	ldi	r21, 0x3E	; 62
    13a6:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    13aa:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    13ae:	69 8b       	std	Y+17, r22	; 0x11
    13b0:	7a 8b       	std	Y+18, r23	; 0x12
    13b2:	8b 8b       	std	Y+19, r24	; 0x13
    13b4:	9c 8b       	std	Y+20, r25	; 0x14
    13b6:	69 85       	ldd	r22, Y+9	; 0x09
    13b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    13ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    13bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13be:	a8 01       	movw	r20, r16
    13c0:	97 01       	movw	r18, r14
    13c2:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    13c6:	2c ed       	ldi	r18, 0xDC	; 220
    13c8:	38 eb       	ldi	r19, 0xB8	; 184
    13ca:	48 e0       	ldi	r20, 0x08	; 8
    13cc:	5e e3       	ldi	r21, 0x3E	; 62
    13ce:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    13d2:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    13d6:	6d 8b       	std	Y+21, r22	; 0x15
    13d8:	7e 8b       	std	Y+22, r23	; 0x16
    13da:	8f 8b       	std	Y+23, r24	; 0x17
    13dc:	98 8f       	std	Y+24, r25	; 0x18
    13de:	6d 85       	ldd	r22, Y+13	; 0x0d
    13e0:	7e 85       	ldd	r23, Y+14	; 0x0e
    13e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e4:	98 89       	ldd	r25, Y+16	; 0x10
    13e6:	a8 01       	movw	r20, r16
    13e8:	97 01       	movw	r18, r14
    13ea:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    13ee:	2c ed       	ldi	r18, 0xDC	; 220
    13f0:	38 eb       	ldi	r19, 0xB8	; 184
    13f2:	48 e0       	ldi	r20, 0x08	; 8
    13f4:	5e e3       	ldi	r21, 0x3E	; 62
    13f6:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    13fa:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    13fe:	2b 01       	movw	r4, r22
    1400:	3c 01       	movw	r6, r24
    1402:	6d 81       	ldd	r22, Y+5	; 0x05
    1404:	7e 81       	ldd	r23, Y+6	; 0x06
    1406:	8f 81       	ldd	r24, Y+7	; 0x07
    1408:	98 85       	ldd	r25, Y+8	; 0x08
    140a:	a6 01       	movw	r20, r12
    140c:	95 01       	movw	r18, r10
    140e:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1412:	2c ed       	ldi	r18, 0xDC	; 220
    1414:	38 eb       	ldi	r19, 0xB8	; 184
    1416:	48 e0       	ldi	r20, 0x08	; 8
    1418:	5e e3       	ldi	r21, 0x3E	; 62
    141a:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    141e:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1422:	d4 01       	movw	r26, r8
    1424:	6d 93       	st	X+, r22
    1426:	7c 93       	st	X, r23
    1428:	69 85       	ldd	r22, Y+9	; 0x09
    142a:	7a 85       	ldd	r23, Y+10	; 0x0a
    142c:	8b 85       	ldd	r24, Y+11	; 0x0b
    142e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1430:	a6 01       	movw	r20, r12
    1432:	95 01       	movw	r18, r10
    1434:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1438:	2c ed       	ldi	r18, 0xDC	; 220
    143a:	38 eb       	ldi	r19, 0xB8	; 184
    143c:	48 e0       	ldi	r20, 0x08	; 8
    143e:	5e e3       	ldi	r21, 0x3E	; 62
    1440:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1444:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1448:	f4 01       	movw	r30, r8
    144a:	73 83       	std	Z+3, r23	; 0x03
    144c:	62 83       	std	Z+2, r22	; 0x02
    144e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1450:	7e 85       	ldd	r23, Y+14	; 0x0e
    1452:	8f 85       	ldd	r24, Y+15	; 0x0f
    1454:	98 89       	ldd	r25, Y+16	; 0x10
    1456:	a6 01       	movw	r20, r12
    1458:	95 01       	movw	r18, r10
    145a:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    145e:	2c ed       	ldi	r18, 0xDC	; 220
    1460:	38 eb       	ldi	r19, 0xB8	; 184
    1462:	48 e0       	ldi	r20, 0x08	; 8
    1464:	5e e3       	ldi	r21, 0x3E	; 62
    1466:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    146a:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    146e:	d4 01       	movw	r26, r8
    1470:	15 96       	adiw	r26, 0x05	; 5
    1472:	7c 93       	st	X, r23
    1474:	6e 93       	st	-X, r22
    1476:	14 97       	sbiw	r26, 0x04	; 4
    1478:	16 96       	adiw	r26, 0x06	; 6
    147a:	2c 92       	st	X, r2
    147c:	16 97       	sbiw	r26, 0x06	; 6
    147e:	18 96       	adiw	r26, 0x08	; 8
    1480:	1c 92       	st	X, r1
    1482:	1e 92       	st	-X, r1
    1484:	17 97       	sbiw	r26, 0x07	; 7
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	43 2d       	mov	r20, r3
    148c:	29 89       	ldd	r18, Y+17	; 0x11
    148e:	3a 89       	ldd	r19, Y+18	; 0x12
    1490:	0d 89       	ldd	r16, Y+21	; 0x15
    1492:	1e 89       	ldd	r17, Y+22	; 0x16
    1494:	bd c0       	rjmp	.+378    	; 0x1610 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1496:	c3 01       	movw	r24, r6
    1498:	b2 01       	movw	r22, r4
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    14a6:	87 fd       	sbrc	r24, 7
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <move_arc_stnb+0x3ac>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	c1 c0       	rjmp	.+386    	; 0x1630 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    14ae:	66 e6       	ldi	r22, 0x66	; 102
    14b0:	76 e6       	ldi	r23, 0x66	; 102
    14b2:	8a ea       	ldi	r24, 0xAA	; 170
    14b4:	91 e4       	ldi	r25, 0x41	; 65
    14b6:	a3 01       	movw	r20, r6
    14b8:	92 01       	movw	r18, r4
    14ba:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    14ca:	7b 01       	movw	r14, r22
    14cc:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    14ce:	66 e6       	ldi	r22, 0x66	; 102
    14d0:	76 e6       	ldi	r23, 0x66	; 102
    14d2:	8a ea       	ldi	r24, 0xAA	; 170
    14d4:	91 ec       	ldi	r25, 0xC1	; 193
    14d6:	a3 01       	movw	r20, r6
    14d8:	92 01       	movw	r18, r4
    14da:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	5f e3       	ldi	r21, 0x3F	; 63
    14e6:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    14ea:	5b 01       	movw	r10, r22
    14ec:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    14ee:	2d b7       	in	r18, 0x3d	; 61
    14f0:	3e b7       	in	r19, 0x3e	; 62
    14f2:	29 50       	subi	r18, 0x09	; 9
    14f4:	30 40       	sbci	r19, 0x00	; 0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	3e bf       	out	0x3e, r19	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	2d bf       	out	0x3d, r18	; 61
    1500:	8d b6       	in	r8, 0x3d	; 61
    1502:	9e b6       	in	r9, 0x3e	; 62
    1504:	08 94       	sec
    1506:	81 1c       	adc	r8, r1
    1508:	91 1c       	adc	r9, r1
    150a:	6d 81       	ldd	r22, Y+5	; 0x05
    150c:	7e 81       	ldd	r23, Y+6	; 0x06
    150e:	8f 81       	ldd	r24, Y+7	; 0x07
    1510:	98 85       	ldd	r25, Y+8	; 0x08
    1512:	a8 01       	movw	r20, r16
    1514:	97 01       	movw	r18, r14
    1516:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    151a:	2c ed       	ldi	r18, 0xDC	; 220
    151c:	38 eb       	ldi	r19, 0xB8	; 184
    151e:	48 e0       	ldi	r20, 0x08	; 8
    1520:	5e e3       	ldi	r21, 0x3E	; 62
    1522:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1526:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    152a:	69 8f       	std	Y+25, r22	; 0x19
    152c:	7a 8f       	std	Y+26, r23	; 0x1a
    152e:	8b 8f       	std	Y+27, r24	; 0x1b
    1530:	9c 8f       	std	Y+28, r25	; 0x1c
    1532:	69 85       	ldd	r22, Y+9	; 0x09
    1534:	7a 85       	ldd	r23, Y+10	; 0x0a
    1536:	8b 85       	ldd	r24, Y+11	; 0x0b
    1538:	9c 85       	ldd	r25, Y+12	; 0x0c
    153a:	a8 01       	movw	r20, r16
    153c:	97 01       	movw	r18, r14
    153e:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1542:	2c ed       	ldi	r18, 0xDC	; 220
    1544:	38 eb       	ldi	r19, 0xB8	; 184
    1546:	48 e0       	ldi	r20, 0x08	; 8
    1548:	5e e3       	ldi	r21, 0x3E	; 62
    154a:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    154e:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1552:	6d 8f       	std	Y+29, r22	; 0x1d
    1554:	7e 8f       	std	Y+30, r23	; 0x1e
    1556:	8f 8f       	std	Y+31, r24	; 0x1f
    1558:	98 a3       	std	Y+32, r25	; 0x20
    155a:	6d 85       	ldd	r22, Y+13	; 0x0d
    155c:	7e 85       	ldd	r23, Y+14	; 0x0e
    155e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1560:	98 89       	ldd	r25, Y+16	; 0x10
    1562:	a8 01       	movw	r20, r16
    1564:	97 01       	movw	r18, r14
    1566:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    156a:	2c ed       	ldi	r18, 0xDC	; 220
    156c:	38 eb       	ldi	r19, 0xB8	; 184
    156e:	48 e0       	ldi	r20, 0x08	; 8
    1570:	5e e3       	ldi	r21, 0x3E	; 62
    1572:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1576:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    157a:	2b 01       	movw	r4, r22
    157c:	3c 01       	movw	r6, r24
    157e:	6d 81       	ldd	r22, Y+5	; 0x05
    1580:	7e 81       	ldd	r23, Y+6	; 0x06
    1582:	8f 81       	ldd	r24, Y+7	; 0x07
    1584:	98 85       	ldd	r25, Y+8	; 0x08
    1586:	a6 01       	movw	r20, r12
    1588:	95 01       	movw	r18, r10
    158a:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    158e:	2c ed       	ldi	r18, 0xDC	; 220
    1590:	38 eb       	ldi	r19, 0xB8	; 184
    1592:	48 e0       	ldi	r20, 0x08	; 8
    1594:	5e e3       	ldi	r21, 0x3E	; 62
    1596:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    159a:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    159e:	d4 01       	movw	r26, r8
    15a0:	6d 93       	st	X+, r22
    15a2:	7c 93       	st	X, r23
    15a4:	69 85       	ldd	r22, Y+9	; 0x09
    15a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    15a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ac:	a6 01       	movw	r20, r12
    15ae:	95 01       	movw	r18, r10
    15b0:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    15b4:	2c ed       	ldi	r18, 0xDC	; 220
    15b6:	38 eb       	ldi	r19, 0xB8	; 184
    15b8:	48 e0       	ldi	r20, 0x08	; 8
    15ba:	5e e3       	ldi	r21, 0x3E	; 62
    15bc:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    15c0:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    15c4:	f4 01       	movw	r30, r8
    15c6:	73 83       	std	Z+3, r23	; 0x03
    15c8:	62 83       	std	Z+2, r22	; 0x02
    15ca:	6d 85       	ldd	r22, Y+13	; 0x0d
    15cc:	7e 85       	ldd	r23, Y+14	; 0x0e
    15ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d0:	98 89       	ldd	r25, Y+16	; 0x10
    15d2:	a6 01       	movw	r20, r12
    15d4:	95 01       	movw	r18, r10
    15d6:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    15da:	2c ed       	ldi	r18, 0xDC	; 220
    15dc:	38 eb       	ldi	r19, 0xB8	; 184
    15de:	48 e0       	ldi	r20, 0x08	; 8
    15e0:	5e e3       	ldi	r21, 0x3E	; 62
    15e2:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    15e6:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    15ea:	d4 01       	movw	r26, r8
    15ec:	15 96       	adiw	r26, 0x05	; 5
    15ee:	7c 93       	st	X, r23
    15f0:	6e 93       	st	-X, r22
    15f2:	14 97       	sbiw	r26, 0x04	; 4
    15f4:	16 96       	adiw	r26, 0x06	; 6
    15f6:	2c 92       	st	X, r2
    15f8:	16 97       	sbiw	r26, 0x06	; 6
    15fa:	18 96       	adiw	r26, 0x08	; 8
    15fc:	1c 92       	st	X, r1
    15fe:	1e 92       	st	-X, r1
    1600:	17 97       	sbiw	r26, 0x07	; 7
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	62 e0       	ldi	r22, 0x02	; 2
    1606:	43 2d       	mov	r20, r3
    1608:	29 8d       	ldd	r18, Y+25	; 0x19
    160a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    160c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    160e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1610:	72 01       	movw	r14, r4
    1612:	c2 2c       	mov	r12, r2
    1614:	aa 24       	eor	r10, r10
    1616:	bb 24       	eor	r11, r11
    1618:	83 2c       	mov	r8, r3
    161a:	0e 94 8b 1c 	call	0x3916	; 0x3916 <STEPPER_move>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	ed b7       	in	r30, 0x3d	; 61
    1622:	fe b7       	in	r31, 0x3e	; 62
    1624:	39 96       	adiw	r30, 0x09	; 9
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	fe bf       	out	0x3e, r31	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1630:	a0 96       	adiw	r28, 0x20	; 32
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	9f 90       	pop	r9
    1652:	8f 90       	pop	r8
    1654:	7f 90       	pop	r7
    1656:	6f 90       	pop	r6
    1658:	5f 90       	pop	r5
    165a:	4f 90       	pop	r4
    165c:	3f 90       	pop	r3
    165e:	2f 90       	pop	r2
    1660:	08 95       	ret

00001662 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    1662:	2f 92       	push	r2
    1664:	3f 92       	push	r3
    1666:	4f 92       	push	r4
    1668:	5f 92       	push	r5
    166a:	6f 92       	push	r6
    166c:	7f 92       	push	r7
    166e:	8f 92       	push	r8
    1670:	9f 92       	push	r9
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	a0 97       	sbiw	r28, 0x20	; 32
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	2b 01       	movw	r4, r22
    1698:	3c 01       	movw	r6, r24
    169a:	2d 83       	std	Y+5, r18	; 0x05
    169c:	3e 83       	std	Y+6, r19	; 0x06
    169e:	4f 83       	std	Y+7, r20	; 0x07
    16a0:	58 87       	std	Y+8, r21	; 0x08
    16a2:	e9 86       	std	Y+9, r14	; 0x09
    16a4:	fa 86       	std	Y+10, r15	; 0x0a
    16a6:	0b 87       	std	Y+11, r16	; 0x0b
    16a8:	1c 87       	std	Y+12, r17	; 0x0c
    16aa:	ad 86       	std	Y+13, r10	; 0x0d
    16ac:	be 86       	std	Y+14, r11	; 0x0e
    16ae:	cf 86       	std	Y+15, r12	; 0x0f
    16b0:	d8 8a       	std	Y+16, r13	; 0x10
    16b2:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    16b4:	33 24       	eor	r3, r3
    16b6:	ca 01       	movw	r24, r20
    16b8:	b9 01       	movw	r22, r18
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__gesf2>
    16c6:	18 16       	cp	r1, r24
    16c8:	14 f4       	brge	.+4      	; 0x16ce <move_arc_stwt+0x6c>
    16ca:	33 24       	eor	r3, r3
    16cc:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    16ce:	6d 81       	ldd	r22, Y+5	; 0x05
    16d0:	7e 81       	ldd	r23, Y+6	; 0x06
    16d2:	8f 81       	ldd	r24, Y+7	; 0x07
    16d4:	98 85       	ldd	r25, Y+8	; 0x08
    16d6:	2c ed       	ldi	r18, 0xDC	; 220
    16d8:	38 eb       	ldi	r19, 0xB8	; 184
    16da:	48 e0       	ldi	r20, 0x08	; 8
    16dc:	5e e3       	ldi	r21, 0x3E	; 62
    16de:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    16e2:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__fixsfsi>
    16e6:	9b 01       	movw	r18, r22
    16e8:	77 ff       	sbrs	r23, 7
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <move_arc_stwt+0x90>
    16ec:	30 95       	com	r19
    16ee:	21 95       	neg	r18
    16f0:	3f 4f       	sbci	r19, 0xFF	; 255
    16f2:	b9 01       	movw	r22, r18
    16f4:	88 27       	eor	r24, r24
    16f6:	77 fd       	sbrc	r23, 7
    16f8:	80 95       	com	r24
    16fa:	98 2f       	mov	r25, r24
    16fc:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <__floatsisf>
    1700:	69 83       	std	Y+1, r22	; 0x01
    1702:	7a 83       	std	Y+2, r23	; 0x02
    1704:	8b 83       	std	Y+3, r24	; 0x03
    1706:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1708:	69 85       	ldd	r22, Y+9	; 0x09
    170a:	7a 85       	ldd	r23, Y+10	; 0x0a
    170c:	8b 85       	ldd	r24, Y+11	; 0x0b
    170e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1710:	2c ed       	ldi	r18, 0xDC	; 220
    1712:	38 eb       	ldi	r19, 0xB8	; 184
    1714:	48 e0       	ldi	r20, 0x08	; 8
    1716:	5e e3       	ldi	r21, 0x3E	; 62
    1718:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    171c:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__fixsfsi>
    1720:	9b 01       	movw	r18, r22
    1722:	77 ff       	sbrs	r23, 7
    1724:	03 c0       	rjmp	.+6      	; 0x172c <move_arc_stwt+0xca>
    1726:	30 95       	com	r19
    1728:	21 95       	neg	r18
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	b9 01       	movw	r22, r18
    172e:	88 27       	eor	r24, r24
    1730:	77 fd       	sbrc	r23, 7
    1732:	80 95       	com	r24
    1734:	98 2f       	mov	r25, r24
    1736:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <__floatsisf>
    173a:	4b 01       	movw	r8, r22
    173c:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    173e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1740:	7e 85       	ldd	r23, Y+14	; 0x0e
    1742:	8f 85       	ldd	r24, Y+15	; 0x0f
    1744:	98 89       	ldd	r25, Y+16	; 0x10
    1746:	2c ed       	ldi	r18, 0xDC	; 220
    1748:	38 eb       	ldi	r19, 0xB8	; 184
    174a:	48 e0       	ldi	r20, 0x08	; 8
    174c:	5e e3       	ldi	r21, 0x3E	; 62
    174e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1752:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__fixsfsi>
    1756:	9b 01       	movw	r18, r22
    1758:	77 ff       	sbrs	r23, 7
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <move_arc_stwt+0x100>
    175c:	30 95       	com	r19
    175e:	21 95       	neg	r18
    1760:	3f 4f       	sbci	r19, 0xFF	; 255
    1762:	b9 01       	movw	r22, r18
    1764:	88 27       	eor	r24, r24
    1766:	77 fd       	sbrc	r23, 7
    1768:	80 95       	com	r24
    176a:	98 2f       	mov	r25, r24
    176c:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <__floatsisf>
    1770:	6b 01       	movw	r12, r22
    1772:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1774:	c3 01       	movw	r24, r6
    1776:	b2 01       	movw	r22, r4
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	5f e4       	ldi	r21, 0x4F	; 79
    1780:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    1784:	88 23       	and	r24, r24
    1786:	a1 f5       	brne	.+104    	; 0x17f0 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1788:	69 81       	ldd	r22, Y+1	; 0x01
    178a:	7a 81       	ldd	r23, Y+2	; 0x02
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1794:	2b 01       	movw	r4, r22
    1796:	3c 01       	movw	r6, r24
    1798:	c5 01       	movw	r24, r10
    179a:	b4 01       	movw	r22, r8
    179c:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    17a0:	4b 01       	movw	r8, r22
    17a2:	5c 01       	movw	r10, r24
    17a4:	c7 01       	movw	r24, r14
    17a6:	b6 01       	movw	r22, r12
    17a8:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    17ac:	6b 01       	movw	r12, r22
    17ae:	7c 01       	movw	r14, r24
    17b0:	2d b7       	in	r18, 0x3d	; 61
    17b2:	3e b7       	in	r19, 0x3e	; 62
    17b4:	29 50       	subi	r18, 0x09	; 9
    17b6:	30 40       	sbci	r19, 0x00	; 0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	3e bf       	out	0x3e, r19	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	2d bf       	out	0x3d, r18	; 61
    17c2:	ed b7       	in	r30, 0x3d	; 61
    17c4:	fe b7       	in	r31, 0x3e	; 62
    17c6:	31 96       	adiw	r30, 0x01	; 1
    17c8:	ad b7       	in	r26, 0x3d	; 61
    17ca:	be b7       	in	r27, 0x3e	; 62
    17cc:	12 96       	adiw	r26, 0x02	; 2
    17ce:	5c 92       	st	X, r5
    17d0:	4e 92       	st	-X, r4
    17d2:	11 97       	sbiw	r26, 0x01	; 1
    17d4:	93 82       	std	Z+3, r9	; 0x03
    17d6:	82 82       	std	Z+2, r8	; 0x02
    17d8:	75 83       	std	Z+5, r23	; 0x05
    17da:	64 83       	std	Z+4, r22	; 0x04
    17dc:	26 82       	std	Z+6, r2	; 0x06
    17de:	10 86       	std	Z+8, r1	; 0x08
    17e0:	17 82       	std	Z+7, r1	; 0x07
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	43 2d       	mov	r20, r3
    17e8:	92 01       	movw	r18, r4
    17ea:	84 01       	movw	r16, r8
    17ec:	76 01       	movw	r14, r12
    17ee:	c1 c1       	rjmp	.+898    	; 0x1b72 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    17f0:	c3 01       	movw	r24, r6
    17f2:	b2 01       	movw	r22, r4
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    1800:	88 23       	and	r24, r24
    1802:	e9 f5       	brne	.+122    	; 0x187e <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1804:	69 81       	ldd	r22, Y+1	; 0x01
    1806:	7a 81       	ldd	r23, Y+2	; 0x02
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1810:	3b 01       	movw	r6, r22
    1812:	c5 01       	movw	r24, r10
    1814:	b4 01       	movw	r22, r8
    1816:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    181a:	8b 01       	movw	r16, r22
    181c:	c7 01       	movw	r24, r14
    181e:	b6 01       	movw	r22, r12
    1820:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1824:	7b 01       	movw	r14, r22
    1826:	2d b7       	in	r18, 0x3d	; 61
    1828:	3e b7       	in	r19, 0x3e	; 62
    182a:	29 50       	subi	r18, 0x09	; 9
    182c:	30 40       	sbci	r19, 0x00	; 0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	3e bf       	out	0x3e, r19	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	2d bf       	out	0x3d, r18	; 61
    1838:	ed b7       	in	r30, 0x3d	; 61
    183a:	fe b7       	in	r31, 0x3e	; 62
    183c:	31 96       	adiw	r30, 0x01	; 1
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	33 20       	and	r3, r3
    1842:	09 f4       	brne	.+2      	; 0x1846 <move_arc_stwt+0x1e4>
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	71 82       	std	Z+1, r7	; 0x01
    1848:	60 82       	st	Z, r6
    184a:	13 83       	std	Z+3, r17	; 0x03
    184c:	02 83       	std	Z+2, r16	; 0x02
    184e:	f5 82       	std	Z+5, r15	; 0x05
    1850:	e4 82       	std	Z+4, r14	; 0x04
    1852:	26 82       	std	Z+6, r2	; 0x06
    1854:	10 86       	std	Z+8, r1	; 0x08
    1856:	17 82       	std	Z+7, r1	; 0x07
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	62 e0       	ldi	r22, 0x02	; 2
    185c:	93 01       	movw	r18, r6
    185e:	c2 2c       	mov	r12, r2
    1860:	aa 24       	eor	r10, r10
    1862:	bb 24       	eor	r11, r11
    1864:	83 2c       	mov	r8, r3
    1866:	0e 94 8b 1c 	call	0x3916	; 0x3916 <STEPPER_move>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	ad b7       	in	r26, 0x3d	; 61
    186e:	be b7       	in	r27, 0x3e	; 62
    1870:	19 96       	adiw	r26, 0x09	; 9
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	be bf       	out	0x3e, r27	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	ad bf       	out	0x3d, r26	; 61
    187c:	89 c1       	rjmp	.+786    	; 0x1b90 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    187e:	c3 01       	movw	r24, r6
    1880:	b2 01       	movw	r22, r4
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__gesf2>
    188e:	18 16       	cp	r1, r24
    1890:	0c f0       	brlt	.+2      	; 0x1894 <move_arc_stwt+0x232>
    1892:	b1 c0       	rjmp	.+354    	; 0x19f6 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1894:	66 e6       	ldi	r22, 0x66	; 102
    1896:	76 e6       	ldi	r23, 0x66	; 102
    1898:	8a ea       	ldi	r24, 0xAA	; 170
    189a:	91 ec       	ldi	r25, 0xC1	; 193
    189c:	a3 01       	movw	r20, r6
    189e:	92 01       	movw	r18, r4
    18a0:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	5f e3       	ldi	r21, 0x3F	; 63
    18ac:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    18b0:	7b 01       	movw	r14, r22
    18b2:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    18b4:	66 e6       	ldi	r22, 0x66	; 102
    18b6:	76 e6       	ldi	r23, 0x66	; 102
    18b8:	8a ea       	ldi	r24, 0xAA	; 170
    18ba:	91 e4       	ldi	r25, 0x41	; 65
    18bc:	a3 01       	movw	r20, r6
    18be:	92 01       	movw	r18, r4
    18c0:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    18d0:	5b 01       	movw	r10, r22
    18d2:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    18d4:	ed b7       	in	r30, 0x3d	; 61
    18d6:	fe b7       	in	r31, 0x3e	; 62
    18d8:	39 97       	sbiw	r30, 0x09	; 9
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	fe bf       	out	0x3e, r31	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	ed bf       	out	0x3d, r30	; 61
    18e4:	8d b6       	in	r8, 0x3d	; 61
    18e6:	9e b6       	in	r9, 0x3e	; 62
    18e8:	08 94       	sec
    18ea:	81 1c       	adc	r8, r1
    18ec:	91 1c       	adc	r9, r1
    18ee:	6d 81       	ldd	r22, Y+5	; 0x05
    18f0:	7e 81       	ldd	r23, Y+6	; 0x06
    18f2:	8f 81       	ldd	r24, Y+7	; 0x07
    18f4:	98 85       	ldd	r25, Y+8	; 0x08
    18f6:	a8 01       	movw	r20, r16
    18f8:	97 01       	movw	r18, r14
    18fa:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    18fe:	2c ed       	ldi	r18, 0xDC	; 220
    1900:	38 eb       	ldi	r19, 0xB8	; 184
    1902:	48 e0       	ldi	r20, 0x08	; 8
    1904:	5e e3       	ldi	r21, 0x3E	; 62
    1906:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    190a:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    190e:	69 8b       	std	Y+17, r22	; 0x11
    1910:	7a 8b       	std	Y+18, r23	; 0x12
    1912:	8b 8b       	std	Y+19, r24	; 0x13
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	69 85       	ldd	r22, Y+9	; 0x09
    1918:	7a 85       	ldd	r23, Y+10	; 0x0a
    191a:	8b 85       	ldd	r24, Y+11	; 0x0b
    191c:	9c 85       	ldd	r25, Y+12	; 0x0c
    191e:	a8 01       	movw	r20, r16
    1920:	97 01       	movw	r18, r14
    1922:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1926:	2c ed       	ldi	r18, 0xDC	; 220
    1928:	38 eb       	ldi	r19, 0xB8	; 184
    192a:	48 e0       	ldi	r20, 0x08	; 8
    192c:	5e e3       	ldi	r21, 0x3E	; 62
    192e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1932:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1936:	6d 8b       	std	Y+21, r22	; 0x15
    1938:	7e 8b       	std	Y+22, r23	; 0x16
    193a:	8f 8b       	std	Y+23, r24	; 0x17
    193c:	98 8f       	std	Y+24, r25	; 0x18
    193e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1940:	7e 85       	ldd	r23, Y+14	; 0x0e
    1942:	8f 85       	ldd	r24, Y+15	; 0x0f
    1944:	98 89       	ldd	r25, Y+16	; 0x10
    1946:	a8 01       	movw	r20, r16
    1948:	97 01       	movw	r18, r14
    194a:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    194e:	2c ed       	ldi	r18, 0xDC	; 220
    1950:	38 eb       	ldi	r19, 0xB8	; 184
    1952:	48 e0       	ldi	r20, 0x08	; 8
    1954:	5e e3       	ldi	r21, 0x3E	; 62
    1956:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    195a:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    195e:	2b 01       	movw	r4, r22
    1960:	3c 01       	movw	r6, r24
    1962:	6d 81       	ldd	r22, Y+5	; 0x05
    1964:	7e 81       	ldd	r23, Y+6	; 0x06
    1966:	8f 81       	ldd	r24, Y+7	; 0x07
    1968:	98 85       	ldd	r25, Y+8	; 0x08
    196a:	a6 01       	movw	r20, r12
    196c:	95 01       	movw	r18, r10
    196e:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1972:	2c ed       	ldi	r18, 0xDC	; 220
    1974:	38 eb       	ldi	r19, 0xB8	; 184
    1976:	48 e0       	ldi	r20, 0x08	; 8
    1978:	5e e3       	ldi	r21, 0x3E	; 62
    197a:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    197e:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1982:	d4 01       	movw	r26, r8
    1984:	6d 93       	st	X+, r22
    1986:	7c 93       	st	X, r23
    1988:	69 85       	ldd	r22, Y+9	; 0x09
    198a:	7a 85       	ldd	r23, Y+10	; 0x0a
    198c:	8b 85       	ldd	r24, Y+11	; 0x0b
    198e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1990:	a6 01       	movw	r20, r12
    1992:	95 01       	movw	r18, r10
    1994:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1998:	2c ed       	ldi	r18, 0xDC	; 220
    199a:	38 eb       	ldi	r19, 0xB8	; 184
    199c:	48 e0       	ldi	r20, 0x08	; 8
    199e:	5e e3       	ldi	r21, 0x3E	; 62
    19a0:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    19a4:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    19a8:	f4 01       	movw	r30, r8
    19aa:	73 83       	std	Z+3, r23	; 0x03
    19ac:	62 83       	std	Z+2, r22	; 0x02
    19ae:	6d 85       	ldd	r22, Y+13	; 0x0d
    19b0:	7e 85       	ldd	r23, Y+14	; 0x0e
    19b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b4:	98 89       	ldd	r25, Y+16	; 0x10
    19b6:	a6 01       	movw	r20, r12
    19b8:	95 01       	movw	r18, r10
    19ba:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    19be:	2c ed       	ldi	r18, 0xDC	; 220
    19c0:	38 eb       	ldi	r19, 0xB8	; 184
    19c2:	48 e0       	ldi	r20, 0x08	; 8
    19c4:	5e e3       	ldi	r21, 0x3E	; 62
    19c6:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    19ca:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    19ce:	d4 01       	movw	r26, r8
    19d0:	15 96       	adiw	r26, 0x05	; 5
    19d2:	7c 93       	st	X, r23
    19d4:	6e 93       	st	-X, r22
    19d6:	14 97       	sbiw	r26, 0x04	; 4
    19d8:	16 96       	adiw	r26, 0x06	; 6
    19da:	2c 92       	st	X, r2
    19dc:	16 97       	sbiw	r26, 0x06	; 6
    19de:	18 96       	adiw	r26, 0x08	; 8
    19e0:	1c 92       	st	X, r1
    19e2:	1e 92       	st	-X, r1
    19e4:	17 97       	sbiw	r26, 0x07	; 7
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	62 e0       	ldi	r22, 0x02	; 2
    19ea:	43 2d       	mov	r20, r3
    19ec:	29 89       	ldd	r18, Y+17	; 0x11
    19ee:	3a 89       	ldd	r19, Y+18	; 0x12
    19f0:	0d 89       	ldd	r16, Y+21	; 0x15
    19f2:	1e 89       	ldd	r17, Y+22	; 0x16
    19f4:	bd c0       	rjmp	.+378    	; 0x1b70 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    19f6:	c3 01       	movw	r24, r6
    19f8:	b2 01       	movw	r22, r4
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    1a06:	87 fd       	sbrc	r24, 7
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <move_arc_stwt+0x3ac>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	c1 c0       	rjmp	.+386    	; 0x1b90 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1a0e:	66 e6       	ldi	r22, 0x66	; 102
    1a10:	76 e6       	ldi	r23, 0x66	; 102
    1a12:	8a ea       	ldi	r24, 0xAA	; 170
    1a14:	91 e4       	ldi	r25, 0x41	; 65
    1a16:	a3 01       	movw	r20, r6
    1a18:	92 01       	movw	r18, r4
    1a1a:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    1a2a:	7b 01       	movw	r14, r22
    1a2c:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1a2e:	66 e6       	ldi	r22, 0x66	; 102
    1a30:	76 e6       	ldi	r23, 0x66	; 102
    1a32:	8a ea       	ldi	r24, 0xAA	; 170
    1a34:	91 ec       	ldi	r25, 0xC1	; 193
    1a36:	a3 01       	movw	r20, r6
    1a38:	92 01       	movw	r18, r4
    1a3a:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	5f e3       	ldi	r21, 0x3F	; 63
    1a46:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    1a4a:	5b 01       	movw	r10, r22
    1a4c:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1a4e:	2d b7       	in	r18, 0x3d	; 61
    1a50:	3e b7       	in	r19, 0x3e	; 62
    1a52:	29 50       	subi	r18, 0x09	; 9
    1a54:	30 40       	sbci	r19, 0x00	; 0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	3e bf       	out	0x3e, r19	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	2d bf       	out	0x3d, r18	; 61
    1a60:	8d b6       	in	r8, 0x3d	; 61
    1a62:	9e b6       	in	r9, 0x3e	; 62
    1a64:	08 94       	sec
    1a66:	81 1c       	adc	r8, r1
    1a68:	91 1c       	adc	r9, r1
    1a6a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a6c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a70:	98 85       	ldd	r25, Y+8	; 0x08
    1a72:	a8 01       	movw	r20, r16
    1a74:	97 01       	movw	r18, r14
    1a76:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1a7a:	2c ed       	ldi	r18, 0xDC	; 220
    1a7c:	38 eb       	ldi	r19, 0xB8	; 184
    1a7e:	48 e0       	ldi	r20, 0x08	; 8
    1a80:	5e e3       	ldi	r21, 0x3E	; 62
    1a82:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1a86:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1a8a:	69 8f       	std	Y+25, r22	; 0x19
    1a8c:	7a 8f       	std	Y+26, r23	; 0x1a
    1a8e:	8b 8f       	std	Y+27, r24	; 0x1b
    1a90:	9c 8f       	std	Y+28, r25	; 0x1c
    1a92:	69 85       	ldd	r22, Y+9	; 0x09
    1a94:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a96:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a98:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a9a:	a8 01       	movw	r20, r16
    1a9c:	97 01       	movw	r18, r14
    1a9e:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1aa2:	2c ed       	ldi	r18, 0xDC	; 220
    1aa4:	38 eb       	ldi	r19, 0xB8	; 184
    1aa6:	48 e0       	ldi	r20, 0x08	; 8
    1aa8:	5e e3       	ldi	r21, 0x3E	; 62
    1aaa:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1aae:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1ab2:	6d 8f       	std	Y+29, r22	; 0x1d
    1ab4:	7e 8f       	std	Y+30, r23	; 0x1e
    1ab6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ab8:	98 a3       	std	Y+32, r25	; 0x20
    1aba:	6d 85       	ldd	r22, Y+13	; 0x0d
    1abc:	7e 85       	ldd	r23, Y+14	; 0x0e
    1abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac0:	98 89       	ldd	r25, Y+16	; 0x10
    1ac2:	a8 01       	movw	r20, r16
    1ac4:	97 01       	movw	r18, r14
    1ac6:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1aca:	2c ed       	ldi	r18, 0xDC	; 220
    1acc:	38 eb       	ldi	r19, 0xB8	; 184
    1ace:	48 e0       	ldi	r20, 0x08	; 8
    1ad0:	5e e3       	ldi	r21, 0x3E	; 62
    1ad2:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1ad6:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1ada:	2b 01       	movw	r4, r22
    1adc:	3c 01       	movw	r6, r24
    1ade:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae4:	98 85       	ldd	r25, Y+8	; 0x08
    1ae6:	a6 01       	movw	r20, r12
    1ae8:	95 01       	movw	r18, r10
    1aea:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1aee:	2c ed       	ldi	r18, 0xDC	; 220
    1af0:	38 eb       	ldi	r19, 0xB8	; 184
    1af2:	48 e0       	ldi	r20, 0x08	; 8
    1af4:	5e e3       	ldi	r21, 0x3E	; 62
    1af6:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1afa:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1afe:	d4 01       	movw	r26, r8
    1b00:	6d 93       	st	X+, r22
    1b02:	7c 93       	st	X, r23
    1b04:	69 85       	ldd	r22, Y+9	; 0x09
    1b06:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b08:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b0c:	a6 01       	movw	r20, r12
    1b0e:	95 01       	movw	r18, r10
    1b10:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1b14:	2c ed       	ldi	r18, 0xDC	; 220
    1b16:	38 eb       	ldi	r19, 0xB8	; 184
    1b18:	48 e0       	ldi	r20, 0x08	; 8
    1b1a:	5e e3       	ldi	r21, 0x3E	; 62
    1b1c:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1b20:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1b24:	f4 01       	movw	r30, r8
    1b26:	73 83       	std	Z+3, r23	; 0x03
    1b28:	62 83       	std	Z+2, r22	; 0x02
    1b2a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b2c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	a6 01       	movw	r20, r12
    1b34:	95 01       	movw	r18, r10
    1b36:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    1b3a:	2c ed       	ldi	r18, 0xDC	; 220
    1b3c:	38 eb       	ldi	r19, 0xB8	; 184
    1b3e:	48 e0       	ldi	r20, 0x08	; 8
    1b40:	5e e3       	ldi	r21, 0x3E	; 62
    1b42:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    1b46:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1b4a:	d4 01       	movw	r26, r8
    1b4c:	15 96       	adiw	r26, 0x05	; 5
    1b4e:	7c 93       	st	X, r23
    1b50:	6e 93       	st	-X, r22
    1b52:	14 97       	sbiw	r26, 0x04	; 4
    1b54:	16 96       	adiw	r26, 0x06	; 6
    1b56:	2c 92       	st	X, r2
    1b58:	16 97       	sbiw	r26, 0x06	; 6
    1b5a:	18 96       	adiw	r26, 0x08	; 8
    1b5c:	1c 92       	st	X, r1
    1b5e:	1e 92       	st	-X, r1
    1b60:	17 97       	sbiw	r26, 0x07	; 7
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	62 e0       	ldi	r22, 0x02	; 2
    1b66:	43 2d       	mov	r20, r3
    1b68:	29 8d       	ldd	r18, Y+25	; 0x19
    1b6a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1b6c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1b6e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1b70:	72 01       	movw	r14, r4
    1b72:	c2 2c       	mov	r12, r2
    1b74:	aa 24       	eor	r10, r10
    1b76:	bb 24       	eor	r11, r11
    1b78:	83 2c       	mov	r8, r3
    1b7a:	0e 94 8b 1c 	call	0x3916	; 0x3916 <STEPPER_move>
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	ed b7       	in	r30, 0x3d	; 61
    1b82:	fe b7       	in	r31, 0x3e	; 62
    1b84:	39 96       	adiw	r30, 0x09	; 9
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	fe bf       	out	0x3e, r31	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1b90:	a0 96       	adiw	r28, 0x20	; 32
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	bf 90       	pop	r11
    1bae:	af 90       	pop	r10
    1bb0:	9f 90       	pop	r9
    1bb2:	8f 90       	pop	r8
    1bb4:	7f 90       	pop	r7
    1bb6:	6f 90       	pop	r6
    1bb8:	5f 90       	pop	r5
    1bba:	4f 90       	pop	r4
    1bbc:	3f 90       	pop	r3
    1bbe:	2f 90       	pop	r2
    1bc0:	08 95       	ret

00001bc2 <setOdometry>:
* Input Variables:	void
* Output Return:	float odometry 
* Overview:		    Sets the odometry to move
********************************************************************/
void setOdometry( float odometry )
{	
    1bc2:	8f 92       	push	r8
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	cf 92       	push	r12
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
	// Set the gloable odometryTrigger
	odometryTrigger = odometry;
    1bd2:	60 93 f1 04 	sts	0x04F1, r22
    1bd6:	70 93 f2 04 	sts	0x04F2, r23
    1bda:	80 93 f3 04 	sts	0x04F3, r24
    1bde:	90 93 f4 04 	sts	0x04F4, r25

	// Set the stepers
	STEPPER_move_stnb( STEPPER_BOTH, 
    1be2:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    1be6:	8b 01       	movw	r16, r22
    1be8:	9c 01       	movw	r18, r24
    1bea:	8d b7       	in	r24, 0x3d	; 61
    1bec:	9e b7       	in	r25, 0x3e	; 62
    1bee:	09 97       	sbiw	r24, 0x09	; 9
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	9e bf       	out	0x3e, r25	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	8d bf       	out	0x3d, r24	; 61
    1bfa:	ed b7       	in	r30, 0x3d	; 61
    1bfc:	fe b7       	in	r31, 0x3e	; 62
    1bfe:	31 96       	adiw	r30, 0x01	; 1
    1c00:	ad b7       	in	r26, 0x3d	; 61
    1c02:	be b7       	in	r27, 0x3e	; 62
    1c04:	12 96       	adiw	r26, 0x02	; 2
    1c06:	1c 93       	st	X, r17
    1c08:	0e 93       	st	-X, r16
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
    1c0c:	84 ef       	ldi	r24, 0xF4	; 244
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	93 83       	std	Z+3, r25	; 0x03
    1c12:	82 83       	std	Z+2, r24	; 0x02
    1c14:	95 83       	std	Z+5, r25	; 0x05
    1c16:	84 83       	std	Z+4, r24	; 0x04
    1c18:	16 82       	std	Z+6, r1	; 0x06
    1c1a:	10 86       	std	Z+8, r1	; 0x08
    1c1c:	17 82       	std	Z+7, r1	; 0x07
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	62 e0       	ldi	r22, 0x02	; 2
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	98 01       	movw	r18, r16
    1c26:	04 ef       	ldi	r16, 0xF4	; 244
    1c28:	11 e0       	ldi	r17, 0x01	; 1
    1c2a:	94 ef       	ldi	r25, 0xF4	; 244
    1c2c:	e9 2e       	mov	r14, r25
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	f9 2e       	mov	r15, r25
    1c32:	cc 24       	eor	r12, r12
    1c34:	aa 24       	eor	r10, r10
    1c36:	bb 24       	eor	r11, r11
    1c38:	88 24       	eor	r8, r8
    1c3a:	83 94       	inc	r8
    1c3c:	0e 94 8b 1c 	call	0x3916	; 0x3916 <STEPPER_move>
    1c40:	8d b7       	in	r24, 0x3d	; 61
    1c42:	9e b7       	in	r25, 0x3e	; 62
    1c44:	09 96       	adiw	r24, 0x09	; 9
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	9e bf       	out	0x3e, r25	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	8d bf       	out	0x3d, r24	; 61
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF, // Left
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF ); // Right
}
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	cf 90       	pop	r12
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	8f 90       	pop	r8
    1c60:	08 95       	ret

00001c62 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1c62:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1c66:	28 2f       	mov	r18, r24
    1c68:	21 70       	andi	r18, 0x01	; 1
    1c6a:	20 93 0a 06 	sts	0x060A, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	82 70       	andi	r24, 0x02	; 2
    1c72:	90 70       	andi	r25, 0x00	; 0
    1c74:	95 95       	asr	r25
    1c76:	87 95       	ror	r24
    1c78:	80 93 0b 06 	sts	0x060B, r24
}
    1c7c:	08 95       	ret

00001c7e <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1c7e:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1c82:	60 93 01 05 	sts	0x0501, r22
    1c86:	70 93 02 05 	sts	0x0502, r23
    1c8a:	80 93 03 05 	sts	0x0503, r24
    1c8e:	90 93 04 05 	sts	0x0504, r25
	leftLightVolt = getLeftLight();
    1c92:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1c96:	60 93 99 06 	sts	0x0699, r22
    1c9a:	70 93 9a 06 	sts	0x069A, r23
    1c9e:	80 93 9b 06 	sts	0x069B, r24
    1ca2:	90 93 9c 06 	sts	0x069C, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1ca6:	08 95       	ret

00001ca8 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1ca8:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1cac:	60 93 69 04 	sts	0x0469, r22
    1cb0:	70 93 6a 04 	sts	0x046A, r23
    1cb4:	80 93 6b 04 	sts	0x046B, r24
    1cb8:	90 93 6c 04 	sts	0x046C, r25
	bkIR = getBackIR();
    1cbc:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1cc0:	60 93 73 04 	sts	0x0473, r22
    1cc4:	70 93 74 04 	sts	0x0474, r23
    1cc8:	80 93 75 04 	sts	0x0475, r24
    1ccc:	90 93 76 04 	sts	0x0476, r25
	ltIR = getLeftIR();
    1cd0:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1cd4:	60 93 0c 06 	sts	0x060C, r22
    1cd8:	70 93 0d 06 	sts	0x060D, r23
    1cdc:	80 93 0e 06 	sts	0x060E, r24
    1ce0:	90 93 0f 06 	sts	0x060F, r25
	rtIR = getRightIR();
    1ce4:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1ce8:	60 93 10 06 	sts	0x0610, r22
    1cec:	70 93 11 06 	sts	0x0611, r23
    1cf0:	80 93 12 06 	sts	0x0612, r24
    1cf4:	90 93 13 06 	sts	0x0613, r25
}
    1cf8:	08 95       	ret

00001cfa <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1cfa:	cf 92       	push	r12
    1cfc:	df 92       	push	r13
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	16 2f       	mov	r17, r22
    1d0c:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1d0e:	5f e1       	ldi	r21, 0x1F	; 31
    1d10:	f5 2e       	mov	r15, r21
    1d12:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1d14:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1d16:	0f 2d       	mov	r16, r15
    1d18:	06 95       	lsr	r16
    1d1a:	06 95       	lsr	r16
    1d1c:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1d1e:	c0 2f       	mov	r28, r16
    1d20:	d0 e0       	ldi	r29, 0x00	; 0
    1d22:	c1 2e       	mov	r12, r17
    1d24:	dd 24       	eor	r13, r13
    1d26:	ce 01       	movw	r24, r28
    1d28:	b6 01       	movw	r22, r12
    1d2a:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1d2e:	80 2f       	mov	r24, r16
    1d30:	61 2f       	mov	r22, r17
    1d32:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <LCD_set_next_PGC>
    1d36:	fe 01       	movw	r30, r28
    1d38:	45 e0       	ldi	r20, 0x05	; 5
    1d3a:	ee 0f       	add	r30, r30
    1d3c:	ff 1f       	adc	r31, r31
    1d3e:	4a 95       	dec	r20
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <LCD_set_pixel+0x40>
    1d42:	2f 2d       	mov	r18, r15
    1d44:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1d46:	ee 20       	and	r14, r14
    1d48:	89 f0       	breq	.+34     	; 0x1d6c <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1d4a:	ec 0d       	add	r30, r12
    1d4c:	fd 1d       	adc	r31, r13
    1d4e:	ec 57       	subi	r30, 0x7C	; 124
    1d50:	fa 4f       	sbci	r31, 0xFA	; 250
    1d52:	27 70       	andi	r18, 0x07	; 7
    1d54:	30 70       	andi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <LCD_set_pixel+0x66>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	2a 95       	dec	r18
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <LCD_set_pixel+0x62>
    1d64:	20 81       	ld	r18, Z
    1d66:	28 2b       	or	r18, r24
    1d68:	20 83       	st	Z, r18
    1d6a:	11 c0       	rjmp	.+34     	; 0x1d8e <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1d6c:	ec 0d       	add	r30, r12
    1d6e:	fd 1d       	adc	r31, r13
    1d70:	ec 57       	subi	r30, 0x7C	; 124
    1d72:	fa 4f       	sbci	r31, 0xFA	; 250
    1d74:	27 70       	andi	r18, 0x07	; 7
    1d76:	30 70       	andi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <LCD_set_pixel+0x88>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	2a 95       	dec	r18
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <LCD_set_pixel+0x84>
    1d86:	80 95       	com	r24
    1d88:	20 81       	ld	r18, Z
    1d8a:	82 23       	and	r24, r18
    1d8c:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1d8e:	35 e0       	ldi	r19, 0x05	; 5
    1d90:	cc 0f       	add	r28, r28
    1d92:	dd 1f       	adc	r29, r29
    1d94:	3a 95       	dec	r19
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <LCD_set_pixel+0x96>
    1d98:	cc 0d       	add	r28, r12
    1d9a:	dd 1d       	adc	r29, r13
    1d9c:	cc 57       	subi	r28, 0x7C	; 124
    1d9e:	da 4f       	sbci	r29, 0xFA	; 250
    1da0:	88 81       	ld	r24, Y
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
}
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	08 95       	ret

00001dba <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1dba:	7f 92       	push	r7
    1dbc:	8f 92       	push	r8
    1dbe:	9f 92       	push	r9
    1dc0:	af 92       	push	r10
    1dc2:	bf 92       	push	r11
    1dc4:	cf 92       	push	r12
    1dc6:	df 92       	push	r13
    1dc8:	ef 92       	push	r14
    1dca:	ff 92       	push	r15
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	98 2e       	mov	r9, r24
    1dd2:	b6 2e       	mov	r11, r22
    1dd4:	c4 2e       	mov	r12, r20
    1dd6:	a2 2e       	mov	r10, r18
    1dd8:	70 2e       	mov	r7, r16
    1dda:	8e 2c       	mov	r8, r14

	r = r*LCD_CELL_OFFSET;
    1ddc:	bb 0c       	add	r11, r11
    1dde:	bb 0c       	add	r11, r11
    1de0:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1de2:	dd 24       	eor	r13, r13
    1de4:	23 e0       	ldi	r18, 0x03	; 3
    1de6:	cc 0c       	add	r12, r12
    1de8:	dd 1c       	adc	r13, r13
    1dea:	2a 95       	dec	r18
    1dec:	e1 f7       	brne	.-8      	; 0x1de6 <printCell+0x2c>
    1dee:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1df0:	0f e1       	ldi	r16, 0x1F	; 31
    1df2:	0b 19       	sub	r16, r11
    1df4:	80 2f       	mov	r24, r16
    1df6:	6c 2d       	mov	r22, r12
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1dfe:	98 e1       	ldi	r25, 0x18	; 24
    1e00:	e9 2e       	mov	r14, r25
    1e02:	eb 18       	sub	r14, r11
    1e04:	8e 2d       	mov	r24, r14
    1e06:	6c 2d       	mov	r22, r12
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1e0e:	87 e0       	ldi	r24, 0x07	; 7
    1e10:	f8 2e       	mov	r15, r24
    1e12:	fc 0c       	add	r15, r12
    1e14:	80 2f       	mov	r24, r16
    1e16:	6f 2d       	mov	r22, r15
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1e1e:	8e 2d       	mov	r24, r14
    1e20:	6f 2d       	mov	r22, r15
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	
	if(cell&0b1000){
    1e28:	d9 2c       	mov	r13, r9
    1e2a:	93 fe       	sbrs	r9, 3
    1e2c:	24 c0       	rjmp	.+72     	; 0x1e76 <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1e2e:	61 2f       	mov	r22, r17
    1e30:	6f 5f       	subi	r22, 0xFF	; 255
    1e32:	80 2f       	mov	r24, r16
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1e3a:	61 2f       	mov	r22, r17
    1e3c:	6e 5f       	subi	r22, 0xFE	; 254
    1e3e:	80 2f       	mov	r24, r16
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1e46:	61 2f       	mov	r22, r17
    1e48:	6d 5f       	subi	r22, 0xFD	; 253
    1e4a:	80 2f       	mov	r24, r16
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1e52:	61 2f       	mov	r22, r17
    1e54:	6c 5f       	subi	r22, 0xFC	; 252
    1e56:	80 2f       	mov	r24, r16
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1e5e:	61 2f       	mov	r22, r17
    1e60:	6b 5f       	subi	r22, 0xFB	; 251
    1e62:	80 2f       	mov	r24, r16
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1e6a:	61 2f       	mov	r22, r17
    1e6c:	6a 5f       	subi	r22, 0xFA	; 250
    1e6e:	80 2f       	mov	r24, r16
    1e70:	41 e0       	ldi	r20, 0x01	; 1
    1e72:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	}
	if(cell&0b0100){
    1e76:	d2 fe       	sbrs	r13, 2
    1e78:	25 c0       	rjmp	.+74     	; 0x1ec4 <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1e7a:	8b 2d       	mov	r24, r11
    1e7c:	80 95       	com	r24
    1e7e:	81 5e       	subi	r24, 0xE1	; 225
    1e80:	6f 2d       	mov	r22, r15
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1e88:	8d e1       	ldi	r24, 0x1D	; 29
    1e8a:	8b 19       	sub	r24, r11
    1e8c:	6f 2d       	mov	r22, r15
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1e94:	8c e1       	ldi	r24, 0x1C	; 28
    1e96:	8b 19       	sub	r24, r11
    1e98:	6f 2d       	mov	r22, r15
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1ea0:	8b e1       	ldi	r24, 0x1B	; 27
    1ea2:	8b 19       	sub	r24, r11
    1ea4:	6f 2d       	mov	r22, r15
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1eac:	8a e1       	ldi	r24, 0x1A	; 26
    1eae:	8b 19       	sub	r24, r11
    1eb0:	6f 2d       	mov	r22, r15
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1eb8:	89 e1       	ldi	r24, 0x19	; 25
    1eba:	8b 19       	sub	r24, r11
    1ebc:	6f 2d       	mov	r22, r15
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	}
	if(cell&0b0010){
    1ec4:	d1 fe       	sbrs	r13, 1
    1ec6:	24 c0       	rjmp	.+72     	; 0x1f10 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1ec8:	61 2f       	mov	r22, r17
    1eca:	6f 5f       	subi	r22, 0xFF	; 255
    1ecc:	8e 2d       	mov	r24, r14
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1ed4:	61 2f       	mov	r22, r17
    1ed6:	6e 5f       	subi	r22, 0xFE	; 254
    1ed8:	8e 2d       	mov	r24, r14
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1ee0:	61 2f       	mov	r22, r17
    1ee2:	6d 5f       	subi	r22, 0xFD	; 253
    1ee4:	8e 2d       	mov	r24, r14
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1eec:	61 2f       	mov	r22, r17
    1eee:	6c 5f       	subi	r22, 0xFC	; 252
    1ef0:	8e 2d       	mov	r24, r14
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1ef8:	61 2f       	mov	r22, r17
    1efa:	6b 5f       	subi	r22, 0xFB	; 251
    1efc:	8e 2d       	mov	r24, r14
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1f04:	61 2f       	mov	r22, r17
    1f06:	6a 5f       	subi	r22, 0xFA	; 250
    1f08:	8e 2d       	mov	r24, r14
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	}
	if(cell&0b0001){
    1f10:	d0 fe       	sbrs	r13, 0
    1f12:	25 c0       	rjmp	.+74     	; 0x1f5e <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1f14:	8b 2d       	mov	r24, r11
    1f16:	80 95       	com	r24
    1f18:	81 5e       	subi	r24, 0xE1	; 225
    1f1a:	61 2f       	mov	r22, r17
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1f22:	8d e1       	ldi	r24, 0x1D	; 29
    1f24:	8b 19       	sub	r24, r11
    1f26:	61 2f       	mov	r22, r17
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1f2e:	8c e1       	ldi	r24, 0x1C	; 28
    1f30:	8b 19       	sub	r24, r11
    1f32:	61 2f       	mov	r22, r17
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1f3a:	8b e1       	ldi	r24, 0x1B	; 27
    1f3c:	8b 19       	sub	r24, r11
    1f3e:	61 2f       	mov	r22, r17
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1f46:	8a e1       	ldi	r24, 0x1A	; 26
    1f48:	8b 19       	sub	r24, r11
    1f4a:	61 2f       	mov	r22, r17
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1f52:	89 e1       	ldi	r24, 0x19	; 25
    1f54:	8b 19       	sub	r24, r11
    1f56:	61 2f       	mov	r22, r17
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	}	
	if(isrobot){
    1f5e:	aa 20       	and	r10, r10
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <printCell+0x1aa>
    1f62:	87 c0       	rjmp	.+270    	; 0x2072 <printCell+0x2b8>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1f64:	0c e1       	ldi	r16, 0x1C	; 28
    1f66:	f0 2e       	mov	r15, r16
    1f68:	fb 18       	sub	r15, r11
    1f6a:	b3 e0       	ldi	r27, 0x03	; 3
    1f6c:	cb 2e       	mov	r12, r27
    1f6e:	c1 0e       	add	r12, r17
    1f70:	8f 2d       	mov	r24, r15
    1f72:	6c 2d       	mov	r22, r12
    1f74:	4a 2d       	mov	r20, r10
    1f76:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1f7a:	ab e1       	ldi	r26, 0x1B	; 27
    1f7c:	ea 2e       	mov	r14, r26
    1f7e:	eb 18       	sub	r14, r11
    1f80:	8e 2d       	mov	r24, r14
    1f82:	6c 2d       	mov	r22, r12
    1f84:	4a 2d       	mov	r20, r10
    1f86:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1f8a:	f4 e0       	ldi	r31, 0x04	; 4
    1f8c:	df 2e       	mov	r13, r31
    1f8e:	d1 0e       	add	r13, r17
    1f90:	8f 2d       	mov	r24, r15
    1f92:	6d 2d       	mov	r22, r13
    1f94:	4a 2d       	mov	r20, r10
    1f96:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1f9a:	8e 2d       	mov	r24, r14
    1f9c:	6d 2d       	mov	r22, r13
    1f9e:	4a 2d       	mov	r20, r10
    1fa0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		
		switch(orent){
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	78 16       	cp	r7, r24
    1fa8:	c9 f0       	breq	.+50     	; 0x1fdc <printCell+0x222>
    1faa:	78 16       	cp	r7, r24
    1fac:	40 f0       	brcs	.+16     	; 0x1fbe <printCell+0x204>
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	78 16       	cp	r7, r24
    1fb2:	49 f1       	breq	.+82     	; 0x2006 <printCell+0x24c>
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	78 16       	cp	r7, r24
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <printCell+0x202>
    1fba:	94 c0       	rjmp	.+296    	; 0x20e4 <printCell+0x32a>
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <printCell+0x282>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1fbe:	8d e1       	ldi	r24, 0x1D	; 29
    1fc0:	8b 19       	sub	r24, r11
    1fc2:	6c 2d       	mov	r22, r12
    1fc4:	4a 2d       	mov	r20, r10
    1fc6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, !reset);
    1fca:	00 e0       	ldi	r16, 0x00	; 0
    1fcc:	88 20       	and	r8, r8
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <printCell+0x218>
    1fd0:	01 e0       	ldi	r16, 0x01	; 1
    1fd2:	1b 5f       	subi	r17, 0xFB	; 251
    1fd4:	8f 2d       	mov	r24, r15
    1fd6:	61 2f       	mov	r22, r17
    1fd8:	40 2f       	mov	r20, r16
    1fda:	0e c0       	rjmp	.+28     	; 0x1ff8 <printCell+0x23e>
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, !reset);
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, !reset);	
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, !reset);
    1fdc:	00 e0       	ldi	r16, 0x00	; 0
    1fde:	88 20       	and	r8, r8
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <printCell+0x22a>
    1fe2:	01 e0       	ldi	r16, 0x01	; 1
    1fe4:	8d e1       	ldi	r24, 0x1D	; 29
    1fe6:	8b 19       	sub	r24, r11
    1fe8:	6c 2d       	mov	r22, r12
    1fea:	40 2f       	mov	r20, r16
    1fec:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1ff0:	1b 5f       	subi	r17, 0xFB	; 251
    1ff2:	8f 2d       	mov	r24, r15
    1ff4:	61 2f       	mov	r22, r17
    1ff6:	4a 2d       	mov	r20, r10
    1ff8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, !reset);
    1ffc:	8a e1       	ldi	r24, 0x1A	; 26
    1ffe:	8b 19       	sub	r24, r11
    2000:	6d 2d       	mov	r22, r13
    2002:	40 2f       	mov	r20, r16
    2004:	14 c0       	rjmp	.+40     	; 0x202e <printCell+0x274>
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, !reset);	
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, !reset);
    2006:	00 e0       	ldi	r16, 0x00	; 0
    2008:	88 20       	and	r8, r8
    200a:	09 f4       	brne	.+2      	; 0x200e <printCell+0x254>
    200c:	01 e0       	ldi	r16, 0x01	; 1
    200e:	8d e1       	ldi	r24, 0x1D	; 29
    2010:	8b 19       	sub	r24, r11
    2012:	6c 2d       	mov	r22, r12
    2014:	40 2f       	mov	r20, r16
    2016:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, !reset);
    201a:	1b 5f       	subi	r17, 0xFB	; 251
    201c:	8f 2d       	mov	r24, r15
    201e:	61 2f       	mov	r22, r17
    2020:	40 2f       	mov	r20, r16
    2022:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    2026:	8a e1       	ldi	r24, 0x1A	; 26
    2028:	8b 19       	sub	r24, r11
    202a:	6d 2d       	mov	r22, r13
    202c:	4a 2d       	mov	r20, r10
    202e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, !reset);	
    2032:	13 50       	subi	r17, 0x03	; 3
    2034:	8e 2d       	mov	r24, r14
    2036:	61 2f       	mov	r22, r17
    2038:	40 2f       	mov	r20, r16
    203a:	52 c0       	rjmp	.+164    	; 0x20e0 <printCell+0x326>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, !reset);
    203c:	00 e0       	ldi	r16, 0x00	; 0
    203e:	88 20       	and	r8, r8
    2040:	09 f4       	brne	.+2      	; 0x2044 <printCell+0x28a>
    2042:	01 e0       	ldi	r16, 0x01	; 1
    2044:	8d e1       	ldi	r24, 0x1D	; 29
    2046:	8b 19       	sub	r24, r11
    2048:	6c 2d       	mov	r22, r12
    204a:	40 2f       	mov	r20, r16
    204c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, !reset);
    2050:	1b 5f       	subi	r17, 0xFB	; 251
    2052:	8f 2d       	mov	r24, r15
    2054:	61 2f       	mov	r22, r17
    2056:	40 2f       	mov	r20, r16
    2058:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, !reset);
    205c:	8a e1       	ldi	r24, 0x1A	; 26
    205e:	8b 19       	sub	r24, r11
    2060:	6d 2d       	mov	r22, r13
    2062:	40 2f       	mov	r20, r16
    2064:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    2068:	13 50       	subi	r17, 0x03	; 3
    206a:	8e 2d       	mov	r24, r14
    206c:	61 2f       	mov	r22, r17
    206e:	4a 2d       	mov	r20, r10
    2070:	37 c0       	rjmp	.+110    	; 0x20e0 <printCell+0x326>
				break;
			default:
				break;
		}
	}
	else if(reset){
    2072:	88 20       	and	r8, r8
    2074:	b9 f1       	breq	.+110    	; 0x20e4 <printCell+0x32a>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    2076:	ec e1       	ldi	r30, 0x1C	; 28
    2078:	ce 2e       	mov	r12, r30
    207a:	cb 18       	sub	r12, r11
    207c:	73 e0       	ldi	r23, 0x03	; 3
    207e:	e7 2e       	mov	r14, r23
    2080:	e1 0e       	add	r14, r17
    2082:	8c 2d       	mov	r24, r12
    2084:	6e 2d       	mov	r22, r14
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    208c:	0b e1       	ldi	r16, 0x1B	; 27
    208e:	0b 19       	sub	r16, r11
    2090:	80 2f       	mov	r24, r16
    2092:	6e 2d       	mov	r22, r14
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	f6 2e       	mov	r15, r22
    209e:	f1 0e       	add	r15, r17
    20a0:	8c 2d       	mov	r24, r12
    20a2:	6f 2d       	mov	r22, r15
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    20aa:	80 2f       	mov	r24, r16
    20ac:	6f 2d       	mov	r22, r15
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    20b4:	8d e1       	ldi	r24, 0x1D	; 29
    20b6:	8b 19       	sub	r24, r11
    20b8:	6e 2d       	mov	r22, r14
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    20c0:	1b 5f       	subi	r17, 0xFB	; 251
    20c2:	8c 2d       	mov	r24, r12
    20c4:	61 2f       	mov	r22, r17
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    20cc:	8a e1       	ldi	r24, 0x1A	; 26
    20ce:	8b 19       	sub	r24, r11
    20d0:	6f 2d       	mov	r22, r15
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    20d8:	13 50       	subi	r17, 0x03	; 3
    20da:	80 2f       	mov	r24, r16
    20dc:	61 2f       	mov	r22, r17
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		}
}
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	ff 90       	pop	r15
    20ea:	ef 90       	pop	r14
    20ec:	df 90       	pop	r13
    20ee:	cf 90       	pop	r12
    20f0:	bf 90       	pop	r11
    20f2:	af 90       	pop	r10
    20f4:	9f 90       	pop	r9
    20f6:	8f 90       	pop	r8
    20f8:	7f 90       	pop	r7
    20fa:	08 95       	ret

000020fc <printMap>:
* Input Variables:	unsigned char, unsigned char, char
* Output Return:	void
* Overview:		    Prints the map with the robot
********************************************************************/
void printMap(unsigned char curOrient, unsigned char curCell, char reset)
{
    20fc:	8f 92       	push	r8
    20fe:	9f 92       	push	r9
    2100:	af 92       	push	r10
    2102:	bf 92       	push	r11
    2104:	cf 92       	push	r12
    2106:	df 92       	push	r13
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	88 2e       	mov	r8, r24
    2116:	94 2e       	mov	r9, r20
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = curCell >> 2;
    2118:	a6 2e       	mov	r10, r22
    211a:	a6 94       	lsr	r10
    211c:	a6 94       	lsr	r10
	unsigned char curCol = curCell & 0b0011;
    211e:	43 e0       	ldi	r20, 0x03	; 3
    2120:	b4 2e       	mov	r11, r20
    2122:	b6 22       	and	r11, r22
    2124:	cc 24       	eor	r12, r12
    2126:	dd 24       	eor	r13, r13
    2128:	1d c0       	rjmp	.+58     	; 0x2164 <printMap+0x68>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    212a:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    212c:	fa 14       	cp	r15, r10
    212e:	19 f0       	breq	.+6      	; 0x2136 <printMap+0x3a>
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	06 c0       	rjmp	.+12     	; 0x2142 <printMap+0x46>
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	1b 15       	cp	r17, r11
    213c:	11 f4       	brne	.+4      	; 0x2142 <printMap+0x46>
    213e:	21 e0       	ldi	r18, 0x01	; 1
    2140:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, curOrient, reset);
    2142:	6f 2d       	mov	r22, r15
    2144:	41 2f       	mov	r20, r17
    2146:	08 2d       	mov	r16, r8
    2148:	e9 2c       	mov	r14, r9
    214a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <printCell>
	unsigned char curRow = curCell >> 2;
	unsigned char curCol = curCell & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    214e:	1f 5f       	subi	r17, 0xFF	; 255
    2150:	21 96       	adiw	r28, 0x01	; 1
    2152:	14 30       	cpi	r17, 0x04	; 4
    2154:	51 f7       	brne	.-44     	; 0x212a <printMap+0x2e>
    2156:	08 94       	sec
    2158:	c1 1c       	adc	r12, r1
    215a:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = curCell >> 2;
	unsigned char curCol = curCell & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    215c:	84 e0       	ldi	r24, 0x04	; 4
    215e:	c8 16       	cp	r12, r24
    2160:	d1 04       	cpc	r13, r1
    2162:	51 f0       	breq	.+20     	; 0x2178 <printMap+0x7c>
    2164:	fc 2c       	mov	r15, r12
    2166:	e6 01       	movw	r28, r12
    2168:	cc 0f       	add	r28, r28
    216a:	dd 1f       	adc	r29, r29
    216c:	cc 0f       	add	r28, r28
    216e:	dd 1f       	adc	r29, r29
    2170:	ca 51       	subi	r28, 0x1A	; 26
    2172:	dd 4f       	sbci	r29, 0xFD	; 253
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	d9 cf       	rjmp	.-78     	; 0x212a <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, curOrient, reset);
		}	
	}
}
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	1f 91       	pop	r17
    217e:	0f 91       	pop	r16
    2180:	ff 90       	pop	r15
    2182:	ef 90       	pop	r14
    2184:	df 90       	pop	r13
    2186:	cf 90       	pop	r12
    2188:	bf 90       	pop	r11
    218a:	af 90       	pop	r10
    218c:	9f 90       	pop	r9
    218e:	8f 90       	pop	r8
    2190:	08 95       	ret

00002192 <checkOdometry>:
*					sets the flag whe appropriate
********************************************************************/
char checkOdometry( char reset )
{	
	// Check for a reset
	if (reset){
    2192:	88 23       	and	r24, r24
    2194:	91 f0       	breq	.+36     	; 0x21ba <checkOdometry+0x28>
		odometryTrigger = 0;
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e0       	ldi	r26, 0x00	; 0
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	80 93 f1 04 	sts	0x04F1, r24
    21a2:	90 93 f2 04 	sts	0x04F2, r25
    21a6:	a0 93 f3 04 	sts	0x04F3, r26
    21aa:	b0 93 f4 04 	sts	0x04F4, r27
		STEPPER_set_steps(STEPPER_BOTH,odometryTrigger);
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <STEPPER_set_steps>
    21b8:	17 c0       	rjmp	.+46     	; 0x21e8 <checkOdometry+0x56>
		return SUCCESS;
	}

	// Get the current number of steps
	curr_step = STEPPER_get_nSteps();
    21ba:	0e 94 c3 1b 	call	0x3786	; 0x3786 <STEPPER_get_nSteps>
    21be:	60 93 04 06 	sts	0x0604, r22
    21c2:	70 93 05 06 	sts	0x0605, r23
    21c6:	80 93 06 06 	sts	0x0606, r24
    21ca:	90 93 07 06 	sts	0x0607, r25
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	80 91 06 06 	lds	r24, 0x0606
    21d4:	90 91 07 06 	lds	r25, 0x0607
    21d8:	20 91 04 06 	lds	r18, 0x0604
    21dc:	30 91 05 06 	lds	r19, 0x0605
    21e0:	82 0f       	add	r24, r18
    21e2:	93 1f       	adc	r25, r19
    21e4:	89 2b       	or	r24, r25
    21e6:	09 f4       	brne	.+2      	; 0x21ea <checkOdometry+0x58>
    21e8:	41 e0       	ldi	r20, 0x01	; 1
	}

	// But if not zero
	//then return fial
	return FAIL;
}
    21ea:	84 2f       	mov	r24, r20
    21ec:	08 95       	ret

000021ee <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{
    21ee:	5f 92       	push	r5
    21f0:	6f 92       	push	r6
    21f2:	7f 92       	push	r7
    21f4:	8f 92       	push	r8
    21f6:	9f 92       	push	r9
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
	// Check for collision
	if(ftIR <= IR_OBST_F_THRESH){
    220c:	e0 90 69 04 	lds	r14, 0x0469
    2210:	f0 90 6a 04 	lds	r15, 0x046A
    2214:	00 91 6b 04 	lds	r16, 0x046B
    2218:	10 91 6c 04 	lds	r17, 0x046C
    221c:	c8 01       	movw	r24, r16
    221e:	b7 01       	movw	r22, r14
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e2       	ldi	r20, 0x20	; 32
    2226:	51 e4       	ldi	r21, 0x41	; 65
    2228:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    222c:	18 16       	cp	r1, r24
    222e:	14 f0       	brlt	.+4      	; 0x2234 <moveWall+0x46>
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	1b c1       	rjmp	.+566    	; 0x246a <moveWall+0x27c>
		return SUCCESS;
	}

	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    2234:	55 24       	eor	r5, r5
    2236:	c8 01       	movw	r24, r16
    2238:	b7 01       	movw	r22, r14
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    2246:	88 23       	and	r24, r24
    2248:	14 f4       	brge	.+4      	; 0x224e <moveWall+0x60>
    224a:	55 24       	eor	r5, r5
    224c:	53 94       	inc	r5
    224e:	a0 90 10 06 	lds	r10, 0x0610
    2252:	b0 90 11 06 	lds	r11, 0x0611
    2256:	c0 90 12 06 	lds	r12, 0x0612
    225a:	d0 90 13 06 	lds	r13, 0x0613
    225e:	60 90 0c 06 	lds	r6, 0x060C
    2262:	70 90 0d 06 	lds	r7, 0x060D
    2266:	80 90 0e 06 	lds	r8, 0x060E
    226a:	90 90 0f 06 	lds	r9, 0x060F
	if(!isWall){
    226e:	55 20       	and	r5, r5
    2270:	41 f5       	brne	.+80     	; 0x22c2 <moveWall+0xd4>
    2272:	60 91 73 04 	lds	r22, 0x0473
    2276:	70 91 74 04 	lds	r23, 0x0474
    227a:	80 91 75 04 	lds	r24, 0x0475
    227e:	90 91 76 04 	lds	r25, 0x0476
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    228e:	87 fd       	sbrc	r24, 7
    2290:	18 c0       	rjmp	.+48     	; 0x22c2 <moveWall+0xd4>
    2292:	c6 01       	movw	r24, r12
    2294:	b5 01       	movw	r22, r10
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e5       	ldi	r20, 0x50	; 80
    229c:	51 e4       	ldi	r21, 0x41	; 65
    229e:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    22a2:	87 fd       	sbrc	r24, 7
    22a4:	0e c0       	rjmp	.+28     	; 0x22c2 <moveWall+0xd4>
    22a6:	c4 01       	movw	r24, r8
    22a8:	b3 01       	movw	r22, r6
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e5       	ldi	r20, 0x50	; 80
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    22b6:	87 fd       	sbrc	r24, 7
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <moveWall+0xd4>
	
		// Update the speeds the same to go forward
		STEPPER_set_speed(STEPPER_BOTH, MAX_SPEED_STEP);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	64 ef       	ldi	r22, 0xF4	; 244
    22be:	71 e0       	ldi	r23, 0x01	; 1
    22c0:	cf c0       	rjmp	.+414    	; 0x2460 <moveWall+0x272>
	BOOL isLEFT;
	float error;	
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    22c2:	c6 01       	movw	r24, r12
    22c4:	b5 01       	movw	r22, r10
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e5       	ldi	r20, 0x50	; 80
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__gesf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	64 f4       	brge	.+24     	; 0x22ee <moveWall+0x100>
		rtIR = IR_WALL_R_THRESH;
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 e5       	ldi	r26, 0x50	; 80
    22dc:	b1 e4       	ldi	r27, 0x41	; 65
    22de:	80 93 10 06 	sts	0x0610, r24
    22e2:	90 93 11 06 	sts	0x0611, r25
    22e6:	a0 93 12 06 	sts	0x0612, r26
    22ea:	b0 93 13 06 	sts	0x0613, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    22ee:	c4 01       	movw	r24, r8
    22f0:	b3 01       	movw	r22, r6
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e5       	ldi	r20, 0x50	; 80
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 fe 2d 	call	0x5bfc	; 0x5bfc <__gesf2>
    22fe:	18 16       	cp	r1, r24
    2300:	14 f0       	brlt	.+4      	; 0x2306 <moveWall+0x118>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	0d c0       	rjmp	.+26     	; 0x2320 <moveWall+0x132>
		ltIR = IR_WALL_L_THRESH;
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e5       	ldi	r26, 0x50	; 80
    230c:	b1 e4       	ldi	r27, 0x41	; 65
    230e:	80 93 0c 06 	sts	0x060C, r24
    2312:	90 93 0d 06 	sts	0x060D, r25
    2316:	a0 93 0e 06 	sts	0x060E, r26
    231a:	b0 93 0f 06 	sts	0x060F, r27
    231e:	81 e0       	ldi	r24, 0x01	; 1
		isLEFT = 1;
	}
	
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2320:	55 20       	and	r5, r5
    2322:	21 f1       	breq	.+72     	; 0x236c <moveWall+0x17e>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2324:	88 23       	and	r24, r24
    2326:	29 f0       	breq	.+10     	; 0x2332 <moveWall+0x144>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	8a e7       	ldi	r24, 0x7A	; 122
    232e:	94 e4       	ldi	r25, 0x44	; 68
    2330:	04 c0       	rjmp	.+8      	; 0x233a <moveWall+0x14c>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	8a e7       	ldi	r24, 0x7A	; 122
    2338:	94 ec       	ldi	r25, 0xC4	; 196
    233a:	a8 01       	movw	r20, r16
    233c:	97 01       	movw	r18, r14
    233e:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    2342:	20 91 0c 06 	lds	r18, 0x060C
    2346:	30 91 0d 06 	lds	r19, 0x060D
    234a:	40 91 0e 06 	lds	r20, 0x060E
    234e:	50 91 0f 06 	lds	r21, 0x060F
    2352:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    2356:	9b 01       	movw	r18, r22
    2358:	ac 01       	movw	r20, r24
    235a:	60 91 10 06 	lds	r22, 0x0610
    235e:	70 91 11 06 	lds	r23, 0x0611
    2362:	80 91 12 06 	lds	r24, 0x0612
    2366:	90 91 13 06 	lds	r25, 0x0613
    236a:	10 c0       	rjmp	.+32     	; 0x238c <moveWall+0x19e>
	// the error is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    236c:	60 91 10 06 	lds	r22, 0x0610
    2370:	70 91 11 06 	lds	r23, 0x0611
    2374:	80 91 12 06 	lds	r24, 0x0612
    2378:	90 91 13 06 	lds	r25, 0x0613
    237c:	20 91 0c 06 	lds	r18, 0x060C
    2380:	30 91 0d 06 	lds	r19, 0x060D
    2384:	40 91 0e 06 	lds	r20, 0x060E
    2388:	50 91 0f 06 	lds	r21, 0x060F
    238c:	0e 94 4a 2c 	call	0x5894	; 0x5894 <__subsf3>
    2390:	e6 2f       	mov	r30, r22
	}

	// Use the PID controller function to calculate error
	float effort = pidController(error, 0);
    2392:	2e 2f       	mov	r18, r30
    2394:	37 2f       	mov	r19, r23
    2396:	48 2f       	mov	r20, r24
    2398:	59 2f       	mov	r21, r25
    239a:	b9 01       	movw	r22, r18
    239c:	ca 01       	movw	r24, r20
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    23a4:	7b 01       	movw	r14, r22
    23a6:	8c 01       	movw	r16, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    23a8:	0e 94 1b 2d 	call	0x5a36	; 0x5a36 <__fixsfsi>
    23ac:	eb 01       	movw	r28, r22
    23ae:	77 ff       	sbrs	r23, 7
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <moveWall+0x1ca>
    23b2:	d0 95       	com	r29
    23b4:	c1 95       	neg	r28
    23b6:	df 4f       	sbci	r29, 0xFF	; 255
    23b8:	c5 36       	cpi	r28, 0x65	; 101
    23ba:	d1 05       	cpc	r29, r1
    23bc:	fc f0       	brlt	.+62     	; 0x23fc <moveWall+0x20e>
    23be:	c8 01       	movw	r24, r16
    23c0:	b7 01       	movw	r22, r14
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	0e 94 af 2c 	call	0x595e	; 0x595e <__cmpsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	a9 f0       	breq	.+42     	; 0x23fc <moveWall+0x20e>
		effort = MAX_EFFORT*(effort/abs(effort));
    23d2:	be 01       	movw	r22, r28
    23d4:	88 27       	eor	r24, r24
    23d6:	77 fd       	sbrc	r23, 7
    23d8:	80 95       	com	r24
    23da:	98 2f       	mov	r25, r24
    23dc:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <__floatsisf>
    23e0:	9b 01       	movw	r18, r22
    23e2:	ac 01       	movw	r20, r24
    23e4:	c8 01       	movw	r24, r16
    23e6:	b7 01       	movw	r22, r14
    23e8:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	48 ec       	ldi	r20, 0xC8	; 200
    23f2:	52 e4       	ldi	r21, 0x42	; 66
    23f4:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    23f8:	7b 01       	movw	r14, r22
    23fa:	8c 01       	movw	r16, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED_STEP/2 + (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
    23fc:	c8 01       	movw	r24, r16
    23fe:	b7 01       	movw	r22, r14
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	48 ec       	ldi	r20, 0xC8	; 200
    2406:	52 e4       	ldi	r21, 0x42	; 66
    2408:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    240c:	7b 01       	movw	r14, r22
    240e:	8c 01       	movw	r16, r24
	float stepper_speed_R = MAX_SPEED_STEP/2 - (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
	
	// Update the speeds the same to move with wall
	STEPPER_set_speed(STEPPER_LEFT, stepper_speed_L);
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a e7       	ldi	r20, 0x7A	; 122
    2416:	53 e4       	ldi	r21, 0x43	; 67
    2418:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a e7       	ldi	r20, 0x7A	; 122
    2422:	53 e4       	ldi	r21, 0x43	; 67
    2424:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    2428:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    242c:	9b 01       	movw	r18, r22
    242e:	ac 01       	movw	r20, r24
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	b9 01       	movw	r22, r18
    2434:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <STEPPER_set_speed>
	STEPPER_set_speed(STEPPER_RIGHT, stepper_speed_R);
    2438:	c8 01       	movw	r24, r16
    243a:	b7 01       	movw	r22, r14
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a e7       	ldi	r20, 0x7A	; 122
    2442:	53 ec       	ldi	r21, 0xC3	; 195
    2444:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	53 e4       	ldi	r21, 0x43	; 67
    2450:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__addsf3>
    2454:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__fixunssfsi>
    2458:	9b 01       	movw	r18, r22
    245a:	ac 01       	movw	r20, r24
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	b9 01       	movw	r22, r18
    2460:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <STEPPER_set_speed>
	
	// Return weather or not we are finished
	return checkOdometry(NO_RESET);
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	0e 94 c9 10 	call	0x2192	; 0x2192 <checkOdometry>
}
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	0f 91       	pop	r16
    2472:	ff 90       	pop	r15
    2474:	ef 90       	pop	r14
    2476:	df 90       	pop	r13
    2478:	cf 90       	pop	r12
    247a:	bf 90       	pop	r11
    247c:	af 90       	pop	r10
    247e:	9f 90       	pop	r9
    2480:	8f 90       	pop	r8
    2482:	7f 90       	pop	r7
    2484:	6f 90       	pop	r6
    2486:	5f 90       	pop	r5
    2488:	08 95       	ret

0000248a <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    248a:	0e 94 36 20 	call	0x406c	; 0x406c <ATTINY_open>
    248e:	90 93 ee 03 	sts	0x03EE, r25
    2492:	80 93 ed 03 	sts	0x03ED, r24
	LEopstat = LED_open(); //open the LED module
    2496:	0e 94 99 1a 	call	0x3532	; 0x3532 <LED_open>
    249a:	90 93 ec 03 	sts	0x03EC, r25
    249e:	80 93 eb 03 	sts	0x03EB, r24
	LCopstat = LCD_open(); //open the LCD module
    24a2:	0e 94 b0 19 	call	0x3360	; 0x3360 <LCD_open>
    24a6:	90 93 ea 03 	sts	0x03EA, r25
    24aa:	80 93 e9 03 	sts	0x03E9, r24
	STEPPER_open(); // Open STEPPER module for use
    24ae:	0e 94 32 1d 	call	0x3a64	; 0x3a64 <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in tone mode
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	0e 94 b6 1b 	call	0x376c	; 0x376c <SPKR_open>
	
	LED_open();
    24b8:	0e 94 99 1a 	call	0x3532	; 0x3532 <LED_open>
	I2C_open();
    24bc:	0e 94 90 21 	call	0x4320	; 0x4320 <I2C_open>
	ADC_open();//open the ADC module
    24c0:	0e 94 1d 19 	call	0x323a	; 0x323a <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	0e 94 7f 19 	call	0x32fe	; 0x32fe <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    24ca:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
	prefilter(1);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    24d4:	8f ee       	ldi	r24, 0xEF	; 239
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a5 e8       	ldi	r26, 0x85	; 133
    24da:	b1 e4       	ldi	r27, 0x41	; 65
    24dc:	80 93 f1 04 	sts	0x04F1, r24
    24e0:	90 93 f2 04 	sts	0x04F2, r25
    24e4:	a0 93 f3 04 	sts	0x04F3, r26
    24e8:	b0 93 f4 04 	sts	0x04F4, r27
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	0a c0       	rjmp	.+20     	; 0x2506 <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    24f2:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	80 32       	cpi	r24, 0x20	; 32
    24f8:	91 05       	cpc	r25, r1
    24fa:	d9 f7       	brne	.-10     	; 0x24f2 <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    24fc:	2f 5f       	subi	r18, 0xFF	; 255
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	24 30       	cpi	r18, 0x04	; 4
    2502:	31 05       	cpc	r19, r1
    2504:	59 f0       	breq	.+22     	; 0x251c <initializeRobot+0x92>
    2506:	f9 01       	movw	r30, r18
    2508:	55 e0       	ldi	r21, 0x05	; 5
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	5a 95       	dec	r21
    2510:	e1 f7       	brne	.-8      	; 0x250a <initializeRobot+0x80>
    2512:	ec 57       	subi	r30, 0x7C	; 124
    2514:	fa 4f       	sbci	r31, 0xFA	; 250
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	eb cf       	rjmp	.-42     	; 0x24f2 <initializeRobot+0x68>
    251c:	08 95       	ret

0000251e <localize>:
* Output Return:	none
* Overview:			localize the robot
********************************************************************/
void localize (void)
{	
}
    251e:	08 95       	ret

00002520 <fourNeighborSearch>:
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    2520:	48 2f       	mov	r20, r24
    2522:	46 95       	lsr	r20
    2524:	46 95       	lsr	r20
	unsigned char curCol = (curCell&0b0011);
    2526:	58 2f       	mov	r21, r24
    2528:	53 70       	andi	r21, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 1){
    252a:	a4 2f       	mov	r26, r20
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	25 2f       	mov	r18, r21
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	fd 01       	movw	r30, r26
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	ee 0f       	add	r30, r30
    253a:	ff 1f       	adc	r31, r31
    253c:	e2 0f       	add	r30, r18
    253e:	f3 1f       	adc	r31, r19
    2540:	ee 59       	subi	r30, 0x9E	; 158
    2542:	fc 4f       	sbci	r31, 0xFC	; 252
    2544:	80 81       	ld	r24, Z
    2546:	81 30       	cpi	r24, 0x01	; 1
    2548:	09 f4       	brne	.+2      	; 0x254c <fourNeighborSearch+0x2c>
    254a:	53 c0       	rjmp	.+166    	; 0x25f2 <fourNeighborSearch+0xd2>
	
	// Perform a 4-neighbor search and store the lowest value
	
	// LCD_clear();
	//Check the north cell
	curRow--;
    254c:	e4 2f       	mov	r30, r20
    254e:	e1 50       	subi	r30, 0x01	; 1
	if((curRow)<WORLD_ROW_SIZE){
    2550:	e4 30       	cpi	r30, 0x04	; 4
    2552:	80 f4       	brcc	.+32     	; 0x2574 <fourNeighborSearch+0x54>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	ee 0f       	add	r30, r30
    2558:	ff 1f       	adc	r31, r31
    255a:	ee 0f       	add	r30, r30
    255c:	ff 1f       	adc	r31, r31
    255e:	e2 0f       	add	r30, r18
    2560:	f3 1f       	adc	r31, r19
    2562:	ee 59       	subi	r30, 0x9E	; 158
    2564:	fc 4f       	sbci	r31, 0xFC	; 252
    2566:	e0 81       	ld	r30, Z
		// LCD_printf("NORTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2568:	e4 36       	cpi	r30, 0x64	; 100
    256a:	20 f4       	brcc	.+8      	; 0x2574 <fourNeighborSearch+0x54>
			minVal = curVal;
			nextOrientation = NORTH;
    256c:	10 92 07 05 	sts	0x0507, r1
    2570:	9e 2f       	mov	r25, r30
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <fourNeighborSearch+0x56>
    2574:	94 e6       	ldi	r25, 0x64	; 100
		}
	}
	
	curRow++;
	curRow++;
    2576:	84 2f       	mov	r24, r20
    2578:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the south cell
	if((curRow)<WORLD_ROW_SIZE){
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	88 f4       	brcc	.+34     	; 0x25a0 <fourNeighborSearch+0x80>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    257e:	e8 2f       	mov	r30, r24
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	ee 0f       	add	r30, r30
    2584:	ff 1f       	adc	r31, r31
    2586:	ee 0f       	add	r30, r30
    2588:	ff 1f       	adc	r31, r31
    258a:	e2 0f       	add	r30, r18
    258c:	f3 1f       	adc	r31, r19
    258e:	ee 59       	subi	r30, 0x9E	; 158
    2590:	fc 4f       	sbci	r31, 0xFC	; 252
    2592:	e0 81       	ld	r30, Z
		// LCD_printf("SOUTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2594:	e9 17       	cp	r30, r25
    2596:	20 f4       	brcc	.+8      	; 0x25a0 <fourNeighborSearch+0x80>
			minVal = curVal;
			nextOrientation = SOUTH;
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	80 93 07 05 	sts	0x0507, r24
    259e:	9e 2f       	mov	r25, r30
		}
	}
	
	curRow--;
	curCol++;
    25a0:	85 2f       	mov	r24, r21
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the east cell
	if((curCol)<WORLD_COLUMN_SIZE){
    25a4:	84 30       	cpi	r24, 0x04	; 4
    25a6:	81 f0       	breq	.+32     	; 0x25c8 <fourNeighborSearch+0xa8>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
    25a8:	fd 01       	movw	r30, r26
    25aa:	ee 0f       	add	r30, r30
    25ac:	ff 1f       	adc	r31, r31
    25ae:	ee 0f       	add	r30, r30
    25b0:	ff 1f       	adc	r31, r31
    25b2:	e8 0f       	add	r30, r24
    25b4:	f1 1d       	adc	r31, r1
    25b6:	ee 59       	subi	r30, 0x9E	; 158
    25b8:	fc 4f       	sbci	r31, 0xFC	; 252
    25ba:	e0 81       	ld	r30, Z
		// LCD_printf("EAST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    25bc:	e9 17       	cp	r30, r25
    25be:	20 f4       	brcc	.+8      	; 0x25c8 <fourNeighborSearch+0xa8>
			minVal = curVal;
			nextOrientation = EAST;
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	80 93 07 05 	sts	0x0507, r24
    25c6:	9e 2f       	mov	r25, r30
		}
	}
	
	curCol--;
	curCol--;
    25c8:	85 2f       	mov	r24, r21
    25ca:	81 50       	subi	r24, 0x01	; 1
	// Check the west cell
	if((curCol)<WORLD_COLUMN_SIZE){
    25cc:	84 30       	cpi	r24, 0x04	; 4
    25ce:	80 f4       	brcc	.+32     	; 0x25f0 <fourNeighborSearch+0xd0>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
		// LCD_printf("WEST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    25d0:	aa 0f       	add	r26, r26
    25d2:	bb 1f       	adc	r27, r27
    25d4:	aa 0f       	add	r26, r26
    25d6:	bb 1f       	adc	r27, r27
    25d8:	a8 0f       	add	r26, r24
    25da:	b1 1d       	adc	r27, r1
    25dc:	ae 59       	subi	r26, 0x9E	; 158
    25de:	bc 4f       	sbci	r27, 0xFC	; 252
    25e0:	8c 91       	ld	r24, X
    25e2:	89 17       	cp	r24, r25
    25e4:	28 f4       	brcc	.+10     	; 0x25f0 <fourNeighborSearch+0xd0>
			minVal = curVal;
			nextOrientation = WEST;
    25e6:	83 e0       	ldi	r24, 0x03	; 3
    25e8:	80 93 07 05 	sts	0x0507, r24
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	08 95       	ret
    25f0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    25f2:	08 95       	ret

000025f4 <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
char wavefrontMake(unsigned char curRow, unsigned char curCol, unsigned char curVal)
{
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	f8 2e       	mov	r15, r24
    25fc:	16 2f       	mov	r17, r22
	if(((curRow)<WORLD_ROW_SIZE)&&((curCol)<WORLD_COLUMN_SIZE)){
    25fe:	83 e0       	ldi	r24, 0x03	; 3
    2600:	8f 15       	cp	r24, r15
    2602:	d0 f1       	brcs	.+116    	; 0x2678 <wavefrontMake+0x84>
    2604:	64 30       	cpi	r22, 0x04	; 4
    2606:	c0 f5       	brcc	.+112    	; 0x2678 <wavefrontMake+0x84>
		if(ROBOT_WORLD[curRow][curCol] == 0b1111){
    2608:	8f 2d       	mov	r24, r15
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	88 0f       	add	r24, r24
    2612:	99 1f       	adc	r25, r25
    2614:	86 0f       	add	r24, r22
    2616:	91 1d       	adc	r25, r1
    2618:	fc 01       	movw	r30, r24
    261a:	ea 51       	subi	r30, 0x1A	; 26
    261c:	fd 4f       	sbci	r31, 0xFD	; 253
    261e:	20 81       	ld	r18, Z
    2620:	fc 01       	movw	r30, r24
    2622:	ee 59       	subi	r30, 0x9E	; 158
    2624:	fc 4f       	sbci	r31, 0xFC	; 252
    2626:	2f 30       	cpi	r18, 0x0F	; 15
    2628:	19 f4       	brne	.+6      	; 0x2630 <wavefrontMake+0x3c>
			ROBOT_METRIC_WORLD[(curRow)][curCol] = 99;
    262a:	83 e6       	ldi	r24, 0x63	; 99
    262c:	80 83       	st	Z, r24
    262e:	24 c0       	rjmp	.+72     	; 0x2678 <wavefrontMake+0x84>
			return 0;
		}
		
		ROBOT_METRIC_WORLD[curRow][curCol] = (curVal++);
    2630:	40 83       	st	Z, r20
    2632:	04 2f       	mov	r16, r20
    2634:	0f 5f       	subi	r16, 0xFF	; 255

		curRow--;
    2636:	8f 2d       	mov	r24, r15
    2638:	81 50       	subi	r24, 0x01	; 1
		// Check the north cell
		if((curRow)<WORLD_ROW_SIZE){
    263a:	84 30       	cpi	r24, 0x04	; 4
    263c:	18 f4       	brcc	.+6      	; 0x2644 <wavefrontMake+0x50>
			wavefrontMake(curRow,curCol,curVal);
    263e:	40 2f       	mov	r20, r16
    2640:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <wavefrontMake>
		}
		
		curRow++;
		curRow++;
    2644:	8f 2d       	mov	r24, r15
    2646:	8f 5f       	subi	r24, 0xFF	; 255
		// Check the south cell
		if((curRow)<WORLD_ROW_SIZE){
    2648:	84 30       	cpi	r24, 0x04	; 4
    264a:	21 f0       	breq	.+8      	; 0x2654 <wavefrontMake+0x60>
			wavefrontMake(curRow,curCol,curVal);
    264c:	61 2f       	mov	r22, r17
    264e:	40 2f       	mov	r20, r16
    2650:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <wavefrontMake>
		}
		
		curRow--;
		curCol++;
    2654:	61 2f       	mov	r22, r17
    2656:	6f 5f       	subi	r22, 0xFF	; 255
		// Check the east cell
		if((curCol)<WORLD_COLUMN_SIZE){
    2658:	64 30       	cpi	r22, 0x04	; 4
    265a:	21 f0       	breq	.+8      	; 0x2664 <wavefrontMake+0x70>
			wavefrontMake(curRow,curCol,curVal);
    265c:	8f 2d       	mov	r24, r15
    265e:	40 2f       	mov	r20, r16
    2660:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <wavefrontMake>
		}
		
		curCol--;
		curCol--;
    2664:	61 2f       	mov	r22, r17
    2666:	61 50       	subi	r22, 0x01	; 1
		// Check the west cell
		if((curCol)<WORLD_COLUMN_SIZE){
    2668:	64 30       	cpi	r22, 0x04	; 4
    266a:	20 f4       	brcc	.+8      	; 0x2674 <wavefrontMake+0x80>
			wavefrontMake(curRow,curCol,curVal);
    266c:	8f 2d       	mov	r24, r15
    266e:	40 2f       	mov	r20, r16
    2670:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <wavefrontMake>
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	01 c0       	rjmp	.+2      	; 0x267a <wavefrontMake+0x86>
    2678:	80 e0       	ldi	r24, 0x00	; 0
				// // overwrite the cells in the metric map to the actual distance values
				// ROBOT_METRIC_WORLD[row][col] = distance;
			// }
		// }
	// }
}
    267a:	1f 91       	pop	r17
    267c:	0f 91       	pop	r16
    267e:	ff 90       	pop	r15
    2680:	08 95       	ret

00002682 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    2682:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    2684:	10 91 08 06 	lds	r17, 0x0608
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,TO_MAP_ROTATE);
    2688:	80 91 71 04 	lds	r24, 0x0471
    268c:	60 91 06 05 	lds	r22, 0x0506
    2690:	40 e0       	ldi	r20, 0x00	; 0
    2692:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    2696:	e1 2f       	mov	r30, r17
    2698:	e6 95       	lsr	r30
    269a:	e6 95       	lsr	r30
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	ee 0f       	add	r30, r30
    26a0:	ff 1f       	adc	r31, r31
    26a2:	ee 0f       	add	r30, r30
    26a4:	ff 1f       	adc	r31, r31
    26a6:	13 70       	andi	r17, 0x03	; 3
    26a8:	e1 0f       	add	r30, r17
    26aa:	f1 1d       	adc	r31, r1
    26ac:	ea 51       	subi	r30, 0x1A	; 26
    26ae:	fd 4f       	sbci	r31, 0xFD	; 253
    26b0:	80 83       	st	Z, r24
}
    26b2:	1f 91       	pop	r17
    26b4:	08 95       	ret

000026b6 <checkFire>:
* Input Variables:	none
* Output Return:	unsigned char
* Overview:			Checks world for Fires
********************************************************************/
unsigned char checkFire(void)
{
    26b6:	ef 92       	push	r14
    26b8:	ff 92       	push	r15
    26ba:	0f 93       	push	r16
    26bc:	1f 93       	push	r17
	// Acquire the current gateway
	unsigned char curGate = currentGateway;
	
	// Acquire the current cell
	unsigned char curRow = (currentCellWorld>>2);
    26be:	00 91 08 06 	lds	r16, 0x0608
    26c2:	10 2f       	mov	r17, r16
    26c4:	16 95       	lsr	r17
    26c6:	16 95       	lsr	r17
	unsigned char curCol = (currentCellWorld&0b0011);
    26c8:	83 e0       	ldi	r24, 0x03	; 3
    26ca:	e8 2e       	mov	r14, r24
    26cc:	e0 22       	and	r14, r16
	unsigned char curCell = ROBOT_WORLD[curRow][curCol];
    26ce:	e1 2f       	mov	r30, r17
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	ee 0f       	add	r30, r30
    26d4:	ff 1f       	adc	r31, r31
    26d6:	ee 0f       	add	r30, r30
    26d8:	ff 1f       	adc	r31, r31
    26da:	ee 0d       	add	r30, r14
    26dc:	f1 1d       	adc	r31, r1
    26de:	ea 51       	subi	r30, 0x1A	; 26
    26e0:	fd 4f       	sbci	r31, 0xFD	; 253
    26e2:	f0 80       	ld	r15, Z
	
	// Rotate the current gateway wrt to current orientation
	curGate = rotateCell (curGate, currentOrientation, TO_MAP_ROTATE);
    26e4:	80 91 71 04 	lds	r24, 0x0471
    26e8:	60 91 06 05 	lds	r22, 0x0506
    26ec:	40 e0       	ldi	r20, 0x00	; 0
    26ee:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Return the boolean value of the equality
	if (curGate != curCell){
    26f2:	8f 15       	cp	r24, r15
    26f4:	e9 f0       	breq	.+58     	; 0x2730 <checkFire+0x7a>
		switch(curGate^curCell){
    26f6:	8f 25       	eor	r24, r15
    26f8:	82 30       	cpi	r24, 0x02	; 2
    26fa:	61 f0       	breq	.+24     	; 0x2714 <checkFire+0x5e>
    26fc:	83 30       	cpi	r24, 0x03	; 3
    26fe:	18 f4       	brcc	.+6      	; 0x2706 <checkFire+0x50>
    2700:	81 30       	cpi	r24, 0x01	; 1
    2702:	b1 f4       	brne	.+44     	; 0x2730 <checkFire+0x7a>
    2704:	05 c0       	rjmp	.+10     	; 0x2710 <checkFire+0x5a>
    2706:	84 30       	cpi	r24, 0x04	; 4
    2708:	69 f0       	breq	.+26     	; 0x2724 <checkFire+0x6e>
    270a:	88 30       	cpi	r24, 0x08	; 8
    270c:	89 f4       	brne	.+34     	; 0x2730 <checkFire+0x7a>
    270e:	0e c0       	rjmp	.+28     	; 0x272c <checkFire+0x76>
			case 0b0001:
				currentFireCell = (curRow<<2)+(curCol-1);
    2710:	01 50       	subi	r16, 0x01	; 1
    2712:	09 c0       	rjmp	.+18     	; 0x2726 <checkFire+0x70>
				break;
			case 0b0010:
				currentFireCell = ((curRow+1)<<2)+(curCol);
    2714:	1f 5f       	subi	r17, 0xFF	; 255
    2716:	11 0f       	add	r17, r17
    2718:	11 0f       	add	r17, r17
    271a:	1e 0d       	add	r17, r14
    271c:	10 93 98 06 	sts	0x0698, r17
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	07 c0       	rjmp	.+14     	; 0x2732 <checkFire+0x7c>
				return SUCCESS;
				break;
			case 0b0100:
				currentFireCell = (curRow<<2)+(curCol+1);
    2724:	0f 5f       	subi	r16, 0xFF	; 255
    2726:	00 93 98 06 	sts	0x0698, r16
    272a:	fa cf       	rjmp	.-12     	; 0x2720 <checkFire+0x6a>
				return SUCCESS;
				break;
			case 0b1000:
				currentFireCell = ((curRow-1)<<2)+(curCol);
    272c:	11 50       	subi	r17, 0x01	; 1
    272e:	f3 cf       	rjmp	.-26     	; 0x2716 <checkFire+0x60>
				return SUCCESS;
    2730:	80 e0       	ldi	r24, 0x00	; 0
		}
		return SUCCESS;
	}
	return FAIL;
	// return 0;
}
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	08 95       	ret

0000273c <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    273c:	ff 92       	push	r15
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    2744:	08 2f       	mov	r16, r24
    2746:	06 95       	lsr	r16
    2748:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;			
    274a:	93 e0       	ldi	r25, 0x03	; 3
    274c:	f9 2e       	mov	r15, r25
    274e:	f8 22       	and	r15, r24
		
	switch(curMove){
    2750:	62 30       	cpi	r22, 0x02	; 2
    2752:	31 f0       	breq	.+12     	; 0x2760 <shiftMap+0x24>
    2754:	63 30       	cpi	r22, 0x03	; 3
    2756:	a9 f0       	breq	.+42     	; 0x2782 <shiftMap+0x46>
    2758:	61 30       	cpi	r22, 0x01	; 1
    275a:	b1 f4       	brne	.+44     	; 0x2788 <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    275c:	11 50       	subi	r17, 0x01	; 1
    275e:	12 c0       	rjmp	.+36     	; 0x2784 <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2760:	41 30       	cpi	r20, 0x01	; 1
    2762:	49 f0       	breq	.+18     	; 0x2776 <shiftMap+0x3a>
    2764:	41 30       	cpi	r20, 0x01	; 1
    2766:	28 f0       	brcs	.+10     	; 0x2772 <shiftMap+0x36>
    2768:	42 30       	cpi	r20, 0x02	; 2
    276a:	39 f0       	breq	.+14     	; 0x277a <shiftMap+0x3e>
    276c:	43 30       	cpi	r20, 0x03	; 3
    276e:	b9 f4       	brne	.+46     	; 0x279e <shiftMap+0x62>
    2770:	06 c0       	rjmp	.+12     	; 0x277e <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    2772:	01 50       	subi	r16, 0x01	; 1
    2774:	14 c0       	rjmp	.+40     	; 0x279e <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    2776:	f3 94       	inc	r15
    2778:	12 c0       	rjmp	.+36     	; 0x279e <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    277a:	0f 5f       	subi	r16, 0xFF	; 255
    277c:	10 c0       	rjmp	.+32     	; 0x279e <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    277e:	fa 94       	dec	r15
    2780:	0e c0       	rjmp	.+28     	; 0x279e <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2782:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    2784:	13 70       	andi	r17, 0x03	; 3
    2786:	0b c0       	rjmp	.+22     	; 0x279e <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    2788:	00 d0       	rcall	.+0      	; 0x278a <shiftMap+0x4e>
    278a:	84 e4       	ldi	r24, 0x44	; 68
    278c:	91 e0       	ldi	r25, 0x01	; 1
    278e:	ed b7       	in	r30, 0x3d	; 61
    2790:	fe b7       	in	r31, 0x3e	; 62
    2792:	92 83       	std	Z+2, r25	; 0x02
    2794:	81 83       	std	Z+1, r24	; 0x01
    2796:	0e 94 03 36 	call	0x6c06	; 0x6c06 <printf>
    279a:	0f 90       	pop	r0
    279c:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    279e:	10 93 06 05 	sts	0x0506, r17
    27a2:	00 0f       	add	r16, r16
    27a4:	00 0f       	add	r16, r16
	return currentCell;
}
    27a6:	80 2f       	mov	r24, r16
    27a8:	8f 0d       	add	r24, r15
    27aa:	1f 91       	pop	r17
    27ac:	0f 91       	pop	r16
    27ae:	ff 90       	pop	r15
    27b0:	08 95       	ret

000027b2 <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char row, unsigned char col)
{	
    27b2:	df 92       	push	r13
    27b4:	ef 92       	push	r14
    27b6:	ff 92       	push	r15
    27b8:	0f 93       	push	r16
    27ba:	1f 93       	push	r17
    27bc:	18 2f       	mov	r17, r24
    27be:	06 2f       	mov	r16, r22
    27c0:	ff 24       	eor	r15, r15
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	2b c0       	rjmp	.+86     	; 0x281c <matchBranch+0x6a>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    27c6:	15 30       	cpi	r17, 0x05	; 5
    27c8:	88 f5       	brcc	.+98     	; 0x282c <matchBranch+0x7a>
    27ca:	05 30       	cpi	r16, 0x05	; 5
    27cc:	78 f5       	brcc	.+94     	; 0x282c <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    27ce:	ef 2d       	mov	r30, r15
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	ee 5a       	subi	r30, 0xAE	; 174
    27d4:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    27d6:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    27d8:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    27da:	80 81       	ld	r24, Z
    27dc:	6e 2d       	mov	r22, r14
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    27e4:	e1 2f       	mov	r30, r17
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	ee 0f       	add	r30, r30
    27ea:	ff 1f       	adc	r31, r31
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	e0 0f       	add	r30, r16
    27f2:	f1 1d       	adc	r31, r1
    27f4:	ea 51       	subi	r30, 0x1A	; 26
    27f6:	fd 4f       	sbci	r31, 0xFD	; 253
    27f8:	90 81       	ld	r25, Z
    27fa:	89 17       	cp	r24, r25
    27fc:	b9 f4       	brne	.+46     	; 0x282c <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		curCell = (curRow << 2) + curCol;
    27fe:	11 0f       	add	r17, r17
    2800:	11 0f       	add	r17, r17
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		curCell = shiftMap(curCell, curMove, curOrnt);
    2802:	81 2f       	mov	r24, r17
    2804:	80 0f       	add	r24, r16
    2806:	6d 2d       	mov	r22, r13
    2808:	4e 2d       	mov	r20, r14
    280a:	0e 94 9e 13 	call	0x273c	; 0x273c <shiftMap>
    280e:	98 2f       	mov	r25, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = curCell >> 2;
    2810:	18 2f       	mov	r17, r24
    2812:	16 95       	lsr	r17
    2814:	16 95       	lsr	r17
		curCol = curCell & 0b0011;
    2816:	08 2f       	mov	r16, r24
    2818:	03 70       	andi	r16, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    281a:	f3 94       	inc	r15
    281c:	80 91 61 03 	lds	r24, 0x0361
    2820:	f8 16       	cp	r15, r24
    2822:	88 f2       	brcs	.-94     	; 0x27c6 <matchBranch+0x14>
		curRow = curCell >> 2;
		curCol = curCell & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	currentCellWorld = curCell;
    2824:	90 93 08 06 	sts	0x0608, r25
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	01 c0       	rjmp	.+2      	; 0x282e <matchBranch+0x7c>
	return SUCCESS;
    282c:	80 e0       	ldi	r24, 0x00	; 0
}
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	ff 90       	pop	r15
    2834:	ef 90       	pop	r14
    2836:	df 90       	pop	r13
    2838:	08 95       	ret

0000283a <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    283a:	cf 92       	push	r12
    283c:	df 92       	push	r13
    283e:	ef 92       	push	r14
    2840:	ff 92       	push	r15
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	0f 92       	push	r0
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
	unsigned char i = 0;
	
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    2850:	e0 90 52 03 	lds	r14, 0x0352
	
	// Local variables for nested for loops 
	unsigned char row, col;
	
	// Stores the number of matching seeds
	matchSeeds = 0;
    2854:	10 92 a0 06 	sts	0x06A0, r1
    2858:	00 e0       	ldi	r16, 0x00	; 0
    285a:	10 e0       	ldi	r17, 0x00	; 0
    285c:	1c c0       	rjmp	.+56     	; 0x2896 <localizeGateway+0x5c>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    285e:	f6 01       	movw	r30, r12
    2860:	80 81       	ld	r24, Z
    2862:	e8 16       	cp	r14, r24
    2864:	69 f4       	brne	.+26     	; 0x2880 <localizeGateway+0x46>
			
				//Check to see if we have a matching branch
				if(matchBranch(row,col)){
    2866:	8f 2d       	mov	r24, r15
    2868:	69 2f       	mov	r22, r25
    286a:	99 83       	std	Y+1, r25	; 0x01
    286c:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <matchBranch>
    2870:	99 81       	ldd	r25, Y+1	; 0x01
    2872:	88 23       	and	r24, r24
    2874:	29 f0       	breq	.+10     	; 0x2880 <localizeGateway+0x46>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    2876:	80 91 a0 06 	lds	r24, 0x06A0
    287a:	8f 5f       	subi	r24, 0xFF	; 255
    287c:	80 93 a0 06 	sts	0x06A0, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    2880:	9f 5f       	subi	r25, 0xFF	; 255
    2882:	08 94       	sec
    2884:	c1 1c       	adc	r12, r1
    2886:	d1 1c       	adc	r13, r1
    2888:	94 30       	cpi	r25, 0x04	; 4
    288a:	49 f7       	brne	.-46     	; 0x285e <localizeGateway+0x24>
    288c:	0f 5f       	subi	r16, 0xFF	; 255
    288e:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    2890:	04 30       	cpi	r16, 0x04	; 4
    2892:	11 05       	cpc	r17, r1
    2894:	61 f0       	breq	.+24     	; 0x28ae <localizeGateway+0x74>
    2896:	f0 2e       	mov	r15, r16
    2898:	68 01       	movw	r12, r16
    289a:	cc 0c       	add	r12, r12
    289c:	dd 1c       	adc	r13, r13
    289e:	cc 0c       	add	r12, r12
    28a0:	dd 1c       	adc	r13, r13
    28a2:	86 ee       	ldi	r24, 0xE6	; 230
    28a4:	92 e0       	ldi	r25, 0x02	; 2
    28a6:	c8 0e       	add	r12, r24
    28a8:	d9 1e       	adc	r13, r25
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	d8 cf       	rjmp	.-80     	; 0x285e <localizeGateway+0x24>
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	80 91 a0 06 	lds	r24, 0x06A0
    28b4:	81 30       	cpi	r24, 0x01	; 1
    28b6:	09 f0       	breq	.+2      	; 0x28ba <localizeGateway+0x80>
    28b8:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    28ba:	89 2f       	mov	r24, r25
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	ff 90       	pop	r15
    28c8:	ef 90       	pop	r14
    28ca:	df 90       	pop	r13
    28cc:	cf 90       	pop	r12
    28ce:	08 95       	ret

000028d0 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    28d0:	80 91 71 04 	lds	r24, 0x0471
    28d4:	80 fd       	sbrc	r24, 0
    28d6:	02 c0       	rjmp	.+4      	; 0x28dc <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    28d8:	81 e0       	ldi	r24, 0x01	; 1
    28da:	05 c0       	rjmp	.+10     	; 0x28e6 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    28dc:	83 fd       	sbrc	r24, 3
    28de:	02 c0       	rjmp	.+4      	; 0x28e4 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	01 c0       	rjmp	.+2      	; 0x28e6 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    28e4:	83 e0       	ldi	r24, 0x03	; 3
    28e6:	80 93 ef 03 	sts	0x03EF, r24
	}
	
	switch(oldMove){
    28ea:	80 91 f0 03 	lds	r24, 0x03F0
    28ee:	81 30       	cpi	r24, 0x01	; 1
    28f0:	29 f0       	breq	.+10     	; 0x28fc <planMap+0x2c>
    28f2:	81 30       	cpi	r24, 0x01	; 1
    28f4:	38 f0       	brcs	.+14     	; 0x2904 <planMap+0x34>
    28f6:	84 30       	cpi	r24, 0x04	; 4
    28f8:	28 f4       	brcc	.+10     	; 0x2904 <planMap+0x34>
    28fa:	0f c0       	rjmp	.+30     	; 0x291a <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    28fc:	82 e0       	ldi	r24, 0x02	; 2
    28fe:	80 93 ef 03 	sts	0x03EF, r24
    2902:	0b c0       	rjmp	.+22     	; 0x291a <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    2904:	00 d0       	rcall	.+0      	; 0x2906 <planMap+0x36>
    2906:	8d e4       	ldi	r24, 0x4D	; 77
    2908:	91 e0       	ldi	r25, 0x01	; 1
    290a:	ed b7       	in	r30, 0x3d	; 61
    290c:	fe b7       	in	r31, 0x3e	; 62
    290e:	92 83       	std	Z+2, r25	; 0x02
    2910:	81 83       	std	Z+1, r24	; 0x01
    2912:	0e 94 03 36 	call	0x6c06	; 0x6c06 <printf>
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
			break;
	}
	
	oldMove = currentMove;
    291a:	80 91 ef 03 	lds	r24, 0x03EF
    291e:	80 93 f0 03 	sts	0x03F0, r24
}
    2922:	08 95       	ret

00002924 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch >= BRANCH_MAX){
    2924:	80 91 61 03 	lds	r24, 0x0361
    2928:	85 30       	cpi	r24, 0x05	; 5
    292a:	80 f0       	brcs	.+32     	; 0x294c <planGateway+0x28>
    292c:	e2 e5       	ldi	r30, 0x52	; 82
    292e:	f3 e0       	ldi	r31, 0x03	; 3
		for(i = 0; i < BRANCH_MAX; i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    2930:	81 81       	ldd	r24, Z+1	; 0x01
    2932:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2934:	86 81       	ldd	r24, Z+6	; 0x06
    2936:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2938:	83 85       	ldd	r24, Z+11	; 0x0b
    293a:	82 87       	std	Z+10, r24	; 0x0a
    293c:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch >= BRANCH_MAX){
		for(i = 0; i < BRANCH_MAX; i++){
    293e:	83 e0       	ldi	r24, 0x03	; 3
    2940:	e7 35       	cpi	r30, 0x57	; 87
    2942:	f8 07       	cpc	r31, r24
    2944:	a9 f7       	brne	.-22     	; 0x2930 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2946:	84 e0       	ldi	r24, 0x04	; 4
    2948:	80 93 61 03 	sts	0x0361, r24
	}
	
	// Decide what the current move should be
	planMap();
    294c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    2950:	e0 91 61 03 	lds	r30, 0x0361
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	ee 5a       	subi	r30, 0xAE	; 174
    2958:	fc 4f       	sbci	r31, 0xFC	; 252
    295a:	80 91 71 04 	lds	r24, 0x0471
    295e:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2960:	90 91 ef 03 	lds	r25, 0x03EF
    2964:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2966:	80 91 06 05 	lds	r24, 0x0506
    296a:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    296c:	92 30       	cpi	r25, 0x02	; 2
    296e:	b1 f0       	breq	.+44     	; 0x299c <planGateway+0x78>
    2970:	93 30       	cpi	r25, 0x03	; 3
    2972:	21 f0       	breq	.+8      	; 0x297c <planGateway+0x58>
    2974:	91 30       	cpi	r25, 0x01	; 1
    2976:	39 f4       	brne	.+14     	; 0x2986 <planGateway+0x62>
		case MOVE_LEFT:
			// If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2978:	81 50       	subi	r24, 0x01	; 1
    297a:	01 c0       	rjmp	.+2      	; 0x297e <planGateway+0x5a>
			break;
		case MOVE_RIGHT:
			// If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    297c:	8f 5f       	subi	r24, 0xFF	; 255
    297e:	83 70       	andi	r24, 0x03	; 3
    2980:	80 93 06 05 	sts	0x0506, r24
    2984:	0b c0       	rjmp	.+22     	; 0x299c <planGateway+0x78>
			break;
		default:
			LCD_printf("Whatz2?!");
    2986:	00 d0       	rcall	.+0      	; 0x2988 <planGateway+0x64>
    2988:	86 e5       	ldi	r24, 0x56	; 86
    298a:	91 e0       	ldi	r25, 0x01	; 1
    298c:	ed b7       	in	r30, 0x3d	; 61
    298e:	fe b7       	in	r31, 0x3e	; 62
    2990:	92 83       	std	Z+2, r25	; 0x02
    2992:	81 83       	std	Z+1, r24	; 0x01
    2994:	0e 94 03 36 	call	0x6c06	; 0x6c06 <printf>
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    299c:	80 91 61 03 	lds	r24, 0x0361
    29a0:	8f 5f       	subi	r24, 0xFF	; 255
    29a2:	80 93 61 03 	sts	0x0361, r24
}
    29a6:	08 95       	ret

000029a8 <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    29a8:	90 91 06 05 	lds	r25, 0x0506
    29ac:	91 30       	cpi	r25, 0x01	; 1
    29ae:	91 f0       	breq	.+36     	; 0x29d4 <planMetric+0x2c>
    29b0:	91 30       	cpi	r25, 0x01	; 1
    29b2:	28 f0       	brcs	.+10     	; 0x29be <planMetric+0x16>
    29b4:	92 30       	cpi	r25, 0x02	; 2
    29b6:	d9 f0       	breq	.+54     	; 0x29ee <planMetric+0x46>
    29b8:	93 30       	cpi	r25, 0x03	; 3
    29ba:	c1 f5       	brne	.+112    	; 0x2a2c <planMetric+0x84>
    29bc:	23 c0       	rjmp	.+70     	; 0x2a04 <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    29be:	80 91 07 05 	lds	r24, 0x0507
    29c2:	81 30       	cpi	r24, 0x01	; 1
    29c4:	91 f0       	breq	.+36     	; 0x29ea <planMetric+0x42>
    29c6:	81 30       	cpi	r24, 0x01	; 1
    29c8:	68 f1       	brcs	.+90     	; 0x2a24 <planMetric+0x7c>
    29ca:	82 30       	cpi	r24, 0x02	; 2
    29cc:	49 f1       	breq	.+82     	; 0x2a20 <planMetric+0x78>
    29ce:	83 30       	cpi	r24, 0x03	; 3
    29d0:	69 f5       	brne	.+90     	; 0x2a2c <planMetric+0x84>
    29d2:	26 c0       	rjmp	.+76     	; 0x2a20 <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    29d4:	80 91 07 05 	lds	r24, 0x0507
    29d8:	81 30       	cpi	r24, 0x01	; 1
    29da:	21 f1       	breq	.+72     	; 0x2a24 <planMetric+0x7c>
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	e8 f0       	brcs	.+58     	; 0x2a1a <planMetric+0x72>
    29e0:	82 30       	cpi	r24, 0x02	; 2
    29e2:	19 f0       	breq	.+6      	; 0x29ea <planMetric+0x42>
    29e4:	83 30       	cpi	r24, 0x03	; 3
    29e6:	11 f5       	brne	.+68     	; 0x2a2c <planMetric+0x84>
    29e8:	18 c0       	rjmp	.+48     	; 0x2a1a <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    29ea:	83 e0       	ldi	r24, 0x03	; 3
    29ec:	1c c0       	rjmp	.+56     	; 0x2a26 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    29ee:	80 91 07 05 	lds	r24, 0x0507
    29f2:	81 30       	cpi	r24, 0x01	; 1
    29f4:	c1 f0       	breq	.+48     	; 0x2a26 <planMetric+0x7e>
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	98 f0       	brcs	.+38     	; 0x2a20 <planMetric+0x78>
    29fa:	82 30       	cpi	r24, 0x02	; 2
    29fc:	a1 f0       	breq	.+40     	; 0x2a26 <planMetric+0x7e>
    29fe:	83 30       	cpi	r24, 0x03	; 3
    2a00:	a9 f4       	brne	.+42     	; 0x2a2c <planMetric+0x84>
    2a02:	11 c0       	rjmp	.+34     	; 0x2a26 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    2a04:	80 91 07 05 	lds	r24, 0x0507
    2a08:	81 30       	cpi	r24, 0x01	; 1
    2a0a:	69 f0       	breq	.+26     	; 0x2a26 <planMetric+0x7e>
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	28 f0       	brcs	.+10     	; 0x2a1a <planMetric+0x72>
    2a10:	82 30       	cpi	r24, 0x02	; 2
    2a12:	31 f0       	breq	.+12     	; 0x2a20 <planMetric+0x78>
    2a14:	83 30       	cpi	r24, 0x03	; 3
    2a16:	51 f4       	brne	.+20     	; 0x2a2c <planMetric+0x84>
    2a18:	05 c0       	rjmp	.+10     	; 0x2a24 <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    2a1a:	90 93 ef 03 	sts	0x03EF, r25
    2a1e:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	01 c0       	rjmp	.+2      	; 0x2a26 <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    2a24:	82 e0       	ldi	r24, 0x02	; 2
    2a26:	80 93 ef 03 	sts	0x03EF, r24
    2a2a:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <planMetric+0x86>
    2a2e:	8f e5       	ldi	r24, 0x5F	; 95
    2a30:	91 e0       	ldi	r25, 0x01	; 1
    2a32:	ed b7       	in	r30, 0x3d	; 61
    2a34:	fe b7       	in	r31, 0x3e	; 62
    2a36:	92 83       	std	Z+2, r25	; 0x02
    2a38:	81 83       	std	Z+1, r24	; 0x01
    2a3a:	0e 94 03 36 	call	0x6c06	; 0x6c06 <printf>
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	08 95       	ret

00002a44 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2a44:	cf 92       	push	r12
    2a46:	df 92       	push	r13
    2a48:	ef 92       	push	r14
    2a4a:	ff 92       	push	r15
    2a4c:	0f 93       	push	r16
    2a4e:	1f 93       	push	r17
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	0f 92       	push	r0
    2a56:	cd b7       	in	r28, 0x3d	; 61
    2a58:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2a5a:	80 91 08 06 	lds	r24, 0x0608
    2a5e:	f8 2e       	mov	r15, r24
    2a60:	f6 94       	lsr	r15
    2a62:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2a64:	98 2f       	mov	r25, r24
    2a66:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2a68:	00 91 06 05 	lds	r16, 0x0506
    2a6c:	cc 24       	eor	r12, r12
    2a6e:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2a70:	f6 01       	movw	r30, r12
    2a72:	eb 50       	subi	r30, 0x0B	; 11
    2a74:	fb 4f       	sbci	r31, 0xFB	; 251
    2a76:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2a78:	ef 2d       	mov	r30, r15
    2a7a:	f0 e0       	ldi	r31, 0x00	; 0
    2a7c:	ee 0f       	add	r30, r30
    2a7e:	ff 1f       	adc	r31, r31
    2a80:	ee 0f       	add	r30, r30
    2a82:	ff 1f       	adc	r31, r31
    2a84:	e9 0f       	add	r30, r25
    2a86:	f1 1d       	adc	r31, r1
    2a88:	ea 51       	subi	r30, 0x1A	; 26
    2a8a:	fd 4f       	sbci	r31, 0xFD	; 253
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2a8c:	80 81       	ld	r24, Z
    2a8e:	60 2f       	mov	r22, r16
    2a90:	41 e0       	ldi	r20, 0x01	; 1
    2a92:	99 83       	std	Y+1, r25	; 0x01
    2a94:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2a98:	f6 01       	movw	r30, r12
    2a9a:	e4 57       	subi	r30, 0x74	; 116
    2a9c:	f9 4f       	sbci	r31, 0xF9	; 249
    2a9e:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2aa0:	99 81       	ldd	r25, Y+1	; 0x01
    2aa2:	12 30       	cpi	r17, 0x02	; 2
    2aa4:	89 f4       	brne	.+34     	; 0x2ac8 <getGateways+0x84>
			switch(curOrient){
    2aa6:	01 30       	cpi	r16, 0x01	; 1
    2aa8:	49 f0       	breq	.+18     	; 0x2abc <getGateways+0x78>
    2aaa:	01 30       	cpi	r16, 0x01	; 1
    2aac:	28 f0       	brcs	.+10     	; 0x2ab8 <getGateways+0x74>
    2aae:	02 30       	cpi	r16, 0x02	; 2
    2ab0:	39 f0       	breq	.+14     	; 0x2ac0 <getGateways+0x7c>
    2ab2:	03 30       	cpi	r16, 0x03	; 3
    2ab4:	89 f4       	brne	.+34     	; 0x2ad8 <getGateways+0x94>
    2ab6:	06 c0       	rjmp	.+12     	; 0x2ac4 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    2ab8:	fa 94       	dec	r15
    2aba:	0e c0       	rjmp	.+28     	; 0x2ad8 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    2abc:	9f 5f       	subi	r25, 0xFF	; 255
    2abe:	0c c0       	rjmp	.+24     	; 0x2ad8 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    2ac0:	f3 94       	inc	r15
    2ac2:	0a c0       	rjmp	.+20     	; 0x2ad8 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    2ac4:	91 50       	subi	r25, 0x01	; 1
    2ac6:	08 c0       	rjmp	.+16     	; 0x2ad8 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    2ac8:	13 30       	cpi	r17, 0x03	; 3
    2aca:	11 f4       	brne	.+4      	; 0x2ad0 <getGateways+0x8c>
			curOrient++;
    2acc:	0f 5f       	subi	r16, 0xFF	; 255
    2ace:	03 c0       	rjmp	.+6      	; 0x2ad6 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    2ad0:	11 30       	cpi	r17, 0x01	; 1
    2ad2:	11 f4       	brne	.+4      	; 0x2ad8 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    2ad4:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    2ad6:	03 70       	andi	r16, 0x03	; 3
    2ad8:	08 94       	sec
    2ada:	c1 1c       	adc	r12, r1
    2adc:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2ade:	8d e0       	ldi	r24, 0x0D	; 13
    2ae0:	c8 16       	cp	r12, r24
    2ae2:	d1 04       	cpc	r13, r1
    2ae4:	29 f6       	brne	.-118    	; 0x2a70 <getGateways+0x2c>
    2ae6:	cc 24       	eor	r12, r12
    2ae8:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2aea:	98 e6       	ldi	r25, 0x68	; 104
    2aec:	e9 2e       	mov	r14, r25
    2aee:	91 e0       	ldi	r25, 0x01	; 1
    2af0:	f9 2e       	mov	r15, r25
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2af2:	f6 01       	movw	r30, r12
    2af4:	e4 57       	subi	r30, 0x74	; 116
    2af6:	f9 4f       	sbci	r31, 0xF9	; 249
    2af8:	00 81       	ld	r16, Z
		LCD_clear();
    2afa:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2afe:	20 2f       	mov	r18, r16
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	ad b7       	in	r26, 0x3d	; 61
    2b04:	be b7       	in	r27, 0x3e	; 62
    2b06:	54 97       	sbiw	r26, 0x14	; 20
    2b08:	0f b6       	in	r0, 0x3f	; 63
    2b0a:	f8 94       	cli
    2b0c:	be bf       	out	0x3e, r27	; 62
    2b0e:	0f be       	out	0x3f, r0	; 63
    2b10:	ad bf       	out	0x3d, r26	; 61
    2b12:	ed b7       	in	r30, 0x3d	; 61
    2b14:	fe b7       	in	r31, 0x3e	; 62
    2b16:	31 96       	adiw	r30, 0x01	; 1
    2b18:	12 96       	adiw	r26, 0x02	; 2
    2b1a:	fc 92       	st	X, r15
    2b1c:	ee 92       	st	-X, r14
    2b1e:	11 97       	sbiw	r26, 0x01	; 1
    2b20:	d3 82       	std	Z+3, r13	; 0x03
    2b22:	c2 82       	std	Z+2, r12	; 0x02
    2b24:	11 27       	eor	r17, r17
    2b26:	07 fd       	sbrc	r16, 7
    2b28:	10 95       	com	r17
    2b2a:	00 27       	eor	r16, r16
    2b2c:	11 0f       	add	r17, r17
    2b2e:	00 1f       	adc	r16, r16
    2b30:	11 27       	eor	r17, r17
    2b32:	15 83       	std	Z+5, r17	; 0x05
    2b34:	04 83       	std	Z+4, r16	; 0x04
    2b36:	c9 01       	movw	r24, r18
    2b38:	b6 e0       	ldi	r27, 0x06	; 6
    2b3a:	96 95       	lsr	r25
    2b3c:	87 95       	ror	r24
    2b3e:	ba 95       	dec	r27
    2b40:	e1 f7       	brne	.-8      	; 0x2b3a <getGateways+0xf6>
    2b42:	81 70       	andi	r24, 0x01	; 1
    2b44:	90 70       	andi	r25, 0x00	; 0
    2b46:	97 83       	std	Z+7, r25	; 0x07
    2b48:	86 83       	std	Z+6, r24	; 0x06
    2b4a:	c9 01       	movw	r24, r18
    2b4c:	a5 e0       	ldi	r26, 0x05	; 5
    2b4e:	96 95       	lsr	r25
    2b50:	87 95       	ror	r24
    2b52:	aa 95       	dec	r26
    2b54:	e1 f7       	brne	.-8      	; 0x2b4e <getGateways+0x10a>
    2b56:	81 70       	andi	r24, 0x01	; 1
    2b58:	90 70       	andi	r25, 0x00	; 0
    2b5a:	91 87       	std	Z+9, r25	; 0x09
    2b5c:	80 87       	std	Z+8, r24	; 0x08
    2b5e:	c9 01       	movw	r24, r18
    2b60:	74 e0       	ldi	r23, 0x04	; 4
    2b62:	96 95       	lsr	r25
    2b64:	87 95       	ror	r24
    2b66:	7a 95       	dec	r23
    2b68:	e1 f7       	brne	.-8      	; 0x2b62 <getGateways+0x11e>
    2b6a:	81 70       	andi	r24, 0x01	; 1
    2b6c:	90 70       	andi	r25, 0x00	; 0
    2b6e:	93 87       	std	Z+11, r25	; 0x0b
    2b70:	82 87       	std	Z+10, r24	; 0x0a
    2b72:	c9 01       	movw	r24, r18
    2b74:	63 e0       	ldi	r22, 0x03	; 3
    2b76:	96 95       	lsr	r25
    2b78:	87 95       	ror	r24
    2b7a:	6a 95       	dec	r22
    2b7c:	e1 f7       	brne	.-8      	; 0x2b76 <getGateways+0x132>
    2b7e:	81 70       	andi	r24, 0x01	; 1
    2b80:	90 70       	andi	r25, 0x00	; 0
    2b82:	95 87       	std	Z+13, r25	; 0x0d
    2b84:	84 87       	std	Z+12, r24	; 0x0c
    2b86:	c9 01       	movw	r24, r18
    2b88:	96 95       	lsr	r25
    2b8a:	87 95       	ror	r24
    2b8c:	96 95       	lsr	r25
    2b8e:	87 95       	ror	r24
    2b90:	81 70       	andi	r24, 0x01	; 1
    2b92:	90 70       	andi	r25, 0x00	; 0
    2b94:	97 87       	std	Z+15, r25	; 0x0f
    2b96:	86 87       	std	Z+14, r24	; 0x0e
    2b98:	c9 01       	movw	r24, r18
    2b9a:	96 95       	lsr	r25
    2b9c:	87 95       	ror	r24
    2b9e:	81 70       	andi	r24, 0x01	; 1
    2ba0:	90 70       	andi	r25, 0x00	; 0
    2ba2:	91 8b       	std	Z+17, r25	; 0x11
    2ba4:	80 8b       	std	Z+16, r24	; 0x10
    2ba6:	21 70       	andi	r18, 0x01	; 1
    2ba8:	30 70       	andi	r19, 0x00	; 0
    2baa:	33 8b       	std	Z+19, r19	; 0x13
    2bac:	22 8b       	std	Z+18, r18	; 0x12
    2bae:	0e 94 03 36 	call	0x6c06	; 0x6c06 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    2bb2:	ed b7       	in	r30, 0x3d	; 61
    2bb4:	fe b7       	in	r31, 0x3e	; 62
    2bb6:	74 96       	adiw	r30, 0x14	; 20
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	fe bf       	out	0x3e, r31	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	ed bf       	out	0x3d, r30	; 61
    2bc2:	88 ee       	ldi	r24, 0xE8	; 232
    2bc4:	93 e0       	ldi	r25, 0x03	; 3
    2bc6:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
    2bca:	08 94       	sec
    2bcc:	c1 1c       	adc	r12, r1
    2bce:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2bd0:	fd e0       	ldi	r31, 0x0D	; 13
    2bd2:	cf 16       	cp	r12, r31
    2bd4:	d1 04       	cpc	r13, r1
    2bd6:	09 f0       	breq	.+2      	; 0x2bda <getGateways+0x196>
    2bd8:	8c cf       	rjmp	.-232    	; 0x2af2 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    2bda:	0f 90       	pop	r0
    2bdc:	cf 91       	pop	r28
    2bde:	df 91       	pop	r29
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	ff 90       	pop	r15
    2be6:	ef 90       	pop	r14
    2be8:	df 90       	pop	r13
    2bea:	cf 90       	pop	r12
    2bec:	08 95       	ret

00002bee <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2bee:	8f 92       	push	r8
    2bf0:	af 92       	push	r10
    2bf2:	bf 92       	push	r11
    2bf4:	cf 92       	push	r12
    2bf6:	df 92       	push	r13
    2bf8:	ef 92       	push	r14
    2bfa:	ff 92       	push	r15
    2bfc:	0f 93       	push	r16
    2bfe:	1f 93       	push	r17
	char isDone = 0;
	pidController(0,RESET);
    2c00:	60 e0       	ldi	r22, 0x00	; 0
    2c02:	70 e0       	ldi	r23, 0x00	; 0
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	41 e0       	ldi	r20, 0x01	; 1
    2c0a:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
	switch(currentMove){
    2c0e:	80 91 ef 03 	lds	r24, 0x03EF
    2c12:	82 30       	cpi	r24, 0x02	; 2
    2c14:	69 f0       	breq	.+26     	; 0x2c30 <moveMap+0x42>
    2c16:	83 30       	cpi	r24, 0x03	; 3
    2c18:	c1 f0       	breq	.+48     	; 0x2c4a <moveMap+0x5c>
    2c1a:	81 30       	cpi	r24, 0x01	; 1
    2c1c:	d1 f5       	brne	.+116    	; 0x2c92 <moveMap+0xa4>
		case MOVE_LEFT:
			move_arc_stwt(POINT_TURN, LEFT_TURN, 30, 30, 0);
    2c1e:	60 e0       	ldi	r22, 0x00	; 0
    2c20:	70 e0       	ldi	r23, 0x00	; 0
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	20 e0       	ldi	r18, 0x00	; 0
    2c28:	30 e0       	ldi	r19, 0x00	; 0
    2c2a:	44 e8       	ldi	r20, 0x84	; 132
    2c2c:	51 ec       	ldi	r21, 0xC1	; 193
    2c2e:	15 c0       	rjmp	.+42     	; 0x2c5a <moveMap+0x6c>
			TMRSRVC_delay(BRAKE_DELAY);
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	85 ea       	ldi	r24, 0xA5	; 165
    2c36:	93 e4       	ldi	r25, 0x43	; 67
    2c38:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <setOdometry>
			while(!isDone){
				checkIR();
    2c3c:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
				isDone = moveWall();
    2c40:	0e 94 f7 10 	call	0x21ee	; 0x21ee <moveWall>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
			while(!isDone){
    2c44:	88 23       	and	r24, r24
    2c46:	d1 f3       	breq	.-12     	; 0x2c3c <moveMap+0x4e>
    2c48:	17 c0       	rjmp	.+46     	; 0x2c78 <moveMap+0x8a>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			
			// move_arc_stwt(NO_TURN, 45, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 30, 30, 0);
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	44 e8       	ldi	r20, 0x84	; 132
    2c58:	51 e4       	ldi	r21, 0x41	; 65
    2c5a:	0f 2e       	mov	r0, r31
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	ef 2e       	mov	r14, r31
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	ff 2e       	mov	r15, r31
    2c64:	f0 ef       	ldi	r31, 0xF0	; 240
    2c66:	0f 2f       	mov	r16, r31
    2c68:	f1 e4       	ldi	r31, 0x41	; 65
    2c6a:	1f 2f       	mov	r17, r31
    2c6c:	f0 2d       	mov	r31, r0
    2c6e:	57 01       	movw	r10, r14
    2c70:	68 01       	movw	r12, r16
    2c72:	88 24       	eor	r8, r8
    2c74:	0e 94 31 0b 	call	0x1662	; 0x1662 <move_arc_stwt>
			
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_ON);
    2c78:	82 e0       	ldi	r24, 0x02	; 2
    2c7a:	61 e0       	ldi	r22, 0x01	; 1
    2c7c:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <STEPPER_stop>
			TMRSRVC_delay(BRAKE_DELAY);
    2c80:	82 e3       	ldi	r24, 0x32	; 50
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    2c88:	82 e0       	ldi	r24, 0x02	; 2
    2c8a:	60 e0       	ldi	r22, 0x00	; 0
    2c8c:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <STEPPER_stop>
    2c90:	0b c0       	rjmp	.+22     	; 0x2ca8 <moveMap+0xba>
			break;
		default:
			LCD_printf("Whatz2?!");
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <moveMap+0xa6>
    2c94:	86 e5       	ldi	r24, 0x56	; 86
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	ed b7       	in	r30, 0x3d	; 61
    2c9a:	fe b7       	in	r31, 0x3e	; 62
    2c9c:	92 83       	std	Z+2, r25	; 0x02
    2c9e:	81 83       	std	Z+1, r24	; 0x01
    2ca0:	0e 94 03 36 	call	0x6c06	; 0x6c06 <printf>
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
			break;
	}
}
    2ca8:	1f 91       	pop	r17
    2caa:	0f 91       	pop	r16
    2cac:	ff 90       	pop	r15
    2cae:	ef 90       	pop	r14
    2cb0:	df 90       	pop	r13
    2cb2:	cf 90       	pop	r12
    2cb4:	bf 90       	pop	r11
    2cb6:	af 90       	pop	r10
    2cb8:	8f 90       	pop	r8
    2cba:	08 95       	ret

00002cbc <map>:
* Input Variables:	none
* Output Return:	none
* Overview:			Makes the robot map the world
********************************************************************/
void map (void)
{
    2cbc:	ef 92       	push	r14
    2cbe:	ff 92       	push	r15
    2cc0:	0f 93       	push	r16
    2cc2:	1f 93       	push	r17
    2cc4:	cf 93       	push	r28
    2cc6:	df 93       	push	r29
	// Initialize State
	isMapping = 1;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	80 93 a1 06 	sts	0x06A1, r24
			break;
		}
		
		//Print Map
		LCD_clear();
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    2cce:	ea e8       	ldi	r30, 0x8A	; 138
    2cd0:	ee 2e       	mov	r14, r30
    2cd2:	e1 e0       	ldi	r30, 0x01	; 1
    2cd4:	fe 2e       	mov	r15, r30
    2cd6:	26 c1       	rjmp	.+588    	; 0x2f24 <map+0x268>
	
	// Mapping Loop
	while(isMapping)
	{	
		//Sense
		checkIR();	
    2cd8:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
		checkWorld();
    2cdc:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		//Record
		setGateways();
    2ce0:	0e 94 41 13 	call	0x2682	; 0x2682 <setGateways>
				
		//Plan using the Map
		planMap();
    2ce4:	0e 94 68 14 	call	0x28d0	; 0x28d0 <planMap>
		
		//Act on the Map
		moveMap();
    2ce8:	0e 94 f7 15 	call	0x2bee	; 0x2bee <moveMap>
		
		//Shift the Map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    2cec:	80 91 08 06 	lds	r24, 0x0608
    2cf0:	60 91 ef 03 	lds	r22, 0x03EF
    2cf4:	40 91 06 05 	lds	r20, 0x0506
    2cf8:	0e 94 9e 13 	call	0x273c	; 0x273c <shiftMap>
    2cfc:	80 93 08 06 	sts	0x0608, r24
		
		//Break?
		isMapping = !((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    2d00:	90 91 09 06 	lds	r25, 0x0609
    2d04:	98 17       	cp	r25, r24
    2d06:	41 f4       	brne	.+16     	; 0x2d18 <map+0x5c>
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	90 91 05 05 	lds	r25, 0x0505
    2d10:	80 91 06 05 	lds	r24, 0x0506
    2d14:	98 17       	cp	r25, r24
    2d16:	11 f0       	breq	.+4      	; 0x2d1c <map+0x60>
    2d18:	21 e0       	ldi	r18, 0x01	; 1
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	20 93 a1 06 	sts	0x06A1, r18
		if(!isMapping){			
    2d20:	22 23       	and	r18, r18
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <map+0x6a>
    2d24:	04 c1       	rjmp	.+520    	; 0x2f2e <map+0x272>
			break;
		}
		
		//Print Map
		LCD_clear();
    2d26:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    2d2a:	80 91 ef 03 	lds	r24, 0x03EF
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	60 91 08 06 	lds	r22, 0x0608
    2d36:	46 2f       	mov	r20, r22
    2d38:	50 e0       	ldi	r21, 0x00	; 0
    2d3a:	00 91 06 05 	lds	r16, 0x0506
    2d3e:	a0 2f       	mov	r26, r16
    2d40:	b0 e0       	ldi	r27, 0x00	; 0
    2d42:	cd b7       	in	r28, 0x3d	; 61
    2d44:	de b7       	in	r29, 0x3e	; 62
    2d46:	e2 97       	sbiw	r28, 0x32	; 50
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	de bf       	out	0x3e, r29	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	cd bf       	out	0x3d, r28	; 61
    2d52:	ed b7       	in	r30, 0x3d	; 61
    2d54:	fe b7       	in	r31, 0x3e	; 62
    2d56:	31 96       	adiw	r30, 0x01	; 1
    2d58:	fa 82       	std	Y+2, r15	; 0x02
    2d5a:	e9 82       	std	Y+1, r14	; 0x01
    2d5c:	99 27       	eor	r25, r25
    2d5e:	87 fd       	sbrc	r24, 7
    2d60:	90 95       	com	r25
    2d62:	88 27       	eor	r24, r24
    2d64:	99 0f       	add	r25, r25
    2d66:	88 1f       	adc	r24, r24
    2d68:	99 27       	eor	r25, r25
    2d6a:	93 83       	std	Z+3, r25	; 0x03
    2d6c:	82 83       	std	Z+2, r24	; 0x02
    2d6e:	c9 01       	movw	r24, r18
    2d70:	16 e0       	ldi	r17, 0x06	; 6
    2d72:	96 95       	lsr	r25
    2d74:	87 95       	ror	r24
    2d76:	1a 95       	dec	r17
    2d78:	e1 f7       	brne	.-8      	; 0x2d72 <map+0xb6>
    2d7a:	81 70       	andi	r24, 0x01	; 1
    2d7c:	90 70       	andi	r25, 0x00	; 0
    2d7e:	95 83       	std	Z+5, r25	; 0x05
    2d80:	84 83       	std	Z+4, r24	; 0x04
    2d82:	c9 01       	movw	r24, r18
    2d84:	75 e0       	ldi	r23, 0x05	; 5
    2d86:	96 95       	lsr	r25
    2d88:	87 95       	ror	r24
    2d8a:	7a 95       	dec	r23
    2d8c:	e1 f7       	brne	.-8      	; 0x2d86 <map+0xca>
    2d8e:	81 70       	andi	r24, 0x01	; 1
    2d90:	90 70       	andi	r25, 0x00	; 0
    2d92:	97 83       	std	Z+7, r25	; 0x07
    2d94:	86 83       	std	Z+6, r24	; 0x06
    2d96:	c9 01       	movw	r24, r18
    2d98:	14 e0       	ldi	r17, 0x04	; 4
    2d9a:	96 95       	lsr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	1a 95       	dec	r17
    2da0:	e1 f7       	brne	.-8      	; 0x2d9a <map+0xde>
    2da2:	81 70       	andi	r24, 0x01	; 1
    2da4:	90 70       	andi	r25, 0x00	; 0
    2da6:	91 87       	std	Z+9, r25	; 0x09
    2da8:	80 87       	std	Z+8, r24	; 0x08
    2daa:	c9 01       	movw	r24, r18
    2dac:	73 e0       	ldi	r23, 0x03	; 3
    2dae:	96 95       	lsr	r25
    2db0:	87 95       	ror	r24
    2db2:	7a 95       	dec	r23
    2db4:	e1 f7       	brne	.-8      	; 0x2dae <map+0xf2>
    2db6:	81 70       	andi	r24, 0x01	; 1
    2db8:	90 70       	andi	r25, 0x00	; 0
    2dba:	93 87       	std	Z+11, r25	; 0x0b
    2dbc:	82 87       	std	Z+10, r24	; 0x0a
    2dbe:	c9 01       	movw	r24, r18
    2dc0:	96 95       	lsr	r25
    2dc2:	87 95       	ror	r24
    2dc4:	96 95       	lsr	r25
    2dc6:	87 95       	ror	r24
    2dc8:	81 70       	andi	r24, 0x01	; 1
    2dca:	90 70       	andi	r25, 0x00	; 0
    2dcc:	95 87       	std	Z+13, r25	; 0x0d
    2dce:	84 87       	std	Z+12, r24	; 0x0c
    2dd0:	c9 01       	movw	r24, r18
    2dd2:	96 95       	lsr	r25
    2dd4:	87 95       	ror	r24
    2dd6:	81 70       	andi	r24, 0x01	; 1
    2dd8:	90 70       	andi	r25, 0x00	; 0
    2dda:	97 87       	std	Z+15, r25	; 0x0f
    2ddc:	86 87       	std	Z+14, r24	; 0x0e
    2dde:	21 70       	andi	r18, 0x01	; 1
    2de0:	30 70       	andi	r19, 0x00	; 0
    2de2:	31 8b       	std	Z+17, r19	; 0x11
    2de4:	20 8b       	std	Z+16, r18	; 0x10
    2de6:	77 27       	eor	r23, r23
    2de8:	67 fd       	sbrc	r22, 7
    2dea:	70 95       	com	r23
    2dec:	66 27       	eor	r22, r22
    2dee:	77 0f       	add	r23, r23
    2df0:	66 1f       	adc	r22, r22
    2df2:	77 27       	eor	r23, r23
    2df4:	73 8b       	std	Z+19, r23	; 0x13
    2df6:	62 8b       	std	Z+18, r22	; 0x12
    2df8:	ca 01       	movw	r24, r20
    2dfa:	26 e0       	ldi	r18, 0x06	; 6
    2dfc:	96 95       	lsr	r25
    2dfe:	87 95       	ror	r24
    2e00:	2a 95       	dec	r18
    2e02:	e1 f7       	brne	.-8      	; 0x2dfc <map+0x140>
    2e04:	81 70       	andi	r24, 0x01	; 1
    2e06:	90 70       	andi	r25, 0x00	; 0
    2e08:	95 8b       	std	Z+21, r25	; 0x15
    2e0a:	84 8b       	std	Z+20, r24	; 0x14
    2e0c:	ca 01       	movw	r24, r20
    2e0e:	15 e0       	ldi	r17, 0x05	; 5
    2e10:	96 95       	lsr	r25
    2e12:	87 95       	ror	r24
    2e14:	1a 95       	dec	r17
    2e16:	e1 f7       	brne	.-8      	; 0x2e10 <map+0x154>
    2e18:	81 70       	andi	r24, 0x01	; 1
    2e1a:	90 70       	andi	r25, 0x00	; 0
    2e1c:	97 8b       	std	Z+23, r25	; 0x17
    2e1e:	86 8b       	std	Z+22, r24	; 0x16
    2e20:	ca 01       	movw	r24, r20
    2e22:	74 e0       	ldi	r23, 0x04	; 4
    2e24:	96 95       	lsr	r25
    2e26:	87 95       	ror	r24
    2e28:	7a 95       	dec	r23
    2e2a:	e1 f7       	brne	.-8      	; 0x2e24 <map+0x168>
    2e2c:	81 70       	andi	r24, 0x01	; 1
    2e2e:	90 70       	andi	r25, 0x00	; 0
    2e30:	91 8f       	std	Z+25, r25	; 0x19
    2e32:	80 8f       	std	Z+24, r24	; 0x18
    2e34:	ca 01       	movw	r24, r20
    2e36:	63 e0       	ldi	r22, 0x03	; 3
    2e38:	96 95       	lsr	r25
    2e3a:	87 95       	ror	r24
    2e3c:	6a 95       	dec	r22
    2e3e:	e1 f7       	brne	.-8      	; 0x2e38 <map+0x17c>
    2e40:	81 70       	andi	r24, 0x01	; 1
    2e42:	90 70       	andi	r25, 0x00	; 0
    2e44:	93 8f       	std	Z+27, r25	; 0x1b
    2e46:	82 8f       	std	Z+26, r24	; 0x1a
    2e48:	ca 01       	movw	r24, r20
    2e4a:	96 95       	lsr	r25
    2e4c:	87 95       	ror	r24
    2e4e:	96 95       	lsr	r25
    2e50:	87 95       	ror	r24
    2e52:	81 70       	andi	r24, 0x01	; 1
    2e54:	90 70       	andi	r25, 0x00	; 0
    2e56:	95 8f       	std	Z+29, r25	; 0x1d
    2e58:	84 8f       	std	Z+28, r24	; 0x1c
    2e5a:	ca 01       	movw	r24, r20
    2e5c:	96 95       	lsr	r25
    2e5e:	87 95       	ror	r24
    2e60:	81 70       	andi	r24, 0x01	; 1
    2e62:	90 70       	andi	r25, 0x00	; 0
    2e64:	97 8f       	std	Z+31, r25	; 0x1f
    2e66:	86 8f       	std	Z+30, r24	; 0x1e
    2e68:	41 70       	andi	r20, 0x01	; 1
    2e6a:	50 70       	andi	r21, 0x00	; 0
    2e6c:	51 a3       	std	Z+33, r21	; 0x21
    2e6e:	40 a3       	std	Z+32, r20	; 0x20
    2e70:	11 27       	eor	r17, r17
    2e72:	07 fd       	sbrc	r16, 7
    2e74:	10 95       	com	r17
    2e76:	00 27       	eor	r16, r16
    2e78:	11 0f       	add	r17, r17
    2e7a:	00 1f       	adc	r16, r16
    2e7c:	11 27       	eor	r17, r17
    2e7e:	13 a3       	std	Z+35, r17	; 0x23
    2e80:	02 a3       	std	Z+34, r16	; 0x22
    2e82:	cd 01       	movw	r24, r26
    2e84:	16 e0       	ldi	r17, 0x06	; 6
    2e86:	96 95       	lsr	r25
    2e88:	87 95       	ror	r24
    2e8a:	1a 95       	dec	r17
    2e8c:	e1 f7       	brne	.-8      	; 0x2e86 <map+0x1ca>
    2e8e:	81 70       	andi	r24, 0x01	; 1
    2e90:	90 70       	andi	r25, 0x00	; 0
    2e92:	95 a3       	std	Z+37, r25	; 0x25
    2e94:	84 a3       	std	Z+36, r24	; 0x24
    2e96:	cd 01       	movw	r24, r26
    2e98:	75 e0       	ldi	r23, 0x05	; 5
    2e9a:	96 95       	lsr	r25
    2e9c:	87 95       	ror	r24
    2e9e:	7a 95       	dec	r23
    2ea0:	e1 f7       	brne	.-8      	; 0x2e9a <map+0x1de>
    2ea2:	81 70       	andi	r24, 0x01	; 1
    2ea4:	90 70       	andi	r25, 0x00	; 0
    2ea6:	97 a3       	std	Z+39, r25	; 0x27
    2ea8:	86 a3       	std	Z+38, r24	; 0x26
    2eaa:	cd 01       	movw	r24, r26
    2eac:	64 e0       	ldi	r22, 0x04	; 4
    2eae:	96 95       	lsr	r25
    2eb0:	87 95       	ror	r24
    2eb2:	6a 95       	dec	r22
    2eb4:	e1 f7       	brne	.-8      	; 0x2eae <map+0x1f2>
    2eb6:	81 70       	andi	r24, 0x01	; 1
    2eb8:	90 70       	andi	r25, 0x00	; 0
    2eba:	91 a7       	std	Z+41, r25	; 0x29
    2ebc:	80 a7       	std	Z+40, r24	; 0x28
    2ebe:	cd 01       	movw	r24, r26
    2ec0:	53 e0       	ldi	r21, 0x03	; 3
    2ec2:	96 95       	lsr	r25
    2ec4:	87 95       	ror	r24
    2ec6:	5a 95       	dec	r21
    2ec8:	e1 f7       	brne	.-8      	; 0x2ec2 <map+0x206>
    2eca:	81 70       	andi	r24, 0x01	; 1
    2ecc:	90 70       	andi	r25, 0x00	; 0
    2ece:	93 a7       	std	Z+43, r25	; 0x2b
    2ed0:	82 a7       	std	Z+42, r24	; 0x2a
    2ed2:	cd 01       	movw	r24, r26
    2ed4:	96 95       	lsr	r25
    2ed6:	87 95       	ror	r24
    2ed8:	96 95       	lsr	r25
    2eda:	87 95       	ror	r24
    2edc:	81 70       	andi	r24, 0x01	; 1
    2ede:	90 70       	andi	r25, 0x00	; 0
    2ee0:	95 a7       	std	Z+45, r25	; 0x2d
    2ee2:	84 a7       	std	Z+44, r24	; 0x2c
    2ee4:	cd 01       	movw	r24, r26
    2ee6:	96 95       	lsr	r25
    2ee8:	87 95       	ror	r24
    2eea:	81 70       	andi	r24, 0x01	; 1
    2eec:	90 70       	andi	r25, 0x00	; 0
    2eee:	97 a7       	std	Z+47, r25	; 0x2f
    2ef0:	86 a7       	std	Z+46, r24	; 0x2e
    2ef2:	a1 70       	andi	r26, 0x01	; 1
    2ef4:	b0 70       	andi	r27, 0x00	; 0
    2ef6:	b1 ab       	std	Z+49, r27	; 0x31
    2ef8:	a0 ab       	std	Z+48, r26	; 0x30
    2efa:	0e 94 03 36 	call	0x6c06	; 0x6c06 <printf>
		printMap(currentOrientation,currentCellWorld,RESET);
    2efe:	ed b7       	in	r30, 0x3d	; 61
    2f00:	fe b7       	in	r31, 0x3e	; 62
    2f02:	f2 96       	adiw	r30, 0x32	; 50
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	fe bf       	out	0x3e, r31	; 62
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	ed bf       	out	0x3d, r30	; 61
    2f0e:	80 91 06 05 	lds	r24, 0x0506
    2f12:	60 91 08 06 	lds	r22, 0x0608
    2f16:	41 e0       	ldi	r20, 0x01	; 1
    2f18:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(500);//wait 3 seconds
    2f1c:	84 ef       	ldi	r24, 0xF4	; 244
    2f1e:	91 e0       	ldi	r25, 0x01	; 1
    2f20:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
{
	// Initialize State
	isMapping = 1;
	
	// Mapping Loop
	while(isMapping)
    2f24:	80 91 a1 06 	lds	r24, 0x06A1
    2f28:	88 23       	and	r24, r24
    2f2a:	09 f0       	breq	.+2      	; 0x2f2e <map+0x272>
    2f2c:	d5 ce       	rjmp	.-598    	; 0x2cd8 <map+0x1c>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
		printMap(currentOrientation,currentCellWorld,RESET);
		TMRSRVC_delay(500);//wait 3 seconds
	}
	
}
    2f2e:	df 91       	pop	r29
    2f30:	cf 91       	pop	r28
    2f32:	1f 91       	pop	r17
    2f34:	0f 91       	pop	r16
    2f36:	ff 90       	pop	r15
    2f38:	ef 90       	pop	r14
    2f3a:	08 95       	ret

00002f3c <metric>:
* Input Variables:	none
* Output Return:	none
* Overview:			Moves the robot to the goal
********************************************************************/
void metric (void)
{
    2f3c:	1f 93       	push	r17
	// currentCellWorld = 0b0000;
	// currentGoalWorld = 15;
	
	// Initialize State
	isGoal = 0;
    2f3e:	10 92 9d 06 	sts	0x069D, r1
    2f42:	10 e0       	ldi	r17, 0x00	; 0
    2f44:	6b c0       	rjmp	.+214    	; 0x301c <metric+0xe0>
	unsigned char isSiren = 0;
	
	// Metric Loop 
	while(!isGoal){
		
		if(isSiren){
    2f46:	11 23       	and	r17, r17
    2f48:	41 f0       	breq	.+16     	; 0x2f5a <metric+0x1e>
			SPKR_beep(500);
    2f4a:	64 ef       	ldi	r22, 0xF4	; 244
    2f4c:	71 e0       	ldi	r23, 0x01	; 1
    2f4e:	80 e0       	ldi	r24, 0x00	; 0
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	0e 94 0e 1b 	call	0x361c	; 0x361c <SPKR_beep>
    2f56:	10 e0       	ldi	r17, 0x00	; 0
    2f58:	07 c0       	rjmp	.+14     	; 0x2f68 <metric+0x2c>
			isSiren = 0;
		}
		else{
			SPKR_beep(250);
    2f5a:	6a ef       	ldi	r22, 0xFA	; 250
    2f5c:	70 e0       	ldi	r23, 0x00	; 0
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	0e 94 0e 1b 	call	0x361c	; 0x361c <SPKR_beep>
    2f66:	11 e0       	ldi	r17, 0x01	; 1
			isSiren = 1;
		}
	
		LCD_clear();
    2f68:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
		
		switch(currentOrientation){
    2f6c:	80 91 06 05 	lds	r24, 0x0506
    2f70:	81 30       	cpi	r24, 0x01	; 1
    2f72:	51 f0       	breq	.+20     	; 0x2f88 <metric+0x4c>
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	28 f0       	brcs	.+10     	; 0x2f82 <metric+0x46>
    2f78:	82 30       	cpi	r24, 0x02	; 2
    2f7a:	49 f0       	breq	.+18     	; 0x2f8e <metric+0x52>
    2f7c:	83 30       	cpi	r24, 0x03	; 3
    2f7e:	71 f4       	brne	.+28     	; 0x2f9c <metric+0x60>
    2f80:	09 c0       	rjmp	.+18     	; 0x2f94 <metric+0x58>
			case NORTH:
				LCD_printf("CurtOrent:NORTH\n");
    2f82:	8d ed       	ldi	r24, 0xDD	; 221
    2f84:	91 e0       	ldi	r25, 0x01	; 1
    2f86:	08 c0       	rjmp	.+16     	; 0x2f98 <metric+0x5c>
				break;
			case EAST:
				LCD_printf("CurtOrent:EAST\n");
    2f88:	8d ee       	ldi	r24, 0xED	; 237
    2f8a:	91 e0       	ldi	r25, 0x01	; 1
    2f8c:	05 c0       	rjmp	.+10     	; 0x2f98 <metric+0x5c>
				break;
			case SOUTH:
				LCD_printf("CurtOrent:SOUTH\n");
    2f8e:	8c ef       	ldi	r24, 0xFC	; 252
    2f90:	91 e0       	ldi	r25, 0x01	; 1
    2f92:	02 c0       	rjmp	.+4      	; 0x2f98 <metric+0x5c>
				break;
			case WEST:
				LCD_printf("CurtOrent:WEST\n");
    2f94:	8c e0       	ldi	r24, 0x0C	; 12
    2f96:	92 e0       	ldi	r25, 0x02	; 2
    2f98:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
			default:
				break;
		}
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    2f9c:	80 91 08 06 	lds	r24, 0x0608
    2fa0:	0e 94 90 12 	call	0x2520	; 0x2520 <fourNeighborSearch>
    2fa4:	80 93 9d 06 	sts	0x069D, r24
		if(isGoal){
    2fa8:	88 23       	and	r24, r24
    2faa:	e9 f5       	brne	.+122    	; 0x3026 <metric+0xea>
			break;
		}
				
		switch(nextOrientation){
    2fac:	80 91 07 05 	lds	r24, 0x0507
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	51 f0       	breq	.+20     	; 0x2fc8 <metric+0x8c>
    2fb4:	81 30       	cpi	r24, 0x01	; 1
    2fb6:	28 f0       	brcs	.+10     	; 0x2fc2 <metric+0x86>
    2fb8:	82 30       	cpi	r24, 0x02	; 2
    2fba:	49 f0       	breq	.+18     	; 0x2fce <metric+0x92>
    2fbc:	83 30       	cpi	r24, 0x03	; 3
    2fbe:	71 f4       	brne	.+28     	; 0x2fdc <metric+0xa0>
    2fc0:	09 c0       	rjmp	.+18     	; 0x2fd4 <metric+0x98>
			case NORTH:
				LCD_printf("NextOrent:NORTH\n");
    2fc2:	8b e1       	ldi	r24, 0x1B	; 27
    2fc4:	92 e0       	ldi	r25, 0x02	; 2
    2fc6:	08 c0       	rjmp	.+16     	; 0x2fd8 <metric+0x9c>
				break;
			case EAST:
				LCD_printf("NextOrent:EAST\n");
    2fc8:	8b e2       	ldi	r24, 0x2B	; 43
    2fca:	92 e0       	ldi	r25, 0x02	; 2
    2fcc:	05 c0       	rjmp	.+10     	; 0x2fd8 <metric+0x9c>
				break;
			case SOUTH:
				LCD_printf("NextOrent:SOUTH\n");
    2fce:	8a e3       	ldi	r24, 0x3A	; 58
    2fd0:	92 e0       	ldi	r25, 0x02	; 2
    2fd2:	02 c0       	rjmp	.+4      	; 0x2fd8 <metric+0x9c>
				break;
			case WEST:
				LCD_printf("NextOrent:WEST\n");
    2fd4:	8a e4       	ldi	r24, 0x4A	; 74
    2fd6:	92 e0       	ldi	r25, 0x02	; 2
    2fd8:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
				break;
			default:
				break;
		}
		
		switch(currentMove){
    2fdc:	80 91 ef 03 	lds	r24, 0x03EF
    2fe0:	82 30       	cpi	r24, 0x02	; 2
    2fe2:	51 f0       	breq	.+20     	; 0x2ff8 <metric+0xbc>
    2fe4:	83 30       	cpi	r24, 0x03	; 3
    2fe6:	29 f0       	breq	.+10     	; 0x2ff2 <metric+0xb6>
    2fe8:	81 30       	cpi	r24, 0x01	; 1
    2fea:	51 f4       	brne	.+20     	; 0x3000 <metric+0xc4>
			case MOVE_LEFT:
				LCD_printf("CurMOVE:LEFT\n");
    2fec:	89 e5       	ldi	r24, 0x59	; 89
    2fee:	92 e0       	ldi	r25, 0x02	; 2
    2ff0:	05 c0       	rjmp	.+10     	; 0x2ffc <metric+0xc0>
				break;
			case MOVE_RIGHT:
				LCD_printf("CurMOVE:RIGHT\n");
    2ff2:	86 e6       	ldi	r24, 0x66	; 102
    2ff4:	92 e0       	ldi	r25, 0x02	; 2
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <metric+0xc0>
				break;
			case MOVE_FORWARD:
				LCD_printf("CurMOVE:FORWARD\n");
    2ff8:	84 e7       	ldi	r24, 0x74	; 116
    2ffa:	92 e0       	ldi	r25, 0x02	; 2
    2ffc:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
			default:
				break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    3000:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <planMetric>
		
		// Act on the move
		moveMap();
    3004:	0e 94 f7 15 	call	0x2bee	; 0x2bee <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    3008:	80 91 08 06 	lds	r24, 0x0608
    300c:	60 91 ef 03 	lds	r22, 0x03EF
    3010:	40 91 06 05 	lds	r20, 0x0506
    3014:	0e 94 9e 13 	call	0x273c	; 0x273c <shiftMap>
    3018:	80 93 08 06 	sts	0x0608, r24
	// Initialize State
	isGoal = 0;
	unsigned char isSiren = 0;
	
	// Metric Loop 
	while(!isGoal){
    301c:	80 91 9d 06 	lds	r24, 0x069D
    3020:	88 23       	and	r24, r24
    3022:	09 f4       	brne	.+2      	; 0x3026 <metric+0xea>
    3024:	90 cf       	rjmp	.-224    	; 0x2f46 <metric+0xa>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
		// TMRSRVC_delay(2000);//wait 1 seconds
	}
	SPKR_beep(0);
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	70 e0       	ldi	r23, 0x00	; 0
    302a:	80 e0       	ldi	r24, 0x00	; 0
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	0e 94 0e 1b 	call	0x361c	; 0x361c <SPKR_beep>
}
    3032:	1f 91       	pop	r17
    3034:	08 95       	ret

00003036 <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    3036:	1f 93       	push	r17
		
	// initialize the robot
	initializeRobot();
    3038:	0e 94 45 12 	call	0x248a	; 0x248a <initializeRobot>
	currentOrientation = NORTH;
    303c:	10 92 06 05 	sts	0x0506, r1
	
	// Ask for Goal
	char isDone = 0;
	unsigned char btnHolder = UNPRESSED;
	LCD_clear();
    3040:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
	LCD_printf("      Goal?\n\n\n\n");
    3044:	84 e8       	ldi	r24, 0x84	; 132
    3046:	92 e0       	ldi	r25, 0x02	; 2
    3048:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
	while(!isDone){
		btnHolder = EnterTopoCommand();
    304c:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
		switch(btnHolder){
    3050:	82 30       	cpi	r24, 0x02	; 2
    3052:	29 f0       	breq	.+10     	; 0x305e <CBOT_main+0x28>
    3054:	83 30       	cpi	r24, 0x03	; 3
    3056:	49 f0       	breq	.+18     	; 0x306a <CBOT_main+0x34>
    3058:	81 30       	cpi	r24, 0x01	; 1
    305a:	69 f4       	brne	.+26     	; 0x3076 <CBOT_main+0x40>
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <CBOT_main+0x2c>
    305e:	11 e0       	ldi	r17, 0x01	; 1
    3060:	0b c0       	rjmp	.+22     	; 0x3078 <CBOT_main+0x42>
			case MOVE_LEFT:
				currentGoalWorld--;
    3062:	80 91 77 04 	lds	r24, 0x0477
    3066:	81 50       	subi	r24, 0x01	; 1
    3068:	03 c0       	rjmp	.+6      	; 0x3070 <CBOT_main+0x3a>
				break;
			case MOVE_FORWARD:
				isDone = 1;
				break;
			case MOVE_RIGHT:
				currentGoalWorld++;
    306a:	80 91 77 04 	lds	r24, 0x0477
    306e:	8f 5f       	subi	r24, 0xFF	; 255
				currentGoalWorld = currentGoalWorld&0b1111;
    3070:	8f 70       	andi	r24, 0x0F	; 15
    3072:	80 93 77 04 	sts	0x0477, r24
    3076:	10 e0       	ldi	r17, 0x00	; 0
				break;
			default:
				break;
		}
		printMap(currentOrientation,currentGoalWorld,RESET);
    3078:	80 91 06 05 	lds	r24, 0x0506
    307c:	60 91 77 04 	lds	r22, 0x0477
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(100);//wait .1 seconds
    3086:	84 e6       	ldi	r24, 0x64	; 100
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
	// Ask for Goal
	char isDone = 0;
	unsigned char btnHolder = UNPRESSED;
	LCD_clear();
	LCD_printf("      Goal?\n\n\n\n");
	while(!isDone){
    308e:	11 23       	and	r17, r17
    3090:	e9 f2       	breq	.-70     	; 0x304c <CBOT_main+0x16>
	}
	
	// Ask for starting orentation
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
    3092:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
	LCD_printf("      Orient?\n\n\n\n");
    3096:	83 e9       	ldi	r24, 0x93	; 147
    3098:	92 e0       	ldi	r25, 0x02	; 2
    309a:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
	while(!isDone){
		btnHolder = EnterTopoCommand();
    309e:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
		switch(btnHolder){
    30a2:	82 30       	cpi	r24, 0x02	; 2
    30a4:	29 f0       	breq	.+10     	; 0x30b0 <CBOT_main+0x7a>
    30a6:	83 30       	cpi	r24, 0x03	; 3
    30a8:	49 f0       	breq	.+18     	; 0x30bc <CBOT_main+0x86>
    30aa:	81 30       	cpi	r24, 0x01	; 1
    30ac:	69 f4       	brne	.+26     	; 0x30c8 <CBOT_main+0x92>
    30ae:	02 c0       	rjmp	.+4      	; 0x30b4 <CBOT_main+0x7e>
    30b0:	11 e0       	ldi	r17, 0x01	; 1
    30b2:	0b c0       	rjmp	.+22     	; 0x30ca <CBOT_main+0x94>
			case MOVE_LEFT:
				// If we move left
				// shift our oriention CCW
				currentOrientation--;
    30b4:	80 91 06 05 	lds	r24, 0x0506
    30b8:	81 50       	subi	r24, 0x01	; 1
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <CBOT_main+0x8c>
				isDone = 1;
				break;
			case MOVE_RIGHT:
				// If we move right
				// shift our oriention CW
				currentOrientation++;
    30bc:	80 91 06 05 	lds	r24, 0x0506
    30c0:	8f 5f       	subi	r24, 0xFF	; 255
				currentOrientation = currentOrientation&0b11;
    30c2:	83 70       	andi	r24, 0x03	; 3
    30c4:	80 93 06 05 	sts	0x0506, r24
    30c8:	10 e0       	ldi	r17, 0x00	; 0
				break;
			default:
				break;
		}
		printMap(currentOrientation,currentGoalWorld,RESET);
    30ca:	80 91 06 05 	lds	r24, 0x0506
    30ce:	60 91 77 04 	lds	r22, 0x0477
    30d2:	41 e0       	ldi	r20, 0x01	; 1
    30d4:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(100);//wait .1 seconds
    30d8:	84 e6       	ldi	r24, 0x64	; 100
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
	// Ask for starting orentation
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
	LCD_printf("      Orient?\n\n\n\n");
	while(!isDone){
    30e0:	11 23       	and	r17, r17
    30e2:	e9 f2       	breq	.-70     	; 0x309e <CBOT_main+0x68>
	}
	
	// Ask to start
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
    30e4:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
	LCD_printf("      Start?\n\n\n\n");
    30e8:	84 ea       	ldi	r24, 0xA4	; 164
    30ea:	92 e0       	ldi	r25, 0x02	; 2
    30ec:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
	while(!isDone){
		btnHolder = EnterTopoCommand();
    30f0:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
		switch(btnHolder){
    30f4:	82 30       	cpi	r24, 0x02	; 2
    30f6:	11 f4       	brne	.+4      	; 0x30fc <CBOT_main+0xc6>
    30f8:	11 e0       	ldi	r17, 0x01	; 1
    30fa:	01 c0       	rjmp	.+2      	; 0x30fe <CBOT_main+0xc8>
    30fc:	10 e0       	ldi	r17, 0x00	; 0
			case MOVE_RIGHT:
				break;
			default:
				break;
		}
		printMap(currentOrientation,currentGoalWorld,RESET);
    30fe:	80 91 06 05 	lds	r24, 0x0506
    3102:	60 91 77 04 	lds	r22, 0x0477
    3106:	41 e0       	ldi	r20, 0x01	; 1
    3108:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(100);//wait .1 seconds
    310c:	84 e6       	ldi	r24, 0x64	; 100
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
	// Ask to start
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
	LCD_printf("      Start?\n\n\n\n");
	while(!isDone){
    3114:	11 23       	and	r17, r17
    3116:	61 f3       	breq	.-40     	; 0x30f0 <CBOT_main+0xba>
		TMRSRVC_delay(100);//wait .1 seconds
	}
	
	
	// Get the cell current row and column
	unsigned char curRow = (currentCellWorld>>2);
    3118:	60 91 08 06 	lds	r22, 0x0608
	unsigned char curCol = (currentCellWorld&0b0011);
	
	// Make metric map
	wavefrontMake(curRow,curCol,0);
    311c:	86 2f       	mov	r24, r22
    311e:	86 95       	lsr	r24
    3120:	86 95       	lsr	r24
    3122:	63 70       	andi	r22, 0x03	; 3
    3124:	40 e0       	ldi	r20, 0x00	; 0
    3126:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <wavefrontMake>
	
	// Locilize the Robot
	// localize();
	
	// Initialize State
	isLost = 1;
    312a:	81 e0       	ldi	r24, 0x01	; 1
    312c:	80 93 9e 06 	sts	0x069E, r24
	oldMove = MOVE_STOP;
    3130:	84 e0       	ldi	r24, 0x04	; 4
    3132:	80 93 f0 03 	sts	0x03F0, r24
    3136:	0c c0       	rjmp	.+24     	; 0x3150 <CBOT_main+0x11a>
		if(!isLost){
			break;
		}
		
		//Sense Gateway
		checkIR();	
    3138:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
		checkWorld();
    313c:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    3140:	0e 94 92 14 	call	0x2924	; 0x2924 <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    3144:	0e 94 1d 14 	call	0x283a	; 0x283a <localizeGateway>
    3148:	80 93 9e 06 	sts	0x069E, r24
		
		//Act on the Gateway
		moveMap();
    314c:	0e 94 f7 15 	call	0x2bee	; 0x2bee <moveMap>
	// Initialize State
	isLost = 1;
	oldMove = MOVE_STOP;
	
	// Localization Loop 
	while(isLost)
    3150:	80 91 9e 06 	lds	r24, 0x069E
    3154:	88 23       	and	r24, r24
    3156:	81 f7       	brne	.-32     	; 0x3138 <CBOT_main+0x102>
		// default:
			// LCD_printf("Whatz2?!");
			// break;
	// }
	
		SPKR_beep(500);	
    3158:	64 ef       	ldi	r22, 0xF4	; 244
    315a:	71 e0       	ldi	r23, 0x01	; 1
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	0e 94 0e 1b 	call	0x361c	; 0x361c <SPKR_beep>
		// LCD_clear();
		// LCD_printf("LOLZ\nI'm found!");
		// TMRSRVC_delay(3000);//wait 3 seconds
		
		LCD_clear();
    3164:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
		LCD_printf("      New Map\n\n\n\n");
    3168:	84 eb       	ldi	r24, 0xB4	; 180
    316a:	92 e0       	ldi	r25, 0x02	; 2
    316c:	0e 94 15 36 	call	0x6c2a	; 0x6c2a <puts>
		printMap(currentOrientation,currentCellWorld,RESET);
    3170:	80 91 06 05 	lds	r24, 0x0506
    3174:	60 91 08 06 	lds	r22, 0x0608
    3178:	41 e0       	ldi	r20, 0x01	; 1
    317a:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(5000);//wait 1 seconds
    317e:	88 e8       	ldi	r24, 0x88	; 136
    3180:	93 e1       	ldi	r25, 0x13	; 19
    3182:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
		SPKR_beep(0);
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	70 e0       	ldi	r23, 0x00	; 0
    318a:	80 e0       	ldi	r24, 0x00	; 0
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	0e 94 0e 1b 	call	0x361c	; 0x361c <SPKR_beep>
		
		
	// currentCellWorld = 0;
	isFire = 0;
    3192:	10 92 9f 06 	sts	0x069F, r1
    3196:	18 c0       	rjmp	.+48     	; 0x31c8 <CBOT_main+0x192>
	
	// Go firefight
	while(!isFire){
		//Sense Gateway
		checkIR();	
    3198:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
		checkWorld();
    319c:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		isFire = checkFire();
    31a0:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <checkFire>
    31a4:	80 93 9f 06 	sts	0x069F, r24
		if(isFire){
    31a8:	88 23       	and	r24, r24
    31aa:	91 f4       	brne	.+36     	; 0x31d0 <CBOT_main+0x19a>
			break;
		}
		
		// Plan using Map
		planMap();
    31ac:	0e 94 68 14 	call	0x28d0	; 0x28d0 <planMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    31b0:	80 91 08 06 	lds	r24, 0x0608
    31b4:	60 91 ef 03 	lds	r22, 0x03EF
    31b8:	40 91 06 05 	lds	r20, 0x0506
    31bc:	0e 94 9e 13 	call	0x273c	; 0x273c <shiftMap>
    31c0:	80 93 08 06 	sts	0x0608, r24
		
		// Act on the Map
		moveMap();
    31c4:	0e 94 f7 15 	call	0x2bee	; 0x2bee <moveMap>
		
	// currentCellWorld = 0;
	isFire = 0;
	
	// Go firefight
	while(!isFire){
    31c8:	80 91 9f 06 	lds	r24, 0x069F
    31cc:	88 23       	and	r24, r24
    31ce:	21 f3       	breq	.-56     	; 0x3198 <CBOT_main+0x162>
	// LCD_clear();
	// LCD_printf("Fire = %i\n\n\n\n", currentFireCell);
	// TMRSRVC_delay(5000);
	
	// Moves the Robot to the goal
	metric();
    31d0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <metric>
	
		
		// Print that you are at home and the fire cell location
		LCD_clear();
    31d4:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
		LCD_printf("LOLZ\nI'm HOME\nFire at Cell: %i\n\n",currentFireCell);
    31d8:	00 d0       	rcall	.+0      	; 0x31da <CBOT_main+0x1a4>
    31da:	00 d0       	rcall	.+0      	; 0x31dc <CBOT_main+0x1a6>
    31dc:	ed b7       	in	r30, 0x3d	; 61
    31de:	fe b7       	in	r31, 0x3e	; 62
    31e0:	31 96       	adiw	r30, 0x01	; 1
    31e2:	85 ec       	ldi	r24, 0xC5	; 197
    31e4:	92 e0       	ldi	r25, 0x02	; 2
    31e6:	ad b7       	in	r26, 0x3d	; 61
    31e8:	be b7       	in	r27, 0x3e	; 62
    31ea:	12 96       	adiw	r26, 0x02	; 2
    31ec:	9c 93       	st	X, r25
    31ee:	8e 93       	st	-X, r24
    31f0:	11 97       	sbiw	r26, 0x01	; 1
    31f2:	80 91 98 06 	lds	r24, 0x0698
    31f6:	82 83       	std	Z+2, r24	; 0x02
    31f8:	13 82       	std	Z+3, r1	; 0x03
    31fa:	0e 94 03 36 	call	0x6c06	; 0x6c06 <printf>
		// Stop when home is reached
		STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	82 e0       	ldi	r24, 0x02	; 2
    3208:	60 e0       	ldi	r22, 0x00	; 0
    320a:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <STEPPER_stop>
		// Beep when home is reached
		SPKR_beep(500);
    320e:	64 ef       	ldi	r22, 0xF4	; 244
    3210:	71 e0       	ldi	r23, 0x01	; 1
    3212:	80 e0       	ldi	r24, 0x00	; 0
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	0e 94 0e 1b 	call	0x361c	; 0x361c <SPKR_beep>
		TMRSRVC_delay(3000);//wait 3 seconds
    321a:	88 eb       	ldi	r24, 0xB8	; 184
    321c:	9b e0       	ldi	r25, 0x0B	; 11
    321e:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
		SPKR_beep(0);
    3222:	60 e0       	ldi	r22, 0x00	; 0
    3224:	70 e0       	ldi	r23, 0x00	; 0
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	0e 94 0e 1b 	call	0x361c	; 0x361c <SPKR_beep>
		TMRSRVC_delay(7000);//wait 7 seconds
    322e:	88 e5       	ldi	r24, 0x58	; 88
    3230:	9b e1       	ldi	r25, 0x1B	; 27
    3232:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/

}// end the CBOT_main()
    3236:	1f 91       	pop	r17
    3238:	08 95       	ret

0000323a <ADC_open>:
    323a:	8f e0       	ldi	r24, 0x0F	; 15
    323c:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    3240:	88 23       	and	r24, r24
    3242:	31 f4       	brne	.+12     	; 0x3250 <ADC_open+0x16>
    3244:	0e 94 b7 21 	call	0x436e	; 0x436e <__ADC_init>
    3248:	8f e0       	ldi	r24, 0x0F	; 15
    324a:	61 e0       	ldi	r22, 0x01	; 1
    324c:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    3250:	8f e0       	ldi	r24, 0x0F	; 15
    3252:	91 e0       	ldi	r25, 0x01	; 1
    3254:	08 95       	ret

00003256 <ADC_sample>:
    3256:	8f e0       	ldi	r24, 0x0F	; 15
    3258:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    325c:	81 30       	cpi	r24, 0x01	; 1
    325e:	19 f0       	breq	.+6      	; 0x3266 <ADC_sample+0x10>
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	30 e0       	ldi	r19, 0x00	; 0
    3264:	13 c0       	rjmp	.+38     	; 0x328c <ADC_sample+0x36>
    3266:	80 91 7a 00 	lds	r24, 0x007A
    326a:	80 64       	ori	r24, 0x40	; 64
    326c:	80 93 7a 00 	sts	0x007A, r24
    3270:	80 91 7a 00 	lds	r24, 0x007A
    3274:	86 fd       	sbrc	r24, 6
    3276:	fc cf       	rjmp	.-8      	; 0x3270 <ADC_sample+0x1a>
    3278:	30 91 78 00 	lds	r19, 0x0078
    327c:	20 91 79 00 	lds	r18, 0x0079
    3280:	92 2f       	mov	r25, r18
    3282:	80 e0       	ldi	r24, 0x00	; 0
    3284:	23 2f       	mov	r18, r19
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	28 2b       	or	r18, r24
    328a:	39 2b       	or	r19, r25
    328c:	c9 01       	movw	r24, r18
    328e:	08 95       	ret

00003290 <ADC_set_channel>:
    3290:	58 2f       	mov	r21, r24
    3292:	80 91 f6 02 	lds	r24, 0x02F6
    3296:	88 30       	cpi	r24, 0x08	; 8
    3298:	d8 f4       	brcc	.+54     	; 0x32d0 <ADC_set_channel+0x40>
    329a:	40 91 7e 00 	lds	r20, 0x007E
    329e:	21 e0       	ldi	r18, 0x01	; 1
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	b9 01       	movw	r22, r18
    32a4:	02 c0       	rjmp	.+4      	; 0x32aa <ADC_set_channel+0x1a>
    32a6:	66 0f       	add	r22, r22
    32a8:	77 1f       	adc	r23, r23
    32aa:	8a 95       	dec	r24
    32ac:	e2 f7       	brpl	.-8      	; 0x32a6 <ADC_set_channel+0x16>
    32ae:	cb 01       	movw	r24, r22
    32b0:	80 95       	com	r24
    32b2:	84 23       	and	r24, r20
    32b4:	80 93 7e 00 	sts	0x007E, r24
    32b8:	80 91 7e 00 	lds	r24, 0x007E
    32bc:	05 2e       	mov	r0, r21
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <ADC_set_channel+0x34>
    32c0:	22 0f       	add	r18, r18
    32c2:	33 1f       	adc	r19, r19
    32c4:	0a 94       	dec	r0
    32c6:	e2 f7       	brpl	.-8      	; 0x32c0 <ADC_set_channel+0x30>
    32c8:	82 2b       	or	r24, r18
    32ca:	80 93 7e 00 	sts	0x007E, r24
    32ce:	0d c0       	rjmp	.+26     	; 0x32ea <ADC_set_channel+0x5a>
    32d0:	20 91 7e 00 	lds	r18, 0x007E
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	90 e0       	ldi	r25, 0x00	; 0
    32d8:	05 2e       	mov	r0, r21
    32da:	02 c0       	rjmp	.+4      	; 0x32e0 <ADC_set_channel+0x50>
    32dc:	88 0f       	add	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	0a 94       	dec	r0
    32e2:	e2 f7       	brpl	.-8      	; 0x32dc <ADC_set_channel+0x4c>
    32e4:	28 2b       	or	r18, r24
    32e6:	20 93 7e 00 	sts	0x007E, r18
    32ea:	50 93 f6 02 	sts	0x02F6, r21
    32ee:	80 91 7c 00 	lds	r24, 0x007C
    32f2:	5f 71       	andi	r21, 0x1F	; 31
    32f4:	80 7e       	andi	r24, 0xE0	; 224
    32f6:	85 2b       	or	r24, r21
    32f8:	80 93 7c 00 	sts	0x007C, r24
    32fc:	08 95       	ret

000032fe <ADC_set_VREF>:
    32fe:	ec e7       	ldi	r30, 0x7C	; 124
    3300:	f0 e0       	ldi	r31, 0x00	; 0
    3302:	90 81       	ld	r25, Z
    3304:	82 95       	swap	r24
    3306:	88 0f       	add	r24, r24
    3308:	88 0f       	add	r24, r24
    330a:	80 7c       	andi	r24, 0xC0	; 192
    330c:	9f 73       	andi	r25, 0x3F	; 63
    330e:	98 2b       	or	r25, r24
    3310:	90 83       	st	Z, r25
    3312:	08 95       	ret

00003314 <main>:
    3314:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <CBOT_ISR_init>
    3318:	0e 94 c2 21 	call	0x4384	; 0x4384 <CBOT_init>
    331c:	0e 94 1b 18 	call	0x3036	; 0x3036 <CBOT_main>
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	08 95       	ret

00003326 <LCD_clear>:
    3326:	0f 93       	push	r16
    3328:	1f 93       	push	r17
    332a:	80 e4       	ldi	r24, 0x40	; 64
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    3332:	00 e0       	ldi	r16, 0x00	; 0
    3334:	80 2f       	mov	r24, r16
    3336:	60 e0       	ldi	r22, 0x00	; 0
    3338:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <LCD_set_PGC_addr>
    333c:	10 e0       	ldi	r17, 0x00	; 0
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	61 e0       	ldi	r22, 0x01	; 1
    3342:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    3346:	1f 5f       	subi	r17, 0xFF	; 255
    3348:	10 38       	cpi	r17, 0x80	; 128
    334a:	c9 f7       	brne	.-14     	; 0x333e <LCD_clear+0x18>
    334c:	0f 5f       	subi	r16, 0xFF	; 255
    334e:	04 30       	cpi	r16, 0x04	; 4
    3350:	89 f7       	brne	.-30     	; 0x3334 <LCD_clear+0xe>
    3352:	83 e0       	ldi	r24, 0x03	; 3
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <LCD_set_next_PGC>
    335a:	1f 91       	pop	r17
    335c:	0f 91       	pop	r16
    335e:	08 95       	ret

00003360 <LCD_open>:
    3360:	0f 93       	push	r16
    3362:	1f 93       	push	r17
    3364:	82 e0       	ldi	r24, 0x02	; 2
    3366:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    336a:	88 23       	and	r24, r24
    336c:	11 f4       	brne	.+4      	; 0x3372 <LCD_open+0x12>
    336e:	82 e0       	ldi	r24, 0x02	; 2
    3370:	06 c0       	rjmp	.+12     	; 0x337e <LCD_open+0x1e>
    3372:	81 e0       	ldi	r24, 0x01	; 1
    3374:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    3378:	88 23       	and	r24, r24
    337a:	19 f4       	brne	.+6      	; 0x3382 <LCD_open+0x22>
    337c:	81 e0       	ldi	r24, 0x01	; 1
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	6d c0       	rjmp	.+218    	; 0x345c <LCD_open+0xfc>
    3382:	0e 94 38 24 	call	0x4870	; 0x4870 <__LCD_init>
    3386:	85 e0       	ldi	r24, 0x05	; 5
    3388:	61 e0       	ldi	r22, 0x01	; 1
    338a:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    338e:	8e ea       	ldi	r24, 0xAE	; 174
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    3396:	82 ea       	ldi	r24, 0xA2	; 162
    3398:	60 e0       	ldi	r22, 0x00	; 0
    339a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    339e:	80 ea       	ldi	r24, 0xA0	; 160
    33a0:	60 e0       	ldi	r22, 0x00	; 0
    33a2:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    33a6:	00 e5       	ldi	r16, 0x50	; 80
    33a8:	13 ec       	ldi	r17, 0xC3	; 195
    33aa:	c8 01       	movw	r24, r16
    33ac:	01 97       	sbiw	r24, 0x01	; 1
    33ae:	f1 f7       	brne	.-4      	; 0x33ac <LCD_open+0x4c>
    33b0:	80 ec       	ldi	r24, 0xC0	; 192
    33b2:	60 e0       	ldi	r22, 0x00	; 0
    33b4:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    33b8:	8f e2       	ldi	r24, 0x2F	; 47
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    33c0:	81 e8       	ldi	r24, 0x81	; 129
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    33c8:	86 e1       	ldi	r24, 0x16	; 22
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    33d0:	82 e2       	ldi	r24, 0x22	; 34
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    33d8:	c8 01       	movw	r24, r16
    33da:	01 97       	sbiw	r24, 0x01	; 1
    33dc:	f1 f7       	brne	.-4      	; 0x33da <LCD_open+0x7a>
    33de:	8f ea       	ldi	r24, 0xAF	; 175
    33e0:	60 e0       	ldi	r22, 0x00	; 0
    33e2:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    33e6:	86 ea       	ldi	r24, 0xA6	; 166
    33e8:	60 e0       	ldi	r22, 0x00	; 0
    33ea:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    33ee:	85 ea       	ldi	r24, 0xA5	; 165
    33f0:	60 e0       	ldi	r22, 0x00	; 0
    33f2:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    33f6:	80 e0       	ldi	r24, 0x00	; 0
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	28 e8       	ldi	r18, 0x88	; 136
    33fc:	33 e1       	ldi	r19, 0x13	; 19
    33fe:	f9 01       	movw	r30, r18
    3400:	31 97       	sbiw	r30, 0x01	; 1
    3402:	f1 f7       	brne	.-4      	; 0x3400 <LCD_open+0xa0>
    3404:	01 96       	adiw	r24, 0x01	; 1
    3406:	43 e0       	ldi	r20, 0x03	; 3
    3408:	88 3e       	cpi	r24, 0xE8	; 232
    340a:	94 07       	cpc	r25, r20
    340c:	c1 f7       	brne	.-16     	; 0x33fe <LCD_open+0x9e>
    340e:	83 eb       	ldi	r24, 0xB3	; 179
    3410:	60 e0       	ldi	r22, 0x00	; 0
    3412:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    3416:	80 e4       	ldi	r24, 0x40	; 64
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    341e:	83 e0       	ldi	r24, 0x03	; 3
    3420:	60 e0       	ldi	r22, 0x00	; 0
    3422:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <LCD_set_PGC_addr>
    3426:	83 e0       	ldi	r24, 0x03	; 3
    3428:	60 e0       	ldi	r22, 0x00	; 0
    342a:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <LCD_set_next_PGC>
    342e:	10 92 f0 06 	sts	0x06F0, r1
    3432:	10 92 f2 06 	sts	0x06F2, r1
    3436:	10 92 f1 06 	sts	0x06F1, r1
    343a:	8d e3       	ldi	r24, 0x3D	; 61
    343c:	93 e0       	ldi	r25, 0x03	; 3
    343e:	90 93 21 07 	sts	0x0721, r25
    3442:	80 93 20 07 	sts	0x0720, r24
    3446:	88 e1       	ldi	r24, 0x18	; 24
    3448:	0e 94 31 1a 	call	0x3462	; 0x3462 <LCD_set_backlight>
    344c:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
    3450:	84 ea       	ldi	r24, 0xA4	; 164
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    3458:	85 e0       	ldi	r24, 0x05	; 5
    345a:	91 e0       	ldi	r25, 0x01	; 1
    345c:	1f 91       	pop	r17
    345e:	0f 91       	pop	r16
    3460:	08 95       	ret

00003462 <LCD_set_backlight>:
    3462:	1f 93       	push	r17
    3464:	18 2f       	mov	r17, r24
    3466:	85 e0       	ldi	r24, 0x05	; 5
    3468:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    346c:	81 30       	cpi	r24, 0x01	; 1
    346e:	c1 f4       	brne	.+48     	; 0x34a0 <LCD_set_backlight+0x3e>
    3470:	87 e0       	ldi	r24, 0x07	; 7
    3472:	0e 94 ae 1a 	call	0x355c	; 0x355c <SPI_set_slave_addr>
    3476:	82 e0       	ldi	r24, 0x02	; 2
    3478:	6a e0       	ldi	r22, 0x0A	; 10
    347a:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <SPI_transmit>
    347e:	82 e0       	ldi	r24, 0x02	; 2
    3480:	61 eb       	ldi	r22, 0xB1	; 177
    3482:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <SPI_transmit>
    3486:	61 2f       	mov	r22, r17
    3488:	11 32       	cpi	r17, 0x21	; 33
    348a:	08 f0       	brcs	.+2      	; 0x348e <LCD_set_backlight+0x2c>
    348c:	60 e2       	ldi	r22, 0x20	; 32
    348e:	82 e0       	ldi	r24, 0x02	; 2
    3490:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <SPI_transmit>
    3494:	89 ee       	ldi	r24, 0xE9	; 233
    3496:	8a 95       	dec	r24
    3498:	f1 f7       	brne	.-4      	; 0x3496 <LCD_set_backlight+0x34>
    349a:	87 e0       	ldi	r24, 0x07	; 7
    349c:	0e 94 ae 1a 	call	0x355c	; 0x355c <SPI_set_slave_addr>
    34a0:	1f 91       	pop	r17
    34a2:	08 95       	ret

000034a4 <LCD_set_next_PGC>:
    34a4:	83 70       	andi	r24, 0x03	; 3
    34a6:	6f 77       	andi	r22, 0x7F	; 127
    34a8:	60 93 ee 06 	sts	0x06EE, r22
    34ac:	80 93 ef 06 	sts	0x06EF, r24
    34b0:	08 95       	ret

000034b2 <LCD_set_PGC_addr>:
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	06 2f       	mov	r16, r22
    34b8:	16 2f       	mov	r17, r22
    34ba:	1f 77       	andi	r17, 0x7F	; 127
    34bc:	83 70       	andi	r24, 0x03	; 3
    34be:	80 6b       	ori	r24, 0xB0	; 176
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    34c6:	12 95       	swap	r17
    34c8:	1f 70       	andi	r17, 0x0F	; 15
    34ca:	81 2f       	mov	r24, r17
    34cc:	80 61       	ori	r24, 0x10	; 16
    34ce:	60 e0       	ldi	r22, 0x00	; 0
    34d0:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    34d4:	80 2f       	mov	r24, r16
    34d6:	8f 70       	andi	r24, 0x0F	; 15
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    34de:	1f 91       	pop	r17
    34e0:	0f 91       	pop	r16
    34e2:	08 95       	ret

000034e4 <LCD_write>:
    34e4:	0f 93       	push	r16
    34e6:	1f 93       	push	r17
    34e8:	08 2f       	mov	r16, r24
    34ea:	16 2f       	mov	r17, r22
    34ec:	85 e0       	ldi	r24, 0x05	; 5
    34ee:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    34f2:	81 30       	cpi	r24, 0x01	; 1
    34f4:	79 f4       	brne	.+30     	; 0x3514 <LCD_write+0x30>
    34f6:	11 23       	and	r17, r17
    34f8:	19 f0       	breq	.+6      	; 0x3500 <LCD_write+0x1c>
    34fa:	11 30       	cpi	r17, 0x01	; 1
    34fc:	21 f4       	brne	.+8      	; 0x3506 <LCD_write+0x22>
    34fe:	02 c0       	rjmp	.+4      	; 0x3504 <LCD_write+0x20>
    3500:	2b 98       	cbi	0x05, 3	; 5
    3502:	01 c0       	rjmp	.+2      	; 0x3506 <LCD_write+0x22>
    3504:	2b 9a       	sbi	0x05, 3	; 5
    3506:	86 e0       	ldi	r24, 0x06	; 6
    3508:	8a 95       	dec	r24
    350a:	f1 f7       	brne	.-4      	; 0x3508 <LCD_write+0x24>
    350c:	80 e0       	ldi	r24, 0x00	; 0
    350e:	60 2f       	mov	r22, r16
    3510:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <SPI_transmit>
    3514:	1f 91       	pop	r17
    3516:	0f 91       	pop	r16
    3518:	08 95       	ret

0000351a <LED_clr_pattern>:
    351a:	1f 93       	push	r17
    351c:	18 2f       	mov	r17, r24
    351e:	86 e0       	ldi	r24, 0x06	; 6
    3520:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    3524:	81 30       	cpi	r24, 0x01	; 1
    3526:	19 f4       	brne	.+6      	; 0x352e <LED_clr_pattern+0x14>
    3528:	81 2f       	mov	r24, r17
    352a:	0e 94 e7 24 	call	0x49ce	; 0x49ce <__LED_clr_pattern>
    352e:	1f 91       	pop	r17
    3530:	08 95       	ret

00003532 <LED_open>:
    3532:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <__LED_init>
    3536:	86 e0       	ldi	r24, 0x06	; 6
    3538:	61 e0       	ldi	r22, 0x01	; 1
    353a:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    353e:	86 e0       	ldi	r24, 0x06	; 6
    3540:	91 e0       	ldi	r25, 0x01	; 1
    3542:	08 95       	ret

00003544 <LED_set_pattern>:
    3544:	1f 93       	push	r17
    3546:	18 2f       	mov	r17, r24
    3548:	86 e0       	ldi	r24, 0x06	; 6
    354a:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    354e:	81 30       	cpi	r24, 0x01	; 1
    3550:	19 f4       	brne	.+6      	; 0x3558 <LED_set_pattern+0x14>
    3552:	81 2f       	mov	r24, r17
    3554:	0e 94 ef 24 	call	0x49de	; 0x49de <__LED_set_pattern>
    3558:	1f 91       	pop	r17
    355a:	08 95       	ret

0000355c <SPI_set_slave_addr>:
    355c:	1f 93       	push	r17
    355e:	18 2f       	mov	r17, r24
    3560:	82 e0       	ldi	r24, 0x02	; 2
    3562:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    3566:	81 30       	cpi	r24, 0x01	; 1
    3568:	09 f0       	breq	.+2      	; 0x356c <SPI_set_slave_addr+0x10>
    356a:	47 c0       	rjmp	.+142    	; 0x35fa <SPI_set_slave_addr+0x9e>
    356c:	91 2f       	mov	r25, r17
    356e:	97 70       	andi	r25, 0x07	; 7
    3570:	80 91 f3 06 	lds	r24, 0x06F3
    3574:	98 17       	cp	r25, r24
    3576:	09 f4       	brne	.+2      	; 0x357a <SPI_set_slave_addr+0x1e>
    3578:	40 c0       	rjmp	.+128    	; 0x35fa <SPI_set_slave_addr+0x9e>
    357a:	90 93 f3 06 	sts	0x06F3, r25
    357e:	85 b1       	in	r24, 0x05	; 5
    3580:	88 7f       	andi	r24, 0xF8	; 248
    3582:	89 2b       	or	r24, r25
    3584:	85 b9       	out	0x05, r24	; 5
    3586:	93 30       	cpi	r25, 0x03	; 3
    3588:	11 f1       	breq	.+68     	; 0x35ce <SPI_set_slave_addr+0x72>
    358a:	94 30       	cpi	r25, 0x04	; 4
    358c:	28 f4       	brcc	.+10     	; 0x3598 <SPI_set_slave_addr+0x3c>
    358e:	91 30       	cpi	r25, 0x01	; 1
    3590:	51 f0       	breq	.+20     	; 0x35a6 <SPI_set_slave_addr+0x4a>
    3592:	92 30       	cpi	r25, 0x02	; 2
    3594:	90 f4       	brcc	.+36     	; 0x35ba <SPI_set_slave_addr+0x5e>
    3596:	0c c0       	rjmp	.+24     	; 0x35b0 <SPI_set_slave_addr+0x54>
    3598:	95 30       	cpi	r25, 0x05	; 5
    359a:	19 f1       	breq	.+70     	; 0x35e2 <SPI_set_slave_addr+0x86>
    359c:	95 30       	cpi	r25, 0x05	; 5
    359e:	e0 f0       	brcs	.+56     	; 0x35d8 <SPI_set_slave_addr+0x7c>
    35a0:	96 30       	cpi	r25, 0x06	; 6
    35a2:	21 f5       	brne	.+72     	; 0x35ec <SPI_set_slave_addr+0x90>
    35a4:	0f c0       	rjmp	.+30     	; 0x35c4 <SPI_set_slave_addr+0x68>
    35a6:	e0 91 d4 03 	lds	r30, 0x03D4
    35aa:	f0 91 d5 03 	lds	r31, 0x03D5
    35ae:	22 c0       	rjmp	.+68     	; 0x35f4 <SPI_set_slave_addr+0x98>
    35b0:	e0 91 d2 03 	lds	r30, 0x03D2
    35b4:	f0 91 d3 03 	lds	r31, 0x03D3
    35b8:	1d c0       	rjmp	.+58     	; 0x35f4 <SPI_set_slave_addr+0x98>
    35ba:	e0 91 d6 03 	lds	r30, 0x03D6
    35be:	f0 91 d7 03 	lds	r31, 0x03D7
    35c2:	18 c0       	rjmp	.+48     	; 0x35f4 <SPI_set_slave_addr+0x98>
    35c4:	e0 91 de 03 	lds	r30, 0x03DE
    35c8:	f0 91 df 03 	lds	r31, 0x03DF
    35cc:	13 c0       	rjmp	.+38     	; 0x35f4 <SPI_set_slave_addr+0x98>
    35ce:	e0 91 d8 03 	lds	r30, 0x03D8
    35d2:	f0 91 d9 03 	lds	r31, 0x03D9
    35d6:	0e c0       	rjmp	.+28     	; 0x35f4 <SPI_set_slave_addr+0x98>
    35d8:	e0 91 da 03 	lds	r30, 0x03DA
    35dc:	f0 91 db 03 	lds	r31, 0x03DB
    35e0:	09 c0       	rjmp	.+18     	; 0x35f4 <SPI_set_slave_addr+0x98>
    35e2:	e0 91 dc 03 	lds	r30, 0x03DC
    35e6:	f0 91 dd 03 	lds	r31, 0x03DD
    35ea:	04 c0       	rjmp	.+8      	; 0x35f4 <SPI_set_slave_addr+0x98>
    35ec:	e0 91 e0 03 	lds	r30, 0x03E0
    35f0:	f0 91 e1 03 	lds	r31, 0x03E1
    35f4:	30 97       	sbiw	r30, 0x00	; 0
    35f6:	09 f0       	breq	.+2      	; 0x35fa <SPI_set_slave_addr+0x9e>
    35f8:	09 95       	icall
    35fa:	1f 91       	pop	r17
    35fc:	08 95       	ret

000035fe <SPI_transmit>:
    35fe:	1f 93       	push	r17
    3600:	16 2f       	mov	r17, r22
    3602:	0e 94 ae 1a 	call	0x355c	; 0x355c <SPI_set_slave_addr>
    3606:	82 e0       	ldi	r24, 0x02	; 2
    3608:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    360c:	81 30       	cpi	r24, 0x01	; 1
    360e:	21 f4       	brne	.+8      	; 0x3618 <SPI_transmit+0x1a>
    3610:	1e bd       	out	0x2e, r17	; 46
    3612:	0d b4       	in	r0, 0x2d	; 45
    3614:	07 fe       	sbrs	r0, 7
    3616:	fd cf       	rjmp	.-6      	; 0x3612 <SPI_transmit+0x14>
    3618:	1f 91       	pop	r17
    361a:	08 95       	ret

0000361c <SPKR_beep>:
    361c:	9b 01       	movw	r18, r22
    361e:	ac 01       	movw	r20, r24
    3620:	80 91 73 03 	lds	r24, 0x0373
    3624:	88 23       	and	r24, r24
    3626:	81 f0       	breq	.+32     	; 0x3648 <SPKR_beep+0x2c>
    3628:	da 01       	movw	r26, r20
    362a:	c9 01       	movw	r24, r18
    362c:	88 0f       	add	r24, r24
    362e:	99 1f       	adc	r25, r25
    3630:	aa 1f       	adc	r26, r26
    3632:	bb 1f       	adc	r27, r27
    3634:	90 93 7f 03 	sts	0x037F, r25
    3638:	80 93 7e 03 	sts	0x037E, r24
    363c:	21 15       	cp	r18, r1
    363e:	31 05       	cpc	r19, r1
    3640:	41 05       	cpc	r20, r1
    3642:	51 05       	cpc	r21, r1
    3644:	09 f4       	brne	.+2      	; 0x3648 <SPKR_beep+0x2c>
    3646:	5f 98       	cbi	0x0b, 7	; 11
    3648:	08 95       	ret

0000364a <__SPKR_set_up_freq_LUT>:
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    364e:	cf 93       	push	r28
    3650:	df 93       	push	r29
    3652:	80 e2       	ldi	r24, 0x20	; 32
    3654:	91 e0       	ldi	r25, 0x01	; 1
    3656:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <malloc>
    365a:	9c 01       	movw	r18, r24
    365c:	90 93 81 03 	sts	0x0381, r25
    3660:	80 93 80 03 	sts	0x0380, r24
    3664:	89 2b       	or	r24, r25
    3666:	11 f4       	brne	.+4      	; 0x366c <__SPKR_set_up_freq_LUT+0x22>
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	39 c0       	rjmp	.+114    	; 0x36de <__SPKR_set_up_freq_LUT+0x94>
    366c:	89 01       	movw	r16, r18
    366e:	c0 e0       	ldi	r28, 0x00	; 0
    3670:	d0 e0       	ldi	r29, 0x00	; 0
    3672:	be 01       	movw	r22, r28
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__floatunsisf>
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 ea       	ldi	r20, 0xA0	; 160
    3682:	51 e4       	ldi	r21, 0x41	; 65
    3684:	0e 94 b3 2c 	call	0x5966	; 0x5966 <__divsf3>
    3688:	27 ef       	ldi	r18, 0xF7	; 247
    368a:	35 e7       	ldi	r19, 0x75	; 117
    368c:	40 e0       	ldi	r20, 0x00	; 0
    368e:	5f e3       	ldi	r21, 0x3F	; 63
    3690:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    3694:	9b 01       	movw	r18, r22
    3696:	ac 01       	movw	r20, r24
    3698:	60 e0       	ldi	r22, 0x00	; 0
    369a:	70 e0       	ldi	r23, 0x00	; 0
    369c:	80 e2       	ldi	r24, 0x20	; 32
    369e:	91 e4       	ldi	r25, 0x41	; 65
    36a0:	0e 94 9f 2e 	call	0x5d3e	; 0x5d3e <pow>
    36a4:	9b 01       	movw	r18, r22
    36a6:	ac 01       	movw	r20, r24
    36a8:	ca 01       	movw	r24, r20
    36aa:	b9 01       	movw	r22, r18
    36ac:	2d ec       	ldi	r18, 0xCD	; 205
    36ae:	3c ec       	ldi	r19, 0xCC	; 204
    36b0:	42 e8       	ldi	r20, 0x82	; 130
    36b2:	51 e4       	ldi	r21, 0x41	; 65
    36b4:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__mulsf3>
    36b8:	0e 94 02 2e 	call	0x5c04	; 0x5c04 <lrint>
    36bc:	2a e0       	ldi	r18, 0x0A	; 10
    36be:	30 e0       	ldi	r19, 0x00	; 0
    36c0:	40 e0       	ldi	r20, 0x00	; 0
    36c2:	50 e0       	ldi	r21, 0x00	; 0
    36c4:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__mulsi3>
    36c8:	f8 01       	movw	r30, r16
    36ca:	61 93       	st	Z+, r22
    36cc:	71 93       	st	Z+, r23
    36ce:	81 93       	st	Z+, r24
    36d0:	91 93       	st	Z+, r25
    36d2:	8f 01       	movw	r16, r30
    36d4:	21 96       	adiw	r28, 0x01	; 1
    36d6:	c8 34       	cpi	r28, 0x48	; 72
    36d8:	d1 05       	cpc	r29, r1
    36da:	59 f6       	brne	.-106    	; 0x3672 <__SPKR_set_up_freq_LUT+0x28>
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	df 91       	pop	r29
    36e0:	cf 91       	pop	r28
    36e2:	1f 91       	pop	r17
    36e4:	0f 91       	pop	r16
    36e6:	08 95       	ret

000036e8 <__SPKR_open_beep_mode>:
    36e8:	8a e0       	ldi	r24, 0x0A	; 10
    36ea:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    36ee:	88 23       	and	r24, r24
    36f0:	71 f4       	brne	.+28     	; 0x370e <__SPKR_open_beep_mode+0x26>
    36f2:	10 92 7d 03 	sts	0x037D, r1
    36f6:	10 92 7c 03 	sts	0x037C, r1
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__SPKR_init>
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	80 93 73 03 	sts	0x0373, r24
    3706:	8a e0       	ldi	r24, 0x0A	; 10
    3708:	61 e0       	ldi	r22, 0x01	; 1
    370a:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    370e:	8a e0       	ldi	r24, 0x0A	; 10
    3710:	91 e0       	ldi	r25, 0x01	; 1
    3712:	08 95       	ret

00003714 <__SPKR_open_tone_mode>:
    3714:	1f 93       	push	r17
    3716:	8b e0       	ldi	r24, 0x0B	; 11
    3718:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    371c:	88 23       	and	r24, r24
    371e:	11 f0       	breq	.+4      	; 0x3724 <__SPKR_open_tone_mode+0x10>
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	21 c0       	rjmp	.+66     	; 0x3766 <__SPKR_open_tone_mode+0x52>
    3724:	89 e0       	ldi	r24, 0x09	; 9
    3726:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    372a:	88 23       	and	r24, r24
    372c:	d9 f4       	brne	.+54     	; 0x3764 <__SPKR_open_tone_mode+0x50>
    372e:	0e 94 25 1b 	call	0x364a	; 0x364a <__SPKR_set_up_freq_LUT>
    3732:	18 2f       	mov	r17, r24
    3734:	81 30       	cpi	r24, 0x01	; 1
    3736:	b1 f4       	brne	.+44     	; 0x3764 <__SPKR_open_tone_mode+0x50>
    3738:	10 92 74 03 	sts	0x0374, r1
    373c:	10 92 75 03 	sts	0x0375, r1
    3740:	10 92 76 03 	sts	0x0376, r1
    3744:	10 92 77 03 	sts	0x0377, r1
    3748:	8d e0       	ldi	r24, 0x0D	; 13
    374a:	6d ea       	ldi	r22, 0xAD	; 173
    374c:	75 e2       	ldi	r23, 0x25	; 37
    374e:	0e 94 10 24 	call	0x4820	; 0x4820 <ISR_attach>
    3752:	82 e0       	ldi	r24, 0x02	; 2
    3754:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <__SPKR_init>
    3758:	10 93 72 03 	sts	0x0372, r17
    375c:	89 e0       	ldi	r24, 0x09	; 9
    375e:	61 e0       	ldi	r22, 0x01	; 1
    3760:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    3764:	91 e0       	ldi	r25, 0x01	; 1
    3766:	89 e0       	ldi	r24, 0x09	; 9
    3768:	1f 91       	pop	r17
    376a:	08 95       	ret

0000376c <SPKR_open>:
    376c:	81 30       	cpi	r24, 0x01	; 1
    376e:	29 f0       	breq	.+10     	; 0x377a <SPKR_open+0xe>
    3770:	82 30       	cpi	r24, 0x02	; 2
    3772:	31 f0       	breq	.+12     	; 0x3780 <SPKR_open+0x14>
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	89 e0       	ldi	r24, 0x09	; 9
    3778:	08 95       	ret
    377a:	0e 94 74 1b 	call	0x36e8	; 0x36e8 <__SPKR_open_beep_mode>
    377e:	08 95       	ret
    3780:	0e 94 8a 1b 	call	0x3714	; 0x3714 <__SPKR_open_tone_mode>
    3784:	08 95       	ret

00003786 <STEPPER_get_nSteps>:
    3786:	80 91 b4 06 	lds	r24, 0x06B4
    378a:	90 91 b5 06 	lds	r25, 0x06B5
    378e:	20 91 b6 06 	lds	r18, 0x06B6
    3792:	30 91 b7 06 	lds	r19, 0x06B7
    3796:	bc 01       	movw	r22, r24
    3798:	c9 01       	movw	r24, r18
    379a:	08 95       	ret

0000379c <STEPPER_stepmode>:
    379c:	2f 92       	push	r2
    379e:	3f 92       	push	r3
    37a0:	4f 92       	push	r4
    37a2:	5f 92       	push	r5
    37a4:	6f 92       	push	r6
    37a6:	7f 92       	push	r7
    37a8:	8f 92       	push	r8
    37aa:	9f 92       	push	r9
    37ac:	af 92       	push	r10
    37ae:	bf 92       	push	r11
    37b0:	cf 92       	push	r12
    37b2:	df 92       	push	r13
    37b4:	ef 92       	push	r14
    37b6:	ff 92       	push	r15
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	df 93       	push	r29
    37be:	cf 93       	push	r28
    37c0:	cd b7       	in	r28, 0x3d	; 61
    37c2:	de b7       	in	r29, 0x3e	; 62
    37c4:	58 2e       	mov	r5, r24
    37c6:	96 2e       	mov	r9, r22
    37c8:	44 2e       	mov	r4, r20
    37ca:	39 01       	movw	r6, r18
    37cc:	3c 2c       	mov	r3, r12
    37ce:	c9 8c       	ldd	r12, Y+25	; 0x19
    37d0:	da 8c       	ldd	r13, Y+26	; 0x1a
    37d2:	2b 8c       	ldd	r2, Y+27	; 0x1b
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	68 17       	cp	r22, r24
    37d8:	39 f1       	breq	.+78     	; 0x3828 <STEPPER_stepmode+0x8c>
    37da:	68 17       	cp	r22, r24
    37dc:	28 f0       	brcs	.+10     	; 0x37e8 <STEPPER_stepmode+0x4c>
    37de:	92 e0       	ldi	r25, 0x02	; 2
    37e0:	69 17       	cp	r22, r25
    37e2:	09 f0       	breq	.+2      	; 0x37e6 <STEPPER_stepmode+0x4a>
    37e4:	85 c0       	rjmp	.+266    	; 0x38f0 <STEPPER_stepmode+0x154>
    37e6:	49 c0       	rjmp	.+146    	; 0x387a <STEPPER_stepmode+0xde>
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	61 e0       	ldi	r22, 0x01	; 1
    37ec:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <STEPPER_set_mode>
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	b7 01       	movw	r22, r14
    37f4:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <STEPPER_set_accel>
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	64 2d       	mov	r22, r4
    37fc:	a3 01       	movw	r20, r6
    37fe:	98 01       	movw	r18, r16
    3800:	03 2d       	mov	r16, r3
    3802:	ee 24       	eor	r14, r14
    3804:	e3 94       	inc	r14
    3806:	e9 ed       	ldi	r30, 0xD9	; 217
    3808:	ce 2e       	mov	r12, r30
    380a:	e6 e0       	ldi	r30, 0x06	; 6
    380c:	de 2e       	mov	r13, r30
    380e:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <STEPPER_step>
    3812:	55 20       	and	r5, r5
    3814:	09 f0       	breq	.+2      	; 0x3818 <STEPPER_stepmode+0x7c>
    3816:	6c c0       	rjmp	.+216    	; 0x38f0 <STEPPER_stepmode+0x154>
    3818:	00 d0       	rcall	.+0      	; 0x381a <STEPPER_stepmode+0x7e>
    381a:	0f 92       	push	r0
    381c:	ed b7       	in	r30, 0x3d	; 61
    381e:	fe b7       	in	r31, 0x3e	; 62
    3820:	11 82       	std	Z+1, r1	; 0x01
    3822:	b3 82       	std	Z+3, r11	; 0x03
    3824:	a2 82       	std	Z+2, r10	; 0x02
    3826:	23 c0       	rjmp	.+70     	; 0x386e <STEPPER_stepmode+0xd2>
    3828:	81 e0       	ldi	r24, 0x01	; 1
    382a:	61 e0       	ldi	r22, 0x01	; 1
    382c:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <STEPPER_set_mode>
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	b6 01       	movw	r22, r12
    3834:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <STEPPER_set_accel>
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	68 2d       	mov	r22, r8
    383c:	4d 89       	ldd	r20, Y+21	; 0x15
    383e:	5e 89       	ldd	r21, Y+22	; 0x16
    3840:	2f 89       	ldd	r18, Y+23	; 0x17
    3842:	38 8d       	ldd	r19, Y+24	; 0x18
    3844:	02 2d       	mov	r16, r2
    3846:	ee 24       	eor	r14, r14
    3848:	e3 94       	inc	r14
    384a:	79 ed       	ldi	r23, 0xD9	; 217
    384c:	c7 2e       	mov	r12, r23
    384e:	76 e0       	ldi	r23, 0x06	; 6
    3850:	d7 2e       	mov	r13, r23
    3852:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <STEPPER_step>
    3856:	55 20       	and	r5, r5
    3858:	09 f0       	breq	.+2      	; 0x385c <STEPPER_stepmode+0xc0>
    385a:	4a c0       	rjmp	.+148    	; 0x38f0 <STEPPER_stepmode+0x154>
    385c:	00 d0       	rcall	.+0      	; 0x385e <STEPPER_stepmode+0xc2>
    385e:	0f 92       	push	r0
    3860:	ed b7       	in	r30, 0x3d	; 61
    3862:	fe b7       	in	r31, 0x3e	; 62
    3864:	91 82       	std	Z+1, r9	; 0x01
    3866:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3868:	9d 8d       	ldd	r25, Y+29	; 0x1d
    386a:	93 83       	std	Z+3, r25	; 0x03
    386c:	82 83       	std	Z+2, r24	; 0x02
    386e:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <STEPPER_wait_and_then>
    3872:	0f 90       	pop	r0
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	3b c0       	rjmp	.+118    	; 0x38f0 <STEPPER_stepmode+0x154>
    387a:	82 e0       	ldi	r24, 0x02	; 2
    387c:	61 e0       	ldi	r22, 0x01	; 1
    387e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <STEPPER_set_mode>
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	b7 01       	movw	r22, r14
    3886:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <STEPPER_set_accel>
    388a:	81 e0       	ldi	r24, 0x01	; 1
    388c:	b6 01       	movw	r22, r12
    388e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <STEPPER_set_accel>
    3892:	80 e0       	ldi	r24, 0x00	; 0
    3894:	64 2d       	mov	r22, r4
    3896:	a3 01       	movw	r20, r6
    3898:	98 01       	movw	r18, r16
    389a:	03 2d       	mov	r16, r3
    389c:	ee 24       	eor	r14, r14
    389e:	e3 94       	inc	r14
    38a0:	99 ed       	ldi	r25, 0xD9	; 217
    38a2:	c9 2e       	mov	r12, r25
    38a4:	96 e0       	ldi	r25, 0x06	; 6
    38a6:	d9 2e       	mov	r13, r25
    38a8:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <STEPPER_step>
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	68 2d       	mov	r22, r8
    38b0:	4d 89       	ldd	r20, Y+21	; 0x15
    38b2:	5e 89       	ldd	r21, Y+22	; 0x16
    38b4:	2f 89       	ldd	r18, Y+23	; 0x17
    38b6:	38 8d       	ldd	r19, Y+24	; 0x18
    38b8:	02 2d       	mov	r16, r2
    38ba:	0e 94 29 1e 	call	0x3c52	; 0x3c52 <STEPPER_step>
    38be:	55 20       	and	r5, r5
    38c0:	b9 f4       	brne	.+46     	; 0x38f0 <STEPPER_stepmode+0x154>
    38c2:	00 d0       	rcall	.+0      	; 0x38c4 <STEPPER_stepmode+0x128>
    38c4:	00 d0       	rcall	.+0      	; 0x38c6 <STEPPER_stepmode+0x12a>
    38c6:	0f 92       	push	r0
    38c8:	ad b7       	in	r26, 0x3d	; 61
    38ca:	be b7       	in	r27, 0x3e	; 62
    38cc:	11 96       	adiw	r26, 0x01	; 1
    38ce:	ed b7       	in	r30, 0x3d	; 61
    38d0:	fe b7       	in	r31, 0x3e	; 62
    38d2:	91 82       	std	Z+1, r9	; 0x01
    38d4:	fd 01       	movw	r30, r26
    38d6:	b2 82       	std	Z+2, r11	; 0x02
    38d8:	a1 82       	std	Z+1, r10	; 0x01
    38da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38de:	94 83       	std	Z+4, r25	; 0x04
    38e0:	83 83       	std	Z+3, r24	; 0x03
    38e2:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <STEPPER_wait_and_then>
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	0f 90       	pop	r0
    38f0:	cf 91       	pop	r28
    38f2:	df 91       	pop	r29
    38f4:	1f 91       	pop	r17
    38f6:	0f 91       	pop	r16
    38f8:	ff 90       	pop	r15
    38fa:	ef 90       	pop	r14
    38fc:	df 90       	pop	r13
    38fe:	cf 90       	pop	r12
    3900:	bf 90       	pop	r11
    3902:	af 90       	pop	r10
    3904:	9f 90       	pop	r9
    3906:	8f 90       	pop	r8
    3908:	7f 90       	pop	r7
    390a:	6f 90       	pop	r6
    390c:	5f 90       	pop	r5
    390e:	4f 90       	pop	r4
    3910:	3f 90       	pop	r3
    3912:	2f 90       	pop	r2
    3914:	08 95       	ret

00003916 <STEPPER_move>:
    3916:	6f 92       	push	r6
    3918:	7f 92       	push	r7
    391a:	8f 92       	push	r8
    391c:	9f 92       	push	r9
    391e:	af 92       	push	r10
    3920:	bf 92       	push	r11
    3922:	cf 92       	push	r12
    3924:	df 92       	push	r13
    3926:	ef 92       	push	r14
    3928:	ff 92       	push	r15
    392a:	0f 93       	push	r16
    392c:	1f 93       	push	r17
    392e:	df 93       	push	r29
    3930:	cf 93       	push	r28
    3932:	cd b7       	in	r28, 0x3d	; 61
    3934:	de b7       	in	r29, 0x3e	; 62
    3936:	94 2e       	mov	r9, r20
    3938:	7c 2d       	mov	r23, r12
    393a:	d5 01       	movw	r26, r10
    393c:	49 89       	ldd	r20, Y+17	; 0x11
    393e:	5a 89       	ldd	r21, Y+18	; 0x12
    3940:	ab 88       	ldd	r10, Y+19	; 0x13
    3942:	bc 88       	ldd	r11, Y+20	; 0x14
    3944:	cd 88       	ldd	r12, Y+21	; 0x15
    3946:	de 88       	ldd	r13, Y+22	; 0x16
    3948:	9f 89       	ldd	r25, Y+23	; 0x17
    394a:	81 30       	cpi	r24, 0x01	; 1
    394c:	09 f4       	brne	.+2      	; 0x3950 <STEPPER_move+0x3a>
    394e:	57 c0       	rjmp	.+174    	; 0x39fe <STEPPER_move+0xe8>
    3950:	81 30       	cpi	r24, 0x01	; 1
    3952:	b8 f1       	brcs	.+110    	; 0x39c2 <STEPPER_move+0xac>
    3954:	82 30       	cpi	r24, 0x02	; 2
    3956:	09 f0       	breq	.+2      	; 0x395a <STEPPER_move+0x44>
    3958:	76 c0       	rjmp	.+236    	; 0x3a46 <STEPPER_move+0x130>
    395a:	61 30       	cpi	r22, 0x01	; 1
    395c:	91 f0       	breq	.+36     	; 0x3982 <STEPPER_move+0x6c>
    395e:	61 30       	cpi	r22, 0x01	; 1
    3960:	20 f0       	brcs	.+8      	; 0x396a <STEPPER_move+0x54>
    3962:	62 30       	cpi	r22, 0x02	; 2
    3964:	09 f0       	breq	.+2      	; 0x3968 <STEPPER_move+0x52>
    3966:	6f c0       	rjmp	.+222    	; 0x3a46 <STEPPER_move+0x130>
    3968:	15 c0       	rjmp	.+42     	; 0x3994 <STEPPER_move+0x7e>
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	60 e0       	ldi	r22, 0x00	; 0
    396e:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <STEPPER_set_mode>
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	b7 01       	movw	r22, r14
    3976:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <STEPPER_set_accel>
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	69 2d       	mov	r22, r9
    397e:	a8 01       	movw	r20, r16
    3980:	1d c0       	rjmp	.+58     	; 0x39bc <STEPPER_move+0xa6>
    3982:	81 e0       	ldi	r24, 0x01	; 1
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <STEPPER_set_mode>
    398a:	81 e0       	ldi	r24, 0x01	; 1
    398c:	b6 01       	movw	r22, r12
    398e:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <STEPPER_set_accel>
    3992:	11 c0       	rjmp	.+34     	; 0x39b6 <STEPPER_move+0xa0>
    3994:	82 e0       	ldi	r24, 0x02	; 2
    3996:	60 e0       	ldi	r22, 0x00	; 0
    3998:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <STEPPER_set_mode>
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	b7 01       	movw	r22, r14
    39a0:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <STEPPER_set_accel>
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	b6 01       	movw	r22, r12
    39a8:	0e 94 a0 1d 	call	0x3b40	; 0x3b40 <STEPPER_set_accel>
    39ac:	80 e0       	ldi	r24, 0x00	; 0
    39ae:	69 2d       	mov	r22, r9
    39b0:	a8 01       	movw	r20, r16
    39b2:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <STEPPER_run>
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	68 2d       	mov	r22, r8
    39ba:	a5 01       	movw	r20, r10
    39bc:	0e 94 89 1d 	call	0x3b12	; 0x3b12 <STEPPER_run>
    39c0:	42 c0       	rjmp	.+132    	; 0x3a46 <STEPPER_move+0x130>
    39c2:	ed b7       	in	r30, 0x3d	; 61
    39c4:	fe b7       	in	r31, 0x3e	; 62
    39c6:	39 97       	sbiw	r30, 0x09	; 9
    39c8:	0f b6       	in	r0, 0x3f	; 63
    39ca:	f8 94       	cli
    39cc:	fe bf       	out	0x3e, r31	; 62
    39ce:	0f be       	out	0x3f, r0	; 63
    39d0:	ed bf       	out	0x3d, r30	; 61
    39d2:	6d b6       	in	r6, 0x3d	; 61
    39d4:	7e b6       	in	r7, 0x3e	; 62
    39d6:	08 94       	sec
    39d8:	61 1c       	adc	r6, r1
    39da:	71 1c       	adc	r7, r1
    39dc:	52 83       	std	Z+2, r21	; 0x02
    39de:	41 83       	std	Z+1, r20	; 0x01
    39e0:	f3 01       	movw	r30, r6
    39e2:	b3 82       	std	Z+3, r11	; 0x03
    39e4:	a2 82       	std	Z+2, r10	; 0x02
    39e6:	d5 82       	std	Z+5, r13	; 0x05
    39e8:	c4 82       	std	Z+4, r12	; 0x04
    39ea:	96 83       	std	Z+6, r25	; 0x06
    39ec:	88 8d       	ldd	r24, Y+24	; 0x18
    39ee:	99 8d       	ldd	r25, Y+25	; 0x19
    39f0:	90 87       	std	Z+8, r25	; 0x08
    39f2:	87 83       	std	Z+7, r24	; 0x07
    39f4:	80 e0       	ldi	r24, 0x00	; 0
    39f6:	49 2d       	mov	r20, r9
    39f8:	c7 2e       	mov	r12, r23
    39fa:	5d 01       	movw	r10, r26
    39fc:	1a c0       	rjmp	.+52     	; 0x3a32 <STEPPER_move+0x11c>
    39fe:	ed b7       	in	r30, 0x3d	; 61
    3a00:	fe b7       	in	r31, 0x3e	; 62
    3a02:	39 97       	sbiw	r30, 0x09	; 9
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	fe bf       	out	0x3e, r31	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	ed bf       	out	0x3d, r30	; 61
    3a0e:	ad b7       	in	r26, 0x3d	; 61
    3a10:	be b7       	in	r27, 0x3e	; 62
    3a12:	11 96       	adiw	r26, 0x01	; 1
    3a14:	52 83       	std	Z+2, r21	; 0x02
    3a16:	41 83       	std	Z+1, r20	; 0x01
    3a18:	fd 01       	movw	r30, r26
    3a1a:	b3 82       	std	Z+3, r11	; 0x03
    3a1c:	a2 82       	std	Z+2, r10	; 0x02
    3a1e:	d5 82       	std	Z+5, r13	; 0x05
    3a20:	c4 82       	std	Z+4, r12	; 0x04
    3a22:	96 83       	std	Z+6, r25	; 0x06
    3a24:	10 86       	std	Z+8, r1	; 0x08
    3a26:	17 82       	std	Z+7, r1	; 0x07
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	49 2d       	mov	r20, r9
    3a2c:	c7 2e       	mov	r12, r23
    3a2e:	aa 24       	eor	r10, r10
    3a30:	bb 24       	eor	r11, r11
    3a32:	0e 94 ce 1b 	call	0x379c	; 0x379c <STEPPER_stepmode>
    3a36:	8d b7       	in	r24, 0x3d	; 61
    3a38:	9e b7       	in	r25, 0x3e	; 62
    3a3a:	09 96       	adiw	r24, 0x09	; 9
    3a3c:	0f b6       	in	r0, 0x3f	; 63
    3a3e:	f8 94       	cli
    3a40:	9e bf       	out	0x3e, r25	; 62
    3a42:	0f be       	out	0x3f, r0	; 63
    3a44:	8d bf       	out	0x3d, r24	; 61
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	1f 91       	pop	r17
    3a4c:	0f 91       	pop	r16
    3a4e:	ff 90       	pop	r15
    3a50:	ef 90       	pop	r14
    3a52:	df 90       	pop	r13
    3a54:	cf 90       	pop	r12
    3a56:	bf 90       	pop	r11
    3a58:	af 90       	pop	r10
    3a5a:	9f 90       	pop	r9
    3a5c:	8f 90       	pop	r8
    3a5e:	7f 90       	pop	r7
    3a60:	6f 90       	pop	r6
    3a62:	08 95       	ret

00003a64 <STEPPER_open>:
    3a64:	0e 94 bc 26 	call	0x4d78	; 0x4d78 <__STEPPER_init>
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	80 93 d8 06 	sts	0x06D8, r24
    3a6e:	e2 ea       	ldi	r30, 0xA2	; 162
    3a70:	f6 e0       	ldi	r31, 0x06	; 6
    3a72:	11 92       	st	Z+, r1
    3a74:	11 92       	st	Z+, r1
    3a76:	11 82       	std	Z+1, r1	; 0x01
    3a78:	10 82       	st	Z, r1
    3a7a:	32 96       	adiw	r30, 0x02	; 2
    3a7c:	11 82       	std	Z+1, r1	; 0x01
    3a7e:	10 82       	st	Z, r1
    3a80:	32 96       	adiw	r30, 0x02	; 2
    3a82:	11 82       	std	Z+1, r1	; 0x01
    3a84:	10 82       	st	Z, r1
    3a86:	32 96       	adiw	r30, 0x02	; 2
    3a88:	11 82       	std	Z+1, r1	; 0x01
    3a8a:	10 82       	st	Z, r1
    3a8c:	32 96       	adiw	r30, 0x02	; 2
    3a8e:	11 82       	std	Z+1, r1	; 0x01
    3a90:	10 82       	st	Z, r1
    3a92:	32 96       	adiw	r30, 0x02	; 2
    3a94:	11 82       	std	Z+1, r1	; 0x01
    3a96:	10 82       	st	Z, r1
    3a98:	32 96       	adiw	r30, 0x02	; 2
    3a9a:	11 82       	std	Z+1, r1	; 0x01
    3a9c:	10 82       	st	Z, r1
    3a9e:	32 96       	adiw	r30, 0x02	; 2
    3aa0:	11 82       	std	Z+1, r1	; 0x01
    3aa2:	10 82       	st	Z, r1
    3aa4:	32 96       	adiw	r30, 0x02	; 2
    3aa6:	11 82       	std	Z+1, r1	; 0x01
    3aa8:	10 82       	st	Z, r1
    3aaa:	32 96       	adiw	r30, 0x02	; 2
    3aac:	11 82       	std	Z+1, r1	; 0x01
    3aae:	10 82       	st	Z, r1
    3ab0:	32 96       	adiw	r30, 0x02	; 2
    3ab2:	11 82       	std	Z+1, r1	; 0x01
    3ab4:	10 82       	st	Z, r1
    3ab6:	32 96       	adiw	r30, 0x02	; 2
    3ab8:	11 82       	std	Z+1, r1	; 0x01
    3aba:	10 82       	st	Z, r1
    3abc:	36 96       	adiw	r30, 0x06	; 6
    3abe:	11 92       	st	Z+, r1
    3ac0:	11 92       	st	Z+, r1
    3ac2:	11 92       	st	Z+, r1
    3ac4:	10 82       	st	Z, r1
    3ac6:	32 96       	adiw	r30, 0x02	; 2
    3ac8:	11 92       	st	Z+, r1
    3aca:	11 92       	st	Z+, r1
    3acc:	11 92       	st	Z+, r1
    3ace:	11 92       	st	Z+, r1
    3ad0:	11 92       	st	Z+, r1
    3ad2:	11 92       	st	Z+, r1
    3ad4:	11 92       	st	Z+, r1
    3ad6:	11 82       	std	Z+1, r1	; 0x01
    3ad8:	10 82       	st	Z, r1
    3ada:	32 96       	adiw	r30, 0x02	; 2
    3adc:	11 82       	std	Z+1, r1	; 0x01
    3ade:	10 82       	st	Z, r1
    3ae0:	32 96       	adiw	r30, 0x02	; 2
    3ae2:	11 82       	std	Z+1, r1	; 0x01
    3ae4:	10 82       	st	Z, r1
    3ae6:	32 96       	adiw	r30, 0x02	; 2
    3ae8:	11 82       	std	Z+1, r1	; 0x01
    3aea:	10 82       	st	Z, r1
    3aec:	76 97       	sbiw	r30, 0x16	; 22
    3aee:	11 82       	std	Z+1, r1	; 0x01
    3af0:	10 82       	st	Z, r1
    3af2:	32 96       	adiw	r30, 0x02	; 2
    3af4:	11 82       	std	Z+1, r1	; 0x01
    3af6:	10 82       	st	Z, r1
    3af8:	10 92 d7 06 	sts	0x06D7, r1
    3afc:	10 92 d6 06 	sts	0x06D6, r1
    3b00:	10 92 d8 06 	sts	0x06D8, r1
    3b04:	87 e0       	ldi	r24, 0x07	; 7
    3b06:	61 e0       	ldi	r22, 0x01	; 1
    3b08:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    3b0c:	87 e0       	ldi	r24, 0x07	; 7
    3b0e:	91 e0       	ldi	r25, 0x01	; 1
    3b10:	08 95       	ret

00003b12 <STEPPER_run>:
    3b12:	ef 92       	push	r14
    3b14:	ff 92       	push	r15
    3b16:	0f 93       	push	r16
    3b18:	1f 93       	push	r17
    3b1a:	18 2f       	mov	r17, r24
    3b1c:	06 2f       	mov	r16, r22
    3b1e:	7a 01       	movw	r14, r20
    3b20:	60 e0       	ldi	r22, 0x00	; 0
    3b22:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <STEPPER_set_mode>
    3b26:	81 2f       	mov	r24, r17
    3b28:	60 2f       	mov	r22, r16
    3b2a:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <STEPPER_set_dir>
    3b2e:	81 2f       	mov	r24, r17
    3b30:	b7 01       	movw	r22, r14
    3b32:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <STEPPER_set_speed>
    3b36:	1f 91       	pop	r17
    3b38:	0f 91       	pop	r16
    3b3a:	ff 90       	pop	r15
    3b3c:	ef 90       	pop	r14
    3b3e:	08 95       	ret

00003b40 <STEPPER_set_accel>:
    3b40:	48 2f       	mov	r20, r24
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	80 93 d8 06 	sts	0x06D8, r24
    3b48:	cb 01       	movw	r24, r22
    3b4a:	23 e0       	ldi	r18, 0x03	; 3
    3b4c:	69 3e       	cpi	r22, 0xE9	; 233
    3b4e:	72 07       	cpc	r23, r18
    3b50:	10 f0       	brcs	.+4      	; 0x3b56 <STEPPER_set_accel+0x16>
    3b52:	88 ee       	ldi	r24, 0xE8	; 232
    3b54:	93 e0       	ldi	r25, 0x03	; 3
    3b56:	41 30       	cpi	r20, 0x01	; 1
    3b58:	71 f0       	breq	.+28     	; 0x3b76 <STEPPER_set_accel+0x36>
    3b5a:	41 30       	cpi	r20, 0x01	; 1
    3b5c:	18 f0       	brcs	.+6      	; 0x3b64 <STEPPER_set_accel+0x24>
    3b5e:	42 30       	cpi	r20, 0x02	; 2
    3b60:	71 f4       	brne	.+28     	; 0x3b7e <STEPPER_set_accel+0x3e>
    3b62:	05 c0       	rjmp	.+10     	; 0x3b6e <STEPPER_set_accel+0x2e>
    3b64:	90 93 ad 06 	sts	0x06AD, r25
    3b68:	80 93 ac 06 	sts	0x06AC, r24
    3b6c:	08 c0       	rjmp	.+16     	; 0x3b7e <STEPPER_set_accel+0x3e>
    3b6e:	90 93 ad 06 	sts	0x06AD, r25
    3b72:	80 93 ac 06 	sts	0x06AC, r24
    3b76:	90 93 af 06 	sts	0x06AF, r25
    3b7a:	80 93 ae 06 	sts	0x06AE, r24
    3b7e:	10 92 d8 06 	sts	0x06D8, r1
    3b82:	08 95       	ret

00003b84 <STEPPER_set_dir>:
    3b84:	98 2f       	mov	r25, r24
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	80 93 d8 06 	sts	0x06D8, r24
    3b8c:	91 30       	cpi	r25, 0x01	; 1
    3b8e:	51 f0       	breq	.+20     	; 0x3ba4 <STEPPER_set_dir+0x20>
    3b90:	91 30       	cpi	r25, 0x01	; 1
    3b92:	18 f0       	brcs	.+6      	; 0x3b9a <STEPPER_set_dir+0x16>
    3b94:	92 30       	cpi	r25, 0x02	; 2
    3b96:	41 f4       	brne	.+16     	; 0x3ba8 <STEPPER_set_dir+0x24>
    3b98:	03 c0       	rjmp	.+6      	; 0x3ba0 <STEPPER_set_dir+0x1c>
    3b9a:	60 93 c5 06 	sts	0x06C5, r22
    3b9e:	04 c0       	rjmp	.+8      	; 0x3ba8 <STEPPER_set_dir+0x24>
    3ba0:	60 93 c5 06 	sts	0x06C5, r22
    3ba4:	60 93 c6 06 	sts	0x06C6, r22
    3ba8:	10 92 d8 06 	sts	0x06D8, r1
    3bac:	08 95       	ret

00003bae <STEPPER_set_mode>:
    3bae:	98 2f       	mov	r25, r24
    3bb0:	81 e0       	ldi	r24, 0x01	; 1
    3bb2:	80 93 d8 06 	sts	0x06D8, r24
    3bb6:	91 30       	cpi	r25, 0x01	; 1
    3bb8:	51 f0       	breq	.+20     	; 0x3bce <STEPPER_set_mode+0x20>
    3bba:	91 30       	cpi	r25, 0x01	; 1
    3bbc:	18 f0       	brcs	.+6      	; 0x3bc4 <STEPPER_set_mode+0x16>
    3bbe:	92 30       	cpi	r25, 0x02	; 2
    3bc0:	41 f4       	brne	.+16     	; 0x3bd2 <STEPPER_set_mode+0x24>
    3bc2:	03 c0       	rjmp	.+6      	; 0x3bca <STEPPER_set_mode+0x1c>
    3bc4:	60 93 a2 06 	sts	0x06A2, r22
    3bc8:	04 c0       	rjmp	.+8      	; 0x3bd2 <STEPPER_set_mode+0x24>
    3bca:	60 93 a2 06 	sts	0x06A2, r22
    3bce:	60 93 a3 06 	sts	0x06A3, r22
    3bd2:	10 92 d8 06 	sts	0x06D8, r1
    3bd6:	08 95       	ret

00003bd8 <STEPPER_set_speed>:
    3bd8:	48 2f       	mov	r20, r24
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	80 93 d8 06 	sts	0x06D8, r24
    3be0:	cb 01       	movw	r24, r22
    3be2:	21 e0       	ldi	r18, 0x01	; 1
    3be4:	61 39       	cpi	r22, 0x91	; 145
    3be6:	72 07       	cpc	r23, r18
    3be8:	10 f0       	brcs	.+4      	; 0x3bee <STEPPER_set_speed+0x16>
    3bea:	80 e9       	ldi	r24, 0x90	; 144
    3bec:	91 e0       	ldi	r25, 0x01	; 1
    3bee:	41 30       	cpi	r20, 0x01	; 1
    3bf0:	71 f0       	breq	.+28     	; 0x3c0e <STEPPER_set_speed+0x36>
    3bf2:	41 30       	cpi	r20, 0x01	; 1
    3bf4:	18 f0       	brcs	.+6      	; 0x3bfc <STEPPER_set_speed+0x24>
    3bf6:	42 30       	cpi	r20, 0x02	; 2
    3bf8:	71 f4       	brne	.+28     	; 0x3c16 <STEPPER_set_speed+0x3e>
    3bfa:	05 c0       	rjmp	.+10     	; 0x3c06 <STEPPER_set_speed+0x2e>
    3bfc:	90 93 a5 06 	sts	0x06A5, r25
    3c00:	80 93 a4 06 	sts	0x06A4, r24
    3c04:	08 c0       	rjmp	.+16     	; 0x3c16 <STEPPER_set_speed+0x3e>
    3c06:	90 93 a5 06 	sts	0x06A5, r25
    3c0a:	80 93 a4 06 	sts	0x06A4, r24
    3c0e:	90 93 a7 06 	sts	0x06A7, r25
    3c12:	80 93 a6 06 	sts	0x06A6, r24
    3c16:	10 92 d8 06 	sts	0x06D8, r1
    3c1a:	08 95       	ret

00003c1c <STEPPER_set_steps>:
    3c1c:	98 2f       	mov	r25, r24
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	80 93 d8 06 	sts	0x06D8, r24
    3c24:	91 30       	cpi	r25, 0x01	; 1
    3c26:	71 f0       	breq	.+28     	; 0x3c44 <STEPPER_set_steps+0x28>
    3c28:	91 30       	cpi	r25, 0x01	; 1
    3c2a:	18 f0       	brcs	.+6      	; 0x3c32 <STEPPER_set_steps+0x16>
    3c2c:	92 30       	cpi	r25, 0x02	; 2
    3c2e:	71 f4       	brne	.+28     	; 0x3c4c <STEPPER_set_steps+0x30>
    3c30:	05 c0       	rjmp	.+10     	; 0x3c3c <STEPPER_set_steps+0x20>
    3c32:	70 93 b5 06 	sts	0x06B5, r23
    3c36:	60 93 b4 06 	sts	0x06B4, r22
    3c3a:	08 c0       	rjmp	.+16     	; 0x3c4c <STEPPER_set_steps+0x30>
    3c3c:	70 93 b5 06 	sts	0x06B5, r23
    3c40:	60 93 b4 06 	sts	0x06B4, r22
    3c44:	70 93 b7 06 	sts	0x06B7, r23
    3c48:	60 93 b6 06 	sts	0x06B6, r22
    3c4c:	10 92 d8 06 	sts	0x06D8, r1
    3c50:	08 95       	ret

00003c52 <STEPPER_step>:
    3c52:	8f 92       	push	r8
    3c54:	9f 92       	push	r9
    3c56:	af 92       	push	r10
    3c58:	bf 92       	push	r11
    3c5a:	cf 92       	push	r12
    3c5c:	df 92       	push	r13
    3c5e:	ef 92       	push	r14
    3c60:	ff 92       	push	r15
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	18 2f       	mov	r17, r24
    3c6c:	f6 2e       	mov	r15, r22
    3c6e:	5a 01       	movw	r10, r20
    3c70:	49 01       	movw	r8, r18
    3c72:	e6 01       	movw	r28, r12
    3c74:	61 e0       	ldi	r22, 0x01	; 1
    3c76:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <STEPPER_set_mode>
    3c7a:	81 2f       	mov	r24, r17
    3c7c:	b5 01       	movw	r22, r10
    3c7e:	a4 01       	movw	r20, r8
    3c80:	0e 94 db 26 	call	0x4db6	; 0x4db6 <STEPPER_setup_decels>
    3c84:	81 2f       	mov	r24, r17
    3c86:	6f 2d       	mov	r22, r15
    3c88:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <STEPPER_set_dir>
    3c8c:	81 2f       	mov	r24, r17
    3c8e:	60 2f       	mov	r22, r16
    3c90:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <STEPPER_set_stop_mode>
    3c94:	81 2f       	mov	r24, r17
    3c96:	b5 01       	movw	r22, r10
    3c98:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <STEPPER_set_steps>
    3c9c:	c1 14       	cp	r12, r1
    3c9e:	d1 04       	cpc	r13, r1
    3ca0:	99 f0       	breq	.+38     	; 0x3cc8 <STEPPER_step+0x76>
    3ca2:	11 30       	cpi	r17, 0x01	; 1
    3ca4:	49 f0       	breq	.+18     	; 0x3cb8 <STEPPER_step+0x66>
    3ca6:	11 30       	cpi	r17, 0x01	; 1
    3ca8:	18 f0       	brcs	.+6      	; 0x3cb0 <STEPPER_step+0x5e>
    3caa:	12 30       	cpi	r17, 0x02	; 2
    3cac:	69 f4       	brne	.+26     	; 0x3cc8 <STEPPER_step+0x76>
    3cae:	06 c0       	rjmp	.+12     	; 0x3cbc <STEPPER_step+0x6a>
    3cb0:	18 82       	st	Y, r1
    3cb2:	10 92 d4 06 	sts	0x06D4, r1
    3cb6:	08 c0       	rjmp	.+16     	; 0x3cc8 <STEPPER_step+0x76>
    3cb8:	19 82       	std	Y+1, r1	; 0x01
    3cba:	04 c0       	rjmp	.+8      	; 0x3cc4 <STEPPER_step+0x72>
    3cbc:	18 82       	st	Y, r1
    3cbe:	19 82       	std	Y+1, r1	; 0x01
    3cc0:	10 92 d4 06 	sts	0x06D4, r1
    3cc4:	10 92 d5 06 	sts	0x06D5, r1
    3cc8:	d0 93 d7 06 	sts	0x06D7, r29
    3ccc:	c0 93 d6 06 	sts	0x06D6, r28
    3cd0:	ee 20       	and	r14, r14
    3cd2:	b9 f5       	brne	.+110    	; 0x3d42 <STEPPER_step+0xf0>
    3cd4:	82 e8       	ldi	r24, 0x82	; 130
    3cd6:	93 e0       	ldi	r25, 0x03	; 3
    3cd8:	90 93 d7 06 	sts	0x06D7, r25
    3cdc:	80 93 d6 06 	sts	0x06D6, r24
    3ce0:	81 2f       	mov	r24, r17
    3ce2:	b4 01       	movw	r22, r8
    3ce4:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <STEPPER_set_speed>
    3ce8:	81 2f       	mov	r24, r17
    3cea:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <STEPPER_go>
    3cee:	11 30       	cpi	r17, 0x01	; 1
    3cf0:	71 f0       	breq	.+28     	; 0x3d0e <STEPPER_step+0xbc>
    3cf2:	11 30       	cpi	r17, 0x01	; 1
    3cf4:	18 f0       	brcs	.+6      	; 0x3cfc <STEPPER_step+0xaa>
    3cf6:	12 30       	cpi	r17, 0x02	; 2
    3cf8:	59 f5       	brne	.+86     	; 0x3d50 <STEPPER_step+0xfe>
    3cfa:	12 c0       	rjmp	.+36     	; 0x3d20 <STEPPER_step+0xce>
    3cfc:	10 92 82 03 	sts	0x0382, r1
    3d00:	10 92 d4 06 	sts	0x06D4, r1
    3d04:	80 91 82 03 	lds	r24, 0x0382
    3d08:	88 23       	and	r24, r24
    3d0a:	e1 f3       	breq	.-8      	; 0x3d04 <STEPPER_step+0xb2>
    3d0c:	21 c0       	rjmp	.+66     	; 0x3d50 <STEPPER_step+0xfe>
    3d0e:	10 92 83 03 	sts	0x0383, r1
    3d12:	10 92 d5 06 	sts	0x06D5, r1
    3d16:	80 91 83 03 	lds	r24, 0x0383
    3d1a:	88 23       	and	r24, r24
    3d1c:	e1 f3       	breq	.-8      	; 0x3d16 <STEPPER_step+0xc4>
    3d1e:	18 c0       	rjmp	.+48     	; 0x3d50 <STEPPER_step+0xfe>
    3d20:	10 92 82 03 	sts	0x0382, r1
    3d24:	10 92 83 03 	sts	0x0383, r1
    3d28:	10 92 d4 06 	sts	0x06D4, r1
    3d2c:	10 92 d5 06 	sts	0x06D5, r1
    3d30:	80 91 82 03 	lds	r24, 0x0382
    3d34:	88 23       	and	r24, r24
    3d36:	e1 f3       	breq	.-8      	; 0x3d30 <STEPPER_step+0xde>
    3d38:	80 91 83 03 	lds	r24, 0x0383
    3d3c:	88 23       	and	r24, r24
    3d3e:	c1 f3       	breq	.-16     	; 0x3d30 <STEPPER_step+0xde>
    3d40:	07 c0       	rjmp	.+14     	; 0x3d50 <STEPPER_step+0xfe>
    3d42:	81 2f       	mov	r24, r17
    3d44:	b4 01       	movw	r22, r8
    3d46:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <STEPPER_set_speed>
    3d4a:	81 2f       	mov	r24, r17
    3d4c:	0e 94 a7 26 	call	0x4d4e	; 0x4d4e <STEPPER_go>
    3d50:	df 91       	pop	r29
    3d52:	cf 91       	pop	r28
    3d54:	1f 91       	pop	r17
    3d56:	0f 91       	pop	r16
    3d58:	ff 90       	pop	r15
    3d5a:	ef 90       	pop	r14
    3d5c:	df 90       	pop	r13
    3d5e:	cf 90       	pop	r12
    3d60:	bf 90       	pop	r11
    3d62:	af 90       	pop	r10
    3d64:	9f 90       	pop	r9
    3d66:	8f 90       	pop	r8
    3d68:	08 95       	ret

00003d6a <STEPPER_stop>:
    3d6a:	0f 93       	push	r16
    3d6c:	1f 93       	push	r17
    3d6e:	18 2f       	mov	r17, r24
    3d70:	06 2f       	mov	r16, r22
    3d72:	66 23       	and	r22, r22
    3d74:	49 f4       	brne	.+18     	; 0x3d88 <STEPPER_stop+0x1e>
    3d76:	60 e0       	ldi	r22, 0x00	; 0
    3d78:	70 e0       	ldi	r23, 0x00	; 0
    3d7a:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <STEPPER_set_speed>
    3d7e:	81 2f       	mov	r24, r17
    3d80:	60 e0       	ldi	r22, 0x00	; 0
    3d82:	70 e0       	ldi	r23, 0x00	; 0
    3d84:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <STEPPER_set_steps>
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	80 93 d8 06 	sts	0x06D8, r24
    3d8e:	11 30       	cpi	r17, 0x01	; 1
    3d90:	51 f0       	breq	.+20     	; 0x3da6 <STEPPER_stop+0x3c>
    3d92:	11 30       	cpi	r17, 0x01	; 1
    3d94:	18 f0       	brcs	.+6      	; 0x3d9c <STEPPER_stop+0x32>
    3d96:	12 30       	cpi	r17, 0x02	; 2
    3d98:	41 f4       	brne	.+16     	; 0x3daa <STEPPER_stop+0x40>
    3d9a:	03 c0       	rjmp	.+6      	; 0x3da2 <STEPPER_stop+0x38>
    3d9c:	00 93 c0 06 	sts	0x06C0, r16
    3da0:	04 c0       	rjmp	.+8      	; 0x3daa <STEPPER_stop+0x40>
    3da2:	00 93 c0 06 	sts	0x06C0, r16
    3da6:	00 93 c1 06 	sts	0x06C1, r16
    3daa:	10 92 d8 06 	sts	0x06D8, r1
    3dae:	1f 91       	pop	r17
    3db0:	0f 91       	pop	r16
    3db2:	08 95       	ret

00003db4 <STEPPER_wait_and_then>:
    3db4:	cf 92       	push	r12
    3db6:	df 92       	push	r13
    3db8:	ef 92       	push	r14
    3dba:	ff 92       	push	r15
    3dbc:	0f 93       	push	r16
    3dbe:	1f 93       	push	r17
    3dc0:	df 93       	push	r29
    3dc2:	cf 93       	push	r28
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    3dca:	81 30       	cpi	r24, 0x01	; 1
    3dcc:	61 f0       	breq	.+24     	; 0x3de6 <STEPPER_wait_and_then+0x32>
    3dce:	81 30       	cpi	r24, 0x01	; 1
    3dd0:	18 f0       	brcs	.+6      	; 0x3dd8 <STEPPER_wait_and_then+0x24>
    3dd2:	82 30       	cpi	r24, 0x02	; 2
    3dd4:	a1 f5       	brne	.+104    	; 0x3e3e <STEPPER_wait_and_then+0x8a>
    3dd6:	11 c0       	rjmp	.+34     	; 0x3dfa <STEPPER_wait_and_then+0x46>
    3dd8:	ec 85       	ldd	r30, Y+12	; 0x0c
    3dda:	fd 85       	ldd	r31, Y+13	; 0x0d
    3ddc:	80 91 d9 06 	lds	r24, 0x06D9
    3de0:	88 23       	and	r24, r24
    3de2:	e1 f3       	breq	.-8      	; 0x3ddc <STEPPER_wait_and_then+0x28>
    3de4:	06 c0       	rjmp	.+12     	; 0x3df2 <STEPPER_wait_and_then+0x3e>
    3de6:	ec 85       	ldd	r30, Y+12	; 0x0c
    3de8:	fd 85       	ldd	r31, Y+13	; 0x0d
    3dea:	80 91 da 06 	lds	r24, 0x06DA
    3dee:	88 23       	and	r24, r24
    3df0:	e1 f3       	breq	.-8      	; 0x3dea <STEPPER_wait_and_then+0x36>
    3df2:	30 97       	sbiw	r30, 0x00	; 0
    3df4:	21 f1       	breq	.+72     	; 0x3e3e <STEPPER_wait_and_then+0x8a>
    3df6:	09 95       	icall
    3df8:	22 c0       	rjmp	.+68     	; 0x3e3e <STEPPER_wait_and_then+0x8a>
    3dfa:	cc 84       	ldd	r12, Y+12	; 0x0c
    3dfc:	dd 84       	ldd	r13, Y+13	; 0x0d
    3dfe:	ee 84       	ldd	r14, Y+14	; 0x0e
    3e00:	ff 84       	ldd	r15, Y+15	; 0x0f
    3e02:	00 e0       	ldi	r16, 0x00	; 0
    3e04:	10 e0       	ldi	r17, 0x00	; 0
    3e06:	00 23       	and	r16, r16
    3e08:	51 f4       	brne	.+20     	; 0x3e1e <STEPPER_wait_and_then+0x6a>
    3e0a:	80 91 d9 06 	lds	r24, 0x06D9
    3e0e:	88 23       	and	r24, r24
    3e10:	31 f0       	breq	.+12     	; 0x3e1e <STEPPER_wait_and_then+0x6a>
    3e12:	c1 14       	cp	r12, r1
    3e14:	d1 04       	cpc	r13, r1
    3e16:	11 f0       	breq	.+4      	; 0x3e1c <STEPPER_wait_and_then+0x68>
    3e18:	f6 01       	movw	r30, r12
    3e1a:	09 95       	icall
    3e1c:	01 e0       	ldi	r16, 0x01	; 1
    3e1e:	11 23       	and	r17, r17
    3e20:	51 f4       	brne	.+20     	; 0x3e36 <STEPPER_wait_and_then+0x82>
    3e22:	80 91 da 06 	lds	r24, 0x06DA
    3e26:	88 23       	and	r24, r24
    3e28:	31 f0       	breq	.+12     	; 0x3e36 <STEPPER_wait_and_then+0x82>
    3e2a:	e1 14       	cp	r14, r1
    3e2c:	f1 04       	cpc	r15, r1
    3e2e:	11 f0       	breq	.+4      	; 0x3e34 <STEPPER_wait_and_then+0x80>
    3e30:	f7 01       	movw	r30, r14
    3e32:	09 95       	icall
    3e34:	11 e0       	ldi	r17, 0x01	; 1
    3e36:	00 23       	and	r16, r16
    3e38:	31 f3       	breq	.-52     	; 0x3e06 <STEPPER_wait_and_then+0x52>
    3e3a:	11 23       	and	r17, r17
    3e3c:	21 f3       	breq	.-56     	; 0x3e06 <STEPPER_wait_and_then+0x52>
    3e3e:	cf 91       	pop	r28
    3e40:	df 91       	pop	r29
    3e42:	1f 91       	pop	r17
    3e44:	0f 91       	pop	r16
    3e46:	ff 90       	pop	r15
    3e48:	ef 90       	pop	r14
    3e4a:	df 90       	pop	r13
    3e4c:	cf 90       	pop	r12
    3e4e:	08 95       	ret

00003e50 <SYS_get_state>:
    3e50:	e8 2f       	mov	r30, r24
    3e52:	f0 e0       	ldi	r31, 0x00	; 0
    3e54:	e3 31       	cpi	r30, 0x13	; 19
    3e56:	f1 05       	cpc	r31, r1
    3e58:	40 f4       	brcc	.+16     	; 0x3e6a <SYS_get_state+0x1a>
    3e5a:	e2 5c       	subi	r30, 0xC2	; 194
    3e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5e:	ee 0f       	add	r30, r30
    3e60:	ff 1f       	adc	r31, r31
    3e62:	05 90       	lpm	r0, Z+
    3e64:	f4 91       	lpm	r31, Z+
    3e66:	e0 2d       	mov	r30, r0
    3e68:	09 94       	ijmp
    3e6a:	80 e0       	ldi	r24, 0x00	; 0
    3e6c:	08 95       	ret
    3e6e:	80 91 db 06 	lds	r24, 0x06DB
    3e72:	08 95       	ret
    3e74:	80 91 dc 06 	lds	r24, 0x06DC
    3e78:	08 95       	ret
    3e7a:	80 91 dd 06 	lds	r24, 0x06DD
    3e7e:	08 95       	ret
    3e80:	80 91 de 06 	lds	r24, 0x06DE
    3e84:	08 95       	ret
    3e86:	80 91 df 06 	lds	r24, 0x06DF
    3e8a:	08 95       	ret
    3e8c:	80 91 e1 06 	lds	r24, 0x06E1
    3e90:	08 95       	ret
    3e92:	80 91 e0 06 	lds	r24, 0x06E0
    3e96:	08 95       	ret
    3e98:	80 91 e2 06 	lds	r24, 0x06E2
    3e9c:	08 95       	ret
    3e9e:	80 91 e3 06 	lds	r24, 0x06E3
    3ea2:	08 95       	ret
    3ea4:	80 91 e4 06 	lds	r24, 0x06E4
    3ea8:	08 95       	ret
    3eaa:	80 91 e5 06 	lds	r24, 0x06E5
    3eae:	08 95       	ret
    3eb0:	80 91 e6 06 	lds	r24, 0x06E6
    3eb4:	08 95       	ret
    3eb6:	80 91 e7 06 	lds	r24, 0x06E7
    3eba:	08 95       	ret
    3ebc:	80 91 e8 06 	lds	r24, 0x06E8
    3ec0:	08 95       	ret
    3ec2:	80 91 e9 06 	lds	r24, 0x06E9
    3ec6:	08 95       	ret
    3ec8:	80 91 ea 06 	lds	r24, 0x06EA
    3ecc:	08 95       	ret
    3ece:	80 91 eb 06 	lds	r24, 0x06EB
    3ed2:	08 95       	ret
    3ed4:	80 91 ec 06 	lds	r24, 0x06EC
    3ed8:	08 95       	ret
    3eda:	80 91 ed 06 	lds	r24, 0x06ED
    3ede:	08 95       	ret

00003ee0 <SYS_set_state>:
    3ee0:	e8 2f       	mov	r30, r24
    3ee2:	f0 e0       	ldi	r31, 0x00	; 0
    3ee4:	e3 31       	cpi	r30, 0x13	; 19
    3ee6:	f1 05       	cpc	r31, r1
    3ee8:	08 f0       	brcs	.+2      	; 0x3eec <SYS_set_state+0xc>
    3eea:	40 c0       	rjmp	.+128    	; 0x3f6c <SYS_set_state+0x8c>
    3eec:	ef 5a       	subi	r30, 0xAF	; 175
    3eee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef0:	ee 0f       	add	r30, r30
    3ef2:	ff 1f       	adc	r31, r31
    3ef4:	05 90       	lpm	r0, Z+
    3ef6:	f4 91       	lpm	r31, Z+
    3ef8:	e0 2d       	mov	r30, r0
    3efa:	09 94       	ijmp
    3efc:	60 93 db 06 	sts	0x06DB, r22
    3f00:	08 95       	ret
    3f02:	60 93 dc 06 	sts	0x06DC, r22
    3f06:	08 95       	ret
    3f08:	60 93 dd 06 	sts	0x06DD, r22
    3f0c:	08 95       	ret
    3f0e:	60 93 de 06 	sts	0x06DE, r22
    3f12:	08 95       	ret
    3f14:	60 93 df 06 	sts	0x06DF, r22
    3f18:	08 95       	ret
    3f1a:	60 93 e1 06 	sts	0x06E1, r22
    3f1e:	08 95       	ret
    3f20:	60 93 e0 06 	sts	0x06E0, r22
    3f24:	08 95       	ret
    3f26:	60 93 e2 06 	sts	0x06E2, r22
    3f2a:	08 95       	ret
    3f2c:	60 93 e3 06 	sts	0x06E3, r22
    3f30:	08 95       	ret
    3f32:	60 93 e4 06 	sts	0x06E4, r22
    3f36:	08 95       	ret
    3f38:	60 93 e5 06 	sts	0x06E5, r22
    3f3c:	08 95       	ret
    3f3e:	60 93 e6 06 	sts	0x06E6, r22
    3f42:	08 95       	ret
    3f44:	60 93 e7 06 	sts	0x06E7, r22
    3f48:	08 95       	ret
    3f4a:	60 93 e8 06 	sts	0x06E8, r22
    3f4e:	08 95       	ret
    3f50:	60 93 e9 06 	sts	0x06E9, r22
    3f54:	08 95       	ret
    3f56:	60 93 ea 06 	sts	0x06EA, r22
    3f5a:	08 95       	ret
    3f5c:	60 93 eb 06 	sts	0x06EB, r22
    3f60:	08 95       	ret
    3f62:	60 93 ec 06 	sts	0x06EC, r22
    3f66:	08 95       	ret
    3f68:	60 93 eb 06 	sts	0x06EB, r22
    3f6c:	08 95       	ret

00003f6e <ATTINY_get_sensors>:
    3f6e:	0f 93       	push	r16
    3f70:	1f 93       	push	r17
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    3f78:	81 30       	cpi	r24, 0x01	; 1
    3f7a:	11 f0       	breq	.+4      	; 0x3f80 <ATTINY_get_sensors+0x12>
    3f7c:	00 e0       	ldi	r16, 0x00	; 0
    3f7e:	24 c0       	rjmp	.+72     	; 0x3fc8 <ATTINY_get_sensors+0x5a>
    3f80:	87 e0       	ldi	r24, 0x07	; 7
    3f82:	0e 94 ae 1a 	call	0x355c	; 0x355c <SPI_set_slave_addr>
    3f86:	82 e0       	ldi	r24, 0x02	; 2
    3f88:	6a e0       	ldi	r22, 0x0A	; 10
    3f8a:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <SPI_transmit>
    3f8e:	82 e0       	ldi	r24, 0x02	; 2
    3f90:	62 eb       	ldi	r22, 0xB2	; 178
    3f92:	0e 94 ff 1a 	call	0x35fe	; 0x35fe <SPI_transmit>
    3f96:	18 ec       	ldi	r17, 0xC8	; 200
    3f98:	81 2f       	mov	r24, r17
    3f9a:	8a 95       	dec	r24
    3f9c:	f1 f7       	brne	.-4      	; 0x3f9a <ATTINY_get_sensors+0x2c>
    3f9e:	82 e0       	ldi	r24, 0x02	; 2
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	0e 94 92 25 	call	0x4b24	; 0x4b24 <SPI_receive>
    3fa6:	08 2f       	mov	r16, r24
    3fa8:	81 2f       	mov	r24, r17
    3faa:	8a 95       	dec	r24
    3fac:	f1 f7       	brne	.-4      	; 0x3faa <ATTINY_get_sensors+0x3c>
    3fae:	82 e0       	ldi	r24, 0x02	; 2
    3fb0:	60 e0       	ldi	r22, 0x00	; 0
    3fb2:	0e 94 92 25 	call	0x4b24	; 0x4b24 <SPI_receive>
    3fb6:	1a 95       	dec	r17
    3fb8:	f1 f7       	brne	.-4      	; 0x3fb6 <ATTINY_get_sensors+0x48>
    3fba:	87 e0       	ldi	r24, 0x07	; 7
    3fbc:	0e 94 ae 1a 	call	0x355c	; 0x355c <SPI_set_slave_addr>
    3fc0:	88 e8       	ldi	r24, 0x88	; 136
    3fc2:	93 e1       	ldi	r25, 0x13	; 19
    3fc4:	01 97       	sbiw	r24, 0x01	; 1
    3fc6:	f1 f7       	brne	.-4      	; 0x3fc4 <ATTINY_get_sensors+0x56>
    3fc8:	80 2f       	mov	r24, r16
    3fca:	1f 91       	pop	r17
    3fcc:	0f 91       	pop	r16
    3fce:	08 95       	ret

00003fd0 <ATTINY_get_SW_state>:
    3fd0:	1f 93       	push	r17
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	18 2f       	mov	r17, r24
    3fd8:	80 91 85 03 	lds	r24, 0x0385
    3fdc:	88 23       	and	r24, r24
    3fde:	41 f0       	breq	.+16     	; 0x3ff0 <ATTINY_get_SW_state+0x20>
    3fe0:	80 91 8f 03 	lds	r24, 0x038F
    3fe4:	88 23       	and	r24, r24
    3fe6:	99 f0       	breq	.+38     	; 0x400e <ATTINY_get_SW_state+0x3e>
    3fe8:	10 92 85 03 	sts	0x0385, r1
    3fec:	10 92 8f 03 	sts	0x038F, r1
    3ff0:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <ATTINY_get_sensors>
    3ff4:	80 93 84 03 	sts	0x0384, r24
    3ff8:	89 e8       	ldi	r24, 0x89	; 137
    3ffa:	93 e0       	ldi	r25, 0x03	; 3
    3ffc:	61 e0       	ldi	r22, 0x01	; 1
    3ffe:	40 e0       	ldi	r20, 0x00	; 0
    4000:	22 e3       	ldi	r18, 0x32	; 50
    4002:	30 e0       	ldi	r19, 0x00	; 0
    4004:	0e 94 a6 20 	call	0x414c	; 0x414c <TMRSRVC_new>
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	80 93 85 03 	sts	0x0385, r24
    400e:	90 91 84 03 	lds	r25, 0x0384
    4012:	a1 2f       	mov	r26, r17
    4014:	b0 e0       	ldi	r27, 0x00	; 0
    4016:	ed 01       	movw	r28, r26
    4018:	c9 5c       	subi	r28, 0xC9	; 201
    401a:	dc 4f       	sbci	r29, 0xFC	; 252
    401c:	88 81       	ld	r24, Y
    401e:	88 23       	and	r24, r24
    4020:	69 f0       	breq	.+26     	; 0x403c <ATTINY_get_SW_state+0x6c>
    4022:	fd 01       	movw	r30, r26
    4024:	e6 5c       	subi	r30, 0xC6	; 198
    4026:	fc 4f       	sbci	r31, 0xFC	; 252
    4028:	80 81       	ld	r24, Z
    402a:	98 23       	and	r25, r24
    402c:	c1 f0       	breq	.+48     	; 0x405e <ATTINY_get_SW_state+0x8e>
    402e:	fd 01       	movw	r30, r26
    4030:	ea 57       	subi	r30, 0x7A	; 122
    4032:	fc 4f       	sbci	r31, 0xFC	; 252
    4034:	81 e0       	ldi	r24, 0x01	; 1
    4036:	80 83       	st	Z, r24
    4038:	18 82       	st	Y, r1
    403a:	11 c0       	rjmp	.+34     	; 0x405e <ATTINY_get_SW_state+0x8e>
    403c:	fd 01       	movw	r30, r26
    403e:	ea 57       	subi	r30, 0x7A	; 122
    4040:	fc 4f       	sbci	r31, 0xFC	; 252
    4042:	80 81       	ld	r24, Z
    4044:	81 11       	cpse	r24, r1
    4046:	10 82       	st	Z, r1
    4048:	fd 01       	movw	r30, r26
    404a:	e6 5c       	subi	r30, 0xC6	; 198
    404c:	fc 4f       	sbci	r31, 0xFC	; 252
    404e:	80 81       	ld	r24, Z
    4050:	98 23       	and	r25, r24
    4052:	29 f4       	brne	.+10     	; 0x405e <ATTINY_get_SW_state+0x8e>
    4054:	fd 01       	movw	r30, r26
    4056:	e9 5c       	subi	r30, 0xC9	; 201
    4058:	fc 4f       	sbci	r31, 0xFC	; 252
    405a:	81 e0       	ldi	r24, 0x01	; 1
    405c:	80 83       	st	Z, r24
    405e:	aa 57       	subi	r26, 0x7A	; 122
    4060:	bc 4f       	sbci	r27, 0xFC	; 252
    4062:	8c 91       	ld	r24, X
    4064:	df 91       	pop	r29
    4066:	cf 91       	pop	r28
    4068:	1f 91       	pop	r17
    406a:	08 95       	ret

0000406c <ATTINY_open>:
    406c:	82 e0       	ldi	r24, 0x02	; 2
    406e:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    4072:	88 23       	and	r24, r24
    4074:	19 f4       	brne	.+6      	; 0x407c <ATTINY_open+0x10>
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	82 e0       	ldi	r24, 0x02	; 2
    407a:	08 95       	ret
    407c:	10 92 09 07 	sts	0x0709, r1
    4080:	10 92 08 07 	sts	0x0708, r1
    4084:	10 92 0b 07 	sts	0x070B, r1
    4088:	10 92 0a 07 	sts	0x070A, r1
    408c:	10 92 0d 07 	sts	0x070D, r1
    4090:	10 92 0c 07 	sts	0x070C, r1
    4094:	10 92 0f 07 	sts	0x070F, r1
    4098:	10 92 0e 07 	sts	0x070E, r1
    409c:	10 92 11 07 	sts	0x0711, r1
    40a0:	10 92 10 07 	sts	0x0710, r1
    40a4:	80 e9       	ldi	r24, 0x90	; 144
    40a6:	91 e0       	ldi	r25, 0x01	; 1
    40a8:	90 93 f5 06 	sts	0x06F5, r25
    40ac:	80 93 f4 06 	sts	0x06F4, r24
    40b0:	90 93 f7 06 	sts	0x06F7, r25
    40b4:	80 93 f6 06 	sts	0x06F6, r24
    40b8:	90 93 f9 06 	sts	0x06F9, r25
    40bc:	80 93 f8 06 	sts	0x06F8, r24
    40c0:	90 93 fb 06 	sts	0x06FB, r25
    40c4:	80 93 fa 06 	sts	0x06FA, r24
    40c8:	90 93 fd 06 	sts	0x06FD, r25
    40cc:	80 93 fc 06 	sts	0x06FC, r24
    40d0:	84 e3       	ldi	r24, 0x34	; 52
    40d2:	98 e0       	ldi	r25, 0x08	; 8
    40d4:	90 93 ff 06 	sts	0x06FF, r25
    40d8:	80 93 fe 06 	sts	0x06FE, r24
    40dc:	90 93 01 07 	sts	0x0701, r25
    40e0:	80 93 00 07 	sts	0x0700, r24
    40e4:	90 93 03 07 	sts	0x0703, r25
    40e8:	80 93 02 07 	sts	0x0702, r24
    40ec:	90 93 05 07 	sts	0x0705, r25
    40f0:	80 93 04 07 	sts	0x0704, r24
    40f4:	90 93 07 07 	sts	0x0707, r25
    40f8:	80 93 06 07 	sts	0x0706, r24
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	61 e0       	ldi	r22, 0x01	; 1
    4100:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    4104:	91 e0       	ldi	r25, 0x01	; 1
    4106:	81 e0       	ldi	r24, 0x01	; 1
    4108:	08 95       	ret

0000410a <TMRSRVC_delay>:
    410a:	df 93       	push	r29
    410c:	cf 93       	push	r28
    410e:	cd b7       	in	r28, 0x3d	; 61
    4110:	de b7       	in	r29, 0x3e	; 62
    4112:	29 97       	sbiw	r28, 0x09	; 9
    4114:	0f b6       	in	r0, 0x3f	; 63
    4116:	f8 94       	cli
    4118:	de bf       	out	0x3e, r29	; 62
    411a:	0f be       	out	0x3f, r0	; 63
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	9c 01       	movw	r18, r24
    4120:	ce 01       	movw	r24, r28
    4122:	01 96       	adiw	r24, 0x01	; 1
    4124:	61 e0       	ldi	r22, 0x01	; 1
    4126:	40 e0       	ldi	r20, 0x00	; 0
    4128:	0e 94 a6 20 	call	0x414c	; 0x414c <TMRSRVC_new>
    412c:	98 2f       	mov	r25, r24
    412e:	88 23       	and	r24, r24
    4130:	19 f4       	brne	.+6      	; 0x4138 <TMRSRVC_delay+0x2e>
    4132:	8f 81       	ldd	r24, Y+7	; 0x07
    4134:	88 23       	and	r24, r24
    4136:	e9 f3       	breq	.-6      	; 0x4132 <TMRSRVC_delay+0x28>
    4138:	89 2f       	mov	r24, r25
    413a:	29 96       	adiw	r28, 0x09	; 9
    413c:	0f b6       	in	r0, 0x3f	; 63
    413e:	f8 94       	cli
    4140:	de bf       	out	0x3e, r29	; 62
    4142:	0f be       	out	0x3f, r0	; 63
    4144:	cd bf       	out	0x3d, r28	; 61
    4146:	cf 91       	pop	r28
    4148:	df 91       	pop	r29
    414a:	08 95       	ret

0000414c <TMRSRVC_new>:
    414c:	ef 92       	push	r14
    414e:	ff 92       	push	r15
    4150:	0f 93       	push	r16
    4152:	1f 93       	push	r17
    4154:	cf 93       	push	r28
    4156:	df 93       	push	r29
    4158:	ec 01       	movw	r28, r24
    415a:	f6 2e       	mov	r15, r22
    415c:	e4 2e       	mov	r14, r20
    415e:	89 01       	movw	r16, r18
    4160:	88 e0       	ldi	r24, 0x08	; 8
    4162:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    4166:	81 30       	cpi	r24, 0x01	; 1
    4168:	11 f0       	breq	.+4      	; 0x416e <TMRSRVC_new+0x22>
    416a:	81 e0       	ldi	r24, 0x01	; 1
    416c:	26 c0       	rjmp	.+76     	; 0x41ba <TMRSRVC_new+0x6e>
    416e:	84 e0       	ldi	r24, 0x04	; 4
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	0e 94 e4 33 	call	0x67c8	; 0x67c8 <malloc>
    4176:	fc 01       	movw	r30, r24
    4178:	00 97       	sbiw	r24, 0x00	; 0
    417a:	11 f4       	brne	.+4      	; 0x4180 <TMRSRVC_new+0x34>
    417c:	82 e0       	ldi	r24, 0x02	; 2
    417e:	1d c0       	rjmp	.+58     	; 0x41ba <TMRSRVC_new+0x6e>
    4180:	f9 82       	std	Y+1, r15	; 0x01
    4182:	f0 fc       	sbrc	r15, 0
    4184:	1e 82       	std	Y+6, r1	; 0x06
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	e8 16       	cp	r14, r24
    418a:	19 f4       	brne	.+6      	; 0x4192 <TMRSRVC_new+0x46>
    418c:	89 81       	ldd	r24, Y+1	; 0x01
    418e:	84 60       	ori	r24, 0x04	; 4
    4190:	89 83       	std	Y+1, r24	; 0x01
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	88 60       	ori	r24, 0x08	; 8
    4196:	89 83       	std	Y+1, r24	; 0x01
    4198:	1b 83       	std	Y+3, r17	; 0x03
    419a:	0a 83       	std	Y+2, r16	; 0x02
    419c:	1d 83       	std	Y+5, r17	; 0x05
    419e:	0c 83       	std	Y+4, r16	; 0x04
    41a0:	d1 83       	std	Z+1, r29	; 0x01
    41a2:	c0 83       	st	Z, r28
    41a4:	13 82       	std	Z+3, r1	; 0x03
    41a6:	12 82       	std	Z+2, r1	; 0x02
    41a8:	81 e0       	ldi	r24, 0x01	; 1
    41aa:	80 93 e2 03 	sts	0x03E2, r24
    41ae:	cf 01       	movw	r24, r30
    41b0:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <TMRSRVC_insert>
    41b4:	10 92 e2 03 	sts	0x03E2, r1
    41b8:	80 e0       	ldi	r24, 0x00	; 0
    41ba:	df 91       	pop	r29
    41bc:	cf 91       	pop	r28
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	ff 90       	pop	r15
    41c4:	ef 90       	pop	r14
    41c6:	08 95       	ret

000041c8 <I2C_MSTR_get>:
    41c8:	fc 01       	movw	r30, r24
    41ca:	80 91 15 07 	lds	r24, 0x0715
    41ce:	81 30       	cpi	r24, 0x01	; 1
    41d0:	11 f0       	breq	.+4      	; 0x41d6 <I2C_MSTR_get+0xe>
    41d2:	85 e0       	ldi	r24, 0x05	; 5
    41d4:	08 95       	ret
    41d6:	80 91 16 07 	lds	r24, 0x0716
    41da:	81 30       	cpi	r24, 0x01	; 1
    41dc:	11 f0       	breq	.+4      	; 0x41e2 <I2C_MSTR_get+0x1a>
    41de:	8a e0       	ldi	r24, 0x0A	; 10
    41e0:	08 95       	ret
    41e2:	61 30       	cpi	r22, 0x01	; 1
    41e4:	11 f4       	brne	.+4      	; 0x41ea <I2C_MSTR_get+0x22>
    41e6:	84 ec       	ldi	r24, 0xC4	; 196
    41e8:	01 c0       	rjmp	.+2      	; 0x41ec <I2C_MSTR_get+0x24>
    41ea:	84 e8       	ldi	r24, 0x84	; 132
    41ec:	80 93 bc 00 	sts	0x00BC, r24
    41f0:	80 91 bc 00 	lds	r24, 0x00BC
    41f4:	87 ff       	sbrs	r24, 7
    41f6:	fc cf       	rjmp	.-8      	; 0x41f0 <I2C_MSTR_get+0x28>
    41f8:	61 30       	cpi	r22, 0x01	; 1
    41fa:	31 f4       	brne	.+12     	; 0x4208 <I2C_MSTR_get+0x40>
    41fc:	80 91 b9 00 	lds	r24, 0x00B9
    4200:	88 7f       	andi	r24, 0xF8	; 248
    4202:	80 35       	cpi	r24, 0x50	; 80
    4204:	59 f4       	brne	.+22     	; 0x421c <I2C_MSTR_get+0x54>
    4206:	05 c0       	rjmp	.+10     	; 0x4212 <I2C_MSTR_get+0x4a>
    4208:	80 91 b9 00 	lds	r24, 0x00B9
    420c:	88 7f       	andi	r24, 0xF8	; 248
    420e:	88 35       	cpi	r24, 0x58	; 88
    4210:	29 f4       	brne	.+10     	; 0x421c <I2C_MSTR_get+0x54>
    4212:	80 91 bb 00 	lds	r24, 0x00BB
    4216:	80 83       	st	Z, r24
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	08 95       	ret
    421c:	82 e0       	ldi	r24, 0x02	; 2
    421e:	08 95       	ret

00004220 <I2C_MSTR_send>:
    4220:	98 2f       	mov	r25, r24
    4222:	80 91 15 07 	lds	r24, 0x0715
    4226:	81 30       	cpi	r24, 0x01	; 1
    4228:	11 f0       	breq	.+4      	; 0x422e <I2C_MSTR_send+0xe>
    422a:	85 e0       	ldi	r24, 0x05	; 5
    422c:	08 95       	ret
    422e:	80 91 16 07 	lds	r24, 0x0716
    4232:	81 30       	cpi	r24, 0x01	; 1
    4234:	11 f0       	breq	.+4      	; 0x423a <I2C_MSTR_send+0x1a>
    4236:	8a e0       	ldi	r24, 0x0A	; 10
    4238:	08 95       	ret
    423a:	90 93 bb 00 	sts	0x00BB, r25
    423e:	84 e8       	ldi	r24, 0x84	; 132
    4240:	80 93 bc 00 	sts	0x00BC, r24
    4244:	80 91 bc 00 	lds	r24, 0x00BC
    4248:	87 ff       	sbrs	r24, 7
    424a:	fc cf       	rjmp	.-8      	; 0x4244 <I2C_MSTR_send+0x24>
    424c:	80 91 b9 00 	lds	r24, 0x00B9
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	88 7f       	andi	r24, 0xF8	; 248
    4254:	90 70       	andi	r25, 0x00	; 0
    4256:	88 32       	cpi	r24, 0x28	; 40
    4258:	91 05       	cpc	r25, r1
    425a:	21 f0       	breq	.+8      	; 0x4264 <I2C_MSTR_send+0x44>
    425c:	c0 97       	sbiw	r24, 0x30	; 48
    425e:	21 f4       	brne	.+8      	; 0x4268 <I2C_MSTR_send+0x48>
    4260:	83 e0       	ldi	r24, 0x03	; 3
    4262:	08 95       	ret
    4264:	80 e0       	ldi	r24, 0x00	; 0
    4266:	08 95       	ret
    4268:	8c e0       	ldi	r24, 0x0C	; 12
    426a:	08 95       	ret

0000426c <I2C_MSTR_start>:
    426c:	98 2f       	mov	r25, r24
    426e:	20 91 15 07 	lds	r18, 0x0715
    4272:	21 30       	cpi	r18, 0x01	; 1
    4274:	11 f0       	breq	.+4      	; 0x427a <I2C_MSTR_start+0xe>
    4276:	85 e0       	ldi	r24, 0x05	; 5
    4278:	08 95       	ret
    427a:	80 91 17 07 	lds	r24, 0x0717
    427e:	81 30       	cpi	r24, 0x01	; 1
    4280:	11 f4       	brne	.+4      	; 0x4286 <I2C_MSTR_start+0x1a>
    4282:	89 e0       	ldi	r24, 0x09	; 9
    4284:	08 95       	ret
    4286:	20 93 16 07 	sts	0x0716, r18
    428a:	84 ea       	ldi	r24, 0xA4	; 164
    428c:	80 93 bc 00 	sts	0x00BC, r24
    4290:	80 91 bc 00 	lds	r24, 0x00BC
    4294:	87 ff       	sbrs	r24, 7
    4296:	fc cf       	rjmp	.-8      	; 0x4290 <I2C_MSTR_start+0x24>
    4298:	80 91 b9 00 	lds	r24, 0x00B9
    429c:	88 7f       	andi	r24, 0xF8	; 248
    429e:	88 30       	cpi	r24, 0x08	; 8
    42a0:	39 f0       	breq	.+14     	; 0x42b0 <I2C_MSTR_start+0x44>
    42a2:	80 91 b9 00 	lds	r24, 0x00B9
    42a6:	88 7f       	andi	r24, 0xF8	; 248
    42a8:	80 31       	cpi	r24, 0x10	; 16
    42aa:	11 f0       	breq	.+4      	; 0x42b0 <I2C_MSTR_start+0x44>
    42ac:	81 e0       	ldi	r24, 0x01	; 1
    42ae:	08 95       	ret
    42b0:	61 30       	cpi	r22, 0x01	; 1
    42b2:	19 f4       	brne	.+6      	; 0x42ba <I2C_MSTR_start+0x4e>
    42b4:	99 0f       	add	r25, r25
    42b6:	91 60       	ori	r25, 0x01	; 1
    42b8:	03 c0       	rjmp	.+6      	; 0x42c0 <I2C_MSTR_start+0x54>
    42ba:	66 23       	and	r22, r22
    42bc:	19 f4       	brne	.+6      	; 0x42c4 <I2C_MSTR_start+0x58>
    42be:	99 0f       	add	r25, r25
    42c0:	90 93 bb 00 	sts	0x00BB, r25
    42c4:	84 e8       	ldi	r24, 0x84	; 132
    42c6:	80 93 bc 00 	sts	0x00BC, r24
    42ca:	80 91 bc 00 	lds	r24, 0x00BC
    42ce:	87 ff       	sbrs	r24, 7
    42d0:	fc cf       	rjmp	.-8      	; 0x42ca <I2C_MSTR_start+0x5e>
    42d2:	61 30       	cpi	r22, 0x01	; 1
    42d4:	31 f4       	brne	.+12     	; 0x42e2 <I2C_MSTR_start+0x76>
    42d6:	80 91 b9 00 	lds	r24, 0x00B9
    42da:	88 7f       	andi	r24, 0xF8	; 248
    42dc:	80 34       	cpi	r24, 0x40	; 64
    42de:	41 f4       	brne	.+16     	; 0x42f0 <I2C_MSTR_start+0x84>
    42e0:	09 c0       	rjmp	.+18     	; 0x42f4 <I2C_MSTR_start+0x88>
    42e2:	66 23       	and	r22, r22
    42e4:	39 f4       	brne	.+14     	; 0x42f4 <I2C_MSTR_start+0x88>
    42e6:	80 91 b9 00 	lds	r24, 0x00B9
    42ea:	88 7f       	andi	r24, 0xF8	; 248
    42ec:	88 31       	cpi	r24, 0x18	; 24
    42ee:	11 f0       	breq	.+4      	; 0x42f4 <I2C_MSTR_start+0x88>
    42f0:	82 e0       	ldi	r24, 0x02	; 2
    42f2:	08 95       	ret
    42f4:	80 e0       	ldi	r24, 0x00	; 0
    42f6:	08 95       	ret

000042f8 <I2C_MSTR_stop>:
    42f8:	80 91 16 07 	lds	r24, 0x0716
    42fc:	81 30       	cpi	r24, 0x01	; 1
    42fe:	11 f0       	breq	.+4      	; 0x4304 <I2C_MSTR_stop+0xc>
    4300:	8a e0       	ldi	r24, 0x0A	; 10
    4302:	08 95       	ret
    4304:	80 91 18 07 	lds	r24, 0x0718
    4308:	81 30       	cpi	r24, 0x01	; 1
    430a:	29 f4       	brne	.+10     	; 0x4316 <I2C_MSTR_stop+0x1e>
    430c:	85 e9       	ldi	r24, 0x95	; 149
    430e:	80 93 bc 00 	sts	0x00BC, r24
    4312:	80 e0       	ldi	r24, 0x00	; 0
    4314:	08 95       	ret
    4316:	84 e9       	ldi	r24, 0x94	; 148
    4318:	80 93 bc 00 	sts	0x00BC, r24
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	08 95       	ret

00004320 <I2C_open>:
    4320:	82 e1       	ldi	r24, 0x12	; 18
    4322:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    4326:	88 23       	and	r24, r24
    4328:	b1 f4       	brne	.+44     	; 0x4356 <I2C_open+0x36>
    432a:	10 92 15 07 	sts	0x0715, r1
    432e:	10 92 16 07 	sts	0x0716, r1
    4332:	10 92 17 07 	sts	0x0717, r1
    4336:	10 92 18 07 	sts	0x0718, r1
    433a:	10 92 19 07 	sts	0x0719, r1
    433e:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__I2C_init>
    4342:	87 e1       	ldi	r24, 0x17	; 23
    4344:	60 e0       	ldi	r22, 0x00	; 0
    4346:	0e 94 ae 21 	call	0x435c	; 0x435c <I2C_set_BRG>
    434a:	0e 94 cd 27 	call	0x4f9a	; 0x4f9a <I2C_enable>
    434e:	82 e1       	ldi	r24, 0x12	; 18
    4350:	61 e0       	ldi	r22, 0x01	; 1
    4352:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    4356:	82 e1       	ldi	r24, 0x12	; 18
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	08 95       	ret

0000435c <I2C_set_BRG>:
    435c:	63 70       	andi	r22, 0x03	; 3
    435e:	60 93 b9 00 	sts	0x00B9, r22
    4362:	80 93 b8 00 	sts	0x00B8, r24
    4366:	81 e0       	ldi	r24, 0x01	; 1
    4368:	80 93 15 07 	sts	0x0715, r24
    436c:	08 95       	ret

0000436e <__ADC_init>:
    436e:	8f e1       	ldi	r24, 0x1F	; 31
    4370:	80 93 7c 00 	sts	0x007C, r24
    4374:	ea e7       	ldi	r30, 0x7A	; 122
    4376:	f0 e0       	ldi	r31, 0x00	; 0
    4378:	87 e0       	ldi	r24, 0x07	; 7
    437a:	80 83       	st	Z, r24
    437c:	80 81       	ld	r24, Z
    437e:	80 68       	ori	r24, 0x80	; 128
    4380:	80 83       	st	Z, r24
    4382:	08 95       	ret

00004384 <CBOT_init>:
    4384:	0e 94 18 27 	call	0x4e30	; 0x4e30 <SYS_init>
    4388:	0e 94 f4 24 	call	0x49e8	; 0x49e8 <ATMEGA_open>
    438c:	0e 94 24 24 	call	0x4848	; 0x4848 <ISR_open>
    4390:	0e 94 a4 27 	call	0x4f48	; 0x4f48 <TMRSRVC_open>
    4394:	0e 94 59 25 	call	0x4ab2	; 0x4ab2 <SPI_open>
    4398:	0e 94 36 20 	call	0x406c	; 0x406c <ATTINY_open>
    439c:	78 94       	sei
    439e:	08 95       	ret

000043a0 <CBOT_ISR_init>:
    43a0:	00 00       	nop
    43a2:	08 95       	ret

000043a4 <__vector_16>:
    43a4:	1f 92       	push	r1
    43a6:	0f 92       	push	r0
    43a8:	0f b6       	in	r0, 0x3f	; 63
    43aa:	0f 92       	push	r0
    43ac:	11 24       	eor	r1, r1
    43ae:	2f 93       	push	r18
    43b0:	3f 93       	push	r19
    43b2:	4f 93       	push	r20
    43b4:	5f 93       	push	r21
    43b6:	6f 93       	push	r22
    43b8:	7f 93       	push	r23
    43ba:	8f 93       	push	r24
    43bc:	9f 93       	push	r25
    43be:	af 93       	push	r26
    43c0:	bf 93       	push	r27
    43c2:	ef 93       	push	r30
    43c4:	ff 93       	push	r31
    43c6:	e0 91 b2 03 	lds	r30, 0x03B2
    43ca:	f0 91 b3 03 	lds	r31, 0x03B3
    43ce:	30 97       	sbiw	r30, 0x00	; 0
    43d0:	09 f0       	breq	.+2      	; 0x43d4 <__vector_16+0x30>
    43d2:	09 95       	icall
    43d4:	ff 91       	pop	r31
    43d6:	ef 91       	pop	r30
    43d8:	bf 91       	pop	r27
    43da:	af 91       	pop	r26
    43dc:	9f 91       	pop	r25
    43de:	8f 91       	pop	r24
    43e0:	7f 91       	pop	r23
    43e2:	6f 91       	pop	r22
    43e4:	5f 91       	pop	r21
    43e6:	4f 91       	pop	r20
    43e8:	3f 91       	pop	r19
    43ea:	2f 91       	pop	r18
    43ec:	0f 90       	pop	r0
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	0f 90       	pop	r0
    43f2:	1f 90       	pop	r1
    43f4:	18 95       	reti

000043f6 <__vector_17>:
    43f6:	1f 92       	push	r1
    43f8:	0f 92       	push	r0
    43fa:	0f b6       	in	r0, 0x3f	; 63
    43fc:	0f 92       	push	r0
    43fe:	11 24       	eor	r1, r1
    4400:	2f 93       	push	r18
    4402:	3f 93       	push	r19
    4404:	4f 93       	push	r20
    4406:	5f 93       	push	r21
    4408:	6f 93       	push	r22
    440a:	7f 93       	push	r23
    440c:	8f 93       	push	r24
    440e:	9f 93       	push	r25
    4410:	af 93       	push	r26
    4412:	bf 93       	push	r27
    4414:	ef 93       	push	r30
    4416:	ff 93       	push	r31
    4418:	e0 91 b4 03 	lds	r30, 0x03B4
    441c:	f0 91 b5 03 	lds	r31, 0x03B5
    4420:	30 97       	sbiw	r30, 0x00	; 0
    4422:	09 f0       	breq	.+2      	; 0x4426 <__vector_17+0x30>
    4424:	09 95       	icall
    4426:	ff 91       	pop	r31
    4428:	ef 91       	pop	r30
    442a:	bf 91       	pop	r27
    442c:	af 91       	pop	r26
    442e:	9f 91       	pop	r25
    4430:	8f 91       	pop	r24
    4432:	7f 91       	pop	r23
    4434:	6f 91       	pop	r22
    4436:	5f 91       	pop	r21
    4438:	4f 91       	pop	r20
    443a:	3f 91       	pop	r19
    443c:	2f 91       	pop	r18
    443e:	0f 90       	pop	r0
    4440:	0f be       	out	0x3f, r0	; 63
    4442:	0f 90       	pop	r0
    4444:	1f 90       	pop	r1
    4446:	18 95       	reti

00004448 <__vector_18>:
    4448:	1f 92       	push	r1
    444a:	0f 92       	push	r0
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	0f 92       	push	r0
    4450:	11 24       	eor	r1, r1
    4452:	2f 93       	push	r18
    4454:	3f 93       	push	r19
    4456:	4f 93       	push	r20
    4458:	5f 93       	push	r21
    445a:	6f 93       	push	r22
    445c:	7f 93       	push	r23
    445e:	8f 93       	push	r24
    4460:	9f 93       	push	r25
    4462:	af 93       	push	r26
    4464:	bf 93       	push	r27
    4466:	ef 93       	push	r30
    4468:	ff 93       	push	r31
    446a:	e0 91 b6 03 	lds	r30, 0x03B6
    446e:	f0 91 b7 03 	lds	r31, 0x03B7
    4472:	30 97       	sbiw	r30, 0x00	; 0
    4474:	09 f0       	breq	.+2      	; 0x4478 <__vector_18+0x30>
    4476:	09 95       	icall
    4478:	ff 91       	pop	r31
    447a:	ef 91       	pop	r30
    447c:	bf 91       	pop	r27
    447e:	af 91       	pop	r26
    4480:	9f 91       	pop	r25
    4482:	8f 91       	pop	r24
    4484:	7f 91       	pop	r23
    4486:	6f 91       	pop	r22
    4488:	5f 91       	pop	r21
    448a:	4f 91       	pop	r20
    448c:	3f 91       	pop	r19
    448e:	2f 91       	pop	r18
    4490:	0f 90       	pop	r0
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	0f 90       	pop	r0
    4496:	1f 90       	pop	r1
    4498:	18 95       	reti

0000449a <__vector_9>:
    449a:	1f 92       	push	r1
    449c:	0f 92       	push	r0
    449e:	0f b6       	in	r0, 0x3f	; 63
    44a0:	0f 92       	push	r0
    44a2:	11 24       	eor	r1, r1
    44a4:	2f 93       	push	r18
    44a6:	3f 93       	push	r19
    44a8:	4f 93       	push	r20
    44aa:	5f 93       	push	r21
    44ac:	6f 93       	push	r22
    44ae:	7f 93       	push	r23
    44b0:	8f 93       	push	r24
    44b2:	9f 93       	push	r25
    44b4:	af 93       	push	r26
    44b6:	bf 93       	push	r27
    44b8:	ef 93       	push	r30
    44ba:	ff 93       	push	r31
    44bc:	e0 91 a4 03 	lds	r30, 0x03A4
    44c0:	f0 91 a5 03 	lds	r31, 0x03A5
    44c4:	30 97       	sbiw	r30, 0x00	; 0
    44c6:	09 f0       	breq	.+2      	; 0x44ca <__vector_9+0x30>
    44c8:	09 95       	icall
    44ca:	ff 91       	pop	r31
    44cc:	ef 91       	pop	r30
    44ce:	bf 91       	pop	r27
    44d0:	af 91       	pop	r26
    44d2:	9f 91       	pop	r25
    44d4:	8f 91       	pop	r24
    44d6:	7f 91       	pop	r23
    44d8:	6f 91       	pop	r22
    44da:	5f 91       	pop	r21
    44dc:	4f 91       	pop	r20
    44de:	3f 91       	pop	r19
    44e0:	2f 91       	pop	r18
    44e2:	0f 90       	pop	r0
    44e4:	0f be       	out	0x3f, r0	; 63
    44e6:	0f 90       	pop	r0
    44e8:	1f 90       	pop	r1
    44ea:	18 95       	reti

000044ec <__vector_10>:
    44ec:	1f 92       	push	r1
    44ee:	0f 92       	push	r0
    44f0:	0f b6       	in	r0, 0x3f	; 63
    44f2:	0f 92       	push	r0
    44f4:	11 24       	eor	r1, r1
    44f6:	2f 93       	push	r18
    44f8:	3f 93       	push	r19
    44fa:	4f 93       	push	r20
    44fc:	5f 93       	push	r21
    44fe:	6f 93       	push	r22
    4500:	7f 93       	push	r23
    4502:	8f 93       	push	r24
    4504:	9f 93       	push	r25
    4506:	af 93       	push	r26
    4508:	bf 93       	push	r27
    450a:	ef 93       	push	r30
    450c:	ff 93       	push	r31
    450e:	e0 91 a6 03 	lds	r30, 0x03A6
    4512:	f0 91 a7 03 	lds	r31, 0x03A7
    4516:	30 97       	sbiw	r30, 0x00	; 0
    4518:	09 f0       	breq	.+2      	; 0x451c <__vector_10+0x30>
    451a:	09 95       	icall
    451c:	ff 91       	pop	r31
    451e:	ef 91       	pop	r30
    4520:	bf 91       	pop	r27
    4522:	af 91       	pop	r26
    4524:	9f 91       	pop	r25
    4526:	8f 91       	pop	r24
    4528:	7f 91       	pop	r23
    452a:	6f 91       	pop	r22
    452c:	5f 91       	pop	r21
    452e:	4f 91       	pop	r20
    4530:	3f 91       	pop	r19
    4532:	2f 91       	pop	r18
    4534:	0f 90       	pop	r0
    4536:	0f be       	out	0x3f, r0	; 63
    4538:	0f 90       	pop	r0
    453a:	1f 90       	pop	r1
    453c:	18 95       	reti

0000453e <__vector_11>:
    453e:	1f 92       	push	r1
    4540:	0f 92       	push	r0
    4542:	0f b6       	in	r0, 0x3f	; 63
    4544:	0f 92       	push	r0
    4546:	11 24       	eor	r1, r1
    4548:	2f 93       	push	r18
    454a:	3f 93       	push	r19
    454c:	4f 93       	push	r20
    454e:	5f 93       	push	r21
    4550:	6f 93       	push	r22
    4552:	7f 93       	push	r23
    4554:	8f 93       	push	r24
    4556:	9f 93       	push	r25
    4558:	af 93       	push	r26
    455a:	bf 93       	push	r27
    455c:	ef 93       	push	r30
    455e:	ff 93       	push	r31
    4560:	e0 91 a8 03 	lds	r30, 0x03A8
    4564:	f0 91 a9 03 	lds	r31, 0x03A9
    4568:	30 97       	sbiw	r30, 0x00	; 0
    456a:	09 f0       	breq	.+2      	; 0x456e <__vector_11+0x30>
    456c:	09 95       	icall
    456e:	ff 91       	pop	r31
    4570:	ef 91       	pop	r30
    4572:	bf 91       	pop	r27
    4574:	af 91       	pop	r26
    4576:	9f 91       	pop	r25
    4578:	8f 91       	pop	r24
    457a:	7f 91       	pop	r23
    457c:	6f 91       	pop	r22
    457e:	5f 91       	pop	r21
    4580:	4f 91       	pop	r20
    4582:	3f 91       	pop	r19
    4584:	2f 91       	pop	r18
    4586:	0f 90       	pop	r0
    4588:	0f be       	out	0x3f, r0	; 63
    458a:	0f 90       	pop	r0
    458c:	1f 90       	pop	r1
    458e:	18 95       	reti

00004590 <__vector_13>:
    4590:	1f 92       	push	r1
    4592:	0f 92       	push	r0
    4594:	0f b6       	in	r0, 0x3f	; 63
    4596:	0f 92       	push	r0
    4598:	11 24       	eor	r1, r1
    459a:	2f 93       	push	r18
    459c:	3f 93       	push	r19
    459e:	4f 93       	push	r20
    45a0:	5f 93       	push	r21
    45a2:	6f 93       	push	r22
    45a4:	7f 93       	push	r23
    45a6:	8f 93       	push	r24
    45a8:	9f 93       	push	r25
    45aa:	af 93       	push	r26
    45ac:	bf 93       	push	r27
    45ae:	ef 93       	push	r30
    45b0:	ff 93       	push	r31
    45b2:	e0 91 ac 03 	lds	r30, 0x03AC
    45b6:	f0 91 ad 03 	lds	r31, 0x03AD
    45ba:	30 97       	sbiw	r30, 0x00	; 0
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <__vector_13+0x30>
    45be:	09 95       	icall
    45c0:	ff 91       	pop	r31
    45c2:	ef 91       	pop	r30
    45c4:	bf 91       	pop	r27
    45c6:	af 91       	pop	r26
    45c8:	9f 91       	pop	r25
    45ca:	8f 91       	pop	r24
    45cc:	7f 91       	pop	r23
    45ce:	6f 91       	pop	r22
    45d0:	5f 91       	pop	r21
    45d2:	4f 91       	pop	r20
    45d4:	3f 91       	pop	r19
    45d6:	2f 91       	pop	r18
    45d8:	0f 90       	pop	r0
    45da:	0f be       	out	0x3f, r0	; 63
    45dc:	0f 90       	pop	r0
    45de:	1f 90       	pop	r1
    45e0:	18 95       	reti

000045e2 <__vector_14>:
    45e2:	1f 92       	push	r1
    45e4:	0f 92       	push	r0
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	0f 92       	push	r0
    45ea:	11 24       	eor	r1, r1
    45ec:	2f 93       	push	r18
    45ee:	3f 93       	push	r19
    45f0:	4f 93       	push	r20
    45f2:	5f 93       	push	r21
    45f4:	6f 93       	push	r22
    45f6:	7f 93       	push	r23
    45f8:	8f 93       	push	r24
    45fa:	9f 93       	push	r25
    45fc:	af 93       	push	r26
    45fe:	bf 93       	push	r27
    4600:	ef 93       	push	r30
    4602:	ff 93       	push	r31
    4604:	e0 91 ae 03 	lds	r30, 0x03AE
    4608:	f0 91 af 03 	lds	r31, 0x03AF
    460c:	30 97       	sbiw	r30, 0x00	; 0
    460e:	09 f0       	breq	.+2      	; 0x4612 <__vector_14+0x30>
    4610:	09 95       	icall
    4612:	ff 91       	pop	r31
    4614:	ef 91       	pop	r30
    4616:	bf 91       	pop	r27
    4618:	af 91       	pop	r26
    461a:	9f 91       	pop	r25
    461c:	8f 91       	pop	r24
    461e:	7f 91       	pop	r23
    4620:	6f 91       	pop	r22
    4622:	5f 91       	pop	r21
    4624:	4f 91       	pop	r20
    4626:	3f 91       	pop	r19
    4628:	2f 91       	pop	r18
    462a:	0f 90       	pop	r0
    462c:	0f be       	out	0x3f, r0	; 63
    462e:	0f 90       	pop	r0
    4630:	1f 90       	pop	r1
    4632:	18 95       	reti

00004634 <__vector_12>:
    4634:	1f 92       	push	r1
    4636:	0f 92       	push	r0
    4638:	0f b6       	in	r0, 0x3f	; 63
    463a:	0f 92       	push	r0
    463c:	11 24       	eor	r1, r1
    463e:	2f 93       	push	r18
    4640:	3f 93       	push	r19
    4642:	4f 93       	push	r20
    4644:	5f 93       	push	r21
    4646:	6f 93       	push	r22
    4648:	7f 93       	push	r23
    464a:	8f 93       	push	r24
    464c:	9f 93       	push	r25
    464e:	af 93       	push	r26
    4650:	bf 93       	push	r27
    4652:	ef 93       	push	r30
    4654:	ff 93       	push	r31
    4656:	e0 91 aa 03 	lds	r30, 0x03AA
    465a:	f0 91 ab 03 	lds	r31, 0x03AB
    465e:	30 97       	sbiw	r30, 0x00	; 0
    4660:	09 f0       	breq	.+2      	; 0x4664 <__vector_12+0x30>
    4662:	09 95       	icall
    4664:	ff 91       	pop	r31
    4666:	ef 91       	pop	r30
    4668:	bf 91       	pop	r27
    466a:	af 91       	pop	r26
    466c:	9f 91       	pop	r25
    466e:	8f 91       	pop	r24
    4670:	7f 91       	pop	r23
    4672:	6f 91       	pop	r22
    4674:	5f 91       	pop	r21
    4676:	4f 91       	pop	r20
    4678:	3f 91       	pop	r19
    467a:	2f 91       	pop	r18
    467c:	0f 90       	pop	r0
    467e:	0f be       	out	0x3f, r0	; 63
    4680:	0f 90       	pop	r0
    4682:	1f 90       	pop	r1
    4684:	18 95       	reti

00004686 <__vector_15>:
    4686:	1f 92       	push	r1
    4688:	0f 92       	push	r0
    468a:	0f b6       	in	r0, 0x3f	; 63
    468c:	0f 92       	push	r0
    468e:	11 24       	eor	r1, r1
    4690:	2f 93       	push	r18
    4692:	3f 93       	push	r19
    4694:	4f 93       	push	r20
    4696:	5f 93       	push	r21
    4698:	6f 93       	push	r22
    469a:	7f 93       	push	r23
    469c:	8f 93       	push	r24
    469e:	9f 93       	push	r25
    46a0:	af 93       	push	r26
    46a2:	bf 93       	push	r27
    46a4:	ef 93       	push	r30
    46a6:	ff 93       	push	r31
    46a8:	e0 91 b0 03 	lds	r30, 0x03B0
    46ac:	f0 91 b1 03 	lds	r31, 0x03B1
    46b0:	30 97       	sbiw	r30, 0x00	; 0
    46b2:	09 f0       	breq	.+2      	; 0x46b6 <__vector_15+0x30>
    46b4:	09 95       	icall
    46b6:	ff 91       	pop	r31
    46b8:	ef 91       	pop	r30
    46ba:	bf 91       	pop	r27
    46bc:	af 91       	pop	r26
    46be:	9f 91       	pop	r25
    46c0:	8f 91       	pop	r24
    46c2:	7f 91       	pop	r23
    46c4:	6f 91       	pop	r22
    46c6:	5f 91       	pop	r21
    46c8:	4f 91       	pop	r20
    46ca:	3f 91       	pop	r19
    46cc:	2f 91       	pop	r18
    46ce:	0f 90       	pop	r0
    46d0:	0f be       	out	0x3f, r0	; 63
    46d2:	0f 90       	pop	r0
    46d4:	1f 90       	pop	r1
    46d6:	18 95       	reti

000046d8 <__vector_4>:
    46d8:	1f 92       	push	r1
    46da:	0f 92       	push	r0
    46dc:	0f b6       	in	r0, 0x3f	; 63
    46de:	0f 92       	push	r0
    46e0:	11 24       	eor	r1, r1
    46e2:	2f 93       	push	r18
    46e4:	3f 93       	push	r19
    46e6:	4f 93       	push	r20
    46e8:	5f 93       	push	r21
    46ea:	6f 93       	push	r22
    46ec:	7f 93       	push	r23
    46ee:	8f 93       	push	r24
    46f0:	9f 93       	push	r25
    46f2:	af 93       	push	r26
    46f4:	bf 93       	push	r27
    46f6:	ef 93       	push	r30
    46f8:	ff 93       	push	r31
    46fa:	e0 91 9a 03 	lds	r30, 0x039A
    46fe:	f0 91 9b 03 	lds	r31, 0x039B
    4702:	30 97       	sbiw	r30, 0x00	; 0
    4704:	09 f0       	breq	.+2      	; 0x4708 <__vector_4+0x30>
    4706:	09 95       	icall
    4708:	ff 91       	pop	r31
    470a:	ef 91       	pop	r30
    470c:	bf 91       	pop	r27
    470e:	af 91       	pop	r26
    4710:	9f 91       	pop	r25
    4712:	8f 91       	pop	r24
    4714:	7f 91       	pop	r23
    4716:	6f 91       	pop	r22
    4718:	5f 91       	pop	r21
    471a:	4f 91       	pop	r20
    471c:	3f 91       	pop	r19
    471e:	2f 91       	pop	r18
    4720:	0f 90       	pop	r0
    4722:	0f be       	out	0x3f, r0	; 63
    4724:	0f 90       	pop	r0
    4726:	1f 90       	pop	r1
    4728:	18 95       	reti

0000472a <__vector_5>:
    472a:	1f 92       	push	r1
    472c:	0f 92       	push	r0
    472e:	0f b6       	in	r0, 0x3f	; 63
    4730:	0f 92       	push	r0
    4732:	11 24       	eor	r1, r1
    4734:	2f 93       	push	r18
    4736:	3f 93       	push	r19
    4738:	4f 93       	push	r20
    473a:	5f 93       	push	r21
    473c:	6f 93       	push	r22
    473e:	7f 93       	push	r23
    4740:	8f 93       	push	r24
    4742:	9f 93       	push	r25
    4744:	af 93       	push	r26
    4746:	bf 93       	push	r27
    4748:	ef 93       	push	r30
    474a:	ff 93       	push	r31
    474c:	e0 91 9c 03 	lds	r30, 0x039C
    4750:	f0 91 9d 03 	lds	r31, 0x039D
    4754:	30 97       	sbiw	r30, 0x00	; 0
    4756:	09 f0       	breq	.+2      	; 0x475a <__vector_5+0x30>
    4758:	09 95       	icall
    475a:	ff 91       	pop	r31
    475c:	ef 91       	pop	r30
    475e:	bf 91       	pop	r27
    4760:	af 91       	pop	r26
    4762:	9f 91       	pop	r25
    4764:	8f 91       	pop	r24
    4766:	7f 91       	pop	r23
    4768:	6f 91       	pop	r22
    476a:	5f 91       	pop	r21
    476c:	4f 91       	pop	r20
    476e:	3f 91       	pop	r19
    4770:	2f 91       	pop	r18
    4772:	0f 90       	pop	r0
    4774:	0f be       	out	0x3f, r0	; 63
    4776:	0f 90       	pop	r0
    4778:	1f 90       	pop	r1
    477a:	18 95       	reti

0000477c <__vector_6>:
    477c:	1f 92       	push	r1
    477e:	0f 92       	push	r0
    4780:	0f b6       	in	r0, 0x3f	; 63
    4782:	0f 92       	push	r0
    4784:	11 24       	eor	r1, r1
    4786:	2f 93       	push	r18
    4788:	3f 93       	push	r19
    478a:	4f 93       	push	r20
    478c:	5f 93       	push	r21
    478e:	6f 93       	push	r22
    4790:	7f 93       	push	r23
    4792:	8f 93       	push	r24
    4794:	9f 93       	push	r25
    4796:	af 93       	push	r26
    4798:	bf 93       	push	r27
    479a:	ef 93       	push	r30
    479c:	ff 93       	push	r31
    479e:	e0 91 9e 03 	lds	r30, 0x039E
    47a2:	f0 91 9f 03 	lds	r31, 0x039F
    47a6:	30 97       	sbiw	r30, 0x00	; 0
    47a8:	09 f0       	breq	.+2      	; 0x47ac <__vector_6+0x30>
    47aa:	09 95       	icall
    47ac:	ff 91       	pop	r31
    47ae:	ef 91       	pop	r30
    47b0:	bf 91       	pop	r27
    47b2:	af 91       	pop	r26
    47b4:	9f 91       	pop	r25
    47b6:	8f 91       	pop	r24
    47b8:	7f 91       	pop	r23
    47ba:	6f 91       	pop	r22
    47bc:	5f 91       	pop	r21
    47be:	4f 91       	pop	r20
    47c0:	3f 91       	pop	r19
    47c2:	2f 91       	pop	r18
    47c4:	0f 90       	pop	r0
    47c6:	0f be       	out	0x3f, r0	; 63
    47c8:	0f 90       	pop	r0
    47ca:	1f 90       	pop	r1
    47cc:	18 95       	reti

000047ce <__vector_7>:
    47ce:	1f 92       	push	r1
    47d0:	0f 92       	push	r0
    47d2:	0f b6       	in	r0, 0x3f	; 63
    47d4:	0f 92       	push	r0
    47d6:	11 24       	eor	r1, r1
    47d8:	2f 93       	push	r18
    47da:	3f 93       	push	r19
    47dc:	4f 93       	push	r20
    47de:	5f 93       	push	r21
    47e0:	6f 93       	push	r22
    47e2:	7f 93       	push	r23
    47e4:	8f 93       	push	r24
    47e6:	9f 93       	push	r25
    47e8:	af 93       	push	r26
    47ea:	bf 93       	push	r27
    47ec:	ef 93       	push	r30
    47ee:	ff 93       	push	r31
    47f0:	e0 91 a0 03 	lds	r30, 0x03A0
    47f4:	f0 91 a1 03 	lds	r31, 0x03A1
    47f8:	30 97       	sbiw	r30, 0x00	; 0
    47fa:	09 f0       	breq	.+2      	; 0x47fe <__vector_7+0x30>
    47fc:	09 95       	icall
    47fe:	ff 91       	pop	r31
    4800:	ef 91       	pop	r30
    4802:	bf 91       	pop	r27
    4804:	af 91       	pop	r26
    4806:	9f 91       	pop	r25
    4808:	8f 91       	pop	r24
    480a:	7f 91       	pop	r23
    480c:	6f 91       	pop	r22
    480e:	5f 91       	pop	r21
    4810:	4f 91       	pop	r20
    4812:	3f 91       	pop	r19
    4814:	2f 91       	pop	r18
    4816:	0f 90       	pop	r0
    4818:	0f be       	out	0x3f, r0	; 63
    481a:	0f 90       	pop	r0
    481c:	1f 90       	pop	r1
    481e:	18 95       	reti

00004820 <ISR_attach>:
    4820:	e8 2f       	mov	r30, r24
    4822:	80 32       	cpi	r24, 0x20	; 32
    4824:	68 f4       	brcc	.+26     	; 0x4840 <ISR_attach+0x20>
    4826:	80 51       	subi	r24, 0x10	; 16
    4828:	83 30       	cpi	r24, 0x03	; 3
    482a:	50 f0       	brcs	.+20     	; 0x4840 <ISR_attach+0x20>
    482c:	f0 e0       	ldi	r31, 0x00	; 0
    482e:	ee 0f       	add	r30, r30
    4830:	ff 1f       	adc	r31, r31
    4832:	ee 56       	subi	r30, 0x6E	; 110
    4834:	fc 4f       	sbci	r31, 0xFC	; 252
    4836:	20 81       	ld	r18, Z
    4838:	31 81       	ldd	r19, Z+1	; 0x01
    483a:	71 83       	std	Z+1, r23	; 0x01
    483c:	60 83       	st	Z, r22
    483e:	02 c0       	rjmp	.+4      	; 0x4844 <ISR_attach+0x24>
    4840:	20 e0       	ldi	r18, 0x00	; 0
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	c9 01       	movw	r24, r18
    4846:	08 95       	ret

00004848 <ISR_open>:
    4848:	80 e1       	ldi	r24, 0x10	; 16
    484a:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    484e:	88 23       	and	r24, r24
    4850:	61 f4       	brne	.+24     	; 0x486a <ISR_open+0x22>
    4852:	e2 e9       	ldi	r30, 0x92	; 146
    4854:	f3 e0       	ldi	r31, 0x03	; 3
    4856:	11 92       	st	Z+, r1
    4858:	11 92       	st	Z+, r1
    485a:	83 e0       	ldi	r24, 0x03	; 3
    485c:	e2 3d       	cpi	r30, 0xD2	; 210
    485e:	f8 07       	cpc	r31, r24
    4860:	d1 f7       	brne	.-12     	; 0x4856 <ISR_open+0xe>
    4862:	80 e1       	ldi	r24, 0x10	; 16
    4864:	61 e0       	ldi	r22, 0x01	; 1
    4866:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    486a:	80 e1       	ldi	r24, 0x10	; 16
    486c:	91 e0       	ldi	r25, 0x01	; 1
    486e:	08 95       	ret

00004870 <__LCD_init>:
    4870:	23 9a       	sbi	0x04, 3	; 4
    4872:	08 95       	ret

00004874 <__LCD_putchar>:
    4874:	ff 92       	push	r15
    4876:	0f 93       	push	r16
    4878:	1f 93       	push	r17
    487a:	cf 93       	push	r28
    487c:	df 93       	push	r29
    487e:	f8 2e       	mov	r15, r24
    4880:	8a e0       	ldi	r24, 0x0A	; 10
    4882:	f8 16       	cp	r15, r24
    4884:	b1 f0       	breq	.+44     	; 0x48b2 <__LCD_putchar+0x3e>
    4886:	8f 15       	cp	r24, r15
    4888:	48 f0       	brcs	.+18     	; 0x489c <__LCD_putchar+0x28>
    488a:	e8 e0       	ldi	r30, 0x08	; 8
    488c:	fe 16       	cp	r15, r30
    488e:	b9 f1       	breq	.+110    	; 0x48fe <__LCD_putchar+0x8a>
    4890:	ef 15       	cp	r30, r15
    4892:	38 f1       	brcs	.+78     	; 0x48e2 <__LCD_putchar+0x6e>
    4894:	f7 e0       	ldi	r31, 0x07	; 7
    4896:	ff 16       	cp	r15, r31
    4898:	51 f4       	brne	.+20     	; 0x48ae <__LCD_putchar+0x3a>
    489a:	3b c0       	rjmp	.+118    	; 0x4912 <__LCD_putchar+0x9e>
    489c:	8d e0       	ldi	r24, 0x0D	; 13
    489e:	f8 16       	cp	r15, r24
    48a0:	59 f0       	breq	.+22     	; 0x48b8 <__LCD_putchar+0x44>
    48a2:	eb e1       	ldi	r30, 0x1B	; 27
    48a4:	fe 16       	cp	r15, r30
    48a6:	89 f0       	breq	.+34     	; 0x48ca <__LCD_putchar+0x56>
    48a8:	fc e0       	ldi	r31, 0x0C	; 12
    48aa:	ff 16       	cp	r15, r31
    48ac:	41 f0       	breq	.+16     	; 0x48be <__LCD_putchar+0x4a>
    48ae:	01 e0       	ldi	r16, 0x01	; 1
    48b0:	41 c0       	rjmp	.+130    	; 0x4934 <__LCD_putchar+0xc0>
    48b2:	10 92 ee 06 	sts	0x06EE, r1
    48b6:	03 c0       	rjmp	.+6      	; 0x48be <__LCD_putchar+0x4a>
    48b8:	10 92 ee 06 	sts	0x06EE, r1
    48bc:	3a c0       	rjmp	.+116    	; 0x4932 <__LCD_putchar+0xbe>
    48be:	80 91 ef 06 	lds	r24, 0x06EF
    48c2:	81 50       	subi	r24, 0x01	; 1
    48c4:	80 93 ef 06 	sts	0x06EF, r24
    48c8:	34 c0       	rjmp	.+104    	; 0x4932 <__LCD_putchar+0xbe>
    48ca:	0e 94 93 19 	call	0x3326	; 0x3326 <LCD_clear>
    48ce:	14 c0       	rjmp	.+40     	; 0x48f8 <__LCD_putchar+0x84>
    48d0:	80 e0       	ldi	r24, 0x00	; 0
    48d2:	61 e0       	ldi	r22, 0x01	; 1
    48d4:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    48d8:	80 91 ee 06 	lds	r24, 0x06EE
    48dc:	8f 5f       	subi	r24, 0xFF	; 255
    48de:	80 93 ee 06 	sts	0x06EE, r24
    48e2:	80 91 ee 06 	lds	r24, 0x06EE
    48e6:	87 ff       	sbrs	r24, 7
    48e8:	f3 cf       	rjmp	.-26     	; 0x48d0 <__LCD_putchar+0x5c>
    48ea:	10 92 ee 06 	sts	0x06EE, r1
    48ee:	80 91 ef 06 	lds	r24, 0x06EF
    48f2:	81 50       	subi	r24, 0x01	; 1
    48f4:	80 93 ef 06 	sts	0x06EF, r24
    48f8:	00 e0       	ldi	r16, 0x00	; 0
    48fa:	11 e0       	ldi	r17, 0x01	; 1
    48fc:	1c c0       	rjmp	.+56     	; 0x4936 <__LCD_putchar+0xc2>
    48fe:	80 91 ee 06 	lds	r24, 0x06EE
    4902:	88 23       	and	r24, r24
    4904:	b1 f0       	breq	.+44     	; 0x4932 <__LCD_putchar+0xbe>
    4906:	80 91 ee 06 	lds	r24, 0x06EE
    490a:	86 50       	subi	r24, 0x06	; 6
    490c:	80 93 ee 06 	sts	0x06EE, r24
    4910:	10 c0       	rjmp	.+32     	; 0x4932 <__LCD_putchar+0xbe>
    4912:	81 e0       	ldi	r24, 0x01	; 1
    4914:	0e 94 b6 1b 	call	0x376c	; 0x376c <SPKR_open>
    4918:	64 ef       	ldi	r22, 0xF4	; 244
    491a:	71 e0       	ldi	r23, 0x01	; 1
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	4d e7       	ldi	r20, 0x7D	; 125
    4922:	50 e0       	ldi	r21, 0x00	; 0
    4924:	24 e6       	ldi	r18, 0x64	; 100
    4926:	30 e0       	ldi	r19, 0x00	; 0
    4928:	0e 94 54 26 	call	0x4ca8	; 0x4ca8 <SPKR_play_beep>
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	0e 94 20 26 	call	0x4c40	; 0x4c40 <SPKR_close>
    4932:	00 e0       	ldi	r16, 0x00	; 0
    4934:	10 e0       	ldi	r17, 0x00	; 0
    4936:	80 91 ef 06 	lds	r24, 0x06EF
    493a:	60 91 ee 06 	lds	r22, 0x06EE
    493e:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <LCD_set_PGC_addr>
    4942:	00 23       	and	r16, r16
    4944:	51 f1       	breq	.+84     	; 0x499a <__LCD_putchar+0x126>
    4946:	85 e0       	ldi	r24, 0x05	; 5
    4948:	f8 9e       	mul	r15, r24
    494a:	c0 01       	movw	r24, r0
    494c:	11 24       	eor	r1, r1
    494e:	ec 01       	movw	r28, r24
    4950:	c3 55       	subi	r28, 0x53	; 83
    4952:	df 4f       	sbci	r29, 0xFF	; 255
    4954:	8c 01       	movw	r16, r24
    4956:	0e 54       	subi	r16, 0x4E	; 78
    4958:	1f 4f       	sbci	r17, 0xFF	; 255
    495a:	fe 01       	movw	r30, r28
    495c:	84 91       	lpm	r24, Z+
    495e:	61 e0       	ldi	r22, 0x01	; 1
    4960:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    4964:	21 96       	adiw	r28, 0x01	; 1
    4966:	c0 17       	cp	r28, r16
    4968:	d1 07       	cpc	r29, r17
    496a:	b9 f7       	brne	.-18     	; 0x495a <__LCD_putchar+0xe6>
    496c:	80 e0       	ldi	r24, 0x00	; 0
    496e:	61 e0       	ldi	r22, 0x01	; 1
    4970:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <LCD_write>
    4974:	80 91 ee 06 	lds	r24, 0x06EE
    4978:	8a 5f       	subi	r24, 0xFA	; 250
    497a:	80 93 ee 06 	sts	0x06EE, r24
    497e:	80 91 ee 06 	lds	r24, 0x06EE
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	8c 37       	cpi	r24, 0x7C	; 124
    4986:	91 05       	cpc	r25, r1
    4988:	3c f0       	brlt	.+14     	; 0x4998 <__LCD_putchar+0x124>
    498a:	10 92 ee 06 	sts	0x06EE, r1
    498e:	80 91 ef 06 	lds	r24, 0x06EF
    4992:	81 50       	subi	r24, 0x01	; 1
    4994:	80 93 ef 06 	sts	0x06EF, r24
    4998:	11 e0       	ldi	r17, 0x01	; 1
    499a:	80 91 ef 06 	lds	r24, 0x06EF
    499e:	83 70       	andi	r24, 0x03	; 3
    49a0:	80 93 ef 06 	sts	0x06EF, r24
    49a4:	11 30       	cpi	r17, 0x01	; 1
    49a6:	59 f4       	brne	.+22     	; 0x49be <__LCD_putchar+0x14a>
    49a8:	80 91 f0 06 	lds	r24, 0x06F0
    49ac:	81 30       	cpi	r24, 0x01	; 1
    49ae:	39 f4       	brne	.+14     	; 0x49be <__LCD_putchar+0x14a>
    49b0:	e0 91 f1 06 	lds	r30, 0x06F1
    49b4:	f0 91 f2 06 	lds	r31, 0x06F2
    49b8:	30 97       	sbiw	r30, 0x00	; 0
    49ba:	09 f0       	breq	.+2      	; 0x49be <__LCD_putchar+0x14a>
    49bc:	09 95       	icall
    49be:	80 e0       	ldi	r24, 0x00	; 0
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	df 91       	pop	r29
    49c4:	cf 91       	pop	r28
    49c6:	1f 91       	pop	r17
    49c8:	0f 91       	pop	r16
    49ca:	ff 90       	pop	r15
    49cc:	08 95       	ret

000049ce <__LED_clr_pattern>:
    49ce:	85 fd       	sbrc	r24, 5
    49d0:	5d 98       	cbi	0x0b, 5	; 11
    49d2:	86 fd       	sbrc	r24, 6
    49d4:	5e 98       	cbi	0x0b, 6	; 11
    49d6:	08 95       	ret

000049d8 <__LED_init>:
    49d8:	55 9a       	sbi	0x0a, 5	; 10
    49da:	56 9a       	sbi	0x0a, 6	; 10
    49dc:	08 95       	ret

000049de <__LED_set_pattern>:
    49de:	85 fd       	sbrc	r24, 5
    49e0:	5d 9a       	sbi	0x0b, 5	; 11
    49e2:	86 fd       	sbrc	r24, 6
    49e4:	5e 9a       	sbi	0x0b, 6	; 11
    49e6:	08 95       	ret

000049e8 <ATMEGA_open>:
    49e8:	80 e0       	ldi	r24, 0x00	; 0
    49ea:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    49ee:	88 23       	and	r24, r24
    49f0:	51 f4       	brne	.+20     	; 0x4a06 <ATMEGA_open+0x1e>
    49f2:	f8 94       	cli
    49f4:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <__ATMEGA_init>
    49f8:	81 e0       	ldi	r24, 0x01	; 1
    49fa:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <ATMEGA_set_clk_mode>
    49fe:	80 e0       	ldi	r24, 0x00	; 0
    4a00:	61 e0       	ldi	r22, 0x01	; 1
    4a02:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    4a06:	80 e0       	ldi	r24, 0x00	; 0
    4a08:	91 e0       	ldi	r25, 0x01	; 1
    4a0a:	08 95       	ret

00004a0c <ATMEGA_set_clk_mode>:
    4a0c:	81 30       	cpi	r24, 0x01	; 1
    4a0e:	49 f0       	breq	.+18     	; 0x4a22 <ATMEGA_set_clk_mode+0x16>
    4a10:	f8 94       	cli
    4a12:	81 30       	cpi	r24, 0x01	; 1
    4a14:	20 f1       	brcs	.+72     	; 0x4a5e <ATMEGA_set_clk_mode+0x52>
    4a16:	82 30       	cpi	r24, 0x02	; 2
    4a18:	b1 f0       	breq	.+44     	; 0x4a46 <ATMEGA_set_clk_mode+0x3a>
    4a1a:	83 30       	cpi	r24, 0x03	; 3
    4a1c:	09 f0       	breq	.+2      	; 0x4a20 <ATMEGA_set_clk_mode+0x14>
    4a1e:	45 c0       	rjmp	.+138    	; 0x4aaa <ATMEGA_set_clk_mode+0x9e>
    4a20:	17 c0       	rjmp	.+46     	; 0x4a50 <ATMEGA_set_clk_mode+0x44>
    4a22:	2c 9a       	sbi	0x05, 4	; 5
    4a24:	80 e8       	ldi	r24, 0x80	; 128
    4a26:	80 93 61 00 	sts	0x0061, r24
    4a2a:	10 92 61 00 	sts	0x0061, r1
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	00 00       	nop
    4a34:	01 96       	adiw	r24, 0x01	; 1
    4a36:	88 32       	cpi	r24, 0x28	; 40
    4a38:	91 05       	cpc	r25, r1
    4a3a:	d9 f7       	brne	.-10     	; 0x4a32 <ATMEGA_set_clk_mode+0x26>
    4a3c:	10 92 68 00 	sts	0x0068, r1
    4a40:	10 92 6b 00 	sts	0x006B, r1
    4a44:	08 95       	ret
    4a46:	80 e8       	ldi	r24, 0x80	; 128
    4a48:	80 93 61 00 	sts	0x0061, r24
    4a4c:	83 e0       	ldi	r24, 0x03	; 3
    4a4e:	04 c0       	rjmp	.+8      	; 0x4a58 <ATMEGA_set_clk_mode+0x4c>
    4a50:	80 e8       	ldi	r24, 0x80	; 128
    4a52:	80 93 61 00 	sts	0x0061, r24
    4a56:	88 e0       	ldi	r24, 0x08	; 8
    4a58:	80 93 61 00 	sts	0x0061, r24
    4a5c:	28 c0       	rjmp	.+80     	; 0x4aae <ATMEGA_set_clk_mode+0xa2>
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	00 00       	nop
    4a64:	01 96       	adiw	r24, 0x01	; 1
    4a66:	2d e6       	ldi	r18, 0x6D	; 109
    4a68:	80 36       	cpi	r24, 0x60	; 96
    4a6a:	92 07       	cpc	r25, r18
    4a6c:	d1 f7       	brne	.-12     	; 0x4a62 <ATMEGA_set_clk_mode+0x56>
    4a6e:	2c 98       	cbi	0x05, 4	; 5
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	00 00       	nop
    4a76:	01 96       	adiw	r24, 0x01	; 1
    4a78:	2d e6       	ldi	r18, 0x6D	; 109
    4a7a:	80 36       	cpi	r24, 0x60	; 96
    4a7c:	92 07       	cpc	r25, r18
    4a7e:	d1 f7       	brne	.-12     	; 0x4a74 <ATMEGA_set_clk_mode+0x68>
    4a80:	10 92 7a 00 	sts	0x007A, r1
    4a84:	8f ef       	ldi	r24, 0xFF	; 255
    4a86:	80 93 64 00 	sts	0x0064, r24
    4a8a:	80 91 68 00 	lds	r24, 0x0068
    4a8e:	81 60       	ori	r24, 0x01	; 1
    4a90:	80 93 68 00 	sts	0x0068, r24
    4a94:	80 91 6b 00 	lds	r24, 0x006B
    4a98:	84 60       	ori	r24, 0x04	; 4
    4a9a:	80 93 6b 00 	sts	0x006B, r24
    4a9e:	78 94       	sei
    4aa0:	83 b7       	in	r24, 0x33	; 51
    4aa2:	81 60       	ori	r24, 0x01	; 1
    4aa4:	83 bf       	out	0x33, r24	; 51
    4aa6:	88 95       	sleep
    4aa8:	08 95       	ret
    4aaa:	82 30       	cpi	r24, 0x02	; 2
    4aac:	08 f0       	brcs	.+2      	; 0x4ab0 <ATMEGA_set_clk_mode+0xa4>
    4aae:	78 94       	sei
    4ab0:	08 95       	ret

00004ab2 <SPI_open>:
    4ab2:	0f 93       	push	r16
    4ab4:	1f 93       	push	r17
    4ab6:	0e 94 17 28 	call	0x502e	; 0x502e <__SPI_init>
    4aba:	80 e0       	ldi	r24, 0x00	; 0
    4abc:	66 e0       	ldi	r22, 0x06	; 6
    4abe:	78 e2       	ldi	r23, 0x28	; 40
    4ac0:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <SPI_set_config_func>
    4ac4:	81 e0       	ldi	r24, 0x01	; 1
    4ac6:	6e ef       	ldi	r22, 0xFE	; 254
    4ac8:	77 e2       	ldi	r23, 0x27	; 39
    4aca:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <SPI_set_config_func>
    4ace:	82 e0       	ldi	r24, 0x02	; 2
    4ad0:	66 ef       	ldi	r22, 0xF6	; 246
    4ad2:	77 e2       	ldi	r23, 0x27	; 39
    4ad4:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <SPI_set_config_func>
    4ad8:	86 e0       	ldi	r24, 0x06	; 6
    4ada:	6e e0       	ldi	r22, 0x0E	; 14
    4adc:	78 e2       	ldi	r23, 0x28	; 40
    4ade:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <SPI_set_config_func>
    4ae2:	0e ee       	ldi	r16, 0xEE	; 238
    4ae4:	17 e2       	ldi	r17, 0x27	; 39
    4ae6:	83 e0       	ldi	r24, 0x03	; 3
    4ae8:	b8 01       	movw	r22, r16
    4aea:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <SPI_set_config_func>
    4aee:	84 e0       	ldi	r24, 0x04	; 4
    4af0:	b8 01       	movw	r22, r16
    4af2:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <SPI_set_config_func>
    4af6:	85 e0       	ldi	r24, 0x05	; 5
    4af8:	b8 01       	movw	r22, r16
    4afa:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <SPI_set_config_func>
    4afe:	87 e0       	ldi	r24, 0x07	; 7
    4b00:	b8 01       	movw	r22, r16
    4b02:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <SPI_set_config_func>
    4b06:	82 e0       	ldi	r24, 0x02	; 2
    4b08:	61 e0       	ldi	r22, 0x01	; 1
    4b0a:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    4b0e:	8f ef       	ldi	r24, 0xFF	; 255
    4b10:	80 93 f3 06 	sts	0x06F3, r24
    4b14:	87 e0       	ldi	r24, 0x07	; 7
    4b16:	0e 94 ae 1a 	call	0x355c	; 0x355c <SPI_set_slave_addr>
    4b1a:	82 e0       	ldi	r24, 0x02	; 2
    4b1c:	91 e0       	ldi	r25, 0x01	; 1
    4b1e:	1f 91       	pop	r17
    4b20:	0f 91       	pop	r16
    4b22:	08 95       	ret

00004b24 <SPI_receive>:
    4b24:	1f 93       	push	r17
    4b26:	16 2f       	mov	r17, r22
    4b28:	0e 94 ae 1a 	call	0x355c	; 0x355c <SPI_set_slave_addr>
    4b2c:	82 e0       	ldi	r24, 0x02	; 2
    4b2e:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    4b32:	81 30       	cpi	r24, 0x01	; 1
    4b34:	11 f0       	breq	.+4      	; 0x4b3a <SPI_receive+0x16>
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	05 c0       	rjmp	.+10     	; 0x4b44 <SPI_receive+0x20>
    4b3a:	1e bd       	out	0x2e, r17	; 46
    4b3c:	0d b4       	in	r0, 0x2d	; 45
    4b3e:	07 fe       	sbrs	r0, 7
    4b40:	fd cf       	rjmp	.-6      	; 0x4b3c <SPI_receive+0x18>
    4b42:	8e b5       	in	r24, 0x2e	; 46
    4b44:	1f 91       	pop	r17
    4b46:	08 95       	ret

00004b48 <SPI_set_config_func>:
    4b48:	e8 2f       	mov	r30, r24
    4b4a:	f0 e0       	ldi	r31, 0x00	; 0
    4b4c:	ee 0f       	add	r30, r30
    4b4e:	ff 1f       	adc	r31, r31
    4b50:	ee 52       	subi	r30, 0x2E	; 46
    4b52:	fc 4f       	sbci	r31, 0xFC	; 252
    4b54:	71 83       	std	Z+1, r23	; 0x01
    4b56:	60 83       	st	Z, r22
    4b58:	08 95       	ret

00004b5a <__SPKR_TIMER1_COMPA_vect>:
    4b5a:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <SPKR_clk>
    4b5e:	08 95       	ret

00004b60 <SPKR_clk>:
    4b60:	80 91 74 03 	lds	r24, 0x0374
    4b64:	90 91 75 03 	lds	r25, 0x0375
    4b68:	a0 91 76 03 	lds	r26, 0x0376
    4b6c:	b0 91 77 03 	lds	r27, 0x0377
    4b70:	20 91 78 03 	lds	r18, 0x0378
    4b74:	30 91 79 03 	lds	r19, 0x0379
    4b78:	40 91 7a 03 	lds	r20, 0x037A
    4b7c:	50 91 7b 03 	lds	r21, 0x037B
    4b80:	28 0f       	add	r18, r24
    4b82:	39 1f       	adc	r19, r25
    4b84:	4a 1f       	adc	r20, r26
    4b86:	5b 1f       	adc	r21, r27
    4b88:	20 93 74 03 	sts	0x0374, r18
    4b8c:	30 93 75 03 	sts	0x0375, r19
    4b90:	40 93 76 03 	sts	0x0376, r20
    4b94:	50 93 77 03 	sts	0x0377, r21
    4b98:	80 91 74 03 	lds	r24, 0x0374
    4b9c:	90 91 75 03 	lds	r25, 0x0375
    4ba0:	a0 91 76 03 	lds	r26, 0x0376
    4ba4:	b0 91 77 03 	lds	r27, 0x0377
    4ba8:	88 51       	subi	r24, 0x18	; 24
    4baa:	96 4f       	sbci	r25, 0xF6	; 246
    4bac:	a0 40       	sbci	r26, 0x00	; 0
    4bae:	b0 40       	sbci	r27, 0x00	; 0
    4bb0:	bc f0       	brlt	.+46     	; 0x4be0 <SPKR_clk+0x80>
    4bb2:	8b b1       	in	r24, 0x0b	; 11
    4bb4:	80 58       	subi	r24, 0x80	; 128
    4bb6:	8b b9       	out	0x0b, r24	; 11
    4bb8:	80 91 74 03 	lds	r24, 0x0374
    4bbc:	90 91 75 03 	lds	r25, 0x0375
    4bc0:	a0 91 76 03 	lds	r26, 0x0376
    4bc4:	b0 91 77 03 	lds	r27, 0x0377
    4bc8:	88 51       	subi	r24, 0x18	; 24
    4bca:	96 4f       	sbci	r25, 0xF6	; 246
    4bcc:	a0 40       	sbci	r26, 0x00	; 0
    4bce:	b0 40       	sbci	r27, 0x00	; 0
    4bd0:	80 93 74 03 	sts	0x0374, r24
    4bd4:	90 93 75 03 	sts	0x0375, r25
    4bd8:	a0 93 76 03 	sts	0x0376, r26
    4bdc:	b0 93 77 03 	sts	0x0377, r27
    4be0:	08 95       	ret

00004be2 <__SPKR_close_beep_mode>:
    4be2:	8a e0       	ldi	r24, 0x0A	; 10
    4be4:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    4be8:	81 30       	cpi	r24, 0x01	; 1
    4bea:	41 f4       	brne	.+16     	; 0x4bfc <__SPKR_close_beep_mode+0x1a>
    4bec:	0e 94 1e 28 	call	0x503c	; 0x503c <__SPKR_close>
    4bf0:	10 92 73 03 	sts	0x0373, r1
    4bf4:	8a e0       	ldi	r24, 0x0A	; 10
    4bf6:	60 e0       	ldi	r22, 0x00	; 0
    4bf8:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    4bfc:	08 95       	ret

00004bfe <__SPKR_close_tone_mode>:
    4bfe:	89 e0       	ldi	r24, 0x09	; 9
    4c00:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    4c04:	81 30       	cpi	r24, 0x01	; 1
    4c06:	d9 f4       	brne	.+54     	; 0x4c3e <__SPKR_close_tone_mode+0x40>
    4c08:	80 91 72 03 	lds	r24, 0x0372
    4c0c:	88 23       	and	r24, r24
    4c0e:	11 f0       	breq	.+4      	; 0x4c14 <__SPKR_close_tone_mode+0x16>
    4c10:	0e 94 a1 26 	call	0x4d42	; 0x4d42 <__SPKR_stop>
    4c14:	82 e0       	ldi	r24, 0x02	; 2
    4c16:	0e 94 1e 28 	call	0x503c	; 0x503c <__SPKR_close>
    4c1a:	80 91 80 03 	lds	r24, 0x0380
    4c1e:	90 91 81 03 	lds	r25, 0x0381
    4c22:	00 97       	sbiw	r24, 0x00	; 0
    4c24:	31 f0       	breq	.+12     	; 0x4c32 <__SPKR_close_tone_mode+0x34>
    4c26:	0e 94 91 34 	call	0x6922	; 0x6922 <free>
    4c2a:	10 92 81 03 	sts	0x0381, r1
    4c2e:	10 92 80 03 	sts	0x0380, r1
    4c32:	10 92 72 03 	sts	0x0372, r1
    4c36:	89 e0       	ldi	r24, 0x09	; 9
    4c38:	60 e0       	ldi	r22, 0x00	; 0
    4c3a:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    4c3e:	08 95       	ret

00004c40 <SPKR_close>:
    4c40:	81 30       	cpi	r24, 0x01	; 1
    4c42:	29 f0       	breq	.+10     	; 0x4c4e <SPKR_close+0xe>
    4c44:	82 30       	cpi	r24, 0x02	; 2
    4c46:	29 f4       	brne	.+10     	; 0x4c52 <SPKR_close+0x12>
    4c48:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__SPKR_close_tone_mode>
    4c4c:	08 95       	ret
    4c4e:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <__SPKR_close_beep_mode>
    4c52:	08 95       	ret

00004c54 <__SPKR_init>:
    4c54:	98 2f       	mov	r25, r24
    4c56:	80 91 72 03 	lds	r24, 0x0372
    4c5a:	88 23       	and	r24, r24
    4c5c:	31 f4       	brne	.+12     	; 0x4c6a <__SPKR_init+0x16>
    4c5e:	80 91 73 03 	lds	r24, 0x0373
    4c62:	88 23       	and	r24, r24
    4c64:	11 f4       	brne	.+4      	; 0x4c6a <__SPKR_init+0x16>
    4c66:	57 9a       	sbi	0x0a, 7	; 10
    4c68:	5f 98       	cbi	0x0b, 7	; 11
    4c6a:	80 91 72 03 	lds	r24, 0x0372
    4c6e:	88 23       	and	r24, r24
    4c70:	d1 f4       	brne	.+52     	; 0x4ca6 <__SPKR_init+0x52>
    4c72:	92 30       	cpi	r25, 0x02	; 2
    4c74:	c1 f4       	brne	.+48     	; 0x4ca6 <__SPKR_init+0x52>
    4c76:	10 92 80 00 	sts	0x0080, r1
    4c7a:	10 92 81 00 	sts	0x0081, r1
    4c7e:	80 91 81 00 	lds	r24, 0x0081
    4c82:	88 60       	ori	r24, 0x08	; 8
    4c84:	80 93 81 00 	sts	0x0081, r24
    4c88:	80 91 81 00 	lds	r24, 0x0081
    4c8c:	81 60       	ori	r24, 0x01	; 1
    4c8e:	80 93 81 00 	sts	0x0081, r24
    4c92:	10 92 85 00 	sts	0x0085, r1
    4c96:	10 92 84 00 	sts	0x0084, r1
    4c9a:	81 e0       	ldi	r24, 0x01	; 1
    4c9c:	80 93 89 00 	sts	0x0089, r24
    4ca0:	80 e9       	ldi	r24, 0x90	; 144
    4ca2:	80 93 88 00 	sts	0x0088, r24
    4ca6:	08 95       	ret

00004ca8 <SPKR_play_beep>:
    4ca8:	8f 92       	push	r8
    4caa:	9f 92       	push	r9
    4cac:	af 92       	push	r10
    4cae:	bf 92       	push	r11
    4cb0:	cf 92       	push	r12
    4cb2:	df 92       	push	r13
    4cb4:	ef 92       	push	r14
    4cb6:	ff 92       	push	r15
    4cb8:	0f 93       	push	r16
    4cba:	1f 93       	push	r17
    4cbc:	cf 93       	push	r28
    4cbe:	df 93       	push	r29
    4cc0:	4b 01       	movw	r8, r22
    4cc2:	5c 01       	movw	r10, r24
    4cc4:	ea 01       	movw	r28, r20
    4cc6:	b9 01       	movw	r22, r18
    4cc8:	21 15       	cp	r18, r1
    4cca:	31 05       	cpc	r19, r1
    4ccc:	39 f1       	breq	.+78     	; 0x4d1c <SPKR_play_beep+0x74>
    4cce:	9e 01       	movw	r18, r28
    4cd0:	44 27       	eor	r20, r20
    4cd2:	37 fd       	sbrc	r19, 7
    4cd4:	40 95       	com	r20
    4cd6:	54 2f       	mov	r21, r20
    4cd8:	65 36       	cpi	r22, 0x65	; 101
    4cda:	71 05       	cpc	r23, r1
    4cdc:	10 f0       	brcs	.+4      	; 0x4ce2 <SPKR_play_beep+0x3a>
    4cde:	64 e6       	ldi	r22, 0x64	; 100
    4ce0:	70 e0       	ldi	r23, 0x00	; 0
    4ce2:	80 e0       	ldi	r24, 0x00	; 0
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__mulsi3>
    4cea:	24 e6       	ldi	r18, 0x64	; 100
    4cec:	30 e0       	ldi	r19, 0x00	; 0
    4cee:	40 e0       	ldi	r20, 0x00	; 0
    4cf0:	50 e0       	ldi	r21, 0x00	; 0
    4cf2:	0e 94 8b 33 	call	0x6716	; 0x6716 <__udivmodsi4>
    4cf6:	79 01       	movw	r14, r18
    4cf8:	8a 01       	movw	r16, r20
    4cfa:	c5 01       	movw	r24, r10
    4cfc:	b4 01       	movw	r22, r8
    4cfe:	0e 94 0e 1b 	call	0x361c	; 0x361c <SPKR_beep>
    4d02:	c7 01       	movw	r24, r14
    4d04:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
    4d08:	60 e0       	ldi	r22, 0x00	; 0
    4d0a:	70 e0       	ldi	r23, 0x00	; 0
    4d0c:	80 e0       	ldi	r24, 0x00	; 0
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	0e 94 0e 1b 	call	0x361c	; 0x361c <SPKR_beep>
    4d14:	ce 01       	movw	r24, r28
    4d16:	8e 19       	sub	r24, r14
    4d18:	9f 09       	sbc	r25, r15
    4d1a:	04 c0       	rjmp	.+8      	; 0x4d24 <SPKR_play_beep+0x7c>
    4d1c:	41 15       	cp	r20, r1
    4d1e:	51 05       	cpc	r21, r1
    4d20:	19 f0       	breq	.+6      	; 0x4d28 <SPKR_play_beep+0x80>
    4d22:	ca 01       	movw	r24, r20
    4d24:	0e 94 85 20 	call	0x410a	; 0x410a <TMRSRVC_delay>
    4d28:	df 91       	pop	r29
    4d2a:	cf 91       	pop	r28
    4d2c:	1f 91       	pop	r17
    4d2e:	0f 91       	pop	r16
    4d30:	ff 90       	pop	r15
    4d32:	ef 90       	pop	r14
    4d34:	df 90       	pop	r13
    4d36:	cf 90       	pop	r12
    4d38:	bf 90       	pop	r11
    4d3a:	af 90       	pop	r10
    4d3c:	9f 90       	pop	r9
    4d3e:	8f 90       	pop	r8
    4d40:	08 95       	ret

00004d42 <__SPKR_stop>:
    4d42:	ef e6       	ldi	r30, 0x6F	; 111
    4d44:	f0 e0       	ldi	r31, 0x00	; 0
    4d46:	80 81       	ld	r24, Z
    4d48:	8d 7f       	andi	r24, 0xFD	; 253
    4d4a:	80 83       	st	Z, r24
    4d4c:	08 95       	ret

00004d4e <STEPPER_go>:
    4d4e:	98 2f       	mov	r25, r24
    4d50:	81 e0       	ldi	r24, 0x01	; 1
    4d52:	80 93 d8 06 	sts	0x06D8, r24
    4d56:	91 30       	cpi	r25, 0x01	; 1
    4d58:	51 f0       	breq	.+20     	; 0x4d6e <STEPPER_go+0x20>
    4d5a:	91 30       	cpi	r25, 0x01	; 1
    4d5c:	18 f0       	brcs	.+6      	; 0x4d64 <STEPPER_go+0x16>
    4d5e:	92 30       	cpi	r25, 0x02	; 2
    4d60:	41 f4       	brne	.+16     	; 0x4d72 <STEPPER_go+0x24>
    4d62:	03 c0       	rjmp	.+6      	; 0x4d6a <STEPPER_go+0x1c>
    4d64:	10 92 c0 06 	sts	0x06C0, r1
    4d68:	04 c0       	rjmp	.+8      	; 0x4d72 <STEPPER_go+0x24>
    4d6a:	10 92 c0 06 	sts	0x06C0, r1
    4d6e:	10 92 c1 06 	sts	0x06C1, r1
    4d72:	10 92 d8 06 	sts	0x06D8, r1
    4d76:	08 95       	ret

00004d78 <__STEPPER_init>:
    4d78:	3a 9a       	sbi	0x07, 2	; 7
    4d7a:	3b 9a       	sbi	0x07, 3	; 7
    4d7c:	3c 9a       	sbi	0x07, 4	; 7
    4d7e:	3d 9a       	sbi	0x07, 5	; 7
    4d80:	3e 9a       	sbi	0x07, 6	; 7
    4d82:	3f 9a       	sbi	0x07, 7	; 7
    4d84:	88 b1       	in	r24, 0x08	; 8
    4d86:	83 70       	andi	r24, 0x03	; 3
    4d88:	88 b9       	out	0x08, r24	; 8
    4d8a:	08 95       	ret

00004d8c <STEPPER_set_stop_mode>:
    4d8c:	98 2f       	mov	r25, r24
    4d8e:	81 e0       	ldi	r24, 0x01	; 1
    4d90:	80 93 d8 06 	sts	0x06D8, r24
    4d94:	91 30       	cpi	r25, 0x01	; 1
    4d96:	51 f0       	breq	.+20     	; 0x4dac <STEPPER_set_stop_mode+0x20>
    4d98:	91 30       	cpi	r25, 0x01	; 1
    4d9a:	18 f0       	brcs	.+6      	; 0x4da2 <STEPPER_set_stop_mode+0x16>
    4d9c:	92 30       	cpi	r25, 0x02	; 2
    4d9e:	41 f4       	brne	.+16     	; 0x4db0 <STEPPER_set_stop_mode+0x24>
    4da0:	03 c0       	rjmp	.+6      	; 0x4da8 <STEPPER_set_stop_mode+0x1c>
    4da2:	60 93 c2 06 	sts	0x06C2, r22
    4da6:	04 c0       	rjmp	.+8      	; 0x4db0 <STEPPER_set_stop_mode+0x24>
    4da8:	60 93 c2 06 	sts	0x06C2, r22
    4dac:	60 93 c3 06 	sts	0x06C3, r22
    4db0:	10 92 d8 06 	sts	0x06D8, r1
    4db4:	08 95       	ret

00004db6 <STEPPER_setup_decels>:
    4db6:	0f 93       	push	r16
    4db8:	1f 93       	push	r17
    4dba:	cf 93       	push	r28
    4dbc:	df 93       	push	r29
    4dbe:	eb 01       	movw	r28, r22
    4dc0:	8a 01       	movw	r16, r20
    4dc2:	81 30       	cpi	r24, 0x01	; 1
    4dc4:	01 f1       	breq	.+64     	; 0x4e06 <STEPPER_setup_decels+0x50>
    4dc6:	81 30       	cpi	r24, 0x01	; 1
    4dc8:	18 f0       	brcs	.+6      	; 0x4dd0 <STEPPER_setup_decels+0x1a>
    4dca:	82 30       	cpi	r24, 0x02	; 2
    4dcc:	61 f5       	brne	.+88     	; 0x4e26 <STEPPER_setup_decels+0x70>
    4dce:	0d c0       	rjmp	.+26     	; 0x4dea <STEPPER_setup_decels+0x34>
    4dd0:	80 91 ac 06 	lds	r24, 0x06AC
    4dd4:	90 91 ad 06 	lds	r25, 0x06AD
    4dd8:	89 2b       	or	r24, r25
    4dda:	11 f0       	breq	.+4      	; 0x4de0 <STEPPER_setup_decels+0x2a>
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
    4dde:	1a c0       	rjmp	.+52     	; 0x4e14 <STEPPER_setup_decels+0x5e>
    4de0:	10 92 b9 06 	sts	0x06B9, r1
    4de4:	10 92 b8 06 	sts	0x06B8, r1
    4de8:	1e c0       	rjmp	.+60     	; 0x4e26 <STEPPER_setup_decels+0x70>
    4dea:	80 91 ac 06 	lds	r24, 0x06AC
    4dee:	90 91 ad 06 	lds	r25, 0x06AD
    4df2:	89 2b       	or	r24, r25
    4df4:	21 f0       	breq	.+8      	; 0x4dfe <STEPPER_setup_decels+0x48>
    4df6:	80 e0       	ldi	r24, 0x00	; 0
    4df8:	0e 94 3a 28 	call	0x5074	; 0x5074 <STEPPER_set_decel_step_values>
    4dfc:	04 c0       	rjmp	.+8      	; 0x4e06 <STEPPER_setup_decels+0x50>
    4dfe:	10 92 b9 06 	sts	0x06B9, r1
    4e02:	10 92 b8 06 	sts	0x06B8, r1
    4e06:	80 91 ae 06 	lds	r24, 0x06AE
    4e0a:	90 91 af 06 	lds	r25, 0x06AF
    4e0e:	89 2b       	or	r24, r25
    4e10:	31 f0       	breq	.+12     	; 0x4e1e <STEPPER_setup_decels+0x68>
    4e12:	81 e0       	ldi	r24, 0x01	; 1
    4e14:	be 01       	movw	r22, r28
    4e16:	a8 01       	movw	r20, r16
    4e18:	0e 94 3a 28 	call	0x5074	; 0x5074 <STEPPER_set_decel_step_values>
    4e1c:	04 c0       	rjmp	.+8      	; 0x4e26 <STEPPER_setup_decels+0x70>
    4e1e:	10 92 bb 06 	sts	0x06BB, r1
    4e22:	10 92 ba 06 	sts	0x06BA, r1
    4e26:	df 91       	pop	r29
    4e28:	cf 91       	pop	r28
    4e2a:	1f 91       	pop	r17
    4e2c:	0f 91       	pop	r16
    4e2e:	08 95       	ret

00004e30 <SYS_init>:
    4e30:	10 92 db 06 	sts	0x06DB, r1
    4e34:	10 92 dc 06 	sts	0x06DC, r1
    4e38:	10 92 e0 06 	sts	0x06E0, r1
    4e3c:	10 92 dd 06 	sts	0x06DD, r1
    4e40:	10 92 df 06 	sts	0x06DF, r1
    4e44:	10 92 e1 06 	sts	0x06E1, r1
    4e48:	10 92 e2 06 	sts	0x06E2, r1
    4e4c:	10 92 e3 06 	sts	0x06E3, r1
    4e50:	10 92 e4 06 	sts	0x06E4, r1
    4e54:	10 92 e5 06 	sts	0x06E5, r1
    4e58:	10 92 e6 06 	sts	0x06E6, r1
    4e5c:	10 92 e7 06 	sts	0x06E7, r1
    4e60:	10 92 e8 06 	sts	0x06E8, r1
    4e64:	10 92 e9 06 	sts	0x06E9, r1
    4e68:	10 92 ea 06 	sts	0x06EA, r1
    4e6c:	10 92 eb 06 	sts	0x06EB, r1
    4e70:	10 92 ec 06 	sts	0x06EC, r1
    4e74:	08 95       	ret

00004e76 <TMRSRVC_insert>:
    4e76:	cf 92       	push	r12
    4e78:	df 92       	push	r13
    4e7a:	ef 92       	push	r14
    4e7c:	ff 92       	push	r15
    4e7e:	0f 93       	push	r16
    4e80:	1f 93       	push	r17
    4e82:	cf 93       	push	r28
    4e84:	df 93       	push	r29
    4e86:	ec 01       	movw	r28, r24
    4e88:	80 91 12 07 	lds	r24, 0x0712
    4e8c:	88 23       	and	r24, r24
    4e8e:	39 f4       	brne	.+14     	; 0x4e9e <TMRSRVC_insert+0x28>
    4e90:	d0 93 14 07 	sts	0x0714, r29
    4e94:	c0 93 13 07 	sts	0x0713, r28
    4e98:	0e 94 c9 27 	call	0x4f92	; 0x4f92 <TMRSRVC_start>
    4e9c:	47 c0       	rjmp	.+142    	; 0x4f2c <TMRSRVC_insert+0xb6>
    4e9e:	c0 90 13 07 	lds	r12, 0x0713
    4ea2:	d0 90 14 07 	lds	r13, 0x0714
    4ea6:	00 e0       	ldi	r16, 0x00	; 0
    4ea8:	10 e0       	ldi	r17, 0x00	; 0
    4eaa:	ee 24       	eor	r14, r14
    4eac:	ff 24       	eor	r15, r15
    4eae:	37 c0       	rjmp	.+110    	; 0x4f1e <TMRSRVC_insert+0xa8>
    4eb0:	a8 81       	ld	r26, Y
    4eb2:	b9 81       	ldd	r27, Y+1	; 0x01
    4eb4:	fd 01       	movw	r30, r26
    4eb6:	64 81       	ldd	r22, Z+4	; 0x04
    4eb8:	75 81       	ldd	r23, Z+5	; 0x05
    4eba:	f6 01       	movw	r30, r12
    4ebc:	40 81       	ld	r20, Z
    4ebe:	51 81       	ldd	r21, Z+1	; 0x01
    4ec0:	fa 01       	movw	r30, r20
    4ec2:	84 81       	ldd	r24, Z+4	; 0x04
    4ec4:	95 81       	ldd	r25, Z+5	; 0x05
    4ec6:	9b 01       	movw	r18, r22
    4ec8:	28 1b       	sub	r18, r24
    4eca:	39 0b       	sbc	r19, r25
    4ecc:	37 ff       	sbrs	r19, 7
    4ece:	0f c0       	rjmp	.+30     	; 0x4eee <TMRSRVC_insert+0x78>
    4ed0:	86 1b       	sub	r24, r22
    4ed2:	97 0b       	sbc	r25, r23
    4ed4:	95 83       	std	Z+5, r25	; 0x05
    4ed6:	84 83       	std	Z+4, r24	; 0x04
    4ed8:	db 82       	std	Y+3, r13	; 0x03
    4eda:	ca 82       	std	Y+2, r12	; 0x02
    4edc:	01 2b       	or	r16, r17
    4ede:	29 f4       	brne	.+10     	; 0x4eea <TMRSRVC_insert+0x74>
    4ee0:	d0 93 14 07 	sts	0x0714, r29
    4ee4:	c0 93 13 07 	sts	0x0713, r28
    4ee8:	21 c0       	rjmp	.+66     	; 0x4f2c <TMRSRVC_insert+0xb6>
    4eea:	f7 01       	movw	r30, r14
    4eec:	0c c0       	rjmp	.+24     	; 0x4f06 <TMRSRVC_insert+0x90>
    4eee:	f6 01       	movw	r30, r12
    4ef0:	82 81       	ldd	r24, Z+2	; 0x02
    4ef2:	93 81       	ldd	r25, Z+3	; 0x03
    4ef4:	21 15       	cp	r18, r1
    4ef6:	31 05       	cpc	r19, r1
    4ef8:	49 f4       	brne	.+18     	; 0x4f0c <TMRSRVC_insert+0x96>
    4efa:	fd 01       	movw	r30, r26
    4efc:	15 82       	std	Z+5, r1	; 0x05
    4efe:	14 82       	std	Z+4, r1	; 0x04
    4f00:	9b 83       	std	Y+3, r25	; 0x03
    4f02:	8a 83       	std	Y+2, r24	; 0x02
    4f04:	f6 01       	movw	r30, r12
    4f06:	d3 83       	std	Z+3, r29	; 0x03
    4f08:	c2 83       	std	Z+2, r28	; 0x02
    4f0a:	10 c0       	rjmp	.+32     	; 0x4f2c <TMRSRVC_insert+0xb6>
    4f0c:	fd 01       	movw	r30, r26
    4f0e:	35 83       	std	Z+5, r19	; 0x05
    4f10:	24 83       	std	Z+4, r18	; 0x04
    4f12:	00 97       	sbiw	r24, 0x00	; 0
    4f14:	b9 f3       	breq	.-18     	; 0x4f04 <TMRSRVC_insert+0x8e>
    4f16:	0f 5f       	subi	r16, 0xFF	; 255
    4f18:	1f 4f       	sbci	r17, 0xFF	; 255
    4f1a:	76 01       	movw	r14, r12
    4f1c:	6c 01       	movw	r12, r24
    4f1e:	80 91 12 07 	lds	r24, 0x0712
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	08 17       	cp	r16, r24
    4f26:	19 07       	cpc	r17, r25
    4f28:	18 f2       	brcs	.-122    	; 0x4eb0 <TMRSRVC_insert+0x3a>
    4f2a:	ec cf       	rjmp	.-40     	; 0x4f04 <TMRSRVC_insert+0x8e>
    4f2c:	80 91 12 07 	lds	r24, 0x0712
    4f30:	8f 5f       	subi	r24, 0xFF	; 255
    4f32:	80 93 12 07 	sts	0x0712, r24
    4f36:	df 91       	pop	r29
    4f38:	cf 91       	pop	r28
    4f3a:	1f 91       	pop	r17
    4f3c:	0f 91       	pop	r16
    4f3e:	ff 90       	pop	r15
    4f40:	ef 90       	pop	r14
    4f42:	df 90       	pop	r13
    4f44:	cf 90       	pop	r12
    4f46:	08 95       	ret

00004f48 <TMRSRVC_open>:
    4f48:	88 e0       	ldi	r24, 0x08	; 8
    4f4a:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    4f4e:	88 23       	and	r24, r24
    4f50:	b9 f4       	brne	.+46     	; 0x4f80 <TMRSRVC_open+0x38>
    4f52:	10 92 12 07 	sts	0x0712, r1
    4f56:	10 92 14 07 	sts	0x0714, r1
    4f5a:	10 92 13 07 	sts	0x0713, r1
    4f5e:	10 92 e2 03 	sts	0x03E2, r1
    4f62:	10 92 e3 03 	sts	0x03E3, r1
    4f66:	80 e1       	ldi	r24, 0x10	; 16
    4f68:	67 ea       	ldi	r22, 0xA7	; 167
    4f6a:	78 e2       	ldi	r23, 0x28	; 40
    4f6c:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <__ISR_attach>
    4f70:	0e 94 ae 28 	call	0x515c	; 0x515c <__TMRSRVC_init>
    4f74:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__TMRSRVC_start>
    4f78:	88 e0       	ldi	r24, 0x08	; 8
    4f7a:	61 e0       	ldi	r22, 0x01	; 1
    4f7c:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <SYS_set_state>
    4f80:	88 e0       	ldi	r24, 0x08	; 8
    4f82:	91 e0       	ldi	r25, 0x01	; 1
    4f84:	08 95       	ret

00004f86 <__TMRSRVC_start>:
    4f86:	ee e6       	ldi	r30, 0x6E	; 110
    4f88:	f0 e0       	ldi	r31, 0x00	; 0
    4f8a:	80 81       	ld	r24, Z
    4f8c:	82 60       	ori	r24, 0x02	; 2
    4f8e:	80 83       	st	Z, r24
    4f90:	08 95       	ret

00004f92 <TMRSRVC_start>:
    4f92:	81 e0       	ldi	r24, 0x01	; 1
    4f94:	80 93 e3 03 	sts	0x03E3, r24
    4f98:	08 95       	ret

00004f9a <I2C_enable>:
    4f9a:	80 91 15 07 	lds	r24, 0x0715
    4f9e:	81 30       	cpi	r24, 0x01	; 1
    4fa0:	29 f4       	brne	.+10     	; 0x4fac <I2C_enable+0x12>
    4fa2:	80 91 bc 00 	lds	r24, 0x00BC
    4fa6:	84 60       	ori	r24, 0x04	; 4
    4fa8:	80 93 bc 00 	sts	0x00BC, r24
    4fac:	08 95       	ret

00004fae <__I2C_init>:
    4fae:	38 98       	cbi	0x07, 0	; 7
    4fb0:	39 98       	cbi	0x07, 1	; 7
    4fb2:	08 95       	ret

00004fb4 <__ISR_attach>:
    4fb4:	80 32       	cpi	r24, 0x20	; 32
    4fb6:	18 f0       	brcs	.+6      	; 0x4fbe <__ISR_attach+0xa>
    4fb8:	20 e0       	ldi	r18, 0x00	; 0
    4fba:	30 e0       	ldi	r19, 0x00	; 0
    4fbc:	0a c0       	rjmp	.+20     	; 0x4fd2 <__ISR_attach+0x1e>
    4fbe:	e8 2f       	mov	r30, r24
    4fc0:	f0 e0       	ldi	r31, 0x00	; 0
    4fc2:	ee 0f       	add	r30, r30
    4fc4:	ff 1f       	adc	r31, r31
    4fc6:	ee 56       	subi	r30, 0x6E	; 110
    4fc8:	fc 4f       	sbci	r31, 0xFC	; 252
    4fca:	20 81       	ld	r18, Z
    4fcc:	31 81       	ldd	r19, Z+1	; 0x01
    4fce:	71 83       	std	Z+1, r23	; 0x01
    4fd0:	60 83       	st	Z, r22
    4fd2:	c9 01       	movw	r24, r18
    4fd4:	08 95       	ret

00004fd6 <__ATMEGA_init>:
    4fd6:	24 9a       	sbi	0x04, 4	; 4
    4fd8:	2c 9a       	sbi	0x05, 4	; 5
    4fda:	08 95       	ret

00004fdc <SPI_default_config>:
    4fdc:	83 e5       	ldi	r24, 0x53	; 83
    4fde:	8c bd       	out	0x2c, r24	; 44
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	8d bd       	out	0x2d, r24	; 45
    4fe4:	8d e0       	ldi	r24, 0x0D	; 13
    4fe6:	8a 95       	dec	r24
    4fe8:	f1 f7       	brne	.-4      	; 0x4fe6 <SPI_default_config+0xa>
    4fea:	08 95       	ret

00004fec <SPI_ATtiny0_config>:
    4fec:	83 e5       	ldi	r24, 0x53	; 83
    4fee:	8c bd       	out	0x2c, r24	; 44
    4ff0:	1d bc       	out	0x2d, r1	; 45
    4ff2:	84 ef       	ldi	r24, 0xF4	; 244
    4ff4:	91 e0       	ldi	r25, 0x01	; 1
    4ff6:	01 97       	sbiw	r24, 0x01	; 1
    4ff8:	f1 f7       	brne	.-4      	; 0x4ff6 <SPI_ATtiny0_config+0xa>
    4ffa:	08 95       	ret

00004ffc <SPI_PSXC_config>:
    4ffc:	8f e7       	ldi	r24, 0x7F	; 127
    4ffe:	8c bd       	out	0x2c, r24	; 44
    5000:	1d bc       	out	0x2d, r1	; 45
    5002:	84 ef       	ldi	r24, 0xF4	; 244
    5004:	91 e0       	ldi	r25, 0x01	; 1
    5006:	01 97       	sbiw	r24, 0x01	; 1
    5008:	f1 f7       	brne	.-4      	; 0x5006 <SPI_PSXC_config+0xa>
    500a:	08 95       	ret

0000500c <SPI_LCD_config>:
    500c:	83 e5       	ldi	r24, 0x53	; 83
    500e:	8c bd       	out	0x2c, r24	; 44
    5010:	81 e0       	ldi	r24, 0x01	; 1
    5012:	8d bd       	out	0x2d, r24	; 45
    5014:	8d e0       	ldi	r24, 0x0D	; 13
    5016:	8a 95       	dec	r24
    5018:	f1 f7       	brne	.-4      	; 0x5016 <SPI_LCD_config+0xa>
    501a:	08 95       	ret

0000501c <SPI_FLASH_config>:
    501c:	83 e5       	ldi	r24, 0x53	; 83
    501e:	8c bd       	out	0x2c, r24	; 44
    5020:	81 e0       	ldi	r24, 0x01	; 1
    5022:	8d bd       	out	0x2d, r24	; 45
    5024:	84 ef       	ldi	r24, 0xF4	; 244
    5026:	91 e0       	ldi	r25, 0x01	; 1
    5028:	01 97       	sbiw	r24, 0x01	; 1
    502a:	f1 f7       	brne	.-4      	; 0x5028 <SPI_FLASH_config+0xc>
    502c:	08 95       	ret

0000502e <__SPI_init>:
    502e:	25 9a       	sbi	0x04, 5	; 4
    5030:	26 98       	cbi	0x04, 6	; 4
    5032:	27 9a       	sbi	0x04, 7	; 4
    5034:	20 9a       	sbi	0x04, 0	; 4
    5036:	21 9a       	sbi	0x04, 1	; 4
    5038:	22 9a       	sbi	0x04, 2	; 4
    503a:	08 95       	ret

0000503c <__SPKR_close>:
    503c:	82 30       	cpi	r24, 0x02	; 2
    503e:	29 f4       	brne	.+10     	; 0x504a <__SPKR_close+0xe>
    5040:	80 91 81 00 	lds	r24, 0x0081
    5044:	8e 7f       	andi	r24, 0xFE	; 254
    5046:	80 93 81 00 	sts	0x0081, r24
    504a:	80 91 72 03 	lds	r24, 0x0372
    504e:	81 30       	cpi	r24, 0x01	; 1
    5050:	31 f4       	brne	.+12     	; 0x505e <__SPKR_close+0x22>
    5052:	80 91 73 03 	lds	r24, 0x0373
    5056:	81 30       	cpi	r24, 0x01	; 1
    5058:	11 f4       	brne	.+4      	; 0x505e <__SPKR_close+0x22>
    505a:	00 00       	nop
    505c:	08 95       	ret
    505e:	80 91 72 03 	lds	r24, 0x0372
    5062:	81 30       	cpi	r24, 0x01	; 1
    5064:	21 f0       	breq	.+8      	; 0x506e <__SPKR_close+0x32>
    5066:	80 91 73 03 	lds	r24, 0x0373
    506a:	81 30       	cpi	r24, 0x01	; 1
    506c:	11 f4       	brne	.+4      	; 0x5072 <__SPKR_close+0x36>
    506e:	5f 98       	cbi	0x0b, 7	; 11
    5070:	57 98       	cbi	0x0a, 7	; 10
    5072:	08 95       	ret

00005074 <STEPPER_set_decel_step_values>:
    5074:	ef 92       	push	r14
    5076:	ff 92       	push	r15
    5078:	0f 93       	push	r16
    507a:	1f 93       	push	r17
    507c:	cf 93       	push	r28
    507e:	df 93       	push	r29
    5080:	eb 01       	movw	r28, r22
    5082:	88 23       	and	r24, r24
    5084:	21 f0       	breq	.+8      	; 0x508e <STEPPER_set_decel_step_values+0x1a>
    5086:	81 30       	cpi	r24, 0x01	; 1
    5088:	09 f0       	breq	.+2      	; 0x508c <STEPPER_set_decel_step_values+0x18>
    508a:	5a c0       	rjmp	.+180    	; 0x5140 <STEPPER_set_decel_step_values+0xcc>
    508c:	2d c0       	rjmp	.+90     	; 0x50e8 <STEPPER_set_decel_step_values+0x74>
    508e:	9a 01       	movw	r18, r20
    5090:	40 e0       	ldi	r20, 0x00	; 0
    5092:	50 e0       	ldi	r21, 0x00	; 0
    5094:	ca 01       	movw	r24, r20
    5096:	b9 01       	movw	r22, r18
    5098:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__mulsi3>
    509c:	20 91 ac 06 	lds	r18, 0x06AC
    50a0:	30 91 ad 06 	lds	r19, 0x06AD
    50a4:	22 0f       	add	r18, r18
    50a6:	33 1f       	adc	r19, r19
    50a8:	40 e0       	ldi	r20, 0x00	; 0
    50aa:	50 e0       	ldi	r21, 0x00	; 0
    50ac:	0e 94 8b 33 	call	0x6716	; 0x6716 <__udivmodsi4>
    50b0:	79 01       	movw	r14, r18
    50b2:	8a 01       	movw	r16, r20
    50b4:	a8 01       	movw	r20, r16
    50b6:	97 01       	movw	r18, r14
    50b8:	22 0f       	add	r18, r18
    50ba:	33 1f       	adc	r19, r19
    50bc:	44 1f       	adc	r20, r20
    50be:	55 1f       	adc	r21, r21
    50c0:	ce 01       	movw	r24, r28
    50c2:	a0 e0       	ldi	r26, 0x00	; 0
    50c4:	b0 e0       	ldi	r27, 0x00	; 0
    50c6:	82 17       	cp	r24, r18
    50c8:	93 07       	cpc	r25, r19
    50ca:	a4 07       	cpc	r26, r20
    50cc:	b5 07       	cpc	r27, r21
    50ce:	28 f0       	brcs	.+10     	; 0x50da <STEPPER_set_decel_step_values+0x66>
    50d0:	f0 92 b9 06 	sts	0x06B9, r15
    50d4:	e0 92 b8 06 	sts	0x06B8, r14
    50d8:	33 c0       	rjmp	.+102    	; 0x5140 <STEPPER_set_decel_step_values+0xcc>
    50da:	d6 95       	lsr	r29
    50dc:	c7 95       	ror	r28
    50de:	d0 93 b9 06 	sts	0x06B9, r29
    50e2:	c0 93 b8 06 	sts	0x06B8, r28
    50e6:	2c c0       	rjmp	.+88     	; 0x5140 <STEPPER_set_decel_step_values+0xcc>
    50e8:	9a 01       	movw	r18, r20
    50ea:	40 e0       	ldi	r20, 0x00	; 0
    50ec:	50 e0       	ldi	r21, 0x00	; 0
    50ee:	ca 01       	movw	r24, r20
    50f0:	b9 01       	movw	r22, r18
    50f2:	0e 94 6c 33 	call	0x66d8	; 0x66d8 <__mulsi3>
    50f6:	20 91 ae 06 	lds	r18, 0x06AE
    50fa:	30 91 af 06 	lds	r19, 0x06AF
    50fe:	22 0f       	add	r18, r18
    5100:	33 1f       	adc	r19, r19
    5102:	40 e0       	ldi	r20, 0x00	; 0
    5104:	50 e0       	ldi	r21, 0x00	; 0
    5106:	0e 94 8b 33 	call	0x6716	; 0x6716 <__udivmodsi4>
    510a:	79 01       	movw	r14, r18
    510c:	8a 01       	movw	r16, r20
    510e:	a8 01       	movw	r20, r16
    5110:	97 01       	movw	r18, r14
    5112:	22 0f       	add	r18, r18
    5114:	33 1f       	adc	r19, r19
    5116:	44 1f       	adc	r20, r20
    5118:	55 1f       	adc	r21, r21
    511a:	ce 01       	movw	r24, r28
    511c:	a0 e0       	ldi	r26, 0x00	; 0
    511e:	b0 e0       	ldi	r27, 0x00	; 0
    5120:	82 17       	cp	r24, r18
    5122:	93 07       	cpc	r25, r19
    5124:	a4 07       	cpc	r26, r20
    5126:	b5 07       	cpc	r27, r21
    5128:	28 f0       	brcs	.+10     	; 0x5134 <STEPPER_set_decel_step_values+0xc0>
    512a:	f0 92 bb 06 	sts	0x06BB, r15
    512e:	e0 92 ba 06 	sts	0x06BA, r14
    5132:	06 c0       	rjmp	.+12     	; 0x5140 <STEPPER_set_decel_step_values+0xcc>
    5134:	d6 95       	lsr	r29
    5136:	c7 95       	ror	r28
    5138:	d0 93 bb 06 	sts	0x06BB, r29
    513c:	c0 93 ba 06 	sts	0x06BA, r28
    5140:	df 91       	pop	r29
    5142:	cf 91       	pop	r28
    5144:	1f 91       	pop	r17
    5146:	0f 91       	pop	r16
    5148:	ff 90       	pop	r15
    514a:	ef 90       	pop	r14
    514c:	08 95       	ret

0000514e <__TIMER0_COMPA_vect>:
    514e:	0e 94 b7 28 	call	0x516e	; 0x516e <TMRSRVC_tick>
    5152:	0e 94 f7 28 	call	0x51ee	; 0x51ee <STEPPER_clk>
    5156:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <SPKR_beep_clk>
    515a:	08 95       	ret

0000515c <__TMRSRVC_init>:
    515c:	84 b5       	in	r24, 0x24	; 36
    515e:	82 60       	ori	r24, 0x02	; 2
    5160:	84 bd       	out	0x24, r24	; 36
    5162:	85 b5       	in	r24, 0x25	; 37
    5164:	84 60       	ori	r24, 0x04	; 4
    5166:	85 bd       	out	0x25, r24	; 37
    5168:	8e e4       	ldi	r24, 0x4E	; 78
    516a:	87 bd       	out	0x27, r24	; 39
    516c:	08 95       	ret

0000516e <TMRSRVC_tick>:
    516e:	88 e0       	ldi	r24, 0x08	; 8
    5170:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    5174:	88 23       	and	r24, r24
    5176:	11 f4       	brne	.+4      	; 0x517c <TMRSRVC_tick+0xe>
    5178:	84 e0       	ldi	r24, 0x04	; 4
    517a:	08 95       	ret
    517c:	80 91 e3 03 	lds	r24, 0x03E3
    5180:	88 23       	and	r24, r24
    5182:	11 f4       	brne	.+4      	; 0x5188 <TMRSRVC_tick+0x1a>
    5184:	83 e0       	ldi	r24, 0x03	; 3
    5186:	08 95       	ret
    5188:	80 91 e2 03 	lds	r24, 0x03E2
    518c:	88 23       	and	r24, r24
    518e:	11 f0       	breq	.+4      	; 0x5194 <TMRSRVC_tick+0x26>
    5190:	82 e0       	ldi	r24, 0x02	; 2
    5192:	08 95       	ret
    5194:	0e 94 44 2b 	call	0x5688	; 0x5688 <TMRSRVC_process>
    5198:	81 30       	cpi	r24, 0x01	; 1
    519a:	e1 f3       	breq	.-8      	; 0x5194 <TMRSRVC_tick+0x26>
    519c:	80 e0       	ldi	r24, 0x00	; 0
    519e:	08 95       	ret

000051a0 <SPKR_beep_clk>:
    51a0:	80 91 73 03 	lds	r24, 0x0373
    51a4:	81 30       	cpi	r24, 0x01	; 1
    51a6:	11 f5       	brne	.+68     	; 0x51ec <SPKR_beep_clk+0x4c>
    51a8:	80 91 7c 03 	lds	r24, 0x037C
    51ac:	90 91 7d 03 	lds	r25, 0x037D
    51b0:	20 91 7e 03 	lds	r18, 0x037E
    51b4:	30 91 7f 03 	lds	r19, 0x037F
    51b8:	28 0f       	add	r18, r24
    51ba:	39 1f       	adc	r19, r25
    51bc:	30 93 7d 03 	sts	0x037D, r19
    51c0:	20 93 7c 03 	sts	0x037C, r18
    51c4:	80 91 7c 03 	lds	r24, 0x037C
    51c8:	90 91 7d 03 	lds	r25, 0x037D
    51cc:	88 5e       	subi	r24, 0xE8	; 232
    51ce:	93 40       	sbci	r25, 0x03	; 3
    51d0:	6c f0       	brlt	.+26     	; 0x51ec <SPKR_beep_clk+0x4c>
    51d2:	8b b1       	in	r24, 0x0b	; 11
    51d4:	80 58       	subi	r24, 0x80	; 128
    51d6:	8b b9       	out	0x0b, r24	; 11
    51d8:	80 91 7c 03 	lds	r24, 0x037C
    51dc:	90 91 7d 03 	lds	r25, 0x037D
    51e0:	88 5e       	subi	r24, 0xE8	; 232
    51e2:	93 40       	sbci	r25, 0x03	; 3
    51e4:	90 93 7d 03 	sts	0x037D, r25
    51e8:	80 93 7c 03 	sts	0x037C, r24
    51ec:	08 95       	ret

000051ee <STEPPER_clk>:
    51ee:	87 e0       	ldi	r24, 0x07	; 7
    51f0:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <SYS_get_state>
    51f4:	81 30       	cpi	r24, 0x01	; 1
    51f6:	09 f0       	breq	.+2      	; 0x51fa <STEPPER_clk+0xc>
    51f8:	aa c0       	rjmp	.+340    	; 0x534e <STEPPER_clk+0x160>
    51fa:	80 91 ac 06 	lds	r24, 0x06AC
    51fe:	90 91 ad 06 	lds	r25, 0x06AD
    5202:	89 2b       	or	r24, r25
    5204:	09 f1       	breq	.+66     	; 0x5248 <STEPPER_clk+0x5a>
    5206:	80 91 d0 06 	lds	r24, 0x06D0
    520a:	90 91 d1 06 	lds	r25, 0x06D1
    520e:	20 91 ac 06 	lds	r18, 0x06AC
    5212:	30 91 ad 06 	lds	r19, 0x06AD
    5216:	82 0f       	add	r24, r18
    5218:	93 1f       	adc	r25, r19
    521a:	90 93 d1 06 	sts	0x06D1, r25
    521e:	80 93 d0 06 	sts	0x06D0, r24
    5222:	80 91 d0 06 	lds	r24, 0x06D0
    5226:	90 91 d1 06 	lds	r25, 0x06D1
    522a:	88 5e       	subi	r24, 0xE8	; 232
    522c:	93 40       	sbci	r25, 0x03	; 3
    522e:	a4 f0       	brlt	.+40     	; 0x5258 <STEPPER_clk+0x6a>
    5230:	80 91 d0 06 	lds	r24, 0x06D0
    5234:	90 91 d1 06 	lds	r25, 0x06D1
    5238:	88 5e       	subi	r24, 0xE8	; 232
    523a:	93 40       	sbci	r25, 0x03	; 3
    523c:	90 93 d1 06 	sts	0x06D1, r25
    5240:	80 93 d0 06 	sts	0x06D0, r24
    5244:	41 e0       	ldi	r20, 0x01	; 1
    5246:	09 c0       	rjmp	.+18     	; 0x525a <STEPPER_clk+0x6c>
    5248:	80 91 a4 06 	lds	r24, 0x06A4
    524c:	90 91 a5 06 	lds	r25, 0x06A5
    5250:	90 93 a9 06 	sts	0x06A9, r25
    5254:	80 93 a8 06 	sts	0x06A8, r24
    5258:	40 e0       	ldi	r20, 0x00	; 0
    525a:	80 91 ae 06 	lds	r24, 0x06AE
    525e:	90 91 af 06 	lds	r25, 0x06AF
    5262:	89 2b       	or	r24, r25
    5264:	09 f1       	breq	.+66     	; 0x52a8 <STEPPER_clk+0xba>
    5266:	80 91 d2 06 	lds	r24, 0x06D2
    526a:	90 91 d3 06 	lds	r25, 0x06D3
    526e:	20 91 ae 06 	lds	r18, 0x06AE
    5272:	30 91 af 06 	lds	r19, 0x06AF
    5276:	82 0f       	add	r24, r18
    5278:	93 1f       	adc	r25, r19
    527a:	90 93 d3 06 	sts	0x06D3, r25
    527e:	80 93 d2 06 	sts	0x06D2, r24
    5282:	80 91 d2 06 	lds	r24, 0x06D2
    5286:	90 91 d3 06 	lds	r25, 0x06D3
    528a:	88 5e       	subi	r24, 0xE8	; 232
    528c:	93 40       	sbci	r25, 0x03	; 3
    528e:	a4 f0       	brlt	.+40     	; 0x52b8 <STEPPER_clk+0xca>
    5290:	80 91 d2 06 	lds	r24, 0x06D2
    5294:	90 91 d3 06 	lds	r25, 0x06D3
    5298:	88 5e       	subi	r24, 0xE8	; 232
    529a:	93 40       	sbci	r25, 0x03	; 3
    529c:	90 93 d3 06 	sts	0x06D3, r25
    52a0:	80 93 d2 06 	sts	0x06D2, r24
    52a4:	61 e0       	ldi	r22, 0x01	; 1
    52a6:	09 c0       	rjmp	.+18     	; 0x52ba <STEPPER_clk+0xcc>
    52a8:	80 91 a6 06 	lds	r24, 0x06A6
    52ac:	90 91 a7 06 	lds	r25, 0x06A7
    52b0:	90 93 ab 06 	sts	0x06AB, r25
    52b4:	80 93 aa 06 	sts	0x06AA, r24
    52b8:	60 e0       	ldi	r22, 0x00	; 0
    52ba:	84 2f       	mov	r24, r20
    52bc:	0e 94 a8 29 	call	0x5350	; 0x5350 <STEPPER_process_accel>
    52c0:	80 91 cc 06 	lds	r24, 0x06CC
    52c4:	90 91 cd 06 	lds	r25, 0x06CD
    52c8:	20 91 a8 06 	lds	r18, 0x06A8
    52cc:	30 91 a9 06 	lds	r19, 0x06A9
    52d0:	28 0f       	add	r18, r24
    52d2:	39 1f       	adc	r19, r25
    52d4:	30 93 cd 06 	sts	0x06CD, r19
    52d8:	20 93 cc 06 	sts	0x06CC, r18
    52dc:	80 91 cc 06 	lds	r24, 0x06CC
    52e0:	90 91 cd 06 	lds	r25, 0x06CD
    52e4:	88 5e       	subi	r24, 0xE8	; 232
    52e6:	93 40       	sbci	r25, 0x03	; 3
    52e8:	14 f4       	brge	.+4      	; 0x52ee <STEPPER_clk+0x100>
    52ea:	40 e0       	ldi	r20, 0x00	; 0
    52ec:	0b c0       	rjmp	.+22     	; 0x5304 <STEPPER_clk+0x116>
    52ee:	80 91 cc 06 	lds	r24, 0x06CC
    52f2:	90 91 cd 06 	lds	r25, 0x06CD
    52f6:	88 5e       	subi	r24, 0xE8	; 232
    52f8:	93 40       	sbci	r25, 0x03	; 3
    52fa:	90 93 cd 06 	sts	0x06CD, r25
    52fe:	80 93 cc 06 	sts	0x06CC, r24
    5302:	41 e0       	ldi	r20, 0x01	; 1
    5304:	80 91 ce 06 	lds	r24, 0x06CE
    5308:	90 91 cf 06 	lds	r25, 0x06CF
    530c:	20 91 aa 06 	lds	r18, 0x06AA
    5310:	30 91 ab 06 	lds	r19, 0x06AB
    5314:	28 0f       	add	r18, r24
    5316:	39 1f       	adc	r19, r25
    5318:	30 93 cf 06 	sts	0x06CF, r19
    531c:	20 93 ce 06 	sts	0x06CE, r18
    5320:	80 91 ce 06 	lds	r24, 0x06CE
    5324:	90 91 cf 06 	lds	r25, 0x06CF
    5328:	88 5e       	subi	r24, 0xE8	; 232
    532a:	93 40       	sbci	r25, 0x03	; 3
    532c:	14 f4       	brge	.+4      	; 0x5332 <STEPPER_clk+0x144>
    532e:	60 e0       	ldi	r22, 0x00	; 0
    5330:	0b c0       	rjmp	.+22     	; 0x5348 <STEPPER_clk+0x15a>
    5332:	80 91 ce 06 	lds	r24, 0x06CE
    5336:	90 91 cf 06 	lds	r25, 0x06CF
    533a:	88 5e       	subi	r24, 0xE8	; 232
    533c:	93 40       	sbci	r25, 0x03	; 3
    533e:	90 93 cf 06 	sts	0x06CF, r25
    5342:	80 93 ce 06 	sts	0x06CE, r24
    5346:	61 e0       	ldi	r22, 0x01	; 1
    5348:	84 2f       	mov	r24, r20
    534a:	0e 94 ed 29 	call	0x53da	; 0x53da <STEPPER_process_run_mode>
    534e:	08 95       	ret

00005350 <STEPPER_process_accel>:
    5350:	88 23       	and	r24, r24
    5352:	f1 f0       	breq	.+60     	; 0x5390 <STEPPER_process_accel+0x40>
    5354:	20 91 a4 06 	lds	r18, 0x06A4
    5358:	30 91 a5 06 	lds	r19, 0x06A5
    535c:	80 91 a8 06 	lds	r24, 0x06A8
    5360:	90 91 a9 06 	lds	r25, 0x06A9
    5364:	28 1b       	sub	r18, r24
    5366:	39 0b       	sbc	r19, r25
    5368:	12 16       	cp	r1, r18
    536a:	13 06       	cpc	r1, r19
    536c:	34 f4       	brge	.+12     	; 0x537a <STEPPER_process_accel+0x2a>
    536e:	80 91 a8 06 	lds	r24, 0x06A8
    5372:	90 91 a9 06 	lds	r25, 0x06A9
    5376:	01 96       	adiw	r24, 0x01	; 1
    5378:	07 c0       	rjmp	.+14     	; 0x5388 <STEPPER_process_accel+0x38>
    537a:	23 2b       	or	r18, r19
    537c:	49 f0       	breq	.+18     	; 0x5390 <STEPPER_process_accel+0x40>
    537e:	80 91 a8 06 	lds	r24, 0x06A8
    5382:	90 91 a9 06 	lds	r25, 0x06A9
    5386:	01 97       	sbiw	r24, 0x01	; 1
    5388:	90 93 a9 06 	sts	0x06A9, r25
    538c:	80 93 a8 06 	sts	0x06A8, r24
    5390:	66 23       	and	r22, r22
    5392:	11 f1       	breq	.+68     	; 0x53d8 <STEPPER_process_accel+0x88>
    5394:	20 91 a6 06 	lds	r18, 0x06A6
    5398:	30 91 a7 06 	lds	r19, 0x06A7
    539c:	80 91 aa 06 	lds	r24, 0x06AA
    53a0:	90 91 ab 06 	lds	r25, 0x06AB
    53a4:	28 1b       	sub	r18, r24
    53a6:	39 0b       	sbc	r19, r25
    53a8:	12 16       	cp	r1, r18
    53aa:	13 06       	cpc	r1, r19
    53ac:	54 f4       	brge	.+20     	; 0x53c2 <STEPPER_process_accel+0x72>
    53ae:	80 91 aa 06 	lds	r24, 0x06AA
    53b2:	90 91 ab 06 	lds	r25, 0x06AB
    53b6:	01 96       	adiw	r24, 0x01	; 1
    53b8:	90 93 ab 06 	sts	0x06AB, r25
    53bc:	80 93 aa 06 	sts	0x06AA, r24
    53c0:	08 95       	ret
    53c2:	23 2b       	or	r18, r19
    53c4:	49 f0       	breq	.+18     	; 0x53d8 <STEPPER_process_accel+0x88>
    53c6:	80 91 aa 06 	lds	r24, 0x06AA
    53ca:	90 91 ab 06 	lds	r25, 0x06AB
    53ce:	01 97       	sbiw	r24, 0x01	; 1
    53d0:	90 93 ab 06 	sts	0x06AB, r25
    53d4:	80 93 aa 06 	sts	0x06AA, r24
    53d8:	08 95       	ret

000053da <STEPPER_process_run_mode>:
    53da:	0f 93       	push	r16
    53dc:	1f 93       	push	r17
    53de:	18 2f       	mov	r17, r24
    53e0:	06 2f       	mov	r16, r22
    53e2:	80 91 d8 06 	lds	r24, 0x06D8
    53e6:	88 23       	and	r24, r24
    53e8:	09 f0       	breq	.+2      	; 0x53ec <STEPPER_process_run_mode+0x12>
    53ea:	e7 c0       	rjmp	.+462    	; 0x55ba <STEPPER_process_run_mode+0x1e0>
    53ec:	80 91 c0 06 	lds	r24, 0x06C0
    53f0:	88 23       	and	r24, r24
    53f2:	09 f0       	breq	.+2      	; 0x53f6 <STEPPER_process_run_mode+0x1c>
    53f4:	5a c0       	rjmp	.+180    	; 0x54aa <STEPPER_process_run_mode+0xd0>
    53f6:	80 91 a8 06 	lds	r24, 0x06A8
    53fa:	90 91 a9 06 	lds	r25, 0x06A9
    53fe:	89 2b       	or	r24, r25
    5400:	e9 f4       	brne	.+58     	; 0x543c <STEPPER_process_run_mode+0x62>
    5402:	80 91 e4 03 	lds	r24, 0x03E4
    5406:	83 7e       	andi	r24, 0xE3	; 227
    5408:	80 93 e4 03 	sts	0x03E4, r24
    540c:	10 92 c9 06 	sts	0x06C9, r1
    5410:	80 91 d4 06 	lds	r24, 0x06D4
    5414:	88 23       	and	r24, r24
    5416:	09 f4       	brne	.+2      	; 0x541a <STEPPER_process_run_mode+0x40>
    5418:	5d c0       	rjmp	.+186    	; 0x54d4 <STEPPER_process_run_mode+0xfa>
    541a:	60 91 c2 06 	lds	r22, 0x06C2
    541e:	80 e0       	ldi	r24, 0x00	; 0
    5420:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <STEPPER_stop>
    5424:	e0 91 d6 06 	lds	r30, 0x06D6
    5428:	f0 91 d7 06 	lds	r31, 0x06D7
    542c:	30 97       	sbiw	r30, 0x00	; 0
    542e:	09 f4       	brne	.+2      	; 0x5432 <STEPPER_process_run_mode+0x58>
    5430:	51 c0       	rjmp	.+162    	; 0x54d4 <STEPPER_process_run_mode+0xfa>
    5432:	81 e0       	ldi	r24, 0x01	; 1
    5434:	80 83       	st	Z, r24
    5436:	10 92 d4 06 	sts	0x06D4, r1
    543a:	4c c0       	rjmp	.+152    	; 0x54d4 <STEPPER_process_run_mode+0xfa>
    543c:	80 91 a2 06 	lds	r24, 0x06A2
    5440:	81 30       	cpi	r24, 0x01	; 1
    5442:	41 f4       	brne	.+16     	; 0x5454 <STEPPER_process_run_mode+0x7a>
    5444:	80 91 b4 06 	lds	r24, 0x06B4
    5448:	90 91 b5 06 	lds	r25, 0x06B5
    544c:	01 97       	sbiw	r24, 0x01	; 1
    544e:	11 f4       	brne	.+4      	; 0x5454 <STEPPER_process_run_mode+0x7a>
    5450:	11 e0       	ldi	r17, 0x01	; 1
    5452:	02 c0       	rjmp	.+4      	; 0x5458 <STEPPER_process_run_mode+0x7e>
    5454:	11 23       	and	r17, r17
    5456:	f1 f1       	breq	.+124    	; 0x54d4 <STEPPER_process_run_mode+0xfa>
    5458:	e0 91 c7 06 	lds	r30, 0x06C7
    545c:	f0 e0       	ldi	r31, 0x00	; 0
    545e:	e1 5d       	subi	r30, 0xD1	; 209
    5460:	fc 4f       	sbci	r31, 0xFC	; 252
    5462:	90 91 e4 03 	lds	r25, 0x03E4
    5466:	93 7e       	andi	r25, 0xE3	; 227
    5468:	80 81       	ld	r24, Z
    546a:	89 2b       	or	r24, r25
    546c:	80 93 e4 03 	sts	0x03E4, r24
    5470:	80 91 c5 06 	lds	r24, 0x06C5
    5474:	88 23       	and	r24, r24
    5476:	21 f4       	brne	.+8      	; 0x5480 <STEPPER_process_run_mode+0xa6>
    5478:	80 91 c7 06 	lds	r24, 0x06C7
    547c:	8f 5f       	subi	r24, 0xFF	; 255
    547e:	03 c0       	rjmp	.+6      	; 0x5486 <STEPPER_process_run_mode+0xac>
    5480:	80 91 c7 06 	lds	r24, 0x06C7
    5484:	81 50       	subi	r24, 0x01	; 1
    5486:	80 93 c7 06 	sts	0x06C7, r24
    548a:	80 91 c7 06 	lds	r24, 0x06C7
    548e:	83 70       	andi	r24, 0x03	; 3
    5490:	80 93 c7 06 	sts	0x06C7, r24
    5494:	81 e0       	ldi	r24, 0x01	; 1
    5496:	80 93 c9 06 	sts	0x06C9, r24
    549a:	80 91 a2 06 	lds	r24, 0x06A2
    549e:	81 30       	cpi	r24, 0x01	; 1
    54a0:	c9 f4       	brne	.+50     	; 0x54d4 <STEPPER_process_run_mode+0xfa>
    54a2:	80 e0       	ldi	r24, 0x00	; 0
    54a4:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <STEPPER_process_step_mode>
    54a8:	15 c0       	rjmp	.+42     	; 0x54d4 <STEPPER_process_run_mode+0xfa>
    54aa:	90 91 e4 03 	lds	r25, 0x03E4
    54ae:	93 7e       	andi	r25, 0xE3	; 227
    54b0:	90 93 e4 03 	sts	0x03E4, r25
    54b4:	e0 91 c7 06 	lds	r30, 0x06C7
    54b8:	f0 e0       	ldi	r31, 0x00	; 0
    54ba:	e1 5d       	subi	r30, 0xD1	; 209
    54bc:	fc 4f       	sbci	r31, 0xFC	; 252
    54be:	80 81       	ld	r24, Z
    54c0:	89 2b       	or	r24, r25
    54c2:	80 93 e4 03 	sts	0x03E4, r24
    54c6:	82 e0       	ldi	r24, 0x02	; 2
    54c8:	80 93 c9 06 	sts	0x06C9, r24
    54cc:	10 92 a9 06 	sts	0x06A9, r1
    54d0:	10 92 a8 06 	sts	0x06A8, r1
    54d4:	80 91 c1 06 	lds	r24, 0x06C1
    54d8:	88 23       	and	r24, r24
    54da:	09 f0       	breq	.+2      	; 0x54de <STEPPER_process_run_mode+0x104>
    54dc:	59 c0       	rjmp	.+178    	; 0x5590 <STEPPER_process_run_mode+0x1b6>
    54de:	80 91 aa 06 	lds	r24, 0x06AA
    54e2:	90 91 ab 06 	lds	r25, 0x06AB
    54e6:	89 2b       	or	r24, r25
    54e8:	e9 f4       	brne	.+58     	; 0x5524 <STEPPER_process_run_mode+0x14a>
    54ea:	80 91 e4 03 	lds	r24, 0x03E4
    54ee:	8f 71       	andi	r24, 0x1F	; 31
    54f0:	80 93 e4 03 	sts	0x03E4, r24
    54f4:	10 92 ca 06 	sts	0x06CA, r1
    54f8:	80 91 d5 06 	lds	r24, 0x06D5
    54fc:	88 23       	and	r24, r24
    54fe:	09 f4       	brne	.+2      	; 0x5502 <STEPPER_process_run_mode+0x128>
    5500:	5c c0       	rjmp	.+184    	; 0x55ba <STEPPER_process_run_mode+0x1e0>
    5502:	60 91 c3 06 	lds	r22, 0x06C3
    5506:	81 e0       	ldi	r24, 0x01	; 1
    5508:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <STEPPER_stop>
    550c:	e0 91 d6 06 	lds	r30, 0x06D6
    5510:	f0 91 d7 06 	lds	r31, 0x06D7
    5514:	30 97       	sbiw	r30, 0x00	; 0
    5516:	09 f4       	brne	.+2      	; 0x551a <STEPPER_process_run_mode+0x140>
    5518:	50 c0       	rjmp	.+160    	; 0x55ba <STEPPER_process_run_mode+0x1e0>
    551a:	81 e0       	ldi	r24, 0x01	; 1
    551c:	81 83       	std	Z+1, r24	; 0x01
    551e:	10 92 d5 06 	sts	0x06D5, r1
    5522:	4b c0       	rjmp	.+150    	; 0x55ba <STEPPER_process_run_mode+0x1e0>
    5524:	80 91 a3 06 	lds	r24, 0x06A3
    5528:	81 30       	cpi	r24, 0x01	; 1
    552a:	41 f4       	brne	.+16     	; 0x553c <STEPPER_process_run_mode+0x162>
    552c:	80 91 b6 06 	lds	r24, 0x06B6
    5530:	90 91 b7 06 	lds	r25, 0x06B7
    5534:	01 97       	sbiw	r24, 0x01	; 1
    5536:	11 f4       	brne	.+4      	; 0x553c <STEPPER_process_run_mode+0x162>
    5538:	01 e0       	ldi	r16, 0x01	; 1
    553a:	02 c0       	rjmp	.+4      	; 0x5540 <STEPPER_process_run_mode+0x166>
    553c:	00 23       	and	r16, r16
    553e:	e9 f1       	breq	.+122    	; 0x55ba <STEPPER_process_run_mode+0x1e0>
    5540:	e0 91 c8 06 	lds	r30, 0x06C8
    5544:	f0 e0       	ldi	r31, 0x00	; 0
    5546:	ed 5c       	subi	r30, 0xCD	; 205
    5548:	fc 4f       	sbci	r31, 0xFC	; 252
    554a:	90 91 e4 03 	lds	r25, 0x03E4
    554e:	9f 71       	andi	r25, 0x1F	; 31
    5550:	80 81       	ld	r24, Z
    5552:	89 2b       	or	r24, r25
    5554:	80 93 e4 03 	sts	0x03E4, r24
    5558:	80 91 c6 06 	lds	r24, 0x06C6
    555c:	88 23       	and	r24, r24
    555e:	21 f4       	brne	.+8      	; 0x5568 <STEPPER_process_run_mode+0x18e>
    5560:	80 91 c8 06 	lds	r24, 0x06C8
    5564:	8f 5f       	subi	r24, 0xFF	; 255
    5566:	03 c0       	rjmp	.+6      	; 0x556e <STEPPER_process_run_mode+0x194>
    5568:	80 91 c8 06 	lds	r24, 0x06C8
    556c:	81 50       	subi	r24, 0x01	; 1
    556e:	80 93 c8 06 	sts	0x06C8, r24
    5572:	80 91 c8 06 	lds	r24, 0x06C8
    5576:	83 70       	andi	r24, 0x03	; 3
    5578:	80 93 c8 06 	sts	0x06C8, r24
    557c:	81 e0       	ldi	r24, 0x01	; 1
    557e:	80 93 ca 06 	sts	0x06CA, r24
    5582:	80 91 a3 06 	lds	r24, 0x06A3
    5586:	81 30       	cpi	r24, 0x01	; 1
    5588:	c1 f4       	brne	.+48     	; 0x55ba <STEPPER_process_run_mode+0x1e0>
    558a:	0e 94 f0 2a 	call	0x55e0	; 0x55e0 <STEPPER_process_step_mode>
    558e:	15 c0       	rjmp	.+42     	; 0x55ba <STEPPER_process_run_mode+0x1e0>
    5590:	90 91 e4 03 	lds	r25, 0x03E4
    5594:	9f 71       	andi	r25, 0x1F	; 31
    5596:	90 93 e4 03 	sts	0x03E4, r25
    559a:	e0 91 c8 06 	lds	r30, 0x06C8
    559e:	f0 e0       	ldi	r31, 0x00	; 0
    55a0:	ed 5c       	subi	r30, 0xCD	; 205
    55a2:	fc 4f       	sbci	r31, 0xFC	; 252
    55a4:	80 81       	ld	r24, Z
    55a6:	89 2b       	or	r24, r25
    55a8:	80 93 e4 03 	sts	0x03E4, r24
    55ac:	82 e0       	ldi	r24, 0x02	; 2
    55ae:	80 93 ca 06 	sts	0x06CA, r24
    55b2:	10 92 ab 06 	sts	0x06AB, r1
    55b6:	10 92 aa 06 	sts	0x06AA, r1
    55ba:	80 91 cb 06 	lds	r24, 0x06CB
    55be:	88 23       	and	r24, r24
    55c0:	31 f4       	brne	.+12     	; 0x55ce <STEPPER_process_run_mode+0x1f4>
    55c2:	84 ee       	ldi	r24, 0xE4	; 228
    55c4:	93 e0       	ldi	r25, 0x03	; 3
    55c6:	61 2f       	mov	r22, r17
    55c8:	40 2f       	mov	r20, r16
    55ca:	0e 94 b2 2b 	call	0x5764	; 0x5764 <STEPPER_process_pwm>
    55ce:	88 b1       	in	r24, 0x08	; 8
    55d0:	83 70       	andi	r24, 0x03	; 3
    55d2:	90 91 e4 03 	lds	r25, 0x03E4
    55d6:	89 2b       	or	r24, r25
    55d8:	88 b9       	out	0x08, r24	; 8
    55da:	1f 91       	pop	r17
    55dc:	0f 91       	pop	r16
    55de:	08 95       	ret

000055e0 <STEPPER_process_step_mode>:
    55e0:	88 23       	and	r24, r24
    55e2:	21 f0       	breq	.+8      	; 0x55ec <STEPPER_process_step_mode+0xc>
    55e4:	81 30       	cpi	r24, 0x01	; 1
    55e6:	09 f0       	breq	.+2      	; 0x55ea <STEPPER_process_step_mode+0xa>
    55e8:	4e c0       	rjmp	.+156    	; 0x5686 <STEPPER_process_step_mode+0xa6>
    55ea:	27 c0       	rjmp	.+78     	; 0x563a <STEPPER_process_step_mode+0x5a>
    55ec:	80 91 b4 06 	lds	r24, 0x06B4
    55f0:	90 91 b5 06 	lds	r25, 0x06B5
    55f4:	89 2b       	or	r24, r25
    55f6:	49 f0       	breq	.+18     	; 0x560a <STEPPER_process_step_mode+0x2a>
    55f8:	80 91 b4 06 	lds	r24, 0x06B4
    55fc:	90 91 b5 06 	lds	r25, 0x06B5
    5600:	01 97       	sbiw	r24, 0x01	; 1
    5602:	90 93 b5 06 	sts	0x06B5, r25
    5606:	80 93 b4 06 	sts	0x06B4, r24
    560a:	80 91 d4 06 	lds	r24, 0x06D4
    560e:	88 23       	and	r24, r24
    5610:	d1 f5       	brne	.+116    	; 0x5686 <STEPPER_process_step_mode+0xa6>
    5612:	20 91 b4 06 	lds	r18, 0x06B4
    5616:	30 91 b5 06 	lds	r19, 0x06B5
    561a:	80 91 b8 06 	lds	r24, 0x06B8
    561e:	90 91 b9 06 	lds	r25, 0x06B9
    5622:	28 17       	cp	r18, r24
    5624:	39 07       	cpc	r19, r25
    5626:	79 f5       	brne	.+94     	; 0x5686 <STEPPER_process_step_mode+0xa6>
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	60 e0       	ldi	r22, 0x00	; 0
    562c:	70 e0       	ldi	r23, 0x00	; 0
    562e:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <STEPPER_set_speed>
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	80 93 d4 06 	sts	0x06D4, r24
    5638:	08 95       	ret
    563a:	80 91 b6 06 	lds	r24, 0x06B6
    563e:	90 91 b7 06 	lds	r25, 0x06B7
    5642:	89 2b       	or	r24, r25
    5644:	49 f0       	breq	.+18     	; 0x5658 <STEPPER_process_step_mode+0x78>
    5646:	80 91 b6 06 	lds	r24, 0x06B6
    564a:	90 91 b7 06 	lds	r25, 0x06B7
    564e:	01 97       	sbiw	r24, 0x01	; 1
    5650:	90 93 b7 06 	sts	0x06B7, r25
    5654:	80 93 b6 06 	sts	0x06B6, r24
    5658:	80 91 d5 06 	lds	r24, 0x06D5
    565c:	88 23       	and	r24, r24
    565e:	99 f4       	brne	.+38     	; 0x5686 <STEPPER_process_step_mode+0xa6>
    5660:	20 91 b6 06 	lds	r18, 0x06B6
    5664:	30 91 b7 06 	lds	r19, 0x06B7
    5668:	80 91 ba 06 	lds	r24, 0x06BA
    566c:	90 91 bb 06 	lds	r25, 0x06BB
    5670:	28 17       	cp	r18, r24
    5672:	39 07       	cpc	r19, r25
    5674:	41 f4       	brne	.+16     	; 0x5686 <STEPPER_process_step_mode+0xa6>
    5676:	81 e0       	ldi	r24, 0x01	; 1
    5678:	60 e0       	ldi	r22, 0x00	; 0
    567a:	70 e0       	ldi	r23, 0x00	; 0
    567c:	0e 94 ec 1d 	call	0x3bd8	; 0x3bd8 <STEPPER_set_speed>
    5680:	81 e0       	ldi	r24, 0x01	; 1
    5682:	80 93 d5 06 	sts	0x06D5, r24
    5686:	08 95       	ret

00005688 <TMRSRVC_process>:
    5688:	ff 92       	push	r15
    568a:	0f 93       	push	r16
    568c:	1f 93       	push	r17
    568e:	cf 93       	push	r28
    5690:	df 93       	push	r29
    5692:	80 91 12 07 	lds	r24, 0x0712
    5696:	88 23       	and	r24, r24
    5698:	09 f4       	brne	.+2      	; 0x569c <TMRSRVC_process+0x14>
    569a:	59 c0       	rjmp	.+178    	; 0x574e <TMRSRVC_process+0xc6>
    569c:	00 91 13 07 	lds	r16, 0x0713
    56a0:	10 91 14 07 	lds	r17, 0x0714
    56a4:	f8 01       	movw	r30, r16
    56a6:	c0 81       	ld	r28, Z
    56a8:	d1 81       	ldd	r29, Z+1	; 0x01
    56aa:	8c 81       	ldd	r24, Y+4	; 0x04
    56ac:	9d 81       	ldd	r25, Y+5	; 0x05
    56ae:	01 97       	sbiw	r24, 0x01	; 1
    56b0:	9d 83       	std	Y+5, r25	; 0x05
    56b2:	8c 83       	std	Y+4, r24	; 0x04
    56b4:	18 16       	cp	r1, r24
    56b6:	19 06       	cpc	r1, r25
    56b8:	0c f4       	brge	.+2      	; 0x56bc <TMRSRVC_process+0x34>
    56ba:	49 c0       	rjmp	.+146    	; 0x574e <TMRSRVC_process+0xc6>
    56bc:	89 81       	ldd	r24, Y+1	; 0x01
    56be:	80 ff       	sbrs	r24, 0
    56c0:	05 c0       	rjmp	.+10     	; 0x56cc <TMRSRVC_process+0x44>
    56c2:	8e 81       	ldd	r24, Y+6	; 0x06
    56c4:	88 23       	and	r24, r24
    56c6:	11 f4       	brne	.+4      	; 0x56cc <TMRSRVC_process+0x44>
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	8e 83       	std	Y+6, r24	; 0x06
    56cc:	89 81       	ldd	r24, Y+1	; 0x01
    56ce:	81 ff       	sbrs	r24, 1
    56d0:	03 c0       	rjmp	.+6      	; 0x56d8 <TMRSRVC_process+0x50>
    56d2:	ef 81       	ldd	r30, Y+7	; 0x07
    56d4:	f8 85       	ldd	r31, Y+8	; 0x08
    56d6:	09 95       	icall
    56d8:	80 91 12 07 	lds	r24, 0x0712
    56dc:	82 30       	cpi	r24, 0x02	; 2
    56de:	a8 f0       	brcs	.+42     	; 0x570a <TMRSRVC_process+0x82>
    56e0:	f8 01       	movw	r30, r16
    56e2:	82 81       	ldd	r24, Z+2	; 0x02
    56e4:	93 81       	ldd	r25, Z+3	; 0x03
    56e6:	90 93 14 07 	sts	0x0714, r25
    56ea:	80 93 13 07 	sts	0x0713, r24
    56ee:	13 82       	std	Z+3, r1	; 0x03
    56f0:	12 82       	std	Z+2, r1	; 0x02
    56f2:	e0 91 00 00 	lds	r30, 0x0000
    56f6:	f0 91 01 00 	lds	r31, 0x0001
    56fa:	84 81       	ldd	r24, Z+4	; 0x04
    56fc:	95 81       	ldd	r25, Z+5	; 0x05
    56fe:	18 16       	cp	r1, r24
    5700:	19 06       	cpc	r1, r25
    5702:	3c f0       	brlt	.+14     	; 0x5712 <TMRSRVC_process+0x8a>
    5704:	ff 24       	eor	r15, r15
    5706:	f3 94       	inc	r15
    5708:	05 c0       	rjmp	.+10     	; 0x5714 <TMRSRVC_process+0x8c>
    570a:	10 92 14 07 	sts	0x0714, r1
    570e:	10 92 13 07 	sts	0x0713, r1
    5712:	ff 24       	eor	r15, r15
    5714:	80 91 12 07 	lds	r24, 0x0712
    5718:	81 50       	subi	r24, 0x01	; 1
    571a:	80 93 12 07 	sts	0x0712, r24
    571e:	80 91 12 07 	lds	r24, 0x0712
    5722:	88 23       	and	r24, r24
    5724:	11 f4       	brne	.+4      	; 0x572a <TMRSRVC_process+0xa2>
    5726:	0e 94 af 2b 	call	0x575e	; 0x575e <TMRSRVC_stop>
    572a:	89 81       	ldd	r24, Y+1	; 0x01
    572c:	82 ff       	sbrs	r24, 2
    572e:	08 c0       	rjmp	.+16     	; 0x5740 <TMRSRVC_process+0xb8>
    5730:	8a 81       	ldd	r24, Y+2	; 0x02
    5732:	9b 81       	ldd	r25, Y+3	; 0x03
    5734:	9d 83       	std	Y+5, r25	; 0x05
    5736:	8c 83       	std	Y+4, r24	; 0x04
    5738:	c8 01       	movw	r24, r16
    573a:	0e 94 3b 27 	call	0x4e76	; 0x4e76 <TMRSRVC_insert>
    573e:	08 c0       	rjmp	.+16     	; 0x5750 <TMRSRVC_process+0xc8>
    5740:	c8 01       	movw	r24, r16
    5742:	0e 94 91 34 	call	0x6922	; 0x6922 <free>
    5746:	89 81       	ldd	r24, Y+1	; 0x01
    5748:	8f 7e       	andi	r24, 0xEF	; 239
    574a:	89 83       	std	Y+1, r24	; 0x01
    574c:	01 c0       	rjmp	.+2      	; 0x5750 <TMRSRVC_process+0xc8>
    574e:	ff 24       	eor	r15, r15
    5750:	8f 2d       	mov	r24, r15
    5752:	df 91       	pop	r29
    5754:	cf 91       	pop	r28
    5756:	1f 91       	pop	r17
    5758:	0f 91       	pop	r16
    575a:	ff 90       	pop	r15
    575c:	08 95       	ret

0000575e <TMRSRVC_stop>:
    575e:	10 92 e3 03 	sts	0x03E3, r1
    5762:	08 95       	ret

00005764 <STEPPER_process_pwm>:
    5764:	fc 01       	movw	r30, r24
    5766:	80 91 c9 06 	lds	r24, 0x06C9
    576a:	82 30       	cpi	r24, 0x02	; 2
    576c:	69 f4       	brne	.+26     	; 0x5788 <STEPPER_process_pwm+0x24>
    576e:	80 91 e8 03 	lds	r24, 0x03E8
    5772:	91 e0       	ldi	r25, 0x01	; 1
    5774:	89 27       	eor	r24, r25
    5776:	80 93 e8 03 	sts	0x03E8, r24
    577a:	88 23       	and	r24, r24
    577c:	09 f0       	breq	.+2      	; 0x5780 <STEPPER_process_pwm+0x1c>
    577e:	3e c0       	rjmp	.+124    	; 0x57fc <STEPPER_process_pwm+0x98>
    5780:	80 81       	ld	r24, Z
    5782:	83 7e       	andi	r24, 0xE3	; 227
    5784:	80 83       	st	Z, r24
    5786:	3a c0       	rjmp	.+116    	; 0x57fc <STEPPER_process_pwm+0x98>
    5788:	80 91 a8 06 	lds	r24, 0x06A8
    578c:	90 91 a9 06 	lds	r25, 0x06A9
    5790:	c3 97       	sbiw	r24, 0x33	; 51
    5792:	a4 f5       	brge	.+104    	; 0x57fc <STEPPER_process_pwm+0x98>
    5794:	66 23       	and	r22, r22
    5796:	d1 f0       	breq	.+52     	; 0x57cc <STEPPER_process_pwm+0x68>
    5798:	20 91 a8 06 	lds	r18, 0x06A8
    579c:	30 91 a9 06 	lds	r19, 0x06A9
    57a0:	80 e6       	ldi	r24, 0x60	; 96
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	bc 01       	movw	r22, r24
    57a6:	26 9f       	mul	r18, r22
    57a8:	c0 01       	movw	r24, r0
    57aa:	27 9f       	mul	r18, r23
    57ac:	90 0d       	add	r25, r0
    57ae:	36 9f       	mul	r19, r22
    57b0:	90 0d       	add	r25, r0
    57b2:	11 24       	eor	r1, r1
    57b4:	88 0f       	add	r24, r24
    57b6:	89 2f       	mov	r24, r25
    57b8:	88 1f       	adc	r24, r24
    57ba:	99 0b       	sbc	r25, r25
    57bc:	90 93 bd 06 	sts	0x06BD, r25
    57c0:	80 93 bc 06 	sts	0x06BC, r24
    57c4:	81 e0       	ldi	r24, 0x01	; 1
    57c6:	80 93 e6 03 	sts	0x03E6, r24
    57ca:	18 c0       	rjmp	.+48     	; 0x57fc <STEPPER_process_pwm+0x98>
    57cc:	80 91 e6 03 	lds	r24, 0x03E6
    57d0:	88 23       	and	r24, r24
    57d2:	a1 f0       	breq	.+40     	; 0x57fc <STEPPER_process_pwm+0x98>
    57d4:	80 91 bc 06 	lds	r24, 0x06BC
    57d8:	90 91 bd 06 	lds	r25, 0x06BD
    57dc:	01 97       	sbiw	r24, 0x01	; 1
    57de:	90 93 bd 06 	sts	0x06BD, r25
    57e2:	80 93 bc 06 	sts	0x06BC, r24
    57e6:	80 91 bc 06 	lds	r24, 0x06BC
    57ea:	90 91 bd 06 	lds	r25, 0x06BD
    57ee:	89 2b       	or	r24, r25
    57f0:	29 f4       	brne	.+10     	; 0x57fc <STEPPER_process_pwm+0x98>
    57f2:	80 81       	ld	r24, Z
    57f4:	83 7e       	andi	r24, 0xE3	; 227
    57f6:	80 83       	st	Z, r24
    57f8:	10 92 e6 03 	sts	0x03E6, r1
    57fc:	80 91 ca 06 	lds	r24, 0x06CA
    5800:	82 30       	cpi	r24, 0x02	; 2
    5802:	69 f4       	brne	.+26     	; 0x581e <STEPPER_process_pwm+0xba>
    5804:	80 91 e7 03 	lds	r24, 0x03E7
    5808:	91 e0       	ldi	r25, 0x01	; 1
    580a:	89 27       	eor	r24, r25
    580c:	80 93 e7 03 	sts	0x03E7, r24
    5810:	88 23       	and	r24, r24
    5812:	09 f0       	breq	.+2      	; 0x5816 <STEPPER_process_pwm+0xb2>
    5814:	3e c0       	rjmp	.+124    	; 0x5892 <STEPPER_process_pwm+0x12e>
    5816:	80 81       	ld	r24, Z
    5818:	8f 71       	andi	r24, 0x1F	; 31
    581a:	80 83       	st	Z, r24
    581c:	08 95       	ret
    581e:	80 91 aa 06 	lds	r24, 0x06AA
    5822:	90 91 ab 06 	lds	r25, 0x06AB
    5826:	c3 97       	sbiw	r24, 0x33	; 51
    5828:	a4 f5       	brge	.+104    	; 0x5892 <STEPPER_process_pwm+0x12e>
    582a:	44 23       	and	r20, r20
    582c:	d1 f0       	breq	.+52     	; 0x5862 <STEPPER_process_pwm+0xfe>
    582e:	20 91 aa 06 	lds	r18, 0x06AA
    5832:	30 91 ab 06 	lds	r19, 0x06AB
    5836:	80 e6       	ldi	r24, 0x60	; 96
    5838:	90 e0       	ldi	r25, 0x00	; 0
    583a:	ac 01       	movw	r20, r24
    583c:	24 9f       	mul	r18, r20
    583e:	c0 01       	movw	r24, r0
    5840:	25 9f       	mul	r18, r21
    5842:	90 0d       	add	r25, r0
    5844:	34 9f       	mul	r19, r20
    5846:	90 0d       	add	r25, r0
    5848:	11 24       	eor	r1, r1
    584a:	88 0f       	add	r24, r24
    584c:	89 2f       	mov	r24, r25
    584e:	88 1f       	adc	r24, r24
    5850:	99 0b       	sbc	r25, r25
    5852:	90 93 bf 06 	sts	0x06BF, r25
    5856:	80 93 be 06 	sts	0x06BE, r24
    585a:	81 e0       	ldi	r24, 0x01	; 1
    585c:	80 93 e5 03 	sts	0x03E5, r24
    5860:	08 95       	ret
    5862:	80 91 e5 03 	lds	r24, 0x03E5
    5866:	88 23       	and	r24, r24
    5868:	a1 f0       	breq	.+40     	; 0x5892 <STEPPER_process_pwm+0x12e>
    586a:	80 91 be 06 	lds	r24, 0x06BE
    586e:	90 91 bf 06 	lds	r25, 0x06BF
    5872:	01 97       	sbiw	r24, 0x01	; 1
    5874:	90 93 bf 06 	sts	0x06BF, r25
    5878:	80 93 be 06 	sts	0x06BE, r24
    587c:	80 91 be 06 	lds	r24, 0x06BE
    5880:	90 91 bf 06 	lds	r25, 0x06BF
    5884:	89 2b       	or	r24, r25
    5886:	29 f4       	brne	.+10     	; 0x5892 <STEPPER_process_pwm+0x12e>
    5888:	80 81       	ld	r24, Z
    588a:	8f 71       	andi	r24, 0x1F	; 31
    588c:	80 83       	st	Z, r24
    588e:	10 92 e5 03 	sts	0x03E5, r1
    5892:	08 95       	ret

00005894 <__subsf3>:
    5894:	50 58       	subi	r21, 0x80	; 128

00005896 <__addsf3>:
    5896:	bb 27       	eor	r27, r27
    5898:	aa 27       	eor	r26, r26
    589a:	0e d0       	rcall	.+28     	; 0x58b8 <__addsf3x>
    589c:	75 c1       	rjmp	.+746    	; 0x5b88 <__fp_round>
    589e:	66 d1       	rcall	.+716    	; 0x5b6c <__fp_pscA>
    58a0:	30 f0       	brcs	.+12     	; 0x58ae <__addsf3+0x18>
    58a2:	6b d1       	rcall	.+726    	; 0x5b7a <__fp_pscB>
    58a4:	20 f0       	brcs	.+8      	; 0x58ae <__addsf3+0x18>
    58a6:	31 f4       	brne	.+12     	; 0x58b4 <__addsf3+0x1e>
    58a8:	9f 3f       	cpi	r25, 0xFF	; 255
    58aa:	11 f4       	brne	.+4      	; 0x58b0 <__addsf3+0x1a>
    58ac:	1e f4       	brtc	.+6      	; 0x58b4 <__addsf3+0x1e>
    58ae:	5b c1       	rjmp	.+694    	; 0x5b66 <__fp_nan>
    58b0:	0e f4       	brtc	.+2      	; 0x58b4 <__addsf3+0x1e>
    58b2:	e0 95       	com	r30
    58b4:	e7 fb       	bst	r30, 7
    58b6:	51 c1       	rjmp	.+674    	; 0x5b5a <__fp_inf>

000058b8 <__addsf3x>:
    58b8:	e9 2f       	mov	r30, r25
    58ba:	77 d1       	rcall	.+750    	; 0x5baa <__fp_split3>
    58bc:	80 f3       	brcs	.-32     	; 0x589e <__addsf3+0x8>
    58be:	ba 17       	cp	r27, r26
    58c0:	62 07       	cpc	r22, r18
    58c2:	73 07       	cpc	r23, r19
    58c4:	84 07       	cpc	r24, r20
    58c6:	95 07       	cpc	r25, r21
    58c8:	18 f0       	brcs	.+6      	; 0x58d0 <__addsf3x+0x18>
    58ca:	71 f4       	brne	.+28     	; 0x58e8 <__addsf3x+0x30>
    58cc:	9e f5       	brtc	.+102    	; 0x5934 <__addsf3x+0x7c>
    58ce:	8f c1       	rjmp	.+798    	; 0x5bee <__fp_zero>
    58d0:	0e f4       	brtc	.+2      	; 0x58d4 <__addsf3x+0x1c>
    58d2:	e0 95       	com	r30
    58d4:	0b 2e       	mov	r0, r27
    58d6:	ba 2f       	mov	r27, r26
    58d8:	a0 2d       	mov	r26, r0
    58da:	0b 01       	movw	r0, r22
    58dc:	b9 01       	movw	r22, r18
    58de:	90 01       	movw	r18, r0
    58e0:	0c 01       	movw	r0, r24
    58e2:	ca 01       	movw	r24, r20
    58e4:	a0 01       	movw	r20, r0
    58e6:	11 24       	eor	r1, r1
    58e8:	ff 27       	eor	r31, r31
    58ea:	59 1b       	sub	r21, r25
    58ec:	99 f0       	breq	.+38     	; 0x5914 <__addsf3x+0x5c>
    58ee:	59 3f       	cpi	r21, 0xF9	; 249
    58f0:	50 f4       	brcc	.+20     	; 0x5906 <__addsf3x+0x4e>
    58f2:	50 3e       	cpi	r21, 0xE0	; 224
    58f4:	68 f1       	brcs	.+90     	; 0x5950 <__addsf3x+0x98>
    58f6:	1a 16       	cp	r1, r26
    58f8:	f0 40       	sbci	r31, 0x00	; 0
    58fa:	a2 2f       	mov	r26, r18
    58fc:	23 2f       	mov	r18, r19
    58fe:	34 2f       	mov	r19, r20
    5900:	44 27       	eor	r20, r20
    5902:	58 5f       	subi	r21, 0xF8	; 248
    5904:	f3 cf       	rjmp	.-26     	; 0x58ec <__addsf3x+0x34>
    5906:	46 95       	lsr	r20
    5908:	37 95       	ror	r19
    590a:	27 95       	ror	r18
    590c:	a7 95       	ror	r26
    590e:	f0 40       	sbci	r31, 0x00	; 0
    5910:	53 95       	inc	r21
    5912:	c9 f7       	brne	.-14     	; 0x5906 <__addsf3x+0x4e>
    5914:	7e f4       	brtc	.+30     	; 0x5934 <__addsf3x+0x7c>
    5916:	1f 16       	cp	r1, r31
    5918:	ba 0b       	sbc	r27, r26
    591a:	62 0b       	sbc	r22, r18
    591c:	73 0b       	sbc	r23, r19
    591e:	84 0b       	sbc	r24, r20
    5920:	ba f0       	brmi	.+46     	; 0x5950 <__addsf3x+0x98>
    5922:	91 50       	subi	r25, 0x01	; 1
    5924:	a1 f0       	breq	.+40     	; 0x594e <__addsf3x+0x96>
    5926:	ff 0f       	add	r31, r31
    5928:	bb 1f       	adc	r27, r27
    592a:	66 1f       	adc	r22, r22
    592c:	77 1f       	adc	r23, r23
    592e:	88 1f       	adc	r24, r24
    5930:	c2 f7       	brpl	.-16     	; 0x5922 <__addsf3x+0x6a>
    5932:	0e c0       	rjmp	.+28     	; 0x5950 <__addsf3x+0x98>
    5934:	ba 0f       	add	r27, r26
    5936:	62 1f       	adc	r22, r18
    5938:	73 1f       	adc	r23, r19
    593a:	84 1f       	adc	r24, r20
    593c:	48 f4       	brcc	.+18     	; 0x5950 <__addsf3x+0x98>
    593e:	87 95       	ror	r24
    5940:	77 95       	ror	r23
    5942:	67 95       	ror	r22
    5944:	b7 95       	ror	r27
    5946:	f7 95       	ror	r31
    5948:	9e 3f       	cpi	r25, 0xFE	; 254
    594a:	08 f0       	brcs	.+2      	; 0x594e <__addsf3x+0x96>
    594c:	b3 cf       	rjmp	.-154    	; 0x58b4 <__addsf3+0x1e>
    594e:	93 95       	inc	r25
    5950:	88 0f       	add	r24, r24
    5952:	08 f0       	brcs	.+2      	; 0x5956 <__addsf3x+0x9e>
    5954:	99 27       	eor	r25, r25
    5956:	ee 0f       	add	r30, r30
    5958:	97 95       	ror	r25
    595a:	87 95       	ror	r24
    595c:	08 95       	ret

0000595e <__cmpsf2>:
    595e:	d9 d0       	rcall	.+434    	; 0x5b12 <__fp_cmp>
    5960:	08 f4       	brcc	.+2      	; 0x5964 <__cmpsf2+0x6>
    5962:	81 e0       	ldi	r24, 0x01	; 1
    5964:	08 95       	ret

00005966 <__divsf3>:
    5966:	0c d0       	rcall	.+24     	; 0x5980 <__divsf3x>
    5968:	0f c1       	rjmp	.+542    	; 0x5b88 <__fp_round>
    596a:	07 d1       	rcall	.+526    	; 0x5b7a <__fp_pscB>
    596c:	40 f0       	brcs	.+16     	; 0x597e <__divsf3+0x18>
    596e:	fe d0       	rcall	.+508    	; 0x5b6c <__fp_pscA>
    5970:	30 f0       	brcs	.+12     	; 0x597e <__divsf3+0x18>
    5972:	21 f4       	brne	.+8      	; 0x597c <__divsf3+0x16>
    5974:	5f 3f       	cpi	r21, 0xFF	; 255
    5976:	19 f0       	breq	.+6      	; 0x597e <__divsf3+0x18>
    5978:	f0 c0       	rjmp	.+480    	; 0x5b5a <__fp_inf>
    597a:	51 11       	cpse	r21, r1
    597c:	39 c1       	rjmp	.+626    	; 0x5bf0 <__fp_szero>
    597e:	f3 c0       	rjmp	.+486    	; 0x5b66 <__fp_nan>

00005980 <__divsf3x>:
    5980:	14 d1       	rcall	.+552    	; 0x5baa <__fp_split3>
    5982:	98 f3       	brcs	.-26     	; 0x596a <__divsf3+0x4>

00005984 <__divsf3_pse>:
    5984:	99 23       	and	r25, r25
    5986:	c9 f3       	breq	.-14     	; 0x597a <__divsf3+0x14>
    5988:	55 23       	and	r21, r21
    598a:	b1 f3       	breq	.-20     	; 0x5978 <__divsf3+0x12>
    598c:	95 1b       	sub	r25, r21
    598e:	55 0b       	sbc	r21, r21
    5990:	bb 27       	eor	r27, r27
    5992:	aa 27       	eor	r26, r26
    5994:	62 17       	cp	r22, r18
    5996:	73 07       	cpc	r23, r19
    5998:	84 07       	cpc	r24, r20
    599a:	38 f0       	brcs	.+14     	; 0x59aa <__divsf3_pse+0x26>
    599c:	9f 5f       	subi	r25, 0xFF	; 255
    599e:	5f 4f       	sbci	r21, 0xFF	; 255
    59a0:	22 0f       	add	r18, r18
    59a2:	33 1f       	adc	r19, r19
    59a4:	44 1f       	adc	r20, r20
    59a6:	aa 1f       	adc	r26, r26
    59a8:	a9 f3       	breq	.-22     	; 0x5994 <__divsf3_pse+0x10>
    59aa:	33 d0       	rcall	.+102    	; 0x5a12 <__divsf3_pse+0x8e>
    59ac:	0e 2e       	mov	r0, r30
    59ae:	3a f0       	brmi	.+14     	; 0x59be <__divsf3_pse+0x3a>
    59b0:	e0 e8       	ldi	r30, 0x80	; 128
    59b2:	30 d0       	rcall	.+96     	; 0x5a14 <__divsf3_pse+0x90>
    59b4:	91 50       	subi	r25, 0x01	; 1
    59b6:	50 40       	sbci	r21, 0x00	; 0
    59b8:	e6 95       	lsr	r30
    59ba:	00 1c       	adc	r0, r0
    59bc:	ca f7       	brpl	.-14     	; 0x59b0 <__divsf3_pse+0x2c>
    59be:	29 d0       	rcall	.+82     	; 0x5a12 <__divsf3_pse+0x8e>
    59c0:	fe 2f       	mov	r31, r30
    59c2:	27 d0       	rcall	.+78     	; 0x5a12 <__divsf3_pse+0x8e>
    59c4:	66 0f       	add	r22, r22
    59c6:	77 1f       	adc	r23, r23
    59c8:	88 1f       	adc	r24, r24
    59ca:	bb 1f       	adc	r27, r27
    59cc:	26 17       	cp	r18, r22
    59ce:	37 07       	cpc	r19, r23
    59d0:	48 07       	cpc	r20, r24
    59d2:	ab 07       	cpc	r26, r27
    59d4:	b0 e8       	ldi	r27, 0x80	; 128
    59d6:	09 f0       	breq	.+2      	; 0x59da <__divsf3_pse+0x56>
    59d8:	bb 0b       	sbc	r27, r27
    59da:	80 2d       	mov	r24, r0
    59dc:	bf 01       	movw	r22, r30
    59de:	ff 27       	eor	r31, r31
    59e0:	93 58       	subi	r25, 0x83	; 131
    59e2:	5f 4f       	sbci	r21, 0xFF	; 255
    59e4:	2a f0       	brmi	.+10     	; 0x59f0 <__divsf3_pse+0x6c>
    59e6:	9e 3f       	cpi	r25, 0xFE	; 254
    59e8:	51 05       	cpc	r21, r1
    59ea:	68 f0       	brcs	.+26     	; 0x5a06 <__divsf3_pse+0x82>
    59ec:	b6 c0       	rjmp	.+364    	; 0x5b5a <__fp_inf>
    59ee:	00 c1       	rjmp	.+512    	; 0x5bf0 <__fp_szero>
    59f0:	5f 3f       	cpi	r21, 0xFF	; 255
    59f2:	ec f3       	brlt	.-6      	; 0x59ee <__divsf3_pse+0x6a>
    59f4:	98 3e       	cpi	r25, 0xE8	; 232
    59f6:	dc f3       	brlt	.-10     	; 0x59ee <__divsf3_pse+0x6a>
    59f8:	86 95       	lsr	r24
    59fa:	77 95       	ror	r23
    59fc:	67 95       	ror	r22
    59fe:	b7 95       	ror	r27
    5a00:	f7 95       	ror	r31
    5a02:	9f 5f       	subi	r25, 0xFF	; 255
    5a04:	c9 f7       	brne	.-14     	; 0x59f8 <__divsf3_pse+0x74>
    5a06:	88 0f       	add	r24, r24
    5a08:	91 1d       	adc	r25, r1
    5a0a:	96 95       	lsr	r25
    5a0c:	87 95       	ror	r24
    5a0e:	97 f9       	bld	r25, 7
    5a10:	08 95       	ret
    5a12:	e1 e0       	ldi	r30, 0x01	; 1
    5a14:	66 0f       	add	r22, r22
    5a16:	77 1f       	adc	r23, r23
    5a18:	88 1f       	adc	r24, r24
    5a1a:	bb 1f       	adc	r27, r27
    5a1c:	62 17       	cp	r22, r18
    5a1e:	73 07       	cpc	r23, r19
    5a20:	84 07       	cpc	r24, r20
    5a22:	ba 07       	cpc	r27, r26
    5a24:	20 f0       	brcs	.+8      	; 0x5a2e <__divsf3_pse+0xaa>
    5a26:	62 1b       	sub	r22, r18
    5a28:	73 0b       	sbc	r23, r19
    5a2a:	84 0b       	sbc	r24, r20
    5a2c:	ba 0b       	sbc	r27, r26
    5a2e:	ee 1f       	adc	r30, r30
    5a30:	88 f7       	brcc	.-30     	; 0x5a14 <__divsf3_pse+0x90>
    5a32:	e0 95       	com	r30
    5a34:	08 95       	ret

00005a36 <__fixsfsi>:
    5a36:	04 d0       	rcall	.+8      	; 0x5a40 <__fixunssfsi>
    5a38:	68 94       	set
    5a3a:	b1 11       	cpse	r27, r1
    5a3c:	d9 c0       	rjmp	.+434    	; 0x5bf0 <__fp_szero>
    5a3e:	08 95       	ret

00005a40 <__fixunssfsi>:
    5a40:	bc d0       	rcall	.+376    	; 0x5bba <__fp_splitA>
    5a42:	88 f0       	brcs	.+34     	; 0x5a66 <__fixunssfsi+0x26>
    5a44:	9f 57       	subi	r25, 0x7F	; 127
    5a46:	90 f0       	brcs	.+36     	; 0x5a6c <__fixunssfsi+0x2c>
    5a48:	b9 2f       	mov	r27, r25
    5a4a:	99 27       	eor	r25, r25
    5a4c:	b7 51       	subi	r27, 0x17	; 23
    5a4e:	a0 f0       	brcs	.+40     	; 0x5a78 <__fixunssfsi+0x38>
    5a50:	d1 f0       	breq	.+52     	; 0x5a86 <__fixunssfsi+0x46>
    5a52:	66 0f       	add	r22, r22
    5a54:	77 1f       	adc	r23, r23
    5a56:	88 1f       	adc	r24, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	1a f0       	brmi	.+6      	; 0x5a62 <__fixunssfsi+0x22>
    5a5c:	ba 95       	dec	r27
    5a5e:	c9 f7       	brne	.-14     	; 0x5a52 <__fixunssfsi+0x12>
    5a60:	12 c0       	rjmp	.+36     	; 0x5a86 <__fixunssfsi+0x46>
    5a62:	b1 30       	cpi	r27, 0x01	; 1
    5a64:	81 f0       	breq	.+32     	; 0x5a86 <__fixunssfsi+0x46>
    5a66:	c3 d0       	rcall	.+390    	; 0x5bee <__fp_zero>
    5a68:	b1 e0       	ldi	r27, 0x01	; 1
    5a6a:	08 95       	ret
    5a6c:	c0 c0       	rjmp	.+384    	; 0x5bee <__fp_zero>
    5a6e:	67 2f       	mov	r22, r23
    5a70:	78 2f       	mov	r23, r24
    5a72:	88 27       	eor	r24, r24
    5a74:	b8 5f       	subi	r27, 0xF8	; 248
    5a76:	39 f0       	breq	.+14     	; 0x5a86 <__fixunssfsi+0x46>
    5a78:	b9 3f       	cpi	r27, 0xF9	; 249
    5a7a:	cc f3       	brlt	.-14     	; 0x5a6e <__fixunssfsi+0x2e>
    5a7c:	86 95       	lsr	r24
    5a7e:	77 95       	ror	r23
    5a80:	67 95       	ror	r22
    5a82:	b3 95       	inc	r27
    5a84:	d9 f7       	brne	.-10     	; 0x5a7c <__fixunssfsi+0x3c>
    5a86:	3e f4       	brtc	.+14     	; 0x5a96 <__fixunssfsi+0x56>
    5a88:	90 95       	com	r25
    5a8a:	80 95       	com	r24
    5a8c:	70 95       	com	r23
    5a8e:	61 95       	neg	r22
    5a90:	7f 4f       	sbci	r23, 0xFF	; 255
    5a92:	8f 4f       	sbci	r24, 0xFF	; 255
    5a94:	9f 4f       	sbci	r25, 0xFF	; 255
    5a96:	08 95       	ret

00005a98 <__floatunsisf>:
    5a98:	e8 94       	clt
    5a9a:	09 c0       	rjmp	.+18     	; 0x5aae <__floatsisf+0x12>

00005a9c <__floatsisf>:
    5a9c:	97 fb       	bst	r25, 7
    5a9e:	3e f4       	brtc	.+14     	; 0x5aae <__floatsisf+0x12>
    5aa0:	90 95       	com	r25
    5aa2:	80 95       	com	r24
    5aa4:	70 95       	com	r23
    5aa6:	61 95       	neg	r22
    5aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    5aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    5aac:	9f 4f       	sbci	r25, 0xFF	; 255
    5aae:	99 23       	and	r25, r25
    5ab0:	a9 f0       	breq	.+42     	; 0x5adc <__floatsisf+0x40>
    5ab2:	f9 2f       	mov	r31, r25
    5ab4:	96 e9       	ldi	r25, 0x96	; 150
    5ab6:	bb 27       	eor	r27, r27
    5ab8:	93 95       	inc	r25
    5aba:	f6 95       	lsr	r31
    5abc:	87 95       	ror	r24
    5abe:	77 95       	ror	r23
    5ac0:	67 95       	ror	r22
    5ac2:	b7 95       	ror	r27
    5ac4:	f1 11       	cpse	r31, r1
    5ac6:	f8 cf       	rjmp	.-16     	; 0x5ab8 <__floatsisf+0x1c>
    5ac8:	fa f4       	brpl	.+62     	; 0x5b08 <__floatsisf+0x6c>
    5aca:	bb 0f       	add	r27, r27
    5acc:	11 f4       	brne	.+4      	; 0x5ad2 <__floatsisf+0x36>
    5ace:	60 ff       	sbrs	r22, 0
    5ad0:	1b c0       	rjmp	.+54     	; 0x5b08 <__floatsisf+0x6c>
    5ad2:	6f 5f       	subi	r22, 0xFF	; 255
    5ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    5ada:	16 c0       	rjmp	.+44     	; 0x5b08 <__floatsisf+0x6c>
    5adc:	88 23       	and	r24, r24
    5ade:	11 f0       	breq	.+4      	; 0x5ae4 <__floatsisf+0x48>
    5ae0:	96 e9       	ldi	r25, 0x96	; 150
    5ae2:	11 c0       	rjmp	.+34     	; 0x5b06 <__floatsisf+0x6a>
    5ae4:	77 23       	and	r23, r23
    5ae6:	21 f0       	breq	.+8      	; 0x5af0 <__floatsisf+0x54>
    5ae8:	9e e8       	ldi	r25, 0x8E	; 142
    5aea:	87 2f       	mov	r24, r23
    5aec:	76 2f       	mov	r23, r22
    5aee:	05 c0       	rjmp	.+10     	; 0x5afa <__floatsisf+0x5e>
    5af0:	66 23       	and	r22, r22
    5af2:	71 f0       	breq	.+28     	; 0x5b10 <__floatsisf+0x74>
    5af4:	96 e8       	ldi	r25, 0x86	; 134
    5af6:	86 2f       	mov	r24, r22
    5af8:	70 e0       	ldi	r23, 0x00	; 0
    5afa:	60 e0       	ldi	r22, 0x00	; 0
    5afc:	2a f0       	brmi	.+10     	; 0x5b08 <__floatsisf+0x6c>
    5afe:	9a 95       	dec	r25
    5b00:	66 0f       	add	r22, r22
    5b02:	77 1f       	adc	r23, r23
    5b04:	88 1f       	adc	r24, r24
    5b06:	da f7       	brpl	.-10     	; 0x5afe <__floatsisf+0x62>
    5b08:	88 0f       	add	r24, r24
    5b0a:	96 95       	lsr	r25
    5b0c:	87 95       	ror	r24
    5b0e:	97 f9       	bld	r25, 7
    5b10:	08 95       	ret

00005b12 <__fp_cmp>:
    5b12:	99 0f       	add	r25, r25
    5b14:	00 08       	sbc	r0, r0
    5b16:	55 0f       	add	r21, r21
    5b18:	aa 0b       	sbc	r26, r26
    5b1a:	e0 e8       	ldi	r30, 0x80	; 128
    5b1c:	fe ef       	ldi	r31, 0xFE	; 254
    5b1e:	16 16       	cp	r1, r22
    5b20:	17 06       	cpc	r1, r23
    5b22:	e8 07       	cpc	r30, r24
    5b24:	f9 07       	cpc	r31, r25
    5b26:	c0 f0       	brcs	.+48     	; 0x5b58 <__fp_cmp+0x46>
    5b28:	12 16       	cp	r1, r18
    5b2a:	13 06       	cpc	r1, r19
    5b2c:	e4 07       	cpc	r30, r20
    5b2e:	f5 07       	cpc	r31, r21
    5b30:	98 f0       	brcs	.+38     	; 0x5b58 <__fp_cmp+0x46>
    5b32:	62 1b       	sub	r22, r18
    5b34:	73 0b       	sbc	r23, r19
    5b36:	84 0b       	sbc	r24, r20
    5b38:	95 0b       	sbc	r25, r21
    5b3a:	39 f4       	brne	.+14     	; 0x5b4a <__fp_cmp+0x38>
    5b3c:	0a 26       	eor	r0, r26
    5b3e:	61 f0       	breq	.+24     	; 0x5b58 <__fp_cmp+0x46>
    5b40:	23 2b       	or	r18, r19
    5b42:	24 2b       	or	r18, r20
    5b44:	25 2b       	or	r18, r21
    5b46:	21 f4       	brne	.+8      	; 0x5b50 <__fp_cmp+0x3e>
    5b48:	08 95       	ret
    5b4a:	0a 26       	eor	r0, r26
    5b4c:	09 f4       	brne	.+2      	; 0x5b50 <__fp_cmp+0x3e>
    5b4e:	a1 40       	sbci	r26, 0x01	; 1
    5b50:	a6 95       	lsr	r26
    5b52:	8f ef       	ldi	r24, 0xFF	; 255
    5b54:	81 1d       	adc	r24, r1
    5b56:	81 1d       	adc	r24, r1
    5b58:	08 95       	ret

00005b5a <__fp_inf>:
    5b5a:	97 f9       	bld	r25, 7
    5b5c:	9f 67       	ori	r25, 0x7F	; 127
    5b5e:	80 e8       	ldi	r24, 0x80	; 128
    5b60:	70 e0       	ldi	r23, 0x00	; 0
    5b62:	60 e0       	ldi	r22, 0x00	; 0
    5b64:	08 95       	ret

00005b66 <__fp_nan>:
    5b66:	9f ef       	ldi	r25, 0xFF	; 255
    5b68:	80 ec       	ldi	r24, 0xC0	; 192
    5b6a:	08 95       	ret

00005b6c <__fp_pscA>:
    5b6c:	00 24       	eor	r0, r0
    5b6e:	0a 94       	dec	r0
    5b70:	16 16       	cp	r1, r22
    5b72:	17 06       	cpc	r1, r23
    5b74:	18 06       	cpc	r1, r24
    5b76:	09 06       	cpc	r0, r25
    5b78:	08 95       	ret

00005b7a <__fp_pscB>:
    5b7a:	00 24       	eor	r0, r0
    5b7c:	0a 94       	dec	r0
    5b7e:	12 16       	cp	r1, r18
    5b80:	13 06       	cpc	r1, r19
    5b82:	14 06       	cpc	r1, r20
    5b84:	05 06       	cpc	r0, r21
    5b86:	08 95       	ret

00005b88 <__fp_round>:
    5b88:	09 2e       	mov	r0, r25
    5b8a:	03 94       	inc	r0
    5b8c:	00 0c       	add	r0, r0
    5b8e:	11 f4       	brne	.+4      	; 0x5b94 <__fp_round+0xc>
    5b90:	88 23       	and	r24, r24
    5b92:	52 f0       	brmi	.+20     	; 0x5ba8 <__fp_round+0x20>
    5b94:	bb 0f       	add	r27, r27
    5b96:	40 f4       	brcc	.+16     	; 0x5ba8 <__fp_round+0x20>
    5b98:	bf 2b       	or	r27, r31
    5b9a:	11 f4       	brne	.+4      	; 0x5ba0 <__fp_round+0x18>
    5b9c:	60 ff       	sbrs	r22, 0
    5b9e:	04 c0       	rjmp	.+8      	; 0x5ba8 <__fp_round+0x20>
    5ba0:	6f 5f       	subi	r22, 0xFF	; 255
    5ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ba8:	08 95       	ret

00005baa <__fp_split3>:
    5baa:	57 fd       	sbrc	r21, 7
    5bac:	90 58       	subi	r25, 0x80	; 128
    5bae:	44 0f       	add	r20, r20
    5bb0:	55 1f       	adc	r21, r21
    5bb2:	59 f0       	breq	.+22     	; 0x5bca <__fp_splitA+0x10>
    5bb4:	5f 3f       	cpi	r21, 0xFF	; 255
    5bb6:	71 f0       	breq	.+28     	; 0x5bd4 <__fp_splitA+0x1a>
    5bb8:	47 95       	ror	r20

00005bba <__fp_splitA>:
    5bba:	88 0f       	add	r24, r24
    5bbc:	97 fb       	bst	r25, 7
    5bbe:	99 1f       	adc	r25, r25
    5bc0:	61 f0       	breq	.+24     	; 0x5bda <__fp_splitA+0x20>
    5bc2:	9f 3f       	cpi	r25, 0xFF	; 255
    5bc4:	79 f0       	breq	.+30     	; 0x5be4 <__fp_splitA+0x2a>
    5bc6:	87 95       	ror	r24
    5bc8:	08 95       	ret
    5bca:	12 16       	cp	r1, r18
    5bcc:	13 06       	cpc	r1, r19
    5bce:	14 06       	cpc	r1, r20
    5bd0:	55 1f       	adc	r21, r21
    5bd2:	f2 cf       	rjmp	.-28     	; 0x5bb8 <__fp_split3+0xe>
    5bd4:	46 95       	lsr	r20
    5bd6:	f1 df       	rcall	.-30     	; 0x5bba <__fp_splitA>
    5bd8:	08 c0       	rjmp	.+16     	; 0x5bea <__fp_splitA+0x30>
    5bda:	16 16       	cp	r1, r22
    5bdc:	17 06       	cpc	r1, r23
    5bde:	18 06       	cpc	r1, r24
    5be0:	99 1f       	adc	r25, r25
    5be2:	f1 cf       	rjmp	.-30     	; 0x5bc6 <__fp_splitA+0xc>
    5be4:	86 95       	lsr	r24
    5be6:	71 05       	cpc	r23, r1
    5be8:	61 05       	cpc	r22, r1
    5bea:	08 94       	sec
    5bec:	08 95       	ret

00005bee <__fp_zero>:
    5bee:	e8 94       	clt

00005bf0 <__fp_szero>:
    5bf0:	bb 27       	eor	r27, r27
    5bf2:	66 27       	eor	r22, r22
    5bf4:	77 27       	eor	r23, r23
    5bf6:	cb 01       	movw	r24, r22
    5bf8:	97 f9       	bld	r25, 7
    5bfa:	08 95       	ret

00005bfc <__gesf2>:
    5bfc:	8a df       	rcall	.-236    	; 0x5b12 <__fp_cmp>
    5bfe:	08 f4       	brcc	.+2      	; 0x5c02 <__gesf2+0x6>
    5c00:	8f ef       	ldi	r24, 0xFF	; 255
    5c02:	08 95       	ret

00005c04 <lrint>:
    5c04:	da df       	rcall	.-76     	; 0x5bba <__fp_splitA>
    5c06:	a8 f1       	brcs	.+106    	; 0x5c72 <lrint+0x6e>
    5c08:	9e 57       	subi	r25, 0x7E	; 126
    5c0a:	a8 f1       	brcs	.+106    	; 0x5c76 <lrint+0x72>
    5c0c:	98 51       	subi	r25, 0x18	; 24
    5c0e:	60 f0       	brcs	.+24     	; 0x5c28 <lrint+0x24>
    5c10:	39 f1       	breq	.+78     	; 0x5c60 <lrint+0x5c>
    5c12:	98 30       	cpi	r25, 0x08	; 8
    5c14:	70 f5       	brcc	.+92     	; 0x5c72 <lrint+0x6e>
    5c16:	09 2e       	mov	r0, r25
    5c18:	99 27       	eor	r25, r25
    5c1a:	66 0f       	add	r22, r22
    5c1c:	77 1f       	adc	r23, r23
    5c1e:	88 1f       	adc	r24, r24
    5c20:	99 1f       	adc	r25, r25
    5c22:	0a 94       	dec	r0
    5c24:	d1 f7       	brne	.-12     	; 0x5c1a <lrint+0x16>
    5c26:	1c c0       	rjmp	.+56     	; 0x5c60 <lrint+0x5c>
    5c28:	bb 27       	eor	r27, r27
    5c2a:	99 3f       	cpi	r25, 0xF9	; 249
    5c2c:	4c f4       	brge	.+18     	; 0x5c40 <lrint+0x3c>
    5c2e:	b1 11       	cpse	r27, r1
    5c30:	b1 e0       	ldi	r27, 0x01	; 1
    5c32:	b6 2b       	or	r27, r22
    5c34:	67 2f       	mov	r22, r23
    5c36:	78 2f       	mov	r23, r24
    5c38:	88 27       	eor	r24, r24
    5c3a:	98 5f       	subi	r25, 0xF8	; 248
    5c3c:	b1 f7       	brne	.-20     	; 0x5c2a <lrint+0x26>
    5c3e:	08 c0       	rjmp	.+16     	; 0x5c50 <lrint+0x4c>
    5c40:	86 95       	lsr	r24
    5c42:	77 95       	ror	r23
    5c44:	67 95       	ror	r22
    5c46:	b7 95       	ror	r27
    5c48:	08 f4       	brcc	.+2      	; 0x5c4c <lrint+0x48>
    5c4a:	b1 60       	ori	r27, 0x01	; 1
    5c4c:	93 95       	inc	r25
    5c4e:	c1 f7       	brne	.-16     	; 0x5c40 <lrint+0x3c>
    5c50:	bb 0f       	add	r27, r27
    5c52:	30 f4       	brcc	.+12     	; 0x5c60 <lrint+0x5c>
    5c54:	11 f4       	brne	.+4      	; 0x5c5a <lrint+0x56>
    5c56:	60 ff       	sbrs	r22, 0
    5c58:	03 c0       	rjmp	.+6      	; 0x5c60 <lrint+0x5c>
    5c5a:	6f 5f       	subi	r22, 0xFF	; 255
    5c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c5e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c60:	3e f4       	brtc	.+14     	; 0x5c70 <lrint+0x6c>
    5c62:	90 95       	com	r25
    5c64:	80 95       	com	r24
    5c66:	70 95       	com	r23
    5c68:	61 95       	neg	r22
    5c6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5c6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c70:	08 95       	ret
    5c72:	68 94       	set
    5c74:	bd cf       	rjmp	.-134    	; 0x5bf0 <__fp_szero>
    5c76:	bb cf       	rjmp	.-138    	; 0x5bee <__fp_zero>

00005c78 <__mulsf3>:
    5c78:	0b d0       	rcall	.+22     	; 0x5c90 <__mulsf3x>
    5c7a:	86 cf       	rjmp	.-244    	; 0x5b88 <__fp_round>
    5c7c:	77 df       	rcall	.-274    	; 0x5b6c <__fp_pscA>
    5c7e:	28 f0       	brcs	.+10     	; 0x5c8a <__mulsf3+0x12>
    5c80:	7c df       	rcall	.-264    	; 0x5b7a <__fp_pscB>
    5c82:	18 f0       	brcs	.+6      	; 0x5c8a <__mulsf3+0x12>
    5c84:	95 23       	and	r25, r21
    5c86:	09 f0       	breq	.+2      	; 0x5c8a <__mulsf3+0x12>
    5c88:	68 cf       	rjmp	.-304    	; 0x5b5a <__fp_inf>
    5c8a:	6d cf       	rjmp	.-294    	; 0x5b66 <__fp_nan>
    5c8c:	11 24       	eor	r1, r1
    5c8e:	b0 cf       	rjmp	.-160    	; 0x5bf0 <__fp_szero>

00005c90 <__mulsf3x>:
    5c90:	8c df       	rcall	.-232    	; 0x5baa <__fp_split3>
    5c92:	a0 f3       	brcs	.-24     	; 0x5c7c <__mulsf3+0x4>

00005c94 <__mulsf3_pse>:
    5c94:	95 9f       	mul	r25, r21
    5c96:	d1 f3       	breq	.-12     	; 0x5c8c <__mulsf3+0x14>
    5c98:	95 0f       	add	r25, r21
    5c9a:	50 e0       	ldi	r21, 0x00	; 0
    5c9c:	55 1f       	adc	r21, r21
    5c9e:	62 9f       	mul	r22, r18
    5ca0:	f0 01       	movw	r30, r0
    5ca2:	72 9f       	mul	r23, r18
    5ca4:	bb 27       	eor	r27, r27
    5ca6:	f0 0d       	add	r31, r0
    5ca8:	b1 1d       	adc	r27, r1
    5caa:	63 9f       	mul	r22, r19
    5cac:	aa 27       	eor	r26, r26
    5cae:	f0 0d       	add	r31, r0
    5cb0:	b1 1d       	adc	r27, r1
    5cb2:	aa 1f       	adc	r26, r26
    5cb4:	64 9f       	mul	r22, r20
    5cb6:	66 27       	eor	r22, r22
    5cb8:	b0 0d       	add	r27, r0
    5cba:	a1 1d       	adc	r26, r1
    5cbc:	66 1f       	adc	r22, r22
    5cbe:	82 9f       	mul	r24, r18
    5cc0:	22 27       	eor	r18, r18
    5cc2:	b0 0d       	add	r27, r0
    5cc4:	a1 1d       	adc	r26, r1
    5cc6:	62 1f       	adc	r22, r18
    5cc8:	73 9f       	mul	r23, r19
    5cca:	b0 0d       	add	r27, r0
    5ccc:	a1 1d       	adc	r26, r1
    5cce:	62 1f       	adc	r22, r18
    5cd0:	83 9f       	mul	r24, r19
    5cd2:	a0 0d       	add	r26, r0
    5cd4:	61 1d       	adc	r22, r1
    5cd6:	22 1f       	adc	r18, r18
    5cd8:	74 9f       	mul	r23, r20
    5cda:	33 27       	eor	r19, r19
    5cdc:	a0 0d       	add	r26, r0
    5cde:	61 1d       	adc	r22, r1
    5ce0:	23 1f       	adc	r18, r19
    5ce2:	84 9f       	mul	r24, r20
    5ce4:	60 0d       	add	r22, r0
    5ce6:	21 1d       	adc	r18, r1
    5ce8:	82 2f       	mov	r24, r18
    5cea:	76 2f       	mov	r23, r22
    5cec:	6a 2f       	mov	r22, r26
    5cee:	11 24       	eor	r1, r1
    5cf0:	9f 57       	subi	r25, 0x7F	; 127
    5cf2:	50 40       	sbci	r21, 0x00	; 0
    5cf4:	8a f0       	brmi	.+34     	; 0x5d18 <__mulsf3_pse+0x84>
    5cf6:	e1 f0       	breq	.+56     	; 0x5d30 <__mulsf3_pse+0x9c>
    5cf8:	88 23       	and	r24, r24
    5cfa:	4a f0       	brmi	.+18     	; 0x5d0e <__mulsf3_pse+0x7a>
    5cfc:	ee 0f       	add	r30, r30
    5cfe:	ff 1f       	adc	r31, r31
    5d00:	bb 1f       	adc	r27, r27
    5d02:	66 1f       	adc	r22, r22
    5d04:	77 1f       	adc	r23, r23
    5d06:	88 1f       	adc	r24, r24
    5d08:	91 50       	subi	r25, 0x01	; 1
    5d0a:	50 40       	sbci	r21, 0x00	; 0
    5d0c:	a9 f7       	brne	.-22     	; 0x5cf8 <__mulsf3_pse+0x64>
    5d0e:	9e 3f       	cpi	r25, 0xFE	; 254
    5d10:	51 05       	cpc	r21, r1
    5d12:	70 f0       	brcs	.+28     	; 0x5d30 <__mulsf3_pse+0x9c>
    5d14:	22 cf       	rjmp	.-444    	; 0x5b5a <__fp_inf>
    5d16:	6c cf       	rjmp	.-296    	; 0x5bf0 <__fp_szero>
    5d18:	5f 3f       	cpi	r21, 0xFF	; 255
    5d1a:	ec f3       	brlt	.-6      	; 0x5d16 <__mulsf3_pse+0x82>
    5d1c:	98 3e       	cpi	r25, 0xE8	; 232
    5d1e:	dc f3       	brlt	.-10     	; 0x5d16 <__mulsf3_pse+0x82>
    5d20:	86 95       	lsr	r24
    5d22:	77 95       	ror	r23
    5d24:	67 95       	ror	r22
    5d26:	b7 95       	ror	r27
    5d28:	f7 95       	ror	r31
    5d2a:	e7 95       	ror	r30
    5d2c:	9f 5f       	subi	r25, 0xFF	; 255
    5d2e:	c1 f7       	brne	.-16     	; 0x5d20 <__mulsf3_pse+0x8c>
    5d30:	fe 2b       	or	r31, r30
    5d32:	88 0f       	add	r24, r24
    5d34:	91 1d       	adc	r25, r1
    5d36:	96 95       	lsr	r25
    5d38:	87 95       	ror	r24
    5d3a:	97 f9       	bld	r25, 7
    5d3c:	08 95       	ret

00005d3e <pow>:
    5d3e:	fa 01       	movw	r30, r20
    5d40:	ee 0f       	add	r30, r30
    5d42:	ff 1f       	adc	r31, r31
    5d44:	30 96       	adiw	r30, 0x00	; 0
    5d46:	21 05       	cpc	r18, r1
    5d48:	31 05       	cpc	r19, r1
    5d4a:	99 f1       	breq	.+102    	; 0x5db2 <pow+0x74>
    5d4c:	61 15       	cp	r22, r1
    5d4e:	71 05       	cpc	r23, r1
    5d50:	61 f4       	brne	.+24     	; 0x5d6a <pow+0x2c>
    5d52:	80 38       	cpi	r24, 0x80	; 128
    5d54:	bf e3       	ldi	r27, 0x3F	; 63
    5d56:	9b 07       	cpc	r25, r27
    5d58:	49 f1       	breq	.+82     	; 0x5dac <pow+0x6e>
    5d5a:	68 94       	set
    5d5c:	90 38       	cpi	r25, 0x80	; 128
    5d5e:	81 05       	cpc	r24, r1
    5d60:	61 f0       	breq	.+24     	; 0x5d7a <pow+0x3c>
    5d62:	80 38       	cpi	r24, 0x80	; 128
    5d64:	bf ef       	ldi	r27, 0xFF	; 255
    5d66:	9b 07       	cpc	r25, r27
    5d68:	41 f0       	breq	.+16     	; 0x5d7a <pow+0x3c>
    5d6a:	99 23       	and	r25, r25
    5d6c:	42 f5       	brpl	.+80     	; 0x5dbe <pow+0x80>
    5d6e:	ff 3f       	cpi	r31, 0xFF	; 255
    5d70:	e1 05       	cpc	r30, r1
    5d72:	31 05       	cpc	r19, r1
    5d74:	21 05       	cpc	r18, r1
    5d76:	11 f1       	breq	.+68     	; 0x5dbc <pow+0x7e>
    5d78:	e8 94       	clt
    5d7a:	08 94       	sec
    5d7c:	e7 95       	ror	r30
    5d7e:	d9 01       	movw	r26, r18
    5d80:	aa 23       	and	r26, r26
    5d82:	29 f4       	brne	.+10     	; 0x5d8e <pow+0x50>
    5d84:	ab 2f       	mov	r26, r27
    5d86:	be 2f       	mov	r27, r30
    5d88:	f8 5f       	subi	r31, 0xF8	; 248
    5d8a:	d0 f3       	brcs	.-12     	; 0x5d80 <pow+0x42>
    5d8c:	10 c0       	rjmp	.+32     	; 0x5dae <pow+0x70>
    5d8e:	ff 5f       	subi	r31, 0xFF	; 255
    5d90:	70 f4       	brcc	.+28     	; 0x5dae <pow+0x70>
    5d92:	a6 95       	lsr	r26
    5d94:	e0 f7       	brcc	.-8      	; 0x5d8e <pow+0x50>
    5d96:	f7 39       	cpi	r31, 0x97	; 151
    5d98:	50 f0       	brcs	.+20     	; 0x5dae <pow+0x70>
    5d9a:	19 f0       	breq	.+6      	; 0x5da2 <pow+0x64>
    5d9c:	ff 3a       	cpi	r31, 0xAF	; 175
    5d9e:	38 f4       	brcc	.+14     	; 0x5dae <pow+0x70>
    5da0:	9f 77       	andi	r25, 0x7F	; 127
    5da2:	9f 93       	push	r25
    5da4:	0c d0       	rcall	.+24     	; 0x5dbe <pow+0x80>
    5da6:	0f 90       	pop	r0
    5da8:	07 fc       	sbrc	r0, 7
    5daa:	90 58       	subi	r25, 0x80	; 128
    5dac:	08 95       	ret
    5dae:	3e f0       	brts	.+14     	; 0x5dbe <pow+0x80>
    5db0:	da ce       	rjmp	.-588    	; 0x5b66 <__fp_nan>
    5db2:	60 e0       	ldi	r22, 0x00	; 0
    5db4:	70 e0       	ldi	r23, 0x00	; 0
    5db6:	80 e8       	ldi	r24, 0x80	; 128
    5db8:	9f e3       	ldi	r25, 0x3F	; 63
    5dba:	08 95       	ret
    5dbc:	4f e7       	ldi	r20, 0x7F	; 127
    5dbe:	9f 77       	andi	r25, 0x7F	; 127
    5dc0:	5f 93       	push	r21
    5dc2:	4f 93       	push	r20
    5dc4:	3f 93       	push	r19
    5dc6:	2f 93       	push	r18
    5dc8:	9e d0       	rcall	.+316    	; 0x5f06 <log>
    5dca:	2f 91       	pop	r18
    5dcc:	3f 91       	pop	r19
    5dce:	4f 91       	pop	r20
    5dd0:	5f 91       	pop	r21
    5dd2:	52 df       	rcall	.-348    	; 0x5c78 <__mulsf3>
    5dd4:	05 c0       	rjmp	.+10     	; 0x5de0 <exp>
    5dd6:	19 f4       	brne	.+6      	; 0x5dde <pow+0xa0>
    5dd8:	0e f0       	brts	.+2      	; 0x5ddc <pow+0x9e>
    5dda:	bf ce       	rjmp	.-642    	; 0x5b5a <__fp_inf>
    5ddc:	08 cf       	rjmp	.-496    	; 0x5bee <__fp_zero>
    5dde:	c3 ce       	rjmp	.-634    	; 0x5b66 <__fp_nan>

00005de0 <exp>:
    5de0:	ec de       	rcall	.-552    	; 0x5bba <__fp_splitA>
    5de2:	c8 f3       	brcs	.-14     	; 0x5dd6 <pow+0x98>
    5de4:	96 38       	cpi	r25, 0x86	; 134
    5de6:	c0 f7       	brcc	.-16     	; 0x5dd8 <pow+0x9a>
    5de8:	07 f8       	bld	r0, 7
    5dea:	0f 92       	push	r0
    5dec:	e8 94       	clt
    5dee:	2b e3       	ldi	r18, 0x3B	; 59
    5df0:	3a ea       	ldi	r19, 0xAA	; 170
    5df2:	48 eb       	ldi	r20, 0xB8	; 184
    5df4:	5f e7       	ldi	r21, 0x7F	; 127
    5df6:	4e df       	rcall	.-356    	; 0x5c94 <__mulsf3_pse>
    5df8:	0f 92       	push	r0
    5dfa:	0f 92       	push	r0
    5dfc:	0f 92       	push	r0
    5dfe:	4d b7       	in	r20, 0x3d	; 61
    5e00:	5e b7       	in	r21, 0x3e	; 62
    5e02:	0f 92       	push	r0
    5e04:	c0 d0       	rcall	.+384    	; 0x5f86 <modf>
    5e06:	e8 ec       	ldi	r30, 0xC8	; 200
    5e08:	f0 e0       	ldi	r31, 0x00	; 0
    5e0a:	16 d0       	rcall	.+44     	; 0x5e38 <__fp_powser>
    5e0c:	4f 91       	pop	r20
    5e0e:	5f 91       	pop	r21
    5e10:	ef 91       	pop	r30
    5e12:	ff 91       	pop	r31
    5e14:	e5 95       	asr	r30
    5e16:	ee 1f       	adc	r30, r30
    5e18:	ff 1f       	adc	r31, r31
    5e1a:	49 f0       	breq	.+18     	; 0x5e2e <exp+0x4e>
    5e1c:	fe 57       	subi	r31, 0x7E	; 126
    5e1e:	e0 68       	ori	r30, 0x80	; 128
    5e20:	44 27       	eor	r20, r20
    5e22:	ee 0f       	add	r30, r30
    5e24:	44 1f       	adc	r20, r20
    5e26:	fa 95       	dec	r31
    5e28:	e1 f7       	brne	.-8      	; 0x5e22 <exp+0x42>
    5e2a:	41 95       	neg	r20
    5e2c:	55 0b       	sbc	r21, r21
    5e2e:	32 d0       	rcall	.+100    	; 0x5e94 <ldexp>
    5e30:	0f 90       	pop	r0
    5e32:	07 fe       	sbrs	r0, 7
    5e34:	26 c0       	rjmp	.+76     	; 0x5e82 <inverse>
    5e36:	08 95       	ret

00005e38 <__fp_powser>:
    5e38:	df 93       	push	r29
    5e3a:	cf 93       	push	r28
    5e3c:	1f 93       	push	r17
    5e3e:	0f 93       	push	r16
    5e40:	ff 92       	push	r15
    5e42:	ef 92       	push	r14
    5e44:	df 92       	push	r13
    5e46:	7b 01       	movw	r14, r22
    5e48:	8c 01       	movw	r16, r24
    5e4a:	68 94       	set
    5e4c:	05 c0       	rjmp	.+10     	; 0x5e58 <__fp_powser+0x20>
    5e4e:	da 2e       	mov	r13, r26
    5e50:	ef 01       	movw	r28, r30
    5e52:	1e df       	rcall	.-452    	; 0x5c90 <__mulsf3x>
    5e54:	fe 01       	movw	r30, r28
    5e56:	e8 94       	clt
    5e58:	a5 91       	lpm	r26, Z+
    5e5a:	25 91       	lpm	r18, Z+
    5e5c:	35 91       	lpm	r19, Z+
    5e5e:	45 91       	lpm	r20, Z+
    5e60:	55 91       	lpm	r21, Z+
    5e62:	ae f3       	brts	.-22     	; 0x5e4e <__fp_powser+0x16>
    5e64:	ef 01       	movw	r28, r30
    5e66:	28 dd       	rcall	.-1456   	; 0x58b8 <__addsf3x>
    5e68:	fe 01       	movw	r30, r28
    5e6a:	97 01       	movw	r18, r14
    5e6c:	a8 01       	movw	r20, r16
    5e6e:	da 94       	dec	r13
    5e70:	79 f7       	brne	.-34     	; 0x5e50 <__fp_powser+0x18>
    5e72:	df 90       	pop	r13
    5e74:	ef 90       	pop	r14
    5e76:	ff 90       	pop	r15
    5e78:	0f 91       	pop	r16
    5e7a:	1f 91       	pop	r17
    5e7c:	cf 91       	pop	r28
    5e7e:	df 91       	pop	r29
    5e80:	08 95       	ret

00005e82 <inverse>:
    5e82:	9b 01       	movw	r18, r22
    5e84:	ac 01       	movw	r20, r24
    5e86:	60 e0       	ldi	r22, 0x00	; 0
    5e88:	70 e0       	ldi	r23, 0x00	; 0
    5e8a:	80 e8       	ldi	r24, 0x80	; 128
    5e8c:	9f e3       	ldi	r25, 0x3F	; 63
    5e8e:	6b cd       	rjmp	.-1322   	; 0x5966 <__divsf3>
    5e90:	64 ce       	rjmp	.-824    	; 0x5b5a <__fp_inf>
    5e92:	ac c0       	rjmp	.+344    	; 0x5fec <__fp_mpack>

00005e94 <ldexp>:
    5e94:	92 de       	rcall	.-732    	; 0x5bba <__fp_splitA>
    5e96:	e8 f3       	brcs	.-6      	; 0x5e92 <inverse+0x10>
    5e98:	99 23       	and	r25, r25
    5e9a:	d9 f3       	breq	.-10     	; 0x5e92 <inverse+0x10>
    5e9c:	94 0f       	add	r25, r20
    5e9e:	51 1d       	adc	r21, r1
    5ea0:	bb f3       	brvs	.-18     	; 0x5e90 <inverse+0xe>
    5ea2:	91 50       	subi	r25, 0x01	; 1
    5ea4:	50 40       	sbci	r21, 0x00	; 0
    5ea6:	94 f0       	brlt	.+36     	; 0x5ecc <ldexp+0x38>
    5ea8:	59 f0       	breq	.+22     	; 0x5ec0 <ldexp+0x2c>
    5eaa:	88 23       	and	r24, r24
    5eac:	32 f0       	brmi	.+12     	; 0x5eba <ldexp+0x26>
    5eae:	66 0f       	add	r22, r22
    5eb0:	77 1f       	adc	r23, r23
    5eb2:	88 1f       	adc	r24, r24
    5eb4:	91 50       	subi	r25, 0x01	; 1
    5eb6:	50 40       	sbci	r21, 0x00	; 0
    5eb8:	c1 f7       	brne	.-16     	; 0x5eaa <ldexp+0x16>
    5eba:	9e 3f       	cpi	r25, 0xFE	; 254
    5ebc:	51 05       	cpc	r21, r1
    5ebe:	44 f7       	brge	.-48     	; 0x5e90 <inverse+0xe>
    5ec0:	88 0f       	add	r24, r24
    5ec2:	91 1d       	adc	r25, r1
    5ec4:	96 95       	lsr	r25
    5ec6:	87 95       	ror	r24
    5ec8:	97 f9       	bld	r25, 7
    5eca:	08 95       	ret
    5ecc:	5f 3f       	cpi	r21, 0xFF	; 255
    5ece:	ac f0       	brlt	.+42     	; 0x5efa <ldexp+0x66>
    5ed0:	98 3e       	cpi	r25, 0xE8	; 232
    5ed2:	9c f0       	brlt	.+38     	; 0x5efa <ldexp+0x66>
    5ed4:	bb 27       	eor	r27, r27
    5ed6:	86 95       	lsr	r24
    5ed8:	77 95       	ror	r23
    5eda:	67 95       	ror	r22
    5edc:	b7 95       	ror	r27
    5ede:	08 f4       	brcc	.+2      	; 0x5ee2 <ldexp+0x4e>
    5ee0:	b1 60       	ori	r27, 0x01	; 1
    5ee2:	93 95       	inc	r25
    5ee4:	c1 f7       	brne	.-16     	; 0x5ed6 <ldexp+0x42>
    5ee6:	bb 0f       	add	r27, r27
    5ee8:	58 f7       	brcc	.-42     	; 0x5ec0 <ldexp+0x2c>
    5eea:	11 f4       	brne	.+4      	; 0x5ef0 <ldexp+0x5c>
    5eec:	60 ff       	sbrs	r22, 0
    5eee:	e8 cf       	rjmp	.-48     	; 0x5ec0 <ldexp+0x2c>
    5ef0:	6f 5f       	subi	r22, 0xFF	; 255
    5ef2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ef4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ef6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef8:	e3 cf       	rjmp	.-58     	; 0x5ec0 <ldexp+0x2c>
    5efa:	7a ce       	rjmp	.-780    	; 0x5bf0 <__fp_szero>
    5efc:	0e f0       	brts	.+2      	; 0x5f00 <ldexp+0x6c>
    5efe:	76 c0       	rjmp	.+236    	; 0x5fec <__fp_mpack>
    5f00:	32 ce       	rjmp	.-924    	; 0x5b66 <__fp_nan>
    5f02:	68 94       	set
    5f04:	2a ce       	rjmp	.-940    	; 0x5b5a <__fp_inf>

00005f06 <log>:
    5f06:	59 de       	rcall	.-846    	; 0x5bba <__fp_splitA>
    5f08:	c8 f3       	brcs	.-14     	; 0x5efc <ldexp+0x68>
    5f0a:	99 23       	and	r25, r25
    5f0c:	d1 f3       	breq	.-12     	; 0x5f02 <ldexp+0x6e>
    5f0e:	c6 f3       	brts	.-16     	; 0x5f00 <ldexp+0x6c>
    5f10:	df 93       	push	r29
    5f12:	cf 93       	push	r28
    5f14:	1f 93       	push	r17
    5f16:	0f 93       	push	r16
    5f18:	ff 92       	push	r15
    5f1a:	c9 2f       	mov	r28, r25
    5f1c:	dd 27       	eor	r29, r29
    5f1e:	88 23       	and	r24, r24
    5f20:	2a f0       	brmi	.+10     	; 0x5f2c <log+0x26>
    5f22:	21 97       	sbiw	r28, 0x01	; 1
    5f24:	66 0f       	add	r22, r22
    5f26:	77 1f       	adc	r23, r23
    5f28:	88 1f       	adc	r24, r24
    5f2a:	da f7       	brpl	.-10     	; 0x5f22 <log+0x1c>
    5f2c:	20 e0       	ldi	r18, 0x00	; 0
    5f2e:	30 e0       	ldi	r19, 0x00	; 0
    5f30:	40 e8       	ldi	r20, 0x80	; 128
    5f32:	5f eb       	ldi	r21, 0xBF	; 191
    5f34:	9f e3       	ldi	r25, 0x3F	; 63
    5f36:	88 39       	cpi	r24, 0x98	; 152
    5f38:	20 f0       	brcs	.+8      	; 0x5f42 <log+0x3c>
    5f3a:	80 3e       	cpi	r24, 0xE0	; 224
    5f3c:	30 f0       	brcs	.+12     	; 0x5f4a <log+0x44>
    5f3e:	21 96       	adiw	r28, 0x01	; 1
    5f40:	8f 77       	andi	r24, 0x7F	; 127
    5f42:	a9 dc       	rcall	.-1710   	; 0x5896 <__addsf3>
    5f44:	e0 ef       	ldi	r30, 0xF0	; 240
    5f46:	f0 e0       	ldi	r31, 0x00	; 0
    5f48:	03 c0       	rjmp	.+6      	; 0x5f50 <log+0x4a>
    5f4a:	a5 dc       	rcall	.-1718   	; 0x5896 <__addsf3>
    5f4c:	ed e1       	ldi	r30, 0x1D	; 29
    5f4e:	f1 e0       	ldi	r31, 0x01	; 1
    5f50:	73 df       	rcall	.-282    	; 0x5e38 <__fp_powser>
    5f52:	8b 01       	movw	r16, r22
    5f54:	be 01       	movw	r22, r28
    5f56:	ec 01       	movw	r28, r24
    5f58:	fb 2e       	mov	r15, r27
    5f5a:	6f 57       	subi	r22, 0x7F	; 127
    5f5c:	71 09       	sbc	r23, r1
    5f5e:	75 95       	asr	r23
    5f60:	77 1f       	adc	r23, r23
    5f62:	88 0b       	sbc	r24, r24
    5f64:	99 0b       	sbc	r25, r25
    5f66:	9a dd       	rcall	.-1228   	; 0x5a9c <__floatsisf>
    5f68:	28 e1       	ldi	r18, 0x18	; 24
    5f6a:	32 e7       	ldi	r19, 0x72	; 114
    5f6c:	41 e3       	ldi	r20, 0x31	; 49
    5f6e:	5f e3       	ldi	r21, 0x3F	; 63
    5f70:	8f de       	rcall	.-738    	; 0x5c90 <__mulsf3x>
    5f72:	af 2d       	mov	r26, r15
    5f74:	98 01       	movw	r18, r16
    5f76:	ae 01       	movw	r20, r28
    5f78:	ff 90       	pop	r15
    5f7a:	0f 91       	pop	r16
    5f7c:	1f 91       	pop	r17
    5f7e:	cf 91       	pop	r28
    5f80:	df 91       	pop	r29
    5f82:	9a dc       	rcall	.-1740   	; 0x58b8 <__addsf3x>
    5f84:	01 ce       	rjmp	.-1022   	; 0x5b88 <__fp_round>

00005f86 <modf>:
    5f86:	fa 01       	movw	r30, r20
    5f88:	dc 01       	movw	r26, r24
    5f8a:	aa 0f       	add	r26, r26
    5f8c:	bb 1f       	adc	r27, r27
    5f8e:	9b 01       	movw	r18, r22
    5f90:	ac 01       	movw	r20, r24
    5f92:	bf 57       	subi	r27, 0x7F	; 127
    5f94:	28 f4       	brcc	.+10     	; 0x5fa0 <modf+0x1a>
    5f96:	22 27       	eor	r18, r18
    5f98:	33 27       	eor	r19, r19
    5f9a:	44 27       	eor	r20, r20
    5f9c:	50 78       	andi	r21, 0x80	; 128
    5f9e:	1f c0       	rjmp	.+62     	; 0x5fde <modf+0x58>
    5fa0:	b7 51       	subi	r27, 0x17	; 23
    5fa2:	88 f4       	brcc	.+34     	; 0x5fc6 <modf+0x40>
    5fa4:	ab 2f       	mov	r26, r27
    5fa6:	00 24       	eor	r0, r0
    5fa8:	46 95       	lsr	r20
    5faa:	37 95       	ror	r19
    5fac:	27 95       	ror	r18
    5fae:	01 1c       	adc	r0, r1
    5fb0:	a3 95       	inc	r26
    5fb2:	d2 f3       	brmi	.-12     	; 0x5fa8 <modf+0x22>
    5fb4:	00 20       	and	r0, r0
    5fb6:	69 f0       	breq	.+26     	; 0x5fd2 <modf+0x4c>
    5fb8:	22 0f       	add	r18, r18
    5fba:	33 1f       	adc	r19, r19
    5fbc:	44 1f       	adc	r20, r20
    5fbe:	b3 95       	inc	r27
    5fc0:	da f3       	brmi	.-10     	; 0x5fb8 <modf+0x32>
    5fc2:	0d d0       	rcall	.+26     	; 0x5fde <modf+0x58>
    5fc4:	67 cc       	rjmp	.-1842   	; 0x5894 <__subsf3>
    5fc6:	61 30       	cpi	r22, 0x01	; 1
    5fc8:	71 05       	cpc	r23, r1
    5fca:	a0 e8       	ldi	r26, 0x80	; 128
    5fcc:	8a 07       	cpc	r24, r26
    5fce:	b9 46       	sbci	r27, 0x69	; 105
    5fd0:	30 f4       	brcc	.+12     	; 0x5fde <modf+0x58>
    5fd2:	9b 01       	movw	r18, r22
    5fd4:	ac 01       	movw	r20, r24
    5fd6:	66 27       	eor	r22, r22
    5fd8:	77 27       	eor	r23, r23
    5fda:	88 27       	eor	r24, r24
    5fdc:	90 78       	andi	r25, 0x80	; 128
    5fde:	30 96       	adiw	r30, 0x00	; 0
    5fe0:	21 f0       	breq	.+8      	; 0x5fea <modf+0x64>
    5fe2:	20 83       	st	Z, r18
    5fe4:	31 83       	std	Z+1, r19	; 0x01
    5fe6:	42 83       	std	Z+2, r20	; 0x02
    5fe8:	53 83       	std	Z+3, r21	; 0x03
    5fea:	08 95       	ret

00005fec <__fp_mpack>:
    5fec:	9f 3f       	cpi	r25, 0xFF	; 255
    5fee:	31 f0       	breq	.+12     	; 0x5ffc <__fp_mpack_finite+0xc>

00005ff0 <__fp_mpack_finite>:
    5ff0:	91 50       	subi	r25, 0x01	; 1
    5ff2:	20 f4       	brcc	.+8      	; 0x5ffc <__fp_mpack_finite+0xc>
    5ff4:	87 95       	ror	r24
    5ff6:	77 95       	ror	r23
    5ff8:	67 95       	ror	r22
    5ffa:	b7 95       	ror	r27
    5ffc:	88 0f       	add	r24, r24
    5ffe:	91 1d       	adc	r25, r1
    6000:	96 95       	lsr	r25
    6002:	87 95       	ror	r24
    6004:	97 f9       	bld	r25, 7
    6006:	08 95       	ret

00006008 <vfprintf>:
    6008:	a1 e1       	ldi	r26, 0x11	; 17
    600a:	b0 e0       	ldi	r27, 0x00	; 0
    600c:	e9 e0       	ldi	r30, 0x09	; 9
    600e:	f0 e3       	ldi	r31, 0x30	; 48
    6010:	a4 c3       	rjmp	.+1864   	; 0x675a <__prologue_saves__>
    6012:	3c 01       	movw	r6, r24
    6014:	7f 87       	std	Y+15, r23	; 0x0f
    6016:	6e 87       	std	Y+14, r22	; 0x0e
    6018:	6a 01       	movw	r12, r20
    601a:	fc 01       	movw	r30, r24
    601c:	17 82       	std	Z+7, r1	; 0x07
    601e:	16 82       	std	Z+6, r1	; 0x06
    6020:	83 81       	ldd	r24, Z+3	; 0x03
    6022:	81 fd       	sbrc	r24, 1
    6024:	03 c0       	rjmp	.+6      	; 0x602c <vfprintf+0x24>
    6026:	6f ef       	ldi	r22, 0xFF	; 255
    6028:	7f ef       	ldi	r23, 0xFF	; 255
    602a:	52 c3       	rjmp	.+1700   	; 0x66d0 <vfprintf+0x6c8>
    602c:	9e 01       	movw	r18, r28
    602e:	2f 5f       	subi	r18, 0xFF	; 255
    6030:	3f 4f       	sbci	r19, 0xFF	; 255
    6032:	39 8b       	std	Y+17, r19	; 0x11
    6034:	28 8b       	std	Y+16, r18	; 0x10
    6036:	f3 01       	movw	r30, r6
    6038:	23 81       	ldd	r18, Z+3	; 0x03
    603a:	ee 85       	ldd	r30, Y+14	; 0x0e
    603c:	ff 85       	ldd	r31, Y+15	; 0x0f
    603e:	23 fd       	sbrc	r18, 3
    6040:	85 91       	lpm	r24, Z+
    6042:	23 ff       	sbrs	r18, 3
    6044:	81 91       	ld	r24, Z+
    6046:	ff 87       	std	Y+15, r31	; 0x0f
    6048:	ee 87       	std	Y+14, r30	; 0x0e
    604a:	88 23       	and	r24, r24
    604c:	09 f4       	brne	.+2      	; 0x6050 <vfprintf+0x48>
    604e:	3d c3       	rjmp	.+1658   	; 0x66ca <vfprintf+0x6c2>
    6050:	85 32       	cpi	r24, 0x25	; 37
    6052:	51 f4       	brne	.+20     	; 0x6068 <vfprintf+0x60>
    6054:	ee 85       	ldd	r30, Y+14	; 0x0e
    6056:	ff 85       	ldd	r31, Y+15	; 0x0f
    6058:	23 fd       	sbrc	r18, 3
    605a:	85 91       	lpm	r24, Z+
    605c:	23 ff       	sbrs	r18, 3
    605e:	81 91       	ld	r24, Z+
    6060:	ff 87       	std	Y+15, r31	; 0x0f
    6062:	ee 87       	std	Y+14, r30	; 0x0e
    6064:	85 32       	cpi	r24, 0x25	; 37
    6066:	21 f4       	brne	.+8      	; 0x6070 <vfprintf+0x68>
    6068:	90 e0       	ldi	r25, 0x00	; 0
    606a:	b3 01       	movw	r22, r6
    606c:	a0 d5       	rcall	.+2880   	; 0x6bae <fputc>
    606e:	e3 cf       	rjmp	.-58     	; 0x6036 <vfprintf+0x2e>
    6070:	98 2f       	mov	r25, r24
    6072:	10 e0       	ldi	r17, 0x00	; 0
    6074:	88 24       	eor	r8, r8
    6076:	99 24       	eor	r9, r9
    6078:	10 32       	cpi	r17, 0x20	; 32
    607a:	b0 f4       	brcc	.+44     	; 0x60a8 <vfprintf+0xa0>
    607c:	9b 32       	cpi	r25, 0x2B	; 43
    607e:	69 f0       	breq	.+26     	; 0x609a <vfprintf+0x92>
    6080:	9c 32       	cpi	r25, 0x2C	; 44
    6082:	28 f4       	brcc	.+10     	; 0x608e <vfprintf+0x86>
    6084:	90 32       	cpi	r25, 0x20	; 32
    6086:	51 f0       	breq	.+20     	; 0x609c <vfprintf+0x94>
    6088:	93 32       	cpi	r25, 0x23	; 35
    608a:	71 f4       	brne	.+28     	; 0x60a8 <vfprintf+0xa0>
    608c:	0b c0       	rjmp	.+22     	; 0x60a4 <vfprintf+0x9c>
    608e:	9d 32       	cpi	r25, 0x2D	; 45
    6090:	39 f0       	breq	.+14     	; 0x60a0 <vfprintf+0x98>
    6092:	90 33       	cpi	r25, 0x30	; 48
    6094:	49 f4       	brne	.+18     	; 0x60a8 <vfprintf+0xa0>
    6096:	11 60       	ori	r17, 0x01	; 1
    6098:	28 c0       	rjmp	.+80     	; 0x60ea <vfprintf+0xe2>
    609a:	12 60       	ori	r17, 0x02	; 2
    609c:	14 60       	ori	r17, 0x04	; 4
    609e:	25 c0       	rjmp	.+74     	; 0x60ea <vfprintf+0xe2>
    60a0:	18 60       	ori	r17, 0x08	; 8
    60a2:	23 c0       	rjmp	.+70     	; 0x60ea <vfprintf+0xe2>
    60a4:	10 61       	ori	r17, 0x10	; 16
    60a6:	21 c0       	rjmp	.+66     	; 0x60ea <vfprintf+0xe2>
    60a8:	17 fd       	sbrc	r17, 7
    60aa:	2a c0       	rjmp	.+84     	; 0x6100 <vfprintf+0xf8>
    60ac:	89 2f       	mov	r24, r25
    60ae:	80 53       	subi	r24, 0x30	; 48
    60b0:	8a 30       	cpi	r24, 0x0A	; 10
    60b2:	78 f4       	brcc	.+30     	; 0x60d2 <vfprintf+0xca>
    60b4:	16 ff       	sbrs	r17, 6
    60b6:	06 c0       	rjmp	.+12     	; 0x60c4 <vfprintf+0xbc>
    60b8:	fa e0       	ldi	r31, 0x0A	; 10
    60ba:	9f 9e       	mul	r9, r31
    60bc:	90 2c       	mov	r9, r0
    60be:	11 24       	eor	r1, r1
    60c0:	98 0e       	add	r9, r24
    60c2:	13 c0       	rjmp	.+38     	; 0x60ea <vfprintf+0xe2>
    60c4:	3a e0       	ldi	r19, 0x0A	; 10
    60c6:	83 9e       	mul	r8, r19
    60c8:	80 2c       	mov	r8, r0
    60ca:	11 24       	eor	r1, r1
    60cc:	88 0e       	add	r8, r24
    60ce:	10 62       	ori	r17, 0x20	; 32
    60d0:	0c c0       	rjmp	.+24     	; 0x60ea <vfprintf+0xe2>
    60d2:	9e 32       	cpi	r25, 0x2E	; 46
    60d4:	21 f4       	brne	.+8      	; 0x60de <vfprintf+0xd6>
    60d6:	16 fd       	sbrc	r17, 6
    60d8:	f8 c2       	rjmp	.+1520   	; 0x66ca <vfprintf+0x6c2>
    60da:	10 64       	ori	r17, 0x40	; 64
    60dc:	06 c0       	rjmp	.+12     	; 0x60ea <vfprintf+0xe2>
    60de:	9c 36       	cpi	r25, 0x6C	; 108
    60e0:	11 f4       	brne	.+4      	; 0x60e6 <vfprintf+0xde>
    60e2:	10 68       	ori	r17, 0x80	; 128
    60e4:	02 c0       	rjmp	.+4      	; 0x60ea <vfprintf+0xe2>
    60e6:	98 36       	cpi	r25, 0x68	; 104
    60e8:	59 f4       	brne	.+22     	; 0x6100 <vfprintf+0xf8>
    60ea:	ee 85       	ldd	r30, Y+14	; 0x0e
    60ec:	ff 85       	ldd	r31, Y+15	; 0x0f
    60ee:	23 fd       	sbrc	r18, 3
    60f0:	95 91       	lpm	r25, Z+
    60f2:	23 ff       	sbrs	r18, 3
    60f4:	91 91       	ld	r25, Z+
    60f6:	ff 87       	std	Y+15, r31	; 0x0f
    60f8:	ee 87       	std	Y+14, r30	; 0x0e
    60fa:	99 23       	and	r25, r25
    60fc:	09 f0       	breq	.+2      	; 0x6100 <vfprintf+0xf8>
    60fe:	bc cf       	rjmp	.-136    	; 0x6078 <vfprintf+0x70>
    6100:	89 2f       	mov	r24, r25
    6102:	85 54       	subi	r24, 0x45	; 69
    6104:	83 30       	cpi	r24, 0x03	; 3
    6106:	20 f4       	brcc	.+8      	; 0x6110 <vfprintf+0x108>
    6108:	81 2f       	mov	r24, r17
    610a:	80 61       	ori	r24, 0x10	; 16
    610c:	90 5e       	subi	r25, 0xE0	; 224
    610e:	07 c0       	rjmp	.+14     	; 0x611e <vfprintf+0x116>
    6110:	89 2f       	mov	r24, r25
    6112:	85 56       	subi	r24, 0x65	; 101
    6114:	83 30       	cpi	r24, 0x03	; 3
    6116:	08 f0       	brcs	.+2      	; 0x611a <vfprintf+0x112>
    6118:	8f c1       	rjmp	.+798    	; 0x6438 <vfprintf+0x430>
    611a:	81 2f       	mov	r24, r17
    611c:	8f 7e       	andi	r24, 0xEF	; 239
    611e:	86 fd       	sbrc	r24, 6
    6120:	02 c0       	rjmp	.+4      	; 0x6126 <vfprintf+0x11e>
    6122:	76 e0       	ldi	r23, 0x06	; 6
    6124:	97 2e       	mov	r9, r23
    6126:	6f e3       	ldi	r22, 0x3F	; 63
    6128:	f6 2e       	mov	r15, r22
    612a:	f8 22       	and	r15, r24
    612c:	95 36       	cpi	r25, 0x65	; 101
    612e:	19 f4       	brne	.+6      	; 0x6136 <vfprintf+0x12e>
    6130:	f0 e4       	ldi	r31, 0x40	; 64
    6132:	ff 2a       	or	r15, r31
    6134:	07 c0       	rjmp	.+14     	; 0x6144 <vfprintf+0x13c>
    6136:	96 36       	cpi	r25, 0x66	; 102
    6138:	19 f4       	brne	.+6      	; 0x6140 <vfprintf+0x138>
    613a:	20 e8       	ldi	r18, 0x80	; 128
    613c:	f2 2a       	or	r15, r18
    613e:	02 c0       	rjmp	.+4      	; 0x6144 <vfprintf+0x13c>
    6140:	91 10       	cpse	r9, r1
    6142:	9a 94       	dec	r9
    6144:	f7 fe       	sbrs	r15, 7
    6146:	0a c0       	rjmp	.+20     	; 0x615c <vfprintf+0x154>
    6148:	3b e3       	ldi	r19, 0x3B	; 59
    614a:	39 15       	cp	r19, r9
    614c:	18 f4       	brcc	.+6      	; 0x6154 <vfprintf+0x14c>
    614e:	5c e3       	ldi	r21, 0x3C	; 60
    6150:	b5 2e       	mov	r11, r21
    6152:	02 c0       	rjmp	.+4      	; 0x6158 <vfprintf+0x150>
    6154:	b9 2c       	mov	r11, r9
    6156:	b3 94       	inc	r11
    6158:	27 e0       	ldi	r18, 0x07	; 7
    615a:	09 c0       	rjmp	.+18     	; 0x616e <vfprintf+0x166>
    615c:	47 e0       	ldi	r20, 0x07	; 7
    615e:	49 15       	cp	r20, r9
    6160:	20 f4       	brcc	.+8      	; 0x616a <vfprintf+0x162>
    6162:	bb 24       	eor	r11, r11
    6164:	47 e0       	ldi	r20, 0x07	; 7
    6166:	94 2e       	mov	r9, r20
    6168:	f7 cf       	rjmp	.-18     	; 0x6158 <vfprintf+0x150>
    616a:	29 2d       	mov	r18, r9
    616c:	bb 24       	eor	r11, r11
    616e:	c6 01       	movw	r24, r12
    6170:	04 96       	adiw	r24, 0x04	; 4
    6172:	9d 87       	std	Y+13, r25	; 0x0d
    6174:	8c 87       	std	Y+12, r24	; 0x0c
    6176:	f6 01       	movw	r30, r12
    6178:	60 81       	ld	r22, Z
    617a:	71 81       	ldd	r23, Z+1	; 0x01
    617c:	82 81       	ldd	r24, Z+2	; 0x02
    617e:	93 81       	ldd	r25, Z+3	; 0x03
    6180:	ae 01       	movw	r20, r28
    6182:	4f 5f       	subi	r20, 0xFF	; 255
    6184:	5f 4f       	sbci	r21, 0xFF	; 255
    6186:	0b 2d       	mov	r16, r11
    6188:	24 d4       	rcall	.+2120   	; 0x69d2 <__ftoa_engine>
    618a:	6c 01       	movw	r12, r24
    618c:	09 81       	ldd	r16, Y+1	; 0x01
    618e:	20 2e       	mov	r2, r16
    6190:	33 24       	eor	r3, r3
    6192:	00 ff       	sbrs	r16, 0
    6194:	04 c0       	rjmp	.+8      	; 0x619e <vfprintf+0x196>
    6196:	03 fd       	sbrc	r16, 3
    6198:	02 c0       	rjmp	.+4      	; 0x619e <vfprintf+0x196>
    619a:	1d e2       	ldi	r17, 0x2D	; 45
    619c:	09 c0       	rjmp	.+18     	; 0x61b0 <vfprintf+0x1a8>
    619e:	f1 fe       	sbrs	r15, 1
    61a0:	02 c0       	rjmp	.+4      	; 0x61a6 <vfprintf+0x19e>
    61a2:	1b e2       	ldi	r17, 0x2B	; 43
    61a4:	05 c0       	rjmp	.+10     	; 0x61b0 <vfprintf+0x1a8>
    61a6:	f2 fc       	sbrc	r15, 2
    61a8:	02 c0       	rjmp	.+4      	; 0x61ae <vfprintf+0x1a6>
    61aa:	10 e0       	ldi	r17, 0x00	; 0
    61ac:	01 c0       	rjmp	.+2      	; 0x61b0 <vfprintf+0x1a8>
    61ae:	10 e2       	ldi	r17, 0x20	; 32
    61b0:	c1 01       	movw	r24, r2
    61b2:	8c 70       	andi	r24, 0x0C	; 12
    61b4:	90 70       	andi	r25, 0x00	; 0
    61b6:	89 2b       	or	r24, r25
    61b8:	a1 f1       	breq	.+104    	; 0x6222 <vfprintf+0x21a>
    61ba:	11 23       	and	r17, r17
    61bc:	11 f4       	brne	.+4      	; 0x61c2 <vfprintf+0x1ba>
    61be:	83 e0       	ldi	r24, 0x03	; 3
    61c0:	01 c0       	rjmp	.+2      	; 0x61c4 <vfprintf+0x1bc>
    61c2:	84 e0       	ldi	r24, 0x04	; 4
    61c4:	88 15       	cp	r24, r8
    61c6:	10 f0       	brcs	.+4      	; 0x61cc <vfprintf+0x1c4>
    61c8:	88 24       	eor	r8, r8
    61ca:	09 c0       	rjmp	.+18     	; 0x61de <vfprintf+0x1d6>
    61cc:	88 1a       	sub	r8, r24
    61ce:	f3 fc       	sbrc	r15, 3
    61d0:	06 c0       	rjmp	.+12     	; 0x61de <vfprintf+0x1d6>
    61d2:	80 e2       	ldi	r24, 0x20	; 32
    61d4:	90 e0       	ldi	r25, 0x00	; 0
    61d6:	b3 01       	movw	r22, r6
    61d8:	ea d4       	rcall	.+2516   	; 0x6bae <fputc>
    61da:	8a 94       	dec	r8
    61dc:	d1 f7       	brne	.-12     	; 0x61d2 <vfprintf+0x1ca>
    61de:	11 23       	and	r17, r17
    61e0:	21 f0       	breq	.+8      	; 0x61ea <vfprintf+0x1e2>
    61e2:	81 2f       	mov	r24, r17
    61e4:	90 e0       	ldi	r25, 0x00	; 0
    61e6:	b3 01       	movw	r22, r6
    61e8:	e2 d4       	rcall	.+2500   	; 0x6bae <fputc>
    61ea:	23 fe       	sbrs	r2, 3
    61ec:	03 c0       	rjmp	.+6      	; 0x61f4 <vfprintf+0x1ec>
    61ee:	0f e5       	ldi	r16, 0x5F	; 95
    61f0:	15 e0       	ldi	r17, 0x05	; 5
    61f2:	0d c0       	rjmp	.+26     	; 0x620e <vfprintf+0x206>
    61f4:	03 e6       	ldi	r16, 0x63	; 99
    61f6:	15 e0       	ldi	r17, 0x05	; 5
    61f8:	0a c0       	rjmp	.+20     	; 0x620e <vfprintf+0x206>
    61fa:	e1 14       	cp	r14, r1
    61fc:	f1 04       	cpc	r15, r1
    61fe:	09 f0       	breq	.+2      	; 0x6202 <vfprintf+0x1fa>
    6200:	80 52       	subi	r24, 0x20	; 32
    6202:	90 e0       	ldi	r25, 0x00	; 0
    6204:	b3 01       	movw	r22, r6
    6206:	d3 d4       	rcall	.+2470   	; 0x6bae <fputc>
    6208:	0f 5f       	subi	r16, 0xFF	; 255
    620a:	1f 4f       	sbci	r17, 0xFF	; 255
    620c:	05 c0       	rjmp	.+10     	; 0x6218 <vfprintf+0x210>
    620e:	ef 2c       	mov	r14, r15
    6210:	ff 24       	eor	r15, r15
    6212:	f0 e1       	ldi	r31, 0x10	; 16
    6214:	ef 22       	and	r14, r31
    6216:	ff 24       	eor	r15, r15
    6218:	f8 01       	movw	r30, r16
    621a:	84 91       	lpm	r24, Z+
    621c:	88 23       	and	r24, r24
    621e:	69 f7       	brne	.-38     	; 0x61fa <vfprintf+0x1f2>
    6220:	08 c1       	rjmp	.+528    	; 0x6432 <vfprintf+0x42a>
    6222:	f7 fe       	sbrs	r15, 7
    6224:	12 c0       	rjmp	.+36     	; 0x624a <vfprintf+0x242>
    6226:	bc 0c       	add	r11, r12
    6228:	24 fe       	sbrs	r2, 4
    622a:	04 c0       	rjmp	.+8      	; 0x6234 <vfprintf+0x22c>
    622c:	8a 81       	ldd	r24, Y+2	; 0x02
    622e:	81 33       	cpi	r24, 0x31	; 49
    6230:	09 f4       	brne	.+2      	; 0x6234 <vfprintf+0x22c>
    6232:	ba 94       	dec	r11
    6234:	1b 14       	cp	r1, r11
    6236:	1c f0       	brlt	.+6      	; 0x623e <vfprintf+0x236>
    6238:	bb 24       	eor	r11, r11
    623a:	b3 94       	inc	r11
    623c:	2d c0       	rjmp	.+90     	; 0x6298 <vfprintf+0x290>
    623e:	f8 e0       	ldi	r31, 0x08	; 8
    6240:	fb 15       	cp	r31, r11
    6242:	50 f5       	brcc	.+84     	; 0x6298 <vfprintf+0x290>
    6244:	38 e0       	ldi	r19, 0x08	; 8
    6246:	b3 2e       	mov	r11, r19
    6248:	27 c0       	rjmp	.+78     	; 0x6298 <vfprintf+0x290>
    624a:	f6 fc       	sbrc	r15, 6
    624c:	25 c0       	rjmp	.+74     	; 0x6298 <vfprintf+0x290>
    624e:	89 2d       	mov	r24, r9
    6250:	90 e0       	ldi	r25, 0x00	; 0
    6252:	8c 15       	cp	r24, r12
    6254:	9d 05       	cpc	r25, r13
    6256:	4c f0       	brlt	.+18     	; 0x626a <vfprintf+0x262>
    6258:	2c ef       	ldi	r18, 0xFC	; 252
    625a:	c2 16       	cp	r12, r18
    625c:	2f ef       	ldi	r18, 0xFF	; 255
    625e:	d2 06       	cpc	r13, r18
    6260:	24 f0       	brlt	.+8      	; 0x626a <vfprintf+0x262>
    6262:	30 e8       	ldi	r19, 0x80	; 128
    6264:	f3 2a       	or	r15, r19
    6266:	01 c0       	rjmp	.+2      	; 0x626a <vfprintf+0x262>
    6268:	9a 94       	dec	r9
    626a:	99 20       	and	r9, r9
    626c:	49 f0       	breq	.+18     	; 0x6280 <vfprintf+0x278>
    626e:	e2 e0       	ldi	r30, 0x02	; 2
    6270:	f0 e0       	ldi	r31, 0x00	; 0
    6272:	ec 0f       	add	r30, r28
    6274:	fd 1f       	adc	r31, r29
    6276:	e9 0d       	add	r30, r9
    6278:	f1 1d       	adc	r31, r1
    627a:	80 81       	ld	r24, Z
    627c:	80 33       	cpi	r24, 0x30	; 48
    627e:	a1 f3       	breq	.-24     	; 0x6268 <vfprintf+0x260>
    6280:	f7 fe       	sbrs	r15, 7
    6282:	0a c0       	rjmp	.+20     	; 0x6298 <vfprintf+0x290>
    6284:	b9 2c       	mov	r11, r9
    6286:	b3 94       	inc	r11
    6288:	89 2d       	mov	r24, r9
    628a:	90 e0       	ldi	r25, 0x00	; 0
    628c:	c8 16       	cp	r12, r24
    628e:	d9 06       	cpc	r13, r25
    6290:	14 f0       	brlt	.+4      	; 0x6296 <vfprintf+0x28e>
    6292:	99 24       	eor	r9, r9
    6294:	01 c0       	rjmp	.+2      	; 0x6298 <vfprintf+0x290>
    6296:	9c 18       	sub	r9, r12
    6298:	f7 fc       	sbrc	r15, 7
    629a:	03 c0       	rjmp	.+6      	; 0x62a2 <vfprintf+0x29a>
    629c:	25 e0       	ldi	r18, 0x05	; 5
    629e:	30 e0       	ldi	r19, 0x00	; 0
    62a0:	09 c0       	rjmp	.+18     	; 0x62b4 <vfprintf+0x2ac>
    62a2:	1c 14       	cp	r1, r12
    62a4:	1d 04       	cpc	r1, r13
    62a6:	1c f0       	brlt	.+6      	; 0x62ae <vfprintf+0x2a6>
    62a8:	21 e0       	ldi	r18, 0x01	; 1
    62aa:	30 e0       	ldi	r19, 0x00	; 0
    62ac:	03 c0       	rjmp	.+6      	; 0x62b4 <vfprintf+0x2ac>
    62ae:	96 01       	movw	r18, r12
    62b0:	2f 5f       	subi	r18, 0xFF	; 255
    62b2:	3f 4f       	sbci	r19, 0xFF	; 255
    62b4:	11 23       	and	r17, r17
    62b6:	11 f0       	breq	.+4      	; 0x62bc <vfprintf+0x2b4>
    62b8:	2f 5f       	subi	r18, 0xFF	; 255
    62ba:	3f 4f       	sbci	r19, 0xFF	; 255
    62bc:	99 20       	and	r9, r9
    62be:	29 f0       	breq	.+10     	; 0x62ca <vfprintf+0x2c2>
    62c0:	89 2d       	mov	r24, r9
    62c2:	90 e0       	ldi	r25, 0x00	; 0
    62c4:	01 96       	adiw	r24, 0x01	; 1
    62c6:	28 0f       	add	r18, r24
    62c8:	39 1f       	adc	r19, r25
    62ca:	88 2d       	mov	r24, r8
    62cc:	90 e0       	ldi	r25, 0x00	; 0
    62ce:	28 17       	cp	r18, r24
    62d0:	39 07       	cpc	r19, r25
    62d2:	14 f0       	brlt	.+4      	; 0x62d8 <vfprintf+0x2d0>
    62d4:	88 24       	eor	r8, r8
    62d6:	01 c0       	rjmp	.+2      	; 0x62da <vfprintf+0x2d2>
    62d8:	82 1a       	sub	r8, r18
    62da:	4f 2c       	mov	r4, r15
    62dc:	55 24       	eor	r5, r5
    62de:	c2 01       	movw	r24, r4
    62e0:	89 70       	andi	r24, 0x09	; 9
    62e2:	90 70       	andi	r25, 0x00	; 0
    62e4:	89 2b       	or	r24, r25
    62e6:	31 f0       	breq	.+12     	; 0x62f4 <vfprintf+0x2ec>
    62e8:	07 c0       	rjmp	.+14     	; 0x62f8 <vfprintf+0x2f0>
    62ea:	80 e2       	ldi	r24, 0x20	; 32
    62ec:	90 e0       	ldi	r25, 0x00	; 0
    62ee:	b3 01       	movw	r22, r6
    62f0:	5e d4       	rcall	.+2236   	; 0x6bae <fputc>
    62f2:	8a 94       	dec	r8
    62f4:	88 20       	and	r8, r8
    62f6:	c9 f7       	brne	.-14     	; 0x62ea <vfprintf+0x2e2>
    62f8:	11 23       	and	r17, r17
    62fa:	21 f0       	breq	.+8      	; 0x6304 <vfprintf+0x2fc>
    62fc:	81 2f       	mov	r24, r17
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	b3 01       	movw	r22, r6
    6302:	55 d4       	rcall	.+2218   	; 0x6bae <fputc>
    6304:	43 fe       	sbrs	r4, 3
    6306:	06 c0       	rjmp	.+12     	; 0x6314 <vfprintf+0x30c>
    6308:	07 c0       	rjmp	.+14     	; 0x6318 <vfprintf+0x310>
    630a:	80 e3       	ldi	r24, 0x30	; 48
    630c:	90 e0       	ldi	r25, 0x00	; 0
    630e:	b3 01       	movw	r22, r6
    6310:	4e d4       	rcall	.+2204   	; 0x6bae <fputc>
    6312:	8a 94       	dec	r8
    6314:	88 20       	and	r8, r8
    6316:	c9 f7       	brne	.-14     	; 0x630a <vfprintf+0x302>
    6318:	f7 fe       	sbrs	r15, 7
    631a:	44 c0       	rjmp	.+136    	; 0x63a4 <vfprintf+0x39c>
    631c:	86 01       	movw	r16, r12
    631e:	d7 fe       	sbrs	r13, 7
    6320:	02 c0       	rjmp	.+4      	; 0x6326 <vfprintf+0x31e>
    6322:	00 e0       	ldi	r16, 0x00	; 0
    6324:	10 e0       	ldi	r17, 0x00	; 0
    6326:	76 01       	movw	r14, r12
    6328:	08 94       	sec
    632a:	e1 1c       	adc	r14, r1
    632c:	f1 1c       	adc	r15, r1
    632e:	e0 1a       	sub	r14, r16
    6330:	f1 0a       	sbc	r15, r17
    6332:	41 e0       	ldi	r20, 0x01	; 1
    6334:	50 e0       	ldi	r21, 0x00	; 0
    6336:	4c 0f       	add	r20, r28
    6338:	5d 1f       	adc	r21, r29
    633a:	e4 0e       	add	r14, r20
    633c:	f5 1e       	adc	r15, r21
    633e:	26 01       	movw	r4, r12
    6340:	4b 18       	sub	r4, r11
    6342:	51 08       	sbc	r5, r1
    6344:	89 2d       	mov	r24, r9
    6346:	90 e0       	ldi	r25, 0x00	; 0
    6348:	aa 24       	eor	r10, r10
    634a:	bb 24       	eor	r11, r11
    634c:	a8 1a       	sub	r10, r24
    634e:	b9 0a       	sbc	r11, r25
    6350:	5f ef       	ldi	r21, 0xFF	; 255
    6352:	0f 3f       	cpi	r16, 0xFF	; 255
    6354:	15 07       	cpc	r17, r21
    6356:	21 f4       	brne	.+8      	; 0x6360 <vfprintf+0x358>
    6358:	8e e2       	ldi	r24, 0x2E	; 46
    635a:	90 e0       	ldi	r25, 0x00	; 0
    635c:	b3 01       	movw	r22, r6
    635e:	27 d4       	rcall	.+2126   	; 0x6bae <fputc>
    6360:	c0 16       	cp	r12, r16
    6362:	d1 06       	cpc	r13, r17
    6364:	34 f0       	brlt	.+12     	; 0x6372 <vfprintf+0x36a>
    6366:	40 16       	cp	r4, r16
    6368:	51 06       	cpc	r5, r17
    636a:	1c f4       	brge	.+6      	; 0x6372 <vfprintf+0x36a>
    636c:	f7 01       	movw	r30, r14
    636e:	80 81       	ld	r24, Z
    6370:	01 c0       	rjmp	.+2      	; 0x6374 <vfprintf+0x36c>
    6372:	80 e3       	ldi	r24, 0x30	; 48
    6374:	01 50       	subi	r16, 0x01	; 1
    6376:	10 40       	sbci	r17, 0x00	; 0
    6378:	08 94       	sec
    637a:	e1 1c       	adc	r14, r1
    637c:	f1 1c       	adc	r15, r1
    637e:	0a 15       	cp	r16, r10
    6380:	1b 05       	cpc	r17, r11
    6382:	24 f0       	brlt	.+8      	; 0x638c <vfprintf+0x384>
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	b3 01       	movw	r22, r6
    6388:	12 d4       	rcall	.+2084   	; 0x6bae <fputc>
    638a:	e2 cf       	rjmp	.-60     	; 0x6350 <vfprintf+0x348>
    638c:	0c 15       	cp	r16, r12
    638e:	1d 05       	cpc	r17, r13
    6390:	39 f4       	brne	.+14     	; 0x63a0 <vfprintf+0x398>
    6392:	9a 81       	ldd	r25, Y+2	; 0x02
    6394:	96 33       	cpi	r25, 0x36	; 54
    6396:	18 f4       	brcc	.+6      	; 0x639e <vfprintf+0x396>
    6398:	95 33       	cpi	r25, 0x35	; 53
    639a:	11 f4       	brne	.+4      	; 0x63a0 <vfprintf+0x398>
    639c:	24 fe       	sbrs	r2, 4
    639e:	81 e3       	ldi	r24, 0x31	; 49
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	45 c0       	rjmp	.+138    	; 0x642e <vfprintf+0x426>
    63a4:	8a 81       	ldd	r24, Y+2	; 0x02
    63a6:	81 33       	cpi	r24, 0x31	; 49
    63a8:	09 f0       	breq	.+2      	; 0x63ac <vfprintf+0x3a4>
    63aa:	0f 7e       	andi	r16, 0xEF	; 239
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	b3 01       	movw	r22, r6
    63b0:	fe d3       	rcall	.+2044   	; 0x6bae <fputc>
    63b2:	99 20       	and	r9, r9
    63b4:	91 f0       	breq	.+36     	; 0x63da <vfprintf+0x3d2>
    63b6:	8e e2       	ldi	r24, 0x2E	; 46
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	b3 01       	movw	r22, r6
    63bc:	f8 d3       	rcall	.+2032   	; 0x6bae <fputc>
    63be:	12 e0       	ldi	r17, 0x02	; 2
    63c0:	e1 e0       	ldi	r30, 0x01	; 1
    63c2:	f0 e0       	ldi	r31, 0x00	; 0
    63c4:	ec 0f       	add	r30, r28
    63c6:	fd 1f       	adc	r31, r29
    63c8:	e1 0f       	add	r30, r17
    63ca:	f1 1d       	adc	r31, r1
    63cc:	1f 5f       	subi	r17, 0xFF	; 255
    63ce:	80 81       	ld	r24, Z
    63d0:	90 e0       	ldi	r25, 0x00	; 0
    63d2:	b3 01       	movw	r22, r6
    63d4:	ec d3       	rcall	.+2008   	; 0x6bae <fputc>
    63d6:	9a 94       	dec	r9
    63d8:	99 f7       	brne	.-26     	; 0x63c0 <vfprintf+0x3b8>
    63da:	44 fc       	sbrc	r4, 4
    63dc:	03 c0       	rjmp	.+6      	; 0x63e4 <vfprintf+0x3dc>
    63de:	85 e6       	ldi	r24, 0x65	; 101
    63e0:	90 e0       	ldi	r25, 0x00	; 0
    63e2:	02 c0       	rjmp	.+4      	; 0x63e8 <vfprintf+0x3e0>
    63e4:	85 e4       	ldi	r24, 0x45	; 69
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	b3 01       	movw	r22, r6
    63ea:	e1 d3       	rcall	.+1986   	; 0x6bae <fputc>
    63ec:	d7 fc       	sbrc	r13, 7
    63ee:	05 c0       	rjmp	.+10     	; 0x63fa <vfprintf+0x3f2>
    63f0:	c1 14       	cp	r12, r1
    63f2:	d1 04       	cpc	r13, r1
    63f4:	41 f4       	brne	.+16     	; 0x6406 <vfprintf+0x3fe>
    63f6:	04 ff       	sbrs	r16, 4
    63f8:	06 c0       	rjmp	.+12     	; 0x6406 <vfprintf+0x3fe>
    63fa:	d0 94       	com	r13
    63fc:	c1 94       	neg	r12
    63fe:	d1 08       	sbc	r13, r1
    6400:	d3 94       	inc	r13
    6402:	8d e2       	ldi	r24, 0x2D	; 45
    6404:	01 c0       	rjmp	.+2      	; 0x6408 <vfprintf+0x400>
    6406:	8b e2       	ldi	r24, 0x2B	; 43
    6408:	90 e0       	ldi	r25, 0x00	; 0
    640a:	b3 01       	movw	r22, r6
    640c:	d0 d3       	rcall	.+1952   	; 0x6bae <fputc>
    640e:	80 e3       	ldi	r24, 0x30	; 48
    6410:	05 c0       	rjmp	.+10     	; 0x641c <vfprintf+0x414>
    6412:	8f 5f       	subi	r24, 0xFF	; 255
    6414:	26 ef       	ldi	r18, 0xF6	; 246
    6416:	3f ef       	ldi	r19, 0xFF	; 255
    6418:	c2 0e       	add	r12, r18
    641a:	d3 1e       	adc	r13, r19
    641c:	3a e0       	ldi	r19, 0x0A	; 10
    641e:	c3 16       	cp	r12, r19
    6420:	d1 04       	cpc	r13, r1
    6422:	bc f7       	brge	.-18     	; 0x6412 <vfprintf+0x40a>
    6424:	90 e0       	ldi	r25, 0x00	; 0
    6426:	b3 01       	movw	r22, r6
    6428:	c2 d3       	rcall	.+1924   	; 0x6bae <fputc>
    642a:	c6 01       	movw	r24, r12
    642c:	c0 96       	adiw	r24, 0x30	; 48
    642e:	b3 01       	movw	r22, r6
    6430:	be d3       	rcall	.+1916   	; 0x6bae <fputc>
    6432:	cc 84       	ldd	r12, Y+12	; 0x0c
    6434:	dd 84       	ldd	r13, Y+13	; 0x0d
    6436:	46 c1       	rjmp	.+652    	; 0x66c4 <vfprintf+0x6bc>
    6438:	93 36       	cpi	r25, 0x63	; 99
    643a:	31 f0       	breq	.+12     	; 0x6448 <vfprintf+0x440>
    643c:	93 37       	cpi	r25, 0x73	; 115
    643e:	99 f0       	breq	.+38     	; 0x6466 <vfprintf+0x45e>
    6440:	93 35       	cpi	r25, 0x53	; 83
    6442:	09 f0       	breq	.+2      	; 0x6446 <vfprintf+0x43e>
    6444:	55 c0       	rjmp	.+170    	; 0x64f0 <vfprintf+0x4e8>
    6446:	22 c0       	rjmp	.+68     	; 0x648c <vfprintf+0x484>
    6448:	f6 01       	movw	r30, r12
    644a:	80 81       	ld	r24, Z
    644c:	89 83       	std	Y+1, r24	; 0x01
    644e:	5e 01       	movw	r10, r28
    6450:	08 94       	sec
    6452:	a1 1c       	adc	r10, r1
    6454:	b1 1c       	adc	r11, r1
    6456:	22 e0       	ldi	r18, 0x02	; 2
    6458:	30 e0       	ldi	r19, 0x00	; 0
    645a:	c2 0e       	add	r12, r18
    645c:	d3 1e       	adc	r13, r19
    645e:	21 e0       	ldi	r18, 0x01	; 1
    6460:	e2 2e       	mov	r14, r18
    6462:	f1 2c       	mov	r15, r1
    6464:	11 c0       	rjmp	.+34     	; 0x6488 <vfprintf+0x480>
    6466:	f6 01       	movw	r30, r12
    6468:	a0 80       	ld	r10, Z
    646a:	b1 80       	ldd	r11, Z+1	; 0x01
    646c:	16 fd       	sbrc	r17, 6
    646e:	03 c0       	rjmp	.+6      	; 0x6476 <vfprintf+0x46e>
    6470:	6f ef       	ldi	r22, 0xFF	; 255
    6472:	7f ef       	ldi	r23, 0xFF	; 255
    6474:	02 c0       	rjmp	.+4      	; 0x647a <vfprintf+0x472>
    6476:	69 2d       	mov	r22, r9
    6478:	70 e0       	ldi	r23, 0x00	; 0
    647a:	22 e0       	ldi	r18, 0x02	; 2
    647c:	30 e0       	ldi	r19, 0x00	; 0
    647e:	c2 0e       	add	r12, r18
    6480:	d3 1e       	adc	r13, r19
    6482:	c5 01       	movw	r24, r10
    6484:	89 d3       	rcall	.+1810   	; 0x6b98 <strnlen>
    6486:	7c 01       	movw	r14, r24
    6488:	1f 77       	andi	r17, 0x7F	; 127
    648a:	12 c0       	rjmp	.+36     	; 0x64b0 <vfprintf+0x4a8>
    648c:	f6 01       	movw	r30, r12
    648e:	a0 80       	ld	r10, Z
    6490:	b1 80       	ldd	r11, Z+1	; 0x01
    6492:	16 fd       	sbrc	r17, 6
    6494:	03 c0       	rjmp	.+6      	; 0x649c <vfprintf+0x494>
    6496:	6f ef       	ldi	r22, 0xFF	; 255
    6498:	7f ef       	ldi	r23, 0xFF	; 255
    649a:	02 c0       	rjmp	.+4      	; 0x64a0 <vfprintf+0x498>
    649c:	69 2d       	mov	r22, r9
    649e:	70 e0       	ldi	r23, 0x00	; 0
    64a0:	22 e0       	ldi	r18, 0x02	; 2
    64a2:	30 e0       	ldi	r19, 0x00	; 0
    64a4:	c2 0e       	add	r12, r18
    64a6:	d3 1e       	adc	r13, r19
    64a8:	c5 01       	movw	r24, r10
    64aa:	6b d3       	rcall	.+1750   	; 0x6b82 <strnlen_P>
    64ac:	7c 01       	movw	r14, r24
    64ae:	10 68       	ori	r17, 0x80	; 128
    64b0:	13 ff       	sbrs	r17, 3
    64b2:	06 c0       	rjmp	.+12     	; 0x64c0 <vfprintf+0x4b8>
    64b4:	19 c0       	rjmp	.+50     	; 0x64e8 <vfprintf+0x4e0>
    64b6:	80 e2       	ldi	r24, 0x20	; 32
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    64ba:	b3 01       	movw	r22, r6
    64bc:	78 d3       	rcall	.+1776   	; 0x6bae <fputc>
    64be:	8a 94       	dec	r8
    64c0:	88 2d       	mov	r24, r8
    64c2:	90 e0       	ldi	r25, 0x00	; 0
    64c4:	e8 16       	cp	r14, r24
    64c6:	f9 06       	cpc	r15, r25
    64c8:	b0 f3       	brcs	.-20     	; 0x64b6 <vfprintf+0x4ae>
    64ca:	0e c0       	rjmp	.+28     	; 0x64e8 <vfprintf+0x4e0>
    64cc:	f5 01       	movw	r30, r10
    64ce:	17 fd       	sbrc	r17, 7
    64d0:	85 91       	lpm	r24, Z+
    64d2:	17 ff       	sbrs	r17, 7
    64d4:	81 91       	ld	r24, Z+
    64d6:	5f 01       	movw	r10, r30
    64d8:	90 e0       	ldi	r25, 0x00	; 0
    64da:	b3 01       	movw	r22, r6
    64dc:	68 d3       	rcall	.+1744   	; 0x6bae <fputc>
    64de:	81 10       	cpse	r8, r1
    64e0:	8a 94       	dec	r8
    64e2:	08 94       	sec
    64e4:	e1 08       	sbc	r14, r1
    64e6:	f1 08       	sbc	r15, r1
    64e8:	e1 14       	cp	r14, r1
    64ea:	f1 04       	cpc	r15, r1
    64ec:	79 f7       	brne	.-34     	; 0x64cc <vfprintf+0x4c4>
    64ee:	ea c0       	rjmp	.+468    	; 0x66c4 <vfprintf+0x6bc>
    64f0:	94 36       	cpi	r25, 0x64	; 100
    64f2:	11 f0       	breq	.+4      	; 0x64f8 <vfprintf+0x4f0>
    64f4:	99 36       	cpi	r25, 0x69	; 105
    64f6:	81 f5       	brne	.+96     	; 0x6558 <vfprintf+0x550>
    64f8:	17 ff       	sbrs	r17, 7
    64fa:	08 c0       	rjmp	.+16     	; 0x650c <vfprintf+0x504>
    64fc:	f6 01       	movw	r30, r12
    64fe:	20 81       	ld	r18, Z
    6500:	31 81       	ldd	r19, Z+1	; 0x01
    6502:	42 81       	ldd	r20, Z+2	; 0x02
    6504:	53 81       	ldd	r21, Z+3	; 0x03
    6506:	84 e0       	ldi	r24, 0x04	; 4
    6508:	90 e0       	ldi	r25, 0x00	; 0
    650a:	0a c0       	rjmp	.+20     	; 0x6520 <vfprintf+0x518>
    650c:	f6 01       	movw	r30, r12
    650e:	80 81       	ld	r24, Z
    6510:	91 81       	ldd	r25, Z+1	; 0x01
    6512:	9c 01       	movw	r18, r24
    6514:	44 27       	eor	r20, r20
    6516:	37 fd       	sbrc	r19, 7
    6518:	40 95       	com	r20
    651a:	54 2f       	mov	r21, r20
    651c:	82 e0       	ldi	r24, 0x02	; 2
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	c8 0e       	add	r12, r24
    6522:	d9 1e       	adc	r13, r25
    6524:	9f e6       	ldi	r25, 0x6F	; 111
    6526:	f9 2e       	mov	r15, r25
    6528:	f1 22       	and	r15, r17
    652a:	57 ff       	sbrs	r21, 7
    652c:	09 c0       	rjmp	.+18     	; 0x6540 <vfprintf+0x538>
    652e:	50 95       	com	r21
    6530:	40 95       	com	r20
    6532:	30 95       	com	r19
    6534:	21 95       	neg	r18
    6536:	3f 4f       	sbci	r19, 0xFF	; 255
    6538:	4f 4f       	sbci	r20, 0xFF	; 255
    653a:	5f 4f       	sbci	r21, 0xFF	; 255
    653c:	90 e8       	ldi	r25, 0x80	; 128
    653e:	f9 2a       	or	r15, r25
    6540:	ca 01       	movw	r24, r20
    6542:	b9 01       	movw	r22, r18
    6544:	ae 01       	movw	r20, r28
    6546:	4f 5f       	subi	r20, 0xFF	; 255
    6548:	5f 4f       	sbci	r21, 0xFF	; 255
    654a:	2a e0       	ldi	r18, 0x0A	; 10
    654c:	30 e0       	ldi	r19, 0x00	; 0
    654e:	a2 d3       	rcall	.+1860   	; 0x6c94 <__ultoa_invert>
    6550:	e8 2e       	mov	r14, r24
    6552:	e8 89       	ldd	r30, Y+16	; 0x10
    6554:	ee 1a       	sub	r14, r30
    6556:	40 c0       	rjmp	.+128    	; 0x65d8 <vfprintf+0x5d0>
    6558:	95 37       	cpi	r25, 0x75	; 117
    655a:	21 f4       	brne	.+8      	; 0x6564 <vfprintf+0x55c>
    655c:	1f 7e       	andi	r17, 0xEF	; 239
    655e:	2a e0       	ldi	r18, 0x0A	; 10
    6560:	30 e0       	ldi	r19, 0x00	; 0
    6562:	1c c0       	rjmp	.+56     	; 0x659c <vfprintf+0x594>
    6564:	19 7f       	andi	r17, 0xF9	; 249
    6566:	9f 36       	cpi	r25, 0x6F	; 111
    6568:	61 f0       	breq	.+24     	; 0x6582 <vfprintf+0x57a>
    656a:	90 37       	cpi	r25, 0x70	; 112
    656c:	20 f4       	brcc	.+8      	; 0x6576 <vfprintf+0x56e>
    656e:	98 35       	cpi	r25, 0x58	; 88
    6570:	09 f0       	breq	.+2      	; 0x6574 <vfprintf+0x56c>
    6572:	ab c0       	rjmp	.+342    	; 0x66ca <vfprintf+0x6c2>
    6574:	0f c0       	rjmp	.+30     	; 0x6594 <vfprintf+0x58c>
    6576:	90 37       	cpi	r25, 0x70	; 112
    6578:	39 f0       	breq	.+14     	; 0x6588 <vfprintf+0x580>
    657a:	98 37       	cpi	r25, 0x78	; 120
    657c:	09 f0       	breq	.+2      	; 0x6580 <vfprintf+0x578>
    657e:	a5 c0       	rjmp	.+330    	; 0x66ca <vfprintf+0x6c2>
    6580:	04 c0       	rjmp	.+8      	; 0x658a <vfprintf+0x582>
    6582:	28 e0       	ldi	r18, 0x08	; 8
    6584:	30 e0       	ldi	r19, 0x00	; 0
    6586:	0a c0       	rjmp	.+20     	; 0x659c <vfprintf+0x594>
    6588:	10 61       	ori	r17, 0x10	; 16
    658a:	14 fd       	sbrc	r17, 4
    658c:	14 60       	ori	r17, 0x04	; 4
    658e:	20 e1       	ldi	r18, 0x10	; 16
    6590:	30 e0       	ldi	r19, 0x00	; 0
    6592:	04 c0       	rjmp	.+8      	; 0x659c <vfprintf+0x594>
    6594:	14 fd       	sbrc	r17, 4
    6596:	16 60       	ori	r17, 0x06	; 6
    6598:	20 e1       	ldi	r18, 0x10	; 16
    659a:	32 e0       	ldi	r19, 0x02	; 2
    659c:	17 ff       	sbrs	r17, 7
    659e:	08 c0       	rjmp	.+16     	; 0x65b0 <vfprintf+0x5a8>
    65a0:	f6 01       	movw	r30, r12
    65a2:	60 81       	ld	r22, Z
    65a4:	71 81       	ldd	r23, Z+1	; 0x01
    65a6:	82 81       	ldd	r24, Z+2	; 0x02
    65a8:	93 81       	ldd	r25, Z+3	; 0x03
    65aa:	44 e0       	ldi	r20, 0x04	; 4
    65ac:	50 e0       	ldi	r21, 0x00	; 0
    65ae:	08 c0       	rjmp	.+16     	; 0x65c0 <vfprintf+0x5b8>
    65b0:	f6 01       	movw	r30, r12
    65b2:	80 81       	ld	r24, Z
    65b4:	91 81       	ldd	r25, Z+1	; 0x01
    65b6:	bc 01       	movw	r22, r24
    65b8:	80 e0       	ldi	r24, 0x00	; 0
    65ba:	90 e0       	ldi	r25, 0x00	; 0
    65bc:	42 e0       	ldi	r20, 0x02	; 2
    65be:	50 e0       	ldi	r21, 0x00	; 0
    65c0:	c4 0e       	add	r12, r20
    65c2:	d5 1e       	adc	r13, r21
    65c4:	ae 01       	movw	r20, r28
    65c6:	4f 5f       	subi	r20, 0xFF	; 255
    65c8:	5f 4f       	sbci	r21, 0xFF	; 255
    65ca:	64 d3       	rcall	.+1736   	; 0x6c94 <__ultoa_invert>
    65cc:	e8 2e       	mov	r14, r24
    65ce:	58 89       	ldd	r21, Y+16	; 0x10
    65d0:	e5 1a       	sub	r14, r21
    65d2:	8f e7       	ldi	r24, 0x7F	; 127
    65d4:	f8 2e       	mov	r15, r24
    65d6:	f1 22       	and	r15, r17
    65d8:	f6 fe       	sbrs	r15, 6
    65da:	0b c0       	rjmp	.+22     	; 0x65f2 <vfprintf+0x5ea>
    65dc:	8e ef       	ldi	r24, 0xFE	; 254
    65de:	f8 22       	and	r15, r24
    65e0:	e9 14       	cp	r14, r9
    65e2:	38 f4       	brcc	.+14     	; 0x65f2 <vfprintf+0x5ea>
    65e4:	f4 fe       	sbrs	r15, 4
    65e6:	07 c0       	rjmp	.+14     	; 0x65f6 <vfprintf+0x5ee>
    65e8:	f2 fc       	sbrc	r15, 2
    65ea:	05 c0       	rjmp	.+10     	; 0x65f6 <vfprintf+0x5ee>
    65ec:	9f ee       	ldi	r25, 0xEF	; 239
    65ee:	f9 22       	and	r15, r25
    65f0:	02 c0       	rjmp	.+4      	; 0x65f6 <vfprintf+0x5ee>
    65f2:	1e 2d       	mov	r17, r14
    65f4:	01 c0       	rjmp	.+2      	; 0x65f8 <vfprintf+0x5f0>
    65f6:	19 2d       	mov	r17, r9
    65f8:	f4 fe       	sbrs	r15, 4
    65fa:	0d c0       	rjmp	.+26     	; 0x6616 <vfprintf+0x60e>
    65fc:	fe 01       	movw	r30, r28
    65fe:	ee 0d       	add	r30, r14
    6600:	f1 1d       	adc	r31, r1
    6602:	80 81       	ld	r24, Z
    6604:	80 33       	cpi	r24, 0x30	; 48
    6606:	19 f4       	brne	.+6      	; 0x660e <vfprintf+0x606>
    6608:	e9 ee       	ldi	r30, 0xE9	; 233
    660a:	fe 22       	and	r15, r30
    660c:	08 c0       	rjmp	.+16     	; 0x661e <vfprintf+0x616>
    660e:	1f 5f       	subi	r17, 0xFF	; 255
    6610:	f2 fe       	sbrs	r15, 2
    6612:	05 c0       	rjmp	.+10     	; 0x661e <vfprintf+0x616>
    6614:	03 c0       	rjmp	.+6      	; 0x661c <vfprintf+0x614>
    6616:	8f 2d       	mov	r24, r15
    6618:	86 78       	andi	r24, 0x86	; 134
    661a:	09 f0       	breq	.+2      	; 0x661e <vfprintf+0x616>
    661c:	1f 5f       	subi	r17, 0xFF	; 255
    661e:	0f 2d       	mov	r16, r15
    6620:	f3 fc       	sbrc	r15, 3
    6622:	13 c0       	rjmp	.+38     	; 0x664a <vfprintf+0x642>
    6624:	f0 fe       	sbrs	r15, 0
    6626:	0e c0       	rjmp	.+28     	; 0x6644 <vfprintf+0x63c>
    6628:	18 15       	cp	r17, r8
    662a:	10 f0       	brcs	.+4      	; 0x6630 <vfprintf+0x628>
    662c:	9e 2c       	mov	r9, r14
    662e:	0a c0       	rjmp	.+20     	; 0x6644 <vfprintf+0x63c>
    6630:	9e 2c       	mov	r9, r14
    6632:	98 0c       	add	r9, r8
    6634:	91 1a       	sub	r9, r17
    6636:	18 2d       	mov	r17, r8
    6638:	05 c0       	rjmp	.+10     	; 0x6644 <vfprintf+0x63c>
    663a:	80 e2       	ldi	r24, 0x20	; 32
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	b3 01       	movw	r22, r6
    6640:	b6 d2       	rcall	.+1388   	; 0x6bae <fputc>
    6642:	1f 5f       	subi	r17, 0xFF	; 255
    6644:	18 15       	cp	r17, r8
    6646:	c8 f3       	brcs	.-14     	; 0x663a <vfprintf+0x632>
    6648:	04 c0       	rjmp	.+8      	; 0x6652 <vfprintf+0x64a>
    664a:	18 15       	cp	r17, r8
    664c:	10 f4       	brcc	.+4      	; 0x6652 <vfprintf+0x64a>
    664e:	81 1a       	sub	r8, r17
    6650:	01 c0       	rjmp	.+2      	; 0x6654 <vfprintf+0x64c>
    6652:	88 24       	eor	r8, r8
    6654:	04 ff       	sbrs	r16, 4
    6656:	0e c0       	rjmp	.+28     	; 0x6674 <vfprintf+0x66c>
    6658:	80 e3       	ldi	r24, 0x30	; 48
    665a:	90 e0       	ldi	r25, 0x00	; 0
    665c:	b3 01       	movw	r22, r6
    665e:	a7 d2       	rcall	.+1358   	; 0x6bae <fputc>
    6660:	02 ff       	sbrs	r16, 2
    6662:	1b c0       	rjmp	.+54     	; 0x669a <vfprintf+0x692>
    6664:	01 fd       	sbrc	r16, 1
    6666:	03 c0       	rjmp	.+6      	; 0x666e <vfprintf+0x666>
    6668:	88 e7       	ldi	r24, 0x78	; 120
    666a:	90 e0       	ldi	r25, 0x00	; 0
    666c:	0e c0       	rjmp	.+28     	; 0x668a <vfprintf+0x682>
    666e:	88 e5       	ldi	r24, 0x58	; 88
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	0b c0       	rjmp	.+22     	; 0x668a <vfprintf+0x682>
    6674:	80 2f       	mov	r24, r16
    6676:	86 78       	andi	r24, 0x86	; 134
    6678:	81 f0       	breq	.+32     	; 0x669a <vfprintf+0x692>
    667a:	01 ff       	sbrs	r16, 1
    667c:	02 c0       	rjmp	.+4      	; 0x6682 <vfprintf+0x67a>
    667e:	8b e2       	ldi	r24, 0x2B	; 43
    6680:	01 c0       	rjmp	.+2      	; 0x6684 <vfprintf+0x67c>
    6682:	80 e2       	ldi	r24, 0x20	; 32
    6684:	f7 fc       	sbrc	r15, 7
    6686:	8d e2       	ldi	r24, 0x2D	; 45
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	b3 01       	movw	r22, r6
    668c:	90 d2       	rcall	.+1312   	; 0x6bae <fputc>
    668e:	05 c0       	rjmp	.+10     	; 0x669a <vfprintf+0x692>
    6690:	80 e3       	ldi	r24, 0x30	; 48
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	b3 01       	movw	r22, r6
    6696:	8b d2       	rcall	.+1302   	; 0x6bae <fputc>
    6698:	9a 94       	dec	r9
    669a:	e9 14       	cp	r14, r9
    669c:	c8 f3       	brcs	.-14     	; 0x6690 <vfprintf+0x688>
    669e:	ea 94       	dec	r14
    66a0:	e1 e0       	ldi	r30, 0x01	; 1
    66a2:	f0 e0       	ldi	r31, 0x00	; 0
    66a4:	ec 0f       	add	r30, r28
    66a6:	fd 1f       	adc	r31, r29
    66a8:	ee 0d       	add	r30, r14
    66aa:	f1 1d       	adc	r31, r1
    66ac:	80 81       	ld	r24, Z
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	b3 01       	movw	r22, r6
    66b2:	7d d2       	rcall	.+1274   	; 0x6bae <fputc>
    66b4:	ee 20       	and	r14, r14
    66b6:	99 f7       	brne	.-26     	; 0x669e <vfprintf+0x696>
    66b8:	05 c0       	rjmp	.+10     	; 0x66c4 <vfprintf+0x6bc>
    66ba:	80 e2       	ldi	r24, 0x20	; 32
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	b3 01       	movw	r22, r6
    66c0:	76 d2       	rcall	.+1260   	; 0x6bae <fputc>
    66c2:	8a 94       	dec	r8
    66c4:	88 20       	and	r8, r8
    66c6:	c9 f7       	brne	.-14     	; 0x66ba <vfprintf+0x6b2>
    66c8:	b6 cc       	rjmp	.-1684   	; 0x6036 <vfprintf+0x2e>
    66ca:	f3 01       	movw	r30, r6
    66cc:	66 81       	ldd	r22, Z+6	; 0x06
    66ce:	77 81       	ldd	r23, Z+7	; 0x07
    66d0:	cb 01       	movw	r24, r22
    66d2:	61 96       	adiw	r28, 0x11	; 17
    66d4:	e2 e1       	ldi	r30, 0x12	; 18
    66d6:	5d c0       	rjmp	.+186    	; 0x6792 <__epilogue_restores__>

000066d8 <__mulsi3>:
    66d8:	62 9f       	mul	r22, r18
    66da:	d0 01       	movw	r26, r0
    66dc:	73 9f       	mul	r23, r19
    66de:	f0 01       	movw	r30, r0
    66e0:	82 9f       	mul	r24, r18
    66e2:	e0 0d       	add	r30, r0
    66e4:	f1 1d       	adc	r31, r1
    66e6:	64 9f       	mul	r22, r20
    66e8:	e0 0d       	add	r30, r0
    66ea:	f1 1d       	adc	r31, r1
    66ec:	92 9f       	mul	r25, r18
    66ee:	f0 0d       	add	r31, r0
    66f0:	83 9f       	mul	r24, r19
    66f2:	f0 0d       	add	r31, r0
    66f4:	74 9f       	mul	r23, r20
    66f6:	f0 0d       	add	r31, r0
    66f8:	65 9f       	mul	r22, r21
    66fa:	f0 0d       	add	r31, r0
    66fc:	99 27       	eor	r25, r25
    66fe:	72 9f       	mul	r23, r18
    6700:	b0 0d       	add	r27, r0
    6702:	e1 1d       	adc	r30, r1
    6704:	f9 1f       	adc	r31, r25
    6706:	63 9f       	mul	r22, r19
    6708:	b0 0d       	add	r27, r0
    670a:	e1 1d       	adc	r30, r1
    670c:	f9 1f       	adc	r31, r25
    670e:	bd 01       	movw	r22, r26
    6710:	cf 01       	movw	r24, r30
    6712:	11 24       	eor	r1, r1
    6714:	08 95       	ret

00006716 <__udivmodsi4>:
    6716:	a1 e2       	ldi	r26, 0x21	; 33
    6718:	1a 2e       	mov	r1, r26
    671a:	aa 1b       	sub	r26, r26
    671c:	bb 1b       	sub	r27, r27
    671e:	fd 01       	movw	r30, r26
    6720:	0d c0       	rjmp	.+26     	; 0x673c <__udivmodsi4_ep>

00006722 <__udivmodsi4_loop>:
    6722:	aa 1f       	adc	r26, r26
    6724:	bb 1f       	adc	r27, r27
    6726:	ee 1f       	adc	r30, r30
    6728:	ff 1f       	adc	r31, r31
    672a:	a2 17       	cp	r26, r18
    672c:	b3 07       	cpc	r27, r19
    672e:	e4 07       	cpc	r30, r20
    6730:	f5 07       	cpc	r31, r21
    6732:	20 f0       	brcs	.+8      	; 0x673c <__udivmodsi4_ep>
    6734:	a2 1b       	sub	r26, r18
    6736:	b3 0b       	sbc	r27, r19
    6738:	e4 0b       	sbc	r30, r20
    673a:	f5 0b       	sbc	r31, r21

0000673c <__udivmodsi4_ep>:
    673c:	66 1f       	adc	r22, r22
    673e:	77 1f       	adc	r23, r23
    6740:	88 1f       	adc	r24, r24
    6742:	99 1f       	adc	r25, r25
    6744:	1a 94       	dec	r1
    6746:	69 f7       	brne	.-38     	; 0x6722 <__udivmodsi4_loop>
    6748:	60 95       	com	r22
    674a:	70 95       	com	r23
    674c:	80 95       	com	r24
    674e:	90 95       	com	r25
    6750:	9b 01       	movw	r18, r22
    6752:	ac 01       	movw	r20, r24
    6754:	bd 01       	movw	r22, r26
    6756:	cf 01       	movw	r24, r30
    6758:	08 95       	ret

0000675a <__prologue_saves__>:
    675a:	2f 92       	push	r2
    675c:	3f 92       	push	r3
    675e:	4f 92       	push	r4
    6760:	5f 92       	push	r5
    6762:	6f 92       	push	r6
    6764:	7f 92       	push	r7
    6766:	8f 92       	push	r8
    6768:	9f 92       	push	r9
    676a:	af 92       	push	r10
    676c:	bf 92       	push	r11
    676e:	cf 92       	push	r12
    6770:	df 92       	push	r13
    6772:	ef 92       	push	r14
    6774:	ff 92       	push	r15
    6776:	0f 93       	push	r16
    6778:	1f 93       	push	r17
    677a:	cf 93       	push	r28
    677c:	df 93       	push	r29
    677e:	cd b7       	in	r28, 0x3d	; 61
    6780:	de b7       	in	r29, 0x3e	; 62
    6782:	ca 1b       	sub	r28, r26
    6784:	db 0b       	sbc	r29, r27
    6786:	0f b6       	in	r0, 0x3f	; 63
    6788:	f8 94       	cli
    678a:	de bf       	out	0x3e, r29	; 62
    678c:	0f be       	out	0x3f, r0	; 63
    678e:	cd bf       	out	0x3d, r28	; 61
    6790:	09 94       	ijmp

00006792 <__epilogue_restores__>:
    6792:	2a 88       	ldd	r2, Y+18	; 0x12
    6794:	39 88       	ldd	r3, Y+17	; 0x11
    6796:	48 88       	ldd	r4, Y+16	; 0x10
    6798:	5f 84       	ldd	r5, Y+15	; 0x0f
    679a:	6e 84       	ldd	r6, Y+14	; 0x0e
    679c:	7d 84       	ldd	r7, Y+13	; 0x0d
    679e:	8c 84       	ldd	r8, Y+12	; 0x0c
    67a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    67a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    67a4:	b9 84       	ldd	r11, Y+9	; 0x09
    67a6:	c8 84       	ldd	r12, Y+8	; 0x08
    67a8:	df 80       	ldd	r13, Y+7	; 0x07
    67aa:	ee 80       	ldd	r14, Y+6	; 0x06
    67ac:	fd 80       	ldd	r15, Y+5	; 0x05
    67ae:	0c 81       	ldd	r16, Y+4	; 0x04
    67b0:	1b 81       	ldd	r17, Y+3	; 0x03
    67b2:	aa 81       	ldd	r26, Y+2	; 0x02
    67b4:	b9 81       	ldd	r27, Y+1	; 0x01
    67b6:	ce 0f       	add	r28, r30
    67b8:	d1 1d       	adc	r29, r1
    67ba:	0f b6       	in	r0, 0x3f	; 63
    67bc:	f8 94       	cli
    67be:	de bf       	out	0x3e, r29	; 62
    67c0:	0f be       	out	0x3f, r0	; 63
    67c2:	cd bf       	out	0x3d, r28	; 61
    67c4:	ed 01       	movw	r28, r26
    67c6:	08 95       	ret

000067c8 <malloc>:
    67c8:	cf 93       	push	r28
    67ca:	df 93       	push	r29
    67cc:	bc 01       	movw	r22, r24
    67ce:	82 30       	cpi	r24, 0x02	; 2
    67d0:	91 05       	cpc	r25, r1
    67d2:	10 f4       	brcc	.+4      	; 0x67d8 <malloc+0x10>
    67d4:	62 e0       	ldi	r22, 0x02	; 2
    67d6:	70 e0       	ldi	r23, 0x00	; 0
    67d8:	a0 91 1c 07 	lds	r26, 0x071C
    67dc:	b0 91 1d 07 	lds	r27, 0x071D
    67e0:	ed 01       	movw	r28, r26
    67e2:	e0 e0       	ldi	r30, 0x00	; 0
    67e4:	f0 e0       	ldi	r31, 0x00	; 0
    67e6:	40 e0       	ldi	r20, 0x00	; 0
    67e8:	50 e0       	ldi	r21, 0x00	; 0
    67ea:	21 c0       	rjmp	.+66     	; 0x682e <malloc+0x66>
    67ec:	88 81       	ld	r24, Y
    67ee:	99 81       	ldd	r25, Y+1	; 0x01
    67f0:	86 17       	cp	r24, r22
    67f2:	97 07       	cpc	r25, r23
    67f4:	69 f4       	brne	.+26     	; 0x6810 <malloc+0x48>
    67f6:	8a 81       	ldd	r24, Y+2	; 0x02
    67f8:	9b 81       	ldd	r25, Y+3	; 0x03
    67fa:	30 97       	sbiw	r30, 0x00	; 0
    67fc:	19 f0       	breq	.+6      	; 0x6804 <malloc+0x3c>
    67fe:	93 83       	std	Z+3, r25	; 0x03
    6800:	82 83       	std	Z+2, r24	; 0x02
    6802:	04 c0       	rjmp	.+8      	; 0x680c <malloc+0x44>
    6804:	90 93 1d 07 	sts	0x071D, r25
    6808:	80 93 1c 07 	sts	0x071C, r24
    680c:	fe 01       	movw	r30, r28
    680e:	34 c0       	rjmp	.+104    	; 0x6878 <malloc+0xb0>
    6810:	68 17       	cp	r22, r24
    6812:	79 07       	cpc	r23, r25
    6814:	38 f4       	brcc	.+14     	; 0x6824 <malloc+0x5c>
    6816:	41 15       	cp	r20, r1
    6818:	51 05       	cpc	r21, r1
    681a:	19 f0       	breq	.+6      	; 0x6822 <malloc+0x5a>
    681c:	84 17       	cp	r24, r20
    681e:	95 07       	cpc	r25, r21
    6820:	08 f4       	brcc	.+2      	; 0x6824 <malloc+0x5c>
    6822:	ac 01       	movw	r20, r24
    6824:	fe 01       	movw	r30, r28
    6826:	8a 81       	ldd	r24, Y+2	; 0x02
    6828:	9b 81       	ldd	r25, Y+3	; 0x03
    682a:	9c 01       	movw	r18, r24
    682c:	e9 01       	movw	r28, r18
    682e:	20 97       	sbiw	r28, 0x00	; 0
    6830:	e9 f6       	brne	.-70     	; 0x67ec <malloc+0x24>
    6832:	41 15       	cp	r20, r1
    6834:	51 05       	cpc	r21, r1
    6836:	a9 f1       	breq	.+106    	; 0x68a2 <malloc+0xda>
    6838:	ca 01       	movw	r24, r20
    683a:	86 1b       	sub	r24, r22
    683c:	97 0b       	sbc	r25, r23
    683e:	04 97       	sbiw	r24, 0x04	; 4
    6840:	08 f4       	brcc	.+2      	; 0x6844 <malloc+0x7c>
    6842:	ba 01       	movw	r22, r20
    6844:	e0 e0       	ldi	r30, 0x00	; 0
    6846:	f0 e0       	ldi	r31, 0x00	; 0
    6848:	2a c0       	rjmp	.+84     	; 0x689e <malloc+0xd6>
    684a:	8d 91       	ld	r24, X+
    684c:	9c 91       	ld	r25, X
    684e:	11 97       	sbiw	r26, 0x01	; 1
    6850:	84 17       	cp	r24, r20
    6852:	95 07       	cpc	r25, r21
    6854:	f9 f4       	brne	.+62     	; 0x6894 <malloc+0xcc>
    6856:	64 17       	cp	r22, r20
    6858:	75 07       	cpc	r23, r21
    685a:	81 f4       	brne	.+32     	; 0x687c <malloc+0xb4>
    685c:	12 96       	adiw	r26, 0x02	; 2
    685e:	8d 91       	ld	r24, X+
    6860:	9c 91       	ld	r25, X
    6862:	13 97       	sbiw	r26, 0x03	; 3
    6864:	30 97       	sbiw	r30, 0x00	; 0
    6866:	19 f0       	breq	.+6      	; 0x686e <malloc+0xa6>
    6868:	93 83       	std	Z+3, r25	; 0x03
    686a:	82 83       	std	Z+2, r24	; 0x02
    686c:	04 c0       	rjmp	.+8      	; 0x6876 <malloc+0xae>
    686e:	90 93 1d 07 	sts	0x071D, r25
    6872:	80 93 1c 07 	sts	0x071C, r24
    6876:	fd 01       	movw	r30, r26
    6878:	32 96       	adiw	r30, 0x02	; 2
    687a:	4f c0       	rjmp	.+158    	; 0x691a <malloc+0x152>
    687c:	ca 01       	movw	r24, r20
    687e:	86 1b       	sub	r24, r22
    6880:	97 0b       	sbc	r25, r23
    6882:	fd 01       	movw	r30, r26
    6884:	e8 0f       	add	r30, r24
    6886:	f9 1f       	adc	r31, r25
    6888:	61 93       	st	Z+, r22
    688a:	71 93       	st	Z+, r23
    688c:	02 97       	sbiw	r24, 0x02	; 2
    688e:	8d 93       	st	X+, r24
    6890:	9c 93       	st	X, r25
    6892:	43 c0       	rjmp	.+134    	; 0x691a <malloc+0x152>
    6894:	fd 01       	movw	r30, r26
    6896:	82 81       	ldd	r24, Z+2	; 0x02
    6898:	93 81       	ldd	r25, Z+3	; 0x03
    689a:	9c 01       	movw	r18, r24
    689c:	d9 01       	movw	r26, r18
    689e:	10 97       	sbiw	r26, 0x00	; 0
    68a0:	a1 f6       	brne	.-88     	; 0x684a <malloc+0x82>
    68a2:	80 91 1a 07 	lds	r24, 0x071A
    68a6:	90 91 1b 07 	lds	r25, 0x071B
    68aa:	89 2b       	or	r24, r25
    68ac:	41 f4       	brne	.+16     	; 0x68be <malloc+0xf6>
    68ae:	80 91 4d 03 	lds	r24, 0x034D
    68b2:	90 91 4e 03 	lds	r25, 0x034E
    68b6:	90 93 1b 07 	sts	0x071B, r25
    68ba:	80 93 1a 07 	sts	0x071A, r24
    68be:	40 91 4f 03 	lds	r20, 0x034F
    68c2:	50 91 50 03 	lds	r21, 0x0350
    68c6:	41 15       	cp	r20, r1
    68c8:	51 05       	cpc	r21, r1
    68ca:	41 f4       	brne	.+16     	; 0x68dc <malloc+0x114>
    68cc:	4d b7       	in	r20, 0x3d	; 61
    68ce:	5e b7       	in	r21, 0x3e	; 62
    68d0:	80 91 4b 03 	lds	r24, 0x034B
    68d4:	90 91 4c 03 	lds	r25, 0x034C
    68d8:	48 1b       	sub	r20, r24
    68da:	59 0b       	sbc	r21, r25
    68dc:	20 91 1a 07 	lds	r18, 0x071A
    68e0:	30 91 1b 07 	lds	r19, 0x071B
    68e4:	24 17       	cp	r18, r20
    68e6:	35 07       	cpc	r19, r21
    68e8:	b0 f4       	brcc	.+44     	; 0x6916 <malloc+0x14e>
    68ea:	ca 01       	movw	r24, r20
    68ec:	82 1b       	sub	r24, r18
    68ee:	93 0b       	sbc	r25, r19
    68f0:	86 17       	cp	r24, r22
    68f2:	97 07       	cpc	r25, r23
    68f4:	80 f0       	brcs	.+32     	; 0x6916 <malloc+0x14e>
    68f6:	ab 01       	movw	r20, r22
    68f8:	4e 5f       	subi	r20, 0xFE	; 254
    68fa:	5f 4f       	sbci	r21, 0xFF	; 255
    68fc:	84 17       	cp	r24, r20
    68fe:	95 07       	cpc	r25, r21
    6900:	50 f0       	brcs	.+20     	; 0x6916 <malloc+0x14e>
    6902:	42 0f       	add	r20, r18
    6904:	53 1f       	adc	r21, r19
    6906:	50 93 1b 07 	sts	0x071B, r21
    690a:	40 93 1a 07 	sts	0x071A, r20
    690e:	f9 01       	movw	r30, r18
    6910:	61 93       	st	Z+, r22
    6912:	71 93       	st	Z+, r23
    6914:	02 c0       	rjmp	.+4      	; 0x691a <malloc+0x152>
    6916:	e0 e0       	ldi	r30, 0x00	; 0
    6918:	f0 e0       	ldi	r31, 0x00	; 0
    691a:	cf 01       	movw	r24, r30
    691c:	df 91       	pop	r29
    691e:	cf 91       	pop	r28
    6920:	08 95       	ret

00006922 <free>:
    6922:	cf 93       	push	r28
    6924:	df 93       	push	r29
    6926:	00 97       	sbiw	r24, 0x00	; 0
    6928:	09 f4       	brne	.+2      	; 0x692c <free+0xa>
    692a:	50 c0       	rjmp	.+160    	; 0x69cc <free+0xaa>
    692c:	ec 01       	movw	r28, r24
    692e:	22 97       	sbiw	r28, 0x02	; 2
    6930:	1b 82       	std	Y+3, r1	; 0x03
    6932:	1a 82       	std	Y+2, r1	; 0x02
    6934:	a0 91 1c 07 	lds	r26, 0x071C
    6938:	b0 91 1d 07 	lds	r27, 0x071D
    693c:	10 97       	sbiw	r26, 0x00	; 0
    693e:	09 f1       	breq	.+66     	; 0x6982 <free+0x60>
    6940:	40 e0       	ldi	r20, 0x00	; 0
    6942:	50 e0       	ldi	r21, 0x00	; 0
    6944:	ac 17       	cp	r26, r28
    6946:	bd 07       	cpc	r27, r29
    6948:	08 f1       	brcs	.+66     	; 0x698c <free+0x6a>
    694a:	bb 83       	std	Y+3, r27	; 0x03
    694c:	aa 83       	std	Y+2, r26	; 0x02
    694e:	fe 01       	movw	r30, r28
    6950:	21 91       	ld	r18, Z+
    6952:	31 91       	ld	r19, Z+
    6954:	e2 0f       	add	r30, r18
    6956:	f3 1f       	adc	r31, r19
    6958:	ae 17       	cp	r26, r30
    695a:	bf 07       	cpc	r27, r31
    695c:	79 f4       	brne	.+30     	; 0x697c <free+0x5a>
    695e:	8d 91       	ld	r24, X+
    6960:	9c 91       	ld	r25, X
    6962:	11 97       	sbiw	r26, 0x01	; 1
    6964:	28 0f       	add	r18, r24
    6966:	39 1f       	adc	r19, r25
    6968:	2e 5f       	subi	r18, 0xFE	; 254
    696a:	3f 4f       	sbci	r19, 0xFF	; 255
    696c:	39 83       	std	Y+1, r19	; 0x01
    696e:	28 83       	st	Y, r18
    6970:	12 96       	adiw	r26, 0x02	; 2
    6972:	8d 91       	ld	r24, X+
    6974:	9c 91       	ld	r25, X
    6976:	13 97       	sbiw	r26, 0x03	; 3
    6978:	9b 83       	std	Y+3, r25	; 0x03
    697a:	8a 83       	std	Y+2, r24	; 0x02
    697c:	41 15       	cp	r20, r1
    697e:	51 05       	cpc	r21, r1
    6980:	71 f4       	brne	.+28     	; 0x699e <free+0x7c>
    6982:	d0 93 1d 07 	sts	0x071D, r29
    6986:	c0 93 1c 07 	sts	0x071C, r28
    698a:	20 c0       	rjmp	.+64     	; 0x69cc <free+0xaa>
    698c:	12 96       	adiw	r26, 0x02	; 2
    698e:	8d 91       	ld	r24, X+
    6990:	9c 91       	ld	r25, X
    6992:	13 97       	sbiw	r26, 0x03	; 3
    6994:	ad 01       	movw	r20, r26
    6996:	00 97       	sbiw	r24, 0x00	; 0
    6998:	11 f0       	breq	.+4      	; 0x699e <free+0x7c>
    699a:	dc 01       	movw	r26, r24
    699c:	d3 cf       	rjmp	.-90     	; 0x6944 <free+0x22>
    699e:	fa 01       	movw	r30, r20
    69a0:	d3 83       	std	Z+3, r29	; 0x03
    69a2:	c2 83       	std	Z+2, r28	; 0x02
    69a4:	21 91       	ld	r18, Z+
    69a6:	31 91       	ld	r19, Z+
    69a8:	e2 0f       	add	r30, r18
    69aa:	f3 1f       	adc	r31, r19
    69ac:	ce 17       	cp	r28, r30
    69ae:	df 07       	cpc	r29, r31
    69b0:	69 f4       	brne	.+26     	; 0x69cc <free+0xaa>
    69b2:	88 81       	ld	r24, Y
    69b4:	99 81       	ldd	r25, Y+1	; 0x01
    69b6:	28 0f       	add	r18, r24
    69b8:	39 1f       	adc	r19, r25
    69ba:	2e 5f       	subi	r18, 0xFE	; 254
    69bc:	3f 4f       	sbci	r19, 0xFF	; 255
    69be:	fa 01       	movw	r30, r20
    69c0:	31 83       	std	Z+1, r19	; 0x01
    69c2:	20 83       	st	Z, r18
    69c4:	8a 81       	ldd	r24, Y+2	; 0x02
    69c6:	9b 81       	ldd	r25, Y+3	; 0x03
    69c8:	93 83       	std	Z+3, r25	; 0x03
    69ca:	82 83       	std	Z+2, r24	; 0x02
    69cc:	df 91       	pop	r29
    69ce:	cf 91       	pop	r28
    69d0:	08 95       	ret

000069d2 <__ftoa_engine>:
    69d2:	28 30       	cpi	r18, 0x08	; 8
    69d4:	08 f0       	brcs	.+2      	; 0x69d8 <__ftoa_engine+0x6>
    69d6:	27 e0       	ldi	r18, 0x07	; 7
    69d8:	33 27       	eor	r19, r19
    69da:	da 01       	movw	r26, r20
    69dc:	99 0f       	add	r25, r25
    69de:	31 1d       	adc	r19, r1
    69e0:	87 fd       	sbrc	r24, 7
    69e2:	91 60       	ori	r25, 0x01	; 1
    69e4:	00 96       	adiw	r24, 0x00	; 0
    69e6:	61 05       	cpc	r22, r1
    69e8:	71 05       	cpc	r23, r1
    69ea:	39 f4       	brne	.+14     	; 0x69fa <__ftoa_engine+0x28>
    69ec:	32 60       	ori	r19, 0x02	; 2
    69ee:	2e 5f       	subi	r18, 0xFE	; 254
    69f0:	3d 93       	st	X+, r19
    69f2:	30 e3       	ldi	r19, 0x30	; 48
    69f4:	2a 95       	dec	r18
    69f6:	e1 f7       	brne	.-8      	; 0x69f0 <__ftoa_engine+0x1e>
    69f8:	08 95       	ret
    69fa:	9f 3f       	cpi	r25, 0xFF	; 255
    69fc:	30 f0       	brcs	.+12     	; 0x6a0a <__ftoa_engine+0x38>
    69fe:	80 38       	cpi	r24, 0x80	; 128
    6a00:	71 05       	cpc	r23, r1
    6a02:	61 05       	cpc	r22, r1
    6a04:	09 f0       	breq	.+2      	; 0x6a08 <__ftoa_engine+0x36>
    6a06:	3c 5f       	subi	r19, 0xFC	; 252
    6a08:	3c 5f       	subi	r19, 0xFC	; 252
    6a0a:	3d 93       	st	X+, r19
    6a0c:	91 30       	cpi	r25, 0x01	; 1
    6a0e:	08 f0       	brcs	.+2      	; 0x6a12 <__ftoa_engine+0x40>
    6a10:	80 68       	ori	r24, 0x80	; 128
    6a12:	91 1d       	adc	r25, r1
    6a14:	df 93       	push	r29
    6a16:	cf 93       	push	r28
    6a18:	1f 93       	push	r17
    6a1a:	0f 93       	push	r16
    6a1c:	ff 92       	push	r15
    6a1e:	ef 92       	push	r14
    6a20:	19 2f       	mov	r17, r25
    6a22:	98 7f       	andi	r25, 0xF8	; 248
    6a24:	96 95       	lsr	r25
    6a26:	e9 2f       	mov	r30, r25
    6a28:	96 95       	lsr	r25
    6a2a:	96 95       	lsr	r25
    6a2c:	e9 0f       	add	r30, r25
    6a2e:	ff 27       	eor	r31, r31
    6a30:	ef 53       	subi	r30, 0x3F	; 63
    6a32:	fa 4f       	sbci	r31, 0xFA	; 250
    6a34:	99 27       	eor	r25, r25
    6a36:	33 27       	eor	r19, r19
    6a38:	ee 24       	eor	r14, r14
    6a3a:	ff 24       	eor	r15, r15
    6a3c:	a7 01       	movw	r20, r14
    6a3e:	e7 01       	movw	r28, r14
    6a40:	05 90       	lpm	r0, Z+
    6a42:	08 94       	sec
    6a44:	07 94       	ror	r0
    6a46:	28 f4       	brcc	.+10     	; 0x6a52 <__ftoa_engine+0x80>
    6a48:	36 0f       	add	r19, r22
    6a4a:	e7 1e       	adc	r14, r23
    6a4c:	f8 1e       	adc	r15, r24
    6a4e:	49 1f       	adc	r20, r25
    6a50:	51 1d       	adc	r21, r1
    6a52:	66 0f       	add	r22, r22
    6a54:	77 1f       	adc	r23, r23
    6a56:	88 1f       	adc	r24, r24
    6a58:	99 1f       	adc	r25, r25
    6a5a:	06 94       	lsr	r0
    6a5c:	a1 f7       	brne	.-24     	; 0x6a46 <__ftoa_engine+0x74>
    6a5e:	05 90       	lpm	r0, Z+
    6a60:	07 94       	ror	r0
    6a62:	28 f4       	brcc	.+10     	; 0x6a6e <__ftoa_engine+0x9c>
    6a64:	e7 0e       	add	r14, r23
    6a66:	f8 1e       	adc	r15, r24
    6a68:	49 1f       	adc	r20, r25
    6a6a:	56 1f       	adc	r21, r22
    6a6c:	c1 1d       	adc	r28, r1
    6a6e:	77 0f       	add	r23, r23
    6a70:	88 1f       	adc	r24, r24
    6a72:	99 1f       	adc	r25, r25
    6a74:	66 1f       	adc	r22, r22
    6a76:	06 94       	lsr	r0
    6a78:	a1 f7       	brne	.-24     	; 0x6a62 <__ftoa_engine+0x90>
    6a7a:	05 90       	lpm	r0, Z+
    6a7c:	07 94       	ror	r0
    6a7e:	28 f4       	brcc	.+10     	; 0x6a8a <__ftoa_engine+0xb8>
    6a80:	f8 0e       	add	r15, r24
    6a82:	49 1f       	adc	r20, r25
    6a84:	56 1f       	adc	r21, r22
    6a86:	c7 1f       	adc	r28, r23
    6a88:	d1 1d       	adc	r29, r1
    6a8a:	88 0f       	add	r24, r24
    6a8c:	99 1f       	adc	r25, r25
    6a8e:	66 1f       	adc	r22, r22
    6a90:	77 1f       	adc	r23, r23
    6a92:	06 94       	lsr	r0
    6a94:	a1 f7       	brne	.-24     	; 0x6a7e <__ftoa_engine+0xac>
    6a96:	05 90       	lpm	r0, Z+
    6a98:	07 94       	ror	r0
    6a9a:	20 f4       	brcc	.+8      	; 0x6aa4 <__ftoa_engine+0xd2>
    6a9c:	49 0f       	add	r20, r25
    6a9e:	56 1f       	adc	r21, r22
    6aa0:	c7 1f       	adc	r28, r23
    6aa2:	d8 1f       	adc	r29, r24
    6aa4:	99 0f       	add	r25, r25
    6aa6:	66 1f       	adc	r22, r22
    6aa8:	77 1f       	adc	r23, r23
    6aaa:	88 1f       	adc	r24, r24
    6aac:	06 94       	lsr	r0
    6aae:	a9 f7       	brne	.-22     	; 0x6a9a <__ftoa_engine+0xc8>
    6ab0:	84 91       	lpm	r24, Z+
    6ab2:	10 95       	com	r17
    6ab4:	17 70       	andi	r17, 0x07	; 7
    6ab6:	41 f0       	breq	.+16     	; 0x6ac8 <__ftoa_engine+0xf6>
    6ab8:	d6 95       	lsr	r29
    6aba:	c7 95       	ror	r28
    6abc:	57 95       	ror	r21
    6abe:	47 95       	ror	r20
    6ac0:	f7 94       	ror	r15
    6ac2:	e7 94       	ror	r14
    6ac4:	1a 95       	dec	r17
    6ac6:	c1 f7       	brne	.-16     	; 0x6ab8 <__ftoa_engine+0xe6>
    6ac8:	e7 e6       	ldi	r30, 0x67	; 103
    6aca:	f5 e0       	ldi	r31, 0x05	; 5
    6acc:	68 94       	set
    6ace:	15 90       	lpm	r1, Z+
    6ad0:	15 91       	lpm	r17, Z+
    6ad2:	35 91       	lpm	r19, Z+
    6ad4:	65 91       	lpm	r22, Z+
    6ad6:	95 91       	lpm	r25, Z+
    6ad8:	05 90       	lpm	r0, Z+
    6ada:	7f e2       	ldi	r23, 0x2F	; 47
    6adc:	73 95       	inc	r23
    6ade:	e1 18       	sub	r14, r1
    6ae0:	f1 0a       	sbc	r15, r17
    6ae2:	43 0b       	sbc	r20, r19
    6ae4:	56 0b       	sbc	r21, r22
    6ae6:	c9 0b       	sbc	r28, r25
    6ae8:	d0 09       	sbc	r29, r0
    6aea:	c0 f7       	brcc	.-16     	; 0x6adc <__ftoa_engine+0x10a>
    6aec:	e1 0c       	add	r14, r1
    6aee:	f1 1e       	adc	r15, r17
    6af0:	43 1f       	adc	r20, r19
    6af2:	56 1f       	adc	r21, r22
    6af4:	c9 1f       	adc	r28, r25
    6af6:	d0 1d       	adc	r29, r0
    6af8:	7e f4       	brtc	.+30     	; 0x6b18 <__ftoa_engine+0x146>
    6afa:	70 33       	cpi	r23, 0x30	; 48
    6afc:	11 f4       	brne	.+4      	; 0x6b02 <__ftoa_engine+0x130>
    6afe:	8a 95       	dec	r24
    6b00:	e6 cf       	rjmp	.-52     	; 0x6ace <__ftoa_engine+0xfc>
    6b02:	e8 94       	clt
    6b04:	01 50       	subi	r16, 0x01	; 1
    6b06:	30 f0       	brcs	.+12     	; 0x6b14 <__ftoa_engine+0x142>
    6b08:	08 0f       	add	r16, r24
    6b0a:	0a f4       	brpl	.+2      	; 0x6b0e <__ftoa_engine+0x13c>
    6b0c:	00 27       	eor	r16, r16
    6b0e:	02 17       	cp	r16, r18
    6b10:	08 f4       	brcc	.+2      	; 0x6b14 <__ftoa_engine+0x142>
    6b12:	20 2f       	mov	r18, r16
    6b14:	23 95       	inc	r18
    6b16:	02 2f       	mov	r16, r18
    6b18:	7a 33       	cpi	r23, 0x3A	; 58
    6b1a:	28 f0       	brcs	.+10     	; 0x6b26 <__ftoa_engine+0x154>
    6b1c:	79 e3       	ldi	r23, 0x39	; 57
    6b1e:	7d 93       	st	X+, r23
    6b20:	2a 95       	dec	r18
    6b22:	e9 f7       	brne	.-6      	; 0x6b1e <__ftoa_engine+0x14c>
    6b24:	10 c0       	rjmp	.+32     	; 0x6b46 <__ftoa_engine+0x174>
    6b26:	7d 93       	st	X+, r23
    6b28:	2a 95       	dec	r18
    6b2a:	89 f6       	brne	.-94     	; 0x6ace <__ftoa_engine+0xfc>
    6b2c:	06 94       	lsr	r0
    6b2e:	97 95       	ror	r25
    6b30:	67 95       	ror	r22
    6b32:	37 95       	ror	r19
    6b34:	17 95       	ror	r17
    6b36:	17 94       	ror	r1
    6b38:	e1 18       	sub	r14, r1
    6b3a:	f1 0a       	sbc	r15, r17
    6b3c:	43 0b       	sbc	r20, r19
    6b3e:	56 0b       	sbc	r21, r22
    6b40:	c9 0b       	sbc	r28, r25
    6b42:	d0 09       	sbc	r29, r0
    6b44:	98 f0       	brcs	.+38     	; 0x6b6c <__ftoa_engine+0x19a>
    6b46:	23 95       	inc	r18
    6b48:	7e 91       	ld	r23, -X
    6b4a:	73 95       	inc	r23
    6b4c:	7a 33       	cpi	r23, 0x3A	; 58
    6b4e:	08 f0       	brcs	.+2      	; 0x6b52 <__ftoa_engine+0x180>
    6b50:	70 e3       	ldi	r23, 0x30	; 48
    6b52:	7c 93       	st	X, r23
    6b54:	20 13       	cpse	r18, r16
    6b56:	b8 f7       	brcc	.-18     	; 0x6b46 <__ftoa_engine+0x174>
    6b58:	7e 91       	ld	r23, -X
    6b5a:	70 61       	ori	r23, 0x10	; 16
    6b5c:	7d 93       	st	X+, r23
    6b5e:	30 f0       	brcs	.+12     	; 0x6b6c <__ftoa_engine+0x19a>
    6b60:	83 95       	inc	r24
    6b62:	71 e3       	ldi	r23, 0x31	; 49
    6b64:	7d 93       	st	X+, r23
    6b66:	70 e3       	ldi	r23, 0x30	; 48
    6b68:	2a 95       	dec	r18
    6b6a:	e1 f7       	brne	.-8      	; 0x6b64 <__ftoa_engine+0x192>
    6b6c:	11 24       	eor	r1, r1
    6b6e:	ef 90       	pop	r14
    6b70:	ff 90       	pop	r15
    6b72:	0f 91       	pop	r16
    6b74:	1f 91       	pop	r17
    6b76:	cf 91       	pop	r28
    6b78:	df 91       	pop	r29
    6b7a:	99 27       	eor	r25, r25
    6b7c:	87 fd       	sbrc	r24, 7
    6b7e:	90 95       	com	r25
    6b80:	08 95       	ret

00006b82 <strnlen_P>:
    6b82:	fc 01       	movw	r30, r24
    6b84:	05 90       	lpm	r0, Z+
    6b86:	61 50       	subi	r22, 0x01	; 1
    6b88:	70 40       	sbci	r23, 0x00	; 0
    6b8a:	01 10       	cpse	r0, r1
    6b8c:	d8 f7       	brcc	.-10     	; 0x6b84 <strnlen_P+0x2>
    6b8e:	80 95       	com	r24
    6b90:	90 95       	com	r25
    6b92:	8e 0f       	add	r24, r30
    6b94:	9f 1f       	adc	r25, r31
    6b96:	08 95       	ret

00006b98 <strnlen>:
    6b98:	fc 01       	movw	r30, r24
    6b9a:	61 50       	subi	r22, 0x01	; 1
    6b9c:	70 40       	sbci	r23, 0x00	; 0
    6b9e:	01 90       	ld	r0, Z+
    6ba0:	01 10       	cpse	r0, r1
    6ba2:	d8 f7       	brcc	.-10     	; 0x6b9a <strnlen+0x2>
    6ba4:	80 95       	com	r24
    6ba6:	90 95       	com	r25
    6ba8:	8e 0f       	add	r24, r30
    6baa:	9f 1f       	adc	r25, r31
    6bac:	08 95       	ret

00006bae <fputc>:
    6bae:	0f 93       	push	r16
    6bb0:	1f 93       	push	r17
    6bb2:	cf 93       	push	r28
    6bb4:	df 93       	push	r29
    6bb6:	8c 01       	movw	r16, r24
    6bb8:	eb 01       	movw	r28, r22
    6bba:	8b 81       	ldd	r24, Y+3	; 0x03
    6bbc:	81 ff       	sbrs	r24, 1
    6bbe:	1b c0       	rjmp	.+54     	; 0x6bf6 <fputc+0x48>
    6bc0:	82 ff       	sbrs	r24, 2
    6bc2:	0d c0       	rjmp	.+26     	; 0x6bde <fputc+0x30>
    6bc4:	2e 81       	ldd	r18, Y+6	; 0x06
    6bc6:	3f 81       	ldd	r19, Y+7	; 0x07
    6bc8:	8c 81       	ldd	r24, Y+4	; 0x04
    6bca:	9d 81       	ldd	r25, Y+5	; 0x05
    6bcc:	28 17       	cp	r18, r24
    6bce:	39 07       	cpc	r19, r25
    6bd0:	64 f4       	brge	.+24     	; 0x6bea <fputc+0x3c>
    6bd2:	e8 81       	ld	r30, Y
    6bd4:	f9 81       	ldd	r31, Y+1	; 0x01
    6bd6:	01 93       	st	Z+, r16
    6bd8:	f9 83       	std	Y+1, r31	; 0x01
    6bda:	e8 83       	st	Y, r30
    6bdc:	06 c0       	rjmp	.+12     	; 0x6bea <fputc+0x3c>
    6bde:	e8 85       	ldd	r30, Y+8	; 0x08
    6be0:	f9 85       	ldd	r31, Y+9	; 0x09
    6be2:	80 2f       	mov	r24, r16
    6be4:	09 95       	icall
    6be6:	89 2b       	or	r24, r25
    6be8:	31 f4       	brne	.+12     	; 0x6bf6 <fputc+0x48>
    6bea:	8e 81       	ldd	r24, Y+6	; 0x06
    6bec:	9f 81       	ldd	r25, Y+7	; 0x07
    6bee:	01 96       	adiw	r24, 0x01	; 1
    6bf0:	9f 83       	std	Y+7, r25	; 0x07
    6bf2:	8e 83       	std	Y+6, r24	; 0x06
    6bf4:	02 c0       	rjmp	.+4      	; 0x6bfa <fputc+0x4c>
    6bf6:	0f ef       	ldi	r16, 0xFF	; 255
    6bf8:	1f ef       	ldi	r17, 0xFF	; 255
    6bfa:	c8 01       	movw	r24, r16
    6bfc:	df 91       	pop	r29
    6bfe:	cf 91       	pop	r28
    6c00:	1f 91       	pop	r17
    6c02:	0f 91       	pop	r16
    6c04:	08 95       	ret

00006c06 <printf>:
    6c06:	a0 e0       	ldi	r26, 0x00	; 0
    6c08:	b0 e0       	ldi	r27, 0x00	; 0
    6c0a:	e8 e0       	ldi	r30, 0x08	; 8
    6c0c:	f6 e3       	ldi	r31, 0x36	; 54
    6c0e:	b5 cd       	rjmp	.-1174   	; 0x677a <__prologue_saves__+0x20>
    6c10:	fe 01       	movw	r30, r28
    6c12:	35 96       	adiw	r30, 0x05	; 5
    6c14:	61 91       	ld	r22, Z+
    6c16:	71 91       	ld	r23, Z+
    6c18:	80 91 20 07 	lds	r24, 0x0720
    6c1c:	90 91 21 07 	lds	r25, 0x0721
    6c20:	af 01       	movw	r20, r30
    6c22:	f2 d9       	rcall	.-3100   	; 0x6008 <vfprintf>
    6c24:	20 96       	adiw	r28, 0x00	; 0
    6c26:	e2 e0       	ldi	r30, 0x02	; 2
    6c28:	c4 cd       	rjmp	.-1144   	; 0x67b2 <__epilogue_restores__+0x20>

00006c2a <puts>:
    6c2a:	0f 93       	push	r16
    6c2c:	1f 93       	push	r17
    6c2e:	cf 93       	push	r28
    6c30:	df 93       	push	r29
    6c32:	8c 01       	movw	r16, r24
    6c34:	e0 91 20 07 	lds	r30, 0x0720
    6c38:	f0 91 21 07 	lds	r31, 0x0721
    6c3c:	83 81       	ldd	r24, Z+3	; 0x03
    6c3e:	81 ff       	sbrs	r24, 1
    6c40:	21 c0       	rjmp	.+66     	; 0x6c84 <puts+0x5a>
    6c42:	c0 e0       	ldi	r28, 0x00	; 0
    6c44:	d0 e0       	ldi	r29, 0x00	; 0
    6c46:	0d c0       	rjmp	.+26     	; 0x6c62 <puts+0x38>
    6c48:	e0 91 20 07 	lds	r30, 0x0720
    6c4c:	f0 91 21 07 	lds	r31, 0x0721
    6c50:	20 85       	ldd	r18, Z+8	; 0x08
    6c52:	31 85       	ldd	r19, Z+9	; 0x09
    6c54:	bf 01       	movw	r22, r30
    6c56:	f9 01       	movw	r30, r18
    6c58:	09 95       	icall
    6c5a:	89 2b       	or	r24, r25
    6c5c:	11 f0       	breq	.+4      	; 0x6c62 <puts+0x38>
    6c5e:	cf ef       	ldi	r28, 0xFF	; 255
    6c60:	df ef       	ldi	r29, 0xFF	; 255
    6c62:	f8 01       	movw	r30, r16
    6c64:	81 91       	ld	r24, Z+
    6c66:	8f 01       	movw	r16, r30
    6c68:	88 23       	and	r24, r24
    6c6a:	71 f7       	brne	.-36     	; 0x6c48 <puts+0x1e>
    6c6c:	e0 91 20 07 	lds	r30, 0x0720
    6c70:	f0 91 21 07 	lds	r31, 0x0721
    6c74:	20 85       	ldd	r18, Z+8	; 0x08
    6c76:	31 85       	ldd	r19, Z+9	; 0x09
    6c78:	8a e0       	ldi	r24, 0x0A	; 10
    6c7a:	bf 01       	movw	r22, r30
    6c7c:	f9 01       	movw	r30, r18
    6c7e:	09 95       	icall
    6c80:	89 2b       	or	r24, r25
    6c82:	11 f0       	breq	.+4      	; 0x6c88 <puts+0x5e>
    6c84:	cf ef       	ldi	r28, 0xFF	; 255
    6c86:	df ef       	ldi	r29, 0xFF	; 255
    6c88:	ce 01       	movw	r24, r28
    6c8a:	df 91       	pop	r29
    6c8c:	cf 91       	pop	r28
    6c8e:	1f 91       	pop	r17
    6c90:	0f 91       	pop	r16
    6c92:	08 95       	ret

00006c94 <__ultoa_invert>:
    6c94:	fa 01       	movw	r30, r20
    6c96:	aa 27       	eor	r26, r26
    6c98:	28 30       	cpi	r18, 0x08	; 8
    6c9a:	51 f1       	breq	.+84     	; 0x6cf0 <__ultoa_invert+0x5c>
    6c9c:	20 31       	cpi	r18, 0x10	; 16
    6c9e:	81 f1       	breq	.+96     	; 0x6d00 <__ultoa_invert+0x6c>
    6ca0:	e8 94       	clt
    6ca2:	6f 93       	push	r22
    6ca4:	6e 7f       	andi	r22, 0xFE	; 254
    6ca6:	6e 5f       	subi	r22, 0xFE	; 254
    6ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    6caa:	8f 4f       	sbci	r24, 0xFF	; 255
    6cac:	9f 4f       	sbci	r25, 0xFF	; 255
    6cae:	af 4f       	sbci	r26, 0xFF	; 255
    6cb0:	b1 e0       	ldi	r27, 0x01	; 1
    6cb2:	3e d0       	rcall	.+124    	; 0x6d30 <__ultoa_invert+0x9c>
    6cb4:	b4 e0       	ldi	r27, 0x04	; 4
    6cb6:	3c d0       	rcall	.+120    	; 0x6d30 <__ultoa_invert+0x9c>
    6cb8:	67 0f       	add	r22, r23
    6cba:	78 1f       	adc	r23, r24
    6cbc:	89 1f       	adc	r24, r25
    6cbe:	9a 1f       	adc	r25, r26
    6cc0:	a1 1d       	adc	r26, r1
    6cc2:	68 0f       	add	r22, r24
    6cc4:	79 1f       	adc	r23, r25
    6cc6:	8a 1f       	adc	r24, r26
    6cc8:	91 1d       	adc	r25, r1
    6cca:	a1 1d       	adc	r26, r1
    6ccc:	6a 0f       	add	r22, r26
    6cce:	71 1d       	adc	r23, r1
    6cd0:	81 1d       	adc	r24, r1
    6cd2:	91 1d       	adc	r25, r1
    6cd4:	a1 1d       	adc	r26, r1
    6cd6:	20 d0       	rcall	.+64     	; 0x6d18 <__ultoa_invert+0x84>
    6cd8:	09 f4       	brne	.+2      	; 0x6cdc <__ultoa_invert+0x48>
    6cda:	68 94       	set
    6cdc:	3f 91       	pop	r19
    6cde:	2a e0       	ldi	r18, 0x0A	; 10
    6ce0:	26 9f       	mul	r18, r22
    6ce2:	11 24       	eor	r1, r1
    6ce4:	30 19       	sub	r19, r0
    6ce6:	30 5d       	subi	r19, 0xD0	; 208
    6ce8:	31 93       	st	Z+, r19
    6cea:	de f6       	brtc	.-74     	; 0x6ca2 <__ultoa_invert+0xe>
    6cec:	cf 01       	movw	r24, r30
    6cee:	08 95       	ret
    6cf0:	46 2f       	mov	r20, r22
    6cf2:	47 70       	andi	r20, 0x07	; 7
    6cf4:	40 5d       	subi	r20, 0xD0	; 208
    6cf6:	41 93       	st	Z+, r20
    6cf8:	b3 e0       	ldi	r27, 0x03	; 3
    6cfa:	0f d0       	rcall	.+30     	; 0x6d1a <__ultoa_invert+0x86>
    6cfc:	c9 f7       	brne	.-14     	; 0x6cf0 <__ultoa_invert+0x5c>
    6cfe:	f6 cf       	rjmp	.-20     	; 0x6cec <__ultoa_invert+0x58>
    6d00:	46 2f       	mov	r20, r22
    6d02:	4f 70       	andi	r20, 0x0F	; 15
    6d04:	40 5d       	subi	r20, 0xD0	; 208
    6d06:	4a 33       	cpi	r20, 0x3A	; 58
    6d08:	18 f0       	brcs	.+6      	; 0x6d10 <__ultoa_invert+0x7c>
    6d0a:	49 5d       	subi	r20, 0xD9	; 217
    6d0c:	31 fd       	sbrc	r19, 1
    6d0e:	40 52       	subi	r20, 0x20	; 32
    6d10:	41 93       	st	Z+, r20
    6d12:	02 d0       	rcall	.+4      	; 0x6d18 <__ultoa_invert+0x84>
    6d14:	a9 f7       	brne	.-22     	; 0x6d00 <__ultoa_invert+0x6c>
    6d16:	ea cf       	rjmp	.-44     	; 0x6cec <__ultoa_invert+0x58>
    6d18:	b4 e0       	ldi	r27, 0x04	; 4
    6d1a:	a6 95       	lsr	r26
    6d1c:	97 95       	ror	r25
    6d1e:	87 95       	ror	r24
    6d20:	77 95       	ror	r23
    6d22:	67 95       	ror	r22
    6d24:	ba 95       	dec	r27
    6d26:	c9 f7       	brne	.-14     	; 0x6d1a <__ultoa_invert+0x86>
    6d28:	00 97       	sbiw	r24, 0x00	; 0
    6d2a:	61 05       	cpc	r22, r1
    6d2c:	71 05       	cpc	r23, r1
    6d2e:	08 95       	ret
    6d30:	9b 01       	movw	r18, r22
    6d32:	ac 01       	movw	r20, r24
    6d34:	0a 2e       	mov	r0, r26
    6d36:	06 94       	lsr	r0
    6d38:	57 95       	ror	r21
    6d3a:	47 95       	ror	r20
    6d3c:	37 95       	ror	r19
    6d3e:	27 95       	ror	r18
    6d40:	ba 95       	dec	r27
    6d42:	c9 f7       	brne	.-14     	; 0x6d36 <__ultoa_invert+0xa2>
    6d44:	62 0f       	add	r22, r18
    6d46:	73 1f       	adc	r23, r19
    6d48:	84 1f       	adc	r24, r20
    6d4a:	95 1f       	adc	r25, r21
    6d4c:	a0 1d       	adc	r26, r0
    6d4e:	08 95       	ret

00006d50 <_exit>:
    6d50:	f8 94       	cli

00006d52 <__stop_program>:
    6d52:	ff cf       	rjmp	.-2      	; 0x6d52 <__stop_program>
