
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028a  00800100  00006bea  00006c7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006bea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003bc  0080038a  0080038a  00006f08  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00006f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000775  00000000  00000000  00006f68  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d1c  00000000  00000000  000076dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004a0  00000000  00000000  000093f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001793  00000000  00000000  00009899  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000330  00000000  00000000  0000b02c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d78  00000000  00000000  0000b35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001228  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 a0 22 	jmp	0x4540	; 0x4540 <__vector_4>
      14:	0c 94 c9 22 	jmp	0x4592	; 0x4592 <__vector_5>
      18:	0c 94 f2 22 	jmp	0x45e4	; 0x45e4 <__vector_6>
      1c:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 81 21 	jmp	0x4302	; 0x4302 <__vector_9>
      28:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <__vector_10>
      2c:	0c 94 d3 21 	jmp	0x43a6	; 0x43a6 <__vector_11>
      30:	0c 94 4e 22 	jmp	0x449c	; 0x449c <__vector_12>
      34:	0c 94 fc 21 	jmp	0x43f8	; 0x43f8 <__vector_13>
      38:	0c 94 25 22 	jmp	0x444a	; 0x444a <__vector_14>
      3c:	0c 94 77 22 	jmp	0x44ee	; 0x44ee <__vector_15>
      40:	0c 94 06 21 	jmp	0x420c	; 0x420c <__vector_16>
      44:	0c 94 2f 21 	jmp	0x425e	; 0x425e <__vector_17>
      48:	0c 94 58 21 	jmp	0x42b0	; 0x42b0 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	6b 1e       	adc	r6, r27
      7e:	6e 1e       	adc	r6, r30
      80:	71 1e       	adc	r7, r17
      82:	74 1e       	adc	r7, r20
      84:	7d 1e       	adc	r7, r29
      86:	77 1e       	adc	r7, r23
      88:	7a 1e       	adc	r7, r26
      8a:	80 1e       	adc	r8, r16
      8c:	83 1e       	adc	r8, r19
      8e:	86 1e       	adc	r8, r22
      90:	89 1e       	adc	r8, r25
      92:	8c 1e       	adc	r8, r28
      94:	8f 1e       	adc	r8, r31
      96:	92 1e       	adc	r9, r18
      98:	95 1e       	adc	r9, r21
      9a:	98 1e       	adc	r9, r24
      9c:	9b 1e       	adc	r9, r27
      9e:	9e 1e       	adc	r9, r30
      a0:	a1 1e       	adc	r10, r17
      a2:	b2 1e       	adc	r11, r18
      a4:	b5 1e       	adc	r11, r21
      a6:	b8 1e       	adc	r11, r24
      a8:	bb 1e       	adc	r11, r27
      aa:	c4 1e       	adc	r12, r20
      ac:	be 1e       	adc	r11, r30
      ae:	c1 1e       	adc	r12, r17
      b0:	c7 1e       	adc	r12, r23
      b2:	ca 1e       	adc	r12, r26
      b4:	cd 1e       	adc	r12, r29
      b6:	d0 1e       	adc	r13, r16
      b8:	d3 1e       	adc	r13, r19
      ba:	d6 1e       	adc	r13, r22
      bc:	d9 1e       	adc	r13, r25
      be:	dc 1e       	adc	r13, r28
      c0:	df 1e       	adc	r13, r31
      c2:	e2 1e       	adc	r14, r18
      c4:	e5 1e       	adc	r14, r21
      c6:	e8 1e       	adc	r14, r24
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ea ee       	ldi	r30, 0xEA	; 234
     676:	fb e6       	ldi	r31, 0x6B	; 107
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	aa 38       	cpi	r26, 0x8A	; 138
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	aa e8       	ldi	r26, 0x8A	; 138
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a6 34       	cpi	r26, 0x46	; 70
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 d5 18 	call	0x31aa	; 0x31aa <main>
     698:	0c 94 f3 35 	jmp	0x6be6	; 0x6be6 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 44 20 	call	0x4088	; 0x4088 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 18 20 	call	0x4030	; 0x4030 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 b0 20 	call	0x4160	; 0x4160 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 ca 18 	call	0x3194	; 0x3194 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 93 18 	call	0x3126	; 0x3126 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 76 18 	call	0x30ec	; 0x30ec <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 97 2c 	call	0x592e	; 0x592e <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 95 2b 	call	0x572a	; 0x572a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 ca 18 	call	0x3194	; 0x3194 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 93 18 	call	0x3126	; 0x3126 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 76 18 	call	0x30ec	; 0x30ec <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 97 2c 	call	0x592e	; 0x592e <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 95 2b 	call	0x572a	; 0x572a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 ca 18 	call	0x3194	; 0x3194 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 93 18 	call	0x3126	; 0x3126 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 76 18 	call	0x30ec	; 0x30ec <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 97 2c 	call	0x592e	; 0x592e <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 95 2b 	call	0x572a	; 0x572a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 ca 18 	call	0x3194	; 0x3194 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 93 18 	call	0x3126	; 0x3126 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 76 18 	call	0x30ec	; 0x30ec <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 97 2c 	call	0x592e	; 0x592e <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 95 2b 	call	0x572a	; 0x572a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 ca 18 	call	0x3194	; 0x3194 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 93 18 	call	0x3126	; 0x3126 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 76 18 	call	0x30ec	; 0x30ec <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 97 2c 	call	0x592e	; 0x592e <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 ca 18 	call	0x3194	; 0x3194 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 93 18 	call	0x3126	; 0x3126 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 76 18 	call	0x30ec	; 0x30ec <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 97 2c 	call	0x592e	; 0x592e <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 16 04 	sts	0x0416, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 16 04 	sts	0x0416, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 ed 19 	call	0x33da	; 0x33da <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 ed 19 	call	0x33da	; 0x33da <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 ed 19 	call	0x33da	; 0x33da <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 ed 19 	call	0x33da	; 0x33da <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	87 e8       	ldi	r24, 0x87	; 135
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	a8 ea       	ldi	r26, 0xA8	; 168
     c56:	b6 e0       	ldi	r27, 0x06	; 6
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e0 ea       	ldi	r30, 0xA0	; 160
     c5e:	f5 e0       	ldi	r31, 0x05	; 5
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	8e e0       	ldi	r24, 0x0E	; 14
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 30 06 	lds	r10, 0x0630
     c9e:	b0 90 31 06 	lds	r11, 0x0631
     ca2:	c0 90 32 06 	lds	r12, 0x0632
     ca6:	d0 90 33 06 	lds	r13, 0x0633
			rtIR_old[i] = rtIR;
     caa:	e0 90 34 06 	lds	r14, 0x0634
     cae:	f0 90 35 06 	lds	r15, 0x0635
     cb2:	00 91 36 06 	lds	r16, 0x0636
     cb6:	10 91 37 06 	lds	r17, 0x0637
			ftIR_old[i] = ftIR;
     cba:	20 90 8f 04 	lds	r2, 0x048F
     cbe:	30 90 90 04 	lds	r3, 0x0490
     cc2:	40 90 91 04 	lds	r4, 0x0491
     cc6:	50 90 92 04 	lds	r5, 0x0492
			bkIR_old[i] = bkIR;
     cca:	20 91 99 04 	lds	r18, 0x0499
     cce:	30 91 9a 04 	lds	r19, 0x049A
     cd2:	40 91 9b 04 	lds	r20, 0x049B
     cd6:	50 91 9c 04 	lds	r21, 0x049C
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e9 5e       	subi	r30, 0xE9	; 233
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e8 5c       	subi	r30, 0xC8	; 200
     cf0:	f9 4f       	sbci	r31, 0xF9	; 249
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e0 5d       	subi	r30, 0xD0	; 208
     cfe:	fa 4f       	sbci	r31, 0xFA	; 250
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e2 56       	subi	r30, 0x62	; 98
     d0c:	fb 4f       	sbci	r31, 0xFB	; 251
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	af 50       	subi	r26, 0x0F	; 15
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 30 06 	lds	r24, 0x0630
     e0c:	90 91 31 06 	lds	r25, 0x0631
     e10:	a0 91 32 06 	lds	r26, 0x0632
     e14:	b0 91 33 06 	lds	r27, 0x0633
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 34 06 	lds	r24, 0x0634
     e28:	90 91 35 06 	lds	r25, 0x0635
     e2c:	a0 91 36 06 	lds	r26, 0x0636
     e30:	b0 91 37 06 	lds	r27, 0x0637
     e34:	80 93 38 06 	sts	0x0638, r24
     e38:	90 93 39 06 	sts	0x0639, r25
     e3c:	a0 93 3a 06 	sts	0x063A, r26
     e40:	b0 93 3b 06 	sts	0x063B, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 8f 04 	lds	r24, 0x048F
     e48:	90 91 90 04 	lds	r25, 0x0490
     e4c:	a0 91 91 04 	lds	r26, 0x0491
     e50:	b0 91 92 04 	lds	r27, 0x0492
     e54:	80 93 30 05 	sts	0x0530, r24
     e58:	90 93 31 05 	sts	0x0531, r25
     e5c:	a0 93 32 05 	sts	0x0532, r26
     e60:	b0 93 33 05 	sts	0x0533, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 99 04 	lds	r24, 0x0499
     e68:	90 91 9a 04 	lds	r25, 0x049A
     e6c:	a0 91 9b 04 	lds	r26, 0x049B
     e70:	b0 91 9c 04 	lds	r27, 0x049C
     e74:	80 93 9e 04 	sts	0x049E, r24
     e78:	90 93 9f 04 	sts	0x049F, r25
     e7c:	a0 93 a0 04 	sts	0x04A0, r26
     e80:	b0 93 a1 04 	sts	0x04A1, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
     e94:	60 93 30 06 	sts	0x0630, r22
     e98:	70 93 31 06 	sts	0x0631, r23
     e9c:	80 93 32 06 	sts	0x0632, r24
     ea0:	90 93 33 06 	sts	0x0633, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
     eb8:	60 93 34 06 	sts	0x0634, r22
     ebc:	70 93 35 06 	sts	0x0635, r23
     ec0:	80 93 36 06 	sts	0x0636, r24
     ec4:	90 93 37 06 	sts	0x0637, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
     edc:	60 93 8f 04 	sts	0x048F, r22
     ee0:	70 93 90 04 	sts	0x0490, r23
     ee4:	80 93 91 04 	sts	0x0491, r24
     ee8:	90 93 92 04 	sts	0x0492, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
     f00:	60 93 99 04 	sts	0x0499, r22
     f04:	70 93 9a 04 	sts	0x049A, r23
     f08:	80 93 9b 04 	sts	0x049B, r24
     f0c:	90 93 9c 04 	sts	0x049C, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 93 04 	sts	0x0493, r24
     f66:	90 93 94 04 	sts	0x0494, r25
     f6a:	a0 93 95 04 	sts	0x0495, r26
     f6e:	b0 93 96 04 	sts	0x0496, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 93 04 	lds	r18, 0x0493
     f7a:	30 91 94 04 	lds	r19, 0x0494
     f7e:	40 91 95 04 	lds	r20, 0x0495
     f82:	50 91 96 04 	lds	r21, 0x0496
     f86:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 93 04 	sts	0x0493, r22
     f92:	70 93 94 04 	sts	0x0494, r23
     f96:	80 93 95 04 	sts	0x0495, r24
     f9a:	90 93 96 04 	sts	0x0496, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 2c 05 	lds	r18, 0x052C
     fa6:	30 91 2d 05 	lds	r19, 0x052D
     faa:	40 91 2e 05 	lds	r20, 0x052E
     fae:	50 91 2f 05 	lds	r21, 0x052F
     fb2:	0e 94 95 2b 	call	0x572a	; 0x572a <__subsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a0 97       	sbiw	r28, 0x20	; 32
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	2d 83       	std	Y+5, r18	; 0x05
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	e9 86       	std	Y+9, r14	; 0x09
    106c:	fa 86       	std	Y+10, r15	; 0x0a
    106e:	0b 87       	std	Y+11, r16	; 0x0b
    1070:	1c 87       	std	Y+12, r17	; 0x0c
    1072:	ad 86       	std	Y+13, r10	; 0x0d
    1074:	be 86       	std	Y+14, r11	; 0x0e
    1076:	cf 86       	std	Y+15, r12	; 0x0f
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    107c:	33 24       	eor	r3, r3
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	14 f4       	brge	.+4      	; 0x1096 <move_arc_stnb+0x6c>
    1092:	33 24       	eor	r3, r3
    1094:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1096:	6d 81       	ldd	r22, Y+5	; 0x05
    1098:	7e 81       	ldd	r23, Y+6	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	2c ed       	ldi	r18, 0xDC	; 220
    10a0:	38 eb       	ldi	r19, 0xB8	; 184
    10a2:	48 e0       	ldi	r20, 0x08	; 8
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    10aa:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	77 ff       	sbrs	r23, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <move_arc_stnb+0x90>
    10b4:	30 95       	com	r19
    10b6:	21 95       	neg	r18
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	b9 01       	movw	r22, r18
    10bc:	88 27       	eor	r24, r24
    10be:	77 fd       	sbrc	r23, 7
    10c0:	80 95       	com	r24
    10c2:	98 2f       	mov	r25, r24
    10c4:	0e 94 99 2c 	call	0x5932	; 0x5932 <__floatsisf>
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    10d0:	69 85       	ldd	r22, Y+9	; 0x09
    10d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	2c ed       	ldi	r18, 0xDC	; 220
    10da:	38 eb       	ldi	r19, 0xB8	; 184
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    10e4:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__fixsfsi>
    10e8:	9b 01       	movw	r18, r22
    10ea:	77 ff       	sbrs	r23, 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <move_arc_stnb+0xca>
    10ee:	30 95       	com	r19
    10f0:	21 95       	neg	r18
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 99 2c 	call	0x5932	; 0x5932 <__floatsisf>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1106:	6d 85       	ldd	r22, Y+13	; 0x0d
    1108:	7e 85       	ldd	r23, Y+14	; 0x0e
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	2c ed       	ldi	r18, 0xDC	; 220
    1110:	38 eb       	ldi	r19, 0xB8	; 184
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	5e e3       	ldi	r21, 0x3E	; 62
    1116:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    111a:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	77 ff       	sbrs	r23, 7
    1122:	03 c0       	rjmp	.+6      	; 0x112a <move_arc_stnb+0x100>
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 99 2c 	call	0x5932	; 0x5932 <__floatsisf>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	5f e4       	ldi	r21, 0x4F	; 79
    1148:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	a1 f5       	brne	.+104    	; 0x11b8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	2d b7       	in	r18, 0x3d	; 61
    117a:	3e b7       	in	r19, 0x3e	; 62
    117c:	29 50       	subi	r18, 0x09	; 9
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	3e bf       	out	0x3e, r19	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	2d bf       	out	0x3d, r18	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	ad b7       	in	r26, 0x3d	; 61
    1192:	be b7       	in	r27, 0x3e	; 62
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	5c 92       	st	X, r5
    1198:	4e 92       	st	-X, r4
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	93 82       	std	Z+3, r9	; 0x03
    119e:	82 82       	std	Z+2, r8	; 0x02
    11a0:	75 83       	std	Z+5, r23	; 0x05
    11a2:	64 83       	std	Z+4, r22	; 0x04
    11a4:	26 82       	std	Z+6, r2	; 0x06
    11a6:	10 86       	std	Z+8, r1	; 0x08
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	43 2d       	mov	r20, r3
    11b0:	92 01       	movw	r18, r4
    11b2:	84 01       	movw	r16, r8
    11b4:	76 01       	movw	r14, r12
    11b6:	c1 c1       	rjmp	.+898    	; 0x153a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	e9 f5       	brne	.+122    	; 0x1246 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    11d8:	3b 01       	movw	r6, r22
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    11e2:	8b 01       	movw	r16, r22
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    11ec:	7b 01       	movw	r14, r22
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	29 50       	subi	r18, 0x09	; 9
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	3e bf       	out	0x3e, r19	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	2d bf       	out	0x3d, r18	; 61
    1200:	ed b7       	in	r30, 0x3d	; 61
    1202:	fe b7       	in	r31, 0x3e	; 62
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <move_arc_stnb+0x1e4>
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	71 82       	std	Z+1, r7	; 0x01
    1210:	60 82       	st	Z, r6
    1212:	13 83       	std	Z+3, r17	; 0x03
    1214:	02 83       	std	Z+2, r16	; 0x02
    1216:	f5 82       	std	Z+5, r15	; 0x05
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	26 82       	std	Z+6, r2	; 0x06
    121c:	10 86       	std	Z+8, r1	; 0x08
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	93 01       	movw	r18, r6
    1226:	c2 2c       	mov	r12, r2
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	83 2c       	mov	r8, r3
    122e:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_move>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	be bf       	out	0x3e, r27	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ad bf       	out	0x3d, r26	; 61
    1244:	89 c1       	rjmp	.+786    	; 0x1558 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1246:	c3 01       	movw	r24, r6
    1248:	b2 01       	movw	r22, r4
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__gesf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <move_arc_stnb+0x232>
    125a:	b1 c0       	rjmp	.+354    	; 0x13be <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    125c:	66 e6       	ldi	r22, 0x66	; 102
    125e:	76 e6       	ldi	r23, 0x66	; 102
    1260:	8a ea       	ldi	r24, 0xAA	; 170
    1262:	91 ec       	ldi	r25, 0xC1	; 193
    1264:	a3 01       	movw	r20, r6
    1266:	92 01       	movw	r18, r4
    1268:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    127c:	66 e6       	ldi	r22, 0x66	; 102
    127e:	76 e6       	ldi	r23, 0x66	; 102
    1280:	8a ea       	ldi	r24, 0xAA	; 170
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	a3 01       	movw	r20, r6
    1286:	92 01       	movw	r18, r4
    1288:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	39 97       	sbiw	r30, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8d b6       	in	r8, 0x3d	; 61
    12ae:	9e b6       	in	r9, 0x3e	; 62
    12b0:	08 94       	sec
    12b2:	81 1c       	adc	r8, r1
    12b4:	91 1c       	adc	r9, r1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	a8 01       	movw	r20, r16
    12c0:	97 01       	movw	r18, r14
    12c2:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    12c6:	2c ed       	ldi	r18, 0xDC	; 220
    12c8:	38 eb       	ldi	r19, 0xB8	; 184
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    12d2:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    12d6:	69 8b       	std	Y+17, r22	; 0x11
    12d8:	7a 8b       	std	Y+18, r23	; 0x12
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    12ee:	2c ed       	ldi	r18, 0xDC	; 220
    12f0:	38 eb       	ldi	r19, 0xB8	; 184
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	5e e3       	ldi	r21, 0x3E	; 62
    12f6:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    12fa:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	6d 85       	ldd	r22, Y+13	; 0x0d
    1308:	7e 85       	ldd	r23, Y+14	; 0x0e
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	a8 01       	movw	r20, r16
    1310:	97 01       	movw	r18, r14
    1312:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1316:	2c ed       	ldi	r18, 0xDC	; 220
    1318:	38 eb       	ldi	r19, 0xB8	; 184
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1322:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1326:	2b 01       	movw	r4, r22
    1328:	3c 01       	movw	r6, r24
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	7e 81       	ldd	r23, Y+6	; 0x06
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a6 01       	movw	r20, r12
    1334:	95 01       	movw	r18, r10
    1336:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    133a:	2c ed       	ldi	r18, 0xDC	; 220
    133c:	38 eb       	ldi	r19, 0xB8	; 184
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1346:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    134a:	d4 01       	movw	r26, r8
    134c:	6d 93       	st	X+, r22
    134e:	7c 93       	st	X, r23
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1360:	2c ed       	ldi	r18, 0xDC	; 220
    1362:	38 eb       	ldi	r19, 0xB8	; 184
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	5e e3       	ldi	r21, 0x3E	; 62
    1368:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    136c:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1370:	f4 01       	movw	r30, r8
    1372:	73 83       	std	Z+3, r23	; 0x03
    1374:	62 83       	std	Z+2, r22	; 0x02
    1376:	6d 85       	ldd	r22, Y+13	; 0x0d
    1378:	7e 85       	ldd	r23, Y+14	; 0x0e
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	a6 01       	movw	r20, r12
    1380:	95 01       	movw	r18, r10
    1382:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1386:	2c ed       	ldi	r18, 0xDC	; 220
    1388:	38 eb       	ldi	r19, 0xB8	; 184
    138a:	48 e0       	ldi	r20, 0x08	; 8
    138c:	5e e3       	ldi	r21, 0x3E	; 62
    138e:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1392:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1396:	d4 01       	movw	r26, r8
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	7c 93       	st	X, r23
    139c:	6e 93       	st	-X, r22
    139e:	14 97       	sbiw	r26, 0x04	; 4
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2c 92       	st	X, r2
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	1c 92       	st	X, r1
    13aa:	1e 92       	st	-X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	43 2d       	mov	r20, r3
    13b4:	29 89       	ldd	r18, Y+17	; 0x11
    13b6:	3a 89       	ldd	r19, Y+18	; 0x12
    13b8:	0d 89       	ldd	r16, Y+21	; 0x15
    13ba:	1e 89       	ldd	r17, Y+22	; 0x16
    13bc:	bd c0       	rjmp	.+378    	; 0x1538 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    13ce:	87 fd       	sbrc	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <move_arc_stnb+0x3ac>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	c1 c0       	rjmp	.+386    	; 0x1558 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    13d6:	66 e6       	ldi	r22, 0x66	; 102
    13d8:	76 e6       	ldi	r23, 0x66	; 102
    13da:	8a ea       	ldi	r24, 0xAA	; 170
    13dc:	91 e4       	ldi	r25, 0x41	; 65
    13de:	a3 01       	movw	r20, r6
    13e0:	92 01       	movw	r18, r4
    13e2:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    13f6:	66 e6       	ldi	r22, 0x66	; 102
    13f8:	76 e6       	ldi	r23, 0x66	; 102
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	91 ec       	ldi	r25, 0xC1	; 193
    13fe:	a3 01       	movw	r20, r6
    1400:	92 01       	movw	r18, r4
    1402:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    1412:	5b 01       	movw	r10, r22
    1414:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1416:	2d b7       	in	r18, 0x3d	; 61
    1418:	3e b7       	in	r19, 0x3e	; 62
    141a:	29 50       	subi	r18, 0x09	; 9
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	3e bf       	out	0x3e, r19	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	2d bf       	out	0x3d, r18	; 61
    1428:	8d b6       	in	r8, 0x3d	; 61
    142a:	9e b6       	in	r9, 0x3e	; 62
    142c:	08 94       	sec
    142e:	81 1c       	adc	r8, r1
    1430:	91 1c       	adc	r9, r1
    1432:	6d 81       	ldd	r22, Y+5	; 0x05
    1434:	7e 81       	ldd	r23, Y+6	; 0x06
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1442:	2c ed       	ldi	r18, 0xDC	; 220
    1444:	38 eb       	ldi	r19, 0xB8	; 184
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    144e:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1452:	69 8f       	std	Y+25, r22	; 0x19
    1454:	7a 8f       	std	Y+26, r23	; 0x1a
    1456:	8b 8f       	std	Y+27, r24	; 0x1b
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	69 85       	ldd	r22, Y+9	; 0x09
    145c:	7a 85       	ldd	r23, Y+10	; 0x0a
    145e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1460:	9c 85       	ldd	r25, Y+12	; 0x0c
    1462:	a8 01       	movw	r20, r16
    1464:	97 01       	movw	r18, r14
    1466:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    146a:	2c ed       	ldi	r18, 0xDC	; 220
    146c:	38 eb       	ldi	r19, 0xB8	; 184
    146e:	48 e0       	ldi	r20, 0x08	; 8
    1470:	5e e3       	ldi	r21, 0x3E	; 62
    1472:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1476:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    147a:	6d 8f       	std	Y+29, r22	; 0x1d
    147c:	7e 8f       	std	Y+30, r23	; 0x1e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	a8 01       	movw	r20, r16
    148c:	97 01       	movw	r18, r14
    148e:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1492:	2c ed       	ldi	r18, 0xDC	; 220
    1494:	38 eb       	ldi	r19, 0xB8	; 184
    1496:	48 e0       	ldi	r20, 0x08	; 8
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    149e:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    14a2:	2b 01       	movw	r4, r22
    14a4:	3c 01       	movw	r6, r24
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	a6 01       	movw	r20, r12
    14b0:	95 01       	movw	r18, r10
    14b2:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    14b6:	2c ed       	ldi	r18, 0xDC	; 220
    14b8:	38 eb       	ldi	r19, 0xB8	; 184
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    14c2:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    14c6:	d4 01       	movw	r26, r8
    14c8:	6d 93       	st	X+, r22
    14ca:	7c 93       	st	X, r23
    14cc:	69 85       	ldd	r22, Y+9	; 0x09
    14ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d4:	a6 01       	movw	r20, r12
    14d6:	95 01       	movw	r18, r10
    14d8:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    14dc:	2c ed       	ldi	r18, 0xDC	; 220
    14de:	38 eb       	ldi	r19, 0xB8	; 184
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	5e e3       	ldi	r21, 0x3E	; 62
    14e4:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    14e8:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    14ec:	f4 01       	movw	r30, r8
    14ee:	73 83       	std	Z+3, r23	; 0x03
    14f0:	62 83       	std	Z+2, r22	; 0x02
    14f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1502:	2c ed       	ldi	r18, 0xDC	; 220
    1504:	38 eb       	ldi	r19, 0xB8	; 184
    1506:	48 e0       	ldi	r20, 0x08	; 8
    1508:	5e e3       	ldi	r21, 0x3E	; 62
    150a:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    150e:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1512:	d4 01       	movw	r26, r8
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	7c 93       	st	X, r23
    1518:	6e 93       	st	-X, r22
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	16 96       	adiw	r26, 0x06	; 6
    151e:	2c 92       	st	X, r2
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	18 96       	adiw	r26, 0x08	; 8
    1524:	1c 92       	st	X, r1
    1526:	1e 92       	st	-X, r1
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	43 2d       	mov	r20, r3
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1534:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1536:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1538:	72 01       	movw	r14, r4
    153a:	c2 2c       	mov	r12, r2
    153c:	aa 24       	eor	r10, r10
    153e:	bb 24       	eor	r11, r11
    1540:	83 2c       	mov	r8, r3
    1542:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_move>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	39 96       	adiw	r30, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	fe bf       	out	0x3e, r31	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	2b 01       	movw	r4, r22
    15c0:	3c 01       	movw	r6, r24
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	e9 86       	std	Y+9, r14	; 0x09
    15cc:	fa 86       	std	Y+10, r15	; 0x0a
    15ce:	0b 87       	std	Y+11, r16	; 0x0b
    15d0:	1c 87       	std	Y+12, r17	; 0x0c
    15d2:	ad 86       	std	Y+13, r10	; 0x0d
    15d4:	be 86       	std	Y+14, r11	; 0x0e
    15d6:	cf 86       	std	Y+15, r12	; 0x0f
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    15dc:	33 24       	eor	r3, r3
    15de:	ca 01       	movw	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	14 f4       	brge	.+4      	; 0x15f6 <move_arc_stwt+0x6c>
    15f2:	33 24       	eor	r3, r3
    15f4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	2c ed       	ldi	r18, 0xDC	; 220
    1600:	38 eb       	ldi	r19, 0xB8	; 184
    1602:	48 e0       	ldi	r20, 0x08	; 8
    1604:	5e e3       	ldi	r21, 0x3E	; 62
    1606:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    160a:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	77 ff       	sbrs	r23, 7
    1612:	03 c0       	rjmp	.+6      	; 0x161a <move_arc_stwt+0x90>
    1614:	30 95       	com	r19
    1616:	21 95       	neg	r18
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	b9 01       	movw	r22, r18
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	0e 94 99 2c 	call	0x5932	; 0x5932 <__floatsisf>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	2c ed       	ldi	r18, 0xDC	; 220
    163a:	38 eb       	ldi	r19, 0xB8	; 184
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	5e e3       	ldi	r21, 0x3E	; 62
    1640:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1644:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__fixsfsi>
    1648:	9b 01       	movw	r18, r22
    164a:	77 ff       	sbrs	r23, 7
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <move_arc_stwt+0xca>
    164e:	30 95       	com	r19
    1650:	21 95       	neg	r18
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	b9 01       	movw	r22, r18
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 99 2c 	call	0x5932	; 0x5932 <__floatsisf>
    1662:	4b 01       	movw	r8, r22
    1664:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1666:	6d 85       	ldd	r22, Y+13	; 0x0d
    1668:	7e 85       	ldd	r23, Y+14	; 0x0e
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	2c ed       	ldi	r18, 0xDC	; 220
    1670:	38 eb       	ldi	r19, 0xB8	; 184
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	5e e3       	ldi	r21, 0x3E	; 62
    1676:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    167a:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 ff       	sbrs	r23, 7
    1682:	03 c0       	rjmp	.+6      	; 0x168a <move_arc_stwt+0x100>
    1684:	30 95       	com	r19
    1686:	21 95       	neg	r18
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	0e 94 99 2c 	call	0x5932	; 0x5932 <__floatsisf>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	5f e4       	ldi	r21, 0x4F	; 79
    16a8:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	a1 f5       	brne	.+104    	; 0x1718 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    16b0:	69 81       	ldd	r22, Y+1	; 0x01
    16b2:	7a 81       	ldd	r23, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	c5 01       	movw	r24, r10
    16c2:	b4 01       	movw	r22, r8
    16c4:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	29 50       	subi	r18, 0x09	; 9
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	3e bf       	out	0x3e, r19	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	2d bf       	out	0x3d, r18	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ad b7       	in	r26, 0x3d	; 61
    16f2:	be b7       	in	r27, 0x3e	; 62
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	5c 92       	st	X, r5
    16f8:	4e 92       	st	-X, r4
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	93 82       	std	Z+3, r9	; 0x03
    16fe:	82 82       	std	Z+2, r8	; 0x02
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    1704:	26 82       	std	Z+6, r2	; 0x06
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	43 2d       	mov	r20, r3
    1710:	92 01       	movw	r18, r4
    1712:	84 01       	movw	r16, r8
    1714:	76 01       	movw	r14, r12
    1716:	c1 c1       	rjmp	.+898    	; 0x1a9a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	e9 f5       	brne	.+122    	; 0x17a6 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1738:	3b 01       	movw	r6, r22
    173a:	c5 01       	movw	r24, r10
    173c:	b4 01       	movw	r22, r8
    173e:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1742:	8b 01       	movw	r16, r22
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    174c:	7b 01       	movw	r14, r22
    174e:	2d b7       	in	r18, 0x3d	; 61
    1750:	3e b7       	in	r19, 0x3e	; 62
    1752:	29 50       	subi	r18, 0x09	; 9
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	2d bf       	out	0x3d, r18	; 61
    1760:	ed b7       	in	r30, 0x3d	; 61
    1762:	fe b7       	in	r31, 0x3e	; 62
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	33 20       	and	r3, r3
    176a:	09 f4       	brne	.+2      	; 0x176e <move_arc_stwt+0x1e4>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	71 82       	std	Z+1, r7	; 0x01
    1770:	60 82       	st	Z, r6
    1772:	13 83       	std	Z+3, r17	; 0x03
    1774:	02 83       	std	Z+2, r16	; 0x02
    1776:	f5 82       	std	Z+5, r15	; 0x05
    1778:	e4 82       	std	Z+4, r14	; 0x04
    177a:	26 82       	std	Z+6, r2	; 0x06
    177c:	10 86       	std	Z+8, r1	; 0x08
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	93 01       	movw	r18, r6
    1786:	c2 2c       	mov	r12, r2
    1788:	aa 24       	eor	r10, r10
    178a:	bb 24       	eor	r11, r11
    178c:	83 2c       	mov	r8, r3
    178e:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_move>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	19 96       	adiw	r26, 0x09	; 9
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	be bf       	out	0x3e, r27	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	ad bf       	out	0x3d, r26	; 61
    17a4:	89 c1       	rjmp	.+786    	; 0x1ab8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <move_arc_stwt+0x232>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17bc:	66 e6       	ldi	r22, 0x66	; 102
    17be:	76 e6       	ldi	r23, 0x66	; 102
    17c0:	8a ea       	ldi	r24, 0xAA	; 170
    17c2:	91 ec       	ldi	r25, 0xC1	; 193
    17c4:	a3 01       	movw	r20, r6
    17c6:	92 01       	movw	r18, r4
    17c8:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    17d8:	7b 01       	movw	r14, r22
    17da:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17dc:	66 e6       	ldi	r22, 0x66	; 102
    17de:	76 e6       	ldi	r23, 0x66	; 102
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	91 e4       	ldi	r25, 0x41	; 65
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    17f8:	5b 01       	movw	r10, r22
    17fa:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    17fc:	ed b7       	in	r30, 0x3d	; 61
    17fe:	fe b7       	in	r31, 0x3e	; 62
    1800:	39 97       	sbiw	r30, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	8d b6       	in	r8, 0x3d	; 61
    180e:	9e b6       	in	r9, 0x3e	; 62
    1810:	08 94       	sec
    1812:	81 1c       	adc	r8, r1
    1814:	91 1c       	adc	r9, r1
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	a8 01       	movw	r20, r16
    1820:	97 01       	movw	r18, r14
    1822:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1826:	2c ed       	ldi	r18, 0xDC	; 220
    1828:	38 eb       	ldi	r19, 0xB8	; 184
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	5e e3       	ldi	r21, 0x3E	; 62
    182e:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1832:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1836:	69 8b       	std	Y+17, r22	; 0x11
    1838:	7a 8b       	std	Y+18, r23	; 0x12
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	69 85       	ldd	r22, Y+9	; 0x09
    1840:	7a 85       	ldd	r23, Y+10	; 0x0a
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	a8 01       	movw	r20, r16
    1848:	97 01       	movw	r18, r14
    184a:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    184e:	2c ed       	ldi	r18, 0xDC	; 220
    1850:	38 eb       	ldi	r19, 0xB8	; 184
    1852:	48 e0       	ldi	r20, 0x08	; 8
    1854:	5e e3       	ldi	r21, 0x3E	; 62
    1856:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    185a:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	6d 85       	ldd	r22, Y+13	; 0x0d
    1868:	7e 85       	ldd	r23, Y+14	; 0x0e
    186a:	8f 85       	ldd	r24, Y+15	; 0x0f
    186c:	98 89       	ldd	r25, Y+16	; 0x10
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1876:	2c ed       	ldi	r18, 0xDC	; 220
    1878:	38 eb       	ldi	r19, 0xB8	; 184
    187a:	48 e0       	ldi	r20, 0x08	; 8
    187c:	5e e3       	ldi	r21, 0x3E	; 62
    187e:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1882:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1886:	2b 01       	movw	r4, r22
    1888:	3c 01       	movw	r6, r24
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	a6 01       	movw	r20, r12
    1894:	95 01       	movw	r18, r10
    1896:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    189a:	2c ed       	ldi	r18, 0xDC	; 220
    189c:	38 eb       	ldi	r19, 0xB8	; 184
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    18a6:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    18aa:	d4 01       	movw	r26, r8
    18ac:	6d 93       	st	X+, r22
    18ae:	7c 93       	st	X, r23
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    18c0:	2c ed       	ldi	r18, 0xDC	; 220
    18c2:	38 eb       	ldi	r19, 0xB8	; 184
    18c4:	48 e0       	ldi	r20, 0x08	; 8
    18c6:	5e e3       	ldi	r21, 0x3E	; 62
    18c8:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    18cc:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    18d0:	f4 01       	movw	r30, r8
    18d2:	73 83       	std	Z+3, r23	; 0x03
    18d4:	62 83       	std	Z+2, r22	; 0x02
    18d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	a6 01       	movw	r20, r12
    18e0:	95 01       	movw	r18, r10
    18e2:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    18e6:	2c ed       	ldi	r18, 0xDC	; 220
    18e8:	38 eb       	ldi	r19, 0xB8	; 184
    18ea:	48 e0       	ldi	r20, 0x08	; 8
    18ec:	5e e3       	ldi	r21, 0x3E	; 62
    18ee:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    18f2:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    18f6:	d4 01       	movw	r26, r8
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	7c 93       	st	X, r23
    18fc:	6e 93       	st	-X, r22
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	2c 92       	st	X, r2
    1904:	16 97       	sbiw	r26, 0x06	; 6
    1906:	18 96       	adiw	r26, 0x08	; 8
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	43 2d       	mov	r20, r3
    1914:	29 89       	ldd	r18, Y+17	; 0x11
    1916:	3a 89       	ldd	r19, Y+18	; 0x12
    1918:	0d 89       	ldd	r16, Y+21	; 0x15
    191a:	1e 89       	ldd	r17, Y+22	; 0x16
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    192e:	87 fd       	sbrc	r24, 7
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <move_arc_stwt+0x3ac>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c1 c0       	rjmp	.+386    	; 0x1ab8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1936:	66 e6       	ldi	r22, 0x66	; 102
    1938:	76 e6       	ldi	r23, 0x66	; 102
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	91 e4       	ldi	r25, 0x41	; 65
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1956:	66 e6       	ldi	r22, 0x66	; 102
    1958:	76 e6       	ldi	r23, 0x66	; 102
    195a:	8a ea       	ldi	r24, 0xAA	; 170
    195c:	91 ec       	ldi	r25, 0xC1	; 193
    195e:	a3 01       	movw	r20, r6
    1960:	92 01       	movw	r18, r4
    1962:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    1972:	5b 01       	movw	r10, r22
    1974:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1976:	2d b7       	in	r18, 0x3d	; 61
    1978:	3e b7       	in	r19, 0x3e	; 62
    197a:	29 50       	subi	r18, 0x09	; 9
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	3e bf       	out	0x3e, r19	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	2d bf       	out	0x3d, r18	; 61
    1988:	8d b6       	in	r8, 0x3d	; 61
    198a:	9e b6       	in	r9, 0x3e	; 62
    198c:	08 94       	sec
    198e:	81 1c       	adc	r8, r1
    1990:	91 1c       	adc	r9, r1
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	a8 01       	movw	r20, r16
    199c:	97 01       	movw	r18, r14
    199e:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    19a2:	2c ed       	ldi	r18, 0xDC	; 220
    19a4:	38 eb       	ldi	r19, 0xB8	; 184
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	5e e3       	ldi	r21, 0x3E	; 62
    19aa:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    19ae:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    19b2:	69 8f       	std	Y+25, r22	; 0x19
    19b4:	7a 8f       	std	Y+26, r23	; 0x1a
    19b6:	8b 8f       	std	Y+27, r24	; 0x1b
    19b8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	a8 01       	movw	r20, r16
    19c4:	97 01       	movw	r18, r14
    19c6:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    19ca:	2c ed       	ldi	r18, 0xDC	; 220
    19cc:	38 eb       	ldi	r19, 0xB8	; 184
    19ce:	48 e0       	ldi	r20, 0x08	; 8
    19d0:	5e e3       	ldi	r21, 0x3E	; 62
    19d2:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    19d6:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    19da:	6d 8f       	std	Y+29, r22	; 0x1d
    19dc:	7e 8f       	std	Y+30, r23	; 0x1e
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	a8 01       	movw	r20, r16
    19ec:	97 01       	movw	r18, r14
    19ee:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    19f2:	2c ed       	ldi	r18, 0xDC	; 220
    19f4:	38 eb       	ldi	r19, 0xB8	; 184
    19f6:	48 e0       	ldi	r20, 0x08	; 8
    19f8:	5e e3       	ldi	r21, 0x3E	; 62
    19fa:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    19fe:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1a02:	2b 01       	movw	r4, r22
    1a04:	3c 01       	movw	r6, r24
    1a06:	6d 81       	ldd	r22, Y+5	; 0x05
    1a08:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1a16:	2c ed       	ldi	r18, 0xDC	; 220
    1a18:	38 eb       	ldi	r19, 0xB8	; 184
    1a1a:	48 e0       	ldi	r20, 0x08	; 8
    1a1c:	5e e3       	ldi	r21, 0x3E	; 62
    1a1e:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1a22:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1a26:	d4 01       	movw	r26, r8
    1a28:	6d 93       	st	X+, r22
    1a2a:	7c 93       	st	X, r23
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1a3c:	2c ed       	ldi	r18, 0xDC	; 220
    1a3e:	38 eb       	ldi	r19, 0xB8	; 184
    1a40:	48 e0       	ldi	r20, 0x08	; 8
    1a42:	5e e3       	ldi	r21, 0x3E	; 62
    1a44:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1a48:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	73 83       	std	Z+3, r23	; 0x03
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    1a62:	2c ed       	ldi	r18, 0xDC	; 220
    1a64:	38 eb       	ldi	r19, 0xB8	; 184
    1a66:	48 e0       	ldi	r20, 0x08	; 8
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    1a6e:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1a72:	d4 01       	movw	r26, r8
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	7c 93       	st	X, r23
    1a78:	6e 93       	st	-X, r22
    1a7a:	14 97       	sbiw	r26, 0x04	; 4
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	2c 92       	st	X, r2
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	18 96       	adiw	r26, 0x08	; 8
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	17 97       	sbiw	r26, 0x07	; 7
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	43 2d       	mov	r20, r3
    1a90:	29 8d       	ldd	r18, Y+25	; 0x19
    1a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a94:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a98:	72 01       	movw	r14, r4
    1a9a:	c2 2c       	mov	r12, r2
    1a9c:	aa 24       	eor	r10, r10
    1a9e:	bb 24       	eor	r11, r11
    1aa0:	83 2c       	mov	r8, r3
    1aa2:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_move>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	39 96       	adiw	r30, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ab8:	a0 96       	adiw	r28, 0x20	; 32
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <setOdometry>:
* Input Variables:	void
* Output Return:	float odometry 
* Overview:		    Sets the odometry to move
********************************************************************/
void setOdometry( float odometry )
{	
    1aea:	8f 92       	push	r8
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
	// Set the gloable odometryTrigger
	odometryTrigger = odometry;
    1afa:	60 93 16 05 	sts	0x0516, r22
    1afe:	70 93 17 05 	sts	0x0517, r23
    1b02:	80 93 18 05 	sts	0x0518, r24
    1b06:	90 93 19 05 	sts	0x0519, r25
	
	// Set the stepers
	STEPPER_move_stnb( STEPPER_BOTH, 
    1b0a:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    1b0e:	8b 01       	movw	r16, r22
    1b10:	9c 01       	movw	r18, r24
    1b12:	8d b7       	in	r24, 0x3d	; 61
    1b14:	9e b7       	in	r25, 0x3e	; 62
    1b16:	09 97       	sbiw	r24, 0x09	; 9
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	9e bf       	out	0x3e, r25	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	8d bf       	out	0x3d, r24	; 61
    1b22:	ed b7       	in	r30, 0x3d	; 61
    1b24:	fe b7       	in	r31, 0x3e	; 62
    1b26:	31 96       	adiw	r30, 0x01	; 1
    1b28:	ad b7       	in	r26, 0x3d	; 61
    1b2a:	be b7       	in	r27, 0x3e	; 62
    1b2c:	12 96       	adiw	r26, 0x02	; 2
    1b2e:	1c 93       	st	X, r17
    1b30:	0e 93       	st	-X, r16
    1b32:	11 97       	sbiw	r26, 0x01	; 1
    1b34:	88 ec       	ldi	r24, 0xC8	; 200
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	93 83       	std	Z+3, r25	; 0x03
    1b3a:	82 83       	std	Z+2, r24	; 0x02
    1b3c:	82 ec       	ldi	r24, 0xC2	; 194
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	95 83       	std	Z+5, r25	; 0x05
    1b42:	84 83       	std	Z+4, r24	; 0x04
    1b44:	16 82       	std	Z+6, r1	; 0x06
    1b46:	10 86       	std	Z+8, r1	; 0x08
    1b48:	17 82       	std	Z+7, r1	; 0x07
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	62 e0       	ldi	r22, 0x02	; 2
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	98 01       	movw	r18, r16
    1b52:	08 ec       	ldi	r16, 0xC8	; 200
    1b54:	10 e0       	ldi	r17, 0x00	; 0
    1b56:	92 ec       	ldi	r25, 0xC2	; 194
    1b58:	e9 2e       	mov	r14, r25
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	f9 2e       	mov	r15, r25
    1b5e:	cc 24       	eor	r12, r12
    1b60:	aa 24       	eor	r10, r10
    1b62:	bb 24       	eor	r11, r11
    1b64:	88 24       	eor	r8, r8
    1b66:	83 94       	inc	r8
    1b68:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_move>
    1b6c:	8d b7       	in	r24, 0x3d	; 61
    1b6e:	9e b7       	in	r25, 0x3e	; 62
    1b70:	09 96       	adiw	r24, 0x09	; 9
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	9e bf       	out	0x3e, r25	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	8d bf       	out	0x3d, r24	; 61
	STEPPER_REV, odometryTrigger, MAX_SPEED, MAX_ACL, STEPPER_BRK_OFF, // Left
	STEPPER_REV, odometryTrigger, MAX_SPEED, MAX_ACL, STEPPER_BRK_OFF ); // Right
}
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	8f 90       	pop	r8
    1b8c:	08 95       	ret

00001b8e <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1b8e:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1b92:	28 2f       	mov	r18, r24
    1b94:	21 70       	andi	r18, 0x01	; 1
    1b96:	20 93 2e 06 	sts	0x062E, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	82 70       	andi	r24, 0x02	; 2
    1b9e:	90 70       	andi	r25, 0x00	; 0
    1ba0:	95 95       	asr	r25
    1ba2:	87 95       	ror	r24
    1ba4:	80 93 2f 06 	sts	0x062F, r24
}
    1ba8:	08 95       	ret

00001baa <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1baa:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1bae:	60 93 26 05 	sts	0x0526, r22
    1bb2:	70 93 27 05 	sts	0x0527, r23
    1bb6:	80 93 28 05 	sts	0x0528, r24
    1bba:	90 93 29 05 	sts	0x0529, r25
	leftLightVolt = getLeftLight();
    1bbe:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1bc2:	60 93 bc 06 	sts	0x06BC, r22
    1bc6:	70 93 bd 06 	sts	0x06BD, r23
    1bca:	80 93 be 06 	sts	0x06BE, r24
    1bce:	90 93 bf 06 	sts	0x06BF, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1bd2:	08 95       	ret

00001bd4 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1bd4:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1bd8:	60 93 8f 04 	sts	0x048F, r22
    1bdc:	70 93 90 04 	sts	0x0490, r23
    1be0:	80 93 91 04 	sts	0x0491, r24
    1be4:	90 93 92 04 	sts	0x0492, r25
	bkIR = getBackIR();
    1be8:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1bec:	60 93 99 04 	sts	0x0499, r22
    1bf0:	70 93 9a 04 	sts	0x049A, r23
    1bf4:	80 93 9b 04 	sts	0x049B, r24
    1bf8:	90 93 9c 04 	sts	0x049C, r25
	ltIR = getLeftIR();
    1bfc:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1c00:	60 93 30 06 	sts	0x0630, r22
    1c04:	70 93 31 06 	sts	0x0631, r23
    1c08:	80 93 32 06 	sts	0x0632, r24
    1c0c:	90 93 33 06 	sts	0x0633, r25
	rtIR = getRightIR();
    1c10:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1c14:	60 93 34 06 	sts	0x0634, r22
    1c18:	70 93 35 06 	sts	0x0635, r23
    1c1c:	80 93 36 06 	sts	0x0636, r24
    1c20:	90 93 37 06 	sts	0x0637, r25
}
    1c24:	08 95       	ret

00001c26 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	16 2f       	mov	r17, r22
    1c38:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1c3a:	5f e1       	ldi	r21, 0x1F	; 31
    1c3c:	f5 2e       	mov	r15, r21
    1c3e:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1c40:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1c42:	0f 2d       	mov	r16, r15
    1c44:	06 95       	lsr	r16
    1c46:	06 95       	lsr	r16
    1c48:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1c4a:	c0 2f       	mov	r28, r16
    1c4c:	d0 e0       	ldi	r29, 0x00	; 0
    1c4e:	c1 2e       	mov	r12, r17
    1c50:	dd 24       	eor	r13, r13
    1c52:	ce 01       	movw	r24, r28
    1c54:	b6 01       	movw	r22, r12
    1c56:	0e 94 a4 19 	call	0x3348	; 0x3348 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1c5a:	80 2f       	mov	r24, r16
    1c5c:	61 2f       	mov	r22, r17
    1c5e:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_set_next_PGC>
    1c62:	fe 01       	movw	r30, r28
    1c64:	45 e0       	ldi	r20, 0x05	; 5
    1c66:	ee 0f       	add	r30, r30
    1c68:	ff 1f       	adc	r31, r31
    1c6a:	4a 95       	dec	r20
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <LCD_set_pixel+0x40>
    1c6e:	2f 2d       	mov	r18, r15
    1c70:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1c72:	ee 20       	and	r14, r14
    1c74:	89 f0       	breq	.+34     	; 0x1c98 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1c76:	ec 0d       	add	r30, r12
    1c78:	fd 1d       	adc	r31, r13
    1c7a:	e8 55       	subi	r30, 0x58	; 88
    1c7c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c7e:	27 70       	andi	r18, 0x07	; 7
    1c80:	30 70       	andi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <LCD_set_pixel+0x66>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	2a 95       	dec	r18
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <LCD_set_pixel+0x62>
    1c90:	20 81       	ld	r18, Z
    1c92:	28 2b       	or	r18, r24
    1c94:	20 83       	st	Z, r18
    1c96:	11 c0       	rjmp	.+34     	; 0x1cba <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1c98:	ec 0d       	add	r30, r12
    1c9a:	fd 1d       	adc	r31, r13
    1c9c:	e8 55       	subi	r30, 0x58	; 88
    1c9e:	fa 4f       	sbci	r31, 0xFA	; 250
    1ca0:	27 70       	andi	r18, 0x07	; 7
    1ca2:	30 70       	andi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <LCD_set_pixel+0x88>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	2a 95       	dec	r18
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <LCD_set_pixel+0x84>
    1cb2:	80 95       	com	r24
    1cb4:	20 81       	ld	r18, Z
    1cb6:	82 23       	and	r24, r18
    1cb8:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1cba:	35 e0       	ldi	r19, 0x05	; 5
    1cbc:	cc 0f       	add	r28, r28
    1cbe:	dd 1f       	adc	r29, r29
    1cc0:	3a 95       	dec	r19
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <LCD_set_pixel+0x96>
    1cc4:	cc 0d       	add	r28, r12
    1cc6:	dd 1d       	adc	r29, r13
    1cc8:	c8 55       	subi	r28, 0x58	; 88
    1cca:	da 4f       	sbci	r29, 0xFA	; 250
    1ccc:	88 81       	ld	r24, Y
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
}
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	08 95       	ret

00001ce6 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1ce6:	7f 92       	push	r7
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	98 2e       	mov	r9, r24
    1cfe:	b6 2e       	mov	r11, r22
    1d00:	c4 2e       	mov	r12, r20
    1d02:	a2 2e       	mov	r10, r18
    1d04:	80 2e       	mov	r8, r16
    1d06:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1d08:	bb 0c       	add	r11, r11
    1d0a:	bb 0c       	add	r11, r11
    1d0c:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1d0e:	dd 24       	eor	r13, r13
    1d10:	23 e0       	ldi	r18, 0x03	; 3
    1d12:	cc 0c       	add	r12, r12
    1d14:	dd 1c       	adc	r13, r13
    1d16:	2a 95       	dec	r18
    1d18:	e1 f7       	brne	.-8      	; 0x1d12 <printCell+0x2c>
    1d1a:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1d1c:	0f e1       	ldi	r16, 0x1F	; 31
    1d1e:	0b 19       	sub	r16, r11
    1d20:	80 2f       	mov	r24, r16
    1d22:	6c 2d       	mov	r22, r12
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1d2a:	98 e1       	ldi	r25, 0x18	; 24
    1d2c:	e9 2e       	mov	r14, r25
    1d2e:	eb 18       	sub	r14, r11
    1d30:	8e 2d       	mov	r24, r14
    1d32:	6c 2d       	mov	r22, r12
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1d3a:	87 e0       	ldi	r24, 0x07	; 7
    1d3c:	f8 2e       	mov	r15, r24
    1d3e:	fc 0c       	add	r15, r12
    1d40:	80 2f       	mov	r24, r16
    1d42:	6f 2d       	mov	r22, r15
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1d4a:	8e 2d       	mov	r24, r14
    1d4c:	6f 2d       	mov	r22, r15
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	
	if(cell&0b1000){
    1d54:	c9 2c       	mov	r12, r9
    1d56:	93 fe       	sbrs	r9, 3
    1d58:	24 c0       	rjmp	.+72     	; 0x1da2 <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1d5a:	61 2f       	mov	r22, r17
    1d5c:	6f 5f       	subi	r22, 0xFF	; 255
    1d5e:	80 2f       	mov	r24, r16
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1d66:	61 2f       	mov	r22, r17
    1d68:	6e 5f       	subi	r22, 0xFE	; 254
    1d6a:	80 2f       	mov	r24, r16
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1d72:	61 2f       	mov	r22, r17
    1d74:	6d 5f       	subi	r22, 0xFD	; 253
    1d76:	80 2f       	mov	r24, r16
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1d7e:	61 2f       	mov	r22, r17
    1d80:	6c 5f       	subi	r22, 0xFC	; 252
    1d82:	80 2f       	mov	r24, r16
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1d8a:	61 2f       	mov	r22, r17
    1d8c:	6b 5f       	subi	r22, 0xFB	; 251
    1d8e:	80 2f       	mov	r24, r16
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1d96:	61 2f       	mov	r22, r17
    1d98:	6a 5f       	subi	r22, 0xFA	; 250
    1d9a:	80 2f       	mov	r24, r16
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}
	if(cell&0b0100){
    1da2:	c2 fe       	sbrs	r12, 2
    1da4:	25 c0       	rjmp	.+74     	; 0x1df0 <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1da6:	8b 2d       	mov	r24, r11
    1da8:	80 95       	com	r24
    1daa:	81 5e       	subi	r24, 0xE1	; 225
    1dac:	6f 2d       	mov	r22, r15
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1db4:	8d e1       	ldi	r24, 0x1D	; 29
    1db6:	8b 19       	sub	r24, r11
    1db8:	6f 2d       	mov	r22, r15
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1dc0:	8c e1       	ldi	r24, 0x1C	; 28
    1dc2:	8b 19       	sub	r24, r11
    1dc4:	6f 2d       	mov	r22, r15
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1dcc:	8b e1       	ldi	r24, 0x1B	; 27
    1dce:	8b 19       	sub	r24, r11
    1dd0:	6f 2d       	mov	r22, r15
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1dd8:	8a e1       	ldi	r24, 0x1A	; 26
    1dda:	8b 19       	sub	r24, r11
    1ddc:	6f 2d       	mov	r22, r15
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1de4:	89 e1       	ldi	r24, 0x19	; 25
    1de6:	8b 19       	sub	r24, r11
    1de8:	6f 2d       	mov	r22, r15
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}
	if(cell&0b0010){
    1df0:	c1 fe       	sbrs	r12, 1
    1df2:	24 c0       	rjmp	.+72     	; 0x1e3c <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1df4:	61 2f       	mov	r22, r17
    1df6:	6f 5f       	subi	r22, 0xFF	; 255
    1df8:	8e 2d       	mov	r24, r14
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1e00:	61 2f       	mov	r22, r17
    1e02:	6e 5f       	subi	r22, 0xFE	; 254
    1e04:	8e 2d       	mov	r24, r14
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1e0c:	61 2f       	mov	r22, r17
    1e0e:	6d 5f       	subi	r22, 0xFD	; 253
    1e10:	8e 2d       	mov	r24, r14
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1e18:	61 2f       	mov	r22, r17
    1e1a:	6c 5f       	subi	r22, 0xFC	; 252
    1e1c:	8e 2d       	mov	r24, r14
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1e24:	61 2f       	mov	r22, r17
    1e26:	6b 5f       	subi	r22, 0xFB	; 251
    1e28:	8e 2d       	mov	r24, r14
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1e30:	61 2f       	mov	r22, r17
    1e32:	6a 5f       	subi	r22, 0xFA	; 250
    1e34:	8e 2d       	mov	r24, r14
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}
	if(cell&0b0001){
    1e3c:	c0 fe       	sbrs	r12, 0
    1e3e:	25 c0       	rjmp	.+74     	; 0x1e8a <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1e40:	8b 2d       	mov	r24, r11
    1e42:	80 95       	com	r24
    1e44:	81 5e       	subi	r24, 0xE1	; 225
    1e46:	61 2f       	mov	r22, r17
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1e4e:	8d e1       	ldi	r24, 0x1D	; 29
    1e50:	8b 19       	sub	r24, r11
    1e52:	61 2f       	mov	r22, r17
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1e5a:	8c e1       	ldi	r24, 0x1C	; 28
    1e5c:	8b 19       	sub	r24, r11
    1e5e:	61 2f       	mov	r22, r17
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1e66:	8b e1       	ldi	r24, 0x1B	; 27
    1e68:	8b 19       	sub	r24, r11
    1e6a:	61 2f       	mov	r22, r17
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1e72:	8a e1       	ldi	r24, 0x1A	; 26
    1e74:	8b 19       	sub	r24, r11
    1e76:	61 2f       	mov	r22, r17
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1e7e:	89 e1       	ldi	r24, 0x19	; 25
    1e80:	8b 19       	sub	r24, r11
    1e82:	61 2f       	mov	r22, r17
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}	
	if(isrobot){
    1e8a:	aa 20       	and	r10, r10
    1e8c:	e1 f1       	breq	.+120    	; 0x1f06 <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1e8e:	bc e1       	ldi	r27, 0x1C	; 28
    1e90:	eb 2e       	mov	r14, r27
    1e92:	eb 18       	sub	r14, r11
    1e94:	a3 e0       	ldi	r26, 0x03	; 3
    1e96:	ca 2e       	mov	r12, r26
    1e98:	c1 0e       	add	r12, r17
    1e9a:	8e 2d       	mov	r24, r14
    1e9c:	6c 2d       	mov	r22, r12
    1e9e:	4a 2d       	mov	r20, r10
    1ea0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1ea4:	fb e1       	ldi	r31, 0x1B	; 27
    1ea6:	ff 2e       	mov	r15, r31
    1ea8:	fb 18       	sub	r15, r11
    1eaa:	8f 2d       	mov	r24, r15
    1eac:	6c 2d       	mov	r22, r12
    1eae:	4a 2d       	mov	r20, r10
    1eb0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1eb4:	01 2f       	mov	r16, r17
    1eb6:	0c 5f       	subi	r16, 0xFC	; 252
    1eb8:	8e 2d       	mov	r24, r14
    1eba:	60 2f       	mov	r22, r16
    1ebc:	4a 2d       	mov	r20, r10
    1ebe:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1ec2:	8f 2d       	mov	r24, r15
    1ec4:	60 2f       	mov	r22, r16
    1ec6:	4a 2d       	mov	r20, r10
    1ec8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		
		switch(orent){
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	88 16       	cp	r8, r24
    1ed0:	71 f0       	breq	.+28     	; 0x1eee <printCell+0x208>
    1ed2:	88 16       	cp	r8, r24
    1ed4:	40 f0       	brcs	.+16     	; 0x1ee6 <printCell+0x200>
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	88 16       	cp	r8, r24
    1eda:	61 f0       	breq	.+24     	; 0x1ef4 <printCell+0x20e>
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	88 16       	cp	r8, r24
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <printCell+0x1fe>
    1ee2:	4a c0       	rjmp	.+148    	; 0x1f78 <printCell+0x292>
    1ee4:	0b c0       	rjmp	.+22     	; 0x1efc <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1ee6:	8d e1       	ldi	r24, 0x1D	; 29
    1ee8:	8b 19       	sub	r24, r11
    1eea:	6c 2d       	mov	r22, r12
    1eec:	0a c0       	rjmp	.+20     	; 0x1f02 <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1eee:	1b 5f       	subi	r17, 0xFB	; 251
    1ef0:	8e 2d       	mov	r24, r14
    1ef2:	06 c0       	rjmp	.+12     	; 0x1f00 <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    1ef4:	8a e1       	ldi	r24, 0x1A	; 26
    1ef6:	8b 19       	sub	r24, r11
    1ef8:	60 2f       	mov	r22, r16
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    1efc:	1e 5f       	subi	r17, 0xFE	; 254
    1efe:	8f 2d       	mov	r24, r15
    1f00:	61 2f       	mov	r22, r17
    1f02:	4a 2d       	mov	r20, r10
    1f04:	37 c0       	rjmp	.+110    	; 0x1f74 <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    1f06:	77 20       	and	r7, r7
    1f08:	b9 f1       	breq	.+110    	; 0x1f78 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1f0a:	ec e1       	ldi	r30, 0x1C	; 28
    1f0c:	ce 2e       	mov	r12, r30
    1f0e:	cb 18       	sub	r12, r11
    1f10:	73 e0       	ldi	r23, 0x03	; 3
    1f12:	e7 2e       	mov	r14, r23
    1f14:	e1 0e       	add	r14, r17
    1f16:	8c 2d       	mov	r24, r12
    1f18:	6e 2d       	mov	r22, r14
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1f20:	0b e1       	ldi	r16, 0x1B	; 27
    1f22:	0b 19       	sub	r16, r11
    1f24:	80 2f       	mov	r24, r16
    1f26:	6e 2d       	mov	r22, r14
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1f2e:	64 e0       	ldi	r22, 0x04	; 4
    1f30:	f6 2e       	mov	r15, r22
    1f32:	f1 0e       	add	r15, r17
    1f34:	8c 2d       	mov	r24, r12
    1f36:	6f 2d       	mov	r22, r15
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1f3e:	80 2f       	mov	r24, r16
    1f40:	6f 2d       	mov	r22, r15
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1f48:	8d e1       	ldi	r24, 0x1D	; 29
    1f4a:	8b 19       	sub	r24, r11
    1f4c:	6e 2d       	mov	r22, r14
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1f54:	1b 5f       	subi	r17, 0xFB	; 251
    1f56:	8c 2d       	mov	r24, r12
    1f58:	61 2f       	mov	r22, r17
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    1f60:	8a e1       	ldi	r24, 0x1A	; 26
    1f62:	8b 19       	sub	r24, r11
    1f64:	6f 2d       	mov	r22, r15
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    1f6c:	13 50       	subi	r17, 0x03	; 3
    1f6e:	80 2f       	mov	r24, r16
    1f70:	61 2f       	mov	r22, r17
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		}
}
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	bf 90       	pop	r11
    1f86:	af 90       	pop	r10
    1f88:	9f 90       	pop	r9
    1f8a:	8f 90       	pop	r8
    1f8c:	7f 90       	pop	r7
    1f8e:	08 95       	ret

00001f90 <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1fa8:	80 91 2c 06 	lds	r24, 0x062C
    1fac:	a8 2e       	mov	r10, r24
    1fae:	a6 94       	lsr	r10
    1fb0:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    1fb2:	43 e0       	ldi	r20, 0x03	; 3
    1fb4:	b4 2e       	mov	r11, r20
    1fb6:	b8 22       	and	r11, r24
    1fb8:	cc 24       	eor	r12, r12
    1fba:	dd 24       	eor	r13, r13
    1fbc:	1e c0       	rjmp	.+60     	; 0x1ffa <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1fbe:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    1fc0:	fa 14       	cp	r15, r10
    1fc2:	19 f0       	breq	.+6      	; 0x1fca <printMap+0x3a>
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	06 c0       	rjmp	.+12     	; 0x1fd6 <printMap+0x46>
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	1b 15       	cp	r17, r11
    1fd0:	11 f4       	brne	.+4      	; 0x1fd6 <printMap+0x46>
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    1fd6:	6f 2d       	mov	r22, r15
    1fd8:	41 2f       	mov	r20, r17
    1fda:	00 91 2b 05 	lds	r16, 0x052B
    1fde:	e9 2c       	mov	r14, r9
    1fe0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1fe4:	1f 5f       	subi	r17, 0xFF	; 255
    1fe6:	21 96       	adiw	r28, 0x01	; 1
    1fe8:	14 30       	cpi	r17, 0x04	; 4
    1fea:	49 f7       	brne	.-46     	; 0x1fbe <printMap+0x2e>
    1fec:	08 94       	sec
    1fee:	c1 1c       	adc	r12, r1
    1ff0:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1ff2:	84 e0       	ldi	r24, 0x04	; 4
    1ff4:	c8 16       	cp	r12, r24
    1ff6:	d1 04       	cpc	r13, r1
    1ff8:	51 f0       	breq	.+20     	; 0x200e <printMap+0x7e>
    1ffa:	fc 2c       	mov	r15, r12
    1ffc:	e6 01       	movw	r28, r12
    1ffe:	cc 0f       	add	r28, r28
    2000:	dd 1f       	adc	r29, r29
    2002:	cc 0f       	add	r28, r28
    2004:	dd 1f       	adc	r29, r29
    2006:	c2 5e       	subi	r28, 0xE2	; 226
    2008:	dc 4f       	sbci	r29, 0xFC	; 252
    200a:	10 e0       	ldi	r17, 0x00	; 0
    200c:	d8 cf       	rjmp	.-80     	; 0x1fbe <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	ff 90       	pop	r15
    2018:	ef 90       	pop	r14
    201a:	df 90       	pop	r13
    201c:	cf 90       	pop	r12
    201e:	bf 90       	pop	r11
    2020:	af 90       	pop	r10
    2022:	9f 90       	pop	r9
    2024:	08 95       	ret

00002026 <checkOdometry>:
*					sets the flag whe appropriate
********************************************************************/
char checkOdometry( char reset )
{	
	// Check for a reset
	if (reset){
    2026:	88 23       	and	r24, r24
    2028:	91 f0       	breq	.+36     	; 0x204e <checkOdometry+0x28>
		odometryTrigger = 0;
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	80 93 16 05 	sts	0x0516, r24
    2036:	90 93 17 05 	sts	0x0517, r25
    203a:	a0 93 18 05 	sts	0x0518, r26
    203e:	b0 93 19 05 	sts	0x0519, r27
		STEPPER_set_steps(STEPPER_BOTH,odometryTrigger);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <STEPPER_set_steps>
    204c:	17 c0       	rjmp	.+46     	; 0x207c <checkOdometry+0x56>
		return SUCCESS;
	}
	
	// Get the current number of steps
	curr_step = STEPPER_get_nSteps();
    204e:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <STEPPER_get_nSteps>
    2052:	60 93 28 06 	sts	0x0628, r22
    2056:	70 93 29 06 	sts	0x0629, r23
    205a:	80 93 2a 06 	sts	0x062A, r24
    205e:	90 93 2b 06 	sts	0x062B, r25
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	80 91 2a 06 	lds	r24, 0x062A
    2068:	90 91 2b 06 	lds	r25, 0x062B
    206c:	20 91 28 06 	lds	r18, 0x0628
    2070:	30 91 29 06 	lds	r19, 0x0629
    2074:	82 0f       	add	r24, r18
    2076:	93 1f       	adc	r25, r19
    2078:	89 2b       	or	r24, r25
    207a:	09 f4       	brne	.+2      	; 0x207e <checkOdometry+0x58>
    207c:	41 e0       	ldi	r20, 0x01	; 1
	}

	// But if not zero
	//then return fial
	return FAIL;
}
    207e:	84 2f       	mov	r24, r20
    2080:	08 95       	ret

00002082 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2082:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <ATTINY_open>
    2086:	90 93 16 04 	sts	0x0416, r25
    208a:	80 93 15 04 	sts	0x0415, r24
	LEopstat = LED_open(); //open the LED module
    208e:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <LED_open>
    2092:	90 93 14 04 	sts	0x0414, r25
    2096:	80 93 13 04 	sts	0x0413, r24
	LCopstat = LCD_open(); //open the LCD module
    209a:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <LCD_open>
    209e:	90 93 12 04 	sts	0x0412, r25
    20a2:	80 93 11 04 	sts	0x0411, r24
	STEPPER_open(); // Open STEPPER module for use
    20a6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    20aa:	82 e0       	ldi	r24, 0x02	; 2
    20ac:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <SPKR_open>
	
	LED_open();
    20b0:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <LED_open>
	I2C_open();
    20b4:	0e 94 c4 20 	call	0x4188	; 0x4188 <I2C_open>
	ADC_open();//open the ADC module
    20b8:	0e 94 68 18 	call	0x30d0	; 0x30d0 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	0e 94 ca 18 	call	0x3194	; 0x3194 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    20c2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <checkIR>
	prefilter(1);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    20cc:	8f ee       	ldi	r24, 0xEF	; 239
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a5 e8       	ldi	r26, 0x85	; 133
    20d2:	b1 e4       	ldi	r27, 0x41	; 65
    20d4:	80 93 16 05 	sts	0x0516, r24
    20d8:	90 93 17 05 	sts	0x0517, r25
    20dc:	a0 93 18 05 	sts	0x0518, r26
    20e0:	b0 93 19 05 	sts	0x0519, r27
    20e4:	20 e0       	ldi	r18, 0x00	; 0
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	0a c0       	rjmp	.+20     	; 0x20fe <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    20ea:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    20ec:	01 96       	adiw	r24, 0x01	; 1
    20ee:	80 32       	cpi	r24, 0x20	; 32
    20f0:	91 05       	cpc	r25, r1
    20f2:	d9 f7       	brne	.-10     	; 0x20ea <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    20f4:	2f 5f       	subi	r18, 0xFF	; 255
    20f6:	3f 4f       	sbci	r19, 0xFF	; 255
    20f8:	24 30       	cpi	r18, 0x04	; 4
    20fa:	31 05       	cpc	r19, r1
    20fc:	59 f0       	breq	.+22     	; 0x2114 <initializeRobot+0x92>
    20fe:	f9 01       	movw	r30, r18
    2100:	55 e0       	ldi	r21, 0x05	; 5
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	5a 95       	dec	r21
    2108:	e1 f7       	brne	.-8      	; 0x2102 <initializeRobot+0x80>
    210a:	e8 55       	subi	r30, 0x58	; 88
    210c:	fa 4f       	sbci	r31, 0xFA	; 250
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	eb cf       	rjmp	.-42     	; 0x20ea <initializeRobot+0x68>
    2114:	08 95       	ret

00002116 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    211e:	60 91 8f 04 	lds	r22, 0x048F
    2122:	70 91 90 04 	lds	r23, 0x0490
    2126:	80 91 91 04 	lds	r24, 0x0491
    212a:	90 91 92 04 	lds	r25, 0x0492
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e5       	ldi	r20, 0x50	; 80
    2134:	51 e4       	ldi	r21, 0x41	; 65
    2136:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    213a:	f8 2e       	mov	r15, r24
    213c:	ff 1c       	adc	r15, r15
    213e:	ff 24       	eor	r15, r15
    2140:	ff 1c       	adc	r15, r15
    2142:	ff 0c       	add	r15, r15
    2144:	ff 0c       	add	r15, r15
    2146:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    2148:	60 91 30 06 	lds	r22, 0x0630
    214c:	70 91 31 06 	lds	r23, 0x0631
    2150:	80 91 32 06 	lds	r24, 0x0632
    2154:	90 91 33 06 	lds	r25, 0x0633
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 ef       	ldi	r20, 0xF0	; 240
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    2164:	08 2f       	mov	r16, r24
    2166:	00 1f       	adc	r16, r16
    2168:	00 27       	eor	r16, r16
    216a:	00 1f       	adc	r16, r16
    216c:	00 0f       	add	r16, r16
    216e:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    2170:	60 91 99 04 	lds	r22, 0x0499
    2174:	70 91 9a 04 	lds	r23, 0x049A
    2178:	80 91 9b 04 	lds	r24, 0x049B
    217c:	90 91 9c 04 	lds	r25, 0x049C
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	4c e0       	ldi	r20, 0x0C	; 12
    2186:	52 e4       	ldi	r21, 0x42	; 66
    2188:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    218c:	18 2f       	mov	r17, r24
    218e:	11 1f       	adc	r17, r17
    2190:	11 27       	eor	r17, r17
    2192:	11 1f       	adc	r17, r17
    2194:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    2196:	ee 24       	eor	r14, r14
    2198:	60 91 34 06 	lds	r22, 0x0634
    219c:	70 91 35 06 	lds	r23, 0x0635
    21a0:	80 91 36 06 	lds	r24, 0x0636
    21a4:	90 91 37 06 	lds	r25, 0x0637
    21a8:	20 e0       	ldi	r18, 0x00	; 0
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	40 ef       	ldi	r20, 0xF0	; 240
    21ae:	51 e4       	ldi	r21, 0x41	; 65
    21b0:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    21b4:	88 23       	and	r24, r24
    21b6:	14 f4       	brge	.+4      	; 0x21bc <checkWorld+0xa6>
    21b8:	ee 24       	eor	r14, r14
    21ba:	e3 94       	inc	r14
    21bc:	8f 2d       	mov	r24, r15
    21be:	8e 0d       	add	r24, r14
    21c0:	80 0f       	add	r24, r16
    21c2:	81 0f       	add	r24, r17
    21c4:	80 93 97 04 	sts	0x0497, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    21c8:	20 91 98 04 	lds	r18, 0x0498
    21cc:	e2 2f       	mov	r30, r18
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	e0 55       	subi	r30, 0x50	; 80
    21d2:	f9 4f       	sbci	r31, 0xF9	; 249
    21d4:	91 81       	ldd	r25, Z+1	; 0x01
    21d6:	90 93 9d 04 	sts	0x049D, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    21da:	89 17       	cp	r24, r25
    21dc:	19 f4       	brne	.+6      	; 0x21e4 <checkWorld+0xce>
		currentMoveWorld += 1;
    21de:	2f 5f       	subi	r18, 0xFF	; 255
    21e0:	20 93 98 04 	sts	0x0498, r18
	}
}
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	08 95       	ret

000021ee <moveWallOld>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWallOld( void )
{	
    21ee:	2f 92       	push	r2
    21f0:	3f 92       	push	r3
    21f2:	4f 92       	push	r4
    21f4:	5f 92       	push	r5
    21f6:	6f 92       	push	r6
    21f8:	7f 92       	push	r7
    21fa:	8f 92       	push	r8
    21fc:	9f 92       	push	r9
    21fe:	af 92       	push	r10
    2200:	bf 92       	push	r11
    2202:	cf 92       	push	r12
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    220e:	e0 90 8f 04 	lds	r14, 0x048F
    2212:	f0 90 90 04 	lds	r15, 0x0490
    2216:	00 91 91 04 	lds	r16, 0x0491
    221a:	10 91 92 04 	lds	r17, 0x0492
    221e:	33 24       	eor	r3, r3
    2220:	c8 01       	movw	r24, r16
    2222:	b7 01       	movw	r22, r14
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    2230:	88 23       	and	r24, r24
    2232:	14 f4       	brge	.+4      	; 0x2238 <moveWallOld+0x4a>
    2234:	33 24       	eor	r3, r3
    2236:	33 94       	inc	r3
    2238:	a0 90 34 06 	lds	r10, 0x0634
    223c:	b0 90 35 06 	lds	r11, 0x0635
    2240:	c0 90 36 06 	lds	r12, 0x0636
    2244:	d0 90 37 06 	lds	r13, 0x0637
    2248:	40 90 30 06 	lds	r4, 0x0630
    224c:	50 90 31 06 	lds	r5, 0x0631
    2250:	60 90 32 06 	lds	r6, 0x0632
    2254:	70 90 33 06 	lds	r7, 0x0633
    2258:	88 24       	eor	r8, r8
    225a:	60 91 99 04 	lds	r22, 0x0499
    225e:	70 91 9a 04 	lds	r23, 0x049A
    2262:	80 91 9b 04 	lds	r24, 0x049B
    2266:	90 91 9c 04 	lds	r25, 0x049C
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	40 e7       	ldi	r20, 0x70	; 112
    2270:	51 e4       	ldi	r21, 0x41	; 65
    2272:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    2276:	88 23       	and	r24, r24
    2278:	14 f4       	brge	.+4      	; 0x227e <moveWallOld+0x90>
    227a:	88 24       	eor	r8, r8
    227c:	83 94       	inc	r8
    227e:	93 2c       	mov	r9, r3
    2280:	98 28       	or	r9, r8
    2282:	88 24       	eor	r8, r8
    2284:	c6 01       	movw	r24, r12
    2286:	b5 01       	movw	r22, r10
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	40 e7       	ldi	r20, 0x70	; 112
    228e:	51 e4       	ldi	r21, 0x41	; 65
    2290:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    2294:	88 23       	and	r24, r24
    2296:	14 f4       	brge	.+4      	; 0x229c <moveWallOld+0xae>
    2298:	88 24       	eor	r8, r8
    229a:	83 94       	inc	r8
    229c:	98 28       	or	r9, r8
    229e:	88 24       	eor	r8, r8
    22a0:	c3 01       	movw	r24, r6
    22a2:	b2 01       	movw	r22, r4
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	40 e7       	ldi	r20, 0x70	; 112
    22aa:	51 e4       	ldi	r21, 0x41	; 65
    22ac:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    22b0:	88 23       	and	r24, r24
    22b2:	14 f4       	brge	.+4      	; 0x22b8 <moveWallOld+0xca>
    22b4:	88 24       	eor	r8, r8
    22b6:	83 94       	inc	r8
    22b8:	29 2c       	mov	r2, r9
    22ba:	28 28       	or	r2, r8
	if(!isWall){	
    22bc:	81 f4       	brne	.+32     	; 0x22de <moveWallOld+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	70 e0       	ldi	r23, 0x00	; 0
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	9f e4       	ldi	r25, 0x4F	; 79
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e2       	ldi	r20, 0x20	; 32
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	79 01       	movw	r14, r18
    22d0:	8a 01       	movw	r16, r20
    22d2:	59 01       	movw	r10, r18
    22d4:	6a 01       	movw	r12, r20
    22d6:	88 24       	eor	r8, r8
    22d8:	0e 94 15 08 	call	0x102a	; 0x102a <move_arc_stnb>
    22dc:	f7 c0       	rjmp	.+494    	; 0x24cc <moveWallOld+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    22de:	c6 01       	movw	r24, r12
    22e0:	b5 01       	movw	r22, r10
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	40 e7       	ldi	r20, 0x70	; 112
    22e8:	51 e4       	ldi	r21, 0x41	; 65
    22ea:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__gesf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	64 f4       	brge	.+24     	; 0x230a <moveWallOld+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e4       	ldi	r26, 0x40	; 64
    22f8:	b0 ec       	ldi	r27, 0xC0	; 192
    22fa:	80 93 34 06 	sts	0x0634, r24
    22fe:	90 93 35 06 	sts	0x0635, r25
    2302:	a0 93 36 06 	sts	0x0636, r26
    2306:	b0 93 37 06 	sts	0x0637, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    230a:	c3 01       	movw	r24, r6
    230c:	b2 01       	movw	r22, r4
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e7       	ldi	r20, 0x70	; 112
    2314:	51 e4       	ldi	r21, 0x41	; 65
    2316:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__gesf2>
    231a:	18 16       	cp	r1, r24
    231c:	14 f0       	brlt	.+4      	; 0x2322 <moveWallOld+0x134>
    231e:	80 e0       	ldi	r24, 0x00	; 0
    2320:	0d c0       	rjmp	.+26     	; 0x233c <moveWallOld+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	a0 e4       	ldi	r26, 0x40	; 64
    2328:	b0 ec       	ldi	r27, 0xC0	; 192
    232a:	80 93 30 06 	sts	0x0630, r24
    232e:	90 93 31 06 	sts	0x0631, r25
    2332:	a0 93 32 06 	sts	0x0632, r26
    2336:	b0 93 33 06 	sts	0x0633, r27
    233a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    233c:	33 20       	and	r3, r3
    233e:	21 f1       	breq	.+72     	; 0x2388 <moveWallOld+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2340:	88 23       	and	r24, r24
    2342:	29 f0       	breq	.+10     	; 0x234e <moveWallOld+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	70 e0       	ldi	r23, 0x00	; 0
    2348:	8a e7       	ldi	r24, 0x7A	; 122
    234a:	94 e4       	ldi	r25, 0x44	; 68
    234c:	04 c0       	rjmp	.+8      	; 0x2356 <moveWallOld+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	70 e0       	ldi	r23, 0x00	; 0
    2352:	8a e7       	ldi	r24, 0x7A	; 122
    2354:	94 ec       	ldi	r25, 0xC4	; 196
    2356:	a8 01       	movw	r20, r16
    2358:	97 01       	movw	r18, r14
    235a:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    235e:	20 91 30 06 	lds	r18, 0x0630
    2362:	30 91 31 06 	lds	r19, 0x0631
    2366:	40 91 32 06 	lds	r20, 0x0632
    236a:	50 91 33 06 	lds	r21, 0x0633
    236e:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    2372:	9b 01       	movw	r18, r22
    2374:	ac 01       	movw	r20, r24
    2376:	60 91 34 06 	lds	r22, 0x0634
    237a:	70 91 35 06 	lds	r23, 0x0635
    237e:	80 91 36 06 	lds	r24, 0x0636
    2382:	90 91 37 06 	lds	r25, 0x0637
    2386:	10 c0       	rjmp	.+32     	; 0x23a8 <moveWallOld+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2388:	60 91 34 06 	lds	r22, 0x0634
    238c:	70 91 35 06 	lds	r23, 0x0635
    2390:	80 91 36 06 	lds	r24, 0x0636
    2394:	90 91 37 06 	lds	r25, 0x0637
    2398:	20 91 30 06 	lds	r18, 0x0630
    239c:	30 91 31 06 	lds	r19, 0x0631
    23a0:	40 91 32 06 	lds	r20, 0x0632
    23a4:	50 91 33 06 	lds	r21, 0x0633
    23a8:	0e 94 95 2b 	call	0x572a	; 0x572a <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    23ac:	90 58       	subi	r25, 0x80	; 128
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    23b4:	6b 01       	movw	r12, r22
    23b6:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    23b8:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__fixsfsi>
    23bc:	8b 01       	movw	r16, r22
    23be:	77 ff       	sbrs	r23, 7
    23c0:	03 c0       	rjmp	.+6      	; 0x23c8 <moveWallOld+0x1da>
    23c2:	10 95       	com	r17
    23c4:	01 95       	neg	r16
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	05 36       	cpi	r16, 0x65	; 101
    23ca:	11 05       	cpc	r17, r1
    23cc:	fc f0       	brlt	.+62     	; 0x240c <moveWallOld+0x21e>
    23ce:	c7 01       	movw	r24, r14
    23d0:	b6 01       	movw	r22, r12
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    23de:	88 23       	and	r24, r24
    23e0:	a9 f0       	breq	.+42     	; 0x240c <moveWallOld+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    23e2:	b8 01       	movw	r22, r16
    23e4:	88 27       	eor	r24, r24
    23e6:	77 fd       	sbrc	r23, 7
    23e8:	80 95       	com	r24
    23ea:	98 2f       	mov	r25, r24
    23ec:	0e 94 99 2c 	call	0x5932	; 0x5932 <__floatsisf>
    23f0:	9b 01       	movw	r18, r22
    23f2:	ac 01       	movw	r20, r24
    23f4:	c7 01       	movw	r24, r14
    23f6:	b6 01       	movw	r22, r12
    23f8:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	48 ec       	ldi	r20, 0xC8	; 200
    2402:	52 e4       	ldi	r21, 0x42	; 66
    2404:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    2408:	6b 01       	movw	r12, r22
    240a:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    240c:	c7 01       	movw	r24, r14
    240e:	b6 01       	movw	r22, r12
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	48 ec       	ldi	r20, 0xC8	; 200
    2416:	52 e4       	ldi	r21, 0x42	; 66
    2418:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    241c:	6b 01       	movw	r12, r22
    241e:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    2420:	8d b7       	in	r24, 0x3d	; 61
    2422:	9e b7       	in	r25, 0x3e	; 62
    2424:	09 97       	sbiw	r24, 0x09	; 9
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	9e bf       	out	0x3e, r25	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	8d bf       	out	0x3d, r24	; 61
    2430:	0d b7       	in	r16, 0x3d	; 61
    2432:	1e b7       	in	r17, 0x3e	; 62
    2434:	0f 5f       	subi	r16, 0xFF	; 255
    2436:	1f 4f       	sbci	r17, 0xFF	; 255
    2438:	c7 01       	movw	r24, r14
    243a:	b6 01       	movw	r22, r12
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	48 ec       	ldi	r20, 0xC8	; 200
    2442:	52 e4       	ldi	r21, 0x42	; 66
    2444:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	48 ec       	ldi	r20, 0xC8	; 200
    244e:	52 e4       	ldi	r21, 0x42	; 66
    2450:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    2454:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    2458:	4b 01       	movw	r8, r22
    245a:	5c 01       	movw	r10, r24
    245c:	82 e3       	ldi	r24, 0x32	; 50
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	f8 01       	movw	r30, r16
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	c7 01       	movw	r24, r14
    2468:	b6 01       	movw	r22, r12
    246a:	20 e0       	ldi	r18, 0x00	; 0
    246c:	30 e0       	ldi	r19, 0x00	; 0
    246e:	48 ec       	ldi	r20, 0xC8	; 200
    2470:	52 ec       	ldi	r21, 0xC2	; 194
    2472:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	48 ec       	ldi	r20, 0xC8	; 200
    247c:	52 e4       	ldi	r21, 0x42	; 66
    247e:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    2482:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    2486:	f8 01       	movw	r30, r16
    2488:	73 83       	std	Z+3, r23	; 0x03
    248a:	62 83       	std	Z+2, r22	; 0x02
    248c:	82 ec       	ldi	r24, 0xC2	; 194
    248e:	91 e0       	ldi	r25, 0x01	; 1
    2490:	95 83       	std	Z+5, r25	; 0x05
    2492:	84 83       	std	Z+4, r24	; 0x04
    2494:	16 82       	std	Z+6, r1	; 0x06
    2496:	10 86       	std	Z+8, r1	; 0x08
    2498:	17 82       	std	Z+7, r1	; 0x07
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	62 e0       	ldi	r22, 0x02	; 2
    249e:	41 e0       	ldi	r20, 0x01	; 1
    24a0:	22 e3       	ldi	r18, 0x32	; 50
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	84 01       	movw	r16, r8
    24a6:	92 ec       	ldi	r25, 0xC2	; 194
    24a8:	e9 2e       	mov	r14, r25
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	f9 2e       	mov	r15, r25
    24ae:	cc 24       	eor	r12, r12
    24b0:	aa 24       	eor	r10, r10
    24b2:	bb 24       	eor	r11, r11
    24b4:	88 24       	eor	r8, r8
    24b6:	83 94       	inc	r8
    24b8:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_move>
    24bc:	8d b7       	in	r24, 0x3d	; 61
    24be:	9e b7       	in	r25, 0x3e	; 62
    24c0:	09 96       	adiw	r24, 0x09	; 9
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	9e bf       	out	0x3e, r25	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    24cc:	82 2d       	mov	r24, r2
    24ce:	1f 91       	pop	r17
    24d0:	0f 91       	pop	r16
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	df 90       	pop	r13
    24d8:	cf 90       	pop	r12
    24da:	bf 90       	pop	r11
    24dc:	af 90       	pop	r10
    24de:	9f 90       	pop	r9
    24e0:	8f 90       	pop	r8
    24e2:	7f 90       	pop	r7
    24e4:	6f 90       	pop	r6
    24e6:	5f 90       	pop	r5
    24e8:	4f 90       	pop	r4
    24ea:	3f 90       	pop	r3
    24ec:	2f 90       	pop	r2
    24ee:	08 95       	ret

000024f0 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    24f0:	5f 92       	push	r5
    24f2:	6f 92       	push	r6
    24f4:	7f 92       	push	r7
    24f6:	8f 92       	push	r8
    24f8:	9f 92       	push	r9
    24fa:	af 92       	push	r10
    24fc:	bf 92       	push	r11
    24fe:	cf 92       	push	r12
    2500:	df 92       	push	r13
    2502:	ef 92       	push	r14
    2504:	ff 92       	push	r15
    2506:	0f 93       	push	r16
    2508:	1f 93       	push	r17
    250a:	cf 93       	push	r28
    250c:	df 93       	push	r29
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    250e:	e0 90 8f 04 	lds	r14, 0x048F
    2512:	f0 90 90 04 	lds	r15, 0x0490
    2516:	00 91 91 04 	lds	r16, 0x0491
    251a:	10 91 92 04 	lds	r17, 0x0492
    251e:	55 24       	eor	r5, r5
    2520:	c8 01       	movw	r24, r16
    2522:	b7 01       	movw	r22, r14
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	50 e0       	ldi	r21, 0x00	; 0
    252c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    2530:	88 23       	and	r24, r24
    2532:	14 f4       	brge	.+4      	; 0x2538 <moveWall+0x48>
    2534:	55 24       	eor	r5, r5
    2536:	53 94       	inc	r5
    2538:	a0 90 34 06 	lds	r10, 0x0634
    253c:	b0 90 35 06 	lds	r11, 0x0635
    2540:	c0 90 36 06 	lds	r12, 0x0636
    2544:	d0 90 37 06 	lds	r13, 0x0637
    2548:	60 90 30 06 	lds	r6, 0x0630
    254c:	70 90 31 06 	lds	r7, 0x0631
    2550:	80 90 32 06 	lds	r8, 0x0632
    2554:	90 90 33 06 	lds	r9, 0x0633
	// If no walls
	// Then go straight
	if(!isWall){
    2558:	55 20       	and	r5, r5
    255a:	41 f5       	brne	.+80     	; 0x25ac <moveWall+0xbc>
    255c:	60 91 99 04 	lds	r22, 0x0499
    2560:	70 91 9a 04 	lds	r23, 0x049A
    2564:	80 91 9b 04 	lds	r24, 0x049B
    2568:	90 91 9c 04 	lds	r25, 0x049C
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	40 e7       	ldi	r20, 0x70	; 112
    2572:	51 e4       	ldi	r21, 0x41	; 65
    2574:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    2578:	87 fd       	sbrc	r24, 7
    257a:	18 c0       	rjmp	.+48     	; 0x25ac <moveWall+0xbc>
    257c:	c6 01       	movw	r24, r12
    257e:	b5 01       	movw	r22, r10
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e7       	ldi	r20, 0x70	; 112
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    258c:	87 fd       	sbrc	r24, 7
    258e:	0e c0       	rjmp	.+28     	; 0x25ac <moveWall+0xbc>
    2590:	c4 01       	movw	r24, r8
    2592:	b3 01       	movw	r22, r6
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 e7       	ldi	r20, 0x70	; 112
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    25a0:	87 fd       	sbrc	r24, 7
    25a2:	04 c0       	rjmp	.+8      	; 0x25ac <moveWall+0xbc>
		
		// Update the speeds the same to go forward
		STEPPER_set_speed(STEPPER_BOTH, MAX_SPEED);
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	68 ec       	ldi	r22, 0xC8	; 200
    25a8:	70 e0       	ldi	r23, 0x00	; 0
    25aa:	c9 c0       	rjmp	.+402    	; 0x273e <moveWall+0x24e>
	BOOL isLEFT;
	float error;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    25ac:	c6 01       	movw	r24, r12
    25ae:	b5 01       	movw	r22, r10
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e7       	ldi	r20, 0x70	; 112
    25b6:	51 e4       	ldi	r21, 0x41	; 65
    25b8:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__gesf2>
    25bc:	18 16       	cp	r1, r24
    25be:	64 f4       	brge	.+24     	; 0x25d8 <moveWall+0xe8>
		rtIR = IR_WALL_R_THRESH-18;
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	a0 e4       	ldi	r26, 0x40	; 64
    25c6:	b0 ec       	ldi	r27, 0xC0	; 192
    25c8:	80 93 34 06 	sts	0x0634, r24
    25cc:	90 93 35 06 	sts	0x0635, r25
    25d0:	a0 93 36 06 	sts	0x0636, r26
    25d4:	b0 93 37 06 	sts	0x0637, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    25d8:	c4 01       	movw	r24, r8
    25da:	b3 01       	movw	r22, r6
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e7       	ldi	r20, 0x70	; 112
    25e2:	51 e4       	ldi	r21, 0x41	; 65
    25e4:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <__gesf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	14 f0       	brlt	.+4      	; 0x25f0 <moveWall+0x100>
    25ec:	80 e0       	ldi	r24, 0x00	; 0
    25ee:	0d c0       	rjmp	.+26     	; 0x260a <moveWall+0x11a>
		ltIR = IR_WALL_L_THRESH-18;
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e4       	ldi	r26, 0x40	; 64
    25f6:	b0 ec       	ldi	r27, 0xC0	; 192
    25f8:	80 93 30 06 	sts	0x0630, r24
    25fc:	90 93 31 06 	sts	0x0631, r25
    2600:	a0 93 32 06 	sts	0x0632, r26
    2604:	b0 93 33 06 	sts	0x0633, r27
    2608:	81 e0       	ldi	r24, 0x01	; 1
		isLEFT = 1;
	}
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    260a:	55 20       	and	r5, r5
    260c:	21 f1       	breq	.+72     	; 0x2656 <moveWall+0x166>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    260e:	88 23       	and	r24, r24
    2610:	29 f0       	breq	.+10     	; 0x261c <moveWall+0x12c>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2612:	60 e0       	ldi	r22, 0x00	; 0
    2614:	70 e0       	ldi	r23, 0x00	; 0
    2616:	8a e7       	ldi	r24, 0x7A	; 122
    2618:	94 e4       	ldi	r25, 0x44	; 68
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <moveWall+0x134>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    261c:	60 e0       	ldi	r22, 0x00	; 0
    261e:	70 e0       	ldi	r23, 0x00	; 0
    2620:	8a e7       	ldi	r24, 0x7A	; 122
    2622:	94 ec       	ldi	r25, 0xC4	; 196
    2624:	a8 01       	movw	r20, r16
    2626:	97 01       	movw	r18, r14
    2628:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    262c:	20 91 30 06 	lds	r18, 0x0630
    2630:	30 91 31 06 	lds	r19, 0x0631
    2634:	40 91 32 06 	lds	r20, 0x0632
    2638:	50 91 33 06 	lds	r21, 0x0633
    263c:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    2640:	9b 01       	movw	r18, r22
    2642:	ac 01       	movw	r20, r24
    2644:	60 91 34 06 	lds	r22, 0x0634
    2648:	70 91 35 06 	lds	r23, 0x0635
    264c:	80 91 36 06 	lds	r24, 0x0636
    2650:	90 91 37 06 	lds	r25, 0x0637
    2654:	10 c0       	rjmp	.+32     	; 0x2676 <moveWall+0x186>
	// the error is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2656:	60 91 34 06 	lds	r22, 0x0634
    265a:	70 91 35 06 	lds	r23, 0x0635
    265e:	80 91 36 06 	lds	r24, 0x0636
    2662:	90 91 37 06 	lds	r25, 0x0637
    2666:	20 91 30 06 	lds	r18, 0x0630
    266a:	30 91 31 06 	lds	r19, 0x0631
    266e:	40 91 32 06 	lds	r20, 0x0632
    2672:	50 91 33 06 	lds	r21, 0x0633
    2676:	0e 94 95 2b 	call	0x572a	; 0x572a <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    267a:	90 58       	subi	r25, 0x80	; 128
    267c:	40 e0       	ldi	r20, 0x00	; 0
    267e:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2682:	7b 01       	movw	r14, r22
    2684:	8c 01       	movw	r16, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2686:	0e 94 66 2c 	call	0x58cc	; 0x58cc <__fixsfsi>
    268a:	eb 01       	movw	r28, r22
    268c:	77 ff       	sbrs	r23, 7
    268e:	03 c0       	rjmp	.+6      	; 0x2696 <moveWall+0x1a6>
    2690:	d0 95       	com	r29
    2692:	c1 95       	neg	r28
    2694:	df 4f       	sbci	r29, 0xFF	; 255
    2696:	c5 36       	cpi	r28, 0x65	; 101
    2698:	d1 05       	cpc	r29, r1
    269a:	fc f0       	brlt	.+62     	; 0x26da <moveWall+0x1ea>
    269c:	c8 01       	movw	r24, r16
    269e:	b7 01       	movw	r22, r14
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	50 e0       	ldi	r21, 0x00	; 0
    26a8:	0e 94 fa 2b 	call	0x57f4	; 0x57f4 <__cmpsf2>
    26ac:	88 23       	and	r24, r24
    26ae:	a9 f0       	breq	.+42     	; 0x26da <moveWall+0x1ea>
		effort = MAX_EFFORT*(effort/abs(effort));
    26b0:	be 01       	movw	r22, r28
    26b2:	88 27       	eor	r24, r24
    26b4:	77 fd       	sbrc	r23, 7
    26b6:	80 95       	com	r24
    26b8:	98 2f       	mov	r25, r24
    26ba:	0e 94 99 2c 	call	0x5932	; 0x5932 <__floatsisf>
    26be:	9b 01       	movw	r18, r22
    26c0:	ac 01       	movw	r20, r24
    26c2:	c8 01       	movw	r24, r16
    26c4:	b7 01       	movw	r22, r14
    26c6:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	48 ec       	ldi	r20, 0xC8	; 200
    26d0:	52 e4       	ldi	r21, 0x42	; 66
    26d2:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    26d6:	7b 01       	movw	r14, r22
    26d8:	8c 01       	movw	r16, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    26da:	c8 01       	movw	r24, r16
    26dc:	b7 01       	movw	r22, r14
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	48 ec       	ldi	r20, 0xC8	; 200
    26e4:	52 e4       	ldi	r21, 0x42	; 66
    26e6:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    26ea:	7b 01       	movw	r14, r22
    26ec:	8c 01       	movw	r16, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update the speeds the same to move with wall
	STEPPER_set_speed(STEPPER_LEFT, stepper_speed_L);
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	48 ec       	ldi	r20, 0xC8	; 200
    26f4:	52 e4       	ldi	r21, 0x42	; 66
    26f6:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	48 ec       	ldi	r20, 0xC8	; 200
    2700:	52 e4       	ldi	r21, 0x42	; 66
    2702:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    2706:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    270a:	9b 01       	movw	r18, r22
    270c:	ac 01       	movw	r20, r24
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	b9 01       	movw	r22, r18
    2712:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <STEPPER_set_speed>
	STEPPER_set_speed(STEPPER_RIGHT, stepper_speed_R);
    2716:	c8 01       	movw	r24, r16
    2718:	b7 01       	movw	r22, r14
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	48 ec       	ldi	r20, 0xC8	; 200
    2720:	52 ec       	ldi	r21, 0xC2	; 194
    2722:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	48 ec       	ldi	r20, 0xC8	; 200
    272c:	52 e4       	ldi	r21, 0x42	; 66
    272e:	0e 94 96 2b 	call	0x572c	; 0x572c <__addsf3>
    2732:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__fixunssfsi>
    2736:	9b 01       	movw	r18, r22
    2738:	ac 01       	movw	r20, r24
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	b9 01       	movw	r22, r18
    273e:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <STEPPER_set_speed>
	
	// Return weather or not we are finished
	return checkOdometry(NO_RESET);
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	0e 94 13 10 	call	0x2026	; 0x2026 <checkOdometry>
	
}
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	ff 90       	pop	r15
    2752:	ef 90       	pop	r14
    2754:	df 90       	pop	r13
    2756:	cf 90       	pop	r12
    2758:	bf 90       	pop	r11
    275a:	af 90       	pop	r10
    275c:	9f 90       	pop	r9
    275e:	8f 90       	pop	r8
    2760:	7f 90       	pop	r7
    2762:	6f 90       	pop	r6
    2764:	5f 90       	pop	r5
    2766:	08 95       	ret

00002768 <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    2768:	ff 92       	push	r15
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    2770:	08 2f       	mov	r16, r24
    2772:	06 95       	lsr	r16
    2774:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    2776:	23 e0       	ldi	r18, 0x03	; 3
    2778:	f2 2e       	mov	r15, r18
    277a:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(curMove){
    277c:	62 30       	cpi	r22, 0x02	; 2
    277e:	31 f0       	breq	.+12     	; 0x278c <shiftMap+0x24>
    2780:	63 30       	cpi	r22, 0x03	; 3
    2782:	a9 f0       	breq	.+42     	; 0x27ae <shiftMap+0x46>
    2784:	61 30       	cpi	r22, 0x01	; 1
    2786:	b1 f4       	brne	.+44     	; 0x27b4 <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2788:	11 50       	subi	r17, 0x01	; 1
    278a:	12 c0       	rjmp	.+36     	; 0x27b0 <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    278c:	41 30       	cpi	r20, 0x01	; 1
    278e:	49 f0       	breq	.+18     	; 0x27a2 <shiftMap+0x3a>
    2790:	41 30       	cpi	r20, 0x01	; 1
    2792:	28 f0       	brcs	.+10     	; 0x279e <shiftMap+0x36>
    2794:	42 30       	cpi	r20, 0x02	; 2
    2796:	39 f0       	breq	.+14     	; 0x27a6 <shiftMap+0x3e>
    2798:	43 30       	cpi	r20, 0x03	; 3
    279a:	b9 f4       	brne	.+46     	; 0x27ca <shiftMap+0x62>
    279c:	06 c0       	rjmp	.+12     	; 0x27aa <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    279e:	01 50       	subi	r16, 0x01	; 1
    27a0:	14 c0       	rjmp	.+40     	; 0x27ca <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    27a2:	f3 94       	inc	r15
    27a4:	12 c0       	rjmp	.+36     	; 0x27ca <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    27a6:	0f 5f       	subi	r16, 0xFF	; 255
    27a8:	10 c0       	rjmp	.+32     	; 0x27ca <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    27aa:	fa 94       	dec	r15
    27ac:	0e c0       	rjmp	.+28     	; 0x27ca <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    27ae:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    27b0:	13 70       	andi	r17, 0x03	; 3
    27b2:	0b c0       	rjmp	.+22     	; 0x27ca <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    27b4:	00 d0       	rcall	.+0      	; 0x27b6 <shiftMap+0x4e>
    27b6:	84 e4       	ldi	r24, 0x44	; 68
    27b8:	91 e0       	ldi	r25, 0x01	; 1
    27ba:	ed b7       	in	r30, 0x3d	; 61
    27bc:	fe b7       	in	r31, 0x3e	; 62
    27be:	92 83       	std	Z+2, r25	; 0x02
    27c0:	81 83       	std	Z+1, r24	; 0x01
    27c2:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    27ca:	10 93 2b 05 	sts	0x052B, r17
    27ce:	00 0f       	add	r16, r16
    27d0:	00 0f       	add	r16, r16
	return currentCell;
}
    27d2:	80 2f       	mov	r24, r16
    27d4:	8f 0d       	add	r24, r15
    27d6:	1f 91       	pop	r17
    27d8:	0f 91       	pop	r16
    27da:	ff 90       	pop	r15
    27dc:	08 95       	ret

000027de <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    27de:	8f 92       	push	r8
    27e0:	af 92       	push	r10
    27e2:	bf 92       	push	r11
    27e4:	cf 92       	push	r12
    27e6:	df 92       	push	r13
    27e8:	ef 92       	push	r14
    27ea:	ff 92       	push	r15
    27ec:	0f 93       	push	r16
    27ee:	1f 93       	push	r17
	switch(currentMove){
    27f0:	80 91 c0 06 	lds	r24, 0x06C0
    27f4:	82 30       	cpi	r24, 0x02	; 2
    27f6:	69 f0       	breq	.+26     	; 0x2812 <moveMap+0x34>
    27f8:	83 30       	cpi	r24, 0x03	; 3
    27fa:	a1 f0       	breq	.+40     	; 0x2824 <moveMap+0x46>
    27fc:	81 30       	cpi	r24, 0x01	; 1
    27fe:	51 f5       	brne	.+84     	; 0x2854 <moveMap+0x76>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	70 e0       	ldi	r23, 0x00	; 0
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	4c e8       	ldi	r20, 0x8C	; 140
    280e:	51 ec       	ldi	r21, 0xC1	; 193
    2810:	11 c0       	rjmp	.+34     	; 0x2834 <moveMap+0x56>
			// while(!odometryFlag){
				// moveWall();
				// checkOdometry(0);
			// }
			
			move_arc_stwt(NO_TURN, 45, 10, 10, 0);
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	70 e0       	ldi	r23, 0x00	; 0
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	9f e4       	ldi	r25, 0x4F	; 79
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	44 e3       	ldi	r20, 0x34	; 52
    2820:	52 e4       	ldi	r21, 0x42	; 66
    2822:	08 c0       	rjmp	.+16     	; 0x2834 <moveMap+0x56>
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2824:	60 e0       	ldi	r22, 0x00	; 0
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	30 e0       	ldi	r19, 0x00	; 0
    2830:	4c e8       	ldi	r20, 0x8C	; 140
    2832:	51 e4       	ldi	r21, 0x41	; 65
    2834:	0f 2e       	mov	r0, r31
    2836:	f0 e0       	ldi	r31, 0x00	; 0
    2838:	ef 2e       	mov	r14, r31
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	ff 2e       	mov	r15, r31
    283e:	f0 e2       	ldi	r31, 0x20	; 32
    2840:	0f 2f       	mov	r16, r31
    2842:	f1 e4       	ldi	r31, 0x41	; 65
    2844:	1f 2f       	mov	r17, r31
    2846:	f0 2d       	mov	r31, r0
    2848:	57 01       	movw	r10, r14
    284a:	68 01       	movw	r12, r16
    284c:	88 24       	eor	r8, r8
    284e:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2852:	0b c0       	rjmp	.+22     	; 0x286a <moveMap+0x8c>
			break;
		default:
			LCD_printf("Whatz2?!");
    2854:	00 d0       	rcall	.+0      	; 0x2856 <moveMap+0x78>
    2856:	8d e4       	ldi	r24, 0x4D	; 77
    2858:	91 e0       	ldi	r25, 0x01	; 1
    285a:	ed b7       	in	r30, 0x3d	; 61
    285c:	fe b7       	in	r31, 0x3e	; 62
    285e:	92 83       	std	Z+2, r25	; 0x02
    2860:	81 83       	std	Z+1, r24	; 0x01
    2862:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
			break;
	}
}
    286a:	1f 91       	pop	r17
    286c:	0f 91       	pop	r16
    286e:	ff 90       	pop	r15
    2870:	ef 90       	pop	r14
    2872:	df 90       	pop	r13
    2874:	cf 90       	pop	r12
    2876:	bf 90       	pop	r11
    2878:	af 90       	pop	r10
    287a:	8f 90       	pop	r8
    287c:	08 95       	ret

0000287e <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    287e:	80 91 97 04 	lds	r24, 0x0497
    2882:	80 fd       	sbrc	r24, 0
    2884:	02 c0       	rjmp	.+4      	; 0x288a <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2886:	81 e0       	ldi	r24, 0x01	; 1
    2888:	05 c0       	rjmp	.+10     	; 0x2894 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    288a:	83 fd       	sbrc	r24, 3
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    288e:	82 e0       	ldi	r24, 0x02	; 2
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    2892:	83 e0       	ldi	r24, 0x03	; 3
    2894:	80 93 c0 06 	sts	0x06C0, r24
	}
	
	switch(oldMove){
    2898:	80 91 c1 06 	lds	r24, 0x06C1
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	29 f0       	breq	.+10     	; 0x28aa <planMap+0x2c>
    28a0:	81 30       	cpi	r24, 0x01	; 1
    28a2:	38 f0       	brcs	.+14     	; 0x28b2 <planMap+0x34>
    28a4:	84 30       	cpi	r24, 0x04	; 4
    28a6:	28 f4       	brcc	.+10     	; 0x28b2 <planMap+0x34>
    28a8:	0f c0       	rjmp	.+30     	; 0x28c8 <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    28aa:	82 e0       	ldi	r24, 0x02	; 2
    28ac:	80 93 c0 06 	sts	0x06C0, r24
    28b0:	0b c0       	rjmp	.+22     	; 0x28c8 <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    28b2:	00 d0       	rcall	.+0      	; 0x28b4 <planMap+0x36>
    28b4:	86 e5       	ldi	r24, 0x56	; 86
    28b6:	91 e0       	ldi	r25, 0x01	; 1
    28b8:	ed b7       	in	r30, 0x3d	; 61
    28ba:	fe b7       	in	r31, 0x3e	; 62
    28bc:	92 83       	std	Z+2, r25	; 0x02
    28be:	81 83       	std	Z+1, r24	; 0x01
    28c0:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
    28c4:	0f 90       	pop	r0
    28c6:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    28c8:	80 91 c0 06 	lds	r24, 0x06C0
    28cc:	80 93 c1 06 	sts	0x06C1, r24
}
    28d0:	08 95       	ret

000028d2 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    28d2:	80 91 99 03 	lds	r24, 0x0399
    28d6:	85 30       	cpi	r24, 0x05	; 5
    28d8:	80 f0       	brcs	.+32     	; 0x28fa <planGateway+0x28>
    28da:	ea e8       	ldi	r30, 0x8A	; 138
    28dc:	f3 e0       	ldi	r31, 0x03	; 3
		for(i = 0; i<=(BRANCH_MAX-1); i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    28de:	81 81       	ldd	r24, Z+1	; 0x01
    28e0:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    28e2:	86 81       	ldd	r24, Z+6	; 0x06
    28e4:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    28e6:	83 85       	ldd	r24, Z+11	; 0x0b
    28e8:	82 87       	std	Z+10, r24	; 0x0a
    28ea:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<=(BRANCH_MAX-1); i++){
    28ec:	83 e0       	ldi	r24, 0x03	; 3
    28ee:	ef 38       	cpi	r30, 0x8F	; 143
    28f0:	f8 07       	cpc	r31, r24
    28f2:	a9 f7       	brne	.-22     	; 0x28de <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    28f4:	84 e0       	ldi	r24, 0x04	; 4
    28f6:	80 93 99 03 	sts	0x0399, r24
	}
	
	// Decide what the current move should be
	planMap();
    28fa:	0e 94 3f 14 	call	0x287e	; 0x287e <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    28fe:	e0 91 99 03 	lds	r30, 0x0399
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	e6 57       	subi	r30, 0x76	; 118
    2906:	fc 4f       	sbci	r31, 0xFC	; 252
    2908:	80 91 97 04 	lds	r24, 0x0497
    290c:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    290e:	90 91 c0 06 	lds	r25, 0x06C0
    2912:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2914:	80 91 2b 05 	lds	r24, 0x052B
    2918:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    291a:	91 30       	cpi	r25, 0x01	; 1
    291c:	19 f0       	breq	.+6      	; 0x2924 <planGateway+0x52>
    291e:	93 30       	cpi	r25, 0x03	; 3
    2920:	41 f4       	brne	.+16     	; 0x2932 <planGateway+0x60>
    2922:	02 c0       	rjmp	.+4      	; 0x2928 <planGateway+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2924:	81 50       	subi	r24, 0x01	; 1
    2926:	01 c0       	rjmp	.+2      	; 0x292a <planGateway+0x58>
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2928:	8f 5f       	subi	r24, 0xFF	; 255
    292a:	83 70       	andi	r24, 0x03	; 3
    292c:	80 93 2b 05 	sts	0x052B, r24
    2930:	0b c0       	rjmp	.+22     	; 0x2948 <planGateway+0x76>
			break;
		default:
			LCD_printf("Whatz2?!");
    2932:	00 d0       	rcall	.+0      	; 0x2934 <planGateway+0x62>
    2934:	8d e4       	ldi	r24, 0x4D	; 77
    2936:	91 e0       	ldi	r25, 0x01	; 1
    2938:	ed b7       	in	r30, 0x3d	; 61
    293a:	fe b7       	in	r31, 0x3e	; 62
    293c:	92 83       	std	Z+2, r25	; 0x02
    293e:	81 83       	std	Z+1, r24	; 0x01
    2940:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2948:	80 91 99 03 	lds	r24, 0x0399
    294c:	8f 5f       	subi	r24, 0xFF	; 255
    294e:	80 93 99 03 	sts	0x0399, r24
}
    2952:	08 95       	ret

00002954 <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    2954:	8f 92       	push	r8
    2956:	af 92       	push	r10
    2958:	bf 92       	push	r11
    295a:	cf 92       	push	r12
    295c:	df 92       	push	r13
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
	LCD_clear();
    2966:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    296a:	e0 91 98 04 	lds	r30, 0x0498
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	e6 5e       	subi	r30, 0xE6	; 230
    2972:	fa 4f       	sbci	r31, 0xFA	; 250
    2974:	e0 81       	ld	r30, Z
    2976:	e0 93 c0 06 	sts	0x06C0, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	e1 30       	cpi	r30, 0x01	; 1
    297e:	09 f4       	brne	.+2      	; 0x2982 <moveWorld+0x2e>
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	e3 30       	cpi	r30, 0x03	; 3
    2986:	09 f4       	brne	.+2      	; 0x298a <moveWorld+0x36>
    2988:	91 e0       	ldi	r25, 0x01	; 1
    298a:	89 2b       	or	r24, r25
    298c:	28 2f       	mov	r18, r24
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	80 91 c1 06 	lds	r24, 0x06C1
    2998:	82 30       	cpi	r24, 0x02	; 2
    299a:	11 f4       	brne	.+4      	; 0x29a0 <moveWorld+0x4c>
    299c:	41 e0       	ldi	r20, 0x01	; 1
    299e:	50 e0       	ldi	r21, 0x00	; 0
    29a0:	24 23       	and	r18, r20
    29a2:	35 23       	and	r19, r21
    29a4:	23 2b       	or	r18, r19
    29a6:	b9 f0       	breq	.+46     	; 0x29d6 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    29a8:	60 e0       	ldi	r22, 0x00	; 0
    29aa:	70 e0       	ldi	r23, 0x00	; 0
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	9f e4       	ldi	r25, 0x4F	; 79
    29b0:	28 e4       	ldi	r18, 0x48	; 72
    29b2:	31 ee       	ldi	r19, 0xE1	; 225
    29b4:	46 eb       	ldi	r20, 0xB6	; 182
    29b6:	51 e4       	ldi	r21, 0x41	; 65
    29b8:	0f 2e       	mov	r0, r31
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	ef 2e       	mov	r14, r31
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	ff 2e       	mov	r15, r31
    29c2:	f0 e2       	ldi	r31, 0x20	; 32
    29c4:	0f 2f       	mov	r16, r31
    29c6:	f1 e4       	ldi	r31, 0x41	; 65
    29c8:	1f 2f       	mov	r17, r31
    29ca:	f0 2d       	mov	r31, r0
    29cc:	57 01       	movw	r10, r14
    29ce:	68 01       	movw	r12, r16
    29d0:	88 24       	eor	r8, r8
    29d2:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    29d6:	20 91 c1 06 	lds	r18, 0x06C1
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	21 30       	cpi	r18, 0x01	; 1
    29de:	09 f4       	brne	.+2      	; 0x29e2 <moveWorld+0x8e>
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	23 30       	cpi	r18, 0x03	; 3
    29e6:	09 f4       	brne	.+2      	; 0x29ea <moveWorld+0x96>
    29e8:	91 e0       	ldi	r25, 0x01	; 1
    29ea:	89 2b       	or	r24, r25
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e0       	ldi	r20, 0x00	; 0
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	80 91 c0 06 	lds	r24, 0x06C0
    29f8:	82 30       	cpi	r24, 0x02	; 2
    29fa:	11 f4       	brne	.+4      	; 0x2a00 <moveWorld+0xac>
    29fc:	41 e0       	ldi	r20, 0x01	; 1
    29fe:	50 e0       	ldi	r21, 0x00	; 0
    2a00:	24 23       	and	r18, r20
    2a02:	35 23       	and	r19, r21
    2a04:	23 2b       	or	r18, r19
    2a06:	b9 f0       	breq	.+46     	; 0x2a36 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    2a08:	60 e0       	ldi	r22, 0x00	; 0
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	9f e4       	ldi	r25, 0x4F	; 79
    2a10:	25 e3       	ldi	r18, 0x35	; 53
    2a12:	3f ee       	ldi	r19, 0xEF	; 239
    2a14:	40 ea       	ldi	r20, 0xA0	; 160
    2a16:	51 e4       	ldi	r21, 0x41	; 65
    2a18:	0f 2e       	mov	r0, r31
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	ef 2e       	mov	r14, r31
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	ff 2e       	mov	r15, r31
    2a22:	f0 e2       	ldi	r31, 0x20	; 32
    2a24:	0f 2f       	mov	r16, r31
    2a26:	f1 e4       	ldi	r31, 0x41	; 65
    2a28:	1f 2f       	mov	r17, r31
    2a2a:	f0 2d       	mov	r31, r0
    2a2c:	57 01       	movw	r10, r14
    2a2e:	68 01       	movw	r12, r16
    2a30:	88 24       	eor	r8, r8
    2a32:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	switch(currentMove){
    2a36:	80 91 c0 06 	lds	r24, 0x06C0
    2a3a:	82 30       	cpi	r24, 0x02	; 2
    2a3c:	c1 f1       	breq	.+112    	; 0x2aae <moveWorld+0x15a>
    2a3e:	83 30       	cpi	r24, 0x03	; 3
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <moveWorld+0xf0>
    2a42:	61 c0       	rjmp	.+194    	; 0x2b06 <moveWorld+0x1b2>
    2a44:	81 30       	cpi	r24, 0x01	; 1
    2a46:	09 f0       	breq	.+2      	; 0x2a4a <moveWorld+0xf6>
    2a48:	9f c0       	rjmp	.+318    	; 0x2b88 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2a4a:	8d b7       	in	r24, 0x3d	; 61
    2a4c:	9e b7       	in	r25, 0x3e	; 62
    2a4e:	08 97       	sbiw	r24, 0x08	; 8
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	9e bf       	out	0x3e, r25	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	8d bf       	out	0x3d, r24	; 61
    2a5a:	ed b7       	in	r30, 0x3d	; 61
    2a5c:	fe b7       	in	r31, 0x3e	; 62
    2a5e:	31 96       	adiw	r30, 0x01	; 1
    2a60:	8f e5       	ldi	r24, 0x5F	; 95
    2a62:	91 e0       	ldi	r25, 0x01	; 1
    2a64:	ad b7       	in	r26, 0x3d	; 61
    2a66:	be b7       	in	r27, 0x3e	; 62
    2a68:	12 96       	adiw	r26, 0x02	; 2
    2a6a:	9c 93       	st	X, r25
    2a6c:	8e 93       	st	-X, r24
    2a6e:	11 97       	sbiw	r26, 0x01	; 1
    2a70:	80 91 98 04 	lds	r24, 0x0498
    2a74:	82 83       	std	Z+2, r24	; 0x02
    2a76:	13 82       	std	Z+3, r1	; 0x03
    2a78:	80 91 97 04 	lds	r24, 0x0497
    2a7c:	84 83       	std	Z+4, r24	; 0x04
    2a7e:	15 82       	std	Z+5, r1	; 0x05
    2a80:	80 91 9d 04 	lds	r24, 0x049D
    2a84:	86 83       	std	Z+6, r24	; 0x06
    2a86:	17 82       	std	Z+7, r1	; 0x07
    2a88:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2a8c:	ed b7       	in	r30, 0x3d	; 61
    2a8e:	fe b7       	in	r31, 0x3e	; 62
    2a90:	38 96       	adiw	r30, 0x08	; 8
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	fe bf       	out	0x3e, r31	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	ed bf       	out	0x3d, r30	; 61
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	70 e0       	ldi	r23, 0x00	; 0
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	4c e8       	ldi	r20, 0x8C	; 140
    2aaa:	51 ec       	ldi	r21, 0xC1	; 193
    2aac:	5d c0       	rjmp	.+186    	; 0x2b68 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2aae:	8d b7       	in	r24, 0x3d	; 61
    2ab0:	9e b7       	in	r25, 0x3e	; 62
    2ab2:	08 97       	sbiw	r24, 0x08	; 8
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	f8 94       	cli
    2ab8:	9e bf       	out	0x3e, r25	; 62
    2aba:	0f be       	out	0x3f, r0	; 63
    2abc:	8d bf       	out	0x3d, r24	; 61
    2abe:	ed b7       	in	r30, 0x3d	; 61
    2ac0:	fe b7       	in	r31, 0x3e	; 62
    2ac2:	31 96       	adiw	r30, 0x01	; 1
    2ac4:	8a e8       	ldi	r24, 0x8A	; 138
    2ac6:	91 e0       	ldi	r25, 0x01	; 1
    2ac8:	ad b7       	in	r26, 0x3d	; 61
    2aca:	be b7       	in	r27, 0x3e	; 62
    2acc:	12 96       	adiw	r26, 0x02	; 2
    2ace:	9c 93       	st	X, r25
    2ad0:	8e 93       	st	-X, r24
    2ad2:	11 97       	sbiw	r26, 0x01	; 1
    2ad4:	80 91 98 04 	lds	r24, 0x0498
    2ad8:	82 83       	std	Z+2, r24	; 0x02
    2ada:	13 82       	std	Z+3, r1	; 0x03
    2adc:	80 91 97 04 	lds	r24, 0x0497
    2ae0:	84 83       	std	Z+4, r24	; 0x04
    2ae2:	15 82       	std	Z+5, r1	; 0x05
    2ae4:	80 91 9d 04 	lds	r24, 0x049D
    2ae8:	86 83       	std	Z+6, r24	; 0x06
    2aea:	17 82       	std	Z+7, r1	; 0x07
    2aec:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWallOld();
    2af0:	ed b7       	in	r30, 0x3d	; 61
    2af2:	fe b7       	in	r31, 0x3e	; 62
    2af4:	38 96       	adiw	r30, 0x08	; 8
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	fe bf       	out	0x3e, r31	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	ed bf       	out	0x3d, r30	; 61
    2b00:	0e 94 f7 10 	call	0x21ee	; 0x21ee <moveWallOld>
    2b04:	53 c0       	rjmp	.+166    	; 0x2bac <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2b06:	8d b7       	in	r24, 0x3d	; 61
    2b08:	9e b7       	in	r25, 0x3e	; 62
    2b0a:	08 97       	sbiw	r24, 0x08	; 8
    2b0c:	0f b6       	in	r0, 0x3f	; 63
    2b0e:	f8 94       	cli
    2b10:	9e bf       	out	0x3e, r25	; 62
    2b12:	0f be       	out	0x3f, r0	; 63
    2b14:	8d bf       	out	0x3d, r24	; 61
    2b16:	ed b7       	in	r30, 0x3d	; 61
    2b18:	fe b7       	in	r31, 0x3e	; 62
    2b1a:	31 96       	adiw	r30, 0x01	; 1
    2b1c:	88 eb       	ldi	r24, 0xB8	; 184
    2b1e:	91 e0       	ldi	r25, 0x01	; 1
    2b20:	ad b7       	in	r26, 0x3d	; 61
    2b22:	be b7       	in	r27, 0x3e	; 62
    2b24:	12 96       	adiw	r26, 0x02	; 2
    2b26:	9c 93       	st	X, r25
    2b28:	8e 93       	st	-X, r24
    2b2a:	11 97       	sbiw	r26, 0x01	; 1
    2b2c:	80 91 98 04 	lds	r24, 0x0498
    2b30:	82 83       	std	Z+2, r24	; 0x02
    2b32:	13 82       	std	Z+3, r1	; 0x03
    2b34:	80 91 97 04 	lds	r24, 0x0497
    2b38:	84 83       	std	Z+4, r24	; 0x04
    2b3a:	15 82       	std	Z+5, r1	; 0x05
    2b3c:	80 91 9d 04 	lds	r24, 0x049D
    2b40:	86 83       	std	Z+6, r24	; 0x06
    2b42:	17 82       	std	Z+7, r1	; 0x07
    2b44:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2b48:	ed b7       	in	r30, 0x3d	; 61
    2b4a:	fe b7       	in	r31, 0x3e	; 62
    2b4c:	38 96       	adiw	r30, 0x08	; 8
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	fe bf       	out	0x3e, r31	; 62
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	ed bf       	out	0x3d, r30	; 61
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	70 e0       	ldi	r23, 0x00	; 0
    2b5c:	80 e0       	ldi	r24, 0x00	; 0
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	4c e8       	ldi	r20, 0x8C	; 140
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0f 2e       	mov	r0, r31
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	ef 2e       	mov	r14, r31
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	ff 2e       	mov	r15, r31
    2b72:	f0 e2       	ldi	r31, 0x20	; 32
    2b74:	0f 2f       	mov	r16, r31
    2b76:	f1 e4       	ldi	r31, 0x41	; 65
    2b78:	1f 2f       	mov	r17, r31
    2b7a:	f0 2d       	mov	r31, r0
    2b7c:	57 01       	movw	r10, r14
    2b7e:	68 01       	movw	r12, r16
    2b80:	88 24       	eor	r8, r8
    2b82:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2b86:	12 c0       	rjmp	.+36     	; 0x2bac <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <moveWorld+0x236>
    2b8a:	84 ee       	ldi	r24, 0xE4	; 228
    2b8c:	91 e0       	ldi	r25, 0x01	; 1
    2b8e:	ad b7       	in	r26, 0x3d	; 61
    2b90:	be b7       	in	r27, 0x3e	; 62
    2b92:	12 96       	adiw	r26, 0x02	; 2
    2b94:	9c 93       	st	X, r25
    2b96:	8e 93       	st	-X, r24
    2b98:	11 97       	sbiw	r26, 0x01	; 1
    2b9a:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	82 e0       	ldi	r24, 0x02	; 2
    2ba4:	60 e0       	ldi	r22, 0x00	; 0
    2ba6:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <STEPPER_stop>
    2baa:	ff cf       	rjmp	.-2      	; 0x2baa <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2bac:	80 91 c0 06 	lds	r24, 0x06C0
    2bb0:	80 93 c1 06 	sts	0x06C1, r24
	return 1;
}
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	df 90       	pop	r13
    2bc0:	cf 90       	pop	r12
    2bc2:	bf 90       	pop	r11
    2bc4:	af 90       	pop	r10
    2bc6:	8f 90       	pop	r8
    2bc8:	08 95       	ret

00002bca <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    2bca:	ff 92       	push	r15
    2bcc:	0f 93       	push	r16
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	ff 24       	eor	r15, r15
    2bd6:	f3 94       	inc	r15
    2bd8:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2bda:	cd ee       	ldi	r28, 0xED	; 237
    2bdc:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    2bde:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    2be2:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    2be4:	81 30       	cpi	r24, 0x01	; 1
    2be6:	21 f0       	breq	.+8      	; 0x2bf0 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2be8:	82 30       	cpi	r24, 0x02	; 2
    2bea:	11 f0       	breq	.+4      	; 0x2bf0 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    2bec:	83 30       	cpi	r24, 0x03	; 3
    2bee:	39 f4       	brne	.+14     	; 0x2bfe <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    2bf0:	e1 2f       	mov	r30, r17
    2bf2:	f0 e0       	ldi	r31, 0x00	; 0
    2bf4:	e6 5e       	subi	r30, 0xE6	; 230
    2bf6:	fa 4f       	sbci	r31, 0xFA	; 250
    2bf8:	00 83       	st	Z, r16
			i++;
    2bfa:	1f 5f       	subi	r17, 0xFF	; 255
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <movesInput+0x38>
		}

		if (btnHolder != 0){
    2bfe:	88 23       	and	r24, r24
    2c00:	21 f1       	breq	.+72     	; 0x2c4a <movesInput+0x80>
			LCD_clear();
    2c02:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2c06:	8d b7       	in	r24, 0x3d	; 61
    2c08:	9e b7       	in	r25, 0x3e	; 62
    2c0a:	08 97       	sbiw	r24, 0x08	; 8
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	9e bf       	out	0x3e, r25	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	8d bf       	out	0x3d, r24	; 61
    2c16:	ed b7       	in	r30, 0x3d	; 61
    2c18:	fe b7       	in	r31, 0x3e	; 62
    2c1a:	31 96       	adiw	r30, 0x01	; 1
    2c1c:	ad b7       	in	r26, 0x3d	; 61
    2c1e:	be b7       	in	r27, 0x3e	; 62
    2c20:	12 96       	adiw	r26, 0x02	; 2
    2c22:	dc 93       	st	X, r29
    2c24:	ce 93       	st	-X, r28
    2c26:	11 97       	sbiw	r26, 0x01	; 1
    2c28:	f2 82       	std	Z+2, r15	; 0x02
    2c2a:	13 82       	std	Z+3, r1	; 0x03
    2c2c:	04 83       	std	Z+4, r16	; 0x04
    2c2e:	15 82       	std	Z+5, r1	; 0x05
    2c30:	16 83       	std	Z+6, r17	; 0x06
    2c32:	17 82       	std	Z+7, r1	; 0x07
    2c34:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
    2c38:	f0 2e       	mov	r15, r16
    2c3a:	8d b7       	in	r24, 0x3d	; 61
    2c3c:	9e b7       	in	r25, 0x3e	; 62
    2c3e:	08 96       	adiw	r24, 0x08	; 8
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	9e bf       	out	0x3e, r25	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2c4a:	84 ef       	ldi	r24, 0xF4	; 244
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    2c52:	1b 30       	cpi	r17, 0x0B	; 11
    2c54:	20 f2       	brcs	.-120    	; 0x2bde <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    2c56:	1f 5f       	subi	r17, 0xFF	; 255
    2c58:	e1 2f       	mov	r30, r17
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	e6 5e       	subi	r30, 0xE6	; 230
    2c5e:	fa 4f       	sbci	r31, 0xFA	; 250
    2c60:	84 e0       	ldi	r24, 0x04	; 4
    2c62:	80 83       	st	Z, r24
}
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	0f 91       	pop	r16
    2c6c:	ff 90       	pop	r15
    2c6e:	08 95       	ret

00002c70 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    2c70:	1f 93       	push	r17
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2c78:	ce e1       	ldi	r28, 0x1E	; 30
    2c7a:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    2c7c:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2c80:	81 30       	cpi	r24, 0x01	; 1
    2c82:	21 f4       	brne	.+8      	; 0x2c8c <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    2c84:	80 91 2c 06 	lds	r24, 0x062C
    2c88:	88 0f       	add	r24, r24
    2c8a:	06 c0       	rjmp	.+12     	; 0x2c98 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2c8c:	82 30       	cpi	r24, 0x02	; 2
    2c8e:	39 f4       	brne	.+14     	; 0x2c9e <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    2c90:	80 91 2c 06 	lds	r24, 0x062C
    2c94:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	80 93 2c 06 	sts	0x062C, r24
			i++;
    2c9c:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    2c9e:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <worldInput+0x34>
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <worldInput+0x36>
    2ca6:	00 d0       	rcall	.+0      	; 0x2ca8 <worldInput+0x38>
    2ca8:	ed b7       	in	r30, 0x3d	; 61
    2caa:	fe b7       	in	r31, 0x3e	; 62
    2cac:	31 96       	adiw	r30, 0x01	; 1
    2cae:	ad b7       	in	r26, 0x3d	; 61
    2cb0:	be b7       	in	r27, 0x3e	; 62
    2cb2:	12 96       	adiw	r26, 0x02	; 2
    2cb4:	dc 93       	st	X, r29
    2cb6:	ce 93       	st	-X, r28
    2cb8:	11 97       	sbiw	r26, 0x01	; 1
    2cba:	80 91 2c 06 	lds	r24, 0x062C
    2cbe:	82 83       	std	Z+2, r24	; 0x02
    2cc0:	13 82       	std	Z+3, r1	; 0x03
    2cc2:	14 83       	std	Z+4, r17	; 0x04
    2cc4:	15 82       	std	Z+5, r1	; 0x05
    2cc6:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2cca:	8d b7       	in	r24, 0x3d	; 61
    2ccc:	9e b7       	in	r25, 0x3e	; 62
    2cce:	06 96       	adiw	r24, 0x06	; 6
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	9e bf       	out	0x3e, r25	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	8d bf       	out	0x3d, r24	; 61
    2cda:	84 ef       	ldi	r24, 0xF4	; 244
    2cdc:	91 e0       	ldi	r25, 0x01	; 1
    2cde:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    2ce2:	14 30       	cpi	r17, 0x04	; 4
    2ce4:	58 f2       	brcs	.-106    	; 0x2c7c <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    2ce6:	80 91 2c 06 	lds	r24, 0x062C
    2cea:	80 93 2d 06 	sts	0x062D, r24
}
    2cee:	df 91       	pop	r29
    2cf0:	cf 91       	pop	r28
    2cf2:	1f 91       	pop	r17
    2cf4:	08 95       	ret

00002cf6 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    2cf6:	1f 93       	push	r17
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2cfe:	c6 e4       	ldi	r28, 0x46	; 70
    2d00:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    2d02:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2d06:	81 30       	cpi	r24, 0x01	; 1
    2d08:	21 f4       	brne	.+8      	; 0x2d12 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    2d0a:	80 91 2b 05 	lds	r24, 0x052B
    2d0e:	88 0f       	add	r24, r24
    2d10:	06 c0       	rjmp	.+12     	; 0x2d1e <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2d12:	82 30       	cpi	r24, 0x02	; 2
    2d14:	41 f4       	brne	.+16     	; 0x2d26 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    2d16:	80 91 2b 05 	lds	r24, 0x052B
    2d1a:	88 0f       	add	r24, r24
			currentOrientation += 1;
    2d1c:	8f 5f       	subi	r24, 0xFF	; 255
    2d1e:	80 93 2b 05 	sts	0x052B, r24
			i++;
    2d22:	1f 5f       	subi	r17, 0xFF	; 255
    2d24:	02 c0       	rjmp	.+4      	; 0x2d2a <orientationInput+0x34>
		}

		if (btnHolder != 0){
    2d26:	88 23       	and	r24, r24
    2d28:	f1 f0       	breq	.+60     	; 0x2d66 <orientationInput+0x70>
			LCD_clear();
    2d2a:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <orientationInput+0x3a>
    2d30:	00 d0       	rcall	.+0      	; 0x2d32 <orientationInput+0x3c>
    2d32:	00 d0       	rcall	.+0      	; 0x2d34 <orientationInput+0x3e>
    2d34:	ed b7       	in	r30, 0x3d	; 61
    2d36:	fe b7       	in	r31, 0x3e	; 62
    2d38:	31 96       	adiw	r30, 0x01	; 1
    2d3a:	ad b7       	in	r26, 0x3d	; 61
    2d3c:	be b7       	in	r27, 0x3e	; 62
    2d3e:	12 96       	adiw	r26, 0x02	; 2
    2d40:	dc 93       	st	X, r29
    2d42:	ce 93       	st	-X, r28
    2d44:	11 97       	sbiw	r26, 0x01	; 1
    2d46:	80 91 2b 05 	lds	r24, 0x052B
    2d4a:	82 83       	std	Z+2, r24	; 0x02
    2d4c:	13 82       	std	Z+3, r1	; 0x03
    2d4e:	14 83       	std	Z+4, r17	; 0x04
    2d50:	15 82       	std	Z+5, r1	; 0x05
    2d52:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
    2d56:	8d b7       	in	r24, 0x3d	; 61
    2d58:	9e b7       	in	r25, 0x3e	; 62
    2d5a:	06 96       	adiw	r24, 0x06	; 6
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	9e bf       	out	0x3e, r25	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2d66:	84 ef       	ldi	r24, 0xF4	; 244
    2d68:	91 e0       	ldi	r25, 0x01	; 1
    2d6a:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    2d6e:	12 30       	cpi	r17, 0x02	; 2
    2d70:	40 f2       	brcs	.-112    	; 0x2d02 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    2d72:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>
	switch(currentOrientation){
    2d76:	80 91 2b 05 	lds	r24, 0x052B
    2d7a:	81 30       	cpi	r24, 0x01	; 1
    2d7c:	51 f0       	breq	.+20     	; 0x2d92 <orientationInput+0x9c>
    2d7e:	81 30       	cpi	r24, 0x01	; 1
    2d80:	28 f0       	brcs	.+10     	; 0x2d8c <orientationInput+0x96>
    2d82:	82 30       	cpi	r24, 0x02	; 2
    2d84:	49 f0       	breq	.+18     	; 0x2d98 <orientationInput+0xa2>
    2d86:	83 30       	cpi	r24, 0x03	; 3
    2d88:	71 f4       	brne	.+28     	; 0x2da6 <orientationInput+0xb0>
    2d8a:	09 c0       	rjmp	.+18     	; 0x2d9e <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    2d8c:	85 e7       	ldi	r24, 0x75	; 117
    2d8e:	92 e0       	ldi	r25, 0x02	; 2
    2d90:	08 c0       	rjmp	.+16     	; 0x2da2 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    2d92:	87 e9       	ldi	r24, 0x97	; 151
    2d94:	92 e0       	ldi	r25, 0x02	; 2
    2d96:	05 c0       	rjmp	.+10     	; 0x2da2 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    2d98:	88 eb       	ldi	r24, 0xB8	; 184
    2d9a:	92 e0       	ldi	r25, 0x02	; 2
    2d9c:	02 c0       	rjmp	.+4      	; 0x2da2 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    2d9e:	8a ed       	ldi	r24, 0xDA	; 218
    2da0:	92 e0       	ldi	r25, 0x02	; 2
    2da2:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    2da6:	80 91 2b 05 	lds	r24, 0x052B
    2daa:	80 93 2a 05 	sts	0x052A, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    2dae:	84 ef       	ldi	r24, 0xF4	; 244
    2db0:	91 e0       	ldi	r25, 0x01	; 1
    2db2:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
}
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	1f 91       	pop	r17
    2dbc:	08 95       	ret

00002dbe <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2dbe:	cf 92       	push	r12
    2dc0:	df 92       	push	r13
    2dc2:	ef 92       	push	r14
    2dc4:	ff 92       	push	r15
    2dc6:	0f 93       	push	r16
    2dc8:	1f 93       	push	r17
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	0f 92       	push	r0
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2dd4:	80 91 2c 06 	lds	r24, 0x062C
    2dd8:	f8 2e       	mov	r15, r24
    2dda:	f6 94       	lsr	r15
    2ddc:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2dde:	98 2f       	mov	r25, r24
    2de0:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2de2:	00 91 2b 05 	lds	r16, 0x052B
    2de6:	cc 24       	eor	r12, r12
    2de8:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2dea:	f6 01       	movw	r30, r12
    2dec:	e6 5e       	subi	r30, 0xE6	; 230
    2dee:	fa 4f       	sbci	r31, 0xFA	; 250
    2df0:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2df2:	ef 2d       	mov	r30, r15
    2df4:	f0 e0       	ldi	r31, 0x00	; 0
    2df6:	ee 0f       	add	r30, r30
    2df8:	ff 1f       	adc	r31, r31
    2dfa:	ee 0f       	add	r30, r30
    2dfc:	ff 1f       	adc	r31, r31
    2dfe:	e9 0f       	add	r30, r25
    2e00:	f1 1d       	adc	r31, r1
    2e02:	e2 5e       	subi	r30, 0xE2	; 226
    2e04:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2e06:	80 81       	ld	r24, Z
    2e08:	60 2f       	mov	r22, r16
    2e0a:	41 e0       	ldi	r20, 0x01	; 1
    2e0c:	99 83       	std	Y+1, r25	; 0x01
    2e0e:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2e12:	f6 01       	movw	r30, r12
    2e14:	e0 55       	subi	r30, 0x50	; 80
    2e16:	f9 4f       	sbci	r31, 0xF9	; 249
    2e18:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2e1a:	99 81       	ldd	r25, Y+1	; 0x01
    2e1c:	12 30       	cpi	r17, 0x02	; 2
    2e1e:	89 f4       	brne	.+34     	; 0x2e42 <getGateways+0x84>
			switch(curOrient){
    2e20:	01 30       	cpi	r16, 0x01	; 1
    2e22:	49 f0       	breq	.+18     	; 0x2e36 <getGateways+0x78>
    2e24:	01 30       	cpi	r16, 0x01	; 1
    2e26:	28 f0       	brcs	.+10     	; 0x2e32 <getGateways+0x74>
    2e28:	02 30       	cpi	r16, 0x02	; 2
    2e2a:	39 f0       	breq	.+14     	; 0x2e3a <getGateways+0x7c>
    2e2c:	03 30       	cpi	r16, 0x03	; 3
    2e2e:	89 f4       	brne	.+34     	; 0x2e52 <getGateways+0x94>
    2e30:	06 c0       	rjmp	.+12     	; 0x2e3e <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    2e32:	fa 94       	dec	r15
    2e34:	0e c0       	rjmp	.+28     	; 0x2e52 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    2e36:	9f 5f       	subi	r25, 0xFF	; 255
    2e38:	0c c0       	rjmp	.+24     	; 0x2e52 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    2e3a:	f3 94       	inc	r15
    2e3c:	0a c0       	rjmp	.+20     	; 0x2e52 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    2e3e:	91 50       	subi	r25, 0x01	; 1
    2e40:	08 c0       	rjmp	.+16     	; 0x2e52 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    2e42:	13 30       	cpi	r17, 0x03	; 3
    2e44:	11 f4       	brne	.+4      	; 0x2e4a <getGateways+0x8c>
			curOrient++;
    2e46:	0f 5f       	subi	r16, 0xFF	; 255
    2e48:	03 c0       	rjmp	.+6      	; 0x2e50 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    2e4a:	11 30       	cpi	r17, 0x01	; 1
    2e4c:	11 f4       	brne	.+4      	; 0x2e52 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    2e4e:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    2e50:	03 70       	andi	r16, 0x03	; 3
    2e52:	08 94       	sec
    2e54:	c1 1c       	adc	r12, r1
    2e56:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2e58:	8d e0       	ldi	r24, 0x0D	; 13
    2e5a:	c8 16       	cp	r12, r24
    2e5c:	d1 04       	cpc	r13, r1
    2e5e:	29 f6       	brne	.-118    	; 0x2dea <getGateways+0x2c>
    2e60:	cc 24       	eor	r12, r12
    2e62:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2e64:	9b ef       	ldi	r25, 0xFB	; 251
    2e66:	e9 2e       	mov	r14, r25
    2e68:	92 e0       	ldi	r25, 0x02	; 2
    2e6a:	f9 2e       	mov	r15, r25
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2e6c:	f6 01       	movw	r30, r12
    2e6e:	e0 55       	subi	r30, 0x50	; 80
    2e70:	f9 4f       	sbci	r31, 0xF9	; 249
    2e72:	00 81       	ld	r16, Z
		LCD_clear();
    2e74:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2e78:	20 2f       	mov	r18, r16
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	ad b7       	in	r26, 0x3d	; 61
    2e7e:	be b7       	in	r27, 0x3e	; 62
    2e80:	54 97       	sbiw	r26, 0x14	; 20
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	be bf       	out	0x3e, r27	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	ad bf       	out	0x3d, r26	; 61
    2e8c:	ed b7       	in	r30, 0x3d	; 61
    2e8e:	fe b7       	in	r31, 0x3e	; 62
    2e90:	31 96       	adiw	r30, 0x01	; 1
    2e92:	12 96       	adiw	r26, 0x02	; 2
    2e94:	fc 92       	st	X, r15
    2e96:	ee 92       	st	-X, r14
    2e98:	11 97       	sbiw	r26, 0x01	; 1
    2e9a:	d3 82       	std	Z+3, r13	; 0x03
    2e9c:	c2 82       	std	Z+2, r12	; 0x02
    2e9e:	11 27       	eor	r17, r17
    2ea0:	07 fd       	sbrc	r16, 7
    2ea2:	10 95       	com	r17
    2ea4:	00 27       	eor	r16, r16
    2ea6:	11 0f       	add	r17, r17
    2ea8:	00 1f       	adc	r16, r16
    2eaa:	11 27       	eor	r17, r17
    2eac:	15 83       	std	Z+5, r17	; 0x05
    2eae:	04 83       	std	Z+4, r16	; 0x04
    2eb0:	c9 01       	movw	r24, r18
    2eb2:	b6 e0       	ldi	r27, 0x06	; 6
    2eb4:	96 95       	lsr	r25
    2eb6:	87 95       	ror	r24
    2eb8:	ba 95       	dec	r27
    2eba:	e1 f7       	brne	.-8      	; 0x2eb4 <getGateways+0xf6>
    2ebc:	81 70       	andi	r24, 0x01	; 1
    2ebe:	90 70       	andi	r25, 0x00	; 0
    2ec0:	97 83       	std	Z+7, r25	; 0x07
    2ec2:	86 83       	std	Z+6, r24	; 0x06
    2ec4:	c9 01       	movw	r24, r18
    2ec6:	a5 e0       	ldi	r26, 0x05	; 5
    2ec8:	96 95       	lsr	r25
    2eca:	87 95       	ror	r24
    2ecc:	aa 95       	dec	r26
    2ece:	e1 f7       	brne	.-8      	; 0x2ec8 <getGateways+0x10a>
    2ed0:	81 70       	andi	r24, 0x01	; 1
    2ed2:	90 70       	andi	r25, 0x00	; 0
    2ed4:	91 87       	std	Z+9, r25	; 0x09
    2ed6:	80 87       	std	Z+8, r24	; 0x08
    2ed8:	c9 01       	movw	r24, r18
    2eda:	74 e0       	ldi	r23, 0x04	; 4
    2edc:	96 95       	lsr	r25
    2ede:	87 95       	ror	r24
    2ee0:	7a 95       	dec	r23
    2ee2:	e1 f7       	brne	.-8      	; 0x2edc <getGateways+0x11e>
    2ee4:	81 70       	andi	r24, 0x01	; 1
    2ee6:	90 70       	andi	r25, 0x00	; 0
    2ee8:	93 87       	std	Z+11, r25	; 0x0b
    2eea:	82 87       	std	Z+10, r24	; 0x0a
    2eec:	c9 01       	movw	r24, r18
    2eee:	63 e0       	ldi	r22, 0x03	; 3
    2ef0:	96 95       	lsr	r25
    2ef2:	87 95       	ror	r24
    2ef4:	6a 95       	dec	r22
    2ef6:	e1 f7       	brne	.-8      	; 0x2ef0 <getGateways+0x132>
    2ef8:	81 70       	andi	r24, 0x01	; 1
    2efa:	90 70       	andi	r25, 0x00	; 0
    2efc:	95 87       	std	Z+13, r25	; 0x0d
    2efe:	84 87       	std	Z+12, r24	; 0x0c
    2f00:	c9 01       	movw	r24, r18
    2f02:	96 95       	lsr	r25
    2f04:	87 95       	ror	r24
    2f06:	96 95       	lsr	r25
    2f08:	87 95       	ror	r24
    2f0a:	81 70       	andi	r24, 0x01	; 1
    2f0c:	90 70       	andi	r25, 0x00	; 0
    2f0e:	97 87       	std	Z+15, r25	; 0x0f
    2f10:	86 87       	std	Z+14, r24	; 0x0e
    2f12:	c9 01       	movw	r24, r18
    2f14:	96 95       	lsr	r25
    2f16:	87 95       	ror	r24
    2f18:	81 70       	andi	r24, 0x01	; 1
    2f1a:	90 70       	andi	r25, 0x00	; 0
    2f1c:	91 8b       	std	Z+17, r25	; 0x11
    2f1e:	80 8b       	std	Z+16, r24	; 0x10
    2f20:	21 70       	andi	r18, 0x01	; 1
    2f22:	30 70       	andi	r19, 0x00	; 0
    2f24:	33 8b       	std	Z+19, r19	; 0x13
    2f26:	22 8b       	std	Z+18, r18	; 0x12
    2f28:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <printf>
		TMRSRVC_delay(1000);//wait 1 second
    2f2c:	ed b7       	in	r30, 0x3d	; 61
    2f2e:	fe b7       	in	r31, 0x3e	; 62
    2f30:	74 96       	adiw	r30, 0x14	; 20
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	fe bf       	out	0x3e, r31	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	ed bf       	out	0x3d, r30	; 61
    2f3c:	88 ee       	ldi	r24, 0xE8	; 232
    2f3e:	93 e0       	ldi	r25, 0x03	; 3
    2f40:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
    2f44:	08 94       	sec
    2f46:	c1 1c       	adc	r12, r1
    2f48:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2f4a:	fd e0       	ldi	r31, 0x0D	; 13
    2f4c:	cf 16       	cp	r12, r31
    2f4e:	d1 04       	cpc	r13, r1
    2f50:	09 f0       	breq	.+2      	; 0x2f54 <getGateways+0x196>
    2f52:	8c cf       	rjmp	.-232    	; 0x2e6c <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    2f54:	0f 90       	pop	r0
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	1f 91       	pop	r17
    2f5c:	0f 91       	pop	r16
    2f5e:	ff 90       	pop	r15
    2f60:	ef 90       	pop	r14
    2f62:	df 90       	pop	r13
    2f64:	cf 90       	pop	r12
    2f66:	08 95       	ret

00002f68 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    2f68:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    2f6a:	10 91 2c 06 	lds	r17, 0x062C
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    2f6e:	80 91 97 04 	lds	r24, 0x0497
    2f72:	60 91 2b 05 	lds	r22, 0x052B
    2f76:	40 e0       	ldi	r20, 0x00	; 0
    2f78:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    2f7c:	e1 2f       	mov	r30, r17
    2f7e:	e6 95       	lsr	r30
    2f80:	e6 95       	lsr	r30
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	ee 0f       	add	r30, r30
    2f86:	ff 1f       	adc	r31, r31
    2f88:	ee 0f       	add	r30, r30
    2f8a:	ff 1f       	adc	r31, r31
    2f8c:	13 70       	andi	r17, 0x03	; 3
    2f8e:	e1 0f       	add	r30, r17
    2f90:	f1 1d       	adc	r31, r1
    2f92:	e2 5e       	subi	r30, 0xE2	; 226
    2f94:	fc 4f       	sbci	r31, 0xFC	; 252
    2f96:	80 83       	st	Z, r24
}
    2f98:	1f 91       	pop	r17
    2f9a:	08 95       	ret

00002f9c <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    2f9c:	df 92       	push	r13
    2f9e:	ef 92       	push	r14
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	06 2f       	mov	r16, r22
    2fa8:	14 2f       	mov	r17, r20
    2faa:	ff 24       	eor	r15, r15
    2fac:	2e c0       	rjmp	.+92     	; 0x300a <matchBranch+0x6e>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    2fae:	05 30       	cpi	r16, 0x05	; 5
    2fb0:	90 f5       	brcc	.+100    	; 0x3016 <matchBranch+0x7a>
    2fb2:	15 30       	cpi	r17, 0x05	; 5
    2fb4:	80 f5       	brcc	.+96     	; 0x3016 <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    2fb6:	ef 2d       	mov	r30, r15
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	e6 57       	subi	r30, 0x76	; 118
    2fbc:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    2fbe:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    2fc0:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    2fc2:	80 81       	ld	r24, Z
    2fc4:	6e 2d       	mov	r22, r14
    2fc6:	40 e0       	ldi	r20, 0x00	; 0
    2fc8:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    2fcc:	e0 2f       	mov	r30, r16
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	ee 0f       	add	r30, r30
    2fd2:	ff 1f       	adc	r31, r31
    2fd4:	ee 0f       	add	r30, r30
    2fd6:	ff 1f       	adc	r31, r31
    2fd8:	e1 0f       	add	r30, r17
    2fda:	f1 1d       	adc	r31, r1
    2fdc:	e2 5e       	subi	r30, 0xE2	; 226
    2fde:	fc 4f       	sbci	r31, 0xFC	; 252
    2fe0:	90 81       	ld	r25, Z
    2fe2:	89 17       	cp	r24, r25
    2fe4:	c1 f4       	brne	.+48     	; 0x3016 <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		currentCellWorld = (curRow << 2) + curCol;
    2fe6:	80 2f       	mov	r24, r16
    2fe8:	88 0f       	add	r24, r24
    2fea:	88 0f       	add	r24, r24
    2fec:	81 0f       	add	r24, r17
    2fee:	80 93 2c 06 	sts	0x062C, r24
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		currentCellWorld = shiftMap(currentCellWorld, curMove, curOrnt);
    2ff2:	6d 2d       	mov	r22, r13
    2ff4:	4e 2d       	mov	r20, r14
    2ff6:	0e 94 b4 13 	call	0x2768	; 0x2768 <shiftMap>
    2ffa:	80 93 2c 06 	sts	0x062C, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = currentCellWorld >> 2;
    2ffe:	08 2f       	mov	r16, r24
    3000:	06 95       	lsr	r16
    3002:	06 95       	lsr	r16
		curCol = currentCellWorld & 0b0011;
    3004:	18 2f       	mov	r17, r24
    3006:	13 70       	andi	r17, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    3008:	f3 94       	inc	r15
    300a:	80 91 99 03 	lds	r24, 0x0399
    300e:	f8 16       	cp	r15, r24
    3010:	70 f2       	brcs	.-100    	; 0x2fae <matchBranch+0x12>
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	01 c0       	rjmp	.+2      	; 0x3018 <matchBranch+0x7c>
    3016:	80 e0       	ldi	r24, 0x00	; 0
		curCol = currentCellWorld & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	return SUCCESS;
}
    3018:	1f 91       	pop	r17
    301a:	0f 91       	pop	r16
    301c:	ff 90       	pop	r15
    301e:	ef 90       	pop	r14
    3020:	df 90       	pop	r13
    3022:	08 95       	ret

00003024 <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    3024:	df 92       	push	r13
    3026:	ef 92       	push	r14
    3028:	ff 92       	push	r15
    302a:	0f 93       	push	r16
    302c:	1f 93       	push	r17
    302e:	cf 93       	push	r28
    3030:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    3032:	d0 90 8a 03 	lds	r13, 0x038A
	// Local variables for nested for loops 
	unsigned char row, col;
	// Stores the number of matching seeds
	matchSeeds = 0;
    3036:	10 92 c2 06 	sts	0x06C2, r1
    303a:	00 e0       	ldi	r16, 0x00	; 0
    303c:	10 e0       	ldi	r17, 0x00	; 0
    303e:	1a c0       	rjmp	.+52     	; 0x3074 <localizeGateway+0x50>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    3040:	88 81       	ld	r24, Y
    3042:	d8 16       	cp	r13, r24
    3044:	69 f4       	brne	.+26     	; 0x3060 <localizeGateway+0x3c>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    3046:	8e e1       	ldi	r24, 0x1E	; 30
    3048:	93 e0       	ldi	r25, 0x03	; 3
    304a:	6e 2d       	mov	r22, r14
    304c:	4f 2d       	mov	r20, r15
    304e:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <matchBranch>
    3052:	88 23       	and	r24, r24
    3054:	29 f0       	breq	.+10     	; 0x3060 <localizeGateway+0x3c>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    3056:	80 91 c2 06 	lds	r24, 0x06C2
    305a:	8f 5f       	subi	r24, 0xFF	; 255
    305c:	80 93 c2 06 	sts	0x06C2, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    3060:	f3 94       	inc	r15
    3062:	21 96       	adiw	r28, 0x01	; 1
    3064:	84 e0       	ldi	r24, 0x04	; 4
    3066:	f8 16       	cp	r15, r24
    3068:	59 f7       	brne	.-42     	; 0x3040 <localizeGateway+0x1c>
    306a:	0f 5f       	subi	r16, 0xFF	; 255
    306c:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    306e:	04 30       	cpi	r16, 0x04	; 4
    3070:	11 05       	cpc	r17, r1
    3072:	51 f0       	breq	.+20     	; 0x3088 <localizeGateway+0x64>
    3074:	e0 2e       	mov	r14, r16
    3076:	e8 01       	movw	r28, r16
    3078:	cc 0f       	add	r28, r28
    307a:	dd 1f       	adc	r29, r29
    307c:	cc 0f       	add	r28, r28
    307e:	dd 1f       	adc	r29, r29
    3080:	c2 5e       	subi	r28, 0xE2	; 226
    3082:	dc 4f       	sbci	r29, 0xFC	; 252
    3084:	ff 24       	eor	r15, r15
    3086:	dc cf       	rjmp	.-72     	; 0x3040 <localizeGateway+0x1c>
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	80 91 c2 06 	lds	r24, 0x06C2
    308e:	81 30       	cpi	r24, 0x01	; 1
    3090:	09 f0       	breq	.+2      	; 0x3094 <localizeGateway+0x70>
    3092:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    3094:	89 2f       	mov	r24, r25
    3096:	df 91       	pop	r29
    3098:	cf 91       	pop	r28
    309a:	1f 91       	pop	r17
    309c:	0f 91       	pop	r16
    309e:	ff 90       	pop	r15
    30a0:	ef 90       	pop	r14
    30a2:	df 90       	pop	r13
    30a4:	08 95       	ret

000030a6 <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    30a6:	0e 94 41 10 	call	0x2082	; 0x2082 <initializeRobot>
	
	char isDone = 0;
	setOdometry(WALL_STEP);
    30aa:	63 ec       	ldi	r22, 0xC3	; 195
    30ac:	75 e3       	ldi	r23, 0x35	; 53
    30ae:	8b ea       	ldi	r24, 0xAB	; 171
    30b0:	93 e4       	ldi	r25, 0x43	; 67
    30b2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <setOdometry>
	
	while(!isDone){
		checkIR();	
    30b6:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <checkIR>
		checkWorld();
    30ba:	0e 94 8b 10 	call	0x2116	; 0x2116 <checkWorld>
		isDone = moveWall();
    30be:	0e 94 78 12 	call	0x24f0	; 0x24f0 <moveWall>
	initializeRobot();
	
	char isDone = 0;
	setOdometry(WALL_STEP);
	
	while(!isDone){
    30c2:	88 23       	and	r24, r24
    30c4:	c1 f3       	breq	.-16     	; 0x30b6 <CBOT_main+0x10>
		checkIR();	
		checkWorld();
		isDone = moveWall();
	}
	STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    30c6:	82 e0       	ldi	r24, 0x02	; 2
    30c8:	60 e0       	ldi	r22, 0x00	; 0
    30ca:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <STEPPER_stop>
    30ce:	ff cf       	rjmp	.-2      	; 0x30ce <CBOT_main+0x28>

000030d0 <ADC_open>:
    30d0:	8f e0       	ldi	r24, 0x0F	; 15
    30d2:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    30d6:	88 23       	and	r24, r24
    30d8:	31 f4       	brne	.+12     	; 0x30e6 <ADC_open+0x16>
    30da:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__ADC_init>
    30de:	8f e0       	ldi	r24, 0x0F	; 15
    30e0:	61 e0       	ldi	r22, 0x01	; 1
    30e2:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    30e6:	8f e0       	ldi	r24, 0x0F	; 15
    30e8:	91 e0       	ldi	r25, 0x01	; 1
    30ea:	08 95       	ret

000030ec <ADC_sample>:
    30ec:	8f e0       	ldi	r24, 0x0F	; 15
    30ee:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    30f2:	81 30       	cpi	r24, 0x01	; 1
    30f4:	19 f0       	breq	.+6      	; 0x30fc <ADC_sample+0x10>
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	13 c0       	rjmp	.+38     	; 0x3122 <ADC_sample+0x36>
    30fc:	80 91 7a 00 	lds	r24, 0x007A
    3100:	80 64       	ori	r24, 0x40	; 64
    3102:	80 93 7a 00 	sts	0x007A, r24
    3106:	80 91 7a 00 	lds	r24, 0x007A
    310a:	86 fd       	sbrc	r24, 6
    310c:	fc cf       	rjmp	.-8      	; 0x3106 <ADC_sample+0x1a>
    310e:	30 91 78 00 	lds	r19, 0x0078
    3112:	20 91 79 00 	lds	r18, 0x0079
    3116:	92 2f       	mov	r25, r18
    3118:	80 e0       	ldi	r24, 0x00	; 0
    311a:	23 2f       	mov	r18, r19
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	28 2b       	or	r18, r24
    3120:	39 2b       	or	r19, r25
    3122:	c9 01       	movw	r24, r18
    3124:	08 95       	ret

00003126 <ADC_set_channel>:
    3126:	58 2f       	mov	r21, r24
    3128:	80 91 2e 03 	lds	r24, 0x032E
    312c:	88 30       	cpi	r24, 0x08	; 8
    312e:	d8 f4       	brcc	.+54     	; 0x3166 <ADC_set_channel+0x40>
    3130:	40 91 7e 00 	lds	r20, 0x007E
    3134:	21 e0       	ldi	r18, 0x01	; 1
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	b9 01       	movw	r22, r18
    313a:	02 c0       	rjmp	.+4      	; 0x3140 <ADC_set_channel+0x1a>
    313c:	66 0f       	add	r22, r22
    313e:	77 1f       	adc	r23, r23
    3140:	8a 95       	dec	r24
    3142:	e2 f7       	brpl	.-8      	; 0x313c <ADC_set_channel+0x16>
    3144:	cb 01       	movw	r24, r22
    3146:	80 95       	com	r24
    3148:	84 23       	and	r24, r20
    314a:	80 93 7e 00 	sts	0x007E, r24
    314e:	80 91 7e 00 	lds	r24, 0x007E
    3152:	05 2e       	mov	r0, r21
    3154:	02 c0       	rjmp	.+4      	; 0x315a <ADC_set_channel+0x34>
    3156:	22 0f       	add	r18, r18
    3158:	33 1f       	adc	r19, r19
    315a:	0a 94       	dec	r0
    315c:	e2 f7       	brpl	.-8      	; 0x3156 <ADC_set_channel+0x30>
    315e:	82 2b       	or	r24, r18
    3160:	80 93 7e 00 	sts	0x007E, r24
    3164:	0d c0       	rjmp	.+26     	; 0x3180 <ADC_set_channel+0x5a>
    3166:	20 91 7e 00 	lds	r18, 0x007E
    316a:	81 e0       	ldi	r24, 0x01	; 1
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	05 2e       	mov	r0, r21
    3170:	02 c0       	rjmp	.+4      	; 0x3176 <ADC_set_channel+0x50>
    3172:	88 0f       	add	r24, r24
    3174:	99 1f       	adc	r25, r25
    3176:	0a 94       	dec	r0
    3178:	e2 f7       	brpl	.-8      	; 0x3172 <ADC_set_channel+0x4c>
    317a:	28 2b       	or	r18, r24
    317c:	20 93 7e 00 	sts	0x007E, r18
    3180:	50 93 2e 03 	sts	0x032E, r21
    3184:	80 91 7c 00 	lds	r24, 0x007C
    3188:	5f 71       	andi	r21, 0x1F	; 31
    318a:	80 7e       	andi	r24, 0xE0	; 224
    318c:	85 2b       	or	r24, r21
    318e:	80 93 7c 00 	sts	0x007C, r24
    3192:	08 95       	ret

00003194 <ADC_set_VREF>:
    3194:	ec e7       	ldi	r30, 0x7C	; 124
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	90 81       	ld	r25, Z
    319a:	82 95       	swap	r24
    319c:	88 0f       	add	r24, r24
    319e:	88 0f       	add	r24, r24
    31a0:	80 7c       	andi	r24, 0xC0	; 192
    31a2:	9f 73       	andi	r25, 0x3F	; 63
    31a4:	98 2b       	or	r25, r24
    31a6:	90 83       	st	Z, r25
    31a8:	08 95       	ret

000031aa <main>:
    31aa:	0e 94 04 21 	call	0x4208	; 0x4208 <CBOT_ISR_init>
    31ae:	0e 94 f6 20 	call	0x41ec	; 0x41ec <CBOT_init>
    31b2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <CBOT_main>
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	08 95       	ret

000031bc <LCD_clear>:
    31bc:	0f 93       	push	r16
    31be:	1f 93       	push	r17
    31c0:	80 e4       	ldi	r24, 0x40	; 64
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    31c8:	00 e0       	ldi	r16, 0x00	; 0
    31ca:	80 2f       	mov	r24, r16
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	0e 94 a4 19 	call	0x3348	; 0x3348 <LCD_set_PGC_addr>
    31d2:	10 e0       	ldi	r17, 0x00	; 0
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	61 e0       	ldi	r22, 0x01	; 1
    31d8:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    31dc:	1f 5f       	subi	r17, 0xFF	; 255
    31de:	10 38       	cpi	r17, 0x80	; 128
    31e0:	c9 f7       	brne	.-14     	; 0x31d4 <LCD_clear+0x18>
    31e2:	0f 5f       	subi	r16, 0xFF	; 255
    31e4:	04 30       	cpi	r16, 0x04	; 4
    31e6:	89 f7       	brne	.-30     	; 0x31ca <LCD_clear+0xe>
    31e8:	83 e0       	ldi	r24, 0x03	; 3
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_set_next_PGC>
    31f0:	1f 91       	pop	r17
    31f2:	0f 91       	pop	r16
    31f4:	08 95       	ret

000031f6 <LCD_open>:
    31f6:	0f 93       	push	r16
    31f8:	1f 93       	push	r17
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    3200:	88 23       	and	r24, r24
    3202:	11 f4       	brne	.+4      	; 0x3208 <LCD_open+0x12>
    3204:	82 e0       	ldi	r24, 0x02	; 2
    3206:	06 c0       	rjmp	.+12     	; 0x3214 <LCD_open+0x1e>
    3208:	81 e0       	ldi	r24, 0x01	; 1
    320a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    320e:	88 23       	and	r24, r24
    3210:	19 f4       	brne	.+6      	; 0x3218 <LCD_open+0x22>
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	6d c0       	rjmp	.+218    	; 0x32f2 <LCD_open+0xfc>
    3218:	0e 94 6c 23 	call	0x46d8	; 0x46d8 <__LCD_init>
    321c:	85 e0       	ldi	r24, 0x05	; 5
    321e:	61 e0       	ldi	r22, 0x01	; 1
    3220:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    3224:	8e ea       	ldi	r24, 0xAE	; 174
    3226:	60 e0       	ldi	r22, 0x00	; 0
    3228:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    322c:	82 ea       	ldi	r24, 0xA2	; 162
    322e:	60 e0       	ldi	r22, 0x00	; 0
    3230:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    3234:	80 ea       	ldi	r24, 0xA0	; 160
    3236:	60 e0       	ldi	r22, 0x00	; 0
    3238:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    323c:	00 e5       	ldi	r16, 0x50	; 80
    323e:	13 ec       	ldi	r17, 0xC3	; 195
    3240:	c8 01       	movw	r24, r16
    3242:	01 97       	sbiw	r24, 0x01	; 1
    3244:	f1 f7       	brne	.-4      	; 0x3242 <LCD_open+0x4c>
    3246:	80 ec       	ldi	r24, 0xC0	; 192
    3248:	60 e0       	ldi	r22, 0x00	; 0
    324a:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    324e:	8f e2       	ldi	r24, 0x2F	; 47
    3250:	60 e0       	ldi	r22, 0x00	; 0
    3252:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    3256:	81 e8       	ldi	r24, 0x81	; 129
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    325e:	86 e1       	ldi	r24, 0x16	; 22
    3260:	60 e0       	ldi	r22, 0x00	; 0
    3262:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    3266:	82 e2       	ldi	r24, 0x22	; 34
    3268:	60 e0       	ldi	r22, 0x00	; 0
    326a:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    326e:	c8 01       	movw	r24, r16
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <LCD_open+0x7a>
    3274:	8f ea       	ldi	r24, 0xAF	; 175
    3276:	60 e0       	ldi	r22, 0x00	; 0
    3278:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    327c:	86 ea       	ldi	r24, 0xA6	; 166
    327e:	60 e0       	ldi	r22, 0x00	; 0
    3280:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    3284:	85 ea       	ldi	r24, 0xA5	; 165
    3286:	60 e0       	ldi	r22, 0x00	; 0
    3288:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	28 e8       	ldi	r18, 0x88	; 136
    3292:	33 e1       	ldi	r19, 0x13	; 19
    3294:	f9 01       	movw	r30, r18
    3296:	31 97       	sbiw	r30, 0x01	; 1
    3298:	f1 f7       	brne	.-4      	; 0x3296 <LCD_open+0xa0>
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	43 e0       	ldi	r20, 0x03	; 3
    329e:	88 3e       	cpi	r24, 0xE8	; 232
    32a0:	94 07       	cpc	r25, r20
    32a2:	c1 f7       	brne	.-16     	; 0x3294 <LCD_open+0x9e>
    32a4:	83 eb       	ldi	r24, 0xB3	; 179
    32a6:	60 e0       	ldi	r22, 0x00	; 0
    32a8:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    32ac:	80 e4       	ldi	r24, 0x40	; 64
    32ae:	60 e0       	ldi	r22, 0x00	; 0
    32b0:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    32b4:	83 e0       	ldi	r24, 0x03	; 3
    32b6:	60 e0       	ldi	r22, 0x00	; 0
    32b8:	0e 94 a4 19 	call	0x3348	; 0x3348 <LCD_set_PGC_addr>
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	0e 94 9d 19 	call	0x333a	; 0x333a <LCD_set_next_PGC>
    32c4:	10 92 12 07 	sts	0x0712, r1
    32c8:	10 92 14 07 	sts	0x0714, r1
    32cc:	10 92 13 07 	sts	0x0713, r1
    32d0:	8d e3       	ldi	r24, 0x3D	; 61
    32d2:	93 e0       	ldi	r25, 0x03	; 3
    32d4:	90 93 43 07 	sts	0x0743, r25
    32d8:	80 93 42 07 	sts	0x0742, r24
    32dc:	88 e1       	ldi	r24, 0x18	; 24
    32de:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <LCD_set_backlight>
    32e2:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>
    32e6:	84 ea       	ldi	r24, 0xA4	; 164
    32e8:	60 e0       	ldi	r22, 0x00	; 0
    32ea:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    32ee:	85 e0       	ldi	r24, 0x05	; 5
    32f0:	91 e0       	ldi	r25, 0x01	; 1
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	08 95       	ret

000032f8 <LCD_set_backlight>:
    32f8:	1f 93       	push	r17
    32fa:	18 2f       	mov	r17, r24
    32fc:	85 e0       	ldi	r24, 0x05	; 5
    32fe:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    3302:	81 30       	cpi	r24, 0x01	; 1
    3304:	c1 f4       	brne	.+48     	; 0x3336 <LCD_set_backlight+0x3e>
    3306:	87 e0       	ldi	r24, 0x07	; 7
    3308:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <SPI_set_slave_addr>
    330c:	82 e0       	ldi	r24, 0x02	; 2
    330e:	6a e0       	ldi	r22, 0x0A	; 10
    3310:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SPI_transmit>
    3314:	82 e0       	ldi	r24, 0x02	; 2
    3316:	61 eb       	ldi	r22, 0xB1	; 177
    3318:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SPI_transmit>
    331c:	61 2f       	mov	r22, r17
    331e:	11 32       	cpi	r17, 0x21	; 33
    3320:	08 f0       	brcs	.+2      	; 0x3324 <LCD_set_backlight+0x2c>
    3322:	60 e2       	ldi	r22, 0x20	; 32
    3324:	82 e0       	ldi	r24, 0x02	; 2
    3326:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SPI_transmit>
    332a:	89 ee       	ldi	r24, 0xE9	; 233
    332c:	8a 95       	dec	r24
    332e:	f1 f7       	brne	.-4      	; 0x332c <LCD_set_backlight+0x34>
    3330:	87 e0       	ldi	r24, 0x07	; 7
    3332:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <SPI_set_slave_addr>
    3336:	1f 91       	pop	r17
    3338:	08 95       	ret

0000333a <LCD_set_next_PGC>:
    333a:	83 70       	andi	r24, 0x03	; 3
    333c:	6f 77       	andi	r22, 0x7F	; 127
    333e:	60 93 10 07 	sts	0x0710, r22
    3342:	80 93 11 07 	sts	0x0711, r24
    3346:	08 95       	ret

00003348 <LCD_set_PGC_addr>:
    3348:	0f 93       	push	r16
    334a:	1f 93       	push	r17
    334c:	06 2f       	mov	r16, r22
    334e:	16 2f       	mov	r17, r22
    3350:	1f 77       	andi	r17, 0x7F	; 127
    3352:	83 70       	andi	r24, 0x03	; 3
    3354:	80 6b       	ori	r24, 0xB0	; 176
    3356:	60 e0       	ldi	r22, 0x00	; 0
    3358:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    335c:	12 95       	swap	r17
    335e:	1f 70       	andi	r17, 0x0F	; 15
    3360:	81 2f       	mov	r24, r17
    3362:	80 61       	ori	r24, 0x10	; 16
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    336a:	80 2f       	mov	r24, r16
    336c:	8f 70       	andi	r24, 0x0F	; 15
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	08 95       	ret

0000337a <LCD_write>:
    337a:	0f 93       	push	r16
    337c:	1f 93       	push	r17
    337e:	08 2f       	mov	r16, r24
    3380:	16 2f       	mov	r17, r22
    3382:	85 e0       	ldi	r24, 0x05	; 5
    3384:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    3388:	81 30       	cpi	r24, 0x01	; 1
    338a:	79 f4       	brne	.+30     	; 0x33aa <LCD_write+0x30>
    338c:	11 23       	and	r17, r17
    338e:	19 f0       	breq	.+6      	; 0x3396 <LCD_write+0x1c>
    3390:	11 30       	cpi	r17, 0x01	; 1
    3392:	21 f4       	brne	.+8      	; 0x339c <LCD_write+0x22>
    3394:	02 c0       	rjmp	.+4      	; 0x339a <LCD_write+0x20>
    3396:	2b 98       	cbi	0x05, 3	; 5
    3398:	01 c0       	rjmp	.+2      	; 0x339c <LCD_write+0x22>
    339a:	2b 9a       	sbi	0x05, 3	; 5
    339c:	86 e0       	ldi	r24, 0x06	; 6
    339e:	8a 95       	dec	r24
    33a0:	f1 f7       	brne	.-4      	; 0x339e <LCD_write+0x24>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	60 2f       	mov	r22, r16
    33a6:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SPI_transmit>
    33aa:	1f 91       	pop	r17
    33ac:	0f 91       	pop	r16
    33ae:	08 95       	ret

000033b0 <LED_clr_pattern>:
    33b0:	1f 93       	push	r17
    33b2:	18 2f       	mov	r17, r24
    33b4:	86 e0       	ldi	r24, 0x06	; 6
    33b6:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    33ba:	81 30       	cpi	r24, 0x01	; 1
    33bc:	19 f4       	brne	.+6      	; 0x33c4 <LED_clr_pattern+0x14>
    33be:	81 2f       	mov	r24, r17
    33c0:	0e 94 1b 24 	call	0x4836	; 0x4836 <__LED_clr_pattern>
    33c4:	1f 91       	pop	r17
    33c6:	08 95       	ret

000033c8 <LED_open>:
    33c8:	0e 94 20 24 	call	0x4840	; 0x4840 <__LED_init>
    33cc:	86 e0       	ldi	r24, 0x06	; 6
    33ce:	61 e0       	ldi	r22, 0x01	; 1
    33d0:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    33d4:	86 e0       	ldi	r24, 0x06	; 6
    33d6:	91 e0       	ldi	r25, 0x01	; 1
    33d8:	08 95       	ret

000033da <LED_set_pattern>:
    33da:	1f 93       	push	r17
    33dc:	18 2f       	mov	r17, r24
    33de:	86 e0       	ldi	r24, 0x06	; 6
    33e0:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    33e4:	81 30       	cpi	r24, 0x01	; 1
    33e6:	19 f4       	brne	.+6      	; 0x33ee <LED_set_pattern+0x14>
    33e8:	81 2f       	mov	r24, r17
    33ea:	0e 94 23 24 	call	0x4846	; 0x4846 <__LED_set_pattern>
    33ee:	1f 91       	pop	r17
    33f0:	08 95       	ret

000033f2 <SPI_set_slave_addr>:
    33f2:	1f 93       	push	r17
    33f4:	18 2f       	mov	r17, r24
    33f6:	82 e0       	ldi	r24, 0x02	; 2
    33f8:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    33fc:	81 30       	cpi	r24, 0x01	; 1
    33fe:	09 f0       	breq	.+2      	; 0x3402 <SPI_set_slave_addr+0x10>
    3400:	47 c0       	rjmp	.+142    	; 0x3490 <SPI_set_slave_addr+0x9e>
    3402:	91 2f       	mov	r25, r17
    3404:	97 70       	andi	r25, 0x07	; 7
    3406:	80 91 15 07 	lds	r24, 0x0715
    340a:	98 17       	cp	r25, r24
    340c:	09 f4       	brne	.+2      	; 0x3410 <SPI_set_slave_addr+0x1e>
    340e:	40 c0       	rjmp	.+128    	; 0x3490 <SPI_set_slave_addr+0x9e>
    3410:	90 93 15 07 	sts	0x0715, r25
    3414:	85 b1       	in	r24, 0x05	; 5
    3416:	88 7f       	andi	r24, 0xF8	; 248
    3418:	89 2b       	or	r24, r25
    341a:	85 b9       	out	0x05, r24	; 5
    341c:	93 30       	cpi	r25, 0x03	; 3
    341e:	11 f1       	breq	.+68     	; 0x3464 <SPI_set_slave_addr+0x72>
    3420:	94 30       	cpi	r25, 0x04	; 4
    3422:	28 f4       	brcc	.+10     	; 0x342e <SPI_set_slave_addr+0x3c>
    3424:	91 30       	cpi	r25, 0x01	; 1
    3426:	51 f0       	breq	.+20     	; 0x343c <SPI_set_slave_addr+0x4a>
    3428:	92 30       	cpi	r25, 0x02	; 2
    342a:	90 f4       	brcc	.+36     	; 0x3450 <SPI_set_slave_addr+0x5e>
    342c:	0c c0       	rjmp	.+24     	; 0x3446 <SPI_set_slave_addr+0x54>
    342e:	95 30       	cpi	r25, 0x05	; 5
    3430:	19 f1       	breq	.+70     	; 0x3478 <SPI_set_slave_addr+0x86>
    3432:	95 30       	cpi	r25, 0x05	; 5
    3434:	e0 f0       	brcs	.+56     	; 0x346e <SPI_set_slave_addr+0x7c>
    3436:	96 30       	cpi	r25, 0x06	; 6
    3438:	21 f5       	brne	.+72     	; 0x3482 <SPI_set_slave_addr+0x90>
    343a:	0f c0       	rjmp	.+30     	; 0x345a <SPI_set_slave_addr+0x68>
    343c:	e0 91 ec 03 	lds	r30, 0x03EC
    3440:	f0 91 ed 03 	lds	r31, 0x03ED
    3444:	22 c0       	rjmp	.+68     	; 0x348a <SPI_set_slave_addr+0x98>
    3446:	e0 91 ea 03 	lds	r30, 0x03EA
    344a:	f0 91 eb 03 	lds	r31, 0x03EB
    344e:	1d c0       	rjmp	.+58     	; 0x348a <SPI_set_slave_addr+0x98>
    3450:	e0 91 ee 03 	lds	r30, 0x03EE
    3454:	f0 91 ef 03 	lds	r31, 0x03EF
    3458:	18 c0       	rjmp	.+48     	; 0x348a <SPI_set_slave_addr+0x98>
    345a:	e0 91 f6 03 	lds	r30, 0x03F6
    345e:	f0 91 f7 03 	lds	r31, 0x03F7
    3462:	13 c0       	rjmp	.+38     	; 0x348a <SPI_set_slave_addr+0x98>
    3464:	e0 91 f0 03 	lds	r30, 0x03F0
    3468:	f0 91 f1 03 	lds	r31, 0x03F1
    346c:	0e c0       	rjmp	.+28     	; 0x348a <SPI_set_slave_addr+0x98>
    346e:	e0 91 f2 03 	lds	r30, 0x03F2
    3472:	f0 91 f3 03 	lds	r31, 0x03F3
    3476:	09 c0       	rjmp	.+18     	; 0x348a <SPI_set_slave_addr+0x98>
    3478:	e0 91 f4 03 	lds	r30, 0x03F4
    347c:	f0 91 f5 03 	lds	r31, 0x03F5
    3480:	04 c0       	rjmp	.+8      	; 0x348a <SPI_set_slave_addr+0x98>
    3482:	e0 91 f8 03 	lds	r30, 0x03F8
    3486:	f0 91 f9 03 	lds	r31, 0x03F9
    348a:	30 97       	sbiw	r30, 0x00	; 0
    348c:	09 f0       	breq	.+2      	; 0x3490 <SPI_set_slave_addr+0x9e>
    348e:	09 95       	icall
    3490:	1f 91       	pop	r17
    3492:	08 95       	ret

00003494 <SPI_transmit>:
    3494:	1f 93       	push	r17
    3496:	16 2f       	mov	r17, r22
    3498:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <SPI_set_slave_addr>
    349c:	82 e0       	ldi	r24, 0x02	; 2
    349e:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    34a2:	81 30       	cpi	r24, 0x01	; 1
    34a4:	21 f4       	brne	.+8      	; 0x34ae <SPI_transmit+0x1a>
    34a6:	1e bd       	out	0x2e, r17	; 46
    34a8:	0d b4       	in	r0, 0x2d	; 45
    34aa:	07 fe       	sbrs	r0, 7
    34ac:	fd cf       	rjmp	.-6      	; 0x34a8 <SPI_transmit+0x14>
    34ae:	1f 91       	pop	r17
    34b0:	08 95       	ret

000034b2 <__SPKR_set_up_freq_LUT>:
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    34b6:	cf 93       	push	r28
    34b8:	df 93       	push	r29
    34ba:	80 e2       	ldi	r24, 0x20	; 32
    34bc:	91 e0       	ldi	r25, 0x01	; 1
    34be:	0e 94 2f 33 	call	0x665e	; 0x665e <malloc>
    34c2:	9c 01       	movw	r18, r24
    34c4:	90 93 09 04 	sts	0x0409, r25
    34c8:	80 93 08 04 	sts	0x0408, r24
    34cc:	89 2b       	or	r24, r25
    34ce:	11 f4       	brne	.+4      	; 0x34d4 <__SPKR_set_up_freq_LUT+0x22>
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	39 c0       	rjmp	.+114    	; 0x3546 <__SPKR_set_up_freq_LUT+0x94>
    34d4:	89 01       	movw	r16, r18
    34d6:	c0 e0       	ldi	r28, 0x00	; 0
    34d8:	d0 e0       	ldi	r29, 0x00	; 0
    34da:	be 01       	movw	r22, r28
    34dc:	80 e0       	ldi	r24, 0x00	; 0
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	0e 94 97 2c 	call	0x592e	; 0x592e <__floatunsisf>
    34e4:	20 e0       	ldi	r18, 0x00	; 0
    34e6:	30 e0       	ldi	r19, 0x00	; 0
    34e8:	40 ea       	ldi	r20, 0xA0	; 160
    34ea:	51 e4       	ldi	r21, 0x41	; 65
    34ec:	0e 94 fe 2b 	call	0x57fc	; 0x57fc <__divsf3>
    34f0:	27 ef       	ldi	r18, 0xF7	; 247
    34f2:	35 e7       	ldi	r19, 0x75	; 117
    34f4:	40 e0       	ldi	r20, 0x00	; 0
    34f6:	5f e3       	ldi	r21, 0x3F	; 63
    34f8:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    34fc:	9b 01       	movw	r18, r22
    34fe:	ac 01       	movw	r20, r24
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	70 e0       	ldi	r23, 0x00	; 0
    3504:	80 e2       	ldi	r24, 0x20	; 32
    3506:	91 e4       	ldi	r25, 0x41	; 65
    3508:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <pow>
    350c:	9b 01       	movw	r18, r22
    350e:	ac 01       	movw	r20, r24
    3510:	ca 01       	movw	r24, r20
    3512:	b9 01       	movw	r22, r18
    3514:	2d ec       	ldi	r18, 0xCD	; 205
    3516:	3c ec       	ldi	r19, 0xCC	; 204
    3518:	42 e8       	ldi	r20, 0x82	; 130
    351a:	51 e4       	ldi	r21, 0x41	; 65
    351c:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <__mulsf3>
    3520:	0e 94 4d 2d 	call	0x5a9a	; 0x5a9a <lrint>
    3524:	2a e0       	ldi	r18, 0x0A	; 10
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e0       	ldi	r20, 0x00	; 0
    352a:	50 e0       	ldi	r21, 0x00	; 0
    352c:	0e 94 b7 32 	call	0x656e	; 0x656e <__mulsi3>
    3530:	f8 01       	movw	r30, r16
    3532:	61 93       	st	Z+, r22
    3534:	71 93       	st	Z+, r23
    3536:	81 93       	st	Z+, r24
    3538:	91 93       	st	Z+, r25
    353a:	8f 01       	movw	r16, r30
    353c:	21 96       	adiw	r28, 0x01	; 1
    353e:	c8 34       	cpi	r28, 0x48	; 72
    3540:	d1 05       	cpc	r29, r1
    3542:	59 f6       	brne	.-106    	; 0x34da <__SPKR_set_up_freq_LUT+0x28>
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	df 91       	pop	r29
    3548:	cf 91       	pop	r28
    354a:	1f 91       	pop	r17
    354c:	0f 91       	pop	r16
    354e:	08 95       	ret

00003550 <__SPKR_open_beep_mode>:
    3550:	8a e0       	ldi	r24, 0x0A	; 10
    3552:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    3556:	88 23       	and	r24, r24
    3558:	71 f4       	brne	.+28     	; 0x3576 <__SPKR_open_beep_mode+0x26>
    355a:	10 92 05 04 	sts	0x0405, r1
    355e:	10 92 04 04 	sts	0x0404, r1
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	0e 94 5e 25 	call	0x4abc	; 0x4abc <__SPKR_init>
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	80 93 fb 03 	sts	0x03FB, r24
    356e:	8a e0       	ldi	r24, 0x0A	; 10
    3570:	61 e0       	ldi	r22, 0x01	; 1
    3572:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    3576:	8a e0       	ldi	r24, 0x0A	; 10
    3578:	91 e0       	ldi	r25, 0x01	; 1
    357a:	08 95       	ret

0000357c <__SPKR_open_tone_mode>:
    357c:	1f 93       	push	r17
    357e:	8b e0       	ldi	r24, 0x0B	; 11
    3580:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    3584:	88 23       	and	r24, r24
    3586:	11 f0       	breq	.+4      	; 0x358c <__SPKR_open_tone_mode+0x10>
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	21 c0       	rjmp	.+66     	; 0x35ce <__SPKR_open_tone_mode+0x52>
    358c:	89 e0       	ldi	r24, 0x09	; 9
    358e:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    3592:	88 23       	and	r24, r24
    3594:	d9 f4       	brne	.+54     	; 0x35cc <__SPKR_open_tone_mode+0x50>
    3596:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__SPKR_set_up_freq_LUT>
    359a:	18 2f       	mov	r17, r24
    359c:	81 30       	cpi	r24, 0x01	; 1
    359e:	b1 f4       	brne	.+44     	; 0x35cc <__SPKR_open_tone_mode+0x50>
    35a0:	10 92 fc 03 	sts	0x03FC, r1
    35a4:	10 92 fd 03 	sts	0x03FD, r1
    35a8:	10 92 fe 03 	sts	0x03FE, r1
    35ac:	10 92 ff 03 	sts	0x03FF, r1
    35b0:	8d e0       	ldi	r24, 0x0D	; 13
    35b2:	61 ee       	ldi	r22, 0xE1	; 225
    35b4:	74 e2       	ldi	r23, 0x24	; 36
    35b6:	0e 94 44 23 	call	0x4688	; 0x4688 <ISR_attach>
    35ba:	82 e0       	ldi	r24, 0x02	; 2
    35bc:	0e 94 5e 25 	call	0x4abc	; 0x4abc <__SPKR_init>
    35c0:	10 93 fa 03 	sts	0x03FA, r17
    35c4:	89 e0       	ldi	r24, 0x09	; 9
    35c6:	61 e0       	ldi	r22, 0x01	; 1
    35c8:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    35cc:	91 e0       	ldi	r25, 0x01	; 1
    35ce:	89 e0       	ldi	r24, 0x09	; 9
    35d0:	1f 91       	pop	r17
    35d2:	08 95       	ret

000035d4 <SPKR_open>:
    35d4:	81 30       	cpi	r24, 0x01	; 1
    35d6:	29 f0       	breq	.+10     	; 0x35e2 <SPKR_open+0xe>
    35d8:	82 30       	cpi	r24, 0x02	; 2
    35da:	31 f0       	breq	.+12     	; 0x35e8 <SPKR_open+0x14>
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	89 e0       	ldi	r24, 0x09	; 9
    35e0:	08 95       	ret
    35e2:	0e 94 a8 1a 	call	0x3550	; 0x3550 <__SPKR_open_beep_mode>
    35e6:	08 95       	ret
    35e8:	0e 94 be 1a 	call	0x357c	; 0x357c <__SPKR_open_tone_mode>
    35ec:	08 95       	ret

000035ee <STEPPER_get_nSteps>:
    35ee:	80 91 d6 06 	lds	r24, 0x06D6
    35f2:	90 91 d7 06 	lds	r25, 0x06D7
    35f6:	20 91 d8 06 	lds	r18, 0x06D8
    35fa:	30 91 d9 06 	lds	r19, 0x06D9
    35fe:	bc 01       	movw	r22, r24
    3600:	c9 01       	movw	r24, r18
    3602:	08 95       	ret

00003604 <STEPPER_stepmode>:
    3604:	2f 92       	push	r2
    3606:	3f 92       	push	r3
    3608:	4f 92       	push	r4
    360a:	5f 92       	push	r5
    360c:	6f 92       	push	r6
    360e:	7f 92       	push	r7
    3610:	8f 92       	push	r8
    3612:	9f 92       	push	r9
    3614:	af 92       	push	r10
    3616:	bf 92       	push	r11
    3618:	cf 92       	push	r12
    361a:	df 92       	push	r13
    361c:	ef 92       	push	r14
    361e:	ff 92       	push	r15
    3620:	0f 93       	push	r16
    3622:	1f 93       	push	r17
    3624:	df 93       	push	r29
    3626:	cf 93       	push	r28
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	58 2e       	mov	r5, r24
    362e:	96 2e       	mov	r9, r22
    3630:	44 2e       	mov	r4, r20
    3632:	39 01       	movw	r6, r18
    3634:	3c 2c       	mov	r3, r12
    3636:	c9 8c       	ldd	r12, Y+25	; 0x19
    3638:	da 8c       	ldd	r13, Y+26	; 0x1a
    363a:	2b 8c       	ldd	r2, Y+27	; 0x1b
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	68 17       	cp	r22, r24
    3640:	39 f1       	breq	.+78     	; 0x3690 <STEPPER_stepmode+0x8c>
    3642:	68 17       	cp	r22, r24
    3644:	28 f0       	brcs	.+10     	; 0x3650 <STEPPER_stepmode+0x4c>
    3646:	92 e0       	ldi	r25, 0x02	; 2
    3648:	69 17       	cp	r22, r25
    364a:	09 f0       	breq	.+2      	; 0x364e <STEPPER_stepmode+0x4a>
    364c:	85 c0       	rjmp	.+266    	; 0x3758 <STEPPER_stepmode+0x154>
    364e:	49 c0       	rjmp	.+146    	; 0x36e2 <STEPPER_stepmode+0xde>
    3650:	80 e0       	ldi	r24, 0x00	; 0
    3652:	61 e0       	ldi	r22, 0x01	; 1
    3654:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <STEPPER_set_mode>
    3658:	80 e0       	ldi	r24, 0x00	; 0
    365a:	b7 01       	movw	r22, r14
    365c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <STEPPER_set_accel>
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	64 2d       	mov	r22, r4
    3664:	a3 01       	movw	r20, r6
    3666:	98 01       	movw	r18, r16
    3668:	03 2d       	mov	r16, r3
    366a:	ee 24       	eor	r14, r14
    366c:	e3 94       	inc	r14
    366e:	eb ef       	ldi	r30, 0xFB	; 251
    3670:	ce 2e       	mov	r12, r30
    3672:	e6 e0       	ldi	r30, 0x06	; 6
    3674:	de 2e       	mov	r13, r30
    3676:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <STEPPER_step>
    367a:	55 20       	and	r5, r5
    367c:	09 f0       	breq	.+2      	; 0x3680 <STEPPER_stepmode+0x7c>
    367e:	6c c0       	rjmp	.+216    	; 0x3758 <STEPPER_stepmode+0x154>
    3680:	00 d0       	rcall	.+0      	; 0x3682 <STEPPER_stepmode+0x7e>
    3682:	0f 92       	push	r0
    3684:	ed b7       	in	r30, 0x3d	; 61
    3686:	fe b7       	in	r31, 0x3e	; 62
    3688:	11 82       	std	Z+1, r1	; 0x01
    368a:	b3 82       	std	Z+3, r11	; 0x03
    368c:	a2 82       	std	Z+2, r10	; 0x02
    368e:	23 c0       	rjmp	.+70     	; 0x36d6 <STEPPER_stepmode+0xd2>
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	61 e0       	ldi	r22, 0x01	; 1
    3694:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <STEPPER_set_mode>
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	b6 01       	movw	r22, r12
    369c:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <STEPPER_set_accel>
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	68 2d       	mov	r22, r8
    36a4:	4d 89       	ldd	r20, Y+21	; 0x15
    36a6:	5e 89       	ldd	r21, Y+22	; 0x16
    36a8:	2f 89       	ldd	r18, Y+23	; 0x17
    36aa:	38 8d       	ldd	r19, Y+24	; 0x18
    36ac:	02 2d       	mov	r16, r2
    36ae:	ee 24       	eor	r14, r14
    36b0:	e3 94       	inc	r14
    36b2:	7b ef       	ldi	r23, 0xFB	; 251
    36b4:	c7 2e       	mov	r12, r23
    36b6:	76 e0       	ldi	r23, 0x06	; 6
    36b8:	d7 2e       	mov	r13, r23
    36ba:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <STEPPER_step>
    36be:	55 20       	and	r5, r5
    36c0:	09 f0       	breq	.+2      	; 0x36c4 <STEPPER_stepmode+0xc0>
    36c2:	4a c0       	rjmp	.+148    	; 0x3758 <STEPPER_stepmode+0x154>
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <STEPPER_stepmode+0xc2>
    36c6:	0f 92       	push	r0
    36c8:	ed b7       	in	r30, 0x3d	; 61
    36ca:	fe b7       	in	r31, 0x3e	; 62
    36cc:	91 82       	std	Z+1, r9	; 0x01
    36ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    36d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    36d2:	93 83       	std	Z+3, r25	; 0x03
    36d4:	82 83       	std	Z+2, r24	; 0x02
    36d6:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <STEPPER_wait_and_then>
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	0f 90       	pop	r0
    36e0:	3b c0       	rjmp	.+118    	; 0x3758 <STEPPER_stepmode+0x154>
    36e2:	82 e0       	ldi	r24, 0x02	; 2
    36e4:	61 e0       	ldi	r22, 0x01	; 1
    36e6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <STEPPER_set_mode>
    36ea:	80 e0       	ldi	r24, 0x00	; 0
    36ec:	b7 01       	movw	r22, r14
    36ee:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <STEPPER_set_accel>
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	b6 01       	movw	r22, r12
    36f6:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <STEPPER_set_accel>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	64 2d       	mov	r22, r4
    36fe:	a3 01       	movw	r20, r6
    3700:	98 01       	movw	r18, r16
    3702:	03 2d       	mov	r16, r3
    3704:	ee 24       	eor	r14, r14
    3706:	e3 94       	inc	r14
    3708:	9b ef       	ldi	r25, 0xFB	; 251
    370a:	c9 2e       	mov	r12, r25
    370c:	96 e0       	ldi	r25, 0x06	; 6
    370e:	d9 2e       	mov	r13, r25
    3710:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <STEPPER_step>
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	68 2d       	mov	r22, r8
    3718:	4d 89       	ldd	r20, Y+21	; 0x15
    371a:	5e 89       	ldd	r21, Y+22	; 0x16
    371c:	2f 89       	ldd	r18, Y+23	; 0x17
    371e:	38 8d       	ldd	r19, Y+24	; 0x18
    3720:	02 2d       	mov	r16, r2
    3722:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <STEPPER_step>
    3726:	55 20       	and	r5, r5
    3728:	b9 f4       	brne	.+46     	; 0x3758 <STEPPER_stepmode+0x154>
    372a:	00 d0       	rcall	.+0      	; 0x372c <STEPPER_stepmode+0x128>
    372c:	00 d0       	rcall	.+0      	; 0x372e <STEPPER_stepmode+0x12a>
    372e:	0f 92       	push	r0
    3730:	ad b7       	in	r26, 0x3d	; 61
    3732:	be b7       	in	r27, 0x3e	; 62
    3734:	11 96       	adiw	r26, 0x01	; 1
    3736:	ed b7       	in	r30, 0x3d	; 61
    3738:	fe b7       	in	r31, 0x3e	; 62
    373a:	91 82       	std	Z+1, r9	; 0x01
    373c:	fd 01       	movw	r30, r26
    373e:	b2 82       	std	Z+2, r11	; 0x02
    3740:	a1 82       	std	Z+1, r10	; 0x01
    3742:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3744:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3746:	94 83       	std	Z+4, r25	; 0x04
    3748:	83 83       	std	Z+3, r24	; 0x03
    374a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <STEPPER_wait_and_then>
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	1f 91       	pop	r17
    375e:	0f 91       	pop	r16
    3760:	ff 90       	pop	r15
    3762:	ef 90       	pop	r14
    3764:	df 90       	pop	r13
    3766:	cf 90       	pop	r12
    3768:	bf 90       	pop	r11
    376a:	af 90       	pop	r10
    376c:	9f 90       	pop	r9
    376e:	8f 90       	pop	r8
    3770:	7f 90       	pop	r7
    3772:	6f 90       	pop	r6
    3774:	5f 90       	pop	r5
    3776:	4f 90       	pop	r4
    3778:	3f 90       	pop	r3
    377a:	2f 90       	pop	r2
    377c:	08 95       	ret

0000377e <STEPPER_move>:
    377e:	6f 92       	push	r6
    3780:	7f 92       	push	r7
    3782:	8f 92       	push	r8
    3784:	9f 92       	push	r9
    3786:	af 92       	push	r10
    3788:	bf 92       	push	r11
    378a:	cf 92       	push	r12
    378c:	df 92       	push	r13
    378e:	ef 92       	push	r14
    3790:	ff 92       	push	r15
    3792:	0f 93       	push	r16
    3794:	1f 93       	push	r17
    3796:	df 93       	push	r29
    3798:	cf 93       	push	r28
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	94 2e       	mov	r9, r20
    37a0:	7c 2d       	mov	r23, r12
    37a2:	d5 01       	movw	r26, r10
    37a4:	49 89       	ldd	r20, Y+17	; 0x11
    37a6:	5a 89       	ldd	r21, Y+18	; 0x12
    37a8:	ab 88       	ldd	r10, Y+19	; 0x13
    37aa:	bc 88       	ldd	r11, Y+20	; 0x14
    37ac:	cd 88       	ldd	r12, Y+21	; 0x15
    37ae:	de 88       	ldd	r13, Y+22	; 0x16
    37b0:	9f 89       	ldd	r25, Y+23	; 0x17
    37b2:	81 30       	cpi	r24, 0x01	; 1
    37b4:	09 f4       	brne	.+2      	; 0x37b8 <STEPPER_move+0x3a>
    37b6:	57 c0       	rjmp	.+174    	; 0x3866 <STEPPER_move+0xe8>
    37b8:	81 30       	cpi	r24, 0x01	; 1
    37ba:	b8 f1       	brcs	.+110    	; 0x382a <STEPPER_move+0xac>
    37bc:	82 30       	cpi	r24, 0x02	; 2
    37be:	09 f0       	breq	.+2      	; 0x37c2 <STEPPER_move+0x44>
    37c0:	76 c0       	rjmp	.+236    	; 0x38ae <STEPPER_move+0x130>
    37c2:	61 30       	cpi	r22, 0x01	; 1
    37c4:	91 f0       	breq	.+36     	; 0x37ea <STEPPER_move+0x6c>
    37c6:	61 30       	cpi	r22, 0x01	; 1
    37c8:	20 f0       	brcs	.+8      	; 0x37d2 <STEPPER_move+0x54>
    37ca:	62 30       	cpi	r22, 0x02	; 2
    37cc:	09 f0       	breq	.+2      	; 0x37d0 <STEPPER_move+0x52>
    37ce:	6f c0       	rjmp	.+222    	; 0x38ae <STEPPER_move+0x130>
    37d0:	15 c0       	rjmp	.+42     	; 0x37fc <STEPPER_move+0x7e>
    37d2:	80 e0       	ldi	r24, 0x00	; 0
    37d4:	60 e0       	ldi	r22, 0x00	; 0
    37d6:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <STEPPER_set_mode>
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	b7 01       	movw	r22, r14
    37de:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <STEPPER_set_accel>
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	69 2d       	mov	r22, r9
    37e6:	a8 01       	movw	r20, r16
    37e8:	1d c0       	rjmp	.+58     	; 0x3824 <STEPPER_move+0xa6>
    37ea:	81 e0       	ldi	r24, 0x01	; 1
    37ec:	60 e0       	ldi	r22, 0x00	; 0
    37ee:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <STEPPER_set_mode>
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	b6 01       	movw	r22, r12
    37f6:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <STEPPER_set_accel>
    37fa:	11 c0       	rjmp	.+34     	; 0x381e <STEPPER_move+0xa0>
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	60 e0       	ldi	r22, 0x00	; 0
    3800:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <STEPPER_set_mode>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	b7 01       	movw	r22, r14
    3808:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <STEPPER_set_accel>
    380c:	81 e0       	ldi	r24, 0x01	; 1
    380e:	b6 01       	movw	r22, r12
    3810:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <STEPPER_set_accel>
    3814:	80 e0       	ldi	r24, 0x00	; 0
    3816:	69 2d       	mov	r22, r9
    3818:	a8 01       	movw	r20, r16
    381a:	0e 94 bd 1c 	call	0x397a	; 0x397a <STEPPER_run>
    381e:	81 e0       	ldi	r24, 0x01	; 1
    3820:	68 2d       	mov	r22, r8
    3822:	a5 01       	movw	r20, r10
    3824:	0e 94 bd 1c 	call	0x397a	; 0x397a <STEPPER_run>
    3828:	42 c0       	rjmp	.+132    	; 0x38ae <STEPPER_move+0x130>
    382a:	ed b7       	in	r30, 0x3d	; 61
    382c:	fe b7       	in	r31, 0x3e	; 62
    382e:	39 97       	sbiw	r30, 0x09	; 9
    3830:	0f b6       	in	r0, 0x3f	; 63
    3832:	f8 94       	cli
    3834:	fe bf       	out	0x3e, r31	; 62
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	ed bf       	out	0x3d, r30	; 61
    383a:	6d b6       	in	r6, 0x3d	; 61
    383c:	7e b6       	in	r7, 0x3e	; 62
    383e:	08 94       	sec
    3840:	61 1c       	adc	r6, r1
    3842:	71 1c       	adc	r7, r1
    3844:	52 83       	std	Z+2, r21	; 0x02
    3846:	41 83       	std	Z+1, r20	; 0x01
    3848:	f3 01       	movw	r30, r6
    384a:	b3 82       	std	Z+3, r11	; 0x03
    384c:	a2 82       	std	Z+2, r10	; 0x02
    384e:	d5 82       	std	Z+5, r13	; 0x05
    3850:	c4 82       	std	Z+4, r12	; 0x04
    3852:	96 83       	std	Z+6, r25	; 0x06
    3854:	88 8d       	ldd	r24, Y+24	; 0x18
    3856:	99 8d       	ldd	r25, Y+25	; 0x19
    3858:	90 87       	std	Z+8, r25	; 0x08
    385a:	87 83       	std	Z+7, r24	; 0x07
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	49 2d       	mov	r20, r9
    3860:	c7 2e       	mov	r12, r23
    3862:	5d 01       	movw	r10, r26
    3864:	1a c0       	rjmp	.+52     	; 0x389a <STEPPER_move+0x11c>
    3866:	ed b7       	in	r30, 0x3d	; 61
    3868:	fe b7       	in	r31, 0x3e	; 62
    386a:	39 97       	sbiw	r30, 0x09	; 9
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	fe bf       	out	0x3e, r31	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	ed bf       	out	0x3d, r30	; 61
    3876:	ad b7       	in	r26, 0x3d	; 61
    3878:	be b7       	in	r27, 0x3e	; 62
    387a:	11 96       	adiw	r26, 0x01	; 1
    387c:	52 83       	std	Z+2, r21	; 0x02
    387e:	41 83       	std	Z+1, r20	; 0x01
    3880:	fd 01       	movw	r30, r26
    3882:	b3 82       	std	Z+3, r11	; 0x03
    3884:	a2 82       	std	Z+2, r10	; 0x02
    3886:	d5 82       	std	Z+5, r13	; 0x05
    3888:	c4 82       	std	Z+4, r12	; 0x04
    388a:	96 83       	std	Z+6, r25	; 0x06
    388c:	10 86       	std	Z+8, r1	; 0x08
    388e:	17 82       	std	Z+7, r1	; 0x07
    3890:	81 e0       	ldi	r24, 0x01	; 1
    3892:	49 2d       	mov	r20, r9
    3894:	c7 2e       	mov	r12, r23
    3896:	aa 24       	eor	r10, r10
    3898:	bb 24       	eor	r11, r11
    389a:	0e 94 02 1b 	call	0x3604	; 0x3604 <STEPPER_stepmode>
    389e:	8d b7       	in	r24, 0x3d	; 61
    38a0:	9e b7       	in	r25, 0x3e	; 62
    38a2:	09 96       	adiw	r24, 0x09	; 9
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	9e bf       	out	0x3e, r25	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	8d bf       	out	0x3d, r24	; 61
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	1f 91       	pop	r17
    38b4:	0f 91       	pop	r16
    38b6:	ff 90       	pop	r15
    38b8:	ef 90       	pop	r14
    38ba:	df 90       	pop	r13
    38bc:	cf 90       	pop	r12
    38be:	bf 90       	pop	r11
    38c0:	af 90       	pop	r10
    38c2:	9f 90       	pop	r9
    38c4:	8f 90       	pop	r8
    38c6:	7f 90       	pop	r7
    38c8:	6f 90       	pop	r6
    38ca:	08 95       	ret

000038cc <STEPPER_open>:
    38cc:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <__STEPPER_init>
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	80 93 fa 06 	sts	0x06FA, r24
    38d6:	e4 ec       	ldi	r30, 0xC4	; 196
    38d8:	f6 e0       	ldi	r31, 0x06	; 6
    38da:	11 92       	st	Z+, r1
    38dc:	11 92       	st	Z+, r1
    38de:	11 82       	std	Z+1, r1	; 0x01
    38e0:	10 82       	st	Z, r1
    38e2:	32 96       	adiw	r30, 0x02	; 2
    38e4:	11 82       	std	Z+1, r1	; 0x01
    38e6:	10 82       	st	Z, r1
    38e8:	32 96       	adiw	r30, 0x02	; 2
    38ea:	11 82       	std	Z+1, r1	; 0x01
    38ec:	10 82       	st	Z, r1
    38ee:	32 96       	adiw	r30, 0x02	; 2
    38f0:	11 82       	std	Z+1, r1	; 0x01
    38f2:	10 82       	st	Z, r1
    38f4:	32 96       	adiw	r30, 0x02	; 2
    38f6:	11 82       	std	Z+1, r1	; 0x01
    38f8:	10 82       	st	Z, r1
    38fa:	32 96       	adiw	r30, 0x02	; 2
    38fc:	11 82       	std	Z+1, r1	; 0x01
    38fe:	10 82       	st	Z, r1
    3900:	32 96       	adiw	r30, 0x02	; 2
    3902:	11 82       	std	Z+1, r1	; 0x01
    3904:	10 82       	st	Z, r1
    3906:	32 96       	adiw	r30, 0x02	; 2
    3908:	11 82       	std	Z+1, r1	; 0x01
    390a:	10 82       	st	Z, r1
    390c:	32 96       	adiw	r30, 0x02	; 2
    390e:	11 82       	std	Z+1, r1	; 0x01
    3910:	10 82       	st	Z, r1
    3912:	32 96       	adiw	r30, 0x02	; 2
    3914:	11 82       	std	Z+1, r1	; 0x01
    3916:	10 82       	st	Z, r1
    3918:	32 96       	adiw	r30, 0x02	; 2
    391a:	11 82       	std	Z+1, r1	; 0x01
    391c:	10 82       	st	Z, r1
    391e:	32 96       	adiw	r30, 0x02	; 2
    3920:	11 82       	std	Z+1, r1	; 0x01
    3922:	10 82       	st	Z, r1
    3924:	36 96       	adiw	r30, 0x06	; 6
    3926:	11 92       	st	Z+, r1
    3928:	11 92       	st	Z+, r1
    392a:	11 92       	st	Z+, r1
    392c:	10 82       	st	Z, r1
    392e:	32 96       	adiw	r30, 0x02	; 2
    3930:	11 92       	st	Z+, r1
    3932:	11 92       	st	Z+, r1
    3934:	11 92       	st	Z+, r1
    3936:	11 92       	st	Z+, r1
    3938:	11 92       	st	Z+, r1
    393a:	11 92       	st	Z+, r1
    393c:	11 92       	st	Z+, r1
    393e:	11 82       	std	Z+1, r1	; 0x01
    3940:	10 82       	st	Z, r1
    3942:	32 96       	adiw	r30, 0x02	; 2
    3944:	11 82       	std	Z+1, r1	; 0x01
    3946:	10 82       	st	Z, r1
    3948:	32 96       	adiw	r30, 0x02	; 2
    394a:	11 82       	std	Z+1, r1	; 0x01
    394c:	10 82       	st	Z, r1
    394e:	32 96       	adiw	r30, 0x02	; 2
    3950:	11 82       	std	Z+1, r1	; 0x01
    3952:	10 82       	st	Z, r1
    3954:	76 97       	sbiw	r30, 0x16	; 22
    3956:	11 82       	std	Z+1, r1	; 0x01
    3958:	10 82       	st	Z, r1
    395a:	32 96       	adiw	r30, 0x02	; 2
    395c:	11 82       	std	Z+1, r1	; 0x01
    395e:	10 82       	st	Z, r1
    3960:	10 92 f9 06 	sts	0x06F9, r1
    3964:	10 92 f8 06 	sts	0x06F8, r1
    3968:	10 92 fa 06 	sts	0x06FA, r1
    396c:	87 e0       	ldi	r24, 0x07	; 7
    396e:	61 e0       	ldi	r22, 0x01	; 1
    3970:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    3974:	87 e0       	ldi	r24, 0x07	; 7
    3976:	91 e0       	ldi	r25, 0x01	; 1
    3978:	08 95       	ret

0000397a <STEPPER_run>:
    397a:	ef 92       	push	r14
    397c:	ff 92       	push	r15
    397e:	0f 93       	push	r16
    3980:	1f 93       	push	r17
    3982:	18 2f       	mov	r17, r24
    3984:	06 2f       	mov	r16, r22
    3986:	7a 01       	movw	r14, r20
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <STEPPER_set_mode>
    398e:	81 2f       	mov	r24, r17
    3990:	60 2f       	mov	r22, r16
    3992:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <STEPPER_set_dir>
    3996:	81 2f       	mov	r24, r17
    3998:	b7 01       	movw	r22, r14
    399a:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <STEPPER_set_speed>
    399e:	1f 91       	pop	r17
    39a0:	0f 91       	pop	r16
    39a2:	ff 90       	pop	r15
    39a4:	ef 90       	pop	r14
    39a6:	08 95       	ret

000039a8 <STEPPER_set_accel>:
    39a8:	48 2f       	mov	r20, r24
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	80 93 fa 06 	sts	0x06FA, r24
    39b0:	cb 01       	movw	r24, r22
    39b2:	23 e0       	ldi	r18, 0x03	; 3
    39b4:	69 3e       	cpi	r22, 0xE9	; 233
    39b6:	72 07       	cpc	r23, r18
    39b8:	10 f0       	brcs	.+4      	; 0x39be <STEPPER_set_accel+0x16>
    39ba:	88 ee       	ldi	r24, 0xE8	; 232
    39bc:	93 e0       	ldi	r25, 0x03	; 3
    39be:	41 30       	cpi	r20, 0x01	; 1
    39c0:	71 f0       	breq	.+28     	; 0x39de <STEPPER_set_accel+0x36>
    39c2:	41 30       	cpi	r20, 0x01	; 1
    39c4:	18 f0       	brcs	.+6      	; 0x39cc <STEPPER_set_accel+0x24>
    39c6:	42 30       	cpi	r20, 0x02	; 2
    39c8:	71 f4       	brne	.+28     	; 0x39e6 <STEPPER_set_accel+0x3e>
    39ca:	05 c0       	rjmp	.+10     	; 0x39d6 <STEPPER_set_accel+0x2e>
    39cc:	90 93 cf 06 	sts	0x06CF, r25
    39d0:	80 93 ce 06 	sts	0x06CE, r24
    39d4:	08 c0       	rjmp	.+16     	; 0x39e6 <STEPPER_set_accel+0x3e>
    39d6:	90 93 cf 06 	sts	0x06CF, r25
    39da:	80 93 ce 06 	sts	0x06CE, r24
    39de:	90 93 d1 06 	sts	0x06D1, r25
    39e2:	80 93 d0 06 	sts	0x06D0, r24
    39e6:	10 92 fa 06 	sts	0x06FA, r1
    39ea:	08 95       	ret

000039ec <STEPPER_set_dir>:
    39ec:	98 2f       	mov	r25, r24
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	80 93 fa 06 	sts	0x06FA, r24
    39f4:	91 30       	cpi	r25, 0x01	; 1
    39f6:	51 f0       	breq	.+20     	; 0x3a0c <STEPPER_set_dir+0x20>
    39f8:	91 30       	cpi	r25, 0x01	; 1
    39fa:	18 f0       	brcs	.+6      	; 0x3a02 <STEPPER_set_dir+0x16>
    39fc:	92 30       	cpi	r25, 0x02	; 2
    39fe:	41 f4       	brne	.+16     	; 0x3a10 <STEPPER_set_dir+0x24>
    3a00:	03 c0       	rjmp	.+6      	; 0x3a08 <STEPPER_set_dir+0x1c>
    3a02:	60 93 e7 06 	sts	0x06E7, r22
    3a06:	04 c0       	rjmp	.+8      	; 0x3a10 <STEPPER_set_dir+0x24>
    3a08:	60 93 e7 06 	sts	0x06E7, r22
    3a0c:	60 93 e8 06 	sts	0x06E8, r22
    3a10:	10 92 fa 06 	sts	0x06FA, r1
    3a14:	08 95       	ret

00003a16 <STEPPER_set_mode>:
    3a16:	98 2f       	mov	r25, r24
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	80 93 fa 06 	sts	0x06FA, r24
    3a1e:	91 30       	cpi	r25, 0x01	; 1
    3a20:	51 f0       	breq	.+20     	; 0x3a36 <STEPPER_set_mode+0x20>
    3a22:	91 30       	cpi	r25, 0x01	; 1
    3a24:	18 f0       	brcs	.+6      	; 0x3a2c <STEPPER_set_mode+0x16>
    3a26:	92 30       	cpi	r25, 0x02	; 2
    3a28:	41 f4       	brne	.+16     	; 0x3a3a <STEPPER_set_mode+0x24>
    3a2a:	03 c0       	rjmp	.+6      	; 0x3a32 <STEPPER_set_mode+0x1c>
    3a2c:	60 93 c4 06 	sts	0x06C4, r22
    3a30:	04 c0       	rjmp	.+8      	; 0x3a3a <STEPPER_set_mode+0x24>
    3a32:	60 93 c4 06 	sts	0x06C4, r22
    3a36:	60 93 c5 06 	sts	0x06C5, r22
    3a3a:	10 92 fa 06 	sts	0x06FA, r1
    3a3e:	08 95       	ret

00003a40 <STEPPER_set_speed>:
    3a40:	48 2f       	mov	r20, r24
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	80 93 fa 06 	sts	0x06FA, r24
    3a48:	cb 01       	movw	r24, r22
    3a4a:	21 e0       	ldi	r18, 0x01	; 1
    3a4c:	61 39       	cpi	r22, 0x91	; 145
    3a4e:	72 07       	cpc	r23, r18
    3a50:	10 f0       	brcs	.+4      	; 0x3a56 <STEPPER_set_speed+0x16>
    3a52:	80 e9       	ldi	r24, 0x90	; 144
    3a54:	91 e0       	ldi	r25, 0x01	; 1
    3a56:	41 30       	cpi	r20, 0x01	; 1
    3a58:	71 f0       	breq	.+28     	; 0x3a76 <STEPPER_set_speed+0x36>
    3a5a:	41 30       	cpi	r20, 0x01	; 1
    3a5c:	18 f0       	brcs	.+6      	; 0x3a64 <STEPPER_set_speed+0x24>
    3a5e:	42 30       	cpi	r20, 0x02	; 2
    3a60:	71 f4       	brne	.+28     	; 0x3a7e <STEPPER_set_speed+0x3e>
    3a62:	05 c0       	rjmp	.+10     	; 0x3a6e <STEPPER_set_speed+0x2e>
    3a64:	90 93 c7 06 	sts	0x06C7, r25
    3a68:	80 93 c6 06 	sts	0x06C6, r24
    3a6c:	08 c0       	rjmp	.+16     	; 0x3a7e <STEPPER_set_speed+0x3e>
    3a6e:	90 93 c7 06 	sts	0x06C7, r25
    3a72:	80 93 c6 06 	sts	0x06C6, r24
    3a76:	90 93 c9 06 	sts	0x06C9, r25
    3a7a:	80 93 c8 06 	sts	0x06C8, r24
    3a7e:	10 92 fa 06 	sts	0x06FA, r1
    3a82:	08 95       	ret

00003a84 <STEPPER_set_steps>:
    3a84:	98 2f       	mov	r25, r24
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	80 93 fa 06 	sts	0x06FA, r24
    3a8c:	91 30       	cpi	r25, 0x01	; 1
    3a8e:	71 f0       	breq	.+28     	; 0x3aac <STEPPER_set_steps+0x28>
    3a90:	91 30       	cpi	r25, 0x01	; 1
    3a92:	18 f0       	brcs	.+6      	; 0x3a9a <STEPPER_set_steps+0x16>
    3a94:	92 30       	cpi	r25, 0x02	; 2
    3a96:	71 f4       	brne	.+28     	; 0x3ab4 <STEPPER_set_steps+0x30>
    3a98:	05 c0       	rjmp	.+10     	; 0x3aa4 <STEPPER_set_steps+0x20>
    3a9a:	70 93 d7 06 	sts	0x06D7, r23
    3a9e:	60 93 d6 06 	sts	0x06D6, r22
    3aa2:	08 c0       	rjmp	.+16     	; 0x3ab4 <STEPPER_set_steps+0x30>
    3aa4:	70 93 d7 06 	sts	0x06D7, r23
    3aa8:	60 93 d6 06 	sts	0x06D6, r22
    3aac:	70 93 d9 06 	sts	0x06D9, r23
    3ab0:	60 93 d8 06 	sts	0x06D8, r22
    3ab4:	10 92 fa 06 	sts	0x06FA, r1
    3ab8:	08 95       	ret

00003aba <STEPPER_step>:
    3aba:	8f 92       	push	r8
    3abc:	9f 92       	push	r9
    3abe:	af 92       	push	r10
    3ac0:	bf 92       	push	r11
    3ac2:	cf 92       	push	r12
    3ac4:	df 92       	push	r13
    3ac6:	ef 92       	push	r14
    3ac8:	ff 92       	push	r15
    3aca:	0f 93       	push	r16
    3acc:	1f 93       	push	r17
    3ace:	cf 93       	push	r28
    3ad0:	df 93       	push	r29
    3ad2:	18 2f       	mov	r17, r24
    3ad4:	f6 2e       	mov	r15, r22
    3ad6:	5a 01       	movw	r10, r20
    3ad8:	49 01       	movw	r8, r18
    3ada:	e6 01       	movw	r28, r12
    3adc:	61 e0       	ldi	r22, 0x01	; 1
    3ade:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <STEPPER_set_mode>
    3ae2:	81 2f       	mov	r24, r17
    3ae4:	b5 01       	movw	r22, r10
    3ae6:	a4 01       	movw	r20, r8
    3ae8:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <STEPPER_setup_decels>
    3aec:	81 2f       	mov	r24, r17
    3aee:	6f 2d       	mov	r22, r15
    3af0:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <STEPPER_set_dir>
    3af4:	81 2f       	mov	r24, r17
    3af6:	60 2f       	mov	r22, r16
    3af8:	0e 94 fa 25 	call	0x4bf4	; 0x4bf4 <STEPPER_set_stop_mode>
    3afc:	81 2f       	mov	r24, r17
    3afe:	b5 01       	movw	r22, r10
    3b00:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <STEPPER_set_steps>
    3b04:	c1 14       	cp	r12, r1
    3b06:	d1 04       	cpc	r13, r1
    3b08:	99 f0       	breq	.+38     	; 0x3b30 <STEPPER_step+0x76>
    3b0a:	11 30       	cpi	r17, 0x01	; 1
    3b0c:	49 f0       	breq	.+18     	; 0x3b20 <STEPPER_step+0x66>
    3b0e:	11 30       	cpi	r17, 0x01	; 1
    3b10:	18 f0       	brcs	.+6      	; 0x3b18 <STEPPER_step+0x5e>
    3b12:	12 30       	cpi	r17, 0x02	; 2
    3b14:	69 f4       	brne	.+26     	; 0x3b30 <STEPPER_step+0x76>
    3b16:	06 c0       	rjmp	.+12     	; 0x3b24 <STEPPER_step+0x6a>
    3b18:	18 82       	st	Y, r1
    3b1a:	10 92 f6 06 	sts	0x06F6, r1
    3b1e:	08 c0       	rjmp	.+16     	; 0x3b30 <STEPPER_step+0x76>
    3b20:	19 82       	std	Y+1, r1	; 0x01
    3b22:	04 c0       	rjmp	.+8      	; 0x3b2c <STEPPER_step+0x72>
    3b24:	18 82       	st	Y, r1
    3b26:	19 82       	std	Y+1, r1	; 0x01
    3b28:	10 92 f6 06 	sts	0x06F6, r1
    3b2c:	10 92 f7 06 	sts	0x06F7, r1
    3b30:	d0 93 f9 06 	sts	0x06F9, r29
    3b34:	c0 93 f8 06 	sts	0x06F8, r28
    3b38:	ee 20       	and	r14, r14
    3b3a:	b9 f5       	brne	.+110    	; 0x3baa <STEPPER_step+0xf0>
    3b3c:	8a e9       	ldi	r24, 0x9A	; 154
    3b3e:	93 e0       	ldi	r25, 0x03	; 3
    3b40:	90 93 f9 06 	sts	0x06F9, r25
    3b44:	80 93 f8 06 	sts	0x06F8, r24
    3b48:	81 2f       	mov	r24, r17
    3b4a:	b4 01       	movw	r22, r8
    3b4c:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <STEPPER_set_speed>
    3b50:	81 2f       	mov	r24, r17
    3b52:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <STEPPER_go>
    3b56:	11 30       	cpi	r17, 0x01	; 1
    3b58:	71 f0       	breq	.+28     	; 0x3b76 <STEPPER_step+0xbc>
    3b5a:	11 30       	cpi	r17, 0x01	; 1
    3b5c:	18 f0       	brcs	.+6      	; 0x3b64 <STEPPER_step+0xaa>
    3b5e:	12 30       	cpi	r17, 0x02	; 2
    3b60:	59 f5       	brne	.+86     	; 0x3bb8 <STEPPER_step+0xfe>
    3b62:	12 c0       	rjmp	.+36     	; 0x3b88 <STEPPER_step+0xce>
    3b64:	10 92 9a 03 	sts	0x039A, r1
    3b68:	10 92 f6 06 	sts	0x06F6, r1
    3b6c:	80 91 9a 03 	lds	r24, 0x039A
    3b70:	88 23       	and	r24, r24
    3b72:	e1 f3       	breq	.-8      	; 0x3b6c <STEPPER_step+0xb2>
    3b74:	21 c0       	rjmp	.+66     	; 0x3bb8 <STEPPER_step+0xfe>
    3b76:	10 92 9b 03 	sts	0x039B, r1
    3b7a:	10 92 f7 06 	sts	0x06F7, r1
    3b7e:	80 91 9b 03 	lds	r24, 0x039B
    3b82:	88 23       	and	r24, r24
    3b84:	e1 f3       	breq	.-8      	; 0x3b7e <STEPPER_step+0xc4>
    3b86:	18 c0       	rjmp	.+48     	; 0x3bb8 <STEPPER_step+0xfe>
    3b88:	10 92 9a 03 	sts	0x039A, r1
    3b8c:	10 92 9b 03 	sts	0x039B, r1
    3b90:	10 92 f6 06 	sts	0x06F6, r1
    3b94:	10 92 f7 06 	sts	0x06F7, r1
    3b98:	80 91 9a 03 	lds	r24, 0x039A
    3b9c:	88 23       	and	r24, r24
    3b9e:	e1 f3       	breq	.-8      	; 0x3b98 <STEPPER_step+0xde>
    3ba0:	80 91 9b 03 	lds	r24, 0x039B
    3ba4:	88 23       	and	r24, r24
    3ba6:	c1 f3       	breq	.-16     	; 0x3b98 <STEPPER_step+0xde>
    3ba8:	07 c0       	rjmp	.+14     	; 0x3bb8 <STEPPER_step+0xfe>
    3baa:	81 2f       	mov	r24, r17
    3bac:	b4 01       	movw	r22, r8
    3bae:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <STEPPER_set_speed>
    3bb2:	81 2f       	mov	r24, r17
    3bb4:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <STEPPER_go>
    3bb8:	df 91       	pop	r29
    3bba:	cf 91       	pop	r28
    3bbc:	1f 91       	pop	r17
    3bbe:	0f 91       	pop	r16
    3bc0:	ff 90       	pop	r15
    3bc2:	ef 90       	pop	r14
    3bc4:	df 90       	pop	r13
    3bc6:	cf 90       	pop	r12
    3bc8:	bf 90       	pop	r11
    3bca:	af 90       	pop	r10
    3bcc:	9f 90       	pop	r9
    3bce:	8f 90       	pop	r8
    3bd0:	08 95       	ret

00003bd2 <STEPPER_stop>:
    3bd2:	0f 93       	push	r16
    3bd4:	1f 93       	push	r17
    3bd6:	18 2f       	mov	r17, r24
    3bd8:	06 2f       	mov	r16, r22
    3bda:	66 23       	and	r22, r22
    3bdc:	49 f4       	brne	.+18     	; 0x3bf0 <STEPPER_stop+0x1e>
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	70 e0       	ldi	r23, 0x00	; 0
    3be2:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <STEPPER_set_speed>
    3be6:	81 2f       	mov	r24, r17
    3be8:	60 e0       	ldi	r22, 0x00	; 0
    3bea:	70 e0       	ldi	r23, 0x00	; 0
    3bec:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <STEPPER_set_steps>
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	80 93 fa 06 	sts	0x06FA, r24
    3bf6:	11 30       	cpi	r17, 0x01	; 1
    3bf8:	51 f0       	breq	.+20     	; 0x3c0e <STEPPER_stop+0x3c>
    3bfa:	11 30       	cpi	r17, 0x01	; 1
    3bfc:	18 f0       	brcs	.+6      	; 0x3c04 <STEPPER_stop+0x32>
    3bfe:	12 30       	cpi	r17, 0x02	; 2
    3c00:	41 f4       	brne	.+16     	; 0x3c12 <STEPPER_stop+0x40>
    3c02:	03 c0       	rjmp	.+6      	; 0x3c0a <STEPPER_stop+0x38>
    3c04:	00 93 e2 06 	sts	0x06E2, r16
    3c08:	04 c0       	rjmp	.+8      	; 0x3c12 <STEPPER_stop+0x40>
    3c0a:	00 93 e2 06 	sts	0x06E2, r16
    3c0e:	00 93 e3 06 	sts	0x06E3, r16
    3c12:	10 92 fa 06 	sts	0x06FA, r1
    3c16:	1f 91       	pop	r17
    3c18:	0f 91       	pop	r16
    3c1a:	08 95       	ret

00003c1c <STEPPER_wait_and_then>:
    3c1c:	cf 92       	push	r12
    3c1e:	df 92       	push	r13
    3c20:	ef 92       	push	r14
    3c22:	ff 92       	push	r15
    3c24:	0f 93       	push	r16
    3c26:	1f 93       	push	r17
    3c28:	df 93       	push	r29
    3c2a:	cf 93       	push	r28
    3c2c:	cd b7       	in	r28, 0x3d	; 61
    3c2e:	de b7       	in	r29, 0x3e	; 62
    3c30:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c32:	81 30       	cpi	r24, 0x01	; 1
    3c34:	61 f0       	breq	.+24     	; 0x3c4e <STEPPER_wait_and_then+0x32>
    3c36:	81 30       	cpi	r24, 0x01	; 1
    3c38:	18 f0       	brcs	.+6      	; 0x3c40 <STEPPER_wait_and_then+0x24>
    3c3a:	82 30       	cpi	r24, 0x02	; 2
    3c3c:	a1 f5       	brne	.+104    	; 0x3ca6 <STEPPER_wait_and_then+0x8a>
    3c3e:	11 c0       	rjmp	.+34     	; 0x3c62 <STEPPER_wait_and_then+0x46>
    3c40:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c42:	fd 85       	ldd	r31, Y+13	; 0x0d
    3c44:	80 91 fb 06 	lds	r24, 0x06FB
    3c48:	88 23       	and	r24, r24
    3c4a:	e1 f3       	breq	.-8      	; 0x3c44 <STEPPER_wait_and_then+0x28>
    3c4c:	06 c0       	rjmp	.+12     	; 0x3c5a <STEPPER_wait_and_then+0x3e>
    3c4e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c50:	fd 85       	ldd	r31, Y+13	; 0x0d
    3c52:	80 91 fc 06 	lds	r24, 0x06FC
    3c56:	88 23       	and	r24, r24
    3c58:	e1 f3       	breq	.-8      	; 0x3c52 <STEPPER_wait_and_then+0x36>
    3c5a:	30 97       	sbiw	r30, 0x00	; 0
    3c5c:	21 f1       	breq	.+72     	; 0x3ca6 <STEPPER_wait_and_then+0x8a>
    3c5e:	09 95       	icall
    3c60:	22 c0       	rjmp	.+68     	; 0x3ca6 <STEPPER_wait_and_then+0x8a>
    3c62:	cc 84       	ldd	r12, Y+12	; 0x0c
    3c64:	dd 84       	ldd	r13, Y+13	; 0x0d
    3c66:	ee 84       	ldd	r14, Y+14	; 0x0e
    3c68:	ff 84       	ldd	r15, Y+15	; 0x0f
    3c6a:	00 e0       	ldi	r16, 0x00	; 0
    3c6c:	10 e0       	ldi	r17, 0x00	; 0
    3c6e:	00 23       	and	r16, r16
    3c70:	51 f4       	brne	.+20     	; 0x3c86 <STEPPER_wait_and_then+0x6a>
    3c72:	80 91 fb 06 	lds	r24, 0x06FB
    3c76:	88 23       	and	r24, r24
    3c78:	31 f0       	breq	.+12     	; 0x3c86 <STEPPER_wait_and_then+0x6a>
    3c7a:	c1 14       	cp	r12, r1
    3c7c:	d1 04       	cpc	r13, r1
    3c7e:	11 f0       	breq	.+4      	; 0x3c84 <STEPPER_wait_and_then+0x68>
    3c80:	f6 01       	movw	r30, r12
    3c82:	09 95       	icall
    3c84:	01 e0       	ldi	r16, 0x01	; 1
    3c86:	11 23       	and	r17, r17
    3c88:	51 f4       	brne	.+20     	; 0x3c9e <STEPPER_wait_and_then+0x82>
    3c8a:	80 91 fc 06 	lds	r24, 0x06FC
    3c8e:	88 23       	and	r24, r24
    3c90:	31 f0       	breq	.+12     	; 0x3c9e <STEPPER_wait_and_then+0x82>
    3c92:	e1 14       	cp	r14, r1
    3c94:	f1 04       	cpc	r15, r1
    3c96:	11 f0       	breq	.+4      	; 0x3c9c <STEPPER_wait_and_then+0x80>
    3c98:	f7 01       	movw	r30, r14
    3c9a:	09 95       	icall
    3c9c:	11 e0       	ldi	r17, 0x01	; 1
    3c9e:	00 23       	and	r16, r16
    3ca0:	31 f3       	breq	.-52     	; 0x3c6e <STEPPER_wait_and_then+0x52>
    3ca2:	11 23       	and	r17, r17
    3ca4:	21 f3       	breq	.-56     	; 0x3c6e <STEPPER_wait_and_then+0x52>
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	1f 91       	pop	r17
    3cac:	0f 91       	pop	r16
    3cae:	ff 90       	pop	r15
    3cb0:	ef 90       	pop	r14
    3cb2:	df 90       	pop	r13
    3cb4:	cf 90       	pop	r12
    3cb6:	08 95       	ret

00003cb8 <SYS_get_state>:
    3cb8:	e8 2f       	mov	r30, r24
    3cba:	f0 e0       	ldi	r31, 0x00	; 0
    3cbc:	e3 31       	cpi	r30, 0x13	; 19
    3cbe:	f1 05       	cpc	r31, r1
    3cc0:	40 f4       	brcc	.+16     	; 0x3cd2 <SYS_get_state+0x1a>
    3cc2:	e2 5c       	subi	r30, 0xC2	; 194
    3cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc6:	ee 0f       	add	r30, r30
    3cc8:	ff 1f       	adc	r31, r31
    3cca:	05 90       	lpm	r0, Z+
    3ccc:	f4 91       	lpm	r31, Z+
    3cce:	e0 2d       	mov	r30, r0
    3cd0:	09 94       	ijmp
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	08 95       	ret
    3cd6:	80 91 fd 06 	lds	r24, 0x06FD
    3cda:	08 95       	ret
    3cdc:	80 91 fe 06 	lds	r24, 0x06FE
    3ce0:	08 95       	ret
    3ce2:	80 91 ff 06 	lds	r24, 0x06FF
    3ce6:	08 95       	ret
    3ce8:	80 91 00 07 	lds	r24, 0x0700
    3cec:	08 95       	ret
    3cee:	80 91 01 07 	lds	r24, 0x0701
    3cf2:	08 95       	ret
    3cf4:	80 91 03 07 	lds	r24, 0x0703
    3cf8:	08 95       	ret
    3cfa:	80 91 02 07 	lds	r24, 0x0702
    3cfe:	08 95       	ret
    3d00:	80 91 04 07 	lds	r24, 0x0704
    3d04:	08 95       	ret
    3d06:	80 91 05 07 	lds	r24, 0x0705
    3d0a:	08 95       	ret
    3d0c:	80 91 06 07 	lds	r24, 0x0706
    3d10:	08 95       	ret
    3d12:	80 91 07 07 	lds	r24, 0x0707
    3d16:	08 95       	ret
    3d18:	80 91 08 07 	lds	r24, 0x0708
    3d1c:	08 95       	ret
    3d1e:	80 91 09 07 	lds	r24, 0x0709
    3d22:	08 95       	ret
    3d24:	80 91 0a 07 	lds	r24, 0x070A
    3d28:	08 95       	ret
    3d2a:	80 91 0b 07 	lds	r24, 0x070B
    3d2e:	08 95       	ret
    3d30:	80 91 0c 07 	lds	r24, 0x070C
    3d34:	08 95       	ret
    3d36:	80 91 0d 07 	lds	r24, 0x070D
    3d3a:	08 95       	ret
    3d3c:	80 91 0e 07 	lds	r24, 0x070E
    3d40:	08 95       	ret
    3d42:	80 91 0f 07 	lds	r24, 0x070F
    3d46:	08 95       	ret

00003d48 <SYS_set_state>:
    3d48:	e8 2f       	mov	r30, r24
    3d4a:	f0 e0       	ldi	r31, 0x00	; 0
    3d4c:	e3 31       	cpi	r30, 0x13	; 19
    3d4e:	f1 05       	cpc	r31, r1
    3d50:	08 f0       	brcs	.+2      	; 0x3d54 <SYS_set_state+0xc>
    3d52:	40 c0       	rjmp	.+128    	; 0x3dd4 <SYS_set_state+0x8c>
    3d54:	ef 5a       	subi	r30, 0xAF	; 175
    3d56:	ff 4f       	sbci	r31, 0xFF	; 255
    3d58:	ee 0f       	add	r30, r30
    3d5a:	ff 1f       	adc	r31, r31
    3d5c:	05 90       	lpm	r0, Z+
    3d5e:	f4 91       	lpm	r31, Z+
    3d60:	e0 2d       	mov	r30, r0
    3d62:	09 94       	ijmp
    3d64:	60 93 fd 06 	sts	0x06FD, r22
    3d68:	08 95       	ret
    3d6a:	60 93 fe 06 	sts	0x06FE, r22
    3d6e:	08 95       	ret
    3d70:	60 93 ff 06 	sts	0x06FF, r22
    3d74:	08 95       	ret
    3d76:	60 93 00 07 	sts	0x0700, r22
    3d7a:	08 95       	ret
    3d7c:	60 93 01 07 	sts	0x0701, r22
    3d80:	08 95       	ret
    3d82:	60 93 03 07 	sts	0x0703, r22
    3d86:	08 95       	ret
    3d88:	60 93 02 07 	sts	0x0702, r22
    3d8c:	08 95       	ret
    3d8e:	60 93 04 07 	sts	0x0704, r22
    3d92:	08 95       	ret
    3d94:	60 93 05 07 	sts	0x0705, r22
    3d98:	08 95       	ret
    3d9a:	60 93 06 07 	sts	0x0706, r22
    3d9e:	08 95       	ret
    3da0:	60 93 07 07 	sts	0x0707, r22
    3da4:	08 95       	ret
    3da6:	60 93 08 07 	sts	0x0708, r22
    3daa:	08 95       	ret
    3dac:	60 93 09 07 	sts	0x0709, r22
    3db0:	08 95       	ret
    3db2:	60 93 0a 07 	sts	0x070A, r22
    3db6:	08 95       	ret
    3db8:	60 93 0b 07 	sts	0x070B, r22
    3dbc:	08 95       	ret
    3dbe:	60 93 0c 07 	sts	0x070C, r22
    3dc2:	08 95       	ret
    3dc4:	60 93 0d 07 	sts	0x070D, r22
    3dc8:	08 95       	ret
    3dca:	60 93 0e 07 	sts	0x070E, r22
    3dce:	08 95       	ret
    3dd0:	60 93 0d 07 	sts	0x070D, r22
    3dd4:	08 95       	ret

00003dd6 <ATTINY_get_sensors>:
    3dd6:	0f 93       	push	r16
    3dd8:	1f 93       	push	r17
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    3de0:	81 30       	cpi	r24, 0x01	; 1
    3de2:	11 f0       	breq	.+4      	; 0x3de8 <ATTINY_get_sensors+0x12>
    3de4:	00 e0       	ldi	r16, 0x00	; 0
    3de6:	24 c0       	rjmp	.+72     	; 0x3e30 <ATTINY_get_sensors+0x5a>
    3de8:	87 e0       	ldi	r24, 0x07	; 7
    3dea:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <SPI_set_slave_addr>
    3dee:	82 e0       	ldi	r24, 0x02	; 2
    3df0:	6a e0       	ldi	r22, 0x0A	; 10
    3df2:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SPI_transmit>
    3df6:	82 e0       	ldi	r24, 0x02	; 2
    3df8:	62 eb       	ldi	r22, 0xB2	; 178
    3dfa:	0e 94 4a 1a 	call	0x3494	; 0x3494 <SPI_transmit>
    3dfe:	18 ec       	ldi	r17, 0xC8	; 200
    3e00:	81 2f       	mov	r24, r17
    3e02:	8a 95       	dec	r24
    3e04:	f1 f7       	brne	.-4      	; 0x3e02 <ATTINY_get_sensors+0x2c>
    3e06:	82 e0       	ldi	r24, 0x02	; 2
    3e08:	60 e0       	ldi	r22, 0x00	; 0
    3e0a:	0e 94 c6 24 	call	0x498c	; 0x498c <SPI_receive>
    3e0e:	08 2f       	mov	r16, r24
    3e10:	81 2f       	mov	r24, r17
    3e12:	8a 95       	dec	r24
    3e14:	f1 f7       	brne	.-4      	; 0x3e12 <ATTINY_get_sensors+0x3c>
    3e16:	82 e0       	ldi	r24, 0x02	; 2
    3e18:	60 e0       	ldi	r22, 0x00	; 0
    3e1a:	0e 94 c6 24 	call	0x498c	; 0x498c <SPI_receive>
    3e1e:	1a 95       	dec	r17
    3e20:	f1 f7       	brne	.-4      	; 0x3e1e <ATTINY_get_sensors+0x48>
    3e22:	87 e0       	ldi	r24, 0x07	; 7
    3e24:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <SPI_set_slave_addr>
    3e28:	88 e8       	ldi	r24, 0x88	; 136
    3e2a:	93 e1       	ldi	r25, 0x13	; 19
    3e2c:	01 97       	sbiw	r24, 0x01	; 1
    3e2e:	f1 f7       	brne	.-4      	; 0x3e2c <ATTINY_get_sensors+0x56>
    3e30:	80 2f       	mov	r24, r16
    3e32:	1f 91       	pop	r17
    3e34:	0f 91       	pop	r16
    3e36:	08 95       	ret

00003e38 <ATTINY_get_SW_state>:
    3e38:	1f 93       	push	r17
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	18 2f       	mov	r17, r24
    3e40:	80 91 9d 03 	lds	r24, 0x039D
    3e44:	88 23       	and	r24, r24
    3e46:	41 f0       	breq	.+16     	; 0x3e58 <ATTINY_get_SW_state+0x20>
    3e48:	80 91 a7 03 	lds	r24, 0x03A7
    3e4c:	88 23       	and	r24, r24
    3e4e:	99 f0       	breq	.+38     	; 0x3e76 <ATTINY_get_SW_state+0x3e>
    3e50:	10 92 9d 03 	sts	0x039D, r1
    3e54:	10 92 a7 03 	sts	0x03A7, r1
    3e58:	0e 94 eb 1e 	call	0x3dd6	; 0x3dd6 <ATTINY_get_sensors>
    3e5c:	80 93 9c 03 	sts	0x039C, r24
    3e60:	81 ea       	ldi	r24, 0xA1	; 161
    3e62:	93 e0       	ldi	r25, 0x03	; 3
    3e64:	61 e0       	ldi	r22, 0x01	; 1
    3e66:	40 e0       	ldi	r20, 0x00	; 0
    3e68:	22 e3       	ldi	r18, 0x32	; 50
    3e6a:	30 e0       	ldi	r19, 0x00	; 0
    3e6c:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <TMRSRVC_new>
    3e70:	81 e0       	ldi	r24, 0x01	; 1
    3e72:	80 93 9d 03 	sts	0x039D, r24
    3e76:	90 91 9c 03 	lds	r25, 0x039C
    3e7a:	a1 2f       	mov	r26, r17
    3e7c:	b0 e0       	ldi	r27, 0x00	; 0
    3e7e:	ed 01       	movw	r28, r26
    3e80:	c9 5c       	subi	r28, 0xC9	; 201
    3e82:	dc 4f       	sbci	r29, 0xFC	; 252
    3e84:	88 81       	ld	r24, Y
    3e86:	88 23       	and	r24, r24
    3e88:	69 f0       	breq	.+26     	; 0x3ea4 <ATTINY_get_SW_state+0x6c>
    3e8a:	fd 01       	movw	r30, r26
    3e8c:	e6 5c       	subi	r30, 0xC6	; 198
    3e8e:	fc 4f       	sbci	r31, 0xFC	; 252
    3e90:	80 81       	ld	r24, Z
    3e92:	98 23       	and	r25, r24
    3e94:	c1 f0       	breq	.+48     	; 0x3ec6 <ATTINY_get_SW_state+0x8e>
    3e96:	fd 01       	movw	r30, r26
    3e98:	e2 56       	subi	r30, 0x62	; 98
    3e9a:	fc 4f       	sbci	r31, 0xFC	; 252
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	80 83       	st	Z, r24
    3ea0:	18 82       	st	Y, r1
    3ea2:	11 c0       	rjmp	.+34     	; 0x3ec6 <ATTINY_get_SW_state+0x8e>
    3ea4:	fd 01       	movw	r30, r26
    3ea6:	e2 56       	subi	r30, 0x62	; 98
    3ea8:	fc 4f       	sbci	r31, 0xFC	; 252
    3eaa:	80 81       	ld	r24, Z
    3eac:	81 11       	cpse	r24, r1
    3eae:	10 82       	st	Z, r1
    3eb0:	fd 01       	movw	r30, r26
    3eb2:	e6 5c       	subi	r30, 0xC6	; 198
    3eb4:	fc 4f       	sbci	r31, 0xFC	; 252
    3eb6:	80 81       	ld	r24, Z
    3eb8:	98 23       	and	r25, r24
    3eba:	29 f4       	brne	.+10     	; 0x3ec6 <ATTINY_get_SW_state+0x8e>
    3ebc:	fd 01       	movw	r30, r26
    3ebe:	e9 5c       	subi	r30, 0xC9	; 201
    3ec0:	fc 4f       	sbci	r31, 0xFC	; 252
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	80 83       	st	Z, r24
    3ec6:	a2 56       	subi	r26, 0x62	; 98
    3ec8:	bc 4f       	sbci	r27, 0xFC	; 252
    3eca:	8c 91       	ld	r24, X
    3ecc:	df 91       	pop	r29
    3ece:	cf 91       	pop	r28
    3ed0:	1f 91       	pop	r17
    3ed2:	08 95       	ret

00003ed4 <ATTINY_open>:
    3ed4:	82 e0       	ldi	r24, 0x02	; 2
    3ed6:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    3eda:	88 23       	and	r24, r24
    3edc:	19 f4       	brne	.+6      	; 0x3ee4 <ATTINY_open+0x10>
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	82 e0       	ldi	r24, 0x02	; 2
    3ee2:	08 95       	ret
    3ee4:	10 92 2b 07 	sts	0x072B, r1
    3ee8:	10 92 2a 07 	sts	0x072A, r1
    3eec:	10 92 2d 07 	sts	0x072D, r1
    3ef0:	10 92 2c 07 	sts	0x072C, r1
    3ef4:	10 92 2f 07 	sts	0x072F, r1
    3ef8:	10 92 2e 07 	sts	0x072E, r1
    3efc:	10 92 31 07 	sts	0x0731, r1
    3f00:	10 92 30 07 	sts	0x0730, r1
    3f04:	10 92 33 07 	sts	0x0733, r1
    3f08:	10 92 32 07 	sts	0x0732, r1
    3f0c:	80 e9       	ldi	r24, 0x90	; 144
    3f0e:	91 e0       	ldi	r25, 0x01	; 1
    3f10:	90 93 17 07 	sts	0x0717, r25
    3f14:	80 93 16 07 	sts	0x0716, r24
    3f18:	90 93 19 07 	sts	0x0719, r25
    3f1c:	80 93 18 07 	sts	0x0718, r24
    3f20:	90 93 1b 07 	sts	0x071B, r25
    3f24:	80 93 1a 07 	sts	0x071A, r24
    3f28:	90 93 1d 07 	sts	0x071D, r25
    3f2c:	80 93 1c 07 	sts	0x071C, r24
    3f30:	90 93 1f 07 	sts	0x071F, r25
    3f34:	80 93 1e 07 	sts	0x071E, r24
    3f38:	84 e3       	ldi	r24, 0x34	; 52
    3f3a:	98 e0       	ldi	r25, 0x08	; 8
    3f3c:	90 93 21 07 	sts	0x0721, r25
    3f40:	80 93 20 07 	sts	0x0720, r24
    3f44:	90 93 23 07 	sts	0x0723, r25
    3f48:	80 93 22 07 	sts	0x0722, r24
    3f4c:	90 93 25 07 	sts	0x0725, r25
    3f50:	80 93 24 07 	sts	0x0724, r24
    3f54:	90 93 27 07 	sts	0x0727, r25
    3f58:	80 93 26 07 	sts	0x0726, r24
    3f5c:	90 93 29 07 	sts	0x0729, r25
    3f60:	80 93 28 07 	sts	0x0728, r24
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	61 e0       	ldi	r22, 0x01	; 1
    3f68:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    3f6c:	91 e0       	ldi	r25, 0x01	; 1
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	08 95       	ret

00003f72 <TMRSRVC_delay>:
    3f72:	df 93       	push	r29
    3f74:	cf 93       	push	r28
    3f76:	cd b7       	in	r28, 0x3d	; 61
    3f78:	de b7       	in	r29, 0x3e	; 62
    3f7a:	29 97       	sbiw	r28, 0x09	; 9
    3f7c:	0f b6       	in	r0, 0x3f	; 63
    3f7e:	f8 94       	cli
    3f80:	de bf       	out	0x3e, r29	; 62
    3f82:	0f be       	out	0x3f, r0	; 63
    3f84:	cd bf       	out	0x3d, r28	; 61
    3f86:	9c 01       	movw	r18, r24
    3f88:	ce 01       	movw	r24, r28
    3f8a:	01 96       	adiw	r24, 0x01	; 1
    3f8c:	61 e0       	ldi	r22, 0x01	; 1
    3f8e:	40 e0       	ldi	r20, 0x00	; 0
    3f90:	0e 94 da 1f 	call	0x3fb4	; 0x3fb4 <TMRSRVC_new>
    3f94:	98 2f       	mov	r25, r24
    3f96:	88 23       	and	r24, r24
    3f98:	19 f4       	brne	.+6      	; 0x3fa0 <TMRSRVC_delay+0x2e>
    3f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f9c:	88 23       	and	r24, r24
    3f9e:	e9 f3       	breq	.-6      	; 0x3f9a <TMRSRVC_delay+0x28>
    3fa0:	89 2f       	mov	r24, r25
    3fa2:	29 96       	adiw	r28, 0x09	; 9
    3fa4:	0f b6       	in	r0, 0x3f	; 63
    3fa6:	f8 94       	cli
    3fa8:	de bf       	out	0x3e, r29	; 62
    3faa:	0f be       	out	0x3f, r0	; 63
    3fac:	cd bf       	out	0x3d, r28	; 61
    3fae:	cf 91       	pop	r28
    3fb0:	df 91       	pop	r29
    3fb2:	08 95       	ret

00003fb4 <TMRSRVC_new>:
    3fb4:	ef 92       	push	r14
    3fb6:	ff 92       	push	r15
    3fb8:	0f 93       	push	r16
    3fba:	1f 93       	push	r17
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	ec 01       	movw	r28, r24
    3fc2:	f6 2e       	mov	r15, r22
    3fc4:	e4 2e       	mov	r14, r20
    3fc6:	89 01       	movw	r16, r18
    3fc8:	88 e0       	ldi	r24, 0x08	; 8
    3fca:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    3fce:	81 30       	cpi	r24, 0x01	; 1
    3fd0:	11 f0       	breq	.+4      	; 0x3fd6 <TMRSRVC_new+0x22>
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	26 c0       	rjmp	.+76     	; 0x4022 <TMRSRVC_new+0x6e>
    3fd6:	84 e0       	ldi	r24, 0x04	; 4
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	0e 94 2f 33 	call	0x665e	; 0x665e <malloc>
    3fde:	fc 01       	movw	r30, r24
    3fe0:	00 97       	sbiw	r24, 0x00	; 0
    3fe2:	11 f4       	brne	.+4      	; 0x3fe8 <TMRSRVC_new+0x34>
    3fe4:	82 e0       	ldi	r24, 0x02	; 2
    3fe6:	1d c0       	rjmp	.+58     	; 0x4022 <TMRSRVC_new+0x6e>
    3fe8:	f9 82       	std	Y+1, r15	; 0x01
    3fea:	f0 fc       	sbrc	r15, 0
    3fec:	1e 82       	std	Y+6, r1	; 0x06
    3fee:	81 e0       	ldi	r24, 0x01	; 1
    3ff0:	e8 16       	cp	r14, r24
    3ff2:	19 f4       	brne	.+6      	; 0x3ffa <TMRSRVC_new+0x46>
    3ff4:	89 81       	ldd	r24, Y+1	; 0x01
    3ff6:	84 60       	ori	r24, 0x04	; 4
    3ff8:	89 83       	std	Y+1, r24	; 0x01
    3ffa:	89 81       	ldd	r24, Y+1	; 0x01
    3ffc:	88 60       	ori	r24, 0x08	; 8
    3ffe:	89 83       	std	Y+1, r24	; 0x01
    4000:	1b 83       	std	Y+3, r17	; 0x03
    4002:	0a 83       	std	Y+2, r16	; 0x02
    4004:	1d 83       	std	Y+5, r17	; 0x05
    4006:	0c 83       	std	Y+4, r16	; 0x04
    4008:	d1 83       	std	Z+1, r29	; 0x01
    400a:	c0 83       	st	Z, r28
    400c:	13 82       	std	Z+3, r1	; 0x03
    400e:	12 82       	std	Z+2, r1	; 0x02
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	80 93 0a 04 	sts	0x040A, r24
    4016:	cf 01       	movw	r24, r30
    4018:	0e 94 6f 26 	call	0x4cde	; 0x4cde <TMRSRVC_insert>
    401c:	10 92 0a 04 	sts	0x040A, r1
    4020:	80 e0       	ldi	r24, 0x00	; 0
    4022:	df 91       	pop	r29
    4024:	cf 91       	pop	r28
    4026:	1f 91       	pop	r17
    4028:	0f 91       	pop	r16
    402a:	ff 90       	pop	r15
    402c:	ef 90       	pop	r14
    402e:	08 95       	ret

00004030 <I2C_MSTR_get>:
    4030:	fc 01       	movw	r30, r24
    4032:	80 91 37 07 	lds	r24, 0x0737
    4036:	81 30       	cpi	r24, 0x01	; 1
    4038:	11 f0       	breq	.+4      	; 0x403e <I2C_MSTR_get+0xe>
    403a:	85 e0       	ldi	r24, 0x05	; 5
    403c:	08 95       	ret
    403e:	80 91 38 07 	lds	r24, 0x0738
    4042:	81 30       	cpi	r24, 0x01	; 1
    4044:	11 f0       	breq	.+4      	; 0x404a <I2C_MSTR_get+0x1a>
    4046:	8a e0       	ldi	r24, 0x0A	; 10
    4048:	08 95       	ret
    404a:	61 30       	cpi	r22, 0x01	; 1
    404c:	11 f4       	brne	.+4      	; 0x4052 <I2C_MSTR_get+0x22>
    404e:	84 ec       	ldi	r24, 0xC4	; 196
    4050:	01 c0       	rjmp	.+2      	; 0x4054 <I2C_MSTR_get+0x24>
    4052:	84 e8       	ldi	r24, 0x84	; 132
    4054:	80 93 bc 00 	sts	0x00BC, r24
    4058:	80 91 bc 00 	lds	r24, 0x00BC
    405c:	87 ff       	sbrs	r24, 7
    405e:	fc cf       	rjmp	.-8      	; 0x4058 <I2C_MSTR_get+0x28>
    4060:	61 30       	cpi	r22, 0x01	; 1
    4062:	31 f4       	brne	.+12     	; 0x4070 <I2C_MSTR_get+0x40>
    4064:	80 91 b9 00 	lds	r24, 0x00B9
    4068:	88 7f       	andi	r24, 0xF8	; 248
    406a:	80 35       	cpi	r24, 0x50	; 80
    406c:	59 f4       	brne	.+22     	; 0x4084 <I2C_MSTR_get+0x54>
    406e:	05 c0       	rjmp	.+10     	; 0x407a <I2C_MSTR_get+0x4a>
    4070:	80 91 b9 00 	lds	r24, 0x00B9
    4074:	88 7f       	andi	r24, 0xF8	; 248
    4076:	88 35       	cpi	r24, 0x58	; 88
    4078:	29 f4       	brne	.+10     	; 0x4084 <I2C_MSTR_get+0x54>
    407a:	80 91 bb 00 	lds	r24, 0x00BB
    407e:	80 83       	st	Z, r24
    4080:	80 e0       	ldi	r24, 0x00	; 0
    4082:	08 95       	ret
    4084:	82 e0       	ldi	r24, 0x02	; 2
    4086:	08 95       	ret

00004088 <I2C_MSTR_send>:
    4088:	98 2f       	mov	r25, r24
    408a:	80 91 37 07 	lds	r24, 0x0737
    408e:	81 30       	cpi	r24, 0x01	; 1
    4090:	11 f0       	breq	.+4      	; 0x4096 <I2C_MSTR_send+0xe>
    4092:	85 e0       	ldi	r24, 0x05	; 5
    4094:	08 95       	ret
    4096:	80 91 38 07 	lds	r24, 0x0738
    409a:	81 30       	cpi	r24, 0x01	; 1
    409c:	11 f0       	breq	.+4      	; 0x40a2 <I2C_MSTR_send+0x1a>
    409e:	8a e0       	ldi	r24, 0x0A	; 10
    40a0:	08 95       	ret
    40a2:	90 93 bb 00 	sts	0x00BB, r25
    40a6:	84 e8       	ldi	r24, 0x84	; 132
    40a8:	80 93 bc 00 	sts	0x00BC, r24
    40ac:	80 91 bc 00 	lds	r24, 0x00BC
    40b0:	87 ff       	sbrs	r24, 7
    40b2:	fc cf       	rjmp	.-8      	; 0x40ac <I2C_MSTR_send+0x24>
    40b4:	80 91 b9 00 	lds	r24, 0x00B9
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	88 7f       	andi	r24, 0xF8	; 248
    40bc:	90 70       	andi	r25, 0x00	; 0
    40be:	88 32       	cpi	r24, 0x28	; 40
    40c0:	91 05       	cpc	r25, r1
    40c2:	21 f0       	breq	.+8      	; 0x40cc <I2C_MSTR_send+0x44>
    40c4:	c0 97       	sbiw	r24, 0x30	; 48
    40c6:	21 f4       	brne	.+8      	; 0x40d0 <I2C_MSTR_send+0x48>
    40c8:	83 e0       	ldi	r24, 0x03	; 3
    40ca:	08 95       	ret
    40cc:	80 e0       	ldi	r24, 0x00	; 0
    40ce:	08 95       	ret
    40d0:	8c e0       	ldi	r24, 0x0C	; 12
    40d2:	08 95       	ret

000040d4 <I2C_MSTR_start>:
    40d4:	98 2f       	mov	r25, r24
    40d6:	20 91 37 07 	lds	r18, 0x0737
    40da:	21 30       	cpi	r18, 0x01	; 1
    40dc:	11 f0       	breq	.+4      	; 0x40e2 <I2C_MSTR_start+0xe>
    40de:	85 e0       	ldi	r24, 0x05	; 5
    40e0:	08 95       	ret
    40e2:	80 91 39 07 	lds	r24, 0x0739
    40e6:	81 30       	cpi	r24, 0x01	; 1
    40e8:	11 f4       	brne	.+4      	; 0x40ee <I2C_MSTR_start+0x1a>
    40ea:	89 e0       	ldi	r24, 0x09	; 9
    40ec:	08 95       	ret
    40ee:	20 93 38 07 	sts	0x0738, r18
    40f2:	84 ea       	ldi	r24, 0xA4	; 164
    40f4:	80 93 bc 00 	sts	0x00BC, r24
    40f8:	80 91 bc 00 	lds	r24, 0x00BC
    40fc:	87 ff       	sbrs	r24, 7
    40fe:	fc cf       	rjmp	.-8      	; 0x40f8 <I2C_MSTR_start+0x24>
    4100:	80 91 b9 00 	lds	r24, 0x00B9
    4104:	88 7f       	andi	r24, 0xF8	; 248
    4106:	88 30       	cpi	r24, 0x08	; 8
    4108:	39 f0       	breq	.+14     	; 0x4118 <I2C_MSTR_start+0x44>
    410a:	80 91 b9 00 	lds	r24, 0x00B9
    410e:	88 7f       	andi	r24, 0xF8	; 248
    4110:	80 31       	cpi	r24, 0x10	; 16
    4112:	11 f0       	breq	.+4      	; 0x4118 <I2C_MSTR_start+0x44>
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	08 95       	ret
    4118:	61 30       	cpi	r22, 0x01	; 1
    411a:	19 f4       	brne	.+6      	; 0x4122 <I2C_MSTR_start+0x4e>
    411c:	99 0f       	add	r25, r25
    411e:	91 60       	ori	r25, 0x01	; 1
    4120:	03 c0       	rjmp	.+6      	; 0x4128 <I2C_MSTR_start+0x54>
    4122:	66 23       	and	r22, r22
    4124:	19 f4       	brne	.+6      	; 0x412c <I2C_MSTR_start+0x58>
    4126:	99 0f       	add	r25, r25
    4128:	90 93 bb 00 	sts	0x00BB, r25
    412c:	84 e8       	ldi	r24, 0x84	; 132
    412e:	80 93 bc 00 	sts	0x00BC, r24
    4132:	80 91 bc 00 	lds	r24, 0x00BC
    4136:	87 ff       	sbrs	r24, 7
    4138:	fc cf       	rjmp	.-8      	; 0x4132 <I2C_MSTR_start+0x5e>
    413a:	61 30       	cpi	r22, 0x01	; 1
    413c:	31 f4       	brne	.+12     	; 0x414a <I2C_MSTR_start+0x76>
    413e:	80 91 b9 00 	lds	r24, 0x00B9
    4142:	88 7f       	andi	r24, 0xF8	; 248
    4144:	80 34       	cpi	r24, 0x40	; 64
    4146:	41 f4       	brne	.+16     	; 0x4158 <I2C_MSTR_start+0x84>
    4148:	09 c0       	rjmp	.+18     	; 0x415c <I2C_MSTR_start+0x88>
    414a:	66 23       	and	r22, r22
    414c:	39 f4       	brne	.+14     	; 0x415c <I2C_MSTR_start+0x88>
    414e:	80 91 b9 00 	lds	r24, 0x00B9
    4152:	88 7f       	andi	r24, 0xF8	; 248
    4154:	88 31       	cpi	r24, 0x18	; 24
    4156:	11 f0       	breq	.+4      	; 0x415c <I2C_MSTR_start+0x88>
    4158:	82 e0       	ldi	r24, 0x02	; 2
    415a:	08 95       	ret
    415c:	80 e0       	ldi	r24, 0x00	; 0
    415e:	08 95       	ret

00004160 <I2C_MSTR_stop>:
    4160:	80 91 38 07 	lds	r24, 0x0738
    4164:	81 30       	cpi	r24, 0x01	; 1
    4166:	11 f0       	breq	.+4      	; 0x416c <I2C_MSTR_stop+0xc>
    4168:	8a e0       	ldi	r24, 0x0A	; 10
    416a:	08 95       	ret
    416c:	80 91 3a 07 	lds	r24, 0x073A
    4170:	81 30       	cpi	r24, 0x01	; 1
    4172:	29 f4       	brne	.+10     	; 0x417e <I2C_MSTR_stop+0x1e>
    4174:	85 e9       	ldi	r24, 0x95	; 149
    4176:	80 93 bc 00 	sts	0x00BC, r24
    417a:	80 e0       	ldi	r24, 0x00	; 0
    417c:	08 95       	ret
    417e:	84 e9       	ldi	r24, 0x94	; 148
    4180:	80 93 bc 00 	sts	0x00BC, r24
    4184:	80 e0       	ldi	r24, 0x00	; 0
    4186:	08 95       	ret

00004188 <I2C_open>:
    4188:	82 e1       	ldi	r24, 0x12	; 18
    418a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    418e:	88 23       	and	r24, r24
    4190:	b1 f4       	brne	.+44     	; 0x41be <I2C_open+0x36>
    4192:	10 92 37 07 	sts	0x0737, r1
    4196:	10 92 38 07 	sts	0x0738, r1
    419a:	10 92 39 07 	sts	0x0739, r1
    419e:	10 92 3a 07 	sts	0x073A, r1
    41a2:	10 92 3b 07 	sts	0x073B, r1
    41a6:	0e 94 0b 27 	call	0x4e16	; 0x4e16 <__I2C_init>
    41aa:	87 e1       	ldi	r24, 0x17	; 23
    41ac:	60 e0       	ldi	r22, 0x00	; 0
    41ae:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <I2C_set_BRG>
    41b2:	0e 94 01 27 	call	0x4e02	; 0x4e02 <I2C_enable>
    41b6:	82 e1       	ldi	r24, 0x12	; 18
    41b8:	61 e0       	ldi	r22, 0x01	; 1
    41ba:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    41be:	82 e1       	ldi	r24, 0x12	; 18
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	08 95       	ret

000041c4 <I2C_set_BRG>:
    41c4:	63 70       	andi	r22, 0x03	; 3
    41c6:	60 93 b9 00 	sts	0x00B9, r22
    41ca:	80 93 b8 00 	sts	0x00B8, r24
    41ce:	81 e0       	ldi	r24, 0x01	; 1
    41d0:	80 93 37 07 	sts	0x0737, r24
    41d4:	08 95       	ret

000041d6 <__ADC_init>:
    41d6:	8f e1       	ldi	r24, 0x1F	; 31
    41d8:	80 93 7c 00 	sts	0x007C, r24
    41dc:	ea e7       	ldi	r30, 0x7A	; 122
    41de:	f0 e0       	ldi	r31, 0x00	; 0
    41e0:	87 e0       	ldi	r24, 0x07	; 7
    41e2:	80 83       	st	Z, r24
    41e4:	80 81       	ld	r24, Z
    41e6:	80 68       	ori	r24, 0x80	; 128
    41e8:	80 83       	st	Z, r24
    41ea:	08 95       	ret

000041ec <CBOT_init>:
    41ec:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <SYS_init>
    41f0:	0e 94 28 24 	call	0x4850	; 0x4850 <ATMEGA_open>
    41f4:	0e 94 58 23 	call	0x46b0	; 0x46b0 <ISR_open>
    41f8:	0e 94 d8 26 	call	0x4db0	; 0x4db0 <TMRSRVC_open>
    41fc:	0e 94 8d 24 	call	0x491a	; 0x491a <SPI_open>
    4200:	0e 94 6a 1f 	call	0x3ed4	; 0x3ed4 <ATTINY_open>
    4204:	78 94       	sei
    4206:	08 95       	ret

00004208 <CBOT_ISR_init>:
    4208:	00 00       	nop
    420a:	08 95       	ret

0000420c <__vector_16>:
    420c:	1f 92       	push	r1
    420e:	0f 92       	push	r0
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	0f 92       	push	r0
    4214:	11 24       	eor	r1, r1
    4216:	2f 93       	push	r18
    4218:	3f 93       	push	r19
    421a:	4f 93       	push	r20
    421c:	5f 93       	push	r21
    421e:	6f 93       	push	r22
    4220:	7f 93       	push	r23
    4222:	8f 93       	push	r24
    4224:	9f 93       	push	r25
    4226:	af 93       	push	r26
    4228:	bf 93       	push	r27
    422a:	ef 93       	push	r30
    422c:	ff 93       	push	r31
    422e:	e0 91 ca 03 	lds	r30, 0x03CA
    4232:	f0 91 cb 03 	lds	r31, 0x03CB
    4236:	30 97       	sbiw	r30, 0x00	; 0
    4238:	09 f0       	breq	.+2      	; 0x423c <__vector_16+0x30>
    423a:	09 95       	icall
    423c:	ff 91       	pop	r31
    423e:	ef 91       	pop	r30
    4240:	bf 91       	pop	r27
    4242:	af 91       	pop	r26
    4244:	9f 91       	pop	r25
    4246:	8f 91       	pop	r24
    4248:	7f 91       	pop	r23
    424a:	6f 91       	pop	r22
    424c:	5f 91       	pop	r21
    424e:	4f 91       	pop	r20
    4250:	3f 91       	pop	r19
    4252:	2f 91       	pop	r18
    4254:	0f 90       	pop	r0
    4256:	0f be       	out	0x3f, r0	; 63
    4258:	0f 90       	pop	r0
    425a:	1f 90       	pop	r1
    425c:	18 95       	reti

0000425e <__vector_17>:
    425e:	1f 92       	push	r1
    4260:	0f 92       	push	r0
    4262:	0f b6       	in	r0, 0x3f	; 63
    4264:	0f 92       	push	r0
    4266:	11 24       	eor	r1, r1
    4268:	2f 93       	push	r18
    426a:	3f 93       	push	r19
    426c:	4f 93       	push	r20
    426e:	5f 93       	push	r21
    4270:	6f 93       	push	r22
    4272:	7f 93       	push	r23
    4274:	8f 93       	push	r24
    4276:	9f 93       	push	r25
    4278:	af 93       	push	r26
    427a:	bf 93       	push	r27
    427c:	ef 93       	push	r30
    427e:	ff 93       	push	r31
    4280:	e0 91 cc 03 	lds	r30, 0x03CC
    4284:	f0 91 cd 03 	lds	r31, 0x03CD
    4288:	30 97       	sbiw	r30, 0x00	; 0
    428a:	09 f0       	breq	.+2      	; 0x428e <__vector_17+0x30>
    428c:	09 95       	icall
    428e:	ff 91       	pop	r31
    4290:	ef 91       	pop	r30
    4292:	bf 91       	pop	r27
    4294:	af 91       	pop	r26
    4296:	9f 91       	pop	r25
    4298:	8f 91       	pop	r24
    429a:	7f 91       	pop	r23
    429c:	6f 91       	pop	r22
    429e:	5f 91       	pop	r21
    42a0:	4f 91       	pop	r20
    42a2:	3f 91       	pop	r19
    42a4:	2f 91       	pop	r18
    42a6:	0f 90       	pop	r0
    42a8:	0f be       	out	0x3f, r0	; 63
    42aa:	0f 90       	pop	r0
    42ac:	1f 90       	pop	r1
    42ae:	18 95       	reti

000042b0 <__vector_18>:
    42b0:	1f 92       	push	r1
    42b2:	0f 92       	push	r0
    42b4:	0f b6       	in	r0, 0x3f	; 63
    42b6:	0f 92       	push	r0
    42b8:	11 24       	eor	r1, r1
    42ba:	2f 93       	push	r18
    42bc:	3f 93       	push	r19
    42be:	4f 93       	push	r20
    42c0:	5f 93       	push	r21
    42c2:	6f 93       	push	r22
    42c4:	7f 93       	push	r23
    42c6:	8f 93       	push	r24
    42c8:	9f 93       	push	r25
    42ca:	af 93       	push	r26
    42cc:	bf 93       	push	r27
    42ce:	ef 93       	push	r30
    42d0:	ff 93       	push	r31
    42d2:	e0 91 ce 03 	lds	r30, 0x03CE
    42d6:	f0 91 cf 03 	lds	r31, 0x03CF
    42da:	30 97       	sbiw	r30, 0x00	; 0
    42dc:	09 f0       	breq	.+2      	; 0x42e0 <__vector_18+0x30>
    42de:	09 95       	icall
    42e0:	ff 91       	pop	r31
    42e2:	ef 91       	pop	r30
    42e4:	bf 91       	pop	r27
    42e6:	af 91       	pop	r26
    42e8:	9f 91       	pop	r25
    42ea:	8f 91       	pop	r24
    42ec:	7f 91       	pop	r23
    42ee:	6f 91       	pop	r22
    42f0:	5f 91       	pop	r21
    42f2:	4f 91       	pop	r20
    42f4:	3f 91       	pop	r19
    42f6:	2f 91       	pop	r18
    42f8:	0f 90       	pop	r0
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	0f 90       	pop	r0
    42fe:	1f 90       	pop	r1
    4300:	18 95       	reti

00004302 <__vector_9>:
    4302:	1f 92       	push	r1
    4304:	0f 92       	push	r0
    4306:	0f b6       	in	r0, 0x3f	; 63
    4308:	0f 92       	push	r0
    430a:	11 24       	eor	r1, r1
    430c:	2f 93       	push	r18
    430e:	3f 93       	push	r19
    4310:	4f 93       	push	r20
    4312:	5f 93       	push	r21
    4314:	6f 93       	push	r22
    4316:	7f 93       	push	r23
    4318:	8f 93       	push	r24
    431a:	9f 93       	push	r25
    431c:	af 93       	push	r26
    431e:	bf 93       	push	r27
    4320:	ef 93       	push	r30
    4322:	ff 93       	push	r31
    4324:	e0 91 bc 03 	lds	r30, 0x03BC
    4328:	f0 91 bd 03 	lds	r31, 0x03BD
    432c:	30 97       	sbiw	r30, 0x00	; 0
    432e:	09 f0       	breq	.+2      	; 0x4332 <__vector_9+0x30>
    4330:	09 95       	icall
    4332:	ff 91       	pop	r31
    4334:	ef 91       	pop	r30
    4336:	bf 91       	pop	r27
    4338:	af 91       	pop	r26
    433a:	9f 91       	pop	r25
    433c:	8f 91       	pop	r24
    433e:	7f 91       	pop	r23
    4340:	6f 91       	pop	r22
    4342:	5f 91       	pop	r21
    4344:	4f 91       	pop	r20
    4346:	3f 91       	pop	r19
    4348:	2f 91       	pop	r18
    434a:	0f 90       	pop	r0
    434c:	0f be       	out	0x3f, r0	; 63
    434e:	0f 90       	pop	r0
    4350:	1f 90       	pop	r1
    4352:	18 95       	reti

00004354 <__vector_10>:
    4354:	1f 92       	push	r1
    4356:	0f 92       	push	r0
    4358:	0f b6       	in	r0, 0x3f	; 63
    435a:	0f 92       	push	r0
    435c:	11 24       	eor	r1, r1
    435e:	2f 93       	push	r18
    4360:	3f 93       	push	r19
    4362:	4f 93       	push	r20
    4364:	5f 93       	push	r21
    4366:	6f 93       	push	r22
    4368:	7f 93       	push	r23
    436a:	8f 93       	push	r24
    436c:	9f 93       	push	r25
    436e:	af 93       	push	r26
    4370:	bf 93       	push	r27
    4372:	ef 93       	push	r30
    4374:	ff 93       	push	r31
    4376:	e0 91 be 03 	lds	r30, 0x03BE
    437a:	f0 91 bf 03 	lds	r31, 0x03BF
    437e:	30 97       	sbiw	r30, 0x00	; 0
    4380:	09 f0       	breq	.+2      	; 0x4384 <__vector_10+0x30>
    4382:	09 95       	icall
    4384:	ff 91       	pop	r31
    4386:	ef 91       	pop	r30
    4388:	bf 91       	pop	r27
    438a:	af 91       	pop	r26
    438c:	9f 91       	pop	r25
    438e:	8f 91       	pop	r24
    4390:	7f 91       	pop	r23
    4392:	6f 91       	pop	r22
    4394:	5f 91       	pop	r21
    4396:	4f 91       	pop	r20
    4398:	3f 91       	pop	r19
    439a:	2f 91       	pop	r18
    439c:	0f 90       	pop	r0
    439e:	0f be       	out	0x3f, r0	; 63
    43a0:	0f 90       	pop	r0
    43a2:	1f 90       	pop	r1
    43a4:	18 95       	reti

000043a6 <__vector_11>:
    43a6:	1f 92       	push	r1
    43a8:	0f 92       	push	r0
    43aa:	0f b6       	in	r0, 0x3f	; 63
    43ac:	0f 92       	push	r0
    43ae:	11 24       	eor	r1, r1
    43b0:	2f 93       	push	r18
    43b2:	3f 93       	push	r19
    43b4:	4f 93       	push	r20
    43b6:	5f 93       	push	r21
    43b8:	6f 93       	push	r22
    43ba:	7f 93       	push	r23
    43bc:	8f 93       	push	r24
    43be:	9f 93       	push	r25
    43c0:	af 93       	push	r26
    43c2:	bf 93       	push	r27
    43c4:	ef 93       	push	r30
    43c6:	ff 93       	push	r31
    43c8:	e0 91 c0 03 	lds	r30, 0x03C0
    43cc:	f0 91 c1 03 	lds	r31, 0x03C1
    43d0:	30 97       	sbiw	r30, 0x00	; 0
    43d2:	09 f0       	breq	.+2      	; 0x43d6 <__vector_11+0x30>
    43d4:	09 95       	icall
    43d6:	ff 91       	pop	r31
    43d8:	ef 91       	pop	r30
    43da:	bf 91       	pop	r27
    43dc:	af 91       	pop	r26
    43de:	9f 91       	pop	r25
    43e0:	8f 91       	pop	r24
    43e2:	7f 91       	pop	r23
    43e4:	6f 91       	pop	r22
    43e6:	5f 91       	pop	r21
    43e8:	4f 91       	pop	r20
    43ea:	3f 91       	pop	r19
    43ec:	2f 91       	pop	r18
    43ee:	0f 90       	pop	r0
    43f0:	0f be       	out	0x3f, r0	; 63
    43f2:	0f 90       	pop	r0
    43f4:	1f 90       	pop	r1
    43f6:	18 95       	reti

000043f8 <__vector_13>:
    43f8:	1f 92       	push	r1
    43fa:	0f 92       	push	r0
    43fc:	0f b6       	in	r0, 0x3f	; 63
    43fe:	0f 92       	push	r0
    4400:	11 24       	eor	r1, r1
    4402:	2f 93       	push	r18
    4404:	3f 93       	push	r19
    4406:	4f 93       	push	r20
    4408:	5f 93       	push	r21
    440a:	6f 93       	push	r22
    440c:	7f 93       	push	r23
    440e:	8f 93       	push	r24
    4410:	9f 93       	push	r25
    4412:	af 93       	push	r26
    4414:	bf 93       	push	r27
    4416:	ef 93       	push	r30
    4418:	ff 93       	push	r31
    441a:	e0 91 c4 03 	lds	r30, 0x03C4
    441e:	f0 91 c5 03 	lds	r31, 0x03C5
    4422:	30 97       	sbiw	r30, 0x00	; 0
    4424:	09 f0       	breq	.+2      	; 0x4428 <__vector_13+0x30>
    4426:	09 95       	icall
    4428:	ff 91       	pop	r31
    442a:	ef 91       	pop	r30
    442c:	bf 91       	pop	r27
    442e:	af 91       	pop	r26
    4430:	9f 91       	pop	r25
    4432:	8f 91       	pop	r24
    4434:	7f 91       	pop	r23
    4436:	6f 91       	pop	r22
    4438:	5f 91       	pop	r21
    443a:	4f 91       	pop	r20
    443c:	3f 91       	pop	r19
    443e:	2f 91       	pop	r18
    4440:	0f 90       	pop	r0
    4442:	0f be       	out	0x3f, r0	; 63
    4444:	0f 90       	pop	r0
    4446:	1f 90       	pop	r1
    4448:	18 95       	reti

0000444a <__vector_14>:
    444a:	1f 92       	push	r1
    444c:	0f 92       	push	r0
    444e:	0f b6       	in	r0, 0x3f	; 63
    4450:	0f 92       	push	r0
    4452:	11 24       	eor	r1, r1
    4454:	2f 93       	push	r18
    4456:	3f 93       	push	r19
    4458:	4f 93       	push	r20
    445a:	5f 93       	push	r21
    445c:	6f 93       	push	r22
    445e:	7f 93       	push	r23
    4460:	8f 93       	push	r24
    4462:	9f 93       	push	r25
    4464:	af 93       	push	r26
    4466:	bf 93       	push	r27
    4468:	ef 93       	push	r30
    446a:	ff 93       	push	r31
    446c:	e0 91 c6 03 	lds	r30, 0x03C6
    4470:	f0 91 c7 03 	lds	r31, 0x03C7
    4474:	30 97       	sbiw	r30, 0x00	; 0
    4476:	09 f0       	breq	.+2      	; 0x447a <__vector_14+0x30>
    4478:	09 95       	icall
    447a:	ff 91       	pop	r31
    447c:	ef 91       	pop	r30
    447e:	bf 91       	pop	r27
    4480:	af 91       	pop	r26
    4482:	9f 91       	pop	r25
    4484:	8f 91       	pop	r24
    4486:	7f 91       	pop	r23
    4488:	6f 91       	pop	r22
    448a:	5f 91       	pop	r21
    448c:	4f 91       	pop	r20
    448e:	3f 91       	pop	r19
    4490:	2f 91       	pop	r18
    4492:	0f 90       	pop	r0
    4494:	0f be       	out	0x3f, r0	; 63
    4496:	0f 90       	pop	r0
    4498:	1f 90       	pop	r1
    449a:	18 95       	reti

0000449c <__vector_12>:
    449c:	1f 92       	push	r1
    449e:	0f 92       	push	r0
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	0f 92       	push	r0
    44a4:	11 24       	eor	r1, r1
    44a6:	2f 93       	push	r18
    44a8:	3f 93       	push	r19
    44aa:	4f 93       	push	r20
    44ac:	5f 93       	push	r21
    44ae:	6f 93       	push	r22
    44b0:	7f 93       	push	r23
    44b2:	8f 93       	push	r24
    44b4:	9f 93       	push	r25
    44b6:	af 93       	push	r26
    44b8:	bf 93       	push	r27
    44ba:	ef 93       	push	r30
    44bc:	ff 93       	push	r31
    44be:	e0 91 c2 03 	lds	r30, 0x03C2
    44c2:	f0 91 c3 03 	lds	r31, 0x03C3
    44c6:	30 97       	sbiw	r30, 0x00	; 0
    44c8:	09 f0       	breq	.+2      	; 0x44cc <__vector_12+0x30>
    44ca:	09 95       	icall
    44cc:	ff 91       	pop	r31
    44ce:	ef 91       	pop	r30
    44d0:	bf 91       	pop	r27
    44d2:	af 91       	pop	r26
    44d4:	9f 91       	pop	r25
    44d6:	8f 91       	pop	r24
    44d8:	7f 91       	pop	r23
    44da:	6f 91       	pop	r22
    44dc:	5f 91       	pop	r21
    44de:	4f 91       	pop	r20
    44e0:	3f 91       	pop	r19
    44e2:	2f 91       	pop	r18
    44e4:	0f 90       	pop	r0
    44e6:	0f be       	out	0x3f, r0	; 63
    44e8:	0f 90       	pop	r0
    44ea:	1f 90       	pop	r1
    44ec:	18 95       	reti

000044ee <__vector_15>:
    44ee:	1f 92       	push	r1
    44f0:	0f 92       	push	r0
    44f2:	0f b6       	in	r0, 0x3f	; 63
    44f4:	0f 92       	push	r0
    44f6:	11 24       	eor	r1, r1
    44f8:	2f 93       	push	r18
    44fa:	3f 93       	push	r19
    44fc:	4f 93       	push	r20
    44fe:	5f 93       	push	r21
    4500:	6f 93       	push	r22
    4502:	7f 93       	push	r23
    4504:	8f 93       	push	r24
    4506:	9f 93       	push	r25
    4508:	af 93       	push	r26
    450a:	bf 93       	push	r27
    450c:	ef 93       	push	r30
    450e:	ff 93       	push	r31
    4510:	e0 91 c8 03 	lds	r30, 0x03C8
    4514:	f0 91 c9 03 	lds	r31, 0x03C9
    4518:	30 97       	sbiw	r30, 0x00	; 0
    451a:	09 f0       	breq	.+2      	; 0x451e <__vector_15+0x30>
    451c:	09 95       	icall
    451e:	ff 91       	pop	r31
    4520:	ef 91       	pop	r30
    4522:	bf 91       	pop	r27
    4524:	af 91       	pop	r26
    4526:	9f 91       	pop	r25
    4528:	8f 91       	pop	r24
    452a:	7f 91       	pop	r23
    452c:	6f 91       	pop	r22
    452e:	5f 91       	pop	r21
    4530:	4f 91       	pop	r20
    4532:	3f 91       	pop	r19
    4534:	2f 91       	pop	r18
    4536:	0f 90       	pop	r0
    4538:	0f be       	out	0x3f, r0	; 63
    453a:	0f 90       	pop	r0
    453c:	1f 90       	pop	r1
    453e:	18 95       	reti

00004540 <__vector_4>:
    4540:	1f 92       	push	r1
    4542:	0f 92       	push	r0
    4544:	0f b6       	in	r0, 0x3f	; 63
    4546:	0f 92       	push	r0
    4548:	11 24       	eor	r1, r1
    454a:	2f 93       	push	r18
    454c:	3f 93       	push	r19
    454e:	4f 93       	push	r20
    4550:	5f 93       	push	r21
    4552:	6f 93       	push	r22
    4554:	7f 93       	push	r23
    4556:	8f 93       	push	r24
    4558:	9f 93       	push	r25
    455a:	af 93       	push	r26
    455c:	bf 93       	push	r27
    455e:	ef 93       	push	r30
    4560:	ff 93       	push	r31
    4562:	e0 91 b2 03 	lds	r30, 0x03B2
    4566:	f0 91 b3 03 	lds	r31, 0x03B3
    456a:	30 97       	sbiw	r30, 0x00	; 0
    456c:	09 f0       	breq	.+2      	; 0x4570 <__vector_4+0x30>
    456e:	09 95       	icall
    4570:	ff 91       	pop	r31
    4572:	ef 91       	pop	r30
    4574:	bf 91       	pop	r27
    4576:	af 91       	pop	r26
    4578:	9f 91       	pop	r25
    457a:	8f 91       	pop	r24
    457c:	7f 91       	pop	r23
    457e:	6f 91       	pop	r22
    4580:	5f 91       	pop	r21
    4582:	4f 91       	pop	r20
    4584:	3f 91       	pop	r19
    4586:	2f 91       	pop	r18
    4588:	0f 90       	pop	r0
    458a:	0f be       	out	0x3f, r0	; 63
    458c:	0f 90       	pop	r0
    458e:	1f 90       	pop	r1
    4590:	18 95       	reti

00004592 <__vector_5>:
    4592:	1f 92       	push	r1
    4594:	0f 92       	push	r0
    4596:	0f b6       	in	r0, 0x3f	; 63
    4598:	0f 92       	push	r0
    459a:	11 24       	eor	r1, r1
    459c:	2f 93       	push	r18
    459e:	3f 93       	push	r19
    45a0:	4f 93       	push	r20
    45a2:	5f 93       	push	r21
    45a4:	6f 93       	push	r22
    45a6:	7f 93       	push	r23
    45a8:	8f 93       	push	r24
    45aa:	9f 93       	push	r25
    45ac:	af 93       	push	r26
    45ae:	bf 93       	push	r27
    45b0:	ef 93       	push	r30
    45b2:	ff 93       	push	r31
    45b4:	e0 91 b4 03 	lds	r30, 0x03B4
    45b8:	f0 91 b5 03 	lds	r31, 0x03B5
    45bc:	30 97       	sbiw	r30, 0x00	; 0
    45be:	09 f0       	breq	.+2      	; 0x45c2 <__vector_5+0x30>
    45c0:	09 95       	icall
    45c2:	ff 91       	pop	r31
    45c4:	ef 91       	pop	r30
    45c6:	bf 91       	pop	r27
    45c8:	af 91       	pop	r26
    45ca:	9f 91       	pop	r25
    45cc:	8f 91       	pop	r24
    45ce:	7f 91       	pop	r23
    45d0:	6f 91       	pop	r22
    45d2:	5f 91       	pop	r21
    45d4:	4f 91       	pop	r20
    45d6:	3f 91       	pop	r19
    45d8:	2f 91       	pop	r18
    45da:	0f 90       	pop	r0
    45dc:	0f be       	out	0x3f, r0	; 63
    45de:	0f 90       	pop	r0
    45e0:	1f 90       	pop	r1
    45e2:	18 95       	reti

000045e4 <__vector_6>:
    45e4:	1f 92       	push	r1
    45e6:	0f 92       	push	r0
    45e8:	0f b6       	in	r0, 0x3f	; 63
    45ea:	0f 92       	push	r0
    45ec:	11 24       	eor	r1, r1
    45ee:	2f 93       	push	r18
    45f0:	3f 93       	push	r19
    45f2:	4f 93       	push	r20
    45f4:	5f 93       	push	r21
    45f6:	6f 93       	push	r22
    45f8:	7f 93       	push	r23
    45fa:	8f 93       	push	r24
    45fc:	9f 93       	push	r25
    45fe:	af 93       	push	r26
    4600:	bf 93       	push	r27
    4602:	ef 93       	push	r30
    4604:	ff 93       	push	r31
    4606:	e0 91 b6 03 	lds	r30, 0x03B6
    460a:	f0 91 b7 03 	lds	r31, 0x03B7
    460e:	30 97       	sbiw	r30, 0x00	; 0
    4610:	09 f0       	breq	.+2      	; 0x4614 <__vector_6+0x30>
    4612:	09 95       	icall
    4614:	ff 91       	pop	r31
    4616:	ef 91       	pop	r30
    4618:	bf 91       	pop	r27
    461a:	af 91       	pop	r26
    461c:	9f 91       	pop	r25
    461e:	8f 91       	pop	r24
    4620:	7f 91       	pop	r23
    4622:	6f 91       	pop	r22
    4624:	5f 91       	pop	r21
    4626:	4f 91       	pop	r20
    4628:	3f 91       	pop	r19
    462a:	2f 91       	pop	r18
    462c:	0f 90       	pop	r0
    462e:	0f be       	out	0x3f, r0	; 63
    4630:	0f 90       	pop	r0
    4632:	1f 90       	pop	r1
    4634:	18 95       	reti

00004636 <__vector_7>:
    4636:	1f 92       	push	r1
    4638:	0f 92       	push	r0
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	0f 92       	push	r0
    463e:	11 24       	eor	r1, r1
    4640:	2f 93       	push	r18
    4642:	3f 93       	push	r19
    4644:	4f 93       	push	r20
    4646:	5f 93       	push	r21
    4648:	6f 93       	push	r22
    464a:	7f 93       	push	r23
    464c:	8f 93       	push	r24
    464e:	9f 93       	push	r25
    4650:	af 93       	push	r26
    4652:	bf 93       	push	r27
    4654:	ef 93       	push	r30
    4656:	ff 93       	push	r31
    4658:	e0 91 b8 03 	lds	r30, 0x03B8
    465c:	f0 91 b9 03 	lds	r31, 0x03B9
    4660:	30 97       	sbiw	r30, 0x00	; 0
    4662:	09 f0       	breq	.+2      	; 0x4666 <__vector_7+0x30>
    4664:	09 95       	icall
    4666:	ff 91       	pop	r31
    4668:	ef 91       	pop	r30
    466a:	bf 91       	pop	r27
    466c:	af 91       	pop	r26
    466e:	9f 91       	pop	r25
    4670:	8f 91       	pop	r24
    4672:	7f 91       	pop	r23
    4674:	6f 91       	pop	r22
    4676:	5f 91       	pop	r21
    4678:	4f 91       	pop	r20
    467a:	3f 91       	pop	r19
    467c:	2f 91       	pop	r18
    467e:	0f 90       	pop	r0
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	0f 90       	pop	r0
    4684:	1f 90       	pop	r1
    4686:	18 95       	reti

00004688 <ISR_attach>:
    4688:	e8 2f       	mov	r30, r24
    468a:	80 32       	cpi	r24, 0x20	; 32
    468c:	68 f4       	brcc	.+26     	; 0x46a8 <ISR_attach+0x20>
    468e:	80 51       	subi	r24, 0x10	; 16
    4690:	83 30       	cpi	r24, 0x03	; 3
    4692:	50 f0       	brcs	.+20     	; 0x46a8 <ISR_attach+0x20>
    4694:	f0 e0       	ldi	r31, 0x00	; 0
    4696:	ee 0f       	add	r30, r30
    4698:	ff 1f       	adc	r31, r31
    469a:	e6 55       	subi	r30, 0x56	; 86
    469c:	fc 4f       	sbci	r31, 0xFC	; 252
    469e:	20 81       	ld	r18, Z
    46a0:	31 81       	ldd	r19, Z+1	; 0x01
    46a2:	71 83       	std	Z+1, r23	; 0x01
    46a4:	60 83       	st	Z, r22
    46a6:	02 c0       	rjmp	.+4      	; 0x46ac <ISR_attach+0x24>
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	c9 01       	movw	r24, r18
    46ae:	08 95       	ret

000046b0 <ISR_open>:
    46b0:	80 e1       	ldi	r24, 0x10	; 16
    46b2:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    46b6:	88 23       	and	r24, r24
    46b8:	61 f4       	brne	.+24     	; 0x46d2 <ISR_open+0x22>
    46ba:	ea ea       	ldi	r30, 0xAA	; 170
    46bc:	f3 e0       	ldi	r31, 0x03	; 3
    46be:	11 92       	st	Z+, r1
    46c0:	11 92       	st	Z+, r1
    46c2:	83 e0       	ldi	r24, 0x03	; 3
    46c4:	ea 3e       	cpi	r30, 0xEA	; 234
    46c6:	f8 07       	cpc	r31, r24
    46c8:	d1 f7       	brne	.-12     	; 0x46be <ISR_open+0xe>
    46ca:	80 e1       	ldi	r24, 0x10	; 16
    46cc:	61 e0       	ldi	r22, 0x01	; 1
    46ce:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    46d2:	80 e1       	ldi	r24, 0x10	; 16
    46d4:	91 e0       	ldi	r25, 0x01	; 1
    46d6:	08 95       	ret

000046d8 <__LCD_init>:
    46d8:	23 9a       	sbi	0x04, 3	; 4
    46da:	08 95       	ret

000046dc <__LCD_putchar>:
    46dc:	ff 92       	push	r15
    46de:	0f 93       	push	r16
    46e0:	1f 93       	push	r17
    46e2:	cf 93       	push	r28
    46e4:	df 93       	push	r29
    46e6:	f8 2e       	mov	r15, r24
    46e8:	8a e0       	ldi	r24, 0x0A	; 10
    46ea:	f8 16       	cp	r15, r24
    46ec:	b1 f0       	breq	.+44     	; 0x471a <__LCD_putchar+0x3e>
    46ee:	8f 15       	cp	r24, r15
    46f0:	48 f0       	brcs	.+18     	; 0x4704 <__LCD_putchar+0x28>
    46f2:	e8 e0       	ldi	r30, 0x08	; 8
    46f4:	fe 16       	cp	r15, r30
    46f6:	b9 f1       	breq	.+110    	; 0x4766 <__LCD_putchar+0x8a>
    46f8:	ef 15       	cp	r30, r15
    46fa:	38 f1       	brcs	.+78     	; 0x474a <__LCD_putchar+0x6e>
    46fc:	f7 e0       	ldi	r31, 0x07	; 7
    46fe:	ff 16       	cp	r15, r31
    4700:	51 f4       	brne	.+20     	; 0x4716 <__LCD_putchar+0x3a>
    4702:	3b c0       	rjmp	.+118    	; 0x477a <__LCD_putchar+0x9e>
    4704:	8d e0       	ldi	r24, 0x0D	; 13
    4706:	f8 16       	cp	r15, r24
    4708:	59 f0       	breq	.+22     	; 0x4720 <__LCD_putchar+0x44>
    470a:	eb e1       	ldi	r30, 0x1B	; 27
    470c:	fe 16       	cp	r15, r30
    470e:	89 f0       	breq	.+34     	; 0x4732 <__LCD_putchar+0x56>
    4710:	fc e0       	ldi	r31, 0x0C	; 12
    4712:	ff 16       	cp	r15, r31
    4714:	41 f0       	breq	.+16     	; 0x4726 <__LCD_putchar+0x4a>
    4716:	01 e0       	ldi	r16, 0x01	; 1
    4718:	41 c0       	rjmp	.+130    	; 0x479c <__LCD_putchar+0xc0>
    471a:	10 92 10 07 	sts	0x0710, r1
    471e:	03 c0       	rjmp	.+6      	; 0x4726 <__LCD_putchar+0x4a>
    4720:	10 92 10 07 	sts	0x0710, r1
    4724:	3a c0       	rjmp	.+116    	; 0x479a <__LCD_putchar+0xbe>
    4726:	80 91 11 07 	lds	r24, 0x0711
    472a:	81 50       	subi	r24, 0x01	; 1
    472c:	80 93 11 07 	sts	0x0711, r24
    4730:	34 c0       	rjmp	.+104    	; 0x479a <__LCD_putchar+0xbe>
    4732:	0e 94 de 18 	call	0x31bc	; 0x31bc <LCD_clear>
    4736:	14 c0       	rjmp	.+40     	; 0x4760 <__LCD_putchar+0x84>
    4738:	80 e0       	ldi	r24, 0x00	; 0
    473a:	61 e0       	ldi	r22, 0x01	; 1
    473c:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    4740:	80 91 10 07 	lds	r24, 0x0710
    4744:	8f 5f       	subi	r24, 0xFF	; 255
    4746:	80 93 10 07 	sts	0x0710, r24
    474a:	80 91 10 07 	lds	r24, 0x0710
    474e:	87 ff       	sbrs	r24, 7
    4750:	f3 cf       	rjmp	.-26     	; 0x4738 <__LCD_putchar+0x5c>
    4752:	10 92 10 07 	sts	0x0710, r1
    4756:	80 91 11 07 	lds	r24, 0x0711
    475a:	81 50       	subi	r24, 0x01	; 1
    475c:	80 93 11 07 	sts	0x0711, r24
    4760:	00 e0       	ldi	r16, 0x00	; 0
    4762:	11 e0       	ldi	r17, 0x01	; 1
    4764:	1c c0       	rjmp	.+56     	; 0x479e <__LCD_putchar+0xc2>
    4766:	80 91 10 07 	lds	r24, 0x0710
    476a:	88 23       	and	r24, r24
    476c:	b1 f0       	breq	.+44     	; 0x479a <__LCD_putchar+0xbe>
    476e:	80 91 10 07 	lds	r24, 0x0710
    4772:	86 50       	subi	r24, 0x06	; 6
    4774:	80 93 10 07 	sts	0x0710, r24
    4778:	10 c0       	rjmp	.+32     	; 0x479a <__LCD_putchar+0xbe>
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <SPKR_open>
    4780:	64 ef       	ldi	r22, 0xF4	; 244
    4782:	71 e0       	ldi	r23, 0x01	; 1
    4784:	80 e0       	ldi	r24, 0x00	; 0
    4786:	90 e0       	ldi	r25, 0x00	; 0
    4788:	4d e7       	ldi	r20, 0x7D	; 125
    478a:	50 e0       	ldi	r21, 0x00	; 0
    478c:	24 e6       	ldi	r18, 0x64	; 100
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	0e 94 88 25 	call	0x4b10	; 0x4b10 <SPKR_play_beep>
    4794:	81 e0       	ldi	r24, 0x01	; 1
    4796:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <SPKR_close>
    479a:	00 e0       	ldi	r16, 0x00	; 0
    479c:	10 e0       	ldi	r17, 0x00	; 0
    479e:	80 91 11 07 	lds	r24, 0x0711
    47a2:	60 91 10 07 	lds	r22, 0x0710
    47a6:	0e 94 a4 19 	call	0x3348	; 0x3348 <LCD_set_PGC_addr>
    47aa:	00 23       	and	r16, r16
    47ac:	51 f1       	breq	.+84     	; 0x4802 <__LCD_putchar+0x126>
    47ae:	85 e0       	ldi	r24, 0x05	; 5
    47b0:	f8 9e       	mul	r15, r24
    47b2:	c0 01       	movw	r24, r0
    47b4:	11 24       	eor	r1, r1
    47b6:	ec 01       	movw	r28, r24
    47b8:	c3 55       	subi	r28, 0x53	; 83
    47ba:	df 4f       	sbci	r29, 0xFF	; 255
    47bc:	8c 01       	movw	r16, r24
    47be:	0e 54       	subi	r16, 0x4E	; 78
    47c0:	1f 4f       	sbci	r17, 0xFF	; 255
    47c2:	fe 01       	movw	r30, r28
    47c4:	84 91       	lpm	r24, Z+
    47c6:	61 e0       	ldi	r22, 0x01	; 1
    47c8:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    47cc:	21 96       	adiw	r28, 0x01	; 1
    47ce:	c0 17       	cp	r28, r16
    47d0:	d1 07       	cpc	r29, r17
    47d2:	b9 f7       	brne	.-18     	; 0x47c2 <__LCD_putchar+0xe6>
    47d4:	80 e0       	ldi	r24, 0x00	; 0
    47d6:	61 e0       	ldi	r22, 0x01	; 1
    47d8:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_write>
    47dc:	80 91 10 07 	lds	r24, 0x0710
    47e0:	8a 5f       	subi	r24, 0xFA	; 250
    47e2:	80 93 10 07 	sts	0x0710, r24
    47e6:	80 91 10 07 	lds	r24, 0x0710
    47ea:	90 e0       	ldi	r25, 0x00	; 0
    47ec:	8c 37       	cpi	r24, 0x7C	; 124
    47ee:	91 05       	cpc	r25, r1
    47f0:	3c f0       	brlt	.+14     	; 0x4800 <__LCD_putchar+0x124>
    47f2:	10 92 10 07 	sts	0x0710, r1
    47f6:	80 91 11 07 	lds	r24, 0x0711
    47fa:	81 50       	subi	r24, 0x01	; 1
    47fc:	80 93 11 07 	sts	0x0711, r24
    4800:	11 e0       	ldi	r17, 0x01	; 1
    4802:	80 91 11 07 	lds	r24, 0x0711
    4806:	83 70       	andi	r24, 0x03	; 3
    4808:	80 93 11 07 	sts	0x0711, r24
    480c:	11 30       	cpi	r17, 0x01	; 1
    480e:	59 f4       	brne	.+22     	; 0x4826 <__LCD_putchar+0x14a>
    4810:	80 91 12 07 	lds	r24, 0x0712
    4814:	81 30       	cpi	r24, 0x01	; 1
    4816:	39 f4       	brne	.+14     	; 0x4826 <__LCD_putchar+0x14a>
    4818:	e0 91 13 07 	lds	r30, 0x0713
    481c:	f0 91 14 07 	lds	r31, 0x0714
    4820:	30 97       	sbiw	r30, 0x00	; 0
    4822:	09 f0       	breq	.+2      	; 0x4826 <__LCD_putchar+0x14a>
    4824:	09 95       	icall
    4826:	80 e0       	ldi	r24, 0x00	; 0
    4828:	90 e0       	ldi	r25, 0x00	; 0
    482a:	df 91       	pop	r29
    482c:	cf 91       	pop	r28
    482e:	1f 91       	pop	r17
    4830:	0f 91       	pop	r16
    4832:	ff 90       	pop	r15
    4834:	08 95       	ret

00004836 <__LED_clr_pattern>:
    4836:	85 fd       	sbrc	r24, 5
    4838:	5d 98       	cbi	0x0b, 5	; 11
    483a:	86 fd       	sbrc	r24, 6
    483c:	5e 98       	cbi	0x0b, 6	; 11
    483e:	08 95       	ret

00004840 <__LED_init>:
    4840:	55 9a       	sbi	0x0a, 5	; 10
    4842:	56 9a       	sbi	0x0a, 6	; 10
    4844:	08 95       	ret

00004846 <__LED_set_pattern>:
    4846:	85 fd       	sbrc	r24, 5
    4848:	5d 9a       	sbi	0x0b, 5	; 11
    484a:	86 fd       	sbrc	r24, 6
    484c:	5e 9a       	sbi	0x0b, 6	; 11
    484e:	08 95       	ret

00004850 <ATMEGA_open>:
    4850:	80 e0       	ldi	r24, 0x00	; 0
    4852:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    4856:	88 23       	and	r24, r24
    4858:	51 f4       	brne	.+20     	; 0x486e <ATMEGA_open+0x1e>
    485a:	f8 94       	cli
    485c:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__ATMEGA_init>
    4860:	81 e0       	ldi	r24, 0x01	; 1
    4862:	0e 94 3a 24 	call	0x4874	; 0x4874 <ATMEGA_set_clk_mode>
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	61 e0       	ldi	r22, 0x01	; 1
    486a:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    486e:	80 e0       	ldi	r24, 0x00	; 0
    4870:	91 e0       	ldi	r25, 0x01	; 1
    4872:	08 95       	ret

00004874 <ATMEGA_set_clk_mode>:
    4874:	81 30       	cpi	r24, 0x01	; 1
    4876:	49 f0       	breq	.+18     	; 0x488a <ATMEGA_set_clk_mode+0x16>
    4878:	f8 94       	cli
    487a:	81 30       	cpi	r24, 0x01	; 1
    487c:	20 f1       	brcs	.+72     	; 0x48c6 <ATMEGA_set_clk_mode+0x52>
    487e:	82 30       	cpi	r24, 0x02	; 2
    4880:	b1 f0       	breq	.+44     	; 0x48ae <ATMEGA_set_clk_mode+0x3a>
    4882:	83 30       	cpi	r24, 0x03	; 3
    4884:	09 f0       	breq	.+2      	; 0x4888 <ATMEGA_set_clk_mode+0x14>
    4886:	45 c0       	rjmp	.+138    	; 0x4912 <ATMEGA_set_clk_mode+0x9e>
    4888:	17 c0       	rjmp	.+46     	; 0x48b8 <ATMEGA_set_clk_mode+0x44>
    488a:	2c 9a       	sbi	0x05, 4	; 5
    488c:	80 e8       	ldi	r24, 0x80	; 128
    488e:	80 93 61 00 	sts	0x0061, r24
    4892:	10 92 61 00 	sts	0x0061, r1
    4896:	80 e0       	ldi	r24, 0x00	; 0
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	00 00       	nop
    489c:	01 96       	adiw	r24, 0x01	; 1
    489e:	88 32       	cpi	r24, 0x28	; 40
    48a0:	91 05       	cpc	r25, r1
    48a2:	d9 f7       	brne	.-10     	; 0x489a <ATMEGA_set_clk_mode+0x26>
    48a4:	10 92 68 00 	sts	0x0068, r1
    48a8:	10 92 6b 00 	sts	0x006B, r1
    48ac:	08 95       	ret
    48ae:	80 e8       	ldi	r24, 0x80	; 128
    48b0:	80 93 61 00 	sts	0x0061, r24
    48b4:	83 e0       	ldi	r24, 0x03	; 3
    48b6:	04 c0       	rjmp	.+8      	; 0x48c0 <ATMEGA_set_clk_mode+0x4c>
    48b8:	80 e8       	ldi	r24, 0x80	; 128
    48ba:	80 93 61 00 	sts	0x0061, r24
    48be:	88 e0       	ldi	r24, 0x08	; 8
    48c0:	80 93 61 00 	sts	0x0061, r24
    48c4:	28 c0       	rjmp	.+80     	; 0x4916 <ATMEGA_set_clk_mode+0xa2>
    48c6:	80 e0       	ldi	r24, 0x00	; 0
    48c8:	90 e0       	ldi	r25, 0x00	; 0
    48ca:	00 00       	nop
    48cc:	01 96       	adiw	r24, 0x01	; 1
    48ce:	2d e6       	ldi	r18, 0x6D	; 109
    48d0:	80 36       	cpi	r24, 0x60	; 96
    48d2:	92 07       	cpc	r25, r18
    48d4:	d1 f7       	brne	.-12     	; 0x48ca <ATMEGA_set_clk_mode+0x56>
    48d6:	2c 98       	cbi	0x05, 4	; 5
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	90 e0       	ldi	r25, 0x00	; 0
    48dc:	00 00       	nop
    48de:	01 96       	adiw	r24, 0x01	; 1
    48e0:	2d e6       	ldi	r18, 0x6D	; 109
    48e2:	80 36       	cpi	r24, 0x60	; 96
    48e4:	92 07       	cpc	r25, r18
    48e6:	d1 f7       	brne	.-12     	; 0x48dc <ATMEGA_set_clk_mode+0x68>
    48e8:	10 92 7a 00 	sts	0x007A, r1
    48ec:	8f ef       	ldi	r24, 0xFF	; 255
    48ee:	80 93 64 00 	sts	0x0064, r24
    48f2:	80 91 68 00 	lds	r24, 0x0068
    48f6:	81 60       	ori	r24, 0x01	; 1
    48f8:	80 93 68 00 	sts	0x0068, r24
    48fc:	80 91 6b 00 	lds	r24, 0x006B
    4900:	84 60       	ori	r24, 0x04	; 4
    4902:	80 93 6b 00 	sts	0x006B, r24
    4906:	78 94       	sei
    4908:	83 b7       	in	r24, 0x33	; 51
    490a:	81 60       	ori	r24, 0x01	; 1
    490c:	83 bf       	out	0x33, r24	; 51
    490e:	88 95       	sleep
    4910:	08 95       	ret
    4912:	82 30       	cpi	r24, 0x02	; 2
    4914:	08 f0       	brcs	.+2      	; 0x4918 <ATMEGA_set_clk_mode+0xa4>
    4916:	78 94       	sei
    4918:	08 95       	ret

0000491a <SPI_open>:
    491a:	0f 93       	push	r16
    491c:	1f 93       	push	r17
    491e:	0e 94 4b 27 	call	0x4e96	; 0x4e96 <__SPI_init>
    4922:	80 e0       	ldi	r24, 0x00	; 0
    4924:	6a e3       	ldi	r22, 0x3A	; 58
    4926:	77 e2       	ldi	r23, 0x27	; 39
    4928:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <SPI_set_config_func>
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	62 e3       	ldi	r22, 0x32	; 50
    4930:	77 e2       	ldi	r23, 0x27	; 39
    4932:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <SPI_set_config_func>
    4936:	82 e0       	ldi	r24, 0x02	; 2
    4938:	6a e2       	ldi	r22, 0x2A	; 42
    493a:	77 e2       	ldi	r23, 0x27	; 39
    493c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <SPI_set_config_func>
    4940:	86 e0       	ldi	r24, 0x06	; 6
    4942:	62 e4       	ldi	r22, 0x42	; 66
    4944:	77 e2       	ldi	r23, 0x27	; 39
    4946:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <SPI_set_config_func>
    494a:	02 e2       	ldi	r16, 0x22	; 34
    494c:	17 e2       	ldi	r17, 0x27	; 39
    494e:	83 e0       	ldi	r24, 0x03	; 3
    4950:	b8 01       	movw	r22, r16
    4952:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <SPI_set_config_func>
    4956:	84 e0       	ldi	r24, 0x04	; 4
    4958:	b8 01       	movw	r22, r16
    495a:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <SPI_set_config_func>
    495e:	85 e0       	ldi	r24, 0x05	; 5
    4960:	b8 01       	movw	r22, r16
    4962:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <SPI_set_config_func>
    4966:	87 e0       	ldi	r24, 0x07	; 7
    4968:	b8 01       	movw	r22, r16
    496a:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <SPI_set_config_func>
    496e:	82 e0       	ldi	r24, 0x02	; 2
    4970:	61 e0       	ldi	r22, 0x01	; 1
    4972:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    4976:	8f ef       	ldi	r24, 0xFF	; 255
    4978:	80 93 15 07 	sts	0x0715, r24
    497c:	87 e0       	ldi	r24, 0x07	; 7
    497e:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <SPI_set_slave_addr>
    4982:	82 e0       	ldi	r24, 0x02	; 2
    4984:	91 e0       	ldi	r25, 0x01	; 1
    4986:	1f 91       	pop	r17
    4988:	0f 91       	pop	r16
    498a:	08 95       	ret

0000498c <SPI_receive>:
    498c:	1f 93       	push	r17
    498e:	16 2f       	mov	r17, r22
    4990:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <SPI_set_slave_addr>
    4994:	82 e0       	ldi	r24, 0x02	; 2
    4996:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    499a:	81 30       	cpi	r24, 0x01	; 1
    499c:	11 f0       	breq	.+4      	; 0x49a2 <SPI_receive+0x16>
    499e:	80 e0       	ldi	r24, 0x00	; 0
    49a0:	05 c0       	rjmp	.+10     	; 0x49ac <SPI_receive+0x20>
    49a2:	1e bd       	out	0x2e, r17	; 46
    49a4:	0d b4       	in	r0, 0x2d	; 45
    49a6:	07 fe       	sbrs	r0, 7
    49a8:	fd cf       	rjmp	.-6      	; 0x49a4 <SPI_receive+0x18>
    49aa:	8e b5       	in	r24, 0x2e	; 46
    49ac:	1f 91       	pop	r17
    49ae:	08 95       	ret

000049b0 <SPI_set_config_func>:
    49b0:	e8 2f       	mov	r30, r24
    49b2:	f0 e0       	ldi	r31, 0x00	; 0
    49b4:	ee 0f       	add	r30, r30
    49b6:	ff 1f       	adc	r31, r31
    49b8:	e6 51       	subi	r30, 0x16	; 22
    49ba:	fc 4f       	sbci	r31, 0xFC	; 252
    49bc:	71 83       	std	Z+1, r23	; 0x01
    49be:	60 83       	st	Z, r22
    49c0:	08 95       	ret

000049c2 <__SPKR_TIMER1_COMPA_vect>:
    49c2:	0e 94 e4 24 	call	0x49c8	; 0x49c8 <SPKR_clk>
    49c6:	08 95       	ret

000049c8 <SPKR_clk>:
    49c8:	80 91 fc 03 	lds	r24, 0x03FC
    49cc:	90 91 fd 03 	lds	r25, 0x03FD
    49d0:	a0 91 fe 03 	lds	r26, 0x03FE
    49d4:	b0 91 ff 03 	lds	r27, 0x03FF
    49d8:	20 91 00 04 	lds	r18, 0x0400
    49dc:	30 91 01 04 	lds	r19, 0x0401
    49e0:	40 91 02 04 	lds	r20, 0x0402
    49e4:	50 91 03 04 	lds	r21, 0x0403
    49e8:	28 0f       	add	r18, r24
    49ea:	39 1f       	adc	r19, r25
    49ec:	4a 1f       	adc	r20, r26
    49ee:	5b 1f       	adc	r21, r27
    49f0:	20 93 fc 03 	sts	0x03FC, r18
    49f4:	30 93 fd 03 	sts	0x03FD, r19
    49f8:	40 93 fe 03 	sts	0x03FE, r20
    49fc:	50 93 ff 03 	sts	0x03FF, r21
    4a00:	80 91 fc 03 	lds	r24, 0x03FC
    4a04:	90 91 fd 03 	lds	r25, 0x03FD
    4a08:	a0 91 fe 03 	lds	r26, 0x03FE
    4a0c:	b0 91 ff 03 	lds	r27, 0x03FF
    4a10:	88 51       	subi	r24, 0x18	; 24
    4a12:	96 4f       	sbci	r25, 0xF6	; 246
    4a14:	a0 40       	sbci	r26, 0x00	; 0
    4a16:	b0 40       	sbci	r27, 0x00	; 0
    4a18:	bc f0       	brlt	.+46     	; 0x4a48 <SPKR_clk+0x80>
    4a1a:	8b b1       	in	r24, 0x0b	; 11
    4a1c:	80 58       	subi	r24, 0x80	; 128
    4a1e:	8b b9       	out	0x0b, r24	; 11
    4a20:	80 91 fc 03 	lds	r24, 0x03FC
    4a24:	90 91 fd 03 	lds	r25, 0x03FD
    4a28:	a0 91 fe 03 	lds	r26, 0x03FE
    4a2c:	b0 91 ff 03 	lds	r27, 0x03FF
    4a30:	88 51       	subi	r24, 0x18	; 24
    4a32:	96 4f       	sbci	r25, 0xF6	; 246
    4a34:	a0 40       	sbci	r26, 0x00	; 0
    4a36:	b0 40       	sbci	r27, 0x00	; 0
    4a38:	80 93 fc 03 	sts	0x03FC, r24
    4a3c:	90 93 fd 03 	sts	0x03FD, r25
    4a40:	a0 93 fe 03 	sts	0x03FE, r26
    4a44:	b0 93 ff 03 	sts	0x03FF, r27
    4a48:	08 95       	ret

00004a4a <__SPKR_close_beep_mode>:
    4a4a:	8a e0       	ldi	r24, 0x0A	; 10
    4a4c:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    4a50:	81 30       	cpi	r24, 0x01	; 1
    4a52:	41 f4       	brne	.+16     	; 0x4a64 <__SPKR_close_beep_mode+0x1a>
    4a54:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__SPKR_close>
    4a58:	10 92 fb 03 	sts	0x03FB, r1
    4a5c:	8a e0       	ldi	r24, 0x0A	; 10
    4a5e:	60 e0       	ldi	r22, 0x00	; 0
    4a60:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    4a64:	08 95       	ret

00004a66 <__SPKR_close_tone_mode>:
    4a66:	89 e0       	ldi	r24, 0x09	; 9
    4a68:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    4a6c:	81 30       	cpi	r24, 0x01	; 1
    4a6e:	d9 f4       	brne	.+54     	; 0x4aa6 <__SPKR_close_tone_mode+0x40>
    4a70:	80 91 fa 03 	lds	r24, 0x03FA
    4a74:	88 23       	and	r24, r24
    4a76:	11 f0       	breq	.+4      	; 0x4a7c <__SPKR_close_tone_mode+0x16>
    4a78:	0e 94 d5 25 	call	0x4baa	; 0x4baa <__SPKR_stop>
    4a7c:	82 e0       	ldi	r24, 0x02	; 2
    4a7e:	0e 94 69 27 	call	0x4ed2	; 0x4ed2 <__SPKR_close>
    4a82:	80 91 08 04 	lds	r24, 0x0408
    4a86:	90 91 09 04 	lds	r25, 0x0409
    4a8a:	00 97       	sbiw	r24, 0x00	; 0
    4a8c:	31 f0       	breq	.+12     	; 0x4a9a <__SPKR_close_tone_mode+0x34>
    4a8e:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <free>
    4a92:	10 92 09 04 	sts	0x0409, r1
    4a96:	10 92 08 04 	sts	0x0408, r1
    4a9a:	10 92 fa 03 	sts	0x03FA, r1
    4a9e:	89 e0       	ldi	r24, 0x09	; 9
    4aa0:	60 e0       	ldi	r22, 0x00	; 0
    4aa2:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    4aa6:	08 95       	ret

00004aa8 <SPKR_close>:
    4aa8:	81 30       	cpi	r24, 0x01	; 1
    4aaa:	29 f0       	breq	.+10     	; 0x4ab6 <SPKR_close+0xe>
    4aac:	82 30       	cpi	r24, 0x02	; 2
    4aae:	29 f4       	brne	.+10     	; 0x4aba <SPKR_close+0x12>
    4ab0:	0e 94 33 25 	call	0x4a66	; 0x4a66 <__SPKR_close_tone_mode>
    4ab4:	08 95       	ret
    4ab6:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <__SPKR_close_beep_mode>
    4aba:	08 95       	ret

00004abc <__SPKR_init>:
    4abc:	98 2f       	mov	r25, r24
    4abe:	80 91 fa 03 	lds	r24, 0x03FA
    4ac2:	88 23       	and	r24, r24
    4ac4:	31 f4       	brne	.+12     	; 0x4ad2 <__SPKR_init+0x16>
    4ac6:	80 91 fb 03 	lds	r24, 0x03FB
    4aca:	88 23       	and	r24, r24
    4acc:	11 f4       	brne	.+4      	; 0x4ad2 <__SPKR_init+0x16>
    4ace:	57 9a       	sbi	0x0a, 7	; 10
    4ad0:	5f 98       	cbi	0x0b, 7	; 11
    4ad2:	80 91 fa 03 	lds	r24, 0x03FA
    4ad6:	88 23       	and	r24, r24
    4ad8:	d1 f4       	brne	.+52     	; 0x4b0e <__SPKR_init+0x52>
    4ada:	92 30       	cpi	r25, 0x02	; 2
    4adc:	c1 f4       	brne	.+48     	; 0x4b0e <__SPKR_init+0x52>
    4ade:	10 92 80 00 	sts	0x0080, r1
    4ae2:	10 92 81 00 	sts	0x0081, r1
    4ae6:	80 91 81 00 	lds	r24, 0x0081
    4aea:	88 60       	ori	r24, 0x08	; 8
    4aec:	80 93 81 00 	sts	0x0081, r24
    4af0:	80 91 81 00 	lds	r24, 0x0081
    4af4:	81 60       	ori	r24, 0x01	; 1
    4af6:	80 93 81 00 	sts	0x0081, r24
    4afa:	10 92 85 00 	sts	0x0085, r1
    4afe:	10 92 84 00 	sts	0x0084, r1
    4b02:	81 e0       	ldi	r24, 0x01	; 1
    4b04:	80 93 89 00 	sts	0x0089, r24
    4b08:	80 e9       	ldi	r24, 0x90	; 144
    4b0a:	80 93 88 00 	sts	0x0088, r24
    4b0e:	08 95       	ret

00004b10 <SPKR_play_beep>:
    4b10:	8f 92       	push	r8
    4b12:	9f 92       	push	r9
    4b14:	af 92       	push	r10
    4b16:	bf 92       	push	r11
    4b18:	cf 92       	push	r12
    4b1a:	df 92       	push	r13
    4b1c:	ef 92       	push	r14
    4b1e:	ff 92       	push	r15
    4b20:	0f 93       	push	r16
    4b22:	1f 93       	push	r17
    4b24:	cf 93       	push	r28
    4b26:	df 93       	push	r29
    4b28:	4b 01       	movw	r8, r22
    4b2a:	5c 01       	movw	r10, r24
    4b2c:	ea 01       	movw	r28, r20
    4b2e:	b9 01       	movw	r22, r18
    4b30:	21 15       	cp	r18, r1
    4b32:	31 05       	cpc	r19, r1
    4b34:	39 f1       	breq	.+78     	; 0x4b84 <SPKR_play_beep+0x74>
    4b36:	9e 01       	movw	r18, r28
    4b38:	44 27       	eor	r20, r20
    4b3a:	37 fd       	sbrc	r19, 7
    4b3c:	40 95       	com	r20
    4b3e:	54 2f       	mov	r21, r20
    4b40:	65 36       	cpi	r22, 0x65	; 101
    4b42:	71 05       	cpc	r23, r1
    4b44:	10 f0       	brcs	.+4      	; 0x4b4a <SPKR_play_beep+0x3a>
    4b46:	64 e6       	ldi	r22, 0x64	; 100
    4b48:	70 e0       	ldi	r23, 0x00	; 0
    4b4a:	80 e0       	ldi	r24, 0x00	; 0
    4b4c:	90 e0       	ldi	r25, 0x00	; 0
    4b4e:	0e 94 b7 32 	call	0x656e	; 0x656e <__mulsi3>
    4b52:	24 e6       	ldi	r18, 0x64	; 100
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	40 e0       	ldi	r20, 0x00	; 0
    4b58:	50 e0       	ldi	r21, 0x00	; 0
    4b5a:	0e 94 d6 32 	call	0x65ac	; 0x65ac <__udivmodsi4>
    4b5e:	79 01       	movw	r14, r18
    4b60:	8a 01       	movw	r16, r20
    4b62:	c5 01       	movw	r24, r10
    4b64:	b4 01       	movw	r22, r8
    4b66:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <SPKR_beep>
    4b6a:	c7 01       	movw	r24, r14
    4b6c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
    4b70:	60 e0       	ldi	r22, 0x00	; 0
    4b72:	70 e0       	ldi	r23, 0x00	; 0
    4b74:	80 e0       	ldi	r24, 0x00	; 0
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	0e 94 52 27 	call	0x4ea4	; 0x4ea4 <SPKR_beep>
    4b7c:	ce 01       	movw	r24, r28
    4b7e:	8e 19       	sub	r24, r14
    4b80:	9f 09       	sbc	r25, r15
    4b82:	04 c0       	rjmp	.+8      	; 0x4b8c <SPKR_play_beep+0x7c>
    4b84:	41 15       	cp	r20, r1
    4b86:	51 05       	cpc	r21, r1
    4b88:	19 f0       	breq	.+6      	; 0x4b90 <SPKR_play_beep+0x80>
    4b8a:	ca 01       	movw	r24, r20
    4b8c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <TMRSRVC_delay>
    4b90:	df 91       	pop	r29
    4b92:	cf 91       	pop	r28
    4b94:	1f 91       	pop	r17
    4b96:	0f 91       	pop	r16
    4b98:	ff 90       	pop	r15
    4b9a:	ef 90       	pop	r14
    4b9c:	df 90       	pop	r13
    4b9e:	cf 90       	pop	r12
    4ba0:	bf 90       	pop	r11
    4ba2:	af 90       	pop	r10
    4ba4:	9f 90       	pop	r9
    4ba6:	8f 90       	pop	r8
    4ba8:	08 95       	ret

00004baa <__SPKR_stop>:
    4baa:	ef e6       	ldi	r30, 0x6F	; 111
    4bac:	f0 e0       	ldi	r31, 0x00	; 0
    4bae:	80 81       	ld	r24, Z
    4bb0:	8d 7f       	andi	r24, 0xFD	; 253
    4bb2:	80 83       	st	Z, r24
    4bb4:	08 95       	ret

00004bb6 <STEPPER_go>:
    4bb6:	98 2f       	mov	r25, r24
    4bb8:	81 e0       	ldi	r24, 0x01	; 1
    4bba:	80 93 fa 06 	sts	0x06FA, r24
    4bbe:	91 30       	cpi	r25, 0x01	; 1
    4bc0:	51 f0       	breq	.+20     	; 0x4bd6 <STEPPER_go+0x20>
    4bc2:	91 30       	cpi	r25, 0x01	; 1
    4bc4:	18 f0       	brcs	.+6      	; 0x4bcc <STEPPER_go+0x16>
    4bc6:	92 30       	cpi	r25, 0x02	; 2
    4bc8:	41 f4       	brne	.+16     	; 0x4bda <STEPPER_go+0x24>
    4bca:	03 c0       	rjmp	.+6      	; 0x4bd2 <STEPPER_go+0x1c>
    4bcc:	10 92 e2 06 	sts	0x06E2, r1
    4bd0:	04 c0       	rjmp	.+8      	; 0x4bda <STEPPER_go+0x24>
    4bd2:	10 92 e2 06 	sts	0x06E2, r1
    4bd6:	10 92 e3 06 	sts	0x06E3, r1
    4bda:	10 92 fa 06 	sts	0x06FA, r1
    4bde:	08 95       	ret

00004be0 <__STEPPER_init>:
    4be0:	3a 9a       	sbi	0x07, 2	; 7
    4be2:	3b 9a       	sbi	0x07, 3	; 7
    4be4:	3c 9a       	sbi	0x07, 4	; 7
    4be6:	3d 9a       	sbi	0x07, 5	; 7
    4be8:	3e 9a       	sbi	0x07, 6	; 7
    4bea:	3f 9a       	sbi	0x07, 7	; 7
    4bec:	88 b1       	in	r24, 0x08	; 8
    4bee:	83 70       	andi	r24, 0x03	; 3
    4bf0:	88 b9       	out	0x08, r24	; 8
    4bf2:	08 95       	ret

00004bf4 <STEPPER_set_stop_mode>:
    4bf4:	98 2f       	mov	r25, r24
    4bf6:	81 e0       	ldi	r24, 0x01	; 1
    4bf8:	80 93 fa 06 	sts	0x06FA, r24
    4bfc:	91 30       	cpi	r25, 0x01	; 1
    4bfe:	51 f0       	breq	.+20     	; 0x4c14 <STEPPER_set_stop_mode+0x20>
    4c00:	91 30       	cpi	r25, 0x01	; 1
    4c02:	18 f0       	brcs	.+6      	; 0x4c0a <STEPPER_set_stop_mode+0x16>
    4c04:	92 30       	cpi	r25, 0x02	; 2
    4c06:	41 f4       	brne	.+16     	; 0x4c18 <STEPPER_set_stop_mode+0x24>
    4c08:	03 c0       	rjmp	.+6      	; 0x4c10 <STEPPER_set_stop_mode+0x1c>
    4c0a:	60 93 e4 06 	sts	0x06E4, r22
    4c0e:	04 c0       	rjmp	.+8      	; 0x4c18 <STEPPER_set_stop_mode+0x24>
    4c10:	60 93 e4 06 	sts	0x06E4, r22
    4c14:	60 93 e5 06 	sts	0x06E5, r22
    4c18:	10 92 fa 06 	sts	0x06FA, r1
    4c1c:	08 95       	ret

00004c1e <STEPPER_setup_decels>:
    4c1e:	0f 93       	push	r16
    4c20:	1f 93       	push	r17
    4c22:	cf 93       	push	r28
    4c24:	df 93       	push	r29
    4c26:	eb 01       	movw	r28, r22
    4c28:	8a 01       	movw	r16, r20
    4c2a:	81 30       	cpi	r24, 0x01	; 1
    4c2c:	01 f1       	breq	.+64     	; 0x4c6e <STEPPER_setup_decels+0x50>
    4c2e:	81 30       	cpi	r24, 0x01	; 1
    4c30:	18 f0       	brcs	.+6      	; 0x4c38 <STEPPER_setup_decels+0x1a>
    4c32:	82 30       	cpi	r24, 0x02	; 2
    4c34:	61 f5       	brne	.+88     	; 0x4c8e <STEPPER_setup_decels+0x70>
    4c36:	0d c0       	rjmp	.+26     	; 0x4c52 <STEPPER_setup_decels+0x34>
    4c38:	80 91 ce 06 	lds	r24, 0x06CE
    4c3c:	90 91 cf 06 	lds	r25, 0x06CF
    4c40:	89 2b       	or	r24, r25
    4c42:	11 f0       	breq	.+4      	; 0x4c48 <STEPPER_setup_decels+0x2a>
    4c44:	80 e0       	ldi	r24, 0x00	; 0
    4c46:	1a c0       	rjmp	.+52     	; 0x4c7c <STEPPER_setup_decels+0x5e>
    4c48:	10 92 db 06 	sts	0x06DB, r1
    4c4c:	10 92 da 06 	sts	0x06DA, r1
    4c50:	1e c0       	rjmp	.+60     	; 0x4c8e <STEPPER_setup_decels+0x70>
    4c52:	80 91 ce 06 	lds	r24, 0x06CE
    4c56:	90 91 cf 06 	lds	r25, 0x06CF
    4c5a:	89 2b       	or	r24, r25
    4c5c:	21 f0       	breq	.+8      	; 0x4c66 <STEPPER_setup_decels+0x48>
    4c5e:	80 e0       	ldi	r24, 0x00	; 0
    4c60:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <STEPPER_set_decel_step_values>
    4c64:	04 c0       	rjmp	.+8      	; 0x4c6e <STEPPER_setup_decels+0x50>
    4c66:	10 92 db 06 	sts	0x06DB, r1
    4c6a:	10 92 da 06 	sts	0x06DA, r1
    4c6e:	80 91 d0 06 	lds	r24, 0x06D0
    4c72:	90 91 d1 06 	lds	r25, 0x06D1
    4c76:	89 2b       	or	r24, r25
    4c78:	31 f0       	breq	.+12     	; 0x4c86 <STEPPER_setup_decels+0x68>
    4c7a:	81 e0       	ldi	r24, 0x01	; 1
    4c7c:	be 01       	movw	r22, r28
    4c7e:	a8 01       	movw	r20, r16
    4c80:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <STEPPER_set_decel_step_values>
    4c84:	04 c0       	rjmp	.+8      	; 0x4c8e <STEPPER_setup_decels+0x70>
    4c86:	10 92 dd 06 	sts	0x06DD, r1
    4c8a:	10 92 dc 06 	sts	0x06DC, r1
    4c8e:	df 91       	pop	r29
    4c90:	cf 91       	pop	r28
    4c92:	1f 91       	pop	r17
    4c94:	0f 91       	pop	r16
    4c96:	08 95       	ret

00004c98 <SYS_init>:
    4c98:	10 92 fd 06 	sts	0x06FD, r1
    4c9c:	10 92 fe 06 	sts	0x06FE, r1
    4ca0:	10 92 02 07 	sts	0x0702, r1
    4ca4:	10 92 ff 06 	sts	0x06FF, r1
    4ca8:	10 92 01 07 	sts	0x0701, r1
    4cac:	10 92 03 07 	sts	0x0703, r1
    4cb0:	10 92 04 07 	sts	0x0704, r1
    4cb4:	10 92 05 07 	sts	0x0705, r1
    4cb8:	10 92 06 07 	sts	0x0706, r1
    4cbc:	10 92 07 07 	sts	0x0707, r1
    4cc0:	10 92 08 07 	sts	0x0708, r1
    4cc4:	10 92 09 07 	sts	0x0709, r1
    4cc8:	10 92 0a 07 	sts	0x070A, r1
    4ccc:	10 92 0b 07 	sts	0x070B, r1
    4cd0:	10 92 0c 07 	sts	0x070C, r1
    4cd4:	10 92 0d 07 	sts	0x070D, r1
    4cd8:	10 92 0e 07 	sts	0x070E, r1
    4cdc:	08 95       	ret

00004cde <TMRSRVC_insert>:
    4cde:	cf 92       	push	r12
    4ce0:	df 92       	push	r13
    4ce2:	ef 92       	push	r14
    4ce4:	ff 92       	push	r15
    4ce6:	0f 93       	push	r16
    4ce8:	1f 93       	push	r17
    4cea:	cf 93       	push	r28
    4cec:	df 93       	push	r29
    4cee:	ec 01       	movw	r28, r24
    4cf0:	80 91 34 07 	lds	r24, 0x0734
    4cf4:	88 23       	and	r24, r24
    4cf6:	39 f4       	brne	.+14     	; 0x4d06 <TMRSRVC_insert+0x28>
    4cf8:	d0 93 36 07 	sts	0x0736, r29
    4cfc:	c0 93 35 07 	sts	0x0735, r28
    4d00:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <TMRSRVC_start>
    4d04:	47 c0       	rjmp	.+142    	; 0x4d94 <TMRSRVC_insert+0xb6>
    4d06:	c0 90 35 07 	lds	r12, 0x0735
    4d0a:	d0 90 36 07 	lds	r13, 0x0736
    4d0e:	00 e0       	ldi	r16, 0x00	; 0
    4d10:	10 e0       	ldi	r17, 0x00	; 0
    4d12:	ee 24       	eor	r14, r14
    4d14:	ff 24       	eor	r15, r15
    4d16:	37 c0       	rjmp	.+110    	; 0x4d86 <TMRSRVC_insert+0xa8>
    4d18:	a8 81       	ld	r26, Y
    4d1a:	b9 81       	ldd	r27, Y+1	; 0x01
    4d1c:	fd 01       	movw	r30, r26
    4d1e:	64 81       	ldd	r22, Z+4	; 0x04
    4d20:	75 81       	ldd	r23, Z+5	; 0x05
    4d22:	f6 01       	movw	r30, r12
    4d24:	40 81       	ld	r20, Z
    4d26:	51 81       	ldd	r21, Z+1	; 0x01
    4d28:	fa 01       	movw	r30, r20
    4d2a:	84 81       	ldd	r24, Z+4	; 0x04
    4d2c:	95 81       	ldd	r25, Z+5	; 0x05
    4d2e:	9b 01       	movw	r18, r22
    4d30:	28 1b       	sub	r18, r24
    4d32:	39 0b       	sbc	r19, r25
    4d34:	37 ff       	sbrs	r19, 7
    4d36:	0f c0       	rjmp	.+30     	; 0x4d56 <TMRSRVC_insert+0x78>
    4d38:	86 1b       	sub	r24, r22
    4d3a:	97 0b       	sbc	r25, r23
    4d3c:	95 83       	std	Z+5, r25	; 0x05
    4d3e:	84 83       	std	Z+4, r24	; 0x04
    4d40:	db 82       	std	Y+3, r13	; 0x03
    4d42:	ca 82       	std	Y+2, r12	; 0x02
    4d44:	01 2b       	or	r16, r17
    4d46:	29 f4       	brne	.+10     	; 0x4d52 <TMRSRVC_insert+0x74>
    4d48:	d0 93 36 07 	sts	0x0736, r29
    4d4c:	c0 93 35 07 	sts	0x0735, r28
    4d50:	21 c0       	rjmp	.+66     	; 0x4d94 <TMRSRVC_insert+0xb6>
    4d52:	f7 01       	movw	r30, r14
    4d54:	0c c0       	rjmp	.+24     	; 0x4d6e <TMRSRVC_insert+0x90>
    4d56:	f6 01       	movw	r30, r12
    4d58:	82 81       	ldd	r24, Z+2	; 0x02
    4d5a:	93 81       	ldd	r25, Z+3	; 0x03
    4d5c:	21 15       	cp	r18, r1
    4d5e:	31 05       	cpc	r19, r1
    4d60:	49 f4       	brne	.+18     	; 0x4d74 <TMRSRVC_insert+0x96>
    4d62:	fd 01       	movw	r30, r26
    4d64:	15 82       	std	Z+5, r1	; 0x05
    4d66:	14 82       	std	Z+4, r1	; 0x04
    4d68:	9b 83       	std	Y+3, r25	; 0x03
    4d6a:	8a 83       	std	Y+2, r24	; 0x02
    4d6c:	f6 01       	movw	r30, r12
    4d6e:	d3 83       	std	Z+3, r29	; 0x03
    4d70:	c2 83       	std	Z+2, r28	; 0x02
    4d72:	10 c0       	rjmp	.+32     	; 0x4d94 <TMRSRVC_insert+0xb6>
    4d74:	fd 01       	movw	r30, r26
    4d76:	35 83       	std	Z+5, r19	; 0x05
    4d78:	24 83       	std	Z+4, r18	; 0x04
    4d7a:	00 97       	sbiw	r24, 0x00	; 0
    4d7c:	b9 f3       	breq	.-18     	; 0x4d6c <TMRSRVC_insert+0x8e>
    4d7e:	0f 5f       	subi	r16, 0xFF	; 255
    4d80:	1f 4f       	sbci	r17, 0xFF	; 255
    4d82:	76 01       	movw	r14, r12
    4d84:	6c 01       	movw	r12, r24
    4d86:	80 91 34 07 	lds	r24, 0x0734
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	08 17       	cp	r16, r24
    4d8e:	19 07       	cpc	r17, r25
    4d90:	18 f2       	brcs	.-122    	; 0x4d18 <TMRSRVC_insert+0x3a>
    4d92:	ec cf       	rjmp	.-40     	; 0x4d6c <TMRSRVC_insert+0x8e>
    4d94:	80 91 34 07 	lds	r24, 0x0734
    4d98:	8f 5f       	subi	r24, 0xFF	; 255
    4d9a:	80 93 34 07 	sts	0x0734, r24
    4d9e:	df 91       	pop	r29
    4da0:	cf 91       	pop	r28
    4da2:	1f 91       	pop	r17
    4da4:	0f 91       	pop	r16
    4da6:	ff 90       	pop	r15
    4da8:	ef 90       	pop	r14
    4daa:	df 90       	pop	r13
    4dac:	cf 90       	pop	r12
    4dae:	08 95       	ret

00004db0 <TMRSRVC_open>:
    4db0:	88 e0       	ldi	r24, 0x08	; 8
    4db2:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    4db6:	88 23       	and	r24, r24
    4db8:	b9 f4       	brne	.+46     	; 0x4de8 <TMRSRVC_open+0x38>
    4dba:	10 92 34 07 	sts	0x0734, r1
    4dbe:	10 92 36 07 	sts	0x0736, r1
    4dc2:	10 92 35 07 	sts	0x0735, r1
    4dc6:	10 92 0a 04 	sts	0x040A, r1
    4dca:	10 92 0b 04 	sts	0x040B, r1
    4dce:	80 e1       	ldi	r24, 0x10	; 16
    4dd0:	62 ef       	ldi	r22, 0xF2	; 242
    4dd2:	77 e2       	ldi	r23, 0x27	; 39
    4dd4:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <__ISR_attach>
    4dd8:	0e 94 f9 27 	call	0x4ff2	; 0x4ff2 <__TMRSRVC_init>
    4ddc:	0e 94 f7 26 	call	0x4dee	; 0x4dee <__TMRSRVC_start>
    4de0:	88 e0       	ldi	r24, 0x08	; 8
    4de2:	61 e0       	ldi	r22, 0x01	; 1
    4de4:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <SYS_set_state>
    4de8:	88 e0       	ldi	r24, 0x08	; 8
    4dea:	91 e0       	ldi	r25, 0x01	; 1
    4dec:	08 95       	ret

00004dee <__TMRSRVC_start>:
    4dee:	ee e6       	ldi	r30, 0x6E	; 110
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	80 81       	ld	r24, Z
    4df4:	82 60       	ori	r24, 0x02	; 2
    4df6:	80 83       	st	Z, r24
    4df8:	08 95       	ret

00004dfa <TMRSRVC_start>:
    4dfa:	81 e0       	ldi	r24, 0x01	; 1
    4dfc:	80 93 0b 04 	sts	0x040B, r24
    4e00:	08 95       	ret

00004e02 <I2C_enable>:
    4e02:	80 91 37 07 	lds	r24, 0x0737
    4e06:	81 30       	cpi	r24, 0x01	; 1
    4e08:	29 f4       	brne	.+10     	; 0x4e14 <I2C_enable+0x12>
    4e0a:	80 91 bc 00 	lds	r24, 0x00BC
    4e0e:	84 60       	ori	r24, 0x04	; 4
    4e10:	80 93 bc 00 	sts	0x00BC, r24
    4e14:	08 95       	ret

00004e16 <__I2C_init>:
    4e16:	38 98       	cbi	0x07, 0	; 7
    4e18:	39 98       	cbi	0x07, 1	; 7
    4e1a:	08 95       	ret

00004e1c <__ISR_attach>:
    4e1c:	80 32       	cpi	r24, 0x20	; 32
    4e1e:	18 f0       	brcs	.+6      	; 0x4e26 <__ISR_attach+0xa>
    4e20:	20 e0       	ldi	r18, 0x00	; 0
    4e22:	30 e0       	ldi	r19, 0x00	; 0
    4e24:	0a c0       	rjmp	.+20     	; 0x4e3a <__ISR_attach+0x1e>
    4e26:	e8 2f       	mov	r30, r24
    4e28:	f0 e0       	ldi	r31, 0x00	; 0
    4e2a:	ee 0f       	add	r30, r30
    4e2c:	ff 1f       	adc	r31, r31
    4e2e:	e6 55       	subi	r30, 0x56	; 86
    4e30:	fc 4f       	sbci	r31, 0xFC	; 252
    4e32:	20 81       	ld	r18, Z
    4e34:	31 81       	ldd	r19, Z+1	; 0x01
    4e36:	71 83       	std	Z+1, r23	; 0x01
    4e38:	60 83       	st	Z, r22
    4e3a:	c9 01       	movw	r24, r18
    4e3c:	08 95       	ret

00004e3e <__ATMEGA_init>:
    4e3e:	24 9a       	sbi	0x04, 4	; 4
    4e40:	2c 9a       	sbi	0x05, 4	; 5
    4e42:	08 95       	ret

00004e44 <SPI_default_config>:
    4e44:	83 e5       	ldi	r24, 0x53	; 83
    4e46:	8c bd       	out	0x2c, r24	; 44
    4e48:	81 e0       	ldi	r24, 0x01	; 1
    4e4a:	8d bd       	out	0x2d, r24	; 45
    4e4c:	8d e0       	ldi	r24, 0x0D	; 13
    4e4e:	8a 95       	dec	r24
    4e50:	f1 f7       	brne	.-4      	; 0x4e4e <SPI_default_config+0xa>
    4e52:	08 95       	ret

00004e54 <SPI_ATtiny0_config>:
    4e54:	83 e5       	ldi	r24, 0x53	; 83
    4e56:	8c bd       	out	0x2c, r24	; 44
    4e58:	1d bc       	out	0x2d, r1	; 45
    4e5a:	84 ef       	ldi	r24, 0xF4	; 244
    4e5c:	91 e0       	ldi	r25, 0x01	; 1
    4e5e:	01 97       	sbiw	r24, 0x01	; 1
    4e60:	f1 f7       	brne	.-4      	; 0x4e5e <SPI_ATtiny0_config+0xa>
    4e62:	08 95       	ret

00004e64 <SPI_PSXC_config>:
    4e64:	8f e7       	ldi	r24, 0x7F	; 127
    4e66:	8c bd       	out	0x2c, r24	; 44
    4e68:	1d bc       	out	0x2d, r1	; 45
    4e6a:	84 ef       	ldi	r24, 0xF4	; 244
    4e6c:	91 e0       	ldi	r25, 0x01	; 1
    4e6e:	01 97       	sbiw	r24, 0x01	; 1
    4e70:	f1 f7       	brne	.-4      	; 0x4e6e <SPI_PSXC_config+0xa>
    4e72:	08 95       	ret

00004e74 <SPI_LCD_config>:
    4e74:	83 e5       	ldi	r24, 0x53	; 83
    4e76:	8c bd       	out	0x2c, r24	; 44
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	8d bd       	out	0x2d, r24	; 45
    4e7c:	8d e0       	ldi	r24, 0x0D	; 13
    4e7e:	8a 95       	dec	r24
    4e80:	f1 f7       	brne	.-4      	; 0x4e7e <SPI_LCD_config+0xa>
    4e82:	08 95       	ret

00004e84 <SPI_FLASH_config>:
    4e84:	83 e5       	ldi	r24, 0x53	; 83
    4e86:	8c bd       	out	0x2c, r24	; 44
    4e88:	81 e0       	ldi	r24, 0x01	; 1
    4e8a:	8d bd       	out	0x2d, r24	; 45
    4e8c:	84 ef       	ldi	r24, 0xF4	; 244
    4e8e:	91 e0       	ldi	r25, 0x01	; 1
    4e90:	01 97       	sbiw	r24, 0x01	; 1
    4e92:	f1 f7       	brne	.-4      	; 0x4e90 <SPI_FLASH_config+0xc>
    4e94:	08 95       	ret

00004e96 <__SPI_init>:
    4e96:	25 9a       	sbi	0x04, 5	; 4
    4e98:	26 98       	cbi	0x04, 6	; 4
    4e9a:	27 9a       	sbi	0x04, 7	; 4
    4e9c:	20 9a       	sbi	0x04, 0	; 4
    4e9e:	21 9a       	sbi	0x04, 1	; 4
    4ea0:	22 9a       	sbi	0x04, 2	; 4
    4ea2:	08 95       	ret

00004ea4 <SPKR_beep>:
    4ea4:	9b 01       	movw	r18, r22
    4ea6:	ac 01       	movw	r20, r24
    4ea8:	80 91 fb 03 	lds	r24, 0x03FB
    4eac:	88 23       	and	r24, r24
    4eae:	81 f0       	breq	.+32     	; 0x4ed0 <SPKR_beep+0x2c>
    4eb0:	da 01       	movw	r26, r20
    4eb2:	c9 01       	movw	r24, r18
    4eb4:	88 0f       	add	r24, r24
    4eb6:	99 1f       	adc	r25, r25
    4eb8:	aa 1f       	adc	r26, r26
    4eba:	bb 1f       	adc	r27, r27
    4ebc:	90 93 07 04 	sts	0x0407, r25
    4ec0:	80 93 06 04 	sts	0x0406, r24
    4ec4:	21 15       	cp	r18, r1
    4ec6:	31 05       	cpc	r19, r1
    4ec8:	41 05       	cpc	r20, r1
    4eca:	51 05       	cpc	r21, r1
    4ecc:	09 f4       	brne	.+2      	; 0x4ed0 <SPKR_beep+0x2c>
    4ece:	5f 98       	cbi	0x0b, 7	; 11
    4ed0:	08 95       	ret

00004ed2 <__SPKR_close>:
    4ed2:	82 30       	cpi	r24, 0x02	; 2
    4ed4:	29 f4       	brne	.+10     	; 0x4ee0 <__SPKR_close+0xe>
    4ed6:	80 91 81 00 	lds	r24, 0x0081
    4eda:	8e 7f       	andi	r24, 0xFE	; 254
    4edc:	80 93 81 00 	sts	0x0081, r24
    4ee0:	80 91 fa 03 	lds	r24, 0x03FA
    4ee4:	81 30       	cpi	r24, 0x01	; 1
    4ee6:	31 f4       	brne	.+12     	; 0x4ef4 <__SPKR_close+0x22>
    4ee8:	80 91 fb 03 	lds	r24, 0x03FB
    4eec:	81 30       	cpi	r24, 0x01	; 1
    4eee:	11 f4       	brne	.+4      	; 0x4ef4 <__SPKR_close+0x22>
    4ef0:	00 00       	nop
    4ef2:	08 95       	ret
    4ef4:	80 91 fa 03 	lds	r24, 0x03FA
    4ef8:	81 30       	cpi	r24, 0x01	; 1
    4efa:	21 f0       	breq	.+8      	; 0x4f04 <__SPKR_close+0x32>
    4efc:	80 91 fb 03 	lds	r24, 0x03FB
    4f00:	81 30       	cpi	r24, 0x01	; 1
    4f02:	11 f4       	brne	.+4      	; 0x4f08 <__SPKR_close+0x36>
    4f04:	5f 98       	cbi	0x0b, 7	; 11
    4f06:	57 98       	cbi	0x0a, 7	; 10
    4f08:	08 95       	ret

00004f0a <STEPPER_set_decel_step_values>:
    4f0a:	ef 92       	push	r14
    4f0c:	ff 92       	push	r15
    4f0e:	0f 93       	push	r16
    4f10:	1f 93       	push	r17
    4f12:	cf 93       	push	r28
    4f14:	df 93       	push	r29
    4f16:	eb 01       	movw	r28, r22
    4f18:	88 23       	and	r24, r24
    4f1a:	21 f0       	breq	.+8      	; 0x4f24 <STEPPER_set_decel_step_values+0x1a>
    4f1c:	81 30       	cpi	r24, 0x01	; 1
    4f1e:	09 f0       	breq	.+2      	; 0x4f22 <STEPPER_set_decel_step_values+0x18>
    4f20:	5a c0       	rjmp	.+180    	; 0x4fd6 <STEPPER_set_decel_step_values+0xcc>
    4f22:	2d c0       	rjmp	.+90     	; 0x4f7e <STEPPER_set_decel_step_values+0x74>
    4f24:	9a 01       	movw	r18, r20
    4f26:	40 e0       	ldi	r20, 0x00	; 0
    4f28:	50 e0       	ldi	r21, 0x00	; 0
    4f2a:	ca 01       	movw	r24, r20
    4f2c:	b9 01       	movw	r22, r18
    4f2e:	0e 94 b7 32 	call	0x656e	; 0x656e <__mulsi3>
    4f32:	20 91 ce 06 	lds	r18, 0x06CE
    4f36:	30 91 cf 06 	lds	r19, 0x06CF
    4f3a:	22 0f       	add	r18, r18
    4f3c:	33 1f       	adc	r19, r19
    4f3e:	40 e0       	ldi	r20, 0x00	; 0
    4f40:	50 e0       	ldi	r21, 0x00	; 0
    4f42:	0e 94 d6 32 	call	0x65ac	; 0x65ac <__udivmodsi4>
    4f46:	79 01       	movw	r14, r18
    4f48:	8a 01       	movw	r16, r20
    4f4a:	a8 01       	movw	r20, r16
    4f4c:	97 01       	movw	r18, r14
    4f4e:	22 0f       	add	r18, r18
    4f50:	33 1f       	adc	r19, r19
    4f52:	44 1f       	adc	r20, r20
    4f54:	55 1f       	adc	r21, r21
    4f56:	ce 01       	movw	r24, r28
    4f58:	a0 e0       	ldi	r26, 0x00	; 0
    4f5a:	b0 e0       	ldi	r27, 0x00	; 0
    4f5c:	82 17       	cp	r24, r18
    4f5e:	93 07       	cpc	r25, r19
    4f60:	a4 07       	cpc	r26, r20
    4f62:	b5 07       	cpc	r27, r21
    4f64:	28 f0       	brcs	.+10     	; 0x4f70 <STEPPER_set_decel_step_values+0x66>
    4f66:	f0 92 db 06 	sts	0x06DB, r15
    4f6a:	e0 92 da 06 	sts	0x06DA, r14
    4f6e:	33 c0       	rjmp	.+102    	; 0x4fd6 <STEPPER_set_decel_step_values+0xcc>
    4f70:	d6 95       	lsr	r29
    4f72:	c7 95       	ror	r28
    4f74:	d0 93 db 06 	sts	0x06DB, r29
    4f78:	c0 93 da 06 	sts	0x06DA, r28
    4f7c:	2c c0       	rjmp	.+88     	; 0x4fd6 <STEPPER_set_decel_step_values+0xcc>
    4f7e:	9a 01       	movw	r18, r20
    4f80:	40 e0       	ldi	r20, 0x00	; 0
    4f82:	50 e0       	ldi	r21, 0x00	; 0
    4f84:	ca 01       	movw	r24, r20
    4f86:	b9 01       	movw	r22, r18
    4f88:	0e 94 b7 32 	call	0x656e	; 0x656e <__mulsi3>
    4f8c:	20 91 d0 06 	lds	r18, 0x06D0
    4f90:	30 91 d1 06 	lds	r19, 0x06D1
    4f94:	22 0f       	add	r18, r18
    4f96:	33 1f       	adc	r19, r19
    4f98:	40 e0       	ldi	r20, 0x00	; 0
    4f9a:	50 e0       	ldi	r21, 0x00	; 0
    4f9c:	0e 94 d6 32 	call	0x65ac	; 0x65ac <__udivmodsi4>
    4fa0:	79 01       	movw	r14, r18
    4fa2:	8a 01       	movw	r16, r20
    4fa4:	a8 01       	movw	r20, r16
    4fa6:	97 01       	movw	r18, r14
    4fa8:	22 0f       	add	r18, r18
    4faa:	33 1f       	adc	r19, r19
    4fac:	44 1f       	adc	r20, r20
    4fae:	55 1f       	adc	r21, r21
    4fb0:	ce 01       	movw	r24, r28
    4fb2:	a0 e0       	ldi	r26, 0x00	; 0
    4fb4:	b0 e0       	ldi	r27, 0x00	; 0
    4fb6:	82 17       	cp	r24, r18
    4fb8:	93 07       	cpc	r25, r19
    4fba:	a4 07       	cpc	r26, r20
    4fbc:	b5 07       	cpc	r27, r21
    4fbe:	28 f0       	brcs	.+10     	; 0x4fca <STEPPER_set_decel_step_values+0xc0>
    4fc0:	f0 92 dd 06 	sts	0x06DD, r15
    4fc4:	e0 92 dc 06 	sts	0x06DC, r14
    4fc8:	06 c0       	rjmp	.+12     	; 0x4fd6 <STEPPER_set_decel_step_values+0xcc>
    4fca:	d6 95       	lsr	r29
    4fcc:	c7 95       	ror	r28
    4fce:	d0 93 dd 06 	sts	0x06DD, r29
    4fd2:	c0 93 dc 06 	sts	0x06DC, r28
    4fd6:	df 91       	pop	r29
    4fd8:	cf 91       	pop	r28
    4fda:	1f 91       	pop	r17
    4fdc:	0f 91       	pop	r16
    4fde:	ff 90       	pop	r15
    4fe0:	ef 90       	pop	r14
    4fe2:	08 95       	ret

00004fe4 <__TIMER0_COMPA_vect>:
    4fe4:	0e 94 02 28 	call	0x5004	; 0x5004 <TMRSRVC_tick>
    4fe8:	0e 94 42 28 	call	0x5084	; 0x5084 <STEPPER_clk>
    4fec:	0e 94 1b 28 	call	0x5036	; 0x5036 <SPKR_beep_clk>
    4ff0:	08 95       	ret

00004ff2 <__TMRSRVC_init>:
    4ff2:	84 b5       	in	r24, 0x24	; 36
    4ff4:	82 60       	ori	r24, 0x02	; 2
    4ff6:	84 bd       	out	0x24, r24	; 36
    4ff8:	85 b5       	in	r24, 0x25	; 37
    4ffa:	84 60       	ori	r24, 0x04	; 4
    4ffc:	85 bd       	out	0x25, r24	; 37
    4ffe:	8e e4       	ldi	r24, 0x4E	; 78
    5000:	87 bd       	out	0x27, r24	; 39
    5002:	08 95       	ret

00005004 <TMRSRVC_tick>:
    5004:	88 e0       	ldi	r24, 0x08	; 8
    5006:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    500a:	88 23       	and	r24, r24
    500c:	11 f4       	brne	.+4      	; 0x5012 <TMRSRVC_tick+0xe>
    500e:	84 e0       	ldi	r24, 0x04	; 4
    5010:	08 95       	ret
    5012:	80 91 0b 04 	lds	r24, 0x040B
    5016:	88 23       	and	r24, r24
    5018:	11 f4       	brne	.+4      	; 0x501e <TMRSRVC_tick+0x1a>
    501a:	83 e0       	ldi	r24, 0x03	; 3
    501c:	08 95       	ret
    501e:	80 91 0a 04 	lds	r24, 0x040A
    5022:	88 23       	and	r24, r24
    5024:	11 f0       	breq	.+4      	; 0x502a <TMRSRVC_tick+0x26>
    5026:	82 e0       	ldi	r24, 0x02	; 2
    5028:	08 95       	ret
    502a:	0e 94 8f 2a 	call	0x551e	; 0x551e <TMRSRVC_process>
    502e:	81 30       	cpi	r24, 0x01	; 1
    5030:	e1 f3       	breq	.-8      	; 0x502a <TMRSRVC_tick+0x26>
    5032:	80 e0       	ldi	r24, 0x00	; 0
    5034:	08 95       	ret

00005036 <SPKR_beep_clk>:
    5036:	80 91 fb 03 	lds	r24, 0x03FB
    503a:	81 30       	cpi	r24, 0x01	; 1
    503c:	11 f5       	brne	.+68     	; 0x5082 <SPKR_beep_clk+0x4c>
    503e:	80 91 04 04 	lds	r24, 0x0404
    5042:	90 91 05 04 	lds	r25, 0x0405
    5046:	20 91 06 04 	lds	r18, 0x0406
    504a:	30 91 07 04 	lds	r19, 0x0407
    504e:	28 0f       	add	r18, r24
    5050:	39 1f       	adc	r19, r25
    5052:	30 93 05 04 	sts	0x0405, r19
    5056:	20 93 04 04 	sts	0x0404, r18
    505a:	80 91 04 04 	lds	r24, 0x0404
    505e:	90 91 05 04 	lds	r25, 0x0405
    5062:	88 5e       	subi	r24, 0xE8	; 232
    5064:	93 40       	sbci	r25, 0x03	; 3
    5066:	6c f0       	brlt	.+26     	; 0x5082 <SPKR_beep_clk+0x4c>
    5068:	8b b1       	in	r24, 0x0b	; 11
    506a:	80 58       	subi	r24, 0x80	; 128
    506c:	8b b9       	out	0x0b, r24	; 11
    506e:	80 91 04 04 	lds	r24, 0x0404
    5072:	90 91 05 04 	lds	r25, 0x0405
    5076:	88 5e       	subi	r24, 0xE8	; 232
    5078:	93 40       	sbci	r25, 0x03	; 3
    507a:	90 93 05 04 	sts	0x0405, r25
    507e:	80 93 04 04 	sts	0x0404, r24
    5082:	08 95       	ret

00005084 <STEPPER_clk>:
    5084:	87 e0       	ldi	r24, 0x07	; 7
    5086:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <SYS_get_state>
    508a:	81 30       	cpi	r24, 0x01	; 1
    508c:	09 f0       	breq	.+2      	; 0x5090 <STEPPER_clk+0xc>
    508e:	aa c0       	rjmp	.+340    	; 0x51e4 <STEPPER_clk+0x160>
    5090:	80 91 ce 06 	lds	r24, 0x06CE
    5094:	90 91 cf 06 	lds	r25, 0x06CF
    5098:	89 2b       	or	r24, r25
    509a:	09 f1       	breq	.+66     	; 0x50de <STEPPER_clk+0x5a>
    509c:	80 91 f2 06 	lds	r24, 0x06F2
    50a0:	90 91 f3 06 	lds	r25, 0x06F3
    50a4:	20 91 ce 06 	lds	r18, 0x06CE
    50a8:	30 91 cf 06 	lds	r19, 0x06CF
    50ac:	82 0f       	add	r24, r18
    50ae:	93 1f       	adc	r25, r19
    50b0:	90 93 f3 06 	sts	0x06F3, r25
    50b4:	80 93 f2 06 	sts	0x06F2, r24
    50b8:	80 91 f2 06 	lds	r24, 0x06F2
    50bc:	90 91 f3 06 	lds	r25, 0x06F3
    50c0:	88 5e       	subi	r24, 0xE8	; 232
    50c2:	93 40       	sbci	r25, 0x03	; 3
    50c4:	a4 f0       	brlt	.+40     	; 0x50ee <STEPPER_clk+0x6a>
    50c6:	80 91 f2 06 	lds	r24, 0x06F2
    50ca:	90 91 f3 06 	lds	r25, 0x06F3
    50ce:	88 5e       	subi	r24, 0xE8	; 232
    50d0:	93 40       	sbci	r25, 0x03	; 3
    50d2:	90 93 f3 06 	sts	0x06F3, r25
    50d6:	80 93 f2 06 	sts	0x06F2, r24
    50da:	41 e0       	ldi	r20, 0x01	; 1
    50dc:	09 c0       	rjmp	.+18     	; 0x50f0 <STEPPER_clk+0x6c>
    50de:	80 91 c6 06 	lds	r24, 0x06C6
    50e2:	90 91 c7 06 	lds	r25, 0x06C7
    50e6:	90 93 cb 06 	sts	0x06CB, r25
    50ea:	80 93 ca 06 	sts	0x06CA, r24
    50ee:	40 e0       	ldi	r20, 0x00	; 0
    50f0:	80 91 d0 06 	lds	r24, 0x06D0
    50f4:	90 91 d1 06 	lds	r25, 0x06D1
    50f8:	89 2b       	or	r24, r25
    50fa:	09 f1       	breq	.+66     	; 0x513e <STEPPER_clk+0xba>
    50fc:	80 91 f4 06 	lds	r24, 0x06F4
    5100:	90 91 f5 06 	lds	r25, 0x06F5
    5104:	20 91 d0 06 	lds	r18, 0x06D0
    5108:	30 91 d1 06 	lds	r19, 0x06D1
    510c:	82 0f       	add	r24, r18
    510e:	93 1f       	adc	r25, r19
    5110:	90 93 f5 06 	sts	0x06F5, r25
    5114:	80 93 f4 06 	sts	0x06F4, r24
    5118:	80 91 f4 06 	lds	r24, 0x06F4
    511c:	90 91 f5 06 	lds	r25, 0x06F5
    5120:	88 5e       	subi	r24, 0xE8	; 232
    5122:	93 40       	sbci	r25, 0x03	; 3
    5124:	a4 f0       	brlt	.+40     	; 0x514e <STEPPER_clk+0xca>
    5126:	80 91 f4 06 	lds	r24, 0x06F4
    512a:	90 91 f5 06 	lds	r25, 0x06F5
    512e:	88 5e       	subi	r24, 0xE8	; 232
    5130:	93 40       	sbci	r25, 0x03	; 3
    5132:	90 93 f5 06 	sts	0x06F5, r25
    5136:	80 93 f4 06 	sts	0x06F4, r24
    513a:	61 e0       	ldi	r22, 0x01	; 1
    513c:	09 c0       	rjmp	.+18     	; 0x5150 <STEPPER_clk+0xcc>
    513e:	80 91 c8 06 	lds	r24, 0x06C8
    5142:	90 91 c9 06 	lds	r25, 0x06C9
    5146:	90 93 cd 06 	sts	0x06CD, r25
    514a:	80 93 cc 06 	sts	0x06CC, r24
    514e:	60 e0       	ldi	r22, 0x00	; 0
    5150:	84 2f       	mov	r24, r20
    5152:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <STEPPER_process_accel>
    5156:	80 91 ee 06 	lds	r24, 0x06EE
    515a:	90 91 ef 06 	lds	r25, 0x06EF
    515e:	20 91 ca 06 	lds	r18, 0x06CA
    5162:	30 91 cb 06 	lds	r19, 0x06CB
    5166:	28 0f       	add	r18, r24
    5168:	39 1f       	adc	r19, r25
    516a:	30 93 ef 06 	sts	0x06EF, r19
    516e:	20 93 ee 06 	sts	0x06EE, r18
    5172:	80 91 ee 06 	lds	r24, 0x06EE
    5176:	90 91 ef 06 	lds	r25, 0x06EF
    517a:	88 5e       	subi	r24, 0xE8	; 232
    517c:	93 40       	sbci	r25, 0x03	; 3
    517e:	14 f4       	brge	.+4      	; 0x5184 <STEPPER_clk+0x100>
    5180:	40 e0       	ldi	r20, 0x00	; 0
    5182:	0b c0       	rjmp	.+22     	; 0x519a <STEPPER_clk+0x116>
    5184:	80 91 ee 06 	lds	r24, 0x06EE
    5188:	90 91 ef 06 	lds	r25, 0x06EF
    518c:	88 5e       	subi	r24, 0xE8	; 232
    518e:	93 40       	sbci	r25, 0x03	; 3
    5190:	90 93 ef 06 	sts	0x06EF, r25
    5194:	80 93 ee 06 	sts	0x06EE, r24
    5198:	41 e0       	ldi	r20, 0x01	; 1
    519a:	80 91 f0 06 	lds	r24, 0x06F0
    519e:	90 91 f1 06 	lds	r25, 0x06F1
    51a2:	20 91 cc 06 	lds	r18, 0x06CC
    51a6:	30 91 cd 06 	lds	r19, 0x06CD
    51aa:	28 0f       	add	r18, r24
    51ac:	39 1f       	adc	r19, r25
    51ae:	30 93 f1 06 	sts	0x06F1, r19
    51b2:	20 93 f0 06 	sts	0x06F0, r18
    51b6:	80 91 f0 06 	lds	r24, 0x06F0
    51ba:	90 91 f1 06 	lds	r25, 0x06F1
    51be:	88 5e       	subi	r24, 0xE8	; 232
    51c0:	93 40       	sbci	r25, 0x03	; 3
    51c2:	14 f4       	brge	.+4      	; 0x51c8 <STEPPER_clk+0x144>
    51c4:	60 e0       	ldi	r22, 0x00	; 0
    51c6:	0b c0       	rjmp	.+22     	; 0x51de <STEPPER_clk+0x15a>
    51c8:	80 91 f0 06 	lds	r24, 0x06F0
    51cc:	90 91 f1 06 	lds	r25, 0x06F1
    51d0:	88 5e       	subi	r24, 0xE8	; 232
    51d2:	93 40       	sbci	r25, 0x03	; 3
    51d4:	90 93 f1 06 	sts	0x06F1, r25
    51d8:	80 93 f0 06 	sts	0x06F0, r24
    51dc:	61 e0       	ldi	r22, 0x01	; 1
    51de:	84 2f       	mov	r24, r20
    51e0:	0e 94 38 29 	call	0x5270	; 0x5270 <STEPPER_process_run_mode>
    51e4:	08 95       	ret

000051e6 <STEPPER_process_accel>:
    51e6:	88 23       	and	r24, r24
    51e8:	f1 f0       	breq	.+60     	; 0x5226 <STEPPER_process_accel+0x40>
    51ea:	20 91 c6 06 	lds	r18, 0x06C6
    51ee:	30 91 c7 06 	lds	r19, 0x06C7
    51f2:	80 91 ca 06 	lds	r24, 0x06CA
    51f6:	90 91 cb 06 	lds	r25, 0x06CB
    51fa:	28 1b       	sub	r18, r24
    51fc:	39 0b       	sbc	r19, r25
    51fe:	12 16       	cp	r1, r18
    5200:	13 06       	cpc	r1, r19
    5202:	34 f4       	brge	.+12     	; 0x5210 <STEPPER_process_accel+0x2a>
    5204:	80 91 ca 06 	lds	r24, 0x06CA
    5208:	90 91 cb 06 	lds	r25, 0x06CB
    520c:	01 96       	adiw	r24, 0x01	; 1
    520e:	07 c0       	rjmp	.+14     	; 0x521e <STEPPER_process_accel+0x38>
    5210:	23 2b       	or	r18, r19
    5212:	49 f0       	breq	.+18     	; 0x5226 <STEPPER_process_accel+0x40>
    5214:	80 91 ca 06 	lds	r24, 0x06CA
    5218:	90 91 cb 06 	lds	r25, 0x06CB
    521c:	01 97       	sbiw	r24, 0x01	; 1
    521e:	90 93 cb 06 	sts	0x06CB, r25
    5222:	80 93 ca 06 	sts	0x06CA, r24
    5226:	66 23       	and	r22, r22
    5228:	11 f1       	breq	.+68     	; 0x526e <STEPPER_process_accel+0x88>
    522a:	20 91 c8 06 	lds	r18, 0x06C8
    522e:	30 91 c9 06 	lds	r19, 0x06C9
    5232:	80 91 cc 06 	lds	r24, 0x06CC
    5236:	90 91 cd 06 	lds	r25, 0x06CD
    523a:	28 1b       	sub	r18, r24
    523c:	39 0b       	sbc	r19, r25
    523e:	12 16       	cp	r1, r18
    5240:	13 06       	cpc	r1, r19
    5242:	54 f4       	brge	.+20     	; 0x5258 <STEPPER_process_accel+0x72>
    5244:	80 91 cc 06 	lds	r24, 0x06CC
    5248:	90 91 cd 06 	lds	r25, 0x06CD
    524c:	01 96       	adiw	r24, 0x01	; 1
    524e:	90 93 cd 06 	sts	0x06CD, r25
    5252:	80 93 cc 06 	sts	0x06CC, r24
    5256:	08 95       	ret
    5258:	23 2b       	or	r18, r19
    525a:	49 f0       	breq	.+18     	; 0x526e <STEPPER_process_accel+0x88>
    525c:	80 91 cc 06 	lds	r24, 0x06CC
    5260:	90 91 cd 06 	lds	r25, 0x06CD
    5264:	01 97       	sbiw	r24, 0x01	; 1
    5266:	90 93 cd 06 	sts	0x06CD, r25
    526a:	80 93 cc 06 	sts	0x06CC, r24
    526e:	08 95       	ret

00005270 <STEPPER_process_run_mode>:
    5270:	0f 93       	push	r16
    5272:	1f 93       	push	r17
    5274:	18 2f       	mov	r17, r24
    5276:	06 2f       	mov	r16, r22
    5278:	80 91 fa 06 	lds	r24, 0x06FA
    527c:	88 23       	and	r24, r24
    527e:	09 f0       	breq	.+2      	; 0x5282 <STEPPER_process_run_mode+0x12>
    5280:	e7 c0       	rjmp	.+462    	; 0x5450 <STEPPER_process_run_mode+0x1e0>
    5282:	80 91 e2 06 	lds	r24, 0x06E2
    5286:	88 23       	and	r24, r24
    5288:	09 f0       	breq	.+2      	; 0x528c <STEPPER_process_run_mode+0x1c>
    528a:	5a c0       	rjmp	.+180    	; 0x5340 <STEPPER_process_run_mode+0xd0>
    528c:	80 91 ca 06 	lds	r24, 0x06CA
    5290:	90 91 cb 06 	lds	r25, 0x06CB
    5294:	89 2b       	or	r24, r25
    5296:	e9 f4       	brne	.+58     	; 0x52d2 <STEPPER_process_run_mode+0x62>
    5298:	80 91 0c 04 	lds	r24, 0x040C
    529c:	83 7e       	andi	r24, 0xE3	; 227
    529e:	80 93 0c 04 	sts	0x040C, r24
    52a2:	10 92 eb 06 	sts	0x06EB, r1
    52a6:	80 91 f6 06 	lds	r24, 0x06F6
    52aa:	88 23       	and	r24, r24
    52ac:	09 f4       	brne	.+2      	; 0x52b0 <STEPPER_process_run_mode+0x40>
    52ae:	5d c0       	rjmp	.+186    	; 0x536a <STEPPER_process_run_mode+0xfa>
    52b0:	60 91 e4 06 	lds	r22, 0x06E4
    52b4:	80 e0       	ldi	r24, 0x00	; 0
    52b6:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <STEPPER_stop>
    52ba:	e0 91 f8 06 	lds	r30, 0x06F8
    52be:	f0 91 f9 06 	lds	r31, 0x06F9
    52c2:	30 97       	sbiw	r30, 0x00	; 0
    52c4:	09 f4       	brne	.+2      	; 0x52c8 <STEPPER_process_run_mode+0x58>
    52c6:	51 c0       	rjmp	.+162    	; 0x536a <STEPPER_process_run_mode+0xfa>
    52c8:	81 e0       	ldi	r24, 0x01	; 1
    52ca:	80 83       	st	Z, r24
    52cc:	10 92 f6 06 	sts	0x06F6, r1
    52d0:	4c c0       	rjmp	.+152    	; 0x536a <STEPPER_process_run_mode+0xfa>
    52d2:	80 91 c4 06 	lds	r24, 0x06C4
    52d6:	81 30       	cpi	r24, 0x01	; 1
    52d8:	41 f4       	brne	.+16     	; 0x52ea <STEPPER_process_run_mode+0x7a>
    52da:	80 91 d6 06 	lds	r24, 0x06D6
    52de:	90 91 d7 06 	lds	r25, 0x06D7
    52e2:	01 97       	sbiw	r24, 0x01	; 1
    52e4:	11 f4       	brne	.+4      	; 0x52ea <STEPPER_process_run_mode+0x7a>
    52e6:	11 e0       	ldi	r17, 0x01	; 1
    52e8:	02 c0       	rjmp	.+4      	; 0x52ee <STEPPER_process_run_mode+0x7e>
    52ea:	11 23       	and	r17, r17
    52ec:	f1 f1       	breq	.+124    	; 0x536a <STEPPER_process_run_mode+0xfa>
    52ee:	e0 91 e9 06 	lds	r30, 0x06E9
    52f2:	f0 e0       	ldi	r31, 0x00	; 0
    52f4:	e1 5d       	subi	r30, 0xD1	; 209
    52f6:	fc 4f       	sbci	r31, 0xFC	; 252
    52f8:	90 91 0c 04 	lds	r25, 0x040C
    52fc:	93 7e       	andi	r25, 0xE3	; 227
    52fe:	80 81       	ld	r24, Z
    5300:	89 2b       	or	r24, r25
    5302:	80 93 0c 04 	sts	0x040C, r24
    5306:	80 91 e7 06 	lds	r24, 0x06E7
    530a:	88 23       	and	r24, r24
    530c:	21 f4       	brne	.+8      	; 0x5316 <STEPPER_process_run_mode+0xa6>
    530e:	80 91 e9 06 	lds	r24, 0x06E9
    5312:	8f 5f       	subi	r24, 0xFF	; 255
    5314:	03 c0       	rjmp	.+6      	; 0x531c <STEPPER_process_run_mode+0xac>
    5316:	80 91 e9 06 	lds	r24, 0x06E9
    531a:	81 50       	subi	r24, 0x01	; 1
    531c:	80 93 e9 06 	sts	0x06E9, r24
    5320:	80 91 e9 06 	lds	r24, 0x06E9
    5324:	83 70       	andi	r24, 0x03	; 3
    5326:	80 93 e9 06 	sts	0x06E9, r24
    532a:	81 e0       	ldi	r24, 0x01	; 1
    532c:	80 93 eb 06 	sts	0x06EB, r24
    5330:	80 91 c4 06 	lds	r24, 0x06C4
    5334:	81 30       	cpi	r24, 0x01	; 1
    5336:	c9 f4       	brne	.+50     	; 0x536a <STEPPER_process_run_mode+0xfa>
    5338:	80 e0       	ldi	r24, 0x00	; 0
    533a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <STEPPER_process_step_mode>
    533e:	15 c0       	rjmp	.+42     	; 0x536a <STEPPER_process_run_mode+0xfa>
    5340:	90 91 0c 04 	lds	r25, 0x040C
    5344:	93 7e       	andi	r25, 0xE3	; 227
    5346:	90 93 0c 04 	sts	0x040C, r25
    534a:	e0 91 e9 06 	lds	r30, 0x06E9
    534e:	f0 e0       	ldi	r31, 0x00	; 0
    5350:	e1 5d       	subi	r30, 0xD1	; 209
    5352:	fc 4f       	sbci	r31, 0xFC	; 252
    5354:	80 81       	ld	r24, Z
    5356:	89 2b       	or	r24, r25
    5358:	80 93 0c 04 	sts	0x040C, r24
    535c:	82 e0       	ldi	r24, 0x02	; 2
    535e:	80 93 eb 06 	sts	0x06EB, r24
    5362:	10 92 cb 06 	sts	0x06CB, r1
    5366:	10 92 ca 06 	sts	0x06CA, r1
    536a:	80 91 e3 06 	lds	r24, 0x06E3
    536e:	88 23       	and	r24, r24
    5370:	09 f0       	breq	.+2      	; 0x5374 <STEPPER_process_run_mode+0x104>
    5372:	59 c0       	rjmp	.+178    	; 0x5426 <STEPPER_process_run_mode+0x1b6>
    5374:	80 91 cc 06 	lds	r24, 0x06CC
    5378:	90 91 cd 06 	lds	r25, 0x06CD
    537c:	89 2b       	or	r24, r25
    537e:	e9 f4       	brne	.+58     	; 0x53ba <STEPPER_process_run_mode+0x14a>
    5380:	80 91 0c 04 	lds	r24, 0x040C
    5384:	8f 71       	andi	r24, 0x1F	; 31
    5386:	80 93 0c 04 	sts	0x040C, r24
    538a:	10 92 ec 06 	sts	0x06EC, r1
    538e:	80 91 f7 06 	lds	r24, 0x06F7
    5392:	88 23       	and	r24, r24
    5394:	09 f4       	brne	.+2      	; 0x5398 <STEPPER_process_run_mode+0x128>
    5396:	5c c0       	rjmp	.+184    	; 0x5450 <STEPPER_process_run_mode+0x1e0>
    5398:	60 91 e5 06 	lds	r22, 0x06E5
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	0e 94 e9 1d 	call	0x3bd2	; 0x3bd2 <STEPPER_stop>
    53a2:	e0 91 f8 06 	lds	r30, 0x06F8
    53a6:	f0 91 f9 06 	lds	r31, 0x06F9
    53aa:	30 97       	sbiw	r30, 0x00	; 0
    53ac:	09 f4       	brne	.+2      	; 0x53b0 <STEPPER_process_run_mode+0x140>
    53ae:	50 c0       	rjmp	.+160    	; 0x5450 <STEPPER_process_run_mode+0x1e0>
    53b0:	81 e0       	ldi	r24, 0x01	; 1
    53b2:	81 83       	std	Z+1, r24	; 0x01
    53b4:	10 92 f7 06 	sts	0x06F7, r1
    53b8:	4b c0       	rjmp	.+150    	; 0x5450 <STEPPER_process_run_mode+0x1e0>
    53ba:	80 91 c5 06 	lds	r24, 0x06C5
    53be:	81 30       	cpi	r24, 0x01	; 1
    53c0:	41 f4       	brne	.+16     	; 0x53d2 <STEPPER_process_run_mode+0x162>
    53c2:	80 91 d8 06 	lds	r24, 0x06D8
    53c6:	90 91 d9 06 	lds	r25, 0x06D9
    53ca:	01 97       	sbiw	r24, 0x01	; 1
    53cc:	11 f4       	brne	.+4      	; 0x53d2 <STEPPER_process_run_mode+0x162>
    53ce:	01 e0       	ldi	r16, 0x01	; 1
    53d0:	02 c0       	rjmp	.+4      	; 0x53d6 <STEPPER_process_run_mode+0x166>
    53d2:	00 23       	and	r16, r16
    53d4:	e9 f1       	breq	.+122    	; 0x5450 <STEPPER_process_run_mode+0x1e0>
    53d6:	e0 91 ea 06 	lds	r30, 0x06EA
    53da:	f0 e0       	ldi	r31, 0x00	; 0
    53dc:	ed 5c       	subi	r30, 0xCD	; 205
    53de:	fc 4f       	sbci	r31, 0xFC	; 252
    53e0:	90 91 0c 04 	lds	r25, 0x040C
    53e4:	9f 71       	andi	r25, 0x1F	; 31
    53e6:	80 81       	ld	r24, Z
    53e8:	89 2b       	or	r24, r25
    53ea:	80 93 0c 04 	sts	0x040C, r24
    53ee:	80 91 e8 06 	lds	r24, 0x06E8
    53f2:	88 23       	and	r24, r24
    53f4:	21 f4       	brne	.+8      	; 0x53fe <STEPPER_process_run_mode+0x18e>
    53f6:	80 91 ea 06 	lds	r24, 0x06EA
    53fa:	8f 5f       	subi	r24, 0xFF	; 255
    53fc:	03 c0       	rjmp	.+6      	; 0x5404 <STEPPER_process_run_mode+0x194>
    53fe:	80 91 ea 06 	lds	r24, 0x06EA
    5402:	81 50       	subi	r24, 0x01	; 1
    5404:	80 93 ea 06 	sts	0x06EA, r24
    5408:	80 91 ea 06 	lds	r24, 0x06EA
    540c:	83 70       	andi	r24, 0x03	; 3
    540e:	80 93 ea 06 	sts	0x06EA, r24
    5412:	81 e0       	ldi	r24, 0x01	; 1
    5414:	80 93 ec 06 	sts	0x06EC, r24
    5418:	80 91 c5 06 	lds	r24, 0x06C5
    541c:	81 30       	cpi	r24, 0x01	; 1
    541e:	c1 f4       	brne	.+48     	; 0x5450 <STEPPER_process_run_mode+0x1e0>
    5420:	0e 94 3b 2a 	call	0x5476	; 0x5476 <STEPPER_process_step_mode>
    5424:	15 c0       	rjmp	.+42     	; 0x5450 <STEPPER_process_run_mode+0x1e0>
    5426:	90 91 0c 04 	lds	r25, 0x040C
    542a:	9f 71       	andi	r25, 0x1F	; 31
    542c:	90 93 0c 04 	sts	0x040C, r25
    5430:	e0 91 ea 06 	lds	r30, 0x06EA
    5434:	f0 e0       	ldi	r31, 0x00	; 0
    5436:	ed 5c       	subi	r30, 0xCD	; 205
    5438:	fc 4f       	sbci	r31, 0xFC	; 252
    543a:	80 81       	ld	r24, Z
    543c:	89 2b       	or	r24, r25
    543e:	80 93 0c 04 	sts	0x040C, r24
    5442:	82 e0       	ldi	r24, 0x02	; 2
    5444:	80 93 ec 06 	sts	0x06EC, r24
    5448:	10 92 cd 06 	sts	0x06CD, r1
    544c:	10 92 cc 06 	sts	0x06CC, r1
    5450:	80 91 ed 06 	lds	r24, 0x06ED
    5454:	88 23       	and	r24, r24
    5456:	31 f4       	brne	.+12     	; 0x5464 <STEPPER_process_run_mode+0x1f4>
    5458:	8c e0       	ldi	r24, 0x0C	; 12
    545a:	94 e0       	ldi	r25, 0x04	; 4
    545c:	61 2f       	mov	r22, r17
    545e:	40 2f       	mov	r20, r16
    5460:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <STEPPER_process_pwm>
    5464:	88 b1       	in	r24, 0x08	; 8
    5466:	83 70       	andi	r24, 0x03	; 3
    5468:	90 91 0c 04 	lds	r25, 0x040C
    546c:	89 2b       	or	r24, r25
    546e:	88 b9       	out	0x08, r24	; 8
    5470:	1f 91       	pop	r17
    5472:	0f 91       	pop	r16
    5474:	08 95       	ret

00005476 <STEPPER_process_step_mode>:
    5476:	88 23       	and	r24, r24
    5478:	21 f0       	breq	.+8      	; 0x5482 <STEPPER_process_step_mode+0xc>
    547a:	81 30       	cpi	r24, 0x01	; 1
    547c:	09 f0       	breq	.+2      	; 0x5480 <STEPPER_process_step_mode+0xa>
    547e:	4e c0       	rjmp	.+156    	; 0x551c <STEPPER_process_step_mode+0xa6>
    5480:	27 c0       	rjmp	.+78     	; 0x54d0 <STEPPER_process_step_mode+0x5a>
    5482:	80 91 d6 06 	lds	r24, 0x06D6
    5486:	90 91 d7 06 	lds	r25, 0x06D7
    548a:	89 2b       	or	r24, r25
    548c:	49 f0       	breq	.+18     	; 0x54a0 <STEPPER_process_step_mode+0x2a>
    548e:	80 91 d6 06 	lds	r24, 0x06D6
    5492:	90 91 d7 06 	lds	r25, 0x06D7
    5496:	01 97       	sbiw	r24, 0x01	; 1
    5498:	90 93 d7 06 	sts	0x06D7, r25
    549c:	80 93 d6 06 	sts	0x06D6, r24
    54a0:	80 91 f6 06 	lds	r24, 0x06F6
    54a4:	88 23       	and	r24, r24
    54a6:	d1 f5       	brne	.+116    	; 0x551c <STEPPER_process_step_mode+0xa6>
    54a8:	20 91 d6 06 	lds	r18, 0x06D6
    54ac:	30 91 d7 06 	lds	r19, 0x06D7
    54b0:	80 91 da 06 	lds	r24, 0x06DA
    54b4:	90 91 db 06 	lds	r25, 0x06DB
    54b8:	28 17       	cp	r18, r24
    54ba:	39 07       	cpc	r19, r25
    54bc:	79 f5       	brne	.+94     	; 0x551c <STEPPER_process_step_mode+0xa6>
    54be:	80 e0       	ldi	r24, 0x00	; 0
    54c0:	60 e0       	ldi	r22, 0x00	; 0
    54c2:	70 e0       	ldi	r23, 0x00	; 0
    54c4:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <STEPPER_set_speed>
    54c8:	81 e0       	ldi	r24, 0x01	; 1
    54ca:	80 93 f6 06 	sts	0x06F6, r24
    54ce:	08 95       	ret
    54d0:	80 91 d8 06 	lds	r24, 0x06D8
    54d4:	90 91 d9 06 	lds	r25, 0x06D9
    54d8:	89 2b       	or	r24, r25
    54da:	49 f0       	breq	.+18     	; 0x54ee <STEPPER_process_step_mode+0x78>
    54dc:	80 91 d8 06 	lds	r24, 0x06D8
    54e0:	90 91 d9 06 	lds	r25, 0x06D9
    54e4:	01 97       	sbiw	r24, 0x01	; 1
    54e6:	90 93 d9 06 	sts	0x06D9, r25
    54ea:	80 93 d8 06 	sts	0x06D8, r24
    54ee:	80 91 f7 06 	lds	r24, 0x06F7
    54f2:	88 23       	and	r24, r24
    54f4:	99 f4       	brne	.+38     	; 0x551c <STEPPER_process_step_mode+0xa6>
    54f6:	20 91 d8 06 	lds	r18, 0x06D8
    54fa:	30 91 d9 06 	lds	r19, 0x06D9
    54fe:	80 91 dc 06 	lds	r24, 0x06DC
    5502:	90 91 dd 06 	lds	r25, 0x06DD
    5506:	28 17       	cp	r18, r24
    5508:	39 07       	cpc	r19, r25
    550a:	41 f4       	brne	.+16     	; 0x551c <STEPPER_process_step_mode+0xa6>
    550c:	81 e0       	ldi	r24, 0x01	; 1
    550e:	60 e0       	ldi	r22, 0x00	; 0
    5510:	70 e0       	ldi	r23, 0x00	; 0
    5512:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <STEPPER_set_speed>
    5516:	81 e0       	ldi	r24, 0x01	; 1
    5518:	80 93 f7 06 	sts	0x06F7, r24
    551c:	08 95       	ret

0000551e <TMRSRVC_process>:
    551e:	ff 92       	push	r15
    5520:	0f 93       	push	r16
    5522:	1f 93       	push	r17
    5524:	cf 93       	push	r28
    5526:	df 93       	push	r29
    5528:	80 91 34 07 	lds	r24, 0x0734
    552c:	88 23       	and	r24, r24
    552e:	09 f4       	brne	.+2      	; 0x5532 <TMRSRVC_process+0x14>
    5530:	59 c0       	rjmp	.+178    	; 0x55e4 <TMRSRVC_process+0xc6>
    5532:	00 91 35 07 	lds	r16, 0x0735
    5536:	10 91 36 07 	lds	r17, 0x0736
    553a:	f8 01       	movw	r30, r16
    553c:	c0 81       	ld	r28, Z
    553e:	d1 81       	ldd	r29, Z+1	; 0x01
    5540:	8c 81       	ldd	r24, Y+4	; 0x04
    5542:	9d 81       	ldd	r25, Y+5	; 0x05
    5544:	01 97       	sbiw	r24, 0x01	; 1
    5546:	9d 83       	std	Y+5, r25	; 0x05
    5548:	8c 83       	std	Y+4, r24	; 0x04
    554a:	18 16       	cp	r1, r24
    554c:	19 06       	cpc	r1, r25
    554e:	0c f4       	brge	.+2      	; 0x5552 <TMRSRVC_process+0x34>
    5550:	49 c0       	rjmp	.+146    	; 0x55e4 <TMRSRVC_process+0xc6>
    5552:	89 81       	ldd	r24, Y+1	; 0x01
    5554:	80 ff       	sbrs	r24, 0
    5556:	05 c0       	rjmp	.+10     	; 0x5562 <TMRSRVC_process+0x44>
    5558:	8e 81       	ldd	r24, Y+6	; 0x06
    555a:	88 23       	and	r24, r24
    555c:	11 f4       	brne	.+4      	; 0x5562 <TMRSRVC_process+0x44>
    555e:	81 e0       	ldi	r24, 0x01	; 1
    5560:	8e 83       	std	Y+6, r24	; 0x06
    5562:	89 81       	ldd	r24, Y+1	; 0x01
    5564:	81 ff       	sbrs	r24, 1
    5566:	03 c0       	rjmp	.+6      	; 0x556e <TMRSRVC_process+0x50>
    5568:	ef 81       	ldd	r30, Y+7	; 0x07
    556a:	f8 85       	ldd	r31, Y+8	; 0x08
    556c:	09 95       	icall
    556e:	80 91 34 07 	lds	r24, 0x0734
    5572:	82 30       	cpi	r24, 0x02	; 2
    5574:	a8 f0       	brcs	.+42     	; 0x55a0 <TMRSRVC_process+0x82>
    5576:	f8 01       	movw	r30, r16
    5578:	82 81       	ldd	r24, Z+2	; 0x02
    557a:	93 81       	ldd	r25, Z+3	; 0x03
    557c:	90 93 36 07 	sts	0x0736, r25
    5580:	80 93 35 07 	sts	0x0735, r24
    5584:	13 82       	std	Z+3, r1	; 0x03
    5586:	12 82       	std	Z+2, r1	; 0x02
    5588:	e0 91 00 00 	lds	r30, 0x0000
    558c:	f0 91 01 00 	lds	r31, 0x0001
    5590:	84 81       	ldd	r24, Z+4	; 0x04
    5592:	95 81       	ldd	r25, Z+5	; 0x05
    5594:	18 16       	cp	r1, r24
    5596:	19 06       	cpc	r1, r25
    5598:	3c f0       	brlt	.+14     	; 0x55a8 <TMRSRVC_process+0x8a>
    559a:	ff 24       	eor	r15, r15
    559c:	f3 94       	inc	r15
    559e:	05 c0       	rjmp	.+10     	; 0x55aa <TMRSRVC_process+0x8c>
    55a0:	10 92 36 07 	sts	0x0736, r1
    55a4:	10 92 35 07 	sts	0x0735, r1
    55a8:	ff 24       	eor	r15, r15
    55aa:	80 91 34 07 	lds	r24, 0x0734
    55ae:	81 50       	subi	r24, 0x01	; 1
    55b0:	80 93 34 07 	sts	0x0734, r24
    55b4:	80 91 34 07 	lds	r24, 0x0734
    55b8:	88 23       	and	r24, r24
    55ba:	11 f4       	brne	.+4      	; 0x55c0 <TMRSRVC_process+0xa2>
    55bc:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <TMRSRVC_stop>
    55c0:	89 81       	ldd	r24, Y+1	; 0x01
    55c2:	82 ff       	sbrs	r24, 2
    55c4:	08 c0       	rjmp	.+16     	; 0x55d6 <TMRSRVC_process+0xb8>
    55c6:	8a 81       	ldd	r24, Y+2	; 0x02
    55c8:	9b 81       	ldd	r25, Y+3	; 0x03
    55ca:	9d 83       	std	Y+5, r25	; 0x05
    55cc:	8c 83       	std	Y+4, r24	; 0x04
    55ce:	c8 01       	movw	r24, r16
    55d0:	0e 94 6f 26 	call	0x4cde	; 0x4cde <TMRSRVC_insert>
    55d4:	08 c0       	rjmp	.+16     	; 0x55e6 <TMRSRVC_process+0xc8>
    55d6:	c8 01       	movw	r24, r16
    55d8:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <free>
    55dc:	89 81       	ldd	r24, Y+1	; 0x01
    55de:	8f 7e       	andi	r24, 0xEF	; 239
    55e0:	89 83       	std	Y+1, r24	; 0x01
    55e2:	01 c0       	rjmp	.+2      	; 0x55e6 <TMRSRVC_process+0xc8>
    55e4:	ff 24       	eor	r15, r15
    55e6:	8f 2d       	mov	r24, r15
    55e8:	df 91       	pop	r29
    55ea:	cf 91       	pop	r28
    55ec:	1f 91       	pop	r17
    55ee:	0f 91       	pop	r16
    55f0:	ff 90       	pop	r15
    55f2:	08 95       	ret

000055f4 <TMRSRVC_stop>:
    55f4:	10 92 0b 04 	sts	0x040B, r1
    55f8:	08 95       	ret

000055fa <STEPPER_process_pwm>:
    55fa:	fc 01       	movw	r30, r24
    55fc:	80 91 eb 06 	lds	r24, 0x06EB
    5600:	82 30       	cpi	r24, 0x02	; 2
    5602:	69 f4       	brne	.+26     	; 0x561e <STEPPER_process_pwm+0x24>
    5604:	80 91 10 04 	lds	r24, 0x0410
    5608:	91 e0       	ldi	r25, 0x01	; 1
    560a:	89 27       	eor	r24, r25
    560c:	80 93 10 04 	sts	0x0410, r24
    5610:	88 23       	and	r24, r24
    5612:	09 f0       	breq	.+2      	; 0x5616 <STEPPER_process_pwm+0x1c>
    5614:	3e c0       	rjmp	.+124    	; 0x5692 <STEPPER_process_pwm+0x98>
    5616:	80 81       	ld	r24, Z
    5618:	83 7e       	andi	r24, 0xE3	; 227
    561a:	80 83       	st	Z, r24
    561c:	3a c0       	rjmp	.+116    	; 0x5692 <STEPPER_process_pwm+0x98>
    561e:	80 91 ca 06 	lds	r24, 0x06CA
    5622:	90 91 cb 06 	lds	r25, 0x06CB
    5626:	c3 97       	sbiw	r24, 0x33	; 51
    5628:	a4 f5       	brge	.+104    	; 0x5692 <STEPPER_process_pwm+0x98>
    562a:	66 23       	and	r22, r22
    562c:	d1 f0       	breq	.+52     	; 0x5662 <STEPPER_process_pwm+0x68>
    562e:	20 91 ca 06 	lds	r18, 0x06CA
    5632:	30 91 cb 06 	lds	r19, 0x06CB
    5636:	80 e6       	ldi	r24, 0x60	; 96
    5638:	90 e0       	ldi	r25, 0x00	; 0
    563a:	bc 01       	movw	r22, r24
    563c:	26 9f       	mul	r18, r22
    563e:	c0 01       	movw	r24, r0
    5640:	27 9f       	mul	r18, r23
    5642:	90 0d       	add	r25, r0
    5644:	36 9f       	mul	r19, r22
    5646:	90 0d       	add	r25, r0
    5648:	11 24       	eor	r1, r1
    564a:	88 0f       	add	r24, r24
    564c:	89 2f       	mov	r24, r25
    564e:	88 1f       	adc	r24, r24
    5650:	99 0b       	sbc	r25, r25
    5652:	90 93 df 06 	sts	0x06DF, r25
    5656:	80 93 de 06 	sts	0x06DE, r24
    565a:	81 e0       	ldi	r24, 0x01	; 1
    565c:	80 93 0e 04 	sts	0x040E, r24
    5660:	18 c0       	rjmp	.+48     	; 0x5692 <STEPPER_process_pwm+0x98>
    5662:	80 91 0e 04 	lds	r24, 0x040E
    5666:	88 23       	and	r24, r24
    5668:	a1 f0       	breq	.+40     	; 0x5692 <STEPPER_process_pwm+0x98>
    566a:	80 91 de 06 	lds	r24, 0x06DE
    566e:	90 91 df 06 	lds	r25, 0x06DF
    5672:	01 97       	sbiw	r24, 0x01	; 1
    5674:	90 93 df 06 	sts	0x06DF, r25
    5678:	80 93 de 06 	sts	0x06DE, r24
    567c:	80 91 de 06 	lds	r24, 0x06DE
    5680:	90 91 df 06 	lds	r25, 0x06DF
    5684:	89 2b       	or	r24, r25
    5686:	29 f4       	brne	.+10     	; 0x5692 <STEPPER_process_pwm+0x98>
    5688:	80 81       	ld	r24, Z
    568a:	83 7e       	andi	r24, 0xE3	; 227
    568c:	80 83       	st	Z, r24
    568e:	10 92 0e 04 	sts	0x040E, r1
    5692:	80 91 ec 06 	lds	r24, 0x06EC
    5696:	82 30       	cpi	r24, 0x02	; 2
    5698:	69 f4       	brne	.+26     	; 0x56b4 <STEPPER_process_pwm+0xba>
    569a:	80 91 0f 04 	lds	r24, 0x040F
    569e:	91 e0       	ldi	r25, 0x01	; 1
    56a0:	89 27       	eor	r24, r25
    56a2:	80 93 0f 04 	sts	0x040F, r24
    56a6:	88 23       	and	r24, r24
    56a8:	09 f0       	breq	.+2      	; 0x56ac <STEPPER_process_pwm+0xb2>
    56aa:	3e c0       	rjmp	.+124    	; 0x5728 <STEPPER_process_pwm+0x12e>
    56ac:	80 81       	ld	r24, Z
    56ae:	8f 71       	andi	r24, 0x1F	; 31
    56b0:	80 83       	st	Z, r24
    56b2:	08 95       	ret
    56b4:	80 91 cc 06 	lds	r24, 0x06CC
    56b8:	90 91 cd 06 	lds	r25, 0x06CD
    56bc:	c3 97       	sbiw	r24, 0x33	; 51
    56be:	a4 f5       	brge	.+104    	; 0x5728 <STEPPER_process_pwm+0x12e>
    56c0:	44 23       	and	r20, r20
    56c2:	d1 f0       	breq	.+52     	; 0x56f8 <STEPPER_process_pwm+0xfe>
    56c4:	20 91 cc 06 	lds	r18, 0x06CC
    56c8:	30 91 cd 06 	lds	r19, 0x06CD
    56cc:	80 e6       	ldi	r24, 0x60	; 96
    56ce:	90 e0       	ldi	r25, 0x00	; 0
    56d0:	ac 01       	movw	r20, r24
    56d2:	24 9f       	mul	r18, r20
    56d4:	c0 01       	movw	r24, r0
    56d6:	25 9f       	mul	r18, r21
    56d8:	90 0d       	add	r25, r0
    56da:	34 9f       	mul	r19, r20
    56dc:	90 0d       	add	r25, r0
    56de:	11 24       	eor	r1, r1
    56e0:	88 0f       	add	r24, r24
    56e2:	89 2f       	mov	r24, r25
    56e4:	88 1f       	adc	r24, r24
    56e6:	99 0b       	sbc	r25, r25
    56e8:	90 93 e1 06 	sts	0x06E1, r25
    56ec:	80 93 e0 06 	sts	0x06E0, r24
    56f0:	81 e0       	ldi	r24, 0x01	; 1
    56f2:	80 93 0d 04 	sts	0x040D, r24
    56f6:	08 95       	ret
    56f8:	80 91 0d 04 	lds	r24, 0x040D
    56fc:	88 23       	and	r24, r24
    56fe:	a1 f0       	breq	.+40     	; 0x5728 <STEPPER_process_pwm+0x12e>
    5700:	80 91 e0 06 	lds	r24, 0x06E0
    5704:	90 91 e1 06 	lds	r25, 0x06E1
    5708:	01 97       	sbiw	r24, 0x01	; 1
    570a:	90 93 e1 06 	sts	0x06E1, r25
    570e:	80 93 e0 06 	sts	0x06E0, r24
    5712:	80 91 e0 06 	lds	r24, 0x06E0
    5716:	90 91 e1 06 	lds	r25, 0x06E1
    571a:	89 2b       	or	r24, r25
    571c:	29 f4       	brne	.+10     	; 0x5728 <STEPPER_process_pwm+0x12e>
    571e:	80 81       	ld	r24, Z
    5720:	8f 71       	andi	r24, 0x1F	; 31
    5722:	80 83       	st	Z, r24
    5724:	10 92 0d 04 	sts	0x040D, r1
    5728:	08 95       	ret

0000572a <__subsf3>:
    572a:	50 58       	subi	r21, 0x80	; 128

0000572c <__addsf3>:
    572c:	bb 27       	eor	r27, r27
    572e:	aa 27       	eor	r26, r26
    5730:	0e d0       	rcall	.+28     	; 0x574e <__addsf3x>
    5732:	75 c1       	rjmp	.+746    	; 0x5a1e <__fp_round>
    5734:	66 d1       	rcall	.+716    	; 0x5a02 <__fp_pscA>
    5736:	30 f0       	brcs	.+12     	; 0x5744 <__addsf3+0x18>
    5738:	6b d1       	rcall	.+726    	; 0x5a10 <__fp_pscB>
    573a:	20 f0       	brcs	.+8      	; 0x5744 <__addsf3+0x18>
    573c:	31 f4       	brne	.+12     	; 0x574a <__addsf3+0x1e>
    573e:	9f 3f       	cpi	r25, 0xFF	; 255
    5740:	11 f4       	brne	.+4      	; 0x5746 <__addsf3+0x1a>
    5742:	1e f4       	brtc	.+6      	; 0x574a <__addsf3+0x1e>
    5744:	5b c1       	rjmp	.+694    	; 0x59fc <__fp_nan>
    5746:	0e f4       	brtc	.+2      	; 0x574a <__addsf3+0x1e>
    5748:	e0 95       	com	r30
    574a:	e7 fb       	bst	r30, 7
    574c:	51 c1       	rjmp	.+674    	; 0x59f0 <__fp_inf>

0000574e <__addsf3x>:
    574e:	e9 2f       	mov	r30, r25
    5750:	77 d1       	rcall	.+750    	; 0x5a40 <__fp_split3>
    5752:	80 f3       	brcs	.-32     	; 0x5734 <__addsf3+0x8>
    5754:	ba 17       	cp	r27, r26
    5756:	62 07       	cpc	r22, r18
    5758:	73 07       	cpc	r23, r19
    575a:	84 07       	cpc	r24, r20
    575c:	95 07       	cpc	r25, r21
    575e:	18 f0       	brcs	.+6      	; 0x5766 <__addsf3x+0x18>
    5760:	71 f4       	brne	.+28     	; 0x577e <__addsf3x+0x30>
    5762:	9e f5       	brtc	.+102    	; 0x57ca <__addsf3x+0x7c>
    5764:	8f c1       	rjmp	.+798    	; 0x5a84 <__fp_zero>
    5766:	0e f4       	brtc	.+2      	; 0x576a <__addsf3x+0x1c>
    5768:	e0 95       	com	r30
    576a:	0b 2e       	mov	r0, r27
    576c:	ba 2f       	mov	r27, r26
    576e:	a0 2d       	mov	r26, r0
    5770:	0b 01       	movw	r0, r22
    5772:	b9 01       	movw	r22, r18
    5774:	90 01       	movw	r18, r0
    5776:	0c 01       	movw	r0, r24
    5778:	ca 01       	movw	r24, r20
    577a:	a0 01       	movw	r20, r0
    577c:	11 24       	eor	r1, r1
    577e:	ff 27       	eor	r31, r31
    5780:	59 1b       	sub	r21, r25
    5782:	99 f0       	breq	.+38     	; 0x57aa <__addsf3x+0x5c>
    5784:	59 3f       	cpi	r21, 0xF9	; 249
    5786:	50 f4       	brcc	.+20     	; 0x579c <__addsf3x+0x4e>
    5788:	50 3e       	cpi	r21, 0xE0	; 224
    578a:	68 f1       	brcs	.+90     	; 0x57e6 <__addsf3x+0x98>
    578c:	1a 16       	cp	r1, r26
    578e:	f0 40       	sbci	r31, 0x00	; 0
    5790:	a2 2f       	mov	r26, r18
    5792:	23 2f       	mov	r18, r19
    5794:	34 2f       	mov	r19, r20
    5796:	44 27       	eor	r20, r20
    5798:	58 5f       	subi	r21, 0xF8	; 248
    579a:	f3 cf       	rjmp	.-26     	; 0x5782 <__addsf3x+0x34>
    579c:	46 95       	lsr	r20
    579e:	37 95       	ror	r19
    57a0:	27 95       	ror	r18
    57a2:	a7 95       	ror	r26
    57a4:	f0 40       	sbci	r31, 0x00	; 0
    57a6:	53 95       	inc	r21
    57a8:	c9 f7       	brne	.-14     	; 0x579c <__addsf3x+0x4e>
    57aa:	7e f4       	brtc	.+30     	; 0x57ca <__addsf3x+0x7c>
    57ac:	1f 16       	cp	r1, r31
    57ae:	ba 0b       	sbc	r27, r26
    57b0:	62 0b       	sbc	r22, r18
    57b2:	73 0b       	sbc	r23, r19
    57b4:	84 0b       	sbc	r24, r20
    57b6:	ba f0       	brmi	.+46     	; 0x57e6 <__addsf3x+0x98>
    57b8:	91 50       	subi	r25, 0x01	; 1
    57ba:	a1 f0       	breq	.+40     	; 0x57e4 <__addsf3x+0x96>
    57bc:	ff 0f       	add	r31, r31
    57be:	bb 1f       	adc	r27, r27
    57c0:	66 1f       	adc	r22, r22
    57c2:	77 1f       	adc	r23, r23
    57c4:	88 1f       	adc	r24, r24
    57c6:	c2 f7       	brpl	.-16     	; 0x57b8 <__addsf3x+0x6a>
    57c8:	0e c0       	rjmp	.+28     	; 0x57e6 <__addsf3x+0x98>
    57ca:	ba 0f       	add	r27, r26
    57cc:	62 1f       	adc	r22, r18
    57ce:	73 1f       	adc	r23, r19
    57d0:	84 1f       	adc	r24, r20
    57d2:	48 f4       	brcc	.+18     	; 0x57e6 <__addsf3x+0x98>
    57d4:	87 95       	ror	r24
    57d6:	77 95       	ror	r23
    57d8:	67 95       	ror	r22
    57da:	b7 95       	ror	r27
    57dc:	f7 95       	ror	r31
    57de:	9e 3f       	cpi	r25, 0xFE	; 254
    57e0:	08 f0       	brcs	.+2      	; 0x57e4 <__addsf3x+0x96>
    57e2:	b3 cf       	rjmp	.-154    	; 0x574a <__addsf3+0x1e>
    57e4:	93 95       	inc	r25
    57e6:	88 0f       	add	r24, r24
    57e8:	08 f0       	brcs	.+2      	; 0x57ec <__addsf3x+0x9e>
    57ea:	99 27       	eor	r25, r25
    57ec:	ee 0f       	add	r30, r30
    57ee:	97 95       	ror	r25
    57f0:	87 95       	ror	r24
    57f2:	08 95       	ret

000057f4 <__cmpsf2>:
    57f4:	d9 d0       	rcall	.+434    	; 0x59a8 <__fp_cmp>
    57f6:	08 f4       	brcc	.+2      	; 0x57fa <__cmpsf2+0x6>
    57f8:	81 e0       	ldi	r24, 0x01	; 1
    57fa:	08 95       	ret

000057fc <__divsf3>:
    57fc:	0c d0       	rcall	.+24     	; 0x5816 <__divsf3x>
    57fe:	0f c1       	rjmp	.+542    	; 0x5a1e <__fp_round>
    5800:	07 d1       	rcall	.+526    	; 0x5a10 <__fp_pscB>
    5802:	40 f0       	brcs	.+16     	; 0x5814 <__divsf3+0x18>
    5804:	fe d0       	rcall	.+508    	; 0x5a02 <__fp_pscA>
    5806:	30 f0       	brcs	.+12     	; 0x5814 <__divsf3+0x18>
    5808:	21 f4       	brne	.+8      	; 0x5812 <__divsf3+0x16>
    580a:	5f 3f       	cpi	r21, 0xFF	; 255
    580c:	19 f0       	breq	.+6      	; 0x5814 <__divsf3+0x18>
    580e:	f0 c0       	rjmp	.+480    	; 0x59f0 <__fp_inf>
    5810:	51 11       	cpse	r21, r1
    5812:	39 c1       	rjmp	.+626    	; 0x5a86 <__fp_szero>
    5814:	f3 c0       	rjmp	.+486    	; 0x59fc <__fp_nan>

00005816 <__divsf3x>:
    5816:	14 d1       	rcall	.+552    	; 0x5a40 <__fp_split3>
    5818:	98 f3       	brcs	.-26     	; 0x5800 <__divsf3+0x4>

0000581a <__divsf3_pse>:
    581a:	99 23       	and	r25, r25
    581c:	c9 f3       	breq	.-14     	; 0x5810 <__divsf3+0x14>
    581e:	55 23       	and	r21, r21
    5820:	b1 f3       	breq	.-20     	; 0x580e <__divsf3+0x12>
    5822:	95 1b       	sub	r25, r21
    5824:	55 0b       	sbc	r21, r21
    5826:	bb 27       	eor	r27, r27
    5828:	aa 27       	eor	r26, r26
    582a:	62 17       	cp	r22, r18
    582c:	73 07       	cpc	r23, r19
    582e:	84 07       	cpc	r24, r20
    5830:	38 f0       	brcs	.+14     	; 0x5840 <__divsf3_pse+0x26>
    5832:	9f 5f       	subi	r25, 0xFF	; 255
    5834:	5f 4f       	sbci	r21, 0xFF	; 255
    5836:	22 0f       	add	r18, r18
    5838:	33 1f       	adc	r19, r19
    583a:	44 1f       	adc	r20, r20
    583c:	aa 1f       	adc	r26, r26
    583e:	a9 f3       	breq	.-22     	; 0x582a <__divsf3_pse+0x10>
    5840:	33 d0       	rcall	.+102    	; 0x58a8 <__divsf3_pse+0x8e>
    5842:	0e 2e       	mov	r0, r30
    5844:	3a f0       	brmi	.+14     	; 0x5854 <__divsf3_pse+0x3a>
    5846:	e0 e8       	ldi	r30, 0x80	; 128
    5848:	30 d0       	rcall	.+96     	; 0x58aa <__divsf3_pse+0x90>
    584a:	91 50       	subi	r25, 0x01	; 1
    584c:	50 40       	sbci	r21, 0x00	; 0
    584e:	e6 95       	lsr	r30
    5850:	00 1c       	adc	r0, r0
    5852:	ca f7       	brpl	.-14     	; 0x5846 <__divsf3_pse+0x2c>
    5854:	29 d0       	rcall	.+82     	; 0x58a8 <__divsf3_pse+0x8e>
    5856:	fe 2f       	mov	r31, r30
    5858:	27 d0       	rcall	.+78     	; 0x58a8 <__divsf3_pse+0x8e>
    585a:	66 0f       	add	r22, r22
    585c:	77 1f       	adc	r23, r23
    585e:	88 1f       	adc	r24, r24
    5860:	bb 1f       	adc	r27, r27
    5862:	26 17       	cp	r18, r22
    5864:	37 07       	cpc	r19, r23
    5866:	48 07       	cpc	r20, r24
    5868:	ab 07       	cpc	r26, r27
    586a:	b0 e8       	ldi	r27, 0x80	; 128
    586c:	09 f0       	breq	.+2      	; 0x5870 <__divsf3_pse+0x56>
    586e:	bb 0b       	sbc	r27, r27
    5870:	80 2d       	mov	r24, r0
    5872:	bf 01       	movw	r22, r30
    5874:	ff 27       	eor	r31, r31
    5876:	93 58       	subi	r25, 0x83	; 131
    5878:	5f 4f       	sbci	r21, 0xFF	; 255
    587a:	2a f0       	brmi	.+10     	; 0x5886 <__divsf3_pse+0x6c>
    587c:	9e 3f       	cpi	r25, 0xFE	; 254
    587e:	51 05       	cpc	r21, r1
    5880:	68 f0       	brcs	.+26     	; 0x589c <__divsf3_pse+0x82>
    5882:	b6 c0       	rjmp	.+364    	; 0x59f0 <__fp_inf>
    5884:	00 c1       	rjmp	.+512    	; 0x5a86 <__fp_szero>
    5886:	5f 3f       	cpi	r21, 0xFF	; 255
    5888:	ec f3       	brlt	.-6      	; 0x5884 <__divsf3_pse+0x6a>
    588a:	98 3e       	cpi	r25, 0xE8	; 232
    588c:	dc f3       	brlt	.-10     	; 0x5884 <__divsf3_pse+0x6a>
    588e:	86 95       	lsr	r24
    5890:	77 95       	ror	r23
    5892:	67 95       	ror	r22
    5894:	b7 95       	ror	r27
    5896:	f7 95       	ror	r31
    5898:	9f 5f       	subi	r25, 0xFF	; 255
    589a:	c9 f7       	brne	.-14     	; 0x588e <__divsf3_pse+0x74>
    589c:	88 0f       	add	r24, r24
    589e:	91 1d       	adc	r25, r1
    58a0:	96 95       	lsr	r25
    58a2:	87 95       	ror	r24
    58a4:	97 f9       	bld	r25, 7
    58a6:	08 95       	ret
    58a8:	e1 e0       	ldi	r30, 0x01	; 1
    58aa:	66 0f       	add	r22, r22
    58ac:	77 1f       	adc	r23, r23
    58ae:	88 1f       	adc	r24, r24
    58b0:	bb 1f       	adc	r27, r27
    58b2:	62 17       	cp	r22, r18
    58b4:	73 07       	cpc	r23, r19
    58b6:	84 07       	cpc	r24, r20
    58b8:	ba 07       	cpc	r27, r26
    58ba:	20 f0       	brcs	.+8      	; 0x58c4 <__divsf3_pse+0xaa>
    58bc:	62 1b       	sub	r22, r18
    58be:	73 0b       	sbc	r23, r19
    58c0:	84 0b       	sbc	r24, r20
    58c2:	ba 0b       	sbc	r27, r26
    58c4:	ee 1f       	adc	r30, r30
    58c6:	88 f7       	brcc	.-30     	; 0x58aa <__divsf3_pse+0x90>
    58c8:	e0 95       	com	r30
    58ca:	08 95       	ret

000058cc <__fixsfsi>:
    58cc:	04 d0       	rcall	.+8      	; 0x58d6 <__fixunssfsi>
    58ce:	68 94       	set
    58d0:	b1 11       	cpse	r27, r1
    58d2:	d9 c0       	rjmp	.+434    	; 0x5a86 <__fp_szero>
    58d4:	08 95       	ret

000058d6 <__fixunssfsi>:
    58d6:	bc d0       	rcall	.+376    	; 0x5a50 <__fp_splitA>
    58d8:	88 f0       	brcs	.+34     	; 0x58fc <__fixunssfsi+0x26>
    58da:	9f 57       	subi	r25, 0x7F	; 127
    58dc:	90 f0       	brcs	.+36     	; 0x5902 <__fixunssfsi+0x2c>
    58de:	b9 2f       	mov	r27, r25
    58e0:	99 27       	eor	r25, r25
    58e2:	b7 51       	subi	r27, 0x17	; 23
    58e4:	a0 f0       	brcs	.+40     	; 0x590e <__fixunssfsi+0x38>
    58e6:	d1 f0       	breq	.+52     	; 0x591c <__fixunssfsi+0x46>
    58e8:	66 0f       	add	r22, r22
    58ea:	77 1f       	adc	r23, r23
    58ec:	88 1f       	adc	r24, r24
    58ee:	99 1f       	adc	r25, r25
    58f0:	1a f0       	brmi	.+6      	; 0x58f8 <__fixunssfsi+0x22>
    58f2:	ba 95       	dec	r27
    58f4:	c9 f7       	brne	.-14     	; 0x58e8 <__fixunssfsi+0x12>
    58f6:	12 c0       	rjmp	.+36     	; 0x591c <__fixunssfsi+0x46>
    58f8:	b1 30       	cpi	r27, 0x01	; 1
    58fa:	81 f0       	breq	.+32     	; 0x591c <__fixunssfsi+0x46>
    58fc:	c3 d0       	rcall	.+390    	; 0x5a84 <__fp_zero>
    58fe:	b1 e0       	ldi	r27, 0x01	; 1
    5900:	08 95       	ret
    5902:	c0 c0       	rjmp	.+384    	; 0x5a84 <__fp_zero>
    5904:	67 2f       	mov	r22, r23
    5906:	78 2f       	mov	r23, r24
    5908:	88 27       	eor	r24, r24
    590a:	b8 5f       	subi	r27, 0xF8	; 248
    590c:	39 f0       	breq	.+14     	; 0x591c <__fixunssfsi+0x46>
    590e:	b9 3f       	cpi	r27, 0xF9	; 249
    5910:	cc f3       	brlt	.-14     	; 0x5904 <__fixunssfsi+0x2e>
    5912:	86 95       	lsr	r24
    5914:	77 95       	ror	r23
    5916:	67 95       	ror	r22
    5918:	b3 95       	inc	r27
    591a:	d9 f7       	brne	.-10     	; 0x5912 <__fixunssfsi+0x3c>
    591c:	3e f4       	brtc	.+14     	; 0x592c <__fixunssfsi+0x56>
    591e:	90 95       	com	r25
    5920:	80 95       	com	r24
    5922:	70 95       	com	r23
    5924:	61 95       	neg	r22
    5926:	7f 4f       	sbci	r23, 0xFF	; 255
    5928:	8f 4f       	sbci	r24, 0xFF	; 255
    592a:	9f 4f       	sbci	r25, 0xFF	; 255
    592c:	08 95       	ret

0000592e <__floatunsisf>:
    592e:	e8 94       	clt
    5930:	09 c0       	rjmp	.+18     	; 0x5944 <__floatsisf+0x12>

00005932 <__floatsisf>:
    5932:	97 fb       	bst	r25, 7
    5934:	3e f4       	brtc	.+14     	; 0x5944 <__floatsisf+0x12>
    5936:	90 95       	com	r25
    5938:	80 95       	com	r24
    593a:	70 95       	com	r23
    593c:	61 95       	neg	r22
    593e:	7f 4f       	sbci	r23, 0xFF	; 255
    5940:	8f 4f       	sbci	r24, 0xFF	; 255
    5942:	9f 4f       	sbci	r25, 0xFF	; 255
    5944:	99 23       	and	r25, r25
    5946:	a9 f0       	breq	.+42     	; 0x5972 <__floatsisf+0x40>
    5948:	f9 2f       	mov	r31, r25
    594a:	96 e9       	ldi	r25, 0x96	; 150
    594c:	bb 27       	eor	r27, r27
    594e:	93 95       	inc	r25
    5950:	f6 95       	lsr	r31
    5952:	87 95       	ror	r24
    5954:	77 95       	ror	r23
    5956:	67 95       	ror	r22
    5958:	b7 95       	ror	r27
    595a:	f1 11       	cpse	r31, r1
    595c:	f8 cf       	rjmp	.-16     	; 0x594e <__floatsisf+0x1c>
    595e:	fa f4       	brpl	.+62     	; 0x599e <__floatsisf+0x6c>
    5960:	bb 0f       	add	r27, r27
    5962:	11 f4       	brne	.+4      	; 0x5968 <__floatsisf+0x36>
    5964:	60 ff       	sbrs	r22, 0
    5966:	1b c0       	rjmp	.+54     	; 0x599e <__floatsisf+0x6c>
    5968:	6f 5f       	subi	r22, 0xFF	; 255
    596a:	7f 4f       	sbci	r23, 0xFF	; 255
    596c:	8f 4f       	sbci	r24, 0xFF	; 255
    596e:	9f 4f       	sbci	r25, 0xFF	; 255
    5970:	16 c0       	rjmp	.+44     	; 0x599e <__floatsisf+0x6c>
    5972:	88 23       	and	r24, r24
    5974:	11 f0       	breq	.+4      	; 0x597a <__floatsisf+0x48>
    5976:	96 e9       	ldi	r25, 0x96	; 150
    5978:	11 c0       	rjmp	.+34     	; 0x599c <__floatsisf+0x6a>
    597a:	77 23       	and	r23, r23
    597c:	21 f0       	breq	.+8      	; 0x5986 <__floatsisf+0x54>
    597e:	9e e8       	ldi	r25, 0x8E	; 142
    5980:	87 2f       	mov	r24, r23
    5982:	76 2f       	mov	r23, r22
    5984:	05 c0       	rjmp	.+10     	; 0x5990 <__floatsisf+0x5e>
    5986:	66 23       	and	r22, r22
    5988:	71 f0       	breq	.+28     	; 0x59a6 <__floatsisf+0x74>
    598a:	96 e8       	ldi	r25, 0x86	; 134
    598c:	86 2f       	mov	r24, r22
    598e:	70 e0       	ldi	r23, 0x00	; 0
    5990:	60 e0       	ldi	r22, 0x00	; 0
    5992:	2a f0       	brmi	.+10     	; 0x599e <__floatsisf+0x6c>
    5994:	9a 95       	dec	r25
    5996:	66 0f       	add	r22, r22
    5998:	77 1f       	adc	r23, r23
    599a:	88 1f       	adc	r24, r24
    599c:	da f7       	brpl	.-10     	; 0x5994 <__floatsisf+0x62>
    599e:	88 0f       	add	r24, r24
    59a0:	96 95       	lsr	r25
    59a2:	87 95       	ror	r24
    59a4:	97 f9       	bld	r25, 7
    59a6:	08 95       	ret

000059a8 <__fp_cmp>:
    59a8:	99 0f       	add	r25, r25
    59aa:	00 08       	sbc	r0, r0
    59ac:	55 0f       	add	r21, r21
    59ae:	aa 0b       	sbc	r26, r26
    59b0:	e0 e8       	ldi	r30, 0x80	; 128
    59b2:	fe ef       	ldi	r31, 0xFE	; 254
    59b4:	16 16       	cp	r1, r22
    59b6:	17 06       	cpc	r1, r23
    59b8:	e8 07       	cpc	r30, r24
    59ba:	f9 07       	cpc	r31, r25
    59bc:	c0 f0       	brcs	.+48     	; 0x59ee <__fp_cmp+0x46>
    59be:	12 16       	cp	r1, r18
    59c0:	13 06       	cpc	r1, r19
    59c2:	e4 07       	cpc	r30, r20
    59c4:	f5 07       	cpc	r31, r21
    59c6:	98 f0       	brcs	.+38     	; 0x59ee <__fp_cmp+0x46>
    59c8:	62 1b       	sub	r22, r18
    59ca:	73 0b       	sbc	r23, r19
    59cc:	84 0b       	sbc	r24, r20
    59ce:	95 0b       	sbc	r25, r21
    59d0:	39 f4       	brne	.+14     	; 0x59e0 <__fp_cmp+0x38>
    59d2:	0a 26       	eor	r0, r26
    59d4:	61 f0       	breq	.+24     	; 0x59ee <__fp_cmp+0x46>
    59d6:	23 2b       	or	r18, r19
    59d8:	24 2b       	or	r18, r20
    59da:	25 2b       	or	r18, r21
    59dc:	21 f4       	brne	.+8      	; 0x59e6 <__fp_cmp+0x3e>
    59de:	08 95       	ret
    59e0:	0a 26       	eor	r0, r26
    59e2:	09 f4       	brne	.+2      	; 0x59e6 <__fp_cmp+0x3e>
    59e4:	a1 40       	sbci	r26, 0x01	; 1
    59e6:	a6 95       	lsr	r26
    59e8:	8f ef       	ldi	r24, 0xFF	; 255
    59ea:	81 1d       	adc	r24, r1
    59ec:	81 1d       	adc	r24, r1
    59ee:	08 95       	ret

000059f0 <__fp_inf>:
    59f0:	97 f9       	bld	r25, 7
    59f2:	9f 67       	ori	r25, 0x7F	; 127
    59f4:	80 e8       	ldi	r24, 0x80	; 128
    59f6:	70 e0       	ldi	r23, 0x00	; 0
    59f8:	60 e0       	ldi	r22, 0x00	; 0
    59fa:	08 95       	ret

000059fc <__fp_nan>:
    59fc:	9f ef       	ldi	r25, 0xFF	; 255
    59fe:	80 ec       	ldi	r24, 0xC0	; 192
    5a00:	08 95       	ret

00005a02 <__fp_pscA>:
    5a02:	00 24       	eor	r0, r0
    5a04:	0a 94       	dec	r0
    5a06:	16 16       	cp	r1, r22
    5a08:	17 06       	cpc	r1, r23
    5a0a:	18 06       	cpc	r1, r24
    5a0c:	09 06       	cpc	r0, r25
    5a0e:	08 95       	ret

00005a10 <__fp_pscB>:
    5a10:	00 24       	eor	r0, r0
    5a12:	0a 94       	dec	r0
    5a14:	12 16       	cp	r1, r18
    5a16:	13 06       	cpc	r1, r19
    5a18:	14 06       	cpc	r1, r20
    5a1a:	05 06       	cpc	r0, r21
    5a1c:	08 95       	ret

00005a1e <__fp_round>:
    5a1e:	09 2e       	mov	r0, r25
    5a20:	03 94       	inc	r0
    5a22:	00 0c       	add	r0, r0
    5a24:	11 f4       	brne	.+4      	; 0x5a2a <__fp_round+0xc>
    5a26:	88 23       	and	r24, r24
    5a28:	52 f0       	brmi	.+20     	; 0x5a3e <__fp_round+0x20>
    5a2a:	bb 0f       	add	r27, r27
    5a2c:	40 f4       	brcc	.+16     	; 0x5a3e <__fp_round+0x20>
    5a2e:	bf 2b       	or	r27, r31
    5a30:	11 f4       	brne	.+4      	; 0x5a36 <__fp_round+0x18>
    5a32:	60 ff       	sbrs	r22, 0
    5a34:	04 c0       	rjmp	.+8      	; 0x5a3e <__fp_round+0x20>
    5a36:	6f 5f       	subi	r22, 0xFF	; 255
    5a38:	7f 4f       	sbci	r23, 0xFF	; 255
    5a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    5a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a3e:	08 95       	ret

00005a40 <__fp_split3>:
    5a40:	57 fd       	sbrc	r21, 7
    5a42:	90 58       	subi	r25, 0x80	; 128
    5a44:	44 0f       	add	r20, r20
    5a46:	55 1f       	adc	r21, r21
    5a48:	59 f0       	breq	.+22     	; 0x5a60 <__fp_splitA+0x10>
    5a4a:	5f 3f       	cpi	r21, 0xFF	; 255
    5a4c:	71 f0       	breq	.+28     	; 0x5a6a <__fp_splitA+0x1a>
    5a4e:	47 95       	ror	r20

00005a50 <__fp_splitA>:
    5a50:	88 0f       	add	r24, r24
    5a52:	97 fb       	bst	r25, 7
    5a54:	99 1f       	adc	r25, r25
    5a56:	61 f0       	breq	.+24     	; 0x5a70 <__fp_splitA+0x20>
    5a58:	9f 3f       	cpi	r25, 0xFF	; 255
    5a5a:	79 f0       	breq	.+30     	; 0x5a7a <__fp_splitA+0x2a>
    5a5c:	87 95       	ror	r24
    5a5e:	08 95       	ret
    5a60:	12 16       	cp	r1, r18
    5a62:	13 06       	cpc	r1, r19
    5a64:	14 06       	cpc	r1, r20
    5a66:	55 1f       	adc	r21, r21
    5a68:	f2 cf       	rjmp	.-28     	; 0x5a4e <__fp_split3+0xe>
    5a6a:	46 95       	lsr	r20
    5a6c:	f1 df       	rcall	.-30     	; 0x5a50 <__fp_splitA>
    5a6e:	08 c0       	rjmp	.+16     	; 0x5a80 <__fp_splitA+0x30>
    5a70:	16 16       	cp	r1, r22
    5a72:	17 06       	cpc	r1, r23
    5a74:	18 06       	cpc	r1, r24
    5a76:	99 1f       	adc	r25, r25
    5a78:	f1 cf       	rjmp	.-30     	; 0x5a5c <__fp_splitA+0xc>
    5a7a:	86 95       	lsr	r24
    5a7c:	71 05       	cpc	r23, r1
    5a7e:	61 05       	cpc	r22, r1
    5a80:	08 94       	sec
    5a82:	08 95       	ret

00005a84 <__fp_zero>:
    5a84:	e8 94       	clt

00005a86 <__fp_szero>:
    5a86:	bb 27       	eor	r27, r27
    5a88:	66 27       	eor	r22, r22
    5a8a:	77 27       	eor	r23, r23
    5a8c:	cb 01       	movw	r24, r22
    5a8e:	97 f9       	bld	r25, 7
    5a90:	08 95       	ret

00005a92 <__gesf2>:
    5a92:	8a df       	rcall	.-236    	; 0x59a8 <__fp_cmp>
    5a94:	08 f4       	brcc	.+2      	; 0x5a98 <__gesf2+0x6>
    5a96:	8f ef       	ldi	r24, 0xFF	; 255
    5a98:	08 95       	ret

00005a9a <lrint>:
    5a9a:	da df       	rcall	.-76     	; 0x5a50 <__fp_splitA>
    5a9c:	a8 f1       	brcs	.+106    	; 0x5b08 <lrint+0x6e>
    5a9e:	9e 57       	subi	r25, 0x7E	; 126
    5aa0:	a8 f1       	brcs	.+106    	; 0x5b0c <lrint+0x72>
    5aa2:	98 51       	subi	r25, 0x18	; 24
    5aa4:	60 f0       	brcs	.+24     	; 0x5abe <lrint+0x24>
    5aa6:	39 f1       	breq	.+78     	; 0x5af6 <lrint+0x5c>
    5aa8:	98 30       	cpi	r25, 0x08	; 8
    5aaa:	70 f5       	brcc	.+92     	; 0x5b08 <lrint+0x6e>
    5aac:	09 2e       	mov	r0, r25
    5aae:	99 27       	eor	r25, r25
    5ab0:	66 0f       	add	r22, r22
    5ab2:	77 1f       	adc	r23, r23
    5ab4:	88 1f       	adc	r24, r24
    5ab6:	99 1f       	adc	r25, r25
    5ab8:	0a 94       	dec	r0
    5aba:	d1 f7       	brne	.-12     	; 0x5ab0 <lrint+0x16>
    5abc:	1c c0       	rjmp	.+56     	; 0x5af6 <lrint+0x5c>
    5abe:	bb 27       	eor	r27, r27
    5ac0:	99 3f       	cpi	r25, 0xF9	; 249
    5ac2:	4c f4       	brge	.+18     	; 0x5ad6 <lrint+0x3c>
    5ac4:	b1 11       	cpse	r27, r1
    5ac6:	b1 e0       	ldi	r27, 0x01	; 1
    5ac8:	b6 2b       	or	r27, r22
    5aca:	67 2f       	mov	r22, r23
    5acc:	78 2f       	mov	r23, r24
    5ace:	88 27       	eor	r24, r24
    5ad0:	98 5f       	subi	r25, 0xF8	; 248
    5ad2:	b1 f7       	brne	.-20     	; 0x5ac0 <lrint+0x26>
    5ad4:	08 c0       	rjmp	.+16     	; 0x5ae6 <lrint+0x4c>
    5ad6:	86 95       	lsr	r24
    5ad8:	77 95       	ror	r23
    5ada:	67 95       	ror	r22
    5adc:	b7 95       	ror	r27
    5ade:	08 f4       	brcc	.+2      	; 0x5ae2 <lrint+0x48>
    5ae0:	b1 60       	ori	r27, 0x01	; 1
    5ae2:	93 95       	inc	r25
    5ae4:	c1 f7       	brne	.-16     	; 0x5ad6 <lrint+0x3c>
    5ae6:	bb 0f       	add	r27, r27
    5ae8:	30 f4       	brcc	.+12     	; 0x5af6 <lrint+0x5c>
    5aea:	11 f4       	brne	.+4      	; 0x5af0 <lrint+0x56>
    5aec:	60 ff       	sbrs	r22, 0
    5aee:	03 c0       	rjmp	.+6      	; 0x5af6 <lrint+0x5c>
    5af0:	6f 5f       	subi	r22, 0xFF	; 255
    5af2:	7f 4f       	sbci	r23, 0xFF	; 255
    5af4:	8f 4f       	sbci	r24, 0xFF	; 255
    5af6:	3e f4       	brtc	.+14     	; 0x5b06 <lrint+0x6c>
    5af8:	90 95       	com	r25
    5afa:	80 95       	com	r24
    5afc:	70 95       	com	r23
    5afe:	61 95       	neg	r22
    5b00:	7f 4f       	sbci	r23, 0xFF	; 255
    5b02:	8f 4f       	sbci	r24, 0xFF	; 255
    5b04:	9f 4f       	sbci	r25, 0xFF	; 255
    5b06:	08 95       	ret
    5b08:	68 94       	set
    5b0a:	bd cf       	rjmp	.-134    	; 0x5a86 <__fp_szero>
    5b0c:	bb cf       	rjmp	.-138    	; 0x5a84 <__fp_zero>

00005b0e <__mulsf3>:
    5b0e:	0b d0       	rcall	.+22     	; 0x5b26 <__mulsf3x>
    5b10:	86 cf       	rjmp	.-244    	; 0x5a1e <__fp_round>
    5b12:	77 df       	rcall	.-274    	; 0x5a02 <__fp_pscA>
    5b14:	28 f0       	brcs	.+10     	; 0x5b20 <__mulsf3+0x12>
    5b16:	7c df       	rcall	.-264    	; 0x5a10 <__fp_pscB>
    5b18:	18 f0       	brcs	.+6      	; 0x5b20 <__mulsf3+0x12>
    5b1a:	95 23       	and	r25, r21
    5b1c:	09 f0       	breq	.+2      	; 0x5b20 <__mulsf3+0x12>
    5b1e:	68 cf       	rjmp	.-304    	; 0x59f0 <__fp_inf>
    5b20:	6d cf       	rjmp	.-294    	; 0x59fc <__fp_nan>
    5b22:	11 24       	eor	r1, r1
    5b24:	b0 cf       	rjmp	.-160    	; 0x5a86 <__fp_szero>

00005b26 <__mulsf3x>:
    5b26:	8c df       	rcall	.-232    	; 0x5a40 <__fp_split3>
    5b28:	a0 f3       	brcs	.-24     	; 0x5b12 <__mulsf3+0x4>

00005b2a <__mulsf3_pse>:
    5b2a:	95 9f       	mul	r25, r21
    5b2c:	d1 f3       	breq	.-12     	; 0x5b22 <__mulsf3+0x14>
    5b2e:	95 0f       	add	r25, r21
    5b30:	50 e0       	ldi	r21, 0x00	; 0
    5b32:	55 1f       	adc	r21, r21
    5b34:	62 9f       	mul	r22, r18
    5b36:	f0 01       	movw	r30, r0
    5b38:	72 9f       	mul	r23, r18
    5b3a:	bb 27       	eor	r27, r27
    5b3c:	f0 0d       	add	r31, r0
    5b3e:	b1 1d       	adc	r27, r1
    5b40:	63 9f       	mul	r22, r19
    5b42:	aa 27       	eor	r26, r26
    5b44:	f0 0d       	add	r31, r0
    5b46:	b1 1d       	adc	r27, r1
    5b48:	aa 1f       	adc	r26, r26
    5b4a:	64 9f       	mul	r22, r20
    5b4c:	66 27       	eor	r22, r22
    5b4e:	b0 0d       	add	r27, r0
    5b50:	a1 1d       	adc	r26, r1
    5b52:	66 1f       	adc	r22, r22
    5b54:	82 9f       	mul	r24, r18
    5b56:	22 27       	eor	r18, r18
    5b58:	b0 0d       	add	r27, r0
    5b5a:	a1 1d       	adc	r26, r1
    5b5c:	62 1f       	adc	r22, r18
    5b5e:	73 9f       	mul	r23, r19
    5b60:	b0 0d       	add	r27, r0
    5b62:	a1 1d       	adc	r26, r1
    5b64:	62 1f       	adc	r22, r18
    5b66:	83 9f       	mul	r24, r19
    5b68:	a0 0d       	add	r26, r0
    5b6a:	61 1d       	adc	r22, r1
    5b6c:	22 1f       	adc	r18, r18
    5b6e:	74 9f       	mul	r23, r20
    5b70:	33 27       	eor	r19, r19
    5b72:	a0 0d       	add	r26, r0
    5b74:	61 1d       	adc	r22, r1
    5b76:	23 1f       	adc	r18, r19
    5b78:	84 9f       	mul	r24, r20
    5b7a:	60 0d       	add	r22, r0
    5b7c:	21 1d       	adc	r18, r1
    5b7e:	82 2f       	mov	r24, r18
    5b80:	76 2f       	mov	r23, r22
    5b82:	6a 2f       	mov	r22, r26
    5b84:	11 24       	eor	r1, r1
    5b86:	9f 57       	subi	r25, 0x7F	; 127
    5b88:	50 40       	sbci	r21, 0x00	; 0
    5b8a:	8a f0       	brmi	.+34     	; 0x5bae <__mulsf3_pse+0x84>
    5b8c:	e1 f0       	breq	.+56     	; 0x5bc6 <__mulsf3_pse+0x9c>
    5b8e:	88 23       	and	r24, r24
    5b90:	4a f0       	brmi	.+18     	; 0x5ba4 <__mulsf3_pse+0x7a>
    5b92:	ee 0f       	add	r30, r30
    5b94:	ff 1f       	adc	r31, r31
    5b96:	bb 1f       	adc	r27, r27
    5b98:	66 1f       	adc	r22, r22
    5b9a:	77 1f       	adc	r23, r23
    5b9c:	88 1f       	adc	r24, r24
    5b9e:	91 50       	subi	r25, 0x01	; 1
    5ba0:	50 40       	sbci	r21, 0x00	; 0
    5ba2:	a9 f7       	brne	.-22     	; 0x5b8e <__mulsf3_pse+0x64>
    5ba4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ba6:	51 05       	cpc	r21, r1
    5ba8:	70 f0       	brcs	.+28     	; 0x5bc6 <__mulsf3_pse+0x9c>
    5baa:	22 cf       	rjmp	.-444    	; 0x59f0 <__fp_inf>
    5bac:	6c cf       	rjmp	.-296    	; 0x5a86 <__fp_szero>
    5bae:	5f 3f       	cpi	r21, 0xFF	; 255
    5bb0:	ec f3       	brlt	.-6      	; 0x5bac <__mulsf3_pse+0x82>
    5bb2:	98 3e       	cpi	r25, 0xE8	; 232
    5bb4:	dc f3       	brlt	.-10     	; 0x5bac <__mulsf3_pse+0x82>
    5bb6:	86 95       	lsr	r24
    5bb8:	77 95       	ror	r23
    5bba:	67 95       	ror	r22
    5bbc:	b7 95       	ror	r27
    5bbe:	f7 95       	ror	r31
    5bc0:	e7 95       	ror	r30
    5bc2:	9f 5f       	subi	r25, 0xFF	; 255
    5bc4:	c1 f7       	brne	.-16     	; 0x5bb6 <__mulsf3_pse+0x8c>
    5bc6:	fe 2b       	or	r31, r30
    5bc8:	88 0f       	add	r24, r24
    5bca:	91 1d       	adc	r25, r1
    5bcc:	96 95       	lsr	r25
    5bce:	87 95       	ror	r24
    5bd0:	97 f9       	bld	r25, 7
    5bd2:	08 95       	ret

00005bd4 <pow>:
    5bd4:	fa 01       	movw	r30, r20
    5bd6:	ee 0f       	add	r30, r30
    5bd8:	ff 1f       	adc	r31, r31
    5bda:	30 96       	adiw	r30, 0x00	; 0
    5bdc:	21 05       	cpc	r18, r1
    5bde:	31 05       	cpc	r19, r1
    5be0:	99 f1       	breq	.+102    	; 0x5c48 <pow+0x74>
    5be2:	61 15       	cp	r22, r1
    5be4:	71 05       	cpc	r23, r1
    5be6:	61 f4       	brne	.+24     	; 0x5c00 <pow+0x2c>
    5be8:	80 38       	cpi	r24, 0x80	; 128
    5bea:	bf e3       	ldi	r27, 0x3F	; 63
    5bec:	9b 07       	cpc	r25, r27
    5bee:	49 f1       	breq	.+82     	; 0x5c42 <pow+0x6e>
    5bf0:	68 94       	set
    5bf2:	90 38       	cpi	r25, 0x80	; 128
    5bf4:	81 05       	cpc	r24, r1
    5bf6:	61 f0       	breq	.+24     	; 0x5c10 <pow+0x3c>
    5bf8:	80 38       	cpi	r24, 0x80	; 128
    5bfa:	bf ef       	ldi	r27, 0xFF	; 255
    5bfc:	9b 07       	cpc	r25, r27
    5bfe:	41 f0       	breq	.+16     	; 0x5c10 <pow+0x3c>
    5c00:	99 23       	and	r25, r25
    5c02:	42 f5       	brpl	.+80     	; 0x5c54 <pow+0x80>
    5c04:	ff 3f       	cpi	r31, 0xFF	; 255
    5c06:	e1 05       	cpc	r30, r1
    5c08:	31 05       	cpc	r19, r1
    5c0a:	21 05       	cpc	r18, r1
    5c0c:	11 f1       	breq	.+68     	; 0x5c52 <pow+0x7e>
    5c0e:	e8 94       	clt
    5c10:	08 94       	sec
    5c12:	e7 95       	ror	r30
    5c14:	d9 01       	movw	r26, r18
    5c16:	aa 23       	and	r26, r26
    5c18:	29 f4       	brne	.+10     	; 0x5c24 <pow+0x50>
    5c1a:	ab 2f       	mov	r26, r27
    5c1c:	be 2f       	mov	r27, r30
    5c1e:	f8 5f       	subi	r31, 0xF8	; 248
    5c20:	d0 f3       	brcs	.-12     	; 0x5c16 <pow+0x42>
    5c22:	10 c0       	rjmp	.+32     	; 0x5c44 <pow+0x70>
    5c24:	ff 5f       	subi	r31, 0xFF	; 255
    5c26:	70 f4       	brcc	.+28     	; 0x5c44 <pow+0x70>
    5c28:	a6 95       	lsr	r26
    5c2a:	e0 f7       	brcc	.-8      	; 0x5c24 <pow+0x50>
    5c2c:	f7 39       	cpi	r31, 0x97	; 151
    5c2e:	50 f0       	brcs	.+20     	; 0x5c44 <pow+0x70>
    5c30:	19 f0       	breq	.+6      	; 0x5c38 <pow+0x64>
    5c32:	ff 3a       	cpi	r31, 0xAF	; 175
    5c34:	38 f4       	brcc	.+14     	; 0x5c44 <pow+0x70>
    5c36:	9f 77       	andi	r25, 0x7F	; 127
    5c38:	9f 93       	push	r25
    5c3a:	0c d0       	rcall	.+24     	; 0x5c54 <pow+0x80>
    5c3c:	0f 90       	pop	r0
    5c3e:	07 fc       	sbrc	r0, 7
    5c40:	90 58       	subi	r25, 0x80	; 128
    5c42:	08 95       	ret
    5c44:	3e f0       	brts	.+14     	; 0x5c54 <pow+0x80>
    5c46:	da ce       	rjmp	.-588    	; 0x59fc <__fp_nan>
    5c48:	60 e0       	ldi	r22, 0x00	; 0
    5c4a:	70 e0       	ldi	r23, 0x00	; 0
    5c4c:	80 e8       	ldi	r24, 0x80	; 128
    5c4e:	9f e3       	ldi	r25, 0x3F	; 63
    5c50:	08 95       	ret
    5c52:	4f e7       	ldi	r20, 0x7F	; 127
    5c54:	9f 77       	andi	r25, 0x7F	; 127
    5c56:	5f 93       	push	r21
    5c58:	4f 93       	push	r20
    5c5a:	3f 93       	push	r19
    5c5c:	2f 93       	push	r18
    5c5e:	9e d0       	rcall	.+316    	; 0x5d9c <log>
    5c60:	2f 91       	pop	r18
    5c62:	3f 91       	pop	r19
    5c64:	4f 91       	pop	r20
    5c66:	5f 91       	pop	r21
    5c68:	52 df       	rcall	.-348    	; 0x5b0e <__mulsf3>
    5c6a:	05 c0       	rjmp	.+10     	; 0x5c76 <exp>
    5c6c:	19 f4       	brne	.+6      	; 0x5c74 <pow+0xa0>
    5c6e:	0e f0       	brts	.+2      	; 0x5c72 <pow+0x9e>
    5c70:	bf ce       	rjmp	.-642    	; 0x59f0 <__fp_inf>
    5c72:	08 cf       	rjmp	.-496    	; 0x5a84 <__fp_zero>
    5c74:	c3 ce       	rjmp	.-634    	; 0x59fc <__fp_nan>

00005c76 <exp>:
    5c76:	ec de       	rcall	.-552    	; 0x5a50 <__fp_splitA>
    5c78:	c8 f3       	brcs	.-14     	; 0x5c6c <pow+0x98>
    5c7a:	96 38       	cpi	r25, 0x86	; 134
    5c7c:	c0 f7       	brcc	.-16     	; 0x5c6e <pow+0x9a>
    5c7e:	07 f8       	bld	r0, 7
    5c80:	0f 92       	push	r0
    5c82:	e8 94       	clt
    5c84:	2b e3       	ldi	r18, 0x3B	; 59
    5c86:	3a ea       	ldi	r19, 0xAA	; 170
    5c88:	48 eb       	ldi	r20, 0xB8	; 184
    5c8a:	5f e7       	ldi	r21, 0x7F	; 127
    5c8c:	4e df       	rcall	.-356    	; 0x5b2a <__mulsf3_pse>
    5c8e:	0f 92       	push	r0
    5c90:	0f 92       	push	r0
    5c92:	0f 92       	push	r0
    5c94:	4d b7       	in	r20, 0x3d	; 61
    5c96:	5e b7       	in	r21, 0x3e	; 62
    5c98:	0f 92       	push	r0
    5c9a:	c0 d0       	rcall	.+384    	; 0x5e1c <modf>
    5c9c:	e8 ec       	ldi	r30, 0xC8	; 200
    5c9e:	f0 e0       	ldi	r31, 0x00	; 0
    5ca0:	16 d0       	rcall	.+44     	; 0x5cce <__fp_powser>
    5ca2:	4f 91       	pop	r20
    5ca4:	5f 91       	pop	r21
    5ca6:	ef 91       	pop	r30
    5ca8:	ff 91       	pop	r31
    5caa:	e5 95       	asr	r30
    5cac:	ee 1f       	adc	r30, r30
    5cae:	ff 1f       	adc	r31, r31
    5cb0:	49 f0       	breq	.+18     	; 0x5cc4 <exp+0x4e>
    5cb2:	fe 57       	subi	r31, 0x7E	; 126
    5cb4:	e0 68       	ori	r30, 0x80	; 128
    5cb6:	44 27       	eor	r20, r20
    5cb8:	ee 0f       	add	r30, r30
    5cba:	44 1f       	adc	r20, r20
    5cbc:	fa 95       	dec	r31
    5cbe:	e1 f7       	brne	.-8      	; 0x5cb8 <exp+0x42>
    5cc0:	41 95       	neg	r20
    5cc2:	55 0b       	sbc	r21, r21
    5cc4:	32 d0       	rcall	.+100    	; 0x5d2a <ldexp>
    5cc6:	0f 90       	pop	r0
    5cc8:	07 fe       	sbrs	r0, 7
    5cca:	26 c0       	rjmp	.+76     	; 0x5d18 <inverse>
    5ccc:	08 95       	ret

00005cce <__fp_powser>:
    5cce:	df 93       	push	r29
    5cd0:	cf 93       	push	r28
    5cd2:	1f 93       	push	r17
    5cd4:	0f 93       	push	r16
    5cd6:	ff 92       	push	r15
    5cd8:	ef 92       	push	r14
    5cda:	df 92       	push	r13
    5cdc:	7b 01       	movw	r14, r22
    5cde:	8c 01       	movw	r16, r24
    5ce0:	68 94       	set
    5ce2:	05 c0       	rjmp	.+10     	; 0x5cee <__fp_powser+0x20>
    5ce4:	da 2e       	mov	r13, r26
    5ce6:	ef 01       	movw	r28, r30
    5ce8:	1e df       	rcall	.-452    	; 0x5b26 <__mulsf3x>
    5cea:	fe 01       	movw	r30, r28
    5cec:	e8 94       	clt
    5cee:	a5 91       	lpm	r26, Z+
    5cf0:	25 91       	lpm	r18, Z+
    5cf2:	35 91       	lpm	r19, Z+
    5cf4:	45 91       	lpm	r20, Z+
    5cf6:	55 91       	lpm	r21, Z+
    5cf8:	ae f3       	brts	.-22     	; 0x5ce4 <__fp_powser+0x16>
    5cfa:	ef 01       	movw	r28, r30
    5cfc:	28 dd       	rcall	.-1456   	; 0x574e <__addsf3x>
    5cfe:	fe 01       	movw	r30, r28
    5d00:	97 01       	movw	r18, r14
    5d02:	a8 01       	movw	r20, r16
    5d04:	da 94       	dec	r13
    5d06:	79 f7       	brne	.-34     	; 0x5ce6 <__fp_powser+0x18>
    5d08:	df 90       	pop	r13
    5d0a:	ef 90       	pop	r14
    5d0c:	ff 90       	pop	r15
    5d0e:	0f 91       	pop	r16
    5d10:	1f 91       	pop	r17
    5d12:	cf 91       	pop	r28
    5d14:	df 91       	pop	r29
    5d16:	08 95       	ret

00005d18 <inverse>:
    5d18:	9b 01       	movw	r18, r22
    5d1a:	ac 01       	movw	r20, r24
    5d1c:	60 e0       	ldi	r22, 0x00	; 0
    5d1e:	70 e0       	ldi	r23, 0x00	; 0
    5d20:	80 e8       	ldi	r24, 0x80	; 128
    5d22:	9f e3       	ldi	r25, 0x3F	; 63
    5d24:	6b cd       	rjmp	.-1322   	; 0x57fc <__divsf3>
    5d26:	64 ce       	rjmp	.-824    	; 0x59f0 <__fp_inf>
    5d28:	ac c0       	rjmp	.+344    	; 0x5e82 <__fp_mpack>

00005d2a <ldexp>:
    5d2a:	92 de       	rcall	.-732    	; 0x5a50 <__fp_splitA>
    5d2c:	e8 f3       	brcs	.-6      	; 0x5d28 <inverse+0x10>
    5d2e:	99 23       	and	r25, r25
    5d30:	d9 f3       	breq	.-10     	; 0x5d28 <inverse+0x10>
    5d32:	94 0f       	add	r25, r20
    5d34:	51 1d       	adc	r21, r1
    5d36:	bb f3       	brvs	.-18     	; 0x5d26 <inverse+0xe>
    5d38:	91 50       	subi	r25, 0x01	; 1
    5d3a:	50 40       	sbci	r21, 0x00	; 0
    5d3c:	94 f0       	brlt	.+36     	; 0x5d62 <ldexp+0x38>
    5d3e:	59 f0       	breq	.+22     	; 0x5d56 <ldexp+0x2c>
    5d40:	88 23       	and	r24, r24
    5d42:	32 f0       	brmi	.+12     	; 0x5d50 <ldexp+0x26>
    5d44:	66 0f       	add	r22, r22
    5d46:	77 1f       	adc	r23, r23
    5d48:	88 1f       	adc	r24, r24
    5d4a:	91 50       	subi	r25, 0x01	; 1
    5d4c:	50 40       	sbci	r21, 0x00	; 0
    5d4e:	c1 f7       	brne	.-16     	; 0x5d40 <ldexp+0x16>
    5d50:	9e 3f       	cpi	r25, 0xFE	; 254
    5d52:	51 05       	cpc	r21, r1
    5d54:	44 f7       	brge	.-48     	; 0x5d26 <inverse+0xe>
    5d56:	88 0f       	add	r24, r24
    5d58:	91 1d       	adc	r25, r1
    5d5a:	96 95       	lsr	r25
    5d5c:	87 95       	ror	r24
    5d5e:	97 f9       	bld	r25, 7
    5d60:	08 95       	ret
    5d62:	5f 3f       	cpi	r21, 0xFF	; 255
    5d64:	ac f0       	brlt	.+42     	; 0x5d90 <ldexp+0x66>
    5d66:	98 3e       	cpi	r25, 0xE8	; 232
    5d68:	9c f0       	brlt	.+38     	; 0x5d90 <ldexp+0x66>
    5d6a:	bb 27       	eor	r27, r27
    5d6c:	86 95       	lsr	r24
    5d6e:	77 95       	ror	r23
    5d70:	67 95       	ror	r22
    5d72:	b7 95       	ror	r27
    5d74:	08 f4       	brcc	.+2      	; 0x5d78 <ldexp+0x4e>
    5d76:	b1 60       	ori	r27, 0x01	; 1
    5d78:	93 95       	inc	r25
    5d7a:	c1 f7       	brne	.-16     	; 0x5d6c <ldexp+0x42>
    5d7c:	bb 0f       	add	r27, r27
    5d7e:	58 f7       	brcc	.-42     	; 0x5d56 <ldexp+0x2c>
    5d80:	11 f4       	brne	.+4      	; 0x5d86 <ldexp+0x5c>
    5d82:	60 ff       	sbrs	r22, 0
    5d84:	e8 cf       	rjmp	.-48     	; 0x5d56 <ldexp+0x2c>
    5d86:	6f 5f       	subi	r22, 0xFF	; 255
    5d88:	7f 4f       	sbci	r23, 0xFF	; 255
    5d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8e:	e3 cf       	rjmp	.-58     	; 0x5d56 <ldexp+0x2c>
    5d90:	7a ce       	rjmp	.-780    	; 0x5a86 <__fp_szero>
    5d92:	0e f0       	brts	.+2      	; 0x5d96 <ldexp+0x6c>
    5d94:	76 c0       	rjmp	.+236    	; 0x5e82 <__fp_mpack>
    5d96:	32 ce       	rjmp	.-924    	; 0x59fc <__fp_nan>
    5d98:	68 94       	set
    5d9a:	2a ce       	rjmp	.-940    	; 0x59f0 <__fp_inf>

00005d9c <log>:
    5d9c:	59 de       	rcall	.-846    	; 0x5a50 <__fp_splitA>
    5d9e:	c8 f3       	brcs	.-14     	; 0x5d92 <ldexp+0x68>
    5da0:	99 23       	and	r25, r25
    5da2:	d1 f3       	breq	.-12     	; 0x5d98 <ldexp+0x6e>
    5da4:	c6 f3       	brts	.-16     	; 0x5d96 <ldexp+0x6c>
    5da6:	df 93       	push	r29
    5da8:	cf 93       	push	r28
    5daa:	1f 93       	push	r17
    5dac:	0f 93       	push	r16
    5dae:	ff 92       	push	r15
    5db0:	c9 2f       	mov	r28, r25
    5db2:	dd 27       	eor	r29, r29
    5db4:	88 23       	and	r24, r24
    5db6:	2a f0       	brmi	.+10     	; 0x5dc2 <log+0x26>
    5db8:	21 97       	sbiw	r28, 0x01	; 1
    5dba:	66 0f       	add	r22, r22
    5dbc:	77 1f       	adc	r23, r23
    5dbe:	88 1f       	adc	r24, r24
    5dc0:	da f7       	brpl	.-10     	; 0x5db8 <log+0x1c>
    5dc2:	20 e0       	ldi	r18, 0x00	; 0
    5dc4:	30 e0       	ldi	r19, 0x00	; 0
    5dc6:	40 e8       	ldi	r20, 0x80	; 128
    5dc8:	5f eb       	ldi	r21, 0xBF	; 191
    5dca:	9f e3       	ldi	r25, 0x3F	; 63
    5dcc:	88 39       	cpi	r24, 0x98	; 152
    5dce:	20 f0       	brcs	.+8      	; 0x5dd8 <log+0x3c>
    5dd0:	80 3e       	cpi	r24, 0xE0	; 224
    5dd2:	30 f0       	brcs	.+12     	; 0x5de0 <log+0x44>
    5dd4:	21 96       	adiw	r28, 0x01	; 1
    5dd6:	8f 77       	andi	r24, 0x7F	; 127
    5dd8:	a9 dc       	rcall	.-1710   	; 0x572c <__addsf3>
    5dda:	e0 ef       	ldi	r30, 0xF0	; 240
    5ddc:	f0 e0       	ldi	r31, 0x00	; 0
    5dde:	03 c0       	rjmp	.+6      	; 0x5de6 <log+0x4a>
    5de0:	a5 dc       	rcall	.-1718   	; 0x572c <__addsf3>
    5de2:	ed e1       	ldi	r30, 0x1D	; 29
    5de4:	f1 e0       	ldi	r31, 0x01	; 1
    5de6:	73 df       	rcall	.-282    	; 0x5cce <__fp_powser>
    5de8:	8b 01       	movw	r16, r22
    5dea:	be 01       	movw	r22, r28
    5dec:	ec 01       	movw	r28, r24
    5dee:	fb 2e       	mov	r15, r27
    5df0:	6f 57       	subi	r22, 0x7F	; 127
    5df2:	71 09       	sbc	r23, r1
    5df4:	75 95       	asr	r23
    5df6:	77 1f       	adc	r23, r23
    5df8:	88 0b       	sbc	r24, r24
    5dfa:	99 0b       	sbc	r25, r25
    5dfc:	9a dd       	rcall	.-1228   	; 0x5932 <__floatsisf>
    5dfe:	28 e1       	ldi	r18, 0x18	; 24
    5e00:	32 e7       	ldi	r19, 0x72	; 114
    5e02:	41 e3       	ldi	r20, 0x31	; 49
    5e04:	5f e3       	ldi	r21, 0x3F	; 63
    5e06:	8f de       	rcall	.-738    	; 0x5b26 <__mulsf3x>
    5e08:	af 2d       	mov	r26, r15
    5e0a:	98 01       	movw	r18, r16
    5e0c:	ae 01       	movw	r20, r28
    5e0e:	ff 90       	pop	r15
    5e10:	0f 91       	pop	r16
    5e12:	1f 91       	pop	r17
    5e14:	cf 91       	pop	r28
    5e16:	df 91       	pop	r29
    5e18:	9a dc       	rcall	.-1740   	; 0x574e <__addsf3x>
    5e1a:	01 ce       	rjmp	.-1022   	; 0x5a1e <__fp_round>

00005e1c <modf>:
    5e1c:	fa 01       	movw	r30, r20
    5e1e:	dc 01       	movw	r26, r24
    5e20:	aa 0f       	add	r26, r26
    5e22:	bb 1f       	adc	r27, r27
    5e24:	9b 01       	movw	r18, r22
    5e26:	ac 01       	movw	r20, r24
    5e28:	bf 57       	subi	r27, 0x7F	; 127
    5e2a:	28 f4       	brcc	.+10     	; 0x5e36 <modf+0x1a>
    5e2c:	22 27       	eor	r18, r18
    5e2e:	33 27       	eor	r19, r19
    5e30:	44 27       	eor	r20, r20
    5e32:	50 78       	andi	r21, 0x80	; 128
    5e34:	1f c0       	rjmp	.+62     	; 0x5e74 <modf+0x58>
    5e36:	b7 51       	subi	r27, 0x17	; 23
    5e38:	88 f4       	brcc	.+34     	; 0x5e5c <modf+0x40>
    5e3a:	ab 2f       	mov	r26, r27
    5e3c:	00 24       	eor	r0, r0
    5e3e:	46 95       	lsr	r20
    5e40:	37 95       	ror	r19
    5e42:	27 95       	ror	r18
    5e44:	01 1c       	adc	r0, r1
    5e46:	a3 95       	inc	r26
    5e48:	d2 f3       	brmi	.-12     	; 0x5e3e <modf+0x22>
    5e4a:	00 20       	and	r0, r0
    5e4c:	69 f0       	breq	.+26     	; 0x5e68 <modf+0x4c>
    5e4e:	22 0f       	add	r18, r18
    5e50:	33 1f       	adc	r19, r19
    5e52:	44 1f       	adc	r20, r20
    5e54:	b3 95       	inc	r27
    5e56:	da f3       	brmi	.-10     	; 0x5e4e <modf+0x32>
    5e58:	0d d0       	rcall	.+26     	; 0x5e74 <modf+0x58>
    5e5a:	67 cc       	rjmp	.-1842   	; 0x572a <__subsf3>
    5e5c:	61 30       	cpi	r22, 0x01	; 1
    5e5e:	71 05       	cpc	r23, r1
    5e60:	a0 e8       	ldi	r26, 0x80	; 128
    5e62:	8a 07       	cpc	r24, r26
    5e64:	b9 46       	sbci	r27, 0x69	; 105
    5e66:	30 f4       	brcc	.+12     	; 0x5e74 <modf+0x58>
    5e68:	9b 01       	movw	r18, r22
    5e6a:	ac 01       	movw	r20, r24
    5e6c:	66 27       	eor	r22, r22
    5e6e:	77 27       	eor	r23, r23
    5e70:	88 27       	eor	r24, r24
    5e72:	90 78       	andi	r25, 0x80	; 128
    5e74:	30 96       	adiw	r30, 0x00	; 0
    5e76:	21 f0       	breq	.+8      	; 0x5e80 <modf+0x64>
    5e78:	20 83       	st	Z, r18
    5e7a:	31 83       	std	Z+1, r19	; 0x01
    5e7c:	42 83       	std	Z+2, r20	; 0x02
    5e7e:	53 83       	std	Z+3, r21	; 0x03
    5e80:	08 95       	ret

00005e82 <__fp_mpack>:
    5e82:	9f 3f       	cpi	r25, 0xFF	; 255
    5e84:	31 f0       	breq	.+12     	; 0x5e92 <__fp_mpack_finite+0xc>

00005e86 <__fp_mpack_finite>:
    5e86:	91 50       	subi	r25, 0x01	; 1
    5e88:	20 f4       	brcc	.+8      	; 0x5e92 <__fp_mpack_finite+0xc>
    5e8a:	87 95       	ror	r24
    5e8c:	77 95       	ror	r23
    5e8e:	67 95       	ror	r22
    5e90:	b7 95       	ror	r27
    5e92:	88 0f       	add	r24, r24
    5e94:	91 1d       	adc	r25, r1
    5e96:	96 95       	lsr	r25
    5e98:	87 95       	ror	r24
    5e9a:	97 f9       	bld	r25, 7
    5e9c:	08 95       	ret

00005e9e <vfprintf>:
    5e9e:	a1 e1       	ldi	r26, 0x11	; 17
    5ea0:	b0 e0       	ldi	r27, 0x00	; 0
    5ea2:	e4 e5       	ldi	r30, 0x54	; 84
    5ea4:	ff e2       	ldi	r31, 0x2F	; 47
    5ea6:	a4 c3       	rjmp	.+1864   	; 0x65f0 <__prologue_saves__>
    5ea8:	3c 01       	movw	r6, r24
    5eaa:	7f 87       	std	Y+15, r23	; 0x0f
    5eac:	6e 87       	std	Y+14, r22	; 0x0e
    5eae:	6a 01       	movw	r12, r20
    5eb0:	fc 01       	movw	r30, r24
    5eb2:	17 82       	std	Z+7, r1	; 0x07
    5eb4:	16 82       	std	Z+6, r1	; 0x06
    5eb6:	83 81       	ldd	r24, Z+3	; 0x03
    5eb8:	81 fd       	sbrc	r24, 1
    5eba:	03 c0       	rjmp	.+6      	; 0x5ec2 <vfprintf+0x24>
    5ebc:	6f ef       	ldi	r22, 0xFF	; 255
    5ebe:	7f ef       	ldi	r23, 0xFF	; 255
    5ec0:	52 c3       	rjmp	.+1700   	; 0x6566 <vfprintf+0x6c8>
    5ec2:	9e 01       	movw	r18, r28
    5ec4:	2f 5f       	subi	r18, 0xFF	; 255
    5ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    5ec8:	39 8b       	std	Y+17, r19	; 0x11
    5eca:	28 8b       	std	Y+16, r18	; 0x10
    5ecc:	f3 01       	movw	r30, r6
    5ece:	23 81       	ldd	r18, Z+3	; 0x03
    5ed0:	ee 85       	ldd	r30, Y+14	; 0x0e
    5ed2:	ff 85       	ldd	r31, Y+15	; 0x0f
    5ed4:	23 fd       	sbrc	r18, 3
    5ed6:	85 91       	lpm	r24, Z+
    5ed8:	23 ff       	sbrs	r18, 3
    5eda:	81 91       	ld	r24, Z+
    5edc:	ff 87       	std	Y+15, r31	; 0x0f
    5ede:	ee 87       	std	Y+14, r30	; 0x0e
    5ee0:	88 23       	and	r24, r24
    5ee2:	09 f4       	brne	.+2      	; 0x5ee6 <vfprintf+0x48>
    5ee4:	3d c3       	rjmp	.+1658   	; 0x6560 <vfprintf+0x6c2>
    5ee6:	85 32       	cpi	r24, 0x25	; 37
    5ee8:	51 f4       	brne	.+20     	; 0x5efe <vfprintf+0x60>
    5eea:	ee 85       	ldd	r30, Y+14	; 0x0e
    5eec:	ff 85       	ldd	r31, Y+15	; 0x0f
    5eee:	23 fd       	sbrc	r18, 3
    5ef0:	85 91       	lpm	r24, Z+
    5ef2:	23 ff       	sbrs	r18, 3
    5ef4:	81 91       	ld	r24, Z+
    5ef6:	ff 87       	std	Y+15, r31	; 0x0f
    5ef8:	ee 87       	std	Y+14, r30	; 0x0e
    5efa:	85 32       	cpi	r24, 0x25	; 37
    5efc:	21 f4       	brne	.+8      	; 0x5f06 <vfprintf+0x68>
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	b3 01       	movw	r22, r6
    5f02:	a0 d5       	rcall	.+2880   	; 0x6a44 <fputc>
    5f04:	e3 cf       	rjmp	.-58     	; 0x5ecc <vfprintf+0x2e>
    5f06:	98 2f       	mov	r25, r24
    5f08:	10 e0       	ldi	r17, 0x00	; 0
    5f0a:	88 24       	eor	r8, r8
    5f0c:	99 24       	eor	r9, r9
    5f0e:	10 32       	cpi	r17, 0x20	; 32
    5f10:	b0 f4       	brcc	.+44     	; 0x5f3e <vfprintf+0xa0>
    5f12:	9b 32       	cpi	r25, 0x2B	; 43
    5f14:	69 f0       	breq	.+26     	; 0x5f30 <vfprintf+0x92>
    5f16:	9c 32       	cpi	r25, 0x2C	; 44
    5f18:	28 f4       	brcc	.+10     	; 0x5f24 <vfprintf+0x86>
    5f1a:	90 32       	cpi	r25, 0x20	; 32
    5f1c:	51 f0       	breq	.+20     	; 0x5f32 <vfprintf+0x94>
    5f1e:	93 32       	cpi	r25, 0x23	; 35
    5f20:	71 f4       	brne	.+28     	; 0x5f3e <vfprintf+0xa0>
    5f22:	0b c0       	rjmp	.+22     	; 0x5f3a <vfprintf+0x9c>
    5f24:	9d 32       	cpi	r25, 0x2D	; 45
    5f26:	39 f0       	breq	.+14     	; 0x5f36 <vfprintf+0x98>
    5f28:	90 33       	cpi	r25, 0x30	; 48
    5f2a:	49 f4       	brne	.+18     	; 0x5f3e <vfprintf+0xa0>
    5f2c:	11 60       	ori	r17, 0x01	; 1
    5f2e:	28 c0       	rjmp	.+80     	; 0x5f80 <vfprintf+0xe2>
    5f30:	12 60       	ori	r17, 0x02	; 2
    5f32:	14 60       	ori	r17, 0x04	; 4
    5f34:	25 c0       	rjmp	.+74     	; 0x5f80 <vfprintf+0xe2>
    5f36:	18 60       	ori	r17, 0x08	; 8
    5f38:	23 c0       	rjmp	.+70     	; 0x5f80 <vfprintf+0xe2>
    5f3a:	10 61       	ori	r17, 0x10	; 16
    5f3c:	21 c0       	rjmp	.+66     	; 0x5f80 <vfprintf+0xe2>
    5f3e:	17 fd       	sbrc	r17, 7
    5f40:	2a c0       	rjmp	.+84     	; 0x5f96 <vfprintf+0xf8>
    5f42:	89 2f       	mov	r24, r25
    5f44:	80 53       	subi	r24, 0x30	; 48
    5f46:	8a 30       	cpi	r24, 0x0A	; 10
    5f48:	78 f4       	brcc	.+30     	; 0x5f68 <vfprintf+0xca>
    5f4a:	16 ff       	sbrs	r17, 6
    5f4c:	06 c0       	rjmp	.+12     	; 0x5f5a <vfprintf+0xbc>
    5f4e:	fa e0       	ldi	r31, 0x0A	; 10
    5f50:	9f 9e       	mul	r9, r31
    5f52:	90 2c       	mov	r9, r0
    5f54:	11 24       	eor	r1, r1
    5f56:	98 0e       	add	r9, r24
    5f58:	13 c0       	rjmp	.+38     	; 0x5f80 <vfprintf+0xe2>
    5f5a:	3a e0       	ldi	r19, 0x0A	; 10
    5f5c:	83 9e       	mul	r8, r19
    5f5e:	80 2c       	mov	r8, r0
    5f60:	11 24       	eor	r1, r1
    5f62:	88 0e       	add	r8, r24
    5f64:	10 62       	ori	r17, 0x20	; 32
    5f66:	0c c0       	rjmp	.+24     	; 0x5f80 <vfprintf+0xe2>
    5f68:	9e 32       	cpi	r25, 0x2E	; 46
    5f6a:	21 f4       	brne	.+8      	; 0x5f74 <vfprintf+0xd6>
    5f6c:	16 fd       	sbrc	r17, 6
    5f6e:	f8 c2       	rjmp	.+1520   	; 0x6560 <vfprintf+0x6c2>
    5f70:	10 64       	ori	r17, 0x40	; 64
    5f72:	06 c0       	rjmp	.+12     	; 0x5f80 <vfprintf+0xe2>
    5f74:	9c 36       	cpi	r25, 0x6C	; 108
    5f76:	11 f4       	brne	.+4      	; 0x5f7c <vfprintf+0xde>
    5f78:	10 68       	ori	r17, 0x80	; 128
    5f7a:	02 c0       	rjmp	.+4      	; 0x5f80 <vfprintf+0xe2>
    5f7c:	98 36       	cpi	r25, 0x68	; 104
    5f7e:	59 f4       	brne	.+22     	; 0x5f96 <vfprintf+0xf8>
    5f80:	ee 85       	ldd	r30, Y+14	; 0x0e
    5f82:	ff 85       	ldd	r31, Y+15	; 0x0f
    5f84:	23 fd       	sbrc	r18, 3
    5f86:	95 91       	lpm	r25, Z+
    5f88:	23 ff       	sbrs	r18, 3
    5f8a:	91 91       	ld	r25, Z+
    5f8c:	ff 87       	std	Y+15, r31	; 0x0f
    5f8e:	ee 87       	std	Y+14, r30	; 0x0e
    5f90:	99 23       	and	r25, r25
    5f92:	09 f0       	breq	.+2      	; 0x5f96 <vfprintf+0xf8>
    5f94:	bc cf       	rjmp	.-136    	; 0x5f0e <vfprintf+0x70>
    5f96:	89 2f       	mov	r24, r25
    5f98:	85 54       	subi	r24, 0x45	; 69
    5f9a:	83 30       	cpi	r24, 0x03	; 3
    5f9c:	20 f4       	brcc	.+8      	; 0x5fa6 <vfprintf+0x108>
    5f9e:	81 2f       	mov	r24, r17
    5fa0:	80 61       	ori	r24, 0x10	; 16
    5fa2:	90 5e       	subi	r25, 0xE0	; 224
    5fa4:	07 c0       	rjmp	.+14     	; 0x5fb4 <vfprintf+0x116>
    5fa6:	89 2f       	mov	r24, r25
    5fa8:	85 56       	subi	r24, 0x65	; 101
    5faa:	83 30       	cpi	r24, 0x03	; 3
    5fac:	08 f0       	brcs	.+2      	; 0x5fb0 <vfprintf+0x112>
    5fae:	8f c1       	rjmp	.+798    	; 0x62ce <vfprintf+0x430>
    5fb0:	81 2f       	mov	r24, r17
    5fb2:	8f 7e       	andi	r24, 0xEF	; 239
    5fb4:	86 fd       	sbrc	r24, 6
    5fb6:	02 c0       	rjmp	.+4      	; 0x5fbc <vfprintf+0x11e>
    5fb8:	76 e0       	ldi	r23, 0x06	; 6
    5fba:	97 2e       	mov	r9, r23
    5fbc:	6f e3       	ldi	r22, 0x3F	; 63
    5fbe:	f6 2e       	mov	r15, r22
    5fc0:	f8 22       	and	r15, r24
    5fc2:	95 36       	cpi	r25, 0x65	; 101
    5fc4:	19 f4       	brne	.+6      	; 0x5fcc <vfprintf+0x12e>
    5fc6:	f0 e4       	ldi	r31, 0x40	; 64
    5fc8:	ff 2a       	or	r15, r31
    5fca:	07 c0       	rjmp	.+14     	; 0x5fda <vfprintf+0x13c>
    5fcc:	96 36       	cpi	r25, 0x66	; 102
    5fce:	19 f4       	brne	.+6      	; 0x5fd6 <vfprintf+0x138>
    5fd0:	20 e8       	ldi	r18, 0x80	; 128
    5fd2:	f2 2a       	or	r15, r18
    5fd4:	02 c0       	rjmp	.+4      	; 0x5fda <vfprintf+0x13c>
    5fd6:	91 10       	cpse	r9, r1
    5fd8:	9a 94       	dec	r9
    5fda:	f7 fe       	sbrs	r15, 7
    5fdc:	0a c0       	rjmp	.+20     	; 0x5ff2 <vfprintf+0x154>
    5fde:	3b e3       	ldi	r19, 0x3B	; 59
    5fe0:	39 15       	cp	r19, r9
    5fe2:	18 f4       	brcc	.+6      	; 0x5fea <vfprintf+0x14c>
    5fe4:	5c e3       	ldi	r21, 0x3C	; 60
    5fe6:	b5 2e       	mov	r11, r21
    5fe8:	02 c0       	rjmp	.+4      	; 0x5fee <vfprintf+0x150>
    5fea:	b9 2c       	mov	r11, r9
    5fec:	b3 94       	inc	r11
    5fee:	27 e0       	ldi	r18, 0x07	; 7
    5ff0:	09 c0       	rjmp	.+18     	; 0x6004 <vfprintf+0x166>
    5ff2:	47 e0       	ldi	r20, 0x07	; 7
    5ff4:	49 15       	cp	r20, r9
    5ff6:	20 f4       	brcc	.+8      	; 0x6000 <vfprintf+0x162>
    5ff8:	bb 24       	eor	r11, r11
    5ffa:	47 e0       	ldi	r20, 0x07	; 7
    5ffc:	94 2e       	mov	r9, r20
    5ffe:	f7 cf       	rjmp	.-18     	; 0x5fee <vfprintf+0x150>
    6000:	29 2d       	mov	r18, r9
    6002:	bb 24       	eor	r11, r11
    6004:	c6 01       	movw	r24, r12
    6006:	04 96       	adiw	r24, 0x04	; 4
    6008:	9d 87       	std	Y+13, r25	; 0x0d
    600a:	8c 87       	std	Y+12, r24	; 0x0c
    600c:	f6 01       	movw	r30, r12
    600e:	60 81       	ld	r22, Z
    6010:	71 81       	ldd	r23, Z+1	; 0x01
    6012:	82 81       	ldd	r24, Z+2	; 0x02
    6014:	93 81       	ldd	r25, Z+3	; 0x03
    6016:	ae 01       	movw	r20, r28
    6018:	4f 5f       	subi	r20, 0xFF	; 255
    601a:	5f 4f       	sbci	r21, 0xFF	; 255
    601c:	0b 2d       	mov	r16, r11
    601e:	24 d4       	rcall	.+2120   	; 0x6868 <__ftoa_engine>
    6020:	6c 01       	movw	r12, r24
    6022:	09 81       	ldd	r16, Y+1	; 0x01
    6024:	20 2e       	mov	r2, r16
    6026:	33 24       	eor	r3, r3
    6028:	00 ff       	sbrs	r16, 0
    602a:	04 c0       	rjmp	.+8      	; 0x6034 <vfprintf+0x196>
    602c:	03 fd       	sbrc	r16, 3
    602e:	02 c0       	rjmp	.+4      	; 0x6034 <vfprintf+0x196>
    6030:	1d e2       	ldi	r17, 0x2D	; 45
    6032:	09 c0       	rjmp	.+18     	; 0x6046 <vfprintf+0x1a8>
    6034:	f1 fe       	sbrs	r15, 1
    6036:	02 c0       	rjmp	.+4      	; 0x603c <vfprintf+0x19e>
    6038:	1b e2       	ldi	r17, 0x2B	; 43
    603a:	05 c0       	rjmp	.+10     	; 0x6046 <vfprintf+0x1a8>
    603c:	f2 fc       	sbrc	r15, 2
    603e:	02 c0       	rjmp	.+4      	; 0x6044 <vfprintf+0x1a6>
    6040:	10 e0       	ldi	r17, 0x00	; 0
    6042:	01 c0       	rjmp	.+2      	; 0x6046 <vfprintf+0x1a8>
    6044:	10 e2       	ldi	r17, 0x20	; 32
    6046:	c1 01       	movw	r24, r2
    6048:	8c 70       	andi	r24, 0x0C	; 12
    604a:	90 70       	andi	r25, 0x00	; 0
    604c:	89 2b       	or	r24, r25
    604e:	a1 f1       	breq	.+104    	; 0x60b8 <vfprintf+0x21a>
    6050:	11 23       	and	r17, r17
    6052:	11 f4       	brne	.+4      	; 0x6058 <vfprintf+0x1ba>
    6054:	83 e0       	ldi	r24, 0x03	; 3
    6056:	01 c0       	rjmp	.+2      	; 0x605a <vfprintf+0x1bc>
    6058:	84 e0       	ldi	r24, 0x04	; 4
    605a:	88 15       	cp	r24, r8
    605c:	10 f0       	brcs	.+4      	; 0x6062 <vfprintf+0x1c4>
    605e:	88 24       	eor	r8, r8
    6060:	09 c0       	rjmp	.+18     	; 0x6074 <vfprintf+0x1d6>
    6062:	88 1a       	sub	r8, r24
    6064:	f3 fc       	sbrc	r15, 3
    6066:	06 c0       	rjmp	.+12     	; 0x6074 <vfprintf+0x1d6>
    6068:	80 e2       	ldi	r24, 0x20	; 32
    606a:	90 e0       	ldi	r25, 0x00	; 0
    606c:	b3 01       	movw	r22, r6
    606e:	ea d4       	rcall	.+2516   	; 0x6a44 <fputc>
    6070:	8a 94       	dec	r8
    6072:	d1 f7       	brne	.-12     	; 0x6068 <vfprintf+0x1ca>
    6074:	11 23       	and	r17, r17
    6076:	21 f0       	breq	.+8      	; 0x6080 <vfprintf+0x1e2>
    6078:	81 2f       	mov	r24, r17
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	b3 01       	movw	r22, r6
    607e:	e2 d4       	rcall	.+2500   	; 0x6a44 <fputc>
    6080:	23 fe       	sbrs	r2, 3
    6082:	03 c0       	rjmp	.+6      	; 0x608a <vfprintf+0x1ec>
    6084:	0f e5       	ldi	r16, 0x5F	; 95
    6086:	15 e0       	ldi	r17, 0x05	; 5
    6088:	0d c0       	rjmp	.+26     	; 0x60a4 <vfprintf+0x206>
    608a:	03 e6       	ldi	r16, 0x63	; 99
    608c:	15 e0       	ldi	r17, 0x05	; 5
    608e:	0a c0       	rjmp	.+20     	; 0x60a4 <vfprintf+0x206>
    6090:	e1 14       	cp	r14, r1
    6092:	f1 04       	cpc	r15, r1
    6094:	09 f0       	breq	.+2      	; 0x6098 <vfprintf+0x1fa>
    6096:	80 52       	subi	r24, 0x20	; 32
    6098:	90 e0       	ldi	r25, 0x00	; 0
    609a:	b3 01       	movw	r22, r6
    609c:	d3 d4       	rcall	.+2470   	; 0x6a44 <fputc>
    609e:	0f 5f       	subi	r16, 0xFF	; 255
    60a0:	1f 4f       	sbci	r17, 0xFF	; 255
    60a2:	05 c0       	rjmp	.+10     	; 0x60ae <vfprintf+0x210>
    60a4:	ef 2c       	mov	r14, r15
    60a6:	ff 24       	eor	r15, r15
    60a8:	f0 e1       	ldi	r31, 0x10	; 16
    60aa:	ef 22       	and	r14, r31
    60ac:	ff 24       	eor	r15, r15
    60ae:	f8 01       	movw	r30, r16
    60b0:	84 91       	lpm	r24, Z+
    60b2:	88 23       	and	r24, r24
    60b4:	69 f7       	brne	.-38     	; 0x6090 <vfprintf+0x1f2>
    60b6:	08 c1       	rjmp	.+528    	; 0x62c8 <vfprintf+0x42a>
    60b8:	f7 fe       	sbrs	r15, 7
    60ba:	12 c0       	rjmp	.+36     	; 0x60e0 <vfprintf+0x242>
    60bc:	bc 0c       	add	r11, r12
    60be:	24 fe       	sbrs	r2, 4
    60c0:	04 c0       	rjmp	.+8      	; 0x60ca <vfprintf+0x22c>
    60c2:	8a 81       	ldd	r24, Y+2	; 0x02
    60c4:	81 33       	cpi	r24, 0x31	; 49
    60c6:	09 f4       	brne	.+2      	; 0x60ca <vfprintf+0x22c>
    60c8:	ba 94       	dec	r11
    60ca:	1b 14       	cp	r1, r11
    60cc:	1c f0       	brlt	.+6      	; 0x60d4 <vfprintf+0x236>
    60ce:	bb 24       	eor	r11, r11
    60d0:	b3 94       	inc	r11
    60d2:	2d c0       	rjmp	.+90     	; 0x612e <vfprintf+0x290>
    60d4:	f8 e0       	ldi	r31, 0x08	; 8
    60d6:	fb 15       	cp	r31, r11
    60d8:	50 f5       	brcc	.+84     	; 0x612e <vfprintf+0x290>
    60da:	38 e0       	ldi	r19, 0x08	; 8
    60dc:	b3 2e       	mov	r11, r19
    60de:	27 c0       	rjmp	.+78     	; 0x612e <vfprintf+0x290>
    60e0:	f6 fc       	sbrc	r15, 6
    60e2:	25 c0       	rjmp	.+74     	; 0x612e <vfprintf+0x290>
    60e4:	89 2d       	mov	r24, r9
    60e6:	90 e0       	ldi	r25, 0x00	; 0
    60e8:	8c 15       	cp	r24, r12
    60ea:	9d 05       	cpc	r25, r13
    60ec:	4c f0       	brlt	.+18     	; 0x6100 <vfprintf+0x262>
    60ee:	2c ef       	ldi	r18, 0xFC	; 252
    60f0:	c2 16       	cp	r12, r18
    60f2:	2f ef       	ldi	r18, 0xFF	; 255
    60f4:	d2 06       	cpc	r13, r18
    60f6:	24 f0       	brlt	.+8      	; 0x6100 <vfprintf+0x262>
    60f8:	30 e8       	ldi	r19, 0x80	; 128
    60fa:	f3 2a       	or	r15, r19
    60fc:	01 c0       	rjmp	.+2      	; 0x6100 <vfprintf+0x262>
    60fe:	9a 94       	dec	r9
    6100:	99 20       	and	r9, r9
    6102:	49 f0       	breq	.+18     	; 0x6116 <vfprintf+0x278>
    6104:	e2 e0       	ldi	r30, 0x02	; 2
    6106:	f0 e0       	ldi	r31, 0x00	; 0
    6108:	ec 0f       	add	r30, r28
    610a:	fd 1f       	adc	r31, r29
    610c:	e9 0d       	add	r30, r9
    610e:	f1 1d       	adc	r31, r1
    6110:	80 81       	ld	r24, Z
    6112:	80 33       	cpi	r24, 0x30	; 48
    6114:	a1 f3       	breq	.-24     	; 0x60fe <vfprintf+0x260>
    6116:	f7 fe       	sbrs	r15, 7
    6118:	0a c0       	rjmp	.+20     	; 0x612e <vfprintf+0x290>
    611a:	b9 2c       	mov	r11, r9
    611c:	b3 94       	inc	r11
    611e:	89 2d       	mov	r24, r9
    6120:	90 e0       	ldi	r25, 0x00	; 0
    6122:	c8 16       	cp	r12, r24
    6124:	d9 06       	cpc	r13, r25
    6126:	14 f0       	brlt	.+4      	; 0x612c <vfprintf+0x28e>
    6128:	99 24       	eor	r9, r9
    612a:	01 c0       	rjmp	.+2      	; 0x612e <vfprintf+0x290>
    612c:	9c 18       	sub	r9, r12
    612e:	f7 fc       	sbrc	r15, 7
    6130:	03 c0       	rjmp	.+6      	; 0x6138 <vfprintf+0x29a>
    6132:	25 e0       	ldi	r18, 0x05	; 5
    6134:	30 e0       	ldi	r19, 0x00	; 0
    6136:	09 c0       	rjmp	.+18     	; 0x614a <vfprintf+0x2ac>
    6138:	1c 14       	cp	r1, r12
    613a:	1d 04       	cpc	r1, r13
    613c:	1c f0       	brlt	.+6      	; 0x6144 <vfprintf+0x2a6>
    613e:	21 e0       	ldi	r18, 0x01	; 1
    6140:	30 e0       	ldi	r19, 0x00	; 0
    6142:	03 c0       	rjmp	.+6      	; 0x614a <vfprintf+0x2ac>
    6144:	96 01       	movw	r18, r12
    6146:	2f 5f       	subi	r18, 0xFF	; 255
    6148:	3f 4f       	sbci	r19, 0xFF	; 255
    614a:	11 23       	and	r17, r17
    614c:	11 f0       	breq	.+4      	; 0x6152 <vfprintf+0x2b4>
    614e:	2f 5f       	subi	r18, 0xFF	; 255
    6150:	3f 4f       	sbci	r19, 0xFF	; 255
    6152:	99 20       	and	r9, r9
    6154:	29 f0       	breq	.+10     	; 0x6160 <vfprintf+0x2c2>
    6156:	89 2d       	mov	r24, r9
    6158:	90 e0       	ldi	r25, 0x00	; 0
    615a:	01 96       	adiw	r24, 0x01	; 1
    615c:	28 0f       	add	r18, r24
    615e:	39 1f       	adc	r19, r25
    6160:	88 2d       	mov	r24, r8
    6162:	90 e0       	ldi	r25, 0x00	; 0
    6164:	28 17       	cp	r18, r24
    6166:	39 07       	cpc	r19, r25
    6168:	14 f0       	brlt	.+4      	; 0x616e <vfprintf+0x2d0>
    616a:	88 24       	eor	r8, r8
    616c:	01 c0       	rjmp	.+2      	; 0x6170 <vfprintf+0x2d2>
    616e:	82 1a       	sub	r8, r18
    6170:	4f 2c       	mov	r4, r15
    6172:	55 24       	eor	r5, r5
    6174:	c2 01       	movw	r24, r4
    6176:	89 70       	andi	r24, 0x09	; 9
    6178:	90 70       	andi	r25, 0x00	; 0
    617a:	89 2b       	or	r24, r25
    617c:	31 f0       	breq	.+12     	; 0x618a <vfprintf+0x2ec>
    617e:	07 c0       	rjmp	.+14     	; 0x618e <vfprintf+0x2f0>
    6180:	80 e2       	ldi	r24, 0x20	; 32
    6182:	90 e0       	ldi	r25, 0x00	; 0
    6184:	b3 01       	movw	r22, r6
    6186:	5e d4       	rcall	.+2236   	; 0x6a44 <fputc>
    6188:	8a 94       	dec	r8
    618a:	88 20       	and	r8, r8
    618c:	c9 f7       	brne	.-14     	; 0x6180 <vfprintf+0x2e2>
    618e:	11 23       	and	r17, r17
    6190:	21 f0       	breq	.+8      	; 0x619a <vfprintf+0x2fc>
    6192:	81 2f       	mov	r24, r17
    6194:	90 e0       	ldi	r25, 0x00	; 0
    6196:	b3 01       	movw	r22, r6
    6198:	55 d4       	rcall	.+2218   	; 0x6a44 <fputc>
    619a:	43 fe       	sbrs	r4, 3
    619c:	06 c0       	rjmp	.+12     	; 0x61aa <vfprintf+0x30c>
    619e:	07 c0       	rjmp	.+14     	; 0x61ae <vfprintf+0x310>
    61a0:	80 e3       	ldi	r24, 0x30	; 48
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	b3 01       	movw	r22, r6
    61a6:	4e d4       	rcall	.+2204   	; 0x6a44 <fputc>
    61a8:	8a 94       	dec	r8
    61aa:	88 20       	and	r8, r8
    61ac:	c9 f7       	brne	.-14     	; 0x61a0 <vfprintf+0x302>
    61ae:	f7 fe       	sbrs	r15, 7
    61b0:	44 c0       	rjmp	.+136    	; 0x623a <vfprintf+0x39c>
    61b2:	86 01       	movw	r16, r12
    61b4:	d7 fe       	sbrs	r13, 7
    61b6:	02 c0       	rjmp	.+4      	; 0x61bc <vfprintf+0x31e>
    61b8:	00 e0       	ldi	r16, 0x00	; 0
    61ba:	10 e0       	ldi	r17, 0x00	; 0
    61bc:	76 01       	movw	r14, r12
    61be:	08 94       	sec
    61c0:	e1 1c       	adc	r14, r1
    61c2:	f1 1c       	adc	r15, r1
    61c4:	e0 1a       	sub	r14, r16
    61c6:	f1 0a       	sbc	r15, r17
    61c8:	41 e0       	ldi	r20, 0x01	; 1
    61ca:	50 e0       	ldi	r21, 0x00	; 0
    61cc:	4c 0f       	add	r20, r28
    61ce:	5d 1f       	adc	r21, r29
    61d0:	e4 0e       	add	r14, r20
    61d2:	f5 1e       	adc	r15, r21
    61d4:	26 01       	movw	r4, r12
    61d6:	4b 18       	sub	r4, r11
    61d8:	51 08       	sbc	r5, r1
    61da:	89 2d       	mov	r24, r9
    61dc:	90 e0       	ldi	r25, 0x00	; 0
    61de:	aa 24       	eor	r10, r10
    61e0:	bb 24       	eor	r11, r11
    61e2:	a8 1a       	sub	r10, r24
    61e4:	b9 0a       	sbc	r11, r25
    61e6:	5f ef       	ldi	r21, 0xFF	; 255
    61e8:	0f 3f       	cpi	r16, 0xFF	; 255
    61ea:	15 07       	cpc	r17, r21
    61ec:	21 f4       	brne	.+8      	; 0x61f6 <vfprintf+0x358>
    61ee:	8e e2       	ldi	r24, 0x2E	; 46
    61f0:	90 e0       	ldi	r25, 0x00	; 0
    61f2:	b3 01       	movw	r22, r6
    61f4:	27 d4       	rcall	.+2126   	; 0x6a44 <fputc>
    61f6:	c0 16       	cp	r12, r16
    61f8:	d1 06       	cpc	r13, r17
    61fa:	34 f0       	brlt	.+12     	; 0x6208 <vfprintf+0x36a>
    61fc:	40 16       	cp	r4, r16
    61fe:	51 06       	cpc	r5, r17
    6200:	1c f4       	brge	.+6      	; 0x6208 <vfprintf+0x36a>
    6202:	f7 01       	movw	r30, r14
    6204:	80 81       	ld	r24, Z
    6206:	01 c0       	rjmp	.+2      	; 0x620a <vfprintf+0x36c>
    6208:	80 e3       	ldi	r24, 0x30	; 48
    620a:	01 50       	subi	r16, 0x01	; 1
    620c:	10 40       	sbci	r17, 0x00	; 0
    620e:	08 94       	sec
    6210:	e1 1c       	adc	r14, r1
    6212:	f1 1c       	adc	r15, r1
    6214:	0a 15       	cp	r16, r10
    6216:	1b 05       	cpc	r17, r11
    6218:	24 f0       	brlt	.+8      	; 0x6222 <vfprintf+0x384>
    621a:	90 e0       	ldi	r25, 0x00	; 0
    621c:	b3 01       	movw	r22, r6
    621e:	12 d4       	rcall	.+2084   	; 0x6a44 <fputc>
    6220:	e2 cf       	rjmp	.-60     	; 0x61e6 <vfprintf+0x348>
    6222:	0c 15       	cp	r16, r12
    6224:	1d 05       	cpc	r17, r13
    6226:	39 f4       	brne	.+14     	; 0x6236 <vfprintf+0x398>
    6228:	9a 81       	ldd	r25, Y+2	; 0x02
    622a:	96 33       	cpi	r25, 0x36	; 54
    622c:	18 f4       	brcc	.+6      	; 0x6234 <vfprintf+0x396>
    622e:	95 33       	cpi	r25, 0x35	; 53
    6230:	11 f4       	brne	.+4      	; 0x6236 <vfprintf+0x398>
    6232:	24 fe       	sbrs	r2, 4
    6234:	81 e3       	ldi	r24, 0x31	; 49
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	45 c0       	rjmp	.+138    	; 0x62c4 <vfprintf+0x426>
    623a:	8a 81       	ldd	r24, Y+2	; 0x02
    623c:	81 33       	cpi	r24, 0x31	; 49
    623e:	09 f0       	breq	.+2      	; 0x6242 <vfprintf+0x3a4>
    6240:	0f 7e       	andi	r16, 0xEF	; 239
    6242:	90 e0       	ldi	r25, 0x00	; 0
    6244:	b3 01       	movw	r22, r6
    6246:	fe d3       	rcall	.+2044   	; 0x6a44 <fputc>
    6248:	99 20       	and	r9, r9
    624a:	91 f0       	breq	.+36     	; 0x6270 <vfprintf+0x3d2>
    624c:	8e e2       	ldi	r24, 0x2E	; 46
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	b3 01       	movw	r22, r6
    6252:	f8 d3       	rcall	.+2032   	; 0x6a44 <fputc>
    6254:	12 e0       	ldi	r17, 0x02	; 2
    6256:	e1 e0       	ldi	r30, 0x01	; 1
    6258:	f0 e0       	ldi	r31, 0x00	; 0
    625a:	ec 0f       	add	r30, r28
    625c:	fd 1f       	adc	r31, r29
    625e:	e1 0f       	add	r30, r17
    6260:	f1 1d       	adc	r31, r1
    6262:	1f 5f       	subi	r17, 0xFF	; 255
    6264:	80 81       	ld	r24, Z
    6266:	90 e0       	ldi	r25, 0x00	; 0
    6268:	b3 01       	movw	r22, r6
    626a:	ec d3       	rcall	.+2008   	; 0x6a44 <fputc>
    626c:	9a 94       	dec	r9
    626e:	99 f7       	brne	.-26     	; 0x6256 <vfprintf+0x3b8>
    6270:	44 fc       	sbrc	r4, 4
    6272:	03 c0       	rjmp	.+6      	; 0x627a <vfprintf+0x3dc>
    6274:	85 e6       	ldi	r24, 0x65	; 101
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	02 c0       	rjmp	.+4      	; 0x627e <vfprintf+0x3e0>
    627a:	85 e4       	ldi	r24, 0x45	; 69
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	b3 01       	movw	r22, r6
    6280:	e1 d3       	rcall	.+1986   	; 0x6a44 <fputc>
    6282:	d7 fc       	sbrc	r13, 7
    6284:	05 c0       	rjmp	.+10     	; 0x6290 <vfprintf+0x3f2>
    6286:	c1 14       	cp	r12, r1
    6288:	d1 04       	cpc	r13, r1
    628a:	41 f4       	brne	.+16     	; 0x629c <vfprintf+0x3fe>
    628c:	04 ff       	sbrs	r16, 4
    628e:	06 c0       	rjmp	.+12     	; 0x629c <vfprintf+0x3fe>
    6290:	d0 94       	com	r13
    6292:	c1 94       	neg	r12
    6294:	d1 08       	sbc	r13, r1
    6296:	d3 94       	inc	r13
    6298:	8d e2       	ldi	r24, 0x2D	; 45
    629a:	01 c0       	rjmp	.+2      	; 0x629e <vfprintf+0x400>
    629c:	8b e2       	ldi	r24, 0x2B	; 43
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	b3 01       	movw	r22, r6
    62a2:	d0 d3       	rcall	.+1952   	; 0x6a44 <fputc>
    62a4:	80 e3       	ldi	r24, 0x30	; 48
    62a6:	05 c0       	rjmp	.+10     	; 0x62b2 <vfprintf+0x414>
    62a8:	8f 5f       	subi	r24, 0xFF	; 255
    62aa:	26 ef       	ldi	r18, 0xF6	; 246
    62ac:	3f ef       	ldi	r19, 0xFF	; 255
    62ae:	c2 0e       	add	r12, r18
    62b0:	d3 1e       	adc	r13, r19
    62b2:	3a e0       	ldi	r19, 0x0A	; 10
    62b4:	c3 16       	cp	r12, r19
    62b6:	d1 04       	cpc	r13, r1
    62b8:	bc f7       	brge	.-18     	; 0x62a8 <vfprintf+0x40a>
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	b3 01       	movw	r22, r6
    62be:	c2 d3       	rcall	.+1924   	; 0x6a44 <fputc>
    62c0:	c6 01       	movw	r24, r12
    62c2:	c0 96       	adiw	r24, 0x30	; 48
    62c4:	b3 01       	movw	r22, r6
    62c6:	be d3       	rcall	.+1916   	; 0x6a44 <fputc>
    62c8:	cc 84       	ldd	r12, Y+12	; 0x0c
    62ca:	dd 84       	ldd	r13, Y+13	; 0x0d
    62cc:	46 c1       	rjmp	.+652    	; 0x655a <vfprintf+0x6bc>
    62ce:	93 36       	cpi	r25, 0x63	; 99
    62d0:	31 f0       	breq	.+12     	; 0x62de <vfprintf+0x440>
    62d2:	93 37       	cpi	r25, 0x73	; 115
    62d4:	99 f0       	breq	.+38     	; 0x62fc <vfprintf+0x45e>
    62d6:	93 35       	cpi	r25, 0x53	; 83
    62d8:	09 f0       	breq	.+2      	; 0x62dc <vfprintf+0x43e>
    62da:	55 c0       	rjmp	.+170    	; 0x6386 <vfprintf+0x4e8>
    62dc:	22 c0       	rjmp	.+68     	; 0x6322 <vfprintf+0x484>
    62de:	f6 01       	movw	r30, r12
    62e0:	80 81       	ld	r24, Z
    62e2:	89 83       	std	Y+1, r24	; 0x01
    62e4:	5e 01       	movw	r10, r28
    62e6:	08 94       	sec
    62e8:	a1 1c       	adc	r10, r1
    62ea:	b1 1c       	adc	r11, r1
    62ec:	22 e0       	ldi	r18, 0x02	; 2
    62ee:	30 e0       	ldi	r19, 0x00	; 0
    62f0:	c2 0e       	add	r12, r18
    62f2:	d3 1e       	adc	r13, r19
    62f4:	21 e0       	ldi	r18, 0x01	; 1
    62f6:	e2 2e       	mov	r14, r18
    62f8:	f1 2c       	mov	r15, r1
    62fa:	11 c0       	rjmp	.+34     	; 0x631e <vfprintf+0x480>
    62fc:	f6 01       	movw	r30, r12
    62fe:	a0 80       	ld	r10, Z
    6300:	b1 80       	ldd	r11, Z+1	; 0x01
    6302:	16 fd       	sbrc	r17, 6
    6304:	03 c0       	rjmp	.+6      	; 0x630c <vfprintf+0x46e>
    6306:	6f ef       	ldi	r22, 0xFF	; 255
    6308:	7f ef       	ldi	r23, 0xFF	; 255
    630a:	02 c0       	rjmp	.+4      	; 0x6310 <vfprintf+0x472>
    630c:	69 2d       	mov	r22, r9
    630e:	70 e0       	ldi	r23, 0x00	; 0
    6310:	22 e0       	ldi	r18, 0x02	; 2
    6312:	30 e0       	ldi	r19, 0x00	; 0
    6314:	c2 0e       	add	r12, r18
    6316:	d3 1e       	adc	r13, r19
    6318:	c5 01       	movw	r24, r10
    631a:	89 d3       	rcall	.+1810   	; 0x6a2e <strnlen>
    631c:	7c 01       	movw	r14, r24
    631e:	1f 77       	andi	r17, 0x7F	; 127
    6320:	12 c0       	rjmp	.+36     	; 0x6346 <vfprintf+0x4a8>
    6322:	f6 01       	movw	r30, r12
    6324:	a0 80       	ld	r10, Z
    6326:	b1 80       	ldd	r11, Z+1	; 0x01
    6328:	16 fd       	sbrc	r17, 6
    632a:	03 c0       	rjmp	.+6      	; 0x6332 <vfprintf+0x494>
    632c:	6f ef       	ldi	r22, 0xFF	; 255
    632e:	7f ef       	ldi	r23, 0xFF	; 255
    6330:	02 c0       	rjmp	.+4      	; 0x6336 <vfprintf+0x498>
    6332:	69 2d       	mov	r22, r9
    6334:	70 e0       	ldi	r23, 0x00	; 0
    6336:	22 e0       	ldi	r18, 0x02	; 2
    6338:	30 e0       	ldi	r19, 0x00	; 0
    633a:	c2 0e       	add	r12, r18
    633c:	d3 1e       	adc	r13, r19
    633e:	c5 01       	movw	r24, r10
    6340:	6b d3       	rcall	.+1750   	; 0x6a18 <strnlen_P>
    6342:	7c 01       	movw	r14, r24
    6344:	10 68       	ori	r17, 0x80	; 128
    6346:	13 ff       	sbrs	r17, 3
    6348:	06 c0       	rjmp	.+12     	; 0x6356 <vfprintf+0x4b8>
    634a:	19 c0       	rjmp	.+50     	; 0x637e <vfprintf+0x4e0>
    634c:	80 e2       	ldi	r24, 0x20	; 32
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	b3 01       	movw	r22, r6
    6352:	78 d3       	rcall	.+1776   	; 0x6a44 <fputc>
    6354:	8a 94       	dec	r8
    6356:	88 2d       	mov	r24, r8
    6358:	90 e0       	ldi	r25, 0x00	; 0
    635a:	e8 16       	cp	r14, r24
    635c:	f9 06       	cpc	r15, r25
    635e:	b0 f3       	brcs	.-20     	; 0x634c <vfprintf+0x4ae>
    6360:	0e c0       	rjmp	.+28     	; 0x637e <vfprintf+0x4e0>
    6362:	f5 01       	movw	r30, r10
    6364:	17 fd       	sbrc	r17, 7
    6366:	85 91       	lpm	r24, Z+
    6368:	17 ff       	sbrs	r17, 7
    636a:	81 91       	ld	r24, Z+
    636c:	5f 01       	movw	r10, r30
    636e:	90 e0       	ldi	r25, 0x00	; 0
    6370:	b3 01       	movw	r22, r6
    6372:	68 d3       	rcall	.+1744   	; 0x6a44 <fputc>
    6374:	81 10       	cpse	r8, r1
    6376:	8a 94       	dec	r8
    6378:	08 94       	sec
    637a:	e1 08       	sbc	r14, r1
    637c:	f1 08       	sbc	r15, r1
    637e:	e1 14       	cp	r14, r1
    6380:	f1 04       	cpc	r15, r1
    6382:	79 f7       	brne	.-34     	; 0x6362 <vfprintf+0x4c4>
    6384:	ea c0       	rjmp	.+468    	; 0x655a <vfprintf+0x6bc>
    6386:	94 36       	cpi	r25, 0x64	; 100
    6388:	11 f0       	breq	.+4      	; 0x638e <vfprintf+0x4f0>
    638a:	99 36       	cpi	r25, 0x69	; 105
    638c:	81 f5       	brne	.+96     	; 0x63ee <vfprintf+0x550>
    638e:	17 ff       	sbrs	r17, 7
    6390:	08 c0       	rjmp	.+16     	; 0x63a2 <vfprintf+0x504>
    6392:	f6 01       	movw	r30, r12
    6394:	20 81       	ld	r18, Z
    6396:	31 81       	ldd	r19, Z+1	; 0x01
    6398:	42 81       	ldd	r20, Z+2	; 0x02
    639a:	53 81       	ldd	r21, Z+3	; 0x03
    639c:	84 e0       	ldi	r24, 0x04	; 4
    639e:	90 e0       	ldi	r25, 0x00	; 0
    63a0:	0a c0       	rjmp	.+20     	; 0x63b6 <vfprintf+0x518>
    63a2:	f6 01       	movw	r30, r12
    63a4:	80 81       	ld	r24, Z
    63a6:	91 81       	ldd	r25, Z+1	; 0x01
    63a8:	9c 01       	movw	r18, r24
    63aa:	44 27       	eor	r20, r20
    63ac:	37 fd       	sbrc	r19, 7
    63ae:	40 95       	com	r20
    63b0:	54 2f       	mov	r21, r20
    63b2:	82 e0       	ldi	r24, 0x02	; 2
    63b4:	90 e0       	ldi	r25, 0x00	; 0
    63b6:	c8 0e       	add	r12, r24
    63b8:	d9 1e       	adc	r13, r25
    63ba:	9f e6       	ldi	r25, 0x6F	; 111
    63bc:	f9 2e       	mov	r15, r25
    63be:	f1 22       	and	r15, r17
    63c0:	57 ff       	sbrs	r21, 7
    63c2:	09 c0       	rjmp	.+18     	; 0x63d6 <vfprintf+0x538>
    63c4:	50 95       	com	r21
    63c6:	40 95       	com	r20
    63c8:	30 95       	com	r19
    63ca:	21 95       	neg	r18
    63cc:	3f 4f       	sbci	r19, 0xFF	; 255
    63ce:	4f 4f       	sbci	r20, 0xFF	; 255
    63d0:	5f 4f       	sbci	r21, 0xFF	; 255
    63d2:	90 e8       	ldi	r25, 0x80	; 128
    63d4:	f9 2a       	or	r15, r25
    63d6:	ca 01       	movw	r24, r20
    63d8:	b9 01       	movw	r22, r18
    63da:	ae 01       	movw	r20, r28
    63dc:	4f 5f       	subi	r20, 0xFF	; 255
    63de:	5f 4f       	sbci	r21, 0xFF	; 255
    63e0:	2a e0       	ldi	r18, 0x0A	; 10
    63e2:	30 e0       	ldi	r19, 0x00	; 0
    63e4:	a2 d3       	rcall	.+1860   	; 0x6b2a <__ultoa_invert>
    63e6:	e8 2e       	mov	r14, r24
    63e8:	e8 89       	ldd	r30, Y+16	; 0x10
    63ea:	ee 1a       	sub	r14, r30
    63ec:	40 c0       	rjmp	.+128    	; 0x646e <vfprintf+0x5d0>
    63ee:	95 37       	cpi	r25, 0x75	; 117
    63f0:	21 f4       	brne	.+8      	; 0x63fa <vfprintf+0x55c>
    63f2:	1f 7e       	andi	r17, 0xEF	; 239
    63f4:	2a e0       	ldi	r18, 0x0A	; 10
    63f6:	30 e0       	ldi	r19, 0x00	; 0
    63f8:	1c c0       	rjmp	.+56     	; 0x6432 <vfprintf+0x594>
    63fa:	19 7f       	andi	r17, 0xF9	; 249
    63fc:	9f 36       	cpi	r25, 0x6F	; 111
    63fe:	61 f0       	breq	.+24     	; 0x6418 <vfprintf+0x57a>
    6400:	90 37       	cpi	r25, 0x70	; 112
    6402:	20 f4       	brcc	.+8      	; 0x640c <vfprintf+0x56e>
    6404:	98 35       	cpi	r25, 0x58	; 88
    6406:	09 f0       	breq	.+2      	; 0x640a <vfprintf+0x56c>
    6408:	ab c0       	rjmp	.+342    	; 0x6560 <vfprintf+0x6c2>
    640a:	0f c0       	rjmp	.+30     	; 0x642a <vfprintf+0x58c>
    640c:	90 37       	cpi	r25, 0x70	; 112
    640e:	39 f0       	breq	.+14     	; 0x641e <vfprintf+0x580>
    6410:	98 37       	cpi	r25, 0x78	; 120
    6412:	09 f0       	breq	.+2      	; 0x6416 <vfprintf+0x578>
    6414:	a5 c0       	rjmp	.+330    	; 0x6560 <vfprintf+0x6c2>
    6416:	04 c0       	rjmp	.+8      	; 0x6420 <vfprintf+0x582>
    6418:	28 e0       	ldi	r18, 0x08	; 8
    641a:	30 e0       	ldi	r19, 0x00	; 0
    641c:	0a c0       	rjmp	.+20     	; 0x6432 <vfprintf+0x594>
    641e:	10 61       	ori	r17, 0x10	; 16
    6420:	14 fd       	sbrc	r17, 4
    6422:	14 60       	ori	r17, 0x04	; 4
    6424:	20 e1       	ldi	r18, 0x10	; 16
    6426:	30 e0       	ldi	r19, 0x00	; 0
    6428:	04 c0       	rjmp	.+8      	; 0x6432 <vfprintf+0x594>
    642a:	14 fd       	sbrc	r17, 4
    642c:	16 60       	ori	r17, 0x06	; 6
    642e:	20 e1       	ldi	r18, 0x10	; 16
    6430:	32 e0       	ldi	r19, 0x02	; 2
    6432:	17 ff       	sbrs	r17, 7
    6434:	08 c0       	rjmp	.+16     	; 0x6446 <vfprintf+0x5a8>
    6436:	f6 01       	movw	r30, r12
    6438:	60 81       	ld	r22, Z
    643a:	71 81       	ldd	r23, Z+1	; 0x01
    643c:	82 81       	ldd	r24, Z+2	; 0x02
    643e:	93 81       	ldd	r25, Z+3	; 0x03
    6440:	44 e0       	ldi	r20, 0x04	; 4
    6442:	50 e0       	ldi	r21, 0x00	; 0
    6444:	08 c0       	rjmp	.+16     	; 0x6456 <vfprintf+0x5b8>
    6446:	f6 01       	movw	r30, r12
    6448:	80 81       	ld	r24, Z
    644a:	91 81       	ldd	r25, Z+1	; 0x01
    644c:	bc 01       	movw	r22, r24
    644e:	80 e0       	ldi	r24, 0x00	; 0
    6450:	90 e0       	ldi	r25, 0x00	; 0
    6452:	42 e0       	ldi	r20, 0x02	; 2
    6454:	50 e0       	ldi	r21, 0x00	; 0
    6456:	c4 0e       	add	r12, r20
    6458:	d5 1e       	adc	r13, r21
    645a:	ae 01       	movw	r20, r28
    645c:	4f 5f       	subi	r20, 0xFF	; 255
    645e:	5f 4f       	sbci	r21, 0xFF	; 255
    6460:	64 d3       	rcall	.+1736   	; 0x6b2a <__ultoa_invert>
    6462:	e8 2e       	mov	r14, r24
    6464:	58 89       	ldd	r21, Y+16	; 0x10
    6466:	e5 1a       	sub	r14, r21
    6468:	8f e7       	ldi	r24, 0x7F	; 127
    646a:	f8 2e       	mov	r15, r24
    646c:	f1 22       	and	r15, r17
    646e:	f6 fe       	sbrs	r15, 6
    6470:	0b c0       	rjmp	.+22     	; 0x6488 <vfprintf+0x5ea>
    6472:	8e ef       	ldi	r24, 0xFE	; 254
    6474:	f8 22       	and	r15, r24
    6476:	e9 14       	cp	r14, r9
    6478:	38 f4       	brcc	.+14     	; 0x6488 <vfprintf+0x5ea>
    647a:	f4 fe       	sbrs	r15, 4
    647c:	07 c0       	rjmp	.+14     	; 0x648c <vfprintf+0x5ee>
    647e:	f2 fc       	sbrc	r15, 2
    6480:	05 c0       	rjmp	.+10     	; 0x648c <vfprintf+0x5ee>
    6482:	9f ee       	ldi	r25, 0xEF	; 239
    6484:	f9 22       	and	r15, r25
    6486:	02 c0       	rjmp	.+4      	; 0x648c <vfprintf+0x5ee>
    6488:	1e 2d       	mov	r17, r14
    648a:	01 c0       	rjmp	.+2      	; 0x648e <vfprintf+0x5f0>
    648c:	19 2d       	mov	r17, r9
    648e:	f4 fe       	sbrs	r15, 4
    6490:	0d c0       	rjmp	.+26     	; 0x64ac <vfprintf+0x60e>
    6492:	fe 01       	movw	r30, r28
    6494:	ee 0d       	add	r30, r14
    6496:	f1 1d       	adc	r31, r1
    6498:	80 81       	ld	r24, Z
    649a:	80 33       	cpi	r24, 0x30	; 48
    649c:	19 f4       	brne	.+6      	; 0x64a4 <vfprintf+0x606>
    649e:	e9 ee       	ldi	r30, 0xE9	; 233
    64a0:	fe 22       	and	r15, r30
    64a2:	08 c0       	rjmp	.+16     	; 0x64b4 <vfprintf+0x616>
    64a4:	1f 5f       	subi	r17, 0xFF	; 255
    64a6:	f2 fe       	sbrs	r15, 2
    64a8:	05 c0       	rjmp	.+10     	; 0x64b4 <vfprintf+0x616>
    64aa:	03 c0       	rjmp	.+6      	; 0x64b2 <vfprintf+0x614>
    64ac:	8f 2d       	mov	r24, r15
    64ae:	86 78       	andi	r24, 0x86	; 134
    64b0:	09 f0       	breq	.+2      	; 0x64b4 <vfprintf+0x616>
    64b2:	1f 5f       	subi	r17, 0xFF	; 255
    64b4:	0f 2d       	mov	r16, r15
    64b6:	f3 fc       	sbrc	r15, 3
    64b8:	13 c0       	rjmp	.+38     	; 0x64e0 <vfprintf+0x642>
    64ba:	f0 fe       	sbrs	r15, 0
    64bc:	0e c0       	rjmp	.+28     	; 0x64da <vfprintf+0x63c>
    64be:	18 15       	cp	r17, r8
    64c0:	10 f0       	brcs	.+4      	; 0x64c6 <vfprintf+0x628>
    64c2:	9e 2c       	mov	r9, r14
    64c4:	0a c0       	rjmp	.+20     	; 0x64da <vfprintf+0x63c>
    64c6:	9e 2c       	mov	r9, r14
    64c8:	98 0c       	add	r9, r8
    64ca:	91 1a       	sub	r9, r17
    64cc:	18 2d       	mov	r17, r8
    64ce:	05 c0       	rjmp	.+10     	; 0x64da <vfprintf+0x63c>
    64d0:	80 e2       	ldi	r24, 0x20	; 32
    64d2:	90 e0       	ldi	r25, 0x00	; 0
    64d4:	b3 01       	movw	r22, r6
    64d6:	b6 d2       	rcall	.+1388   	; 0x6a44 <fputc>
    64d8:	1f 5f       	subi	r17, 0xFF	; 255
    64da:	18 15       	cp	r17, r8
    64dc:	c8 f3       	brcs	.-14     	; 0x64d0 <vfprintf+0x632>
    64de:	04 c0       	rjmp	.+8      	; 0x64e8 <vfprintf+0x64a>
    64e0:	18 15       	cp	r17, r8
    64e2:	10 f4       	brcc	.+4      	; 0x64e8 <vfprintf+0x64a>
    64e4:	81 1a       	sub	r8, r17
    64e6:	01 c0       	rjmp	.+2      	; 0x64ea <vfprintf+0x64c>
    64e8:	88 24       	eor	r8, r8
    64ea:	04 ff       	sbrs	r16, 4
    64ec:	0e c0       	rjmp	.+28     	; 0x650a <vfprintf+0x66c>
    64ee:	80 e3       	ldi	r24, 0x30	; 48
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	b3 01       	movw	r22, r6
    64f4:	a7 d2       	rcall	.+1358   	; 0x6a44 <fputc>
    64f6:	02 ff       	sbrs	r16, 2
    64f8:	1b c0       	rjmp	.+54     	; 0x6530 <vfprintf+0x692>
    64fa:	01 fd       	sbrc	r16, 1
    64fc:	03 c0       	rjmp	.+6      	; 0x6504 <vfprintf+0x666>
    64fe:	88 e7       	ldi	r24, 0x78	; 120
    6500:	90 e0       	ldi	r25, 0x00	; 0
    6502:	0e c0       	rjmp	.+28     	; 0x6520 <vfprintf+0x682>
    6504:	88 e5       	ldi	r24, 0x58	; 88
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	0b c0       	rjmp	.+22     	; 0x6520 <vfprintf+0x682>
    650a:	80 2f       	mov	r24, r16
    650c:	86 78       	andi	r24, 0x86	; 134
    650e:	81 f0       	breq	.+32     	; 0x6530 <vfprintf+0x692>
    6510:	01 ff       	sbrs	r16, 1
    6512:	02 c0       	rjmp	.+4      	; 0x6518 <vfprintf+0x67a>
    6514:	8b e2       	ldi	r24, 0x2B	; 43
    6516:	01 c0       	rjmp	.+2      	; 0x651a <vfprintf+0x67c>
    6518:	80 e2       	ldi	r24, 0x20	; 32
    651a:	f7 fc       	sbrc	r15, 7
    651c:	8d e2       	ldi	r24, 0x2D	; 45
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	b3 01       	movw	r22, r6
    6522:	90 d2       	rcall	.+1312   	; 0x6a44 <fputc>
    6524:	05 c0       	rjmp	.+10     	; 0x6530 <vfprintf+0x692>
    6526:	80 e3       	ldi	r24, 0x30	; 48
    6528:	90 e0       	ldi	r25, 0x00	; 0
    652a:	b3 01       	movw	r22, r6
    652c:	8b d2       	rcall	.+1302   	; 0x6a44 <fputc>
    652e:	9a 94       	dec	r9
    6530:	e9 14       	cp	r14, r9
    6532:	c8 f3       	brcs	.-14     	; 0x6526 <vfprintf+0x688>
    6534:	ea 94       	dec	r14
    6536:	e1 e0       	ldi	r30, 0x01	; 1
    6538:	f0 e0       	ldi	r31, 0x00	; 0
    653a:	ec 0f       	add	r30, r28
    653c:	fd 1f       	adc	r31, r29
    653e:	ee 0d       	add	r30, r14
    6540:	f1 1d       	adc	r31, r1
    6542:	80 81       	ld	r24, Z
    6544:	90 e0       	ldi	r25, 0x00	; 0
    6546:	b3 01       	movw	r22, r6
    6548:	7d d2       	rcall	.+1274   	; 0x6a44 <fputc>
    654a:	ee 20       	and	r14, r14
    654c:	99 f7       	brne	.-26     	; 0x6534 <vfprintf+0x696>
    654e:	05 c0       	rjmp	.+10     	; 0x655a <vfprintf+0x6bc>
    6550:	80 e2       	ldi	r24, 0x20	; 32
    6552:	90 e0       	ldi	r25, 0x00	; 0
    6554:	b3 01       	movw	r22, r6
    6556:	76 d2       	rcall	.+1260   	; 0x6a44 <fputc>
    6558:	8a 94       	dec	r8
    655a:	88 20       	and	r8, r8
    655c:	c9 f7       	brne	.-14     	; 0x6550 <vfprintf+0x6b2>
    655e:	b6 cc       	rjmp	.-1684   	; 0x5ecc <vfprintf+0x2e>
    6560:	f3 01       	movw	r30, r6
    6562:	66 81       	ldd	r22, Z+6	; 0x06
    6564:	77 81       	ldd	r23, Z+7	; 0x07
    6566:	cb 01       	movw	r24, r22
    6568:	61 96       	adiw	r28, 0x11	; 17
    656a:	e2 e1       	ldi	r30, 0x12	; 18
    656c:	5d c0       	rjmp	.+186    	; 0x6628 <__epilogue_restores__>

0000656e <__mulsi3>:
    656e:	62 9f       	mul	r22, r18
    6570:	d0 01       	movw	r26, r0
    6572:	73 9f       	mul	r23, r19
    6574:	f0 01       	movw	r30, r0
    6576:	82 9f       	mul	r24, r18
    6578:	e0 0d       	add	r30, r0
    657a:	f1 1d       	adc	r31, r1
    657c:	64 9f       	mul	r22, r20
    657e:	e0 0d       	add	r30, r0
    6580:	f1 1d       	adc	r31, r1
    6582:	92 9f       	mul	r25, r18
    6584:	f0 0d       	add	r31, r0
    6586:	83 9f       	mul	r24, r19
    6588:	f0 0d       	add	r31, r0
    658a:	74 9f       	mul	r23, r20
    658c:	f0 0d       	add	r31, r0
    658e:	65 9f       	mul	r22, r21
    6590:	f0 0d       	add	r31, r0
    6592:	99 27       	eor	r25, r25
    6594:	72 9f       	mul	r23, r18
    6596:	b0 0d       	add	r27, r0
    6598:	e1 1d       	adc	r30, r1
    659a:	f9 1f       	adc	r31, r25
    659c:	63 9f       	mul	r22, r19
    659e:	b0 0d       	add	r27, r0
    65a0:	e1 1d       	adc	r30, r1
    65a2:	f9 1f       	adc	r31, r25
    65a4:	bd 01       	movw	r22, r26
    65a6:	cf 01       	movw	r24, r30
    65a8:	11 24       	eor	r1, r1
    65aa:	08 95       	ret

000065ac <__udivmodsi4>:
    65ac:	a1 e2       	ldi	r26, 0x21	; 33
    65ae:	1a 2e       	mov	r1, r26
    65b0:	aa 1b       	sub	r26, r26
    65b2:	bb 1b       	sub	r27, r27
    65b4:	fd 01       	movw	r30, r26
    65b6:	0d c0       	rjmp	.+26     	; 0x65d2 <__udivmodsi4_ep>

000065b8 <__udivmodsi4_loop>:
    65b8:	aa 1f       	adc	r26, r26
    65ba:	bb 1f       	adc	r27, r27
    65bc:	ee 1f       	adc	r30, r30
    65be:	ff 1f       	adc	r31, r31
    65c0:	a2 17       	cp	r26, r18
    65c2:	b3 07       	cpc	r27, r19
    65c4:	e4 07       	cpc	r30, r20
    65c6:	f5 07       	cpc	r31, r21
    65c8:	20 f0       	brcs	.+8      	; 0x65d2 <__udivmodsi4_ep>
    65ca:	a2 1b       	sub	r26, r18
    65cc:	b3 0b       	sbc	r27, r19
    65ce:	e4 0b       	sbc	r30, r20
    65d0:	f5 0b       	sbc	r31, r21

000065d2 <__udivmodsi4_ep>:
    65d2:	66 1f       	adc	r22, r22
    65d4:	77 1f       	adc	r23, r23
    65d6:	88 1f       	adc	r24, r24
    65d8:	99 1f       	adc	r25, r25
    65da:	1a 94       	dec	r1
    65dc:	69 f7       	brne	.-38     	; 0x65b8 <__udivmodsi4_loop>
    65de:	60 95       	com	r22
    65e0:	70 95       	com	r23
    65e2:	80 95       	com	r24
    65e4:	90 95       	com	r25
    65e6:	9b 01       	movw	r18, r22
    65e8:	ac 01       	movw	r20, r24
    65ea:	bd 01       	movw	r22, r26
    65ec:	cf 01       	movw	r24, r30
    65ee:	08 95       	ret

000065f0 <__prologue_saves__>:
    65f0:	2f 92       	push	r2
    65f2:	3f 92       	push	r3
    65f4:	4f 92       	push	r4
    65f6:	5f 92       	push	r5
    65f8:	6f 92       	push	r6
    65fa:	7f 92       	push	r7
    65fc:	8f 92       	push	r8
    65fe:	9f 92       	push	r9
    6600:	af 92       	push	r10
    6602:	bf 92       	push	r11
    6604:	cf 92       	push	r12
    6606:	df 92       	push	r13
    6608:	ef 92       	push	r14
    660a:	ff 92       	push	r15
    660c:	0f 93       	push	r16
    660e:	1f 93       	push	r17
    6610:	cf 93       	push	r28
    6612:	df 93       	push	r29
    6614:	cd b7       	in	r28, 0x3d	; 61
    6616:	de b7       	in	r29, 0x3e	; 62
    6618:	ca 1b       	sub	r28, r26
    661a:	db 0b       	sbc	r29, r27
    661c:	0f b6       	in	r0, 0x3f	; 63
    661e:	f8 94       	cli
    6620:	de bf       	out	0x3e, r29	; 62
    6622:	0f be       	out	0x3f, r0	; 63
    6624:	cd bf       	out	0x3d, r28	; 61
    6626:	09 94       	ijmp

00006628 <__epilogue_restores__>:
    6628:	2a 88       	ldd	r2, Y+18	; 0x12
    662a:	39 88       	ldd	r3, Y+17	; 0x11
    662c:	48 88       	ldd	r4, Y+16	; 0x10
    662e:	5f 84       	ldd	r5, Y+15	; 0x0f
    6630:	6e 84       	ldd	r6, Y+14	; 0x0e
    6632:	7d 84       	ldd	r7, Y+13	; 0x0d
    6634:	8c 84       	ldd	r8, Y+12	; 0x0c
    6636:	9b 84       	ldd	r9, Y+11	; 0x0b
    6638:	aa 84       	ldd	r10, Y+10	; 0x0a
    663a:	b9 84       	ldd	r11, Y+9	; 0x09
    663c:	c8 84       	ldd	r12, Y+8	; 0x08
    663e:	df 80       	ldd	r13, Y+7	; 0x07
    6640:	ee 80       	ldd	r14, Y+6	; 0x06
    6642:	fd 80       	ldd	r15, Y+5	; 0x05
    6644:	0c 81       	ldd	r16, Y+4	; 0x04
    6646:	1b 81       	ldd	r17, Y+3	; 0x03
    6648:	aa 81       	ldd	r26, Y+2	; 0x02
    664a:	b9 81       	ldd	r27, Y+1	; 0x01
    664c:	ce 0f       	add	r28, r30
    664e:	d1 1d       	adc	r29, r1
    6650:	0f b6       	in	r0, 0x3f	; 63
    6652:	f8 94       	cli
    6654:	de bf       	out	0x3e, r29	; 62
    6656:	0f be       	out	0x3f, r0	; 63
    6658:	cd bf       	out	0x3d, r28	; 61
    665a:	ed 01       	movw	r28, r26
    665c:	08 95       	ret

0000665e <malloc>:
    665e:	cf 93       	push	r28
    6660:	df 93       	push	r29
    6662:	bc 01       	movw	r22, r24
    6664:	82 30       	cpi	r24, 0x02	; 2
    6666:	91 05       	cpc	r25, r1
    6668:	10 f4       	brcc	.+4      	; 0x666e <malloc+0x10>
    666a:	62 e0       	ldi	r22, 0x02	; 2
    666c:	70 e0       	ldi	r23, 0x00	; 0
    666e:	a0 91 3e 07 	lds	r26, 0x073E
    6672:	b0 91 3f 07 	lds	r27, 0x073F
    6676:	ed 01       	movw	r28, r26
    6678:	e0 e0       	ldi	r30, 0x00	; 0
    667a:	f0 e0       	ldi	r31, 0x00	; 0
    667c:	40 e0       	ldi	r20, 0x00	; 0
    667e:	50 e0       	ldi	r21, 0x00	; 0
    6680:	21 c0       	rjmp	.+66     	; 0x66c4 <malloc+0x66>
    6682:	88 81       	ld	r24, Y
    6684:	99 81       	ldd	r25, Y+1	; 0x01
    6686:	86 17       	cp	r24, r22
    6688:	97 07       	cpc	r25, r23
    668a:	69 f4       	brne	.+26     	; 0x66a6 <malloc+0x48>
    668c:	8a 81       	ldd	r24, Y+2	; 0x02
    668e:	9b 81       	ldd	r25, Y+3	; 0x03
    6690:	30 97       	sbiw	r30, 0x00	; 0
    6692:	19 f0       	breq	.+6      	; 0x669a <malloc+0x3c>
    6694:	93 83       	std	Z+3, r25	; 0x03
    6696:	82 83       	std	Z+2, r24	; 0x02
    6698:	04 c0       	rjmp	.+8      	; 0x66a2 <malloc+0x44>
    669a:	90 93 3f 07 	sts	0x073F, r25
    669e:	80 93 3e 07 	sts	0x073E, r24
    66a2:	fe 01       	movw	r30, r28
    66a4:	34 c0       	rjmp	.+104    	; 0x670e <malloc+0xb0>
    66a6:	68 17       	cp	r22, r24
    66a8:	79 07       	cpc	r23, r25
    66aa:	38 f4       	brcc	.+14     	; 0x66ba <malloc+0x5c>
    66ac:	41 15       	cp	r20, r1
    66ae:	51 05       	cpc	r21, r1
    66b0:	19 f0       	breq	.+6      	; 0x66b8 <malloc+0x5a>
    66b2:	84 17       	cp	r24, r20
    66b4:	95 07       	cpc	r25, r21
    66b6:	08 f4       	brcc	.+2      	; 0x66ba <malloc+0x5c>
    66b8:	ac 01       	movw	r20, r24
    66ba:	fe 01       	movw	r30, r28
    66bc:	8a 81       	ldd	r24, Y+2	; 0x02
    66be:	9b 81       	ldd	r25, Y+3	; 0x03
    66c0:	9c 01       	movw	r18, r24
    66c2:	e9 01       	movw	r28, r18
    66c4:	20 97       	sbiw	r28, 0x00	; 0
    66c6:	e9 f6       	brne	.-70     	; 0x6682 <malloc+0x24>
    66c8:	41 15       	cp	r20, r1
    66ca:	51 05       	cpc	r21, r1
    66cc:	a9 f1       	breq	.+106    	; 0x6738 <malloc+0xda>
    66ce:	ca 01       	movw	r24, r20
    66d0:	86 1b       	sub	r24, r22
    66d2:	97 0b       	sbc	r25, r23
    66d4:	04 97       	sbiw	r24, 0x04	; 4
    66d6:	08 f4       	brcc	.+2      	; 0x66da <malloc+0x7c>
    66d8:	ba 01       	movw	r22, r20
    66da:	e0 e0       	ldi	r30, 0x00	; 0
    66dc:	f0 e0       	ldi	r31, 0x00	; 0
    66de:	2a c0       	rjmp	.+84     	; 0x6734 <malloc+0xd6>
    66e0:	8d 91       	ld	r24, X+
    66e2:	9c 91       	ld	r25, X
    66e4:	11 97       	sbiw	r26, 0x01	; 1
    66e6:	84 17       	cp	r24, r20
    66e8:	95 07       	cpc	r25, r21
    66ea:	f9 f4       	brne	.+62     	; 0x672a <malloc+0xcc>
    66ec:	64 17       	cp	r22, r20
    66ee:	75 07       	cpc	r23, r21
    66f0:	81 f4       	brne	.+32     	; 0x6712 <malloc+0xb4>
    66f2:	12 96       	adiw	r26, 0x02	; 2
    66f4:	8d 91       	ld	r24, X+
    66f6:	9c 91       	ld	r25, X
    66f8:	13 97       	sbiw	r26, 0x03	; 3
    66fa:	30 97       	sbiw	r30, 0x00	; 0
    66fc:	19 f0       	breq	.+6      	; 0x6704 <malloc+0xa6>
    66fe:	93 83       	std	Z+3, r25	; 0x03
    6700:	82 83       	std	Z+2, r24	; 0x02
    6702:	04 c0       	rjmp	.+8      	; 0x670c <malloc+0xae>
    6704:	90 93 3f 07 	sts	0x073F, r25
    6708:	80 93 3e 07 	sts	0x073E, r24
    670c:	fd 01       	movw	r30, r26
    670e:	32 96       	adiw	r30, 0x02	; 2
    6710:	4f c0       	rjmp	.+158    	; 0x67b0 <malloc+0x152>
    6712:	ca 01       	movw	r24, r20
    6714:	86 1b       	sub	r24, r22
    6716:	97 0b       	sbc	r25, r23
    6718:	fd 01       	movw	r30, r26
    671a:	e8 0f       	add	r30, r24
    671c:	f9 1f       	adc	r31, r25
    671e:	61 93       	st	Z+, r22
    6720:	71 93       	st	Z+, r23
    6722:	02 97       	sbiw	r24, 0x02	; 2
    6724:	8d 93       	st	X+, r24
    6726:	9c 93       	st	X, r25
    6728:	43 c0       	rjmp	.+134    	; 0x67b0 <malloc+0x152>
    672a:	fd 01       	movw	r30, r26
    672c:	82 81       	ldd	r24, Z+2	; 0x02
    672e:	93 81       	ldd	r25, Z+3	; 0x03
    6730:	9c 01       	movw	r18, r24
    6732:	d9 01       	movw	r26, r18
    6734:	10 97       	sbiw	r26, 0x00	; 0
    6736:	a1 f6       	brne	.-88     	; 0x66e0 <malloc+0x82>
    6738:	80 91 3c 07 	lds	r24, 0x073C
    673c:	90 91 3d 07 	lds	r25, 0x073D
    6740:	89 2b       	or	r24, r25
    6742:	41 f4       	brne	.+16     	; 0x6754 <malloc+0xf6>
    6744:	80 91 85 03 	lds	r24, 0x0385
    6748:	90 91 86 03 	lds	r25, 0x0386
    674c:	90 93 3d 07 	sts	0x073D, r25
    6750:	80 93 3c 07 	sts	0x073C, r24
    6754:	40 91 87 03 	lds	r20, 0x0387
    6758:	50 91 88 03 	lds	r21, 0x0388
    675c:	41 15       	cp	r20, r1
    675e:	51 05       	cpc	r21, r1
    6760:	41 f4       	brne	.+16     	; 0x6772 <malloc+0x114>
    6762:	4d b7       	in	r20, 0x3d	; 61
    6764:	5e b7       	in	r21, 0x3e	; 62
    6766:	80 91 83 03 	lds	r24, 0x0383
    676a:	90 91 84 03 	lds	r25, 0x0384
    676e:	48 1b       	sub	r20, r24
    6770:	59 0b       	sbc	r21, r25
    6772:	20 91 3c 07 	lds	r18, 0x073C
    6776:	30 91 3d 07 	lds	r19, 0x073D
    677a:	24 17       	cp	r18, r20
    677c:	35 07       	cpc	r19, r21
    677e:	b0 f4       	brcc	.+44     	; 0x67ac <malloc+0x14e>
    6780:	ca 01       	movw	r24, r20
    6782:	82 1b       	sub	r24, r18
    6784:	93 0b       	sbc	r25, r19
    6786:	86 17       	cp	r24, r22
    6788:	97 07       	cpc	r25, r23
    678a:	80 f0       	brcs	.+32     	; 0x67ac <malloc+0x14e>
    678c:	ab 01       	movw	r20, r22
    678e:	4e 5f       	subi	r20, 0xFE	; 254
    6790:	5f 4f       	sbci	r21, 0xFF	; 255
    6792:	84 17       	cp	r24, r20
    6794:	95 07       	cpc	r25, r21
    6796:	50 f0       	brcs	.+20     	; 0x67ac <malloc+0x14e>
    6798:	42 0f       	add	r20, r18
    679a:	53 1f       	adc	r21, r19
    679c:	50 93 3d 07 	sts	0x073D, r21
    67a0:	40 93 3c 07 	sts	0x073C, r20
    67a4:	f9 01       	movw	r30, r18
    67a6:	61 93       	st	Z+, r22
    67a8:	71 93       	st	Z+, r23
    67aa:	02 c0       	rjmp	.+4      	; 0x67b0 <malloc+0x152>
    67ac:	e0 e0       	ldi	r30, 0x00	; 0
    67ae:	f0 e0       	ldi	r31, 0x00	; 0
    67b0:	cf 01       	movw	r24, r30
    67b2:	df 91       	pop	r29
    67b4:	cf 91       	pop	r28
    67b6:	08 95       	ret

000067b8 <free>:
    67b8:	cf 93       	push	r28
    67ba:	df 93       	push	r29
    67bc:	00 97       	sbiw	r24, 0x00	; 0
    67be:	09 f4       	brne	.+2      	; 0x67c2 <free+0xa>
    67c0:	50 c0       	rjmp	.+160    	; 0x6862 <free+0xaa>
    67c2:	ec 01       	movw	r28, r24
    67c4:	22 97       	sbiw	r28, 0x02	; 2
    67c6:	1b 82       	std	Y+3, r1	; 0x03
    67c8:	1a 82       	std	Y+2, r1	; 0x02
    67ca:	a0 91 3e 07 	lds	r26, 0x073E
    67ce:	b0 91 3f 07 	lds	r27, 0x073F
    67d2:	10 97       	sbiw	r26, 0x00	; 0
    67d4:	09 f1       	breq	.+66     	; 0x6818 <free+0x60>
    67d6:	40 e0       	ldi	r20, 0x00	; 0
    67d8:	50 e0       	ldi	r21, 0x00	; 0
    67da:	ac 17       	cp	r26, r28
    67dc:	bd 07       	cpc	r27, r29
    67de:	08 f1       	brcs	.+66     	; 0x6822 <free+0x6a>
    67e0:	bb 83       	std	Y+3, r27	; 0x03
    67e2:	aa 83       	std	Y+2, r26	; 0x02
    67e4:	fe 01       	movw	r30, r28
    67e6:	21 91       	ld	r18, Z+
    67e8:	31 91       	ld	r19, Z+
    67ea:	e2 0f       	add	r30, r18
    67ec:	f3 1f       	adc	r31, r19
    67ee:	ae 17       	cp	r26, r30
    67f0:	bf 07       	cpc	r27, r31
    67f2:	79 f4       	brne	.+30     	; 0x6812 <free+0x5a>
    67f4:	8d 91       	ld	r24, X+
    67f6:	9c 91       	ld	r25, X
    67f8:	11 97       	sbiw	r26, 0x01	; 1
    67fa:	28 0f       	add	r18, r24
    67fc:	39 1f       	adc	r19, r25
    67fe:	2e 5f       	subi	r18, 0xFE	; 254
    6800:	3f 4f       	sbci	r19, 0xFF	; 255
    6802:	39 83       	std	Y+1, r19	; 0x01
    6804:	28 83       	st	Y, r18
    6806:	12 96       	adiw	r26, 0x02	; 2
    6808:	8d 91       	ld	r24, X+
    680a:	9c 91       	ld	r25, X
    680c:	13 97       	sbiw	r26, 0x03	; 3
    680e:	9b 83       	std	Y+3, r25	; 0x03
    6810:	8a 83       	std	Y+2, r24	; 0x02
    6812:	41 15       	cp	r20, r1
    6814:	51 05       	cpc	r21, r1
    6816:	71 f4       	brne	.+28     	; 0x6834 <free+0x7c>
    6818:	d0 93 3f 07 	sts	0x073F, r29
    681c:	c0 93 3e 07 	sts	0x073E, r28
    6820:	20 c0       	rjmp	.+64     	; 0x6862 <free+0xaa>
    6822:	12 96       	adiw	r26, 0x02	; 2
    6824:	8d 91       	ld	r24, X+
    6826:	9c 91       	ld	r25, X
    6828:	13 97       	sbiw	r26, 0x03	; 3
    682a:	ad 01       	movw	r20, r26
    682c:	00 97       	sbiw	r24, 0x00	; 0
    682e:	11 f0       	breq	.+4      	; 0x6834 <free+0x7c>
    6830:	dc 01       	movw	r26, r24
    6832:	d3 cf       	rjmp	.-90     	; 0x67da <free+0x22>
    6834:	fa 01       	movw	r30, r20
    6836:	d3 83       	std	Z+3, r29	; 0x03
    6838:	c2 83       	std	Z+2, r28	; 0x02
    683a:	21 91       	ld	r18, Z+
    683c:	31 91       	ld	r19, Z+
    683e:	e2 0f       	add	r30, r18
    6840:	f3 1f       	adc	r31, r19
    6842:	ce 17       	cp	r28, r30
    6844:	df 07       	cpc	r29, r31
    6846:	69 f4       	brne	.+26     	; 0x6862 <free+0xaa>
    6848:	88 81       	ld	r24, Y
    684a:	99 81       	ldd	r25, Y+1	; 0x01
    684c:	28 0f       	add	r18, r24
    684e:	39 1f       	adc	r19, r25
    6850:	2e 5f       	subi	r18, 0xFE	; 254
    6852:	3f 4f       	sbci	r19, 0xFF	; 255
    6854:	fa 01       	movw	r30, r20
    6856:	31 83       	std	Z+1, r19	; 0x01
    6858:	20 83       	st	Z, r18
    685a:	8a 81       	ldd	r24, Y+2	; 0x02
    685c:	9b 81       	ldd	r25, Y+3	; 0x03
    685e:	93 83       	std	Z+3, r25	; 0x03
    6860:	82 83       	std	Z+2, r24	; 0x02
    6862:	df 91       	pop	r29
    6864:	cf 91       	pop	r28
    6866:	08 95       	ret

00006868 <__ftoa_engine>:
    6868:	28 30       	cpi	r18, 0x08	; 8
    686a:	08 f0       	brcs	.+2      	; 0x686e <__ftoa_engine+0x6>
    686c:	27 e0       	ldi	r18, 0x07	; 7
    686e:	33 27       	eor	r19, r19
    6870:	da 01       	movw	r26, r20
    6872:	99 0f       	add	r25, r25
    6874:	31 1d       	adc	r19, r1
    6876:	87 fd       	sbrc	r24, 7
    6878:	91 60       	ori	r25, 0x01	; 1
    687a:	00 96       	adiw	r24, 0x00	; 0
    687c:	61 05       	cpc	r22, r1
    687e:	71 05       	cpc	r23, r1
    6880:	39 f4       	brne	.+14     	; 0x6890 <__ftoa_engine+0x28>
    6882:	32 60       	ori	r19, 0x02	; 2
    6884:	2e 5f       	subi	r18, 0xFE	; 254
    6886:	3d 93       	st	X+, r19
    6888:	30 e3       	ldi	r19, 0x30	; 48
    688a:	2a 95       	dec	r18
    688c:	e1 f7       	brne	.-8      	; 0x6886 <__ftoa_engine+0x1e>
    688e:	08 95       	ret
    6890:	9f 3f       	cpi	r25, 0xFF	; 255
    6892:	30 f0       	brcs	.+12     	; 0x68a0 <__ftoa_engine+0x38>
    6894:	80 38       	cpi	r24, 0x80	; 128
    6896:	71 05       	cpc	r23, r1
    6898:	61 05       	cpc	r22, r1
    689a:	09 f0       	breq	.+2      	; 0x689e <__ftoa_engine+0x36>
    689c:	3c 5f       	subi	r19, 0xFC	; 252
    689e:	3c 5f       	subi	r19, 0xFC	; 252
    68a0:	3d 93       	st	X+, r19
    68a2:	91 30       	cpi	r25, 0x01	; 1
    68a4:	08 f0       	brcs	.+2      	; 0x68a8 <__ftoa_engine+0x40>
    68a6:	80 68       	ori	r24, 0x80	; 128
    68a8:	91 1d       	adc	r25, r1
    68aa:	df 93       	push	r29
    68ac:	cf 93       	push	r28
    68ae:	1f 93       	push	r17
    68b0:	0f 93       	push	r16
    68b2:	ff 92       	push	r15
    68b4:	ef 92       	push	r14
    68b6:	19 2f       	mov	r17, r25
    68b8:	98 7f       	andi	r25, 0xF8	; 248
    68ba:	96 95       	lsr	r25
    68bc:	e9 2f       	mov	r30, r25
    68be:	96 95       	lsr	r25
    68c0:	96 95       	lsr	r25
    68c2:	e9 0f       	add	r30, r25
    68c4:	ff 27       	eor	r31, r31
    68c6:	ef 53       	subi	r30, 0x3F	; 63
    68c8:	fa 4f       	sbci	r31, 0xFA	; 250
    68ca:	99 27       	eor	r25, r25
    68cc:	33 27       	eor	r19, r19
    68ce:	ee 24       	eor	r14, r14
    68d0:	ff 24       	eor	r15, r15
    68d2:	a7 01       	movw	r20, r14
    68d4:	e7 01       	movw	r28, r14
    68d6:	05 90       	lpm	r0, Z+
    68d8:	08 94       	sec
    68da:	07 94       	ror	r0
    68dc:	28 f4       	brcc	.+10     	; 0x68e8 <__ftoa_engine+0x80>
    68de:	36 0f       	add	r19, r22
    68e0:	e7 1e       	adc	r14, r23
    68e2:	f8 1e       	adc	r15, r24
    68e4:	49 1f       	adc	r20, r25
    68e6:	51 1d       	adc	r21, r1
    68e8:	66 0f       	add	r22, r22
    68ea:	77 1f       	adc	r23, r23
    68ec:	88 1f       	adc	r24, r24
    68ee:	99 1f       	adc	r25, r25
    68f0:	06 94       	lsr	r0
    68f2:	a1 f7       	brne	.-24     	; 0x68dc <__ftoa_engine+0x74>
    68f4:	05 90       	lpm	r0, Z+
    68f6:	07 94       	ror	r0
    68f8:	28 f4       	brcc	.+10     	; 0x6904 <__ftoa_engine+0x9c>
    68fa:	e7 0e       	add	r14, r23
    68fc:	f8 1e       	adc	r15, r24
    68fe:	49 1f       	adc	r20, r25
    6900:	56 1f       	adc	r21, r22
    6902:	c1 1d       	adc	r28, r1
    6904:	77 0f       	add	r23, r23
    6906:	88 1f       	adc	r24, r24
    6908:	99 1f       	adc	r25, r25
    690a:	66 1f       	adc	r22, r22
    690c:	06 94       	lsr	r0
    690e:	a1 f7       	brne	.-24     	; 0x68f8 <__ftoa_engine+0x90>
    6910:	05 90       	lpm	r0, Z+
    6912:	07 94       	ror	r0
    6914:	28 f4       	brcc	.+10     	; 0x6920 <__ftoa_engine+0xb8>
    6916:	f8 0e       	add	r15, r24
    6918:	49 1f       	adc	r20, r25
    691a:	56 1f       	adc	r21, r22
    691c:	c7 1f       	adc	r28, r23
    691e:	d1 1d       	adc	r29, r1
    6920:	88 0f       	add	r24, r24
    6922:	99 1f       	adc	r25, r25
    6924:	66 1f       	adc	r22, r22
    6926:	77 1f       	adc	r23, r23
    6928:	06 94       	lsr	r0
    692a:	a1 f7       	brne	.-24     	; 0x6914 <__ftoa_engine+0xac>
    692c:	05 90       	lpm	r0, Z+
    692e:	07 94       	ror	r0
    6930:	20 f4       	brcc	.+8      	; 0x693a <__ftoa_engine+0xd2>
    6932:	49 0f       	add	r20, r25
    6934:	56 1f       	adc	r21, r22
    6936:	c7 1f       	adc	r28, r23
    6938:	d8 1f       	adc	r29, r24
    693a:	99 0f       	add	r25, r25
    693c:	66 1f       	adc	r22, r22
    693e:	77 1f       	adc	r23, r23
    6940:	88 1f       	adc	r24, r24
    6942:	06 94       	lsr	r0
    6944:	a9 f7       	brne	.-22     	; 0x6930 <__ftoa_engine+0xc8>
    6946:	84 91       	lpm	r24, Z+
    6948:	10 95       	com	r17
    694a:	17 70       	andi	r17, 0x07	; 7
    694c:	41 f0       	breq	.+16     	; 0x695e <__ftoa_engine+0xf6>
    694e:	d6 95       	lsr	r29
    6950:	c7 95       	ror	r28
    6952:	57 95       	ror	r21
    6954:	47 95       	ror	r20
    6956:	f7 94       	ror	r15
    6958:	e7 94       	ror	r14
    695a:	1a 95       	dec	r17
    695c:	c1 f7       	brne	.-16     	; 0x694e <__ftoa_engine+0xe6>
    695e:	e7 e6       	ldi	r30, 0x67	; 103
    6960:	f5 e0       	ldi	r31, 0x05	; 5
    6962:	68 94       	set
    6964:	15 90       	lpm	r1, Z+
    6966:	15 91       	lpm	r17, Z+
    6968:	35 91       	lpm	r19, Z+
    696a:	65 91       	lpm	r22, Z+
    696c:	95 91       	lpm	r25, Z+
    696e:	05 90       	lpm	r0, Z+
    6970:	7f e2       	ldi	r23, 0x2F	; 47
    6972:	73 95       	inc	r23
    6974:	e1 18       	sub	r14, r1
    6976:	f1 0a       	sbc	r15, r17
    6978:	43 0b       	sbc	r20, r19
    697a:	56 0b       	sbc	r21, r22
    697c:	c9 0b       	sbc	r28, r25
    697e:	d0 09       	sbc	r29, r0
    6980:	c0 f7       	brcc	.-16     	; 0x6972 <__ftoa_engine+0x10a>
    6982:	e1 0c       	add	r14, r1
    6984:	f1 1e       	adc	r15, r17
    6986:	43 1f       	adc	r20, r19
    6988:	56 1f       	adc	r21, r22
    698a:	c9 1f       	adc	r28, r25
    698c:	d0 1d       	adc	r29, r0
    698e:	7e f4       	brtc	.+30     	; 0x69ae <__ftoa_engine+0x146>
    6990:	70 33       	cpi	r23, 0x30	; 48
    6992:	11 f4       	brne	.+4      	; 0x6998 <__ftoa_engine+0x130>
    6994:	8a 95       	dec	r24
    6996:	e6 cf       	rjmp	.-52     	; 0x6964 <__ftoa_engine+0xfc>
    6998:	e8 94       	clt
    699a:	01 50       	subi	r16, 0x01	; 1
    699c:	30 f0       	brcs	.+12     	; 0x69aa <__ftoa_engine+0x142>
    699e:	08 0f       	add	r16, r24
    69a0:	0a f4       	brpl	.+2      	; 0x69a4 <__ftoa_engine+0x13c>
    69a2:	00 27       	eor	r16, r16
    69a4:	02 17       	cp	r16, r18
    69a6:	08 f4       	brcc	.+2      	; 0x69aa <__ftoa_engine+0x142>
    69a8:	20 2f       	mov	r18, r16
    69aa:	23 95       	inc	r18
    69ac:	02 2f       	mov	r16, r18
    69ae:	7a 33       	cpi	r23, 0x3A	; 58
    69b0:	28 f0       	brcs	.+10     	; 0x69bc <__ftoa_engine+0x154>
    69b2:	79 e3       	ldi	r23, 0x39	; 57
    69b4:	7d 93       	st	X+, r23
    69b6:	2a 95       	dec	r18
    69b8:	e9 f7       	brne	.-6      	; 0x69b4 <__ftoa_engine+0x14c>
    69ba:	10 c0       	rjmp	.+32     	; 0x69dc <__ftoa_engine+0x174>
    69bc:	7d 93       	st	X+, r23
    69be:	2a 95       	dec	r18
    69c0:	89 f6       	brne	.-94     	; 0x6964 <__ftoa_engine+0xfc>
    69c2:	06 94       	lsr	r0
    69c4:	97 95       	ror	r25
    69c6:	67 95       	ror	r22
    69c8:	37 95       	ror	r19
    69ca:	17 95       	ror	r17
    69cc:	17 94       	ror	r1
    69ce:	e1 18       	sub	r14, r1
    69d0:	f1 0a       	sbc	r15, r17
    69d2:	43 0b       	sbc	r20, r19
    69d4:	56 0b       	sbc	r21, r22
    69d6:	c9 0b       	sbc	r28, r25
    69d8:	d0 09       	sbc	r29, r0
    69da:	98 f0       	brcs	.+38     	; 0x6a02 <__ftoa_engine+0x19a>
    69dc:	23 95       	inc	r18
    69de:	7e 91       	ld	r23, -X
    69e0:	73 95       	inc	r23
    69e2:	7a 33       	cpi	r23, 0x3A	; 58
    69e4:	08 f0       	brcs	.+2      	; 0x69e8 <__ftoa_engine+0x180>
    69e6:	70 e3       	ldi	r23, 0x30	; 48
    69e8:	7c 93       	st	X, r23
    69ea:	20 13       	cpse	r18, r16
    69ec:	b8 f7       	brcc	.-18     	; 0x69dc <__ftoa_engine+0x174>
    69ee:	7e 91       	ld	r23, -X
    69f0:	70 61       	ori	r23, 0x10	; 16
    69f2:	7d 93       	st	X+, r23
    69f4:	30 f0       	brcs	.+12     	; 0x6a02 <__ftoa_engine+0x19a>
    69f6:	83 95       	inc	r24
    69f8:	71 e3       	ldi	r23, 0x31	; 49
    69fa:	7d 93       	st	X+, r23
    69fc:	70 e3       	ldi	r23, 0x30	; 48
    69fe:	2a 95       	dec	r18
    6a00:	e1 f7       	brne	.-8      	; 0x69fa <__ftoa_engine+0x192>
    6a02:	11 24       	eor	r1, r1
    6a04:	ef 90       	pop	r14
    6a06:	ff 90       	pop	r15
    6a08:	0f 91       	pop	r16
    6a0a:	1f 91       	pop	r17
    6a0c:	cf 91       	pop	r28
    6a0e:	df 91       	pop	r29
    6a10:	99 27       	eor	r25, r25
    6a12:	87 fd       	sbrc	r24, 7
    6a14:	90 95       	com	r25
    6a16:	08 95       	ret

00006a18 <strnlen_P>:
    6a18:	fc 01       	movw	r30, r24
    6a1a:	05 90       	lpm	r0, Z+
    6a1c:	61 50       	subi	r22, 0x01	; 1
    6a1e:	70 40       	sbci	r23, 0x00	; 0
    6a20:	01 10       	cpse	r0, r1
    6a22:	d8 f7       	brcc	.-10     	; 0x6a1a <strnlen_P+0x2>
    6a24:	80 95       	com	r24
    6a26:	90 95       	com	r25
    6a28:	8e 0f       	add	r24, r30
    6a2a:	9f 1f       	adc	r25, r31
    6a2c:	08 95       	ret

00006a2e <strnlen>:
    6a2e:	fc 01       	movw	r30, r24
    6a30:	61 50       	subi	r22, 0x01	; 1
    6a32:	70 40       	sbci	r23, 0x00	; 0
    6a34:	01 90       	ld	r0, Z+
    6a36:	01 10       	cpse	r0, r1
    6a38:	d8 f7       	brcc	.-10     	; 0x6a30 <strnlen+0x2>
    6a3a:	80 95       	com	r24
    6a3c:	90 95       	com	r25
    6a3e:	8e 0f       	add	r24, r30
    6a40:	9f 1f       	adc	r25, r31
    6a42:	08 95       	ret

00006a44 <fputc>:
    6a44:	0f 93       	push	r16
    6a46:	1f 93       	push	r17
    6a48:	cf 93       	push	r28
    6a4a:	df 93       	push	r29
    6a4c:	8c 01       	movw	r16, r24
    6a4e:	eb 01       	movw	r28, r22
    6a50:	8b 81       	ldd	r24, Y+3	; 0x03
    6a52:	81 ff       	sbrs	r24, 1
    6a54:	1b c0       	rjmp	.+54     	; 0x6a8c <fputc+0x48>
    6a56:	82 ff       	sbrs	r24, 2
    6a58:	0d c0       	rjmp	.+26     	; 0x6a74 <fputc+0x30>
    6a5a:	2e 81       	ldd	r18, Y+6	; 0x06
    6a5c:	3f 81       	ldd	r19, Y+7	; 0x07
    6a5e:	8c 81       	ldd	r24, Y+4	; 0x04
    6a60:	9d 81       	ldd	r25, Y+5	; 0x05
    6a62:	28 17       	cp	r18, r24
    6a64:	39 07       	cpc	r19, r25
    6a66:	64 f4       	brge	.+24     	; 0x6a80 <fputc+0x3c>
    6a68:	e8 81       	ld	r30, Y
    6a6a:	f9 81       	ldd	r31, Y+1	; 0x01
    6a6c:	01 93       	st	Z+, r16
    6a6e:	f9 83       	std	Y+1, r31	; 0x01
    6a70:	e8 83       	st	Y, r30
    6a72:	06 c0       	rjmp	.+12     	; 0x6a80 <fputc+0x3c>
    6a74:	e8 85       	ldd	r30, Y+8	; 0x08
    6a76:	f9 85       	ldd	r31, Y+9	; 0x09
    6a78:	80 2f       	mov	r24, r16
    6a7a:	09 95       	icall
    6a7c:	89 2b       	or	r24, r25
    6a7e:	31 f4       	brne	.+12     	; 0x6a8c <fputc+0x48>
    6a80:	8e 81       	ldd	r24, Y+6	; 0x06
    6a82:	9f 81       	ldd	r25, Y+7	; 0x07
    6a84:	01 96       	adiw	r24, 0x01	; 1
    6a86:	9f 83       	std	Y+7, r25	; 0x07
    6a88:	8e 83       	std	Y+6, r24	; 0x06
    6a8a:	02 c0       	rjmp	.+4      	; 0x6a90 <fputc+0x4c>
    6a8c:	0f ef       	ldi	r16, 0xFF	; 255
    6a8e:	1f ef       	ldi	r17, 0xFF	; 255
    6a90:	c8 01       	movw	r24, r16
    6a92:	df 91       	pop	r29
    6a94:	cf 91       	pop	r28
    6a96:	1f 91       	pop	r17
    6a98:	0f 91       	pop	r16
    6a9a:	08 95       	ret

00006a9c <printf>:
    6a9c:	a0 e0       	ldi	r26, 0x00	; 0
    6a9e:	b0 e0       	ldi	r27, 0x00	; 0
    6aa0:	e3 e5       	ldi	r30, 0x53	; 83
    6aa2:	f5 e3       	ldi	r31, 0x35	; 53
    6aa4:	b5 cd       	rjmp	.-1174   	; 0x6610 <__prologue_saves__+0x20>
    6aa6:	fe 01       	movw	r30, r28
    6aa8:	35 96       	adiw	r30, 0x05	; 5
    6aaa:	61 91       	ld	r22, Z+
    6aac:	71 91       	ld	r23, Z+
    6aae:	80 91 42 07 	lds	r24, 0x0742
    6ab2:	90 91 43 07 	lds	r25, 0x0743
    6ab6:	af 01       	movw	r20, r30
    6ab8:	f2 d9       	rcall	.-3100   	; 0x5e9e <vfprintf>
    6aba:	20 96       	adiw	r28, 0x00	; 0
    6abc:	e2 e0       	ldi	r30, 0x02	; 2
    6abe:	c4 cd       	rjmp	.-1144   	; 0x6648 <__epilogue_restores__+0x20>

00006ac0 <puts>:
    6ac0:	0f 93       	push	r16
    6ac2:	1f 93       	push	r17
    6ac4:	cf 93       	push	r28
    6ac6:	df 93       	push	r29
    6ac8:	8c 01       	movw	r16, r24
    6aca:	e0 91 42 07 	lds	r30, 0x0742
    6ace:	f0 91 43 07 	lds	r31, 0x0743
    6ad2:	83 81       	ldd	r24, Z+3	; 0x03
    6ad4:	81 ff       	sbrs	r24, 1
    6ad6:	21 c0       	rjmp	.+66     	; 0x6b1a <puts+0x5a>
    6ad8:	c0 e0       	ldi	r28, 0x00	; 0
    6ada:	d0 e0       	ldi	r29, 0x00	; 0
    6adc:	0d c0       	rjmp	.+26     	; 0x6af8 <puts+0x38>
    6ade:	e0 91 42 07 	lds	r30, 0x0742
    6ae2:	f0 91 43 07 	lds	r31, 0x0743
    6ae6:	20 85       	ldd	r18, Z+8	; 0x08
    6ae8:	31 85       	ldd	r19, Z+9	; 0x09
    6aea:	bf 01       	movw	r22, r30
    6aec:	f9 01       	movw	r30, r18
    6aee:	09 95       	icall
    6af0:	89 2b       	or	r24, r25
    6af2:	11 f0       	breq	.+4      	; 0x6af8 <puts+0x38>
    6af4:	cf ef       	ldi	r28, 0xFF	; 255
    6af6:	df ef       	ldi	r29, 0xFF	; 255
    6af8:	f8 01       	movw	r30, r16
    6afa:	81 91       	ld	r24, Z+
    6afc:	8f 01       	movw	r16, r30
    6afe:	88 23       	and	r24, r24
    6b00:	71 f7       	brne	.-36     	; 0x6ade <puts+0x1e>
    6b02:	e0 91 42 07 	lds	r30, 0x0742
    6b06:	f0 91 43 07 	lds	r31, 0x0743
    6b0a:	20 85       	ldd	r18, Z+8	; 0x08
    6b0c:	31 85       	ldd	r19, Z+9	; 0x09
    6b0e:	8a e0       	ldi	r24, 0x0A	; 10
    6b10:	bf 01       	movw	r22, r30
    6b12:	f9 01       	movw	r30, r18
    6b14:	09 95       	icall
    6b16:	89 2b       	or	r24, r25
    6b18:	11 f0       	breq	.+4      	; 0x6b1e <puts+0x5e>
    6b1a:	cf ef       	ldi	r28, 0xFF	; 255
    6b1c:	df ef       	ldi	r29, 0xFF	; 255
    6b1e:	ce 01       	movw	r24, r28
    6b20:	df 91       	pop	r29
    6b22:	cf 91       	pop	r28
    6b24:	1f 91       	pop	r17
    6b26:	0f 91       	pop	r16
    6b28:	08 95       	ret

00006b2a <__ultoa_invert>:
    6b2a:	fa 01       	movw	r30, r20
    6b2c:	aa 27       	eor	r26, r26
    6b2e:	28 30       	cpi	r18, 0x08	; 8
    6b30:	51 f1       	breq	.+84     	; 0x6b86 <__ultoa_invert+0x5c>
    6b32:	20 31       	cpi	r18, 0x10	; 16
    6b34:	81 f1       	breq	.+96     	; 0x6b96 <__ultoa_invert+0x6c>
    6b36:	e8 94       	clt
    6b38:	6f 93       	push	r22
    6b3a:	6e 7f       	andi	r22, 0xFE	; 254
    6b3c:	6e 5f       	subi	r22, 0xFE	; 254
    6b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    6b40:	8f 4f       	sbci	r24, 0xFF	; 255
    6b42:	9f 4f       	sbci	r25, 0xFF	; 255
    6b44:	af 4f       	sbci	r26, 0xFF	; 255
    6b46:	b1 e0       	ldi	r27, 0x01	; 1
    6b48:	3e d0       	rcall	.+124    	; 0x6bc6 <__ultoa_invert+0x9c>
    6b4a:	b4 e0       	ldi	r27, 0x04	; 4
    6b4c:	3c d0       	rcall	.+120    	; 0x6bc6 <__ultoa_invert+0x9c>
    6b4e:	67 0f       	add	r22, r23
    6b50:	78 1f       	adc	r23, r24
    6b52:	89 1f       	adc	r24, r25
    6b54:	9a 1f       	adc	r25, r26
    6b56:	a1 1d       	adc	r26, r1
    6b58:	68 0f       	add	r22, r24
    6b5a:	79 1f       	adc	r23, r25
    6b5c:	8a 1f       	adc	r24, r26
    6b5e:	91 1d       	adc	r25, r1
    6b60:	a1 1d       	adc	r26, r1
    6b62:	6a 0f       	add	r22, r26
    6b64:	71 1d       	adc	r23, r1
    6b66:	81 1d       	adc	r24, r1
    6b68:	91 1d       	adc	r25, r1
    6b6a:	a1 1d       	adc	r26, r1
    6b6c:	20 d0       	rcall	.+64     	; 0x6bae <__ultoa_invert+0x84>
    6b6e:	09 f4       	brne	.+2      	; 0x6b72 <__ultoa_invert+0x48>
    6b70:	68 94       	set
    6b72:	3f 91       	pop	r19
    6b74:	2a e0       	ldi	r18, 0x0A	; 10
    6b76:	26 9f       	mul	r18, r22
    6b78:	11 24       	eor	r1, r1
    6b7a:	30 19       	sub	r19, r0
    6b7c:	30 5d       	subi	r19, 0xD0	; 208
    6b7e:	31 93       	st	Z+, r19
    6b80:	de f6       	brtc	.-74     	; 0x6b38 <__ultoa_invert+0xe>
    6b82:	cf 01       	movw	r24, r30
    6b84:	08 95       	ret
    6b86:	46 2f       	mov	r20, r22
    6b88:	47 70       	andi	r20, 0x07	; 7
    6b8a:	40 5d       	subi	r20, 0xD0	; 208
    6b8c:	41 93       	st	Z+, r20
    6b8e:	b3 e0       	ldi	r27, 0x03	; 3
    6b90:	0f d0       	rcall	.+30     	; 0x6bb0 <__ultoa_invert+0x86>
    6b92:	c9 f7       	brne	.-14     	; 0x6b86 <__ultoa_invert+0x5c>
    6b94:	f6 cf       	rjmp	.-20     	; 0x6b82 <__ultoa_invert+0x58>
    6b96:	46 2f       	mov	r20, r22
    6b98:	4f 70       	andi	r20, 0x0F	; 15
    6b9a:	40 5d       	subi	r20, 0xD0	; 208
    6b9c:	4a 33       	cpi	r20, 0x3A	; 58
    6b9e:	18 f0       	brcs	.+6      	; 0x6ba6 <__ultoa_invert+0x7c>
    6ba0:	49 5d       	subi	r20, 0xD9	; 217
    6ba2:	31 fd       	sbrc	r19, 1
    6ba4:	40 52       	subi	r20, 0x20	; 32
    6ba6:	41 93       	st	Z+, r20
    6ba8:	02 d0       	rcall	.+4      	; 0x6bae <__ultoa_invert+0x84>
    6baa:	a9 f7       	brne	.-22     	; 0x6b96 <__ultoa_invert+0x6c>
    6bac:	ea cf       	rjmp	.-44     	; 0x6b82 <__ultoa_invert+0x58>
    6bae:	b4 e0       	ldi	r27, 0x04	; 4
    6bb0:	a6 95       	lsr	r26
    6bb2:	97 95       	ror	r25
    6bb4:	87 95       	ror	r24
    6bb6:	77 95       	ror	r23
    6bb8:	67 95       	ror	r22
    6bba:	ba 95       	dec	r27
    6bbc:	c9 f7       	brne	.-14     	; 0x6bb0 <__ultoa_invert+0x86>
    6bbe:	00 97       	sbiw	r24, 0x00	; 0
    6bc0:	61 05       	cpc	r22, r1
    6bc2:	71 05       	cpc	r23, r1
    6bc4:	08 95       	ret
    6bc6:	9b 01       	movw	r18, r22
    6bc8:	ac 01       	movw	r20, r24
    6bca:	0a 2e       	mov	r0, r26
    6bcc:	06 94       	lsr	r0
    6bce:	57 95       	ror	r21
    6bd0:	47 95       	ror	r20
    6bd2:	37 95       	ror	r19
    6bd4:	27 95       	ror	r18
    6bd6:	ba 95       	dec	r27
    6bd8:	c9 f7       	brne	.-14     	; 0x6bcc <__ultoa_invert+0xa2>
    6bda:	62 0f       	add	r22, r18
    6bdc:	73 1f       	adc	r23, r19
    6bde:	84 1f       	adc	r24, r20
    6be0:	95 1f       	adc	r25, r21
    6be2:	a0 1d       	adc	r26, r0
    6be4:	08 95       	ret

00006be6 <_exit>:
    6be6:	f8 94       	cli

00006be8 <__stop_program>:
    6be8:	ff cf       	rjmp	.-2      	; 0x6be8 <__stop_program>
