
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800100  00006f00  00006f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006f00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003bc  008003da  008003da  0000726e  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000726e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000782  00000000  00000000  000072ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d36  00000000  00000000  00007a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000048b  00000000  00000000  00009786  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018bb  00000000  00000000  00009c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  0000b4cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d81  00000000  00000000  0000b80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001228  00000000  00000000  0000c58d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <__vector_4>
      14:	0c 94 54 24 	jmp	0x48a8	; 0x48a8 <__vector_5>
      18:	0c 94 7d 24 	jmp	0x48fa	; 0x48fa <__vector_6>
      1c:	0c 94 a6 24 	jmp	0x494c	; 0x494c <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 0c 23 	jmp	0x4618	; 0x4618 <__vector_9>
      28:	0c 94 35 23 	jmp	0x466a	; 0x466a <__vector_10>
      2c:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__vector_11>
      30:	0c 94 d9 23 	jmp	0x47b2	; 0x47b2 <__vector_12>
      34:	0c 94 87 23 	jmp	0x470e	; 0x470e <__vector_13>
      38:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <__vector_14>
      3c:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__vector_15>
      40:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__vector_16>
      44:	0c 94 ba 22 	jmp	0x4574	; 0x4574 <__vector_17>
      48:	0c 94 e3 22 	jmp	0x45c6	; 0x45c6 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	f6 1f       	adc	r31, r22
      7e:	f9 1f       	adc	r31, r25
      80:	fc 1f       	adc	r31, r28
      82:	ff 1f       	adc	r31, r31
      84:	08 20       	and	r0, r8
      86:	02 20       	and	r0, r2
      88:	05 20       	and	r0, r5
      8a:	0b 20       	and	r0, r11
      8c:	0e 20       	and	r0, r14
      8e:	11 20       	and	r1, r1
      90:	14 20       	and	r1, r4
      92:	17 20       	and	r1, r7
      94:	1a 20       	and	r1, r10
      96:	1d 20       	and	r1, r13
      98:	20 20       	and	r2, r0
      9a:	23 20       	and	r2, r3
      9c:	26 20       	and	r2, r6
      9e:	29 20       	and	r2, r9
      a0:	2c 20       	and	r2, r12
      a2:	3d 20       	and	r3, r13
      a4:	40 20       	and	r4, r0
      a6:	43 20       	and	r4, r3
      a8:	46 20       	and	r4, r6
      aa:	4f 20       	and	r4, r15
      ac:	49 20       	and	r4, r9
      ae:	4c 20       	and	r4, r12
      b0:	52 20       	and	r5, r2
      b2:	55 20       	and	r5, r5
      b4:	58 20       	and	r5, r8
      b6:	5b 20       	and	r5, r11
      b8:	5e 20       	and	r5, r14
      ba:	61 20       	and	r6, r1
      bc:	64 20       	and	r6, r4
      be:	67 20       	and	r6, r7
      c0:	6a 20       	and	r6, r10
      c2:	6d 20       	and	r6, r13
      c4:	70 20       	and	r7, r0
      c6:	73 20       	and	r7, r3
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e0 e0       	ldi	r30, 0x00	; 0
     676:	ff e6       	ldi	r31, 0x6F	; 111
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	aa 3d       	cpi	r26, 0xDA	; 218
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	aa ed       	ldi	r26, 0xDA	; 218
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a6 39       	cpi	r26, 0x96	; 150
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <main>
     698:	0c 94 7e 37 	jmp	0x6efc	; 0x6efc <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 cf 21 	call	0x439e	; 0x439e <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 f5 21 	call	0x43ea	; 0x43ea <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 a3 21 	call	0x4346	; 0x4346 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 3b 22 	call	0x4476	; 0x4476 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 55 1a 	call	0x34aa	; 0x34aa <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 01 1a 	call	0x3402	; 0x3402 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 55 1a 	call	0x34aa	; 0x34aa <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 01 1a 	call	0x3402	; 0x3402 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 55 1a 	call	0x34aa	; 0x34aa <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 01 1a 	call	0x3402	; 0x3402 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 01 1a 	call	0x3402	; 0x3402 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 55 1a 	call	0x34aa	; 0x34aa <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 01 1a 	call	0x3402	; 0x3402 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 55 1a 	call	0x34aa	; 0x34aa <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 01 1a 	call	0x3402	; 0x3402 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 66 04 	sts	0x0466, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 a7 20 	call	0x414e	; 0x414e <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 a7 20 	call	0x414e	; 0x414e <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 a7 20 	call	0x414e	; 0x414e <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 66 04 	sts	0x0466, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 a7 20 	call	0x414e	; 0x414e <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 a7 20 	call	0x414e	; 0x414e <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 a7 20 	call	0x414e	; 0x414e <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	87 ed       	ldi	r24, 0xD7	; 215
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	a8 ef       	ldi	r26, 0xF8	; 248
     c56:	b6 e0       	ldi	r27, 0x06	; 6
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e0 ef       	ldi	r30, 0xF0	; 240
     c5e:	f5 e0       	ldi	r31, 0x05	; 5
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	8e e5       	ldi	r24, 0x5E	; 94
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 80 06 	lds	r10, 0x0680
     c9e:	b0 90 81 06 	lds	r11, 0x0681
     ca2:	c0 90 82 06 	lds	r12, 0x0682
     ca6:	d0 90 83 06 	lds	r13, 0x0683
			rtIR_old[i] = rtIR;
     caa:	e0 90 84 06 	lds	r14, 0x0684
     cae:	f0 90 85 06 	lds	r15, 0x0685
     cb2:	00 91 86 06 	lds	r16, 0x0686
     cb6:	10 91 87 06 	lds	r17, 0x0687
			ftIR_old[i] = ftIR;
     cba:	20 90 df 04 	lds	r2, 0x04DF
     cbe:	30 90 e0 04 	lds	r3, 0x04E0
     cc2:	40 90 e1 04 	lds	r4, 0x04E1
     cc6:	50 90 e2 04 	lds	r5, 0x04E2
			bkIR_old[i] = bkIR;
     cca:	20 91 e9 04 	lds	r18, 0x04E9
     cce:	30 91 ea 04 	lds	r19, 0x04EA
     cd2:	40 91 eb 04 	lds	r20, 0x04EB
     cd6:	50 91 ec 04 	lds	r21, 0x04EC
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e9 59       	subi	r30, 0x99	; 153
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e8 57       	subi	r30, 0x78	; 120
     cf0:	f9 4f       	sbci	r31, 0xF9	; 249
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e0 58       	subi	r30, 0x80	; 128
     cfe:	fa 4f       	sbci	r31, 0xFA	; 250
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e2 51       	subi	r30, 0x12	; 18
     d0c:	fb 4f       	sbci	r31, 0xFB	; 251
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	af 55       	subi	r26, 0x5F	; 95
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 80 06 	lds	r24, 0x0680
     e0c:	90 91 81 06 	lds	r25, 0x0681
     e10:	a0 91 82 06 	lds	r26, 0x0682
     e14:	b0 91 83 06 	lds	r27, 0x0683
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 84 06 	lds	r24, 0x0684
     e28:	90 91 85 06 	lds	r25, 0x0685
     e2c:	a0 91 86 06 	lds	r26, 0x0686
     e30:	b0 91 87 06 	lds	r27, 0x0687
     e34:	80 93 88 06 	sts	0x0688, r24
     e38:	90 93 89 06 	sts	0x0689, r25
     e3c:	a0 93 8a 06 	sts	0x068A, r26
     e40:	b0 93 8b 06 	sts	0x068B, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 df 04 	lds	r24, 0x04DF
     e48:	90 91 e0 04 	lds	r25, 0x04E0
     e4c:	a0 91 e1 04 	lds	r26, 0x04E1
     e50:	b0 91 e2 04 	lds	r27, 0x04E2
     e54:	80 93 80 05 	sts	0x0580, r24
     e58:	90 93 81 05 	sts	0x0581, r25
     e5c:	a0 93 82 05 	sts	0x0582, r26
     e60:	b0 93 83 05 	sts	0x0583, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 e9 04 	lds	r24, 0x04E9
     e68:	90 91 ea 04 	lds	r25, 0x04EA
     e6c:	a0 91 eb 04 	lds	r26, 0x04EB
     e70:	b0 91 ec 04 	lds	r27, 0x04EC
     e74:	80 93 ee 04 	sts	0x04EE, r24
     e78:	90 93 ef 04 	sts	0x04EF, r25
     e7c:	a0 93 f0 04 	sts	0x04F0, r26
     e80:	b0 93 f1 04 	sts	0x04F1, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
     e94:	60 93 80 06 	sts	0x0680, r22
     e98:	70 93 81 06 	sts	0x0681, r23
     e9c:	80 93 82 06 	sts	0x0682, r24
     ea0:	90 93 83 06 	sts	0x0683, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
     eb8:	60 93 84 06 	sts	0x0684, r22
     ebc:	70 93 85 06 	sts	0x0685, r23
     ec0:	80 93 86 06 	sts	0x0686, r24
     ec4:	90 93 87 06 	sts	0x0687, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
     edc:	60 93 df 04 	sts	0x04DF, r22
     ee0:	70 93 e0 04 	sts	0x04E0, r23
     ee4:	80 93 e1 04 	sts	0x04E1, r24
     ee8:	90 93 e2 04 	sts	0x04E2, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
     f00:	60 93 e9 04 	sts	0x04E9, r22
     f04:	70 93 ea 04 	sts	0x04EA, r23
     f08:	80 93 eb 04 	sts	0x04EB, r24
     f0c:	90 93 ec 04 	sts	0x04EC, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 e3 04 	sts	0x04E3, r24
     f66:	90 93 e4 04 	sts	0x04E4, r25
     f6a:	a0 93 e5 04 	sts	0x04E5, r26
     f6e:	b0 93 e6 04 	sts	0x04E6, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 e3 04 	lds	r18, 0x04E3
     f7a:	30 91 e4 04 	lds	r19, 0x04E4
     f7e:	40 91 e5 04 	lds	r20, 0x04E5
     f82:	50 91 e6 04 	lds	r21, 0x04E6
     f86:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 e3 04 	sts	0x04E3, r22
     f92:	70 93 e4 04 	sts	0x04E4, r23
     f96:	80 93 e5 04 	sts	0x04E5, r24
     f9a:	90 93 e6 04 	sts	0x04E6, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 7c 05 	lds	r18, 0x057C
     fa6:	30 91 7d 05 	lds	r19, 0x057D
     faa:	40 91 7e 05 	lds	r20, 0x057E
     fae:	50 91 7f 05 	lds	r21, 0x057F
     fb2:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__subsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a0 97       	sbiw	r28, 0x20	; 32
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	2d 83       	std	Y+5, r18	; 0x05
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	e9 86       	std	Y+9, r14	; 0x09
    106c:	fa 86       	std	Y+10, r15	; 0x0a
    106e:	0b 87       	std	Y+11, r16	; 0x0b
    1070:	1c 87       	std	Y+12, r17	; 0x0c
    1072:	ad 86       	std	Y+13, r10	; 0x0d
    1074:	be 86       	std	Y+14, r11	; 0x0e
    1076:	cf 86       	std	Y+15, r12	; 0x0f
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    107c:	33 24       	eor	r3, r3
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	14 f4       	brge	.+4      	; 0x1096 <move_arc_stnb+0x6c>
    1092:	33 24       	eor	r3, r3
    1094:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1096:	6d 81       	ldd	r22, Y+5	; 0x05
    1098:	7e 81       	ldd	r23, Y+6	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	2c ed       	ldi	r18, 0xDC	; 220
    10a0:	38 eb       	ldi	r19, 0xB8	; 184
    10a2:	48 e0       	ldi	r20, 0x08	; 8
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    10aa:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	77 ff       	sbrs	r23, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <move_arc_stnb+0x90>
    10b4:	30 95       	com	r19
    10b6:	21 95       	neg	r18
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	b9 01       	movw	r22, r18
    10bc:	88 27       	eor	r24, r24
    10be:	77 fd       	sbrc	r23, 7
    10c0:	80 95       	com	r24
    10c2:	98 2f       	mov	r25, r24
    10c4:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatsisf>
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    10d0:	69 85       	ldd	r22, Y+9	; 0x09
    10d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	2c ed       	ldi	r18, 0xDC	; 220
    10da:	38 eb       	ldi	r19, 0xB8	; 184
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    10e4:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__fixsfsi>
    10e8:	9b 01       	movw	r18, r22
    10ea:	77 ff       	sbrs	r23, 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <move_arc_stnb+0xca>
    10ee:	30 95       	com	r19
    10f0:	21 95       	neg	r18
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatsisf>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1106:	6d 85       	ldd	r22, Y+13	; 0x0d
    1108:	7e 85       	ldd	r23, Y+14	; 0x0e
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	2c ed       	ldi	r18, 0xDC	; 220
    1110:	38 eb       	ldi	r19, 0xB8	; 184
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	5e e3       	ldi	r21, 0x3E	; 62
    1116:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    111a:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	77 ff       	sbrs	r23, 7
    1122:	03 c0       	rjmp	.+6      	; 0x112a <move_arc_stnb+0x100>
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatsisf>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	5f e4       	ldi	r21, 0x4F	; 79
    1148:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	a1 f5       	brne	.+104    	; 0x11b8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	2d b7       	in	r18, 0x3d	; 61
    117a:	3e b7       	in	r19, 0x3e	; 62
    117c:	29 50       	subi	r18, 0x09	; 9
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	3e bf       	out	0x3e, r19	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	2d bf       	out	0x3d, r18	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	ad b7       	in	r26, 0x3d	; 61
    1192:	be b7       	in	r27, 0x3e	; 62
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	5c 92       	st	X, r5
    1198:	4e 92       	st	-X, r4
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	93 82       	std	Z+3, r9	; 0x03
    119e:	82 82       	std	Z+2, r8	; 0x02
    11a0:	75 83       	std	Z+5, r23	; 0x05
    11a2:	64 83       	std	Z+4, r22	; 0x04
    11a4:	26 82       	std	Z+6, r2	; 0x06
    11a6:	10 86       	std	Z+8, r1	; 0x08
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	43 2d       	mov	r20, r3
    11b0:	92 01       	movw	r18, r4
    11b2:	84 01       	movw	r16, r8
    11b4:	76 01       	movw	r14, r12
    11b6:	c1 c1       	rjmp	.+898    	; 0x153a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	e9 f5       	brne	.+122    	; 0x1246 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    11d8:	3b 01       	movw	r6, r22
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    11e2:	8b 01       	movw	r16, r22
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    11ec:	7b 01       	movw	r14, r22
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	29 50       	subi	r18, 0x09	; 9
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	3e bf       	out	0x3e, r19	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	2d bf       	out	0x3d, r18	; 61
    1200:	ed b7       	in	r30, 0x3d	; 61
    1202:	fe b7       	in	r31, 0x3e	; 62
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <move_arc_stnb+0x1e4>
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	71 82       	std	Z+1, r7	; 0x01
    1210:	60 82       	st	Z, r6
    1212:	13 83       	std	Z+3, r17	; 0x03
    1214:	02 83       	std	Z+2, r16	; 0x02
    1216:	f5 82       	std	Z+5, r15	; 0x05
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	26 82       	std	Z+6, r2	; 0x06
    121c:	10 86       	std	Z+8, r1	; 0x08
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	93 01       	movw	r18, r6
    1226:	c2 2c       	mov	r12, r2
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	83 2c       	mov	r8, r3
    122e:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <STEPPER_move>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	be bf       	out	0x3e, r27	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ad bf       	out	0x3d, r26	; 61
    1244:	89 c1       	rjmp	.+786    	; 0x1558 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1246:	c3 01       	movw	r24, r6
    1248:	b2 01       	movw	r22, r4
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__gesf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <move_arc_stnb+0x232>
    125a:	b1 c0       	rjmp	.+354    	; 0x13be <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    125c:	66 e6       	ldi	r22, 0x66	; 102
    125e:	76 e6       	ldi	r23, 0x66	; 102
    1260:	8a ea       	ldi	r24, 0xAA	; 170
    1262:	91 ec       	ldi	r25, 0xC1	; 193
    1264:	a3 01       	movw	r20, r6
    1266:	92 01       	movw	r18, r4
    1268:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    127c:	66 e6       	ldi	r22, 0x66	; 102
    127e:	76 e6       	ldi	r23, 0x66	; 102
    1280:	8a ea       	ldi	r24, 0xAA	; 170
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	a3 01       	movw	r20, r6
    1286:	92 01       	movw	r18, r4
    1288:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	39 97       	sbiw	r30, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8d b6       	in	r8, 0x3d	; 61
    12ae:	9e b6       	in	r9, 0x3e	; 62
    12b0:	08 94       	sec
    12b2:	81 1c       	adc	r8, r1
    12b4:	91 1c       	adc	r9, r1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	a8 01       	movw	r20, r16
    12c0:	97 01       	movw	r18, r14
    12c2:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    12c6:	2c ed       	ldi	r18, 0xDC	; 220
    12c8:	38 eb       	ldi	r19, 0xB8	; 184
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    12d2:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    12d6:	69 8b       	std	Y+17, r22	; 0x11
    12d8:	7a 8b       	std	Y+18, r23	; 0x12
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    12ee:	2c ed       	ldi	r18, 0xDC	; 220
    12f0:	38 eb       	ldi	r19, 0xB8	; 184
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	5e e3       	ldi	r21, 0x3E	; 62
    12f6:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    12fa:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	6d 85       	ldd	r22, Y+13	; 0x0d
    1308:	7e 85       	ldd	r23, Y+14	; 0x0e
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	a8 01       	movw	r20, r16
    1310:	97 01       	movw	r18, r14
    1312:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1316:	2c ed       	ldi	r18, 0xDC	; 220
    1318:	38 eb       	ldi	r19, 0xB8	; 184
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1322:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1326:	2b 01       	movw	r4, r22
    1328:	3c 01       	movw	r6, r24
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	7e 81       	ldd	r23, Y+6	; 0x06
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a6 01       	movw	r20, r12
    1334:	95 01       	movw	r18, r10
    1336:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    133a:	2c ed       	ldi	r18, 0xDC	; 220
    133c:	38 eb       	ldi	r19, 0xB8	; 184
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1346:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    134a:	d4 01       	movw	r26, r8
    134c:	6d 93       	st	X+, r22
    134e:	7c 93       	st	X, r23
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1360:	2c ed       	ldi	r18, 0xDC	; 220
    1362:	38 eb       	ldi	r19, 0xB8	; 184
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	5e e3       	ldi	r21, 0x3E	; 62
    1368:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    136c:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1370:	f4 01       	movw	r30, r8
    1372:	73 83       	std	Z+3, r23	; 0x03
    1374:	62 83       	std	Z+2, r22	; 0x02
    1376:	6d 85       	ldd	r22, Y+13	; 0x0d
    1378:	7e 85       	ldd	r23, Y+14	; 0x0e
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	a6 01       	movw	r20, r12
    1380:	95 01       	movw	r18, r10
    1382:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1386:	2c ed       	ldi	r18, 0xDC	; 220
    1388:	38 eb       	ldi	r19, 0xB8	; 184
    138a:	48 e0       	ldi	r20, 0x08	; 8
    138c:	5e e3       	ldi	r21, 0x3E	; 62
    138e:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1392:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1396:	d4 01       	movw	r26, r8
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	7c 93       	st	X, r23
    139c:	6e 93       	st	-X, r22
    139e:	14 97       	sbiw	r26, 0x04	; 4
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2c 92       	st	X, r2
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	1c 92       	st	X, r1
    13aa:	1e 92       	st	-X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	43 2d       	mov	r20, r3
    13b4:	29 89       	ldd	r18, Y+17	; 0x11
    13b6:	3a 89       	ldd	r19, Y+18	; 0x12
    13b8:	0d 89       	ldd	r16, Y+21	; 0x15
    13ba:	1e 89       	ldd	r17, Y+22	; 0x16
    13bc:	bd c0       	rjmp	.+378    	; 0x1538 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    13ce:	87 fd       	sbrc	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <move_arc_stnb+0x3ac>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	c1 c0       	rjmp	.+386    	; 0x1558 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    13d6:	66 e6       	ldi	r22, 0x66	; 102
    13d8:	76 e6       	ldi	r23, 0x66	; 102
    13da:	8a ea       	ldi	r24, 0xAA	; 170
    13dc:	91 e4       	ldi	r25, 0x41	; 65
    13de:	a3 01       	movw	r20, r6
    13e0:	92 01       	movw	r18, r4
    13e2:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    13f6:	66 e6       	ldi	r22, 0x66	; 102
    13f8:	76 e6       	ldi	r23, 0x66	; 102
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	91 ec       	ldi	r25, 0xC1	; 193
    13fe:	a3 01       	movw	r20, r6
    1400:	92 01       	movw	r18, r4
    1402:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    1412:	5b 01       	movw	r10, r22
    1414:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1416:	2d b7       	in	r18, 0x3d	; 61
    1418:	3e b7       	in	r19, 0x3e	; 62
    141a:	29 50       	subi	r18, 0x09	; 9
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	3e bf       	out	0x3e, r19	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	2d bf       	out	0x3d, r18	; 61
    1428:	8d b6       	in	r8, 0x3d	; 61
    142a:	9e b6       	in	r9, 0x3e	; 62
    142c:	08 94       	sec
    142e:	81 1c       	adc	r8, r1
    1430:	91 1c       	adc	r9, r1
    1432:	6d 81       	ldd	r22, Y+5	; 0x05
    1434:	7e 81       	ldd	r23, Y+6	; 0x06
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1442:	2c ed       	ldi	r18, 0xDC	; 220
    1444:	38 eb       	ldi	r19, 0xB8	; 184
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    144e:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1452:	69 8f       	std	Y+25, r22	; 0x19
    1454:	7a 8f       	std	Y+26, r23	; 0x1a
    1456:	8b 8f       	std	Y+27, r24	; 0x1b
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	69 85       	ldd	r22, Y+9	; 0x09
    145c:	7a 85       	ldd	r23, Y+10	; 0x0a
    145e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1460:	9c 85       	ldd	r25, Y+12	; 0x0c
    1462:	a8 01       	movw	r20, r16
    1464:	97 01       	movw	r18, r14
    1466:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    146a:	2c ed       	ldi	r18, 0xDC	; 220
    146c:	38 eb       	ldi	r19, 0xB8	; 184
    146e:	48 e0       	ldi	r20, 0x08	; 8
    1470:	5e e3       	ldi	r21, 0x3E	; 62
    1472:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1476:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    147a:	6d 8f       	std	Y+29, r22	; 0x1d
    147c:	7e 8f       	std	Y+30, r23	; 0x1e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	a8 01       	movw	r20, r16
    148c:	97 01       	movw	r18, r14
    148e:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1492:	2c ed       	ldi	r18, 0xDC	; 220
    1494:	38 eb       	ldi	r19, 0xB8	; 184
    1496:	48 e0       	ldi	r20, 0x08	; 8
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    149e:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    14a2:	2b 01       	movw	r4, r22
    14a4:	3c 01       	movw	r6, r24
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	a6 01       	movw	r20, r12
    14b0:	95 01       	movw	r18, r10
    14b2:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    14b6:	2c ed       	ldi	r18, 0xDC	; 220
    14b8:	38 eb       	ldi	r19, 0xB8	; 184
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    14c2:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    14c6:	d4 01       	movw	r26, r8
    14c8:	6d 93       	st	X+, r22
    14ca:	7c 93       	st	X, r23
    14cc:	69 85       	ldd	r22, Y+9	; 0x09
    14ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d4:	a6 01       	movw	r20, r12
    14d6:	95 01       	movw	r18, r10
    14d8:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    14dc:	2c ed       	ldi	r18, 0xDC	; 220
    14de:	38 eb       	ldi	r19, 0xB8	; 184
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	5e e3       	ldi	r21, 0x3E	; 62
    14e4:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    14e8:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    14ec:	f4 01       	movw	r30, r8
    14ee:	73 83       	std	Z+3, r23	; 0x03
    14f0:	62 83       	std	Z+2, r22	; 0x02
    14f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1502:	2c ed       	ldi	r18, 0xDC	; 220
    1504:	38 eb       	ldi	r19, 0xB8	; 184
    1506:	48 e0       	ldi	r20, 0x08	; 8
    1508:	5e e3       	ldi	r21, 0x3E	; 62
    150a:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    150e:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1512:	d4 01       	movw	r26, r8
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	7c 93       	st	X, r23
    1518:	6e 93       	st	-X, r22
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	16 96       	adiw	r26, 0x06	; 6
    151e:	2c 92       	st	X, r2
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	18 96       	adiw	r26, 0x08	; 8
    1524:	1c 92       	st	X, r1
    1526:	1e 92       	st	-X, r1
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	43 2d       	mov	r20, r3
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1534:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1536:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1538:	72 01       	movw	r14, r4
    153a:	c2 2c       	mov	r12, r2
    153c:	aa 24       	eor	r10, r10
    153e:	bb 24       	eor	r11, r11
    1540:	83 2c       	mov	r8, r3
    1542:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <STEPPER_move>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	39 96       	adiw	r30, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	fe bf       	out	0x3e, r31	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	2b 01       	movw	r4, r22
    15c0:	3c 01       	movw	r6, r24
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	e9 86       	std	Y+9, r14	; 0x09
    15cc:	fa 86       	std	Y+10, r15	; 0x0a
    15ce:	0b 87       	std	Y+11, r16	; 0x0b
    15d0:	1c 87       	std	Y+12, r17	; 0x0c
    15d2:	ad 86       	std	Y+13, r10	; 0x0d
    15d4:	be 86       	std	Y+14, r11	; 0x0e
    15d6:	cf 86       	std	Y+15, r12	; 0x0f
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    15dc:	33 24       	eor	r3, r3
    15de:	ca 01       	movw	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	14 f4       	brge	.+4      	; 0x15f6 <move_arc_stwt+0x6c>
    15f2:	33 24       	eor	r3, r3
    15f4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	2c ed       	ldi	r18, 0xDC	; 220
    1600:	38 eb       	ldi	r19, 0xB8	; 184
    1602:	48 e0       	ldi	r20, 0x08	; 8
    1604:	5e e3       	ldi	r21, 0x3E	; 62
    1606:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    160a:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	77 ff       	sbrs	r23, 7
    1612:	03 c0       	rjmp	.+6      	; 0x161a <move_arc_stwt+0x90>
    1614:	30 95       	com	r19
    1616:	21 95       	neg	r18
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	b9 01       	movw	r22, r18
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatsisf>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	2c ed       	ldi	r18, 0xDC	; 220
    163a:	38 eb       	ldi	r19, 0xB8	; 184
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	5e e3       	ldi	r21, 0x3E	; 62
    1640:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1644:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__fixsfsi>
    1648:	9b 01       	movw	r18, r22
    164a:	77 ff       	sbrs	r23, 7
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <move_arc_stwt+0xca>
    164e:	30 95       	com	r19
    1650:	21 95       	neg	r18
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	b9 01       	movw	r22, r18
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatsisf>
    1662:	4b 01       	movw	r8, r22
    1664:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1666:	6d 85       	ldd	r22, Y+13	; 0x0d
    1668:	7e 85       	ldd	r23, Y+14	; 0x0e
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	2c ed       	ldi	r18, 0xDC	; 220
    1670:	38 eb       	ldi	r19, 0xB8	; 184
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	5e e3       	ldi	r21, 0x3E	; 62
    1676:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    167a:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 ff       	sbrs	r23, 7
    1682:	03 c0       	rjmp	.+6      	; 0x168a <move_arc_stwt+0x100>
    1684:	30 95       	com	r19
    1686:	21 95       	neg	r18
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatsisf>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	5f e4       	ldi	r21, 0x4F	; 79
    16a8:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	a1 f5       	brne	.+104    	; 0x1718 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    16b0:	69 81       	ldd	r22, Y+1	; 0x01
    16b2:	7a 81       	ldd	r23, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	c5 01       	movw	r24, r10
    16c2:	b4 01       	movw	r22, r8
    16c4:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	29 50       	subi	r18, 0x09	; 9
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	3e bf       	out	0x3e, r19	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	2d bf       	out	0x3d, r18	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ad b7       	in	r26, 0x3d	; 61
    16f2:	be b7       	in	r27, 0x3e	; 62
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	5c 92       	st	X, r5
    16f8:	4e 92       	st	-X, r4
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	93 82       	std	Z+3, r9	; 0x03
    16fe:	82 82       	std	Z+2, r8	; 0x02
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    1704:	26 82       	std	Z+6, r2	; 0x06
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	43 2d       	mov	r20, r3
    1710:	92 01       	movw	r18, r4
    1712:	84 01       	movw	r16, r8
    1714:	76 01       	movw	r14, r12
    1716:	c1 c1       	rjmp	.+898    	; 0x1a9a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	e9 f5       	brne	.+122    	; 0x17a6 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1738:	3b 01       	movw	r6, r22
    173a:	c5 01       	movw	r24, r10
    173c:	b4 01       	movw	r22, r8
    173e:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1742:	8b 01       	movw	r16, r22
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    174c:	7b 01       	movw	r14, r22
    174e:	2d b7       	in	r18, 0x3d	; 61
    1750:	3e b7       	in	r19, 0x3e	; 62
    1752:	29 50       	subi	r18, 0x09	; 9
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	2d bf       	out	0x3d, r18	; 61
    1760:	ed b7       	in	r30, 0x3d	; 61
    1762:	fe b7       	in	r31, 0x3e	; 62
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	33 20       	and	r3, r3
    176a:	09 f4       	brne	.+2      	; 0x176e <move_arc_stwt+0x1e4>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	71 82       	std	Z+1, r7	; 0x01
    1770:	60 82       	st	Z, r6
    1772:	13 83       	std	Z+3, r17	; 0x03
    1774:	02 83       	std	Z+2, r16	; 0x02
    1776:	f5 82       	std	Z+5, r15	; 0x05
    1778:	e4 82       	std	Z+4, r14	; 0x04
    177a:	26 82       	std	Z+6, r2	; 0x06
    177c:	10 86       	std	Z+8, r1	; 0x08
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	93 01       	movw	r18, r6
    1786:	c2 2c       	mov	r12, r2
    1788:	aa 24       	eor	r10, r10
    178a:	bb 24       	eor	r11, r11
    178c:	83 2c       	mov	r8, r3
    178e:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <STEPPER_move>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	19 96       	adiw	r26, 0x09	; 9
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	be bf       	out	0x3e, r27	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	ad bf       	out	0x3d, r26	; 61
    17a4:	89 c1       	rjmp	.+786    	; 0x1ab8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <move_arc_stwt+0x232>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17bc:	66 e6       	ldi	r22, 0x66	; 102
    17be:	76 e6       	ldi	r23, 0x66	; 102
    17c0:	8a ea       	ldi	r24, 0xAA	; 170
    17c2:	91 ec       	ldi	r25, 0xC1	; 193
    17c4:	a3 01       	movw	r20, r6
    17c6:	92 01       	movw	r18, r4
    17c8:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    17d8:	7b 01       	movw	r14, r22
    17da:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17dc:	66 e6       	ldi	r22, 0x66	; 102
    17de:	76 e6       	ldi	r23, 0x66	; 102
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	91 e4       	ldi	r25, 0x41	; 65
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    17f8:	5b 01       	movw	r10, r22
    17fa:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    17fc:	ed b7       	in	r30, 0x3d	; 61
    17fe:	fe b7       	in	r31, 0x3e	; 62
    1800:	39 97       	sbiw	r30, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	8d b6       	in	r8, 0x3d	; 61
    180e:	9e b6       	in	r9, 0x3e	; 62
    1810:	08 94       	sec
    1812:	81 1c       	adc	r8, r1
    1814:	91 1c       	adc	r9, r1
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	a8 01       	movw	r20, r16
    1820:	97 01       	movw	r18, r14
    1822:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1826:	2c ed       	ldi	r18, 0xDC	; 220
    1828:	38 eb       	ldi	r19, 0xB8	; 184
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	5e e3       	ldi	r21, 0x3E	; 62
    182e:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1832:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1836:	69 8b       	std	Y+17, r22	; 0x11
    1838:	7a 8b       	std	Y+18, r23	; 0x12
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	69 85       	ldd	r22, Y+9	; 0x09
    1840:	7a 85       	ldd	r23, Y+10	; 0x0a
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	a8 01       	movw	r20, r16
    1848:	97 01       	movw	r18, r14
    184a:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    184e:	2c ed       	ldi	r18, 0xDC	; 220
    1850:	38 eb       	ldi	r19, 0xB8	; 184
    1852:	48 e0       	ldi	r20, 0x08	; 8
    1854:	5e e3       	ldi	r21, 0x3E	; 62
    1856:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    185a:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	6d 85       	ldd	r22, Y+13	; 0x0d
    1868:	7e 85       	ldd	r23, Y+14	; 0x0e
    186a:	8f 85       	ldd	r24, Y+15	; 0x0f
    186c:	98 89       	ldd	r25, Y+16	; 0x10
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1876:	2c ed       	ldi	r18, 0xDC	; 220
    1878:	38 eb       	ldi	r19, 0xB8	; 184
    187a:	48 e0       	ldi	r20, 0x08	; 8
    187c:	5e e3       	ldi	r21, 0x3E	; 62
    187e:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1882:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1886:	2b 01       	movw	r4, r22
    1888:	3c 01       	movw	r6, r24
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	a6 01       	movw	r20, r12
    1894:	95 01       	movw	r18, r10
    1896:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    189a:	2c ed       	ldi	r18, 0xDC	; 220
    189c:	38 eb       	ldi	r19, 0xB8	; 184
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    18a6:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    18aa:	d4 01       	movw	r26, r8
    18ac:	6d 93       	st	X+, r22
    18ae:	7c 93       	st	X, r23
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    18c0:	2c ed       	ldi	r18, 0xDC	; 220
    18c2:	38 eb       	ldi	r19, 0xB8	; 184
    18c4:	48 e0       	ldi	r20, 0x08	; 8
    18c6:	5e e3       	ldi	r21, 0x3E	; 62
    18c8:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    18cc:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    18d0:	f4 01       	movw	r30, r8
    18d2:	73 83       	std	Z+3, r23	; 0x03
    18d4:	62 83       	std	Z+2, r22	; 0x02
    18d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	a6 01       	movw	r20, r12
    18e0:	95 01       	movw	r18, r10
    18e2:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    18e6:	2c ed       	ldi	r18, 0xDC	; 220
    18e8:	38 eb       	ldi	r19, 0xB8	; 184
    18ea:	48 e0       	ldi	r20, 0x08	; 8
    18ec:	5e e3       	ldi	r21, 0x3E	; 62
    18ee:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    18f2:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    18f6:	d4 01       	movw	r26, r8
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	7c 93       	st	X, r23
    18fc:	6e 93       	st	-X, r22
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	2c 92       	st	X, r2
    1904:	16 97       	sbiw	r26, 0x06	; 6
    1906:	18 96       	adiw	r26, 0x08	; 8
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	43 2d       	mov	r20, r3
    1914:	29 89       	ldd	r18, Y+17	; 0x11
    1916:	3a 89       	ldd	r19, Y+18	; 0x12
    1918:	0d 89       	ldd	r16, Y+21	; 0x15
    191a:	1e 89       	ldd	r17, Y+22	; 0x16
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    192e:	87 fd       	sbrc	r24, 7
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <move_arc_stwt+0x3ac>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c1 c0       	rjmp	.+386    	; 0x1ab8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1936:	66 e6       	ldi	r22, 0x66	; 102
    1938:	76 e6       	ldi	r23, 0x66	; 102
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	91 e4       	ldi	r25, 0x41	; 65
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1956:	66 e6       	ldi	r22, 0x66	; 102
    1958:	76 e6       	ldi	r23, 0x66	; 102
    195a:	8a ea       	ldi	r24, 0xAA	; 170
    195c:	91 ec       	ldi	r25, 0xC1	; 193
    195e:	a3 01       	movw	r20, r6
    1960:	92 01       	movw	r18, r4
    1962:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    1972:	5b 01       	movw	r10, r22
    1974:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1976:	2d b7       	in	r18, 0x3d	; 61
    1978:	3e b7       	in	r19, 0x3e	; 62
    197a:	29 50       	subi	r18, 0x09	; 9
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	3e bf       	out	0x3e, r19	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	2d bf       	out	0x3d, r18	; 61
    1988:	8d b6       	in	r8, 0x3d	; 61
    198a:	9e b6       	in	r9, 0x3e	; 62
    198c:	08 94       	sec
    198e:	81 1c       	adc	r8, r1
    1990:	91 1c       	adc	r9, r1
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	a8 01       	movw	r20, r16
    199c:	97 01       	movw	r18, r14
    199e:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    19a2:	2c ed       	ldi	r18, 0xDC	; 220
    19a4:	38 eb       	ldi	r19, 0xB8	; 184
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	5e e3       	ldi	r21, 0x3E	; 62
    19aa:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    19ae:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    19b2:	69 8f       	std	Y+25, r22	; 0x19
    19b4:	7a 8f       	std	Y+26, r23	; 0x1a
    19b6:	8b 8f       	std	Y+27, r24	; 0x1b
    19b8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	a8 01       	movw	r20, r16
    19c4:	97 01       	movw	r18, r14
    19c6:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    19ca:	2c ed       	ldi	r18, 0xDC	; 220
    19cc:	38 eb       	ldi	r19, 0xB8	; 184
    19ce:	48 e0       	ldi	r20, 0x08	; 8
    19d0:	5e e3       	ldi	r21, 0x3E	; 62
    19d2:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    19d6:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    19da:	6d 8f       	std	Y+29, r22	; 0x1d
    19dc:	7e 8f       	std	Y+30, r23	; 0x1e
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	a8 01       	movw	r20, r16
    19ec:	97 01       	movw	r18, r14
    19ee:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    19f2:	2c ed       	ldi	r18, 0xDC	; 220
    19f4:	38 eb       	ldi	r19, 0xB8	; 184
    19f6:	48 e0       	ldi	r20, 0x08	; 8
    19f8:	5e e3       	ldi	r21, 0x3E	; 62
    19fa:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    19fe:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1a02:	2b 01       	movw	r4, r22
    1a04:	3c 01       	movw	r6, r24
    1a06:	6d 81       	ldd	r22, Y+5	; 0x05
    1a08:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1a16:	2c ed       	ldi	r18, 0xDC	; 220
    1a18:	38 eb       	ldi	r19, 0xB8	; 184
    1a1a:	48 e0       	ldi	r20, 0x08	; 8
    1a1c:	5e e3       	ldi	r21, 0x3E	; 62
    1a1e:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1a22:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1a26:	d4 01       	movw	r26, r8
    1a28:	6d 93       	st	X+, r22
    1a2a:	7c 93       	st	X, r23
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1a3c:	2c ed       	ldi	r18, 0xDC	; 220
    1a3e:	38 eb       	ldi	r19, 0xB8	; 184
    1a40:	48 e0       	ldi	r20, 0x08	; 8
    1a42:	5e e3       	ldi	r21, 0x3E	; 62
    1a44:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1a48:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	73 83       	std	Z+3, r23	; 0x03
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    1a62:	2c ed       	ldi	r18, 0xDC	; 220
    1a64:	38 eb       	ldi	r19, 0xB8	; 184
    1a66:	48 e0       	ldi	r20, 0x08	; 8
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    1a6e:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1a72:	d4 01       	movw	r26, r8
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	7c 93       	st	X, r23
    1a78:	6e 93       	st	-X, r22
    1a7a:	14 97       	sbiw	r26, 0x04	; 4
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	2c 92       	st	X, r2
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	18 96       	adiw	r26, 0x08	; 8
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	17 97       	sbiw	r26, 0x07	; 7
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	43 2d       	mov	r20, r3
    1a90:	29 8d       	ldd	r18, Y+25	; 0x19
    1a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a94:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a98:	72 01       	movw	r14, r4
    1a9a:	c2 2c       	mov	r12, r2
    1a9c:	aa 24       	eor	r10, r10
    1a9e:	bb 24       	eor	r11, r11
    1aa0:	83 2c       	mov	r8, r3
    1aa2:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <STEPPER_move>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	39 96       	adiw	r30, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ab8:	a0 96       	adiw	r28, 0x20	; 32
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <setOdometry>:
* Input Variables:	void
* Output Return:	float odometry 
* Overview:		    Sets the odometry to move
********************************************************************/
void setOdometry( float odometry )
{	
    1aea:	8f 92       	push	r8
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
	// Set the gloable odometryTrigger
	odometryTrigger = odometry;
    1afa:	60 93 66 05 	sts	0x0566, r22
    1afe:	70 93 67 05 	sts	0x0567, r23
    1b02:	80 93 68 05 	sts	0x0568, r24
    1b06:	90 93 69 05 	sts	0x0569, r25
	
	// Set the stepers
	STEPPER_move_stnb( STEPPER_BOTH, 
    1b0a:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    1b0e:	8b 01       	movw	r16, r22
    1b10:	9c 01       	movw	r18, r24
    1b12:	8d b7       	in	r24, 0x3d	; 61
    1b14:	9e b7       	in	r25, 0x3e	; 62
    1b16:	09 97       	sbiw	r24, 0x09	; 9
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	9e bf       	out	0x3e, r25	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	8d bf       	out	0x3d, r24	; 61
    1b22:	ed b7       	in	r30, 0x3d	; 61
    1b24:	fe b7       	in	r31, 0x3e	; 62
    1b26:	31 96       	adiw	r30, 0x01	; 1
    1b28:	ad b7       	in	r26, 0x3d	; 61
    1b2a:	be b7       	in	r27, 0x3e	; 62
    1b2c:	12 96       	adiw	r26, 0x02	; 2
    1b2e:	1c 93       	st	X, r17
    1b30:	0e 93       	st	-X, r16
    1b32:	11 97       	sbiw	r26, 0x01	; 1
    1b34:	88 ec       	ldi	r24, 0xC8	; 200
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	93 83       	std	Z+3, r25	; 0x03
    1b3a:	82 83       	std	Z+2, r24	; 0x02
    1b3c:	82 ec       	ldi	r24, 0xC2	; 194
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	95 83       	std	Z+5, r25	; 0x05
    1b42:	84 83       	std	Z+4, r24	; 0x04
    1b44:	16 82       	std	Z+6, r1	; 0x06
    1b46:	10 86       	std	Z+8, r1	; 0x08
    1b48:	17 82       	std	Z+7, r1	; 0x07
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	62 e0       	ldi	r22, 0x02	; 2
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	98 01       	movw	r18, r16
    1b52:	08 ec       	ldi	r16, 0xC8	; 200
    1b54:	10 e0       	ldi	r17, 0x00	; 0
    1b56:	92 ec       	ldi	r25, 0xC2	; 194
    1b58:	e9 2e       	mov	r14, r25
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	f9 2e       	mov	r15, r25
    1b5e:	cc 24       	eor	r12, r12
    1b60:	aa 24       	eor	r10, r10
    1b62:	bb 24       	eor	r11, r11
    1b64:	88 24       	eor	r8, r8
    1b66:	83 94       	inc	r8
    1b68:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <STEPPER_move>
    1b6c:	8d b7       	in	r24, 0x3d	; 61
    1b6e:	9e b7       	in	r25, 0x3e	; 62
    1b70:	09 96       	adiw	r24, 0x09	; 9
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	9e bf       	out	0x3e, r25	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	8d bf       	out	0x3d, r24	; 61
	STEPPER_REV, odometryTrigger, MAX_SPEED, MAX_ACL, STEPPER_BRK_OFF, // Left
	STEPPER_REV, odometryTrigger, MAX_SPEED, MAX_ACL, STEPPER_BRK_OFF ); // Right
}
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	8f 90       	pop	r8
    1b8c:	08 95       	ret

00001b8e <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1b8e:	0e 94 76 20 	call	0x40ec	; 0x40ec <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1b92:	28 2f       	mov	r18, r24
    1b94:	21 70       	andi	r18, 0x01	; 1
    1b96:	20 93 7e 06 	sts	0x067E, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	82 70       	andi	r24, 0x02	; 2
    1b9e:	90 70       	andi	r25, 0x00	; 0
    1ba0:	95 95       	asr	r25
    1ba2:	87 95       	ror	r24
    1ba4:	80 93 7f 06 	sts	0x067F, r24
}
    1ba8:	08 95       	ret

00001baa <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1baa:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1bae:	60 93 76 05 	sts	0x0576, r22
    1bb2:	70 93 77 05 	sts	0x0577, r23
    1bb6:	80 93 78 05 	sts	0x0578, r24
    1bba:	90 93 79 05 	sts	0x0579, r25
	leftLightVolt = getLeftLight();
    1bbe:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1bc2:	60 93 0c 07 	sts	0x070C, r22
    1bc6:	70 93 0d 07 	sts	0x070D, r23
    1bca:	80 93 0e 07 	sts	0x070E, r24
    1bce:	90 93 0f 07 	sts	0x070F, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1bd2:	08 95       	ret

00001bd4 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1bd4:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1bd8:	60 93 df 04 	sts	0x04DF, r22
    1bdc:	70 93 e0 04 	sts	0x04E0, r23
    1be0:	80 93 e1 04 	sts	0x04E1, r24
    1be4:	90 93 e2 04 	sts	0x04E2, r25
	bkIR = getBackIR();
    1be8:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1bec:	60 93 e9 04 	sts	0x04E9, r22
    1bf0:	70 93 ea 04 	sts	0x04EA, r23
    1bf4:	80 93 eb 04 	sts	0x04EB, r24
    1bf8:	90 93 ec 04 	sts	0x04EC, r25
	ltIR = getLeftIR();
    1bfc:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1c00:	60 93 80 06 	sts	0x0680, r22
    1c04:	70 93 81 06 	sts	0x0681, r23
    1c08:	80 93 82 06 	sts	0x0682, r24
    1c0c:	90 93 83 06 	sts	0x0683, r25
	rtIR = getRightIR();
    1c10:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1c14:	60 93 84 06 	sts	0x0684, r22
    1c18:	70 93 85 06 	sts	0x0685, r23
    1c1c:	80 93 86 06 	sts	0x0686, r24
    1c20:	90 93 87 06 	sts	0x0687, r25
}
    1c24:	08 95       	ret

00001c26 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	16 2f       	mov	r17, r22
    1c38:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1c3a:	5f e1       	ldi	r21, 0x1F	; 31
    1c3c:	f5 2e       	mov	r15, r21
    1c3e:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1c40:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1c42:	0f 2d       	mov	r16, r15
    1c44:	06 95       	lsr	r16
    1c46:	06 95       	lsr	r16
    1c48:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1c4a:	c0 2f       	mov	r28, r16
    1c4c:	d0 e0       	ldi	r29, 0x00	; 0
    1c4e:	c1 2e       	mov	r12, r17
    1c50:	dd 24       	eor	r13, r13
    1c52:	ce 01       	movw	r24, r28
    1c54:	b6 01       	movw	r22, r12
    1c56:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1c5a:	80 2f       	mov	r24, r16
    1c5c:	61 2f       	mov	r22, r17
    1c5e:	0e 94 28 1b 	call	0x3650	; 0x3650 <LCD_set_next_PGC>
    1c62:	fe 01       	movw	r30, r28
    1c64:	45 e0       	ldi	r20, 0x05	; 5
    1c66:	ee 0f       	add	r30, r30
    1c68:	ff 1f       	adc	r31, r31
    1c6a:	4a 95       	dec	r20
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <LCD_set_pixel+0x40>
    1c6e:	2f 2d       	mov	r18, r15
    1c70:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1c72:	ee 20       	and	r14, r14
    1c74:	89 f0       	breq	.+34     	; 0x1c98 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1c76:	ec 0d       	add	r30, r12
    1c78:	fd 1d       	adc	r31, r13
    1c7a:	e8 50       	subi	r30, 0x08	; 8
    1c7c:	fa 4f       	sbci	r31, 0xFA	; 250
    1c7e:	27 70       	andi	r18, 0x07	; 7
    1c80:	30 70       	andi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <LCD_set_pixel+0x66>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	2a 95       	dec	r18
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <LCD_set_pixel+0x62>
    1c90:	20 81       	ld	r18, Z
    1c92:	28 2b       	or	r18, r24
    1c94:	20 83       	st	Z, r18
    1c96:	11 c0       	rjmp	.+34     	; 0x1cba <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1c98:	ec 0d       	add	r30, r12
    1c9a:	fd 1d       	adc	r31, r13
    1c9c:	e8 50       	subi	r30, 0x08	; 8
    1c9e:	fa 4f       	sbci	r31, 0xFA	; 250
    1ca0:	27 70       	andi	r18, 0x07	; 7
    1ca2:	30 70       	andi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <LCD_set_pixel+0x88>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	2a 95       	dec	r18
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <LCD_set_pixel+0x84>
    1cb2:	80 95       	com	r24
    1cb4:	20 81       	ld	r18, Z
    1cb6:	82 23       	and	r24, r18
    1cb8:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1cba:	35 e0       	ldi	r19, 0x05	; 5
    1cbc:	cc 0f       	add	r28, r28
    1cbe:	dd 1f       	adc	r29, r29
    1cc0:	3a 95       	dec	r19
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <LCD_set_pixel+0x96>
    1cc4:	cc 0d       	add	r28, r12
    1cc6:	dd 1d       	adc	r29, r13
    1cc8:	c8 50       	subi	r28, 0x08	; 8
    1cca:	da 4f       	sbci	r29, 0xFA	; 250
    1ccc:	88 81       	ld	r24, Y
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
}
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	08 95       	ret

00001ce6 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1ce6:	7f 92       	push	r7
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	98 2e       	mov	r9, r24
    1cfe:	b6 2e       	mov	r11, r22
    1d00:	c4 2e       	mov	r12, r20
    1d02:	a2 2e       	mov	r10, r18
    1d04:	80 2e       	mov	r8, r16
    1d06:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1d08:	bb 0c       	add	r11, r11
    1d0a:	bb 0c       	add	r11, r11
    1d0c:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1d0e:	dd 24       	eor	r13, r13
    1d10:	23 e0       	ldi	r18, 0x03	; 3
    1d12:	cc 0c       	add	r12, r12
    1d14:	dd 1c       	adc	r13, r13
    1d16:	2a 95       	dec	r18
    1d18:	e1 f7       	brne	.-8      	; 0x1d12 <printCell+0x2c>
    1d1a:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1d1c:	0f e1       	ldi	r16, 0x1F	; 31
    1d1e:	0b 19       	sub	r16, r11
    1d20:	80 2f       	mov	r24, r16
    1d22:	6c 2d       	mov	r22, r12
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1d2a:	98 e1       	ldi	r25, 0x18	; 24
    1d2c:	e9 2e       	mov	r14, r25
    1d2e:	eb 18       	sub	r14, r11
    1d30:	8e 2d       	mov	r24, r14
    1d32:	6c 2d       	mov	r22, r12
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1d3a:	87 e0       	ldi	r24, 0x07	; 7
    1d3c:	f8 2e       	mov	r15, r24
    1d3e:	fc 0c       	add	r15, r12
    1d40:	80 2f       	mov	r24, r16
    1d42:	6f 2d       	mov	r22, r15
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1d4a:	8e 2d       	mov	r24, r14
    1d4c:	6f 2d       	mov	r22, r15
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	
	if(cell&0b1000){
    1d54:	c9 2c       	mov	r12, r9
    1d56:	93 fe       	sbrs	r9, 3
    1d58:	24 c0       	rjmp	.+72     	; 0x1da2 <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1d5a:	61 2f       	mov	r22, r17
    1d5c:	6f 5f       	subi	r22, 0xFF	; 255
    1d5e:	80 2f       	mov	r24, r16
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1d66:	61 2f       	mov	r22, r17
    1d68:	6e 5f       	subi	r22, 0xFE	; 254
    1d6a:	80 2f       	mov	r24, r16
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1d72:	61 2f       	mov	r22, r17
    1d74:	6d 5f       	subi	r22, 0xFD	; 253
    1d76:	80 2f       	mov	r24, r16
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1d7e:	61 2f       	mov	r22, r17
    1d80:	6c 5f       	subi	r22, 0xFC	; 252
    1d82:	80 2f       	mov	r24, r16
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1d8a:	61 2f       	mov	r22, r17
    1d8c:	6b 5f       	subi	r22, 0xFB	; 251
    1d8e:	80 2f       	mov	r24, r16
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1d96:	61 2f       	mov	r22, r17
    1d98:	6a 5f       	subi	r22, 0xFA	; 250
    1d9a:	80 2f       	mov	r24, r16
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}
	if(cell&0b0100){
    1da2:	c2 fe       	sbrs	r12, 2
    1da4:	25 c0       	rjmp	.+74     	; 0x1df0 <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1da6:	8b 2d       	mov	r24, r11
    1da8:	80 95       	com	r24
    1daa:	81 5e       	subi	r24, 0xE1	; 225
    1dac:	6f 2d       	mov	r22, r15
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1db4:	8d e1       	ldi	r24, 0x1D	; 29
    1db6:	8b 19       	sub	r24, r11
    1db8:	6f 2d       	mov	r22, r15
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1dc0:	8c e1       	ldi	r24, 0x1C	; 28
    1dc2:	8b 19       	sub	r24, r11
    1dc4:	6f 2d       	mov	r22, r15
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1dcc:	8b e1       	ldi	r24, 0x1B	; 27
    1dce:	8b 19       	sub	r24, r11
    1dd0:	6f 2d       	mov	r22, r15
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1dd8:	8a e1       	ldi	r24, 0x1A	; 26
    1dda:	8b 19       	sub	r24, r11
    1ddc:	6f 2d       	mov	r22, r15
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1de4:	89 e1       	ldi	r24, 0x19	; 25
    1de6:	8b 19       	sub	r24, r11
    1de8:	6f 2d       	mov	r22, r15
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}
	if(cell&0b0010){
    1df0:	c1 fe       	sbrs	r12, 1
    1df2:	24 c0       	rjmp	.+72     	; 0x1e3c <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1df4:	61 2f       	mov	r22, r17
    1df6:	6f 5f       	subi	r22, 0xFF	; 255
    1df8:	8e 2d       	mov	r24, r14
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1e00:	61 2f       	mov	r22, r17
    1e02:	6e 5f       	subi	r22, 0xFE	; 254
    1e04:	8e 2d       	mov	r24, r14
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1e0c:	61 2f       	mov	r22, r17
    1e0e:	6d 5f       	subi	r22, 0xFD	; 253
    1e10:	8e 2d       	mov	r24, r14
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1e18:	61 2f       	mov	r22, r17
    1e1a:	6c 5f       	subi	r22, 0xFC	; 252
    1e1c:	8e 2d       	mov	r24, r14
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1e24:	61 2f       	mov	r22, r17
    1e26:	6b 5f       	subi	r22, 0xFB	; 251
    1e28:	8e 2d       	mov	r24, r14
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1e30:	61 2f       	mov	r22, r17
    1e32:	6a 5f       	subi	r22, 0xFA	; 250
    1e34:	8e 2d       	mov	r24, r14
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}
	if(cell&0b0001){
    1e3c:	c0 fe       	sbrs	r12, 0
    1e3e:	25 c0       	rjmp	.+74     	; 0x1e8a <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1e40:	8b 2d       	mov	r24, r11
    1e42:	80 95       	com	r24
    1e44:	81 5e       	subi	r24, 0xE1	; 225
    1e46:	61 2f       	mov	r22, r17
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1e4e:	8d e1       	ldi	r24, 0x1D	; 29
    1e50:	8b 19       	sub	r24, r11
    1e52:	61 2f       	mov	r22, r17
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1e5a:	8c e1       	ldi	r24, 0x1C	; 28
    1e5c:	8b 19       	sub	r24, r11
    1e5e:	61 2f       	mov	r22, r17
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1e66:	8b e1       	ldi	r24, 0x1B	; 27
    1e68:	8b 19       	sub	r24, r11
    1e6a:	61 2f       	mov	r22, r17
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1e72:	8a e1       	ldi	r24, 0x1A	; 26
    1e74:	8b 19       	sub	r24, r11
    1e76:	61 2f       	mov	r22, r17
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1e7e:	89 e1       	ldi	r24, 0x19	; 25
    1e80:	8b 19       	sub	r24, r11
    1e82:	61 2f       	mov	r22, r17
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}	
	if(isrobot){
    1e8a:	aa 20       	and	r10, r10
    1e8c:	e1 f1       	breq	.+120    	; 0x1f06 <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1e8e:	bc e1       	ldi	r27, 0x1C	; 28
    1e90:	eb 2e       	mov	r14, r27
    1e92:	eb 18       	sub	r14, r11
    1e94:	a3 e0       	ldi	r26, 0x03	; 3
    1e96:	ca 2e       	mov	r12, r26
    1e98:	c1 0e       	add	r12, r17
    1e9a:	8e 2d       	mov	r24, r14
    1e9c:	6c 2d       	mov	r22, r12
    1e9e:	4a 2d       	mov	r20, r10
    1ea0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1ea4:	fb e1       	ldi	r31, 0x1B	; 27
    1ea6:	ff 2e       	mov	r15, r31
    1ea8:	fb 18       	sub	r15, r11
    1eaa:	8f 2d       	mov	r24, r15
    1eac:	6c 2d       	mov	r22, r12
    1eae:	4a 2d       	mov	r20, r10
    1eb0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1eb4:	01 2f       	mov	r16, r17
    1eb6:	0c 5f       	subi	r16, 0xFC	; 252
    1eb8:	8e 2d       	mov	r24, r14
    1eba:	60 2f       	mov	r22, r16
    1ebc:	4a 2d       	mov	r20, r10
    1ebe:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1ec2:	8f 2d       	mov	r24, r15
    1ec4:	60 2f       	mov	r22, r16
    1ec6:	4a 2d       	mov	r20, r10
    1ec8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		
		switch(orent){
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	88 16       	cp	r8, r24
    1ed0:	71 f0       	breq	.+28     	; 0x1eee <printCell+0x208>
    1ed2:	88 16       	cp	r8, r24
    1ed4:	40 f0       	brcs	.+16     	; 0x1ee6 <printCell+0x200>
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	88 16       	cp	r8, r24
    1eda:	61 f0       	breq	.+24     	; 0x1ef4 <printCell+0x20e>
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	88 16       	cp	r8, r24
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <printCell+0x1fe>
    1ee2:	4a c0       	rjmp	.+148    	; 0x1f78 <printCell+0x292>
    1ee4:	0b c0       	rjmp	.+22     	; 0x1efc <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1ee6:	8d e1       	ldi	r24, 0x1D	; 29
    1ee8:	8b 19       	sub	r24, r11
    1eea:	6c 2d       	mov	r22, r12
    1eec:	0a c0       	rjmp	.+20     	; 0x1f02 <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1eee:	1b 5f       	subi	r17, 0xFB	; 251
    1ef0:	8e 2d       	mov	r24, r14
    1ef2:	06 c0       	rjmp	.+12     	; 0x1f00 <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    1ef4:	8a e1       	ldi	r24, 0x1A	; 26
    1ef6:	8b 19       	sub	r24, r11
    1ef8:	60 2f       	mov	r22, r16
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    1efc:	1e 5f       	subi	r17, 0xFE	; 254
    1efe:	8f 2d       	mov	r24, r15
    1f00:	61 2f       	mov	r22, r17
    1f02:	4a 2d       	mov	r20, r10
    1f04:	37 c0       	rjmp	.+110    	; 0x1f74 <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    1f06:	77 20       	and	r7, r7
    1f08:	b9 f1       	breq	.+110    	; 0x1f78 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1f0a:	ec e1       	ldi	r30, 0x1C	; 28
    1f0c:	ce 2e       	mov	r12, r30
    1f0e:	cb 18       	sub	r12, r11
    1f10:	73 e0       	ldi	r23, 0x03	; 3
    1f12:	e7 2e       	mov	r14, r23
    1f14:	e1 0e       	add	r14, r17
    1f16:	8c 2d       	mov	r24, r12
    1f18:	6e 2d       	mov	r22, r14
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1f20:	0b e1       	ldi	r16, 0x1B	; 27
    1f22:	0b 19       	sub	r16, r11
    1f24:	80 2f       	mov	r24, r16
    1f26:	6e 2d       	mov	r22, r14
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1f2e:	64 e0       	ldi	r22, 0x04	; 4
    1f30:	f6 2e       	mov	r15, r22
    1f32:	f1 0e       	add	r15, r17
    1f34:	8c 2d       	mov	r24, r12
    1f36:	6f 2d       	mov	r22, r15
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1f3e:	80 2f       	mov	r24, r16
    1f40:	6f 2d       	mov	r22, r15
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1f48:	8d e1       	ldi	r24, 0x1D	; 29
    1f4a:	8b 19       	sub	r24, r11
    1f4c:	6e 2d       	mov	r22, r14
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1f54:	1b 5f       	subi	r17, 0xFB	; 251
    1f56:	8c 2d       	mov	r24, r12
    1f58:	61 2f       	mov	r22, r17
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    1f60:	8a e1       	ldi	r24, 0x1A	; 26
    1f62:	8b 19       	sub	r24, r11
    1f64:	6f 2d       	mov	r22, r15
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    1f6c:	13 50       	subi	r17, 0x03	; 3
    1f6e:	80 2f       	mov	r24, r16
    1f70:	61 2f       	mov	r22, r17
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		}
}
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	bf 90       	pop	r11
    1f86:	af 90       	pop	r10
    1f88:	9f 90       	pop	r9
    1f8a:	8f 90       	pop	r8
    1f8c:	7f 90       	pop	r7
    1f8e:	08 95       	ret

00001f90 <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1fa8:	80 91 7c 06 	lds	r24, 0x067C
    1fac:	a8 2e       	mov	r10, r24
    1fae:	a6 94       	lsr	r10
    1fb0:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    1fb2:	43 e0       	ldi	r20, 0x03	; 3
    1fb4:	b4 2e       	mov	r11, r20
    1fb6:	b8 22       	and	r11, r24
    1fb8:	cc 24       	eor	r12, r12
    1fba:	dd 24       	eor	r13, r13
    1fbc:	1e c0       	rjmp	.+60     	; 0x1ffa <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1fbe:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    1fc0:	fa 14       	cp	r15, r10
    1fc2:	19 f0       	breq	.+6      	; 0x1fca <printMap+0x3a>
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	06 c0       	rjmp	.+12     	; 0x1fd6 <printMap+0x46>
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	1b 15       	cp	r17, r11
    1fd0:	11 f4       	brne	.+4      	; 0x1fd6 <printMap+0x46>
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    1fd6:	6f 2d       	mov	r22, r15
    1fd8:	41 2f       	mov	r20, r17
    1fda:	00 91 7b 05 	lds	r16, 0x057B
    1fde:	e9 2c       	mov	r14, r9
    1fe0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1fe4:	1f 5f       	subi	r17, 0xFF	; 255
    1fe6:	21 96       	adiw	r28, 0x01	; 1
    1fe8:	14 30       	cpi	r17, 0x04	; 4
    1fea:	49 f7       	brne	.-46     	; 0x1fbe <printMap+0x2e>
    1fec:	08 94       	sec
    1fee:	c1 1c       	adc	r12, r1
    1ff0:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1ff2:	84 e0       	ldi	r24, 0x04	; 4
    1ff4:	c8 16       	cp	r12, r24
    1ff6:	d1 04       	cpc	r13, r1
    1ff8:	51 f0       	breq	.+20     	; 0x200e <printMap+0x7e>
    1ffa:	fc 2c       	mov	r15, r12
    1ffc:	e6 01       	movw	r28, r12
    1ffe:	cc 0f       	add	r28, r28
    2000:	dd 1f       	adc	r29, r29
    2002:	cc 0f       	add	r28, r28
    2004:	dd 1f       	adc	r29, r29
    2006:	c1 59       	subi	r28, 0x91	; 145
    2008:	dc 4f       	sbci	r29, 0xFC	; 252
    200a:	10 e0       	ldi	r17, 0x00	; 0
    200c:	d8 cf       	rjmp	.-80     	; 0x1fbe <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	ff 90       	pop	r15
    2018:	ef 90       	pop	r14
    201a:	df 90       	pop	r13
    201c:	cf 90       	pop	r12
    201e:	bf 90       	pop	r11
    2020:	af 90       	pop	r10
    2022:	9f 90       	pop	r9
    2024:	08 95       	ret

00002026 <checkOdometry>:
*					sets the flag whe appropriate
********************************************************************/
char checkOdometry( char reset )
{	
	// Check for a reset
	if (reset){
    2026:	88 23       	and	r24, r24
    2028:	91 f0       	breq	.+36     	; 0x204e <checkOdometry+0x28>
		odometryTrigger = 0;
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	80 93 66 05 	sts	0x0566, r24
    2036:	90 93 67 05 	sts	0x0567, r25
    203a:	a0 93 68 05 	sts	0x0568, r26
    203e:	b0 93 69 05 	sts	0x0569, r27
		STEPPER_set_steps(STEPPER_BOTH,odometryTrigger);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <STEPPER_set_steps>
    204c:	17 c0       	rjmp	.+46     	; 0x207c <checkOdometry+0x56>
		return SUCCESS;
	}
	
	// Get the current number of steps
	curr_step = STEPPER_get_nSteps();
    204e:	0e 94 82 1c 	call	0x3904	; 0x3904 <STEPPER_get_nSteps>
    2052:	60 93 78 06 	sts	0x0678, r22
    2056:	70 93 79 06 	sts	0x0679, r23
    205a:	80 93 7a 06 	sts	0x067A, r24
    205e:	90 93 7b 06 	sts	0x067B, r25
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	80 91 7a 06 	lds	r24, 0x067A
    2068:	90 91 7b 06 	lds	r25, 0x067B
    206c:	20 91 78 06 	lds	r18, 0x0678
    2070:	30 91 79 06 	lds	r19, 0x0679
    2074:	82 0f       	add	r24, r18
    2076:	93 1f       	adc	r25, r19
    2078:	89 2b       	or	r24, r25
    207a:	09 f4       	brne	.+2      	; 0x207e <checkOdometry+0x58>
    207c:	41 e0       	ldi	r20, 0x01	; 1
	}

	// But if not zero
	//then return fial
	return FAIL;
}
    207e:	84 2f       	mov	r24, r20
    2080:	08 95       	ret

00002082 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    2082:	5f 92       	push	r5
    2084:	6f 92       	push	r6
    2086:	7f 92       	push	r7
    2088:	8f 92       	push	r8
    208a:	9f 92       	push	r9
    208c:	af 92       	push	r10
    208e:	bf 92       	push	r11
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    20a0:	e0 90 df 04 	lds	r14, 0x04DF
    20a4:	f0 90 e0 04 	lds	r15, 0x04E0
    20a8:	00 91 e1 04 	lds	r16, 0x04E1
    20ac:	10 91 e2 04 	lds	r17, 0x04E2
    20b0:	55 24       	eor	r5, r5
    20b2:	c8 01       	movw	r24, r16
    20b4:	b7 01       	movw	r22, r14
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	50 e0       	ldi	r21, 0x00	; 0
    20be:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    20c2:	88 23       	and	r24, r24
    20c4:	14 f4       	brge	.+4      	; 0x20ca <moveWall+0x48>
    20c6:	55 24       	eor	r5, r5
    20c8:	53 94       	inc	r5
    20ca:	a0 90 84 06 	lds	r10, 0x0684
    20ce:	b0 90 85 06 	lds	r11, 0x0685
    20d2:	c0 90 86 06 	lds	r12, 0x0686
    20d6:	d0 90 87 06 	lds	r13, 0x0687
    20da:	60 90 80 06 	lds	r6, 0x0680
    20de:	70 90 81 06 	lds	r7, 0x0681
    20e2:	80 90 82 06 	lds	r8, 0x0682
    20e6:	90 90 83 06 	lds	r9, 0x0683
	// If no walls
	// Then go straight
	if(!isWall){
    20ea:	55 20       	and	r5, r5
    20ec:	41 f5       	brne	.+80     	; 0x213e <moveWall+0xbc>
    20ee:	60 91 e9 04 	lds	r22, 0x04E9
    20f2:	70 91 ea 04 	lds	r23, 0x04EA
    20f6:	80 91 eb 04 	lds	r24, 0x04EB
    20fa:	90 91 ec 04 	lds	r25, 0x04EC
    20fe:	20 e0       	ldi	r18, 0x00	; 0
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	40 e7       	ldi	r20, 0x70	; 112
    2104:	51 e4       	ldi	r21, 0x41	; 65
    2106:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    210a:	87 fd       	sbrc	r24, 7
    210c:	18 c0       	rjmp	.+48     	; 0x213e <moveWall+0xbc>
    210e:	c6 01       	movw	r24, r12
    2110:	b5 01       	movw	r22, r10
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e7       	ldi	r20, 0x70	; 112
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    211e:	87 fd       	sbrc	r24, 7
    2120:	0e c0       	rjmp	.+28     	; 0x213e <moveWall+0xbc>
    2122:	c4 01       	movw	r24, r8
    2124:	b3 01       	movw	r22, r6
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e7       	ldi	r20, 0x70	; 112
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    2132:	87 fd       	sbrc	r24, 7
    2134:	04 c0       	rjmp	.+8      	; 0x213e <moveWall+0xbc>
		
		// Update the speeds the same to go forward
		STEPPER_set_speed(STEPPER_BOTH, MAX_SPEED);
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	68 ec       	ldi	r22, 0xC8	; 200
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	c9 c0       	rjmp	.+402    	; 0x22d0 <moveWall+0x24e>
	BOOL isLEFT;
	float error;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    213e:	c6 01       	movw	r24, r12
    2140:	b5 01       	movw	r22, r10
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e7       	ldi	r20, 0x70	; 112
    2148:	51 e4       	ldi	r21, 0x41	; 65
    214a:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__gesf2>
    214e:	18 16       	cp	r1, r24
    2150:	64 f4       	brge	.+24     	; 0x216a <moveWall+0xe8>
		rtIR = IR_WALL_R_THRESH-18;
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	a0 e4       	ldi	r26, 0x40	; 64
    2158:	b0 ec       	ldi	r27, 0xC0	; 192
    215a:	80 93 84 06 	sts	0x0684, r24
    215e:	90 93 85 06 	sts	0x0685, r25
    2162:	a0 93 86 06 	sts	0x0686, r26
    2166:	b0 93 87 06 	sts	0x0687, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    216a:	c4 01       	movw	r24, r8
    216c:	b3 01       	movw	r22, r6
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e7       	ldi	r20, 0x70	; 112
    2174:	51 e4       	ldi	r21, 0x41	; 65
    2176:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__gesf2>
    217a:	18 16       	cp	r1, r24
    217c:	14 f0       	brlt	.+4      	; 0x2182 <moveWall+0x100>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	0d c0       	rjmp	.+26     	; 0x219c <moveWall+0x11a>
		ltIR = IR_WALL_L_THRESH-18;
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e4       	ldi	r26, 0x40	; 64
    2188:	b0 ec       	ldi	r27, 0xC0	; 192
    218a:	80 93 80 06 	sts	0x0680, r24
    218e:	90 93 81 06 	sts	0x0681, r25
    2192:	a0 93 82 06 	sts	0x0682, r26
    2196:	b0 93 83 06 	sts	0x0683, r27
    219a:	81 e0       	ldi	r24, 0x01	; 1
		isLEFT = 1;
	}
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    219c:	55 20       	and	r5, r5
    219e:	21 f1       	breq	.+72     	; 0x21e8 <moveWall+0x166>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    21a0:	88 23       	and	r24, r24
    21a2:	29 f0       	breq	.+10     	; 0x21ae <moveWall+0x12c>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	70 e0       	ldi	r23, 0x00	; 0
    21a8:	8a e7       	ldi	r24, 0x7A	; 122
    21aa:	94 e4       	ldi	r25, 0x44	; 68
    21ac:	04 c0       	rjmp	.+8      	; 0x21b6 <moveWall+0x134>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	70 e0       	ldi	r23, 0x00	; 0
    21b2:	8a e7       	ldi	r24, 0x7A	; 122
    21b4:	94 ec       	ldi	r25, 0xC4	; 196
    21b6:	a8 01       	movw	r20, r16
    21b8:	97 01       	movw	r18, r14
    21ba:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    21be:	20 91 80 06 	lds	r18, 0x0680
    21c2:	30 91 81 06 	lds	r19, 0x0681
    21c6:	40 91 82 06 	lds	r20, 0x0682
    21ca:	50 91 83 06 	lds	r21, 0x0683
    21ce:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    21d2:	9b 01       	movw	r18, r22
    21d4:	ac 01       	movw	r20, r24
    21d6:	60 91 84 06 	lds	r22, 0x0684
    21da:	70 91 85 06 	lds	r23, 0x0685
    21de:	80 91 86 06 	lds	r24, 0x0686
    21e2:	90 91 87 06 	lds	r25, 0x0687
    21e6:	10 c0       	rjmp	.+32     	; 0x2208 <moveWall+0x186>
	// the error is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    21e8:	60 91 84 06 	lds	r22, 0x0684
    21ec:	70 91 85 06 	lds	r23, 0x0685
    21f0:	80 91 86 06 	lds	r24, 0x0686
    21f4:	90 91 87 06 	lds	r25, 0x0687
    21f8:	20 91 80 06 	lds	r18, 0x0680
    21fc:	30 91 81 06 	lds	r19, 0x0681
    2200:	40 91 82 06 	lds	r20, 0x0682
    2204:	50 91 83 06 	lds	r21, 0x0683
    2208:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    220c:	90 58       	subi	r25, 0x80	; 128
    220e:	40 e0       	ldi	r20, 0x00	; 0
    2210:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2214:	7b 01       	movw	r14, r22
    2216:	8c 01       	movw	r16, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2218:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__fixsfsi>
    221c:	eb 01       	movw	r28, r22
    221e:	77 ff       	sbrs	r23, 7
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <moveWall+0x1a6>
    2222:	d0 95       	com	r29
    2224:	c1 95       	neg	r28
    2226:	df 4f       	sbci	r29, 0xFF	; 255
    2228:	c5 36       	cpi	r28, 0x65	; 101
    222a:	d1 05       	cpc	r29, r1
    222c:	fc f0       	brlt	.+62     	; 0x226c <moveWall+0x1ea>
    222e:	c8 01       	movw	r24, r16
    2230:	b7 01       	movw	r22, r14
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e0       	ldi	r20, 0x00	; 0
    2238:	50 e0       	ldi	r21, 0x00	; 0
    223a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    223e:	88 23       	and	r24, r24
    2240:	a9 f0       	breq	.+42     	; 0x226c <moveWall+0x1ea>
		effort = MAX_EFFORT*(effort/abs(effort));
    2242:	be 01       	movw	r22, r28
    2244:	88 27       	eor	r24, r24
    2246:	77 fd       	sbrc	r23, 7
    2248:	80 95       	com	r24
    224a:	98 2f       	mov	r25, r24
    224c:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatsisf>
    2250:	9b 01       	movw	r18, r22
    2252:	ac 01       	movw	r20, r24
    2254:	c8 01       	movw	r24, r16
    2256:	b7 01       	movw	r22, r14
    2258:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	48 ec       	ldi	r20, 0xC8	; 200
    2262:	52 e4       	ldi	r21, 0x42	; 66
    2264:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    2268:	7b 01       	movw	r14, r22
    226a:	8c 01       	movw	r16, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    226c:	c8 01       	movw	r24, r16
    226e:	b7 01       	movw	r22, r14
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	48 ec       	ldi	r20, 0xC8	; 200
    2276:	52 e4       	ldi	r21, 0x42	; 66
    2278:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    227c:	7b 01       	movw	r14, r22
    227e:	8c 01       	movw	r16, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update the speeds the same to move with wall
	STEPPER_set_speed(STEPPER_LEFT, stepper_speed_L);
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	48 ec       	ldi	r20, 0xC8	; 200
    2286:	52 e4       	ldi	r21, 0x42	; 66
    2288:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	48 ec       	ldi	r20, 0xC8	; 200
    2292:	52 e4       	ldi	r21, 0x42	; 66
    2294:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    2298:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    229c:	9b 01       	movw	r18, r22
    229e:	ac 01       	movw	r20, r24
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	b9 01       	movw	r22, r18
    22a4:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <STEPPER_set_speed>
	STEPPER_set_speed(STEPPER_RIGHT, stepper_speed_R);
    22a8:	c8 01       	movw	r24, r16
    22aa:	b7 01       	movw	r22, r14
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	48 ec       	ldi	r20, 0xC8	; 200
    22b2:	52 ec       	ldi	r21, 0xC2	; 194
    22b4:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	48 ec       	ldi	r20, 0xC8	; 200
    22be:	52 e4       	ldi	r21, 0x42	; 66
    22c0:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    22c4:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    22c8:	9b 01       	movw	r18, r22
    22ca:	ac 01       	movw	r20, r24
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	b9 01       	movw	r22, r18
    22d0:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <STEPPER_set_speed>
	
	// Return weather or not we are finished
	return checkOdometry(NO_RESET);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	0e 94 13 10 	call	0x2026	; 0x2026 <checkOdometry>
	
}
    22da:	df 91       	pop	r29
    22dc:	cf 91       	pop	r28
    22de:	1f 91       	pop	r17
    22e0:	0f 91       	pop	r16
    22e2:	ff 90       	pop	r15
    22e4:	ef 90       	pop	r14
    22e6:	df 90       	pop	r13
    22e8:	cf 90       	pop	r12
    22ea:	bf 90       	pop	r11
    22ec:	af 90       	pop	r10
    22ee:	9f 90       	pop	r9
    22f0:	8f 90       	pop	r8
    22f2:	7f 90       	pop	r7
    22f4:	6f 90       	pop	r6
    22f6:	5f 90       	pop	r5
    22f8:	08 95       	ret

000022fa <moveCell>:
********************************************************************/
void moveCell( void )
{	
	char isDone = 0;
	
	setOdometry(WALL_STEP);
    22fa:	63 ec       	ldi	r22, 0xC3	; 195
    22fc:	75 e3       	ldi	r23, 0x35	; 53
    22fe:	8b ea       	ldi	r24, 0xAB	; 171
    2300:	93 e4       	ldi	r25, 0x43	; 67
    2302:	0e 94 75 0d 	call	0x1aea	; 0x1aea <setOdometry>

	while(!isDone){
		checkIR();
    2306:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <checkIR>
		isDone = moveWall();
    230a:	0e 94 41 10 	call	0x2082	; 0x2082 <moveWall>
{	
	char isDone = 0;
	
	setOdometry(WALL_STEP);

	while(!isDone){
    230e:	88 23       	and	r24, r24
    2310:	d1 f3       	breq	.-12     	; 0x2306 <moveCell+0xc>
		isDone = moveWall();
	}
	// STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
	
	// move_arc_stwt(NO_TURN, 45, 10, 10, 0);
}
    2312:	08 95       	ret

00002314 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2314:	0e 94 f5 20 	call	0x41ea	; 0x41ea <ATTINY_open>
    2318:	90 93 66 04 	sts	0x0466, r25
    231c:	80 93 65 04 	sts	0x0465, r24
	LEopstat = LED_open(); //open the LED module
    2320:	0e 94 6f 1b 	call	0x36de	; 0x36de <LED_open>
    2324:	90 93 64 04 	sts	0x0464, r25
    2328:	80 93 63 04 	sts	0x0463, r24
	LCopstat = LCD_open(); //open the LCD module
    232c:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_open>
    2330:	90 93 62 04 	sts	0x0462, r25
    2334:	80 93 61 04 	sts	0x0461, r24
	STEPPER_open(); // Open STEPPER module for use
    2338:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    233c:	82 e0       	ldi	r24, 0x02	; 2
    233e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <SPKR_open>
	
	LED_open();
    2342:	0e 94 6f 1b 	call	0x36de	; 0x36de <LED_open>
	I2C_open();
    2346:	0e 94 4f 22 	call	0x449e	; 0x449e <I2C_open>
	ADC_open();//open the ADC module
    234a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	0e 94 55 1a 	call	0x34aa	; 0x34aa <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    2354:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <checkIR>
	prefilter(1);
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    235e:	8f ee       	ldi	r24, 0xEF	; 239
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	a5 e8       	ldi	r26, 0x85	; 133
    2364:	b1 e4       	ldi	r27, 0x41	; 65
    2366:	80 93 66 05 	sts	0x0566, r24
    236a:	90 93 67 05 	sts	0x0567, r25
    236e:	a0 93 68 05 	sts	0x0568, r26
    2372:	b0 93 69 05 	sts	0x0569, r27
    2376:	20 e0       	ldi	r18, 0x00	; 0
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	0a c0       	rjmp	.+20     	; 0x2390 <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    237c:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    237e:	01 96       	adiw	r24, 0x01	; 1
    2380:	80 32       	cpi	r24, 0x20	; 32
    2382:	91 05       	cpc	r25, r1
    2384:	d9 f7       	brne	.-10     	; 0x237c <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    2386:	2f 5f       	subi	r18, 0xFF	; 255
    2388:	3f 4f       	sbci	r19, 0xFF	; 255
    238a:	24 30       	cpi	r18, 0x04	; 4
    238c:	31 05       	cpc	r19, r1
    238e:	59 f0       	breq	.+22     	; 0x23a6 <initializeRobot+0x92>
    2390:	f9 01       	movw	r30, r18
    2392:	55 e0       	ldi	r21, 0x05	; 5
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	5a 95       	dec	r21
    239a:	e1 f7       	brne	.-8      	; 0x2394 <initializeRobot+0x80>
    239c:	e8 50       	subi	r30, 0x08	; 8
    239e:	fa 4f       	sbci	r31, 0xFA	; 250
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	eb cf       	rjmp	.-42     	; 0x237c <initializeRobot+0x68>
    23a6:	08 95       	ret

000023a8 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    23a8:	ef 92       	push	r14
    23aa:	ff 92       	push	r15
    23ac:	0f 93       	push	r16
    23ae:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    23b0:	60 91 df 04 	lds	r22, 0x04DF
    23b4:	70 91 e0 04 	lds	r23, 0x04E0
    23b8:	80 91 e1 04 	lds	r24, 0x04E1
    23bc:	90 91 e2 04 	lds	r25, 0x04E2
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e5       	ldi	r20, 0x50	; 80
    23c6:	51 e4       	ldi	r21, 0x41	; 65
    23c8:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    23cc:	f8 2e       	mov	r15, r24
    23ce:	ff 1c       	adc	r15, r15
    23d0:	ff 24       	eor	r15, r15
    23d2:	ff 1c       	adc	r15, r15
    23d4:	ff 0c       	add	r15, r15
    23d6:	ff 0c       	add	r15, r15
    23d8:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    23da:	60 91 80 06 	lds	r22, 0x0680
    23de:	70 91 81 06 	lds	r23, 0x0681
    23e2:	80 91 82 06 	lds	r24, 0x0682
    23e6:	90 91 83 06 	lds	r25, 0x0683
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 ef       	ldi	r20, 0xF0	; 240
    23f0:	51 e4       	ldi	r21, 0x41	; 65
    23f2:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    23f6:	08 2f       	mov	r16, r24
    23f8:	00 1f       	adc	r16, r16
    23fa:	00 27       	eor	r16, r16
    23fc:	00 1f       	adc	r16, r16
    23fe:	00 0f       	add	r16, r16
    2400:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    2402:	60 91 e9 04 	lds	r22, 0x04E9
    2406:	70 91 ea 04 	lds	r23, 0x04EA
    240a:	80 91 eb 04 	lds	r24, 0x04EB
    240e:	90 91 ec 04 	lds	r25, 0x04EC
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	4c e0       	ldi	r20, 0x0C	; 12
    2418:	52 e4       	ldi	r21, 0x42	; 66
    241a:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    241e:	18 2f       	mov	r17, r24
    2420:	11 1f       	adc	r17, r17
    2422:	11 27       	eor	r17, r17
    2424:	11 1f       	adc	r17, r17
    2426:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    2428:	ee 24       	eor	r14, r14
    242a:	60 91 84 06 	lds	r22, 0x0684
    242e:	70 91 85 06 	lds	r23, 0x0685
    2432:	80 91 86 06 	lds	r24, 0x0686
    2436:	90 91 87 06 	lds	r25, 0x0687
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 ef       	ldi	r20, 0xF0	; 240
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    2446:	88 23       	and	r24, r24
    2448:	14 f4       	brge	.+4      	; 0x244e <checkWorld+0xa6>
    244a:	ee 24       	eor	r14, r14
    244c:	e3 94       	inc	r14
    244e:	8f 2d       	mov	r24, r15
    2450:	8e 0d       	add	r24, r14
    2452:	80 0f       	add	r24, r16
    2454:	81 0f       	add	r24, r17
    2456:	80 93 e7 04 	sts	0x04E7, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    245a:	20 91 e8 04 	lds	r18, 0x04E8
    245e:	e2 2f       	mov	r30, r18
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	e0 50       	subi	r30, 0x00	; 0
    2464:	f9 4f       	sbci	r31, 0xF9	; 249
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	90 93 ed 04 	sts	0x04ED, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    246c:	89 17       	cp	r24, r25
    246e:	19 f4       	brne	.+6      	; 0x2476 <checkWorld+0xce>
		currentMoveWorld += 1;
    2470:	2f 5f       	subi	r18, 0xFF	; 255
    2472:	20 93 e8 04 	sts	0x04E8, r18
	}
}
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	08 95       	ret

00002480 <moveWallOld>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWallOld( void )
{	
    2480:	2f 92       	push	r2
    2482:	3f 92       	push	r3
    2484:	4f 92       	push	r4
    2486:	5f 92       	push	r5
    2488:	6f 92       	push	r6
    248a:	7f 92       	push	r7
    248c:	8f 92       	push	r8
    248e:	9f 92       	push	r9
    2490:	af 92       	push	r10
    2492:	bf 92       	push	r11
    2494:	cf 92       	push	r12
    2496:	df 92       	push	r13
    2498:	ef 92       	push	r14
    249a:	ff 92       	push	r15
    249c:	0f 93       	push	r16
    249e:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    24a0:	e0 90 df 04 	lds	r14, 0x04DF
    24a4:	f0 90 e0 04 	lds	r15, 0x04E0
    24a8:	00 91 e1 04 	lds	r16, 0x04E1
    24ac:	10 91 e2 04 	lds	r17, 0x04E2
    24b0:	33 24       	eor	r3, r3
    24b2:	c8 01       	movw	r24, r16
    24b4:	b7 01       	movw	r22, r14
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    24c2:	88 23       	and	r24, r24
    24c4:	14 f4       	brge	.+4      	; 0x24ca <moveWallOld+0x4a>
    24c6:	33 24       	eor	r3, r3
    24c8:	33 94       	inc	r3
    24ca:	a0 90 84 06 	lds	r10, 0x0684
    24ce:	b0 90 85 06 	lds	r11, 0x0685
    24d2:	c0 90 86 06 	lds	r12, 0x0686
    24d6:	d0 90 87 06 	lds	r13, 0x0687
    24da:	40 90 80 06 	lds	r4, 0x0680
    24de:	50 90 81 06 	lds	r5, 0x0681
    24e2:	60 90 82 06 	lds	r6, 0x0682
    24e6:	70 90 83 06 	lds	r7, 0x0683
    24ea:	88 24       	eor	r8, r8
    24ec:	60 91 e9 04 	lds	r22, 0x04E9
    24f0:	70 91 ea 04 	lds	r23, 0x04EA
    24f4:	80 91 eb 04 	lds	r24, 0x04EB
    24f8:	90 91 ec 04 	lds	r25, 0x04EC
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e7       	ldi	r20, 0x70	; 112
    2502:	51 e4       	ldi	r21, 0x41	; 65
    2504:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    2508:	88 23       	and	r24, r24
    250a:	14 f4       	brge	.+4      	; 0x2510 <moveWallOld+0x90>
    250c:	88 24       	eor	r8, r8
    250e:	83 94       	inc	r8
    2510:	93 2c       	mov	r9, r3
    2512:	98 28       	or	r9, r8
    2514:	88 24       	eor	r8, r8
    2516:	c6 01       	movw	r24, r12
    2518:	b5 01       	movw	r22, r10
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	40 e7       	ldi	r20, 0x70	; 112
    2520:	51 e4       	ldi	r21, 0x41	; 65
    2522:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    2526:	88 23       	and	r24, r24
    2528:	14 f4       	brge	.+4      	; 0x252e <moveWallOld+0xae>
    252a:	88 24       	eor	r8, r8
    252c:	83 94       	inc	r8
    252e:	98 28       	or	r9, r8
    2530:	88 24       	eor	r8, r8
    2532:	c3 01       	movw	r24, r6
    2534:	b2 01       	movw	r22, r4
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e7       	ldi	r20, 0x70	; 112
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    2542:	88 23       	and	r24, r24
    2544:	14 f4       	brge	.+4      	; 0x254a <moveWallOld+0xca>
    2546:	88 24       	eor	r8, r8
    2548:	83 94       	inc	r8
    254a:	29 2c       	mov	r2, r9
    254c:	28 28       	or	r2, r8
	if(!isWall){	
    254e:	81 f4       	brne	.+32     	; 0x2570 <moveWallOld+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    2550:	60 e0       	ldi	r22, 0x00	; 0
    2552:	70 e0       	ldi	r23, 0x00	; 0
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	9f e4       	ldi	r25, 0x4F	; 79
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e2       	ldi	r20, 0x20	; 32
    255e:	51 e4       	ldi	r21, 0x41	; 65
    2560:	79 01       	movw	r14, r18
    2562:	8a 01       	movw	r16, r20
    2564:	59 01       	movw	r10, r18
    2566:	6a 01       	movw	r12, r20
    2568:	88 24       	eor	r8, r8
    256a:	0e 94 15 08 	call	0x102a	; 0x102a <move_arc_stnb>
    256e:	f7 c0       	rjmp	.+494    	; 0x275e <moveWallOld+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2570:	c6 01       	movw	r24, r12
    2572:	b5 01       	movw	r22, r10
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e7       	ldi	r20, 0x70	; 112
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__gesf2>
    2580:	18 16       	cp	r1, r24
    2582:	64 f4       	brge	.+24     	; 0x259c <moveWallOld+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 e4       	ldi	r26, 0x40	; 64
    258a:	b0 ec       	ldi	r27, 0xC0	; 192
    258c:	80 93 84 06 	sts	0x0684, r24
    2590:	90 93 85 06 	sts	0x0685, r25
    2594:	a0 93 86 06 	sts	0x0686, r26
    2598:	b0 93 87 06 	sts	0x0687, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    259c:	c3 01       	movw	r24, r6
    259e:	b2 01       	movw	r22, r4
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e7       	ldi	r20, 0x70	; 112
    25a6:	51 e4       	ldi	r21, 0x41	; 65
    25a8:	0e 94 d4 2e 	call	0x5da8	; 0x5da8 <__gesf2>
    25ac:	18 16       	cp	r1, r24
    25ae:	14 f0       	brlt	.+4      	; 0x25b4 <moveWallOld+0x134>
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	0d c0       	rjmp	.+26     	; 0x25ce <moveWallOld+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 e4       	ldi	r26, 0x40	; 64
    25ba:	b0 ec       	ldi	r27, 0xC0	; 192
    25bc:	80 93 80 06 	sts	0x0680, r24
    25c0:	90 93 81 06 	sts	0x0681, r25
    25c4:	a0 93 82 06 	sts	0x0682, r26
    25c8:	b0 93 83 06 	sts	0x0683, r27
    25cc:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    25ce:	33 20       	and	r3, r3
    25d0:	21 f1       	breq	.+72     	; 0x261a <moveWallOld+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    25d2:	88 23       	and	r24, r24
    25d4:	29 f0       	breq	.+10     	; 0x25e0 <moveWallOld+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    25d6:	60 e0       	ldi	r22, 0x00	; 0
    25d8:	70 e0       	ldi	r23, 0x00	; 0
    25da:	8a e7       	ldi	r24, 0x7A	; 122
    25dc:	94 e4       	ldi	r25, 0x44	; 68
    25de:	04 c0       	rjmp	.+8      	; 0x25e8 <moveWallOld+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	70 e0       	ldi	r23, 0x00	; 0
    25e4:	8a e7       	ldi	r24, 0x7A	; 122
    25e6:	94 ec       	ldi	r25, 0xC4	; 196
    25e8:	a8 01       	movw	r20, r16
    25ea:	97 01       	movw	r18, r14
    25ec:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    25f0:	20 91 80 06 	lds	r18, 0x0680
    25f4:	30 91 81 06 	lds	r19, 0x0681
    25f8:	40 91 82 06 	lds	r20, 0x0682
    25fc:	50 91 83 06 	lds	r21, 0x0683
    2600:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    2604:	9b 01       	movw	r18, r22
    2606:	ac 01       	movw	r20, r24
    2608:	60 91 84 06 	lds	r22, 0x0684
    260c:	70 91 85 06 	lds	r23, 0x0685
    2610:	80 91 86 06 	lds	r24, 0x0686
    2614:	90 91 87 06 	lds	r25, 0x0687
    2618:	10 c0       	rjmp	.+32     	; 0x263a <moveWallOld+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    261a:	60 91 84 06 	lds	r22, 0x0684
    261e:	70 91 85 06 	lds	r23, 0x0685
    2622:	80 91 86 06 	lds	r24, 0x0686
    2626:	90 91 87 06 	lds	r25, 0x0687
    262a:	20 91 80 06 	lds	r18, 0x0680
    262e:	30 91 81 06 	lds	r19, 0x0681
    2632:	40 91 82 06 	lds	r20, 0x0682
    2636:	50 91 83 06 	lds	r21, 0x0683
    263a:	0e 94 20 2d 	call	0x5a40	; 0x5a40 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    263e:	90 58       	subi	r25, 0x80	; 128
    2640:	40 e0       	ldi	r20, 0x00	; 0
    2642:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2646:	6b 01       	movw	r12, r22
    2648:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    264a:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__fixsfsi>
    264e:	8b 01       	movw	r16, r22
    2650:	77 ff       	sbrs	r23, 7
    2652:	03 c0       	rjmp	.+6      	; 0x265a <moveWallOld+0x1da>
    2654:	10 95       	com	r17
    2656:	01 95       	neg	r16
    2658:	1f 4f       	sbci	r17, 0xFF	; 255
    265a:	05 36       	cpi	r16, 0x65	; 101
    265c:	11 05       	cpc	r17, r1
    265e:	fc f0       	brlt	.+62     	; 0x269e <moveWallOld+0x21e>
    2660:	c7 01       	movw	r24, r14
    2662:	b6 01       	movw	r22, r12
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <__cmpsf2>
    2670:	88 23       	and	r24, r24
    2672:	a9 f0       	breq	.+42     	; 0x269e <moveWallOld+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    2674:	b8 01       	movw	r22, r16
    2676:	88 27       	eor	r24, r24
    2678:	77 fd       	sbrc	r23, 7
    267a:	80 95       	com	r24
    267c:	98 2f       	mov	r25, r24
    267e:	0e 94 24 2e 	call	0x5c48	; 0x5c48 <__floatsisf>
    2682:	9b 01       	movw	r18, r22
    2684:	ac 01       	movw	r20, r24
    2686:	c7 01       	movw	r24, r14
    2688:	b6 01       	movw	r22, r12
    268a:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	48 ec       	ldi	r20, 0xC8	; 200
    2694:	52 e4       	ldi	r21, 0x42	; 66
    2696:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    269a:	6b 01       	movw	r12, r22
    269c:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    269e:	c7 01       	movw	r24, r14
    26a0:	b6 01       	movw	r22, r12
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	48 ec       	ldi	r20, 0xC8	; 200
    26a8:	52 e4       	ldi	r21, 0x42	; 66
    26aa:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    26ae:	6b 01       	movw	r12, r22
    26b0:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    26b2:	8d b7       	in	r24, 0x3d	; 61
    26b4:	9e b7       	in	r25, 0x3e	; 62
    26b6:	09 97       	sbiw	r24, 0x09	; 9
    26b8:	0f b6       	in	r0, 0x3f	; 63
    26ba:	f8 94       	cli
    26bc:	9e bf       	out	0x3e, r25	; 62
    26be:	0f be       	out	0x3f, r0	; 63
    26c0:	8d bf       	out	0x3d, r24	; 61
    26c2:	0d b7       	in	r16, 0x3d	; 61
    26c4:	1e b7       	in	r17, 0x3e	; 62
    26c6:	0f 5f       	subi	r16, 0xFF	; 255
    26c8:	1f 4f       	sbci	r17, 0xFF	; 255
    26ca:	c7 01       	movw	r24, r14
    26cc:	b6 01       	movw	r22, r12
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	48 ec       	ldi	r20, 0xC8	; 200
    26d4:	52 e4       	ldi	r21, 0x42	; 66
    26d6:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    26da:	20 e0       	ldi	r18, 0x00	; 0
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	48 ec       	ldi	r20, 0xC8	; 200
    26e0:	52 e4       	ldi	r21, 0x42	; 66
    26e2:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    26e6:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    26ea:	4b 01       	movw	r8, r22
    26ec:	5c 01       	movw	r10, r24
    26ee:	82 e3       	ldi	r24, 0x32	; 50
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	f8 01       	movw	r30, r16
    26f4:	91 83       	std	Z+1, r25	; 0x01
    26f6:	80 83       	st	Z, r24
    26f8:	c7 01       	movw	r24, r14
    26fa:	b6 01       	movw	r22, r12
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	48 ec       	ldi	r20, 0xC8	; 200
    2702:	52 ec       	ldi	r21, 0xC2	; 194
    2704:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	48 ec       	ldi	r20, 0xC8	; 200
    270e:	52 e4       	ldi	r21, 0x42	; 66
    2710:	0e 94 21 2d 	call	0x5a42	; 0x5a42 <__addsf3>
    2714:	0e 94 f6 2d 	call	0x5bec	; 0x5bec <__fixunssfsi>
    2718:	f8 01       	movw	r30, r16
    271a:	73 83       	std	Z+3, r23	; 0x03
    271c:	62 83       	std	Z+2, r22	; 0x02
    271e:	82 ec       	ldi	r24, 0xC2	; 194
    2720:	91 e0       	ldi	r25, 0x01	; 1
    2722:	95 83       	std	Z+5, r25	; 0x05
    2724:	84 83       	std	Z+4, r24	; 0x04
    2726:	16 82       	std	Z+6, r1	; 0x06
    2728:	10 86       	std	Z+8, r1	; 0x08
    272a:	17 82       	std	Z+7, r1	; 0x07
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	62 e0       	ldi	r22, 0x02	; 2
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	22 e3       	ldi	r18, 0x32	; 50
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	84 01       	movw	r16, r8
    2738:	92 ec       	ldi	r25, 0xC2	; 194
    273a:	e9 2e       	mov	r14, r25
    273c:	91 e0       	ldi	r25, 0x01	; 1
    273e:	f9 2e       	mov	r15, r25
    2740:	cc 24       	eor	r12, r12
    2742:	aa 24       	eor	r10, r10
    2744:	bb 24       	eor	r11, r11
    2746:	88 24       	eor	r8, r8
    2748:	83 94       	inc	r8
    274a:	0e 94 4a 1d 	call	0x3a94	; 0x3a94 <STEPPER_move>
    274e:	8d b7       	in	r24, 0x3d	; 61
    2750:	9e b7       	in	r25, 0x3e	; 62
    2752:	09 96       	adiw	r24, 0x09	; 9
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	9e bf       	out	0x3e, r25	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    275e:	82 2d       	mov	r24, r2
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
    2768:	df 90       	pop	r13
    276a:	cf 90       	pop	r12
    276c:	bf 90       	pop	r11
    276e:	af 90       	pop	r10
    2770:	9f 90       	pop	r9
    2772:	8f 90       	pop	r8
    2774:	7f 90       	pop	r7
    2776:	6f 90       	pop	r6
    2778:	5f 90       	pop	r5
    277a:	4f 90       	pop	r4
    277c:	3f 90       	pop	r3
    277e:	2f 90       	pop	r2
    2780:	08 95       	ret

00002782 <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    2782:	ff 92       	push	r15
    2784:	0f 93       	push	r16
    2786:	1f 93       	push	r17
    2788:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    278a:	08 2f       	mov	r16, r24
    278c:	06 95       	lsr	r16
    278e:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    2790:	23 e0       	ldi	r18, 0x03	; 3
    2792:	f2 2e       	mov	r15, r18
    2794:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(curMove){
    2796:	62 30       	cpi	r22, 0x02	; 2
    2798:	31 f0       	breq	.+12     	; 0x27a6 <shiftMap+0x24>
    279a:	63 30       	cpi	r22, 0x03	; 3
    279c:	a9 f0       	breq	.+42     	; 0x27c8 <shiftMap+0x46>
    279e:	61 30       	cpi	r22, 0x01	; 1
    27a0:	b1 f4       	brne	.+44     	; 0x27ce <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    27a2:	11 50       	subi	r17, 0x01	; 1
    27a4:	12 c0       	rjmp	.+36     	; 0x27ca <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    27a6:	41 30       	cpi	r20, 0x01	; 1
    27a8:	49 f0       	breq	.+18     	; 0x27bc <shiftMap+0x3a>
    27aa:	41 30       	cpi	r20, 0x01	; 1
    27ac:	28 f0       	brcs	.+10     	; 0x27b8 <shiftMap+0x36>
    27ae:	42 30       	cpi	r20, 0x02	; 2
    27b0:	39 f0       	breq	.+14     	; 0x27c0 <shiftMap+0x3e>
    27b2:	43 30       	cpi	r20, 0x03	; 3
    27b4:	b9 f4       	brne	.+46     	; 0x27e4 <shiftMap+0x62>
    27b6:	06 c0       	rjmp	.+12     	; 0x27c4 <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    27b8:	01 50       	subi	r16, 0x01	; 1
    27ba:	14 c0       	rjmp	.+40     	; 0x27e4 <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    27bc:	f3 94       	inc	r15
    27be:	12 c0       	rjmp	.+36     	; 0x27e4 <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    27c0:	0f 5f       	subi	r16, 0xFF	; 255
    27c2:	10 c0       	rjmp	.+32     	; 0x27e4 <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    27c4:	fa 94       	dec	r15
    27c6:	0e c0       	rjmp	.+28     	; 0x27e4 <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    27c8:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    27ca:	13 70       	andi	r17, 0x03	; 3
    27cc:	0b c0       	rjmp	.+22     	; 0x27e4 <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    27ce:	00 d0       	rcall	.+0      	; 0x27d0 <shiftMap+0x4e>
    27d0:	84 e4       	ldi	r24, 0x44	; 68
    27d2:	91 e0       	ldi	r25, 0x01	; 1
    27d4:	ed b7       	in	r30, 0x3d	; 61
    27d6:	fe b7       	in	r31, 0x3e	; 62
    27d8:	92 83       	std	Z+2, r25	; 0x02
    27da:	81 83       	std	Z+1, r24	; 0x01
    27dc:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    27e4:	10 93 7b 05 	sts	0x057B, r17
    27e8:	00 0f       	add	r16, r16
    27ea:	00 0f       	add	r16, r16
	return currentCell;
}
    27ec:	80 2f       	mov	r24, r16
    27ee:	8f 0d       	add	r24, r15
    27f0:	1f 91       	pop	r17
    27f2:	0f 91       	pop	r16
    27f4:	ff 90       	pop	r15
    27f6:	08 95       	ret

000027f8 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    27f8:	80 91 e7 04 	lds	r24, 0x04E7
    27fc:	80 fd       	sbrc	r24, 0
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	05 c0       	rjmp	.+10     	; 0x280e <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    2804:	83 fd       	sbrc	r24, 3
    2806:	02 c0       	rjmp	.+4      	; 0x280c <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    2808:	82 e0       	ldi	r24, 0x02	; 2
    280a:	01 c0       	rjmp	.+2      	; 0x280e <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    280c:	83 e0       	ldi	r24, 0x03	; 3
    280e:	80 93 10 07 	sts	0x0710, r24
	}
	
	switch(oldMove){
    2812:	80 91 11 07 	lds	r24, 0x0711
    2816:	81 30       	cpi	r24, 0x01	; 1
    2818:	29 f0       	breq	.+10     	; 0x2824 <planMap+0x2c>
    281a:	81 30       	cpi	r24, 0x01	; 1
    281c:	38 f0       	brcs	.+14     	; 0x282c <planMap+0x34>
    281e:	84 30       	cpi	r24, 0x04	; 4
    2820:	28 f4       	brcc	.+10     	; 0x282c <planMap+0x34>
    2822:	0f c0       	rjmp	.+30     	; 0x2842 <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	80 93 10 07 	sts	0x0710, r24
    282a:	0b c0       	rjmp	.+22     	; 0x2842 <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    282c:	00 d0       	rcall	.+0      	; 0x282e <planMap+0x36>
    282e:	8d e4       	ldi	r24, 0x4D	; 77
    2830:	91 e0       	ldi	r25, 0x01	; 1
    2832:	ed b7       	in	r30, 0x3d	; 61
    2834:	fe b7       	in	r31, 0x3e	; 62
    2836:	92 83       	std	Z+2, r25	; 0x02
    2838:	81 83       	std	Z+1, r24	; 0x01
    283a:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    2842:	80 91 10 07 	lds	r24, 0x0710
    2846:	80 93 11 07 	sts	0x0711, r24
}
    284a:	08 95       	ret

0000284c <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    284c:	80 91 e9 03 	lds	r24, 0x03E9
    2850:	85 30       	cpi	r24, 0x05	; 5
    2852:	80 f0       	brcs	.+32     	; 0x2874 <planGateway+0x28>
    2854:	ea ed       	ldi	r30, 0xDA	; 218
    2856:	f3 e0       	ldi	r31, 0x03	; 3
		for(i = 0; i<=(BRANCH_MAX-1); i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    2858:	81 81       	ldd	r24, Z+1	; 0x01
    285a:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    285c:	86 81       	ldd	r24, Z+6	; 0x06
    285e:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2860:	83 85       	ldd	r24, Z+11	; 0x0b
    2862:	82 87       	std	Z+10, r24	; 0x0a
    2864:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<=(BRANCH_MAX-1); i++){
    2866:	83 e0       	ldi	r24, 0x03	; 3
    2868:	ef 3d       	cpi	r30, 0xDF	; 223
    286a:	f8 07       	cpc	r31, r24
    286c:	a9 f7       	brne	.-22     	; 0x2858 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    286e:	84 e0       	ldi	r24, 0x04	; 4
    2870:	80 93 e9 03 	sts	0x03E9, r24
	}
	
	// Decide what the current move should be
	planMap();
    2874:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    2878:	e0 91 e9 03 	lds	r30, 0x03E9
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	e6 52       	subi	r30, 0x26	; 38
    2880:	fc 4f       	sbci	r31, 0xFC	; 252
    2882:	80 91 e7 04 	lds	r24, 0x04E7
    2886:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2888:	90 91 10 07 	lds	r25, 0x0710
    288c:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    288e:	80 91 7b 05 	lds	r24, 0x057B
    2892:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2894:	91 30       	cpi	r25, 0x01	; 1
    2896:	19 f0       	breq	.+6      	; 0x289e <planGateway+0x52>
    2898:	93 30       	cpi	r25, 0x03	; 3
    289a:	41 f4       	brne	.+16     	; 0x28ac <planGateway+0x60>
    289c:	02 c0       	rjmp	.+4      	; 0x28a2 <planGateway+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    289e:	81 50       	subi	r24, 0x01	; 1
    28a0:	01 c0       	rjmp	.+2      	; 0x28a4 <planGateway+0x58>
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    28a2:	8f 5f       	subi	r24, 0xFF	; 255
    28a4:	83 70       	andi	r24, 0x03	; 3
    28a6:	80 93 7b 05 	sts	0x057B, r24
    28aa:	0b c0       	rjmp	.+22     	; 0x28c2 <planGateway+0x76>
			break;
		default:
			LCD_printf("Whatz2?!");
    28ac:	00 d0       	rcall	.+0      	; 0x28ae <planGateway+0x62>
    28ae:	86 e5       	ldi	r24, 0x56	; 86
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	ed b7       	in	r30, 0x3d	; 61
    28b4:	fe b7       	in	r31, 0x3e	; 62
    28b6:	92 83       	std	Z+2, r25	; 0x02
    28b8:	81 83       	std	Z+1, r24	; 0x01
    28ba:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    28be:	0f 90       	pop	r0
    28c0:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    28c2:	80 91 e9 03 	lds	r24, 0x03E9
    28c6:	8f 5f       	subi	r24, 0xFF	; 255
    28c8:	80 93 e9 03 	sts	0x03E9, r24
}
    28cc:	08 95       	ret

000028ce <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    28ce:	8f 92       	push	r8
    28d0:	af 92       	push	r10
    28d2:	bf 92       	push	r11
    28d4:	cf 92       	push	r12
    28d6:	df 92       	push	r13
    28d8:	ef 92       	push	r14
    28da:	ff 92       	push	r15
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
	LCD_clear();
    28e0:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    28e4:	e0 91 e8 04 	lds	r30, 0x04E8
    28e8:	f0 e0       	ldi	r31, 0x00	; 0
    28ea:	e6 59       	subi	r30, 0x96	; 150
    28ec:	fa 4f       	sbci	r31, 0xFA	; 250
    28ee:	e0 81       	ld	r30, Z
    28f0:	e0 93 10 07 	sts	0x0710, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	e1 30       	cpi	r30, 0x01	; 1
    28f8:	09 f4       	brne	.+2      	; 0x28fc <moveWorld+0x2e>
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	e3 30       	cpi	r30, 0x03	; 3
    2900:	09 f4       	brne	.+2      	; 0x2904 <moveWorld+0x36>
    2902:	91 e0       	ldi	r25, 0x01	; 1
    2904:	89 2b       	or	r24, r25
    2906:	28 2f       	mov	r18, r24
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	80 91 11 07 	lds	r24, 0x0711
    2912:	82 30       	cpi	r24, 0x02	; 2
    2914:	11 f4       	brne	.+4      	; 0x291a <moveWorld+0x4c>
    2916:	41 e0       	ldi	r20, 0x01	; 1
    2918:	50 e0       	ldi	r21, 0x00	; 0
    291a:	24 23       	and	r18, r20
    291c:	35 23       	and	r19, r21
    291e:	23 2b       	or	r18, r19
    2920:	b9 f0       	breq	.+46     	; 0x2950 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2922:	60 e0       	ldi	r22, 0x00	; 0
    2924:	70 e0       	ldi	r23, 0x00	; 0
    2926:	80 e0       	ldi	r24, 0x00	; 0
    2928:	9f e4       	ldi	r25, 0x4F	; 79
    292a:	28 e4       	ldi	r18, 0x48	; 72
    292c:	31 ee       	ldi	r19, 0xE1	; 225
    292e:	46 eb       	ldi	r20, 0xB6	; 182
    2930:	51 e4       	ldi	r21, 0x41	; 65
    2932:	0f 2e       	mov	r0, r31
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	ef 2e       	mov	r14, r31
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	ff 2e       	mov	r15, r31
    293c:	f0 e2       	ldi	r31, 0x20	; 32
    293e:	0f 2f       	mov	r16, r31
    2940:	f1 e4       	ldi	r31, 0x41	; 65
    2942:	1f 2f       	mov	r17, r31
    2944:	f0 2d       	mov	r31, r0
    2946:	57 01       	movw	r10, r14
    2948:	68 01       	movw	r12, r16
    294a:	88 24       	eor	r8, r8
    294c:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    2950:	20 91 11 07 	lds	r18, 0x0711
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	21 30       	cpi	r18, 0x01	; 1
    2958:	09 f4       	brne	.+2      	; 0x295c <moveWorld+0x8e>
    295a:	81 e0       	ldi	r24, 0x01	; 1
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	23 30       	cpi	r18, 0x03	; 3
    2960:	09 f4       	brne	.+2      	; 0x2964 <moveWorld+0x96>
    2962:	91 e0       	ldi	r25, 0x01	; 1
    2964:	89 2b       	or	r24, r25
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	40 e0       	ldi	r20, 0x00	; 0
    296c:	50 e0       	ldi	r21, 0x00	; 0
    296e:	80 91 10 07 	lds	r24, 0x0710
    2972:	82 30       	cpi	r24, 0x02	; 2
    2974:	11 f4       	brne	.+4      	; 0x297a <moveWorld+0xac>
    2976:	41 e0       	ldi	r20, 0x01	; 1
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	24 23       	and	r18, r20
    297c:	35 23       	and	r19, r21
    297e:	23 2b       	or	r18, r19
    2980:	b9 f0       	breq	.+46     	; 0x29b0 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    2982:	60 e0       	ldi	r22, 0x00	; 0
    2984:	70 e0       	ldi	r23, 0x00	; 0
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	9f e4       	ldi	r25, 0x4F	; 79
    298a:	25 e3       	ldi	r18, 0x35	; 53
    298c:	3f ee       	ldi	r19, 0xEF	; 239
    298e:	40 ea       	ldi	r20, 0xA0	; 160
    2990:	51 e4       	ldi	r21, 0x41	; 65
    2992:	0f 2e       	mov	r0, r31
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	ef 2e       	mov	r14, r31
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	ff 2e       	mov	r15, r31
    299c:	f0 e2       	ldi	r31, 0x20	; 32
    299e:	0f 2f       	mov	r16, r31
    29a0:	f1 e4       	ldi	r31, 0x41	; 65
    29a2:	1f 2f       	mov	r17, r31
    29a4:	f0 2d       	mov	r31, r0
    29a6:	57 01       	movw	r10, r14
    29a8:	68 01       	movw	r12, r16
    29aa:	88 24       	eor	r8, r8
    29ac:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	switch(currentMove){
    29b0:	80 91 10 07 	lds	r24, 0x0710
    29b4:	82 30       	cpi	r24, 0x02	; 2
    29b6:	c1 f1       	breq	.+112    	; 0x2a28 <moveWorld+0x15a>
    29b8:	83 30       	cpi	r24, 0x03	; 3
    29ba:	09 f4       	brne	.+2      	; 0x29be <moveWorld+0xf0>
    29bc:	61 c0       	rjmp	.+194    	; 0x2a80 <moveWorld+0x1b2>
    29be:	81 30       	cpi	r24, 0x01	; 1
    29c0:	09 f0       	breq	.+2      	; 0x29c4 <moveWorld+0xf6>
    29c2:	9f c0       	rjmp	.+318    	; 0x2b02 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    29c4:	8d b7       	in	r24, 0x3d	; 61
    29c6:	9e b7       	in	r25, 0x3e	; 62
    29c8:	08 97       	sbiw	r24, 0x08	; 8
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	9e bf       	out	0x3e, r25	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	8d bf       	out	0x3d, r24	; 61
    29d4:	ed b7       	in	r30, 0x3d	; 61
    29d6:	fe b7       	in	r31, 0x3e	; 62
    29d8:	31 96       	adiw	r30, 0x01	; 1
    29da:	8f e5       	ldi	r24, 0x5F	; 95
    29dc:	91 e0       	ldi	r25, 0x01	; 1
    29de:	ad b7       	in	r26, 0x3d	; 61
    29e0:	be b7       	in	r27, 0x3e	; 62
    29e2:	12 96       	adiw	r26, 0x02	; 2
    29e4:	9c 93       	st	X, r25
    29e6:	8e 93       	st	-X, r24
    29e8:	11 97       	sbiw	r26, 0x01	; 1
    29ea:	80 91 e8 04 	lds	r24, 0x04E8
    29ee:	82 83       	std	Z+2, r24	; 0x02
    29f0:	13 82       	std	Z+3, r1	; 0x03
    29f2:	80 91 e7 04 	lds	r24, 0x04E7
    29f6:	84 83       	std	Z+4, r24	; 0x04
    29f8:	15 82       	std	Z+5, r1	; 0x05
    29fa:	80 91 ed 04 	lds	r24, 0x04ED
    29fe:	86 83       	std	Z+6, r24	; 0x06
    2a00:	17 82       	std	Z+7, r1	; 0x07
    2a02:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2a06:	ed b7       	in	r30, 0x3d	; 61
    2a08:	fe b7       	in	r31, 0x3e	; 62
    2a0a:	38 96       	adiw	r30, 0x08	; 8
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	fe bf       	out	0x3e, r31	; 62
    2a12:	0f be       	out	0x3f, r0	; 63
    2a14:	ed bf       	out	0x3d, r30	; 61
    2a16:	60 e0       	ldi	r22, 0x00	; 0
    2a18:	70 e0       	ldi	r23, 0x00	; 0
    2a1a:	80 e0       	ldi	r24, 0x00	; 0
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4c e8       	ldi	r20, 0x8C	; 140
    2a24:	51 ec       	ldi	r21, 0xC1	; 193
    2a26:	5d c0       	rjmp	.+186    	; 0x2ae2 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2a28:	8d b7       	in	r24, 0x3d	; 61
    2a2a:	9e b7       	in	r25, 0x3e	; 62
    2a2c:	08 97       	sbiw	r24, 0x08	; 8
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	9e bf       	out	0x3e, r25	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	8d bf       	out	0x3d, r24	; 61
    2a38:	ed b7       	in	r30, 0x3d	; 61
    2a3a:	fe b7       	in	r31, 0x3e	; 62
    2a3c:	31 96       	adiw	r30, 0x01	; 1
    2a3e:	8a e8       	ldi	r24, 0x8A	; 138
    2a40:	91 e0       	ldi	r25, 0x01	; 1
    2a42:	ad b7       	in	r26, 0x3d	; 61
    2a44:	be b7       	in	r27, 0x3e	; 62
    2a46:	12 96       	adiw	r26, 0x02	; 2
    2a48:	9c 93       	st	X, r25
    2a4a:	8e 93       	st	-X, r24
    2a4c:	11 97       	sbiw	r26, 0x01	; 1
    2a4e:	80 91 e8 04 	lds	r24, 0x04E8
    2a52:	82 83       	std	Z+2, r24	; 0x02
    2a54:	13 82       	std	Z+3, r1	; 0x03
    2a56:	80 91 e7 04 	lds	r24, 0x04E7
    2a5a:	84 83       	std	Z+4, r24	; 0x04
    2a5c:	15 82       	std	Z+5, r1	; 0x05
    2a5e:	80 91 ed 04 	lds	r24, 0x04ED
    2a62:	86 83       	std	Z+6, r24	; 0x06
    2a64:	17 82       	std	Z+7, r1	; 0x07
    2a66:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWallOld();
    2a6a:	ed b7       	in	r30, 0x3d	; 61
    2a6c:	fe b7       	in	r31, 0x3e	; 62
    2a6e:	38 96       	adiw	r30, 0x08	; 8
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	fe bf       	out	0x3e, r31	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	ed bf       	out	0x3d, r30	; 61
    2a7a:	0e 94 40 12 	call	0x2480	; 0x2480 <moveWallOld>
    2a7e:	53 c0       	rjmp	.+166    	; 0x2b26 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2a80:	8d b7       	in	r24, 0x3d	; 61
    2a82:	9e b7       	in	r25, 0x3e	; 62
    2a84:	08 97       	sbiw	r24, 0x08	; 8
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	9e bf       	out	0x3e, r25	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	8d bf       	out	0x3d, r24	; 61
    2a90:	ed b7       	in	r30, 0x3d	; 61
    2a92:	fe b7       	in	r31, 0x3e	; 62
    2a94:	31 96       	adiw	r30, 0x01	; 1
    2a96:	88 eb       	ldi	r24, 0xB8	; 184
    2a98:	91 e0       	ldi	r25, 0x01	; 1
    2a9a:	ad b7       	in	r26, 0x3d	; 61
    2a9c:	be b7       	in	r27, 0x3e	; 62
    2a9e:	12 96       	adiw	r26, 0x02	; 2
    2aa0:	9c 93       	st	X, r25
    2aa2:	8e 93       	st	-X, r24
    2aa4:	11 97       	sbiw	r26, 0x01	; 1
    2aa6:	80 91 e8 04 	lds	r24, 0x04E8
    2aaa:	82 83       	std	Z+2, r24	; 0x02
    2aac:	13 82       	std	Z+3, r1	; 0x03
    2aae:	80 91 e7 04 	lds	r24, 0x04E7
    2ab2:	84 83       	std	Z+4, r24	; 0x04
    2ab4:	15 82       	std	Z+5, r1	; 0x05
    2ab6:	80 91 ed 04 	lds	r24, 0x04ED
    2aba:	86 83       	std	Z+6, r24	; 0x06
    2abc:	17 82       	std	Z+7, r1	; 0x07
    2abe:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2ac2:	ed b7       	in	r30, 0x3d	; 61
    2ac4:	fe b7       	in	r31, 0x3e	; 62
    2ac6:	38 96       	adiw	r30, 0x08	; 8
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	fe bf       	out	0x3e, r31	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	ed bf       	out	0x3d, r30	; 61
    2ad2:	60 e0       	ldi	r22, 0x00	; 0
    2ad4:	70 e0       	ldi	r23, 0x00	; 0
    2ad6:	80 e0       	ldi	r24, 0x00	; 0
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	4c e8       	ldi	r20, 0x8C	; 140
    2ae0:	51 e4       	ldi	r21, 0x41	; 65
    2ae2:	0f 2e       	mov	r0, r31
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	ef 2e       	mov	r14, r31
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	ff 2e       	mov	r15, r31
    2aec:	f0 e2       	ldi	r31, 0x20	; 32
    2aee:	0f 2f       	mov	r16, r31
    2af0:	f1 e4       	ldi	r31, 0x41	; 65
    2af2:	1f 2f       	mov	r17, r31
    2af4:	f0 2d       	mov	r31, r0
    2af6:	57 01       	movw	r10, r14
    2af8:	68 01       	movw	r12, r16
    2afa:	88 24       	eor	r8, r8
    2afc:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2b00:	12 c0       	rjmp	.+36     	; 0x2b26 <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <moveWorld+0x236>
    2b04:	84 ee       	ldi	r24, 0xE4	; 228
    2b06:	91 e0       	ldi	r25, 0x01	; 1
    2b08:	ad b7       	in	r26, 0x3d	; 61
    2b0a:	be b7       	in	r27, 0x3e	; 62
    2b0c:	12 96       	adiw	r26, 0x02	; 2
    2b0e:	9c 93       	st	X, r25
    2b10:	8e 93       	st	-X, r24
    2b12:	11 97       	sbiw	r26, 0x01	; 1
    2b14:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	82 e0       	ldi	r24, 0x02	; 2
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <STEPPER_stop>
    2b24:	ff cf       	rjmp	.-2      	; 0x2b24 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2b26:	80 91 10 07 	lds	r24, 0x0710
    2b2a:	80 93 11 07 	sts	0x0711, r24
	return 1;
}
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	ff 90       	pop	r15
    2b36:	ef 90       	pop	r14
    2b38:	df 90       	pop	r13
    2b3a:	cf 90       	pop	r12
    2b3c:	bf 90       	pop	r11
    2b3e:	af 90       	pop	r10
    2b40:	8f 90       	pop	r8
    2b42:	08 95       	ret

00002b44 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	ff 24       	eor	r15, r15
    2b50:	f3 94       	inc	r15
    2b52:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2b54:	cd ee       	ldi	r28, 0xED	; 237
    2b56:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    2b58:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    2b5c:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    2b5e:	81 30       	cpi	r24, 0x01	; 1
    2b60:	21 f0       	breq	.+8      	; 0x2b6a <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2b62:	82 30       	cpi	r24, 0x02	; 2
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    2b66:	83 30       	cpi	r24, 0x03	; 3
    2b68:	39 f4       	brne	.+14     	; 0x2b78 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    2b6a:	e1 2f       	mov	r30, r17
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	e6 59       	subi	r30, 0x96	; 150
    2b70:	fa 4f       	sbci	r31, 0xFA	; 250
    2b72:	00 83       	st	Z, r16
			i++;
    2b74:	1f 5f       	subi	r17, 0xFF	; 255
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <movesInput+0x38>
		}

		if (btnHolder != 0){
    2b78:	88 23       	and	r24, r24
    2b7a:	21 f1       	breq	.+72     	; 0x2bc4 <movesInput+0x80>
			LCD_clear();
    2b7c:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2b80:	8d b7       	in	r24, 0x3d	; 61
    2b82:	9e b7       	in	r25, 0x3e	; 62
    2b84:	08 97       	sbiw	r24, 0x08	; 8
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	9e bf       	out	0x3e, r25	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	8d bf       	out	0x3d, r24	; 61
    2b90:	ed b7       	in	r30, 0x3d	; 61
    2b92:	fe b7       	in	r31, 0x3e	; 62
    2b94:	31 96       	adiw	r30, 0x01	; 1
    2b96:	ad b7       	in	r26, 0x3d	; 61
    2b98:	be b7       	in	r27, 0x3e	; 62
    2b9a:	12 96       	adiw	r26, 0x02	; 2
    2b9c:	dc 93       	st	X, r29
    2b9e:	ce 93       	st	-X, r28
    2ba0:	11 97       	sbiw	r26, 0x01	; 1
    2ba2:	f2 82       	std	Z+2, r15	; 0x02
    2ba4:	13 82       	std	Z+3, r1	; 0x03
    2ba6:	04 83       	std	Z+4, r16	; 0x04
    2ba8:	15 82       	std	Z+5, r1	; 0x05
    2baa:	16 83       	std	Z+6, r17	; 0x06
    2bac:	17 82       	std	Z+7, r1	; 0x07
    2bae:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    2bb2:	f0 2e       	mov	r15, r16
    2bb4:	8d b7       	in	r24, 0x3d	; 61
    2bb6:	9e b7       	in	r25, 0x3e	; 62
    2bb8:	08 96       	adiw	r24, 0x08	; 8
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	9e bf       	out	0x3e, r25	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2bc4:	84 ef       	ldi	r24, 0xF4	; 244
    2bc6:	91 e0       	ldi	r25, 0x01	; 1
    2bc8:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    2bcc:	1b 30       	cpi	r17, 0x0B	; 11
    2bce:	20 f2       	brcs	.-120    	; 0x2b58 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    2bd0:	1f 5f       	subi	r17, 0xFF	; 255
    2bd2:	e1 2f       	mov	r30, r17
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	e6 59       	subi	r30, 0x96	; 150
    2bd8:	fa 4f       	sbci	r31, 0xFA	; 250
    2bda:	84 e0       	ldi	r24, 0x04	; 4
    2bdc:	80 83       	st	Z, r24
}
    2bde:	df 91       	pop	r29
    2be0:	cf 91       	pop	r28
    2be2:	1f 91       	pop	r17
    2be4:	0f 91       	pop	r16
    2be6:	ff 90       	pop	r15
    2be8:	08 95       	ret

00002bea <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    2bea:	1f 93       	push	r17
    2bec:	cf 93       	push	r28
    2bee:	df 93       	push	r29
    2bf0:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2bf2:	ce e1       	ldi	r28, 0x1E	; 30
    2bf4:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    2bf6:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2bfa:	81 30       	cpi	r24, 0x01	; 1
    2bfc:	21 f4       	brne	.+8      	; 0x2c06 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    2bfe:	80 91 7c 06 	lds	r24, 0x067C
    2c02:	88 0f       	add	r24, r24
    2c04:	06 c0       	rjmp	.+12     	; 0x2c12 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2c06:	82 30       	cpi	r24, 0x02	; 2
    2c08:	39 f4       	brne	.+14     	; 0x2c18 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    2c0a:	80 91 7c 06 	lds	r24, 0x067C
    2c0e:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    2c10:	8f 5f       	subi	r24, 0xFF	; 255
    2c12:	80 93 7c 06 	sts	0x067C, r24
			i++;
    2c16:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    2c18:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <worldInput+0x34>
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <worldInput+0x36>
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <worldInput+0x38>
    2c22:	ed b7       	in	r30, 0x3d	; 61
    2c24:	fe b7       	in	r31, 0x3e	; 62
    2c26:	31 96       	adiw	r30, 0x01	; 1
    2c28:	ad b7       	in	r26, 0x3d	; 61
    2c2a:	be b7       	in	r27, 0x3e	; 62
    2c2c:	12 96       	adiw	r26, 0x02	; 2
    2c2e:	dc 93       	st	X, r29
    2c30:	ce 93       	st	-X, r28
    2c32:	11 97       	sbiw	r26, 0x01	; 1
    2c34:	80 91 7c 06 	lds	r24, 0x067C
    2c38:	82 83       	std	Z+2, r24	; 0x02
    2c3a:	13 82       	std	Z+3, r1	; 0x03
    2c3c:	14 83       	std	Z+4, r17	; 0x04
    2c3e:	15 82       	std	Z+5, r1	; 0x05
    2c40:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2c44:	8d b7       	in	r24, 0x3d	; 61
    2c46:	9e b7       	in	r25, 0x3e	; 62
    2c48:	06 96       	adiw	r24, 0x06	; 6
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	9e bf       	out	0x3e, r25	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	8d bf       	out	0x3d, r24	; 61
    2c54:	84 ef       	ldi	r24, 0xF4	; 244
    2c56:	91 e0       	ldi	r25, 0x01	; 1
    2c58:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    2c5c:	14 30       	cpi	r17, 0x04	; 4
    2c5e:	58 f2       	brcs	.-106    	; 0x2bf6 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    2c60:	80 91 7c 06 	lds	r24, 0x067C
    2c64:	80 93 7d 06 	sts	0x067D, r24
}
    2c68:	df 91       	pop	r29
    2c6a:	cf 91       	pop	r28
    2c6c:	1f 91       	pop	r17
    2c6e:	08 95       	ret

00002c70 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    2c70:	1f 93       	push	r17
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2c78:	c6 e4       	ldi	r28, 0x46	; 70
    2c7a:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    2c7c:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2c80:	81 30       	cpi	r24, 0x01	; 1
    2c82:	21 f4       	brne	.+8      	; 0x2c8c <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    2c84:	80 91 7b 05 	lds	r24, 0x057B
    2c88:	88 0f       	add	r24, r24
    2c8a:	06 c0       	rjmp	.+12     	; 0x2c98 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2c8c:	82 30       	cpi	r24, 0x02	; 2
    2c8e:	41 f4       	brne	.+16     	; 0x2ca0 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    2c90:	80 91 7b 05 	lds	r24, 0x057B
    2c94:	88 0f       	add	r24, r24
			currentOrientation += 1;
    2c96:	8f 5f       	subi	r24, 0xFF	; 255
    2c98:	80 93 7b 05 	sts	0x057B, r24
			i++;
    2c9c:	1f 5f       	subi	r17, 0xFF	; 255
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    2ca0:	88 23       	and	r24, r24
    2ca2:	f1 f0       	breq	.+60     	; 0x2ce0 <orientationInput+0x70>
			LCD_clear();
    2ca4:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2ca8:	00 d0       	rcall	.+0      	; 0x2caa <orientationInput+0x3a>
    2caa:	00 d0       	rcall	.+0      	; 0x2cac <orientationInput+0x3c>
    2cac:	00 d0       	rcall	.+0      	; 0x2cae <orientationInput+0x3e>
    2cae:	ed b7       	in	r30, 0x3d	; 61
    2cb0:	fe b7       	in	r31, 0x3e	; 62
    2cb2:	31 96       	adiw	r30, 0x01	; 1
    2cb4:	ad b7       	in	r26, 0x3d	; 61
    2cb6:	be b7       	in	r27, 0x3e	; 62
    2cb8:	12 96       	adiw	r26, 0x02	; 2
    2cba:	dc 93       	st	X, r29
    2cbc:	ce 93       	st	-X, r28
    2cbe:	11 97       	sbiw	r26, 0x01	; 1
    2cc0:	80 91 7b 05 	lds	r24, 0x057B
    2cc4:	82 83       	std	Z+2, r24	; 0x02
    2cc6:	13 82       	std	Z+3, r1	; 0x03
    2cc8:	14 83       	std	Z+4, r17	; 0x04
    2cca:	15 82       	std	Z+5, r1	; 0x05
    2ccc:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    2cd0:	8d b7       	in	r24, 0x3d	; 61
    2cd2:	9e b7       	in	r25, 0x3e	; 62
    2cd4:	06 96       	adiw	r24, 0x06	; 6
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	9e bf       	out	0x3e, r25	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2ce0:	84 ef       	ldi	r24, 0xF4	; 244
    2ce2:	91 e0       	ldi	r25, 0x01	; 1
    2ce4:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    2ce8:	12 30       	cpi	r17, 0x02	; 2
    2cea:	40 f2       	brcs	.-112    	; 0x2c7c <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    2cec:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
	switch(currentOrientation){
    2cf0:	80 91 7b 05 	lds	r24, 0x057B
    2cf4:	81 30       	cpi	r24, 0x01	; 1
    2cf6:	51 f0       	breq	.+20     	; 0x2d0c <orientationInput+0x9c>
    2cf8:	81 30       	cpi	r24, 0x01	; 1
    2cfa:	28 f0       	brcs	.+10     	; 0x2d06 <orientationInput+0x96>
    2cfc:	82 30       	cpi	r24, 0x02	; 2
    2cfe:	49 f0       	breq	.+18     	; 0x2d12 <orientationInput+0xa2>
    2d00:	83 30       	cpi	r24, 0x03	; 3
    2d02:	71 f4       	brne	.+28     	; 0x2d20 <orientationInput+0xb0>
    2d04:	09 c0       	rjmp	.+18     	; 0x2d18 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    2d06:	85 e7       	ldi	r24, 0x75	; 117
    2d08:	92 e0       	ldi	r25, 0x02	; 2
    2d0a:	08 c0       	rjmp	.+16     	; 0x2d1c <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    2d0c:	87 e9       	ldi	r24, 0x97	; 151
    2d0e:	92 e0       	ldi	r25, 0x02	; 2
    2d10:	05 c0       	rjmp	.+10     	; 0x2d1c <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    2d12:	88 eb       	ldi	r24, 0xB8	; 184
    2d14:	92 e0       	ldi	r25, 0x02	; 2
    2d16:	02 c0       	rjmp	.+4      	; 0x2d1c <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    2d18:	8a ed       	ldi	r24, 0xDA	; 218
    2d1a:	92 e0       	ldi	r25, 0x02	; 2
    2d1c:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    2d20:	80 91 7b 05 	lds	r24, 0x057B
    2d24:	80 93 7a 05 	sts	0x057A, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    2d28:	84 ef       	ldi	r24, 0xF4	; 244
    2d2a:	91 e0       	ldi	r25, 0x01	; 1
    2d2c:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
}
    2d30:	df 91       	pop	r29
    2d32:	cf 91       	pop	r28
    2d34:	1f 91       	pop	r17
    2d36:	08 95       	ret

00002d38 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2d38:	cf 92       	push	r12
    2d3a:	df 92       	push	r13
    2d3c:	ef 92       	push	r14
    2d3e:	ff 92       	push	r15
    2d40:	0f 93       	push	r16
    2d42:	1f 93       	push	r17
    2d44:	df 93       	push	r29
    2d46:	cf 93       	push	r28
    2d48:	0f 92       	push	r0
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2d4e:	80 91 7c 06 	lds	r24, 0x067C
    2d52:	f8 2e       	mov	r15, r24
    2d54:	f6 94       	lsr	r15
    2d56:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2d58:	98 2f       	mov	r25, r24
    2d5a:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2d5c:	00 91 7b 05 	lds	r16, 0x057B
    2d60:	cc 24       	eor	r12, r12
    2d62:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2d64:	f6 01       	movw	r30, r12
    2d66:	e6 59       	subi	r30, 0x96	; 150
    2d68:	fa 4f       	sbci	r31, 0xFA	; 250
    2d6a:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2d6c:	ef 2d       	mov	r30, r15
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	ee 0f       	add	r30, r30
    2d72:	ff 1f       	adc	r31, r31
    2d74:	ee 0f       	add	r30, r30
    2d76:	ff 1f       	adc	r31, r31
    2d78:	e9 0f       	add	r30, r25
    2d7a:	f1 1d       	adc	r31, r1
    2d7c:	e1 59       	subi	r30, 0x91	; 145
    2d7e:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2d80:	80 81       	ld	r24, Z
    2d82:	60 2f       	mov	r22, r16
    2d84:	41 e0       	ldi	r20, 0x01	; 1
    2d86:	99 83       	std	Y+1, r25	; 0x01
    2d88:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2d8c:	f6 01       	movw	r30, r12
    2d8e:	e0 50       	subi	r30, 0x00	; 0
    2d90:	f9 4f       	sbci	r31, 0xF9	; 249
    2d92:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2d94:	99 81       	ldd	r25, Y+1	; 0x01
    2d96:	12 30       	cpi	r17, 0x02	; 2
    2d98:	89 f4       	brne	.+34     	; 0x2dbc <getGateways+0x84>
			switch(curOrient){
    2d9a:	01 30       	cpi	r16, 0x01	; 1
    2d9c:	49 f0       	breq	.+18     	; 0x2db0 <getGateways+0x78>
    2d9e:	01 30       	cpi	r16, 0x01	; 1
    2da0:	28 f0       	brcs	.+10     	; 0x2dac <getGateways+0x74>
    2da2:	02 30       	cpi	r16, 0x02	; 2
    2da4:	39 f0       	breq	.+14     	; 0x2db4 <getGateways+0x7c>
    2da6:	03 30       	cpi	r16, 0x03	; 3
    2da8:	89 f4       	brne	.+34     	; 0x2dcc <getGateways+0x94>
    2daa:	06 c0       	rjmp	.+12     	; 0x2db8 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    2dac:	fa 94       	dec	r15
    2dae:	0e c0       	rjmp	.+28     	; 0x2dcc <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    2db0:	9f 5f       	subi	r25, 0xFF	; 255
    2db2:	0c c0       	rjmp	.+24     	; 0x2dcc <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    2db4:	f3 94       	inc	r15
    2db6:	0a c0       	rjmp	.+20     	; 0x2dcc <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    2db8:	91 50       	subi	r25, 0x01	; 1
    2dba:	08 c0       	rjmp	.+16     	; 0x2dcc <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    2dbc:	13 30       	cpi	r17, 0x03	; 3
    2dbe:	11 f4       	brne	.+4      	; 0x2dc4 <getGateways+0x8c>
			curOrient++;
    2dc0:	0f 5f       	subi	r16, 0xFF	; 255
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    2dc4:	11 30       	cpi	r17, 0x01	; 1
    2dc6:	11 f4       	brne	.+4      	; 0x2dcc <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    2dc8:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    2dca:	03 70       	andi	r16, 0x03	; 3
    2dcc:	08 94       	sec
    2dce:	c1 1c       	adc	r12, r1
    2dd0:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2dd2:	8d e0       	ldi	r24, 0x0D	; 13
    2dd4:	c8 16       	cp	r12, r24
    2dd6:	d1 04       	cpc	r13, r1
    2dd8:	29 f6       	brne	.-118    	; 0x2d64 <getGateways+0x2c>
    2dda:	cc 24       	eor	r12, r12
    2ddc:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2dde:	9b ef       	ldi	r25, 0xFB	; 251
    2de0:	e9 2e       	mov	r14, r25
    2de2:	92 e0       	ldi	r25, 0x02	; 2
    2de4:	f9 2e       	mov	r15, r25
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2de6:	f6 01       	movw	r30, r12
    2de8:	e0 50       	subi	r30, 0x00	; 0
    2dea:	f9 4f       	sbci	r31, 0xF9	; 249
    2dec:	00 81       	ld	r16, Z
		LCD_clear();
    2dee:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2df2:	20 2f       	mov	r18, r16
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	ad b7       	in	r26, 0x3d	; 61
    2df8:	be b7       	in	r27, 0x3e	; 62
    2dfa:	54 97       	sbiw	r26, 0x14	; 20
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	be bf       	out	0x3e, r27	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	ad bf       	out	0x3d, r26	; 61
    2e06:	ed b7       	in	r30, 0x3d	; 61
    2e08:	fe b7       	in	r31, 0x3e	; 62
    2e0a:	31 96       	adiw	r30, 0x01	; 1
    2e0c:	12 96       	adiw	r26, 0x02	; 2
    2e0e:	fc 92       	st	X, r15
    2e10:	ee 92       	st	-X, r14
    2e12:	11 97       	sbiw	r26, 0x01	; 1
    2e14:	d3 82       	std	Z+3, r13	; 0x03
    2e16:	c2 82       	std	Z+2, r12	; 0x02
    2e18:	11 27       	eor	r17, r17
    2e1a:	07 fd       	sbrc	r16, 7
    2e1c:	10 95       	com	r17
    2e1e:	00 27       	eor	r16, r16
    2e20:	11 0f       	add	r17, r17
    2e22:	00 1f       	adc	r16, r16
    2e24:	11 27       	eor	r17, r17
    2e26:	15 83       	std	Z+5, r17	; 0x05
    2e28:	04 83       	std	Z+4, r16	; 0x04
    2e2a:	c9 01       	movw	r24, r18
    2e2c:	b6 e0       	ldi	r27, 0x06	; 6
    2e2e:	96 95       	lsr	r25
    2e30:	87 95       	ror	r24
    2e32:	ba 95       	dec	r27
    2e34:	e1 f7       	brne	.-8      	; 0x2e2e <getGateways+0xf6>
    2e36:	81 70       	andi	r24, 0x01	; 1
    2e38:	90 70       	andi	r25, 0x00	; 0
    2e3a:	97 83       	std	Z+7, r25	; 0x07
    2e3c:	86 83       	std	Z+6, r24	; 0x06
    2e3e:	c9 01       	movw	r24, r18
    2e40:	a5 e0       	ldi	r26, 0x05	; 5
    2e42:	96 95       	lsr	r25
    2e44:	87 95       	ror	r24
    2e46:	aa 95       	dec	r26
    2e48:	e1 f7       	brne	.-8      	; 0x2e42 <getGateways+0x10a>
    2e4a:	81 70       	andi	r24, 0x01	; 1
    2e4c:	90 70       	andi	r25, 0x00	; 0
    2e4e:	91 87       	std	Z+9, r25	; 0x09
    2e50:	80 87       	std	Z+8, r24	; 0x08
    2e52:	c9 01       	movw	r24, r18
    2e54:	74 e0       	ldi	r23, 0x04	; 4
    2e56:	96 95       	lsr	r25
    2e58:	87 95       	ror	r24
    2e5a:	7a 95       	dec	r23
    2e5c:	e1 f7       	brne	.-8      	; 0x2e56 <getGateways+0x11e>
    2e5e:	81 70       	andi	r24, 0x01	; 1
    2e60:	90 70       	andi	r25, 0x00	; 0
    2e62:	93 87       	std	Z+11, r25	; 0x0b
    2e64:	82 87       	std	Z+10, r24	; 0x0a
    2e66:	c9 01       	movw	r24, r18
    2e68:	63 e0       	ldi	r22, 0x03	; 3
    2e6a:	96 95       	lsr	r25
    2e6c:	87 95       	ror	r24
    2e6e:	6a 95       	dec	r22
    2e70:	e1 f7       	brne	.-8      	; 0x2e6a <getGateways+0x132>
    2e72:	81 70       	andi	r24, 0x01	; 1
    2e74:	90 70       	andi	r25, 0x00	; 0
    2e76:	95 87       	std	Z+13, r25	; 0x0d
    2e78:	84 87       	std	Z+12, r24	; 0x0c
    2e7a:	c9 01       	movw	r24, r18
    2e7c:	96 95       	lsr	r25
    2e7e:	87 95       	ror	r24
    2e80:	96 95       	lsr	r25
    2e82:	87 95       	ror	r24
    2e84:	81 70       	andi	r24, 0x01	; 1
    2e86:	90 70       	andi	r25, 0x00	; 0
    2e88:	97 87       	std	Z+15, r25	; 0x0f
    2e8a:	86 87       	std	Z+14, r24	; 0x0e
    2e8c:	c9 01       	movw	r24, r18
    2e8e:	96 95       	lsr	r25
    2e90:	87 95       	ror	r24
    2e92:	81 70       	andi	r24, 0x01	; 1
    2e94:	90 70       	andi	r25, 0x00	; 0
    2e96:	91 8b       	std	Z+17, r25	; 0x11
    2e98:	80 8b       	std	Z+16, r24	; 0x10
    2e9a:	21 70       	andi	r18, 0x01	; 1
    2e9c:	30 70       	andi	r19, 0x00	; 0
    2e9e:	33 8b       	std	Z+19, r19	; 0x13
    2ea0:	22 8b       	std	Z+18, r18	; 0x12
    2ea2:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    2ea6:	ed b7       	in	r30, 0x3d	; 61
    2ea8:	fe b7       	in	r31, 0x3e	; 62
    2eaa:	74 96       	adiw	r30, 0x14	; 20
    2eac:	0f b6       	in	r0, 0x3f	; 63
    2eae:	f8 94       	cli
    2eb0:	fe bf       	out	0x3e, r31	; 62
    2eb2:	0f be       	out	0x3f, r0	; 63
    2eb4:	ed bf       	out	0x3d, r30	; 61
    2eb6:	88 ee       	ldi	r24, 0xE8	; 232
    2eb8:	93 e0       	ldi	r25, 0x03	; 3
    2eba:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
    2ebe:	08 94       	sec
    2ec0:	c1 1c       	adc	r12, r1
    2ec2:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2ec4:	fd e0       	ldi	r31, 0x0D	; 13
    2ec6:	cf 16       	cp	r12, r31
    2ec8:	d1 04       	cpc	r13, r1
    2eca:	09 f0       	breq	.+2      	; 0x2ece <getGateways+0x196>
    2ecc:	8c cf       	rjmp	.-232    	; 0x2de6 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	1f 91       	pop	r17
    2ed6:	0f 91       	pop	r16
    2ed8:	ff 90       	pop	r15
    2eda:	ef 90       	pop	r14
    2edc:	df 90       	pop	r13
    2ede:	cf 90       	pop	r12
    2ee0:	08 95       	ret

00002ee2 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    2ee2:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    2ee4:	10 91 7c 06 	lds	r17, 0x067C
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    2ee8:	80 91 e7 04 	lds	r24, 0x04E7
    2eec:	60 91 7b 05 	lds	r22, 0x057B
    2ef0:	40 e0       	ldi	r20, 0x00	; 0
    2ef2:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    2ef6:	e1 2f       	mov	r30, r17
    2ef8:	e6 95       	lsr	r30
    2efa:	e6 95       	lsr	r30
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	ee 0f       	add	r30, r30
    2f00:	ff 1f       	adc	r31, r31
    2f02:	ee 0f       	add	r30, r30
    2f04:	ff 1f       	adc	r31, r31
    2f06:	13 70       	andi	r17, 0x03	; 3
    2f08:	e1 0f       	add	r30, r17
    2f0a:	f1 1d       	adc	r31, r1
    2f0c:	e1 59       	subi	r30, 0x91	; 145
    2f0e:	fc 4f       	sbci	r31, 0xFC	; 252
    2f10:	80 83       	st	Z, r24
}
    2f12:	1f 91       	pop	r17
    2f14:	08 95       	ret

00002f16 <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	06 2f       	mov	r16, r22
    2f22:	14 2f       	mov	r17, r20
    2f24:	ff 24       	eor	r15, r15
    2f26:	2e c0       	rjmp	.+92     	; 0x2f84 <matchBranch+0x6e>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    2f28:	05 30       	cpi	r16, 0x05	; 5
    2f2a:	90 f5       	brcc	.+100    	; 0x2f90 <matchBranch+0x7a>
    2f2c:	15 30       	cpi	r17, 0x05	; 5
    2f2e:	80 f5       	brcc	.+96     	; 0x2f90 <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    2f30:	ef 2d       	mov	r30, r15
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	e6 52       	subi	r30, 0x26	; 38
    2f36:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    2f38:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    2f3a:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    2f3c:	80 81       	ld	r24, Z
    2f3e:	6e 2d       	mov	r22, r14
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    2f46:	e0 2f       	mov	r30, r16
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	ee 0f       	add	r30, r30
    2f4c:	ff 1f       	adc	r31, r31
    2f4e:	ee 0f       	add	r30, r30
    2f50:	ff 1f       	adc	r31, r31
    2f52:	e1 0f       	add	r30, r17
    2f54:	f1 1d       	adc	r31, r1
    2f56:	e1 59       	subi	r30, 0x91	; 145
    2f58:	fc 4f       	sbci	r31, 0xFC	; 252
    2f5a:	90 81       	ld	r25, Z
    2f5c:	89 17       	cp	r24, r25
    2f5e:	c1 f4       	brne	.+48     	; 0x2f90 <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		currentCellWorld = (curRow << 2) + curCol;
    2f60:	80 2f       	mov	r24, r16
    2f62:	88 0f       	add	r24, r24
    2f64:	88 0f       	add	r24, r24
    2f66:	81 0f       	add	r24, r17
    2f68:	80 93 7c 06 	sts	0x067C, r24
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		currentCellWorld = shiftMap(currentCellWorld, curMove, curOrnt);
    2f6c:	6d 2d       	mov	r22, r13
    2f6e:	4e 2d       	mov	r20, r14
    2f70:	0e 94 c1 13 	call	0x2782	; 0x2782 <shiftMap>
    2f74:	80 93 7c 06 	sts	0x067C, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = currentCellWorld >> 2;
    2f78:	08 2f       	mov	r16, r24
    2f7a:	06 95       	lsr	r16
    2f7c:	06 95       	lsr	r16
		curCol = currentCellWorld & 0b0011;
    2f7e:	18 2f       	mov	r17, r24
    2f80:	13 70       	andi	r17, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    2f82:	f3 94       	inc	r15
    2f84:	80 91 e9 03 	lds	r24, 0x03E9
    2f88:	f8 16       	cp	r15, r24
    2f8a:	70 f2       	brcs	.-100    	; 0x2f28 <matchBranch+0x12>
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	01 c0       	rjmp	.+2      	; 0x2f92 <matchBranch+0x7c>
    2f90:	80 e0       	ldi	r24, 0x00	; 0
		curCol = currentCellWorld & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	return SUCCESS;
}
    2f92:	1f 91       	pop	r17
    2f94:	0f 91       	pop	r16
    2f96:	ff 90       	pop	r15
    2f98:	ef 90       	pop	r14
    2f9a:	df 90       	pop	r13
    2f9c:	08 95       	ret

00002f9e <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    2f9e:	df 92       	push	r13
    2fa0:	ef 92       	push	r14
    2fa2:	ff 92       	push	r15
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    2fac:	d0 90 da 03 	lds	r13, 0x03DA
	// Local variables for nested for loops 
	unsigned char row, col;
	// Stores the number of matching seeds
	matchSeeds = 0;
    2fb0:	10 92 12 07 	sts	0x0712, r1
    2fb4:	00 e0       	ldi	r16, 0x00	; 0
    2fb6:	10 e0       	ldi	r17, 0x00	; 0
    2fb8:	1a c0       	rjmp	.+52     	; 0x2fee <localizeGateway+0x50>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    2fba:	88 81       	ld	r24, Y
    2fbc:	d8 16       	cp	r13, r24
    2fbe:	69 f4       	brne	.+26     	; 0x2fda <localizeGateway+0x3c>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    2fc0:	8f e6       	ldi	r24, 0x6F	; 111
    2fc2:	93 e0       	ldi	r25, 0x03	; 3
    2fc4:	6e 2d       	mov	r22, r14
    2fc6:	4f 2d       	mov	r20, r15
    2fc8:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <matchBranch>
    2fcc:	88 23       	and	r24, r24
    2fce:	29 f0       	breq	.+10     	; 0x2fda <localizeGateway+0x3c>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    2fd0:	80 91 12 07 	lds	r24, 0x0712
    2fd4:	8f 5f       	subi	r24, 0xFF	; 255
    2fd6:	80 93 12 07 	sts	0x0712, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    2fda:	f3 94       	inc	r15
    2fdc:	21 96       	adiw	r28, 0x01	; 1
    2fde:	84 e0       	ldi	r24, 0x04	; 4
    2fe0:	f8 16       	cp	r15, r24
    2fe2:	59 f7       	brne	.-42     	; 0x2fba <localizeGateway+0x1c>
    2fe4:	0f 5f       	subi	r16, 0xFF	; 255
    2fe6:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    2fe8:	04 30       	cpi	r16, 0x04	; 4
    2fea:	11 05       	cpc	r17, r1
    2fec:	51 f0       	breq	.+20     	; 0x3002 <localizeGateway+0x64>
    2fee:	e0 2e       	mov	r14, r16
    2ff0:	e8 01       	movw	r28, r16
    2ff2:	cc 0f       	add	r28, r28
    2ff4:	dd 1f       	adc	r29, r29
    2ff6:	cc 0f       	add	r28, r28
    2ff8:	dd 1f       	adc	r29, r29
    2ffa:	c1 59       	subi	r28, 0x91	; 145
    2ffc:	dc 4f       	sbci	r29, 0xFC	; 252
    2ffe:	ff 24       	eor	r15, r15
    3000:	dc cf       	rjmp	.-72     	; 0x2fba <localizeGateway+0x1c>
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	80 91 12 07 	lds	r24, 0x0712
    3008:	81 30       	cpi	r24, 0x01	; 1
    300a:	09 f0       	breq	.+2      	; 0x300e <localizeGateway+0x70>
    300c:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    300e:	89 2f       	mov	r24, r25
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	ef 90       	pop	r14
    301c:	df 90       	pop	r13
    301e:	08 95       	ret

00003020 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{		
    3020:	8f 92       	push	r8
    3022:	af 92       	push	r10
    3024:	bf 92       	push	r11
    3026:	cf 92       	push	r12
    3028:	df 92       	push	r13
    302a:	ef 92       	push	r14
    302c:	ff 92       	push	r15
    302e:	0f 93       	push	r16
    3030:	1f 93       	push	r17
	switch(currentMove){
    3032:	80 91 10 07 	lds	r24, 0x0710
    3036:	82 30       	cpi	r24, 0x02	; 2
    3038:	69 f0       	breq	.+26     	; 0x3054 <moveMap+0x34>
    303a:	83 30       	cpi	r24, 0x03	; 3
    303c:	71 f0       	breq	.+28     	; 0x305a <moveMap+0x3a>
    303e:	81 30       	cpi	r24, 0x01	; 1
    3040:	21 f5       	brne	.+72     	; 0x308a <moveMap+0x6a>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    3042:	60 e0       	ldi	r22, 0x00	; 0
    3044:	70 e0       	ldi	r23, 0x00	; 0
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0
    304a:	20 e0       	ldi	r18, 0x00	; 0
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	4c e8       	ldi	r20, 0x8C	; 140
    3050:	51 ec       	ldi	r21, 0xC1	; 193
    3052:	0b c0       	rjmp	.+22     	; 0x306a <moveMap+0x4a>
			break;
		case MOVE_FORWARD:
			moveCell();
    3054:	0e 94 7d 11 	call	0x22fa	; 0x22fa <moveCell>
    3058:	23 c0       	rjmp	.+70     	; 0x30a0 <moveMap+0x80>
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	70 e0       	ldi	r23, 0x00	; 0
    305e:	80 e0       	ldi	r24, 0x00	; 0
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	4c e8       	ldi	r20, 0x8C	; 140
    3068:	51 e4       	ldi	r21, 0x41	; 65
    306a:	0f 2e       	mov	r0, r31
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	ef 2e       	mov	r14, r31
    3070:	f0 e0       	ldi	r31, 0x00	; 0
    3072:	ff 2e       	mov	r15, r31
    3074:	f0 e2       	ldi	r31, 0x20	; 32
    3076:	0f 2f       	mov	r16, r31
    3078:	f1 e4       	ldi	r31, 0x41	; 65
    307a:	1f 2f       	mov	r17, r31
    307c:	f0 2d       	mov	r31, r0
    307e:	57 01       	movw	r10, r14
    3080:	68 01       	movw	r12, r16
    3082:	88 24       	eor	r8, r8
    3084:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    3088:	0b c0       	rjmp	.+22     	; 0x30a0 <moveMap+0x80>
			break;
		default:
			LCD_printf("Whatz2?!");
    308a:	00 d0       	rcall	.+0      	; 0x308c <moveMap+0x6c>
    308c:	86 e5       	ldi	r24, 0x56	; 86
    308e:	91 e0       	ldi	r25, 0x01	; 1
    3090:	ed b7       	in	r30, 0x3d	; 61
    3092:	fe b7       	in	r31, 0x3e	; 62
    3094:	92 83       	std	Z+2, r25	; 0x02
    3096:	81 83       	std	Z+1, r24	; 0x01
    3098:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    309c:	0f 90       	pop	r0
    309e:	0f 90       	pop	r0
			break;
	}
}
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	ff 90       	pop	r15
    30a6:	ef 90       	pop	r14
    30a8:	df 90       	pop	r13
    30aa:	cf 90       	pop	r12
    30ac:	bf 90       	pop	r11
    30ae:	af 90       	pop	r10
    30b0:	8f 90       	pop	r8
    30b2:	08 95       	ret

000030b4 <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    30b4:	8f 92       	push	r8
    30b6:	9f 92       	push	r9
    30b8:	af 92       	push	r10
    30ba:	bf 92       	push	r11
    30bc:	cf 92       	push	r12
    30be:	df 92       	push	r13
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
	// initialize the robot
	initializeRobot();
    30cc:	0e 94 8a 11 	call	0x2314	; 0x2314 <initializeRobot>
		
	// Loop variables for print debug
	unsigned char i, branch, move, orent;
	
	// Display the map
	LCD_clear();
    30d0:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    30d4:	8d e1       	ldi	r24, 0x1D	; 29
    30d6:	93 e0       	ldi	r25, 0x03	; 3
    30d8:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <puts>
	printMap(RESET);
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printMap>
	TMRSRVC_delay(2000);//wait 1 seconds
    30e2:	80 ed       	ldi	r24, 0xD0	; 208
    30e4:	97 e0       	ldi	r25, 0x07	; 7
    30e6:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
	LCD_clear();
    30ea:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
		//Localize from Gateways?
		isLost = localizeGateway();
				
		//Print Tree		
		LCD_clear();
		LCD_printf("Branch");
    30ee:	fe e2       	ldi	r31, 0x2E	; 46
    30f0:	8f 2e       	mov	r8, r31
    30f2:	f3 e0       	ldi	r31, 0x03	; 3
    30f4:	9f 2e       	mov	r9, r31
		for(i = 0; i<BRANCH_MAX; i++){
			branch = localizeGateways[0][i];
			LCD_printf("%3d", branch);
    30f6:	c5 e3       	ldi	r28, 0x35	; 53
    30f8:	d3 e0       	ldi	r29, 0x03	; 3
		}
		LCD_printf("Move  ");
    30fa:	e9 e3       	ldi	r30, 0x39	; 57
    30fc:	ae 2e       	mov	r10, r30
    30fe:	e3 e0       	ldi	r30, 0x03	; 3
    3100:	be 2e       	mov	r11, r30
		for(i = 0; i<BRANCH_MAX; i++){
			move = localizeGateways[1][i];
			LCD_printf("%3d", move);
		}
		LCD_printf("Ornt  ");
    3102:	70 e4       	ldi	r23, 0x40	; 64
    3104:	c7 2e       	mov	r12, r23
    3106:	73 e0       	ldi	r23, 0x03	; 3
    3108:	d7 2e       	mov	r13, r23
		for(i = 0; i<BRANCH_MAX; i++){
			orent = localizeGateways[2][i];
			LCD_printf("%3d", orent);
		}
		LCD_printf("isLost %1d ",isLost);
    310a:	67 e4       	ldi	r22, 0x47	; 71
    310c:	e6 2e       	mov	r14, r22
    310e:	63 e0       	ldi	r22, 0x03	; 3
    3110:	f6 2e       	mov	r15, r22
		LCD_printf("seeds: %1d", matchSeeds);
    3112:	03 e5       	ldi	r16, 0x53	; 83
    3114:	13 e0       	ldi	r17, 0x03	; 3
    3116:	35 c1       	rjmp	.+618    	; 0x3382 <CBOT_main+0x2ce>
	
	// Localization Loop 
	while(isLost)
	{	
		//Sense Gateway
		checkIR();	
    3118:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <checkIR>
		checkWorld();
    311c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    3120:	0e 94 26 14 	call	0x284c	; 0x284c <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    3124:	0e 94 cf 17 	call	0x2f9e	; 0x2f9e <localizeGateway>
    3128:	80 93 6e 03 	sts	0x036E, r24
				
		//Print Tree		
		LCD_clear();
    312c:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
		LCD_printf("Branch");
    3130:	00 d0       	rcall	.+0      	; 0x3132 <CBOT_main+0x7e>
    3132:	ad b7       	in	r26, 0x3d	; 61
    3134:	be b7       	in	r27, 0x3e	; 62
    3136:	12 96       	adiw	r26, 0x02	; 2
    3138:	9c 92       	st	X, r9
    313a:	8e 92       	st	-X, r8
    313c:	11 97       	sbiw	r26, 0x01	; 1
    313e:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			branch = localizeGateways[0][i];
			LCD_printf("%3d", branch);
    3142:	00 d0       	rcall	.+0      	; 0x3144 <CBOT_main+0x90>
    3144:	ed b7       	in	r30, 0x3d	; 61
    3146:	fe b7       	in	r31, 0x3e	; 62
    3148:	31 96       	adiw	r30, 0x01	; 1
    314a:	ad b7       	in	r26, 0x3d	; 61
    314c:	be b7       	in	r27, 0x3e	; 62
    314e:	12 96       	adiw	r26, 0x02	; 2
    3150:	dc 93       	st	X, r29
    3152:	ce 93       	st	-X, r28
    3154:	11 97       	sbiw	r26, 0x01	; 1
    3156:	80 91 da 03 	lds	r24, 0x03DA
    315a:	82 83       	std	Z+2, r24	; 0x02
    315c:	13 82       	std	Z+3, r1	; 0x03
    315e:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    3162:	ed b7       	in	r30, 0x3d	; 61
    3164:	fe b7       	in	r31, 0x3e	; 62
    3166:	31 96       	adiw	r30, 0x01	; 1
    3168:	ad b7       	in	r26, 0x3d	; 61
    316a:	be b7       	in	r27, 0x3e	; 62
    316c:	12 96       	adiw	r26, 0x02	; 2
    316e:	dc 93       	st	X, r29
    3170:	ce 93       	st	-X, r28
    3172:	11 97       	sbiw	r26, 0x01	; 1
    3174:	80 91 db 03 	lds	r24, 0x03DB
    3178:	82 83       	std	Z+2, r24	; 0x02
    317a:	13 82       	std	Z+3, r1	; 0x03
    317c:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    3180:	ed b7       	in	r30, 0x3d	; 61
    3182:	fe b7       	in	r31, 0x3e	; 62
    3184:	31 96       	adiw	r30, 0x01	; 1
    3186:	ad b7       	in	r26, 0x3d	; 61
    3188:	be b7       	in	r27, 0x3e	; 62
    318a:	12 96       	adiw	r26, 0x02	; 2
    318c:	dc 93       	st	X, r29
    318e:	ce 93       	st	-X, r28
    3190:	11 97       	sbiw	r26, 0x01	; 1
    3192:	80 91 dc 03 	lds	r24, 0x03DC
    3196:	82 83       	std	Z+2, r24	; 0x02
    3198:	13 82       	std	Z+3, r1	; 0x03
    319a:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    319e:	ed b7       	in	r30, 0x3d	; 61
    31a0:	fe b7       	in	r31, 0x3e	; 62
    31a2:	31 96       	adiw	r30, 0x01	; 1
    31a4:	ad b7       	in	r26, 0x3d	; 61
    31a6:	be b7       	in	r27, 0x3e	; 62
    31a8:	12 96       	adiw	r26, 0x02	; 2
    31aa:	dc 93       	st	X, r29
    31ac:	ce 93       	st	-X, r28
    31ae:	11 97       	sbiw	r26, 0x01	; 1
    31b0:	80 91 dd 03 	lds	r24, 0x03DD
    31b4:	82 83       	std	Z+2, r24	; 0x02
    31b6:	13 82       	std	Z+3, r1	; 0x03
    31b8:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    31bc:	ed b7       	in	r30, 0x3d	; 61
    31be:	fe b7       	in	r31, 0x3e	; 62
    31c0:	31 96       	adiw	r30, 0x01	; 1
    31c2:	ad b7       	in	r26, 0x3d	; 61
    31c4:	be b7       	in	r27, 0x3e	; 62
    31c6:	12 96       	adiw	r26, 0x02	; 2
    31c8:	dc 93       	st	X, r29
    31ca:	ce 93       	st	-X, r28
    31cc:	11 97       	sbiw	r26, 0x01	; 1
    31ce:	80 91 de 03 	lds	r24, 0x03DE
    31d2:	82 83       	std	Z+2, r24	; 0x02
    31d4:	13 82       	std	Z+3, r1	; 0x03
    31d6:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		}
		LCD_printf("Move  ");
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	ed b7       	in	r30, 0x3d	; 61
    31e0:	fe b7       	in	r31, 0x3e	; 62
    31e2:	b2 82       	std	Z+2, r11	; 0x02
    31e4:	a1 82       	std	Z+1, r10	; 0x01
    31e6:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			move = localizeGateways[1][i];
			LCD_printf("%3d", move);
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <CBOT_main+0x138>
    31ec:	ed b7       	in	r30, 0x3d	; 61
    31ee:	fe b7       	in	r31, 0x3e	; 62
    31f0:	31 96       	adiw	r30, 0x01	; 1
    31f2:	ad b7       	in	r26, 0x3d	; 61
    31f4:	be b7       	in	r27, 0x3e	; 62
    31f6:	12 96       	adiw	r26, 0x02	; 2
    31f8:	dc 93       	st	X, r29
    31fa:	ce 93       	st	-X, r28
    31fc:	11 97       	sbiw	r26, 0x01	; 1
    31fe:	80 91 df 03 	lds	r24, 0x03DF
    3202:	82 83       	std	Z+2, r24	; 0x02
    3204:	13 82       	std	Z+3, r1	; 0x03
    3206:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    320a:	ed b7       	in	r30, 0x3d	; 61
    320c:	fe b7       	in	r31, 0x3e	; 62
    320e:	31 96       	adiw	r30, 0x01	; 1
    3210:	ad b7       	in	r26, 0x3d	; 61
    3212:	be b7       	in	r27, 0x3e	; 62
    3214:	12 96       	adiw	r26, 0x02	; 2
    3216:	dc 93       	st	X, r29
    3218:	ce 93       	st	-X, r28
    321a:	11 97       	sbiw	r26, 0x01	; 1
    321c:	80 91 e0 03 	lds	r24, 0x03E0
    3220:	82 83       	std	Z+2, r24	; 0x02
    3222:	13 82       	std	Z+3, r1	; 0x03
    3224:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    3228:	ed b7       	in	r30, 0x3d	; 61
    322a:	fe b7       	in	r31, 0x3e	; 62
    322c:	31 96       	adiw	r30, 0x01	; 1
    322e:	ad b7       	in	r26, 0x3d	; 61
    3230:	be b7       	in	r27, 0x3e	; 62
    3232:	12 96       	adiw	r26, 0x02	; 2
    3234:	dc 93       	st	X, r29
    3236:	ce 93       	st	-X, r28
    3238:	11 97       	sbiw	r26, 0x01	; 1
    323a:	80 91 e1 03 	lds	r24, 0x03E1
    323e:	82 83       	std	Z+2, r24	; 0x02
    3240:	13 82       	std	Z+3, r1	; 0x03
    3242:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    3246:	ed b7       	in	r30, 0x3d	; 61
    3248:	fe b7       	in	r31, 0x3e	; 62
    324a:	31 96       	adiw	r30, 0x01	; 1
    324c:	ad b7       	in	r26, 0x3d	; 61
    324e:	be b7       	in	r27, 0x3e	; 62
    3250:	12 96       	adiw	r26, 0x02	; 2
    3252:	dc 93       	st	X, r29
    3254:	ce 93       	st	-X, r28
    3256:	11 97       	sbiw	r26, 0x01	; 1
    3258:	80 91 e2 03 	lds	r24, 0x03E2
    325c:	82 83       	std	Z+2, r24	; 0x02
    325e:	13 82       	std	Z+3, r1	; 0x03
    3260:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    3264:	ed b7       	in	r30, 0x3d	; 61
    3266:	fe b7       	in	r31, 0x3e	; 62
    3268:	31 96       	adiw	r30, 0x01	; 1
    326a:	ad b7       	in	r26, 0x3d	; 61
    326c:	be b7       	in	r27, 0x3e	; 62
    326e:	12 96       	adiw	r26, 0x02	; 2
    3270:	dc 93       	st	X, r29
    3272:	ce 93       	st	-X, r28
    3274:	11 97       	sbiw	r26, 0x01	; 1
    3276:	80 91 e3 03 	lds	r24, 0x03E3
    327a:	82 83       	std	Z+2, r24	; 0x02
    327c:	13 82       	std	Z+3, r1	; 0x03
    327e:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		}
		LCD_printf("Ornt  ");
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	ed b7       	in	r30, 0x3d	; 61
    3288:	fe b7       	in	r31, 0x3e	; 62
    328a:	d2 82       	std	Z+2, r13	; 0x02
    328c:	c1 82       	std	Z+1, r12	; 0x01
    328e:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			orent = localizeGateways[2][i];
			LCD_printf("%3d", orent);
    3292:	00 d0       	rcall	.+0      	; 0x3294 <CBOT_main+0x1e0>
    3294:	ed b7       	in	r30, 0x3d	; 61
    3296:	fe b7       	in	r31, 0x3e	; 62
    3298:	31 96       	adiw	r30, 0x01	; 1
    329a:	ad b7       	in	r26, 0x3d	; 61
    329c:	be b7       	in	r27, 0x3e	; 62
    329e:	12 96       	adiw	r26, 0x02	; 2
    32a0:	dc 93       	st	X, r29
    32a2:	ce 93       	st	-X, r28
    32a4:	11 97       	sbiw	r26, 0x01	; 1
    32a6:	80 91 e4 03 	lds	r24, 0x03E4
    32aa:	82 83       	std	Z+2, r24	; 0x02
    32ac:	13 82       	std	Z+3, r1	; 0x03
    32ae:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    32b2:	ed b7       	in	r30, 0x3d	; 61
    32b4:	fe b7       	in	r31, 0x3e	; 62
    32b6:	31 96       	adiw	r30, 0x01	; 1
    32b8:	ad b7       	in	r26, 0x3d	; 61
    32ba:	be b7       	in	r27, 0x3e	; 62
    32bc:	12 96       	adiw	r26, 0x02	; 2
    32be:	dc 93       	st	X, r29
    32c0:	ce 93       	st	-X, r28
    32c2:	11 97       	sbiw	r26, 0x01	; 1
    32c4:	80 91 e5 03 	lds	r24, 0x03E5
    32c8:	82 83       	std	Z+2, r24	; 0x02
    32ca:	13 82       	std	Z+3, r1	; 0x03
    32cc:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    32d0:	ed b7       	in	r30, 0x3d	; 61
    32d2:	fe b7       	in	r31, 0x3e	; 62
    32d4:	31 96       	adiw	r30, 0x01	; 1
    32d6:	ad b7       	in	r26, 0x3d	; 61
    32d8:	be b7       	in	r27, 0x3e	; 62
    32da:	12 96       	adiw	r26, 0x02	; 2
    32dc:	dc 93       	st	X, r29
    32de:	ce 93       	st	-X, r28
    32e0:	11 97       	sbiw	r26, 0x01	; 1
    32e2:	80 91 e6 03 	lds	r24, 0x03E6
    32e6:	82 83       	std	Z+2, r24	; 0x02
    32e8:	13 82       	std	Z+3, r1	; 0x03
    32ea:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    32ee:	ed b7       	in	r30, 0x3d	; 61
    32f0:	fe b7       	in	r31, 0x3e	; 62
    32f2:	31 96       	adiw	r30, 0x01	; 1
    32f4:	ad b7       	in	r26, 0x3d	; 61
    32f6:	be b7       	in	r27, 0x3e	; 62
    32f8:	12 96       	adiw	r26, 0x02	; 2
    32fa:	dc 93       	st	X, r29
    32fc:	ce 93       	st	-X, r28
    32fe:	11 97       	sbiw	r26, 0x01	; 1
    3300:	80 91 e7 03 	lds	r24, 0x03E7
    3304:	82 83       	std	Z+2, r24	; 0x02
    3306:	13 82       	std	Z+3, r1	; 0x03
    3308:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
    330c:	ed b7       	in	r30, 0x3d	; 61
    330e:	fe b7       	in	r31, 0x3e	; 62
    3310:	31 96       	adiw	r30, 0x01	; 1
    3312:	ad b7       	in	r26, 0x3d	; 61
    3314:	be b7       	in	r27, 0x3e	; 62
    3316:	12 96       	adiw	r26, 0x02	; 2
    3318:	dc 93       	st	X, r29
    331a:	ce 93       	st	-X, r28
    331c:	11 97       	sbiw	r26, 0x01	; 1
    331e:	80 91 e8 03 	lds	r24, 0x03E8
    3322:	82 83       	std	Z+2, r24	; 0x02
    3324:	13 82       	std	Z+3, r1	; 0x03
    3326:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		}
		LCD_printf("isLost %1d ",isLost);
    332a:	ed b7       	in	r30, 0x3d	; 61
    332c:	fe b7       	in	r31, 0x3e	; 62
    332e:	31 96       	adiw	r30, 0x01	; 1
    3330:	ad b7       	in	r26, 0x3d	; 61
    3332:	be b7       	in	r27, 0x3e	; 62
    3334:	12 96       	adiw	r26, 0x02	; 2
    3336:	fc 92       	st	X, r15
    3338:	ee 92       	st	-X, r14
    333a:	11 97       	sbiw	r26, 0x01	; 1
    333c:	80 91 6e 03 	lds	r24, 0x036E
    3340:	82 83       	std	Z+2, r24	; 0x02
    3342:	13 82       	std	Z+3, r1	; 0x03
    3344:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		LCD_printf("seeds: %1d", matchSeeds);
    3348:	ed b7       	in	r30, 0x3d	; 61
    334a:	fe b7       	in	r31, 0x3e	; 62
    334c:	31 96       	adiw	r30, 0x01	; 1
    334e:	ad b7       	in	r26, 0x3d	; 61
    3350:	be b7       	in	r27, 0x3e	; 62
    3352:	12 96       	adiw	r26, 0x02	; 2
    3354:	1c 93       	st	X, r17
    3356:	0e 93       	st	-X, r16
    3358:	11 97       	sbiw	r26, 0x01	; 1
    335a:	80 91 12 07 	lds	r24, 0x0712
    335e:	82 83       	std	Z+2, r24	; 0x02
    3360:	13 82       	std	Z+3, r1	; 0x03
    3362:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
		TMRSRVC_delay(4000);//wait 3 seconds
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	80 ea       	ldi	r24, 0xA0	; 160
    3370:	9f e0       	ldi	r25, 0x0F	; 15
    3372:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
		
		//Act on the Gateway
		moveMap();
    3376:	0e 94 10 18 	call	0x3020	; 0x3020 <moveMap>
		
		// Break if not isLost
		if(!isLost){
    337a:	80 91 6e 03 	lds	r24, 0x036E
    337e:	88 23       	and	r24, r24
    3380:	29 f0       	breq	.+10     	; 0x338c <CBOT_main+0x2d8>
	printMap(RESET);
	TMRSRVC_delay(2000);//wait 1 seconds
	LCD_clear();
	
	// Localization Loop 
	while(isLost)
    3382:	80 91 6e 03 	lds	r24, 0x036E
    3386:	88 23       	and	r24, r24
    3388:	09 f0       	breq	.+2      	; 0x338c <CBOT_main+0x2d8>
    338a:	c6 ce       	rjmp	.-628    	; 0x3118 <CBOT_main+0x64>
		// LCD_printf("%5.5f\n%5.5f\n",odometryStepL,odometryStepL);
		// TMRSRVC_delay(1000);//wait 3 seconds
	}
	**/
	
	LCD_clear();
    338c:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
	LCD_printf("LOLZ\nI'm found!");
    3390:	00 d0       	rcall	.+0      	; 0x3392 <CBOT_main+0x2de>
    3392:	8e e5       	ldi	r24, 0x5E	; 94
    3394:	93 e0       	ldi	r25, 0x03	; 3
    3396:	ed b7       	in	r30, 0x3d	; 61
    3398:	fe b7       	in	r31, 0x3e	; 62
    339a:	92 83       	std	Z+2, r25	; 0x02
    339c:	81 83       	std	Z+1, r24	; 0x01
    339e:	0e 94 d9 36 	call	0x6db2	; 0x6db2 <printf>
	TMRSRVC_delay(3000);//wait 3 seconds
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	88 eb       	ldi	r24, 0xB8	; 184
    33a8:	9b e0       	ldi	r25, 0x0B	; 11
    33aa:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
	
	LCD_clear();
    33ae:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    33b2:	8d e1       	ldi	r24, 0x1D	; 29
    33b4:	93 e0       	ldi	r25, 0x03	; 3
    33b6:	0e 94 eb 36 	call	0x6dd6	; 0x6dd6 <puts>
	printMap(RESET);
    33ba:	81 e0       	ldi	r24, 0x01	; 1
    33bc:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printMap>
	TMRSRVC_delay(10000);//wait 10 seconds
    33c0:	80 e1       	ldi	r24, 0x10	; 16
    33c2:	97 e2       	ldi	r25, 0x27	; 39
    33c4:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
	LCD_clear();
    33c8:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
		// LCD_clear();
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/
}// end the CBOT_main()
    33cc:	df 91       	pop	r29
    33ce:	cf 91       	pop	r28
    33d0:	1f 91       	pop	r17
    33d2:	0f 91       	pop	r16
    33d4:	ff 90       	pop	r15
    33d6:	ef 90       	pop	r14
    33d8:	df 90       	pop	r13
    33da:	cf 90       	pop	r12
    33dc:	bf 90       	pop	r11
    33de:	af 90       	pop	r10
    33e0:	9f 90       	pop	r9
    33e2:	8f 90       	pop	r8
    33e4:	08 95       	ret

000033e6 <ADC_open>:
    33e6:	8f e0       	ldi	r24, 0x0F	; 15
    33e8:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    33ec:	88 23       	and	r24, r24
    33ee:	31 f4       	brne	.+12     	; 0x33fc <ADC_open+0x16>
    33f0:	0e 94 76 22 	call	0x44ec	; 0x44ec <__ADC_init>
    33f4:	8f e0       	ldi	r24, 0x0F	; 15
    33f6:	61 e0       	ldi	r22, 0x01	; 1
    33f8:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    33fc:	8f e0       	ldi	r24, 0x0F	; 15
    33fe:	91 e0       	ldi	r25, 0x01	; 1
    3400:	08 95       	ret

00003402 <ADC_sample>:
    3402:	8f e0       	ldi	r24, 0x0F	; 15
    3404:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    3408:	81 30       	cpi	r24, 0x01	; 1
    340a:	19 f0       	breq	.+6      	; 0x3412 <ADC_sample+0x10>
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	13 c0       	rjmp	.+38     	; 0x3438 <ADC_sample+0x36>
    3412:	80 91 7a 00 	lds	r24, 0x007A
    3416:	80 64       	ori	r24, 0x40	; 64
    3418:	80 93 7a 00 	sts	0x007A, r24
    341c:	80 91 7a 00 	lds	r24, 0x007A
    3420:	86 fd       	sbrc	r24, 6
    3422:	fc cf       	rjmp	.-8      	; 0x341c <ADC_sample+0x1a>
    3424:	30 91 78 00 	lds	r19, 0x0078
    3428:	20 91 79 00 	lds	r18, 0x0079
    342c:	92 2f       	mov	r25, r18
    342e:	80 e0       	ldi	r24, 0x00	; 0
    3430:	23 2f       	mov	r18, r19
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	28 2b       	or	r18, r24
    3436:	39 2b       	or	r19, r25
    3438:	c9 01       	movw	r24, r18
    343a:	08 95       	ret

0000343c <ADC_set_channel>:
    343c:	58 2f       	mov	r21, r24
    343e:	80 91 7f 03 	lds	r24, 0x037F
    3442:	88 30       	cpi	r24, 0x08	; 8
    3444:	d8 f4       	brcc	.+54     	; 0x347c <ADC_set_channel+0x40>
    3446:	40 91 7e 00 	lds	r20, 0x007E
    344a:	21 e0       	ldi	r18, 0x01	; 1
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	b9 01       	movw	r22, r18
    3450:	02 c0       	rjmp	.+4      	; 0x3456 <ADC_set_channel+0x1a>
    3452:	66 0f       	add	r22, r22
    3454:	77 1f       	adc	r23, r23
    3456:	8a 95       	dec	r24
    3458:	e2 f7       	brpl	.-8      	; 0x3452 <ADC_set_channel+0x16>
    345a:	cb 01       	movw	r24, r22
    345c:	80 95       	com	r24
    345e:	84 23       	and	r24, r20
    3460:	80 93 7e 00 	sts	0x007E, r24
    3464:	80 91 7e 00 	lds	r24, 0x007E
    3468:	05 2e       	mov	r0, r21
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <ADC_set_channel+0x34>
    346c:	22 0f       	add	r18, r18
    346e:	33 1f       	adc	r19, r19
    3470:	0a 94       	dec	r0
    3472:	e2 f7       	brpl	.-8      	; 0x346c <ADC_set_channel+0x30>
    3474:	82 2b       	or	r24, r18
    3476:	80 93 7e 00 	sts	0x007E, r24
    347a:	0d c0       	rjmp	.+26     	; 0x3496 <ADC_set_channel+0x5a>
    347c:	20 91 7e 00 	lds	r18, 0x007E
    3480:	81 e0       	ldi	r24, 0x01	; 1
    3482:	90 e0       	ldi	r25, 0x00	; 0
    3484:	05 2e       	mov	r0, r21
    3486:	02 c0       	rjmp	.+4      	; 0x348c <ADC_set_channel+0x50>
    3488:	88 0f       	add	r24, r24
    348a:	99 1f       	adc	r25, r25
    348c:	0a 94       	dec	r0
    348e:	e2 f7       	brpl	.-8      	; 0x3488 <ADC_set_channel+0x4c>
    3490:	28 2b       	or	r18, r24
    3492:	20 93 7e 00 	sts	0x007E, r18
    3496:	50 93 7f 03 	sts	0x037F, r21
    349a:	80 91 7c 00 	lds	r24, 0x007C
    349e:	5f 71       	andi	r21, 0x1F	; 31
    34a0:	80 7e       	andi	r24, 0xE0	; 224
    34a2:	85 2b       	or	r24, r21
    34a4:	80 93 7c 00 	sts	0x007C, r24
    34a8:	08 95       	ret

000034aa <ADC_set_VREF>:
    34aa:	ec e7       	ldi	r30, 0x7C	; 124
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	90 81       	ld	r25, Z
    34b0:	82 95       	swap	r24
    34b2:	88 0f       	add	r24, r24
    34b4:	88 0f       	add	r24, r24
    34b6:	80 7c       	andi	r24, 0xC0	; 192
    34b8:	9f 73       	andi	r25, 0x3F	; 63
    34ba:	98 2b       	or	r25, r24
    34bc:	90 83       	st	Z, r25
    34be:	08 95       	ret

000034c0 <main>:
    34c0:	0e 94 8f 22 	call	0x451e	; 0x451e <CBOT_ISR_init>
    34c4:	0e 94 81 22 	call	0x4502	; 0x4502 <CBOT_init>
    34c8:	0e 94 5a 18 	call	0x30b4	; 0x30b4 <CBOT_main>
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	08 95       	ret

000034d2 <LCD_clear>:
    34d2:	0f 93       	push	r16
    34d4:	1f 93       	push	r17
    34d6:	80 e4       	ldi	r24, 0x40	; 64
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    34de:	00 e0       	ldi	r16, 0x00	; 0
    34e0:	80 2f       	mov	r24, r16
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_set_PGC_addr>
    34e8:	10 e0       	ldi	r17, 0x00	; 0
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	61 e0       	ldi	r22, 0x01	; 1
    34ee:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    34f2:	1f 5f       	subi	r17, 0xFF	; 255
    34f4:	10 38       	cpi	r17, 0x80	; 128
    34f6:	c9 f7       	brne	.-14     	; 0x34ea <LCD_clear+0x18>
    34f8:	0f 5f       	subi	r16, 0xFF	; 255
    34fa:	04 30       	cpi	r16, 0x04	; 4
    34fc:	89 f7       	brne	.-30     	; 0x34e0 <LCD_clear+0xe>
    34fe:	83 e0       	ldi	r24, 0x03	; 3
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	0e 94 28 1b 	call	0x3650	; 0x3650 <LCD_set_next_PGC>
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	08 95       	ret

0000350c <LCD_open>:
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	82 e0       	ldi	r24, 0x02	; 2
    3512:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    3516:	88 23       	and	r24, r24
    3518:	11 f4       	brne	.+4      	; 0x351e <LCD_open+0x12>
    351a:	82 e0       	ldi	r24, 0x02	; 2
    351c:	06 c0       	rjmp	.+12     	; 0x352a <LCD_open+0x1e>
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    3524:	88 23       	and	r24, r24
    3526:	19 f4       	brne	.+6      	; 0x352e <LCD_open+0x22>
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	6d c0       	rjmp	.+218    	; 0x3608 <LCD_open+0xfc>
    352e:	0e 94 f7 24 	call	0x49ee	; 0x49ee <__LCD_init>
    3532:	85 e0       	ldi	r24, 0x05	; 5
    3534:	61 e0       	ldi	r22, 0x01	; 1
    3536:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    353a:	8e ea       	ldi	r24, 0xAE	; 174
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    3542:	82 ea       	ldi	r24, 0xA2	; 162
    3544:	60 e0       	ldi	r22, 0x00	; 0
    3546:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    354a:	80 ea       	ldi	r24, 0xA0	; 160
    354c:	60 e0       	ldi	r22, 0x00	; 0
    354e:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    3552:	00 e5       	ldi	r16, 0x50	; 80
    3554:	13 ec       	ldi	r17, 0xC3	; 195
    3556:	c8 01       	movw	r24, r16
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	f1 f7       	brne	.-4      	; 0x3558 <LCD_open+0x4c>
    355c:	80 ec       	ldi	r24, 0xC0	; 192
    355e:	60 e0       	ldi	r22, 0x00	; 0
    3560:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    3564:	8f e2       	ldi	r24, 0x2F	; 47
    3566:	60 e0       	ldi	r22, 0x00	; 0
    3568:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    356c:	81 e8       	ldi	r24, 0x81	; 129
    356e:	60 e0       	ldi	r22, 0x00	; 0
    3570:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    3574:	86 e1       	ldi	r24, 0x16	; 22
    3576:	60 e0       	ldi	r22, 0x00	; 0
    3578:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    357c:	82 e2       	ldi	r24, 0x22	; 34
    357e:	60 e0       	ldi	r22, 0x00	; 0
    3580:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    3584:	c8 01       	movw	r24, r16
    3586:	01 97       	sbiw	r24, 0x01	; 1
    3588:	f1 f7       	brne	.-4      	; 0x3586 <LCD_open+0x7a>
    358a:	8f ea       	ldi	r24, 0xAF	; 175
    358c:	60 e0       	ldi	r22, 0x00	; 0
    358e:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    3592:	86 ea       	ldi	r24, 0xA6	; 166
    3594:	60 e0       	ldi	r22, 0x00	; 0
    3596:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    359a:	85 ea       	ldi	r24, 0xA5	; 165
    359c:	60 e0       	ldi	r22, 0x00	; 0
    359e:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	28 e8       	ldi	r18, 0x88	; 136
    35a8:	33 e1       	ldi	r19, 0x13	; 19
    35aa:	f9 01       	movw	r30, r18
    35ac:	31 97       	sbiw	r30, 0x01	; 1
    35ae:	f1 f7       	brne	.-4      	; 0x35ac <LCD_open+0xa0>
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	43 e0       	ldi	r20, 0x03	; 3
    35b4:	88 3e       	cpi	r24, 0xE8	; 232
    35b6:	94 07       	cpc	r25, r20
    35b8:	c1 f7       	brne	.-16     	; 0x35aa <LCD_open+0x9e>
    35ba:	83 eb       	ldi	r24, 0xB3	; 179
    35bc:	60 e0       	ldi	r22, 0x00	; 0
    35be:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    35c2:	80 e4       	ldi	r24, 0x40	; 64
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    35ca:	83 e0       	ldi	r24, 0x03	; 3
    35cc:	60 e0       	ldi	r22, 0x00	; 0
    35ce:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_set_PGC_addr>
    35d2:	83 e0       	ldi	r24, 0x03	; 3
    35d4:	60 e0       	ldi	r22, 0x00	; 0
    35d6:	0e 94 28 1b 	call	0x3650	; 0x3650 <LCD_set_next_PGC>
    35da:	10 92 62 07 	sts	0x0762, r1
    35de:	10 92 64 07 	sts	0x0764, r1
    35e2:	10 92 63 07 	sts	0x0763, r1
    35e6:	8e e8       	ldi	r24, 0x8E	; 142
    35e8:	93 e0       	ldi	r25, 0x03	; 3
    35ea:	90 93 93 07 	sts	0x0793, r25
    35ee:	80 93 92 07 	sts	0x0792, r24
    35f2:	88 e1       	ldi	r24, 0x18	; 24
    35f4:	0e 94 07 1b 	call	0x360e	; 0x360e <LCD_set_backlight>
    35f8:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
    35fc:	84 ea       	ldi	r24, 0xA4	; 164
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    3604:	85 e0       	ldi	r24, 0x05	; 5
    3606:	91 e0       	ldi	r25, 0x01	; 1
    3608:	1f 91       	pop	r17
    360a:	0f 91       	pop	r16
    360c:	08 95       	ret

0000360e <LCD_set_backlight>:
    360e:	1f 93       	push	r17
    3610:	18 2f       	mov	r17, r24
    3612:	85 e0       	ldi	r24, 0x05	; 5
    3614:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    3618:	81 30       	cpi	r24, 0x01	; 1
    361a:	c1 f4       	brne	.+48     	; 0x364c <LCD_set_backlight+0x3e>
    361c:	87 e0       	ldi	r24, 0x07	; 7
    361e:	0e 94 84 1b 	call	0x3708	; 0x3708 <SPI_set_slave_addr>
    3622:	82 e0       	ldi	r24, 0x02	; 2
    3624:	6a e0       	ldi	r22, 0x0A	; 10
    3626:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <SPI_transmit>
    362a:	82 e0       	ldi	r24, 0x02	; 2
    362c:	61 eb       	ldi	r22, 0xB1	; 177
    362e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <SPI_transmit>
    3632:	61 2f       	mov	r22, r17
    3634:	11 32       	cpi	r17, 0x21	; 33
    3636:	08 f0       	brcs	.+2      	; 0x363a <LCD_set_backlight+0x2c>
    3638:	60 e2       	ldi	r22, 0x20	; 32
    363a:	82 e0       	ldi	r24, 0x02	; 2
    363c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <SPI_transmit>
    3640:	89 ee       	ldi	r24, 0xE9	; 233
    3642:	8a 95       	dec	r24
    3644:	f1 f7       	brne	.-4      	; 0x3642 <LCD_set_backlight+0x34>
    3646:	87 e0       	ldi	r24, 0x07	; 7
    3648:	0e 94 84 1b 	call	0x3708	; 0x3708 <SPI_set_slave_addr>
    364c:	1f 91       	pop	r17
    364e:	08 95       	ret

00003650 <LCD_set_next_PGC>:
    3650:	83 70       	andi	r24, 0x03	; 3
    3652:	6f 77       	andi	r22, 0x7F	; 127
    3654:	60 93 60 07 	sts	0x0760, r22
    3658:	80 93 61 07 	sts	0x0761, r24
    365c:	08 95       	ret

0000365e <LCD_set_PGC_addr>:
    365e:	0f 93       	push	r16
    3660:	1f 93       	push	r17
    3662:	06 2f       	mov	r16, r22
    3664:	16 2f       	mov	r17, r22
    3666:	1f 77       	andi	r17, 0x7F	; 127
    3668:	83 70       	andi	r24, 0x03	; 3
    366a:	80 6b       	ori	r24, 0xB0	; 176
    366c:	60 e0       	ldi	r22, 0x00	; 0
    366e:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    3672:	12 95       	swap	r17
    3674:	1f 70       	andi	r17, 0x0F	; 15
    3676:	81 2f       	mov	r24, r17
    3678:	80 61       	ori	r24, 0x10	; 16
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    3680:	80 2f       	mov	r24, r16
    3682:	8f 70       	andi	r24, 0x0F	; 15
    3684:	60 e0       	ldi	r22, 0x00	; 0
    3686:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    368a:	1f 91       	pop	r17
    368c:	0f 91       	pop	r16
    368e:	08 95       	ret

00003690 <LCD_write>:
    3690:	0f 93       	push	r16
    3692:	1f 93       	push	r17
    3694:	08 2f       	mov	r16, r24
    3696:	16 2f       	mov	r17, r22
    3698:	85 e0       	ldi	r24, 0x05	; 5
    369a:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	79 f4       	brne	.+30     	; 0x36c0 <LCD_write+0x30>
    36a2:	11 23       	and	r17, r17
    36a4:	19 f0       	breq	.+6      	; 0x36ac <LCD_write+0x1c>
    36a6:	11 30       	cpi	r17, 0x01	; 1
    36a8:	21 f4       	brne	.+8      	; 0x36b2 <LCD_write+0x22>
    36aa:	02 c0       	rjmp	.+4      	; 0x36b0 <LCD_write+0x20>
    36ac:	2b 98       	cbi	0x05, 3	; 5
    36ae:	01 c0       	rjmp	.+2      	; 0x36b2 <LCD_write+0x22>
    36b0:	2b 9a       	sbi	0x05, 3	; 5
    36b2:	86 e0       	ldi	r24, 0x06	; 6
    36b4:	8a 95       	dec	r24
    36b6:	f1 f7       	brne	.-4      	; 0x36b4 <LCD_write+0x24>
    36b8:	80 e0       	ldi	r24, 0x00	; 0
    36ba:	60 2f       	mov	r22, r16
    36bc:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <SPI_transmit>
    36c0:	1f 91       	pop	r17
    36c2:	0f 91       	pop	r16
    36c4:	08 95       	ret

000036c6 <LED_clr_pattern>:
    36c6:	1f 93       	push	r17
    36c8:	18 2f       	mov	r17, r24
    36ca:	86 e0       	ldi	r24, 0x06	; 6
    36cc:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    36d0:	81 30       	cpi	r24, 0x01	; 1
    36d2:	19 f4       	brne	.+6      	; 0x36da <LED_clr_pattern+0x14>
    36d4:	81 2f       	mov	r24, r17
    36d6:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__LED_clr_pattern>
    36da:	1f 91       	pop	r17
    36dc:	08 95       	ret

000036de <LED_open>:
    36de:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__LED_init>
    36e2:	86 e0       	ldi	r24, 0x06	; 6
    36e4:	61 e0       	ldi	r22, 0x01	; 1
    36e6:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    36ea:	86 e0       	ldi	r24, 0x06	; 6
    36ec:	91 e0       	ldi	r25, 0x01	; 1
    36ee:	08 95       	ret

000036f0 <LED_set_pattern>:
    36f0:	1f 93       	push	r17
    36f2:	18 2f       	mov	r17, r24
    36f4:	86 e0       	ldi	r24, 0x06	; 6
    36f6:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	19 f4       	brne	.+6      	; 0x3704 <LED_set_pattern+0x14>
    36fe:	81 2f       	mov	r24, r17
    3700:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <__LED_set_pattern>
    3704:	1f 91       	pop	r17
    3706:	08 95       	ret

00003708 <SPI_set_slave_addr>:
    3708:	1f 93       	push	r17
    370a:	18 2f       	mov	r17, r24
    370c:	82 e0       	ldi	r24, 0x02	; 2
    370e:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    3712:	81 30       	cpi	r24, 0x01	; 1
    3714:	09 f0       	breq	.+2      	; 0x3718 <SPI_set_slave_addr+0x10>
    3716:	47 c0       	rjmp	.+142    	; 0x37a6 <SPI_set_slave_addr+0x9e>
    3718:	91 2f       	mov	r25, r17
    371a:	97 70       	andi	r25, 0x07	; 7
    371c:	80 91 65 07 	lds	r24, 0x0765
    3720:	98 17       	cp	r25, r24
    3722:	09 f4       	brne	.+2      	; 0x3726 <SPI_set_slave_addr+0x1e>
    3724:	40 c0       	rjmp	.+128    	; 0x37a6 <SPI_set_slave_addr+0x9e>
    3726:	90 93 65 07 	sts	0x0765, r25
    372a:	85 b1       	in	r24, 0x05	; 5
    372c:	88 7f       	andi	r24, 0xF8	; 248
    372e:	89 2b       	or	r24, r25
    3730:	85 b9       	out	0x05, r24	; 5
    3732:	93 30       	cpi	r25, 0x03	; 3
    3734:	11 f1       	breq	.+68     	; 0x377a <SPI_set_slave_addr+0x72>
    3736:	94 30       	cpi	r25, 0x04	; 4
    3738:	28 f4       	brcc	.+10     	; 0x3744 <SPI_set_slave_addr+0x3c>
    373a:	91 30       	cpi	r25, 0x01	; 1
    373c:	51 f0       	breq	.+20     	; 0x3752 <SPI_set_slave_addr+0x4a>
    373e:	92 30       	cpi	r25, 0x02	; 2
    3740:	90 f4       	brcc	.+36     	; 0x3766 <SPI_set_slave_addr+0x5e>
    3742:	0c c0       	rjmp	.+24     	; 0x375c <SPI_set_slave_addr+0x54>
    3744:	95 30       	cpi	r25, 0x05	; 5
    3746:	19 f1       	breq	.+70     	; 0x378e <SPI_set_slave_addr+0x86>
    3748:	95 30       	cpi	r25, 0x05	; 5
    374a:	e0 f0       	brcs	.+56     	; 0x3784 <SPI_set_slave_addr+0x7c>
    374c:	96 30       	cpi	r25, 0x06	; 6
    374e:	21 f5       	brne	.+72     	; 0x3798 <SPI_set_slave_addr+0x90>
    3750:	0f c0       	rjmp	.+30     	; 0x3770 <SPI_set_slave_addr+0x68>
    3752:	e0 91 3c 04 	lds	r30, 0x043C
    3756:	f0 91 3d 04 	lds	r31, 0x043D
    375a:	22 c0       	rjmp	.+68     	; 0x37a0 <SPI_set_slave_addr+0x98>
    375c:	e0 91 3a 04 	lds	r30, 0x043A
    3760:	f0 91 3b 04 	lds	r31, 0x043B
    3764:	1d c0       	rjmp	.+58     	; 0x37a0 <SPI_set_slave_addr+0x98>
    3766:	e0 91 3e 04 	lds	r30, 0x043E
    376a:	f0 91 3f 04 	lds	r31, 0x043F
    376e:	18 c0       	rjmp	.+48     	; 0x37a0 <SPI_set_slave_addr+0x98>
    3770:	e0 91 46 04 	lds	r30, 0x0446
    3774:	f0 91 47 04 	lds	r31, 0x0447
    3778:	13 c0       	rjmp	.+38     	; 0x37a0 <SPI_set_slave_addr+0x98>
    377a:	e0 91 40 04 	lds	r30, 0x0440
    377e:	f0 91 41 04 	lds	r31, 0x0441
    3782:	0e c0       	rjmp	.+28     	; 0x37a0 <SPI_set_slave_addr+0x98>
    3784:	e0 91 42 04 	lds	r30, 0x0442
    3788:	f0 91 43 04 	lds	r31, 0x0443
    378c:	09 c0       	rjmp	.+18     	; 0x37a0 <SPI_set_slave_addr+0x98>
    378e:	e0 91 44 04 	lds	r30, 0x0444
    3792:	f0 91 45 04 	lds	r31, 0x0445
    3796:	04 c0       	rjmp	.+8      	; 0x37a0 <SPI_set_slave_addr+0x98>
    3798:	e0 91 48 04 	lds	r30, 0x0448
    379c:	f0 91 49 04 	lds	r31, 0x0449
    37a0:	30 97       	sbiw	r30, 0x00	; 0
    37a2:	09 f0       	breq	.+2      	; 0x37a6 <SPI_set_slave_addr+0x9e>
    37a4:	09 95       	icall
    37a6:	1f 91       	pop	r17
    37a8:	08 95       	ret

000037aa <SPI_transmit>:
    37aa:	1f 93       	push	r17
    37ac:	16 2f       	mov	r17, r22
    37ae:	0e 94 84 1b 	call	0x3708	; 0x3708 <SPI_set_slave_addr>
    37b2:	82 e0       	ldi	r24, 0x02	; 2
    37b4:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    37b8:	81 30       	cpi	r24, 0x01	; 1
    37ba:	21 f4       	brne	.+8      	; 0x37c4 <SPI_transmit+0x1a>
    37bc:	1e bd       	out	0x2e, r17	; 46
    37be:	0d b4       	in	r0, 0x2d	; 45
    37c0:	07 fe       	sbrs	r0, 7
    37c2:	fd cf       	rjmp	.-6      	; 0x37be <SPI_transmit+0x14>
    37c4:	1f 91       	pop	r17
    37c6:	08 95       	ret

000037c8 <__SPKR_set_up_freq_LUT>:
    37c8:	0f 93       	push	r16
    37ca:	1f 93       	push	r17
    37cc:	cf 93       	push	r28
    37ce:	df 93       	push	r29
    37d0:	80 e2       	ldi	r24, 0x20	; 32
    37d2:	91 e0       	ldi	r25, 0x01	; 1
    37d4:	0e 94 ba 34 	call	0x6974	; 0x6974 <malloc>
    37d8:	9c 01       	movw	r18, r24
    37da:	90 93 59 04 	sts	0x0459, r25
    37de:	80 93 58 04 	sts	0x0458, r24
    37e2:	89 2b       	or	r24, r25
    37e4:	11 f4       	brne	.+4      	; 0x37ea <__SPKR_set_up_freq_LUT+0x22>
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	39 c0       	rjmp	.+114    	; 0x385c <__SPKR_set_up_freq_LUT+0x94>
    37ea:	89 01       	movw	r16, r18
    37ec:	c0 e0       	ldi	r28, 0x00	; 0
    37ee:	d0 e0       	ldi	r29, 0x00	; 0
    37f0:	be 01       	movw	r22, r28
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__floatunsisf>
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 ea       	ldi	r20, 0xA0	; 160
    3800:	51 e4       	ldi	r21, 0x41	; 65
    3802:	0e 94 89 2d 	call	0x5b12	; 0x5b12 <__divsf3>
    3806:	27 ef       	ldi	r18, 0xF7	; 247
    3808:	35 e7       	ldi	r19, 0x75	; 117
    380a:	40 e0       	ldi	r20, 0x00	; 0
    380c:	5f e3       	ldi	r21, 0x3F	; 63
    380e:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    3812:	9b 01       	movw	r18, r22
    3814:	ac 01       	movw	r20, r24
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	80 e2       	ldi	r24, 0x20	; 32
    381c:	91 e4       	ldi	r25, 0x41	; 65
    381e:	0e 94 75 2f 	call	0x5eea	; 0x5eea <pow>
    3822:	9b 01       	movw	r18, r22
    3824:	ac 01       	movw	r20, r24
    3826:	ca 01       	movw	r24, r20
    3828:	b9 01       	movw	r22, r18
    382a:	2d ec       	ldi	r18, 0xCD	; 205
    382c:	3c ec       	ldi	r19, 0xCC	; 204
    382e:	42 e8       	ldi	r20, 0x82	; 130
    3830:	51 e4       	ldi	r21, 0x41	; 65
    3832:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <__mulsf3>
    3836:	0e 94 d8 2e 	call	0x5db0	; 0x5db0 <lrint>
    383a:	2a e0       	ldi	r18, 0x0A	; 10
    383c:	30 e0       	ldi	r19, 0x00	; 0
    383e:	40 e0       	ldi	r20, 0x00	; 0
    3840:	50 e0       	ldi	r21, 0x00	; 0
    3842:	0e 94 42 34 	call	0x6884	; 0x6884 <__mulsi3>
    3846:	f8 01       	movw	r30, r16
    3848:	61 93       	st	Z+, r22
    384a:	71 93       	st	Z+, r23
    384c:	81 93       	st	Z+, r24
    384e:	91 93       	st	Z+, r25
    3850:	8f 01       	movw	r16, r30
    3852:	21 96       	adiw	r28, 0x01	; 1
    3854:	c8 34       	cpi	r28, 0x48	; 72
    3856:	d1 05       	cpc	r29, r1
    3858:	59 f6       	brne	.-106    	; 0x37f0 <__SPKR_set_up_freq_LUT+0x28>
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	df 91       	pop	r29
    385e:	cf 91       	pop	r28
    3860:	1f 91       	pop	r17
    3862:	0f 91       	pop	r16
    3864:	08 95       	ret

00003866 <__SPKR_open_beep_mode>:
    3866:	8a e0       	ldi	r24, 0x0A	; 10
    3868:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    386c:	88 23       	and	r24, r24
    386e:	71 f4       	brne	.+28     	; 0x388c <__SPKR_open_beep_mode+0x26>
    3870:	10 92 55 04 	sts	0x0455, r1
    3874:	10 92 54 04 	sts	0x0454, r1
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__SPKR_init>
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	80 93 4b 04 	sts	0x044B, r24
    3884:	8a e0       	ldi	r24, 0x0A	; 10
    3886:	61 e0       	ldi	r22, 0x01	; 1
    3888:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    388c:	8a e0       	ldi	r24, 0x0A	; 10
    388e:	91 e0       	ldi	r25, 0x01	; 1
    3890:	08 95       	ret

00003892 <__SPKR_open_tone_mode>:
    3892:	1f 93       	push	r17
    3894:	8b e0       	ldi	r24, 0x0B	; 11
    3896:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    389a:	88 23       	and	r24, r24
    389c:	11 f0       	breq	.+4      	; 0x38a2 <__SPKR_open_tone_mode+0x10>
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	21 c0       	rjmp	.+66     	; 0x38e4 <__SPKR_open_tone_mode+0x52>
    38a2:	89 e0       	ldi	r24, 0x09	; 9
    38a4:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    38a8:	88 23       	and	r24, r24
    38aa:	d9 f4       	brne	.+54     	; 0x38e2 <__SPKR_open_tone_mode+0x50>
    38ac:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <__SPKR_set_up_freq_LUT>
    38b0:	18 2f       	mov	r17, r24
    38b2:	81 30       	cpi	r24, 0x01	; 1
    38b4:	b1 f4       	brne	.+44     	; 0x38e2 <__SPKR_open_tone_mode+0x50>
    38b6:	10 92 4c 04 	sts	0x044C, r1
    38ba:	10 92 4d 04 	sts	0x044D, r1
    38be:	10 92 4e 04 	sts	0x044E, r1
    38c2:	10 92 4f 04 	sts	0x044F, r1
    38c6:	8d e0       	ldi	r24, 0x0D	; 13
    38c8:	6c e6       	ldi	r22, 0x6C	; 108
    38ca:	76 e2       	ldi	r23, 0x26	; 38
    38cc:	0e 94 cf 24 	call	0x499e	; 0x499e <ISR_attach>
    38d0:	82 e0       	ldi	r24, 0x02	; 2
    38d2:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__SPKR_init>
    38d6:	10 93 4a 04 	sts	0x044A, r17
    38da:	89 e0       	ldi	r24, 0x09	; 9
    38dc:	61 e0       	ldi	r22, 0x01	; 1
    38de:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    38e2:	91 e0       	ldi	r25, 0x01	; 1
    38e4:	89 e0       	ldi	r24, 0x09	; 9
    38e6:	1f 91       	pop	r17
    38e8:	08 95       	ret

000038ea <SPKR_open>:
    38ea:	81 30       	cpi	r24, 0x01	; 1
    38ec:	29 f0       	breq	.+10     	; 0x38f8 <SPKR_open+0xe>
    38ee:	82 30       	cpi	r24, 0x02	; 2
    38f0:	31 f0       	breq	.+12     	; 0x38fe <SPKR_open+0x14>
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	89 e0       	ldi	r24, 0x09	; 9
    38f6:	08 95       	ret
    38f8:	0e 94 33 1c 	call	0x3866	; 0x3866 <__SPKR_open_beep_mode>
    38fc:	08 95       	ret
    38fe:	0e 94 49 1c 	call	0x3892	; 0x3892 <__SPKR_open_tone_mode>
    3902:	08 95       	ret

00003904 <STEPPER_get_nSteps>:
    3904:	80 91 26 07 	lds	r24, 0x0726
    3908:	90 91 27 07 	lds	r25, 0x0727
    390c:	20 91 28 07 	lds	r18, 0x0728
    3910:	30 91 29 07 	lds	r19, 0x0729
    3914:	bc 01       	movw	r22, r24
    3916:	c9 01       	movw	r24, r18
    3918:	08 95       	ret

0000391a <STEPPER_stepmode>:
    391a:	2f 92       	push	r2
    391c:	3f 92       	push	r3
    391e:	4f 92       	push	r4
    3920:	5f 92       	push	r5
    3922:	6f 92       	push	r6
    3924:	7f 92       	push	r7
    3926:	8f 92       	push	r8
    3928:	9f 92       	push	r9
    392a:	af 92       	push	r10
    392c:	bf 92       	push	r11
    392e:	cf 92       	push	r12
    3930:	df 92       	push	r13
    3932:	ef 92       	push	r14
    3934:	ff 92       	push	r15
    3936:	0f 93       	push	r16
    3938:	1f 93       	push	r17
    393a:	df 93       	push	r29
    393c:	cf 93       	push	r28
    393e:	cd b7       	in	r28, 0x3d	; 61
    3940:	de b7       	in	r29, 0x3e	; 62
    3942:	58 2e       	mov	r5, r24
    3944:	96 2e       	mov	r9, r22
    3946:	44 2e       	mov	r4, r20
    3948:	39 01       	movw	r6, r18
    394a:	3c 2c       	mov	r3, r12
    394c:	c9 8c       	ldd	r12, Y+25	; 0x19
    394e:	da 8c       	ldd	r13, Y+26	; 0x1a
    3950:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	68 17       	cp	r22, r24
    3956:	39 f1       	breq	.+78     	; 0x39a6 <STEPPER_stepmode+0x8c>
    3958:	68 17       	cp	r22, r24
    395a:	28 f0       	brcs	.+10     	; 0x3966 <STEPPER_stepmode+0x4c>
    395c:	92 e0       	ldi	r25, 0x02	; 2
    395e:	69 17       	cp	r22, r25
    3960:	09 f0       	breq	.+2      	; 0x3964 <STEPPER_stepmode+0x4a>
    3962:	85 c0       	rjmp	.+266    	; 0x3a6e <STEPPER_stepmode+0x154>
    3964:	49 c0       	rjmp	.+146    	; 0x39f8 <STEPPER_stepmode+0xde>
    3966:	80 e0       	ldi	r24, 0x00	; 0
    3968:	61 e0       	ldi	r22, 0x01	; 1
    396a:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <STEPPER_set_mode>
    396e:	80 e0       	ldi	r24, 0x00	; 0
    3970:	b7 01       	movw	r22, r14
    3972:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <STEPPER_set_accel>
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	64 2d       	mov	r22, r4
    397a:	a3 01       	movw	r20, r6
    397c:	98 01       	movw	r18, r16
    397e:	03 2d       	mov	r16, r3
    3980:	ee 24       	eor	r14, r14
    3982:	e3 94       	inc	r14
    3984:	eb e4       	ldi	r30, 0x4B	; 75
    3986:	ce 2e       	mov	r12, r30
    3988:	e7 e0       	ldi	r30, 0x07	; 7
    398a:	de 2e       	mov	r13, r30
    398c:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <STEPPER_step>
    3990:	55 20       	and	r5, r5
    3992:	09 f0       	breq	.+2      	; 0x3996 <STEPPER_stepmode+0x7c>
    3994:	6c c0       	rjmp	.+216    	; 0x3a6e <STEPPER_stepmode+0x154>
    3996:	00 d0       	rcall	.+0      	; 0x3998 <STEPPER_stepmode+0x7e>
    3998:	0f 92       	push	r0
    399a:	ed b7       	in	r30, 0x3d	; 61
    399c:	fe b7       	in	r31, 0x3e	; 62
    399e:	11 82       	std	Z+1, r1	; 0x01
    39a0:	b3 82       	std	Z+3, r11	; 0x03
    39a2:	a2 82       	std	Z+2, r10	; 0x02
    39a4:	23 c0       	rjmp	.+70     	; 0x39ec <STEPPER_stepmode+0xd2>
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	61 e0       	ldi	r22, 0x01	; 1
    39aa:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <STEPPER_set_mode>
    39ae:	81 e0       	ldi	r24, 0x01	; 1
    39b0:	b6 01       	movw	r22, r12
    39b2:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <STEPPER_set_accel>
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	68 2d       	mov	r22, r8
    39ba:	4d 89       	ldd	r20, Y+21	; 0x15
    39bc:	5e 89       	ldd	r21, Y+22	; 0x16
    39be:	2f 89       	ldd	r18, Y+23	; 0x17
    39c0:	38 8d       	ldd	r19, Y+24	; 0x18
    39c2:	02 2d       	mov	r16, r2
    39c4:	ee 24       	eor	r14, r14
    39c6:	e3 94       	inc	r14
    39c8:	7b e4       	ldi	r23, 0x4B	; 75
    39ca:	c7 2e       	mov	r12, r23
    39cc:	77 e0       	ldi	r23, 0x07	; 7
    39ce:	d7 2e       	mov	r13, r23
    39d0:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <STEPPER_step>
    39d4:	55 20       	and	r5, r5
    39d6:	09 f0       	breq	.+2      	; 0x39da <STEPPER_stepmode+0xc0>
    39d8:	4a c0       	rjmp	.+148    	; 0x3a6e <STEPPER_stepmode+0x154>
    39da:	00 d0       	rcall	.+0      	; 0x39dc <STEPPER_stepmode+0xc2>
    39dc:	0f 92       	push	r0
    39de:	ed b7       	in	r30, 0x3d	; 61
    39e0:	fe b7       	in	r31, 0x3e	; 62
    39e2:	91 82       	std	Z+1, r9	; 0x01
    39e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    39e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    39e8:	93 83       	std	Z+3, r25	; 0x03
    39ea:	82 83       	std	Z+2, r24	; 0x02
    39ec:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <STEPPER_wait_and_then>
    39f0:	0f 90       	pop	r0
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	3b c0       	rjmp	.+118    	; 0x3a6e <STEPPER_stepmode+0x154>
    39f8:	82 e0       	ldi	r24, 0x02	; 2
    39fa:	61 e0       	ldi	r22, 0x01	; 1
    39fc:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <STEPPER_set_mode>
    3a00:	80 e0       	ldi	r24, 0x00	; 0
    3a02:	b7 01       	movw	r22, r14
    3a04:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <STEPPER_set_accel>
    3a08:	81 e0       	ldi	r24, 0x01	; 1
    3a0a:	b6 01       	movw	r22, r12
    3a0c:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <STEPPER_set_accel>
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	64 2d       	mov	r22, r4
    3a14:	a3 01       	movw	r20, r6
    3a16:	98 01       	movw	r18, r16
    3a18:	03 2d       	mov	r16, r3
    3a1a:	ee 24       	eor	r14, r14
    3a1c:	e3 94       	inc	r14
    3a1e:	9b e4       	ldi	r25, 0x4B	; 75
    3a20:	c9 2e       	mov	r12, r25
    3a22:	97 e0       	ldi	r25, 0x07	; 7
    3a24:	d9 2e       	mov	r13, r25
    3a26:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <STEPPER_step>
    3a2a:	81 e0       	ldi	r24, 0x01	; 1
    3a2c:	68 2d       	mov	r22, r8
    3a2e:	4d 89       	ldd	r20, Y+21	; 0x15
    3a30:	5e 89       	ldd	r21, Y+22	; 0x16
    3a32:	2f 89       	ldd	r18, Y+23	; 0x17
    3a34:	38 8d       	ldd	r19, Y+24	; 0x18
    3a36:	02 2d       	mov	r16, r2
    3a38:	0e 94 e8 1e 	call	0x3dd0	; 0x3dd0 <STEPPER_step>
    3a3c:	55 20       	and	r5, r5
    3a3e:	b9 f4       	brne	.+46     	; 0x3a6e <STEPPER_stepmode+0x154>
    3a40:	00 d0       	rcall	.+0      	; 0x3a42 <STEPPER_stepmode+0x128>
    3a42:	00 d0       	rcall	.+0      	; 0x3a44 <STEPPER_stepmode+0x12a>
    3a44:	0f 92       	push	r0
    3a46:	ad b7       	in	r26, 0x3d	; 61
    3a48:	be b7       	in	r27, 0x3e	; 62
    3a4a:	11 96       	adiw	r26, 0x01	; 1
    3a4c:	ed b7       	in	r30, 0x3d	; 61
    3a4e:	fe b7       	in	r31, 0x3e	; 62
    3a50:	91 82       	std	Z+1, r9	; 0x01
    3a52:	fd 01       	movw	r30, r26
    3a54:	b2 82       	std	Z+2, r11	; 0x02
    3a56:	a1 82       	std	Z+1, r10	; 0x01
    3a58:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a5a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a5c:	94 83       	std	Z+4, r25	; 0x04
    3a5e:	83 83       	std	Z+3, r24	; 0x03
    3a60:	0e 94 99 1f 	call	0x3f32	; 0x3f32 <STEPPER_wait_and_then>
    3a64:	0f 90       	pop	r0
    3a66:	0f 90       	pop	r0
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	cf 91       	pop	r28
    3a70:	df 91       	pop	r29
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	ef 90       	pop	r14
    3a7a:	df 90       	pop	r13
    3a7c:	cf 90       	pop	r12
    3a7e:	bf 90       	pop	r11
    3a80:	af 90       	pop	r10
    3a82:	9f 90       	pop	r9
    3a84:	8f 90       	pop	r8
    3a86:	7f 90       	pop	r7
    3a88:	6f 90       	pop	r6
    3a8a:	5f 90       	pop	r5
    3a8c:	4f 90       	pop	r4
    3a8e:	3f 90       	pop	r3
    3a90:	2f 90       	pop	r2
    3a92:	08 95       	ret

00003a94 <STEPPER_move>:
    3a94:	6f 92       	push	r6
    3a96:	7f 92       	push	r7
    3a98:	8f 92       	push	r8
    3a9a:	9f 92       	push	r9
    3a9c:	af 92       	push	r10
    3a9e:	bf 92       	push	r11
    3aa0:	cf 92       	push	r12
    3aa2:	df 92       	push	r13
    3aa4:	ef 92       	push	r14
    3aa6:	ff 92       	push	r15
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	df 93       	push	r29
    3aae:	cf 93       	push	r28
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	94 2e       	mov	r9, r20
    3ab6:	7c 2d       	mov	r23, r12
    3ab8:	d5 01       	movw	r26, r10
    3aba:	49 89       	ldd	r20, Y+17	; 0x11
    3abc:	5a 89       	ldd	r21, Y+18	; 0x12
    3abe:	ab 88       	ldd	r10, Y+19	; 0x13
    3ac0:	bc 88       	ldd	r11, Y+20	; 0x14
    3ac2:	cd 88       	ldd	r12, Y+21	; 0x15
    3ac4:	de 88       	ldd	r13, Y+22	; 0x16
    3ac6:	9f 89       	ldd	r25, Y+23	; 0x17
    3ac8:	81 30       	cpi	r24, 0x01	; 1
    3aca:	09 f4       	brne	.+2      	; 0x3ace <STEPPER_move+0x3a>
    3acc:	57 c0       	rjmp	.+174    	; 0x3b7c <STEPPER_move+0xe8>
    3ace:	81 30       	cpi	r24, 0x01	; 1
    3ad0:	b8 f1       	brcs	.+110    	; 0x3b40 <STEPPER_move+0xac>
    3ad2:	82 30       	cpi	r24, 0x02	; 2
    3ad4:	09 f0       	breq	.+2      	; 0x3ad8 <STEPPER_move+0x44>
    3ad6:	76 c0       	rjmp	.+236    	; 0x3bc4 <STEPPER_move+0x130>
    3ad8:	61 30       	cpi	r22, 0x01	; 1
    3ada:	91 f0       	breq	.+36     	; 0x3b00 <STEPPER_move+0x6c>
    3adc:	61 30       	cpi	r22, 0x01	; 1
    3ade:	20 f0       	brcs	.+8      	; 0x3ae8 <STEPPER_move+0x54>
    3ae0:	62 30       	cpi	r22, 0x02	; 2
    3ae2:	09 f0       	breq	.+2      	; 0x3ae6 <STEPPER_move+0x52>
    3ae4:	6f c0       	rjmp	.+222    	; 0x3bc4 <STEPPER_move+0x130>
    3ae6:	15 c0       	rjmp	.+42     	; 0x3b12 <STEPPER_move+0x7e>
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	60 e0       	ldi	r22, 0x00	; 0
    3aec:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <STEPPER_set_mode>
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	b7 01       	movw	r22, r14
    3af4:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <STEPPER_set_accel>
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	69 2d       	mov	r22, r9
    3afc:	a8 01       	movw	r20, r16
    3afe:	1d c0       	rjmp	.+58     	; 0x3b3a <STEPPER_move+0xa6>
    3b00:	81 e0       	ldi	r24, 0x01	; 1
    3b02:	60 e0       	ldi	r22, 0x00	; 0
    3b04:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <STEPPER_set_mode>
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	b6 01       	movw	r22, r12
    3b0c:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <STEPPER_set_accel>
    3b10:	11 c0       	rjmp	.+34     	; 0x3b34 <STEPPER_move+0xa0>
    3b12:	82 e0       	ldi	r24, 0x02	; 2
    3b14:	60 e0       	ldi	r22, 0x00	; 0
    3b16:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <STEPPER_set_mode>
    3b1a:	80 e0       	ldi	r24, 0x00	; 0
    3b1c:	b7 01       	movw	r22, r14
    3b1e:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <STEPPER_set_accel>
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	b6 01       	movw	r22, r12
    3b26:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <STEPPER_set_accel>
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	69 2d       	mov	r22, r9
    3b2e:	a8 01       	movw	r20, r16
    3b30:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <STEPPER_run>
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	68 2d       	mov	r22, r8
    3b38:	a5 01       	movw	r20, r10
    3b3a:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <STEPPER_run>
    3b3e:	42 c0       	rjmp	.+132    	; 0x3bc4 <STEPPER_move+0x130>
    3b40:	ed b7       	in	r30, 0x3d	; 61
    3b42:	fe b7       	in	r31, 0x3e	; 62
    3b44:	39 97       	sbiw	r30, 0x09	; 9
    3b46:	0f b6       	in	r0, 0x3f	; 63
    3b48:	f8 94       	cli
    3b4a:	fe bf       	out	0x3e, r31	; 62
    3b4c:	0f be       	out	0x3f, r0	; 63
    3b4e:	ed bf       	out	0x3d, r30	; 61
    3b50:	6d b6       	in	r6, 0x3d	; 61
    3b52:	7e b6       	in	r7, 0x3e	; 62
    3b54:	08 94       	sec
    3b56:	61 1c       	adc	r6, r1
    3b58:	71 1c       	adc	r7, r1
    3b5a:	52 83       	std	Z+2, r21	; 0x02
    3b5c:	41 83       	std	Z+1, r20	; 0x01
    3b5e:	f3 01       	movw	r30, r6
    3b60:	b3 82       	std	Z+3, r11	; 0x03
    3b62:	a2 82       	std	Z+2, r10	; 0x02
    3b64:	d5 82       	std	Z+5, r13	; 0x05
    3b66:	c4 82       	std	Z+4, r12	; 0x04
    3b68:	96 83       	std	Z+6, r25	; 0x06
    3b6a:	88 8d       	ldd	r24, Y+24	; 0x18
    3b6c:	99 8d       	ldd	r25, Y+25	; 0x19
    3b6e:	90 87       	std	Z+8, r25	; 0x08
    3b70:	87 83       	std	Z+7, r24	; 0x07
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	49 2d       	mov	r20, r9
    3b76:	c7 2e       	mov	r12, r23
    3b78:	5d 01       	movw	r10, r26
    3b7a:	1a c0       	rjmp	.+52     	; 0x3bb0 <STEPPER_move+0x11c>
    3b7c:	ed b7       	in	r30, 0x3d	; 61
    3b7e:	fe b7       	in	r31, 0x3e	; 62
    3b80:	39 97       	sbiw	r30, 0x09	; 9
    3b82:	0f b6       	in	r0, 0x3f	; 63
    3b84:	f8 94       	cli
    3b86:	fe bf       	out	0x3e, r31	; 62
    3b88:	0f be       	out	0x3f, r0	; 63
    3b8a:	ed bf       	out	0x3d, r30	; 61
    3b8c:	ad b7       	in	r26, 0x3d	; 61
    3b8e:	be b7       	in	r27, 0x3e	; 62
    3b90:	11 96       	adiw	r26, 0x01	; 1
    3b92:	52 83       	std	Z+2, r21	; 0x02
    3b94:	41 83       	std	Z+1, r20	; 0x01
    3b96:	fd 01       	movw	r30, r26
    3b98:	b3 82       	std	Z+3, r11	; 0x03
    3b9a:	a2 82       	std	Z+2, r10	; 0x02
    3b9c:	d5 82       	std	Z+5, r13	; 0x05
    3b9e:	c4 82       	std	Z+4, r12	; 0x04
    3ba0:	96 83       	std	Z+6, r25	; 0x06
    3ba2:	10 86       	std	Z+8, r1	; 0x08
    3ba4:	17 82       	std	Z+7, r1	; 0x07
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	49 2d       	mov	r20, r9
    3baa:	c7 2e       	mov	r12, r23
    3bac:	aa 24       	eor	r10, r10
    3bae:	bb 24       	eor	r11, r11
    3bb0:	0e 94 8d 1c 	call	0x391a	; 0x391a <STEPPER_stepmode>
    3bb4:	8d b7       	in	r24, 0x3d	; 61
    3bb6:	9e b7       	in	r25, 0x3e	; 62
    3bb8:	09 96       	adiw	r24, 0x09	; 9
    3bba:	0f b6       	in	r0, 0x3f	; 63
    3bbc:	f8 94       	cli
    3bbe:	9e bf       	out	0x3e, r25	; 62
    3bc0:	0f be       	out	0x3f, r0	; 63
    3bc2:	8d bf       	out	0x3d, r24	; 61
    3bc4:	cf 91       	pop	r28
    3bc6:	df 91       	pop	r29
    3bc8:	1f 91       	pop	r17
    3bca:	0f 91       	pop	r16
    3bcc:	ff 90       	pop	r15
    3bce:	ef 90       	pop	r14
    3bd0:	df 90       	pop	r13
    3bd2:	cf 90       	pop	r12
    3bd4:	bf 90       	pop	r11
    3bd6:	af 90       	pop	r10
    3bd8:	9f 90       	pop	r9
    3bda:	8f 90       	pop	r8
    3bdc:	7f 90       	pop	r7
    3bde:	6f 90       	pop	r6
    3be0:	08 95       	ret

00003be2 <STEPPER_open>:
    3be2:	0e 94 7b 27 	call	0x4ef6	; 0x4ef6 <__STEPPER_init>
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	80 93 4a 07 	sts	0x074A, r24
    3bec:	e4 e1       	ldi	r30, 0x14	; 20
    3bee:	f7 e0       	ldi	r31, 0x07	; 7
    3bf0:	11 92       	st	Z+, r1
    3bf2:	11 92       	st	Z+, r1
    3bf4:	11 82       	std	Z+1, r1	; 0x01
    3bf6:	10 82       	st	Z, r1
    3bf8:	32 96       	adiw	r30, 0x02	; 2
    3bfa:	11 82       	std	Z+1, r1	; 0x01
    3bfc:	10 82       	st	Z, r1
    3bfe:	32 96       	adiw	r30, 0x02	; 2
    3c00:	11 82       	std	Z+1, r1	; 0x01
    3c02:	10 82       	st	Z, r1
    3c04:	32 96       	adiw	r30, 0x02	; 2
    3c06:	11 82       	std	Z+1, r1	; 0x01
    3c08:	10 82       	st	Z, r1
    3c0a:	32 96       	adiw	r30, 0x02	; 2
    3c0c:	11 82       	std	Z+1, r1	; 0x01
    3c0e:	10 82       	st	Z, r1
    3c10:	32 96       	adiw	r30, 0x02	; 2
    3c12:	11 82       	std	Z+1, r1	; 0x01
    3c14:	10 82       	st	Z, r1
    3c16:	32 96       	adiw	r30, 0x02	; 2
    3c18:	11 82       	std	Z+1, r1	; 0x01
    3c1a:	10 82       	st	Z, r1
    3c1c:	32 96       	adiw	r30, 0x02	; 2
    3c1e:	11 82       	std	Z+1, r1	; 0x01
    3c20:	10 82       	st	Z, r1
    3c22:	32 96       	adiw	r30, 0x02	; 2
    3c24:	11 82       	std	Z+1, r1	; 0x01
    3c26:	10 82       	st	Z, r1
    3c28:	32 96       	adiw	r30, 0x02	; 2
    3c2a:	11 82       	std	Z+1, r1	; 0x01
    3c2c:	10 82       	st	Z, r1
    3c2e:	32 96       	adiw	r30, 0x02	; 2
    3c30:	11 82       	std	Z+1, r1	; 0x01
    3c32:	10 82       	st	Z, r1
    3c34:	32 96       	adiw	r30, 0x02	; 2
    3c36:	11 82       	std	Z+1, r1	; 0x01
    3c38:	10 82       	st	Z, r1
    3c3a:	36 96       	adiw	r30, 0x06	; 6
    3c3c:	11 92       	st	Z+, r1
    3c3e:	11 92       	st	Z+, r1
    3c40:	11 92       	st	Z+, r1
    3c42:	10 82       	st	Z, r1
    3c44:	32 96       	adiw	r30, 0x02	; 2
    3c46:	11 92       	st	Z+, r1
    3c48:	11 92       	st	Z+, r1
    3c4a:	11 92       	st	Z+, r1
    3c4c:	11 92       	st	Z+, r1
    3c4e:	11 92       	st	Z+, r1
    3c50:	11 92       	st	Z+, r1
    3c52:	11 92       	st	Z+, r1
    3c54:	11 82       	std	Z+1, r1	; 0x01
    3c56:	10 82       	st	Z, r1
    3c58:	32 96       	adiw	r30, 0x02	; 2
    3c5a:	11 82       	std	Z+1, r1	; 0x01
    3c5c:	10 82       	st	Z, r1
    3c5e:	32 96       	adiw	r30, 0x02	; 2
    3c60:	11 82       	std	Z+1, r1	; 0x01
    3c62:	10 82       	st	Z, r1
    3c64:	32 96       	adiw	r30, 0x02	; 2
    3c66:	11 82       	std	Z+1, r1	; 0x01
    3c68:	10 82       	st	Z, r1
    3c6a:	76 97       	sbiw	r30, 0x16	; 22
    3c6c:	11 82       	std	Z+1, r1	; 0x01
    3c6e:	10 82       	st	Z, r1
    3c70:	32 96       	adiw	r30, 0x02	; 2
    3c72:	11 82       	std	Z+1, r1	; 0x01
    3c74:	10 82       	st	Z, r1
    3c76:	10 92 49 07 	sts	0x0749, r1
    3c7a:	10 92 48 07 	sts	0x0748, r1
    3c7e:	10 92 4a 07 	sts	0x074A, r1
    3c82:	87 e0       	ldi	r24, 0x07	; 7
    3c84:	61 e0       	ldi	r22, 0x01	; 1
    3c86:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    3c8a:	87 e0       	ldi	r24, 0x07	; 7
    3c8c:	91 e0       	ldi	r25, 0x01	; 1
    3c8e:	08 95       	ret

00003c90 <STEPPER_run>:
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	18 2f       	mov	r17, r24
    3c9a:	06 2f       	mov	r16, r22
    3c9c:	7a 01       	movw	r14, r20
    3c9e:	60 e0       	ldi	r22, 0x00	; 0
    3ca0:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <STEPPER_set_mode>
    3ca4:	81 2f       	mov	r24, r17
    3ca6:	60 2f       	mov	r22, r16
    3ca8:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <STEPPER_set_dir>
    3cac:	81 2f       	mov	r24, r17
    3cae:	b7 01       	movw	r22, r14
    3cb0:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <STEPPER_set_speed>
    3cb4:	1f 91       	pop	r17
    3cb6:	0f 91       	pop	r16
    3cb8:	ff 90       	pop	r15
    3cba:	ef 90       	pop	r14
    3cbc:	08 95       	ret

00003cbe <STEPPER_set_accel>:
    3cbe:	48 2f       	mov	r20, r24
    3cc0:	81 e0       	ldi	r24, 0x01	; 1
    3cc2:	80 93 4a 07 	sts	0x074A, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	23 e0       	ldi	r18, 0x03	; 3
    3cca:	69 3e       	cpi	r22, 0xE9	; 233
    3ccc:	72 07       	cpc	r23, r18
    3cce:	10 f0       	brcs	.+4      	; 0x3cd4 <STEPPER_set_accel+0x16>
    3cd0:	88 ee       	ldi	r24, 0xE8	; 232
    3cd2:	93 e0       	ldi	r25, 0x03	; 3
    3cd4:	41 30       	cpi	r20, 0x01	; 1
    3cd6:	71 f0       	breq	.+28     	; 0x3cf4 <STEPPER_set_accel+0x36>
    3cd8:	41 30       	cpi	r20, 0x01	; 1
    3cda:	18 f0       	brcs	.+6      	; 0x3ce2 <STEPPER_set_accel+0x24>
    3cdc:	42 30       	cpi	r20, 0x02	; 2
    3cde:	71 f4       	brne	.+28     	; 0x3cfc <STEPPER_set_accel+0x3e>
    3ce0:	05 c0       	rjmp	.+10     	; 0x3cec <STEPPER_set_accel+0x2e>
    3ce2:	90 93 1f 07 	sts	0x071F, r25
    3ce6:	80 93 1e 07 	sts	0x071E, r24
    3cea:	08 c0       	rjmp	.+16     	; 0x3cfc <STEPPER_set_accel+0x3e>
    3cec:	90 93 1f 07 	sts	0x071F, r25
    3cf0:	80 93 1e 07 	sts	0x071E, r24
    3cf4:	90 93 21 07 	sts	0x0721, r25
    3cf8:	80 93 20 07 	sts	0x0720, r24
    3cfc:	10 92 4a 07 	sts	0x074A, r1
    3d00:	08 95       	ret

00003d02 <STEPPER_set_dir>:
    3d02:	98 2f       	mov	r25, r24
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	80 93 4a 07 	sts	0x074A, r24
    3d0a:	91 30       	cpi	r25, 0x01	; 1
    3d0c:	51 f0       	breq	.+20     	; 0x3d22 <STEPPER_set_dir+0x20>
    3d0e:	91 30       	cpi	r25, 0x01	; 1
    3d10:	18 f0       	brcs	.+6      	; 0x3d18 <STEPPER_set_dir+0x16>
    3d12:	92 30       	cpi	r25, 0x02	; 2
    3d14:	41 f4       	brne	.+16     	; 0x3d26 <STEPPER_set_dir+0x24>
    3d16:	03 c0       	rjmp	.+6      	; 0x3d1e <STEPPER_set_dir+0x1c>
    3d18:	60 93 37 07 	sts	0x0737, r22
    3d1c:	04 c0       	rjmp	.+8      	; 0x3d26 <STEPPER_set_dir+0x24>
    3d1e:	60 93 37 07 	sts	0x0737, r22
    3d22:	60 93 38 07 	sts	0x0738, r22
    3d26:	10 92 4a 07 	sts	0x074A, r1
    3d2a:	08 95       	ret

00003d2c <STEPPER_set_mode>:
    3d2c:	98 2f       	mov	r25, r24
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	80 93 4a 07 	sts	0x074A, r24
    3d34:	91 30       	cpi	r25, 0x01	; 1
    3d36:	51 f0       	breq	.+20     	; 0x3d4c <STEPPER_set_mode+0x20>
    3d38:	91 30       	cpi	r25, 0x01	; 1
    3d3a:	18 f0       	brcs	.+6      	; 0x3d42 <STEPPER_set_mode+0x16>
    3d3c:	92 30       	cpi	r25, 0x02	; 2
    3d3e:	41 f4       	brne	.+16     	; 0x3d50 <STEPPER_set_mode+0x24>
    3d40:	03 c0       	rjmp	.+6      	; 0x3d48 <STEPPER_set_mode+0x1c>
    3d42:	60 93 14 07 	sts	0x0714, r22
    3d46:	04 c0       	rjmp	.+8      	; 0x3d50 <STEPPER_set_mode+0x24>
    3d48:	60 93 14 07 	sts	0x0714, r22
    3d4c:	60 93 15 07 	sts	0x0715, r22
    3d50:	10 92 4a 07 	sts	0x074A, r1
    3d54:	08 95       	ret

00003d56 <STEPPER_set_speed>:
    3d56:	48 2f       	mov	r20, r24
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	80 93 4a 07 	sts	0x074A, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	21 e0       	ldi	r18, 0x01	; 1
    3d62:	61 39       	cpi	r22, 0x91	; 145
    3d64:	72 07       	cpc	r23, r18
    3d66:	10 f0       	brcs	.+4      	; 0x3d6c <STEPPER_set_speed+0x16>
    3d68:	80 e9       	ldi	r24, 0x90	; 144
    3d6a:	91 e0       	ldi	r25, 0x01	; 1
    3d6c:	41 30       	cpi	r20, 0x01	; 1
    3d6e:	71 f0       	breq	.+28     	; 0x3d8c <STEPPER_set_speed+0x36>
    3d70:	41 30       	cpi	r20, 0x01	; 1
    3d72:	18 f0       	brcs	.+6      	; 0x3d7a <STEPPER_set_speed+0x24>
    3d74:	42 30       	cpi	r20, 0x02	; 2
    3d76:	71 f4       	brne	.+28     	; 0x3d94 <STEPPER_set_speed+0x3e>
    3d78:	05 c0       	rjmp	.+10     	; 0x3d84 <STEPPER_set_speed+0x2e>
    3d7a:	90 93 17 07 	sts	0x0717, r25
    3d7e:	80 93 16 07 	sts	0x0716, r24
    3d82:	08 c0       	rjmp	.+16     	; 0x3d94 <STEPPER_set_speed+0x3e>
    3d84:	90 93 17 07 	sts	0x0717, r25
    3d88:	80 93 16 07 	sts	0x0716, r24
    3d8c:	90 93 19 07 	sts	0x0719, r25
    3d90:	80 93 18 07 	sts	0x0718, r24
    3d94:	10 92 4a 07 	sts	0x074A, r1
    3d98:	08 95       	ret

00003d9a <STEPPER_set_steps>:
    3d9a:	98 2f       	mov	r25, r24
    3d9c:	81 e0       	ldi	r24, 0x01	; 1
    3d9e:	80 93 4a 07 	sts	0x074A, r24
    3da2:	91 30       	cpi	r25, 0x01	; 1
    3da4:	71 f0       	breq	.+28     	; 0x3dc2 <STEPPER_set_steps+0x28>
    3da6:	91 30       	cpi	r25, 0x01	; 1
    3da8:	18 f0       	brcs	.+6      	; 0x3db0 <STEPPER_set_steps+0x16>
    3daa:	92 30       	cpi	r25, 0x02	; 2
    3dac:	71 f4       	brne	.+28     	; 0x3dca <STEPPER_set_steps+0x30>
    3dae:	05 c0       	rjmp	.+10     	; 0x3dba <STEPPER_set_steps+0x20>
    3db0:	70 93 27 07 	sts	0x0727, r23
    3db4:	60 93 26 07 	sts	0x0726, r22
    3db8:	08 c0       	rjmp	.+16     	; 0x3dca <STEPPER_set_steps+0x30>
    3dba:	70 93 27 07 	sts	0x0727, r23
    3dbe:	60 93 26 07 	sts	0x0726, r22
    3dc2:	70 93 29 07 	sts	0x0729, r23
    3dc6:	60 93 28 07 	sts	0x0728, r22
    3dca:	10 92 4a 07 	sts	0x074A, r1
    3dce:	08 95       	ret

00003dd0 <STEPPER_step>:
    3dd0:	8f 92       	push	r8
    3dd2:	9f 92       	push	r9
    3dd4:	af 92       	push	r10
    3dd6:	bf 92       	push	r11
    3dd8:	cf 92       	push	r12
    3dda:	df 92       	push	r13
    3ddc:	ef 92       	push	r14
    3dde:	ff 92       	push	r15
    3de0:	0f 93       	push	r16
    3de2:	1f 93       	push	r17
    3de4:	cf 93       	push	r28
    3de6:	df 93       	push	r29
    3de8:	18 2f       	mov	r17, r24
    3dea:	f6 2e       	mov	r15, r22
    3dec:	5a 01       	movw	r10, r20
    3dee:	49 01       	movw	r8, r18
    3df0:	e6 01       	movw	r28, r12
    3df2:	61 e0       	ldi	r22, 0x01	; 1
    3df4:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <STEPPER_set_mode>
    3df8:	81 2f       	mov	r24, r17
    3dfa:	b5 01       	movw	r22, r10
    3dfc:	a4 01       	movw	r20, r8
    3dfe:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <STEPPER_setup_decels>
    3e02:	81 2f       	mov	r24, r17
    3e04:	6f 2d       	mov	r22, r15
    3e06:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <STEPPER_set_dir>
    3e0a:	81 2f       	mov	r24, r17
    3e0c:	60 2f       	mov	r22, r16
    3e0e:	0e 94 85 27 	call	0x4f0a	; 0x4f0a <STEPPER_set_stop_mode>
    3e12:	81 2f       	mov	r24, r17
    3e14:	b5 01       	movw	r22, r10
    3e16:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <STEPPER_set_steps>
    3e1a:	c1 14       	cp	r12, r1
    3e1c:	d1 04       	cpc	r13, r1
    3e1e:	99 f0       	breq	.+38     	; 0x3e46 <STEPPER_step+0x76>
    3e20:	11 30       	cpi	r17, 0x01	; 1
    3e22:	49 f0       	breq	.+18     	; 0x3e36 <STEPPER_step+0x66>
    3e24:	11 30       	cpi	r17, 0x01	; 1
    3e26:	18 f0       	brcs	.+6      	; 0x3e2e <STEPPER_step+0x5e>
    3e28:	12 30       	cpi	r17, 0x02	; 2
    3e2a:	69 f4       	brne	.+26     	; 0x3e46 <STEPPER_step+0x76>
    3e2c:	06 c0       	rjmp	.+12     	; 0x3e3a <STEPPER_step+0x6a>
    3e2e:	18 82       	st	Y, r1
    3e30:	10 92 46 07 	sts	0x0746, r1
    3e34:	08 c0       	rjmp	.+16     	; 0x3e46 <STEPPER_step+0x76>
    3e36:	19 82       	std	Y+1, r1	; 0x01
    3e38:	04 c0       	rjmp	.+8      	; 0x3e42 <STEPPER_step+0x72>
    3e3a:	18 82       	st	Y, r1
    3e3c:	19 82       	std	Y+1, r1	; 0x01
    3e3e:	10 92 46 07 	sts	0x0746, r1
    3e42:	10 92 47 07 	sts	0x0747, r1
    3e46:	d0 93 49 07 	sts	0x0749, r29
    3e4a:	c0 93 48 07 	sts	0x0748, r28
    3e4e:	ee 20       	and	r14, r14
    3e50:	b9 f5       	brne	.+110    	; 0x3ec0 <STEPPER_step+0xf0>
    3e52:	8a ee       	ldi	r24, 0xEA	; 234
    3e54:	93 e0       	ldi	r25, 0x03	; 3
    3e56:	90 93 49 07 	sts	0x0749, r25
    3e5a:	80 93 48 07 	sts	0x0748, r24
    3e5e:	81 2f       	mov	r24, r17
    3e60:	b4 01       	movw	r22, r8
    3e62:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <STEPPER_set_speed>
    3e66:	81 2f       	mov	r24, r17
    3e68:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <STEPPER_go>
    3e6c:	11 30       	cpi	r17, 0x01	; 1
    3e6e:	71 f0       	breq	.+28     	; 0x3e8c <STEPPER_step+0xbc>
    3e70:	11 30       	cpi	r17, 0x01	; 1
    3e72:	18 f0       	brcs	.+6      	; 0x3e7a <STEPPER_step+0xaa>
    3e74:	12 30       	cpi	r17, 0x02	; 2
    3e76:	59 f5       	brne	.+86     	; 0x3ece <STEPPER_step+0xfe>
    3e78:	12 c0       	rjmp	.+36     	; 0x3e9e <STEPPER_step+0xce>
    3e7a:	10 92 ea 03 	sts	0x03EA, r1
    3e7e:	10 92 46 07 	sts	0x0746, r1
    3e82:	80 91 ea 03 	lds	r24, 0x03EA
    3e86:	88 23       	and	r24, r24
    3e88:	e1 f3       	breq	.-8      	; 0x3e82 <STEPPER_step+0xb2>
    3e8a:	21 c0       	rjmp	.+66     	; 0x3ece <STEPPER_step+0xfe>
    3e8c:	10 92 eb 03 	sts	0x03EB, r1
    3e90:	10 92 47 07 	sts	0x0747, r1
    3e94:	80 91 eb 03 	lds	r24, 0x03EB
    3e98:	88 23       	and	r24, r24
    3e9a:	e1 f3       	breq	.-8      	; 0x3e94 <STEPPER_step+0xc4>
    3e9c:	18 c0       	rjmp	.+48     	; 0x3ece <STEPPER_step+0xfe>
    3e9e:	10 92 ea 03 	sts	0x03EA, r1
    3ea2:	10 92 eb 03 	sts	0x03EB, r1
    3ea6:	10 92 46 07 	sts	0x0746, r1
    3eaa:	10 92 47 07 	sts	0x0747, r1
    3eae:	80 91 ea 03 	lds	r24, 0x03EA
    3eb2:	88 23       	and	r24, r24
    3eb4:	e1 f3       	breq	.-8      	; 0x3eae <STEPPER_step+0xde>
    3eb6:	80 91 eb 03 	lds	r24, 0x03EB
    3eba:	88 23       	and	r24, r24
    3ebc:	c1 f3       	breq	.-16     	; 0x3eae <STEPPER_step+0xde>
    3ebe:	07 c0       	rjmp	.+14     	; 0x3ece <STEPPER_step+0xfe>
    3ec0:	81 2f       	mov	r24, r17
    3ec2:	b4 01       	movw	r22, r8
    3ec4:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <STEPPER_set_speed>
    3ec8:	81 2f       	mov	r24, r17
    3eca:	0e 94 66 27 	call	0x4ecc	; 0x4ecc <STEPPER_go>
    3ece:	df 91       	pop	r29
    3ed0:	cf 91       	pop	r28
    3ed2:	1f 91       	pop	r17
    3ed4:	0f 91       	pop	r16
    3ed6:	ff 90       	pop	r15
    3ed8:	ef 90       	pop	r14
    3eda:	df 90       	pop	r13
    3edc:	cf 90       	pop	r12
    3ede:	bf 90       	pop	r11
    3ee0:	af 90       	pop	r10
    3ee2:	9f 90       	pop	r9
    3ee4:	8f 90       	pop	r8
    3ee6:	08 95       	ret

00003ee8 <STEPPER_stop>:
    3ee8:	0f 93       	push	r16
    3eea:	1f 93       	push	r17
    3eec:	18 2f       	mov	r17, r24
    3eee:	06 2f       	mov	r16, r22
    3ef0:	66 23       	and	r22, r22
    3ef2:	49 f4       	brne	.+18     	; 0x3f06 <STEPPER_stop+0x1e>
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	70 e0       	ldi	r23, 0x00	; 0
    3ef8:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <STEPPER_set_speed>
    3efc:	81 2f       	mov	r24, r17
    3efe:	60 e0       	ldi	r22, 0x00	; 0
    3f00:	70 e0       	ldi	r23, 0x00	; 0
    3f02:	0e 94 cd 1e 	call	0x3d9a	; 0x3d9a <STEPPER_set_steps>
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	80 93 4a 07 	sts	0x074A, r24
    3f0c:	11 30       	cpi	r17, 0x01	; 1
    3f0e:	51 f0       	breq	.+20     	; 0x3f24 <STEPPER_stop+0x3c>
    3f10:	11 30       	cpi	r17, 0x01	; 1
    3f12:	18 f0       	brcs	.+6      	; 0x3f1a <STEPPER_stop+0x32>
    3f14:	12 30       	cpi	r17, 0x02	; 2
    3f16:	41 f4       	brne	.+16     	; 0x3f28 <STEPPER_stop+0x40>
    3f18:	03 c0       	rjmp	.+6      	; 0x3f20 <STEPPER_stop+0x38>
    3f1a:	00 93 32 07 	sts	0x0732, r16
    3f1e:	04 c0       	rjmp	.+8      	; 0x3f28 <STEPPER_stop+0x40>
    3f20:	00 93 32 07 	sts	0x0732, r16
    3f24:	00 93 33 07 	sts	0x0733, r16
    3f28:	10 92 4a 07 	sts	0x074A, r1
    3f2c:	1f 91       	pop	r17
    3f2e:	0f 91       	pop	r16
    3f30:	08 95       	ret

00003f32 <STEPPER_wait_and_then>:
    3f32:	cf 92       	push	r12
    3f34:	df 92       	push	r13
    3f36:	ef 92       	push	r14
    3f38:	ff 92       	push	r15
    3f3a:	0f 93       	push	r16
    3f3c:	1f 93       	push	r17
    3f3e:	df 93       	push	r29
    3f40:	cf 93       	push	r28
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	8b 85       	ldd	r24, Y+11	; 0x0b
    3f48:	81 30       	cpi	r24, 0x01	; 1
    3f4a:	61 f0       	breq	.+24     	; 0x3f64 <STEPPER_wait_and_then+0x32>
    3f4c:	81 30       	cpi	r24, 0x01	; 1
    3f4e:	18 f0       	brcs	.+6      	; 0x3f56 <STEPPER_wait_and_then+0x24>
    3f50:	82 30       	cpi	r24, 0x02	; 2
    3f52:	a1 f5       	brne	.+104    	; 0x3fbc <STEPPER_wait_and_then+0x8a>
    3f54:	11 c0       	rjmp	.+34     	; 0x3f78 <STEPPER_wait_and_then+0x46>
    3f56:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f58:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f5a:	80 91 4b 07 	lds	r24, 0x074B
    3f5e:	88 23       	and	r24, r24
    3f60:	e1 f3       	breq	.-8      	; 0x3f5a <STEPPER_wait_and_then+0x28>
    3f62:	06 c0       	rjmp	.+12     	; 0x3f70 <STEPPER_wait_and_then+0x3e>
    3f64:	ec 85       	ldd	r30, Y+12	; 0x0c
    3f66:	fd 85       	ldd	r31, Y+13	; 0x0d
    3f68:	80 91 4c 07 	lds	r24, 0x074C
    3f6c:	88 23       	and	r24, r24
    3f6e:	e1 f3       	breq	.-8      	; 0x3f68 <STEPPER_wait_and_then+0x36>
    3f70:	30 97       	sbiw	r30, 0x00	; 0
    3f72:	21 f1       	breq	.+72     	; 0x3fbc <STEPPER_wait_and_then+0x8a>
    3f74:	09 95       	icall
    3f76:	22 c0       	rjmp	.+68     	; 0x3fbc <STEPPER_wait_and_then+0x8a>
    3f78:	cc 84       	ldd	r12, Y+12	; 0x0c
    3f7a:	dd 84       	ldd	r13, Y+13	; 0x0d
    3f7c:	ee 84       	ldd	r14, Y+14	; 0x0e
    3f7e:	ff 84       	ldd	r15, Y+15	; 0x0f
    3f80:	00 e0       	ldi	r16, 0x00	; 0
    3f82:	10 e0       	ldi	r17, 0x00	; 0
    3f84:	00 23       	and	r16, r16
    3f86:	51 f4       	brne	.+20     	; 0x3f9c <STEPPER_wait_and_then+0x6a>
    3f88:	80 91 4b 07 	lds	r24, 0x074B
    3f8c:	88 23       	and	r24, r24
    3f8e:	31 f0       	breq	.+12     	; 0x3f9c <STEPPER_wait_and_then+0x6a>
    3f90:	c1 14       	cp	r12, r1
    3f92:	d1 04       	cpc	r13, r1
    3f94:	11 f0       	breq	.+4      	; 0x3f9a <STEPPER_wait_and_then+0x68>
    3f96:	f6 01       	movw	r30, r12
    3f98:	09 95       	icall
    3f9a:	01 e0       	ldi	r16, 0x01	; 1
    3f9c:	11 23       	and	r17, r17
    3f9e:	51 f4       	brne	.+20     	; 0x3fb4 <STEPPER_wait_and_then+0x82>
    3fa0:	80 91 4c 07 	lds	r24, 0x074C
    3fa4:	88 23       	and	r24, r24
    3fa6:	31 f0       	breq	.+12     	; 0x3fb4 <STEPPER_wait_and_then+0x82>
    3fa8:	e1 14       	cp	r14, r1
    3faa:	f1 04       	cpc	r15, r1
    3fac:	11 f0       	breq	.+4      	; 0x3fb2 <STEPPER_wait_and_then+0x80>
    3fae:	f7 01       	movw	r30, r14
    3fb0:	09 95       	icall
    3fb2:	11 e0       	ldi	r17, 0x01	; 1
    3fb4:	00 23       	and	r16, r16
    3fb6:	31 f3       	breq	.-52     	; 0x3f84 <STEPPER_wait_and_then+0x52>
    3fb8:	11 23       	and	r17, r17
    3fba:	21 f3       	breq	.-56     	; 0x3f84 <STEPPER_wait_and_then+0x52>
    3fbc:	cf 91       	pop	r28
    3fbe:	df 91       	pop	r29
    3fc0:	1f 91       	pop	r17
    3fc2:	0f 91       	pop	r16
    3fc4:	ff 90       	pop	r15
    3fc6:	ef 90       	pop	r14
    3fc8:	df 90       	pop	r13
    3fca:	cf 90       	pop	r12
    3fcc:	08 95       	ret

00003fce <SYS_get_state>:
    3fce:	e8 2f       	mov	r30, r24
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	e3 31       	cpi	r30, 0x13	; 19
    3fd4:	f1 05       	cpc	r31, r1
    3fd6:	40 f4       	brcc	.+16     	; 0x3fe8 <SYS_get_state+0x1a>
    3fd8:	e2 5c       	subi	r30, 0xC2	; 194
    3fda:	ff 4f       	sbci	r31, 0xFF	; 255
    3fdc:	ee 0f       	add	r30, r30
    3fde:	ff 1f       	adc	r31, r31
    3fe0:	05 90       	lpm	r0, Z+
    3fe2:	f4 91       	lpm	r31, Z+
    3fe4:	e0 2d       	mov	r30, r0
    3fe6:	09 94       	ijmp
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	08 95       	ret
    3fec:	80 91 4d 07 	lds	r24, 0x074D
    3ff0:	08 95       	ret
    3ff2:	80 91 4e 07 	lds	r24, 0x074E
    3ff6:	08 95       	ret
    3ff8:	80 91 4f 07 	lds	r24, 0x074F
    3ffc:	08 95       	ret
    3ffe:	80 91 50 07 	lds	r24, 0x0750
    4002:	08 95       	ret
    4004:	80 91 51 07 	lds	r24, 0x0751
    4008:	08 95       	ret
    400a:	80 91 53 07 	lds	r24, 0x0753
    400e:	08 95       	ret
    4010:	80 91 52 07 	lds	r24, 0x0752
    4014:	08 95       	ret
    4016:	80 91 54 07 	lds	r24, 0x0754
    401a:	08 95       	ret
    401c:	80 91 55 07 	lds	r24, 0x0755
    4020:	08 95       	ret
    4022:	80 91 56 07 	lds	r24, 0x0756
    4026:	08 95       	ret
    4028:	80 91 57 07 	lds	r24, 0x0757
    402c:	08 95       	ret
    402e:	80 91 58 07 	lds	r24, 0x0758
    4032:	08 95       	ret
    4034:	80 91 59 07 	lds	r24, 0x0759
    4038:	08 95       	ret
    403a:	80 91 5a 07 	lds	r24, 0x075A
    403e:	08 95       	ret
    4040:	80 91 5b 07 	lds	r24, 0x075B
    4044:	08 95       	ret
    4046:	80 91 5c 07 	lds	r24, 0x075C
    404a:	08 95       	ret
    404c:	80 91 5d 07 	lds	r24, 0x075D
    4050:	08 95       	ret
    4052:	80 91 5e 07 	lds	r24, 0x075E
    4056:	08 95       	ret
    4058:	80 91 5f 07 	lds	r24, 0x075F
    405c:	08 95       	ret

0000405e <SYS_set_state>:
    405e:	e8 2f       	mov	r30, r24
    4060:	f0 e0       	ldi	r31, 0x00	; 0
    4062:	e3 31       	cpi	r30, 0x13	; 19
    4064:	f1 05       	cpc	r31, r1
    4066:	08 f0       	brcs	.+2      	; 0x406a <SYS_set_state+0xc>
    4068:	40 c0       	rjmp	.+128    	; 0x40ea <SYS_set_state+0x8c>
    406a:	ef 5a       	subi	r30, 0xAF	; 175
    406c:	ff 4f       	sbci	r31, 0xFF	; 255
    406e:	ee 0f       	add	r30, r30
    4070:	ff 1f       	adc	r31, r31
    4072:	05 90       	lpm	r0, Z+
    4074:	f4 91       	lpm	r31, Z+
    4076:	e0 2d       	mov	r30, r0
    4078:	09 94       	ijmp
    407a:	60 93 4d 07 	sts	0x074D, r22
    407e:	08 95       	ret
    4080:	60 93 4e 07 	sts	0x074E, r22
    4084:	08 95       	ret
    4086:	60 93 4f 07 	sts	0x074F, r22
    408a:	08 95       	ret
    408c:	60 93 50 07 	sts	0x0750, r22
    4090:	08 95       	ret
    4092:	60 93 51 07 	sts	0x0751, r22
    4096:	08 95       	ret
    4098:	60 93 53 07 	sts	0x0753, r22
    409c:	08 95       	ret
    409e:	60 93 52 07 	sts	0x0752, r22
    40a2:	08 95       	ret
    40a4:	60 93 54 07 	sts	0x0754, r22
    40a8:	08 95       	ret
    40aa:	60 93 55 07 	sts	0x0755, r22
    40ae:	08 95       	ret
    40b0:	60 93 56 07 	sts	0x0756, r22
    40b4:	08 95       	ret
    40b6:	60 93 57 07 	sts	0x0757, r22
    40ba:	08 95       	ret
    40bc:	60 93 58 07 	sts	0x0758, r22
    40c0:	08 95       	ret
    40c2:	60 93 59 07 	sts	0x0759, r22
    40c6:	08 95       	ret
    40c8:	60 93 5a 07 	sts	0x075A, r22
    40cc:	08 95       	ret
    40ce:	60 93 5b 07 	sts	0x075B, r22
    40d2:	08 95       	ret
    40d4:	60 93 5c 07 	sts	0x075C, r22
    40d8:	08 95       	ret
    40da:	60 93 5d 07 	sts	0x075D, r22
    40de:	08 95       	ret
    40e0:	60 93 5e 07 	sts	0x075E, r22
    40e4:	08 95       	ret
    40e6:	60 93 5d 07 	sts	0x075D, r22
    40ea:	08 95       	ret

000040ec <ATTINY_get_sensors>:
    40ec:	0f 93       	push	r16
    40ee:	1f 93       	push	r17
    40f0:	81 e0       	ldi	r24, 0x01	; 1
    40f2:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    40f6:	81 30       	cpi	r24, 0x01	; 1
    40f8:	11 f0       	breq	.+4      	; 0x40fe <ATTINY_get_sensors+0x12>
    40fa:	00 e0       	ldi	r16, 0x00	; 0
    40fc:	24 c0       	rjmp	.+72     	; 0x4146 <ATTINY_get_sensors+0x5a>
    40fe:	87 e0       	ldi	r24, 0x07	; 7
    4100:	0e 94 84 1b 	call	0x3708	; 0x3708 <SPI_set_slave_addr>
    4104:	82 e0       	ldi	r24, 0x02	; 2
    4106:	6a e0       	ldi	r22, 0x0A	; 10
    4108:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <SPI_transmit>
    410c:	82 e0       	ldi	r24, 0x02	; 2
    410e:	62 eb       	ldi	r22, 0xB2	; 178
    4110:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <SPI_transmit>
    4114:	18 ec       	ldi	r17, 0xC8	; 200
    4116:	81 2f       	mov	r24, r17
    4118:	8a 95       	dec	r24
    411a:	f1 f7       	brne	.-4      	; 0x4118 <ATTINY_get_sensors+0x2c>
    411c:	82 e0       	ldi	r24, 0x02	; 2
    411e:	60 e0       	ldi	r22, 0x00	; 0
    4120:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <SPI_receive>
    4124:	08 2f       	mov	r16, r24
    4126:	81 2f       	mov	r24, r17
    4128:	8a 95       	dec	r24
    412a:	f1 f7       	brne	.-4      	; 0x4128 <ATTINY_get_sensors+0x3c>
    412c:	82 e0       	ldi	r24, 0x02	; 2
    412e:	60 e0       	ldi	r22, 0x00	; 0
    4130:	0e 94 51 26 	call	0x4ca2	; 0x4ca2 <SPI_receive>
    4134:	1a 95       	dec	r17
    4136:	f1 f7       	brne	.-4      	; 0x4134 <ATTINY_get_sensors+0x48>
    4138:	87 e0       	ldi	r24, 0x07	; 7
    413a:	0e 94 84 1b 	call	0x3708	; 0x3708 <SPI_set_slave_addr>
    413e:	88 e8       	ldi	r24, 0x88	; 136
    4140:	93 e1       	ldi	r25, 0x13	; 19
    4142:	01 97       	sbiw	r24, 0x01	; 1
    4144:	f1 f7       	brne	.-4      	; 0x4142 <ATTINY_get_sensors+0x56>
    4146:	80 2f       	mov	r24, r16
    4148:	1f 91       	pop	r17
    414a:	0f 91       	pop	r16
    414c:	08 95       	ret

0000414e <ATTINY_get_SW_state>:
    414e:	1f 93       	push	r17
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	18 2f       	mov	r17, r24
    4156:	80 91 ed 03 	lds	r24, 0x03ED
    415a:	88 23       	and	r24, r24
    415c:	41 f0       	breq	.+16     	; 0x416e <ATTINY_get_SW_state+0x20>
    415e:	80 91 f7 03 	lds	r24, 0x03F7
    4162:	88 23       	and	r24, r24
    4164:	99 f0       	breq	.+38     	; 0x418c <ATTINY_get_SW_state+0x3e>
    4166:	10 92 ed 03 	sts	0x03ED, r1
    416a:	10 92 f7 03 	sts	0x03F7, r1
    416e:	0e 94 76 20 	call	0x40ec	; 0x40ec <ATTINY_get_sensors>
    4172:	80 93 ec 03 	sts	0x03EC, r24
    4176:	81 ef       	ldi	r24, 0xF1	; 241
    4178:	93 e0       	ldi	r25, 0x03	; 3
    417a:	61 e0       	ldi	r22, 0x01	; 1
    417c:	40 e0       	ldi	r20, 0x00	; 0
    417e:	22 e3       	ldi	r18, 0x32	; 50
    4180:	30 e0       	ldi	r19, 0x00	; 0
    4182:	0e 94 65 21 	call	0x42ca	; 0x42ca <TMRSRVC_new>
    4186:	81 e0       	ldi	r24, 0x01	; 1
    4188:	80 93 ed 03 	sts	0x03ED, r24
    418c:	90 91 ec 03 	lds	r25, 0x03EC
    4190:	a1 2f       	mov	r26, r17
    4192:	b0 e0       	ldi	r27, 0x00	; 0
    4194:	ed 01       	movw	r28, r26
    4196:	c8 57       	subi	r28, 0x78	; 120
    4198:	dc 4f       	sbci	r29, 0xFC	; 252
    419a:	88 81       	ld	r24, Y
    419c:	88 23       	and	r24, r24
    419e:	69 f0       	breq	.+26     	; 0x41ba <ATTINY_get_SW_state+0x6c>
    41a0:	fd 01       	movw	r30, r26
    41a2:	e5 57       	subi	r30, 0x75	; 117
    41a4:	fc 4f       	sbci	r31, 0xFC	; 252
    41a6:	80 81       	ld	r24, Z
    41a8:	98 23       	and	r25, r24
    41aa:	c1 f0       	breq	.+48     	; 0x41dc <ATTINY_get_SW_state+0x8e>
    41ac:	fd 01       	movw	r30, r26
    41ae:	e2 51       	subi	r30, 0x12	; 18
    41b0:	fc 4f       	sbci	r31, 0xFC	; 252
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	80 83       	st	Z, r24
    41b6:	18 82       	st	Y, r1
    41b8:	11 c0       	rjmp	.+34     	; 0x41dc <ATTINY_get_SW_state+0x8e>
    41ba:	fd 01       	movw	r30, r26
    41bc:	e2 51       	subi	r30, 0x12	; 18
    41be:	fc 4f       	sbci	r31, 0xFC	; 252
    41c0:	80 81       	ld	r24, Z
    41c2:	81 11       	cpse	r24, r1
    41c4:	10 82       	st	Z, r1
    41c6:	fd 01       	movw	r30, r26
    41c8:	e5 57       	subi	r30, 0x75	; 117
    41ca:	fc 4f       	sbci	r31, 0xFC	; 252
    41cc:	80 81       	ld	r24, Z
    41ce:	98 23       	and	r25, r24
    41d0:	29 f4       	brne	.+10     	; 0x41dc <ATTINY_get_SW_state+0x8e>
    41d2:	fd 01       	movw	r30, r26
    41d4:	e8 57       	subi	r30, 0x78	; 120
    41d6:	fc 4f       	sbci	r31, 0xFC	; 252
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	80 83       	st	Z, r24
    41dc:	a2 51       	subi	r26, 0x12	; 18
    41de:	bc 4f       	sbci	r27, 0xFC	; 252
    41e0:	8c 91       	ld	r24, X
    41e2:	df 91       	pop	r29
    41e4:	cf 91       	pop	r28
    41e6:	1f 91       	pop	r17
    41e8:	08 95       	ret

000041ea <ATTINY_open>:
    41ea:	82 e0       	ldi	r24, 0x02	; 2
    41ec:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    41f0:	88 23       	and	r24, r24
    41f2:	19 f4       	brne	.+6      	; 0x41fa <ATTINY_open+0x10>
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	82 e0       	ldi	r24, 0x02	; 2
    41f8:	08 95       	ret
    41fa:	10 92 7b 07 	sts	0x077B, r1
    41fe:	10 92 7a 07 	sts	0x077A, r1
    4202:	10 92 7d 07 	sts	0x077D, r1
    4206:	10 92 7c 07 	sts	0x077C, r1
    420a:	10 92 7f 07 	sts	0x077F, r1
    420e:	10 92 7e 07 	sts	0x077E, r1
    4212:	10 92 81 07 	sts	0x0781, r1
    4216:	10 92 80 07 	sts	0x0780, r1
    421a:	10 92 83 07 	sts	0x0783, r1
    421e:	10 92 82 07 	sts	0x0782, r1
    4222:	80 e9       	ldi	r24, 0x90	; 144
    4224:	91 e0       	ldi	r25, 0x01	; 1
    4226:	90 93 67 07 	sts	0x0767, r25
    422a:	80 93 66 07 	sts	0x0766, r24
    422e:	90 93 69 07 	sts	0x0769, r25
    4232:	80 93 68 07 	sts	0x0768, r24
    4236:	90 93 6b 07 	sts	0x076B, r25
    423a:	80 93 6a 07 	sts	0x076A, r24
    423e:	90 93 6d 07 	sts	0x076D, r25
    4242:	80 93 6c 07 	sts	0x076C, r24
    4246:	90 93 6f 07 	sts	0x076F, r25
    424a:	80 93 6e 07 	sts	0x076E, r24
    424e:	84 e3       	ldi	r24, 0x34	; 52
    4250:	98 e0       	ldi	r25, 0x08	; 8
    4252:	90 93 71 07 	sts	0x0771, r25
    4256:	80 93 70 07 	sts	0x0770, r24
    425a:	90 93 73 07 	sts	0x0773, r25
    425e:	80 93 72 07 	sts	0x0772, r24
    4262:	90 93 75 07 	sts	0x0775, r25
    4266:	80 93 74 07 	sts	0x0774, r24
    426a:	90 93 77 07 	sts	0x0777, r25
    426e:	80 93 76 07 	sts	0x0776, r24
    4272:	90 93 79 07 	sts	0x0779, r25
    4276:	80 93 78 07 	sts	0x0778, r24
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	61 e0       	ldi	r22, 0x01	; 1
    427e:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    4282:	91 e0       	ldi	r25, 0x01	; 1
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	08 95       	ret

00004288 <TMRSRVC_delay>:
    4288:	df 93       	push	r29
    428a:	cf 93       	push	r28
    428c:	cd b7       	in	r28, 0x3d	; 61
    428e:	de b7       	in	r29, 0x3e	; 62
    4290:	29 97       	sbiw	r28, 0x09	; 9
    4292:	0f b6       	in	r0, 0x3f	; 63
    4294:	f8 94       	cli
    4296:	de bf       	out	0x3e, r29	; 62
    4298:	0f be       	out	0x3f, r0	; 63
    429a:	cd bf       	out	0x3d, r28	; 61
    429c:	9c 01       	movw	r18, r24
    429e:	ce 01       	movw	r24, r28
    42a0:	01 96       	adiw	r24, 0x01	; 1
    42a2:	61 e0       	ldi	r22, 0x01	; 1
    42a4:	40 e0       	ldi	r20, 0x00	; 0
    42a6:	0e 94 65 21 	call	0x42ca	; 0x42ca <TMRSRVC_new>
    42aa:	98 2f       	mov	r25, r24
    42ac:	88 23       	and	r24, r24
    42ae:	19 f4       	brne	.+6      	; 0x42b6 <TMRSRVC_delay+0x2e>
    42b0:	8f 81       	ldd	r24, Y+7	; 0x07
    42b2:	88 23       	and	r24, r24
    42b4:	e9 f3       	breq	.-6      	; 0x42b0 <TMRSRVC_delay+0x28>
    42b6:	89 2f       	mov	r24, r25
    42b8:	29 96       	adiw	r28, 0x09	; 9
    42ba:	0f b6       	in	r0, 0x3f	; 63
    42bc:	f8 94       	cli
    42be:	de bf       	out	0x3e, r29	; 62
    42c0:	0f be       	out	0x3f, r0	; 63
    42c2:	cd bf       	out	0x3d, r28	; 61
    42c4:	cf 91       	pop	r28
    42c6:	df 91       	pop	r29
    42c8:	08 95       	ret

000042ca <TMRSRVC_new>:
    42ca:	ef 92       	push	r14
    42cc:	ff 92       	push	r15
    42ce:	0f 93       	push	r16
    42d0:	1f 93       	push	r17
    42d2:	cf 93       	push	r28
    42d4:	df 93       	push	r29
    42d6:	ec 01       	movw	r28, r24
    42d8:	f6 2e       	mov	r15, r22
    42da:	e4 2e       	mov	r14, r20
    42dc:	89 01       	movw	r16, r18
    42de:	88 e0       	ldi	r24, 0x08	; 8
    42e0:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    42e4:	81 30       	cpi	r24, 0x01	; 1
    42e6:	11 f0       	breq	.+4      	; 0x42ec <TMRSRVC_new+0x22>
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	26 c0       	rjmp	.+76     	; 0x4338 <TMRSRVC_new+0x6e>
    42ec:	84 e0       	ldi	r24, 0x04	; 4
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	0e 94 ba 34 	call	0x6974	; 0x6974 <malloc>
    42f4:	fc 01       	movw	r30, r24
    42f6:	00 97       	sbiw	r24, 0x00	; 0
    42f8:	11 f4       	brne	.+4      	; 0x42fe <TMRSRVC_new+0x34>
    42fa:	82 e0       	ldi	r24, 0x02	; 2
    42fc:	1d c0       	rjmp	.+58     	; 0x4338 <TMRSRVC_new+0x6e>
    42fe:	f9 82       	std	Y+1, r15	; 0x01
    4300:	f0 fc       	sbrc	r15, 0
    4302:	1e 82       	std	Y+6, r1	; 0x06
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	e8 16       	cp	r14, r24
    4308:	19 f4       	brne	.+6      	; 0x4310 <TMRSRVC_new+0x46>
    430a:	89 81       	ldd	r24, Y+1	; 0x01
    430c:	84 60       	ori	r24, 0x04	; 4
    430e:	89 83       	std	Y+1, r24	; 0x01
    4310:	89 81       	ldd	r24, Y+1	; 0x01
    4312:	88 60       	ori	r24, 0x08	; 8
    4314:	89 83       	std	Y+1, r24	; 0x01
    4316:	1b 83       	std	Y+3, r17	; 0x03
    4318:	0a 83       	std	Y+2, r16	; 0x02
    431a:	1d 83       	std	Y+5, r17	; 0x05
    431c:	0c 83       	std	Y+4, r16	; 0x04
    431e:	d1 83       	std	Z+1, r29	; 0x01
    4320:	c0 83       	st	Z, r28
    4322:	13 82       	std	Z+3, r1	; 0x03
    4324:	12 82       	std	Z+2, r1	; 0x02
    4326:	81 e0       	ldi	r24, 0x01	; 1
    4328:	80 93 5a 04 	sts	0x045A, r24
    432c:	cf 01       	movw	r24, r30
    432e:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <TMRSRVC_insert>
    4332:	10 92 5a 04 	sts	0x045A, r1
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	df 91       	pop	r29
    433a:	cf 91       	pop	r28
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	ff 90       	pop	r15
    4342:	ef 90       	pop	r14
    4344:	08 95       	ret

00004346 <I2C_MSTR_get>:
    4346:	fc 01       	movw	r30, r24
    4348:	80 91 87 07 	lds	r24, 0x0787
    434c:	81 30       	cpi	r24, 0x01	; 1
    434e:	11 f0       	breq	.+4      	; 0x4354 <I2C_MSTR_get+0xe>
    4350:	85 e0       	ldi	r24, 0x05	; 5
    4352:	08 95       	ret
    4354:	80 91 88 07 	lds	r24, 0x0788
    4358:	81 30       	cpi	r24, 0x01	; 1
    435a:	11 f0       	breq	.+4      	; 0x4360 <I2C_MSTR_get+0x1a>
    435c:	8a e0       	ldi	r24, 0x0A	; 10
    435e:	08 95       	ret
    4360:	61 30       	cpi	r22, 0x01	; 1
    4362:	11 f4       	brne	.+4      	; 0x4368 <I2C_MSTR_get+0x22>
    4364:	84 ec       	ldi	r24, 0xC4	; 196
    4366:	01 c0       	rjmp	.+2      	; 0x436a <I2C_MSTR_get+0x24>
    4368:	84 e8       	ldi	r24, 0x84	; 132
    436a:	80 93 bc 00 	sts	0x00BC, r24
    436e:	80 91 bc 00 	lds	r24, 0x00BC
    4372:	87 ff       	sbrs	r24, 7
    4374:	fc cf       	rjmp	.-8      	; 0x436e <I2C_MSTR_get+0x28>
    4376:	61 30       	cpi	r22, 0x01	; 1
    4378:	31 f4       	brne	.+12     	; 0x4386 <I2C_MSTR_get+0x40>
    437a:	80 91 b9 00 	lds	r24, 0x00B9
    437e:	88 7f       	andi	r24, 0xF8	; 248
    4380:	80 35       	cpi	r24, 0x50	; 80
    4382:	59 f4       	brne	.+22     	; 0x439a <I2C_MSTR_get+0x54>
    4384:	05 c0       	rjmp	.+10     	; 0x4390 <I2C_MSTR_get+0x4a>
    4386:	80 91 b9 00 	lds	r24, 0x00B9
    438a:	88 7f       	andi	r24, 0xF8	; 248
    438c:	88 35       	cpi	r24, 0x58	; 88
    438e:	29 f4       	brne	.+10     	; 0x439a <I2C_MSTR_get+0x54>
    4390:	80 91 bb 00 	lds	r24, 0x00BB
    4394:	80 83       	st	Z, r24
    4396:	80 e0       	ldi	r24, 0x00	; 0
    4398:	08 95       	ret
    439a:	82 e0       	ldi	r24, 0x02	; 2
    439c:	08 95       	ret

0000439e <I2C_MSTR_send>:
    439e:	98 2f       	mov	r25, r24
    43a0:	80 91 87 07 	lds	r24, 0x0787
    43a4:	81 30       	cpi	r24, 0x01	; 1
    43a6:	11 f0       	breq	.+4      	; 0x43ac <I2C_MSTR_send+0xe>
    43a8:	85 e0       	ldi	r24, 0x05	; 5
    43aa:	08 95       	ret
    43ac:	80 91 88 07 	lds	r24, 0x0788
    43b0:	81 30       	cpi	r24, 0x01	; 1
    43b2:	11 f0       	breq	.+4      	; 0x43b8 <I2C_MSTR_send+0x1a>
    43b4:	8a e0       	ldi	r24, 0x0A	; 10
    43b6:	08 95       	ret
    43b8:	90 93 bb 00 	sts	0x00BB, r25
    43bc:	84 e8       	ldi	r24, 0x84	; 132
    43be:	80 93 bc 00 	sts	0x00BC, r24
    43c2:	80 91 bc 00 	lds	r24, 0x00BC
    43c6:	87 ff       	sbrs	r24, 7
    43c8:	fc cf       	rjmp	.-8      	; 0x43c2 <I2C_MSTR_send+0x24>
    43ca:	80 91 b9 00 	lds	r24, 0x00B9
    43ce:	90 e0       	ldi	r25, 0x00	; 0
    43d0:	88 7f       	andi	r24, 0xF8	; 248
    43d2:	90 70       	andi	r25, 0x00	; 0
    43d4:	88 32       	cpi	r24, 0x28	; 40
    43d6:	91 05       	cpc	r25, r1
    43d8:	21 f0       	breq	.+8      	; 0x43e2 <I2C_MSTR_send+0x44>
    43da:	c0 97       	sbiw	r24, 0x30	; 48
    43dc:	21 f4       	brne	.+8      	; 0x43e6 <I2C_MSTR_send+0x48>
    43de:	83 e0       	ldi	r24, 0x03	; 3
    43e0:	08 95       	ret
    43e2:	80 e0       	ldi	r24, 0x00	; 0
    43e4:	08 95       	ret
    43e6:	8c e0       	ldi	r24, 0x0C	; 12
    43e8:	08 95       	ret

000043ea <I2C_MSTR_start>:
    43ea:	98 2f       	mov	r25, r24
    43ec:	20 91 87 07 	lds	r18, 0x0787
    43f0:	21 30       	cpi	r18, 0x01	; 1
    43f2:	11 f0       	breq	.+4      	; 0x43f8 <I2C_MSTR_start+0xe>
    43f4:	85 e0       	ldi	r24, 0x05	; 5
    43f6:	08 95       	ret
    43f8:	80 91 89 07 	lds	r24, 0x0789
    43fc:	81 30       	cpi	r24, 0x01	; 1
    43fe:	11 f4       	brne	.+4      	; 0x4404 <I2C_MSTR_start+0x1a>
    4400:	89 e0       	ldi	r24, 0x09	; 9
    4402:	08 95       	ret
    4404:	20 93 88 07 	sts	0x0788, r18
    4408:	84 ea       	ldi	r24, 0xA4	; 164
    440a:	80 93 bc 00 	sts	0x00BC, r24
    440e:	80 91 bc 00 	lds	r24, 0x00BC
    4412:	87 ff       	sbrs	r24, 7
    4414:	fc cf       	rjmp	.-8      	; 0x440e <I2C_MSTR_start+0x24>
    4416:	80 91 b9 00 	lds	r24, 0x00B9
    441a:	88 7f       	andi	r24, 0xF8	; 248
    441c:	88 30       	cpi	r24, 0x08	; 8
    441e:	39 f0       	breq	.+14     	; 0x442e <I2C_MSTR_start+0x44>
    4420:	80 91 b9 00 	lds	r24, 0x00B9
    4424:	88 7f       	andi	r24, 0xF8	; 248
    4426:	80 31       	cpi	r24, 0x10	; 16
    4428:	11 f0       	breq	.+4      	; 0x442e <I2C_MSTR_start+0x44>
    442a:	81 e0       	ldi	r24, 0x01	; 1
    442c:	08 95       	ret
    442e:	61 30       	cpi	r22, 0x01	; 1
    4430:	19 f4       	brne	.+6      	; 0x4438 <I2C_MSTR_start+0x4e>
    4432:	99 0f       	add	r25, r25
    4434:	91 60       	ori	r25, 0x01	; 1
    4436:	03 c0       	rjmp	.+6      	; 0x443e <I2C_MSTR_start+0x54>
    4438:	66 23       	and	r22, r22
    443a:	19 f4       	brne	.+6      	; 0x4442 <I2C_MSTR_start+0x58>
    443c:	99 0f       	add	r25, r25
    443e:	90 93 bb 00 	sts	0x00BB, r25
    4442:	84 e8       	ldi	r24, 0x84	; 132
    4444:	80 93 bc 00 	sts	0x00BC, r24
    4448:	80 91 bc 00 	lds	r24, 0x00BC
    444c:	87 ff       	sbrs	r24, 7
    444e:	fc cf       	rjmp	.-8      	; 0x4448 <I2C_MSTR_start+0x5e>
    4450:	61 30       	cpi	r22, 0x01	; 1
    4452:	31 f4       	brne	.+12     	; 0x4460 <I2C_MSTR_start+0x76>
    4454:	80 91 b9 00 	lds	r24, 0x00B9
    4458:	88 7f       	andi	r24, 0xF8	; 248
    445a:	80 34       	cpi	r24, 0x40	; 64
    445c:	41 f4       	brne	.+16     	; 0x446e <I2C_MSTR_start+0x84>
    445e:	09 c0       	rjmp	.+18     	; 0x4472 <I2C_MSTR_start+0x88>
    4460:	66 23       	and	r22, r22
    4462:	39 f4       	brne	.+14     	; 0x4472 <I2C_MSTR_start+0x88>
    4464:	80 91 b9 00 	lds	r24, 0x00B9
    4468:	88 7f       	andi	r24, 0xF8	; 248
    446a:	88 31       	cpi	r24, 0x18	; 24
    446c:	11 f0       	breq	.+4      	; 0x4472 <I2C_MSTR_start+0x88>
    446e:	82 e0       	ldi	r24, 0x02	; 2
    4470:	08 95       	ret
    4472:	80 e0       	ldi	r24, 0x00	; 0
    4474:	08 95       	ret

00004476 <I2C_MSTR_stop>:
    4476:	80 91 88 07 	lds	r24, 0x0788
    447a:	81 30       	cpi	r24, 0x01	; 1
    447c:	11 f0       	breq	.+4      	; 0x4482 <I2C_MSTR_stop+0xc>
    447e:	8a e0       	ldi	r24, 0x0A	; 10
    4480:	08 95       	ret
    4482:	80 91 8a 07 	lds	r24, 0x078A
    4486:	81 30       	cpi	r24, 0x01	; 1
    4488:	29 f4       	brne	.+10     	; 0x4494 <I2C_MSTR_stop+0x1e>
    448a:	85 e9       	ldi	r24, 0x95	; 149
    448c:	80 93 bc 00 	sts	0x00BC, r24
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	08 95       	ret
    4494:	84 e9       	ldi	r24, 0x94	; 148
    4496:	80 93 bc 00 	sts	0x00BC, r24
    449a:	80 e0       	ldi	r24, 0x00	; 0
    449c:	08 95       	ret

0000449e <I2C_open>:
    449e:	82 e1       	ldi	r24, 0x12	; 18
    44a0:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    44a4:	88 23       	and	r24, r24
    44a6:	b1 f4       	brne	.+44     	; 0x44d4 <I2C_open+0x36>
    44a8:	10 92 87 07 	sts	0x0787, r1
    44ac:	10 92 88 07 	sts	0x0788, r1
    44b0:	10 92 89 07 	sts	0x0789, r1
    44b4:	10 92 8a 07 	sts	0x078A, r1
    44b8:	10 92 8b 07 	sts	0x078B, r1
    44bc:	0e 94 96 28 	call	0x512c	; 0x512c <__I2C_init>
    44c0:	87 e1       	ldi	r24, 0x17	; 23
    44c2:	60 e0       	ldi	r22, 0x00	; 0
    44c4:	0e 94 6d 22 	call	0x44da	; 0x44da <I2C_set_BRG>
    44c8:	0e 94 8c 28 	call	0x5118	; 0x5118 <I2C_enable>
    44cc:	82 e1       	ldi	r24, 0x12	; 18
    44ce:	61 e0       	ldi	r22, 0x01	; 1
    44d0:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    44d4:	82 e1       	ldi	r24, 0x12	; 18
    44d6:	90 e0       	ldi	r25, 0x00	; 0
    44d8:	08 95       	ret

000044da <I2C_set_BRG>:
    44da:	63 70       	andi	r22, 0x03	; 3
    44dc:	60 93 b9 00 	sts	0x00B9, r22
    44e0:	80 93 b8 00 	sts	0x00B8, r24
    44e4:	81 e0       	ldi	r24, 0x01	; 1
    44e6:	80 93 87 07 	sts	0x0787, r24
    44ea:	08 95       	ret

000044ec <__ADC_init>:
    44ec:	8f e1       	ldi	r24, 0x1F	; 31
    44ee:	80 93 7c 00 	sts	0x007C, r24
    44f2:	ea e7       	ldi	r30, 0x7A	; 122
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	87 e0       	ldi	r24, 0x07	; 7
    44f8:	80 83       	st	Z, r24
    44fa:	80 81       	ld	r24, Z
    44fc:	80 68       	ori	r24, 0x80	; 128
    44fe:	80 83       	st	Z, r24
    4500:	08 95       	ret

00004502 <CBOT_init>:
    4502:	0e 94 d7 27 	call	0x4fae	; 0x4fae <SYS_init>
    4506:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <ATMEGA_open>
    450a:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <ISR_open>
    450e:	0e 94 63 28 	call	0x50c6	; 0x50c6 <TMRSRVC_open>
    4512:	0e 94 18 26 	call	0x4c30	; 0x4c30 <SPI_open>
    4516:	0e 94 f5 20 	call	0x41ea	; 0x41ea <ATTINY_open>
    451a:	78 94       	sei
    451c:	08 95       	ret

0000451e <CBOT_ISR_init>:
    451e:	00 00       	nop
    4520:	08 95       	ret

00004522 <__vector_16>:
    4522:	1f 92       	push	r1
    4524:	0f 92       	push	r0
    4526:	0f b6       	in	r0, 0x3f	; 63
    4528:	0f 92       	push	r0
    452a:	11 24       	eor	r1, r1
    452c:	2f 93       	push	r18
    452e:	3f 93       	push	r19
    4530:	4f 93       	push	r20
    4532:	5f 93       	push	r21
    4534:	6f 93       	push	r22
    4536:	7f 93       	push	r23
    4538:	8f 93       	push	r24
    453a:	9f 93       	push	r25
    453c:	af 93       	push	r26
    453e:	bf 93       	push	r27
    4540:	ef 93       	push	r30
    4542:	ff 93       	push	r31
    4544:	e0 91 1a 04 	lds	r30, 0x041A
    4548:	f0 91 1b 04 	lds	r31, 0x041B
    454c:	30 97       	sbiw	r30, 0x00	; 0
    454e:	09 f0       	breq	.+2      	; 0x4552 <__vector_16+0x30>
    4550:	09 95       	icall
    4552:	ff 91       	pop	r31
    4554:	ef 91       	pop	r30
    4556:	bf 91       	pop	r27
    4558:	af 91       	pop	r26
    455a:	9f 91       	pop	r25
    455c:	8f 91       	pop	r24
    455e:	7f 91       	pop	r23
    4560:	6f 91       	pop	r22
    4562:	5f 91       	pop	r21
    4564:	4f 91       	pop	r20
    4566:	3f 91       	pop	r19
    4568:	2f 91       	pop	r18
    456a:	0f 90       	pop	r0
    456c:	0f be       	out	0x3f, r0	; 63
    456e:	0f 90       	pop	r0
    4570:	1f 90       	pop	r1
    4572:	18 95       	reti

00004574 <__vector_17>:
    4574:	1f 92       	push	r1
    4576:	0f 92       	push	r0
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	0f 92       	push	r0
    457c:	11 24       	eor	r1, r1
    457e:	2f 93       	push	r18
    4580:	3f 93       	push	r19
    4582:	4f 93       	push	r20
    4584:	5f 93       	push	r21
    4586:	6f 93       	push	r22
    4588:	7f 93       	push	r23
    458a:	8f 93       	push	r24
    458c:	9f 93       	push	r25
    458e:	af 93       	push	r26
    4590:	bf 93       	push	r27
    4592:	ef 93       	push	r30
    4594:	ff 93       	push	r31
    4596:	e0 91 1c 04 	lds	r30, 0x041C
    459a:	f0 91 1d 04 	lds	r31, 0x041D
    459e:	30 97       	sbiw	r30, 0x00	; 0
    45a0:	09 f0       	breq	.+2      	; 0x45a4 <__vector_17+0x30>
    45a2:	09 95       	icall
    45a4:	ff 91       	pop	r31
    45a6:	ef 91       	pop	r30
    45a8:	bf 91       	pop	r27
    45aa:	af 91       	pop	r26
    45ac:	9f 91       	pop	r25
    45ae:	8f 91       	pop	r24
    45b0:	7f 91       	pop	r23
    45b2:	6f 91       	pop	r22
    45b4:	5f 91       	pop	r21
    45b6:	4f 91       	pop	r20
    45b8:	3f 91       	pop	r19
    45ba:	2f 91       	pop	r18
    45bc:	0f 90       	pop	r0
    45be:	0f be       	out	0x3f, r0	; 63
    45c0:	0f 90       	pop	r0
    45c2:	1f 90       	pop	r1
    45c4:	18 95       	reti

000045c6 <__vector_18>:
    45c6:	1f 92       	push	r1
    45c8:	0f 92       	push	r0
    45ca:	0f b6       	in	r0, 0x3f	; 63
    45cc:	0f 92       	push	r0
    45ce:	11 24       	eor	r1, r1
    45d0:	2f 93       	push	r18
    45d2:	3f 93       	push	r19
    45d4:	4f 93       	push	r20
    45d6:	5f 93       	push	r21
    45d8:	6f 93       	push	r22
    45da:	7f 93       	push	r23
    45dc:	8f 93       	push	r24
    45de:	9f 93       	push	r25
    45e0:	af 93       	push	r26
    45e2:	bf 93       	push	r27
    45e4:	ef 93       	push	r30
    45e6:	ff 93       	push	r31
    45e8:	e0 91 1e 04 	lds	r30, 0x041E
    45ec:	f0 91 1f 04 	lds	r31, 0x041F
    45f0:	30 97       	sbiw	r30, 0x00	; 0
    45f2:	09 f0       	breq	.+2      	; 0x45f6 <__vector_18+0x30>
    45f4:	09 95       	icall
    45f6:	ff 91       	pop	r31
    45f8:	ef 91       	pop	r30
    45fa:	bf 91       	pop	r27
    45fc:	af 91       	pop	r26
    45fe:	9f 91       	pop	r25
    4600:	8f 91       	pop	r24
    4602:	7f 91       	pop	r23
    4604:	6f 91       	pop	r22
    4606:	5f 91       	pop	r21
    4608:	4f 91       	pop	r20
    460a:	3f 91       	pop	r19
    460c:	2f 91       	pop	r18
    460e:	0f 90       	pop	r0
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	0f 90       	pop	r0
    4614:	1f 90       	pop	r1
    4616:	18 95       	reti

00004618 <__vector_9>:
    4618:	1f 92       	push	r1
    461a:	0f 92       	push	r0
    461c:	0f b6       	in	r0, 0x3f	; 63
    461e:	0f 92       	push	r0
    4620:	11 24       	eor	r1, r1
    4622:	2f 93       	push	r18
    4624:	3f 93       	push	r19
    4626:	4f 93       	push	r20
    4628:	5f 93       	push	r21
    462a:	6f 93       	push	r22
    462c:	7f 93       	push	r23
    462e:	8f 93       	push	r24
    4630:	9f 93       	push	r25
    4632:	af 93       	push	r26
    4634:	bf 93       	push	r27
    4636:	ef 93       	push	r30
    4638:	ff 93       	push	r31
    463a:	e0 91 0c 04 	lds	r30, 0x040C
    463e:	f0 91 0d 04 	lds	r31, 0x040D
    4642:	30 97       	sbiw	r30, 0x00	; 0
    4644:	09 f0       	breq	.+2      	; 0x4648 <__vector_9+0x30>
    4646:	09 95       	icall
    4648:	ff 91       	pop	r31
    464a:	ef 91       	pop	r30
    464c:	bf 91       	pop	r27
    464e:	af 91       	pop	r26
    4650:	9f 91       	pop	r25
    4652:	8f 91       	pop	r24
    4654:	7f 91       	pop	r23
    4656:	6f 91       	pop	r22
    4658:	5f 91       	pop	r21
    465a:	4f 91       	pop	r20
    465c:	3f 91       	pop	r19
    465e:	2f 91       	pop	r18
    4660:	0f 90       	pop	r0
    4662:	0f be       	out	0x3f, r0	; 63
    4664:	0f 90       	pop	r0
    4666:	1f 90       	pop	r1
    4668:	18 95       	reti

0000466a <__vector_10>:
    466a:	1f 92       	push	r1
    466c:	0f 92       	push	r0
    466e:	0f b6       	in	r0, 0x3f	; 63
    4670:	0f 92       	push	r0
    4672:	11 24       	eor	r1, r1
    4674:	2f 93       	push	r18
    4676:	3f 93       	push	r19
    4678:	4f 93       	push	r20
    467a:	5f 93       	push	r21
    467c:	6f 93       	push	r22
    467e:	7f 93       	push	r23
    4680:	8f 93       	push	r24
    4682:	9f 93       	push	r25
    4684:	af 93       	push	r26
    4686:	bf 93       	push	r27
    4688:	ef 93       	push	r30
    468a:	ff 93       	push	r31
    468c:	e0 91 0e 04 	lds	r30, 0x040E
    4690:	f0 91 0f 04 	lds	r31, 0x040F
    4694:	30 97       	sbiw	r30, 0x00	; 0
    4696:	09 f0       	breq	.+2      	; 0x469a <__vector_10+0x30>
    4698:	09 95       	icall
    469a:	ff 91       	pop	r31
    469c:	ef 91       	pop	r30
    469e:	bf 91       	pop	r27
    46a0:	af 91       	pop	r26
    46a2:	9f 91       	pop	r25
    46a4:	8f 91       	pop	r24
    46a6:	7f 91       	pop	r23
    46a8:	6f 91       	pop	r22
    46aa:	5f 91       	pop	r21
    46ac:	4f 91       	pop	r20
    46ae:	3f 91       	pop	r19
    46b0:	2f 91       	pop	r18
    46b2:	0f 90       	pop	r0
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	0f 90       	pop	r0
    46b8:	1f 90       	pop	r1
    46ba:	18 95       	reti

000046bc <__vector_11>:
    46bc:	1f 92       	push	r1
    46be:	0f 92       	push	r0
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	0f 92       	push	r0
    46c4:	11 24       	eor	r1, r1
    46c6:	2f 93       	push	r18
    46c8:	3f 93       	push	r19
    46ca:	4f 93       	push	r20
    46cc:	5f 93       	push	r21
    46ce:	6f 93       	push	r22
    46d0:	7f 93       	push	r23
    46d2:	8f 93       	push	r24
    46d4:	9f 93       	push	r25
    46d6:	af 93       	push	r26
    46d8:	bf 93       	push	r27
    46da:	ef 93       	push	r30
    46dc:	ff 93       	push	r31
    46de:	e0 91 10 04 	lds	r30, 0x0410
    46e2:	f0 91 11 04 	lds	r31, 0x0411
    46e6:	30 97       	sbiw	r30, 0x00	; 0
    46e8:	09 f0       	breq	.+2      	; 0x46ec <__vector_11+0x30>
    46ea:	09 95       	icall
    46ec:	ff 91       	pop	r31
    46ee:	ef 91       	pop	r30
    46f0:	bf 91       	pop	r27
    46f2:	af 91       	pop	r26
    46f4:	9f 91       	pop	r25
    46f6:	8f 91       	pop	r24
    46f8:	7f 91       	pop	r23
    46fa:	6f 91       	pop	r22
    46fc:	5f 91       	pop	r21
    46fe:	4f 91       	pop	r20
    4700:	3f 91       	pop	r19
    4702:	2f 91       	pop	r18
    4704:	0f 90       	pop	r0
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	0f 90       	pop	r0
    470a:	1f 90       	pop	r1
    470c:	18 95       	reti

0000470e <__vector_13>:
    470e:	1f 92       	push	r1
    4710:	0f 92       	push	r0
    4712:	0f b6       	in	r0, 0x3f	; 63
    4714:	0f 92       	push	r0
    4716:	11 24       	eor	r1, r1
    4718:	2f 93       	push	r18
    471a:	3f 93       	push	r19
    471c:	4f 93       	push	r20
    471e:	5f 93       	push	r21
    4720:	6f 93       	push	r22
    4722:	7f 93       	push	r23
    4724:	8f 93       	push	r24
    4726:	9f 93       	push	r25
    4728:	af 93       	push	r26
    472a:	bf 93       	push	r27
    472c:	ef 93       	push	r30
    472e:	ff 93       	push	r31
    4730:	e0 91 14 04 	lds	r30, 0x0414
    4734:	f0 91 15 04 	lds	r31, 0x0415
    4738:	30 97       	sbiw	r30, 0x00	; 0
    473a:	09 f0       	breq	.+2      	; 0x473e <__vector_13+0x30>
    473c:	09 95       	icall
    473e:	ff 91       	pop	r31
    4740:	ef 91       	pop	r30
    4742:	bf 91       	pop	r27
    4744:	af 91       	pop	r26
    4746:	9f 91       	pop	r25
    4748:	8f 91       	pop	r24
    474a:	7f 91       	pop	r23
    474c:	6f 91       	pop	r22
    474e:	5f 91       	pop	r21
    4750:	4f 91       	pop	r20
    4752:	3f 91       	pop	r19
    4754:	2f 91       	pop	r18
    4756:	0f 90       	pop	r0
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	0f 90       	pop	r0
    475c:	1f 90       	pop	r1
    475e:	18 95       	reti

00004760 <__vector_14>:
    4760:	1f 92       	push	r1
    4762:	0f 92       	push	r0
    4764:	0f b6       	in	r0, 0x3f	; 63
    4766:	0f 92       	push	r0
    4768:	11 24       	eor	r1, r1
    476a:	2f 93       	push	r18
    476c:	3f 93       	push	r19
    476e:	4f 93       	push	r20
    4770:	5f 93       	push	r21
    4772:	6f 93       	push	r22
    4774:	7f 93       	push	r23
    4776:	8f 93       	push	r24
    4778:	9f 93       	push	r25
    477a:	af 93       	push	r26
    477c:	bf 93       	push	r27
    477e:	ef 93       	push	r30
    4780:	ff 93       	push	r31
    4782:	e0 91 16 04 	lds	r30, 0x0416
    4786:	f0 91 17 04 	lds	r31, 0x0417
    478a:	30 97       	sbiw	r30, 0x00	; 0
    478c:	09 f0       	breq	.+2      	; 0x4790 <__vector_14+0x30>
    478e:	09 95       	icall
    4790:	ff 91       	pop	r31
    4792:	ef 91       	pop	r30
    4794:	bf 91       	pop	r27
    4796:	af 91       	pop	r26
    4798:	9f 91       	pop	r25
    479a:	8f 91       	pop	r24
    479c:	7f 91       	pop	r23
    479e:	6f 91       	pop	r22
    47a0:	5f 91       	pop	r21
    47a2:	4f 91       	pop	r20
    47a4:	3f 91       	pop	r19
    47a6:	2f 91       	pop	r18
    47a8:	0f 90       	pop	r0
    47aa:	0f be       	out	0x3f, r0	; 63
    47ac:	0f 90       	pop	r0
    47ae:	1f 90       	pop	r1
    47b0:	18 95       	reti

000047b2 <__vector_12>:
    47b2:	1f 92       	push	r1
    47b4:	0f 92       	push	r0
    47b6:	0f b6       	in	r0, 0x3f	; 63
    47b8:	0f 92       	push	r0
    47ba:	11 24       	eor	r1, r1
    47bc:	2f 93       	push	r18
    47be:	3f 93       	push	r19
    47c0:	4f 93       	push	r20
    47c2:	5f 93       	push	r21
    47c4:	6f 93       	push	r22
    47c6:	7f 93       	push	r23
    47c8:	8f 93       	push	r24
    47ca:	9f 93       	push	r25
    47cc:	af 93       	push	r26
    47ce:	bf 93       	push	r27
    47d0:	ef 93       	push	r30
    47d2:	ff 93       	push	r31
    47d4:	e0 91 12 04 	lds	r30, 0x0412
    47d8:	f0 91 13 04 	lds	r31, 0x0413
    47dc:	30 97       	sbiw	r30, 0x00	; 0
    47de:	09 f0       	breq	.+2      	; 0x47e2 <__vector_12+0x30>
    47e0:	09 95       	icall
    47e2:	ff 91       	pop	r31
    47e4:	ef 91       	pop	r30
    47e6:	bf 91       	pop	r27
    47e8:	af 91       	pop	r26
    47ea:	9f 91       	pop	r25
    47ec:	8f 91       	pop	r24
    47ee:	7f 91       	pop	r23
    47f0:	6f 91       	pop	r22
    47f2:	5f 91       	pop	r21
    47f4:	4f 91       	pop	r20
    47f6:	3f 91       	pop	r19
    47f8:	2f 91       	pop	r18
    47fa:	0f 90       	pop	r0
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	0f 90       	pop	r0
    4800:	1f 90       	pop	r1
    4802:	18 95       	reti

00004804 <__vector_15>:
    4804:	1f 92       	push	r1
    4806:	0f 92       	push	r0
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	0f 92       	push	r0
    480c:	11 24       	eor	r1, r1
    480e:	2f 93       	push	r18
    4810:	3f 93       	push	r19
    4812:	4f 93       	push	r20
    4814:	5f 93       	push	r21
    4816:	6f 93       	push	r22
    4818:	7f 93       	push	r23
    481a:	8f 93       	push	r24
    481c:	9f 93       	push	r25
    481e:	af 93       	push	r26
    4820:	bf 93       	push	r27
    4822:	ef 93       	push	r30
    4824:	ff 93       	push	r31
    4826:	e0 91 18 04 	lds	r30, 0x0418
    482a:	f0 91 19 04 	lds	r31, 0x0419
    482e:	30 97       	sbiw	r30, 0x00	; 0
    4830:	09 f0       	breq	.+2      	; 0x4834 <__vector_15+0x30>
    4832:	09 95       	icall
    4834:	ff 91       	pop	r31
    4836:	ef 91       	pop	r30
    4838:	bf 91       	pop	r27
    483a:	af 91       	pop	r26
    483c:	9f 91       	pop	r25
    483e:	8f 91       	pop	r24
    4840:	7f 91       	pop	r23
    4842:	6f 91       	pop	r22
    4844:	5f 91       	pop	r21
    4846:	4f 91       	pop	r20
    4848:	3f 91       	pop	r19
    484a:	2f 91       	pop	r18
    484c:	0f 90       	pop	r0
    484e:	0f be       	out	0x3f, r0	; 63
    4850:	0f 90       	pop	r0
    4852:	1f 90       	pop	r1
    4854:	18 95       	reti

00004856 <__vector_4>:
    4856:	1f 92       	push	r1
    4858:	0f 92       	push	r0
    485a:	0f b6       	in	r0, 0x3f	; 63
    485c:	0f 92       	push	r0
    485e:	11 24       	eor	r1, r1
    4860:	2f 93       	push	r18
    4862:	3f 93       	push	r19
    4864:	4f 93       	push	r20
    4866:	5f 93       	push	r21
    4868:	6f 93       	push	r22
    486a:	7f 93       	push	r23
    486c:	8f 93       	push	r24
    486e:	9f 93       	push	r25
    4870:	af 93       	push	r26
    4872:	bf 93       	push	r27
    4874:	ef 93       	push	r30
    4876:	ff 93       	push	r31
    4878:	e0 91 02 04 	lds	r30, 0x0402
    487c:	f0 91 03 04 	lds	r31, 0x0403
    4880:	30 97       	sbiw	r30, 0x00	; 0
    4882:	09 f0       	breq	.+2      	; 0x4886 <__vector_4+0x30>
    4884:	09 95       	icall
    4886:	ff 91       	pop	r31
    4888:	ef 91       	pop	r30
    488a:	bf 91       	pop	r27
    488c:	af 91       	pop	r26
    488e:	9f 91       	pop	r25
    4890:	8f 91       	pop	r24
    4892:	7f 91       	pop	r23
    4894:	6f 91       	pop	r22
    4896:	5f 91       	pop	r21
    4898:	4f 91       	pop	r20
    489a:	3f 91       	pop	r19
    489c:	2f 91       	pop	r18
    489e:	0f 90       	pop	r0
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	0f 90       	pop	r0
    48a4:	1f 90       	pop	r1
    48a6:	18 95       	reti

000048a8 <__vector_5>:
    48a8:	1f 92       	push	r1
    48aa:	0f 92       	push	r0
    48ac:	0f b6       	in	r0, 0x3f	; 63
    48ae:	0f 92       	push	r0
    48b0:	11 24       	eor	r1, r1
    48b2:	2f 93       	push	r18
    48b4:	3f 93       	push	r19
    48b6:	4f 93       	push	r20
    48b8:	5f 93       	push	r21
    48ba:	6f 93       	push	r22
    48bc:	7f 93       	push	r23
    48be:	8f 93       	push	r24
    48c0:	9f 93       	push	r25
    48c2:	af 93       	push	r26
    48c4:	bf 93       	push	r27
    48c6:	ef 93       	push	r30
    48c8:	ff 93       	push	r31
    48ca:	e0 91 04 04 	lds	r30, 0x0404
    48ce:	f0 91 05 04 	lds	r31, 0x0405
    48d2:	30 97       	sbiw	r30, 0x00	; 0
    48d4:	09 f0       	breq	.+2      	; 0x48d8 <__vector_5+0x30>
    48d6:	09 95       	icall
    48d8:	ff 91       	pop	r31
    48da:	ef 91       	pop	r30
    48dc:	bf 91       	pop	r27
    48de:	af 91       	pop	r26
    48e0:	9f 91       	pop	r25
    48e2:	8f 91       	pop	r24
    48e4:	7f 91       	pop	r23
    48e6:	6f 91       	pop	r22
    48e8:	5f 91       	pop	r21
    48ea:	4f 91       	pop	r20
    48ec:	3f 91       	pop	r19
    48ee:	2f 91       	pop	r18
    48f0:	0f 90       	pop	r0
    48f2:	0f be       	out	0x3f, r0	; 63
    48f4:	0f 90       	pop	r0
    48f6:	1f 90       	pop	r1
    48f8:	18 95       	reti

000048fa <__vector_6>:
    48fa:	1f 92       	push	r1
    48fc:	0f 92       	push	r0
    48fe:	0f b6       	in	r0, 0x3f	; 63
    4900:	0f 92       	push	r0
    4902:	11 24       	eor	r1, r1
    4904:	2f 93       	push	r18
    4906:	3f 93       	push	r19
    4908:	4f 93       	push	r20
    490a:	5f 93       	push	r21
    490c:	6f 93       	push	r22
    490e:	7f 93       	push	r23
    4910:	8f 93       	push	r24
    4912:	9f 93       	push	r25
    4914:	af 93       	push	r26
    4916:	bf 93       	push	r27
    4918:	ef 93       	push	r30
    491a:	ff 93       	push	r31
    491c:	e0 91 06 04 	lds	r30, 0x0406
    4920:	f0 91 07 04 	lds	r31, 0x0407
    4924:	30 97       	sbiw	r30, 0x00	; 0
    4926:	09 f0       	breq	.+2      	; 0x492a <__vector_6+0x30>
    4928:	09 95       	icall
    492a:	ff 91       	pop	r31
    492c:	ef 91       	pop	r30
    492e:	bf 91       	pop	r27
    4930:	af 91       	pop	r26
    4932:	9f 91       	pop	r25
    4934:	8f 91       	pop	r24
    4936:	7f 91       	pop	r23
    4938:	6f 91       	pop	r22
    493a:	5f 91       	pop	r21
    493c:	4f 91       	pop	r20
    493e:	3f 91       	pop	r19
    4940:	2f 91       	pop	r18
    4942:	0f 90       	pop	r0
    4944:	0f be       	out	0x3f, r0	; 63
    4946:	0f 90       	pop	r0
    4948:	1f 90       	pop	r1
    494a:	18 95       	reti

0000494c <__vector_7>:
    494c:	1f 92       	push	r1
    494e:	0f 92       	push	r0
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	0f 92       	push	r0
    4954:	11 24       	eor	r1, r1
    4956:	2f 93       	push	r18
    4958:	3f 93       	push	r19
    495a:	4f 93       	push	r20
    495c:	5f 93       	push	r21
    495e:	6f 93       	push	r22
    4960:	7f 93       	push	r23
    4962:	8f 93       	push	r24
    4964:	9f 93       	push	r25
    4966:	af 93       	push	r26
    4968:	bf 93       	push	r27
    496a:	ef 93       	push	r30
    496c:	ff 93       	push	r31
    496e:	e0 91 08 04 	lds	r30, 0x0408
    4972:	f0 91 09 04 	lds	r31, 0x0409
    4976:	30 97       	sbiw	r30, 0x00	; 0
    4978:	09 f0       	breq	.+2      	; 0x497c <__vector_7+0x30>
    497a:	09 95       	icall
    497c:	ff 91       	pop	r31
    497e:	ef 91       	pop	r30
    4980:	bf 91       	pop	r27
    4982:	af 91       	pop	r26
    4984:	9f 91       	pop	r25
    4986:	8f 91       	pop	r24
    4988:	7f 91       	pop	r23
    498a:	6f 91       	pop	r22
    498c:	5f 91       	pop	r21
    498e:	4f 91       	pop	r20
    4990:	3f 91       	pop	r19
    4992:	2f 91       	pop	r18
    4994:	0f 90       	pop	r0
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	0f 90       	pop	r0
    499a:	1f 90       	pop	r1
    499c:	18 95       	reti

0000499e <ISR_attach>:
    499e:	e8 2f       	mov	r30, r24
    49a0:	80 32       	cpi	r24, 0x20	; 32
    49a2:	68 f4       	brcc	.+26     	; 0x49be <ISR_attach+0x20>
    49a4:	80 51       	subi	r24, 0x10	; 16
    49a6:	83 30       	cpi	r24, 0x03	; 3
    49a8:	50 f0       	brcs	.+20     	; 0x49be <ISR_attach+0x20>
    49aa:	f0 e0       	ldi	r31, 0x00	; 0
    49ac:	ee 0f       	add	r30, r30
    49ae:	ff 1f       	adc	r31, r31
    49b0:	e6 50       	subi	r30, 0x06	; 6
    49b2:	fc 4f       	sbci	r31, 0xFC	; 252
    49b4:	20 81       	ld	r18, Z
    49b6:	31 81       	ldd	r19, Z+1	; 0x01
    49b8:	71 83       	std	Z+1, r23	; 0x01
    49ba:	60 83       	st	Z, r22
    49bc:	02 c0       	rjmp	.+4      	; 0x49c2 <ISR_attach+0x24>
    49be:	20 e0       	ldi	r18, 0x00	; 0
    49c0:	30 e0       	ldi	r19, 0x00	; 0
    49c2:	c9 01       	movw	r24, r18
    49c4:	08 95       	ret

000049c6 <ISR_open>:
    49c6:	80 e1       	ldi	r24, 0x10	; 16
    49c8:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    49cc:	88 23       	and	r24, r24
    49ce:	61 f4       	brne	.+24     	; 0x49e8 <ISR_open+0x22>
    49d0:	ea ef       	ldi	r30, 0xFA	; 250
    49d2:	f3 e0       	ldi	r31, 0x03	; 3
    49d4:	11 92       	st	Z+, r1
    49d6:	11 92       	st	Z+, r1
    49d8:	84 e0       	ldi	r24, 0x04	; 4
    49da:	ea 33       	cpi	r30, 0x3A	; 58
    49dc:	f8 07       	cpc	r31, r24
    49de:	d1 f7       	brne	.-12     	; 0x49d4 <ISR_open+0xe>
    49e0:	80 e1       	ldi	r24, 0x10	; 16
    49e2:	61 e0       	ldi	r22, 0x01	; 1
    49e4:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    49e8:	80 e1       	ldi	r24, 0x10	; 16
    49ea:	91 e0       	ldi	r25, 0x01	; 1
    49ec:	08 95       	ret

000049ee <__LCD_init>:
    49ee:	23 9a       	sbi	0x04, 3	; 4
    49f0:	08 95       	ret

000049f2 <__LCD_putchar>:
    49f2:	ff 92       	push	r15
    49f4:	0f 93       	push	r16
    49f6:	1f 93       	push	r17
    49f8:	cf 93       	push	r28
    49fa:	df 93       	push	r29
    49fc:	f8 2e       	mov	r15, r24
    49fe:	8a e0       	ldi	r24, 0x0A	; 10
    4a00:	f8 16       	cp	r15, r24
    4a02:	b1 f0       	breq	.+44     	; 0x4a30 <__LCD_putchar+0x3e>
    4a04:	8f 15       	cp	r24, r15
    4a06:	48 f0       	brcs	.+18     	; 0x4a1a <__LCD_putchar+0x28>
    4a08:	e8 e0       	ldi	r30, 0x08	; 8
    4a0a:	fe 16       	cp	r15, r30
    4a0c:	b9 f1       	breq	.+110    	; 0x4a7c <__LCD_putchar+0x8a>
    4a0e:	ef 15       	cp	r30, r15
    4a10:	38 f1       	brcs	.+78     	; 0x4a60 <__LCD_putchar+0x6e>
    4a12:	f7 e0       	ldi	r31, 0x07	; 7
    4a14:	ff 16       	cp	r15, r31
    4a16:	51 f4       	brne	.+20     	; 0x4a2c <__LCD_putchar+0x3a>
    4a18:	3b c0       	rjmp	.+118    	; 0x4a90 <__LCD_putchar+0x9e>
    4a1a:	8d e0       	ldi	r24, 0x0D	; 13
    4a1c:	f8 16       	cp	r15, r24
    4a1e:	59 f0       	breq	.+22     	; 0x4a36 <__LCD_putchar+0x44>
    4a20:	eb e1       	ldi	r30, 0x1B	; 27
    4a22:	fe 16       	cp	r15, r30
    4a24:	89 f0       	breq	.+34     	; 0x4a48 <__LCD_putchar+0x56>
    4a26:	fc e0       	ldi	r31, 0x0C	; 12
    4a28:	ff 16       	cp	r15, r31
    4a2a:	41 f0       	breq	.+16     	; 0x4a3c <__LCD_putchar+0x4a>
    4a2c:	01 e0       	ldi	r16, 0x01	; 1
    4a2e:	41 c0       	rjmp	.+130    	; 0x4ab2 <__LCD_putchar+0xc0>
    4a30:	10 92 60 07 	sts	0x0760, r1
    4a34:	03 c0       	rjmp	.+6      	; 0x4a3c <__LCD_putchar+0x4a>
    4a36:	10 92 60 07 	sts	0x0760, r1
    4a3a:	3a c0       	rjmp	.+116    	; 0x4ab0 <__LCD_putchar+0xbe>
    4a3c:	80 91 61 07 	lds	r24, 0x0761
    4a40:	81 50       	subi	r24, 0x01	; 1
    4a42:	80 93 61 07 	sts	0x0761, r24
    4a46:	34 c0       	rjmp	.+104    	; 0x4ab0 <__LCD_putchar+0xbe>
    4a48:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <LCD_clear>
    4a4c:	14 c0       	rjmp	.+40     	; 0x4a76 <__LCD_putchar+0x84>
    4a4e:	80 e0       	ldi	r24, 0x00	; 0
    4a50:	61 e0       	ldi	r22, 0x01	; 1
    4a52:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    4a56:	80 91 60 07 	lds	r24, 0x0760
    4a5a:	8f 5f       	subi	r24, 0xFF	; 255
    4a5c:	80 93 60 07 	sts	0x0760, r24
    4a60:	80 91 60 07 	lds	r24, 0x0760
    4a64:	87 ff       	sbrs	r24, 7
    4a66:	f3 cf       	rjmp	.-26     	; 0x4a4e <__LCD_putchar+0x5c>
    4a68:	10 92 60 07 	sts	0x0760, r1
    4a6c:	80 91 61 07 	lds	r24, 0x0761
    4a70:	81 50       	subi	r24, 0x01	; 1
    4a72:	80 93 61 07 	sts	0x0761, r24
    4a76:	00 e0       	ldi	r16, 0x00	; 0
    4a78:	11 e0       	ldi	r17, 0x01	; 1
    4a7a:	1c c0       	rjmp	.+56     	; 0x4ab4 <__LCD_putchar+0xc2>
    4a7c:	80 91 60 07 	lds	r24, 0x0760
    4a80:	88 23       	and	r24, r24
    4a82:	b1 f0       	breq	.+44     	; 0x4ab0 <__LCD_putchar+0xbe>
    4a84:	80 91 60 07 	lds	r24, 0x0760
    4a88:	86 50       	subi	r24, 0x06	; 6
    4a8a:	80 93 60 07 	sts	0x0760, r24
    4a8e:	10 c0       	rjmp	.+32     	; 0x4ab0 <__LCD_putchar+0xbe>
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	0e 94 75 1c 	call	0x38ea	; 0x38ea <SPKR_open>
    4a96:	64 ef       	ldi	r22, 0xF4	; 244
    4a98:	71 e0       	ldi	r23, 0x01	; 1
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	4d e7       	ldi	r20, 0x7D	; 125
    4aa0:	50 e0       	ldi	r21, 0x00	; 0
    4aa2:	24 e6       	ldi	r18, 0x64	; 100
    4aa4:	30 e0       	ldi	r19, 0x00	; 0
    4aa6:	0e 94 13 27 	call	0x4e26	; 0x4e26 <SPKR_play_beep>
    4aaa:	81 e0       	ldi	r24, 0x01	; 1
    4aac:	0e 94 df 26 	call	0x4dbe	; 0x4dbe <SPKR_close>
    4ab0:	00 e0       	ldi	r16, 0x00	; 0
    4ab2:	10 e0       	ldi	r17, 0x00	; 0
    4ab4:	80 91 61 07 	lds	r24, 0x0761
    4ab8:	60 91 60 07 	lds	r22, 0x0760
    4abc:	0e 94 2f 1b 	call	0x365e	; 0x365e <LCD_set_PGC_addr>
    4ac0:	00 23       	and	r16, r16
    4ac2:	51 f1       	breq	.+84     	; 0x4b18 <__LCD_putchar+0x126>
    4ac4:	85 e0       	ldi	r24, 0x05	; 5
    4ac6:	f8 9e       	mul	r15, r24
    4ac8:	c0 01       	movw	r24, r0
    4aca:	11 24       	eor	r1, r1
    4acc:	ec 01       	movw	r28, r24
    4ace:	c3 55       	subi	r28, 0x53	; 83
    4ad0:	df 4f       	sbci	r29, 0xFF	; 255
    4ad2:	8c 01       	movw	r16, r24
    4ad4:	0e 54       	subi	r16, 0x4E	; 78
    4ad6:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad8:	fe 01       	movw	r30, r28
    4ada:	84 91       	lpm	r24, Z+
    4adc:	61 e0       	ldi	r22, 0x01	; 1
    4ade:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    4ae2:	21 96       	adiw	r28, 0x01	; 1
    4ae4:	c0 17       	cp	r28, r16
    4ae6:	d1 07       	cpc	r29, r17
    4ae8:	b9 f7       	brne	.-18     	; 0x4ad8 <__LCD_putchar+0xe6>
    4aea:	80 e0       	ldi	r24, 0x00	; 0
    4aec:	61 e0       	ldi	r22, 0x01	; 1
    4aee:	0e 94 48 1b 	call	0x3690	; 0x3690 <LCD_write>
    4af2:	80 91 60 07 	lds	r24, 0x0760
    4af6:	8a 5f       	subi	r24, 0xFA	; 250
    4af8:	80 93 60 07 	sts	0x0760, r24
    4afc:	80 91 60 07 	lds	r24, 0x0760
    4b00:	90 e0       	ldi	r25, 0x00	; 0
    4b02:	8c 37       	cpi	r24, 0x7C	; 124
    4b04:	91 05       	cpc	r25, r1
    4b06:	3c f0       	brlt	.+14     	; 0x4b16 <__LCD_putchar+0x124>
    4b08:	10 92 60 07 	sts	0x0760, r1
    4b0c:	80 91 61 07 	lds	r24, 0x0761
    4b10:	81 50       	subi	r24, 0x01	; 1
    4b12:	80 93 61 07 	sts	0x0761, r24
    4b16:	11 e0       	ldi	r17, 0x01	; 1
    4b18:	80 91 61 07 	lds	r24, 0x0761
    4b1c:	83 70       	andi	r24, 0x03	; 3
    4b1e:	80 93 61 07 	sts	0x0761, r24
    4b22:	11 30       	cpi	r17, 0x01	; 1
    4b24:	59 f4       	brne	.+22     	; 0x4b3c <__LCD_putchar+0x14a>
    4b26:	80 91 62 07 	lds	r24, 0x0762
    4b2a:	81 30       	cpi	r24, 0x01	; 1
    4b2c:	39 f4       	brne	.+14     	; 0x4b3c <__LCD_putchar+0x14a>
    4b2e:	e0 91 63 07 	lds	r30, 0x0763
    4b32:	f0 91 64 07 	lds	r31, 0x0764
    4b36:	30 97       	sbiw	r30, 0x00	; 0
    4b38:	09 f0       	breq	.+2      	; 0x4b3c <__LCD_putchar+0x14a>
    4b3a:	09 95       	icall
    4b3c:	80 e0       	ldi	r24, 0x00	; 0
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	df 91       	pop	r29
    4b42:	cf 91       	pop	r28
    4b44:	1f 91       	pop	r17
    4b46:	0f 91       	pop	r16
    4b48:	ff 90       	pop	r15
    4b4a:	08 95       	ret

00004b4c <__LED_clr_pattern>:
    4b4c:	85 fd       	sbrc	r24, 5
    4b4e:	5d 98       	cbi	0x0b, 5	; 11
    4b50:	86 fd       	sbrc	r24, 6
    4b52:	5e 98       	cbi	0x0b, 6	; 11
    4b54:	08 95       	ret

00004b56 <__LED_init>:
    4b56:	55 9a       	sbi	0x0a, 5	; 10
    4b58:	56 9a       	sbi	0x0a, 6	; 10
    4b5a:	08 95       	ret

00004b5c <__LED_set_pattern>:
    4b5c:	85 fd       	sbrc	r24, 5
    4b5e:	5d 9a       	sbi	0x0b, 5	; 11
    4b60:	86 fd       	sbrc	r24, 6
    4b62:	5e 9a       	sbi	0x0b, 6	; 11
    4b64:	08 95       	ret

00004b66 <ATMEGA_open>:
    4b66:	80 e0       	ldi	r24, 0x00	; 0
    4b68:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    4b6c:	88 23       	and	r24, r24
    4b6e:	51 f4       	brne	.+20     	; 0x4b84 <ATMEGA_open+0x1e>
    4b70:	f8 94       	cli
    4b72:	0e 94 aa 28 	call	0x5154	; 0x5154 <__ATMEGA_init>
    4b76:	81 e0       	ldi	r24, 0x01	; 1
    4b78:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <ATMEGA_set_clk_mode>
    4b7c:	80 e0       	ldi	r24, 0x00	; 0
    4b7e:	61 e0       	ldi	r22, 0x01	; 1
    4b80:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    4b84:	80 e0       	ldi	r24, 0x00	; 0
    4b86:	91 e0       	ldi	r25, 0x01	; 1
    4b88:	08 95       	ret

00004b8a <ATMEGA_set_clk_mode>:
    4b8a:	81 30       	cpi	r24, 0x01	; 1
    4b8c:	49 f0       	breq	.+18     	; 0x4ba0 <ATMEGA_set_clk_mode+0x16>
    4b8e:	f8 94       	cli
    4b90:	81 30       	cpi	r24, 0x01	; 1
    4b92:	20 f1       	brcs	.+72     	; 0x4bdc <ATMEGA_set_clk_mode+0x52>
    4b94:	82 30       	cpi	r24, 0x02	; 2
    4b96:	b1 f0       	breq	.+44     	; 0x4bc4 <ATMEGA_set_clk_mode+0x3a>
    4b98:	83 30       	cpi	r24, 0x03	; 3
    4b9a:	09 f0       	breq	.+2      	; 0x4b9e <ATMEGA_set_clk_mode+0x14>
    4b9c:	45 c0       	rjmp	.+138    	; 0x4c28 <ATMEGA_set_clk_mode+0x9e>
    4b9e:	17 c0       	rjmp	.+46     	; 0x4bce <ATMEGA_set_clk_mode+0x44>
    4ba0:	2c 9a       	sbi	0x05, 4	; 5
    4ba2:	80 e8       	ldi	r24, 0x80	; 128
    4ba4:	80 93 61 00 	sts	0x0061, r24
    4ba8:	10 92 61 00 	sts	0x0061, r1
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	90 e0       	ldi	r25, 0x00	; 0
    4bb0:	00 00       	nop
    4bb2:	01 96       	adiw	r24, 0x01	; 1
    4bb4:	88 32       	cpi	r24, 0x28	; 40
    4bb6:	91 05       	cpc	r25, r1
    4bb8:	d9 f7       	brne	.-10     	; 0x4bb0 <ATMEGA_set_clk_mode+0x26>
    4bba:	10 92 68 00 	sts	0x0068, r1
    4bbe:	10 92 6b 00 	sts	0x006B, r1
    4bc2:	08 95       	ret
    4bc4:	80 e8       	ldi	r24, 0x80	; 128
    4bc6:	80 93 61 00 	sts	0x0061, r24
    4bca:	83 e0       	ldi	r24, 0x03	; 3
    4bcc:	04 c0       	rjmp	.+8      	; 0x4bd6 <ATMEGA_set_clk_mode+0x4c>
    4bce:	80 e8       	ldi	r24, 0x80	; 128
    4bd0:	80 93 61 00 	sts	0x0061, r24
    4bd4:	88 e0       	ldi	r24, 0x08	; 8
    4bd6:	80 93 61 00 	sts	0x0061, r24
    4bda:	28 c0       	rjmp	.+80     	; 0x4c2c <ATMEGA_set_clk_mode+0xa2>
    4bdc:	80 e0       	ldi	r24, 0x00	; 0
    4bde:	90 e0       	ldi	r25, 0x00	; 0
    4be0:	00 00       	nop
    4be2:	01 96       	adiw	r24, 0x01	; 1
    4be4:	2d e6       	ldi	r18, 0x6D	; 109
    4be6:	80 36       	cpi	r24, 0x60	; 96
    4be8:	92 07       	cpc	r25, r18
    4bea:	d1 f7       	brne	.-12     	; 0x4be0 <ATMEGA_set_clk_mode+0x56>
    4bec:	2c 98       	cbi	0x05, 4	; 5
    4bee:	80 e0       	ldi	r24, 0x00	; 0
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	00 00       	nop
    4bf4:	01 96       	adiw	r24, 0x01	; 1
    4bf6:	2d e6       	ldi	r18, 0x6D	; 109
    4bf8:	80 36       	cpi	r24, 0x60	; 96
    4bfa:	92 07       	cpc	r25, r18
    4bfc:	d1 f7       	brne	.-12     	; 0x4bf2 <ATMEGA_set_clk_mode+0x68>
    4bfe:	10 92 7a 00 	sts	0x007A, r1
    4c02:	8f ef       	ldi	r24, 0xFF	; 255
    4c04:	80 93 64 00 	sts	0x0064, r24
    4c08:	80 91 68 00 	lds	r24, 0x0068
    4c0c:	81 60       	ori	r24, 0x01	; 1
    4c0e:	80 93 68 00 	sts	0x0068, r24
    4c12:	80 91 6b 00 	lds	r24, 0x006B
    4c16:	84 60       	ori	r24, 0x04	; 4
    4c18:	80 93 6b 00 	sts	0x006B, r24
    4c1c:	78 94       	sei
    4c1e:	83 b7       	in	r24, 0x33	; 51
    4c20:	81 60       	ori	r24, 0x01	; 1
    4c22:	83 bf       	out	0x33, r24	; 51
    4c24:	88 95       	sleep
    4c26:	08 95       	ret
    4c28:	82 30       	cpi	r24, 0x02	; 2
    4c2a:	08 f0       	brcs	.+2      	; 0x4c2e <ATMEGA_set_clk_mode+0xa4>
    4c2c:	78 94       	sei
    4c2e:	08 95       	ret

00004c30 <SPI_open>:
    4c30:	0f 93       	push	r16
    4c32:	1f 93       	push	r17
    4c34:	0e 94 d6 28 	call	0x51ac	; 0x51ac <__SPI_init>
    4c38:	80 e0       	ldi	r24, 0x00	; 0
    4c3a:	65 ec       	ldi	r22, 0xC5	; 197
    4c3c:	78 e2       	ldi	r23, 0x28	; 40
    4c3e:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <SPI_set_config_func>
    4c42:	81 e0       	ldi	r24, 0x01	; 1
    4c44:	6d eb       	ldi	r22, 0xBD	; 189
    4c46:	78 e2       	ldi	r23, 0x28	; 40
    4c48:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <SPI_set_config_func>
    4c4c:	82 e0       	ldi	r24, 0x02	; 2
    4c4e:	65 eb       	ldi	r22, 0xB5	; 181
    4c50:	78 e2       	ldi	r23, 0x28	; 40
    4c52:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <SPI_set_config_func>
    4c56:	86 e0       	ldi	r24, 0x06	; 6
    4c58:	6d ec       	ldi	r22, 0xCD	; 205
    4c5a:	78 e2       	ldi	r23, 0x28	; 40
    4c5c:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <SPI_set_config_func>
    4c60:	0d ea       	ldi	r16, 0xAD	; 173
    4c62:	18 e2       	ldi	r17, 0x28	; 40
    4c64:	83 e0       	ldi	r24, 0x03	; 3
    4c66:	b8 01       	movw	r22, r16
    4c68:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <SPI_set_config_func>
    4c6c:	84 e0       	ldi	r24, 0x04	; 4
    4c6e:	b8 01       	movw	r22, r16
    4c70:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <SPI_set_config_func>
    4c74:	85 e0       	ldi	r24, 0x05	; 5
    4c76:	b8 01       	movw	r22, r16
    4c78:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <SPI_set_config_func>
    4c7c:	87 e0       	ldi	r24, 0x07	; 7
    4c7e:	b8 01       	movw	r22, r16
    4c80:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <SPI_set_config_func>
    4c84:	82 e0       	ldi	r24, 0x02	; 2
    4c86:	61 e0       	ldi	r22, 0x01	; 1
    4c88:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    4c8c:	8f ef       	ldi	r24, 0xFF	; 255
    4c8e:	80 93 65 07 	sts	0x0765, r24
    4c92:	87 e0       	ldi	r24, 0x07	; 7
    4c94:	0e 94 84 1b 	call	0x3708	; 0x3708 <SPI_set_slave_addr>
    4c98:	82 e0       	ldi	r24, 0x02	; 2
    4c9a:	91 e0       	ldi	r25, 0x01	; 1
    4c9c:	1f 91       	pop	r17
    4c9e:	0f 91       	pop	r16
    4ca0:	08 95       	ret

00004ca2 <SPI_receive>:
    4ca2:	1f 93       	push	r17
    4ca4:	16 2f       	mov	r17, r22
    4ca6:	0e 94 84 1b 	call	0x3708	; 0x3708 <SPI_set_slave_addr>
    4caa:	82 e0       	ldi	r24, 0x02	; 2
    4cac:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    4cb0:	81 30       	cpi	r24, 0x01	; 1
    4cb2:	11 f0       	breq	.+4      	; 0x4cb8 <SPI_receive+0x16>
    4cb4:	80 e0       	ldi	r24, 0x00	; 0
    4cb6:	05 c0       	rjmp	.+10     	; 0x4cc2 <SPI_receive+0x20>
    4cb8:	1e bd       	out	0x2e, r17	; 46
    4cba:	0d b4       	in	r0, 0x2d	; 45
    4cbc:	07 fe       	sbrs	r0, 7
    4cbe:	fd cf       	rjmp	.-6      	; 0x4cba <SPI_receive+0x18>
    4cc0:	8e b5       	in	r24, 0x2e	; 46
    4cc2:	1f 91       	pop	r17
    4cc4:	08 95       	ret

00004cc6 <SPI_set_config_func>:
    4cc6:	e8 2f       	mov	r30, r24
    4cc8:	f0 e0       	ldi	r31, 0x00	; 0
    4cca:	ee 0f       	add	r30, r30
    4ccc:	ff 1f       	adc	r31, r31
    4cce:	e6 5c       	subi	r30, 0xC6	; 198
    4cd0:	fb 4f       	sbci	r31, 0xFB	; 251
    4cd2:	71 83       	std	Z+1, r23	; 0x01
    4cd4:	60 83       	st	Z, r22
    4cd6:	08 95       	ret

00004cd8 <__SPKR_TIMER1_COMPA_vect>:
    4cd8:	0e 94 6f 26 	call	0x4cde	; 0x4cde <SPKR_clk>
    4cdc:	08 95       	ret

00004cde <SPKR_clk>:
    4cde:	80 91 4c 04 	lds	r24, 0x044C
    4ce2:	90 91 4d 04 	lds	r25, 0x044D
    4ce6:	a0 91 4e 04 	lds	r26, 0x044E
    4cea:	b0 91 4f 04 	lds	r27, 0x044F
    4cee:	20 91 50 04 	lds	r18, 0x0450
    4cf2:	30 91 51 04 	lds	r19, 0x0451
    4cf6:	40 91 52 04 	lds	r20, 0x0452
    4cfa:	50 91 53 04 	lds	r21, 0x0453
    4cfe:	28 0f       	add	r18, r24
    4d00:	39 1f       	adc	r19, r25
    4d02:	4a 1f       	adc	r20, r26
    4d04:	5b 1f       	adc	r21, r27
    4d06:	20 93 4c 04 	sts	0x044C, r18
    4d0a:	30 93 4d 04 	sts	0x044D, r19
    4d0e:	40 93 4e 04 	sts	0x044E, r20
    4d12:	50 93 4f 04 	sts	0x044F, r21
    4d16:	80 91 4c 04 	lds	r24, 0x044C
    4d1a:	90 91 4d 04 	lds	r25, 0x044D
    4d1e:	a0 91 4e 04 	lds	r26, 0x044E
    4d22:	b0 91 4f 04 	lds	r27, 0x044F
    4d26:	88 51       	subi	r24, 0x18	; 24
    4d28:	96 4f       	sbci	r25, 0xF6	; 246
    4d2a:	a0 40       	sbci	r26, 0x00	; 0
    4d2c:	b0 40       	sbci	r27, 0x00	; 0
    4d2e:	bc f0       	brlt	.+46     	; 0x4d5e <SPKR_clk+0x80>
    4d30:	8b b1       	in	r24, 0x0b	; 11
    4d32:	80 58       	subi	r24, 0x80	; 128
    4d34:	8b b9       	out	0x0b, r24	; 11
    4d36:	80 91 4c 04 	lds	r24, 0x044C
    4d3a:	90 91 4d 04 	lds	r25, 0x044D
    4d3e:	a0 91 4e 04 	lds	r26, 0x044E
    4d42:	b0 91 4f 04 	lds	r27, 0x044F
    4d46:	88 51       	subi	r24, 0x18	; 24
    4d48:	96 4f       	sbci	r25, 0xF6	; 246
    4d4a:	a0 40       	sbci	r26, 0x00	; 0
    4d4c:	b0 40       	sbci	r27, 0x00	; 0
    4d4e:	80 93 4c 04 	sts	0x044C, r24
    4d52:	90 93 4d 04 	sts	0x044D, r25
    4d56:	a0 93 4e 04 	sts	0x044E, r26
    4d5a:	b0 93 4f 04 	sts	0x044F, r27
    4d5e:	08 95       	ret

00004d60 <__SPKR_close_beep_mode>:
    4d60:	8a e0       	ldi	r24, 0x0A	; 10
    4d62:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    4d66:	81 30       	cpi	r24, 0x01	; 1
    4d68:	41 f4       	brne	.+16     	; 0x4d7a <__SPKR_close_beep_mode+0x1a>
    4d6a:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <__SPKR_close>
    4d6e:	10 92 4b 04 	sts	0x044B, r1
    4d72:	8a e0       	ldi	r24, 0x0A	; 10
    4d74:	60 e0       	ldi	r22, 0x00	; 0
    4d76:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    4d7a:	08 95       	ret

00004d7c <__SPKR_close_tone_mode>:
    4d7c:	89 e0       	ldi	r24, 0x09	; 9
    4d7e:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    4d82:	81 30       	cpi	r24, 0x01	; 1
    4d84:	d9 f4       	brne	.+54     	; 0x4dbc <__SPKR_close_tone_mode+0x40>
    4d86:	80 91 4a 04 	lds	r24, 0x044A
    4d8a:	88 23       	and	r24, r24
    4d8c:	11 f0       	breq	.+4      	; 0x4d92 <__SPKR_close_tone_mode+0x16>
    4d8e:	0e 94 60 27 	call	0x4ec0	; 0x4ec0 <__SPKR_stop>
    4d92:	82 e0       	ldi	r24, 0x02	; 2
    4d94:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <__SPKR_close>
    4d98:	80 91 58 04 	lds	r24, 0x0458
    4d9c:	90 91 59 04 	lds	r25, 0x0459
    4da0:	00 97       	sbiw	r24, 0x00	; 0
    4da2:	31 f0       	breq	.+12     	; 0x4db0 <__SPKR_close_tone_mode+0x34>
    4da4:	0e 94 67 35 	call	0x6ace	; 0x6ace <free>
    4da8:	10 92 59 04 	sts	0x0459, r1
    4dac:	10 92 58 04 	sts	0x0458, r1
    4db0:	10 92 4a 04 	sts	0x044A, r1
    4db4:	89 e0       	ldi	r24, 0x09	; 9
    4db6:	60 e0       	ldi	r22, 0x00	; 0
    4db8:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    4dbc:	08 95       	ret

00004dbe <SPKR_close>:
    4dbe:	81 30       	cpi	r24, 0x01	; 1
    4dc0:	29 f0       	breq	.+10     	; 0x4dcc <SPKR_close+0xe>
    4dc2:	82 30       	cpi	r24, 0x02	; 2
    4dc4:	29 f4       	brne	.+10     	; 0x4dd0 <SPKR_close+0x12>
    4dc6:	0e 94 be 26 	call	0x4d7c	; 0x4d7c <__SPKR_close_tone_mode>
    4dca:	08 95       	ret
    4dcc:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__SPKR_close_beep_mode>
    4dd0:	08 95       	ret

00004dd2 <__SPKR_init>:
    4dd2:	98 2f       	mov	r25, r24
    4dd4:	80 91 4a 04 	lds	r24, 0x044A
    4dd8:	88 23       	and	r24, r24
    4dda:	31 f4       	brne	.+12     	; 0x4de8 <__SPKR_init+0x16>
    4ddc:	80 91 4b 04 	lds	r24, 0x044B
    4de0:	88 23       	and	r24, r24
    4de2:	11 f4       	brne	.+4      	; 0x4de8 <__SPKR_init+0x16>
    4de4:	57 9a       	sbi	0x0a, 7	; 10
    4de6:	5f 98       	cbi	0x0b, 7	; 11
    4de8:	80 91 4a 04 	lds	r24, 0x044A
    4dec:	88 23       	and	r24, r24
    4dee:	d1 f4       	brne	.+52     	; 0x4e24 <__SPKR_init+0x52>
    4df0:	92 30       	cpi	r25, 0x02	; 2
    4df2:	c1 f4       	brne	.+48     	; 0x4e24 <__SPKR_init+0x52>
    4df4:	10 92 80 00 	sts	0x0080, r1
    4df8:	10 92 81 00 	sts	0x0081, r1
    4dfc:	80 91 81 00 	lds	r24, 0x0081
    4e00:	88 60       	ori	r24, 0x08	; 8
    4e02:	80 93 81 00 	sts	0x0081, r24
    4e06:	80 91 81 00 	lds	r24, 0x0081
    4e0a:	81 60       	ori	r24, 0x01	; 1
    4e0c:	80 93 81 00 	sts	0x0081, r24
    4e10:	10 92 85 00 	sts	0x0085, r1
    4e14:	10 92 84 00 	sts	0x0084, r1
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	80 93 89 00 	sts	0x0089, r24
    4e1e:	80 e9       	ldi	r24, 0x90	; 144
    4e20:	80 93 88 00 	sts	0x0088, r24
    4e24:	08 95       	ret

00004e26 <SPKR_play_beep>:
    4e26:	8f 92       	push	r8
    4e28:	9f 92       	push	r9
    4e2a:	af 92       	push	r10
    4e2c:	bf 92       	push	r11
    4e2e:	cf 92       	push	r12
    4e30:	df 92       	push	r13
    4e32:	ef 92       	push	r14
    4e34:	ff 92       	push	r15
    4e36:	0f 93       	push	r16
    4e38:	1f 93       	push	r17
    4e3a:	cf 93       	push	r28
    4e3c:	df 93       	push	r29
    4e3e:	4b 01       	movw	r8, r22
    4e40:	5c 01       	movw	r10, r24
    4e42:	ea 01       	movw	r28, r20
    4e44:	b9 01       	movw	r22, r18
    4e46:	21 15       	cp	r18, r1
    4e48:	31 05       	cpc	r19, r1
    4e4a:	39 f1       	breq	.+78     	; 0x4e9a <SPKR_play_beep+0x74>
    4e4c:	9e 01       	movw	r18, r28
    4e4e:	44 27       	eor	r20, r20
    4e50:	37 fd       	sbrc	r19, 7
    4e52:	40 95       	com	r20
    4e54:	54 2f       	mov	r21, r20
    4e56:	65 36       	cpi	r22, 0x65	; 101
    4e58:	71 05       	cpc	r23, r1
    4e5a:	10 f0       	brcs	.+4      	; 0x4e60 <SPKR_play_beep+0x3a>
    4e5c:	64 e6       	ldi	r22, 0x64	; 100
    4e5e:	70 e0       	ldi	r23, 0x00	; 0
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	0e 94 42 34 	call	0x6884	; 0x6884 <__mulsi3>
    4e68:	24 e6       	ldi	r18, 0x64	; 100
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	40 e0       	ldi	r20, 0x00	; 0
    4e6e:	50 e0       	ldi	r21, 0x00	; 0
    4e70:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    4e74:	79 01       	movw	r14, r18
    4e76:	8a 01       	movw	r16, r20
    4e78:	c5 01       	movw	r24, r10
    4e7a:	b4 01       	movw	r22, r8
    4e7c:	0e 94 dd 28 	call	0x51ba	; 0x51ba <SPKR_beep>
    4e80:	c7 01       	movw	r24, r14
    4e82:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
    4e86:	60 e0       	ldi	r22, 0x00	; 0
    4e88:	70 e0       	ldi	r23, 0x00	; 0
    4e8a:	80 e0       	ldi	r24, 0x00	; 0
    4e8c:	90 e0       	ldi	r25, 0x00	; 0
    4e8e:	0e 94 dd 28 	call	0x51ba	; 0x51ba <SPKR_beep>
    4e92:	ce 01       	movw	r24, r28
    4e94:	8e 19       	sub	r24, r14
    4e96:	9f 09       	sbc	r25, r15
    4e98:	04 c0       	rjmp	.+8      	; 0x4ea2 <SPKR_play_beep+0x7c>
    4e9a:	41 15       	cp	r20, r1
    4e9c:	51 05       	cpc	r21, r1
    4e9e:	19 f0       	breq	.+6      	; 0x4ea6 <SPKR_play_beep+0x80>
    4ea0:	ca 01       	movw	r24, r20
    4ea2:	0e 94 44 21 	call	0x4288	; 0x4288 <TMRSRVC_delay>
    4ea6:	df 91       	pop	r29
    4ea8:	cf 91       	pop	r28
    4eaa:	1f 91       	pop	r17
    4eac:	0f 91       	pop	r16
    4eae:	ff 90       	pop	r15
    4eb0:	ef 90       	pop	r14
    4eb2:	df 90       	pop	r13
    4eb4:	cf 90       	pop	r12
    4eb6:	bf 90       	pop	r11
    4eb8:	af 90       	pop	r10
    4eba:	9f 90       	pop	r9
    4ebc:	8f 90       	pop	r8
    4ebe:	08 95       	ret

00004ec0 <__SPKR_stop>:
    4ec0:	ef e6       	ldi	r30, 0x6F	; 111
    4ec2:	f0 e0       	ldi	r31, 0x00	; 0
    4ec4:	80 81       	ld	r24, Z
    4ec6:	8d 7f       	andi	r24, 0xFD	; 253
    4ec8:	80 83       	st	Z, r24
    4eca:	08 95       	ret

00004ecc <STEPPER_go>:
    4ecc:	98 2f       	mov	r25, r24
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	80 93 4a 07 	sts	0x074A, r24
    4ed4:	91 30       	cpi	r25, 0x01	; 1
    4ed6:	51 f0       	breq	.+20     	; 0x4eec <STEPPER_go+0x20>
    4ed8:	91 30       	cpi	r25, 0x01	; 1
    4eda:	18 f0       	brcs	.+6      	; 0x4ee2 <STEPPER_go+0x16>
    4edc:	92 30       	cpi	r25, 0x02	; 2
    4ede:	41 f4       	brne	.+16     	; 0x4ef0 <STEPPER_go+0x24>
    4ee0:	03 c0       	rjmp	.+6      	; 0x4ee8 <STEPPER_go+0x1c>
    4ee2:	10 92 32 07 	sts	0x0732, r1
    4ee6:	04 c0       	rjmp	.+8      	; 0x4ef0 <STEPPER_go+0x24>
    4ee8:	10 92 32 07 	sts	0x0732, r1
    4eec:	10 92 33 07 	sts	0x0733, r1
    4ef0:	10 92 4a 07 	sts	0x074A, r1
    4ef4:	08 95       	ret

00004ef6 <__STEPPER_init>:
    4ef6:	3a 9a       	sbi	0x07, 2	; 7
    4ef8:	3b 9a       	sbi	0x07, 3	; 7
    4efa:	3c 9a       	sbi	0x07, 4	; 7
    4efc:	3d 9a       	sbi	0x07, 5	; 7
    4efe:	3e 9a       	sbi	0x07, 6	; 7
    4f00:	3f 9a       	sbi	0x07, 7	; 7
    4f02:	88 b1       	in	r24, 0x08	; 8
    4f04:	83 70       	andi	r24, 0x03	; 3
    4f06:	88 b9       	out	0x08, r24	; 8
    4f08:	08 95       	ret

00004f0a <STEPPER_set_stop_mode>:
    4f0a:	98 2f       	mov	r25, r24
    4f0c:	81 e0       	ldi	r24, 0x01	; 1
    4f0e:	80 93 4a 07 	sts	0x074A, r24
    4f12:	91 30       	cpi	r25, 0x01	; 1
    4f14:	51 f0       	breq	.+20     	; 0x4f2a <STEPPER_set_stop_mode+0x20>
    4f16:	91 30       	cpi	r25, 0x01	; 1
    4f18:	18 f0       	brcs	.+6      	; 0x4f20 <STEPPER_set_stop_mode+0x16>
    4f1a:	92 30       	cpi	r25, 0x02	; 2
    4f1c:	41 f4       	brne	.+16     	; 0x4f2e <STEPPER_set_stop_mode+0x24>
    4f1e:	03 c0       	rjmp	.+6      	; 0x4f26 <STEPPER_set_stop_mode+0x1c>
    4f20:	60 93 34 07 	sts	0x0734, r22
    4f24:	04 c0       	rjmp	.+8      	; 0x4f2e <STEPPER_set_stop_mode+0x24>
    4f26:	60 93 34 07 	sts	0x0734, r22
    4f2a:	60 93 35 07 	sts	0x0735, r22
    4f2e:	10 92 4a 07 	sts	0x074A, r1
    4f32:	08 95       	ret

00004f34 <STEPPER_setup_decels>:
    4f34:	0f 93       	push	r16
    4f36:	1f 93       	push	r17
    4f38:	cf 93       	push	r28
    4f3a:	df 93       	push	r29
    4f3c:	eb 01       	movw	r28, r22
    4f3e:	8a 01       	movw	r16, r20
    4f40:	81 30       	cpi	r24, 0x01	; 1
    4f42:	01 f1       	breq	.+64     	; 0x4f84 <STEPPER_setup_decels+0x50>
    4f44:	81 30       	cpi	r24, 0x01	; 1
    4f46:	18 f0       	brcs	.+6      	; 0x4f4e <STEPPER_setup_decels+0x1a>
    4f48:	82 30       	cpi	r24, 0x02	; 2
    4f4a:	61 f5       	brne	.+88     	; 0x4fa4 <STEPPER_setup_decels+0x70>
    4f4c:	0d c0       	rjmp	.+26     	; 0x4f68 <STEPPER_setup_decels+0x34>
    4f4e:	80 91 1e 07 	lds	r24, 0x071E
    4f52:	90 91 1f 07 	lds	r25, 0x071F
    4f56:	89 2b       	or	r24, r25
    4f58:	11 f0       	breq	.+4      	; 0x4f5e <STEPPER_setup_decels+0x2a>
    4f5a:	80 e0       	ldi	r24, 0x00	; 0
    4f5c:	1a c0       	rjmp	.+52     	; 0x4f92 <STEPPER_setup_decels+0x5e>
    4f5e:	10 92 2b 07 	sts	0x072B, r1
    4f62:	10 92 2a 07 	sts	0x072A, r1
    4f66:	1e c0       	rjmp	.+60     	; 0x4fa4 <STEPPER_setup_decels+0x70>
    4f68:	80 91 1e 07 	lds	r24, 0x071E
    4f6c:	90 91 1f 07 	lds	r25, 0x071F
    4f70:	89 2b       	or	r24, r25
    4f72:	21 f0       	breq	.+8      	; 0x4f7c <STEPPER_setup_decels+0x48>
    4f74:	80 e0       	ldi	r24, 0x00	; 0
    4f76:	0e 94 10 29 	call	0x5220	; 0x5220 <STEPPER_set_decel_step_values>
    4f7a:	04 c0       	rjmp	.+8      	; 0x4f84 <STEPPER_setup_decels+0x50>
    4f7c:	10 92 2b 07 	sts	0x072B, r1
    4f80:	10 92 2a 07 	sts	0x072A, r1
    4f84:	80 91 20 07 	lds	r24, 0x0720
    4f88:	90 91 21 07 	lds	r25, 0x0721
    4f8c:	89 2b       	or	r24, r25
    4f8e:	31 f0       	breq	.+12     	; 0x4f9c <STEPPER_setup_decels+0x68>
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	be 01       	movw	r22, r28
    4f94:	a8 01       	movw	r20, r16
    4f96:	0e 94 10 29 	call	0x5220	; 0x5220 <STEPPER_set_decel_step_values>
    4f9a:	04 c0       	rjmp	.+8      	; 0x4fa4 <STEPPER_setup_decels+0x70>
    4f9c:	10 92 2d 07 	sts	0x072D, r1
    4fa0:	10 92 2c 07 	sts	0x072C, r1
    4fa4:	df 91       	pop	r29
    4fa6:	cf 91       	pop	r28
    4fa8:	1f 91       	pop	r17
    4faa:	0f 91       	pop	r16
    4fac:	08 95       	ret

00004fae <SYS_init>:
    4fae:	10 92 4d 07 	sts	0x074D, r1
    4fb2:	10 92 4e 07 	sts	0x074E, r1
    4fb6:	10 92 52 07 	sts	0x0752, r1
    4fba:	10 92 4f 07 	sts	0x074F, r1
    4fbe:	10 92 51 07 	sts	0x0751, r1
    4fc2:	10 92 53 07 	sts	0x0753, r1
    4fc6:	10 92 54 07 	sts	0x0754, r1
    4fca:	10 92 55 07 	sts	0x0755, r1
    4fce:	10 92 56 07 	sts	0x0756, r1
    4fd2:	10 92 57 07 	sts	0x0757, r1
    4fd6:	10 92 58 07 	sts	0x0758, r1
    4fda:	10 92 59 07 	sts	0x0759, r1
    4fde:	10 92 5a 07 	sts	0x075A, r1
    4fe2:	10 92 5b 07 	sts	0x075B, r1
    4fe6:	10 92 5c 07 	sts	0x075C, r1
    4fea:	10 92 5d 07 	sts	0x075D, r1
    4fee:	10 92 5e 07 	sts	0x075E, r1
    4ff2:	08 95       	ret

00004ff4 <TMRSRVC_insert>:
    4ff4:	cf 92       	push	r12
    4ff6:	df 92       	push	r13
    4ff8:	ef 92       	push	r14
    4ffa:	ff 92       	push	r15
    4ffc:	0f 93       	push	r16
    4ffe:	1f 93       	push	r17
    5000:	cf 93       	push	r28
    5002:	df 93       	push	r29
    5004:	ec 01       	movw	r28, r24
    5006:	80 91 84 07 	lds	r24, 0x0784
    500a:	88 23       	and	r24, r24
    500c:	39 f4       	brne	.+14     	; 0x501c <TMRSRVC_insert+0x28>
    500e:	d0 93 86 07 	sts	0x0786, r29
    5012:	c0 93 85 07 	sts	0x0785, r28
    5016:	0e 94 88 28 	call	0x5110	; 0x5110 <TMRSRVC_start>
    501a:	47 c0       	rjmp	.+142    	; 0x50aa <TMRSRVC_insert+0xb6>
    501c:	c0 90 85 07 	lds	r12, 0x0785
    5020:	d0 90 86 07 	lds	r13, 0x0786
    5024:	00 e0       	ldi	r16, 0x00	; 0
    5026:	10 e0       	ldi	r17, 0x00	; 0
    5028:	ee 24       	eor	r14, r14
    502a:	ff 24       	eor	r15, r15
    502c:	37 c0       	rjmp	.+110    	; 0x509c <TMRSRVC_insert+0xa8>
    502e:	a8 81       	ld	r26, Y
    5030:	b9 81       	ldd	r27, Y+1	; 0x01
    5032:	fd 01       	movw	r30, r26
    5034:	64 81       	ldd	r22, Z+4	; 0x04
    5036:	75 81       	ldd	r23, Z+5	; 0x05
    5038:	f6 01       	movw	r30, r12
    503a:	40 81       	ld	r20, Z
    503c:	51 81       	ldd	r21, Z+1	; 0x01
    503e:	fa 01       	movw	r30, r20
    5040:	84 81       	ldd	r24, Z+4	; 0x04
    5042:	95 81       	ldd	r25, Z+5	; 0x05
    5044:	9b 01       	movw	r18, r22
    5046:	28 1b       	sub	r18, r24
    5048:	39 0b       	sbc	r19, r25
    504a:	37 ff       	sbrs	r19, 7
    504c:	0f c0       	rjmp	.+30     	; 0x506c <TMRSRVC_insert+0x78>
    504e:	86 1b       	sub	r24, r22
    5050:	97 0b       	sbc	r25, r23
    5052:	95 83       	std	Z+5, r25	; 0x05
    5054:	84 83       	std	Z+4, r24	; 0x04
    5056:	db 82       	std	Y+3, r13	; 0x03
    5058:	ca 82       	std	Y+2, r12	; 0x02
    505a:	01 2b       	or	r16, r17
    505c:	29 f4       	brne	.+10     	; 0x5068 <TMRSRVC_insert+0x74>
    505e:	d0 93 86 07 	sts	0x0786, r29
    5062:	c0 93 85 07 	sts	0x0785, r28
    5066:	21 c0       	rjmp	.+66     	; 0x50aa <TMRSRVC_insert+0xb6>
    5068:	f7 01       	movw	r30, r14
    506a:	0c c0       	rjmp	.+24     	; 0x5084 <TMRSRVC_insert+0x90>
    506c:	f6 01       	movw	r30, r12
    506e:	82 81       	ldd	r24, Z+2	; 0x02
    5070:	93 81       	ldd	r25, Z+3	; 0x03
    5072:	21 15       	cp	r18, r1
    5074:	31 05       	cpc	r19, r1
    5076:	49 f4       	brne	.+18     	; 0x508a <TMRSRVC_insert+0x96>
    5078:	fd 01       	movw	r30, r26
    507a:	15 82       	std	Z+5, r1	; 0x05
    507c:	14 82       	std	Z+4, r1	; 0x04
    507e:	9b 83       	std	Y+3, r25	; 0x03
    5080:	8a 83       	std	Y+2, r24	; 0x02
    5082:	f6 01       	movw	r30, r12
    5084:	d3 83       	std	Z+3, r29	; 0x03
    5086:	c2 83       	std	Z+2, r28	; 0x02
    5088:	10 c0       	rjmp	.+32     	; 0x50aa <TMRSRVC_insert+0xb6>
    508a:	fd 01       	movw	r30, r26
    508c:	35 83       	std	Z+5, r19	; 0x05
    508e:	24 83       	std	Z+4, r18	; 0x04
    5090:	00 97       	sbiw	r24, 0x00	; 0
    5092:	b9 f3       	breq	.-18     	; 0x5082 <TMRSRVC_insert+0x8e>
    5094:	0f 5f       	subi	r16, 0xFF	; 255
    5096:	1f 4f       	sbci	r17, 0xFF	; 255
    5098:	76 01       	movw	r14, r12
    509a:	6c 01       	movw	r12, r24
    509c:	80 91 84 07 	lds	r24, 0x0784
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	08 17       	cp	r16, r24
    50a4:	19 07       	cpc	r17, r25
    50a6:	18 f2       	brcs	.-122    	; 0x502e <TMRSRVC_insert+0x3a>
    50a8:	ec cf       	rjmp	.-40     	; 0x5082 <TMRSRVC_insert+0x8e>
    50aa:	80 91 84 07 	lds	r24, 0x0784
    50ae:	8f 5f       	subi	r24, 0xFF	; 255
    50b0:	80 93 84 07 	sts	0x0784, r24
    50b4:	df 91       	pop	r29
    50b6:	cf 91       	pop	r28
    50b8:	1f 91       	pop	r17
    50ba:	0f 91       	pop	r16
    50bc:	ff 90       	pop	r15
    50be:	ef 90       	pop	r14
    50c0:	df 90       	pop	r13
    50c2:	cf 90       	pop	r12
    50c4:	08 95       	ret

000050c6 <TMRSRVC_open>:
    50c6:	88 e0       	ldi	r24, 0x08	; 8
    50c8:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    50cc:	88 23       	and	r24, r24
    50ce:	b9 f4       	brne	.+46     	; 0x50fe <TMRSRVC_open+0x38>
    50d0:	10 92 84 07 	sts	0x0784, r1
    50d4:	10 92 86 07 	sts	0x0786, r1
    50d8:	10 92 85 07 	sts	0x0785, r1
    50dc:	10 92 5a 04 	sts	0x045A, r1
    50e0:	10 92 5b 04 	sts	0x045B, r1
    50e4:	80 e1       	ldi	r24, 0x10	; 16
    50e6:	6d e7       	ldi	r22, 0x7D	; 125
    50e8:	79 e2       	ldi	r23, 0x29	; 41
    50ea:	0e 94 99 28 	call	0x5132	; 0x5132 <__ISR_attach>
    50ee:	0e 94 84 29 	call	0x5308	; 0x5308 <__TMRSRVC_init>
    50f2:	0e 94 82 28 	call	0x5104	; 0x5104 <__TMRSRVC_start>
    50f6:	88 e0       	ldi	r24, 0x08	; 8
    50f8:	61 e0       	ldi	r22, 0x01	; 1
    50fa:	0e 94 2f 20 	call	0x405e	; 0x405e <SYS_set_state>
    50fe:	88 e0       	ldi	r24, 0x08	; 8
    5100:	91 e0       	ldi	r25, 0x01	; 1
    5102:	08 95       	ret

00005104 <__TMRSRVC_start>:
    5104:	ee e6       	ldi	r30, 0x6E	; 110
    5106:	f0 e0       	ldi	r31, 0x00	; 0
    5108:	80 81       	ld	r24, Z
    510a:	82 60       	ori	r24, 0x02	; 2
    510c:	80 83       	st	Z, r24
    510e:	08 95       	ret

00005110 <TMRSRVC_start>:
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	80 93 5b 04 	sts	0x045B, r24
    5116:	08 95       	ret

00005118 <I2C_enable>:
    5118:	80 91 87 07 	lds	r24, 0x0787
    511c:	81 30       	cpi	r24, 0x01	; 1
    511e:	29 f4       	brne	.+10     	; 0x512a <I2C_enable+0x12>
    5120:	80 91 bc 00 	lds	r24, 0x00BC
    5124:	84 60       	ori	r24, 0x04	; 4
    5126:	80 93 bc 00 	sts	0x00BC, r24
    512a:	08 95       	ret

0000512c <__I2C_init>:
    512c:	38 98       	cbi	0x07, 0	; 7
    512e:	39 98       	cbi	0x07, 1	; 7
    5130:	08 95       	ret

00005132 <__ISR_attach>:
    5132:	80 32       	cpi	r24, 0x20	; 32
    5134:	18 f0       	brcs	.+6      	; 0x513c <__ISR_attach+0xa>
    5136:	20 e0       	ldi	r18, 0x00	; 0
    5138:	30 e0       	ldi	r19, 0x00	; 0
    513a:	0a c0       	rjmp	.+20     	; 0x5150 <__ISR_attach+0x1e>
    513c:	e8 2f       	mov	r30, r24
    513e:	f0 e0       	ldi	r31, 0x00	; 0
    5140:	ee 0f       	add	r30, r30
    5142:	ff 1f       	adc	r31, r31
    5144:	e6 50       	subi	r30, 0x06	; 6
    5146:	fc 4f       	sbci	r31, 0xFC	; 252
    5148:	20 81       	ld	r18, Z
    514a:	31 81       	ldd	r19, Z+1	; 0x01
    514c:	71 83       	std	Z+1, r23	; 0x01
    514e:	60 83       	st	Z, r22
    5150:	c9 01       	movw	r24, r18
    5152:	08 95       	ret

00005154 <__ATMEGA_init>:
    5154:	24 9a       	sbi	0x04, 4	; 4
    5156:	2c 9a       	sbi	0x05, 4	; 5
    5158:	08 95       	ret

0000515a <SPI_default_config>:
    515a:	83 e5       	ldi	r24, 0x53	; 83
    515c:	8c bd       	out	0x2c, r24	; 44
    515e:	81 e0       	ldi	r24, 0x01	; 1
    5160:	8d bd       	out	0x2d, r24	; 45
    5162:	8d e0       	ldi	r24, 0x0D	; 13
    5164:	8a 95       	dec	r24
    5166:	f1 f7       	brne	.-4      	; 0x5164 <SPI_default_config+0xa>
    5168:	08 95       	ret

0000516a <SPI_ATtiny0_config>:
    516a:	83 e5       	ldi	r24, 0x53	; 83
    516c:	8c bd       	out	0x2c, r24	; 44
    516e:	1d bc       	out	0x2d, r1	; 45
    5170:	84 ef       	ldi	r24, 0xF4	; 244
    5172:	91 e0       	ldi	r25, 0x01	; 1
    5174:	01 97       	sbiw	r24, 0x01	; 1
    5176:	f1 f7       	brne	.-4      	; 0x5174 <SPI_ATtiny0_config+0xa>
    5178:	08 95       	ret

0000517a <SPI_PSXC_config>:
    517a:	8f e7       	ldi	r24, 0x7F	; 127
    517c:	8c bd       	out	0x2c, r24	; 44
    517e:	1d bc       	out	0x2d, r1	; 45
    5180:	84 ef       	ldi	r24, 0xF4	; 244
    5182:	91 e0       	ldi	r25, 0x01	; 1
    5184:	01 97       	sbiw	r24, 0x01	; 1
    5186:	f1 f7       	brne	.-4      	; 0x5184 <SPI_PSXC_config+0xa>
    5188:	08 95       	ret

0000518a <SPI_LCD_config>:
    518a:	83 e5       	ldi	r24, 0x53	; 83
    518c:	8c bd       	out	0x2c, r24	; 44
    518e:	81 e0       	ldi	r24, 0x01	; 1
    5190:	8d bd       	out	0x2d, r24	; 45
    5192:	8d e0       	ldi	r24, 0x0D	; 13
    5194:	8a 95       	dec	r24
    5196:	f1 f7       	brne	.-4      	; 0x5194 <SPI_LCD_config+0xa>
    5198:	08 95       	ret

0000519a <SPI_FLASH_config>:
    519a:	83 e5       	ldi	r24, 0x53	; 83
    519c:	8c bd       	out	0x2c, r24	; 44
    519e:	81 e0       	ldi	r24, 0x01	; 1
    51a0:	8d bd       	out	0x2d, r24	; 45
    51a2:	84 ef       	ldi	r24, 0xF4	; 244
    51a4:	91 e0       	ldi	r25, 0x01	; 1
    51a6:	01 97       	sbiw	r24, 0x01	; 1
    51a8:	f1 f7       	brne	.-4      	; 0x51a6 <SPI_FLASH_config+0xc>
    51aa:	08 95       	ret

000051ac <__SPI_init>:
    51ac:	25 9a       	sbi	0x04, 5	; 4
    51ae:	26 98       	cbi	0x04, 6	; 4
    51b0:	27 9a       	sbi	0x04, 7	; 4
    51b2:	20 9a       	sbi	0x04, 0	; 4
    51b4:	21 9a       	sbi	0x04, 1	; 4
    51b6:	22 9a       	sbi	0x04, 2	; 4
    51b8:	08 95       	ret

000051ba <SPKR_beep>:
    51ba:	9b 01       	movw	r18, r22
    51bc:	ac 01       	movw	r20, r24
    51be:	80 91 4b 04 	lds	r24, 0x044B
    51c2:	88 23       	and	r24, r24
    51c4:	81 f0       	breq	.+32     	; 0x51e6 <SPKR_beep+0x2c>
    51c6:	da 01       	movw	r26, r20
    51c8:	c9 01       	movw	r24, r18
    51ca:	88 0f       	add	r24, r24
    51cc:	99 1f       	adc	r25, r25
    51ce:	aa 1f       	adc	r26, r26
    51d0:	bb 1f       	adc	r27, r27
    51d2:	90 93 57 04 	sts	0x0457, r25
    51d6:	80 93 56 04 	sts	0x0456, r24
    51da:	21 15       	cp	r18, r1
    51dc:	31 05       	cpc	r19, r1
    51de:	41 05       	cpc	r20, r1
    51e0:	51 05       	cpc	r21, r1
    51e2:	09 f4       	brne	.+2      	; 0x51e6 <SPKR_beep+0x2c>
    51e4:	5f 98       	cbi	0x0b, 7	; 11
    51e6:	08 95       	ret

000051e8 <__SPKR_close>:
    51e8:	82 30       	cpi	r24, 0x02	; 2
    51ea:	29 f4       	brne	.+10     	; 0x51f6 <__SPKR_close+0xe>
    51ec:	80 91 81 00 	lds	r24, 0x0081
    51f0:	8e 7f       	andi	r24, 0xFE	; 254
    51f2:	80 93 81 00 	sts	0x0081, r24
    51f6:	80 91 4a 04 	lds	r24, 0x044A
    51fa:	81 30       	cpi	r24, 0x01	; 1
    51fc:	31 f4       	brne	.+12     	; 0x520a <__SPKR_close+0x22>
    51fe:	80 91 4b 04 	lds	r24, 0x044B
    5202:	81 30       	cpi	r24, 0x01	; 1
    5204:	11 f4       	brne	.+4      	; 0x520a <__SPKR_close+0x22>
    5206:	00 00       	nop
    5208:	08 95       	ret
    520a:	80 91 4a 04 	lds	r24, 0x044A
    520e:	81 30       	cpi	r24, 0x01	; 1
    5210:	21 f0       	breq	.+8      	; 0x521a <__SPKR_close+0x32>
    5212:	80 91 4b 04 	lds	r24, 0x044B
    5216:	81 30       	cpi	r24, 0x01	; 1
    5218:	11 f4       	brne	.+4      	; 0x521e <__SPKR_close+0x36>
    521a:	5f 98       	cbi	0x0b, 7	; 11
    521c:	57 98       	cbi	0x0a, 7	; 10
    521e:	08 95       	ret

00005220 <STEPPER_set_decel_step_values>:
    5220:	ef 92       	push	r14
    5222:	ff 92       	push	r15
    5224:	0f 93       	push	r16
    5226:	1f 93       	push	r17
    5228:	cf 93       	push	r28
    522a:	df 93       	push	r29
    522c:	eb 01       	movw	r28, r22
    522e:	88 23       	and	r24, r24
    5230:	21 f0       	breq	.+8      	; 0x523a <STEPPER_set_decel_step_values+0x1a>
    5232:	81 30       	cpi	r24, 0x01	; 1
    5234:	09 f0       	breq	.+2      	; 0x5238 <STEPPER_set_decel_step_values+0x18>
    5236:	5a c0       	rjmp	.+180    	; 0x52ec <STEPPER_set_decel_step_values+0xcc>
    5238:	2d c0       	rjmp	.+90     	; 0x5294 <STEPPER_set_decel_step_values+0x74>
    523a:	9a 01       	movw	r18, r20
    523c:	40 e0       	ldi	r20, 0x00	; 0
    523e:	50 e0       	ldi	r21, 0x00	; 0
    5240:	ca 01       	movw	r24, r20
    5242:	b9 01       	movw	r22, r18
    5244:	0e 94 42 34 	call	0x6884	; 0x6884 <__mulsi3>
    5248:	20 91 1e 07 	lds	r18, 0x071E
    524c:	30 91 1f 07 	lds	r19, 0x071F
    5250:	22 0f       	add	r18, r18
    5252:	33 1f       	adc	r19, r19
    5254:	40 e0       	ldi	r20, 0x00	; 0
    5256:	50 e0       	ldi	r21, 0x00	; 0
    5258:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    525c:	79 01       	movw	r14, r18
    525e:	8a 01       	movw	r16, r20
    5260:	a8 01       	movw	r20, r16
    5262:	97 01       	movw	r18, r14
    5264:	22 0f       	add	r18, r18
    5266:	33 1f       	adc	r19, r19
    5268:	44 1f       	adc	r20, r20
    526a:	55 1f       	adc	r21, r21
    526c:	ce 01       	movw	r24, r28
    526e:	a0 e0       	ldi	r26, 0x00	; 0
    5270:	b0 e0       	ldi	r27, 0x00	; 0
    5272:	82 17       	cp	r24, r18
    5274:	93 07       	cpc	r25, r19
    5276:	a4 07       	cpc	r26, r20
    5278:	b5 07       	cpc	r27, r21
    527a:	28 f0       	brcs	.+10     	; 0x5286 <STEPPER_set_decel_step_values+0x66>
    527c:	f0 92 2b 07 	sts	0x072B, r15
    5280:	e0 92 2a 07 	sts	0x072A, r14
    5284:	33 c0       	rjmp	.+102    	; 0x52ec <STEPPER_set_decel_step_values+0xcc>
    5286:	d6 95       	lsr	r29
    5288:	c7 95       	ror	r28
    528a:	d0 93 2b 07 	sts	0x072B, r29
    528e:	c0 93 2a 07 	sts	0x072A, r28
    5292:	2c c0       	rjmp	.+88     	; 0x52ec <STEPPER_set_decel_step_values+0xcc>
    5294:	9a 01       	movw	r18, r20
    5296:	40 e0       	ldi	r20, 0x00	; 0
    5298:	50 e0       	ldi	r21, 0x00	; 0
    529a:	ca 01       	movw	r24, r20
    529c:	b9 01       	movw	r22, r18
    529e:	0e 94 42 34 	call	0x6884	; 0x6884 <__mulsi3>
    52a2:	20 91 20 07 	lds	r18, 0x0720
    52a6:	30 91 21 07 	lds	r19, 0x0721
    52aa:	22 0f       	add	r18, r18
    52ac:	33 1f       	adc	r19, r19
    52ae:	40 e0       	ldi	r20, 0x00	; 0
    52b0:	50 e0       	ldi	r21, 0x00	; 0
    52b2:	0e 94 61 34 	call	0x68c2	; 0x68c2 <__udivmodsi4>
    52b6:	79 01       	movw	r14, r18
    52b8:	8a 01       	movw	r16, r20
    52ba:	a8 01       	movw	r20, r16
    52bc:	97 01       	movw	r18, r14
    52be:	22 0f       	add	r18, r18
    52c0:	33 1f       	adc	r19, r19
    52c2:	44 1f       	adc	r20, r20
    52c4:	55 1f       	adc	r21, r21
    52c6:	ce 01       	movw	r24, r28
    52c8:	a0 e0       	ldi	r26, 0x00	; 0
    52ca:	b0 e0       	ldi	r27, 0x00	; 0
    52cc:	82 17       	cp	r24, r18
    52ce:	93 07       	cpc	r25, r19
    52d0:	a4 07       	cpc	r26, r20
    52d2:	b5 07       	cpc	r27, r21
    52d4:	28 f0       	brcs	.+10     	; 0x52e0 <STEPPER_set_decel_step_values+0xc0>
    52d6:	f0 92 2d 07 	sts	0x072D, r15
    52da:	e0 92 2c 07 	sts	0x072C, r14
    52de:	06 c0       	rjmp	.+12     	; 0x52ec <STEPPER_set_decel_step_values+0xcc>
    52e0:	d6 95       	lsr	r29
    52e2:	c7 95       	ror	r28
    52e4:	d0 93 2d 07 	sts	0x072D, r29
    52e8:	c0 93 2c 07 	sts	0x072C, r28
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	1f 91       	pop	r17
    52f2:	0f 91       	pop	r16
    52f4:	ff 90       	pop	r15
    52f6:	ef 90       	pop	r14
    52f8:	08 95       	ret

000052fa <__TIMER0_COMPA_vect>:
    52fa:	0e 94 8d 29 	call	0x531a	; 0x531a <TMRSRVC_tick>
    52fe:	0e 94 cd 29 	call	0x539a	; 0x539a <STEPPER_clk>
    5302:	0e 94 a6 29 	call	0x534c	; 0x534c <SPKR_beep_clk>
    5306:	08 95       	ret

00005308 <__TMRSRVC_init>:
    5308:	84 b5       	in	r24, 0x24	; 36
    530a:	82 60       	ori	r24, 0x02	; 2
    530c:	84 bd       	out	0x24, r24	; 36
    530e:	85 b5       	in	r24, 0x25	; 37
    5310:	84 60       	ori	r24, 0x04	; 4
    5312:	85 bd       	out	0x25, r24	; 37
    5314:	8e e4       	ldi	r24, 0x4E	; 78
    5316:	87 bd       	out	0x27, r24	; 39
    5318:	08 95       	ret

0000531a <TMRSRVC_tick>:
    531a:	88 e0       	ldi	r24, 0x08	; 8
    531c:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    5320:	88 23       	and	r24, r24
    5322:	11 f4       	brne	.+4      	; 0x5328 <TMRSRVC_tick+0xe>
    5324:	84 e0       	ldi	r24, 0x04	; 4
    5326:	08 95       	ret
    5328:	80 91 5b 04 	lds	r24, 0x045B
    532c:	88 23       	and	r24, r24
    532e:	11 f4       	brne	.+4      	; 0x5334 <TMRSRVC_tick+0x1a>
    5330:	83 e0       	ldi	r24, 0x03	; 3
    5332:	08 95       	ret
    5334:	80 91 5a 04 	lds	r24, 0x045A
    5338:	88 23       	and	r24, r24
    533a:	11 f0       	breq	.+4      	; 0x5340 <TMRSRVC_tick+0x26>
    533c:	82 e0       	ldi	r24, 0x02	; 2
    533e:	08 95       	ret
    5340:	0e 94 1a 2c 	call	0x5834	; 0x5834 <TMRSRVC_process>
    5344:	81 30       	cpi	r24, 0x01	; 1
    5346:	e1 f3       	breq	.-8      	; 0x5340 <TMRSRVC_tick+0x26>
    5348:	80 e0       	ldi	r24, 0x00	; 0
    534a:	08 95       	ret

0000534c <SPKR_beep_clk>:
    534c:	80 91 4b 04 	lds	r24, 0x044B
    5350:	81 30       	cpi	r24, 0x01	; 1
    5352:	11 f5       	brne	.+68     	; 0x5398 <SPKR_beep_clk+0x4c>
    5354:	80 91 54 04 	lds	r24, 0x0454
    5358:	90 91 55 04 	lds	r25, 0x0455
    535c:	20 91 56 04 	lds	r18, 0x0456
    5360:	30 91 57 04 	lds	r19, 0x0457
    5364:	28 0f       	add	r18, r24
    5366:	39 1f       	adc	r19, r25
    5368:	30 93 55 04 	sts	0x0455, r19
    536c:	20 93 54 04 	sts	0x0454, r18
    5370:	80 91 54 04 	lds	r24, 0x0454
    5374:	90 91 55 04 	lds	r25, 0x0455
    5378:	88 5e       	subi	r24, 0xE8	; 232
    537a:	93 40       	sbci	r25, 0x03	; 3
    537c:	6c f0       	brlt	.+26     	; 0x5398 <SPKR_beep_clk+0x4c>
    537e:	8b b1       	in	r24, 0x0b	; 11
    5380:	80 58       	subi	r24, 0x80	; 128
    5382:	8b b9       	out	0x0b, r24	; 11
    5384:	80 91 54 04 	lds	r24, 0x0454
    5388:	90 91 55 04 	lds	r25, 0x0455
    538c:	88 5e       	subi	r24, 0xE8	; 232
    538e:	93 40       	sbci	r25, 0x03	; 3
    5390:	90 93 55 04 	sts	0x0455, r25
    5394:	80 93 54 04 	sts	0x0454, r24
    5398:	08 95       	ret

0000539a <STEPPER_clk>:
    539a:	87 e0       	ldi	r24, 0x07	; 7
    539c:	0e 94 e7 1f 	call	0x3fce	; 0x3fce <SYS_get_state>
    53a0:	81 30       	cpi	r24, 0x01	; 1
    53a2:	09 f0       	breq	.+2      	; 0x53a6 <STEPPER_clk+0xc>
    53a4:	aa c0       	rjmp	.+340    	; 0x54fa <STEPPER_clk+0x160>
    53a6:	80 91 1e 07 	lds	r24, 0x071E
    53aa:	90 91 1f 07 	lds	r25, 0x071F
    53ae:	89 2b       	or	r24, r25
    53b0:	09 f1       	breq	.+66     	; 0x53f4 <STEPPER_clk+0x5a>
    53b2:	80 91 42 07 	lds	r24, 0x0742
    53b6:	90 91 43 07 	lds	r25, 0x0743
    53ba:	20 91 1e 07 	lds	r18, 0x071E
    53be:	30 91 1f 07 	lds	r19, 0x071F
    53c2:	82 0f       	add	r24, r18
    53c4:	93 1f       	adc	r25, r19
    53c6:	90 93 43 07 	sts	0x0743, r25
    53ca:	80 93 42 07 	sts	0x0742, r24
    53ce:	80 91 42 07 	lds	r24, 0x0742
    53d2:	90 91 43 07 	lds	r25, 0x0743
    53d6:	88 5e       	subi	r24, 0xE8	; 232
    53d8:	93 40       	sbci	r25, 0x03	; 3
    53da:	a4 f0       	brlt	.+40     	; 0x5404 <STEPPER_clk+0x6a>
    53dc:	80 91 42 07 	lds	r24, 0x0742
    53e0:	90 91 43 07 	lds	r25, 0x0743
    53e4:	88 5e       	subi	r24, 0xE8	; 232
    53e6:	93 40       	sbci	r25, 0x03	; 3
    53e8:	90 93 43 07 	sts	0x0743, r25
    53ec:	80 93 42 07 	sts	0x0742, r24
    53f0:	41 e0       	ldi	r20, 0x01	; 1
    53f2:	09 c0       	rjmp	.+18     	; 0x5406 <STEPPER_clk+0x6c>
    53f4:	80 91 16 07 	lds	r24, 0x0716
    53f8:	90 91 17 07 	lds	r25, 0x0717
    53fc:	90 93 1b 07 	sts	0x071B, r25
    5400:	80 93 1a 07 	sts	0x071A, r24
    5404:	40 e0       	ldi	r20, 0x00	; 0
    5406:	80 91 20 07 	lds	r24, 0x0720
    540a:	90 91 21 07 	lds	r25, 0x0721
    540e:	89 2b       	or	r24, r25
    5410:	09 f1       	breq	.+66     	; 0x5454 <STEPPER_clk+0xba>
    5412:	80 91 44 07 	lds	r24, 0x0744
    5416:	90 91 45 07 	lds	r25, 0x0745
    541a:	20 91 20 07 	lds	r18, 0x0720
    541e:	30 91 21 07 	lds	r19, 0x0721
    5422:	82 0f       	add	r24, r18
    5424:	93 1f       	adc	r25, r19
    5426:	90 93 45 07 	sts	0x0745, r25
    542a:	80 93 44 07 	sts	0x0744, r24
    542e:	80 91 44 07 	lds	r24, 0x0744
    5432:	90 91 45 07 	lds	r25, 0x0745
    5436:	88 5e       	subi	r24, 0xE8	; 232
    5438:	93 40       	sbci	r25, 0x03	; 3
    543a:	a4 f0       	brlt	.+40     	; 0x5464 <STEPPER_clk+0xca>
    543c:	80 91 44 07 	lds	r24, 0x0744
    5440:	90 91 45 07 	lds	r25, 0x0745
    5444:	88 5e       	subi	r24, 0xE8	; 232
    5446:	93 40       	sbci	r25, 0x03	; 3
    5448:	90 93 45 07 	sts	0x0745, r25
    544c:	80 93 44 07 	sts	0x0744, r24
    5450:	61 e0       	ldi	r22, 0x01	; 1
    5452:	09 c0       	rjmp	.+18     	; 0x5466 <STEPPER_clk+0xcc>
    5454:	80 91 18 07 	lds	r24, 0x0718
    5458:	90 91 19 07 	lds	r25, 0x0719
    545c:	90 93 1d 07 	sts	0x071D, r25
    5460:	80 93 1c 07 	sts	0x071C, r24
    5464:	60 e0       	ldi	r22, 0x00	; 0
    5466:	84 2f       	mov	r24, r20
    5468:	0e 94 7e 2a 	call	0x54fc	; 0x54fc <STEPPER_process_accel>
    546c:	80 91 3e 07 	lds	r24, 0x073E
    5470:	90 91 3f 07 	lds	r25, 0x073F
    5474:	20 91 1a 07 	lds	r18, 0x071A
    5478:	30 91 1b 07 	lds	r19, 0x071B
    547c:	28 0f       	add	r18, r24
    547e:	39 1f       	adc	r19, r25
    5480:	30 93 3f 07 	sts	0x073F, r19
    5484:	20 93 3e 07 	sts	0x073E, r18
    5488:	80 91 3e 07 	lds	r24, 0x073E
    548c:	90 91 3f 07 	lds	r25, 0x073F
    5490:	88 5e       	subi	r24, 0xE8	; 232
    5492:	93 40       	sbci	r25, 0x03	; 3
    5494:	14 f4       	brge	.+4      	; 0x549a <STEPPER_clk+0x100>
    5496:	40 e0       	ldi	r20, 0x00	; 0
    5498:	0b c0       	rjmp	.+22     	; 0x54b0 <STEPPER_clk+0x116>
    549a:	80 91 3e 07 	lds	r24, 0x073E
    549e:	90 91 3f 07 	lds	r25, 0x073F
    54a2:	88 5e       	subi	r24, 0xE8	; 232
    54a4:	93 40       	sbci	r25, 0x03	; 3
    54a6:	90 93 3f 07 	sts	0x073F, r25
    54aa:	80 93 3e 07 	sts	0x073E, r24
    54ae:	41 e0       	ldi	r20, 0x01	; 1
    54b0:	80 91 40 07 	lds	r24, 0x0740
    54b4:	90 91 41 07 	lds	r25, 0x0741
    54b8:	20 91 1c 07 	lds	r18, 0x071C
    54bc:	30 91 1d 07 	lds	r19, 0x071D
    54c0:	28 0f       	add	r18, r24
    54c2:	39 1f       	adc	r19, r25
    54c4:	30 93 41 07 	sts	0x0741, r19
    54c8:	20 93 40 07 	sts	0x0740, r18
    54cc:	80 91 40 07 	lds	r24, 0x0740
    54d0:	90 91 41 07 	lds	r25, 0x0741
    54d4:	88 5e       	subi	r24, 0xE8	; 232
    54d6:	93 40       	sbci	r25, 0x03	; 3
    54d8:	14 f4       	brge	.+4      	; 0x54de <STEPPER_clk+0x144>
    54da:	60 e0       	ldi	r22, 0x00	; 0
    54dc:	0b c0       	rjmp	.+22     	; 0x54f4 <STEPPER_clk+0x15a>
    54de:	80 91 40 07 	lds	r24, 0x0740
    54e2:	90 91 41 07 	lds	r25, 0x0741
    54e6:	88 5e       	subi	r24, 0xE8	; 232
    54e8:	93 40       	sbci	r25, 0x03	; 3
    54ea:	90 93 41 07 	sts	0x0741, r25
    54ee:	80 93 40 07 	sts	0x0740, r24
    54f2:	61 e0       	ldi	r22, 0x01	; 1
    54f4:	84 2f       	mov	r24, r20
    54f6:	0e 94 c3 2a 	call	0x5586	; 0x5586 <STEPPER_process_run_mode>
    54fa:	08 95       	ret

000054fc <STEPPER_process_accel>:
    54fc:	88 23       	and	r24, r24
    54fe:	f1 f0       	breq	.+60     	; 0x553c <STEPPER_process_accel+0x40>
    5500:	20 91 16 07 	lds	r18, 0x0716
    5504:	30 91 17 07 	lds	r19, 0x0717
    5508:	80 91 1a 07 	lds	r24, 0x071A
    550c:	90 91 1b 07 	lds	r25, 0x071B
    5510:	28 1b       	sub	r18, r24
    5512:	39 0b       	sbc	r19, r25
    5514:	12 16       	cp	r1, r18
    5516:	13 06       	cpc	r1, r19
    5518:	34 f4       	brge	.+12     	; 0x5526 <STEPPER_process_accel+0x2a>
    551a:	80 91 1a 07 	lds	r24, 0x071A
    551e:	90 91 1b 07 	lds	r25, 0x071B
    5522:	01 96       	adiw	r24, 0x01	; 1
    5524:	07 c0       	rjmp	.+14     	; 0x5534 <STEPPER_process_accel+0x38>
    5526:	23 2b       	or	r18, r19
    5528:	49 f0       	breq	.+18     	; 0x553c <STEPPER_process_accel+0x40>
    552a:	80 91 1a 07 	lds	r24, 0x071A
    552e:	90 91 1b 07 	lds	r25, 0x071B
    5532:	01 97       	sbiw	r24, 0x01	; 1
    5534:	90 93 1b 07 	sts	0x071B, r25
    5538:	80 93 1a 07 	sts	0x071A, r24
    553c:	66 23       	and	r22, r22
    553e:	11 f1       	breq	.+68     	; 0x5584 <STEPPER_process_accel+0x88>
    5540:	20 91 18 07 	lds	r18, 0x0718
    5544:	30 91 19 07 	lds	r19, 0x0719
    5548:	80 91 1c 07 	lds	r24, 0x071C
    554c:	90 91 1d 07 	lds	r25, 0x071D
    5550:	28 1b       	sub	r18, r24
    5552:	39 0b       	sbc	r19, r25
    5554:	12 16       	cp	r1, r18
    5556:	13 06       	cpc	r1, r19
    5558:	54 f4       	brge	.+20     	; 0x556e <STEPPER_process_accel+0x72>
    555a:	80 91 1c 07 	lds	r24, 0x071C
    555e:	90 91 1d 07 	lds	r25, 0x071D
    5562:	01 96       	adiw	r24, 0x01	; 1
    5564:	90 93 1d 07 	sts	0x071D, r25
    5568:	80 93 1c 07 	sts	0x071C, r24
    556c:	08 95       	ret
    556e:	23 2b       	or	r18, r19
    5570:	49 f0       	breq	.+18     	; 0x5584 <STEPPER_process_accel+0x88>
    5572:	80 91 1c 07 	lds	r24, 0x071C
    5576:	90 91 1d 07 	lds	r25, 0x071D
    557a:	01 97       	sbiw	r24, 0x01	; 1
    557c:	90 93 1d 07 	sts	0x071D, r25
    5580:	80 93 1c 07 	sts	0x071C, r24
    5584:	08 95       	ret

00005586 <STEPPER_process_run_mode>:
    5586:	0f 93       	push	r16
    5588:	1f 93       	push	r17
    558a:	18 2f       	mov	r17, r24
    558c:	06 2f       	mov	r16, r22
    558e:	80 91 4a 07 	lds	r24, 0x074A
    5592:	88 23       	and	r24, r24
    5594:	09 f0       	breq	.+2      	; 0x5598 <STEPPER_process_run_mode+0x12>
    5596:	e7 c0       	rjmp	.+462    	; 0x5766 <STEPPER_process_run_mode+0x1e0>
    5598:	80 91 32 07 	lds	r24, 0x0732
    559c:	88 23       	and	r24, r24
    559e:	09 f0       	breq	.+2      	; 0x55a2 <STEPPER_process_run_mode+0x1c>
    55a0:	5a c0       	rjmp	.+180    	; 0x5656 <STEPPER_process_run_mode+0xd0>
    55a2:	80 91 1a 07 	lds	r24, 0x071A
    55a6:	90 91 1b 07 	lds	r25, 0x071B
    55aa:	89 2b       	or	r24, r25
    55ac:	e9 f4       	brne	.+58     	; 0x55e8 <STEPPER_process_run_mode+0x62>
    55ae:	80 91 5c 04 	lds	r24, 0x045C
    55b2:	83 7e       	andi	r24, 0xE3	; 227
    55b4:	80 93 5c 04 	sts	0x045C, r24
    55b8:	10 92 3b 07 	sts	0x073B, r1
    55bc:	80 91 46 07 	lds	r24, 0x0746
    55c0:	88 23       	and	r24, r24
    55c2:	09 f4       	brne	.+2      	; 0x55c6 <STEPPER_process_run_mode+0x40>
    55c4:	5d c0       	rjmp	.+186    	; 0x5680 <STEPPER_process_run_mode+0xfa>
    55c6:	60 91 34 07 	lds	r22, 0x0734
    55ca:	80 e0       	ldi	r24, 0x00	; 0
    55cc:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <STEPPER_stop>
    55d0:	e0 91 48 07 	lds	r30, 0x0748
    55d4:	f0 91 49 07 	lds	r31, 0x0749
    55d8:	30 97       	sbiw	r30, 0x00	; 0
    55da:	09 f4       	brne	.+2      	; 0x55de <STEPPER_process_run_mode+0x58>
    55dc:	51 c0       	rjmp	.+162    	; 0x5680 <STEPPER_process_run_mode+0xfa>
    55de:	81 e0       	ldi	r24, 0x01	; 1
    55e0:	80 83       	st	Z, r24
    55e2:	10 92 46 07 	sts	0x0746, r1
    55e6:	4c c0       	rjmp	.+152    	; 0x5680 <STEPPER_process_run_mode+0xfa>
    55e8:	80 91 14 07 	lds	r24, 0x0714
    55ec:	81 30       	cpi	r24, 0x01	; 1
    55ee:	41 f4       	brne	.+16     	; 0x5600 <STEPPER_process_run_mode+0x7a>
    55f0:	80 91 26 07 	lds	r24, 0x0726
    55f4:	90 91 27 07 	lds	r25, 0x0727
    55f8:	01 97       	sbiw	r24, 0x01	; 1
    55fa:	11 f4       	brne	.+4      	; 0x5600 <STEPPER_process_run_mode+0x7a>
    55fc:	11 e0       	ldi	r17, 0x01	; 1
    55fe:	02 c0       	rjmp	.+4      	; 0x5604 <STEPPER_process_run_mode+0x7e>
    5600:	11 23       	and	r17, r17
    5602:	f1 f1       	breq	.+124    	; 0x5680 <STEPPER_process_run_mode+0xfa>
    5604:	e0 91 39 07 	lds	r30, 0x0739
    5608:	f0 e0       	ldi	r31, 0x00	; 0
    560a:	e0 58       	subi	r30, 0x80	; 128
    560c:	fc 4f       	sbci	r31, 0xFC	; 252
    560e:	90 91 5c 04 	lds	r25, 0x045C
    5612:	93 7e       	andi	r25, 0xE3	; 227
    5614:	80 81       	ld	r24, Z
    5616:	89 2b       	or	r24, r25
    5618:	80 93 5c 04 	sts	0x045C, r24
    561c:	80 91 37 07 	lds	r24, 0x0737
    5620:	88 23       	and	r24, r24
    5622:	21 f4       	brne	.+8      	; 0x562c <STEPPER_process_run_mode+0xa6>
    5624:	80 91 39 07 	lds	r24, 0x0739
    5628:	8f 5f       	subi	r24, 0xFF	; 255
    562a:	03 c0       	rjmp	.+6      	; 0x5632 <STEPPER_process_run_mode+0xac>
    562c:	80 91 39 07 	lds	r24, 0x0739
    5630:	81 50       	subi	r24, 0x01	; 1
    5632:	80 93 39 07 	sts	0x0739, r24
    5636:	80 91 39 07 	lds	r24, 0x0739
    563a:	83 70       	andi	r24, 0x03	; 3
    563c:	80 93 39 07 	sts	0x0739, r24
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	80 93 3b 07 	sts	0x073B, r24
    5646:	80 91 14 07 	lds	r24, 0x0714
    564a:	81 30       	cpi	r24, 0x01	; 1
    564c:	c9 f4       	brne	.+50     	; 0x5680 <STEPPER_process_run_mode+0xfa>
    564e:	80 e0       	ldi	r24, 0x00	; 0
    5650:	0e 94 c6 2b 	call	0x578c	; 0x578c <STEPPER_process_step_mode>
    5654:	15 c0       	rjmp	.+42     	; 0x5680 <STEPPER_process_run_mode+0xfa>
    5656:	90 91 5c 04 	lds	r25, 0x045C
    565a:	93 7e       	andi	r25, 0xE3	; 227
    565c:	90 93 5c 04 	sts	0x045C, r25
    5660:	e0 91 39 07 	lds	r30, 0x0739
    5664:	f0 e0       	ldi	r31, 0x00	; 0
    5666:	e0 58       	subi	r30, 0x80	; 128
    5668:	fc 4f       	sbci	r31, 0xFC	; 252
    566a:	80 81       	ld	r24, Z
    566c:	89 2b       	or	r24, r25
    566e:	80 93 5c 04 	sts	0x045C, r24
    5672:	82 e0       	ldi	r24, 0x02	; 2
    5674:	80 93 3b 07 	sts	0x073B, r24
    5678:	10 92 1b 07 	sts	0x071B, r1
    567c:	10 92 1a 07 	sts	0x071A, r1
    5680:	80 91 33 07 	lds	r24, 0x0733
    5684:	88 23       	and	r24, r24
    5686:	09 f0       	breq	.+2      	; 0x568a <STEPPER_process_run_mode+0x104>
    5688:	59 c0       	rjmp	.+178    	; 0x573c <STEPPER_process_run_mode+0x1b6>
    568a:	80 91 1c 07 	lds	r24, 0x071C
    568e:	90 91 1d 07 	lds	r25, 0x071D
    5692:	89 2b       	or	r24, r25
    5694:	e9 f4       	brne	.+58     	; 0x56d0 <STEPPER_process_run_mode+0x14a>
    5696:	80 91 5c 04 	lds	r24, 0x045C
    569a:	8f 71       	andi	r24, 0x1F	; 31
    569c:	80 93 5c 04 	sts	0x045C, r24
    56a0:	10 92 3c 07 	sts	0x073C, r1
    56a4:	80 91 47 07 	lds	r24, 0x0747
    56a8:	88 23       	and	r24, r24
    56aa:	09 f4       	brne	.+2      	; 0x56ae <STEPPER_process_run_mode+0x128>
    56ac:	5c c0       	rjmp	.+184    	; 0x5766 <STEPPER_process_run_mode+0x1e0>
    56ae:	60 91 35 07 	lds	r22, 0x0735
    56b2:	81 e0       	ldi	r24, 0x01	; 1
    56b4:	0e 94 74 1f 	call	0x3ee8	; 0x3ee8 <STEPPER_stop>
    56b8:	e0 91 48 07 	lds	r30, 0x0748
    56bc:	f0 91 49 07 	lds	r31, 0x0749
    56c0:	30 97       	sbiw	r30, 0x00	; 0
    56c2:	09 f4       	brne	.+2      	; 0x56c6 <STEPPER_process_run_mode+0x140>
    56c4:	50 c0       	rjmp	.+160    	; 0x5766 <STEPPER_process_run_mode+0x1e0>
    56c6:	81 e0       	ldi	r24, 0x01	; 1
    56c8:	81 83       	std	Z+1, r24	; 0x01
    56ca:	10 92 47 07 	sts	0x0747, r1
    56ce:	4b c0       	rjmp	.+150    	; 0x5766 <STEPPER_process_run_mode+0x1e0>
    56d0:	80 91 15 07 	lds	r24, 0x0715
    56d4:	81 30       	cpi	r24, 0x01	; 1
    56d6:	41 f4       	brne	.+16     	; 0x56e8 <STEPPER_process_run_mode+0x162>
    56d8:	80 91 28 07 	lds	r24, 0x0728
    56dc:	90 91 29 07 	lds	r25, 0x0729
    56e0:	01 97       	sbiw	r24, 0x01	; 1
    56e2:	11 f4       	brne	.+4      	; 0x56e8 <STEPPER_process_run_mode+0x162>
    56e4:	01 e0       	ldi	r16, 0x01	; 1
    56e6:	02 c0       	rjmp	.+4      	; 0x56ec <STEPPER_process_run_mode+0x166>
    56e8:	00 23       	and	r16, r16
    56ea:	e9 f1       	breq	.+122    	; 0x5766 <STEPPER_process_run_mode+0x1e0>
    56ec:	e0 91 3a 07 	lds	r30, 0x073A
    56f0:	f0 e0       	ldi	r31, 0x00	; 0
    56f2:	ec 57       	subi	r30, 0x7C	; 124
    56f4:	fc 4f       	sbci	r31, 0xFC	; 252
    56f6:	90 91 5c 04 	lds	r25, 0x045C
    56fa:	9f 71       	andi	r25, 0x1F	; 31
    56fc:	80 81       	ld	r24, Z
    56fe:	89 2b       	or	r24, r25
    5700:	80 93 5c 04 	sts	0x045C, r24
    5704:	80 91 38 07 	lds	r24, 0x0738
    5708:	88 23       	and	r24, r24
    570a:	21 f4       	brne	.+8      	; 0x5714 <STEPPER_process_run_mode+0x18e>
    570c:	80 91 3a 07 	lds	r24, 0x073A
    5710:	8f 5f       	subi	r24, 0xFF	; 255
    5712:	03 c0       	rjmp	.+6      	; 0x571a <STEPPER_process_run_mode+0x194>
    5714:	80 91 3a 07 	lds	r24, 0x073A
    5718:	81 50       	subi	r24, 0x01	; 1
    571a:	80 93 3a 07 	sts	0x073A, r24
    571e:	80 91 3a 07 	lds	r24, 0x073A
    5722:	83 70       	andi	r24, 0x03	; 3
    5724:	80 93 3a 07 	sts	0x073A, r24
    5728:	81 e0       	ldi	r24, 0x01	; 1
    572a:	80 93 3c 07 	sts	0x073C, r24
    572e:	80 91 15 07 	lds	r24, 0x0715
    5732:	81 30       	cpi	r24, 0x01	; 1
    5734:	c1 f4       	brne	.+48     	; 0x5766 <STEPPER_process_run_mode+0x1e0>
    5736:	0e 94 c6 2b 	call	0x578c	; 0x578c <STEPPER_process_step_mode>
    573a:	15 c0       	rjmp	.+42     	; 0x5766 <STEPPER_process_run_mode+0x1e0>
    573c:	90 91 5c 04 	lds	r25, 0x045C
    5740:	9f 71       	andi	r25, 0x1F	; 31
    5742:	90 93 5c 04 	sts	0x045C, r25
    5746:	e0 91 3a 07 	lds	r30, 0x073A
    574a:	f0 e0       	ldi	r31, 0x00	; 0
    574c:	ec 57       	subi	r30, 0x7C	; 124
    574e:	fc 4f       	sbci	r31, 0xFC	; 252
    5750:	80 81       	ld	r24, Z
    5752:	89 2b       	or	r24, r25
    5754:	80 93 5c 04 	sts	0x045C, r24
    5758:	82 e0       	ldi	r24, 0x02	; 2
    575a:	80 93 3c 07 	sts	0x073C, r24
    575e:	10 92 1d 07 	sts	0x071D, r1
    5762:	10 92 1c 07 	sts	0x071C, r1
    5766:	80 91 3d 07 	lds	r24, 0x073D
    576a:	88 23       	and	r24, r24
    576c:	31 f4       	brne	.+12     	; 0x577a <STEPPER_process_run_mode+0x1f4>
    576e:	8c e5       	ldi	r24, 0x5C	; 92
    5770:	94 e0       	ldi	r25, 0x04	; 4
    5772:	61 2f       	mov	r22, r17
    5774:	40 2f       	mov	r20, r16
    5776:	0e 94 88 2c 	call	0x5910	; 0x5910 <STEPPER_process_pwm>
    577a:	88 b1       	in	r24, 0x08	; 8
    577c:	83 70       	andi	r24, 0x03	; 3
    577e:	90 91 5c 04 	lds	r25, 0x045C
    5782:	89 2b       	or	r24, r25
    5784:	88 b9       	out	0x08, r24	; 8
    5786:	1f 91       	pop	r17
    5788:	0f 91       	pop	r16
    578a:	08 95       	ret

0000578c <STEPPER_process_step_mode>:
    578c:	88 23       	and	r24, r24
    578e:	21 f0       	breq	.+8      	; 0x5798 <STEPPER_process_step_mode+0xc>
    5790:	81 30       	cpi	r24, 0x01	; 1
    5792:	09 f0       	breq	.+2      	; 0x5796 <STEPPER_process_step_mode+0xa>
    5794:	4e c0       	rjmp	.+156    	; 0x5832 <STEPPER_process_step_mode+0xa6>
    5796:	27 c0       	rjmp	.+78     	; 0x57e6 <STEPPER_process_step_mode+0x5a>
    5798:	80 91 26 07 	lds	r24, 0x0726
    579c:	90 91 27 07 	lds	r25, 0x0727
    57a0:	89 2b       	or	r24, r25
    57a2:	49 f0       	breq	.+18     	; 0x57b6 <STEPPER_process_step_mode+0x2a>
    57a4:	80 91 26 07 	lds	r24, 0x0726
    57a8:	90 91 27 07 	lds	r25, 0x0727
    57ac:	01 97       	sbiw	r24, 0x01	; 1
    57ae:	90 93 27 07 	sts	0x0727, r25
    57b2:	80 93 26 07 	sts	0x0726, r24
    57b6:	80 91 46 07 	lds	r24, 0x0746
    57ba:	88 23       	and	r24, r24
    57bc:	d1 f5       	brne	.+116    	; 0x5832 <STEPPER_process_step_mode+0xa6>
    57be:	20 91 26 07 	lds	r18, 0x0726
    57c2:	30 91 27 07 	lds	r19, 0x0727
    57c6:	80 91 2a 07 	lds	r24, 0x072A
    57ca:	90 91 2b 07 	lds	r25, 0x072B
    57ce:	28 17       	cp	r18, r24
    57d0:	39 07       	cpc	r19, r25
    57d2:	79 f5       	brne	.+94     	; 0x5832 <STEPPER_process_step_mode+0xa6>
    57d4:	80 e0       	ldi	r24, 0x00	; 0
    57d6:	60 e0       	ldi	r22, 0x00	; 0
    57d8:	70 e0       	ldi	r23, 0x00	; 0
    57da:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <STEPPER_set_speed>
    57de:	81 e0       	ldi	r24, 0x01	; 1
    57e0:	80 93 46 07 	sts	0x0746, r24
    57e4:	08 95       	ret
    57e6:	80 91 28 07 	lds	r24, 0x0728
    57ea:	90 91 29 07 	lds	r25, 0x0729
    57ee:	89 2b       	or	r24, r25
    57f0:	49 f0       	breq	.+18     	; 0x5804 <STEPPER_process_step_mode+0x78>
    57f2:	80 91 28 07 	lds	r24, 0x0728
    57f6:	90 91 29 07 	lds	r25, 0x0729
    57fa:	01 97       	sbiw	r24, 0x01	; 1
    57fc:	90 93 29 07 	sts	0x0729, r25
    5800:	80 93 28 07 	sts	0x0728, r24
    5804:	80 91 47 07 	lds	r24, 0x0747
    5808:	88 23       	and	r24, r24
    580a:	99 f4       	brne	.+38     	; 0x5832 <STEPPER_process_step_mode+0xa6>
    580c:	20 91 28 07 	lds	r18, 0x0728
    5810:	30 91 29 07 	lds	r19, 0x0729
    5814:	80 91 2c 07 	lds	r24, 0x072C
    5818:	90 91 2d 07 	lds	r25, 0x072D
    581c:	28 17       	cp	r18, r24
    581e:	39 07       	cpc	r19, r25
    5820:	41 f4       	brne	.+16     	; 0x5832 <STEPPER_process_step_mode+0xa6>
    5822:	81 e0       	ldi	r24, 0x01	; 1
    5824:	60 e0       	ldi	r22, 0x00	; 0
    5826:	70 e0       	ldi	r23, 0x00	; 0
    5828:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <STEPPER_set_speed>
    582c:	81 e0       	ldi	r24, 0x01	; 1
    582e:	80 93 47 07 	sts	0x0747, r24
    5832:	08 95       	ret

00005834 <TMRSRVC_process>:
    5834:	ff 92       	push	r15
    5836:	0f 93       	push	r16
    5838:	1f 93       	push	r17
    583a:	cf 93       	push	r28
    583c:	df 93       	push	r29
    583e:	80 91 84 07 	lds	r24, 0x0784
    5842:	88 23       	and	r24, r24
    5844:	09 f4       	brne	.+2      	; 0x5848 <TMRSRVC_process+0x14>
    5846:	59 c0       	rjmp	.+178    	; 0x58fa <TMRSRVC_process+0xc6>
    5848:	00 91 85 07 	lds	r16, 0x0785
    584c:	10 91 86 07 	lds	r17, 0x0786
    5850:	f8 01       	movw	r30, r16
    5852:	c0 81       	ld	r28, Z
    5854:	d1 81       	ldd	r29, Z+1	; 0x01
    5856:	8c 81       	ldd	r24, Y+4	; 0x04
    5858:	9d 81       	ldd	r25, Y+5	; 0x05
    585a:	01 97       	sbiw	r24, 0x01	; 1
    585c:	9d 83       	std	Y+5, r25	; 0x05
    585e:	8c 83       	std	Y+4, r24	; 0x04
    5860:	18 16       	cp	r1, r24
    5862:	19 06       	cpc	r1, r25
    5864:	0c f4       	brge	.+2      	; 0x5868 <TMRSRVC_process+0x34>
    5866:	49 c0       	rjmp	.+146    	; 0x58fa <TMRSRVC_process+0xc6>
    5868:	89 81       	ldd	r24, Y+1	; 0x01
    586a:	80 ff       	sbrs	r24, 0
    586c:	05 c0       	rjmp	.+10     	; 0x5878 <TMRSRVC_process+0x44>
    586e:	8e 81       	ldd	r24, Y+6	; 0x06
    5870:	88 23       	and	r24, r24
    5872:	11 f4       	brne	.+4      	; 0x5878 <TMRSRVC_process+0x44>
    5874:	81 e0       	ldi	r24, 0x01	; 1
    5876:	8e 83       	std	Y+6, r24	; 0x06
    5878:	89 81       	ldd	r24, Y+1	; 0x01
    587a:	81 ff       	sbrs	r24, 1
    587c:	03 c0       	rjmp	.+6      	; 0x5884 <TMRSRVC_process+0x50>
    587e:	ef 81       	ldd	r30, Y+7	; 0x07
    5880:	f8 85       	ldd	r31, Y+8	; 0x08
    5882:	09 95       	icall
    5884:	80 91 84 07 	lds	r24, 0x0784
    5888:	82 30       	cpi	r24, 0x02	; 2
    588a:	a8 f0       	brcs	.+42     	; 0x58b6 <TMRSRVC_process+0x82>
    588c:	f8 01       	movw	r30, r16
    588e:	82 81       	ldd	r24, Z+2	; 0x02
    5890:	93 81       	ldd	r25, Z+3	; 0x03
    5892:	90 93 86 07 	sts	0x0786, r25
    5896:	80 93 85 07 	sts	0x0785, r24
    589a:	13 82       	std	Z+3, r1	; 0x03
    589c:	12 82       	std	Z+2, r1	; 0x02
    589e:	e0 91 00 00 	lds	r30, 0x0000
    58a2:	f0 91 01 00 	lds	r31, 0x0001
    58a6:	84 81       	ldd	r24, Z+4	; 0x04
    58a8:	95 81       	ldd	r25, Z+5	; 0x05
    58aa:	18 16       	cp	r1, r24
    58ac:	19 06       	cpc	r1, r25
    58ae:	3c f0       	brlt	.+14     	; 0x58be <TMRSRVC_process+0x8a>
    58b0:	ff 24       	eor	r15, r15
    58b2:	f3 94       	inc	r15
    58b4:	05 c0       	rjmp	.+10     	; 0x58c0 <TMRSRVC_process+0x8c>
    58b6:	10 92 86 07 	sts	0x0786, r1
    58ba:	10 92 85 07 	sts	0x0785, r1
    58be:	ff 24       	eor	r15, r15
    58c0:	80 91 84 07 	lds	r24, 0x0784
    58c4:	81 50       	subi	r24, 0x01	; 1
    58c6:	80 93 84 07 	sts	0x0784, r24
    58ca:	80 91 84 07 	lds	r24, 0x0784
    58ce:	88 23       	and	r24, r24
    58d0:	11 f4       	brne	.+4      	; 0x58d6 <TMRSRVC_process+0xa2>
    58d2:	0e 94 85 2c 	call	0x590a	; 0x590a <TMRSRVC_stop>
    58d6:	89 81       	ldd	r24, Y+1	; 0x01
    58d8:	82 ff       	sbrs	r24, 2
    58da:	08 c0       	rjmp	.+16     	; 0x58ec <TMRSRVC_process+0xb8>
    58dc:	8a 81       	ldd	r24, Y+2	; 0x02
    58de:	9b 81       	ldd	r25, Y+3	; 0x03
    58e0:	9d 83       	std	Y+5, r25	; 0x05
    58e2:	8c 83       	std	Y+4, r24	; 0x04
    58e4:	c8 01       	movw	r24, r16
    58e6:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <TMRSRVC_insert>
    58ea:	08 c0       	rjmp	.+16     	; 0x58fc <TMRSRVC_process+0xc8>
    58ec:	c8 01       	movw	r24, r16
    58ee:	0e 94 67 35 	call	0x6ace	; 0x6ace <free>
    58f2:	89 81       	ldd	r24, Y+1	; 0x01
    58f4:	8f 7e       	andi	r24, 0xEF	; 239
    58f6:	89 83       	std	Y+1, r24	; 0x01
    58f8:	01 c0       	rjmp	.+2      	; 0x58fc <TMRSRVC_process+0xc8>
    58fa:	ff 24       	eor	r15, r15
    58fc:	8f 2d       	mov	r24, r15
    58fe:	df 91       	pop	r29
    5900:	cf 91       	pop	r28
    5902:	1f 91       	pop	r17
    5904:	0f 91       	pop	r16
    5906:	ff 90       	pop	r15
    5908:	08 95       	ret

0000590a <TMRSRVC_stop>:
    590a:	10 92 5b 04 	sts	0x045B, r1
    590e:	08 95       	ret

00005910 <STEPPER_process_pwm>:
    5910:	fc 01       	movw	r30, r24
    5912:	80 91 3b 07 	lds	r24, 0x073B
    5916:	82 30       	cpi	r24, 0x02	; 2
    5918:	69 f4       	brne	.+26     	; 0x5934 <STEPPER_process_pwm+0x24>
    591a:	80 91 60 04 	lds	r24, 0x0460
    591e:	91 e0       	ldi	r25, 0x01	; 1
    5920:	89 27       	eor	r24, r25
    5922:	80 93 60 04 	sts	0x0460, r24
    5926:	88 23       	and	r24, r24
    5928:	09 f0       	breq	.+2      	; 0x592c <STEPPER_process_pwm+0x1c>
    592a:	3e c0       	rjmp	.+124    	; 0x59a8 <STEPPER_process_pwm+0x98>
    592c:	80 81       	ld	r24, Z
    592e:	83 7e       	andi	r24, 0xE3	; 227
    5930:	80 83       	st	Z, r24
    5932:	3a c0       	rjmp	.+116    	; 0x59a8 <STEPPER_process_pwm+0x98>
    5934:	80 91 1a 07 	lds	r24, 0x071A
    5938:	90 91 1b 07 	lds	r25, 0x071B
    593c:	c3 97       	sbiw	r24, 0x33	; 51
    593e:	a4 f5       	brge	.+104    	; 0x59a8 <STEPPER_process_pwm+0x98>
    5940:	66 23       	and	r22, r22
    5942:	d1 f0       	breq	.+52     	; 0x5978 <STEPPER_process_pwm+0x68>
    5944:	20 91 1a 07 	lds	r18, 0x071A
    5948:	30 91 1b 07 	lds	r19, 0x071B
    594c:	80 e6       	ldi	r24, 0x60	; 96
    594e:	90 e0       	ldi	r25, 0x00	; 0
    5950:	bc 01       	movw	r22, r24
    5952:	26 9f       	mul	r18, r22
    5954:	c0 01       	movw	r24, r0
    5956:	27 9f       	mul	r18, r23
    5958:	90 0d       	add	r25, r0
    595a:	36 9f       	mul	r19, r22
    595c:	90 0d       	add	r25, r0
    595e:	11 24       	eor	r1, r1
    5960:	88 0f       	add	r24, r24
    5962:	89 2f       	mov	r24, r25
    5964:	88 1f       	adc	r24, r24
    5966:	99 0b       	sbc	r25, r25
    5968:	90 93 2f 07 	sts	0x072F, r25
    596c:	80 93 2e 07 	sts	0x072E, r24
    5970:	81 e0       	ldi	r24, 0x01	; 1
    5972:	80 93 5e 04 	sts	0x045E, r24
    5976:	18 c0       	rjmp	.+48     	; 0x59a8 <STEPPER_process_pwm+0x98>
    5978:	80 91 5e 04 	lds	r24, 0x045E
    597c:	88 23       	and	r24, r24
    597e:	a1 f0       	breq	.+40     	; 0x59a8 <STEPPER_process_pwm+0x98>
    5980:	80 91 2e 07 	lds	r24, 0x072E
    5984:	90 91 2f 07 	lds	r25, 0x072F
    5988:	01 97       	sbiw	r24, 0x01	; 1
    598a:	90 93 2f 07 	sts	0x072F, r25
    598e:	80 93 2e 07 	sts	0x072E, r24
    5992:	80 91 2e 07 	lds	r24, 0x072E
    5996:	90 91 2f 07 	lds	r25, 0x072F
    599a:	89 2b       	or	r24, r25
    599c:	29 f4       	brne	.+10     	; 0x59a8 <STEPPER_process_pwm+0x98>
    599e:	80 81       	ld	r24, Z
    59a0:	83 7e       	andi	r24, 0xE3	; 227
    59a2:	80 83       	st	Z, r24
    59a4:	10 92 5e 04 	sts	0x045E, r1
    59a8:	80 91 3c 07 	lds	r24, 0x073C
    59ac:	82 30       	cpi	r24, 0x02	; 2
    59ae:	69 f4       	brne	.+26     	; 0x59ca <STEPPER_process_pwm+0xba>
    59b0:	80 91 5f 04 	lds	r24, 0x045F
    59b4:	91 e0       	ldi	r25, 0x01	; 1
    59b6:	89 27       	eor	r24, r25
    59b8:	80 93 5f 04 	sts	0x045F, r24
    59bc:	88 23       	and	r24, r24
    59be:	09 f0       	breq	.+2      	; 0x59c2 <STEPPER_process_pwm+0xb2>
    59c0:	3e c0       	rjmp	.+124    	; 0x5a3e <STEPPER_process_pwm+0x12e>
    59c2:	80 81       	ld	r24, Z
    59c4:	8f 71       	andi	r24, 0x1F	; 31
    59c6:	80 83       	st	Z, r24
    59c8:	08 95       	ret
    59ca:	80 91 1c 07 	lds	r24, 0x071C
    59ce:	90 91 1d 07 	lds	r25, 0x071D
    59d2:	c3 97       	sbiw	r24, 0x33	; 51
    59d4:	a4 f5       	brge	.+104    	; 0x5a3e <STEPPER_process_pwm+0x12e>
    59d6:	44 23       	and	r20, r20
    59d8:	d1 f0       	breq	.+52     	; 0x5a0e <STEPPER_process_pwm+0xfe>
    59da:	20 91 1c 07 	lds	r18, 0x071C
    59de:	30 91 1d 07 	lds	r19, 0x071D
    59e2:	80 e6       	ldi	r24, 0x60	; 96
    59e4:	90 e0       	ldi	r25, 0x00	; 0
    59e6:	ac 01       	movw	r20, r24
    59e8:	24 9f       	mul	r18, r20
    59ea:	c0 01       	movw	r24, r0
    59ec:	25 9f       	mul	r18, r21
    59ee:	90 0d       	add	r25, r0
    59f0:	34 9f       	mul	r19, r20
    59f2:	90 0d       	add	r25, r0
    59f4:	11 24       	eor	r1, r1
    59f6:	88 0f       	add	r24, r24
    59f8:	89 2f       	mov	r24, r25
    59fa:	88 1f       	adc	r24, r24
    59fc:	99 0b       	sbc	r25, r25
    59fe:	90 93 31 07 	sts	0x0731, r25
    5a02:	80 93 30 07 	sts	0x0730, r24
    5a06:	81 e0       	ldi	r24, 0x01	; 1
    5a08:	80 93 5d 04 	sts	0x045D, r24
    5a0c:	08 95       	ret
    5a0e:	80 91 5d 04 	lds	r24, 0x045D
    5a12:	88 23       	and	r24, r24
    5a14:	a1 f0       	breq	.+40     	; 0x5a3e <STEPPER_process_pwm+0x12e>
    5a16:	80 91 30 07 	lds	r24, 0x0730
    5a1a:	90 91 31 07 	lds	r25, 0x0731
    5a1e:	01 97       	sbiw	r24, 0x01	; 1
    5a20:	90 93 31 07 	sts	0x0731, r25
    5a24:	80 93 30 07 	sts	0x0730, r24
    5a28:	80 91 30 07 	lds	r24, 0x0730
    5a2c:	90 91 31 07 	lds	r25, 0x0731
    5a30:	89 2b       	or	r24, r25
    5a32:	29 f4       	brne	.+10     	; 0x5a3e <STEPPER_process_pwm+0x12e>
    5a34:	80 81       	ld	r24, Z
    5a36:	8f 71       	andi	r24, 0x1F	; 31
    5a38:	80 83       	st	Z, r24
    5a3a:	10 92 5d 04 	sts	0x045D, r1
    5a3e:	08 95       	ret

00005a40 <__subsf3>:
    5a40:	50 58       	subi	r21, 0x80	; 128

00005a42 <__addsf3>:
    5a42:	bb 27       	eor	r27, r27
    5a44:	aa 27       	eor	r26, r26
    5a46:	0e d0       	rcall	.+28     	; 0x5a64 <__addsf3x>
    5a48:	75 c1       	rjmp	.+746    	; 0x5d34 <__fp_round>
    5a4a:	66 d1       	rcall	.+716    	; 0x5d18 <__fp_pscA>
    5a4c:	30 f0       	brcs	.+12     	; 0x5a5a <__addsf3+0x18>
    5a4e:	6b d1       	rcall	.+726    	; 0x5d26 <__fp_pscB>
    5a50:	20 f0       	brcs	.+8      	; 0x5a5a <__addsf3+0x18>
    5a52:	31 f4       	brne	.+12     	; 0x5a60 <__addsf3+0x1e>
    5a54:	9f 3f       	cpi	r25, 0xFF	; 255
    5a56:	11 f4       	brne	.+4      	; 0x5a5c <__addsf3+0x1a>
    5a58:	1e f4       	brtc	.+6      	; 0x5a60 <__addsf3+0x1e>
    5a5a:	5b c1       	rjmp	.+694    	; 0x5d12 <__fp_nan>
    5a5c:	0e f4       	brtc	.+2      	; 0x5a60 <__addsf3+0x1e>
    5a5e:	e0 95       	com	r30
    5a60:	e7 fb       	bst	r30, 7
    5a62:	51 c1       	rjmp	.+674    	; 0x5d06 <__fp_inf>

00005a64 <__addsf3x>:
    5a64:	e9 2f       	mov	r30, r25
    5a66:	77 d1       	rcall	.+750    	; 0x5d56 <__fp_split3>
    5a68:	80 f3       	brcs	.-32     	; 0x5a4a <__addsf3+0x8>
    5a6a:	ba 17       	cp	r27, r26
    5a6c:	62 07       	cpc	r22, r18
    5a6e:	73 07       	cpc	r23, r19
    5a70:	84 07       	cpc	r24, r20
    5a72:	95 07       	cpc	r25, r21
    5a74:	18 f0       	brcs	.+6      	; 0x5a7c <__addsf3x+0x18>
    5a76:	71 f4       	brne	.+28     	; 0x5a94 <__addsf3x+0x30>
    5a78:	9e f5       	brtc	.+102    	; 0x5ae0 <__addsf3x+0x7c>
    5a7a:	8f c1       	rjmp	.+798    	; 0x5d9a <__fp_zero>
    5a7c:	0e f4       	brtc	.+2      	; 0x5a80 <__addsf3x+0x1c>
    5a7e:	e0 95       	com	r30
    5a80:	0b 2e       	mov	r0, r27
    5a82:	ba 2f       	mov	r27, r26
    5a84:	a0 2d       	mov	r26, r0
    5a86:	0b 01       	movw	r0, r22
    5a88:	b9 01       	movw	r22, r18
    5a8a:	90 01       	movw	r18, r0
    5a8c:	0c 01       	movw	r0, r24
    5a8e:	ca 01       	movw	r24, r20
    5a90:	a0 01       	movw	r20, r0
    5a92:	11 24       	eor	r1, r1
    5a94:	ff 27       	eor	r31, r31
    5a96:	59 1b       	sub	r21, r25
    5a98:	99 f0       	breq	.+38     	; 0x5ac0 <__addsf3x+0x5c>
    5a9a:	59 3f       	cpi	r21, 0xF9	; 249
    5a9c:	50 f4       	brcc	.+20     	; 0x5ab2 <__addsf3x+0x4e>
    5a9e:	50 3e       	cpi	r21, 0xE0	; 224
    5aa0:	68 f1       	brcs	.+90     	; 0x5afc <__addsf3x+0x98>
    5aa2:	1a 16       	cp	r1, r26
    5aa4:	f0 40       	sbci	r31, 0x00	; 0
    5aa6:	a2 2f       	mov	r26, r18
    5aa8:	23 2f       	mov	r18, r19
    5aaa:	34 2f       	mov	r19, r20
    5aac:	44 27       	eor	r20, r20
    5aae:	58 5f       	subi	r21, 0xF8	; 248
    5ab0:	f3 cf       	rjmp	.-26     	; 0x5a98 <__addsf3x+0x34>
    5ab2:	46 95       	lsr	r20
    5ab4:	37 95       	ror	r19
    5ab6:	27 95       	ror	r18
    5ab8:	a7 95       	ror	r26
    5aba:	f0 40       	sbci	r31, 0x00	; 0
    5abc:	53 95       	inc	r21
    5abe:	c9 f7       	brne	.-14     	; 0x5ab2 <__addsf3x+0x4e>
    5ac0:	7e f4       	brtc	.+30     	; 0x5ae0 <__addsf3x+0x7c>
    5ac2:	1f 16       	cp	r1, r31
    5ac4:	ba 0b       	sbc	r27, r26
    5ac6:	62 0b       	sbc	r22, r18
    5ac8:	73 0b       	sbc	r23, r19
    5aca:	84 0b       	sbc	r24, r20
    5acc:	ba f0       	brmi	.+46     	; 0x5afc <__addsf3x+0x98>
    5ace:	91 50       	subi	r25, 0x01	; 1
    5ad0:	a1 f0       	breq	.+40     	; 0x5afa <__addsf3x+0x96>
    5ad2:	ff 0f       	add	r31, r31
    5ad4:	bb 1f       	adc	r27, r27
    5ad6:	66 1f       	adc	r22, r22
    5ad8:	77 1f       	adc	r23, r23
    5ada:	88 1f       	adc	r24, r24
    5adc:	c2 f7       	brpl	.-16     	; 0x5ace <__addsf3x+0x6a>
    5ade:	0e c0       	rjmp	.+28     	; 0x5afc <__addsf3x+0x98>
    5ae0:	ba 0f       	add	r27, r26
    5ae2:	62 1f       	adc	r22, r18
    5ae4:	73 1f       	adc	r23, r19
    5ae6:	84 1f       	adc	r24, r20
    5ae8:	48 f4       	brcc	.+18     	; 0x5afc <__addsf3x+0x98>
    5aea:	87 95       	ror	r24
    5aec:	77 95       	ror	r23
    5aee:	67 95       	ror	r22
    5af0:	b7 95       	ror	r27
    5af2:	f7 95       	ror	r31
    5af4:	9e 3f       	cpi	r25, 0xFE	; 254
    5af6:	08 f0       	brcs	.+2      	; 0x5afa <__addsf3x+0x96>
    5af8:	b3 cf       	rjmp	.-154    	; 0x5a60 <__addsf3+0x1e>
    5afa:	93 95       	inc	r25
    5afc:	88 0f       	add	r24, r24
    5afe:	08 f0       	brcs	.+2      	; 0x5b02 <__addsf3x+0x9e>
    5b00:	99 27       	eor	r25, r25
    5b02:	ee 0f       	add	r30, r30
    5b04:	97 95       	ror	r25
    5b06:	87 95       	ror	r24
    5b08:	08 95       	ret

00005b0a <__cmpsf2>:
    5b0a:	d9 d0       	rcall	.+434    	; 0x5cbe <__fp_cmp>
    5b0c:	08 f4       	brcc	.+2      	; 0x5b10 <__cmpsf2+0x6>
    5b0e:	81 e0       	ldi	r24, 0x01	; 1
    5b10:	08 95       	ret

00005b12 <__divsf3>:
    5b12:	0c d0       	rcall	.+24     	; 0x5b2c <__divsf3x>
    5b14:	0f c1       	rjmp	.+542    	; 0x5d34 <__fp_round>
    5b16:	07 d1       	rcall	.+526    	; 0x5d26 <__fp_pscB>
    5b18:	40 f0       	brcs	.+16     	; 0x5b2a <__divsf3+0x18>
    5b1a:	fe d0       	rcall	.+508    	; 0x5d18 <__fp_pscA>
    5b1c:	30 f0       	brcs	.+12     	; 0x5b2a <__divsf3+0x18>
    5b1e:	21 f4       	brne	.+8      	; 0x5b28 <__divsf3+0x16>
    5b20:	5f 3f       	cpi	r21, 0xFF	; 255
    5b22:	19 f0       	breq	.+6      	; 0x5b2a <__divsf3+0x18>
    5b24:	f0 c0       	rjmp	.+480    	; 0x5d06 <__fp_inf>
    5b26:	51 11       	cpse	r21, r1
    5b28:	39 c1       	rjmp	.+626    	; 0x5d9c <__fp_szero>
    5b2a:	f3 c0       	rjmp	.+486    	; 0x5d12 <__fp_nan>

00005b2c <__divsf3x>:
    5b2c:	14 d1       	rcall	.+552    	; 0x5d56 <__fp_split3>
    5b2e:	98 f3       	brcs	.-26     	; 0x5b16 <__divsf3+0x4>

00005b30 <__divsf3_pse>:
    5b30:	99 23       	and	r25, r25
    5b32:	c9 f3       	breq	.-14     	; 0x5b26 <__divsf3+0x14>
    5b34:	55 23       	and	r21, r21
    5b36:	b1 f3       	breq	.-20     	; 0x5b24 <__divsf3+0x12>
    5b38:	95 1b       	sub	r25, r21
    5b3a:	55 0b       	sbc	r21, r21
    5b3c:	bb 27       	eor	r27, r27
    5b3e:	aa 27       	eor	r26, r26
    5b40:	62 17       	cp	r22, r18
    5b42:	73 07       	cpc	r23, r19
    5b44:	84 07       	cpc	r24, r20
    5b46:	38 f0       	brcs	.+14     	; 0x5b56 <__divsf3_pse+0x26>
    5b48:	9f 5f       	subi	r25, 0xFF	; 255
    5b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    5b4c:	22 0f       	add	r18, r18
    5b4e:	33 1f       	adc	r19, r19
    5b50:	44 1f       	adc	r20, r20
    5b52:	aa 1f       	adc	r26, r26
    5b54:	a9 f3       	breq	.-22     	; 0x5b40 <__divsf3_pse+0x10>
    5b56:	33 d0       	rcall	.+102    	; 0x5bbe <__divsf3_pse+0x8e>
    5b58:	0e 2e       	mov	r0, r30
    5b5a:	3a f0       	brmi	.+14     	; 0x5b6a <__divsf3_pse+0x3a>
    5b5c:	e0 e8       	ldi	r30, 0x80	; 128
    5b5e:	30 d0       	rcall	.+96     	; 0x5bc0 <__divsf3_pse+0x90>
    5b60:	91 50       	subi	r25, 0x01	; 1
    5b62:	50 40       	sbci	r21, 0x00	; 0
    5b64:	e6 95       	lsr	r30
    5b66:	00 1c       	adc	r0, r0
    5b68:	ca f7       	brpl	.-14     	; 0x5b5c <__divsf3_pse+0x2c>
    5b6a:	29 d0       	rcall	.+82     	; 0x5bbe <__divsf3_pse+0x8e>
    5b6c:	fe 2f       	mov	r31, r30
    5b6e:	27 d0       	rcall	.+78     	; 0x5bbe <__divsf3_pse+0x8e>
    5b70:	66 0f       	add	r22, r22
    5b72:	77 1f       	adc	r23, r23
    5b74:	88 1f       	adc	r24, r24
    5b76:	bb 1f       	adc	r27, r27
    5b78:	26 17       	cp	r18, r22
    5b7a:	37 07       	cpc	r19, r23
    5b7c:	48 07       	cpc	r20, r24
    5b7e:	ab 07       	cpc	r26, r27
    5b80:	b0 e8       	ldi	r27, 0x80	; 128
    5b82:	09 f0       	breq	.+2      	; 0x5b86 <__divsf3_pse+0x56>
    5b84:	bb 0b       	sbc	r27, r27
    5b86:	80 2d       	mov	r24, r0
    5b88:	bf 01       	movw	r22, r30
    5b8a:	ff 27       	eor	r31, r31
    5b8c:	93 58       	subi	r25, 0x83	; 131
    5b8e:	5f 4f       	sbci	r21, 0xFF	; 255
    5b90:	2a f0       	brmi	.+10     	; 0x5b9c <__divsf3_pse+0x6c>
    5b92:	9e 3f       	cpi	r25, 0xFE	; 254
    5b94:	51 05       	cpc	r21, r1
    5b96:	68 f0       	brcs	.+26     	; 0x5bb2 <__divsf3_pse+0x82>
    5b98:	b6 c0       	rjmp	.+364    	; 0x5d06 <__fp_inf>
    5b9a:	00 c1       	rjmp	.+512    	; 0x5d9c <__fp_szero>
    5b9c:	5f 3f       	cpi	r21, 0xFF	; 255
    5b9e:	ec f3       	brlt	.-6      	; 0x5b9a <__divsf3_pse+0x6a>
    5ba0:	98 3e       	cpi	r25, 0xE8	; 232
    5ba2:	dc f3       	brlt	.-10     	; 0x5b9a <__divsf3_pse+0x6a>
    5ba4:	86 95       	lsr	r24
    5ba6:	77 95       	ror	r23
    5ba8:	67 95       	ror	r22
    5baa:	b7 95       	ror	r27
    5bac:	f7 95       	ror	r31
    5bae:	9f 5f       	subi	r25, 0xFF	; 255
    5bb0:	c9 f7       	brne	.-14     	; 0x5ba4 <__divsf3_pse+0x74>
    5bb2:	88 0f       	add	r24, r24
    5bb4:	91 1d       	adc	r25, r1
    5bb6:	96 95       	lsr	r25
    5bb8:	87 95       	ror	r24
    5bba:	97 f9       	bld	r25, 7
    5bbc:	08 95       	ret
    5bbe:	e1 e0       	ldi	r30, 0x01	; 1
    5bc0:	66 0f       	add	r22, r22
    5bc2:	77 1f       	adc	r23, r23
    5bc4:	88 1f       	adc	r24, r24
    5bc6:	bb 1f       	adc	r27, r27
    5bc8:	62 17       	cp	r22, r18
    5bca:	73 07       	cpc	r23, r19
    5bcc:	84 07       	cpc	r24, r20
    5bce:	ba 07       	cpc	r27, r26
    5bd0:	20 f0       	brcs	.+8      	; 0x5bda <__divsf3_pse+0xaa>
    5bd2:	62 1b       	sub	r22, r18
    5bd4:	73 0b       	sbc	r23, r19
    5bd6:	84 0b       	sbc	r24, r20
    5bd8:	ba 0b       	sbc	r27, r26
    5bda:	ee 1f       	adc	r30, r30
    5bdc:	88 f7       	brcc	.-30     	; 0x5bc0 <__divsf3_pse+0x90>
    5bde:	e0 95       	com	r30
    5be0:	08 95       	ret

00005be2 <__fixsfsi>:
    5be2:	04 d0       	rcall	.+8      	; 0x5bec <__fixunssfsi>
    5be4:	68 94       	set
    5be6:	b1 11       	cpse	r27, r1
    5be8:	d9 c0       	rjmp	.+434    	; 0x5d9c <__fp_szero>
    5bea:	08 95       	ret

00005bec <__fixunssfsi>:
    5bec:	bc d0       	rcall	.+376    	; 0x5d66 <__fp_splitA>
    5bee:	88 f0       	brcs	.+34     	; 0x5c12 <__fixunssfsi+0x26>
    5bf0:	9f 57       	subi	r25, 0x7F	; 127
    5bf2:	90 f0       	brcs	.+36     	; 0x5c18 <__fixunssfsi+0x2c>
    5bf4:	b9 2f       	mov	r27, r25
    5bf6:	99 27       	eor	r25, r25
    5bf8:	b7 51       	subi	r27, 0x17	; 23
    5bfa:	a0 f0       	brcs	.+40     	; 0x5c24 <__fixunssfsi+0x38>
    5bfc:	d1 f0       	breq	.+52     	; 0x5c32 <__fixunssfsi+0x46>
    5bfe:	66 0f       	add	r22, r22
    5c00:	77 1f       	adc	r23, r23
    5c02:	88 1f       	adc	r24, r24
    5c04:	99 1f       	adc	r25, r25
    5c06:	1a f0       	brmi	.+6      	; 0x5c0e <__fixunssfsi+0x22>
    5c08:	ba 95       	dec	r27
    5c0a:	c9 f7       	brne	.-14     	; 0x5bfe <__fixunssfsi+0x12>
    5c0c:	12 c0       	rjmp	.+36     	; 0x5c32 <__fixunssfsi+0x46>
    5c0e:	b1 30       	cpi	r27, 0x01	; 1
    5c10:	81 f0       	breq	.+32     	; 0x5c32 <__fixunssfsi+0x46>
    5c12:	c3 d0       	rcall	.+390    	; 0x5d9a <__fp_zero>
    5c14:	b1 e0       	ldi	r27, 0x01	; 1
    5c16:	08 95       	ret
    5c18:	c0 c0       	rjmp	.+384    	; 0x5d9a <__fp_zero>
    5c1a:	67 2f       	mov	r22, r23
    5c1c:	78 2f       	mov	r23, r24
    5c1e:	88 27       	eor	r24, r24
    5c20:	b8 5f       	subi	r27, 0xF8	; 248
    5c22:	39 f0       	breq	.+14     	; 0x5c32 <__fixunssfsi+0x46>
    5c24:	b9 3f       	cpi	r27, 0xF9	; 249
    5c26:	cc f3       	brlt	.-14     	; 0x5c1a <__fixunssfsi+0x2e>
    5c28:	86 95       	lsr	r24
    5c2a:	77 95       	ror	r23
    5c2c:	67 95       	ror	r22
    5c2e:	b3 95       	inc	r27
    5c30:	d9 f7       	brne	.-10     	; 0x5c28 <__fixunssfsi+0x3c>
    5c32:	3e f4       	brtc	.+14     	; 0x5c42 <__fixunssfsi+0x56>
    5c34:	90 95       	com	r25
    5c36:	80 95       	com	r24
    5c38:	70 95       	com	r23
    5c3a:	61 95       	neg	r22
    5c3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c3e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c40:	9f 4f       	sbci	r25, 0xFF	; 255
    5c42:	08 95       	ret

00005c44 <__floatunsisf>:
    5c44:	e8 94       	clt
    5c46:	09 c0       	rjmp	.+18     	; 0x5c5a <__floatsisf+0x12>

00005c48 <__floatsisf>:
    5c48:	97 fb       	bst	r25, 7
    5c4a:	3e f4       	brtc	.+14     	; 0x5c5a <__floatsisf+0x12>
    5c4c:	90 95       	com	r25
    5c4e:	80 95       	com	r24
    5c50:	70 95       	com	r23
    5c52:	61 95       	neg	r22
    5c54:	7f 4f       	sbci	r23, 0xFF	; 255
    5c56:	8f 4f       	sbci	r24, 0xFF	; 255
    5c58:	9f 4f       	sbci	r25, 0xFF	; 255
    5c5a:	99 23       	and	r25, r25
    5c5c:	a9 f0       	breq	.+42     	; 0x5c88 <__floatsisf+0x40>
    5c5e:	f9 2f       	mov	r31, r25
    5c60:	96 e9       	ldi	r25, 0x96	; 150
    5c62:	bb 27       	eor	r27, r27
    5c64:	93 95       	inc	r25
    5c66:	f6 95       	lsr	r31
    5c68:	87 95       	ror	r24
    5c6a:	77 95       	ror	r23
    5c6c:	67 95       	ror	r22
    5c6e:	b7 95       	ror	r27
    5c70:	f1 11       	cpse	r31, r1
    5c72:	f8 cf       	rjmp	.-16     	; 0x5c64 <__floatsisf+0x1c>
    5c74:	fa f4       	brpl	.+62     	; 0x5cb4 <__floatsisf+0x6c>
    5c76:	bb 0f       	add	r27, r27
    5c78:	11 f4       	brne	.+4      	; 0x5c7e <__floatsisf+0x36>
    5c7a:	60 ff       	sbrs	r22, 0
    5c7c:	1b c0       	rjmp	.+54     	; 0x5cb4 <__floatsisf+0x6c>
    5c7e:	6f 5f       	subi	r22, 0xFF	; 255
    5c80:	7f 4f       	sbci	r23, 0xFF	; 255
    5c82:	8f 4f       	sbci	r24, 0xFF	; 255
    5c84:	9f 4f       	sbci	r25, 0xFF	; 255
    5c86:	16 c0       	rjmp	.+44     	; 0x5cb4 <__floatsisf+0x6c>
    5c88:	88 23       	and	r24, r24
    5c8a:	11 f0       	breq	.+4      	; 0x5c90 <__floatsisf+0x48>
    5c8c:	96 e9       	ldi	r25, 0x96	; 150
    5c8e:	11 c0       	rjmp	.+34     	; 0x5cb2 <__floatsisf+0x6a>
    5c90:	77 23       	and	r23, r23
    5c92:	21 f0       	breq	.+8      	; 0x5c9c <__floatsisf+0x54>
    5c94:	9e e8       	ldi	r25, 0x8E	; 142
    5c96:	87 2f       	mov	r24, r23
    5c98:	76 2f       	mov	r23, r22
    5c9a:	05 c0       	rjmp	.+10     	; 0x5ca6 <__floatsisf+0x5e>
    5c9c:	66 23       	and	r22, r22
    5c9e:	71 f0       	breq	.+28     	; 0x5cbc <__floatsisf+0x74>
    5ca0:	96 e8       	ldi	r25, 0x86	; 134
    5ca2:	86 2f       	mov	r24, r22
    5ca4:	70 e0       	ldi	r23, 0x00	; 0
    5ca6:	60 e0       	ldi	r22, 0x00	; 0
    5ca8:	2a f0       	brmi	.+10     	; 0x5cb4 <__floatsisf+0x6c>
    5caa:	9a 95       	dec	r25
    5cac:	66 0f       	add	r22, r22
    5cae:	77 1f       	adc	r23, r23
    5cb0:	88 1f       	adc	r24, r24
    5cb2:	da f7       	brpl	.-10     	; 0x5caa <__floatsisf+0x62>
    5cb4:	88 0f       	add	r24, r24
    5cb6:	96 95       	lsr	r25
    5cb8:	87 95       	ror	r24
    5cba:	97 f9       	bld	r25, 7
    5cbc:	08 95       	ret

00005cbe <__fp_cmp>:
    5cbe:	99 0f       	add	r25, r25
    5cc0:	00 08       	sbc	r0, r0
    5cc2:	55 0f       	add	r21, r21
    5cc4:	aa 0b       	sbc	r26, r26
    5cc6:	e0 e8       	ldi	r30, 0x80	; 128
    5cc8:	fe ef       	ldi	r31, 0xFE	; 254
    5cca:	16 16       	cp	r1, r22
    5ccc:	17 06       	cpc	r1, r23
    5cce:	e8 07       	cpc	r30, r24
    5cd0:	f9 07       	cpc	r31, r25
    5cd2:	c0 f0       	brcs	.+48     	; 0x5d04 <__fp_cmp+0x46>
    5cd4:	12 16       	cp	r1, r18
    5cd6:	13 06       	cpc	r1, r19
    5cd8:	e4 07       	cpc	r30, r20
    5cda:	f5 07       	cpc	r31, r21
    5cdc:	98 f0       	brcs	.+38     	; 0x5d04 <__fp_cmp+0x46>
    5cde:	62 1b       	sub	r22, r18
    5ce0:	73 0b       	sbc	r23, r19
    5ce2:	84 0b       	sbc	r24, r20
    5ce4:	95 0b       	sbc	r25, r21
    5ce6:	39 f4       	brne	.+14     	; 0x5cf6 <__fp_cmp+0x38>
    5ce8:	0a 26       	eor	r0, r26
    5cea:	61 f0       	breq	.+24     	; 0x5d04 <__fp_cmp+0x46>
    5cec:	23 2b       	or	r18, r19
    5cee:	24 2b       	or	r18, r20
    5cf0:	25 2b       	or	r18, r21
    5cf2:	21 f4       	brne	.+8      	; 0x5cfc <__fp_cmp+0x3e>
    5cf4:	08 95       	ret
    5cf6:	0a 26       	eor	r0, r26
    5cf8:	09 f4       	brne	.+2      	; 0x5cfc <__fp_cmp+0x3e>
    5cfa:	a1 40       	sbci	r26, 0x01	; 1
    5cfc:	a6 95       	lsr	r26
    5cfe:	8f ef       	ldi	r24, 0xFF	; 255
    5d00:	81 1d       	adc	r24, r1
    5d02:	81 1d       	adc	r24, r1
    5d04:	08 95       	ret

00005d06 <__fp_inf>:
    5d06:	97 f9       	bld	r25, 7
    5d08:	9f 67       	ori	r25, 0x7F	; 127
    5d0a:	80 e8       	ldi	r24, 0x80	; 128
    5d0c:	70 e0       	ldi	r23, 0x00	; 0
    5d0e:	60 e0       	ldi	r22, 0x00	; 0
    5d10:	08 95       	ret

00005d12 <__fp_nan>:
    5d12:	9f ef       	ldi	r25, 0xFF	; 255
    5d14:	80 ec       	ldi	r24, 0xC0	; 192
    5d16:	08 95       	ret

00005d18 <__fp_pscA>:
    5d18:	00 24       	eor	r0, r0
    5d1a:	0a 94       	dec	r0
    5d1c:	16 16       	cp	r1, r22
    5d1e:	17 06       	cpc	r1, r23
    5d20:	18 06       	cpc	r1, r24
    5d22:	09 06       	cpc	r0, r25
    5d24:	08 95       	ret

00005d26 <__fp_pscB>:
    5d26:	00 24       	eor	r0, r0
    5d28:	0a 94       	dec	r0
    5d2a:	12 16       	cp	r1, r18
    5d2c:	13 06       	cpc	r1, r19
    5d2e:	14 06       	cpc	r1, r20
    5d30:	05 06       	cpc	r0, r21
    5d32:	08 95       	ret

00005d34 <__fp_round>:
    5d34:	09 2e       	mov	r0, r25
    5d36:	03 94       	inc	r0
    5d38:	00 0c       	add	r0, r0
    5d3a:	11 f4       	brne	.+4      	; 0x5d40 <__fp_round+0xc>
    5d3c:	88 23       	and	r24, r24
    5d3e:	52 f0       	brmi	.+20     	; 0x5d54 <__fp_round+0x20>
    5d40:	bb 0f       	add	r27, r27
    5d42:	40 f4       	brcc	.+16     	; 0x5d54 <__fp_round+0x20>
    5d44:	bf 2b       	or	r27, r31
    5d46:	11 f4       	brne	.+4      	; 0x5d4c <__fp_round+0x18>
    5d48:	60 ff       	sbrs	r22, 0
    5d4a:	04 c0       	rjmp	.+8      	; 0x5d54 <__fp_round+0x20>
    5d4c:	6f 5f       	subi	r22, 0xFF	; 255
    5d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d50:	8f 4f       	sbci	r24, 0xFF	; 255
    5d52:	9f 4f       	sbci	r25, 0xFF	; 255
    5d54:	08 95       	ret

00005d56 <__fp_split3>:
    5d56:	57 fd       	sbrc	r21, 7
    5d58:	90 58       	subi	r25, 0x80	; 128
    5d5a:	44 0f       	add	r20, r20
    5d5c:	55 1f       	adc	r21, r21
    5d5e:	59 f0       	breq	.+22     	; 0x5d76 <__fp_splitA+0x10>
    5d60:	5f 3f       	cpi	r21, 0xFF	; 255
    5d62:	71 f0       	breq	.+28     	; 0x5d80 <__fp_splitA+0x1a>
    5d64:	47 95       	ror	r20

00005d66 <__fp_splitA>:
    5d66:	88 0f       	add	r24, r24
    5d68:	97 fb       	bst	r25, 7
    5d6a:	99 1f       	adc	r25, r25
    5d6c:	61 f0       	breq	.+24     	; 0x5d86 <__fp_splitA+0x20>
    5d6e:	9f 3f       	cpi	r25, 0xFF	; 255
    5d70:	79 f0       	breq	.+30     	; 0x5d90 <__fp_splitA+0x2a>
    5d72:	87 95       	ror	r24
    5d74:	08 95       	ret
    5d76:	12 16       	cp	r1, r18
    5d78:	13 06       	cpc	r1, r19
    5d7a:	14 06       	cpc	r1, r20
    5d7c:	55 1f       	adc	r21, r21
    5d7e:	f2 cf       	rjmp	.-28     	; 0x5d64 <__fp_split3+0xe>
    5d80:	46 95       	lsr	r20
    5d82:	f1 df       	rcall	.-30     	; 0x5d66 <__fp_splitA>
    5d84:	08 c0       	rjmp	.+16     	; 0x5d96 <__fp_splitA+0x30>
    5d86:	16 16       	cp	r1, r22
    5d88:	17 06       	cpc	r1, r23
    5d8a:	18 06       	cpc	r1, r24
    5d8c:	99 1f       	adc	r25, r25
    5d8e:	f1 cf       	rjmp	.-30     	; 0x5d72 <__fp_splitA+0xc>
    5d90:	86 95       	lsr	r24
    5d92:	71 05       	cpc	r23, r1
    5d94:	61 05       	cpc	r22, r1
    5d96:	08 94       	sec
    5d98:	08 95       	ret

00005d9a <__fp_zero>:
    5d9a:	e8 94       	clt

00005d9c <__fp_szero>:
    5d9c:	bb 27       	eor	r27, r27
    5d9e:	66 27       	eor	r22, r22
    5da0:	77 27       	eor	r23, r23
    5da2:	cb 01       	movw	r24, r22
    5da4:	97 f9       	bld	r25, 7
    5da6:	08 95       	ret

00005da8 <__gesf2>:
    5da8:	8a df       	rcall	.-236    	; 0x5cbe <__fp_cmp>
    5daa:	08 f4       	brcc	.+2      	; 0x5dae <__gesf2+0x6>
    5dac:	8f ef       	ldi	r24, 0xFF	; 255
    5dae:	08 95       	ret

00005db0 <lrint>:
    5db0:	da df       	rcall	.-76     	; 0x5d66 <__fp_splitA>
    5db2:	a8 f1       	brcs	.+106    	; 0x5e1e <lrint+0x6e>
    5db4:	9e 57       	subi	r25, 0x7E	; 126
    5db6:	a8 f1       	brcs	.+106    	; 0x5e22 <lrint+0x72>
    5db8:	98 51       	subi	r25, 0x18	; 24
    5dba:	60 f0       	brcs	.+24     	; 0x5dd4 <lrint+0x24>
    5dbc:	39 f1       	breq	.+78     	; 0x5e0c <lrint+0x5c>
    5dbe:	98 30       	cpi	r25, 0x08	; 8
    5dc0:	70 f5       	brcc	.+92     	; 0x5e1e <lrint+0x6e>
    5dc2:	09 2e       	mov	r0, r25
    5dc4:	99 27       	eor	r25, r25
    5dc6:	66 0f       	add	r22, r22
    5dc8:	77 1f       	adc	r23, r23
    5dca:	88 1f       	adc	r24, r24
    5dcc:	99 1f       	adc	r25, r25
    5dce:	0a 94       	dec	r0
    5dd0:	d1 f7       	brne	.-12     	; 0x5dc6 <lrint+0x16>
    5dd2:	1c c0       	rjmp	.+56     	; 0x5e0c <lrint+0x5c>
    5dd4:	bb 27       	eor	r27, r27
    5dd6:	99 3f       	cpi	r25, 0xF9	; 249
    5dd8:	4c f4       	brge	.+18     	; 0x5dec <lrint+0x3c>
    5dda:	b1 11       	cpse	r27, r1
    5ddc:	b1 e0       	ldi	r27, 0x01	; 1
    5dde:	b6 2b       	or	r27, r22
    5de0:	67 2f       	mov	r22, r23
    5de2:	78 2f       	mov	r23, r24
    5de4:	88 27       	eor	r24, r24
    5de6:	98 5f       	subi	r25, 0xF8	; 248
    5de8:	b1 f7       	brne	.-20     	; 0x5dd6 <lrint+0x26>
    5dea:	08 c0       	rjmp	.+16     	; 0x5dfc <lrint+0x4c>
    5dec:	86 95       	lsr	r24
    5dee:	77 95       	ror	r23
    5df0:	67 95       	ror	r22
    5df2:	b7 95       	ror	r27
    5df4:	08 f4       	brcc	.+2      	; 0x5df8 <lrint+0x48>
    5df6:	b1 60       	ori	r27, 0x01	; 1
    5df8:	93 95       	inc	r25
    5dfa:	c1 f7       	brne	.-16     	; 0x5dec <lrint+0x3c>
    5dfc:	bb 0f       	add	r27, r27
    5dfe:	30 f4       	brcc	.+12     	; 0x5e0c <lrint+0x5c>
    5e00:	11 f4       	brne	.+4      	; 0x5e06 <lrint+0x56>
    5e02:	60 ff       	sbrs	r22, 0
    5e04:	03 c0       	rjmp	.+6      	; 0x5e0c <lrint+0x5c>
    5e06:	6f 5f       	subi	r22, 0xFF	; 255
    5e08:	7f 4f       	sbci	r23, 0xFF	; 255
    5e0a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e0c:	3e f4       	brtc	.+14     	; 0x5e1c <lrint+0x6c>
    5e0e:	90 95       	com	r25
    5e10:	80 95       	com	r24
    5e12:	70 95       	com	r23
    5e14:	61 95       	neg	r22
    5e16:	7f 4f       	sbci	r23, 0xFF	; 255
    5e18:	8f 4f       	sbci	r24, 0xFF	; 255
    5e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5e1c:	08 95       	ret
    5e1e:	68 94       	set
    5e20:	bd cf       	rjmp	.-134    	; 0x5d9c <__fp_szero>
    5e22:	bb cf       	rjmp	.-138    	; 0x5d9a <__fp_zero>

00005e24 <__mulsf3>:
    5e24:	0b d0       	rcall	.+22     	; 0x5e3c <__mulsf3x>
    5e26:	86 cf       	rjmp	.-244    	; 0x5d34 <__fp_round>
    5e28:	77 df       	rcall	.-274    	; 0x5d18 <__fp_pscA>
    5e2a:	28 f0       	brcs	.+10     	; 0x5e36 <__mulsf3+0x12>
    5e2c:	7c df       	rcall	.-264    	; 0x5d26 <__fp_pscB>
    5e2e:	18 f0       	brcs	.+6      	; 0x5e36 <__mulsf3+0x12>
    5e30:	95 23       	and	r25, r21
    5e32:	09 f0       	breq	.+2      	; 0x5e36 <__mulsf3+0x12>
    5e34:	68 cf       	rjmp	.-304    	; 0x5d06 <__fp_inf>
    5e36:	6d cf       	rjmp	.-294    	; 0x5d12 <__fp_nan>
    5e38:	11 24       	eor	r1, r1
    5e3a:	b0 cf       	rjmp	.-160    	; 0x5d9c <__fp_szero>

00005e3c <__mulsf3x>:
    5e3c:	8c df       	rcall	.-232    	; 0x5d56 <__fp_split3>
    5e3e:	a0 f3       	brcs	.-24     	; 0x5e28 <__mulsf3+0x4>

00005e40 <__mulsf3_pse>:
    5e40:	95 9f       	mul	r25, r21
    5e42:	d1 f3       	breq	.-12     	; 0x5e38 <__mulsf3+0x14>
    5e44:	95 0f       	add	r25, r21
    5e46:	50 e0       	ldi	r21, 0x00	; 0
    5e48:	55 1f       	adc	r21, r21
    5e4a:	62 9f       	mul	r22, r18
    5e4c:	f0 01       	movw	r30, r0
    5e4e:	72 9f       	mul	r23, r18
    5e50:	bb 27       	eor	r27, r27
    5e52:	f0 0d       	add	r31, r0
    5e54:	b1 1d       	adc	r27, r1
    5e56:	63 9f       	mul	r22, r19
    5e58:	aa 27       	eor	r26, r26
    5e5a:	f0 0d       	add	r31, r0
    5e5c:	b1 1d       	adc	r27, r1
    5e5e:	aa 1f       	adc	r26, r26
    5e60:	64 9f       	mul	r22, r20
    5e62:	66 27       	eor	r22, r22
    5e64:	b0 0d       	add	r27, r0
    5e66:	a1 1d       	adc	r26, r1
    5e68:	66 1f       	adc	r22, r22
    5e6a:	82 9f       	mul	r24, r18
    5e6c:	22 27       	eor	r18, r18
    5e6e:	b0 0d       	add	r27, r0
    5e70:	a1 1d       	adc	r26, r1
    5e72:	62 1f       	adc	r22, r18
    5e74:	73 9f       	mul	r23, r19
    5e76:	b0 0d       	add	r27, r0
    5e78:	a1 1d       	adc	r26, r1
    5e7a:	62 1f       	adc	r22, r18
    5e7c:	83 9f       	mul	r24, r19
    5e7e:	a0 0d       	add	r26, r0
    5e80:	61 1d       	adc	r22, r1
    5e82:	22 1f       	adc	r18, r18
    5e84:	74 9f       	mul	r23, r20
    5e86:	33 27       	eor	r19, r19
    5e88:	a0 0d       	add	r26, r0
    5e8a:	61 1d       	adc	r22, r1
    5e8c:	23 1f       	adc	r18, r19
    5e8e:	84 9f       	mul	r24, r20
    5e90:	60 0d       	add	r22, r0
    5e92:	21 1d       	adc	r18, r1
    5e94:	82 2f       	mov	r24, r18
    5e96:	76 2f       	mov	r23, r22
    5e98:	6a 2f       	mov	r22, r26
    5e9a:	11 24       	eor	r1, r1
    5e9c:	9f 57       	subi	r25, 0x7F	; 127
    5e9e:	50 40       	sbci	r21, 0x00	; 0
    5ea0:	8a f0       	brmi	.+34     	; 0x5ec4 <__mulsf3_pse+0x84>
    5ea2:	e1 f0       	breq	.+56     	; 0x5edc <__mulsf3_pse+0x9c>
    5ea4:	88 23       	and	r24, r24
    5ea6:	4a f0       	brmi	.+18     	; 0x5eba <__mulsf3_pse+0x7a>
    5ea8:	ee 0f       	add	r30, r30
    5eaa:	ff 1f       	adc	r31, r31
    5eac:	bb 1f       	adc	r27, r27
    5eae:	66 1f       	adc	r22, r22
    5eb0:	77 1f       	adc	r23, r23
    5eb2:	88 1f       	adc	r24, r24
    5eb4:	91 50       	subi	r25, 0x01	; 1
    5eb6:	50 40       	sbci	r21, 0x00	; 0
    5eb8:	a9 f7       	brne	.-22     	; 0x5ea4 <__mulsf3_pse+0x64>
    5eba:	9e 3f       	cpi	r25, 0xFE	; 254
    5ebc:	51 05       	cpc	r21, r1
    5ebe:	70 f0       	brcs	.+28     	; 0x5edc <__mulsf3_pse+0x9c>
    5ec0:	22 cf       	rjmp	.-444    	; 0x5d06 <__fp_inf>
    5ec2:	6c cf       	rjmp	.-296    	; 0x5d9c <__fp_szero>
    5ec4:	5f 3f       	cpi	r21, 0xFF	; 255
    5ec6:	ec f3       	brlt	.-6      	; 0x5ec2 <__mulsf3_pse+0x82>
    5ec8:	98 3e       	cpi	r25, 0xE8	; 232
    5eca:	dc f3       	brlt	.-10     	; 0x5ec2 <__mulsf3_pse+0x82>
    5ecc:	86 95       	lsr	r24
    5ece:	77 95       	ror	r23
    5ed0:	67 95       	ror	r22
    5ed2:	b7 95       	ror	r27
    5ed4:	f7 95       	ror	r31
    5ed6:	e7 95       	ror	r30
    5ed8:	9f 5f       	subi	r25, 0xFF	; 255
    5eda:	c1 f7       	brne	.-16     	; 0x5ecc <__mulsf3_pse+0x8c>
    5edc:	fe 2b       	or	r31, r30
    5ede:	88 0f       	add	r24, r24
    5ee0:	91 1d       	adc	r25, r1
    5ee2:	96 95       	lsr	r25
    5ee4:	87 95       	ror	r24
    5ee6:	97 f9       	bld	r25, 7
    5ee8:	08 95       	ret

00005eea <pow>:
    5eea:	fa 01       	movw	r30, r20
    5eec:	ee 0f       	add	r30, r30
    5eee:	ff 1f       	adc	r31, r31
    5ef0:	30 96       	adiw	r30, 0x00	; 0
    5ef2:	21 05       	cpc	r18, r1
    5ef4:	31 05       	cpc	r19, r1
    5ef6:	99 f1       	breq	.+102    	; 0x5f5e <pow+0x74>
    5ef8:	61 15       	cp	r22, r1
    5efa:	71 05       	cpc	r23, r1
    5efc:	61 f4       	brne	.+24     	; 0x5f16 <pow+0x2c>
    5efe:	80 38       	cpi	r24, 0x80	; 128
    5f00:	bf e3       	ldi	r27, 0x3F	; 63
    5f02:	9b 07       	cpc	r25, r27
    5f04:	49 f1       	breq	.+82     	; 0x5f58 <pow+0x6e>
    5f06:	68 94       	set
    5f08:	90 38       	cpi	r25, 0x80	; 128
    5f0a:	81 05       	cpc	r24, r1
    5f0c:	61 f0       	breq	.+24     	; 0x5f26 <pow+0x3c>
    5f0e:	80 38       	cpi	r24, 0x80	; 128
    5f10:	bf ef       	ldi	r27, 0xFF	; 255
    5f12:	9b 07       	cpc	r25, r27
    5f14:	41 f0       	breq	.+16     	; 0x5f26 <pow+0x3c>
    5f16:	99 23       	and	r25, r25
    5f18:	42 f5       	brpl	.+80     	; 0x5f6a <pow+0x80>
    5f1a:	ff 3f       	cpi	r31, 0xFF	; 255
    5f1c:	e1 05       	cpc	r30, r1
    5f1e:	31 05       	cpc	r19, r1
    5f20:	21 05       	cpc	r18, r1
    5f22:	11 f1       	breq	.+68     	; 0x5f68 <pow+0x7e>
    5f24:	e8 94       	clt
    5f26:	08 94       	sec
    5f28:	e7 95       	ror	r30
    5f2a:	d9 01       	movw	r26, r18
    5f2c:	aa 23       	and	r26, r26
    5f2e:	29 f4       	brne	.+10     	; 0x5f3a <pow+0x50>
    5f30:	ab 2f       	mov	r26, r27
    5f32:	be 2f       	mov	r27, r30
    5f34:	f8 5f       	subi	r31, 0xF8	; 248
    5f36:	d0 f3       	brcs	.-12     	; 0x5f2c <pow+0x42>
    5f38:	10 c0       	rjmp	.+32     	; 0x5f5a <pow+0x70>
    5f3a:	ff 5f       	subi	r31, 0xFF	; 255
    5f3c:	70 f4       	brcc	.+28     	; 0x5f5a <pow+0x70>
    5f3e:	a6 95       	lsr	r26
    5f40:	e0 f7       	brcc	.-8      	; 0x5f3a <pow+0x50>
    5f42:	f7 39       	cpi	r31, 0x97	; 151
    5f44:	50 f0       	brcs	.+20     	; 0x5f5a <pow+0x70>
    5f46:	19 f0       	breq	.+6      	; 0x5f4e <pow+0x64>
    5f48:	ff 3a       	cpi	r31, 0xAF	; 175
    5f4a:	38 f4       	brcc	.+14     	; 0x5f5a <pow+0x70>
    5f4c:	9f 77       	andi	r25, 0x7F	; 127
    5f4e:	9f 93       	push	r25
    5f50:	0c d0       	rcall	.+24     	; 0x5f6a <pow+0x80>
    5f52:	0f 90       	pop	r0
    5f54:	07 fc       	sbrc	r0, 7
    5f56:	90 58       	subi	r25, 0x80	; 128
    5f58:	08 95       	ret
    5f5a:	3e f0       	brts	.+14     	; 0x5f6a <pow+0x80>
    5f5c:	da ce       	rjmp	.-588    	; 0x5d12 <__fp_nan>
    5f5e:	60 e0       	ldi	r22, 0x00	; 0
    5f60:	70 e0       	ldi	r23, 0x00	; 0
    5f62:	80 e8       	ldi	r24, 0x80	; 128
    5f64:	9f e3       	ldi	r25, 0x3F	; 63
    5f66:	08 95       	ret
    5f68:	4f e7       	ldi	r20, 0x7F	; 127
    5f6a:	9f 77       	andi	r25, 0x7F	; 127
    5f6c:	5f 93       	push	r21
    5f6e:	4f 93       	push	r20
    5f70:	3f 93       	push	r19
    5f72:	2f 93       	push	r18
    5f74:	9e d0       	rcall	.+316    	; 0x60b2 <log>
    5f76:	2f 91       	pop	r18
    5f78:	3f 91       	pop	r19
    5f7a:	4f 91       	pop	r20
    5f7c:	5f 91       	pop	r21
    5f7e:	52 df       	rcall	.-348    	; 0x5e24 <__mulsf3>
    5f80:	05 c0       	rjmp	.+10     	; 0x5f8c <exp>
    5f82:	19 f4       	brne	.+6      	; 0x5f8a <pow+0xa0>
    5f84:	0e f0       	brts	.+2      	; 0x5f88 <pow+0x9e>
    5f86:	bf ce       	rjmp	.-642    	; 0x5d06 <__fp_inf>
    5f88:	08 cf       	rjmp	.-496    	; 0x5d9a <__fp_zero>
    5f8a:	c3 ce       	rjmp	.-634    	; 0x5d12 <__fp_nan>

00005f8c <exp>:
    5f8c:	ec de       	rcall	.-552    	; 0x5d66 <__fp_splitA>
    5f8e:	c8 f3       	brcs	.-14     	; 0x5f82 <pow+0x98>
    5f90:	96 38       	cpi	r25, 0x86	; 134
    5f92:	c0 f7       	brcc	.-16     	; 0x5f84 <pow+0x9a>
    5f94:	07 f8       	bld	r0, 7
    5f96:	0f 92       	push	r0
    5f98:	e8 94       	clt
    5f9a:	2b e3       	ldi	r18, 0x3B	; 59
    5f9c:	3a ea       	ldi	r19, 0xAA	; 170
    5f9e:	48 eb       	ldi	r20, 0xB8	; 184
    5fa0:	5f e7       	ldi	r21, 0x7F	; 127
    5fa2:	4e df       	rcall	.-356    	; 0x5e40 <__mulsf3_pse>
    5fa4:	0f 92       	push	r0
    5fa6:	0f 92       	push	r0
    5fa8:	0f 92       	push	r0
    5faa:	4d b7       	in	r20, 0x3d	; 61
    5fac:	5e b7       	in	r21, 0x3e	; 62
    5fae:	0f 92       	push	r0
    5fb0:	c0 d0       	rcall	.+384    	; 0x6132 <modf>
    5fb2:	e8 ec       	ldi	r30, 0xC8	; 200
    5fb4:	f0 e0       	ldi	r31, 0x00	; 0
    5fb6:	16 d0       	rcall	.+44     	; 0x5fe4 <__fp_powser>
    5fb8:	4f 91       	pop	r20
    5fba:	5f 91       	pop	r21
    5fbc:	ef 91       	pop	r30
    5fbe:	ff 91       	pop	r31
    5fc0:	e5 95       	asr	r30
    5fc2:	ee 1f       	adc	r30, r30
    5fc4:	ff 1f       	adc	r31, r31
    5fc6:	49 f0       	breq	.+18     	; 0x5fda <exp+0x4e>
    5fc8:	fe 57       	subi	r31, 0x7E	; 126
    5fca:	e0 68       	ori	r30, 0x80	; 128
    5fcc:	44 27       	eor	r20, r20
    5fce:	ee 0f       	add	r30, r30
    5fd0:	44 1f       	adc	r20, r20
    5fd2:	fa 95       	dec	r31
    5fd4:	e1 f7       	brne	.-8      	; 0x5fce <exp+0x42>
    5fd6:	41 95       	neg	r20
    5fd8:	55 0b       	sbc	r21, r21
    5fda:	32 d0       	rcall	.+100    	; 0x6040 <ldexp>
    5fdc:	0f 90       	pop	r0
    5fde:	07 fe       	sbrs	r0, 7
    5fe0:	26 c0       	rjmp	.+76     	; 0x602e <inverse>
    5fe2:	08 95       	ret

00005fe4 <__fp_powser>:
    5fe4:	df 93       	push	r29
    5fe6:	cf 93       	push	r28
    5fe8:	1f 93       	push	r17
    5fea:	0f 93       	push	r16
    5fec:	ff 92       	push	r15
    5fee:	ef 92       	push	r14
    5ff0:	df 92       	push	r13
    5ff2:	7b 01       	movw	r14, r22
    5ff4:	8c 01       	movw	r16, r24
    5ff6:	68 94       	set
    5ff8:	05 c0       	rjmp	.+10     	; 0x6004 <__fp_powser+0x20>
    5ffa:	da 2e       	mov	r13, r26
    5ffc:	ef 01       	movw	r28, r30
    5ffe:	1e df       	rcall	.-452    	; 0x5e3c <__mulsf3x>
    6000:	fe 01       	movw	r30, r28
    6002:	e8 94       	clt
    6004:	a5 91       	lpm	r26, Z+
    6006:	25 91       	lpm	r18, Z+
    6008:	35 91       	lpm	r19, Z+
    600a:	45 91       	lpm	r20, Z+
    600c:	55 91       	lpm	r21, Z+
    600e:	ae f3       	brts	.-22     	; 0x5ffa <__fp_powser+0x16>
    6010:	ef 01       	movw	r28, r30
    6012:	28 dd       	rcall	.-1456   	; 0x5a64 <__addsf3x>
    6014:	fe 01       	movw	r30, r28
    6016:	97 01       	movw	r18, r14
    6018:	a8 01       	movw	r20, r16
    601a:	da 94       	dec	r13
    601c:	79 f7       	brne	.-34     	; 0x5ffc <__fp_powser+0x18>
    601e:	df 90       	pop	r13
    6020:	ef 90       	pop	r14
    6022:	ff 90       	pop	r15
    6024:	0f 91       	pop	r16
    6026:	1f 91       	pop	r17
    6028:	cf 91       	pop	r28
    602a:	df 91       	pop	r29
    602c:	08 95       	ret

0000602e <inverse>:
    602e:	9b 01       	movw	r18, r22
    6030:	ac 01       	movw	r20, r24
    6032:	60 e0       	ldi	r22, 0x00	; 0
    6034:	70 e0       	ldi	r23, 0x00	; 0
    6036:	80 e8       	ldi	r24, 0x80	; 128
    6038:	9f e3       	ldi	r25, 0x3F	; 63
    603a:	6b cd       	rjmp	.-1322   	; 0x5b12 <__divsf3>
    603c:	64 ce       	rjmp	.-824    	; 0x5d06 <__fp_inf>
    603e:	ac c0       	rjmp	.+344    	; 0x6198 <__fp_mpack>

00006040 <ldexp>:
    6040:	92 de       	rcall	.-732    	; 0x5d66 <__fp_splitA>
    6042:	e8 f3       	brcs	.-6      	; 0x603e <inverse+0x10>
    6044:	99 23       	and	r25, r25
    6046:	d9 f3       	breq	.-10     	; 0x603e <inverse+0x10>
    6048:	94 0f       	add	r25, r20
    604a:	51 1d       	adc	r21, r1
    604c:	bb f3       	brvs	.-18     	; 0x603c <inverse+0xe>
    604e:	91 50       	subi	r25, 0x01	; 1
    6050:	50 40       	sbci	r21, 0x00	; 0
    6052:	94 f0       	brlt	.+36     	; 0x6078 <ldexp+0x38>
    6054:	59 f0       	breq	.+22     	; 0x606c <ldexp+0x2c>
    6056:	88 23       	and	r24, r24
    6058:	32 f0       	brmi	.+12     	; 0x6066 <ldexp+0x26>
    605a:	66 0f       	add	r22, r22
    605c:	77 1f       	adc	r23, r23
    605e:	88 1f       	adc	r24, r24
    6060:	91 50       	subi	r25, 0x01	; 1
    6062:	50 40       	sbci	r21, 0x00	; 0
    6064:	c1 f7       	brne	.-16     	; 0x6056 <ldexp+0x16>
    6066:	9e 3f       	cpi	r25, 0xFE	; 254
    6068:	51 05       	cpc	r21, r1
    606a:	44 f7       	brge	.-48     	; 0x603c <inverse+0xe>
    606c:	88 0f       	add	r24, r24
    606e:	91 1d       	adc	r25, r1
    6070:	96 95       	lsr	r25
    6072:	87 95       	ror	r24
    6074:	97 f9       	bld	r25, 7
    6076:	08 95       	ret
    6078:	5f 3f       	cpi	r21, 0xFF	; 255
    607a:	ac f0       	brlt	.+42     	; 0x60a6 <ldexp+0x66>
    607c:	98 3e       	cpi	r25, 0xE8	; 232
    607e:	9c f0       	brlt	.+38     	; 0x60a6 <ldexp+0x66>
    6080:	bb 27       	eor	r27, r27
    6082:	86 95       	lsr	r24
    6084:	77 95       	ror	r23
    6086:	67 95       	ror	r22
    6088:	b7 95       	ror	r27
    608a:	08 f4       	brcc	.+2      	; 0x608e <ldexp+0x4e>
    608c:	b1 60       	ori	r27, 0x01	; 1
    608e:	93 95       	inc	r25
    6090:	c1 f7       	brne	.-16     	; 0x6082 <ldexp+0x42>
    6092:	bb 0f       	add	r27, r27
    6094:	58 f7       	brcc	.-42     	; 0x606c <ldexp+0x2c>
    6096:	11 f4       	brne	.+4      	; 0x609c <ldexp+0x5c>
    6098:	60 ff       	sbrs	r22, 0
    609a:	e8 cf       	rjmp	.-48     	; 0x606c <ldexp+0x2c>
    609c:	6f 5f       	subi	r22, 0xFF	; 255
    609e:	7f 4f       	sbci	r23, 0xFF	; 255
    60a0:	8f 4f       	sbci	r24, 0xFF	; 255
    60a2:	9f 4f       	sbci	r25, 0xFF	; 255
    60a4:	e3 cf       	rjmp	.-58     	; 0x606c <ldexp+0x2c>
    60a6:	7a ce       	rjmp	.-780    	; 0x5d9c <__fp_szero>
    60a8:	0e f0       	brts	.+2      	; 0x60ac <ldexp+0x6c>
    60aa:	76 c0       	rjmp	.+236    	; 0x6198 <__fp_mpack>
    60ac:	32 ce       	rjmp	.-924    	; 0x5d12 <__fp_nan>
    60ae:	68 94       	set
    60b0:	2a ce       	rjmp	.-940    	; 0x5d06 <__fp_inf>

000060b2 <log>:
    60b2:	59 de       	rcall	.-846    	; 0x5d66 <__fp_splitA>
    60b4:	c8 f3       	brcs	.-14     	; 0x60a8 <ldexp+0x68>
    60b6:	99 23       	and	r25, r25
    60b8:	d1 f3       	breq	.-12     	; 0x60ae <ldexp+0x6e>
    60ba:	c6 f3       	brts	.-16     	; 0x60ac <ldexp+0x6c>
    60bc:	df 93       	push	r29
    60be:	cf 93       	push	r28
    60c0:	1f 93       	push	r17
    60c2:	0f 93       	push	r16
    60c4:	ff 92       	push	r15
    60c6:	c9 2f       	mov	r28, r25
    60c8:	dd 27       	eor	r29, r29
    60ca:	88 23       	and	r24, r24
    60cc:	2a f0       	brmi	.+10     	; 0x60d8 <log+0x26>
    60ce:	21 97       	sbiw	r28, 0x01	; 1
    60d0:	66 0f       	add	r22, r22
    60d2:	77 1f       	adc	r23, r23
    60d4:	88 1f       	adc	r24, r24
    60d6:	da f7       	brpl	.-10     	; 0x60ce <log+0x1c>
    60d8:	20 e0       	ldi	r18, 0x00	; 0
    60da:	30 e0       	ldi	r19, 0x00	; 0
    60dc:	40 e8       	ldi	r20, 0x80	; 128
    60de:	5f eb       	ldi	r21, 0xBF	; 191
    60e0:	9f e3       	ldi	r25, 0x3F	; 63
    60e2:	88 39       	cpi	r24, 0x98	; 152
    60e4:	20 f0       	brcs	.+8      	; 0x60ee <log+0x3c>
    60e6:	80 3e       	cpi	r24, 0xE0	; 224
    60e8:	30 f0       	brcs	.+12     	; 0x60f6 <log+0x44>
    60ea:	21 96       	adiw	r28, 0x01	; 1
    60ec:	8f 77       	andi	r24, 0x7F	; 127
    60ee:	a9 dc       	rcall	.-1710   	; 0x5a42 <__addsf3>
    60f0:	e0 ef       	ldi	r30, 0xF0	; 240
    60f2:	f0 e0       	ldi	r31, 0x00	; 0
    60f4:	03 c0       	rjmp	.+6      	; 0x60fc <log+0x4a>
    60f6:	a5 dc       	rcall	.-1718   	; 0x5a42 <__addsf3>
    60f8:	ed e1       	ldi	r30, 0x1D	; 29
    60fa:	f1 e0       	ldi	r31, 0x01	; 1
    60fc:	73 df       	rcall	.-282    	; 0x5fe4 <__fp_powser>
    60fe:	8b 01       	movw	r16, r22
    6100:	be 01       	movw	r22, r28
    6102:	ec 01       	movw	r28, r24
    6104:	fb 2e       	mov	r15, r27
    6106:	6f 57       	subi	r22, 0x7F	; 127
    6108:	71 09       	sbc	r23, r1
    610a:	75 95       	asr	r23
    610c:	77 1f       	adc	r23, r23
    610e:	88 0b       	sbc	r24, r24
    6110:	99 0b       	sbc	r25, r25
    6112:	9a dd       	rcall	.-1228   	; 0x5c48 <__floatsisf>
    6114:	28 e1       	ldi	r18, 0x18	; 24
    6116:	32 e7       	ldi	r19, 0x72	; 114
    6118:	41 e3       	ldi	r20, 0x31	; 49
    611a:	5f e3       	ldi	r21, 0x3F	; 63
    611c:	8f de       	rcall	.-738    	; 0x5e3c <__mulsf3x>
    611e:	af 2d       	mov	r26, r15
    6120:	98 01       	movw	r18, r16
    6122:	ae 01       	movw	r20, r28
    6124:	ff 90       	pop	r15
    6126:	0f 91       	pop	r16
    6128:	1f 91       	pop	r17
    612a:	cf 91       	pop	r28
    612c:	df 91       	pop	r29
    612e:	9a dc       	rcall	.-1740   	; 0x5a64 <__addsf3x>
    6130:	01 ce       	rjmp	.-1022   	; 0x5d34 <__fp_round>

00006132 <modf>:
    6132:	fa 01       	movw	r30, r20
    6134:	dc 01       	movw	r26, r24
    6136:	aa 0f       	add	r26, r26
    6138:	bb 1f       	adc	r27, r27
    613a:	9b 01       	movw	r18, r22
    613c:	ac 01       	movw	r20, r24
    613e:	bf 57       	subi	r27, 0x7F	; 127
    6140:	28 f4       	brcc	.+10     	; 0x614c <modf+0x1a>
    6142:	22 27       	eor	r18, r18
    6144:	33 27       	eor	r19, r19
    6146:	44 27       	eor	r20, r20
    6148:	50 78       	andi	r21, 0x80	; 128
    614a:	1f c0       	rjmp	.+62     	; 0x618a <modf+0x58>
    614c:	b7 51       	subi	r27, 0x17	; 23
    614e:	88 f4       	brcc	.+34     	; 0x6172 <modf+0x40>
    6150:	ab 2f       	mov	r26, r27
    6152:	00 24       	eor	r0, r0
    6154:	46 95       	lsr	r20
    6156:	37 95       	ror	r19
    6158:	27 95       	ror	r18
    615a:	01 1c       	adc	r0, r1
    615c:	a3 95       	inc	r26
    615e:	d2 f3       	brmi	.-12     	; 0x6154 <modf+0x22>
    6160:	00 20       	and	r0, r0
    6162:	69 f0       	breq	.+26     	; 0x617e <modf+0x4c>
    6164:	22 0f       	add	r18, r18
    6166:	33 1f       	adc	r19, r19
    6168:	44 1f       	adc	r20, r20
    616a:	b3 95       	inc	r27
    616c:	da f3       	brmi	.-10     	; 0x6164 <modf+0x32>
    616e:	0d d0       	rcall	.+26     	; 0x618a <modf+0x58>
    6170:	67 cc       	rjmp	.-1842   	; 0x5a40 <__subsf3>
    6172:	61 30       	cpi	r22, 0x01	; 1
    6174:	71 05       	cpc	r23, r1
    6176:	a0 e8       	ldi	r26, 0x80	; 128
    6178:	8a 07       	cpc	r24, r26
    617a:	b9 46       	sbci	r27, 0x69	; 105
    617c:	30 f4       	brcc	.+12     	; 0x618a <modf+0x58>
    617e:	9b 01       	movw	r18, r22
    6180:	ac 01       	movw	r20, r24
    6182:	66 27       	eor	r22, r22
    6184:	77 27       	eor	r23, r23
    6186:	88 27       	eor	r24, r24
    6188:	90 78       	andi	r25, 0x80	; 128
    618a:	30 96       	adiw	r30, 0x00	; 0
    618c:	21 f0       	breq	.+8      	; 0x6196 <modf+0x64>
    618e:	20 83       	st	Z, r18
    6190:	31 83       	std	Z+1, r19	; 0x01
    6192:	42 83       	std	Z+2, r20	; 0x02
    6194:	53 83       	std	Z+3, r21	; 0x03
    6196:	08 95       	ret

00006198 <__fp_mpack>:
    6198:	9f 3f       	cpi	r25, 0xFF	; 255
    619a:	31 f0       	breq	.+12     	; 0x61a8 <__fp_mpack_finite+0xc>

0000619c <__fp_mpack_finite>:
    619c:	91 50       	subi	r25, 0x01	; 1
    619e:	20 f4       	brcc	.+8      	; 0x61a8 <__fp_mpack_finite+0xc>
    61a0:	87 95       	ror	r24
    61a2:	77 95       	ror	r23
    61a4:	67 95       	ror	r22
    61a6:	b7 95       	ror	r27
    61a8:	88 0f       	add	r24, r24
    61aa:	91 1d       	adc	r25, r1
    61ac:	96 95       	lsr	r25
    61ae:	87 95       	ror	r24
    61b0:	97 f9       	bld	r25, 7
    61b2:	08 95       	ret

000061b4 <vfprintf>:
    61b4:	a1 e1       	ldi	r26, 0x11	; 17
    61b6:	b0 e0       	ldi	r27, 0x00	; 0
    61b8:	ef ed       	ldi	r30, 0xDF	; 223
    61ba:	f0 e3       	ldi	r31, 0x30	; 48
    61bc:	a4 c3       	rjmp	.+1864   	; 0x6906 <__prologue_saves__>
    61be:	3c 01       	movw	r6, r24
    61c0:	7f 87       	std	Y+15, r23	; 0x0f
    61c2:	6e 87       	std	Y+14, r22	; 0x0e
    61c4:	6a 01       	movw	r12, r20
    61c6:	fc 01       	movw	r30, r24
    61c8:	17 82       	std	Z+7, r1	; 0x07
    61ca:	16 82       	std	Z+6, r1	; 0x06
    61cc:	83 81       	ldd	r24, Z+3	; 0x03
    61ce:	81 fd       	sbrc	r24, 1
    61d0:	03 c0       	rjmp	.+6      	; 0x61d8 <vfprintf+0x24>
    61d2:	6f ef       	ldi	r22, 0xFF	; 255
    61d4:	7f ef       	ldi	r23, 0xFF	; 255
    61d6:	52 c3       	rjmp	.+1700   	; 0x687c <vfprintf+0x6c8>
    61d8:	9e 01       	movw	r18, r28
    61da:	2f 5f       	subi	r18, 0xFF	; 255
    61dc:	3f 4f       	sbci	r19, 0xFF	; 255
    61de:	39 8b       	std	Y+17, r19	; 0x11
    61e0:	28 8b       	std	Y+16, r18	; 0x10
    61e2:	f3 01       	movw	r30, r6
    61e4:	23 81       	ldd	r18, Z+3	; 0x03
    61e6:	ee 85       	ldd	r30, Y+14	; 0x0e
    61e8:	ff 85       	ldd	r31, Y+15	; 0x0f
    61ea:	23 fd       	sbrc	r18, 3
    61ec:	85 91       	lpm	r24, Z+
    61ee:	23 ff       	sbrs	r18, 3
    61f0:	81 91       	ld	r24, Z+
    61f2:	ff 87       	std	Y+15, r31	; 0x0f
    61f4:	ee 87       	std	Y+14, r30	; 0x0e
    61f6:	88 23       	and	r24, r24
    61f8:	09 f4       	brne	.+2      	; 0x61fc <vfprintf+0x48>
    61fa:	3d c3       	rjmp	.+1658   	; 0x6876 <vfprintf+0x6c2>
    61fc:	85 32       	cpi	r24, 0x25	; 37
    61fe:	51 f4       	brne	.+20     	; 0x6214 <vfprintf+0x60>
    6200:	ee 85       	ldd	r30, Y+14	; 0x0e
    6202:	ff 85       	ldd	r31, Y+15	; 0x0f
    6204:	23 fd       	sbrc	r18, 3
    6206:	85 91       	lpm	r24, Z+
    6208:	23 ff       	sbrs	r18, 3
    620a:	81 91       	ld	r24, Z+
    620c:	ff 87       	std	Y+15, r31	; 0x0f
    620e:	ee 87       	std	Y+14, r30	; 0x0e
    6210:	85 32       	cpi	r24, 0x25	; 37
    6212:	21 f4       	brne	.+8      	; 0x621c <vfprintf+0x68>
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	b3 01       	movw	r22, r6
    6218:	a0 d5       	rcall	.+2880   	; 0x6d5a <fputc>
    621a:	e3 cf       	rjmp	.-58     	; 0x61e2 <vfprintf+0x2e>
    621c:	98 2f       	mov	r25, r24
    621e:	10 e0       	ldi	r17, 0x00	; 0
    6220:	88 24       	eor	r8, r8
    6222:	99 24       	eor	r9, r9
    6224:	10 32       	cpi	r17, 0x20	; 32
    6226:	b0 f4       	brcc	.+44     	; 0x6254 <vfprintf+0xa0>
    6228:	9b 32       	cpi	r25, 0x2B	; 43
    622a:	69 f0       	breq	.+26     	; 0x6246 <vfprintf+0x92>
    622c:	9c 32       	cpi	r25, 0x2C	; 44
    622e:	28 f4       	brcc	.+10     	; 0x623a <vfprintf+0x86>
    6230:	90 32       	cpi	r25, 0x20	; 32
    6232:	51 f0       	breq	.+20     	; 0x6248 <vfprintf+0x94>
    6234:	93 32       	cpi	r25, 0x23	; 35
    6236:	71 f4       	brne	.+28     	; 0x6254 <vfprintf+0xa0>
    6238:	0b c0       	rjmp	.+22     	; 0x6250 <vfprintf+0x9c>
    623a:	9d 32       	cpi	r25, 0x2D	; 45
    623c:	39 f0       	breq	.+14     	; 0x624c <vfprintf+0x98>
    623e:	90 33       	cpi	r25, 0x30	; 48
    6240:	49 f4       	brne	.+18     	; 0x6254 <vfprintf+0xa0>
    6242:	11 60       	ori	r17, 0x01	; 1
    6244:	28 c0       	rjmp	.+80     	; 0x6296 <vfprintf+0xe2>
    6246:	12 60       	ori	r17, 0x02	; 2
    6248:	14 60       	ori	r17, 0x04	; 4
    624a:	25 c0       	rjmp	.+74     	; 0x6296 <vfprintf+0xe2>
    624c:	18 60       	ori	r17, 0x08	; 8
    624e:	23 c0       	rjmp	.+70     	; 0x6296 <vfprintf+0xe2>
    6250:	10 61       	ori	r17, 0x10	; 16
    6252:	21 c0       	rjmp	.+66     	; 0x6296 <vfprintf+0xe2>
    6254:	17 fd       	sbrc	r17, 7
    6256:	2a c0       	rjmp	.+84     	; 0x62ac <vfprintf+0xf8>
    6258:	89 2f       	mov	r24, r25
    625a:	80 53       	subi	r24, 0x30	; 48
    625c:	8a 30       	cpi	r24, 0x0A	; 10
    625e:	78 f4       	brcc	.+30     	; 0x627e <vfprintf+0xca>
    6260:	16 ff       	sbrs	r17, 6
    6262:	06 c0       	rjmp	.+12     	; 0x6270 <vfprintf+0xbc>
    6264:	fa e0       	ldi	r31, 0x0A	; 10
    6266:	9f 9e       	mul	r9, r31
    6268:	90 2c       	mov	r9, r0
    626a:	11 24       	eor	r1, r1
    626c:	98 0e       	add	r9, r24
    626e:	13 c0       	rjmp	.+38     	; 0x6296 <vfprintf+0xe2>
    6270:	3a e0       	ldi	r19, 0x0A	; 10
    6272:	83 9e       	mul	r8, r19
    6274:	80 2c       	mov	r8, r0
    6276:	11 24       	eor	r1, r1
    6278:	88 0e       	add	r8, r24
    627a:	10 62       	ori	r17, 0x20	; 32
    627c:	0c c0       	rjmp	.+24     	; 0x6296 <vfprintf+0xe2>
    627e:	9e 32       	cpi	r25, 0x2E	; 46
    6280:	21 f4       	brne	.+8      	; 0x628a <vfprintf+0xd6>
    6282:	16 fd       	sbrc	r17, 6
    6284:	f8 c2       	rjmp	.+1520   	; 0x6876 <vfprintf+0x6c2>
    6286:	10 64       	ori	r17, 0x40	; 64
    6288:	06 c0       	rjmp	.+12     	; 0x6296 <vfprintf+0xe2>
    628a:	9c 36       	cpi	r25, 0x6C	; 108
    628c:	11 f4       	brne	.+4      	; 0x6292 <vfprintf+0xde>
    628e:	10 68       	ori	r17, 0x80	; 128
    6290:	02 c0       	rjmp	.+4      	; 0x6296 <vfprintf+0xe2>
    6292:	98 36       	cpi	r25, 0x68	; 104
    6294:	59 f4       	brne	.+22     	; 0x62ac <vfprintf+0xf8>
    6296:	ee 85       	ldd	r30, Y+14	; 0x0e
    6298:	ff 85       	ldd	r31, Y+15	; 0x0f
    629a:	23 fd       	sbrc	r18, 3
    629c:	95 91       	lpm	r25, Z+
    629e:	23 ff       	sbrs	r18, 3
    62a0:	91 91       	ld	r25, Z+
    62a2:	ff 87       	std	Y+15, r31	; 0x0f
    62a4:	ee 87       	std	Y+14, r30	; 0x0e
    62a6:	99 23       	and	r25, r25
    62a8:	09 f0       	breq	.+2      	; 0x62ac <vfprintf+0xf8>
    62aa:	bc cf       	rjmp	.-136    	; 0x6224 <vfprintf+0x70>
    62ac:	89 2f       	mov	r24, r25
    62ae:	85 54       	subi	r24, 0x45	; 69
    62b0:	83 30       	cpi	r24, 0x03	; 3
    62b2:	20 f4       	brcc	.+8      	; 0x62bc <vfprintf+0x108>
    62b4:	81 2f       	mov	r24, r17
    62b6:	80 61       	ori	r24, 0x10	; 16
    62b8:	90 5e       	subi	r25, 0xE0	; 224
    62ba:	07 c0       	rjmp	.+14     	; 0x62ca <vfprintf+0x116>
    62bc:	89 2f       	mov	r24, r25
    62be:	85 56       	subi	r24, 0x65	; 101
    62c0:	83 30       	cpi	r24, 0x03	; 3
    62c2:	08 f0       	brcs	.+2      	; 0x62c6 <vfprintf+0x112>
    62c4:	8f c1       	rjmp	.+798    	; 0x65e4 <vfprintf+0x430>
    62c6:	81 2f       	mov	r24, r17
    62c8:	8f 7e       	andi	r24, 0xEF	; 239
    62ca:	86 fd       	sbrc	r24, 6
    62cc:	02 c0       	rjmp	.+4      	; 0x62d2 <vfprintf+0x11e>
    62ce:	76 e0       	ldi	r23, 0x06	; 6
    62d0:	97 2e       	mov	r9, r23
    62d2:	6f e3       	ldi	r22, 0x3F	; 63
    62d4:	f6 2e       	mov	r15, r22
    62d6:	f8 22       	and	r15, r24
    62d8:	95 36       	cpi	r25, 0x65	; 101
    62da:	19 f4       	brne	.+6      	; 0x62e2 <vfprintf+0x12e>
    62dc:	f0 e4       	ldi	r31, 0x40	; 64
    62de:	ff 2a       	or	r15, r31
    62e0:	07 c0       	rjmp	.+14     	; 0x62f0 <vfprintf+0x13c>
    62e2:	96 36       	cpi	r25, 0x66	; 102
    62e4:	19 f4       	brne	.+6      	; 0x62ec <vfprintf+0x138>
    62e6:	20 e8       	ldi	r18, 0x80	; 128
    62e8:	f2 2a       	or	r15, r18
    62ea:	02 c0       	rjmp	.+4      	; 0x62f0 <vfprintf+0x13c>
    62ec:	91 10       	cpse	r9, r1
    62ee:	9a 94       	dec	r9
    62f0:	f7 fe       	sbrs	r15, 7
    62f2:	0a c0       	rjmp	.+20     	; 0x6308 <vfprintf+0x154>
    62f4:	3b e3       	ldi	r19, 0x3B	; 59
    62f6:	39 15       	cp	r19, r9
    62f8:	18 f4       	brcc	.+6      	; 0x6300 <vfprintf+0x14c>
    62fa:	5c e3       	ldi	r21, 0x3C	; 60
    62fc:	b5 2e       	mov	r11, r21
    62fe:	02 c0       	rjmp	.+4      	; 0x6304 <vfprintf+0x150>
    6300:	b9 2c       	mov	r11, r9
    6302:	b3 94       	inc	r11
    6304:	27 e0       	ldi	r18, 0x07	; 7
    6306:	09 c0       	rjmp	.+18     	; 0x631a <vfprintf+0x166>
    6308:	47 e0       	ldi	r20, 0x07	; 7
    630a:	49 15       	cp	r20, r9
    630c:	20 f4       	brcc	.+8      	; 0x6316 <vfprintf+0x162>
    630e:	bb 24       	eor	r11, r11
    6310:	47 e0       	ldi	r20, 0x07	; 7
    6312:	94 2e       	mov	r9, r20
    6314:	f7 cf       	rjmp	.-18     	; 0x6304 <vfprintf+0x150>
    6316:	29 2d       	mov	r18, r9
    6318:	bb 24       	eor	r11, r11
    631a:	c6 01       	movw	r24, r12
    631c:	04 96       	adiw	r24, 0x04	; 4
    631e:	9d 87       	std	Y+13, r25	; 0x0d
    6320:	8c 87       	std	Y+12, r24	; 0x0c
    6322:	f6 01       	movw	r30, r12
    6324:	60 81       	ld	r22, Z
    6326:	71 81       	ldd	r23, Z+1	; 0x01
    6328:	82 81       	ldd	r24, Z+2	; 0x02
    632a:	93 81       	ldd	r25, Z+3	; 0x03
    632c:	ae 01       	movw	r20, r28
    632e:	4f 5f       	subi	r20, 0xFF	; 255
    6330:	5f 4f       	sbci	r21, 0xFF	; 255
    6332:	0b 2d       	mov	r16, r11
    6334:	24 d4       	rcall	.+2120   	; 0x6b7e <__ftoa_engine>
    6336:	6c 01       	movw	r12, r24
    6338:	09 81       	ldd	r16, Y+1	; 0x01
    633a:	20 2e       	mov	r2, r16
    633c:	33 24       	eor	r3, r3
    633e:	00 ff       	sbrs	r16, 0
    6340:	04 c0       	rjmp	.+8      	; 0x634a <vfprintf+0x196>
    6342:	03 fd       	sbrc	r16, 3
    6344:	02 c0       	rjmp	.+4      	; 0x634a <vfprintf+0x196>
    6346:	1d e2       	ldi	r17, 0x2D	; 45
    6348:	09 c0       	rjmp	.+18     	; 0x635c <vfprintf+0x1a8>
    634a:	f1 fe       	sbrs	r15, 1
    634c:	02 c0       	rjmp	.+4      	; 0x6352 <vfprintf+0x19e>
    634e:	1b e2       	ldi	r17, 0x2B	; 43
    6350:	05 c0       	rjmp	.+10     	; 0x635c <vfprintf+0x1a8>
    6352:	f2 fc       	sbrc	r15, 2
    6354:	02 c0       	rjmp	.+4      	; 0x635a <vfprintf+0x1a6>
    6356:	10 e0       	ldi	r17, 0x00	; 0
    6358:	01 c0       	rjmp	.+2      	; 0x635c <vfprintf+0x1a8>
    635a:	10 e2       	ldi	r17, 0x20	; 32
    635c:	c1 01       	movw	r24, r2
    635e:	8c 70       	andi	r24, 0x0C	; 12
    6360:	90 70       	andi	r25, 0x00	; 0
    6362:	89 2b       	or	r24, r25
    6364:	a1 f1       	breq	.+104    	; 0x63ce <vfprintf+0x21a>
    6366:	11 23       	and	r17, r17
    6368:	11 f4       	brne	.+4      	; 0x636e <vfprintf+0x1ba>
    636a:	83 e0       	ldi	r24, 0x03	; 3
    636c:	01 c0       	rjmp	.+2      	; 0x6370 <vfprintf+0x1bc>
    636e:	84 e0       	ldi	r24, 0x04	; 4
    6370:	88 15       	cp	r24, r8
    6372:	10 f0       	brcs	.+4      	; 0x6378 <vfprintf+0x1c4>
    6374:	88 24       	eor	r8, r8
    6376:	09 c0       	rjmp	.+18     	; 0x638a <vfprintf+0x1d6>
    6378:	88 1a       	sub	r8, r24
    637a:	f3 fc       	sbrc	r15, 3
    637c:	06 c0       	rjmp	.+12     	; 0x638a <vfprintf+0x1d6>
    637e:	80 e2       	ldi	r24, 0x20	; 32
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	b3 01       	movw	r22, r6
    6384:	ea d4       	rcall	.+2516   	; 0x6d5a <fputc>
    6386:	8a 94       	dec	r8
    6388:	d1 f7       	brne	.-12     	; 0x637e <vfprintf+0x1ca>
    638a:	11 23       	and	r17, r17
    638c:	21 f0       	breq	.+8      	; 0x6396 <vfprintf+0x1e2>
    638e:	81 2f       	mov	r24, r17
    6390:	90 e0       	ldi	r25, 0x00	; 0
    6392:	b3 01       	movw	r22, r6
    6394:	e2 d4       	rcall	.+2500   	; 0x6d5a <fputc>
    6396:	23 fe       	sbrs	r2, 3
    6398:	03 c0       	rjmp	.+6      	; 0x63a0 <vfprintf+0x1ec>
    639a:	0f e5       	ldi	r16, 0x5F	; 95
    639c:	15 e0       	ldi	r17, 0x05	; 5
    639e:	0d c0       	rjmp	.+26     	; 0x63ba <vfprintf+0x206>
    63a0:	03 e6       	ldi	r16, 0x63	; 99
    63a2:	15 e0       	ldi	r17, 0x05	; 5
    63a4:	0a c0       	rjmp	.+20     	; 0x63ba <vfprintf+0x206>
    63a6:	e1 14       	cp	r14, r1
    63a8:	f1 04       	cpc	r15, r1
    63aa:	09 f0       	breq	.+2      	; 0x63ae <vfprintf+0x1fa>
    63ac:	80 52       	subi	r24, 0x20	; 32
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	b3 01       	movw	r22, r6
    63b2:	d3 d4       	rcall	.+2470   	; 0x6d5a <fputc>
    63b4:	0f 5f       	subi	r16, 0xFF	; 255
    63b6:	1f 4f       	sbci	r17, 0xFF	; 255
    63b8:	05 c0       	rjmp	.+10     	; 0x63c4 <vfprintf+0x210>
    63ba:	ef 2c       	mov	r14, r15
    63bc:	ff 24       	eor	r15, r15
    63be:	f0 e1       	ldi	r31, 0x10	; 16
    63c0:	ef 22       	and	r14, r31
    63c2:	ff 24       	eor	r15, r15
    63c4:	f8 01       	movw	r30, r16
    63c6:	84 91       	lpm	r24, Z+
    63c8:	88 23       	and	r24, r24
    63ca:	69 f7       	brne	.-38     	; 0x63a6 <vfprintf+0x1f2>
    63cc:	08 c1       	rjmp	.+528    	; 0x65de <vfprintf+0x42a>
    63ce:	f7 fe       	sbrs	r15, 7
    63d0:	12 c0       	rjmp	.+36     	; 0x63f6 <vfprintf+0x242>
    63d2:	bc 0c       	add	r11, r12
    63d4:	24 fe       	sbrs	r2, 4
    63d6:	04 c0       	rjmp	.+8      	; 0x63e0 <vfprintf+0x22c>
    63d8:	8a 81       	ldd	r24, Y+2	; 0x02
    63da:	81 33       	cpi	r24, 0x31	; 49
    63dc:	09 f4       	brne	.+2      	; 0x63e0 <vfprintf+0x22c>
    63de:	ba 94       	dec	r11
    63e0:	1b 14       	cp	r1, r11
    63e2:	1c f0       	brlt	.+6      	; 0x63ea <vfprintf+0x236>
    63e4:	bb 24       	eor	r11, r11
    63e6:	b3 94       	inc	r11
    63e8:	2d c0       	rjmp	.+90     	; 0x6444 <vfprintf+0x290>
    63ea:	f8 e0       	ldi	r31, 0x08	; 8
    63ec:	fb 15       	cp	r31, r11
    63ee:	50 f5       	brcc	.+84     	; 0x6444 <vfprintf+0x290>
    63f0:	38 e0       	ldi	r19, 0x08	; 8
    63f2:	b3 2e       	mov	r11, r19
    63f4:	27 c0       	rjmp	.+78     	; 0x6444 <vfprintf+0x290>
    63f6:	f6 fc       	sbrc	r15, 6
    63f8:	25 c0       	rjmp	.+74     	; 0x6444 <vfprintf+0x290>
    63fa:	89 2d       	mov	r24, r9
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	8c 15       	cp	r24, r12
    6400:	9d 05       	cpc	r25, r13
    6402:	4c f0       	brlt	.+18     	; 0x6416 <vfprintf+0x262>
    6404:	2c ef       	ldi	r18, 0xFC	; 252
    6406:	c2 16       	cp	r12, r18
    6408:	2f ef       	ldi	r18, 0xFF	; 255
    640a:	d2 06       	cpc	r13, r18
    640c:	24 f0       	brlt	.+8      	; 0x6416 <vfprintf+0x262>
    640e:	30 e8       	ldi	r19, 0x80	; 128
    6410:	f3 2a       	or	r15, r19
    6412:	01 c0       	rjmp	.+2      	; 0x6416 <vfprintf+0x262>
    6414:	9a 94       	dec	r9
    6416:	99 20       	and	r9, r9
    6418:	49 f0       	breq	.+18     	; 0x642c <vfprintf+0x278>
    641a:	e2 e0       	ldi	r30, 0x02	; 2
    641c:	f0 e0       	ldi	r31, 0x00	; 0
    641e:	ec 0f       	add	r30, r28
    6420:	fd 1f       	adc	r31, r29
    6422:	e9 0d       	add	r30, r9
    6424:	f1 1d       	adc	r31, r1
    6426:	80 81       	ld	r24, Z
    6428:	80 33       	cpi	r24, 0x30	; 48
    642a:	a1 f3       	breq	.-24     	; 0x6414 <vfprintf+0x260>
    642c:	f7 fe       	sbrs	r15, 7
    642e:	0a c0       	rjmp	.+20     	; 0x6444 <vfprintf+0x290>
    6430:	b9 2c       	mov	r11, r9
    6432:	b3 94       	inc	r11
    6434:	89 2d       	mov	r24, r9
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	c8 16       	cp	r12, r24
    643a:	d9 06       	cpc	r13, r25
    643c:	14 f0       	brlt	.+4      	; 0x6442 <vfprintf+0x28e>
    643e:	99 24       	eor	r9, r9
    6440:	01 c0       	rjmp	.+2      	; 0x6444 <vfprintf+0x290>
    6442:	9c 18       	sub	r9, r12
    6444:	f7 fc       	sbrc	r15, 7
    6446:	03 c0       	rjmp	.+6      	; 0x644e <vfprintf+0x29a>
    6448:	25 e0       	ldi	r18, 0x05	; 5
    644a:	30 e0       	ldi	r19, 0x00	; 0
    644c:	09 c0       	rjmp	.+18     	; 0x6460 <vfprintf+0x2ac>
    644e:	1c 14       	cp	r1, r12
    6450:	1d 04       	cpc	r1, r13
    6452:	1c f0       	brlt	.+6      	; 0x645a <vfprintf+0x2a6>
    6454:	21 e0       	ldi	r18, 0x01	; 1
    6456:	30 e0       	ldi	r19, 0x00	; 0
    6458:	03 c0       	rjmp	.+6      	; 0x6460 <vfprintf+0x2ac>
    645a:	96 01       	movw	r18, r12
    645c:	2f 5f       	subi	r18, 0xFF	; 255
    645e:	3f 4f       	sbci	r19, 0xFF	; 255
    6460:	11 23       	and	r17, r17
    6462:	11 f0       	breq	.+4      	; 0x6468 <vfprintf+0x2b4>
    6464:	2f 5f       	subi	r18, 0xFF	; 255
    6466:	3f 4f       	sbci	r19, 0xFF	; 255
    6468:	99 20       	and	r9, r9
    646a:	29 f0       	breq	.+10     	; 0x6476 <vfprintf+0x2c2>
    646c:	89 2d       	mov	r24, r9
    646e:	90 e0       	ldi	r25, 0x00	; 0
    6470:	01 96       	adiw	r24, 0x01	; 1
    6472:	28 0f       	add	r18, r24
    6474:	39 1f       	adc	r19, r25
    6476:	88 2d       	mov	r24, r8
    6478:	90 e0       	ldi	r25, 0x00	; 0
    647a:	28 17       	cp	r18, r24
    647c:	39 07       	cpc	r19, r25
    647e:	14 f0       	brlt	.+4      	; 0x6484 <vfprintf+0x2d0>
    6480:	88 24       	eor	r8, r8
    6482:	01 c0       	rjmp	.+2      	; 0x6486 <vfprintf+0x2d2>
    6484:	82 1a       	sub	r8, r18
    6486:	4f 2c       	mov	r4, r15
    6488:	55 24       	eor	r5, r5
    648a:	c2 01       	movw	r24, r4
    648c:	89 70       	andi	r24, 0x09	; 9
    648e:	90 70       	andi	r25, 0x00	; 0
    6490:	89 2b       	or	r24, r25
    6492:	31 f0       	breq	.+12     	; 0x64a0 <vfprintf+0x2ec>
    6494:	07 c0       	rjmp	.+14     	; 0x64a4 <vfprintf+0x2f0>
    6496:	80 e2       	ldi	r24, 0x20	; 32
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	b3 01       	movw	r22, r6
    649c:	5e d4       	rcall	.+2236   	; 0x6d5a <fputc>
    649e:	8a 94       	dec	r8
    64a0:	88 20       	and	r8, r8
    64a2:	c9 f7       	brne	.-14     	; 0x6496 <vfprintf+0x2e2>
    64a4:	11 23       	and	r17, r17
    64a6:	21 f0       	breq	.+8      	; 0x64b0 <vfprintf+0x2fc>
    64a8:	81 2f       	mov	r24, r17
    64aa:	90 e0       	ldi	r25, 0x00	; 0
    64ac:	b3 01       	movw	r22, r6
    64ae:	55 d4       	rcall	.+2218   	; 0x6d5a <fputc>
    64b0:	43 fe       	sbrs	r4, 3
    64b2:	06 c0       	rjmp	.+12     	; 0x64c0 <vfprintf+0x30c>
    64b4:	07 c0       	rjmp	.+14     	; 0x64c4 <vfprintf+0x310>
    64b6:	80 e3       	ldi	r24, 0x30	; 48
    64b8:	90 e0       	ldi	r25, 0x00	; 0
    64ba:	b3 01       	movw	r22, r6
    64bc:	4e d4       	rcall	.+2204   	; 0x6d5a <fputc>
    64be:	8a 94       	dec	r8
    64c0:	88 20       	and	r8, r8
    64c2:	c9 f7       	brne	.-14     	; 0x64b6 <vfprintf+0x302>
    64c4:	f7 fe       	sbrs	r15, 7
    64c6:	44 c0       	rjmp	.+136    	; 0x6550 <vfprintf+0x39c>
    64c8:	86 01       	movw	r16, r12
    64ca:	d7 fe       	sbrs	r13, 7
    64cc:	02 c0       	rjmp	.+4      	; 0x64d2 <vfprintf+0x31e>
    64ce:	00 e0       	ldi	r16, 0x00	; 0
    64d0:	10 e0       	ldi	r17, 0x00	; 0
    64d2:	76 01       	movw	r14, r12
    64d4:	08 94       	sec
    64d6:	e1 1c       	adc	r14, r1
    64d8:	f1 1c       	adc	r15, r1
    64da:	e0 1a       	sub	r14, r16
    64dc:	f1 0a       	sbc	r15, r17
    64de:	41 e0       	ldi	r20, 0x01	; 1
    64e0:	50 e0       	ldi	r21, 0x00	; 0
    64e2:	4c 0f       	add	r20, r28
    64e4:	5d 1f       	adc	r21, r29
    64e6:	e4 0e       	add	r14, r20
    64e8:	f5 1e       	adc	r15, r21
    64ea:	26 01       	movw	r4, r12
    64ec:	4b 18       	sub	r4, r11
    64ee:	51 08       	sbc	r5, r1
    64f0:	89 2d       	mov	r24, r9
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	aa 24       	eor	r10, r10
    64f6:	bb 24       	eor	r11, r11
    64f8:	a8 1a       	sub	r10, r24
    64fa:	b9 0a       	sbc	r11, r25
    64fc:	5f ef       	ldi	r21, 0xFF	; 255
    64fe:	0f 3f       	cpi	r16, 0xFF	; 255
    6500:	15 07       	cpc	r17, r21
    6502:	21 f4       	brne	.+8      	; 0x650c <vfprintf+0x358>
    6504:	8e e2       	ldi	r24, 0x2E	; 46
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	b3 01       	movw	r22, r6
    650a:	27 d4       	rcall	.+2126   	; 0x6d5a <fputc>
    650c:	c0 16       	cp	r12, r16
    650e:	d1 06       	cpc	r13, r17
    6510:	34 f0       	brlt	.+12     	; 0x651e <vfprintf+0x36a>
    6512:	40 16       	cp	r4, r16
    6514:	51 06       	cpc	r5, r17
    6516:	1c f4       	brge	.+6      	; 0x651e <vfprintf+0x36a>
    6518:	f7 01       	movw	r30, r14
    651a:	80 81       	ld	r24, Z
    651c:	01 c0       	rjmp	.+2      	; 0x6520 <vfprintf+0x36c>
    651e:	80 e3       	ldi	r24, 0x30	; 48
    6520:	01 50       	subi	r16, 0x01	; 1
    6522:	10 40       	sbci	r17, 0x00	; 0
    6524:	08 94       	sec
    6526:	e1 1c       	adc	r14, r1
    6528:	f1 1c       	adc	r15, r1
    652a:	0a 15       	cp	r16, r10
    652c:	1b 05       	cpc	r17, r11
    652e:	24 f0       	brlt	.+8      	; 0x6538 <vfprintf+0x384>
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	b3 01       	movw	r22, r6
    6534:	12 d4       	rcall	.+2084   	; 0x6d5a <fputc>
    6536:	e2 cf       	rjmp	.-60     	; 0x64fc <vfprintf+0x348>
    6538:	0c 15       	cp	r16, r12
    653a:	1d 05       	cpc	r17, r13
    653c:	39 f4       	brne	.+14     	; 0x654c <vfprintf+0x398>
    653e:	9a 81       	ldd	r25, Y+2	; 0x02
    6540:	96 33       	cpi	r25, 0x36	; 54
    6542:	18 f4       	brcc	.+6      	; 0x654a <vfprintf+0x396>
    6544:	95 33       	cpi	r25, 0x35	; 53
    6546:	11 f4       	brne	.+4      	; 0x654c <vfprintf+0x398>
    6548:	24 fe       	sbrs	r2, 4
    654a:	81 e3       	ldi	r24, 0x31	; 49
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	45 c0       	rjmp	.+138    	; 0x65da <vfprintf+0x426>
    6550:	8a 81       	ldd	r24, Y+2	; 0x02
    6552:	81 33       	cpi	r24, 0x31	; 49
    6554:	09 f0       	breq	.+2      	; 0x6558 <vfprintf+0x3a4>
    6556:	0f 7e       	andi	r16, 0xEF	; 239
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	b3 01       	movw	r22, r6
    655c:	fe d3       	rcall	.+2044   	; 0x6d5a <fputc>
    655e:	99 20       	and	r9, r9
    6560:	91 f0       	breq	.+36     	; 0x6586 <vfprintf+0x3d2>
    6562:	8e e2       	ldi	r24, 0x2E	; 46
    6564:	90 e0       	ldi	r25, 0x00	; 0
    6566:	b3 01       	movw	r22, r6
    6568:	f8 d3       	rcall	.+2032   	; 0x6d5a <fputc>
    656a:	12 e0       	ldi	r17, 0x02	; 2
    656c:	e1 e0       	ldi	r30, 0x01	; 1
    656e:	f0 e0       	ldi	r31, 0x00	; 0
    6570:	ec 0f       	add	r30, r28
    6572:	fd 1f       	adc	r31, r29
    6574:	e1 0f       	add	r30, r17
    6576:	f1 1d       	adc	r31, r1
    6578:	1f 5f       	subi	r17, 0xFF	; 255
    657a:	80 81       	ld	r24, Z
    657c:	90 e0       	ldi	r25, 0x00	; 0
    657e:	b3 01       	movw	r22, r6
    6580:	ec d3       	rcall	.+2008   	; 0x6d5a <fputc>
    6582:	9a 94       	dec	r9
    6584:	99 f7       	brne	.-26     	; 0x656c <vfprintf+0x3b8>
    6586:	44 fc       	sbrc	r4, 4
    6588:	03 c0       	rjmp	.+6      	; 0x6590 <vfprintf+0x3dc>
    658a:	85 e6       	ldi	r24, 0x65	; 101
    658c:	90 e0       	ldi	r25, 0x00	; 0
    658e:	02 c0       	rjmp	.+4      	; 0x6594 <vfprintf+0x3e0>
    6590:	85 e4       	ldi	r24, 0x45	; 69
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	b3 01       	movw	r22, r6
    6596:	e1 d3       	rcall	.+1986   	; 0x6d5a <fputc>
    6598:	d7 fc       	sbrc	r13, 7
    659a:	05 c0       	rjmp	.+10     	; 0x65a6 <vfprintf+0x3f2>
    659c:	c1 14       	cp	r12, r1
    659e:	d1 04       	cpc	r13, r1
    65a0:	41 f4       	brne	.+16     	; 0x65b2 <vfprintf+0x3fe>
    65a2:	04 ff       	sbrs	r16, 4
    65a4:	06 c0       	rjmp	.+12     	; 0x65b2 <vfprintf+0x3fe>
    65a6:	d0 94       	com	r13
    65a8:	c1 94       	neg	r12
    65aa:	d1 08       	sbc	r13, r1
    65ac:	d3 94       	inc	r13
    65ae:	8d e2       	ldi	r24, 0x2D	; 45
    65b0:	01 c0       	rjmp	.+2      	; 0x65b4 <vfprintf+0x400>
    65b2:	8b e2       	ldi	r24, 0x2B	; 43
    65b4:	90 e0       	ldi	r25, 0x00	; 0
    65b6:	b3 01       	movw	r22, r6
    65b8:	d0 d3       	rcall	.+1952   	; 0x6d5a <fputc>
    65ba:	80 e3       	ldi	r24, 0x30	; 48
    65bc:	05 c0       	rjmp	.+10     	; 0x65c8 <vfprintf+0x414>
    65be:	8f 5f       	subi	r24, 0xFF	; 255
    65c0:	26 ef       	ldi	r18, 0xF6	; 246
    65c2:	3f ef       	ldi	r19, 0xFF	; 255
    65c4:	c2 0e       	add	r12, r18
    65c6:	d3 1e       	adc	r13, r19
    65c8:	3a e0       	ldi	r19, 0x0A	; 10
    65ca:	c3 16       	cp	r12, r19
    65cc:	d1 04       	cpc	r13, r1
    65ce:	bc f7       	brge	.-18     	; 0x65be <vfprintf+0x40a>
    65d0:	90 e0       	ldi	r25, 0x00	; 0
    65d2:	b3 01       	movw	r22, r6
    65d4:	c2 d3       	rcall	.+1924   	; 0x6d5a <fputc>
    65d6:	c6 01       	movw	r24, r12
    65d8:	c0 96       	adiw	r24, 0x30	; 48
    65da:	b3 01       	movw	r22, r6
    65dc:	be d3       	rcall	.+1916   	; 0x6d5a <fputc>
    65de:	cc 84       	ldd	r12, Y+12	; 0x0c
    65e0:	dd 84       	ldd	r13, Y+13	; 0x0d
    65e2:	46 c1       	rjmp	.+652    	; 0x6870 <vfprintf+0x6bc>
    65e4:	93 36       	cpi	r25, 0x63	; 99
    65e6:	31 f0       	breq	.+12     	; 0x65f4 <vfprintf+0x440>
    65e8:	93 37       	cpi	r25, 0x73	; 115
    65ea:	99 f0       	breq	.+38     	; 0x6612 <vfprintf+0x45e>
    65ec:	93 35       	cpi	r25, 0x53	; 83
    65ee:	09 f0       	breq	.+2      	; 0x65f2 <vfprintf+0x43e>
    65f0:	55 c0       	rjmp	.+170    	; 0x669c <vfprintf+0x4e8>
    65f2:	22 c0       	rjmp	.+68     	; 0x6638 <vfprintf+0x484>
    65f4:	f6 01       	movw	r30, r12
    65f6:	80 81       	ld	r24, Z
    65f8:	89 83       	std	Y+1, r24	; 0x01
    65fa:	5e 01       	movw	r10, r28
    65fc:	08 94       	sec
    65fe:	a1 1c       	adc	r10, r1
    6600:	b1 1c       	adc	r11, r1
    6602:	22 e0       	ldi	r18, 0x02	; 2
    6604:	30 e0       	ldi	r19, 0x00	; 0
    6606:	c2 0e       	add	r12, r18
    6608:	d3 1e       	adc	r13, r19
    660a:	21 e0       	ldi	r18, 0x01	; 1
    660c:	e2 2e       	mov	r14, r18
    660e:	f1 2c       	mov	r15, r1
    6610:	11 c0       	rjmp	.+34     	; 0x6634 <vfprintf+0x480>
    6612:	f6 01       	movw	r30, r12
    6614:	a0 80       	ld	r10, Z
    6616:	b1 80       	ldd	r11, Z+1	; 0x01
    6618:	16 fd       	sbrc	r17, 6
    661a:	03 c0       	rjmp	.+6      	; 0x6622 <vfprintf+0x46e>
    661c:	6f ef       	ldi	r22, 0xFF	; 255
    661e:	7f ef       	ldi	r23, 0xFF	; 255
    6620:	02 c0       	rjmp	.+4      	; 0x6626 <vfprintf+0x472>
    6622:	69 2d       	mov	r22, r9
    6624:	70 e0       	ldi	r23, 0x00	; 0
    6626:	22 e0       	ldi	r18, 0x02	; 2
    6628:	30 e0       	ldi	r19, 0x00	; 0
    662a:	c2 0e       	add	r12, r18
    662c:	d3 1e       	adc	r13, r19
    662e:	c5 01       	movw	r24, r10
    6630:	89 d3       	rcall	.+1810   	; 0x6d44 <strnlen>
    6632:	7c 01       	movw	r14, r24
    6634:	1f 77       	andi	r17, 0x7F	; 127
    6636:	12 c0       	rjmp	.+36     	; 0x665c <vfprintf+0x4a8>
    6638:	f6 01       	movw	r30, r12
    663a:	a0 80       	ld	r10, Z
    663c:	b1 80       	ldd	r11, Z+1	; 0x01
    663e:	16 fd       	sbrc	r17, 6
    6640:	03 c0       	rjmp	.+6      	; 0x6648 <vfprintf+0x494>
    6642:	6f ef       	ldi	r22, 0xFF	; 255
    6644:	7f ef       	ldi	r23, 0xFF	; 255
    6646:	02 c0       	rjmp	.+4      	; 0x664c <vfprintf+0x498>
    6648:	69 2d       	mov	r22, r9
    664a:	70 e0       	ldi	r23, 0x00	; 0
    664c:	22 e0       	ldi	r18, 0x02	; 2
    664e:	30 e0       	ldi	r19, 0x00	; 0
    6650:	c2 0e       	add	r12, r18
    6652:	d3 1e       	adc	r13, r19
    6654:	c5 01       	movw	r24, r10
    6656:	6b d3       	rcall	.+1750   	; 0x6d2e <strnlen_P>
    6658:	7c 01       	movw	r14, r24
    665a:	10 68       	ori	r17, 0x80	; 128
    665c:	13 ff       	sbrs	r17, 3
    665e:	06 c0       	rjmp	.+12     	; 0x666c <vfprintf+0x4b8>
    6660:	19 c0       	rjmp	.+50     	; 0x6694 <vfprintf+0x4e0>
    6662:	80 e2       	ldi	r24, 0x20	; 32
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	b3 01       	movw	r22, r6
    6668:	78 d3       	rcall	.+1776   	; 0x6d5a <fputc>
    666a:	8a 94       	dec	r8
    666c:	88 2d       	mov	r24, r8
    666e:	90 e0       	ldi	r25, 0x00	; 0
    6670:	e8 16       	cp	r14, r24
    6672:	f9 06       	cpc	r15, r25
    6674:	b0 f3       	brcs	.-20     	; 0x6662 <vfprintf+0x4ae>
    6676:	0e c0       	rjmp	.+28     	; 0x6694 <vfprintf+0x4e0>
    6678:	f5 01       	movw	r30, r10
    667a:	17 fd       	sbrc	r17, 7
    667c:	85 91       	lpm	r24, Z+
    667e:	17 ff       	sbrs	r17, 7
    6680:	81 91       	ld	r24, Z+
    6682:	5f 01       	movw	r10, r30
    6684:	90 e0       	ldi	r25, 0x00	; 0
    6686:	b3 01       	movw	r22, r6
    6688:	68 d3       	rcall	.+1744   	; 0x6d5a <fputc>
    668a:	81 10       	cpse	r8, r1
    668c:	8a 94       	dec	r8
    668e:	08 94       	sec
    6690:	e1 08       	sbc	r14, r1
    6692:	f1 08       	sbc	r15, r1
    6694:	e1 14       	cp	r14, r1
    6696:	f1 04       	cpc	r15, r1
    6698:	79 f7       	brne	.-34     	; 0x6678 <vfprintf+0x4c4>
    669a:	ea c0       	rjmp	.+468    	; 0x6870 <vfprintf+0x6bc>
    669c:	94 36       	cpi	r25, 0x64	; 100
    669e:	11 f0       	breq	.+4      	; 0x66a4 <vfprintf+0x4f0>
    66a0:	99 36       	cpi	r25, 0x69	; 105
    66a2:	81 f5       	brne	.+96     	; 0x6704 <vfprintf+0x550>
    66a4:	17 ff       	sbrs	r17, 7
    66a6:	08 c0       	rjmp	.+16     	; 0x66b8 <vfprintf+0x504>
    66a8:	f6 01       	movw	r30, r12
    66aa:	20 81       	ld	r18, Z
    66ac:	31 81       	ldd	r19, Z+1	; 0x01
    66ae:	42 81       	ldd	r20, Z+2	; 0x02
    66b0:	53 81       	ldd	r21, Z+3	; 0x03
    66b2:	84 e0       	ldi	r24, 0x04	; 4
    66b4:	90 e0       	ldi	r25, 0x00	; 0
    66b6:	0a c0       	rjmp	.+20     	; 0x66cc <vfprintf+0x518>
    66b8:	f6 01       	movw	r30, r12
    66ba:	80 81       	ld	r24, Z
    66bc:	91 81       	ldd	r25, Z+1	; 0x01
    66be:	9c 01       	movw	r18, r24
    66c0:	44 27       	eor	r20, r20
    66c2:	37 fd       	sbrc	r19, 7
    66c4:	40 95       	com	r20
    66c6:	54 2f       	mov	r21, r20
    66c8:	82 e0       	ldi	r24, 0x02	; 2
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	c8 0e       	add	r12, r24
    66ce:	d9 1e       	adc	r13, r25
    66d0:	9f e6       	ldi	r25, 0x6F	; 111
    66d2:	f9 2e       	mov	r15, r25
    66d4:	f1 22       	and	r15, r17
    66d6:	57 ff       	sbrs	r21, 7
    66d8:	09 c0       	rjmp	.+18     	; 0x66ec <vfprintf+0x538>
    66da:	50 95       	com	r21
    66dc:	40 95       	com	r20
    66de:	30 95       	com	r19
    66e0:	21 95       	neg	r18
    66e2:	3f 4f       	sbci	r19, 0xFF	; 255
    66e4:	4f 4f       	sbci	r20, 0xFF	; 255
    66e6:	5f 4f       	sbci	r21, 0xFF	; 255
    66e8:	90 e8       	ldi	r25, 0x80	; 128
    66ea:	f9 2a       	or	r15, r25
    66ec:	ca 01       	movw	r24, r20
    66ee:	b9 01       	movw	r22, r18
    66f0:	ae 01       	movw	r20, r28
    66f2:	4f 5f       	subi	r20, 0xFF	; 255
    66f4:	5f 4f       	sbci	r21, 0xFF	; 255
    66f6:	2a e0       	ldi	r18, 0x0A	; 10
    66f8:	30 e0       	ldi	r19, 0x00	; 0
    66fa:	a2 d3       	rcall	.+1860   	; 0x6e40 <__ultoa_invert>
    66fc:	e8 2e       	mov	r14, r24
    66fe:	e8 89       	ldd	r30, Y+16	; 0x10
    6700:	ee 1a       	sub	r14, r30
    6702:	40 c0       	rjmp	.+128    	; 0x6784 <vfprintf+0x5d0>
    6704:	95 37       	cpi	r25, 0x75	; 117
    6706:	21 f4       	brne	.+8      	; 0x6710 <vfprintf+0x55c>
    6708:	1f 7e       	andi	r17, 0xEF	; 239
    670a:	2a e0       	ldi	r18, 0x0A	; 10
    670c:	30 e0       	ldi	r19, 0x00	; 0
    670e:	1c c0       	rjmp	.+56     	; 0x6748 <vfprintf+0x594>
    6710:	19 7f       	andi	r17, 0xF9	; 249
    6712:	9f 36       	cpi	r25, 0x6F	; 111
    6714:	61 f0       	breq	.+24     	; 0x672e <vfprintf+0x57a>
    6716:	90 37       	cpi	r25, 0x70	; 112
    6718:	20 f4       	brcc	.+8      	; 0x6722 <vfprintf+0x56e>
    671a:	98 35       	cpi	r25, 0x58	; 88
    671c:	09 f0       	breq	.+2      	; 0x6720 <vfprintf+0x56c>
    671e:	ab c0       	rjmp	.+342    	; 0x6876 <vfprintf+0x6c2>
    6720:	0f c0       	rjmp	.+30     	; 0x6740 <vfprintf+0x58c>
    6722:	90 37       	cpi	r25, 0x70	; 112
    6724:	39 f0       	breq	.+14     	; 0x6734 <vfprintf+0x580>
    6726:	98 37       	cpi	r25, 0x78	; 120
    6728:	09 f0       	breq	.+2      	; 0x672c <vfprintf+0x578>
    672a:	a5 c0       	rjmp	.+330    	; 0x6876 <vfprintf+0x6c2>
    672c:	04 c0       	rjmp	.+8      	; 0x6736 <vfprintf+0x582>
    672e:	28 e0       	ldi	r18, 0x08	; 8
    6730:	30 e0       	ldi	r19, 0x00	; 0
    6732:	0a c0       	rjmp	.+20     	; 0x6748 <vfprintf+0x594>
    6734:	10 61       	ori	r17, 0x10	; 16
    6736:	14 fd       	sbrc	r17, 4
    6738:	14 60       	ori	r17, 0x04	; 4
    673a:	20 e1       	ldi	r18, 0x10	; 16
    673c:	30 e0       	ldi	r19, 0x00	; 0
    673e:	04 c0       	rjmp	.+8      	; 0x6748 <vfprintf+0x594>
    6740:	14 fd       	sbrc	r17, 4
    6742:	16 60       	ori	r17, 0x06	; 6
    6744:	20 e1       	ldi	r18, 0x10	; 16
    6746:	32 e0       	ldi	r19, 0x02	; 2
    6748:	17 ff       	sbrs	r17, 7
    674a:	08 c0       	rjmp	.+16     	; 0x675c <vfprintf+0x5a8>
    674c:	f6 01       	movw	r30, r12
    674e:	60 81       	ld	r22, Z
    6750:	71 81       	ldd	r23, Z+1	; 0x01
    6752:	82 81       	ldd	r24, Z+2	; 0x02
    6754:	93 81       	ldd	r25, Z+3	; 0x03
    6756:	44 e0       	ldi	r20, 0x04	; 4
    6758:	50 e0       	ldi	r21, 0x00	; 0
    675a:	08 c0       	rjmp	.+16     	; 0x676c <vfprintf+0x5b8>
    675c:	f6 01       	movw	r30, r12
    675e:	80 81       	ld	r24, Z
    6760:	91 81       	ldd	r25, Z+1	; 0x01
    6762:	bc 01       	movw	r22, r24
    6764:	80 e0       	ldi	r24, 0x00	; 0
    6766:	90 e0       	ldi	r25, 0x00	; 0
    6768:	42 e0       	ldi	r20, 0x02	; 2
    676a:	50 e0       	ldi	r21, 0x00	; 0
    676c:	c4 0e       	add	r12, r20
    676e:	d5 1e       	adc	r13, r21
    6770:	ae 01       	movw	r20, r28
    6772:	4f 5f       	subi	r20, 0xFF	; 255
    6774:	5f 4f       	sbci	r21, 0xFF	; 255
    6776:	64 d3       	rcall	.+1736   	; 0x6e40 <__ultoa_invert>
    6778:	e8 2e       	mov	r14, r24
    677a:	58 89       	ldd	r21, Y+16	; 0x10
    677c:	e5 1a       	sub	r14, r21
    677e:	8f e7       	ldi	r24, 0x7F	; 127
    6780:	f8 2e       	mov	r15, r24
    6782:	f1 22       	and	r15, r17
    6784:	f6 fe       	sbrs	r15, 6
    6786:	0b c0       	rjmp	.+22     	; 0x679e <vfprintf+0x5ea>
    6788:	8e ef       	ldi	r24, 0xFE	; 254
    678a:	f8 22       	and	r15, r24
    678c:	e9 14       	cp	r14, r9
    678e:	38 f4       	brcc	.+14     	; 0x679e <vfprintf+0x5ea>
    6790:	f4 fe       	sbrs	r15, 4
    6792:	07 c0       	rjmp	.+14     	; 0x67a2 <vfprintf+0x5ee>
    6794:	f2 fc       	sbrc	r15, 2
    6796:	05 c0       	rjmp	.+10     	; 0x67a2 <vfprintf+0x5ee>
    6798:	9f ee       	ldi	r25, 0xEF	; 239
    679a:	f9 22       	and	r15, r25
    679c:	02 c0       	rjmp	.+4      	; 0x67a2 <vfprintf+0x5ee>
    679e:	1e 2d       	mov	r17, r14
    67a0:	01 c0       	rjmp	.+2      	; 0x67a4 <vfprintf+0x5f0>
    67a2:	19 2d       	mov	r17, r9
    67a4:	f4 fe       	sbrs	r15, 4
    67a6:	0d c0       	rjmp	.+26     	; 0x67c2 <vfprintf+0x60e>
    67a8:	fe 01       	movw	r30, r28
    67aa:	ee 0d       	add	r30, r14
    67ac:	f1 1d       	adc	r31, r1
    67ae:	80 81       	ld	r24, Z
    67b0:	80 33       	cpi	r24, 0x30	; 48
    67b2:	19 f4       	brne	.+6      	; 0x67ba <vfprintf+0x606>
    67b4:	e9 ee       	ldi	r30, 0xE9	; 233
    67b6:	fe 22       	and	r15, r30
    67b8:	08 c0       	rjmp	.+16     	; 0x67ca <vfprintf+0x616>
    67ba:	1f 5f       	subi	r17, 0xFF	; 255
    67bc:	f2 fe       	sbrs	r15, 2
    67be:	05 c0       	rjmp	.+10     	; 0x67ca <vfprintf+0x616>
    67c0:	03 c0       	rjmp	.+6      	; 0x67c8 <vfprintf+0x614>
    67c2:	8f 2d       	mov	r24, r15
    67c4:	86 78       	andi	r24, 0x86	; 134
    67c6:	09 f0       	breq	.+2      	; 0x67ca <vfprintf+0x616>
    67c8:	1f 5f       	subi	r17, 0xFF	; 255
    67ca:	0f 2d       	mov	r16, r15
    67cc:	f3 fc       	sbrc	r15, 3
    67ce:	13 c0       	rjmp	.+38     	; 0x67f6 <vfprintf+0x642>
    67d0:	f0 fe       	sbrs	r15, 0
    67d2:	0e c0       	rjmp	.+28     	; 0x67f0 <vfprintf+0x63c>
    67d4:	18 15       	cp	r17, r8
    67d6:	10 f0       	brcs	.+4      	; 0x67dc <vfprintf+0x628>
    67d8:	9e 2c       	mov	r9, r14
    67da:	0a c0       	rjmp	.+20     	; 0x67f0 <vfprintf+0x63c>
    67dc:	9e 2c       	mov	r9, r14
    67de:	98 0c       	add	r9, r8
    67e0:	91 1a       	sub	r9, r17
    67e2:	18 2d       	mov	r17, r8
    67e4:	05 c0       	rjmp	.+10     	; 0x67f0 <vfprintf+0x63c>
    67e6:	80 e2       	ldi	r24, 0x20	; 32
    67e8:	90 e0       	ldi	r25, 0x00	; 0
    67ea:	b3 01       	movw	r22, r6
    67ec:	b6 d2       	rcall	.+1388   	; 0x6d5a <fputc>
    67ee:	1f 5f       	subi	r17, 0xFF	; 255
    67f0:	18 15       	cp	r17, r8
    67f2:	c8 f3       	brcs	.-14     	; 0x67e6 <vfprintf+0x632>
    67f4:	04 c0       	rjmp	.+8      	; 0x67fe <vfprintf+0x64a>
    67f6:	18 15       	cp	r17, r8
    67f8:	10 f4       	brcc	.+4      	; 0x67fe <vfprintf+0x64a>
    67fa:	81 1a       	sub	r8, r17
    67fc:	01 c0       	rjmp	.+2      	; 0x6800 <vfprintf+0x64c>
    67fe:	88 24       	eor	r8, r8
    6800:	04 ff       	sbrs	r16, 4
    6802:	0e c0       	rjmp	.+28     	; 0x6820 <vfprintf+0x66c>
    6804:	80 e3       	ldi	r24, 0x30	; 48
    6806:	90 e0       	ldi	r25, 0x00	; 0
    6808:	b3 01       	movw	r22, r6
    680a:	a7 d2       	rcall	.+1358   	; 0x6d5a <fputc>
    680c:	02 ff       	sbrs	r16, 2
    680e:	1b c0       	rjmp	.+54     	; 0x6846 <vfprintf+0x692>
    6810:	01 fd       	sbrc	r16, 1
    6812:	03 c0       	rjmp	.+6      	; 0x681a <vfprintf+0x666>
    6814:	88 e7       	ldi	r24, 0x78	; 120
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	0e c0       	rjmp	.+28     	; 0x6836 <vfprintf+0x682>
    681a:	88 e5       	ldi	r24, 0x58	; 88
    681c:	90 e0       	ldi	r25, 0x00	; 0
    681e:	0b c0       	rjmp	.+22     	; 0x6836 <vfprintf+0x682>
    6820:	80 2f       	mov	r24, r16
    6822:	86 78       	andi	r24, 0x86	; 134
    6824:	81 f0       	breq	.+32     	; 0x6846 <vfprintf+0x692>
    6826:	01 ff       	sbrs	r16, 1
    6828:	02 c0       	rjmp	.+4      	; 0x682e <vfprintf+0x67a>
    682a:	8b e2       	ldi	r24, 0x2B	; 43
    682c:	01 c0       	rjmp	.+2      	; 0x6830 <vfprintf+0x67c>
    682e:	80 e2       	ldi	r24, 0x20	; 32
    6830:	f7 fc       	sbrc	r15, 7
    6832:	8d e2       	ldi	r24, 0x2D	; 45
    6834:	90 e0       	ldi	r25, 0x00	; 0
    6836:	b3 01       	movw	r22, r6
    6838:	90 d2       	rcall	.+1312   	; 0x6d5a <fputc>
    683a:	05 c0       	rjmp	.+10     	; 0x6846 <vfprintf+0x692>
    683c:	80 e3       	ldi	r24, 0x30	; 48
    683e:	90 e0       	ldi	r25, 0x00	; 0
    6840:	b3 01       	movw	r22, r6
    6842:	8b d2       	rcall	.+1302   	; 0x6d5a <fputc>
    6844:	9a 94       	dec	r9
    6846:	e9 14       	cp	r14, r9
    6848:	c8 f3       	brcs	.-14     	; 0x683c <vfprintf+0x688>
    684a:	ea 94       	dec	r14
    684c:	e1 e0       	ldi	r30, 0x01	; 1
    684e:	f0 e0       	ldi	r31, 0x00	; 0
    6850:	ec 0f       	add	r30, r28
    6852:	fd 1f       	adc	r31, r29
    6854:	ee 0d       	add	r30, r14
    6856:	f1 1d       	adc	r31, r1
    6858:	80 81       	ld	r24, Z
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	b3 01       	movw	r22, r6
    685e:	7d d2       	rcall	.+1274   	; 0x6d5a <fputc>
    6860:	ee 20       	and	r14, r14
    6862:	99 f7       	brne	.-26     	; 0x684a <vfprintf+0x696>
    6864:	05 c0       	rjmp	.+10     	; 0x6870 <vfprintf+0x6bc>
    6866:	80 e2       	ldi	r24, 0x20	; 32
    6868:	90 e0       	ldi	r25, 0x00	; 0
    686a:	b3 01       	movw	r22, r6
    686c:	76 d2       	rcall	.+1260   	; 0x6d5a <fputc>
    686e:	8a 94       	dec	r8
    6870:	88 20       	and	r8, r8
    6872:	c9 f7       	brne	.-14     	; 0x6866 <vfprintf+0x6b2>
    6874:	b6 cc       	rjmp	.-1684   	; 0x61e2 <vfprintf+0x2e>
    6876:	f3 01       	movw	r30, r6
    6878:	66 81       	ldd	r22, Z+6	; 0x06
    687a:	77 81       	ldd	r23, Z+7	; 0x07
    687c:	cb 01       	movw	r24, r22
    687e:	61 96       	adiw	r28, 0x11	; 17
    6880:	e2 e1       	ldi	r30, 0x12	; 18
    6882:	5d c0       	rjmp	.+186    	; 0x693e <__epilogue_restores__>

00006884 <__mulsi3>:
    6884:	62 9f       	mul	r22, r18
    6886:	d0 01       	movw	r26, r0
    6888:	73 9f       	mul	r23, r19
    688a:	f0 01       	movw	r30, r0
    688c:	82 9f       	mul	r24, r18
    688e:	e0 0d       	add	r30, r0
    6890:	f1 1d       	adc	r31, r1
    6892:	64 9f       	mul	r22, r20
    6894:	e0 0d       	add	r30, r0
    6896:	f1 1d       	adc	r31, r1
    6898:	92 9f       	mul	r25, r18
    689a:	f0 0d       	add	r31, r0
    689c:	83 9f       	mul	r24, r19
    689e:	f0 0d       	add	r31, r0
    68a0:	74 9f       	mul	r23, r20
    68a2:	f0 0d       	add	r31, r0
    68a4:	65 9f       	mul	r22, r21
    68a6:	f0 0d       	add	r31, r0
    68a8:	99 27       	eor	r25, r25
    68aa:	72 9f       	mul	r23, r18
    68ac:	b0 0d       	add	r27, r0
    68ae:	e1 1d       	adc	r30, r1
    68b0:	f9 1f       	adc	r31, r25
    68b2:	63 9f       	mul	r22, r19
    68b4:	b0 0d       	add	r27, r0
    68b6:	e1 1d       	adc	r30, r1
    68b8:	f9 1f       	adc	r31, r25
    68ba:	bd 01       	movw	r22, r26
    68bc:	cf 01       	movw	r24, r30
    68be:	11 24       	eor	r1, r1
    68c0:	08 95       	ret

000068c2 <__udivmodsi4>:
    68c2:	a1 e2       	ldi	r26, 0x21	; 33
    68c4:	1a 2e       	mov	r1, r26
    68c6:	aa 1b       	sub	r26, r26
    68c8:	bb 1b       	sub	r27, r27
    68ca:	fd 01       	movw	r30, r26
    68cc:	0d c0       	rjmp	.+26     	; 0x68e8 <__udivmodsi4_ep>

000068ce <__udivmodsi4_loop>:
    68ce:	aa 1f       	adc	r26, r26
    68d0:	bb 1f       	adc	r27, r27
    68d2:	ee 1f       	adc	r30, r30
    68d4:	ff 1f       	adc	r31, r31
    68d6:	a2 17       	cp	r26, r18
    68d8:	b3 07       	cpc	r27, r19
    68da:	e4 07       	cpc	r30, r20
    68dc:	f5 07       	cpc	r31, r21
    68de:	20 f0       	brcs	.+8      	; 0x68e8 <__udivmodsi4_ep>
    68e0:	a2 1b       	sub	r26, r18
    68e2:	b3 0b       	sbc	r27, r19
    68e4:	e4 0b       	sbc	r30, r20
    68e6:	f5 0b       	sbc	r31, r21

000068e8 <__udivmodsi4_ep>:
    68e8:	66 1f       	adc	r22, r22
    68ea:	77 1f       	adc	r23, r23
    68ec:	88 1f       	adc	r24, r24
    68ee:	99 1f       	adc	r25, r25
    68f0:	1a 94       	dec	r1
    68f2:	69 f7       	brne	.-38     	; 0x68ce <__udivmodsi4_loop>
    68f4:	60 95       	com	r22
    68f6:	70 95       	com	r23
    68f8:	80 95       	com	r24
    68fa:	90 95       	com	r25
    68fc:	9b 01       	movw	r18, r22
    68fe:	ac 01       	movw	r20, r24
    6900:	bd 01       	movw	r22, r26
    6902:	cf 01       	movw	r24, r30
    6904:	08 95       	ret

00006906 <__prologue_saves__>:
    6906:	2f 92       	push	r2
    6908:	3f 92       	push	r3
    690a:	4f 92       	push	r4
    690c:	5f 92       	push	r5
    690e:	6f 92       	push	r6
    6910:	7f 92       	push	r7
    6912:	8f 92       	push	r8
    6914:	9f 92       	push	r9
    6916:	af 92       	push	r10
    6918:	bf 92       	push	r11
    691a:	cf 92       	push	r12
    691c:	df 92       	push	r13
    691e:	ef 92       	push	r14
    6920:	ff 92       	push	r15
    6922:	0f 93       	push	r16
    6924:	1f 93       	push	r17
    6926:	cf 93       	push	r28
    6928:	df 93       	push	r29
    692a:	cd b7       	in	r28, 0x3d	; 61
    692c:	de b7       	in	r29, 0x3e	; 62
    692e:	ca 1b       	sub	r28, r26
    6930:	db 0b       	sbc	r29, r27
    6932:	0f b6       	in	r0, 0x3f	; 63
    6934:	f8 94       	cli
    6936:	de bf       	out	0x3e, r29	; 62
    6938:	0f be       	out	0x3f, r0	; 63
    693a:	cd bf       	out	0x3d, r28	; 61
    693c:	09 94       	ijmp

0000693e <__epilogue_restores__>:
    693e:	2a 88       	ldd	r2, Y+18	; 0x12
    6940:	39 88       	ldd	r3, Y+17	; 0x11
    6942:	48 88       	ldd	r4, Y+16	; 0x10
    6944:	5f 84       	ldd	r5, Y+15	; 0x0f
    6946:	6e 84       	ldd	r6, Y+14	; 0x0e
    6948:	7d 84       	ldd	r7, Y+13	; 0x0d
    694a:	8c 84       	ldd	r8, Y+12	; 0x0c
    694c:	9b 84       	ldd	r9, Y+11	; 0x0b
    694e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6950:	b9 84       	ldd	r11, Y+9	; 0x09
    6952:	c8 84       	ldd	r12, Y+8	; 0x08
    6954:	df 80       	ldd	r13, Y+7	; 0x07
    6956:	ee 80       	ldd	r14, Y+6	; 0x06
    6958:	fd 80       	ldd	r15, Y+5	; 0x05
    695a:	0c 81       	ldd	r16, Y+4	; 0x04
    695c:	1b 81       	ldd	r17, Y+3	; 0x03
    695e:	aa 81       	ldd	r26, Y+2	; 0x02
    6960:	b9 81       	ldd	r27, Y+1	; 0x01
    6962:	ce 0f       	add	r28, r30
    6964:	d1 1d       	adc	r29, r1
    6966:	0f b6       	in	r0, 0x3f	; 63
    6968:	f8 94       	cli
    696a:	de bf       	out	0x3e, r29	; 62
    696c:	0f be       	out	0x3f, r0	; 63
    696e:	cd bf       	out	0x3d, r28	; 61
    6970:	ed 01       	movw	r28, r26
    6972:	08 95       	ret

00006974 <malloc>:
    6974:	cf 93       	push	r28
    6976:	df 93       	push	r29
    6978:	bc 01       	movw	r22, r24
    697a:	82 30       	cpi	r24, 0x02	; 2
    697c:	91 05       	cpc	r25, r1
    697e:	10 f4       	brcc	.+4      	; 0x6984 <malloc+0x10>
    6980:	62 e0       	ldi	r22, 0x02	; 2
    6982:	70 e0       	ldi	r23, 0x00	; 0
    6984:	a0 91 8e 07 	lds	r26, 0x078E
    6988:	b0 91 8f 07 	lds	r27, 0x078F
    698c:	ed 01       	movw	r28, r26
    698e:	e0 e0       	ldi	r30, 0x00	; 0
    6990:	f0 e0       	ldi	r31, 0x00	; 0
    6992:	40 e0       	ldi	r20, 0x00	; 0
    6994:	50 e0       	ldi	r21, 0x00	; 0
    6996:	21 c0       	rjmp	.+66     	; 0x69da <malloc+0x66>
    6998:	88 81       	ld	r24, Y
    699a:	99 81       	ldd	r25, Y+1	; 0x01
    699c:	86 17       	cp	r24, r22
    699e:	97 07       	cpc	r25, r23
    69a0:	69 f4       	brne	.+26     	; 0x69bc <malloc+0x48>
    69a2:	8a 81       	ldd	r24, Y+2	; 0x02
    69a4:	9b 81       	ldd	r25, Y+3	; 0x03
    69a6:	30 97       	sbiw	r30, 0x00	; 0
    69a8:	19 f0       	breq	.+6      	; 0x69b0 <malloc+0x3c>
    69aa:	93 83       	std	Z+3, r25	; 0x03
    69ac:	82 83       	std	Z+2, r24	; 0x02
    69ae:	04 c0       	rjmp	.+8      	; 0x69b8 <malloc+0x44>
    69b0:	90 93 8f 07 	sts	0x078F, r25
    69b4:	80 93 8e 07 	sts	0x078E, r24
    69b8:	fe 01       	movw	r30, r28
    69ba:	34 c0       	rjmp	.+104    	; 0x6a24 <malloc+0xb0>
    69bc:	68 17       	cp	r22, r24
    69be:	79 07       	cpc	r23, r25
    69c0:	38 f4       	brcc	.+14     	; 0x69d0 <malloc+0x5c>
    69c2:	41 15       	cp	r20, r1
    69c4:	51 05       	cpc	r21, r1
    69c6:	19 f0       	breq	.+6      	; 0x69ce <malloc+0x5a>
    69c8:	84 17       	cp	r24, r20
    69ca:	95 07       	cpc	r25, r21
    69cc:	08 f4       	brcc	.+2      	; 0x69d0 <malloc+0x5c>
    69ce:	ac 01       	movw	r20, r24
    69d0:	fe 01       	movw	r30, r28
    69d2:	8a 81       	ldd	r24, Y+2	; 0x02
    69d4:	9b 81       	ldd	r25, Y+3	; 0x03
    69d6:	9c 01       	movw	r18, r24
    69d8:	e9 01       	movw	r28, r18
    69da:	20 97       	sbiw	r28, 0x00	; 0
    69dc:	e9 f6       	brne	.-70     	; 0x6998 <malloc+0x24>
    69de:	41 15       	cp	r20, r1
    69e0:	51 05       	cpc	r21, r1
    69e2:	a9 f1       	breq	.+106    	; 0x6a4e <malloc+0xda>
    69e4:	ca 01       	movw	r24, r20
    69e6:	86 1b       	sub	r24, r22
    69e8:	97 0b       	sbc	r25, r23
    69ea:	04 97       	sbiw	r24, 0x04	; 4
    69ec:	08 f4       	brcc	.+2      	; 0x69f0 <malloc+0x7c>
    69ee:	ba 01       	movw	r22, r20
    69f0:	e0 e0       	ldi	r30, 0x00	; 0
    69f2:	f0 e0       	ldi	r31, 0x00	; 0
    69f4:	2a c0       	rjmp	.+84     	; 0x6a4a <malloc+0xd6>
    69f6:	8d 91       	ld	r24, X+
    69f8:	9c 91       	ld	r25, X
    69fa:	11 97       	sbiw	r26, 0x01	; 1
    69fc:	84 17       	cp	r24, r20
    69fe:	95 07       	cpc	r25, r21
    6a00:	f9 f4       	brne	.+62     	; 0x6a40 <malloc+0xcc>
    6a02:	64 17       	cp	r22, r20
    6a04:	75 07       	cpc	r23, r21
    6a06:	81 f4       	brne	.+32     	; 0x6a28 <malloc+0xb4>
    6a08:	12 96       	adiw	r26, 0x02	; 2
    6a0a:	8d 91       	ld	r24, X+
    6a0c:	9c 91       	ld	r25, X
    6a0e:	13 97       	sbiw	r26, 0x03	; 3
    6a10:	30 97       	sbiw	r30, 0x00	; 0
    6a12:	19 f0       	breq	.+6      	; 0x6a1a <malloc+0xa6>
    6a14:	93 83       	std	Z+3, r25	; 0x03
    6a16:	82 83       	std	Z+2, r24	; 0x02
    6a18:	04 c0       	rjmp	.+8      	; 0x6a22 <malloc+0xae>
    6a1a:	90 93 8f 07 	sts	0x078F, r25
    6a1e:	80 93 8e 07 	sts	0x078E, r24
    6a22:	fd 01       	movw	r30, r26
    6a24:	32 96       	adiw	r30, 0x02	; 2
    6a26:	4f c0       	rjmp	.+158    	; 0x6ac6 <malloc+0x152>
    6a28:	ca 01       	movw	r24, r20
    6a2a:	86 1b       	sub	r24, r22
    6a2c:	97 0b       	sbc	r25, r23
    6a2e:	fd 01       	movw	r30, r26
    6a30:	e8 0f       	add	r30, r24
    6a32:	f9 1f       	adc	r31, r25
    6a34:	61 93       	st	Z+, r22
    6a36:	71 93       	st	Z+, r23
    6a38:	02 97       	sbiw	r24, 0x02	; 2
    6a3a:	8d 93       	st	X+, r24
    6a3c:	9c 93       	st	X, r25
    6a3e:	43 c0       	rjmp	.+134    	; 0x6ac6 <malloc+0x152>
    6a40:	fd 01       	movw	r30, r26
    6a42:	82 81       	ldd	r24, Z+2	; 0x02
    6a44:	93 81       	ldd	r25, Z+3	; 0x03
    6a46:	9c 01       	movw	r18, r24
    6a48:	d9 01       	movw	r26, r18
    6a4a:	10 97       	sbiw	r26, 0x00	; 0
    6a4c:	a1 f6       	brne	.-88     	; 0x69f6 <malloc+0x82>
    6a4e:	80 91 8c 07 	lds	r24, 0x078C
    6a52:	90 91 8d 07 	lds	r25, 0x078D
    6a56:	89 2b       	or	r24, r25
    6a58:	41 f4       	brne	.+16     	; 0x6a6a <malloc+0xf6>
    6a5a:	80 91 d6 03 	lds	r24, 0x03D6
    6a5e:	90 91 d7 03 	lds	r25, 0x03D7
    6a62:	90 93 8d 07 	sts	0x078D, r25
    6a66:	80 93 8c 07 	sts	0x078C, r24
    6a6a:	40 91 d8 03 	lds	r20, 0x03D8
    6a6e:	50 91 d9 03 	lds	r21, 0x03D9
    6a72:	41 15       	cp	r20, r1
    6a74:	51 05       	cpc	r21, r1
    6a76:	41 f4       	brne	.+16     	; 0x6a88 <malloc+0x114>
    6a78:	4d b7       	in	r20, 0x3d	; 61
    6a7a:	5e b7       	in	r21, 0x3e	; 62
    6a7c:	80 91 d4 03 	lds	r24, 0x03D4
    6a80:	90 91 d5 03 	lds	r25, 0x03D5
    6a84:	48 1b       	sub	r20, r24
    6a86:	59 0b       	sbc	r21, r25
    6a88:	20 91 8c 07 	lds	r18, 0x078C
    6a8c:	30 91 8d 07 	lds	r19, 0x078D
    6a90:	24 17       	cp	r18, r20
    6a92:	35 07       	cpc	r19, r21
    6a94:	b0 f4       	brcc	.+44     	; 0x6ac2 <malloc+0x14e>
    6a96:	ca 01       	movw	r24, r20
    6a98:	82 1b       	sub	r24, r18
    6a9a:	93 0b       	sbc	r25, r19
    6a9c:	86 17       	cp	r24, r22
    6a9e:	97 07       	cpc	r25, r23
    6aa0:	80 f0       	brcs	.+32     	; 0x6ac2 <malloc+0x14e>
    6aa2:	ab 01       	movw	r20, r22
    6aa4:	4e 5f       	subi	r20, 0xFE	; 254
    6aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    6aa8:	84 17       	cp	r24, r20
    6aaa:	95 07       	cpc	r25, r21
    6aac:	50 f0       	brcs	.+20     	; 0x6ac2 <malloc+0x14e>
    6aae:	42 0f       	add	r20, r18
    6ab0:	53 1f       	adc	r21, r19
    6ab2:	50 93 8d 07 	sts	0x078D, r21
    6ab6:	40 93 8c 07 	sts	0x078C, r20
    6aba:	f9 01       	movw	r30, r18
    6abc:	61 93       	st	Z+, r22
    6abe:	71 93       	st	Z+, r23
    6ac0:	02 c0       	rjmp	.+4      	; 0x6ac6 <malloc+0x152>
    6ac2:	e0 e0       	ldi	r30, 0x00	; 0
    6ac4:	f0 e0       	ldi	r31, 0x00	; 0
    6ac6:	cf 01       	movw	r24, r30
    6ac8:	df 91       	pop	r29
    6aca:	cf 91       	pop	r28
    6acc:	08 95       	ret

00006ace <free>:
    6ace:	cf 93       	push	r28
    6ad0:	df 93       	push	r29
    6ad2:	00 97       	sbiw	r24, 0x00	; 0
    6ad4:	09 f4       	brne	.+2      	; 0x6ad8 <free+0xa>
    6ad6:	50 c0       	rjmp	.+160    	; 0x6b78 <free+0xaa>
    6ad8:	ec 01       	movw	r28, r24
    6ada:	22 97       	sbiw	r28, 0x02	; 2
    6adc:	1b 82       	std	Y+3, r1	; 0x03
    6ade:	1a 82       	std	Y+2, r1	; 0x02
    6ae0:	a0 91 8e 07 	lds	r26, 0x078E
    6ae4:	b0 91 8f 07 	lds	r27, 0x078F
    6ae8:	10 97       	sbiw	r26, 0x00	; 0
    6aea:	09 f1       	breq	.+66     	; 0x6b2e <free+0x60>
    6aec:	40 e0       	ldi	r20, 0x00	; 0
    6aee:	50 e0       	ldi	r21, 0x00	; 0
    6af0:	ac 17       	cp	r26, r28
    6af2:	bd 07       	cpc	r27, r29
    6af4:	08 f1       	brcs	.+66     	; 0x6b38 <free+0x6a>
    6af6:	bb 83       	std	Y+3, r27	; 0x03
    6af8:	aa 83       	std	Y+2, r26	; 0x02
    6afa:	fe 01       	movw	r30, r28
    6afc:	21 91       	ld	r18, Z+
    6afe:	31 91       	ld	r19, Z+
    6b00:	e2 0f       	add	r30, r18
    6b02:	f3 1f       	adc	r31, r19
    6b04:	ae 17       	cp	r26, r30
    6b06:	bf 07       	cpc	r27, r31
    6b08:	79 f4       	brne	.+30     	; 0x6b28 <free+0x5a>
    6b0a:	8d 91       	ld	r24, X+
    6b0c:	9c 91       	ld	r25, X
    6b0e:	11 97       	sbiw	r26, 0x01	; 1
    6b10:	28 0f       	add	r18, r24
    6b12:	39 1f       	adc	r19, r25
    6b14:	2e 5f       	subi	r18, 0xFE	; 254
    6b16:	3f 4f       	sbci	r19, 0xFF	; 255
    6b18:	39 83       	std	Y+1, r19	; 0x01
    6b1a:	28 83       	st	Y, r18
    6b1c:	12 96       	adiw	r26, 0x02	; 2
    6b1e:	8d 91       	ld	r24, X+
    6b20:	9c 91       	ld	r25, X
    6b22:	13 97       	sbiw	r26, 0x03	; 3
    6b24:	9b 83       	std	Y+3, r25	; 0x03
    6b26:	8a 83       	std	Y+2, r24	; 0x02
    6b28:	41 15       	cp	r20, r1
    6b2a:	51 05       	cpc	r21, r1
    6b2c:	71 f4       	brne	.+28     	; 0x6b4a <free+0x7c>
    6b2e:	d0 93 8f 07 	sts	0x078F, r29
    6b32:	c0 93 8e 07 	sts	0x078E, r28
    6b36:	20 c0       	rjmp	.+64     	; 0x6b78 <free+0xaa>
    6b38:	12 96       	adiw	r26, 0x02	; 2
    6b3a:	8d 91       	ld	r24, X+
    6b3c:	9c 91       	ld	r25, X
    6b3e:	13 97       	sbiw	r26, 0x03	; 3
    6b40:	ad 01       	movw	r20, r26
    6b42:	00 97       	sbiw	r24, 0x00	; 0
    6b44:	11 f0       	breq	.+4      	; 0x6b4a <free+0x7c>
    6b46:	dc 01       	movw	r26, r24
    6b48:	d3 cf       	rjmp	.-90     	; 0x6af0 <free+0x22>
    6b4a:	fa 01       	movw	r30, r20
    6b4c:	d3 83       	std	Z+3, r29	; 0x03
    6b4e:	c2 83       	std	Z+2, r28	; 0x02
    6b50:	21 91       	ld	r18, Z+
    6b52:	31 91       	ld	r19, Z+
    6b54:	e2 0f       	add	r30, r18
    6b56:	f3 1f       	adc	r31, r19
    6b58:	ce 17       	cp	r28, r30
    6b5a:	df 07       	cpc	r29, r31
    6b5c:	69 f4       	brne	.+26     	; 0x6b78 <free+0xaa>
    6b5e:	88 81       	ld	r24, Y
    6b60:	99 81       	ldd	r25, Y+1	; 0x01
    6b62:	28 0f       	add	r18, r24
    6b64:	39 1f       	adc	r19, r25
    6b66:	2e 5f       	subi	r18, 0xFE	; 254
    6b68:	3f 4f       	sbci	r19, 0xFF	; 255
    6b6a:	fa 01       	movw	r30, r20
    6b6c:	31 83       	std	Z+1, r19	; 0x01
    6b6e:	20 83       	st	Z, r18
    6b70:	8a 81       	ldd	r24, Y+2	; 0x02
    6b72:	9b 81       	ldd	r25, Y+3	; 0x03
    6b74:	93 83       	std	Z+3, r25	; 0x03
    6b76:	82 83       	std	Z+2, r24	; 0x02
    6b78:	df 91       	pop	r29
    6b7a:	cf 91       	pop	r28
    6b7c:	08 95       	ret

00006b7e <__ftoa_engine>:
    6b7e:	28 30       	cpi	r18, 0x08	; 8
    6b80:	08 f0       	brcs	.+2      	; 0x6b84 <__ftoa_engine+0x6>
    6b82:	27 e0       	ldi	r18, 0x07	; 7
    6b84:	33 27       	eor	r19, r19
    6b86:	da 01       	movw	r26, r20
    6b88:	99 0f       	add	r25, r25
    6b8a:	31 1d       	adc	r19, r1
    6b8c:	87 fd       	sbrc	r24, 7
    6b8e:	91 60       	ori	r25, 0x01	; 1
    6b90:	00 96       	adiw	r24, 0x00	; 0
    6b92:	61 05       	cpc	r22, r1
    6b94:	71 05       	cpc	r23, r1
    6b96:	39 f4       	brne	.+14     	; 0x6ba6 <__ftoa_engine+0x28>
    6b98:	32 60       	ori	r19, 0x02	; 2
    6b9a:	2e 5f       	subi	r18, 0xFE	; 254
    6b9c:	3d 93       	st	X+, r19
    6b9e:	30 e3       	ldi	r19, 0x30	; 48
    6ba0:	2a 95       	dec	r18
    6ba2:	e1 f7       	brne	.-8      	; 0x6b9c <__ftoa_engine+0x1e>
    6ba4:	08 95       	ret
    6ba6:	9f 3f       	cpi	r25, 0xFF	; 255
    6ba8:	30 f0       	brcs	.+12     	; 0x6bb6 <__ftoa_engine+0x38>
    6baa:	80 38       	cpi	r24, 0x80	; 128
    6bac:	71 05       	cpc	r23, r1
    6bae:	61 05       	cpc	r22, r1
    6bb0:	09 f0       	breq	.+2      	; 0x6bb4 <__ftoa_engine+0x36>
    6bb2:	3c 5f       	subi	r19, 0xFC	; 252
    6bb4:	3c 5f       	subi	r19, 0xFC	; 252
    6bb6:	3d 93       	st	X+, r19
    6bb8:	91 30       	cpi	r25, 0x01	; 1
    6bba:	08 f0       	brcs	.+2      	; 0x6bbe <__ftoa_engine+0x40>
    6bbc:	80 68       	ori	r24, 0x80	; 128
    6bbe:	91 1d       	adc	r25, r1
    6bc0:	df 93       	push	r29
    6bc2:	cf 93       	push	r28
    6bc4:	1f 93       	push	r17
    6bc6:	0f 93       	push	r16
    6bc8:	ff 92       	push	r15
    6bca:	ef 92       	push	r14
    6bcc:	19 2f       	mov	r17, r25
    6bce:	98 7f       	andi	r25, 0xF8	; 248
    6bd0:	96 95       	lsr	r25
    6bd2:	e9 2f       	mov	r30, r25
    6bd4:	96 95       	lsr	r25
    6bd6:	96 95       	lsr	r25
    6bd8:	e9 0f       	add	r30, r25
    6bda:	ff 27       	eor	r31, r31
    6bdc:	ef 53       	subi	r30, 0x3F	; 63
    6bde:	fa 4f       	sbci	r31, 0xFA	; 250
    6be0:	99 27       	eor	r25, r25
    6be2:	33 27       	eor	r19, r19
    6be4:	ee 24       	eor	r14, r14
    6be6:	ff 24       	eor	r15, r15
    6be8:	a7 01       	movw	r20, r14
    6bea:	e7 01       	movw	r28, r14
    6bec:	05 90       	lpm	r0, Z+
    6bee:	08 94       	sec
    6bf0:	07 94       	ror	r0
    6bf2:	28 f4       	brcc	.+10     	; 0x6bfe <__ftoa_engine+0x80>
    6bf4:	36 0f       	add	r19, r22
    6bf6:	e7 1e       	adc	r14, r23
    6bf8:	f8 1e       	adc	r15, r24
    6bfa:	49 1f       	adc	r20, r25
    6bfc:	51 1d       	adc	r21, r1
    6bfe:	66 0f       	add	r22, r22
    6c00:	77 1f       	adc	r23, r23
    6c02:	88 1f       	adc	r24, r24
    6c04:	99 1f       	adc	r25, r25
    6c06:	06 94       	lsr	r0
    6c08:	a1 f7       	brne	.-24     	; 0x6bf2 <__ftoa_engine+0x74>
    6c0a:	05 90       	lpm	r0, Z+
    6c0c:	07 94       	ror	r0
    6c0e:	28 f4       	brcc	.+10     	; 0x6c1a <__ftoa_engine+0x9c>
    6c10:	e7 0e       	add	r14, r23
    6c12:	f8 1e       	adc	r15, r24
    6c14:	49 1f       	adc	r20, r25
    6c16:	56 1f       	adc	r21, r22
    6c18:	c1 1d       	adc	r28, r1
    6c1a:	77 0f       	add	r23, r23
    6c1c:	88 1f       	adc	r24, r24
    6c1e:	99 1f       	adc	r25, r25
    6c20:	66 1f       	adc	r22, r22
    6c22:	06 94       	lsr	r0
    6c24:	a1 f7       	brne	.-24     	; 0x6c0e <__ftoa_engine+0x90>
    6c26:	05 90       	lpm	r0, Z+
    6c28:	07 94       	ror	r0
    6c2a:	28 f4       	brcc	.+10     	; 0x6c36 <__ftoa_engine+0xb8>
    6c2c:	f8 0e       	add	r15, r24
    6c2e:	49 1f       	adc	r20, r25
    6c30:	56 1f       	adc	r21, r22
    6c32:	c7 1f       	adc	r28, r23
    6c34:	d1 1d       	adc	r29, r1
    6c36:	88 0f       	add	r24, r24
    6c38:	99 1f       	adc	r25, r25
    6c3a:	66 1f       	adc	r22, r22
    6c3c:	77 1f       	adc	r23, r23
    6c3e:	06 94       	lsr	r0
    6c40:	a1 f7       	brne	.-24     	; 0x6c2a <__ftoa_engine+0xac>
    6c42:	05 90       	lpm	r0, Z+
    6c44:	07 94       	ror	r0
    6c46:	20 f4       	brcc	.+8      	; 0x6c50 <__ftoa_engine+0xd2>
    6c48:	49 0f       	add	r20, r25
    6c4a:	56 1f       	adc	r21, r22
    6c4c:	c7 1f       	adc	r28, r23
    6c4e:	d8 1f       	adc	r29, r24
    6c50:	99 0f       	add	r25, r25
    6c52:	66 1f       	adc	r22, r22
    6c54:	77 1f       	adc	r23, r23
    6c56:	88 1f       	adc	r24, r24
    6c58:	06 94       	lsr	r0
    6c5a:	a9 f7       	brne	.-22     	; 0x6c46 <__ftoa_engine+0xc8>
    6c5c:	84 91       	lpm	r24, Z+
    6c5e:	10 95       	com	r17
    6c60:	17 70       	andi	r17, 0x07	; 7
    6c62:	41 f0       	breq	.+16     	; 0x6c74 <__ftoa_engine+0xf6>
    6c64:	d6 95       	lsr	r29
    6c66:	c7 95       	ror	r28
    6c68:	57 95       	ror	r21
    6c6a:	47 95       	ror	r20
    6c6c:	f7 94       	ror	r15
    6c6e:	e7 94       	ror	r14
    6c70:	1a 95       	dec	r17
    6c72:	c1 f7       	brne	.-16     	; 0x6c64 <__ftoa_engine+0xe6>
    6c74:	e7 e6       	ldi	r30, 0x67	; 103
    6c76:	f5 e0       	ldi	r31, 0x05	; 5
    6c78:	68 94       	set
    6c7a:	15 90       	lpm	r1, Z+
    6c7c:	15 91       	lpm	r17, Z+
    6c7e:	35 91       	lpm	r19, Z+
    6c80:	65 91       	lpm	r22, Z+
    6c82:	95 91       	lpm	r25, Z+
    6c84:	05 90       	lpm	r0, Z+
    6c86:	7f e2       	ldi	r23, 0x2F	; 47
    6c88:	73 95       	inc	r23
    6c8a:	e1 18       	sub	r14, r1
    6c8c:	f1 0a       	sbc	r15, r17
    6c8e:	43 0b       	sbc	r20, r19
    6c90:	56 0b       	sbc	r21, r22
    6c92:	c9 0b       	sbc	r28, r25
    6c94:	d0 09       	sbc	r29, r0
    6c96:	c0 f7       	brcc	.-16     	; 0x6c88 <__ftoa_engine+0x10a>
    6c98:	e1 0c       	add	r14, r1
    6c9a:	f1 1e       	adc	r15, r17
    6c9c:	43 1f       	adc	r20, r19
    6c9e:	56 1f       	adc	r21, r22
    6ca0:	c9 1f       	adc	r28, r25
    6ca2:	d0 1d       	adc	r29, r0
    6ca4:	7e f4       	brtc	.+30     	; 0x6cc4 <__ftoa_engine+0x146>
    6ca6:	70 33       	cpi	r23, 0x30	; 48
    6ca8:	11 f4       	brne	.+4      	; 0x6cae <__ftoa_engine+0x130>
    6caa:	8a 95       	dec	r24
    6cac:	e6 cf       	rjmp	.-52     	; 0x6c7a <__ftoa_engine+0xfc>
    6cae:	e8 94       	clt
    6cb0:	01 50       	subi	r16, 0x01	; 1
    6cb2:	30 f0       	brcs	.+12     	; 0x6cc0 <__ftoa_engine+0x142>
    6cb4:	08 0f       	add	r16, r24
    6cb6:	0a f4       	brpl	.+2      	; 0x6cba <__ftoa_engine+0x13c>
    6cb8:	00 27       	eor	r16, r16
    6cba:	02 17       	cp	r16, r18
    6cbc:	08 f4       	brcc	.+2      	; 0x6cc0 <__ftoa_engine+0x142>
    6cbe:	20 2f       	mov	r18, r16
    6cc0:	23 95       	inc	r18
    6cc2:	02 2f       	mov	r16, r18
    6cc4:	7a 33       	cpi	r23, 0x3A	; 58
    6cc6:	28 f0       	brcs	.+10     	; 0x6cd2 <__ftoa_engine+0x154>
    6cc8:	79 e3       	ldi	r23, 0x39	; 57
    6cca:	7d 93       	st	X+, r23
    6ccc:	2a 95       	dec	r18
    6cce:	e9 f7       	brne	.-6      	; 0x6cca <__ftoa_engine+0x14c>
    6cd0:	10 c0       	rjmp	.+32     	; 0x6cf2 <__ftoa_engine+0x174>
    6cd2:	7d 93       	st	X+, r23
    6cd4:	2a 95       	dec	r18
    6cd6:	89 f6       	brne	.-94     	; 0x6c7a <__ftoa_engine+0xfc>
    6cd8:	06 94       	lsr	r0
    6cda:	97 95       	ror	r25
    6cdc:	67 95       	ror	r22
    6cde:	37 95       	ror	r19
    6ce0:	17 95       	ror	r17
    6ce2:	17 94       	ror	r1
    6ce4:	e1 18       	sub	r14, r1
    6ce6:	f1 0a       	sbc	r15, r17
    6ce8:	43 0b       	sbc	r20, r19
    6cea:	56 0b       	sbc	r21, r22
    6cec:	c9 0b       	sbc	r28, r25
    6cee:	d0 09       	sbc	r29, r0
    6cf0:	98 f0       	brcs	.+38     	; 0x6d18 <__ftoa_engine+0x19a>
    6cf2:	23 95       	inc	r18
    6cf4:	7e 91       	ld	r23, -X
    6cf6:	73 95       	inc	r23
    6cf8:	7a 33       	cpi	r23, 0x3A	; 58
    6cfa:	08 f0       	brcs	.+2      	; 0x6cfe <__ftoa_engine+0x180>
    6cfc:	70 e3       	ldi	r23, 0x30	; 48
    6cfe:	7c 93       	st	X, r23
    6d00:	20 13       	cpse	r18, r16
    6d02:	b8 f7       	brcc	.-18     	; 0x6cf2 <__ftoa_engine+0x174>
    6d04:	7e 91       	ld	r23, -X
    6d06:	70 61       	ori	r23, 0x10	; 16
    6d08:	7d 93       	st	X+, r23
    6d0a:	30 f0       	brcs	.+12     	; 0x6d18 <__ftoa_engine+0x19a>
    6d0c:	83 95       	inc	r24
    6d0e:	71 e3       	ldi	r23, 0x31	; 49
    6d10:	7d 93       	st	X+, r23
    6d12:	70 e3       	ldi	r23, 0x30	; 48
    6d14:	2a 95       	dec	r18
    6d16:	e1 f7       	brne	.-8      	; 0x6d10 <__ftoa_engine+0x192>
    6d18:	11 24       	eor	r1, r1
    6d1a:	ef 90       	pop	r14
    6d1c:	ff 90       	pop	r15
    6d1e:	0f 91       	pop	r16
    6d20:	1f 91       	pop	r17
    6d22:	cf 91       	pop	r28
    6d24:	df 91       	pop	r29
    6d26:	99 27       	eor	r25, r25
    6d28:	87 fd       	sbrc	r24, 7
    6d2a:	90 95       	com	r25
    6d2c:	08 95       	ret

00006d2e <strnlen_P>:
    6d2e:	fc 01       	movw	r30, r24
    6d30:	05 90       	lpm	r0, Z+
    6d32:	61 50       	subi	r22, 0x01	; 1
    6d34:	70 40       	sbci	r23, 0x00	; 0
    6d36:	01 10       	cpse	r0, r1
    6d38:	d8 f7       	brcc	.-10     	; 0x6d30 <strnlen_P+0x2>
    6d3a:	80 95       	com	r24
    6d3c:	90 95       	com	r25
    6d3e:	8e 0f       	add	r24, r30
    6d40:	9f 1f       	adc	r25, r31
    6d42:	08 95       	ret

00006d44 <strnlen>:
    6d44:	fc 01       	movw	r30, r24
    6d46:	61 50       	subi	r22, 0x01	; 1
    6d48:	70 40       	sbci	r23, 0x00	; 0
    6d4a:	01 90       	ld	r0, Z+
    6d4c:	01 10       	cpse	r0, r1
    6d4e:	d8 f7       	brcc	.-10     	; 0x6d46 <strnlen+0x2>
    6d50:	80 95       	com	r24
    6d52:	90 95       	com	r25
    6d54:	8e 0f       	add	r24, r30
    6d56:	9f 1f       	adc	r25, r31
    6d58:	08 95       	ret

00006d5a <fputc>:
    6d5a:	0f 93       	push	r16
    6d5c:	1f 93       	push	r17
    6d5e:	cf 93       	push	r28
    6d60:	df 93       	push	r29
    6d62:	8c 01       	movw	r16, r24
    6d64:	eb 01       	movw	r28, r22
    6d66:	8b 81       	ldd	r24, Y+3	; 0x03
    6d68:	81 ff       	sbrs	r24, 1
    6d6a:	1b c0       	rjmp	.+54     	; 0x6da2 <fputc+0x48>
    6d6c:	82 ff       	sbrs	r24, 2
    6d6e:	0d c0       	rjmp	.+26     	; 0x6d8a <fputc+0x30>
    6d70:	2e 81       	ldd	r18, Y+6	; 0x06
    6d72:	3f 81       	ldd	r19, Y+7	; 0x07
    6d74:	8c 81       	ldd	r24, Y+4	; 0x04
    6d76:	9d 81       	ldd	r25, Y+5	; 0x05
    6d78:	28 17       	cp	r18, r24
    6d7a:	39 07       	cpc	r19, r25
    6d7c:	64 f4       	brge	.+24     	; 0x6d96 <fputc+0x3c>
    6d7e:	e8 81       	ld	r30, Y
    6d80:	f9 81       	ldd	r31, Y+1	; 0x01
    6d82:	01 93       	st	Z+, r16
    6d84:	f9 83       	std	Y+1, r31	; 0x01
    6d86:	e8 83       	st	Y, r30
    6d88:	06 c0       	rjmp	.+12     	; 0x6d96 <fputc+0x3c>
    6d8a:	e8 85       	ldd	r30, Y+8	; 0x08
    6d8c:	f9 85       	ldd	r31, Y+9	; 0x09
    6d8e:	80 2f       	mov	r24, r16
    6d90:	09 95       	icall
    6d92:	89 2b       	or	r24, r25
    6d94:	31 f4       	brne	.+12     	; 0x6da2 <fputc+0x48>
    6d96:	8e 81       	ldd	r24, Y+6	; 0x06
    6d98:	9f 81       	ldd	r25, Y+7	; 0x07
    6d9a:	01 96       	adiw	r24, 0x01	; 1
    6d9c:	9f 83       	std	Y+7, r25	; 0x07
    6d9e:	8e 83       	std	Y+6, r24	; 0x06
    6da0:	02 c0       	rjmp	.+4      	; 0x6da6 <fputc+0x4c>
    6da2:	0f ef       	ldi	r16, 0xFF	; 255
    6da4:	1f ef       	ldi	r17, 0xFF	; 255
    6da6:	c8 01       	movw	r24, r16
    6da8:	df 91       	pop	r29
    6daa:	cf 91       	pop	r28
    6dac:	1f 91       	pop	r17
    6dae:	0f 91       	pop	r16
    6db0:	08 95       	ret

00006db2 <printf>:
    6db2:	a0 e0       	ldi	r26, 0x00	; 0
    6db4:	b0 e0       	ldi	r27, 0x00	; 0
    6db6:	ee ed       	ldi	r30, 0xDE	; 222
    6db8:	f6 e3       	ldi	r31, 0x36	; 54
    6dba:	b5 cd       	rjmp	.-1174   	; 0x6926 <__prologue_saves__+0x20>
    6dbc:	fe 01       	movw	r30, r28
    6dbe:	35 96       	adiw	r30, 0x05	; 5
    6dc0:	61 91       	ld	r22, Z+
    6dc2:	71 91       	ld	r23, Z+
    6dc4:	80 91 92 07 	lds	r24, 0x0792
    6dc8:	90 91 93 07 	lds	r25, 0x0793
    6dcc:	af 01       	movw	r20, r30
    6dce:	f2 d9       	rcall	.-3100   	; 0x61b4 <vfprintf>
    6dd0:	20 96       	adiw	r28, 0x00	; 0
    6dd2:	e2 e0       	ldi	r30, 0x02	; 2
    6dd4:	c4 cd       	rjmp	.-1144   	; 0x695e <__epilogue_restores__+0x20>

00006dd6 <puts>:
    6dd6:	0f 93       	push	r16
    6dd8:	1f 93       	push	r17
    6dda:	cf 93       	push	r28
    6ddc:	df 93       	push	r29
    6dde:	8c 01       	movw	r16, r24
    6de0:	e0 91 92 07 	lds	r30, 0x0792
    6de4:	f0 91 93 07 	lds	r31, 0x0793
    6de8:	83 81       	ldd	r24, Z+3	; 0x03
    6dea:	81 ff       	sbrs	r24, 1
    6dec:	21 c0       	rjmp	.+66     	; 0x6e30 <puts+0x5a>
    6dee:	c0 e0       	ldi	r28, 0x00	; 0
    6df0:	d0 e0       	ldi	r29, 0x00	; 0
    6df2:	0d c0       	rjmp	.+26     	; 0x6e0e <puts+0x38>
    6df4:	e0 91 92 07 	lds	r30, 0x0792
    6df8:	f0 91 93 07 	lds	r31, 0x0793
    6dfc:	20 85       	ldd	r18, Z+8	; 0x08
    6dfe:	31 85       	ldd	r19, Z+9	; 0x09
    6e00:	bf 01       	movw	r22, r30
    6e02:	f9 01       	movw	r30, r18
    6e04:	09 95       	icall
    6e06:	89 2b       	or	r24, r25
    6e08:	11 f0       	breq	.+4      	; 0x6e0e <puts+0x38>
    6e0a:	cf ef       	ldi	r28, 0xFF	; 255
    6e0c:	df ef       	ldi	r29, 0xFF	; 255
    6e0e:	f8 01       	movw	r30, r16
    6e10:	81 91       	ld	r24, Z+
    6e12:	8f 01       	movw	r16, r30
    6e14:	88 23       	and	r24, r24
    6e16:	71 f7       	brne	.-36     	; 0x6df4 <puts+0x1e>
    6e18:	e0 91 92 07 	lds	r30, 0x0792
    6e1c:	f0 91 93 07 	lds	r31, 0x0793
    6e20:	20 85       	ldd	r18, Z+8	; 0x08
    6e22:	31 85       	ldd	r19, Z+9	; 0x09
    6e24:	8a e0       	ldi	r24, 0x0A	; 10
    6e26:	bf 01       	movw	r22, r30
    6e28:	f9 01       	movw	r30, r18
    6e2a:	09 95       	icall
    6e2c:	89 2b       	or	r24, r25
    6e2e:	11 f0       	breq	.+4      	; 0x6e34 <puts+0x5e>
    6e30:	cf ef       	ldi	r28, 0xFF	; 255
    6e32:	df ef       	ldi	r29, 0xFF	; 255
    6e34:	ce 01       	movw	r24, r28
    6e36:	df 91       	pop	r29
    6e38:	cf 91       	pop	r28
    6e3a:	1f 91       	pop	r17
    6e3c:	0f 91       	pop	r16
    6e3e:	08 95       	ret

00006e40 <__ultoa_invert>:
    6e40:	fa 01       	movw	r30, r20
    6e42:	aa 27       	eor	r26, r26
    6e44:	28 30       	cpi	r18, 0x08	; 8
    6e46:	51 f1       	breq	.+84     	; 0x6e9c <__ultoa_invert+0x5c>
    6e48:	20 31       	cpi	r18, 0x10	; 16
    6e4a:	81 f1       	breq	.+96     	; 0x6eac <__ultoa_invert+0x6c>
    6e4c:	e8 94       	clt
    6e4e:	6f 93       	push	r22
    6e50:	6e 7f       	andi	r22, 0xFE	; 254
    6e52:	6e 5f       	subi	r22, 0xFE	; 254
    6e54:	7f 4f       	sbci	r23, 0xFF	; 255
    6e56:	8f 4f       	sbci	r24, 0xFF	; 255
    6e58:	9f 4f       	sbci	r25, 0xFF	; 255
    6e5a:	af 4f       	sbci	r26, 0xFF	; 255
    6e5c:	b1 e0       	ldi	r27, 0x01	; 1
    6e5e:	3e d0       	rcall	.+124    	; 0x6edc <__ultoa_invert+0x9c>
    6e60:	b4 e0       	ldi	r27, 0x04	; 4
    6e62:	3c d0       	rcall	.+120    	; 0x6edc <__ultoa_invert+0x9c>
    6e64:	67 0f       	add	r22, r23
    6e66:	78 1f       	adc	r23, r24
    6e68:	89 1f       	adc	r24, r25
    6e6a:	9a 1f       	adc	r25, r26
    6e6c:	a1 1d       	adc	r26, r1
    6e6e:	68 0f       	add	r22, r24
    6e70:	79 1f       	adc	r23, r25
    6e72:	8a 1f       	adc	r24, r26
    6e74:	91 1d       	adc	r25, r1
    6e76:	a1 1d       	adc	r26, r1
    6e78:	6a 0f       	add	r22, r26
    6e7a:	71 1d       	adc	r23, r1
    6e7c:	81 1d       	adc	r24, r1
    6e7e:	91 1d       	adc	r25, r1
    6e80:	a1 1d       	adc	r26, r1
    6e82:	20 d0       	rcall	.+64     	; 0x6ec4 <__ultoa_invert+0x84>
    6e84:	09 f4       	brne	.+2      	; 0x6e88 <__ultoa_invert+0x48>
    6e86:	68 94       	set
    6e88:	3f 91       	pop	r19
    6e8a:	2a e0       	ldi	r18, 0x0A	; 10
    6e8c:	26 9f       	mul	r18, r22
    6e8e:	11 24       	eor	r1, r1
    6e90:	30 19       	sub	r19, r0
    6e92:	30 5d       	subi	r19, 0xD0	; 208
    6e94:	31 93       	st	Z+, r19
    6e96:	de f6       	brtc	.-74     	; 0x6e4e <__ultoa_invert+0xe>
    6e98:	cf 01       	movw	r24, r30
    6e9a:	08 95       	ret
    6e9c:	46 2f       	mov	r20, r22
    6e9e:	47 70       	andi	r20, 0x07	; 7
    6ea0:	40 5d       	subi	r20, 0xD0	; 208
    6ea2:	41 93       	st	Z+, r20
    6ea4:	b3 e0       	ldi	r27, 0x03	; 3
    6ea6:	0f d0       	rcall	.+30     	; 0x6ec6 <__ultoa_invert+0x86>
    6ea8:	c9 f7       	brne	.-14     	; 0x6e9c <__ultoa_invert+0x5c>
    6eaa:	f6 cf       	rjmp	.-20     	; 0x6e98 <__ultoa_invert+0x58>
    6eac:	46 2f       	mov	r20, r22
    6eae:	4f 70       	andi	r20, 0x0F	; 15
    6eb0:	40 5d       	subi	r20, 0xD0	; 208
    6eb2:	4a 33       	cpi	r20, 0x3A	; 58
    6eb4:	18 f0       	brcs	.+6      	; 0x6ebc <__ultoa_invert+0x7c>
    6eb6:	49 5d       	subi	r20, 0xD9	; 217
    6eb8:	31 fd       	sbrc	r19, 1
    6eba:	40 52       	subi	r20, 0x20	; 32
    6ebc:	41 93       	st	Z+, r20
    6ebe:	02 d0       	rcall	.+4      	; 0x6ec4 <__ultoa_invert+0x84>
    6ec0:	a9 f7       	brne	.-22     	; 0x6eac <__ultoa_invert+0x6c>
    6ec2:	ea cf       	rjmp	.-44     	; 0x6e98 <__ultoa_invert+0x58>
    6ec4:	b4 e0       	ldi	r27, 0x04	; 4
    6ec6:	a6 95       	lsr	r26
    6ec8:	97 95       	ror	r25
    6eca:	87 95       	ror	r24
    6ecc:	77 95       	ror	r23
    6ece:	67 95       	ror	r22
    6ed0:	ba 95       	dec	r27
    6ed2:	c9 f7       	brne	.-14     	; 0x6ec6 <__ultoa_invert+0x86>
    6ed4:	00 97       	sbiw	r24, 0x00	; 0
    6ed6:	61 05       	cpc	r22, r1
    6ed8:	71 05       	cpc	r23, r1
    6eda:	08 95       	ret
    6edc:	9b 01       	movw	r18, r22
    6ede:	ac 01       	movw	r20, r24
    6ee0:	0a 2e       	mov	r0, r26
    6ee2:	06 94       	lsr	r0
    6ee4:	57 95       	ror	r21
    6ee6:	47 95       	ror	r20
    6ee8:	37 95       	ror	r19
    6eea:	27 95       	ror	r18
    6eec:	ba 95       	dec	r27
    6eee:	c9 f7       	brne	.-14     	; 0x6ee2 <__ultoa_invert+0xa2>
    6ef0:	62 0f       	add	r22, r18
    6ef2:	73 1f       	adc	r23, r19
    6ef4:	84 1f       	adc	r24, r20
    6ef6:	95 1f       	adc	r25, r21
    6ef8:	a0 1d       	adc	r26, r0
    6efa:	08 95       	ret

00006efc <_exit>:
    6efc:	f8 94       	cli

00006efe <__stop_program>:
    6efe:	ff cf       	rjmp	.-2      	; 0x6efe <__stop_program>
