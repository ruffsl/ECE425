
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035e  00800100  00006f3a  00006fce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006f3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d2  0080045e  0080045e  0000732c  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  0000732c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000880  00000000  00000000  0000738c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001eda  00000000  00000000  00007c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004b5  00000000  00000000  00009ae6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c2e  00000000  00000000  00009f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000380  00000000  00000000  0000bbcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e33  00000000  00000000  0000bf4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001413  00000000  00000000  0000cd7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 5f 24 	jmp	0x48be	; 0x48be <__vector_4>
      14:	0c 94 88 24 	jmp	0x4910	; 0x4910 <__vector_5>
      18:	0c 94 b1 24 	jmp	0x4962	; 0x4962 <__vector_6>
      1c:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 40 23 	jmp	0x4680	; 0x4680 <__vector_9>
      28:	0c 94 69 23 	jmp	0x46d2	; 0x46d2 <__vector_10>
      2c:	0c 94 92 23 	jmp	0x4724	; 0x4724 <__vector_11>
      30:	0c 94 0d 24 	jmp	0x481a	; 0x481a <__vector_12>
      34:	0c 94 bb 23 	jmp	0x4776	; 0x4776 <__vector_13>
      38:	0c 94 e4 23 	jmp	0x47c8	; 0x47c8 <__vector_14>
      3c:	0c 94 36 24 	jmp	0x486c	; 0x486c <__vector_15>
      40:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__vector_16>
      44:	0c 94 ee 22 	jmp	0x45dc	; 0x45dc <__vector_17>
      48:	0c 94 17 23 	jmp	0x462e	; 0x462e <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	2a 20       	and	r2, r10
      7e:	2d 20       	and	r2, r13
      80:	30 20       	and	r3, r0
      82:	33 20       	and	r3, r3
      84:	3c 20       	and	r3, r12
      86:	36 20       	and	r3, r6
      88:	39 20       	and	r3, r9
      8a:	3f 20       	and	r3, r15
      8c:	42 20       	and	r4, r2
      8e:	45 20       	and	r4, r5
      90:	48 20       	and	r4, r8
      92:	4b 20       	and	r4, r11
      94:	4e 20       	and	r4, r14
      96:	51 20       	and	r5, r1
      98:	54 20       	and	r5, r4
      9a:	57 20       	and	r5, r7
      9c:	5a 20       	and	r5, r10
      9e:	5d 20       	and	r5, r13
      a0:	60 20       	and	r6, r0
      a2:	71 20       	and	r7, r1
      a4:	74 20       	and	r7, r4
      a6:	77 20       	and	r7, r7
      a8:	7a 20       	and	r7, r10
      aa:	83 20       	and	r8, r3
      ac:	7d 20       	and	r7, r13
      ae:	80 20       	and	r8, r0
      b0:	86 20       	and	r8, r6
      b2:	89 20       	and	r8, r9
      b4:	8c 20       	and	r8, r12
      b6:	8f 20       	and	r8, r15
      b8:	92 20       	and	r9, r2
      ba:	95 20       	and	r9, r5
      bc:	98 20       	and	r9, r8
      be:	9b 20       	and	r9, r11
      c0:	9e 20       	and	r9, r14
      c2:	a1 20       	and	r10, r1
      c4:	a4 20       	and	r10, r4
      c6:	a7 20       	and	r10, r7
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ea e3       	ldi	r30, 0x3A	; 58
     676:	ff e6       	ldi	r31, 0x6F	; 111
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	ae 35       	cpi	r26, 0x5E	; 94
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	ae e5       	ldi	r26, 0x5E	; 94
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a0 33       	cpi	r26, 0x30	; 48
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 7d 1a 	call	0x34fa	; 0x34fa <main>
     698:	0c 94 9b 37 	jmp	0x6f36	; 0x6f36 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 03 22 	call	0x4406	; 0x4406 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 29 22 	call	0x4452	; 0x4452 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 d7 21 	call	0x43ae	; 0x43ae <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 6f 22 	call	0x44de	; 0x44de <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 3b 1a 	call	0x3476	; 0x3476 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 1e 1a 	call	0x343c	; 0x343c <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 fa 04 	sts	0x04FA, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 db 20 	call	0x41b6	; 0x41b6 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 db 20 	call	0x41b6	; 0x41b6 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 db 20 	call	0x41b6	; 0x41b6 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 fa 04 	sts	0x04FA, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 db 20 	call	0x41b6	; 0x41b6 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 db 20 	call	0x41b6	; 0x41b6 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 db 20 	call	0x41b6	; 0x41b6 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 95 1b 	call	0x372a	; 0x372a <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 80 1b 	call	0x3700	; 0x3700 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 80 1b 	call	0x3700	; 0x3700 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 95 1b 	call	0x372a	; 0x372a <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 80 1b 	call	0x3700	; 0x3700 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 80 1b 	call	0x3700	; 0x3700 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 95 1b 	call	0x372a	; 0x372a <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 95 1b 	call	0x372a	; 0x372a <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 80 1b 	call	0x3700	; 0x3700 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 80 1b 	call	0x3700	; 0x3700 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	8d e6       	ldi	r24, 0x6D	; 109
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	a0 e9       	ldi	r26, 0x90	; 144
     c56:	b7 e0       	ldi	r27, 0x07	; 7
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e8 e8       	ldi	r30, 0x88	; 136
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	85 ef       	ldi	r24, 0xF5	; 245
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 18 07 	lds	r10, 0x0718
     c9e:	b0 90 19 07 	lds	r11, 0x0719
     ca2:	c0 90 1a 07 	lds	r12, 0x071A
     ca6:	d0 90 1b 07 	lds	r13, 0x071B
			rtIR_old[i] = rtIR;
     caa:	e0 90 1c 07 	lds	r14, 0x071C
     cae:	f0 90 1d 07 	lds	r15, 0x071D
     cb2:	00 91 1e 07 	lds	r16, 0x071E
     cb6:	10 91 1f 07 	lds	r17, 0x071F
			ftIR_old[i] = ftIR;
     cba:	20 90 75 05 	lds	r2, 0x0575
     cbe:	30 90 76 05 	lds	r3, 0x0576
     cc2:	40 90 77 05 	lds	r4, 0x0577
     cc6:	50 90 78 05 	lds	r5, 0x0578
			bkIR_old[i] = bkIR;
     cca:	20 91 7f 05 	lds	r18, 0x057F
     cce:	30 91 80 05 	lds	r19, 0x0580
     cd2:	40 91 81 05 	lds	r20, 0x0581
     cd6:	50 91 82 05 	lds	r21, 0x0582
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e3 50       	subi	r30, 0x03	; 3
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e0 5e       	subi	r30, 0xE0	; 224
     cf0:	f8 4f       	sbci	r31, 0xF8	; 248
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e8 5e       	subi	r30, 0xE8	; 232
     cfe:	f9 4f       	sbci	r31, 0xF9	; 249
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	eb 57       	subi	r30, 0x7B	; 123
     d0c:	fa 4f       	sbci	r31, 0xFA	; 250
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a5 5f       	subi	r26, 0xF5	; 245
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 18 07 	lds	r24, 0x0718
     e0c:	90 91 19 07 	lds	r25, 0x0719
     e10:	a0 91 1a 07 	lds	r26, 0x071A
     e14:	b0 91 1b 07 	lds	r27, 0x071B
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 1c 07 	lds	r24, 0x071C
     e28:	90 91 1d 07 	lds	r25, 0x071D
     e2c:	a0 91 1e 07 	lds	r26, 0x071E
     e30:	b0 91 1f 07 	lds	r27, 0x071F
     e34:	80 93 20 07 	sts	0x0720, r24
     e38:	90 93 21 07 	sts	0x0721, r25
     e3c:	a0 93 22 07 	sts	0x0722, r26
     e40:	b0 93 23 07 	sts	0x0723, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 75 05 	lds	r24, 0x0575
     e48:	90 91 76 05 	lds	r25, 0x0576
     e4c:	a0 91 77 05 	lds	r26, 0x0577
     e50:	b0 91 78 05 	lds	r27, 0x0578
     e54:	80 93 18 06 	sts	0x0618, r24
     e58:	90 93 19 06 	sts	0x0619, r25
     e5c:	a0 93 1a 06 	sts	0x061A, r26
     e60:	b0 93 1b 06 	sts	0x061B, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 7f 05 	lds	r24, 0x057F
     e68:	90 91 80 05 	lds	r25, 0x0580
     e6c:	a0 91 81 05 	lds	r26, 0x0581
     e70:	b0 91 82 05 	lds	r27, 0x0582
     e74:	80 93 85 05 	sts	0x0585, r24
     e78:	90 93 86 05 	sts	0x0586, r25
     e7c:	a0 93 87 05 	sts	0x0587, r26
     e80:	b0 93 88 05 	sts	0x0588, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
     e94:	60 93 18 07 	sts	0x0718, r22
     e98:	70 93 19 07 	sts	0x0719, r23
     e9c:	80 93 1a 07 	sts	0x071A, r24
     ea0:	90 93 1b 07 	sts	0x071B, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
     eb8:	60 93 1c 07 	sts	0x071C, r22
     ebc:	70 93 1d 07 	sts	0x071D, r23
     ec0:	80 93 1e 07 	sts	0x071E, r24
     ec4:	90 93 1f 07 	sts	0x071F, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
     edc:	60 93 75 05 	sts	0x0575, r22
     ee0:	70 93 76 05 	sts	0x0576, r23
     ee4:	80 93 77 05 	sts	0x0577, r24
     ee8:	90 93 78 05 	sts	0x0578, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
     f00:	60 93 7f 05 	sts	0x057F, r22
     f04:	70 93 80 05 	sts	0x0580, r23
     f08:	80 93 81 05 	sts	0x0581, r24
     f0c:	90 93 82 05 	sts	0x0582, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 79 05 	sts	0x0579, r24
     f66:	90 93 7a 05 	sts	0x057A, r25
     f6a:	a0 93 7b 05 	sts	0x057B, r26
     f6e:	b0 93 7c 05 	sts	0x057C, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 79 05 	lds	r18, 0x0579
     f7a:	30 91 7a 05 	lds	r19, 0x057A
     f7e:	40 91 7b 05 	lds	r20, 0x057B
     f82:	50 91 7c 05 	lds	r21, 0x057C
     f86:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 79 05 	sts	0x0579, r22
     f92:	70 93 7a 05 	sts	0x057A, r23
     f96:	80 93 7b 05 	sts	0x057B, r24
     f9a:	90 93 7c 05 	sts	0x057C, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 14 06 	lds	r18, 0x0614
     fa6:	30 91 15 06 	lds	r19, 0x0615
     faa:	40 91 16 06 	lds	r20, 0x0616
     fae:	50 91 17 06 	lds	r21, 0x0617
     fb2:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__subsf3>
     fb6:	2d ec       	ldi	r18, 0xCD	; 205
     fb8:	3c ec       	ldi	r19, 0xCC	; 204
     fba:	4c ec       	ldi	r20, 0xCC	; 204
     fbc:	5d e3       	ldi	r21, 0x3D	; 61
     fbe:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ee 5c       	subi	r30, 0xCE	; 206
    100c:	fd 4f       	sbci	r31, 0xFD	; 253
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ee 5b       	subi	r30, 0xBE	; 190
    101e:	fd 4f       	sbci	r31, 0xFD	; 253
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    1032:	60 91 75 05 	lds	r22, 0x0575
    1036:	70 91 76 05 	lds	r23, 0x0576
    103a:	80 91 77 05 	lds	r24, 0x0577
    103e:	90 91 78 05 	lds	r25, 0x0578
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    104e:	f8 2e       	mov	r15, r24
    1050:	ff 1c       	adc	r15, r15
    1052:	ff 24       	eor	r15, r15
    1054:	ff 1c       	adc	r15, r15
    1056:	ff 0c       	add	r15, r15
    1058:	ff 0c       	add	r15, r15
    105a:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    105c:	60 91 18 07 	lds	r22, 0x0718
    1060:	70 91 19 07 	lds	r23, 0x0719
    1064:	80 91 1a 07 	lds	r24, 0x071A
    1068:	90 91 1b 07 	lds	r25, 0x071B
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 ef       	ldi	r20, 0xF0	; 240
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    1078:	08 2f       	mov	r16, r24
    107a:	00 1f       	adc	r16, r16
    107c:	00 27       	eor	r16, r16
    107e:	00 1f       	adc	r16, r16
    1080:	00 0f       	add	r16, r16
    1082:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    1084:	60 91 7f 05 	lds	r22, 0x057F
    1088:	70 91 80 05 	lds	r23, 0x0580
    108c:	80 91 81 05 	lds	r24, 0x0581
    1090:	90 91 82 05 	lds	r25, 0x0582
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4c e0       	ldi	r20, 0x0C	; 12
    109a:	52 e4       	ldi	r21, 0x42	; 66
    109c:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    10a0:	18 2f       	mov	r17, r24
    10a2:	11 1f       	adc	r17, r17
    10a4:	11 27       	eor	r17, r17
    10a6:	11 1f       	adc	r17, r17
    10a8:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    10aa:	ee 24       	eor	r14, r14
    10ac:	60 91 1c 07 	lds	r22, 0x071C
    10b0:	70 91 1d 07 	lds	r23, 0x071D
    10b4:	80 91 1e 07 	lds	r24, 0x071E
    10b8:	90 91 1f 07 	lds	r25, 0x071F
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 ef       	ldi	r20, 0xF0	; 240
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	14 f4       	brge	.+4      	; 0x10d0 <checkWorld+0xa6>
    10cc:	ee 24       	eor	r14, r14
    10ce:	e3 94       	inc	r14
    10d0:	8f 2d       	mov	r24, r15
    10d2:	8e 0d       	add	r24, r14
    10d4:	80 0f       	add	r24, r16
    10d6:	81 0f       	add	r24, r17
    10d8:	80 93 7d 05 	sts	0x057D, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    10dc:	20 91 7e 05 	lds	r18, 0x057E
    10e0:	e2 2f       	mov	r30, r18
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	e8 56       	subi	r30, 0x68	; 104
    10e6:	f8 4f       	sbci	r31, 0xF8	; 248
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	90 93 84 05 	sts	0x0584, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    10ee:	89 17       	cp	r24, r25
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <checkWorld+0xce>
		currentMoveWorld += 1;
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	20 93 7e 05 	sts	0x057E, r18
	}
}
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	08 95       	ret

00001102 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    1102:	ff 92       	push	r15
    1104:	0f 93       	push	r16
    1106:	1f 93       	push	r17
    1108:	cf 93       	push	r28
    110a:	df 93       	push	r29
    110c:	ff 24       	eor	r15, r15
    110e:	f3 94       	inc	r15
    1110:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1112:	c4 e2       	ldi	r28, 0x24	; 36
    1114:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    1116:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    111a:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	21 f0       	breq	.+8      	; 0x1128 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1120:	82 30       	cpi	r24, 0x02	; 2
    1122:	11 f0       	breq	.+4      	; 0x1128 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    1124:	83 30       	cpi	r24, 0x03	; 3
    1126:	39 f4       	brne	.+14     	; 0x1136 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    1128:	e1 2f       	mov	r30, r17
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	ef 5f       	subi	r30, 0xFF	; 255
    112e:	f9 4f       	sbci	r31, 0xF9	; 249
    1130:	00 83       	st	Z, r16
			i++;
    1132:	1f 5f       	subi	r17, 0xFF	; 255
    1134:	02 c0       	rjmp	.+4      	; 0x113a <movesInput+0x38>
		}

		if (btnHolder != 0){
    1136:	88 23       	and	r24, r24
    1138:	21 f1       	breq	.+72     	; 0x1182 <movesInput+0x80>
			LCD_clear();
    113a:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    113e:	8d b7       	in	r24, 0x3d	; 61
    1140:	9e b7       	in	r25, 0x3e	; 62
    1142:	08 97       	sbiw	r24, 0x08	; 8
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	9e bf       	out	0x3e, r25	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	8d bf       	out	0x3d, r24	; 61
    114e:	ed b7       	in	r30, 0x3d	; 61
    1150:	fe b7       	in	r31, 0x3e	; 62
    1152:	31 96       	adiw	r30, 0x01	; 1
    1154:	ad b7       	in	r26, 0x3d	; 61
    1156:	be b7       	in	r27, 0x3e	; 62
    1158:	12 96       	adiw	r26, 0x02	; 2
    115a:	dc 93       	st	X, r29
    115c:	ce 93       	st	-X, r28
    115e:	11 97       	sbiw	r26, 0x01	; 1
    1160:	f2 82       	std	Z+2, r15	; 0x02
    1162:	13 82       	std	Z+3, r1	; 0x03
    1164:	04 83       	std	Z+4, r16	; 0x04
    1166:	15 82       	std	Z+5, r1	; 0x05
    1168:	16 83       	std	Z+6, r17	; 0x06
    116a:	17 82       	std	Z+7, r1	; 0x07
    116c:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
    1170:	f0 2e       	mov	r15, r16
    1172:	8d b7       	in	r24, 0x3d	; 61
    1174:	9e b7       	in	r25, 0x3e	; 62
    1176:	08 96       	adiw	r24, 0x08	; 8
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	9e bf       	out	0x3e, r25	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1182:	84 ef       	ldi	r24, 0xF4	; 244
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    118a:	1b 30       	cpi	r17, 0x0B	; 11
    118c:	20 f2       	brcs	.-120    	; 0x1116 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    118e:	1f 5f       	subi	r17, 0xFF	; 255
    1190:	e1 2f       	mov	r30, r17
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	ef 5f       	subi	r30, 0xFF	; 255
    1196:	f9 4f       	sbci	r31, 0xF9	; 249
    1198:	84 e0       	ldi	r24, 0x04	; 4
    119a:	80 83       	st	Z, r24
}
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	08 95       	ret

000011a8 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    11b0:	c5 e5       	ldi	r28, 0x55	; 85
    11b2:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    11b4:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	21 f4       	brne	.+8      	; 0x11c4 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    11bc:	80 91 14 07 	lds	r24, 0x0714
    11c0:	88 0f       	add	r24, r24
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    11c4:	82 30       	cpi	r24, 0x02	; 2
    11c6:	39 f4       	brne	.+14     	; 0x11d6 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    11c8:	80 91 14 07 	lds	r24, 0x0714
    11cc:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    11ce:	8f 5f       	subi	r24, 0xFF	; 255
    11d0:	80 93 14 07 	sts	0x0714, r24
			i++;
    11d4:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    11d6:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    11da:	00 d0       	rcall	.+0      	; 0x11dc <worldInput+0x34>
    11dc:	00 d0       	rcall	.+0      	; 0x11de <worldInput+0x36>
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <worldInput+0x38>
    11e0:	ed b7       	in	r30, 0x3d	; 61
    11e2:	fe b7       	in	r31, 0x3e	; 62
    11e4:	31 96       	adiw	r30, 0x01	; 1
    11e6:	ad b7       	in	r26, 0x3d	; 61
    11e8:	be b7       	in	r27, 0x3e	; 62
    11ea:	12 96       	adiw	r26, 0x02	; 2
    11ec:	dc 93       	st	X, r29
    11ee:	ce 93       	st	-X, r28
    11f0:	11 97       	sbiw	r26, 0x01	; 1
    11f2:	80 91 14 07 	lds	r24, 0x0714
    11f6:	82 83       	std	Z+2, r24	; 0x02
    11f8:	13 82       	std	Z+3, r1	; 0x03
    11fa:	14 83       	std	Z+4, r17	; 0x04
    11fc:	15 82       	std	Z+5, r1	; 0x05
    11fe:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1202:	8d b7       	in	r24, 0x3d	; 61
    1204:	9e b7       	in	r25, 0x3e	; 62
    1206:	06 96       	adiw	r24, 0x06	; 6
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	9e bf       	out	0x3e, r25	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	8d bf       	out	0x3d, r24	; 61
    1212:	84 ef       	ldi	r24, 0xF4	; 244
    1214:	91 e0       	ldi	r25, 0x01	; 1
    1216:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    121a:	14 30       	cpi	r17, 0x04	; 4
    121c:	58 f2       	brcs	.-106    	; 0x11b4 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    121e:	80 91 14 07 	lds	r24, 0x0714
    1222:	80 93 15 07 	sts	0x0715, r24
}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
    122c:	08 95       	ret

0000122e <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    122e:	1f 93       	push	r17
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    1236:	cd e7       	ldi	r28, 0x7D	; 125
    1238:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    123a:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	21 f4       	brne	.+8      	; 0x124a <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    1242:	80 91 12 06 	lds	r24, 0x0612
    1246:	88 0f       	add	r24, r24
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	41 f4       	brne	.+16     	; 0x125e <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    124e:	80 91 12 06 	lds	r24, 0x0612
    1252:	88 0f       	add	r24, r24
			currentOrientation += 1;
    1254:	8f 5f       	subi	r24, 0xFF	; 255
    1256:	80 93 12 06 	sts	0x0612, r24
			i++;
    125a:	1f 5f       	subi	r17, 0xFF	; 255
    125c:	02 c0       	rjmp	.+4      	; 0x1262 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    125e:	88 23       	and	r24, r24
    1260:	f1 f0       	breq	.+60     	; 0x129e <orientationInput+0x70>
			LCD_clear();
    1262:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    1266:	00 d0       	rcall	.+0      	; 0x1268 <orientationInput+0x3a>
    1268:	00 d0       	rcall	.+0      	; 0x126a <orientationInput+0x3c>
    126a:	00 d0       	rcall	.+0      	; 0x126c <orientationInput+0x3e>
    126c:	ed b7       	in	r30, 0x3d	; 61
    126e:	fe b7       	in	r31, 0x3e	; 62
    1270:	31 96       	adiw	r30, 0x01	; 1
    1272:	ad b7       	in	r26, 0x3d	; 61
    1274:	be b7       	in	r27, 0x3e	; 62
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	dc 93       	st	X, r29
    127a:	ce 93       	st	-X, r28
    127c:	11 97       	sbiw	r26, 0x01	; 1
    127e:	80 91 12 06 	lds	r24, 0x0612
    1282:	82 83       	std	Z+2, r24	; 0x02
    1284:	13 82       	std	Z+3, r1	; 0x03
    1286:	14 83       	std	Z+4, r17	; 0x04
    1288:	15 82       	std	Z+5, r1	; 0x05
    128a:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
    128e:	8d b7       	in	r24, 0x3d	; 61
    1290:	9e b7       	in	r25, 0x3e	; 62
    1292:	06 96       	adiw	r24, 0x06	; 6
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	9e bf       	out	0x3e, r25	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    129e:	84 ef       	ldi	r24, 0xF4	; 244
    12a0:	91 e0       	ldi	r25, 0x01	; 1
    12a2:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    12a6:	12 30       	cpi	r17, 0x02	; 2
    12a8:	40 f2       	brcs	.-112    	; 0x123a <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    12aa:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
	switch(currentOrientation){
    12ae:	80 91 12 06 	lds	r24, 0x0612
    12b2:	81 30       	cpi	r24, 0x01	; 1
    12b4:	51 f0       	breq	.+20     	; 0x12ca <orientationInput+0x9c>
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	28 f0       	brcs	.+10     	; 0x12c4 <orientationInput+0x96>
    12ba:	82 30       	cpi	r24, 0x02	; 2
    12bc:	49 f0       	breq	.+18     	; 0x12d0 <orientationInput+0xa2>
    12be:	83 30       	cpi	r24, 0x03	; 3
    12c0:	71 f4       	brne	.+28     	; 0x12de <orientationInput+0xb0>
    12c2:	09 c0       	rjmp	.+18     	; 0x12d6 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    12c4:	8c ea       	ldi	r24, 0xAC	; 172
    12c6:	91 e0       	ldi	r25, 0x01	; 1
    12c8:	08 c0       	rjmp	.+16     	; 0x12da <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    12ca:	8e ec       	ldi	r24, 0xCE	; 206
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    12d0:	8f ee       	ldi	r24, 0xEF	; 239
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    12d6:	81 e1       	ldi	r24, 0x11	; 17
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    12de:	80 91 12 06 	lds	r24, 0x0612
    12e2:	80 93 11 06 	sts	0x0611, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    12e6:	84 ef       	ldi	r24, 0xF4	; 244
    12e8:	91 e0       	ldi	r25, 0x01	; 1
    12ea:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
}
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	08 95       	ret

000012f6 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    12f6:	2f 92       	push	r2
    12f8:	3f 92       	push	r3
    12fa:	4f 92       	push	r4
    12fc:	5f 92       	push	r5
    12fe:	6f 92       	push	r6
    1300:	7f 92       	push	r7
    1302:	8f 92       	push	r8
    1304:	9f 92       	push	r9
    1306:	af 92       	push	r10
    1308:	bf 92       	push	r11
    130a:	cf 92       	push	r12
    130c:	df 92       	push	r13
    130e:	ef 92       	push	r14
    1310:	ff 92       	push	r15
    1312:	0f 93       	push	r16
    1314:	1f 93       	push	r17
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
    131e:	a0 97       	sbiw	r28, 0x20	; 32
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	2b 01       	movw	r4, r22
    132c:	3c 01       	movw	r6, r24
    132e:	2d 83       	std	Y+5, r18	; 0x05
    1330:	3e 83       	std	Y+6, r19	; 0x06
    1332:	4f 83       	std	Y+7, r20	; 0x07
    1334:	58 87       	std	Y+8, r21	; 0x08
    1336:	e9 86       	std	Y+9, r14	; 0x09
    1338:	fa 86       	std	Y+10, r15	; 0x0a
    133a:	0b 87       	std	Y+11, r16	; 0x0b
    133c:	1c 87       	std	Y+12, r17	; 0x0c
    133e:	ad 86       	std	Y+13, r10	; 0x0d
    1340:	be 86       	std	Y+14, r11	; 0x0e
    1342:	cf 86       	std	Y+15, r12	; 0x0f
    1344:	d8 8a       	std	Y+16, r13	; 0x10
    1346:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    1348:	33 24       	eor	r3, r3
    134a:	ca 01       	movw	r24, r20
    134c:	b9 01       	movw	r22, r18
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__gesf2>
    135a:	18 16       	cp	r1, r24
    135c:	14 f4       	brge	.+4      	; 0x1362 <move_arc_stnb+0x6c>
    135e:	33 24       	eor	r3, r3
    1360:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1362:	6d 81       	ldd	r22, Y+5	; 0x05
    1364:	7e 81       	ldd	r23, Y+6	; 0x06
    1366:	8f 81       	ldd	r24, Y+7	; 0x07
    1368:	98 85       	ldd	r25, Y+8	; 0x08
    136a:	2c ed       	ldi	r18, 0xDC	; 220
    136c:	38 eb       	ldi	r19, 0xB8	; 184
    136e:	48 e0       	ldi	r20, 0x08	; 8
    1370:	5e e3       	ldi	r21, 0x3E	; 62
    1372:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1376:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <__fixsfsi>
    137a:	9b 01       	movw	r18, r22
    137c:	77 ff       	sbrs	r23, 7
    137e:	03 c0       	rjmp	.+6      	; 0x1386 <move_arc_stnb+0x90>
    1380:	30 95       	com	r19
    1382:	21 95       	neg	r18
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
    1386:	b9 01       	movw	r22, r18
    1388:	88 27       	eor	r24, r24
    138a:	77 fd       	sbrc	r23, 7
    138c:	80 95       	com	r24
    138e:	98 2f       	mov	r25, r24
    1390:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__floatsisf>
    1394:	69 83       	std	Y+1, r22	; 0x01
    1396:	7a 83       	std	Y+2, r23	; 0x02
    1398:	8b 83       	std	Y+3, r24	; 0x03
    139a:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    139c:	69 85       	ldd	r22, Y+9	; 0x09
    139e:	7a 85       	ldd	r23, Y+10	; 0x0a
    13a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    13a4:	2c ed       	ldi	r18, 0xDC	; 220
    13a6:	38 eb       	ldi	r19, 0xB8	; 184
    13a8:	48 e0       	ldi	r20, 0x08	; 8
    13aa:	5e e3       	ldi	r21, 0x3E	; 62
    13ac:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    13b0:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <__fixsfsi>
    13b4:	9b 01       	movw	r18, r22
    13b6:	77 ff       	sbrs	r23, 7
    13b8:	03 c0       	rjmp	.+6      	; 0x13c0 <move_arc_stnb+0xca>
    13ba:	30 95       	com	r19
    13bc:	21 95       	neg	r18
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	b9 01       	movw	r22, r18
    13c2:	88 27       	eor	r24, r24
    13c4:	77 fd       	sbrc	r23, 7
    13c6:	80 95       	com	r24
    13c8:	98 2f       	mov	r25, r24
    13ca:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__floatsisf>
    13ce:	4b 01       	movw	r8, r22
    13d0:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    13d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    13d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    13d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d8:	98 89       	ldd	r25, Y+16	; 0x10
    13da:	2c ed       	ldi	r18, 0xDC	; 220
    13dc:	38 eb       	ldi	r19, 0xB8	; 184
    13de:	48 e0       	ldi	r20, 0x08	; 8
    13e0:	5e e3       	ldi	r21, 0x3E	; 62
    13e2:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    13e6:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <__fixsfsi>
    13ea:	9b 01       	movw	r18, r22
    13ec:	77 ff       	sbrs	r23, 7
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <move_arc_stnb+0x100>
    13f0:	30 95       	com	r19
    13f2:	21 95       	neg	r18
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	b9 01       	movw	r22, r18
    13f8:	88 27       	eor	r24, r24
    13fa:	77 fd       	sbrc	r23, 7
    13fc:	80 95       	com	r24
    13fe:	98 2f       	mov	r25, r24
    1400:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__floatsisf>
    1404:	6b 01       	movw	r12, r22
    1406:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1408:	c3 01       	movw	r24, r6
    140a:	b2 01       	movw	r22, r4
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	5f e4       	ldi	r21, 0x4F	; 79
    1414:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    1418:	88 23       	and	r24, r24
    141a:	a1 f5       	brne	.+104    	; 0x1484 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    141c:	69 81       	ldd	r22, Y+1	; 0x01
    141e:	7a 81       	ldd	r23, Y+2	; 0x02
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1428:	2b 01       	movw	r4, r22
    142a:	3c 01       	movw	r6, r24
    142c:	c5 01       	movw	r24, r10
    142e:	b4 01       	movw	r22, r8
    1430:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1434:	4b 01       	movw	r8, r22
    1436:	5c 01       	movw	r10, r24
    1438:	c7 01       	movw	r24, r14
    143a:	b6 01       	movw	r22, r12
    143c:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1440:	6b 01       	movw	r12, r22
    1442:	7c 01       	movw	r14, r24
    1444:	2d b7       	in	r18, 0x3d	; 61
    1446:	3e b7       	in	r19, 0x3e	; 62
    1448:	29 50       	subi	r18, 0x09	; 9
    144a:	30 40       	sbci	r19, 0x00	; 0
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	3e bf       	out	0x3e, r19	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	2d bf       	out	0x3d, r18	; 61
    1456:	ed b7       	in	r30, 0x3d	; 61
    1458:	fe b7       	in	r31, 0x3e	; 62
    145a:	31 96       	adiw	r30, 0x01	; 1
    145c:	ad b7       	in	r26, 0x3d	; 61
    145e:	be b7       	in	r27, 0x3e	; 62
    1460:	12 96       	adiw	r26, 0x02	; 2
    1462:	5c 92       	st	X, r5
    1464:	4e 92       	st	-X, r4
    1466:	11 97       	sbiw	r26, 0x01	; 1
    1468:	93 82       	std	Z+3, r9	; 0x03
    146a:	82 82       	std	Z+2, r8	; 0x02
    146c:	75 83       	std	Z+5, r23	; 0x05
    146e:	64 83       	std	Z+4, r22	; 0x04
    1470:	26 82       	std	Z+6, r2	; 0x06
    1472:	10 86       	std	Z+8, r1	; 0x08
    1474:	17 82       	std	Z+7, r1	; 0x07
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	62 e0       	ldi	r22, 0x02	; 2
    147a:	43 2d       	mov	r20, r3
    147c:	92 01       	movw	r18, r4
    147e:	84 01       	movw	r16, r8
    1480:	76 01       	movw	r14, r12
    1482:	c1 c1       	rjmp	.+898    	; 0x1806 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1484:	c3 01       	movw	r24, r6
    1486:	b2 01       	movw	r22, r4
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    1494:	88 23       	and	r24, r24
    1496:	e9 f5       	brne	.+122    	; 0x1512 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1498:	69 81       	ldd	r22, Y+1	; 0x01
    149a:	7a 81       	ldd	r23, Y+2	; 0x02
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    14a4:	3b 01       	movw	r6, r22
    14a6:	c5 01       	movw	r24, r10
    14a8:	b4 01       	movw	r22, r8
    14aa:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    14ae:	8b 01       	movw	r16, r22
    14b0:	c7 01       	movw	r24, r14
    14b2:	b6 01       	movw	r22, r12
    14b4:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    14b8:	7b 01       	movw	r14, r22
    14ba:	2d b7       	in	r18, 0x3d	; 61
    14bc:	3e b7       	in	r19, 0x3e	; 62
    14be:	29 50       	subi	r18, 0x09	; 9
    14c0:	30 40       	sbci	r19, 0x00	; 0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	f8 94       	cli
    14c6:	3e bf       	out	0x3e, r19	; 62
    14c8:	0f be       	out	0x3f, r0	; 63
    14ca:	2d bf       	out	0x3d, r18	; 61
    14cc:	ed b7       	in	r30, 0x3d	; 61
    14ce:	fe b7       	in	r31, 0x3e	; 62
    14d0:	31 96       	adiw	r30, 0x01	; 1
    14d2:	40 e0       	ldi	r20, 0x00	; 0
    14d4:	33 20       	and	r3, r3
    14d6:	09 f4       	brne	.+2      	; 0x14da <move_arc_stnb+0x1e4>
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	71 82       	std	Z+1, r7	; 0x01
    14dc:	60 82       	st	Z, r6
    14de:	13 83       	std	Z+3, r17	; 0x03
    14e0:	02 83       	std	Z+2, r16	; 0x02
    14e2:	f5 82       	std	Z+5, r15	; 0x05
    14e4:	e4 82       	std	Z+4, r14	; 0x04
    14e6:	26 82       	std	Z+6, r2	; 0x06
    14e8:	10 86       	std	Z+8, r1	; 0x08
    14ea:	17 82       	std	Z+7, r1	; 0x07
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	62 e0       	ldi	r22, 0x02	; 2
    14f0:	93 01       	movw	r18, r6
    14f2:	c2 2c       	mov	r12, r2
    14f4:	aa 24       	eor	r10, r10
    14f6:	bb 24       	eor	r11, r11
    14f8:	83 2c       	mov	r8, r3
    14fa:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <STEPPER_move>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	ad b7       	in	r26, 0x3d	; 61
    1502:	be b7       	in	r27, 0x3e	; 62
    1504:	19 96       	adiw	r26, 0x09	; 9
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	f8 94       	cli
    150a:	be bf       	out	0x3e, r27	; 62
    150c:	0f be       	out	0x3f, r0	; 63
    150e:	ad bf       	out	0x3d, r26	; 61
    1510:	89 c1       	rjmp	.+786    	; 0x1824 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1512:	c3 01       	movw	r24, r6
    1514:	b2 01       	movw	r22, r4
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	40 e0       	ldi	r20, 0x00	; 0
    151c:	50 e0       	ldi	r21, 0x00	; 0
    151e:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__gesf2>
    1522:	18 16       	cp	r1, r24
    1524:	0c f0       	brlt	.+2      	; 0x1528 <move_arc_stnb+0x232>
    1526:	b1 c0       	rjmp	.+354    	; 0x168a <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1528:	66 e6       	ldi	r22, 0x66	; 102
    152a:	76 e6       	ldi	r23, 0x66	; 102
    152c:	8a ea       	ldi	r24, 0xAA	; 170
    152e:	91 ec       	ldi	r25, 0xC1	; 193
    1530:	a3 01       	movw	r20, r6
    1532:	92 01       	movw	r18, r4
    1534:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    1544:	7b 01       	movw	r14, r22
    1546:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1548:	66 e6       	ldi	r22, 0x66	; 102
    154a:	76 e6       	ldi	r23, 0x66	; 102
    154c:	8a ea       	ldi	r24, 0xAA	; 170
    154e:	91 e4       	ldi	r25, 0x41	; 65
    1550:	a3 01       	movw	r20, r6
    1552:	92 01       	movw	r18, r4
    1554:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    1564:	5b 01       	movw	r10, r22
    1566:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1568:	ed b7       	in	r30, 0x3d	; 61
    156a:	fe b7       	in	r31, 0x3e	; 62
    156c:	39 97       	sbiw	r30, 0x09	; 9
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	fe bf       	out	0x3e, r31	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	ed bf       	out	0x3d, r30	; 61
    1578:	8d b6       	in	r8, 0x3d	; 61
    157a:	9e b6       	in	r9, 0x3e	; 62
    157c:	08 94       	sec
    157e:	81 1c       	adc	r8, r1
    1580:	91 1c       	adc	r9, r1
    1582:	6d 81       	ldd	r22, Y+5	; 0x05
    1584:	7e 81       	ldd	r23, Y+6	; 0x06
    1586:	8f 81       	ldd	r24, Y+7	; 0x07
    1588:	98 85       	ldd	r25, Y+8	; 0x08
    158a:	a8 01       	movw	r20, r16
    158c:	97 01       	movw	r18, r14
    158e:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1592:	2c ed       	ldi	r18, 0xDC	; 220
    1594:	38 eb       	ldi	r19, 0xB8	; 184
    1596:	48 e0       	ldi	r20, 0x08	; 8
    1598:	5e e3       	ldi	r21, 0x3E	; 62
    159a:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    159e:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    15a2:	69 8b       	std	Y+17, r22	; 0x11
    15a4:	7a 8b       	std	Y+18, r23	; 0x12
    15a6:	8b 8b       	std	Y+19, r24	; 0x13
    15a8:	9c 8b       	std	Y+20, r25	; 0x14
    15aa:	69 85       	ldd	r22, Y+9	; 0x09
    15ac:	7a 85       	ldd	r23, Y+10	; 0x0a
    15ae:	8b 85       	ldd	r24, Y+11	; 0x0b
    15b0:	9c 85       	ldd	r25, Y+12	; 0x0c
    15b2:	a8 01       	movw	r20, r16
    15b4:	97 01       	movw	r18, r14
    15b6:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    15ba:	2c ed       	ldi	r18, 0xDC	; 220
    15bc:	38 eb       	ldi	r19, 0xB8	; 184
    15be:	48 e0       	ldi	r20, 0x08	; 8
    15c0:	5e e3       	ldi	r21, 0x3E	; 62
    15c2:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    15c6:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    15ca:	6d 8b       	std	Y+21, r22	; 0x15
    15cc:	7e 8b       	std	Y+22, r23	; 0x16
    15ce:	8f 8b       	std	Y+23, r24	; 0x17
    15d0:	98 8f       	std	Y+24, r25	; 0x18
    15d2:	6d 85       	ldd	r22, Y+13	; 0x0d
    15d4:	7e 85       	ldd	r23, Y+14	; 0x0e
    15d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d8:	98 89       	ldd	r25, Y+16	; 0x10
    15da:	a8 01       	movw	r20, r16
    15dc:	97 01       	movw	r18, r14
    15de:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    15e2:	2c ed       	ldi	r18, 0xDC	; 220
    15e4:	38 eb       	ldi	r19, 0xB8	; 184
    15e6:	48 e0       	ldi	r20, 0x08	; 8
    15e8:	5e e3       	ldi	r21, 0x3E	; 62
    15ea:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    15ee:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    15f2:	2b 01       	movw	r4, r22
    15f4:	3c 01       	movw	r6, r24
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	a6 01       	movw	r20, r12
    1600:	95 01       	movw	r18, r10
    1602:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1606:	2c ed       	ldi	r18, 0xDC	; 220
    1608:	38 eb       	ldi	r19, 0xB8	; 184
    160a:	48 e0       	ldi	r20, 0x08	; 8
    160c:	5e e3       	ldi	r21, 0x3E	; 62
    160e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1612:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1616:	d4 01       	movw	r26, r8
    1618:	6d 93       	st	X+, r22
    161a:	7c 93       	st	X, r23
    161c:	69 85       	ldd	r22, Y+9	; 0x09
    161e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1620:	8b 85       	ldd	r24, Y+11	; 0x0b
    1622:	9c 85       	ldd	r25, Y+12	; 0x0c
    1624:	a6 01       	movw	r20, r12
    1626:	95 01       	movw	r18, r10
    1628:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    162c:	2c ed       	ldi	r18, 0xDC	; 220
    162e:	38 eb       	ldi	r19, 0xB8	; 184
    1630:	48 e0       	ldi	r20, 0x08	; 8
    1632:	5e e3       	ldi	r21, 0x3E	; 62
    1634:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1638:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    163c:	f4 01       	movw	r30, r8
    163e:	73 83       	std	Z+3, r23	; 0x03
    1640:	62 83       	std	Z+2, r22	; 0x02
    1642:	6d 85       	ldd	r22, Y+13	; 0x0d
    1644:	7e 85       	ldd	r23, Y+14	; 0x0e
    1646:	8f 85       	ldd	r24, Y+15	; 0x0f
    1648:	98 89       	ldd	r25, Y+16	; 0x10
    164a:	a6 01       	movw	r20, r12
    164c:	95 01       	movw	r18, r10
    164e:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1652:	2c ed       	ldi	r18, 0xDC	; 220
    1654:	38 eb       	ldi	r19, 0xB8	; 184
    1656:	48 e0       	ldi	r20, 0x08	; 8
    1658:	5e e3       	ldi	r21, 0x3E	; 62
    165a:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    165e:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1662:	d4 01       	movw	r26, r8
    1664:	15 96       	adiw	r26, 0x05	; 5
    1666:	7c 93       	st	X, r23
    1668:	6e 93       	st	-X, r22
    166a:	14 97       	sbiw	r26, 0x04	; 4
    166c:	16 96       	adiw	r26, 0x06	; 6
    166e:	2c 92       	st	X, r2
    1670:	16 97       	sbiw	r26, 0x06	; 6
    1672:	18 96       	adiw	r26, 0x08	; 8
    1674:	1c 92       	st	X, r1
    1676:	1e 92       	st	-X, r1
    1678:	17 97       	sbiw	r26, 0x07	; 7
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	62 e0       	ldi	r22, 0x02	; 2
    167e:	43 2d       	mov	r20, r3
    1680:	29 89       	ldd	r18, Y+17	; 0x11
    1682:	3a 89       	ldd	r19, Y+18	; 0x12
    1684:	0d 89       	ldd	r16, Y+21	; 0x15
    1686:	1e 89       	ldd	r17, Y+22	; 0x16
    1688:	bd c0       	rjmp	.+378    	; 0x1804 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    168a:	c3 01       	movw	r24, r6
    168c:	b2 01       	movw	r22, r4
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	50 e0       	ldi	r21, 0x00	; 0
    1696:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    169a:	87 fd       	sbrc	r24, 7
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <move_arc_stnb+0x3ac>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	c1 c0       	rjmp	.+386    	; 0x1824 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    16a2:	66 e6       	ldi	r22, 0x66	; 102
    16a4:	76 e6       	ldi	r23, 0x66	; 102
    16a6:	8a ea       	ldi	r24, 0xAA	; 170
    16a8:	91 e4       	ldi	r25, 0x41	; 65
    16aa:	a3 01       	movw	r20, r6
    16ac:	92 01       	movw	r18, r4
    16ae:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	40 e8       	ldi	r20, 0x80	; 128
    16b8:	5f e3       	ldi	r21, 0x3F	; 63
    16ba:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    16be:	7b 01       	movw	r14, r22
    16c0:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    16c2:	66 e6       	ldi	r22, 0x66	; 102
    16c4:	76 e6       	ldi	r23, 0x66	; 102
    16c6:	8a ea       	ldi	r24, 0xAA	; 170
    16c8:	91 ec       	ldi	r25, 0xC1	; 193
    16ca:	a3 01       	movw	r20, r6
    16cc:	92 01       	movw	r18, r4
    16ce:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    16de:	5b 01       	movw	r10, r22
    16e0:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    16e2:	2d b7       	in	r18, 0x3d	; 61
    16e4:	3e b7       	in	r19, 0x3e	; 62
    16e6:	29 50       	subi	r18, 0x09	; 9
    16e8:	30 40       	sbci	r19, 0x00	; 0
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	3e bf       	out	0x3e, r19	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	2d bf       	out	0x3d, r18	; 61
    16f4:	8d b6       	in	r8, 0x3d	; 61
    16f6:	9e b6       	in	r9, 0x3e	; 62
    16f8:	08 94       	sec
    16fa:	81 1c       	adc	r8, r1
    16fc:	91 1c       	adc	r9, r1
    16fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1700:	7e 81       	ldd	r23, Y+6	; 0x06
    1702:	8f 81       	ldd	r24, Y+7	; 0x07
    1704:	98 85       	ldd	r25, Y+8	; 0x08
    1706:	a8 01       	movw	r20, r16
    1708:	97 01       	movw	r18, r14
    170a:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    170e:	2c ed       	ldi	r18, 0xDC	; 220
    1710:	38 eb       	ldi	r19, 0xB8	; 184
    1712:	48 e0       	ldi	r20, 0x08	; 8
    1714:	5e e3       	ldi	r21, 0x3E	; 62
    1716:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    171a:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    171e:	69 8f       	std	Y+25, r22	; 0x19
    1720:	7a 8f       	std	Y+26, r23	; 0x1a
    1722:	8b 8f       	std	Y+27, r24	; 0x1b
    1724:	9c 8f       	std	Y+28, r25	; 0x1c
    1726:	69 85       	ldd	r22, Y+9	; 0x09
    1728:	7a 85       	ldd	r23, Y+10	; 0x0a
    172a:	8b 85       	ldd	r24, Y+11	; 0x0b
    172c:	9c 85       	ldd	r25, Y+12	; 0x0c
    172e:	a8 01       	movw	r20, r16
    1730:	97 01       	movw	r18, r14
    1732:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1736:	2c ed       	ldi	r18, 0xDC	; 220
    1738:	38 eb       	ldi	r19, 0xB8	; 184
    173a:	48 e0       	ldi	r20, 0x08	; 8
    173c:	5e e3       	ldi	r21, 0x3E	; 62
    173e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1742:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1746:	6d 8f       	std	Y+29, r22	; 0x1d
    1748:	7e 8f       	std	Y+30, r23	; 0x1e
    174a:	8f 8f       	std	Y+31, r24	; 0x1f
    174c:	98 a3       	std	Y+32, r25	; 0x20
    174e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1750:	7e 85       	ldd	r23, Y+14	; 0x0e
    1752:	8f 85       	ldd	r24, Y+15	; 0x0f
    1754:	98 89       	ldd	r25, Y+16	; 0x10
    1756:	a8 01       	movw	r20, r16
    1758:	97 01       	movw	r18, r14
    175a:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    175e:	2c ed       	ldi	r18, 0xDC	; 220
    1760:	38 eb       	ldi	r19, 0xB8	; 184
    1762:	48 e0       	ldi	r20, 0x08	; 8
    1764:	5e e3       	ldi	r21, 0x3E	; 62
    1766:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    176a:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    176e:	2b 01       	movw	r4, r22
    1770:	3c 01       	movw	r6, r24
    1772:	6d 81       	ldd	r22, Y+5	; 0x05
    1774:	7e 81       	ldd	r23, Y+6	; 0x06
    1776:	8f 81       	ldd	r24, Y+7	; 0x07
    1778:	98 85       	ldd	r25, Y+8	; 0x08
    177a:	a6 01       	movw	r20, r12
    177c:	95 01       	movw	r18, r10
    177e:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1782:	2c ed       	ldi	r18, 0xDC	; 220
    1784:	38 eb       	ldi	r19, 0xB8	; 184
    1786:	48 e0       	ldi	r20, 0x08	; 8
    1788:	5e e3       	ldi	r21, 0x3E	; 62
    178a:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    178e:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1792:	d4 01       	movw	r26, r8
    1794:	6d 93       	st	X+, r22
    1796:	7c 93       	st	X, r23
    1798:	69 85       	ldd	r22, Y+9	; 0x09
    179a:	7a 85       	ldd	r23, Y+10	; 0x0a
    179c:	8b 85       	ldd	r24, Y+11	; 0x0b
    179e:	9c 85       	ldd	r25, Y+12	; 0x0c
    17a0:	a6 01       	movw	r20, r12
    17a2:	95 01       	movw	r18, r10
    17a4:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    17a8:	2c ed       	ldi	r18, 0xDC	; 220
    17aa:	38 eb       	ldi	r19, 0xB8	; 184
    17ac:	48 e0       	ldi	r20, 0x08	; 8
    17ae:	5e e3       	ldi	r21, 0x3E	; 62
    17b0:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    17b4:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    17b8:	f4 01       	movw	r30, r8
    17ba:	73 83       	std	Z+3, r23	; 0x03
    17bc:	62 83       	std	Z+2, r22	; 0x02
    17be:	6d 85       	ldd	r22, Y+13	; 0x0d
    17c0:	7e 85       	ldd	r23, Y+14	; 0x0e
    17c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c4:	98 89       	ldd	r25, Y+16	; 0x10
    17c6:	a6 01       	movw	r20, r12
    17c8:	95 01       	movw	r18, r10
    17ca:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    17ce:	2c ed       	ldi	r18, 0xDC	; 220
    17d0:	38 eb       	ldi	r19, 0xB8	; 184
    17d2:	48 e0       	ldi	r20, 0x08	; 8
    17d4:	5e e3       	ldi	r21, 0x3E	; 62
    17d6:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    17da:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    17de:	d4 01       	movw	r26, r8
    17e0:	15 96       	adiw	r26, 0x05	; 5
    17e2:	7c 93       	st	X, r23
    17e4:	6e 93       	st	-X, r22
    17e6:	14 97       	sbiw	r26, 0x04	; 4
    17e8:	16 96       	adiw	r26, 0x06	; 6
    17ea:	2c 92       	st	X, r2
    17ec:	16 97       	sbiw	r26, 0x06	; 6
    17ee:	18 96       	adiw	r26, 0x08	; 8
    17f0:	1c 92       	st	X, r1
    17f2:	1e 92       	st	-X, r1
    17f4:	17 97       	sbiw	r26, 0x07	; 7
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	43 2d       	mov	r20, r3
    17fc:	29 8d       	ldd	r18, Y+25	; 0x19
    17fe:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1800:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1802:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1804:	72 01       	movw	r14, r4
    1806:	c2 2c       	mov	r12, r2
    1808:	aa 24       	eor	r10, r10
    180a:	bb 24       	eor	r11, r11
    180c:	83 2c       	mov	r8, r3
    180e:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <STEPPER_move>
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	ed b7       	in	r30, 0x3d	; 61
    1816:	fe b7       	in	r31, 0x3e	; 62
    1818:	39 96       	adiw	r30, 0x09	; 9
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	fe bf       	out	0x3e, r31	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1824:	a0 96       	adiw	r28, 0x20	; 32
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	df 90       	pop	r13
    183e:	cf 90       	pop	r12
    1840:	bf 90       	pop	r11
    1842:	af 90       	pop	r10
    1844:	9f 90       	pop	r9
    1846:	8f 90       	pop	r8
    1848:	7f 90       	pop	r7
    184a:	6f 90       	pop	r6
    184c:	5f 90       	pop	r5
    184e:	4f 90       	pop	r4
    1850:	3f 90       	pop	r3
    1852:	2f 90       	pop	r2
    1854:	08 95       	ret

00001856 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    1856:	2f 92       	push	r2
    1858:	3f 92       	push	r3
    185a:	4f 92       	push	r4
    185c:	5f 92       	push	r5
    185e:	6f 92       	push	r6
    1860:	7f 92       	push	r7
    1862:	8f 92       	push	r8
    1864:	9f 92       	push	r9
    1866:	af 92       	push	r10
    1868:	bf 92       	push	r11
    186a:	cf 92       	push	r12
    186c:	df 92       	push	r13
    186e:	ef 92       	push	r14
    1870:	ff 92       	push	r15
    1872:	0f 93       	push	r16
    1874:	1f 93       	push	r17
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	a0 97       	sbiw	r28, 0x20	; 32
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	de bf       	out	0x3e, r29	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	cd bf       	out	0x3d, r28	; 61
    188a:	2b 01       	movw	r4, r22
    188c:	3c 01       	movw	r6, r24
    188e:	2d 83       	std	Y+5, r18	; 0x05
    1890:	3e 83       	std	Y+6, r19	; 0x06
    1892:	4f 83       	std	Y+7, r20	; 0x07
    1894:	58 87       	std	Y+8, r21	; 0x08
    1896:	e9 86       	std	Y+9, r14	; 0x09
    1898:	fa 86       	std	Y+10, r15	; 0x0a
    189a:	0b 87       	std	Y+11, r16	; 0x0b
    189c:	1c 87       	std	Y+12, r17	; 0x0c
    189e:	ad 86       	std	Y+13, r10	; 0x0d
    18a0:	be 86       	std	Y+14, r11	; 0x0e
    18a2:	cf 86       	std	Y+15, r12	; 0x0f
    18a4:	d8 8a       	std	Y+16, r13	; 0x10
    18a6:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    18a8:	33 24       	eor	r3, r3
    18aa:	ca 01       	movw	r24, r20
    18ac:	b9 01       	movw	r22, r18
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e0       	ldi	r20, 0x00	; 0
    18b4:	50 e0       	ldi	r21, 0x00	; 0
    18b6:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__gesf2>
    18ba:	18 16       	cp	r1, r24
    18bc:	14 f4       	brge	.+4      	; 0x18c2 <move_arc_stwt+0x6c>
    18be:	33 24       	eor	r3, r3
    18c0:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    18c2:	6d 81       	ldd	r22, Y+5	; 0x05
    18c4:	7e 81       	ldd	r23, Y+6	; 0x06
    18c6:	8f 81       	ldd	r24, Y+7	; 0x07
    18c8:	98 85       	ldd	r25, Y+8	; 0x08
    18ca:	2c ed       	ldi	r18, 0xDC	; 220
    18cc:	38 eb       	ldi	r19, 0xB8	; 184
    18ce:	48 e0       	ldi	r20, 0x08	; 8
    18d0:	5e e3       	ldi	r21, 0x3E	; 62
    18d2:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    18d6:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <__fixsfsi>
    18da:	9b 01       	movw	r18, r22
    18dc:	77 ff       	sbrs	r23, 7
    18de:	03 c0       	rjmp	.+6      	; 0x18e6 <move_arc_stwt+0x90>
    18e0:	30 95       	com	r19
    18e2:	21 95       	neg	r18
    18e4:	3f 4f       	sbci	r19, 0xFF	; 255
    18e6:	b9 01       	movw	r22, r18
    18e8:	88 27       	eor	r24, r24
    18ea:	77 fd       	sbrc	r23, 7
    18ec:	80 95       	com	r24
    18ee:	98 2f       	mov	r25, r24
    18f0:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__floatsisf>
    18f4:	69 83       	std	Y+1, r22	; 0x01
    18f6:	7a 83       	std	Y+2, r23	; 0x02
    18f8:	8b 83       	std	Y+3, r24	; 0x03
    18fa:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    18fc:	69 85       	ldd	r22, Y+9	; 0x09
    18fe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1900:	8b 85       	ldd	r24, Y+11	; 0x0b
    1902:	9c 85       	ldd	r25, Y+12	; 0x0c
    1904:	2c ed       	ldi	r18, 0xDC	; 220
    1906:	38 eb       	ldi	r19, 0xB8	; 184
    1908:	48 e0       	ldi	r20, 0x08	; 8
    190a:	5e e3       	ldi	r21, 0x3E	; 62
    190c:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1910:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <__fixsfsi>
    1914:	9b 01       	movw	r18, r22
    1916:	77 ff       	sbrs	r23, 7
    1918:	03 c0       	rjmp	.+6      	; 0x1920 <move_arc_stwt+0xca>
    191a:	30 95       	com	r19
    191c:	21 95       	neg	r18
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	b9 01       	movw	r22, r18
    1922:	88 27       	eor	r24, r24
    1924:	77 fd       	sbrc	r23, 7
    1926:	80 95       	com	r24
    1928:	98 2f       	mov	r25, r24
    192a:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__floatsisf>
    192e:	4b 01       	movw	r8, r22
    1930:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1932:	6d 85       	ldd	r22, Y+13	; 0x0d
    1934:	7e 85       	ldd	r23, Y+14	; 0x0e
    1936:	8f 85       	ldd	r24, Y+15	; 0x0f
    1938:	98 89       	ldd	r25, Y+16	; 0x10
    193a:	2c ed       	ldi	r18, 0xDC	; 220
    193c:	38 eb       	ldi	r19, 0xB8	; 184
    193e:	48 e0       	ldi	r20, 0x08	; 8
    1940:	5e e3       	ldi	r21, 0x3E	; 62
    1942:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1946:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <__fixsfsi>
    194a:	9b 01       	movw	r18, r22
    194c:	77 ff       	sbrs	r23, 7
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <move_arc_stwt+0x100>
    1950:	30 95       	com	r19
    1952:	21 95       	neg	r18
    1954:	3f 4f       	sbci	r19, 0xFF	; 255
    1956:	b9 01       	movw	r22, r18
    1958:	88 27       	eor	r24, r24
    195a:	77 fd       	sbrc	r23, 7
    195c:	80 95       	com	r24
    195e:	98 2f       	mov	r25, r24
    1960:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__floatsisf>
    1964:	6b 01       	movw	r12, r22
    1966:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1968:	c3 01       	movw	r24, r6
    196a:	b2 01       	movw	r22, r4
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	5f e4       	ldi	r21, 0x4F	; 79
    1974:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    1978:	88 23       	and	r24, r24
    197a:	a1 f5       	brne	.+104    	; 0x19e4 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    197c:	69 81       	ldd	r22, Y+1	; 0x01
    197e:	7a 81       	ldd	r23, Y+2	; 0x02
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
    1984:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1988:	2b 01       	movw	r4, r22
    198a:	3c 01       	movw	r6, r24
    198c:	c5 01       	movw	r24, r10
    198e:	b4 01       	movw	r22, r8
    1990:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1994:	4b 01       	movw	r8, r22
    1996:	5c 01       	movw	r10, r24
    1998:	c7 01       	movw	r24, r14
    199a:	b6 01       	movw	r22, r12
    199c:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    19a0:	6b 01       	movw	r12, r22
    19a2:	7c 01       	movw	r14, r24
    19a4:	2d b7       	in	r18, 0x3d	; 61
    19a6:	3e b7       	in	r19, 0x3e	; 62
    19a8:	29 50       	subi	r18, 0x09	; 9
    19aa:	30 40       	sbci	r19, 0x00	; 0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	3e bf       	out	0x3e, r19	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	2d bf       	out	0x3d, r18	; 61
    19b6:	ed b7       	in	r30, 0x3d	; 61
    19b8:	fe b7       	in	r31, 0x3e	; 62
    19ba:	31 96       	adiw	r30, 0x01	; 1
    19bc:	ad b7       	in	r26, 0x3d	; 61
    19be:	be b7       	in	r27, 0x3e	; 62
    19c0:	12 96       	adiw	r26, 0x02	; 2
    19c2:	5c 92       	st	X, r5
    19c4:	4e 92       	st	-X, r4
    19c6:	11 97       	sbiw	r26, 0x01	; 1
    19c8:	93 82       	std	Z+3, r9	; 0x03
    19ca:	82 82       	std	Z+2, r8	; 0x02
    19cc:	75 83       	std	Z+5, r23	; 0x05
    19ce:	64 83       	std	Z+4, r22	; 0x04
    19d0:	26 82       	std	Z+6, r2	; 0x06
    19d2:	10 86       	std	Z+8, r1	; 0x08
    19d4:	17 82       	std	Z+7, r1	; 0x07
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	62 e0       	ldi	r22, 0x02	; 2
    19da:	43 2d       	mov	r20, r3
    19dc:	92 01       	movw	r18, r4
    19de:	84 01       	movw	r16, r8
    19e0:	76 01       	movw	r14, r12
    19e2:	c1 c1       	rjmp	.+898    	; 0x1d66 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    19e4:	c3 01       	movw	r24, r6
    19e6:	b2 01       	movw	r22, r4
    19e8:	20 e0       	ldi	r18, 0x00	; 0
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	50 e0       	ldi	r21, 0x00	; 0
    19f0:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    19f4:	88 23       	and	r24, r24
    19f6:	e9 f5       	brne	.+122    	; 0x1a72 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    19f8:	69 81       	ldd	r22, Y+1	; 0x01
    19fa:	7a 81       	ldd	r23, Y+2	; 0x02
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1a04:	3b 01       	movw	r6, r22
    1a06:	c5 01       	movw	r24, r10
    1a08:	b4 01       	movw	r22, r8
    1a0a:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1a0e:	8b 01       	movw	r16, r22
    1a10:	c7 01       	movw	r24, r14
    1a12:	b6 01       	movw	r22, r12
    1a14:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1a18:	7b 01       	movw	r14, r22
    1a1a:	2d b7       	in	r18, 0x3d	; 61
    1a1c:	3e b7       	in	r19, 0x3e	; 62
    1a1e:	29 50       	subi	r18, 0x09	; 9
    1a20:	30 40       	sbci	r19, 0x00	; 0
    1a22:	0f b6       	in	r0, 0x3f	; 63
    1a24:	f8 94       	cli
    1a26:	3e bf       	out	0x3e, r19	; 62
    1a28:	0f be       	out	0x3f, r0	; 63
    1a2a:	2d bf       	out	0x3d, r18	; 61
    1a2c:	ed b7       	in	r30, 0x3d	; 61
    1a2e:	fe b7       	in	r31, 0x3e	; 62
    1a30:	31 96       	adiw	r30, 0x01	; 1
    1a32:	40 e0       	ldi	r20, 0x00	; 0
    1a34:	33 20       	and	r3, r3
    1a36:	09 f4       	brne	.+2      	; 0x1a3a <move_arc_stwt+0x1e4>
    1a38:	41 e0       	ldi	r20, 0x01	; 1
    1a3a:	71 82       	std	Z+1, r7	; 0x01
    1a3c:	60 82       	st	Z, r6
    1a3e:	13 83       	std	Z+3, r17	; 0x03
    1a40:	02 83       	std	Z+2, r16	; 0x02
    1a42:	f5 82       	std	Z+5, r15	; 0x05
    1a44:	e4 82       	std	Z+4, r14	; 0x04
    1a46:	26 82       	std	Z+6, r2	; 0x06
    1a48:	10 86       	std	Z+8, r1	; 0x08
    1a4a:	17 82       	std	Z+7, r1	; 0x07
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	62 e0       	ldi	r22, 0x02	; 2
    1a50:	93 01       	movw	r18, r6
    1a52:	c2 2c       	mov	r12, r2
    1a54:	aa 24       	eor	r10, r10
    1a56:	bb 24       	eor	r11, r11
    1a58:	83 2c       	mov	r8, r3
    1a5a:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <STEPPER_move>
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	ad b7       	in	r26, 0x3d	; 61
    1a62:	be b7       	in	r27, 0x3e	; 62
    1a64:	19 96       	adiw	r26, 0x09	; 9
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	be bf       	out	0x3e, r27	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	ad bf       	out	0x3d, r26	; 61
    1a70:	89 c1       	rjmp	.+786    	; 0x1d84 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1a72:	c3 01       	movw	r24, r6
    1a74:	b2 01       	movw	r22, r4
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__gesf2>
    1a82:	18 16       	cp	r1, r24
    1a84:	0c f0       	brlt	.+2      	; 0x1a88 <move_arc_stwt+0x232>
    1a86:	b1 c0       	rjmp	.+354    	; 0x1bea <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1a88:	66 e6       	ldi	r22, 0x66	; 102
    1a8a:	76 e6       	ldi	r23, 0x66	; 102
    1a8c:	8a ea       	ldi	r24, 0xAA	; 170
    1a8e:	91 ec       	ldi	r25, 0xC1	; 193
    1a90:	a3 01       	movw	r20, r6
    1a92:	92 01       	movw	r18, r4
    1a94:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    1aa4:	7b 01       	movw	r14, r22
    1aa6:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1aa8:	66 e6       	ldi	r22, 0x66	; 102
    1aaa:	76 e6       	ldi	r23, 0x66	; 102
    1aac:	8a ea       	ldi	r24, 0xAA	; 170
    1aae:	91 e4       	ldi	r25, 0x41	; 65
    1ab0:	a3 01       	movw	r20, r6
    1ab2:	92 01       	movw	r18, r4
    1ab4:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	40 e8       	ldi	r20, 0x80	; 128
    1abe:	5f e3       	ldi	r21, 0x3F	; 63
    1ac0:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    1ac4:	5b 01       	movw	r10, r22
    1ac6:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1ac8:	ed b7       	in	r30, 0x3d	; 61
    1aca:	fe b7       	in	r31, 0x3e	; 62
    1acc:	39 97       	sbiw	r30, 0x09	; 9
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	fe bf       	out	0x3e, r31	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	ed bf       	out	0x3d, r30	; 61
    1ad8:	8d b6       	in	r8, 0x3d	; 61
    1ada:	9e b6       	in	r9, 0x3e	; 62
    1adc:	08 94       	sec
    1ade:	81 1c       	adc	r8, r1
    1ae0:	91 1c       	adc	r9, r1
    1ae2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae8:	98 85       	ldd	r25, Y+8	; 0x08
    1aea:	a8 01       	movw	r20, r16
    1aec:	97 01       	movw	r18, r14
    1aee:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1af2:	2c ed       	ldi	r18, 0xDC	; 220
    1af4:	38 eb       	ldi	r19, 0xB8	; 184
    1af6:	48 e0       	ldi	r20, 0x08	; 8
    1af8:	5e e3       	ldi	r21, 0x3E	; 62
    1afa:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1afe:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1b02:	69 8b       	std	Y+17, r22	; 0x11
    1b04:	7a 8b       	std	Y+18, r23	; 0x12
    1b06:	8b 8b       	std	Y+19, r24	; 0x13
    1b08:	9c 8b       	std	Y+20, r25	; 0x14
    1b0a:	69 85       	ldd	r22, Y+9	; 0x09
    1b0c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b10:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b12:	a8 01       	movw	r20, r16
    1b14:	97 01       	movw	r18, r14
    1b16:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1b1a:	2c ed       	ldi	r18, 0xDC	; 220
    1b1c:	38 eb       	ldi	r19, 0xB8	; 184
    1b1e:	48 e0       	ldi	r20, 0x08	; 8
    1b20:	5e e3       	ldi	r21, 0x3E	; 62
    1b22:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1b26:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1b2a:	6d 8b       	std	Y+21, r22	; 0x15
    1b2c:	7e 8b       	std	Y+22, r23	; 0x16
    1b2e:	8f 8b       	std	Y+23, r24	; 0x17
    1b30:	98 8f       	std	Y+24, r25	; 0x18
    1b32:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b34:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b38:	98 89       	ldd	r25, Y+16	; 0x10
    1b3a:	a8 01       	movw	r20, r16
    1b3c:	97 01       	movw	r18, r14
    1b3e:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1b42:	2c ed       	ldi	r18, 0xDC	; 220
    1b44:	38 eb       	ldi	r19, 0xB8	; 184
    1b46:	48 e0       	ldi	r20, 0x08	; 8
    1b48:	5e e3       	ldi	r21, 0x3E	; 62
    1b4a:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1b4e:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1b52:	2b 01       	movw	r4, r22
    1b54:	3c 01       	movw	r6, r24
    1b56:	6d 81       	ldd	r22, Y+5	; 0x05
    1b58:	7e 81       	ldd	r23, Y+6	; 0x06
    1b5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b5c:	98 85       	ldd	r25, Y+8	; 0x08
    1b5e:	a6 01       	movw	r20, r12
    1b60:	95 01       	movw	r18, r10
    1b62:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1b66:	2c ed       	ldi	r18, 0xDC	; 220
    1b68:	38 eb       	ldi	r19, 0xB8	; 184
    1b6a:	48 e0       	ldi	r20, 0x08	; 8
    1b6c:	5e e3       	ldi	r21, 0x3E	; 62
    1b6e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1b72:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1b76:	d4 01       	movw	r26, r8
    1b78:	6d 93       	st	X+, r22
    1b7a:	7c 93       	st	X, r23
    1b7c:	69 85       	ldd	r22, Y+9	; 0x09
    1b7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b80:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b82:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b84:	a6 01       	movw	r20, r12
    1b86:	95 01       	movw	r18, r10
    1b88:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1b8c:	2c ed       	ldi	r18, 0xDC	; 220
    1b8e:	38 eb       	ldi	r19, 0xB8	; 184
    1b90:	48 e0       	ldi	r20, 0x08	; 8
    1b92:	5e e3       	ldi	r21, 0x3E	; 62
    1b94:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1b98:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1b9c:	f4 01       	movw	r30, r8
    1b9e:	73 83       	std	Z+3, r23	; 0x03
    1ba0:	62 83       	std	Z+2, r22	; 0x02
    1ba2:	6d 85       	ldd	r22, Y+13	; 0x0d
    1ba4:	7e 85       	ldd	r23, Y+14	; 0x0e
    1ba6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba8:	98 89       	ldd	r25, Y+16	; 0x10
    1baa:	a6 01       	movw	r20, r12
    1bac:	95 01       	movw	r18, r10
    1bae:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1bb2:	2c ed       	ldi	r18, 0xDC	; 220
    1bb4:	38 eb       	ldi	r19, 0xB8	; 184
    1bb6:	48 e0       	ldi	r20, 0x08	; 8
    1bb8:	5e e3       	ldi	r21, 0x3E	; 62
    1bba:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1bbe:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1bc2:	d4 01       	movw	r26, r8
    1bc4:	15 96       	adiw	r26, 0x05	; 5
    1bc6:	7c 93       	st	X, r23
    1bc8:	6e 93       	st	-X, r22
    1bca:	14 97       	sbiw	r26, 0x04	; 4
    1bcc:	16 96       	adiw	r26, 0x06	; 6
    1bce:	2c 92       	st	X, r2
    1bd0:	16 97       	sbiw	r26, 0x06	; 6
    1bd2:	18 96       	adiw	r26, 0x08	; 8
    1bd4:	1c 92       	st	X, r1
    1bd6:	1e 92       	st	-X, r1
    1bd8:	17 97       	sbiw	r26, 0x07	; 7
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	62 e0       	ldi	r22, 0x02	; 2
    1bde:	43 2d       	mov	r20, r3
    1be0:	29 89       	ldd	r18, Y+17	; 0x11
    1be2:	3a 89       	ldd	r19, Y+18	; 0x12
    1be4:	0d 89       	ldd	r16, Y+21	; 0x15
    1be6:	1e 89       	ldd	r17, Y+22	; 0x16
    1be8:	bd c0       	rjmp	.+378    	; 0x1d64 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1bea:	c3 01       	movw	r24, r6
    1bec:	b2 01       	movw	r22, r4
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	50 e0       	ldi	r21, 0x00	; 0
    1bf6:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    1bfa:	87 fd       	sbrc	r24, 7
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <move_arc_stwt+0x3ac>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	c1 c0       	rjmp	.+386    	; 0x1d84 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1c02:	66 e6       	ldi	r22, 0x66	; 102
    1c04:	76 e6       	ldi	r23, 0x66	; 102
    1c06:	8a ea       	ldi	r24, 0xAA	; 170
    1c08:	91 e4       	ldi	r25, 0x41	; 65
    1c0a:	a3 01       	movw	r20, r6
    1c0c:	92 01       	movw	r18, r4
    1c0e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    1c1e:	7b 01       	movw	r14, r22
    1c20:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1c22:	66 e6       	ldi	r22, 0x66	; 102
    1c24:	76 e6       	ldi	r23, 0x66	; 102
    1c26:	8a ea       	ldi	r24, 0xAA	; 170
    1c28:	91 ec       	ldi	r25, 0xC1	; 193
    1c2a:	a3 01       	movw	r20, r6
    1c2c:	92 01       	movw	r18, r4
    1c2e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e8       	ldi	r20, 0x80	; 128
    1c38:	5f e3       	ldi	r21, 0x3F	; 63
    1c3a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    1c3e:	5b 01       	movw	r10, r22
    1c40:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1c42:	2d b7       	in	r18, 0x3d	; 61
    1c44:	3e b7       	in	r19, 0x3e	; 62
    1c46:	29 50       	subi	r18, 0x09	; 9
    1c48:	30 40       	sbci	r19, 0x00	; 0
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	3e bf       	out	0x3e, r19	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	2d bf       	out	0x3d, r18	; 61
    1c54:	8d b6       	in	r8, 0x3d	; 61
    1c56:	9e b6       	in	r9, 0x3e	; 62
    1c58:	08 94       	sec
    1c5a:	81 1c       	adc	r8, r1
    1c5c:	91 1c       	adc	r9, r1
    1c5e:	6d 81       	ldd	r22, Y+5	; 0x05
    1c60:	7e 81       	ldd	r23, Y+6	; 0x06
    1c62:	8f 81       	ldd	r24, Y+7	; 0x07
    1c64:	98 85       	ldd	r25, Y+8	; 0x08
    1c66:	a8 01       	movw	r20, r16
    1c68:	97 01       	movw	r18, r14
    1c6a:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1c6e:	2c ed       	ldi	r18, 0xDC	; 220
    1c70:	38 eb       	ldi	r19, 0xB8	; 184
    1c72:	48 e0       	ldi	r20, 0x08	; 8
    1c74:	5e e3       	ldi	r21, 0x3E	; 62
    1c76:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1c7a:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1c7e:	69 8f       	std	Y+25, r22	; 0x19
    1c80:	7a 8f       	std	Y+26, r23	; 0x1a
    1c82:	8b 8f       	std	Y+27, r24	; 0x1b
    1c84:	9c 8f       	std	Y+28, r25	; 0x1c
    1c86:	69 85       	ldd	r22, Y+9	; 0x09
    1c88:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c8e:	a8 01       	movw	r20, r16
    1c90:	97 01       	movw	r18, r14
    1c92:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1c96:	2c ed       	ldi	r18, 0xDC	; 220
    1c98:	38 eb       	ldi	r19, 0xB8	; 184
    1c9a:	48 e0       	ldi	r20, 0x08	; 8
    1c9c:	5e e3       	ldi	r21, 0x3E	; 62
    1c9e:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1ca2:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1ca6:	6d 8f       	std	Y+29, r22	; 0x1d
    1ca8:	7e 8f       	std	Y+30, r23	; 0x1e
    1caa:	8f 8f       	std	Y+31, r24	; 0x1f
    1cac:	98 a3       	std	Y+32, r25	; 0x20
    1cae:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cb0:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cb4:	98 89       	ldd	r25, Y+16	; 0x10
    1cb6:	a8 01       	movw	r20, r16
    1cb8:	97 01       	movw	r18, r14
    1cba:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1cbe:	2c ed       	ldi	r18, 0xDC	; 220
    1cc0:	38 eb       	ldi	r19, 0xB8	; 184
    1cc2:	48 e0       	ldi	r20, 0x08	; 8
    1cc4:	5e e3       	ldi	r21, 0x3E	; 62
    1cc6:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1cca:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1cce:	2b 01       	movw	r4, r22
    1cd0:	3c 01       	movw	r6, r24
    1cd2:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd4:	7e 81       	ldd	r23, Y+6	; 0x06
    1cd6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cd8:	98 85       	ldd	r25, Y+8	; 0x08
    1cda:	a6 01       	movw	r20, r12
    1cdc:	95 01       	movw	r18, r10
    1cde:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1ce2:	2c ed       	ldi	r18, 0xDC	; 220
    1ce4:	38 eb       	ldi	r19, 0xB8	; 184
    1ce6:	48 e0       	ldi	r20, 0x08	; 8
    1ce8:	5e e3       	ldi	r21, 0x3E	; 62
    1cea:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1cee:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1cf2:	d4 01       	movw	r26, r8
    1cf4:	6d 93       	st	X+, r22
    1cf6:	7c 93       	st	X, r23
    1cf8:	69 85       	ldd	r22, Y+9	; 0x09
    1cfa:	7a 85       	ldd	r23, Y+10	; 0x0a
    1cfc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cfe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1d00:	a6 01       	movw	r20, r12
    1d02:	95 01       	movw	r18, r10
    1d04:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1d08:	2c ed       	ldi	r18, 0xDC	; 220
    1d0a:	38 eb       	ldi	r19, 0xB8	; 184
    1d0c:	48 e0       	ldi	r20, 0x08	; 8
    1d0e:	5e e3       	ldi	r21, 0x3E	; 62
    1d10:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1d14:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1d18:	f4 01       	movw	r30, r8
    1d1a:	73 83       	std	Z+3, r23	; 0x03
    1d1c:	62 83       	std	Z+2, r22	; 0x02
    1d1e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1d20:	7e 85       	ldd	r23, Y+14	; 0x0e
    1d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d24:	98 89       	ldd	r25, Y+16	; 0x10
    1d26:	a6 01       	movw	r20, r12
    1d28:	95 01       	movw	r18, r10
    1d2a:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    1d2e:	2c ed       	ldi	r18, 0xDC	; 220
    1d30:	38 eb       	ldi	r19, 0xB8	; 184
    1d32:	48 e0       	ldi	r20, 0x08	; 8
    1d34:	5e e3       	ldi	r21, 0x3E	; 62
    1d36:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    1d3a:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1d3e:	d4 01       	movw	r26, r8
    1d40:	15 96       	adiw	r26, 0x05	; 5
    1d42:	7c 93       	st	X, r23
    1d44:	6e 93       	st	-X, r22
    1d46:	14 97       	sbiw	r26, 0x04	; 4
    1d48:	16 96       	adiw	r26, 0x06	; 6
    1d4a:	2c 92       	st	X, r2
    1d4c:	16 97       	sbiw	r26, 0x06	; 6
    1d4e:	18 96       	adiw	r26, 0x08	; 8
    1d50:	1c 92       	st	X, r1
    1d52:	1e 92       	st	-X, r1
    1d54:	17 97       	sbiw	r26, 0x07	; 7
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	62 e0       	ldi	r22, 0x02	; 2
    1d5a:	43 2d       	mov	r20, r3
    1d5c:	29 8d       	ldd	r18, Y+25	; 0x19
    1d5e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1d60:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1d62:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1d64:	72 01       	movw	r14, r4
    1d66:	c2 2c       	mov	r12, r2
    1d68:	aa 24       	eor	r10, r10
    1d6a:	bb 24       	eor	r11, r11
    1d6c:	83 2c       	mov	r8, r3
    1d6e:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <STEPPER_move>
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	ed b7       	in	r30, 0x3d	; 61
    1d76:	fe b7       	in	r31, 0x3e	; 62
    1d78:	39 96       	adiw	r30, 0x09	; 9
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	fe bf       	out	0x3e, r31	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1d84:	a0 96       	adiw	r28, 0x20	; 32
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	f8 94       	cli
    1d8a:	de bf       	out	0x3e, r29	; 62
    1d8c:	0f be       	out	0x3f, r0	; 63
    1d8e:	cd bf       	out	0x3d, r28	; 61
    1d90:	cf 91       	pop	r28
    1d92:	df 91       	pop	r29
    1d94:	1f 91       	pop	r17
    1d96:	0f 91       	pop	r16
    1d98:	ff 90       	pop	r15
    1d9a:	ef 90       	pop	r14
    1d9c:	df 90       	pop	r13
    1d9e:	cf 90       	pop	r12
    1da0:	bf 90       	pop	r11
    1da2:	af 90       	pop	r10
    1da4:	9f 90       	pop	r9
    1da6:	8f 90       	pop	r8
    1da8:	7f 90       	pop	r7
    1daa:	6f 90       	pop	r6
    1dac:	5f 90       	pop	r5
    1dae:	4f 90       	pop	r4
    1db0:	3f 90       	pop	r3
    1db2:	2f 90       	pop	r2
    1db4:	08 95       	ret

00001db6 <setOdometry>:
* Input Variables:	void
* Output Return:	float odometry 
* Overview:		    Sets the odometry to move
********************************************************************/
void setOdometry( float odometry )
{	
    1db6:	8f 92       	push	r8
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	ef 92       	push	r14
    1dc0:	ff 92       	push	r15
    1dc2:	0f 93       	push	r16
    1dc4:	1f 93       	push	r17
	// Set the gloable odometryTrigger
	odometryTrigger = odometry;
    1dc6:	60 93 fd 05 	sts	0x05FD, r22
    1dca:	70 93 fe 05 	sts	0x05FE, r23
    1dce:	80 93 ff 05 	sts	0x05FF, r24
    1dd2:	90 93 00 06 	sts	0x0600, r25

	// Set the stepers
	STEPPER_move_stnb( STEPPER_BOTH, 
    1dd6:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    1dda:	8b 01       	movw	r16, r22
    1ddc:	9c 01       	movw	r18, r24
    1dde:	8d b7       	in	r24, 0x3d	; 61
    1de0:	9e b7       	in	r25, 0x3e	; 62
    1de2:	09 97       	sbiw	r24, 0x09	; 9
    1de4:	0f b6       	in	r0, 0x3f	; 63
    1de6:	f8 94       	cli
    1de8:	9e bf       	out	0x3e, r25	; 62
    1dea:	0f be       	out	0x3f, r0	; 63
    1dec:	8d bf       	out	0x3d, r24	; 61
    1dee:	ed b7       	in	r30, 0x3d	; 61
    1df0:	fe b7       	in	r31, 0x3e	; 62
    1df2:	31 96       	adiw	r30, 0x01	; 1
    1df4:	ad b7       	in	r26, 0x3d	; 61
    1df6:	be b7       	in	r27, 0x3e	; 62
    1df8:	12 96       	adiw	r26, 0x02	; 2
    1dfa:	1c 93       	st	X, r17
    1dfc:	0e 93       	st	-X, r16
    1dfe:	11 97       	sbiw	r26, 0x01	; 1
    1e00:	84 ef       	ldi	r24, 0xF4	; 244
    1e02:	91 e0       	ldi	r25, 0x01	; 1
    1e04:	93 83       	std	Z+3, r25	; 0x03
    1e06:	82 83       	std	Z+2, r24	; 0x02
    1e08:	95 83       	std	Z+5, r25	; 0x05
    1e0a:	84 83       	std	Z+4, r24	; 0x04
    1e0c:	16 82       	std	Z+6, r1	; 0x06
    1e0e:	10 86       	std	Z+8, r1	; 0x08
    1e10:	17 82       	std	Z+7, r1	; 0x07
    1e12:	81 e0       	ldi	r24, 0x01	; 1
    1e14:	62 e0       	ldi	r22, 0x02	; 2
    1e16:	41 e0       	ldi	r20, 0x01	; 1
    1e18:	98 01       	movw	r18, r16
    1e1a:	04 ef       	ldi	r16, 0xF4	; 244
    1e1c:	11 e0       	ldi	r17, 0x01	; 1
    1e1e:	94 ef       	ldi	r25, 0xF4	; 244
    1e20:	e9 2e       	mov	r14, r25
    1e22:	91 e0       	ldi	r25, 0x01	; 1
    1e24:	f9 2e       	mov	r15, r25
    1e26:	cc 24       	eor	r12, r12
    1e28:	aa 24       	eor	r10, r10
    1e2a:	bb 24       	eor	r11, r11
    1e2c:	88 24       	eor	r8, r8
    1e2e:	83 94       	inc	r8
    1e30:	0e 94 7e 1d 	call	0x3afc	; 0x3afc <STEPPER_move>
    1e34:	8d b7       	in	r24, 0x3d	; 61
    1e36:	9e b7       	in	r25, 0x3e	; 62
    1e38:	09 96       	adiw	r24, 0x09	; 9
    1e3a:	0f b6       	in	r0, 0x3f	; 63
    1e3c:	f8 94       	cli
    1e3e:	9e bf       	out	0x3e, r25	; 62
    1e40:	0f be       	out	0x3f, r0	; 63
    1e42:	8d bf       	out	0x3d, r24	; 61
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF, // Left
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF ); // Right
}
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	cf 90       	pop	r12
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	8f 90       	pop	r8
    1e54:	08 95       	ret

00001e56 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1e56:	0e 94 aa 20 	call	0x4154	; 0x4154 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	21 70       	andi	r18, 0x01	; 1
    1e5e:	20 93 16 07 	sts	0x0716, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	82 70       	andi	r24, 0x02	; 2
    1e66:	90 70       	andi	r25, 0x00	; 0
    1e68:	95 95       	asr	r25
    1e6a:	87 95       	ror	r24
    1e6c:	80 93 17 07 	sts	0x0717, r24
}
    1e70:	08 95       	ret

00001e72 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1e72:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1e76:	60 93 0d 06 	sts	0x060D, r22
    1e7a:	70 93 0e 06 	sts	0x060E, r23
    1e7e:	80 93 0f 06 	sts	0x060F, r24
    1e82:	90 93 10 06 	sts	0x0610, r25
	leftLightVolt = getLeftLight();
    1e86:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1e8a:	60 93 a5 07 	sts	0x07A5, r22
    1e8e:	70 93 a6 07 	sts	0x07A6, r23
    1e92:	80 93 a7 07 	sts	0x07A7, r24
    1e96:	90 93 a8 07 	sts	0x07A8, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1e9a:	08 95       	ret

00001e9c <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1e9c:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1ea0:	60 93 75 05 	sts	0x0575, r22
    1ea4:	70 93 76 05 	sts	0x0576, r23
    1ea8:	80 93 77 05 	sts	0x0577, r24
    1eac:	90 93 78 05 	sts	0x0578, r25
	bkIR = getBackIR();
    1eb0:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1eb4:	60 93 7f 05 	sts	0x057F, r22
    1eb8:	70 93 80 05 	sts	0x0580, r23
    1ebc:	80 93 81 05 	sts	0x0581, r24
    1ec0:	90 93 82 05 	sts	0x0582, r25
	ltIR = getLeftIR();
    1ec4:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1ec8:	60 93 18 07 	sts	0x0718, r22
    1ecc:	70 93 19 07 	sts	0x0719, r23
    1ed0:	80 93 1a 07 	sts	0x071A, r24
    1ed4:	90 93 1b 07 	sts	0x071B, r25
	rtIR = getRightIR();
    1ed8:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1edc:	60 93 1c 07 	sts	0x071C, r22
    1ee0:	70 93 1d 07 	sts	0x071D, r23
    1ee4:	80 93 1e 07 	sts	0x071E, r24
    1ee8:	90 93 1f 07 	sts	0x071F, r25
}
    1eec:	08 95       	ret

00001eee <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1eee:	cf 92       	push	r12
    1ef0:	df 92       	push	r13
    1ef2:	ef 92       	push	r14
    1ef4:	ff 92       	push	r15
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    1efe:	16 2f       	mov	r17, r22
    1f00:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1f02:	5f e1       	ldi	r21, 0x1F	; 31
    1f04:	f5 2e       	mov	r15, r21
    1f06:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1f08:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1f0a:	0f 2d       	mov	r16, r15
    1f0c:	06 95       	lsr	r16
    1f0e:	06 95       	lsr	r16
    1f10:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1f12:	c0 2f       	mov	r28, r16
    1f14:	d0 e0       	ldi	r29, 0x00	; 0
    1f16:	c1 2e       	mov	r12, r17
    1f18:	dd 24       	eor	r13, r13
    1f1a:	ce 01       	movw	r24, r28
    1f1c:	b6 01       	movw	r22, r12
    1f1e:	0e 94 4c 1b 	call	0x3698	; 0x3698 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1f22:	80 2f       	mov	r24, r16
    1f24:	61 2f       	mov	r22, r17
    1f26:	0e 94 45 1b 	call	0x368a	; 0x368a <LCD_set_next_PGC>
    1f2a:	fe 01       	movw	r30, r28
    1f2c:	45 e0       	ldi	r20, 0x05	; 5
    1f2e:	ee 0f       	add	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	4a 95       	dec	r20
    1f34:	e1 f7       	brne	.-8      	; 0x1f2e <LCD_set_pixel+0x40>
    1f36:	2f 2d       	mov	r18, r15
    1f38:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1f3a:	ee 20       	and	r14, r14
    1f3c:	89 f0       	breq	.+34     	; 0x1f60 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1f3e:	ec 0d       	add	r30, r12
    1f40:	fd 1d       	adc	r31, r13
    1f42:	e0 57       	subi	r30, 0x70	; 112
    1f44:	f9 4f       	sbci	r31, 0xF9	; 249
    1f46:	27 70       	andi	r18, 0x07	; 7
    1f48:	30 70       	andi	r19, 0x00	; 0
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	02 c0       	rjmp	.+4      	; 0x1f54 <LCD_set_pixel+0x66>
    1f50:	88 0f       	add	r24, r24
    1f52:	99 1f       	adc	r25, r25
    1f54:	2a 95       	dec	r18
    1f56:	e2 f7       	brpl	.-8      	; 0x1f50 <LCD_set_pixel+0x62>
    1f58:	20 81       	ld	r18, Z
    1f5a:	28 2b       	or	r18, r24
    1f5c:	20 83       	st	Z, r18
    1f5e:	11 c0       	rjmp	.+34     	; 0x1f82 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1f60:	ec 0d       	add	r30, r12
    1f62:	fd 1d       	adc	r31, r13
    1f64:	e0 57       	subi	r30, 0x70	; 112
    1f66:	f9 4f       	sbci	r31, 0xF9	; 249
    1f68:	27 70       	andi	r18, 0x07	; 7
    1f6a:	30 70       	andi	r19, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	02 c0       	rjmp	.+4      	; 0x1f76 <LCD_set_pixel+0x88>
    1f72:	88 0f       	add	r24, r24
    1f74:	99 1f       	adc	r25, r25
    1f76:	2a 95       	dec	r18
    1f78:	e2 f7       	brpl	.-8      	; 0x1f72 <LCD_set_pixel+0x84>
    1f7a:	80 95       	com	r24
    1f7c:	20 81       	ld	r18, Z
    1f7e:	82 23       	and	r24, r18
    1f80:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1f82:	35 e0       	ldi	r19, 0x05	; 5
    1f84:	cc 0f       	add	r28, r28
    1f86:	dd 1f       	adc	r29, r29
    1f88:	3a 95       	dec	r19
    1f8a:	e1 f7       	brne	.-8      	; 0x1f84 <LCD_set_pixel+0x96>
    1f8c:	cc 0d       	add	r28, r12
    1f8e:	dd 1d       	adc	r29, r13
    1f90:	c0 57       	subi	r28, 0x70	; 112
    1f92:	d9 4f       	sbci	r29, 0xF9	; 249
    1f94:	88 81       	ld	r24, Y
    1f96:	61 e0       	ldi	r22, 0x01	; 1
    1f98:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
}
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	df 90       	pop	r13
    1faa:	cf 90       	pop	r12
    1fac:	08 95       	ret

00001fae <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1fae:	7f 92       	push	r7
    1fb0:	8f 92       	push	r8
    1fb2:	9f 92       	push	r9
    1fb4:	af 92       	push	r10
    1fb6:	bf 92       	push	r11
    1fb8:	cf 92       	push	r12
    1fba:	df 92       	push	r13
    1fbc:	ef 92       	push	r14
    1fbe:	ff 92       	push	r15
    1fc0:	0f 93       	push	r16
    1fc2:	1f 93       	push	r17
    1fc4:	98 2e       	mov	r9, r24
    1fc6:	b6 2e       	mov	r11, r22
    1fc8:	c4 2e       	mov	r12, r20
    1fca:	a2 2e       	mov	r10, r18
    1fcc:	80 2e       	mov	r8, r16
    1fce:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1fd0:	bb 0c       	add	r11, r11
    1fd2:	bb 0c       	add	r11, r11
    1fd4:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1fd6:	dd 24       	eor	r13, r13
    1fd8:	23 e0       	ldi	r18, 0x03	; 3
    1fda:	cc 0c       	add	r12, r12
    1fdc:	dd 1c       	adc	r13, r13
    1fde:	2a 95       	dec	r18
    1fe0:	e1 f7       	brne	.-8      	; 0x1fda <printCell+0x2c>
    1fe2:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1fe4:	0f e1       	ldi	r16, 0x1F	; 31
    1fe6:	0b 19       	sub	r16, r11
    1fe8:	80 2f       	mov	r24, r16
    1fea:	6c 2d       	mov	r22, r12
    1fec:	41 e0       	ldi	r20, 0x01	; 1
    1fee:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1ff2:	98 e1       	ldi	r25, 0x18	; 24
    1ff4:	e9 2e       	mov	r14, r25
    1ff6:	eb 18       	sub	r14, r11
    1ff8:	8e 2d       	mov	r24, r14
    1ffa:	6c 2d       	mov	r22, r12
    1ffc:	41 e0       	ldi	r20, 0x01	; 1
    1ffe:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    2002:	87 e0       	ldi	r24, 0x07	; 7
    2004:	f8 2e       	mov	r15, r24
    2006:	fc 0c       	add	r15, r12
    2008:	80 2f       	mov	r24, r16
    200a:	6f 2d       	mov	r22, r15
    200c:	41 e0       	ldi	r20, 0x01	; 1
    200e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    2012:	8e 2d       	mov	r24, r14
    2014:	6f 2d       	mov	r22, r15
    2016:	41 e0       	ldi	r20, 0x01	; 1
    2018:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	
	if(cell&0b1000){
    201c:	c9 2c       	mov	r12, r9
    201e:	93 fe       	sbrs	r9, 3
    2020:	24 c0       	rjmp	.+72     	; 0x206a <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    2022:	61 2f       	mov	r22, r17
    2024:	6f 5f       	subi	r22, 0xFF	; 255
    2026:	80 2f       	mov	r24, r16
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    202e:	61 2f       	mov	r22, r17
    2030:	6e 5f       	subi	r22, 0xFE	; 254
    2032:	80 2f       	mov	r24, r16
    2034:	41 e0       	ldi	r20, 0x01	; 1
    2036:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    203a:	61 2f       	mov	r22, r17
    203c:	6d 5f       	subi	r22, 0xFD	; 253
    203e:	80 2f       	mov	r24, r16
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    2046:	61 2f       	mov	r22, r17
    2048:	6c 5f       	subi	r22, 0xFC	; 252
    204a:	80 2f       	mov	r24, r16
    204c:	41 e0       	ldi	r20, 0x01	; 1
    204e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    2052:	61 2f       	mov	r22, r17
    2054:	6b 5f       	subi	r22, 0xFB	; 251
    2056:	80 2f       	mov	r24, r16
    2058:	41 e0       	ldi	r20, 0x01	; 1
    205a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    205e:	61 2f       	mov	r22, r17
    2060:	6a 5f       	subi	r22, 0xFA	; 250
    2062:	80 2f       	mov	r24, r16
    2064:	41 e0       	ldi	r20, 0x01	; 1
    2066:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	}
	if(cell&0b0100){
    206a:	c2 fe       	sbrs	r12, 2
    206c:	25 c0       	rjmp	.+74     	; 0x20b8 <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    206e:	8b 2d       	mov	r24, r11
    2070:	80 95       	com	r24
    2072:	81 5e       	subi	r24, 0xE1	; 225
    2074:	6f 2d       	mov	r22, r15
    2076:	41 e0       	ldi	r20, 0x01	; 1
    2078:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    207c:	8d e1       	ldi	r24, 0x1D	; 29
    207e:	8b 19       	sub	r24, r11
    2080:	6f 2d       	mov	r22, r15
    2082:	41 e0       	ldi	r20, 0x01	; 1
    2084:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    2088:	8c e1       	ldi	r24, 0x1C	; 28
    208a:	8b 19       	sub	r24, r11
    208c:	6f 2d       	mov	r22, r15
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    2094:	8b e1       	ldi	r24, 0x1B	; 27
    2096:	8b 19       	sub	r24, r11
    2098:	6f 2d       	mov	r22, r15
    209a:	41 e0       	ldi	r20, 0x01	; 1
    209c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    20a0:	8a e1       	ldi	r24, 0x1A	; 26
    20a2:	8b 19       	sub	r24, r11
    20a4:	6f 2d       	mov	r22, r15
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    20ac:	89 e1       	ldi	r24, 0x19	; 25
    20ae:	8b 19       	sub	r24, r11
    20b0:	6f 2d       	mov	r22, r15
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	}
	if(cell&0b0010){
    20b8:	c1 fe       	sbrs	r12, 1
    20ba:	24 c0       	rjmp	.+72     	; 0x2104 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    20bc:	61 2f       	mov	r22, r17
    20be:	6f 5f       	subi	r22, 0xFF	; 255
    20c0:	8e 2d       	mov	r24, r14
    20c2:	41 e0       	ldi	r20, 0x01	; 1
    20c4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    20c8:	61 2f       	mov	r22, r17
    20ca:	6e 5f       	subi	r22, 0xFE	; 254
    20cc:	8e 2d       	mov	r24, r14
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    20d4:	61 2f       	mov	r22, r17
    20d6:	6d 5f       	subi	r22, 0xFD	; 253
    20d8:	8e 2d       	mov	r24, r14
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    20e0:	61 2f       	mov	r22, r17
    20e2:	6c 5f       	subi	r22, 0xFC	; 252
    20e4:	8e 2d       	mov	r24, r14
    20e6:	41 e0       	ldi	r20, 0x01	; 1
    20e8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    20ec:	61 2f       	mov	r22, r17
    20ee:	6b 5f       	subi	r22, 0xFB	; 251
    20f0:	8e 2d       	mov	r24, r14
    20f2:	41 e0       	ldi	r20, 0x01	; 1
    20f4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    20f8:	61 2f       	mov	r22, r17
    20fa:	6a 5f       	subi	r22, 0xFA	; 250
    20fc:	8e 2d       	mov	r24, r14
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	}
	if(cell&0b0001){
    2104:	c0 fe       	sbrs	r12, 0
    2106:	25 c0       	rjmp	.+74     	; 0x2152 <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    2108:	8b 2d       	mov	r24, r11
    210a:	80 95       	com	r24
    210c:	81 5e       	subi	r24, 0xE1	; 225
    210e:	61 2f       	mov	r22, r17
    2110:	41 e0       	ldi	r20, 0x01	; 1
    2112:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    2116:	8d e1       	ldi	r24, 0x1D	; 29
    2118:	8b 19       	sub	r24, r11
    211a:	61 2f       	mov	r22, r17
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    2122:	8c e1       	ldi	r24, 0x1C	; 28
    2124:	8b 19       	sub	r24, r11
    2126:	61 2f       	mov	r22, r17
    2128:	41 e0       	ldi	r20, 0x01	; 1
    212a:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    212e:	8b e1       	ldi	r24, 0x1B	; 27
    2130:	8b 19       	sub	r24, r11
    2132:	61 2f       	mov	r22, r17
    2134:	41 e0       	ldi	r20, 0x01	; 1
    2136:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    213a:	8a e1       	ldi	r24, 0x1A	; 26
    213c:	8b 19       	sub	r24, r11
    213e:	61 2f       	mov	r22, r17
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    2146:	89 e1       	ldi	r24, 0x19	; 25
    2148:	8b 19       	sub	r24, r11
    214a:	61 2f       	mov	r22, r17
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
	}	
	if(isrobot){
    2152:	aa 20       	and	r10, r10
    2154:	e1 f1       	breq	.+120    	; 0x21ce <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    2156:	bc e1       	ldi	r27, 0x1C	; 28
    2158:	eb 2e       	mov	r14, r27
    215a:	eb 18       	sub	r14, r11
    215c:	a3 e0       	ldi	r26, 0x03	; 3
    215e:	ca 2e       	mov	r12, r26
    2160:	c1 0e       	add	r12, r17
    2162:	8e 2d       	mov	r24, r14
    2164:	6c 2d       	mov	r22, r12
    2166:	4a 2d       	mov	r20, r10
    2168:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    216c:	fb e1       	ldi	r31, 0x1B	; 27
    216e:	ff 2e       	mov	r15, r31
    2170:	fb 18       	sub	r15, r11
    2172:	8f 2d       	mov	r24, r15
    2174:	6c 2d       	mov	r22, r12
    2176:	4a 2d       	mov	r20, r10
    2178:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    217c:	01 2f       	mov	r16, r17
    217e:	0c 5f       	subi	r16, 0xFC	; 252
    2180:	8e 2d       	mov	r24, r14
    2182:	60 2f       	mov	r22, r16
    2184:	4a 2d       	mov	r20, r10
    2186:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    218a:	8f 2d       	mov	r24, r15
    218c:	60 2f       	mov	r22, r16
    218e:	4a 2d       	mov	r20, r10
    2190:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		
		switch(orent){
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	88 16       	cp	r8, r24
    2198:	71 f0       	breq	.+28     	; 0x21b6 <printCell+0x208>
    219a:	88 16       	cp	r8, r24
    219c:	40 f0       	brcs	.+16     	; 0x21ae <printCell+0x200>
    219e:	82 e0       	ldi	r24, 0x02	; 2
    21a0:	88 16       	cp	r8, r24
    21a2:	61 f0       	breq	.+24     	; 0x21bc <printCell+0x20e>
    21a4:	83 e0       	ldi	r24, 0x03	; 3
    21a6:	88 16       	cp	r8, r24
    21a8:	09 f0       	breq	.+2      	; 0x21ac <printCell+0x1fe>
    21aa:	4a c0       	rjmp	.+148    	; 0x2240 <printCell+0x292>
    21ac:	0b c0       	rjmp	.+22     	; 0x21c4 <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    21ae:	8d e1       	ldi	r24, 0x1D	; 29
    21b0:	8b 19       	sub	r24, r11
    21b2:	6c 2d       	mov	r22, r12
    21b4:	0a c0       	rjmp	.+20     	; 0x21ca <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    21b6:	1b 5f       	subi	r17, 0xFB	; 251
    21b8:	8e 2d       	mov	r24, r14
    21ba:	06 c0       	rjmp	.+12     	; 0x21c8 <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    21bc:	8a e1       	ldi	r24, 0x1A	; 26
    21be:	8b 19       	sub	r24, r11
    21c0:	60 2f       	mov	r22, r16
    21c2:	03 c0       	rjmp	.+6      	; 0x21ca <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    21c4:	1e 5f       	subi	r17, 0xFE	; 254
    21c6:	8f 2d       	mov	r24, r15
    21c8:	61 2f       	mov	r22, r17
    21ca:	4a 2d       	mov	r20, r10
    21cc:	37 c0       	rjmp	.+110    	; 0x223c <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    21ce:	77 20       	and	r7, r7
    21d0:	b9 f1       	breq	.+110    	; 0x2240 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    21d2:	ec e1       	ldi	r30, 0x1C	; 28
    21d4:	ce 2e       	mov	r12, r30
    21d6:	cb 18       	sub	r12, r11
    21d8:	73 e0       	ldi	r23, 0x03	; 3
    21da:	e7 2e       	mov	r14, r23
    21dc:	e1 0e       	add	r14, r17
    21de:	8c 2d       	mov	r24, r12
    21e0:	6e 2d       	mov	r22, r14
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    21e8:	0b e1       	ldi	r16, 0x1B	; 27
    21ea:	0b 19       	sub	r16, r11
    21ec:	80 2f       	mov	r24, r16
    21ee:	6e 2d       	mov	r22, r14
    21f0:	40 e0       	ldi	r20, 0x00	; 0
    21f2:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    21f6:	64 e0       	ldi	r22, 0x04	; 4
    21f8:	f6 2e       	mov	r15, r22
    21fa:	f1 0e       	add	r15, r17
    21fc:	8c 2d       	mov	r24, r12
    21fe:	6f 2d       	mov	r22, r15
    2200:	40 e0       	ldi	r20, 0x00	; 0
    2202:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    2206:	80 2f       	mov	r24, r16
    2208:	6f 2d       	mov	r22, r15
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    2210:	8d e1       	ldi	r24, 0x1D	; 29
    2212:	8b 19       	sub	r24, r11
    2214:	6e 2d       	mov	r22, r14
    2216:	40 e0       	ldi	r20, 0x00	; 0
    2218:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    221c:	1b 5f       	subi	r17, 0xFB	; 251
    221e:	8c 2d       	mov	r24, r12
    2220:	61 2f       	mov	r22, r17
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    2228:	8a e1       	ldi	r24, 0x1A	; 26
    222a:	8b 19       	sub	r24, r11
    222c:	6f 2d       	mov	r22, r15
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    2234:	13 50       	subi	r17, 0x03	; 3
    2236:	80 2f       	mov	r24, r16
    2238:	61 2f       	mov	r22, r17
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 77 0f 	call	0x1eee	; 0x1eee <LCD_set_pixel>
		}
}
    2240:	1f 91       	pop	r17
    2242:	0f 91       	pop	r16
    2244:	ff 90       	pop	r15
    2246:	ef 90       	pop	r14
    2248:	df 90       	pop	r13
    224a:	cf 90       	pop	r12
    224c:	bf 90       	pop	r11
    224e:	af 90       	pop	r10
    2250:	9f 90       	pop	r9
    2252:	8f 90       	pop	r8
    2254:	7f 90       	pop	r7
    2256:	08 95       	ret

00002258 <printMap>:
* Input Variables:	unsigned char, unsigned char, char
* Output Return:	void
* Overview:		    Prints the map with the robot
********************************************************************/
void printMap(unsigned char curOrient, unsigned char curCell, char reset)
{
    2258:	8f 92       	push	r8
    225a:	9f 92       	push	r9
    225c:	af 92       	push	r10
    225e:	bf 92       	push	r11
    2260:	cf 92       	push	r12
    2262:	df 92       	push	r13
    2264:	ef 92       	push	r14
    2266:	ff 92       	push	r15
    2268:	0f 93       	push	r16
    226a:	1f 93       	push	r17
    226c:	cf 93       	push	r28
    226e:	df 93       	push	r29
    2270:	88 2e       	mov	r8, r24
    2272:	94 2e       	mov	r9, r20
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = curCell >> 2;
    2274:	a6 2e       	mov	r10, r22
    2276:	a6 94       	lsr	r10
    2278:	a6 94       	lsr	r10
	unsigned char curCol = curCell & 0b0011;
    227a:	43 e0       	ldi	r20, 0x03	; 3
    227c:	b4 2e       	mov	r11, r20
    227e:	b6 22       	and	r11, r22
    2280:	cc 24       	eor	r12, r12
    2282:	dd 24       	eor	r13, r13
    2284:	1d c0       	rjmp	.+58     	; 0x22c0 <printMap+0x68>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    2286:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    2288:	fa 14       	cp	r15, r10
    228a:	19 f0       	breq	.+6      	; 0x2292 <printMap+0x3a>
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	06 c0       	rjmp	.+12     	; 0x229e <printMap+0x46>
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	1b 15       	cp	r17, r11
    2298:	11 f4       	brne	.+4      	; 0x229e <printMap+0x46>
    229a:	21 e0       	ldi	r18, 0x01	; 1
    229c:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, curOrient, reset);
    229e:	6f 2d       	mov	r22, r15
    22a0:	41 2f       	mov	r20, r17
    22a2:	08 2d       	mov	r16, r8
    22a4:	e9 2c       	mov	r14, r9
    22a6:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <printCell>
	unsigned char curRow = curCell >> 2;
	unsigned char curCol = curCell & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    22aa:	1f 5f       	subi	r17, 0xFF	; 255
    22ac:	21 96       	adiw	r28, 0x01	; 1
    22ae:	14 30       	cpi	r17, 0x04	; 4
    22b0:	51 f7       	brne	.-44     	; 0x2286 <printMap+0x2e>
    22b2:	08 94       	sec
    22b4:	c1 1c       	adc	r12, r1
    22b6:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = curCell >> 2;
	unsigned char curCol = curCell & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    22b8:	84 e0       	ldi	r24, 0x04	; 4
    22ba:	c8 16       	cp	r12, r24
    22bc:	d1 04       	cpc	r13, r1
    22be:	51 f0       	breq	.+20     	; 0x22d4 <printMap+0x7c>
    22c0:	fc 2c       	mov	r15, r12
    22c2:	e6 01       	movw	r28, r12
    22c4:	cc 0f       	add	r28, r28
    22c6:	dd 1f       	adc	r29, r29
    22c8:	cc 0f       	add	r28, r28
    22ca:	dd 1f       	adc	r29, r29
    22cc:	cd 50       	subi	r28, 0x0D	; 13
    22ce:	dc 4f       	sbci	r29, 0xFC	; 252
    22d0:	10 e0       	ldi	r17, 0x00	; 0
    22d2:	d9 cf       	rjmp	.-78     	; 0x2286 <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, curOrient, reset);
		}	
	}
}
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	ff 90       	pop	r15
    22de:	ef 90       	pop	r14
    22e0:	df 90       	pop	r13
    22e2:	cf 90       	pop	r12
    22e4:	bf 90       	pop	r11
    22e6:	af 90       	pop	r10
    22e8:	9f 90       	pop	r9
    22ea:	8f 90       	pop	r8
    22ec:	08 95       	ret

000022ee <checkOdometry>:
*					sets the flag whe appropriate
********************************************************************/
char checkOdometry( char reset )
{	
	// Check for a reset
	if (reset){
    22ee:	88 23       	and	r24, r24
    22f0:	91 f0       	breq	.+36     	; 0x2316 <checkOdometry+0x28>
		odometryTrigger = 0;
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e0       	ldi	r26, 0x00	; 0
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	80 93 fd 05 	sts	0x05FD, r24
    22fe:	90 93 fe 05 	sts	0x05FE, r25
    2302:	a0 93 ff 05 	sts	0x05FF, r26
    2306:	b0 93 00 06 	sts	0x0600, r27
		STEPPER_set_steps(STEPPER_BOTH,odometryTrigger);
    230a:	82 e0       	ldi	r24, 0x02	; 2
    230c:	60 e0       	ldi	r22, 0x00	; 0
    230e:	70 e0       	ldi	r23, 0x00	; 0
    2310:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <STEPPER_set_steps>
    2314:	17 c0       	rjmp	.+46     	; 0x2344 <checkOdometry+0x56>
		return SUCCESS;
	}

	// Get the current number of steps
	curr_step = STEPPER_get_nSteps();
    2316:	0e 94 b6 1c 	call	0x396c	; 0x396c <STEPPER_get_nSteps>
    231a:	60 93 10 07 	sts	0x0710, r22
    231e:	70 93 11 07 	sts	0x0711, r23
    2322:	80 93 12 07 	sts	0x0712, r24
    2326:	90 93 13 07 	sts	0x0713, r25
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	80 91 12 07 	lds	r24, 0x0712
    2330:	90 91 13 07 	lds	r25, 0x0713
    2334:	20 91 10 07 	lds	r18, 0x0710
    2338:	30 91 11 07 	lds	r19, 0x0711
    233c:	82 0f       	add	r24, r18
    233e:	93 1f       	adc	r25, r19
    2340:	89 2b       	or	r24, r25
    2342:	09 f4       	brne	.+2      	; 0x2346 <checkOdometry+0x58>
    2344:	41 e0       	ldi	r20, 0x01	; 1
	}

	// But if not zero
	//then return fial
	return FAIL;
}
    2346:	84 2f       	mov	r24, r20
    2348:	08 95       	ret

0000234a <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{
    234a:	5f 92       	push	r5
    234c:	6f 92       	push	r6
    234e:	7f 92       	push	r7
    2350:	8f 92       	push	r8
    2352:	9f 92       	push	r9
    2354:	af 92       	push	r10
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
	// Check for collision
	if(ftIR <= IR_OBST_F_THRESH){
    2368:	e0 90 75 05 	lds	r14, 0x0575
    236c:	f0 90 76 05 	lds	r15, 0x0576
    2370:	00 91 77 05 	lds	r16, 0x0577
    2374:	10 91 78 05 	lds	r17, 0x0578
    2378:	c8 01       	movw	r24, r16
    237a:	b7 01       	movw	r22, r14
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e2       	ldi	r20, 0x20	; 32
    2382:	51 e4       	ldi	r21, 0x41	; 65
    2384:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    2388:	18 16       	cp	r1, r24
    238a:	14 f0       	brlt	.+4      	; 0x2390 <moveWall+0x46>
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	1b c1       	rjmp	.+566    	; 0x25c6 <moveWall+0x27c>
		return SUCCESS;
	}

	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    2390:	55 24       	eor	r5, r5
    2392:	c8 01       	movw	r24, r16
    2394:	b7 01       	movw	r22, r14
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	14 f4       	brge	.+4      	; 0x23aa <moveWall+0x60>
    23a6:	55 24       	eor	r5, r5
    23a8:	53 94       	inc	r5
    23aa:	a0 90 1c 07 	lds	r10, 0x071C
    23ae:	b0 90 1d 07 	lds	r11, 0x071D
    23b2:	c0 90 1e 07 	lds	r12, 0x071E
    23b6:	d0 90 1f 07 	lds	r13, 0x071F
    23ba:	60 90 18 07 	lds	r6, 0x0718
    23be:	70 90 19 07 	lds	r7, 0x0719
    23c2:	80 90 1a 07 	lds	r8, 0x071A
    23c6:	90 90 1b 07 	lds	r9, 0x071B
	if(!isWall){
    23ca:	55 20       	and	r5, r5
    23cc:	41 f5       	brne	.+80     	; 0x241e <moveWall+0xd4>
    23ce:	60 91 7f 05 	lds	r22, 0x057F
    23d2:	70 91 80 05 	lds	r23, 0x0580
    23d6:	80 91 81 05 	lds	r24, 0x0581
    23da:	90 91 82 05 	lds	r25, 0x0582
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e2       	ldi	r20, 0x20	; 32
    23e4:	51 e4       	ldi	r21, 0x41	; 65
    23e6:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    23ea:	87 fd       	sbrc	r24, 7
    23ec:	18 c0       	rjmp	.+48     	; 0x241e <moveWall+0xd4>
    23ee:	c6 01       	movw	r24, r12
    23f0:	b5 01       	movw	r22, r10
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	40 e5       	ldi	r20, 0x50	; 80
    23f8:	51 e4       	ldi	r21, 0x41	; 65
    23fa:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    23fe:	87 fd       	sbrc	r24, 7
    2400:	0e c0       	rjmp	.+28     	; 0x241e <moveWall+0xd4>
    2402:	c4 01       	movw	r24, r8
    2404:	b3 01       	movw	r22, r6
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e5       	ldi	r20, 0x50	; 80
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    2412:	87 fd       	sbrc	r24, 7
    2414:	04 c0       	rjmp	.+8      	; 0x241e <moveWall+0xd4>
	
		// Update the speeds the same to go forward
		STEPPER_set_speed(STEPPER_BOTH, MAX_SPEED_STEP);
    2416:	82 e0       	ldi	r24, 0x02	; 2
    2418:	64 ef       	ldi	r22, 0xF4	; 244
    241a:	71 e0       	ldi	r23, 0x01	; 1
    241c:	cf c0       	rjmp	.+414    	; 0x25bc <moveWall+0x272>
	BOOL isLEFT;
	float error;	
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    241e:	c6 01       	movw	r24, r12
    2420:	b5 01       	movw	r22, r10
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e5       	ldi	r20, 0x50	; 80
    2428:	51 e4       	ldi	r21, 0x41	; 65
    242a:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__gesf2>
    242e:	18 16       	cp	r1, r24
    2430:	64 f4       	brge	.+24     	; 0x244a <moveWall+0x100>
		rtIR = IR_WALL_R_THRESH;
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a0 e5       	ldi	r26, 0x50	; 80
    2438:	b1 e4       	ldi	r27, 0x41	; 65
    243a:	80 93 1c 07 	sts	0x071C, r24
    243e:	90 93 1d 07 	sts	0x071D, r25
    2442:	a0 93 1e 07 	sts	0x071E, r26
    2446:	b0 93 1f 07 	sts	0x071F, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    244a:	c4 01       	movw	r24, r8
    244c:	b3 01       	movw	r22, r6
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e5       	ldi	r20, 0x50	; 80
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 f1 2e 	call	0x5de2	; 0x5de2 <__gesf2>
    245a:	18 16       	cp	r1, r24
    245c:	14 f0       	brlt	.+4      	; 0x2462 <moveWall+0x118>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	0d c0       	rjmp	.+26     	; 0x247c <moveWall+0x132>
		ltIR = IR_WALL_L_THRESH;
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e5       	ldi	r26, 0x50	; 80
    2468:	b1 e4       	ldi	r27, 0x41	; 65
    246a:	80 93 18 07 	sts	0x0718, r24
    246e:	90 93 19 07 	sts	0x0719, r25
    2472:	a0 93 1a 07 	sts	0x071A, r26
    2476:	b0 93 1b 07 	sts	0x071B, r27
    247a:	81 e0       	ldi	r24, 0x01	; 1
		isLEFT = 1;
	}
	
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    247c:	55 20       	and	r5, r5
    247e:	21 f1       	breq	.+72     	; 0x24c8 <moveWall+0x17e>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2480:	88 23       	and	r24, r24
    2482:	29 f0       	breq	.+10     	; 0x248e <moveWall+0x144>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2484:	60 e0       	ldi	r22, 0x00	; 0
    2486:	70 e0       	ldi	r23, 0x00	; 0
    2488:	8a e7       	ldi	r24, 0x7A	; 122
    248a:	94 e4       	ldi	r25, 0x44	; 68
    248c:	04 c0       	rjmp	.+8      	; 0x2496 <moveWall+0x14c>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	70 e0       	ldi	r23, 0x00	; 0
    2492:	8a e7       	ldi	r24, 0x7A	; 122
    2494:	94 ec       	ldi	r25, 0xC4	; 196
    2496:	a8 01       	movw	r20, r16
    2498:	97 01       	movw	r18, r14
    249a:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    249e:	20 91 18 07 	lds	r18, 0x0718
    24a2:	30 91 19 07 	lds	r19, 0x0719
    24a6:	40 91 1a 07 	lds	r20, 0x071A
    24aa:	50 91 1b 07 	lds	r21, 0x071B
    24ae:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    24b2:	9b 01       	movw	r18, r22
    24b4:	ac 01       	movw	r20, r24
    24b6:	60 91 1c 07 	lds	r22, 0x071C
    24ba:	70 91 1d 07 	lds	r23, 0x071D
    24be:	80 91 1e 07 	lds	r24, 0x071E
    24c2:	90 91 1f 07 	lds	r25, 0x071F
    24c6:	10 c0       	rjmp	.+32     	; 0x24e8 <moveWall+0x19e>
	// the error is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    24c8:	60 91 1c 07 	lds	r22, 0x071C
    24cc:	70 91 1d 07 	lds	r23, 0x071D
    24d0:	80 91 1e 07 	lds	r24, 0x071E
    24d4:	90 91 1f 07 	lds	r25, 0x071F
    24d8:	20 91 18 07 	lds	r18, 0x0718
    24dc:	30 91 19 07 	lds	r19, 0x0719
    24e0:	40 91 1a 07 	lds	r20, 0x071A
    24e4:	50 91 1b 07 	lds	r21, 0x071B
    24e8:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <__subsf3>
    24ec:	e6 2f       	mov	r30, r22
	}

	// Use the PID controller function to calculate error
	float effort = pidController(error, 0);
    24ee:	2e 2f       	mov	r18, r30
    24f0:	37 2f       	mov	r19, r23
    24f2:	48 2f       	mov	r20, r24
    24f4:	59 2f       	mov	r21, r25
    24f6:	b9 01       	movw	r22, r18
    24f8:	ca 01       	movw	r24, r20
    24fa:	40 e0       	ldi	r20, 0x00	; 0
    24fc:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2500:	7b 01       	movw	r14, r22
    2502:	8c 01       	movw	r16, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2504:	0e 94 0e 2e 	call	0x5c1c	; 0x5c1c <__fixsfsi>
    2508:	eb 01       	movw	r28, r22
    250a:	77 ff       	sbrs	r23, 7
    250c:	03 c0       	rjmp	.+6      	; 0x2514 <moveWall+0x1ca>
    250e:	d0 95       	com	r29
    2510:	c1 95       	neg	r28
    2512:	df 4f       	sbci	r29, 0xFF	; 255
    2514:	c5 36       	cpi	r28, 0x65	; 101
    2516:	d1 05       	cpc	r29, r1
    2518:	fc f0       	brlt	.+62     	; 0x2558 <moveWall+0x20e>
    251a:	c8 01       	movw	r24, r16
    251c:	b7 01       	movw	r22, r14
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	50 e0       	ldi	r21, 0x00	; 0
    2526:	0e 94 a2 2d 	call	0x5b44	; 0x5b44 <__cmpsf2>
    252a:	88 23       	and	r24, r24
    252c:	a9 f0       	breq	.+42     	; 0x2558 <moveWall+0x20e>
		effort = MAX_EFFORT*(effort/abs(effort));
    252e:	be 01       	movw	r22, r28
    2530:	88 27       	eor	r24, r24
    2532:	77 fd       	sbrc	r23, 7
    2534:	80 95       	com	r24
    2536:	98 2f       	mov	r25, r24
    2538:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__floatsisf>
    253c:	9b 01       	movw	r18, r22
    253e:	ac 01       	movw	r20, r24
    2540:	c8 01       	movw	r24, r16
    2542:	b7 01       	movw	r22, r14
    2544:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	48 ec       	ldi	r20, 0xC8	; 200
    254e:	52 e4       	ldi	r21, 0x42	; 66
    2550:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    2554:	7b 01       	movw	r14, r22
    2556:	8c 01       	movw	r16, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED_STEP/2 + (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
    2558:	c8 01       	movw	r24, r16
    255a:	b7 01       	movw	r22, r14
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	48 ec       	ldi	r20, 0xC8	; 200
    2562:	52 e4       	ldi	r21, 0x42	; 66
    2564:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    2568:	7b 01       	movw	r14, r22
    256a:	8c 01       	movw	r16, r24
	float stepper_speed_R = MAX_SPEED_STEP/2 - (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
	
	// Update the speeds the same to move with wall
	STEPPER_set_speed(STEPPER_LEFT, stepper_speed_L);
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a e7       	ldi	r20, 0x7A	; 122
    2572:	53 e4       	ldi	r21, 0x43	; 67
    2574:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	4a e7       	ldi	r20, 0x7A	; 122
    257e:	53 e4       	ldi	r21, 0x43	; 67
    2580:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    2584:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    2588:	9b 01       	movw	r18, r22
    258a:	ac 01       	movw	r20, r24
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	b9 01       	movw	r22, r18
    2590:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <STEPPER_set_speed>
	STEPPER_set_speed(STEPPER_RIGHT, stepper_speed_R);
    2594:	c8 01       	movw	r24, r16
    2596:	b7 01       	movw	r22, r14
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4a e7       	ldi	r20, 0x7A	; 122
    259e:	53 ec       	ldi	r21, 0xC3	; 195
    25a0:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	4a e7       	ldi	r20, 0x7A	; 122
    25aa:	53 e4       	ldi	r21, 0x43	; 67
    25ac:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__addsf3>
    25b0:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <__fixunssfsi>
    25b4:	9b 01       	movw	r18, r22
    25b6:	ac 01       	movw	r20, r24
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	b9 01       	movw	r22, r18
    25bc:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <STEPPER_set_speed>
	
	// Return weather or not we are finished
	return checkOdometry(NO_RESET);
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	0e 94 77 11 	call	0x22ee	; 0x22ee <checkOdometry>
}
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	9f 90       	pop	r9
    25dc:	8f 90       	pop	r8
    25de:	7f 90       	pop	r7
    25e0:	6f 90       	pop	r6
    25e2:	5f 90       	pop	r5
    25e4:	08 95       	ret

000025e6 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    25e6:	0e 94 29 21 	call	0x4252	; 0x4252 <ATTINY_open>
    25ea:	90 93 fa 04 	sts	0x04FA, r25
    25ee:	80 93 f9 04 	sts	0x04F9, r24
	LEopstat = LED_open(); //open the LED module
    25f2:	0e 94 8c 1b 	call	0x3718	; 0x3718 <LED_open>
    25f6:	90 93 f8 04 	sts	0x04F8, r25
    25fa:	80 93 f7 04 	sts	0x04F7, r24
	LCopstat = LCD_open(); //open the LCD module
    25fe:	0e 94 a3 1a 	call	0x3546	; 0x3546 <LCD_open>
    2602:	90 93 f6 04 	sts	0x04F6, r25
    2606:	80 93 f5 04 	sts	0x04F5, r24
	STEPPER_open(); // Open STEPPER module for use
    260a:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in tone mode
    260e:	81 e0       	ldi	r24, 0x01	; 1
    2610:	0e 94 a9 1c 	call	0x3952	; 0x3952 <SPKR_open>
	
	LED_open();
    2614:	0e 94 8c 1b 	call	0x3718	; 0x3718 <LED_open>
	I2C_open();
    2618:	0e 94 83 22 	call	0x4506	; 0x4506 <I2C_open>
	ADC_open();//open the ADC module
    261c:	0e 94 10 1a 	call	0x3420	; 0x3420 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    2626:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <checkIR>
	prefilter(1);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    2630:	8f ee       	ldi	r24, 0xEF	; 239
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	a5 e8       	ldi	r26, 0x85	; 133
    2636:	b1 e4       	ldi	r27, 0x41	; 65
    2638:	80 93 fd 05 	sts	0x05FD, r24
    263c:	90 93 fe 05 	sts	0x05FE, r25
    2640:	a0 93 ff 05 	sts	0x05FF, r26
    2644:	b0 93 00 06 	sts	0x0600, r27
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	0a c0       	rjmp	.+20     	; 0x2662 <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    264e:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    2650:	01 96       	adiw	r24, 0x01	; 1
    2652:	80 32       	cpi	r24, 0x20	; 32
    2654:	91 05       	cpc	r25, r1
    2656:	d9 f7       	brne	.-10     	; 0x264e <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    2658:	2f 5f       	subi	r18, 0xFF	; 255
    265a:	3f 4f       	sbci	r19, 0xFF	; 255
    265c:	24 30       	cpi	r18, 0x04	; 4
    265e:	31 05       	cpc	r19, r1
    2660:	59 f0       	breq	.+22     	; 0x2678 <initializeRobot+0x92>
    2662:	f9 01       	movw	r30, r18
    2664:	55 e0       	ldi	r21, 0x05	; 5
    2666:	ee 0f       	add	r30, r30
    2668:	ff 1f       	adc	r31, r31
    266a:	5a 95       	dec	r21
    266c:	e1 f7       	brne	.-8      	; 0x2666 <initializeRobot+0x80>
    266e:	e0 57       	subi	r30, 0x70	; 112
    2670:	f9 4f       	sbci	r31, 0xF9	; 249
    2672:	80 e0       	ldi	r24, 0x00	; 0
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	eb cf       	rjmp	.-42     	; 0x264e <initializeRobot+0x68>
    2678:	08 95       	ret

0000267a <localize>:
* Output Return:	none
* Overview:			localize the robot
********************************************************************/
void localize (void)
{	
}
    267a:	08 95       	ret

0000267c <fourNeighborSearch>:
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    267c:	48 2f       	mov	r20, r24
    267e:	46 95       	lsr	r20
    2680:	46 95       	lsr	r20
	unsigned char curCol = (curCell&0b0011);
    2682:	58 2f       	mov	r21, r24
    2684:	53 70       	andi	r21, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 0){
    2686:	a4 2f       	mov	r26, r20
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	25 2f       	mov	r18, r21
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	fd 01       	movw	r30, r26
    2690:	ee 0f       	add	r30, r30
    2692:	ff 1f       	adc	r31, r31
    2694:	ee 0f       	add	r30, r30
    2696:	ff 1f       	adc	r31, r31
    2698:	e2 0f       	add	r30, r18
    269a:	f3 1f       	adc	r31, r19
    269c:	e2 59       	subi	r30, 0x92	; 146
    269e:	fb 4f       	sbci	r31, 0xFB	; 251
    26a0:	80 81       	ld	r24, Z
    26a2:	88 23       	and	r24, r24
    26a4:	11 f4       	brne	.+4      	; 0x26aa <fourNeighborSearch+0x2e>
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	08 95       	ret
	
	// Perform a 4-neighbor search and store the lowest value
	
	// LCD_clear();
	//Check the north cell
	curRow--;
    26aa:	e4 2f       	mov	r30, r20
    26ac:	e1 50       	subi	r30, 0x01	; 1
	if((curRow)<WORLD_ROW_SIZE){
    26ae:	e4 30       	cpi	r30, 0x04	; 4
    26b0:	80 f4       	brcc	.+32     	; 0x26d2 <fourNeighborSearch+0x56>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	ee 0f       	add	r30, r30
    26b6:	ff 1f       	adc	r31, r31
    26b8:	ee 0f       	add	r30, r30
    26ba:	ff 1f       	adc	r31, r31
    26bc:	e2 0f       	add	r30, r18
    26be:	f3 1f       	adc	r31, r19
    26c0:	e2 59       	subi	r30, 0x92	; 146
    26c2:	fb 4f       	sbci	r31, 0xFB	; 251
    26c4:	e0 81       	ld	r30, Z
		// LCD_printf("NORTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    26c6:	e4 36       	cpi	r30, 0x64	; 100
    26c8:	20 f4       	brcc	.+8      	; 0x26d2 <fourNeighborSearch+0x56>
			minVal = curVal;
			nextOrientation = NORTH;
    26ca:	10 92 13 06 	sts	0x0613, r1
    26ce:	9e 2f       	mov	r25, r30
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <fourNeighborSearch+0x58>
    26d2:	94 e6       	ldi	r25, 0x64	; 100
		}
	}
	
	curRow++;
	curRow++;
    26d4:	84 2f       	mov	r24, r20
    26d6:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the south cell
	if((curRow)<WORLD_ROW_SIZE){
    26d8:	84 30       	cpi	r24, 0x04	; 4
    26da:	88 f4       	brcc	.+34     	; 0x26fe <fourNeighborSearch+0x82>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    26dc:	e8 2f       	mov	r30, r24
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	ee 0f       	add	r30, r30
    26e2:	ff 1f       	adc	r31, r31
    26e4:	ee 0f       	add	r30, r30
    26e6:	ff 1f       	adc	r31, r31
    26e8:	e2 0f       	add	r30, r18
    26ea:	f3 1f       	adc	r31, r19
    26ec:	e2 59       	subi	r30, 0x92	; 146
    26ee:	fb 4f       	sbci	r31, 0xFB	; 251
    26f0:	e0 81       	ld	r30, Z
		// LCD_printf("SOUTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    26f2:	e9 17       	cp	r30, r25
    26f4:	20 f4       	brcc	.+8      	; 0x26fe <fourNeighborSearch+0x82>
			minVal = curVal;
			nextOrientation = SOUTH;
    26f6:	82 e0       	ldi	r24, 0x02	; 2
    26f8:	80 93 13 06 	sts	0x0613, r24
    26fc:	9e 2f       	mov	r25, r30
		}
	}
	
	curRow--;
	curCol++;
    26fe:	85 2f       	mov	r24, r21
    2700:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the east cell
	if((curCol)<WORLD_COLUMN_SIZE){
    2702:	84 30       	cpi	r24, 0x04	; 4
    2704:	81 f0       	breq	.+32     	; 0x2726 <fourNeighborSearch+0xaa>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
    2706:	fd 01       	movw	r30, r26
    2708:	ee 0f       	add	r30, r30
    270a:	ff 1f       	adc	r31, r31
    270c:	ee 0f       	add	r30, r30
    270e:	ff 1f       	adc	r31, r31
    2710:	e8 0f       	add	r30, r24
    2712:	f1 1d       	adc	r31, r1
    2714:	e2 59       	subi	r30, 0x92	; 146
    2716:	fb 4f       	sbci	r31, 0xFB	; 251
    2718:	e0 81       	ld	r30, Z
		// LCD_printf("EAST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    271a:	e9 17       	cp	r30, r25
    271c:	20 f4       	brcc	.+8      	; 0x2726 <fourNeighborSearch+0xaa>
			minVal = curVal;
			nextOrientation = EAST;
    271e:	81 e0       	ldi	r24, 0x01	; 1
    2720:	80 93 13 06 	sts	0x0613, r24
    2724:	9e 2f       	mov	r25, r30
		}
	}
	
	curCol--;
	curCol--;
    2726:	85 2f       	mov	r24, r21
    2728:	81 50       	subi	r24, 0x01	; 1
	// Check the west cell
	if((curCol)<WORLD_COLUMN_SIZE){
    272a:	84 30       	cpi	r24, 0x04	; 4
    272c:	80 f4       	brcc	.+32     	; 0x274e <fourNeighborSearch+0xd2>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
		// LCD_printf("WEST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    272e:	aa 0f       	add	r26, r26
    2730:	bb 1f       	adc	r27, r27
    2732:	aa 0f       	add	r26, r26
    2734:	bb 1f       	adc	r27, r27
    2736:	a8 0f       	add	r26, r24
    2738:	b1 1d       	adc	r27, r1
    273a:	a2 59       	subi	r26, 0x92	; 146
    273c:	bb 4f       	sbci	r27, 0xFB	; 251
    273e:	8c 91       	ld	r24, X
    2740:	89 17       	cp	r24, r25
    2742:	28 f4       	brcc	.+10     	; 0x274e <fourNeighborSearch+0xd2>
			minVal = curVal;
			nextOrientation = WEST;
    2744:	83 e0       	ldi	r24, 0x03	; 3
    2746:	80 93 13 06 	sts	0x0613, r24
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	08 95       	ret
    274e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    2750:	08 95       	ret

00002752 <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
void wavefrontMake(void)
{
    2752:	bf 92       	push	r11
    2754:	cf 92       	push	r12
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
	// User-defined goal location
	// unsigned char goalLocation = currentGoalWorld;
	// Extract x and y goal location
	int rowGoal = (currentGoalWorld>>2);
    2764:	80 91 83 05 	lds	r24, 0x0583
	int colGoal = (currentGoalWorld&0b0011);
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	23 70       	andi	r18, 0x03	; 3
    276e:	30 70       	andi	r19, 0x00	; 0
    2770:	86 95       	lsr	r24
    2772:	86 95       	lsr	r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	cc 27       	eor	r28, r28
    2778:	dd 27       	eor	r29, r29
    277a:	c8 1b       	sub	r28, r24
    277c:	d9 0b       	sbc	r29, r25
    277e:	00 e0       	ldi	r16, 0x00	; 0
    2780:	10 e0       	ldi	r17, 0x00	; 0
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    2782:	cc 24       	eor	r12, r12
    2784:	dd 24       	eor	r13, r13
    2786:	c2 1a       	sub	r12, r18
    2788:	d3 0a       	sbc	r13, r19
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
				ROBOT_METRIC_WORLD[row][col] = 99;
    278a:	f3 e6       	ldi	r31, 0x63	; 99
    278c:	bf 2e       	mov	r11, r31
    278e:	25 c0       	rjmp	.+74     	; 0x27da <wavefrontMake+0x88>
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
    2790:	8c 91       	ld	r24, X
    2792:	8f 30       	cpi	r24, 0x0F	; 15
    2794:	11 f4       	brne	.+4      	; 0x279a <wavefrontMake+0x48>
				ROBOT_METRIC_WORLD[row][col] = 99;
    2796:	b0 82       	st	Z, r11
    2798:	11 c0       	rjmp	.+34     	; 0x27bc <wavefrontMake+0x6a>
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
    279a:	9a 01       	movw	r18, r20
    279c:	57 ff       	sbrs	r21, 7
    279e:	04 c0       	rjmp	.+8      	; 0x27a8 <wavefrontMake+0x56>
    27a0:	22 27       	eor	r18, r18
    27a2:	33 27       	eor	r19, r19
    27a4:	24 1b       	sub	r18, r20
    27a6:	35 0b       	sbc	r19, r21
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
    27a8:	22 9f       	mul	r18, r18
    27aa:	c0 01       	movw	r24, r0
    27ac:	23 9f       	mul	r18, r19
    27ae:	90 0d       	add	r25, r0
    27b0:	32 9f       	mul	r19, r18
    27b2:	90 0d       	add	r25, r0
    27b4:	11 24       	eor	r1, r1
    27b6:	8e 0d       	add	r24, r14
    27b8:	9f 1d       	adc	r25, r15
    27ba:	80 83       	st	Z, r24
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
    27bc:	6f 5f       	subi	r22, 0xFF	; 255
    27be:	7f 4f       	sbci	r23, 0xFF	; 255
    27c0:	11 96       	adiw	r26, 0x01	; 1
    27c2:	31 96       	adiw	r30, 0x01	; 1
    27c4:	4f 5f       	subi	r20, 0xFF	; 255
    27c6:	5f 4f       	sbci	r21, 0xFF	; 255
    27c8:	64 30       	cpi	r22, 0x04	; 4
    27ca:	71 05       	cpc	r23, r1
    27cc:	09 f7       	brne	.-62     	; 0x2790 <wavefrontMake+0x3e>
	unsigned int rowDelta, colDelta;
	int row, col;
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
    27ce:	0f 5f       	subi	r16, 0xFF	; 255
    27d0:	1f 4f       	sbci	r17, 0xFF	; 255
    27d2:	21 96       	adiw	r28, 0x01	; 1
    27d4:	04 30       	cpi	r16, 0x04	; 4
    27d6:	11 05       	cpc	r17, r1
    27d8:	e9 f0       	breq	.+58     	; 0x2814 <wavefrontMake+0xc2>
				ROBOT_METRIC_WORLD[row][col] = 99;
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
    27da:	ce 01       	movw	r24, r28
    27dc:	d7 ff       	sbrs	r29, 7
    27de:	04 c0       	rjmp	.+8      	; 0x27e8 <wavefrontMake+0x96>
    27e0:	88 27       	eor	r24, r24
    27e2:	99 27       	eor	r25, r25
    27e4:	8c 1b       	sub	r24, r28
    27e6:	9d 0b       	sbc	r25, r29
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    27e8:	88 9f       	mul	r24, r24
    27ea:	70 01       	movw	r14, r0
    27ec:	89 9f       	mul	r24, r25
    27ee:	f0 0c       	add	r15, r0
    27f0:	98 9f       	mul	r25, r24
    27f2:	f0 0c       	add	r15, r0
    27f4:	11 24       	eor	r1, r1
    27f6:	c8 01       	movw	r24, r16
    27f8:	88 0f       	add	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	dc 01       	movw	r26, r24
    2802:	ad 50       	subi	r26, 0x0D	; 13
    2804:	bc 4f       	sbci	r27, 0xFC	; 252
    2806:	fc 01       	movw	r30, r24
    2808:	e2 59       	subi	r30, 0x92	; 146
    280a:	fb 4f       	sbci	r31, 0xFB	; 251
    280c:	a6 01       	movw	r20, r12
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	70 e0       	ldi	r23, 0x00	; 0
    2812:	be cf       	rjmp	.-132    	; 0x2790 <wavefrontMake+0x3e>
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
			}
		}
	}
}
    2814:	df 91       	pop	r29
    2816:	cf 91       	pop	r28
    2818:	1f 91       	pop	r17
    281a:	0f 91       	pop	r16
    281c:	ff 90       	pop	r15
    281e:	ef 90       	pop	r14
    2820:	df 90       	pop	r13
    2822:	cf 90       	pop	r12
    2824:	bf 90       	pop	r11
    2826:	08 95       	ret

00002828 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    2828:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    282a:	10 91 14 07 	lds	r17, 0x0714
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,TO_MAP_ROTATE);
    282e:	80 91 7d 05 	lds	r24, 0x057D
    2832:	60 91 12 06 	lds	r22, 0x0612
    2836:	40 e0       	ldi	r20, 0x00	; 0
    2838:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    283c:	e1 2f       	mov	r30, r17
    283e:	e6 95       	lsr	r30
    2840:	e6 95       	lsr	r30
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	ee 0f       	add	r30, r30
    2846:	ff 1f       	adc	r31, r31
    2848:	ee 0f       	add	r30, r30
    284a:	ff 1f       	adc	r31, r31
    284c:	13 70       	andi	r17, 0x03	; 3
    284e:	e1 0f       	add	r30, r17
    2850:	f1 1d       	adc	r31, r1
    2852:	ed 50       	subi	r30, 0x0D	; 13
    2854:	fc 4f       	sbci	r31, 0xFC	; 252
    2856:	80 83       	st	Z, r24
}
    2858:	1f 91       	pop	r17
    285a:	08 95       	ret

0000285c <checkFire>:
* Input Variables:	none
* Output Return:	unsigned char
* Overview:			Checks world for Fires
********************************************************************/
unsigned char checkFire(void)
{
    285c:	ef 92       	push	r14
    285e:	ff 92       	push	r15
    2860:	0f 93       	push	r16
    2862:	1f 93       	push	r17
	// Acquire the current gateway
	unsigned char curGate = currentGateway;
	
	// Acquire the current cell
	unsigned char curRow = (currentCellWorld>>2);
    2864:	00 91 14 07 	lds	r16, 0x0714
    2868:	10 2f       	mov	r17, r16
    286a:	16 95       	lsr	r17
    286c:	16 95       	lsr	r17
	unsigned char curCol = (currentCellWorld&0b0011);
    286e:	83 e0       	ldi	r24, 0x03	; 3
    2870:	e8 2e       	mov	r14, r24
    2872:	e0 22       	and	r14, r16
	unsigned char curCell = ROBOT_WORLD[curRow][curCol];
    2874:	e1 2f       	mov	r30, r17
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	ee 0f       	add	r30, r30
    287a:	ff 1f       	adc	r31, r31
    287c:	ee 0f       	add	r30, r30
    287e:	ff 1f       	adc	r31, r31
    2880:	ee 0d       	add	r30, r14
    2882:	f1 1d       	adc	r31, r1
    2884:	ed 50       	subi	r30, 0x0D	; 13
    2886:	fc 4f       	sbci	r31, 0xFC	; 252
    2888:	f0 80       	ld	r15, Z
	
	// Rotate the current gateway wrt to current orientation
	curGate = rotateCell (curGate, currentOrientation, TO_MAP_ROTATE);
    288a:	80 91 7d 05 	lds	r24, 0x057D
    288e:	60 91 12 06 	lds	r22, 0x0612
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Return the boolean value of the equality
	if (curGate != curCell){
    2898:	8f 15       	cp	r24, r15
    289a:	e9 f0       	breq	.+58     	; 0x28d6 <checkFire+0x7a>
		switch(curGate^curCell){
    289c:	8f 25       	eor	r24, r15
    289e:	82 30       	cpi	r24, 0x02	; 2
    28a0:	61 f0       	breq	.+24     	; 0x28ba <checkFire+0x5e>
    28a2:	83 30       	cpi	r24, 0x03	; 3
    28a4:	18 f4       	brcc	.+6      	; 0x28ac <checkFire+0x50>
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	b1 f4       	brne	.+44     	; 0x28d6 <checkFire+0x7a>
    28aa:	05 c0       	rjmp	.+10     	; 0x28b6 <checkFire+0x5a>
    28ac:	84 30       	cpi	r24, 0x04	; 4
    28ae:	69 f0       	breq	.+26     	; 0x28ca <checkFire+0x6e>
    28b0:	88 30       	cpi	r24, 0x08	; 8
    28b2:	89 f4       	brne	.+34     	; 0x28d6 <checkFire+0x7a>
    28b4:	0e c0       	rjmp	.+28     	; 0x28d2 <checkFire+0x76>
			case 0b0001:
				currentFireCell = (curRow<<2)+(curCol-1);
    28b6:	01 50       	subi	r16, 0x01	; 1
    28b8:	09 c0       	rjmp	.+18     	; 0x28cc <checkFire+0x70>
				break;
			case 0b0010:
				currentFireCell = ((curRow+1)<<2)+(curCol);
    28ba:	1f 5f       	subi	r17, 0xFF	; 255
    28bc:	11 0f       	add	r17, r17
    28be:	11 0f       	add	r17, r17
    28c0:	1e 0d       	add	r17, r14
    28c2:	10 93 a4 07 	sts	0x07A4, r17
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	07 c0       	rjmp	.+14     	; 0x28d8 <checkFire+0x7c>
				return SUCCESS;
				break;
			case 0b0100:
				currentFireCell = (curRow<<2)+(curCol+1);
    28ca:	0f 5f       	subi	r16, 0xFF	; 255
    28cc:	00 93 a4 07 	sts	0x07A4, r16
    28d0:	fa cf       	rjmp	.-12     	; 0x28c6 <checkFire+0x6a>
				return SUCCESS;
				break;
			case 0b1000:
				currentFireCell = ((curRow-1)<<2)+(curCol);
    28d2:	11 50       	subi	r17, 0x01	; 1
    28d4:	f3 cf       	rjmp	.-26     	; 0x28bc <checkFire+0x60>
				return SUCCESS;
    28d6:	80 e0       	ldi	r24, 0x00	; 0
		}
		return SUCCESS;
	}
	return FAIL;
	// return 0;
}
    28d8:	1f 91       	pop	r17
    28da:	0f 91       	pop	r16
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	08 95       	ret

000028e2 <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    28e2:	ff 92       	push	r15
    28e4:	0f 93       	push	r16
    28e6:	1f 93       	push	r17
    28e8:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    28ea:	08 2f       	mov	r16, r24
    28ec:	06 95       	lsr	r16
    28ee:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;			
    28f0:	93 e0       	ldi	r25, 0x03	; 3
    28f2:	f9 2e       	mov	r15, r25
    28f4:	f8 22       	and	r15, r24
		
	switch(curMove){
    28f6:	62 30       	cpi	r22, 0x02	; 2
    28f8:	31 f0       	breq	.+12     	; 0x2906 <shiftMap+0x24>
    28fa:	63 30       	cpi	r22, 0x03	; 3
    28fc:	a9 f0       	breq	.+42     	; 0x2928 <shiftMap+0x46>
    28fe:	61 30       	cpi	r22, 0x01	; 1
    2900:	b1 f4       	brne	.+44     	; 0x292e <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2902:	11 50       	subi	r17, 0x01	; 1
    2904:	12 c0       	rjmp	.+36     	; 0x292a <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2906:	41 30       	cpi	r20, 0x01	; 1
    2908:	49 f0       	breq	.+18     	; 0x291c <shiftMap+0x3a>
    290a:	41 30       	cpi	r20, 0x01	; 1
    290c:	28 f0       	brcs	.+10     	; 0x2918 <shiftMap+0x36>
    290e:	42 30       	cpi	r20, 0x02	; 2
    2910:	39 f0       	breq	.+14     	; 0x2920 <shiftMap+0x3e>
    2912:	43 30       	cpi	r20, 0x03	; 3
    2914:	b9 f4       	brne	.+46     	; 0x2944 <shiftMap+0x62>
    2916:	06 c0       	rjmp	.+12     	; 0x2924 <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    2918:	01 50       	subi	r16, 0x01	; 1
    291a:	14 c0       	rjmp	.+40     	; 0x2944 <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    291c:	f3 94       	inc	r15
    291e:	12 c0       	rjmp	.+36     	; 0x2944 <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    2920:	0f 5f       	subi	r16, 0xFF	; 255
    2922:	10 c0       	rjmp	.+32     	; 0x2944 <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    2924:	fa 94       	dec	r15
    2926:	0e c0       	rjmp	.+28     	; 0x2944 <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2928:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    292a:	13 70       	andi	r17, 0x03	; 3
    292c:	0b c0       	rjmp	.+22     	; 0x2944 <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    292e:	00 d0       	rcall	.+0      	; 0x2930 <shiftMap+0x4e>
    2930:	82 e5       	ldi	r24, 0x52	; 82
    2932:	92 e0       	ldi	r25, 0x02	; 2
    2934:	ed b7       	in	r30, 0x3d	; 61
    2936:	fe b7       	in	r31, 0x3e	; 62
    2938:	92 83       	std	Z+2, r25	; 0x02
    293a:	81 83       	std	Z+1, r24	; 0x01
    293c:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    2944:	10 93 12 06 	sts	0x0612, r17
    2948:	00 0f       	add	r16, r16
    294a:	00 0f       	add	r16, r16
	return currentCell;
}
    294c:	80 2f       	mov	r24, r16
    294e:	8f 0d       	add	r24, r15
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	ff 90       	pop	r15
    2956:	08 95       	ret

00002958 <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char row, unsigned char col)
{	
    2958:	df 92       	push	r13
    295a:	ef 92       	push	r14
    295c:	ff 92       	push	r15
    295e:	0f 93       	push	r16
    2960:	1f 93       	push	r17
    2962:	18 2f       	mov	r17, r24
    2964:	06 2f       	mov	r16, r22
    2966:	ff 24       	eor	r15, r15
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	2b c0       	rjmp	.+86     	; 0x29c2 <matchBranch+0x6a>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    296c:	15 30       	cpi	r17, 0x05	; 5
    296e:	88 f5       	brcc	.+98     	; 0x29d2 <matchBranch+0x7a>
    2970:	05 30       	cpi	r16, 0x05	; 5
    2972:	78 f5       	brcc	.+94     	; 0x29d2 <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    2974:	ef 2d       	mov	r30, r15
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	e2 5a       	subi	r30, 0xA2	; 162
    297a:	fb 4f       	sbci	r31, 0xFB	; 251
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    297c:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    297e:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    2980:	80 81       	ld	r24, Z
    2982:	6e 2d       	mov	r22, r14
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    298a:	e1 2f       	mov	r30, r17
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	ee 0f       	add	r30, r30
    2990:	ff 1f       	adc	r31, r31
    2992:	ee 0f       	add	r30, r30
    2994:	ff 1f       	adc	r31, r31
    2996:	e0 0f       	add	r30, r16
    2998:	f1 1d       	adc	r31, r1
    299a:	ed 50       	subi	r30, 0x0D	; 13
    299c:	fc 4f       	sbci	r31, 0xFC	; 252
    299e:	90 81       	ld	r25, Z
    29a0:	89 17       	cp	r24, r25
    29a2:	b9 f4       	brne	.+46     	; 0x29d2 <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		curCell = (curRow << 2) + curCol;
    29a4:	11 0f       	add	r17, r17
    29a6:	11 0f       	add	r17, r17
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		curCell = shiftMap(curCell, curMove, curOrnt);
    29a8:	81 2f       	mov	r24, r17
    29aa:	80 0f       	add	r24, r16
    29ac:	6d 2d       	mov	r22, r13
    29ae:	4e 2d       	mov	r20, r14
    29b0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <shiftMap>
    29b4:	98 2f       	mov	r25, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = curCell >> 2;
    29b6:	18 2f       	mov	r17, r24
    29b8:	16 95       	lsr	r17
    29ba:	16 95       	lsr	r17
		curCol = curCell & 0b0011;
    29bc:	08 2f       	mov	r16, r24
    29be:	03 70       	andi	r16, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    29c0:	f3 94       	inc	r15
    29c2:	80 91 6d 04 	lds	r24, 0x046D
    29c6:	f8 16       	cp	r15, r24
    29c8:	88 f2       	brcs	.-94     	; 0x296c <matchBranch+0x14>
		curRow = curCell >> 2;
		curCol = curCell & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	currentCellWorld = curCell;
    29ca:	90 93 14 07 	sts	0x0714, r25
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	01 c0       	rjmp	.+2      	; 0x29d4 <matchBranch+0x7c>
	return SUCCESS;
    29d2:	80 e0       	ldi	r24, 0x00	; 0
}
    29d4:	1f 91       	pop	r17
    29d6:	0f 91       	pop	r16
    29d8:	ff 90       	pop	r15
    29da:	ef 90       	pop	r14
    29dc:	df 90       	pop	r13
    29de:	08 95       	ret

000029e0 <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	df 93       	push	r29
    29ee:	cf 93       	push	r28
    29f0:	0f 92       	push	r0
    29f2:	cd b7       	in	r28, 0x3d	; 61
    29f4:	de b7       	in	r29, 0x3e	; 62
	unsigned char i = 0;
	
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    29f6:	e0 90 5e 04 	lds	r14, 0x045E
	
	// Local variables for nested for loops 
	unsigned char row, col;
	
	// Stores the number of matching seeds
	matchSeeds = 0;
    29fa:	10 92 ac 07 	sts	0x07AC, r1
    29fe:	00 e0       	ldi	r16, 0x00	; 0
    2a00:	10 e0       	ldi	r17, 0x00	; 0
    2a02:	1c c0       	rjmp	.+56     	; 0x2a3c <localizeGateway+0x5c>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    2a04:	f6 01       	movw	r30, r12
    2a06:	80 81       	ld	r24, Z
    2a08:	e8 16       	cp	r14, r24
    2a0a:	69 f4       	brne	.+26     	; 0x2a26 <localizeGateway+0x46>
			
				//Check to see if we have a matching branch
				if(matchBranch(row,col)){
    2a0c:	8f 2d       	mov	r24, r15
    2a0e:	69 2f       	mov	r22, r25
    2a10:	99 83       	std	Y+1, r25	; 0x01
    2a12:	0e 94 ac 14 	call	0x2958	; 0x2958 <matchBranch>
    2a16:	99 81       	ldd	r25, Y+1	; 0x01
    2a18:	88 23       	and	r24, r24
    2a1a:	29 f0       	breq	.+10     	; 0x2a26 <localizeGateway+0x46>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    2a1c:	80 91 ac 07 	lds	r24, 0x07AC
    2a20:	8f 5f       	subi	r24, 0xFF	; 255
    2a22:	80 93 ac 07 	sts	0x07AC, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    2a26:	9f 5f       	subi	r25, 0xFF	; 255
    2a28:	08 94       	sec
    2a2a:	c1 1c       	adc	r12, r1
    2a2c:	d1 1c       	adc	r13, r1
    2a2e:	94 30       	cpi	r25, 0x04	; 4
    2a30:	49 f7       	brne	.-46     	; 0x2a04 <localizeGateway+0x24>
    2a32:	0f 5f       	subi	r16, 0xFF	; 255
    2a34:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    2a36:	04 30       	cpi	r16, 0x04	; 4
    2a38:	11 05       	cpc	r17, r1
    2a3a:	61 f0       	breq	.+24     	; 0x2a54 <localizeGateway+0x74>
    2a3c:	f0 2e       	mov	r15, r16
    2a3e:	68 01       	movw	r12, r16
    2a40:	cc 0c       	add	r12, r12
    2a42:	dd 1c       	adc	r13, r13
    2a44:	cc 0c       	add	r12, r12
    2a46:	dd 1c       	adc	r13, r13
    2a48:	83 ef       	ldi	r24, 0xF3	; 243
    2a4a:	93 e0       	ldi	r25, 0x03	; 3
    2a4c:	c8 0e       	add	r12, r24
    2a4e:	d9 1e       	adc	r13, r25
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	d8 cf       	rjmp	.-80     	; 0x2a04 <localizeGateway+0x24>
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	80 91 ac 07 	lds	r24, 0x07AC
    2a5a:	81 30       	cpi	r24, 0x01	; 1
    2a5c:	09 f0       	breq	.+2      	; 0x2a60 <localizeGateway+0x80>
    2a5e:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    2a60:	89 2f       	mov	r24, r25
    2a62:	0f 90       	pop	r0
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	1f 91       	pop	r17
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	ef 90       	pop	r14
    2a70:	df 90       	pop	r13
    2a72:	cf 90       	pop	r12
    2a74:	08 95       	ret

00002a76 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    2a76:	80 91 7d 05 	lds	r24, 0x057D
    2a7a:	80 fd       	sbrc	r24, 0
    2a7c:	02 c0       	rjmp	.+4      	; 0x2a82 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2a7e:	81 e0       	ldi	r24, 0x01	; 1
    2a80:	05 c0       	rjmp	.+10     	; 0x2a8c <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    2a82:	83 fd       	sbrc	r24, 3
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    2a86:	82 e0       	ldi	r24, 0x02	; 2
    2a88:	01 c0       	rjmp	.+2      	; 0x2a8c <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    2a8a:	83 e0       	ldi	r24, 0x03	; 3
    2a8c:	80 93 fb 04 	sts	0x04FB, r24
	}
	
	switch(oldMove){
    2a90:	80 91 fc 04 	lds	r24, 0x04FC
    2a94:	81 30       	cpi	r24, 0x01	; 1
    2a96:	29 f0       	breq	.+10     	; 0x2aa2 <planMap+0x2c>
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	38 f0       	brcs	.+14     	; 0x2aaa <planMap+0x34>
    2a9c:	84 30       	cpi	r24, 0x04	; 4
    2a9e:	28 f4       	brcc	.+10     	; 0x2aaa <planMap+0x34>
    2aa0:	0f c0       	rjmp	.+30     	; 0x2ac0 <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2aa2:	82 e0       	ldi	r24, 0x02	; 2
    2aa4:	80 93 fb 04 	sts	0x04FB, r24
    2aa8:	0b c0       	rjmp	.+22     	; 0x2ac0 <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <planMap+0x36>
    2aac:	8b e5       	ldi	r24, 0x5B	; 91
    2aae:	92 e0       	ldi	r25, 0x02	; 2
    2ab0:	ed b7       	in	r30, 0x3d	; 61
    2ab2:	fe b7       	in	r31, 0x3e	; 62
    2ab4:	92 83       	std	Z+2, r25	; 0x02
    2ab6:	81 83       	std	Z+1, r24	; 0x01
    2ab8:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
			break;
	}
	
	oldMove = currentMove;
    2ac0:	80 91 fb 04 	lds	r24, 0x04FB
    2ac4:	80 93 fc 04 	sts	0x04FC, r24
}
    2ac8:	08 95       	ret

00002aca <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch >= BRANCH_MAX){
    2aca:	80 91 6d 04 	lds	r24, 0x046D
    2ace:	85 30       	cpi	r24, 0x05	; 5
    2ad0:	80 f0       	brcs	.+32     	; 0x2af2 <planGateway+0x28>
    2ad2:	ee e5       	ldi	r30, 0x5E	; 94
    2ad4:	f4 e0       	ldi	r31, 0x04	; 4
		for(i = 0; i < BRANCH_MAX; i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    2ad6:	81 81       	ldd	r24, Z+1	; 0x01
    2ad8:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2ada:	86 81       	ldd	r24, Z+6	; 0x06
    2adc:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2ade:	83 85       	ldd	r24, Z+11	; 0x0b
    2ae0:	82 87       	std	Z+10, r24	; 0x0a
    2ae2:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch >= BRANCH_MAX){
		for(i = 0; i < BRANCH_MAX; i++){
    2ae4:	84 e0       	ldi	r24, 0x04	; 4
    2ae6:	e3 36       	cpi	r30, 0x63	; 99
    2ae8:	f8 07       	cpc	r31, r24
    2aea:	a9 f7       	brne	.-22     	; 0x2ad6 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2aec:	84 e0       	ldi	r24, 0x04	; 4
    2aee:	80 93 6d 04 	sts	0x046D, r24
	}
	
	// Decide what the current move should be
	planMap();
    2af2:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    2af6:	e0 91 6d 04 	lds	r30, 0x046D
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	e2 5a       	subi	r30, 0xA2	; 162
    2afe:	fb 4f       	sbci	r31, 0xFB	; 251
    2b00:	80 91 7d 05 	lds	r24, 0x057D
    2b04:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2b06:	90 91 fb 04 	lds	r25, 0x04FB
    2b0a:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2b0c:	80 91 12 06 	lds	r24, 0x0612
    2b10:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2b12:	92 30       	cpi	r25, 0x02	; 2
    2b14:	b1 f0       	breq	.+44     	; 0x2b42 <planGateway+0x78>
    2b16:	93 30       	cpi	r25, 0x03	; 3
    2b18:	21 f0       	breq	.+8      	; 0x2b22 <planGateway+0x58>
    2b1a:	91 30       	cpi	r25, 0x01	; 1
    2b1c:	39 f4       	brne	.+14     	; 0x2b2c <planGateway+0x62>
		case MOVE_LEFT:
			// If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2b1e:	81 50       	subi	r24, 0x01	; 1
    2b20:	01 c0       	rjmp	.+2      	; 0x2b24 <planGateway+0x5a>
			break;
		case MOVE_RIGHT:
			// If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2b22:	8f 5f       	subi	r24, 0xFF	; 255
    2b24:	83 70       	andi	r24, 0x03	; 3
    2b26:	80 93 12 06 	sts	0x0612, r24
    2b2a:	0b c0       	rjmp	.+22     	; 0x2b42 <planGateway+0x78>
			break;
		default:
			LCD_printf("Whatz2?!");
    2b2c:	00 d0       	rcall	.+0      	; 0x2b2e <planGateway+0x64>
    2b2e:	84 e6       	ldi	r24, 0x64	; 100
    2b30:	92 e0       	ldi	r25, 0x02	; 2
    2b32:	ed b7       	in	r30, 0x3d	; 61
    2b34:	fe b7       	in	r31, 0x3e	; 62
    2b36:	92 83       	std	Z+2, r25	; 0x02
    2b38:	81 83       	std	Z+1, r24	; 0x01
    2b3a:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2b42:	80 91 6d 04 	lds	r24, 0x046D
    2b46:	8f 5f       	subi	r24, 0xFF	; 255
    2b48:	80 93 6d 04 	sts	0x046D, r24
}
    2b4c:	08 95       	ret

00002b4e <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    2b4e:	90 91 12 06 	lds	r25, 0x0612
    2b52:	91 30       	cpi	r25, 0x01	; 1
    2b54:	91 f0       	breq	.+36     	; 0x2b7a <planMetric+0x2c>
    2b56:	91 30       	cpi	r25, 0x01	; 1
    2b58:	28 f0       	brcs	.+10     	; 0x2b64 <planMetric+0x16>
    2b5a:	92 30       	cpi	r25, 0x02	; 2
    2b5c:	d9 f0       	breq	.+54     	; 0x2b94 <planMetric+0x46>
    2b5e:	93 30       	cpi	r25, 0x03	; 3
    2b60:	c1 f5       	brne	.+112    	; 0x2bd2 <planMetric+0x84>
    2b62:	23 c0       	rjmp	.+70     	; 0x2baa <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    2b64:	80 91 13 06 	lds	r24, 0x0613
    2b68:	81 30       	cpi	r24, 0x01	; 1
    2b6a:	91 f0       	breq	.+36     	; 0x2b90 <planMetric+0x42>
    2b6c:	81 30       	cpi	r24, 0x01	; 1
    2b6e:	68 f1       	brcs	.+90     	; 0x2bca <planMetric+0x7c>
    2b70:	82 30       	cpi	r24, 0x02	; 2
    2b72:	49 f1       	breq	.+82     	; 0x2bc6 <planMetric+0x78>
    2b74:	83 30       	cpi	r24, 0x03	; 3
    2b76:	69 f5       	brne	.+90     	; 0x2bd2 <planMetric+0x84>
    2b78:	26 c0       	rjmp	.+76     	; 0x2bc6 <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    2b7a:	80 91 13 06 	lds	r24, 0x0613
    2b7e:	81 30       	cpi	r24, 0x01	; 1
    2b80:	21 f1       	breq	.+72     	; 0x2bca <planMetric+0x7c>
    2b82:	81 30       	cpi	r24, 0x01	; 1
    2b84:	e8 f0       	brcs	.+58     	; 0x2bc0 <planMetric+0x72>
    2b86:	82 30       	cpi	r24, 0x02	; 2
    2b88:	19 f0       	breq	.+6      	; 0x2b90 <planMetric+0x42>
    2b8a:	83 30       	cpi	r24, 0x03	; 3
    2b8c:	11 f5       	brne	.+68     	; 0x2bd2 <planMetric+0x84>
    2b8e:	18 c0       	rjmp	.+48     	; 0x2bc0 <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    2b90:	83 e0       	ldi	r24, 0x03	; 3
    2b92:	1c c0       	rjmp	.+56     	; 0x2bcc <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    2b94:	80 91 13 06 	lds	r24, 0x0613
    2b98:	81 30       	cpi	r24, 0x01	; 1
    2b9a:	c1 f0       	breq	.+48     	; 0x2bcc <planMetric+0x7e>
    2b9c:	81 30       	cpi	r24, 0x01	; 1
    2b9e:	98 f0       	brcs	.+38     	; 0x2bc6 <planMetric+0x78>
    2ba0:	82 30       	cpi	r24, 0x02	; 2
    2ba2:	a1 f0       	breq	.+40     	; 0x2bcc <planMetric+0x7e>
    2ba4:	83 30       	cpi	r24, 0x03	; 3
    2ba6:	a9 f4       	brne	.+42     	; 0x2bd2 <planMetric+0x84>
    2ba8:	11 c0       	rjmp	.+34     	; 0x2bcc <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    2baa:	80 91 13 06 	lds	r24, 0x0613
    2bae:	81 30       	cpi	r24, 0x01	; 1
    2bb0:	69 f0       	breq	.+26     	; 0x2bcc <planMetric+0x7e>
    2bb2:	81 30       	cpi	r24, 0x01	; 1
    2bb4:	28 f0       	brcs	.+10     	; 0x2bc0 <planMetric+0x72>
    2bb6:	82 30       	cpi	r24, 0x02	; 2
    2bb8:	31 f0       	breq	.+12     	; 0x2bc6 <planMetric+0x78>
    2bba:	83 30       	cpi	r24, 0x03	; 3
    2bbc:	51 f4       	brne	.+20     	; 0x2bd2 <planMetric+0x84>
    2bbe:	05 c0       	rjmp	.+10     	; 0x2bca <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    2bc0:	90 93 fb 04 	sts	0x04FB, r25
    2bc4:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	01 c0       	rjmp	.+2      	; 0x2bcc <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    2bca:	82 e0       	ldi	r24, 0x02	; 2
    2bcc:	80 93 fb 04 	sts	0x04FB, r24
    2bd0:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    2bd2:	00 d0       	rcall	.+0      	; 0x2bd4 <planMetric+0x86>
    2bd4:	8d e6       	ldi	r24, 0x6D	; 109
    2bd6:	92 e0       	ldi	r25, 0x02	; 2
    2bd8:	ed b7       	in	r30, 0x3d	; 61
    2bda:	fe b7       	in	r31, 0x3e	; 62
    2bdc:	92 83       	std	Z+2, r25	; 0x02
    2bde:	81 83       	std	Z+1, r24	; 0x01
    2be0:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
    2be8:	08 95       	ret

00002bea <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2bea:	cf 92       	push	r12
    2bec:	df 92       	push	r13
    2bee:	ef 92       	push	r14
    2bf0:	ff 92       	push	r15
    2bf2:	0f 93       	push	r16
    2bf4:	1f 93       	push	r17
    2bf6:	df 93       	push	r29
    2bf8:	cf 93       	push	r28
    2bfa:	0f 92       	push	r0
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2c00:	80 91 14 07 	lds	r24, 0x0714
    2c04:	f8 2e       	mov	r15, r24
    2c06:	f6 94       	lsr	r15
    2c08:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2c0a:	98 2f       	mov	r25, r24
    2c0c:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2c0e:	00 91 12 06 	lds	r16, 0x0612
    2c12:	cc 24       	eor	r12, r12
    2c14:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2c16:	f6 01       	movw	r30, r12
    2c18:	ef 5f       	subi	r30, 0xFF	; 255
    2c1a:	f9 4f       	sbci	r31, 0xF9	; 249
    2c1c:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2c1e:	ef 2d       	mov	r30, r15
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	ee 0f       	add	r30, r30
    2c24:	ff 1f       	adc	r31, r31
    2c26:	ee 0f       	add	r30, r30
    2c28:	ff 1f       	adc	r31, r31
    2c2a:	e9 0f       	add	r30, r25
    2c2c:	f1 1d       	adc	r31, r1
    2c2e:	ed 50       	subi	r30, 0x0D	; 13
    2c30:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2c32:	80 81       	ld	r24, Z
    2c34:	60 2f       	mov	r22, r16
    2c36:	41 e0       	ldi	r20, 0x01	; 1
    2c38:	99 83       	std	Y+1, r25	; 0x01
    2c3a:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2c3e:	f6 01       	movw	r30, r12
    2c40:	e8 56       	subi	r30, 0x68	; 104
    2c42:	f8 4f       	sbci	r31, 0xF8	; 248
    2c44:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2c46:	99 81       	ldd	r25, Y+1	; 0x01
    2c48:	12 30       	cpi	r17, 0x02	; 2
    2c4a:	89 f4       	brne	.+34     	; 0x2c6e <getGateways+0x84>
			switch(curOrient){
    2c4c:	01 30       	cpi	r16, 0x01	; 1
    2c4e:	49 f0       	breq	.+18     	; 0x2c62 <getGateways+0x78>
    2c50:	01 30       	cpi	r16, 0x01	; 1
    2c52:	28 f0       	brcs	.+10     	; 0x2c5e <getGateways+0x74>
    2c54:	02 30       	cpi	r16, 0x02	; 2
    2c56:	39 f0       	breq	.+14     	; 0x2c66 <getGateways+0x7c>
    2c58:	03 30       	cpi	r16, 0x03	; 3
    2c5a:	89 f4       	brne	.+34     	; 0x2c7e <getGateways+0x94>
    2c5c:	06 c0       	rjmp	.+12     	; 0x2c6a <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    2c5e:	fa 94       	dec	r15
    2c60:	0e c0       	rjmp	.+28     	; 0x2c7e <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    2c62:	9f 5f       	subi	r25, 0xFF	; 255
    2c64:	0c c0       	rjmp	.+24     	; 0x2c7e <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    2c66:	f3 94       	inc	r15
    2c68:	0a c0       	rjmp	.+20     	; 0x2c7e <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    2c6a:	91 50       	subi	r25, 0x01	; 1
    2c6c:	08 c0       	rjmp	.+16     	; 0x2c7e <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    2c6e:	13 30       	cpi	r17, 0x03	; 3
    2c70:	11 f4       	brne	.+4      	; 0x2c76 <getGateways+0x8c>
			curOrient++;
    2c72:	0f 5f       	subi	r16, 0xFF	; 255
    2c74:	03 c0       	rjmp	.+6      	; 0x2c7c <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    2c76:	11 30       	cpi	r17, 0x01	; 1
    2c78:	11 f4       	brne	.+4      	; 0x2c7e <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    2c7a:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    2c7c:	03 70       	andi	r16, 0x03	; 3
    2c7e:	08 94       	sec
    2c80:	c1 1c       	adc	r12, r1
    2c82:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2c84:	8d e0       	ldi	r24, 0x0D	; 13
    2c86:	c8 16       	cp	r12, r24
    2c88:	d1 04       	cpc	r13, r1
    2c8a:	29 f6       	brne	.-118    	; 0x2c16 <getGateways+0x2c>
    2c8c:	cc 24       	eor	r12, r12
    2c8e:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2c90:	96 e7       	ldi	r25, 0x76	; 118
    2c92:	e9 2e       	mov	r14, r25
    2c94:	92 e0       	ldi	r25, 0x02	; 2
    2c96:	f9 2e       	mov	r15, r25
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2c98:	f6 01       	movw	r30, r12
    2c9a:	e8 56       	subi	r30, 0x68	; 104
    2c9c:	f8 4f       	sbci	r31, 0xF8	; 248
    2c9e:	00 81       	ld	r16, Z
		LCD_clear();
    2ca0:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2ca4:	20 2f       	mov	r18, r16
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	ad b7       	in	r26, 0x3d	; 61
    2caa:	be b7       	in	r27, 0x3e	; 62
    2cac:	54 97       	sbiw	r26, 0x14	; 20
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	be bf       	out	0x3e, r27	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	ad bf       	out	0x3d, r26	; 61
    2cb8:	ed b7       	in	r30, 0x3d	; 61
    2cba:	fe b7       	in	r31, 0x3e	; 62
    2cbc:	31 96       	adiw	r30, 0x01	; 1
    2cbe:	12 96       	adiw	r26, 0x02	; 2
    2cc0:	fc 92       	st	X, r15
    2cc2:	ee 92       	st	-X, r14
    2cc4:	11 97       	sbiw	r26, 0x01	; 1
    2cc6:	d3 82       	std	Z+3, r13	; 0x03
    2cc8:	c2 82       	std	Z+2, r12	; 0x02
    2cca:	11 27       	eor	r17, r17
    2ccc:	07 fd       	sbrc	r16, 7
    2cce:	10 95       	com	r17
    2cd0:	00 27       	eor	r16, r16
    2cd2:	11 0f       	add	r17, r17
    2cd4:	00 1f       	adc	r16, r16
    2cd6:	11 27       	eor	r17, r17
    2cd8:	15 83       	std	Z+5, r17	; 0x05
    2cda:	04 83       	std	Z+4, r16	; 0x04
    2cdc:	c9 01       	movw	r24, r18
    2cde:	b6 e0       	ldi	r27, 0x06	; 6
    2ce0:	96 95       	lsr	r25
    2ce2:	87 95       	ror	r24
    2ce4:	ba 95       	dec	r27
    2ce6:	e1 f7       	brne	.-8      	; 0x2ce0 <getGateways+0xf6>
    2ce8:	81 70       	andi	r24, 0x01	; 1
    2cea:	90 70       	andi	r25, 0x00	; 0
    2cec:	97 83       	std	Z+7, r25	; 0x07
    2cee:	86 83       	std	Z+6, r24	; 0x06
    2cf0:	c9 01       	movw	r24, r18
    2cf2:	a5 e0       	ldi	r26, 0x05	; 5
    2cf4:	96 95       	lsr	r25
    2cf6:	87 95       	ror	r24
    2cf8:	aa 95       	dec	r26
    2cfa:	e1 f7       	brne	.-8      	; 0x2cf4 <getGateways+0x10a>
    2cfc:	81 70       	andi	r24, 0x01	; 1
    2cfe:	90 70       	andi	r25, 0x00	; 0
    2d00:	91 87       	std	Z+9, r25	; 0x09
    2d02:	80 87       	std	Z+8, r24	; 0x08
    2d04:	c9 01       	movw	r24, r18
    2d06:	74 e0       	ldi	r23, 0x04	; 4
    2d08:	96 95       	lsr	r25
    2d0a:	87 95       	ror	r24
    2d0c:	7a 95       	dec	r23
    2d0e:	e1 f7       	brne	.-8      	; 0x2d08 <getGateways+0x11e>
    2d10:	81 70       	andi	r24, 0x01	; 1
    2d12:	90 70       	andi	r25, 0x00	; 0
    2d14:	93 87       	std	Z+11, r25	; 0x0b
    2d16:	82 87       	std	Z+10, r24	; 0x0a
    2d18:	c9 01       	movw	r24, r18
    2d1a:	63 e0       	ldi	r22, 0x03	; 3
    2d1c:	96 95       	lsr	r25
    2d1e:	87 95       	ror	r24
    2d20:	6a 95       	dec	r22
    2d22:	e1 f7       	brne	.-8      	; 0x2d1c <getGateways+0x132>
    2d24:	81 70       	andi	r24, 0x01	; 1
    2d26:	90 70       	andi	r25, 0x00	; 0
    2d28:	95 87       	std	Z+13, r25	; 0x0d
    2d2a:	84 87       	std	Z+12, r24	; 0x0c
    2d2c:	c9 01       	movw	r24, r18
    2d2e:	96 95       	lsr	r25
    2d30:	87 95       	ror	r24
    2d32:	96 95       	lsr	r25
    2d34:	87 95       	ror	r24
    2d36:	81 70       	andi	r24, 0x01	; 1
    2d38:	90 70       	andi	r25, 0x00	; 0
    2d3a:	97 87       	std	Z+15, r25	; 0x0f
    2d3c:	86 87       	std	Z+14, r24	; 0x0e
    2d3e:	c9 01       	movw	r24, r18
    2d40:	96 95       	lsr	r25
    2d42:	87 95       	ror	r24
    2d44:	81 70       	andi	r24, 0x01	; 1
    2d46:	90 70       	andi	r25, 0x00	; 0
    2d48:	91 8b       	std	Z+17, r25	; 0x11
    2d4a:	80 8b       	std	Z+16, r24	; 0x10
    2d4c:	21 70       	andi	r18, 0x01	; 1
    2d4e:	30 70       	andi	r19, 0x00	; 0
    2d50:	33 8b       	std	Z+19, r19	; 0x13
    2d52:	22 8b       	std	Z+18, r18	; 0x12
    2d54:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
		TMRSRVC_delay(1000);//wait 1 second
    2d58:	ed b7       	in	r30, 0x3d	; 61
    2d5a:	fe b7       	in	r31, 0x3e	; 62
    2d5c:	74 96       	adiw	r30, 0x14	; 20
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	fe bf       	out	0x3e, r31	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	ed bf       	out	0x3d, r30	; 61
    2d68:	88 ee       	ldi	r24, 0xE8	; 232
    2d6a:	93 e0       	ldi	r25, 0x03	; 3
    2d6c:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
    2d70:	08 94       	sec
    2d72:	c1 1c       	adc	r12, r1
    2d74:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2d76:	fd e0       	ldi	r31, 0x0D	; 13
    2d78:	cf 16       	cp	r12, r31
    2d7a:	d1 04       	cpc	r13, r1
    2d7c:	09 f0       	breq	.+2      	; 0x2d80 <getGateways+0x196>
    2d7e:	8c cf       	rjmp	.-232    	; 0x2c98 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    2d80:	0f 90       	pop	r0
    2d82:	cf 91       	pop	r28
    2d84:	df 91       	pop	r29
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	ff 90       	pop	r15
    2d8c:	ef 90       	pop	r14
    2d8e:	df 90       	pop	r13
    2d90:	cf 90       	pop	r12
    2d92:	08 95       	ret

00002d94 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2d94:	8f 92       	push	r8
    2d96:	af 92       	push	r10
    2d98:	bf 92       	push	r11
    2d9a:	cf 92       	push	r12
    2d9c:	df 92       	push	r13
    2d9e:	ef 92       	push	r14
    2da0:	ff 92       	push	r15
    2da2:	0f 93       	push	r16
    2da4:	1f 93       	push	r17
	char isDone = 0;
	pidController(0,RESET);
    2da6:	60 e0       	ldi	r22, 0x00	; 0
    2da8:	70 e0       	ldi	r23, 0x00	; 0
    2daa:	80 e0       	ldi	r24, 0x00	; 0
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	41 e0       	ldi	r20, 0x01	; 1
    2db0:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
	switch(currentMove){
    2db4:	80 91 fb 04 	lds	r24, 0x04FB
    2db8:	82 30       	cpi	r24, 0x02	; 2
    2dba:	69 f0       	breq	.+26     	; 0x2dd6 <moveMap+0x42>
    2dbc:	83 30       	cpi	r24, 0x03	; 3
    2dbe:	c1 f0       	breq	.+48     	; 0x2df0 <moveMap+0x5c>
    2dc0:	81 30       	cpi	r24, 0x01	; 1
    2dc2:	d1 f5       	brne	.+116    	; 0x2e38 <moveMap+0xa4>
		case MOVE_LEFT:
			move_arc_stwt(POINT_TURN, LEFT_TURN, 30, 30, 0);
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	70 e0       	ldi	r23, 0x00	; 0
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	44 e8       	ldi	r20, 0x84	; 132
    2dd2:	51 ec       	ldi	r21, 0xC1	; 193
    2dd4:	15 c0       	rjmp	.+42     	; 0x2e00 <moveMap+0x6c>
			TMRSRVC_delay(BRAKE_DELAY);
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
    2dd6:	60 e0       	ldi	r22, 0x00	; 0
    2dd8:	70 e0       	ldi	r23, 0x00	; 0
    2dda:	85 ea       	ldi	r24, 0xA5	; 165
    2ddc:	93 e4       	ldi	r25, 0x43	; 67
    2dde:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <setOdometry>
			while(!isDone){
				checkIR();
    2de2:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <checkIR>
				isDone = moveWall();
    2de6:	0e 94 a5 11 	call	0x234a	; 0x234a <moveWall>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
			while(!isDone){
    2dea:	88 23       	and	r24, r24
    2dec:	d1 f3       	breq	.-12     	; 0x2de2 <moveMap+0x4e>
    2dee:	17 c0       	rjmp	.+46     	; 0x2e1e <moveMap+0x8a>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			
			// move_arc_stwt(NO_TURN, 45, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 30, 30, 0);
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	70 e0       	ldi	r23, 0x00	; 0
    2df4:	80 e0       	ldi	r24, 0x00	; 0
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	44 e8       	ldi	r20, 0x84	; 132
    2dfe:	51 e4       	ldi	r21, 0x41	; 65
    2e00:	0f 2e       	mov	r0, r31
    2e02:	f0 e0       	ldi	r31, 0x00	; 0
    2e04:	ef 2e       	mov	r14, r31
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	ff 2e       	mov	r15, r31
    2e0a:	f0 ef       	ldi	r31, 0xF0	; 240
    2e0c:	0f 2f       	mov	r16, r31
    2e0e:	f1 e4       	ldi	r31, 0x41	; 65
    2e10:	1f 2f       	mov	r17, r31
    2e12:	f0 2d       	mov	r31, r0
    2e14:	57 01       	movw	r10, r14
    2e16:	68 01       	movw	r12, r16
    2e18:	88 24       	eor	r8, r8
    2e1a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <move_arc_stwt>
			
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_ON);
    2e1e:	82 e0       	ldi	r24, 0x02	; 2
    2e20:	61 e0       	ldi	r22, 0x01	; 1
    2e22:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <STEPPER_stop>
			TMRSRVC_delay(BRAKE_DELAY);
    2e26:	82 e3       	ldi	r24, 0x32	; 50
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    2e2e:	82 e0       	ldi	r24, 0x02	; 2
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <STEPPER_stop>
    2e36:	0b c0       	rjmp	.+22     	; 0x2e4e <moveMap+0xba>
			break;
		default:
			LCD_printf("Whatz2?!");
    2e38:	00 d0       	rcall	.+0      	; 0x2e3a <moveMap+0xa6>
    2e3a:	84 e6       	ldi	r24, 0x64	; 100
    2e3c:	92 e0       	ldi	r25, 0x02	; 2
    2e3e:	ed b7       	in	r30, 0x3d	; 61
    2e40:	fe b7       	in	r31, 0x3e	; 62
    2e42:	92 83       	std	Z+2, r25	; 0x02
    2e44:	81 83       	std	Z+1, r24	; 0x01
    2e46:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
			break;
	}
}
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	ff 90       	pop	r15
    2e54:	ef 90       	pop	r14
    2e56:	df 90       	pop	r13
    2e58:	cf 90       	pop	r12
    2e5a:	bf 90       	pop	r11
    2e5c:	af 90       	pop	r10
    2e5e:	8f 90       	pop	r8
    2e60:	08 95       	ret

00002e62 <map>:
* Input Variables:	none
* Output Return:	none
* Overview:			Makes the robot map the world
********************************************************************/
void map (void)
{
    2e62:	ef 92       	push	r14
    2e64:	ff 92       	push	r15
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	cf 93       	push	r28
    2e6c:	df 93       	push	r29
	// Initialize State
	isMapping = 1;
    2e6e:	81 e0       	ldi	r24, 0x01	; 1
    2e70:	80 93 ad 07 	sts	0x07AD, r24
			break;
		}
		
		//Print Map
		LCD_clear();
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    2e74:	e8 e9       	ldi	r30, 0x98	; 152
    2e76:	ee 2e       	mov	r14, r30
    2e78:	e2 e0       	ldi	r30, 0x02	; 2
    2e7a:	fe 2e       	mov	r15, r30
    2e7c:	26 c1       	rjmp	.+588    	; 0x30ca <map+0x268>
	
	// Mapping Loop
	while(isMapping)
	{	
		//Sense
		checkIR();	
    2e7e:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <checkIR>
		checkWorld();
    2e82:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		//Record
		setGateways();
    2e86:	0e 94 14 14 	call	0x2828	; 0x2828 <setGateways>
				
		//Plan using the Map
		planMap();
    2e8a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <planMap>
		
		//Act on the Map
		moveMap();
    2e8e:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <moveMap>
		
		//Shift the Map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    2e92:	80 91 14 07 	lds	r24, 0x0714
    2e96:	60 91 fb 04 	lds	r22, 0x04FB
    2e9a:	40 91 12 06 	lds	r20, 0x0612
    2e9e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <shiftMap>
    2ea2:	80 93 14 07 	sts	0x0714, r24
		
		//Break?
		isMapping = !((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    2ea6:	90 91 15 07 	lds	r25, 0x0715
    2eaa:	98 17       	cp	r25, r24
    2eac:	41 f4       	brne	.+16     	; 0x2ebe <map+0x5c>
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	90 91 11 06 	lds	r25, 0x0611
    2eb6:	80 91 12 06 	lds	r24, 0x0612
    2eba:	98 17       	cp	r25, r24
    2ebc:	11 f0       	breq	.+4      	; 0x2ec2 <map+0x60>
    2ebe:	21 e0       	ldi	r18, 0x01	; 1
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	20 93 ad 07 	sts	0x07AD, r18
		if(!isMapping){			
    2ec6:	22 23       	and	r18, r18
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <map+0x6a>
    2eca:	04 c1       	rjmp	.+520    	; 0x30d4 <map+0x272>
			break;
		}
		
		//Print Map
		LCD_clear();
    2ecc:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    2ed0:	80 91 fb 04 	lds	r24, 0x04FB
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	60 91 14 07 	lds	r22, 0x0714
    2edc:	46 2f       	mov	r20, r22
    2ede:	50 e0       	ldi	r21, 0x00	; 0
    2ee0:	00 91 12 06 	lds	r16, 0x0612
    2ee4:	a0 2f       	mov	r26, r16
    2ee6:	b0 e0       	ldi	r27, 0x00	; 0
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	e2 97       	sbiw	r28, 0x32	; 50
    2eee:	0f b6       	in	r0, 0x3f	; 63
    2ef0:	f8 94       	cli
    2ef2:	de bf       	out	0x3e, r29	; 62
    2ef4:	0f be       	out	0x3f, r0	; 63
    2ef6:	cd bf       	out	0x3d, r28	; 61
    2ef8:	ed b7       	in	r30, 0x3d	; 61
    2efa:	fe b7       	in	r31, 0x3e	; 62
    2efc:	31 96       	adiw	r30, 0x01	; 1
    2efe:	fa 82       	std	Y+2, r15	; 0x02
    2f00:	e9 82       	std	Y+1, r14	; 0x01
    2f02:	99 27       	eor	r25, r25
    2f04:	87 fd       	sbrc	r24, 7
    2f06:	90 95       	com	r25
    2f08:	88 27       	eor	r24, r24
    2f0a:	99 0f       	add	r25, r25
    2f0c:	88 1f       	adc	r24, r24
    2f0e:	99 27       	eor	r25, r25
    2f10:	93 83       	std	Z+3, r25	; 0x03
    2f12:	82 83       	std	Z+2, r24	; 0x02
    2f14:	c9 01       	movw	r24, r18
    2f16:	16 e0       	ldi	r17, 0x06	; 6
    2f18:	96 95       	lsr	r25
    2f1a:	87 95       	ror	r24
    2f1c:	1a 95       	dec	r17
    2f1e:	e1 f7       	brne	.-8      	; 0x2f18 <map+0xb6>
    2f20:	81 70       	andi	r24, 0x01	; 1
    2f22:	90 70       	andi	r25, 0x00	; 0
    2f24:	95 83       	std	Z+5, r25	; 0x05
    2f26:	84 83       	std	Z+4, r24	; 0x04
    2f28:	c9 01       	movw	r24, r18
    2f2a:	75 e0       	ldi	r23, 0x05	; 5
    2f2c:	96 95       	lsr	r25
    2f2e:	87 95       	ror	r24
    2f30:	7a 95       	dec	r23
    2f32:	e1 f7       	brne	.-8      	; 0x2f2c <map+0xca>
    2f34:	81 70       	andi	r24, 0x01	; 1
    2f36:	90 70       	andi	r25, 0x00	; 0
    2f38:	97 83       	std	Z+7, r25	; 0x07
    2f3a:	86 83       	std	Z+6, r24	; 0x06
    2f3c:	c9 01       	movw	r24, r18
    2f3e:	14 e0       	ldi	r17, 0x04	; 4
    2f40:	96 95       	lsr	r25
    2f42:	87 95       	ror	r24
    2f44:	1a 95       	dec	r17
    2f46:	e1 f7       	brne	.-8      	; 0x2f40 <map+0xde>
    2f48:	81 70       	andi	r24, 0x01	; 1
    2f4a:	90 70       	andi	r25, 0x00	; 0
    2f4c:	91 87       	std	Z+9, r25	; 0x09
    2f4e:	80 87       	std	Z+8, r24	; 0x08
    2f50:	c9 01       	movw	r24, r18
    2f52:	73 e0       	ldi	r23, 0x03	; 3
    2f54:	96 95       	lsr	r25
    2f56:	87 95       	ror	r24
    2f58:	7a 95       	dec	r23
    2f5a:	e1 f7       	brne	.-8      	; 0x2f54 <map+0xf2>
    2f5c:	81 70       	andi	r24, 0x01	; 1
    2f5e:	90 70       	andi	r25, 0x00	; 0
    2f60:	93 87       	std	Z+11, r25	; 0x0b
    2f62:	82 87       	std	Z+10, r24	; 0x0a
    2f64:	c9 01       	movw	r24, r18
    2f66:	96 95       	lsr	r25
    2f68:	87 95       	ror	r24
    2f6a:	96 95       	lsr	r25
    2f6c:	87 95       	ror	r24
    2f6e:	81 70       	andi	r24, 0x01	; 1
    2f70:	90 70       	andi	r25, 0x00	; 0
    2f72:	95 87       	std	Z+13, r25	; 0x0d
    2f74:	84 87       	std	Z+12, r24	; 0x0c
    2f76:	c9 01       	movw	r24, r18
    2f78:	96 95       	lsr	r25
    2f7a:	87 95       	ror	r24
    2f7c:	81 70       	andi	r24, 0x01	; 1
    2f7e:	90 70       	andi	r25, 0x00	; 0
    2f80:	97 87       	std	Z+15, r25	; 0x0f
    2f82:	86 87       	std	Z+14, r24	; 0x0e
    2f84:	21 70       	andi	r18, 0x01	; 1
    2f86:	30 70       	andi	r19, 0x00	; 0
    2f88:	31 8b       	std	Z+17, r19	; 0x11
    2f8a:	20 8b       	std	Z+16, r18	; 0x10
    2f8c:	77 27       	eor	r23, r23
    2f8e:	67 fd       	sbrc	r22, 7
    2f90:	70 95       	com	r23
    2f92:	66 27       	eor	r22, r22
    2f94:	77 0f       	add	r23, r23
    2f96:	66 1f       	adc	r22, r22
    2f98:	77 27       	eor	r23, r23
    2f9a:	73 8b       	std	Z+19, r23	; 0x13
    2f9c:	62 8b       	std	Z+18, r22	; 0x12
    2f9e:	ca 01       	movw	r24, r20
    2fa0:	26 e0       	ldi	r18, 0x06	; 6
    2fa2:	96 95       	lsr	r25
    2fa4:	87 95       	ror	r24
    2fa6:	2a 95       	dec	r18
    2fa8:	e1 f7       	brne	.-8      	; 0x2fa2 <map+0x140>
    2faa:	81 70       	andi	r24, 0x01	; 1
    2fac:	90 70       	andi	r25, 0x00	; 0
    2fae:	95 8b       	std	Z+21, r25	; 0x15
    2fb0:	84 8b       	std	Z+20, r24	; 0x14
    2fb2:	ca 01       	movw	r24, r20
    2fb4:	15 e0       	ldi	r17, 0x05	; 5
    2fb6:	96 95       	lsr	r25
    2fb8:	87 95       	ror	r24
    2fba:	1a 95       	dec	r17
    2fbc:	e1 f7       	brne	.-8      	; 0x2fb6 <map+0x154>
    2fbe:	81 70       	andi	r24, 0x01	; 1
    2fc0:	90 70       	andi	r25, 0x00	; 0
    2fc2:	97 8b       	std	Z+23, r25	; 0x17
    2fc4:	86 8b       	std	Z+22, r24	; 0x16
    2fc6:	ca 01       	movw	r24, r20
    2fc8:	74 e0       	ldi	r23, 0x04	; 4
    2fca:	96 95       	lsr	r25
    2fcc:	87 95       	ror	r24
    2fce:	7a 95       	dec	r23
    2fd0:	e1 f7       	brne	.-8      	; 0x2fca <map+0x168>
    2fd2:	81 70       	andi	r24, 0x01	; 1
    2fd4:	90 70       	andi	r25, 0x00	; 0
    2fd6:	91 8f       	std	Z+25, r25	; 0x19
    2fd8:	80 8f       	std	Z+24, r24	; 0x18
    2fda:	ca 01       	movw	r24, r20
    2fdc:	63 e0       	ldi	r22, 0x03	; 3
    2fde:	96 95       	lsr	r25
    2fe0:	87 95       	ror	r24
    2fe2:	6a 95       	dec	r22
    2fe4:	e1 f7       	brne	.-8      	; 0x2fde <map+0x17c>
    2fe6:	81 70       	andi	r24, 0x01	; 1
    2fe8:	90 70       	andi	r25, 0x00	; 0
    2fea:	93 8f       	std	Z+27, r25	; 0x1b
    2fec:	82 8f       	std	Z+26, r24	; 0x1a
    2fee:	ca 01       	movw	r24, r20
    2ff0:	96 95       	lsr	r25
    2ff2:	87 95       	ror	r24
    2ff4:	96 95       	lsr	r25
    2ff6:	87 95       	ror	r24
    2ff8:	81 70       	andi	r24, 0x01	; 1
    2ffa:	90 70       	andi	r25, 0x00	; 0
    2ffc:	95 8f       	std	Z+29, r25	; 0x1d
    2ffe:	84 8f       	std	Z+28, r24	; 0x1c
    3000:	ca 01       	movw	r24, r20
    3002:	96 95       	lsr	r25
    3004:	87 95       	ror	r24
    3006:	81 70       	andi	r24, 0x01	; 1
    3008:	90 70       	andi	r25, 0x00	; 0
    300a:	97 8f       	std	Z+31, r25	; 0x1f
    300c:	86 8f       	std	Z+30, r24	; 0x1e
    300e:	41 70       	andi	r20, 0x01	; 1
    3010:	50 70       	andi	r21, 0x00	; 0
    3012:	51 a3       	std	Z+33, r21	; 0x21
    3014:	40 a3       	std	Z+32, r20	; 0x20
    3016:	11 27       	eor	r17, r17
    3018:	07 fd       	sbrc	r16, 7
    301a:	10 95       	com	r17
    301c:	00 27       	eor	r16, r16
    301e:	11 0f       	add	r17, r17
    3020:	00 1f       	adc	r16, r16
    3022:	11 27       	eor	r17, r17
    3024:	13 a3       	std	Z+35, r17	; 0x23
    3026:	02 a3       	std	Z+34, r16	; 0x22
    3028:	cd 01       	movw	r24, r26
    302a:	16 e0       	ldi	r17, 0x06	; 6
    302c:	96 95       	lsr	r25
    302e:	87 95       	ror	r24
    3030:	1a 95       	dec	r17
    3032:	e1 f7       	brne	.-8      	; 0x302c <map+0x1ca>
    3034:	81 70       	andi	r24, 0x01	; 1
    3036:	90 70       	andi	r25, 0x00	; 0
    3038:	95 a3       	std	Z+37, r25	; 0x25
    303a:	84 a3       	std	Z+36, r24	; 0x24
    303c:	cd 01       	movw	r24, r26
    303e:	75 e0       	ldi	r23, 0x05	; 5
    3040:	96 95       	lsr	r25
    3042:	87 95       	ror	r24
    3044:	7a 95       	dec	r23
    3046:	e1 f7       	brne	.-8      	; 0x3040 <map+0x1de>
    3048:	81 70       	andi	r24, 0x01	; 1
    304a:	90 70       	andi	r25, 0x00	; 0
    304c:	97 a3       	std	Z+39, r25	; 0x27
    304e:	86 a3       	std	Z+38, r24	; 0x26
    3050:	cd 01       	movw	r24, r26
    3052:	64 e0       	ldi	r22, 0x04	; 4
    3054:	96 95       	lsr	r25
    3056:	87 95       	ror	r24
    3058:	6a 95       	dec	r22
    305a:	e1 f7       	brne	.-8      	; 0x3054 <map+0x1f2>
    305c:	81 70       	andi	r24, 0x01	; 1
    305e:	90 70       	andi	r25, 0x00	; 0
    3060:	91 a7       	std	Z+41, r25	; 0x29
    3062:	80 a7       	std	Z+40, r24	; 0x28
    3064:	cd 01       	movw	r24, r26
    3066:	53 e0       	ldi	r21, 0x03	; 3
    3068:	96 95       	lsr	r25
    306a:	87 95       	ror	r24
    306c:	5a 95       	dec	r21
    306e:	e1 f7       	brne	.-8      	; 0x3068 <map+0x206>
    3070:	81 70       	andi	r24, 0x01	; 1
    3072:	90 70       	andi	r25, 0x00	; 0
    3074:	93 a7       	std	Z+43, r25	; 0x2b
    3076:	82 a7       	std	Z+42, r24	; 0x2a
    3078:	cd 01       	movw	r24, r26
    307a:	96 95       	lsr	r25
    307c:	87 95       	ror	r24
    307e:	96 95       	lsr	r25
    3080:	87 95       	ror	r24
    3082:	81 70       	andi	r24, 0x01	; 1
    3084:	90 70       	andi	r25, 0x00	; 0
    3086:	95 a7       	std	Z+45, r25	; 0x2d
    3088:	84 a7       	std	Z+44, r24	; 0x2c
    308a:	cd 01       	movw	r24, r26
    308c:	96 95       	lsr	r25
    308e:	87 95       	ror	r24
    3090:	81 70       	andi	r24, 0x01	; 1
    3092:	90 70       	andi	r25, 0x00	; 0
    3094:	97 a7       	std	Z+47, r25	; 0x2f
    3096:	86 a7       	std	Z+46, r24	; 0x2e
    3098:	a1 70       	andi	r26, 0x01	; 1
    309a:	b0 70       	andi	r27, 0x00	; 0
    309c:	b1 ab       	std	Z+49, r27	; 0x31
    309e:	a0 ab       	std	Z+48, r26	; 0x30
    30a0:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
		printMap(currentOrientation,currentCellWorld,RESET);
    30a4:	ed b7       	in	r30, 0x3d	; 61
    30a6:	fe b7       	in	r31, 0x3e	; 62
    30a8:	f2 96       	adiw	r30, 0x32	; 50
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	fe bf       	out	0x3e, r31	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	ed bf       	out	0x3d, r30	; 61
    30b4:	80 91 12 06 	lds	r24, 0x0612
    30b8:	60 91 14 07 	lds	r22, 0x0714
    30bc:	41 e0       	ldi	r20, 0x01	; 1
    30be:	0e 94 2c 11 	call	0x2258	; 0x2258 <printMap>
		TMRSRVC_delay(500);//wait 3 seconds
    30c2:	84 ef       	ldi	r24, 0xF4	; 244
    30c4:	91 e0       	ldi	r25, 0x01	; 1
    30c6:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
{
	// Initialize State
	isMapping = 1;
	
	// Mapping Loop
	while(isMapping)
    30ca:	80 91 ad 07 	lds	r24, 0x07AD
    30ce:	88 23       	and	r24, r24
    30d0:	09 f0       	breq	.+2      	; 0x30d4 <map+0x272>
    30d2:	d5 ce       	rjmp	.-598    	; 0x2e7e <map+0x1c>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
		printMap(currentOrientation,currentCellWorld,RESET);
		TMRSRVC_delay(500);//wait 3 seconds
	}
	
}
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	1f 91       	pop	r17
    30da:	0f 91       	pop	r16
    30dc:	ff 90       	pop	r15
    30de:	ef 90       	pop	r14
    30e0:	08 95       	ret

000030e2 <metric>:
* Input Variables:	none
* Output Return:	none
* Overview:			Moves the robot to the goal
********************************************************************/
void metric (void)
{
    30e2:	1f 93       	push	r17
	// currentCellWorld = 0b0000;
	currentGoalWorld = 15;
    30e4:	8f e0       	ldi	r24, 0x0F	; 15
    30e6:	80 93 83 05 	sts	0x0583, r24
	
	// Make metric map
	wavefrontMake();
    30ea:	0e 94 a9 13 	call	0x2752	; 0x2752 <wavefrontMake>
	
	// Initialize State
	isGoal = 0;
    30ee:	10 92 a9 07 	sts	0x07A9, r1
    30f2:	10 e0       	ldi	r17, 0x00	; 0
    30f4:	6b c0       	rjmp	.+214    	; 0x31cc <metric+0xea>
	unsigned char isSiren = 0;
	
	// Metric Loop 
	while(!isGoal){
		
		if(isSiren){
    30f6:	11 23       	and	r17, r17
    30f8:	41 f0       	breq	.+16     	; 0x310a <metric+0x28>
			SPKR_beep(500);
    30fa:	64 ef       	ldi	r22, 0xF4	; 244
    30fc:	71 e0       	ldi	r23, 0x01	; 1
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	0e 94 01 1c 	call	0x3802	; 0x3802 <SPKR_beep>
    3106:	10 e0       	ldi	r17, 0x00	; 0
    3108:	07 c0       	rjmp	.+14     	; 0x3118 <metric+0x36>
			isSiren = 0;
		}
		else{
			SPKR_beep(250);
    310a:	6a ef       	ldi	r22, 0xFA	; 250
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	80 e0       	ldi	r24, 0x00	; 0
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	0e 94 01 1c 	call	0x3802	; 0x3802 <SPKR_beep>
    3116:	11 e0       	ldi	r17, 0x01	; 1
			isSiren = 1;
		}
	
		LCD_clear();
    3118:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
		
		switch(currentOrientation){
    311c:	80 91 12 06 	lds	r24, 0x0612
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	51 f0       	breq	.+20     	; 0x3138 <metric+0x56>
    3124:	81 30       	cpi	r24, 0x01	; 1
    3126:	28 f0       	brcs	.+10     	; 0x3132 <metric+0x50>
    3128:	82 30       	cpi	r24, 0x02	; 2
    312a:	49 f0       	breq	.+18     	; 0x313e <metric+0x5c>
    312c:	83 30       	cpi	r24, 0x03	; 3
    312e:	71 f4       	brne	.+28     	; 0x314c <metric+0x6a>
    3130:	09 c0       	rjmp	.+18     	; 0x3144 <metric+0x62>
			case NORTH:
				LCD_printf("CurtOrent:NORTH\n");
    3132:	8b ee       	ldi	r24, 0xEB	; 235
    3134:	92 e0       	ldi	r25, 0x02	; 2
    3136:	08 c0       	rjmp	.+16     	; 0x3148 <metric+0x66>
				break;
			case EAST:
				LCD_printf("CurtOrent:EAST\n");
    3138:	8b ef       	ldi	r24, 0xFB	; 251
    313a:	92 e0       	ldi	r25, 0x02	; 2
    313c:	05 c0       	rjmp	.+10     	; 0x3148 <metric+0x66>
				break;
			case SOUTH:
				LCD_printf("CurtOrent:SOUTH\n");
    313e:	8a e0       	ldi	r24, 0x0A	; 10
    3140:	93 e0       	ldi	r25, 0x03	; 3
    3142:	02 c0       	rjmp	.+4      	; 0x3148 <metric+0x66>
				break;
			case WEST:
				LCD_printf("CurtOrent:WEST\n");
    3144:	8a e1       	ldi	r24, 0x1A	; 26
    3146:	93 e0       	ldi	r25, 0x03	; 3
    3148:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
			default:
				break;
		}
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    314c:	80 91 14 07 	lds	r24, 0x0714
    3150:	0e 94 3e 13 	call	0x267c	; 0x267c <fourNeighborSearch>
    3154:	80 93 a9 07 	sts	0x07A9, r24
		if(isGoal){
    3158:	88 23       	and	r24, r24
    315a:	e9 f5       	brne	.+122    	; 0x31d6 <metric+0xf4>
			break;
		}
				
		switch(nextOrientation){
    315c:	80 91 13 06 	lds	r24, 0x0613
    3160:	81 30       	cpi	r24, 0x01	; 1
    3162:	51 f0       	breq	.+20     	; 0x3178 <metric+0x96>
    3164:	81 30       	cpi	r24, 0x01	; 1
    3166:	28 f0       	brcs	.+10     	; 0x3172 <metric+0x90>
    3168:	82 30       	cpi	r24, 0x02	; 2
    316a:	49 f0       	breq	.+18     	; 0x317e <metric+0x9c>
    316c:	83 30       	cpi	r24, 0x03	; 3
    316e:	71 f4       	brne	.+28     	; 0x318c <metric+0xaa>
    3170:	09 c0       	rjmp	.+18     	; 0x3184 <metric+0xa2>
			case NORTH:
				LCD_printf("NextOrent:NORTH\n");
    3172:	89 e2       	ldi	r24, 0x29	; 41
    3174:	93 e0       	ldi	r25, 0x03	; 3
    3176:	08 c0       	rjmp	.+16     	; 0x3188 <metric+0xa6>
				break;
			case EAST:
				LCD_printf("NextOrent:EAST\n");
    3178:	89 e3       	ldi	r24, 0x39	; 57
    317a:	93 e0       	ldi	r25, 0x03	; 3
    317c:	05 c0       	rjmp	.+10     	; 0x3188 <metric+0xa6>
				break;
			case SOUTH:
				LCD_printf("NextOrent:SOUTH\n");
    317e:	88 e4       	ldi	r24, 0x48	; 72
    3180:	93 e0       	ldi	r25, 0x03	; 3
    3182:	02 c0       	rjmp	.+4      	; 0x3188 <metric+0xa6>
				break;
			case WEST:
				LCD_printf("NextOrent:WEST\n");
    3184:	88 e5       	ldi	r24, 0x58	; 88
    3186:	93 e0       	ldi	r25, 0x03	; 3
    3188:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
				break;
			default:
				break;
		}
		
		switch(currentMove){
    318c:	80 91 fb 04 	lds	r24, 0x04FB
    3190:	82 30       	cpi	r24, 0x02	; 2
    3192:	51 f0       	breq	.+20     	; 0x31a8 <metric+0xc6>
    3194:	83 30       	cpi	r24, 0x03	; 3
    3196:	29 f0       	breq	.+10     	; 0x31a2 <metric+0xc0>
    3198:	81 30       	cpi	r24, 0x01	; 1
    319a:	51 f4       	brne	.+20     	; 0x31b0 <metric+0xce>
			case MOVE_LEFT:
				LCD_printf("CurMOVE:LEFT\n");
    319c:	87 e6       	ldi	r24, 0x67	; 103
    319e:	93 e0       	ldi	r25, 0x03	; 3
    31a0:	05 c0       	rjmp	.+10     	; 0x31ac <metric+0xca>
				break;
			case MOVE_RIGHT:
				LCD_printf("CurMOVE:RIGHT\n");
    31a2:	84 e7       	ldi	r24, 0x74	; 116
    31a4:	93 e0       	ldi	r25, 0x03	; 3
    31a6:	02 c0       	rjmp	.+4      	; 0x31ac <metric+0xca>
				break;
			case MOVE_FORWARD:
				LCD_printf("CurMOVE:FORWARD\n");
    31a8:	82 e8       	ldi	r24, 0x82	; 130
    31aa:	93 e0       	ldi	r25, 0x03	; 3
    31ac:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
			default:
				break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    31b0:	0e 94 a7 15 	call	0x2b4e	; 0x2b4e <planMetric>
		
		// Act on the move
		moveMap();
    31b4:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    31b8:	80 91 14 07 	lds	r24, 0x0714
    31bc:	60 91 fb 04 	lds	r22, 0x04FB
    31c0:	40 91 12 06 	lds	r20, 0x0612
    31c4:	0e 94 71 14 	call	0x28e2	; 0x28e2 <shiftMap>
    31c8:	80 93 14 07 	sts	0x0714, r24
	// Initialize State
	isGoal = 0;
	unsigned char isSiren = 0;
	
	// Metric Loop 
	while(!isGoal){
    31cc:	80 91 a9 07 	lds	r24, 0x07A9
    31d0:	88 23       	and	r24, r24
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <metric+0xf4>
    31d4:	90 cf       	rjmp	.-224    	; 0x30f6 <metric+0x14>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
		// TMRSRVC_delay(2000);//wait 1 seconds
	}
	SPKR_beep(0);
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	70 e0       	ldi	r23, 0x00	; 0
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	0e 94 01 1c 	call	0x3802	; 0x3802 <SPKR_beep>
}
    31e2:	1f 91       	pop	r17
    31e4:	08 95       	ret

000031e6 <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    31e6:	1f 93       	push	r17
	// initialize the robot
	initializeRobot();
    31e8:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <initializeRobot>
	currentOrientation = NORTH;
    31ec:	10 92 12 06 	sts	0x0612, r1
	
	// Ask for Goal
	char isDone = 0;
	unsigned char btnHolder = UNPRESSED;
	LCD_clear();
    31f0:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
	LCD_printf("      Goal?\n\n\n\n");
    31f4:	82 e9       	ldi	r24, 0x92	; 146
    31f6:	93 e0       	ldi	r25, 0x03	; 3
    31f8:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
	while(!isDone){
		btnHolder = EnterTopoCommand();
    31fc:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
		switch(btnHolder){
    3200:	82 30       	cpi	r24, 0x02	; 2
    3202:	29 f0       	breq	.+10     	; 0x320e <CBOT_main+0x28>
    3204:	83 30       	cpi	r24, 0x03	; 3
    3206:	49 f0       	breq	.+18     	; 0x321a <CBOT_main+0x34>
    3208:	81 30       	cpi	r24, 0x01	; 1
    320a:	69 f4       	brne	.+26     	; 0x3226 <CBOT_main+0x40>
    320c:	02 c0       	rjmp	.+4      	; 0x3212 <CBOT_main+0x2c>
    320e:	11 e0       	ldi	r17, 0x01	; 1
    3210:	0b c0       	rjmp	.+22     	; 0x3228 <CBOT_main+0x42>
			case MOVE_LEFT:
				currentGoalWorld--;
    3212:	80 91 83 05 	lds	r24, 0x0583
    3216:	81 50       	subi	r24, 0x01	; 1
    3218:	03 c0       	rjmp	.+6      	; 0x3220 <CBOT_main+0x3a>
				break;
			case MOVE_FORWARD:
				isDone = 1;
				break;
			case MOVE_RIGHT:
				currentGoalWorld++;
    321a:	80 91 83 05 	lds	r24, 0x0583
    321e:	8f 5f       	subi	r24, 0xFF	; 255
				currentGoalWorld = currentGoalWorld&0b1111;
    3220:	8f 70       	andi	r24, 0x0F	; 15
    3222:	80 93 83 05 	sts	0x0583, r24
    3226:	10 e0       	ldi	r17, 0x00	; 0
				break;
			default:
				break;
		}
		printMap(currentOrientation,currentGoalWorld,RESET);
    3228:	80 91 12 06 	lds	r24, 0x0612
    322c:	60 91 83 05 	lds	r22, 0x0583
    3230:	41 e0       	ldi	r20, 0x01	; 1
    3232:	0e 94 2c 11 	call	0x2258	; 0x2258 <printMap>
		TMRSRVC_delay(100);//wait .1 seconds
    3236:	84 e6       	ldi	r24, 0x64	; 100
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
	// Ask for Goal
	char isDone = 0;
	unsigned char btnHolder = UNPRESSED;
	LCD_clear();
	LCD_printf("      Goal?\n\n\n\n");
	while(!isDone){
    323e:	11 23       	and	r17, r17
    3240:	e9 f2       	breq	.-70     	; 0x31fc <CBOT_main+0x16>
	}
	
	// Ask for starting orentation
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
    3242:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
	LCD_printf("      Orent?\n\n\n\n");
    3246:	81 ea       	ldi	r24, 0xA1	; 161
    3248:	93 e0       	ldi	r25, 0x03	; 3
    324a:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
	while(!isDone){
		btnHolder = EnterTopoCommand();
    324e:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
		switch(btnHolder){
    3252:	82 30       	cpi	r24, 0x02	; 2
    3254:	29 f0       	breq	.+10     	; 0x3260 <CBOT_main+0x7a>
    3256:	83 30       	cpi	r24, 0x03	; 3
    3258:	49 f0       	breq	.+18     	; 0x326c <CBOT_main+0x86>
    325a:	81 30       	cpi	r24, 0x01	; 1
    325c:	69 f4       	brne	.+26     	; 0x3278 <CBOT_main+0x92>
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <CBOT_main+0x7e>
    3260:	11 e0       	ldi	r17, 0x01	; 1
    3262:	0b c0       	rjmp	.+22     	; 0x327a <CBOT_main+0x94>
			case MOVE_LEFT:
				// If we move left
				// shift our oriention CCW
				currentOrientation--;
    3264:	80 91 12 06 	lds	r24, 0x0612
    3268:	81 50       	subi	r24, 0x01	; 1
    326a:	03 c0       	rjmp	.+6      	; 0x3272 <CBOT_main+0x8c>
				isDone = 1;
				break;
			case MOVE_RIGHT:
				// If we move right
				// shift our oriention CW
				currentOrientation++;
    326c:	80 91 12 06 	lds	r24, 0x0612
    3270:	8f 5f       	subi	r24, 0xFF	; 255
				currentOrientation = currentOrientation&0b11;
    3272:	83 70       	andi	r24, 0x03	; 3
    3274:	80 93 12 06 	sts	0x0612, r24
    3278:	10 e0       	ldi	r17, 0x00	; 0
				break;
			default:
				break;
		}
		printMap(currentOrientation,currentGoalWorld,RESET);
    327a:	80 91 12 06 	lds	r24, 0x0612
    327e:	60 91 83 05 	lds	r22, 0x0583
    3282:	41 e0       	ldi	r20, 0x01	; 1
    3284:	0e 94 2c 11 	call	0x2258	; 0x2258 <printMap>
		TMRSRVC_delay(100);//wait .1 seconds
    3288:	84 e6       	ldi	r24, 0x64	; 100
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
	// Ask for starting orentation
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
	LCD_printf("      Orent?\n\n\n\n");
	while(!isDone){
    3290:	11 23       	and	r17, r17
    3292:	e9 f2       	breq	.-70     	; 0x324e <CBOT_main+0x68>
	}
	
	// Ask to start
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
    3294:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
	LCD_printf("      Start?\n\n\n\n");
    3298:	81 eb       	ldi	r24, 0xB1	; 177
    329a:	93 e0       	ldi	r25, 0x03	; 3
    329c:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
	while(!isDone){
		btnHolder = EnterTopoCommand();
    32a0:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
		switch(btnHolder){
    32a4:	82 30       	cpi	r24, 0x02	; 2
    32a6:	11 f4       	brne	.+4      	; 0x32ac <CBOT_main+0xc6>
    32a8:	11 e0       	ldi	r17, 0x01	; 1
    32aa:	01 c0       	rjmp	.+2      	; 0x32ae <CBOT_main+0xc8>
    32ac:	10 e0       	ldi	r17, 0x00	; 0
			case MOVE_RIGHT:
				break;
			default:
				break;
		}
		printMap(currentOrientation,currentGoalWorld,RESET);
    32ae:	80 91 12 06 	lds	r24, 0x0612
    32b2:	60 91 83 05 	lds	r22, 0x0583
    32b6:	41 e0       	ldi	r20, 0x01	; 1
    32b8:	0e 94 2c 11 	call	0x2258	; 0x2258 <printMap>
		TMRSRVC_delay(100);//wait .1 seconds
    32bc:	84 e6       	ldi	r24, 0x64	; 100
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
	// Ask to start
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
	LCD_printf("      Start?\n\n\n\n");
	while(!isDone){
    32c4:	11 23       	and	r17, r17
    32c6:	61 f3       	breq	.-40     	; 0x32a0 <CBOT_main+0xba>
	
	// Locilize the Robot
	// localize();
	
	// Initialize State
	isLost = 1;
    32c8:	81 e0       	ldi	r24, 0x01	; 1
    32ca:	80 93 aa 07 	sts	0x07AA, r24
	oldMove = MOVE_STOP;
    32ce:	84 e0       	ldi	r24, 0x04	; 4
    32d0:	80 93 fc 04 	sts	0x04FC, r24
    32d4:	0c c0       	rjmp	.+24     	; 0x32ee <CBOT_main+0x108>
		if(!isLost){
			break;
		}
		
		//Sense Gateway
		checkIR();	
    32d6:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <checkIR>
		checkWorld();
    32da:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    32de:	0e 94 65 15 	call	0x2aca	; 0x2aca <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    32e2:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <localizeGateway>
    32e6:	80 93 aa 07 	sts	0x07AA, r24
		
		//Act on the Gateway
		moveMap();
    32ea:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <moveMap>
	// Initialize State
	isLost = 1;
	oldMove = MOVE_STOP;
	
	// Localization Loop 
	while(isLost)
    32ee:	80 91 aa 07 	lds	r24, 0x07AA
    32f2:	88 23       	and	r24, r24
    32f4:	81 f7       	brne	.-32     	; 0x32d6 <CBOT_main+0xf0>
		//Act on the Gateway
		moveMap();
	}
		
	// Update the currentOrientation using currentMove
	switch(currentMove){
    32f6:	80 91 fb 04 	lds	r24, 0x04FB
    32fa:	82 30       	cpi	r24, 0x02	; 2
    32fc:	e1 f0       	breq	.+56     	; 0x3336 <CBOT_main+0x150>
    32fe:	83 30       	cpi	r24, 0x03	; 3
    3300:	31 f0       	breq	.+12     	; 0x330e <CBOT_main+0x128>
    3302:	81 30       	cpi	r24, 0x01	; 1
    3304:	59 f4       	brne	.+22     	; 0x331c <CBOT_main+0x136>
		case MOVE_LEFT:
			// If we move left
			// shift our oriention CCW
			currentOrientation--;
    3306:	80 91 12 06 	lds	r24, 0x0612
    330a:	81 50       	subi	r24, 0x01	; 1
    330c:	03 c0       	rjmp	.+6      	; 0x3314 <CBOT_main+0x12e>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:
			// If we move right
			// shift our oriention CW
			currentOrientation++;
    330e:	80 91 12 06 	lds	r24, 0x0612
    3312:	8f 5f       	subi	r24, 0xFF	; 255
			currentOrientation = currentOrientation&0b11;
    3314:	83 70       	andi	r24, 0x03	; 3
    3316:	80 93 12 06 	sts	0x0612, r24
    331a:	0d c0       	rjmp	.+26     	; 0x3336 <CBOT_main+0x150>
			break;
		default:
			LCD_printf("Whatz2?!");
    331c:	00 d0       	rcall	.+0      	; 0x331e <CBOT_main+0x138>
    331e:	84 e6       	ldi	r24, 0x64	; 100
    3320:	92 e0       	ldi	r25, 0x02	; 2
    3322:	ad b7       	in	r26, 0x3d	; 61
    3324:	be b7       	in	r27, 0x3e	; 62
    3326:	12 96       	adiw	r26, 0x02	; 2
    3328:	9c 93       	st	X, r25
    332a:	8e 93       	st	-X, r24
    332c:	11 97       	sbiw	r26, 0x01	; 1
    332e:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
			break;
	}
	
		SPKR_beep(500);	
    3336:	64 ef       	ldi	r22, 0xF4	; 244
    3338:	71 e0       	ldi	r23, 0x01	; 1
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	0e 94 01 1c 	call	0x3802	; 0x3802 <SPKR_beep>
		// LCD_clear();
		// LCD_printf("LOLZ\nI'm found!");
		// TMRSRVC_delay(3000);//wait 3 seconds
		
		LCD_clear();
    3342:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
		LCD_printf("      New Map\n\n\n\n");
    3346:	81 ec       	ldi	r24, 0xC1	; 193
    3348:	93 e0       	ldi	r25, 0x03	; 3
    334a:	0e 94 08 37 	call	0x6e10	; 0x6e10 <puts>
		printMap(currentOrientation,currentCellWorld,RESET);
    334e:	80 91 12 06 	lds	r24, 0x0612
    3352:	60 91 14 07 	lds	r22, 0x0714
    3356:	41 e0       	ldi	r20, 0x01	; 1
    3358:	0e 94 2c 11 	call	0x2258	; 0x2258 <printMap>
		TMRSRVC_delay(1000);//wait 1 seconds
    335c:	88 ee       	ldi	r24, 0xE8	; 232
    335e:	93 e0       	ldi	r25, 0x03	; 3
    3360:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
		SPKR_beep(0);
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	70 e0       	ldi	r23, 0x00	; 0
    3368:	80 e0       	ldi	r24, 0x00	; 0
    336a:	90 e0       	ldi	r25, 0x00	; 0
    336c:	0e 94 01 1c 	call	0x3802	; 0x3802 <SPKR_beep>
		
		
	// currentCellWorld = 0;
	isFire = 0;
    3370:	10 92 ab 07 	sts	0x07AB, r1
    3374:	18 c0       	rjmp	.+48     	; 0x33a6 <CBOT_main+0x1c0>
	
	// Go firefight
	while(!isFire){
		//Sense Gateway
		checkIR();	
    3376:	0e 94 4e 0f 	call	0x1e9c	; 0x1e9c <checkIR>
		checkWorld();
    337a:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		isFire = checkFire();
    337e:	0e 94 2e 14 	call	0x285c	; 0x285c <checkFire>
    3382:	80 93 ab 07 	sts	0x07AB, r24
		if(isFire){
    3386:	88 23       	and	r24, r24
    3388:	91 f4       	brne	.+36     	; 0x33ae <CBOT_main+0x1c8>
			break;
		}
		
		// Plan using Map
		planMap();
    338a:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <planMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    338e:	80 91 14 07 	lds	r24, 0x0714
    3392:	60 91 fb 04 	lds	r22, 0x04FB
    3396:	40 91 12 06 	lds	r20, 0x0612
    339a:	0e 94 71 14 	call	0x28e2	; 0x28e2 <shiftMap>
    339e:	80 93 14 07 	sts	0x0714, r24
		
		// Act on the Map
		moveMap();
    33a2:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <moveMap>
		
	// currentCellWorld = 0;
	isFire = 0;
	
	// Go firefight
	while(!isFire){
    33a6:	80 91 ab 07 	lds	r24, 0x07AB
    33aa:	88 23       	and	r24, r24
    33ac:	21 f3       	breq	.-56     	; 0x3376 <CBOT_main+0x190>
	// LCD_clear();
	// LCD_printf("Fire = %i\n\n\n\n", currentFireCell);
	// TMRSRVC_delay(5000);
	
	// Moves the Robot to the goal
	metric();
    33ae:	0e 94 71 18 	call	0x30e2	; 0x30e2 <metric>
	
		// Stop when home is reached
		STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    33b2:	82 e0       	ldi	r24, 0x02	; 2
    33b4:	60 e0       	ldi	r22, 0x00	; 0
    33b6:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <STEPPER_stop>
		
		
		// Print that you are at home and the fire cell location
		LCD_clear();
    33ba:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
		LCD_printf("LOLZ\nI'm HOME\nFire at Cell: %i\n\n",currentFireCell);
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <CBOT_main+0x1da>
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <CBOT_main+0x1dc>
    33c2:	ed b7       	in	r30, 0x3d	; 61
    33c4:	fe b7       	in	r31, 0x3e	; 62
    33c6:	31 96       	adiw	r30, 0x01	; 1
    33c8:	82 ed       	ldi	r24, 0xD2	; 210
    33ca:	93 e0       	ldi	r25, 0x03	; 3
    33cc:	ad b7       	in	r26, 0x3d	; 61
    33ce:	be b7       	in	r27, 0x3e	; 62
    33d0:	12 96       	adiw	r26, 0x02	; 2
    33d2:	9c 93       	st	X, r25
    33d4:	8e 93       	st	-X, r24
    33d6:	11 97       	sbiw	r26, 0x01	; 1
    33d8:	80 91 a4 07 	lds	r24, 0x07A4
    33dc:	82 83       	std	Z+2, r24	; 0x02
    33de:	13 82       	std	Z+3, r1	; 0x03
    33e0:	0e 94 f6 36 	call	0x6dec	; 0x6dec <printf>
		STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);// Beep when home is reached
    33e4:	0f 90       	pop	r0
    33e6:	0f 90       	pop	r0
    33e8:	0f 90       	pop	r0
    33ea:	0f 90       	pop	r0
    33ec:	82 e0       	ldi	r24, 0x02	; 2
    33ee:	60 e0       	ldi	r22, 0x00	; 0
    33f0:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <STEPPER_stop>
		SPKR_beep(500);
    33f4:	64 ef       	ldi	r22, 0xF4	; 244
    33f6:	71 e0       	ldi	r23, 0x01	; 1
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 01 1c 	call	0x3802	; 0x3802 <SPKR_beep>
		TMRSRVC_delay(3000);//wait 3 seconds
    3400:	88 eb       	ldi	r24, 0xB8	; 184
    3402:	9b e0       	ldi	r25, 0x0B	; 11
    3404:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
		SPKR_beep(0);
    3408:	60 e0       	ldi	r22, 0x00	; 0
    340a:	70 e0       	ldi	r23, 0x00	; 0
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	0e 94 01 1c 	call	0x3802	; 0x3802 <SPKR_beep>
		TMRSRVC_delay(7000);//wait 7 seconds
    3414:	88 e5       	ldi	r24, 0x58	; 88
    3416:	9b e1       	ldi	r25, 0x1B	; 27
    3418:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/

}// end the CBOT_main()
    341c:	1f 91       	pop	r17
    341e:	08 95       	ret

00003420 <ADC_open>:
    3420:	8f e0       	ldi	r24, 0x0F	; 15
    3422:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    3426:	88 23       	and	r24, r24
    3428:	31 f4       	brne	.+12     	; 0x3436 <ADC_open+0x16>
    342a:	0e 94 aa 22 	call	0x4554	; 0x4554 <__ADC_init>
    342e:	8f e0       	ldi	r24, 0x0F	; 15
    3430:	61 e0       	ldi	r22, 0x01	; 1
    3432:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    3436:	8f e0       	ldi	r24, 0x0F	; 15
    3438:	91 e0       	ldi	r25, 0x01	; 1
    343a:	08 95       	ret

0000343c <ADC_sample>:
    343c:	8f e0       	ldi	r24, 0x0F	; 15
    343e:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    3442:	81 30       	cpi	r24, 0x01	; 1
    3444:	19 f0       	breq	.+6      	; 0x344c <ADC_sample+0x10>
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	13 c0       	rjmp	.+38     	; 0x3472 <ADC_sample+0x36>
    344c:	80 91 7a 00 	lds	r24, 0x007A
    3450:	80 64       	ori	r24, 0x40	; 64
    3452:	80 93 7a 00 	sts	0x007A, r24
    3456:	80 91 7a 00 	lds	r24, 0x007A
    345a:	86 fd       	sbrc	r24, 6
    345c:	fc cf       	rjmp	.-8      	; 0x3456 <ADC_sample+0x1a>
    345e:	30 91 78 00 	lds	r19, 0x0078
    3462:	20 91 79 00 	lds	r18, 0x0079
    3466:	92 2f       	mov	r25, r18
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	23 2f       	mov	r18, r19
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	28 2b       	or	r18, r24
    3470:	39 2b       	or	r19, r25
    3472:	c9 01       	movw	r24, r18
    3474:	08 95       	ret

00003476 <ADC_set_channel>:
    3476:	58 2f       	mov	r21, r24
    3478:	80 91 03 04 	lds	r24, 0x0403
    347c:	88 30       	cpi	r24, 0x08	; 8
    347e:	d8 f4       	brcc	.+54     	; 0x34b6 <ADC_set_channel+0x40>
    3480:	40 91 7e 00 	lds	r20, 0x007E
    3484:	21 e0       	ldi	r18, 0x01	; 1
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	b9 01       	movw	r22, r18
    348a:	02 c0       	rjmp	.+4      	; 0x3490 <ADC_set_channel+0x1a>
    348c:	66 0f       	add	r22, r22
    348e:	77 1f       	adc	r23, r23
    3490:	8a 95       	dec	r24
    3492:	e2 f7       	brpl	.-8      	; 0x348c <ADC_set_channel+0x16>
    3494:	cb 01       	movw	r24, r22
    3496:	80 95       	com	r24
    3498:	84 23       	and	r24, r20
    349a:	80 93 7e 00 	sts	0x007E, r24
    349e:	80 91 7e 00 	lds	r24, 0x007E
    34a2:	05 2e       	mov	r0, r21
    34a4:	02 c0       	rjmp	.+4      	; 0x34aa <ADC_set_channel+0x34>
    34a6:	22 0f       	add	r18, r18
    34a8:	33 1f       	adc	r19, r19
    34aa:	0a 94       	dec	r0
    34ac:	e2 f7       	brpl	.-8      	; 0x34a6 <ADC_set_channel+0x30>
    34ae:	82 2b       	or	r24, r18
    34b0:	80 93 7e 00 	sts	0x007E, r24
    34b4:	0d c0       	rjmp	.+26     	; 0x34d0 <ADC_set_channel+0x5a>
    34b6:	20 91 7e 00 	lds	r18, 0x007E
    34ba:	81 e0       	ldi	r24, 0x01	; 1
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	05 2e       	mov	r0, r21
    34c0:	02 c0       	rjmp	.+4      	; 0x34c6 <ADC_set_channel+0x50>
    34c2:	88 0f       	add	r24, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	0a 94       	dec	r0
    34c8:	e2 f7       	brpl	.-8      	; 0x34c2 <ADC_set_channel+0x4c>
    34ca:	28 2b       	or	r18, r24
    34cc:	20 93 7e 00 	sts	0x007E, r18
    34d0:	50 93 03 04 	sts	0x0403, r21
    34d4:	80 91 7c 00 	lds	r24, 0x007C
    34d8:	5f 71       	andi	r21, 0x1F	; 31
    34da:	80 7e       	andi	r24, 0xE0	; 224
    34dc:	85 2b       	or	r24, r21
    34de:	80 93 7c 00 	sts	0x007C, r24
    34e2:	08 95       	ret

000034e4 <ADC_set_VREF>:
    34e4:	ec e7       	ldi	r30, 0x7C	; 124
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	90 81       	ld	r25, Z
    34ea:	82 95       	swap	r24
    34ec:	88 0f       	add	r24, r24
    34ee:	88 0f       	add	r24, r24
    34f0:	80 7c       	andi	r24, 0xC0	; 192
    34f2:	9f 73       	andi	r25, 0x3F	; 63
    34f4:	98 2b       	or	r25, r24
    34f6:	90 83       	st	Z, r25
    34f8:	08 95       	ret

000034fa <main>:
    34fa:	0e 94 c3 22 	call	0x4586	; 0x4586 <CBOT_ISR_init>
    34fe:	0e 94 b5 22 	call	0x456a	; 0x456a <CBOT_init>
    3502:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <CBOT_main>
    3506:	80 e0       	ldi	r24, 0x00	; 0
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	08 95       	ret

0000350c <LCD_clear>:
    350c:	0f 93       	push	r16
    350e:	1f 93       	push	r17
    3510:	80 e4       	ldi	r24, 0x40	; 64
    3512:	60 e0       	ldi	r22, 0x00	; 0
    3514:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    3518:	00 e0       	ldi	r16, 0x00	; 0
    351a:	80 2f       	mov	r24, r16
    351c:	60 e0       	ldi	r22, 0x00	; 0
    351e:	0e 94 4c 1b 	call	0x3698	; 0x3698 <LCD_set_PGC_addr>
    3522:	10 e0       	ldi	r17, 0x00	; 0
    3524:	80 e0       	ldi	r24, 0x00	; 0
    3526:	61 e0       	ldi	r22, 0x01	; 1
    3528:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    352c:	1f 5f       	subi	r17, 0xFF	; 255
    352e:	10 38       	cpi	r17, 0x80	; 128
    3530:	c9 f7       	brne	.-14     	; 0x3524 <LCD_clear+0x18>
    3532:	0f 5f       	subi	r16, 0xFF	; 255
    3534:	04 30       	cpi	r16, 0x04	; 4
    3536:	89 f7       	brne	.-30     	; 0x351a <LCD_clear+0xe>
    3538:	83 e0       	ldi	r24, 0x03	; 3
    353a:	60 e0       	ldi	r22, 0x00	; 0
    353c:	0e 94 45 1b 	call	0x368a	; 0x368a <LCD_set_next_PGC>
    3540:	1f 91       	pop	r17
    3542:	0f 91       	pop	r16
    3544:	08 95       	ret

00003546 <LCD_open>:
    3546:	0f 93       	push	r16
    3548:	1f 93       	push	r17
    354a:	82 e0       	ldi	r24, 0x02	; 2
    354c:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    3550:	88 23       	and	r24, r24
    3552:	11 f4       	brne	.+4      	; 0x3558 <LCD_open+0x12>
    3554:	82 e0       	ldi	r24, 0x02	; 2
    3556:	06 c0       	rjmp	.+12     	; 0x3564 <LCD_open+0x1e>
    3558:	81 e0       	ldi	r24, 0x01	; 1
    355a:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    355e:	88 23       	and	r24, r24
    3560:	19 f4       	brne	.+6      	; 0x3568 <LCD_open+0x22>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	6d c0       	rjmp	.+218    	; 0x3642 <LCD_open+0xfc>
    3568:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <__LCD_init>
    356c:	85 e0       	ldi	r24, 0x05	; 5
    356e:	61 e0       	ldi	r22, 0x01	; 1
    3570:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    3574:	8e ea       	ldi	r24, 0xAE	; 174
    3576:	60 e0       	ldi	r22, 0x00	; 0
    3578:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    357c:	82 ea       	ldi	r24, 0xA2	; 162
    357e:	60 e0       	ldi	r22, 0x00	; 0
    3580:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    3584:	80 ea       	ldi	r24, 0xA0	; 160
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    358c:	00 e5       	ldi	r16, 0x50	; 80
    358e:	13 ec       	ldi	r17, 0xC3	; 195
    3590:	c8 01       	movw	r24, r16
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	f1 f7       	brne	.-4      	; 0x3592 <LCD_open+0x4c>
    3596:	80 ec       	ldi	r24, 0xC0	; 192
    3598:	60 e0       	ldi	r22, 0x00	; 0
    359a:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    359e:	8f e2       	ldi	r24, 0x2F	; 47
    35a0:	60 e0       	ldi	r22, 0x00	; 0
    35a2:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    35a6:	81 e8       	ldi	r24, 0x81	; 129
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    35ae:	86 e1       	ldi	r24, 0x16	; 22
    35b0:	60 e0       	ldi	r22, 0x00	; 0
    35b2:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    35b6:	82 e2       	ldi	r24, 0x22	; 34
    35b8:	60 e0       	ldi	r22, 0x00	; 0
    35ba:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    35be:	c8 01       	movw	r24, r16
    35c0:	01 97       	sbiw	r24, 0x01	; 1
    35c2:	f1 f7       	brne	.-4      	; 0x35c0 <LCD_open+0x7a>
    35c4:	8f ea       	ldi	r24, 0xAF	; 175
    35c6:	60 e0       	ldi	r22, 0x00	; 0
    35c8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    35cc:	86 ea       	ldi	r24, 0xA6	; 166
    35ce:	60 e0       	ldi	r22, 0x00	; 0
    35d0:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    35d4:	85 ea       	ldi	r24, 0xA5	; 165
    35d6:	60 e0       	ldi	r22, 0x00	; 0
    35d8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	28 e8       	ldi	r18, 0x88	; 136
    35e2:	33 e1       	ldi	r19, 0x13	; 19
    35e4:	f9 01       	movw	r30, r18
    35e6:	31 97       	sbiw	r30, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <LCD_open+0xa0>
    35ea:	01 96       	adiw	r24, 0x01	; 1
    35ec:	43 e0       	ldi	r20, 0x03	; 3
    35ee:	88 3e       	cpi	r24, 0xE8	; 232
    35f0:	94 07       	cpc	r25, r20
    35f2:	c1 f7       	brne	.-16     	; 0x35e4 <LCD_open+0x9e>
    35f4:	83 eb       	ldi	r24, 0xB3	; 179
    35f6:	60 e0       	ldi	r22, 0x00	; 0
    35f8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    35fc:	80 e4       	ldi	r24, 0x40	; 64
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    3604:	83 e0       	ldi	r24, 0x03	; 3
    3606:	60 e0       	ldi	r22, 0x00	; 0
    3608:	0e 94 4c 1b 	call	0x3698	; 0x3698 <LCD_set_PGC_addr>
    360c:	83 e0       	ldi	r24, 0x03	; 3
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	0e 94 45 1b 	call	0x368a	; 0x368a <LCD_set_next_PGC>
    3614:	10 92 fc 07 	sts	0x07FC, r1
    3618:	10 92 fe 07 	sts	0x07FE, r1
    361c:	10 92 fd 07 	sts	0x07FD, r1
    3620:	8a e4       	ldi	r24, 0x4A	; 74
    3622:	94 e0       	ldi	r25, 0x04	; 4
    3624:	90 93 2d 08 	sts	0x082D, r25
    3628:	80 93 2c 08 	sts	0x082C, r24
    362c:	88 e1       	ldi	r24, 0x18	; 24
    362e:	0e 94 24 1b 	call	0x3648	; 0x3648 <LCD_set_backlight>
    3632:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
    3636:	84 ea       	ldi	r24, 0xA4	; 164
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    363e:	85 e0       	ldi	r24, 0x05	; 5
    3640:	91 e0       	ldi	r25, 0x01	; 1
    3642:	1f 91       	pop	r17
    3644:	0f 91       	pop	r16
    3646:	08 95       	ret

00003648 <LCD_set_backlight>:
    3648:	1f 93       	push	r17
    364a:	18 2f       	mov	r17, r24
    364c:	85 e0       	ldi	r24, 0x05	; 5
    364e:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    3652:	81 30       	cpi	r24, 0x01	; 1
    3654:	c1 f4       	brne	.+48     	; 0x3686 <LCD_set_backlight+0x3e>
    3656:	87 e0       	ldi	r24, 0x07	; 7
    3658:	0e 94 a1 1b 	call	0x3742	; 0x3742 <SPI_set_slave_addr>
    365c:	82 e0       	ldi	r24, 0x02	; 2
    365e:	6a e0       	ldi	r22, 0x0A	; 10
    3660:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <SPI_transmit>
    3664:	82 e0       	ldi	r24, 0x02	; 2
    3666:	61 eb       	ldi	r22, 0xB1	; 177
    3668:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <SPI_transmit>
    366c:	61 2f       	mov	r22, r17
    366e:	11 32       	cpi	r17, 0x21	; 33
    3670:	08 f0       	brcs	.+2      	; 0x3674 <LCD_set_backlight+0x2c>
    3672:	60 e2       	ldi	r22, 0x20	; 32
    3674:	82 e0       	ldi	r24, 0x02	; 2
    3676:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <SPI_transmit>
    367a:	89 ee       	ldi	r24, 0xE9	; 233
    367c:	8a 95       	dec	r24
    367e:	f1 f7       	brne	.-4      	; 0x367c <LCD_set_backlight+0x34>
    3680:	87 e0       	ldi	r24, 0x07	; 7
    3682:	0e 94 a1 1b 	call	0x3742	; 0x3742 <SPI_set_slave_addr>
    3686:	1f 91       	pop	r17
    3688:	08 95       	ret

0000368a <LCD_set_next_PGC>:
    368a:	83 70       	andi	r24, 0x03	; 3
    368c:	6f 77       	andi	r22, 0x7F	; 127
    368e:	60 93 fa 07 	sts	0x07FA, r22
    3692:	80 93 fb 07 	sts	0x07FB, r24
    3696:	08 95       	ret

00003698 <LCD_set_PGC_addr>:
    3698:	0f 93       	push	r16
    369a:	1f 93       	push	r17
    369c:	06 2f       	mov	r16, r22
    369e:	16 2f       	mov	r17, r22
    36a0:	1f 77       	andi	r17, 0x7F	; 127
    36a2:	83 70       	andi	r24, 0x03	; 3
    36a4:	80 6b       	ori	r24, 0xB0	; 176
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    36ac:	12 95       	swap	r17
    36ae:	1f 70       	andi	r17, 0x0F	; 15
    36b0:	81 2f       	mov	r24, r17
    36b2:	80 61       	ori	r24, 0x10	; 16
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    36ba:	80 2f       	mov	r24, r16
    36bc:	8f 70       	andi	r24, 0x0F	; 15
    36be:	60 e0       	ldi	r22, 0x00	; 0
    36c0:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    36c4:	1f 91       	pop	r17
    36c6:	0f 91       	pop	r16
    36c8:	08 95       	ret

000036ca <LCD_write>:
    36ca:	0f 93       	push	r16
    36cc:	1f 93       	push	r17
    36ce:	08 2f       	mov	r16, r24
    36d0:	16 2f       	mov	r17, r22
    36d2:	85 e0       	ldi	r24, 0x05	; 5
    36d4:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    36d8:	81 30       	cpi	r24, 0x01	; 1
    36da:	79 f4       	brne	.+30     	; 0x36fa <LCD_write+0x30>
    36dc:	11 23       	and	r17, r17
    36de:	19 f0       	breq	.+6      	; 0x36e6 <LCD_write+0x1c>
    36e0:	11 30       	cpi	r17, 0x01	; 1
    36e2:	21 f4       	brne	.+8      	; 0x36ec <LCD_write+0x22>
    36e4:	02 c0       	rjmp	.+4      	; 0x36ea <LCD_write+0x20>
    36e6:	2b 98       	cbi	0x05, 3	; 5
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <LCD_write+0x22>
    36ea:	2b 9a       	sbi	0x05, 3	; 5
    36ec:	86 e0       	ldi	r24, 0x06	; 6
    36ee:	8a 95       	dec	r24
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <LCD_write+0x24>
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	60 2f       	mov	r22, r16
    36f6:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <SPI_transmit>
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
    36fe:	08 95       	ret

00003700 <LED_clr_pattern>:
    3700:	1f 93       	push	r17
    3702:	18 2f       	mov	r17, r24
    3704:	86 e0       	ldi	r24, 0x06	; 6
    3706:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    370a:	81 30       	cpi	r24, 0x01	; 1
    370c:	19 f4       	brne	.+6      	; 0x3714 <LED_clr_pattern+0x14>
    370e:	81 2f       	mov	r24, r17
    3710:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <__LED_clr_pattern>
    3714:	1f 91       	pop	r17
    3716:	08 95       	ret

00003718 <LED_open>:
    3718:	0e 94 df 25 	call	0x4bbe	; 0x4bbe <__LED_init>
    371c:	86 e0       	ldi	r24, 0x06	; 6
    371e:	61 e0       	ldi	r22, 0x01	; 1
    3720:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    3724:	86 e0       	ldi	r24, 0x06	; 6
    3726:	91 e0       	ldi	r25, 0x01	; 1
    3728:	08 95       	ret

0000372a <LED_set_pattern>:
    372a:	1f 93       	push	r17
    372c:	18 2f       	mov	r17, r24
    372e:	86 e0       	ldi	r24, 0x06	; 6
    3730:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    3734:	81 30       	cpi	r24, 0x01	; 1
    3736:	19 f4       	brne	.+6      	; 0x373e <LED_set_pattern+0x14>
    3738:	81 2f       	mov	r24, r17
    373a:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <__LED_set_pattern>
    373e:	1f 91       	pop	r17
    3740:	08 95       	ret

00003742 <SPI_set_slave_addr>:
    3742:	1f 93       	push	r17
    3744:	18 2f       	mov	r17, r24
    3746:	82 e0       	ldi	r24, 0x02	; 2
    3748:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    374c:	81 30       	cpi	r24, 0x01	; 1
    374e:	09 f0       	breq	.+2      	; 0x3752 <SPI_set_slave_addr+0x10>
    3750:	47 c0       	rjmp	.+142    	; 0x37e0 <SPI_set_slave_addr+0x9e>
    3752:	91 2f       	mov	r25, r17
    3754:	97 70       	andi	r25, 0x07	; 7
    3756:	80 91 ff 07 	lds	r24, 0x07FF
    375a:	98 17       	cp	r25, r24
    375c:	09 f4       	brne	.+2      	; 0x3760 <SPI_set_slave_addr+0x1e>
    375e:	40 c0       	rjmp	.+128    	; 0x37e0 <SPI_set_slave_addr+0x9e>
    3760:	90 93 ff 07 	sts	0x07FF, r25
    3764:	85 b1       	in	r24, 0x05	; 5
    3766:	88 7f       	andi	r24, 0xF8	; 248
    3768:	89 2b       	or	r24, r25
    376a:	85 b9       	out	0x05, r24	; 5
    376c:	93 30       	cpi	r25, 0x03	; 3
    376e:	11 f1       	breq	.+68     	; 0x37b4 <SPI_set_slave_addr+0x72>
    3770:	94 30       	cpi	r25, 0x04	; 4
    3772:	28 f4       	brcc	.+10     	; 0x377e <SPI_set_slave_addr+0x3c>
    3774:	91 30       	cpi	r25, 0x01	; 1
    3776:	51 f0       	breq	.+20     	; 0x378c <SPI_set_slave_addr+0x4a>
    3778:	92 30       	cpi	r25, 0x02	; 2
    377a:	90 f4       	brcc	.+36     	; 0x37a0 <SPI_set_slave_addr+0x5e>
    377c:	0c c0       	rjmp	.+24     	; 0x3796 <SPI_set_slave_addr+0x54>
    377e:	95 30       	cpi	r25, 0x05	; 5
    3780:	19 f1       	breq	.+70     	; 0x37c8 <SPI_set_slave_addr+0x86>
    3782:	95 30       	cpi	r25, 0x05	; 5
    3784:	e0 f0       	brcs	.+56     	; 0x37be <SPI_set_slave_addr+0x7c>
    3786:	96 30       	cpi	r25, 0x06	; 6
    3788:	21 f5       	brne	.+72     	; 0x37d2 <SPI_set_slave_addr+0x90>
    378a:	0f c0       	rjmp	.+30     	; 0x37aa <SPI_set_slave_addr+0x68>
    378c:	e0 91 e0 04 	lds	r30, 0x04E0
    3790:	f0 91 e1 04 	lds	r31, 0x04E1
    3794:	22 c0       	rjmp	.+68     	; 0x37da <SPI_set_slave_addr+0x98>
    3796:	e0 91 de 04 	lds	r30, 0x04DE
    379a:	f0 91 df 04 	lds	r31, 0x04DF
    379e:	1d c0       	rjmp	.+58     	; 0x37da <SPI_set_slave_addr+0x98>
    37a0:	e0 91 e2 04 	lds	r30, 0x04E2
    37a4:	f0 91 e3 04 	lds	r31, 0x04E3
    37a8:	18 c0       	rjmp	.+48     	; 0x37da <SPI_set_slave_addr+0x98>
    37aa:	e0 91 ea 04 	lds	r30, 0x04EA
    37ae:	f0 91 eb 04 	lds	r31, 0x04EB
    37b2:	13 c0       	rjmp	.+38     	; 0x37da <SPI_set_slave_addr+0x98>
    37b4:	e0 91 e4 04 	lds	r30, 0x04E4
    37b8:	f0 91 e5 04 	lds	r31, 0x04E5
    37bc:	0e c0       	rjmp	.+28     	; 0x37da <SPI_set_slave_addr+0x98>
    37be:	e0 91 e6 04 	lds	r30, 0x04E6
    37c2:	f0 91 e7 04 	lds	r31, 0x04E7
    37c6:	09 c0       	rjmp	.+18     	; 0x37da <SPI_set_slave_addr+0x98>
    37c8:	e0 91 e8 04 	lds	r30, 0x04E8
    37cc:	f0 91 e9 04 	lds	r31, 0x04E9
    37d0:	04 c0       	rjmp	.+8      	; 0x37da <SPI_set_slave_addr+0x98>
    37d2:	e0 91 ec 04 	lds	r30, 0x04EC
    37d6:	f0 91 ed 04 	lds	r31, 0x04ED
    37da:	30 97       	sbiw	r30, 0x00	; 0
    37dc:	09 f0       	breq	.+2      	; 0x37e0 <SPI_set_slave_addr+0x9e>
    37de:	09 95       	icall
    37e0:	1f 91       	pop	r17
    37e2:	08 95       	ret

000037e4 <SPI_transmit>:
    37e4:	1f 93       	push	r17
    37e6:	16 2f       	mov	r17, r22
    37e8:	0e 94 a1 1b 	call	0x3742	; 0x3742 <SPI_set_slave_addr>
    37ec:	82 e0       	ldi	r24, 0x02	; 2
    37ee:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    37f2:	81 30       	cpi	r24, 0x01	; 1
    37f4:	21 f4       	brne	.+8      	; 0x37fe <SPI_transmit+0x1a>
    37f6:	1e bd       	out	0x2e, r17	; 46
    37f8:	0d b4       	in	r0, 0x2d	; 45
    37fa:	07 fe       	sbrs	r0, 7
    37fc:	fd cf       	rjmp	.-6      	; 0x37f8 <SPI_transmit+0x14>
    37fe:	1f 91       	pop	r17
    3800:	08 95       	ret

00003802 <SPKR_beep>:
    3802:	9b 01       	movw	r18, r22
    3804:	ac 01       	movw	r20, r24
    3806:	80 91 7f 04 	lds	r24, 0x047F
    380a:	88 23       	and	r24, r24
    380c:	81 f0       	breq	.+32     	; 0x382e <SPKR_beep+0x2c>
    380e:	da 01       	movw	r26, r20
    3810:	c9 01       	movw	r24, r18
    3812:	88 0f       	add	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	aa 1f       	adc	r26, r26
    3818:	bb 1f       	adc	r27, r27
    381a:	90 93 8b 04 	sts	0x048B, r25
    381e:	80 93 8a 04 	sts	0x048A, r24
    3822:	21 15       	cp	r18, r1
    3824:	31 05       	cpc	r19, r1
    3826:	41 05       	cpc	r20, r1
    3828:	51 05       	cpc	r21, r1
    382a:	09 f4       	brne	.+2      	; 0x382e <SPKR_beep+0x2c>
    382c:	5f 98       	cbi	0x0b, 7	; 11
    382e:	08 95       	ret

00003830 <__SPKR_set_up_freq_LUT>:
    3830:	0f 93       	push	r16
    3832:	1f 93       	push	r17
    3834:	cf 93       	push	r28
    3836:	df 93       	push	r29
    3838:	80 e2       	ldi	r24, 0x20	; 32
    383a:	91 e0       	ldi	r25, 0x01	; 1
    383c:	0e 94 d7 34 	call	0x69ae	; 0x69ae <malloc>
    3840:	9c 01       	movw	r18, r24
    3842:	90 93 8d 04 	sts	0x048D, r25
    3846:	80 93 8c 04 	sts	0x048C, r24
    384a:	89 2b       	or	r24, r25
    384c:	11 f4       	brne	.+4      	; 0x3852 <__SPKR_set_up_freq_LUT+0x22>
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	39 c0       	rjmp	.+114    	; 0x38c4 <__SPKR_set_up_freq_LUT+0x94>
    3852:	89 01       	movw	r16, r18
    3854:	c0 e0       	ldi	r28, 0x00	; 0
    3856:	d0 e0       	ldi	r29, 0x00	; 0
    3858:	be 01       	movw	r22, r28
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__floatunsisf>
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	40 ea       	ldi	r20, 0xA0	; 160
    3868:	51 e4       	ldi	r21, 0x41	; 65
    386a:	0e 94 a6 2d 	call	0x5b4c	; 0x5b4c <__divsf3>
    386e:	27 ef       	ldi	r18, 0xF7	; 247
    3870:	35 e7       	ldi	r19, 0x75	; 117
    3872:	40 e0       	ldi	r20, 0x00	; 0
    3874:	5f e3       	ldi	r21, 0x3F	; 63
    3876:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    387a:	9b 01       	movw	r18, r22
    387c:	ac 01       	movw	r20, r24
    387e:	60 e0       	ldi	r22, 0x00	; 0
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	80 e2       	ldi	r24, 0x20	; 32
    3884:	91 e4       	ldi	r25, 0x41	; 65
    3886:	0e 94 92 2f 	call	0x5f24	; 0x5f24 <pow>
    388a:	9b 01       	movw	r18, r22
    388c:	ac 01       	movw	r20, r24
    388e:	ca 01       	movw	r24, r20
    3890:	b9 01       	movw	r22, r18
    3892:	2d ec       	ldi	r18, 0xCD	; 205
    3894:	3c ec       	ldi	r19, 0xCC	; 204
    3896:	42 e8       	ldi	r20, 0x82	; 130
    3898:	51 e4       	ldi	r21, 0x41	; 65
    389a:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <__mulsf3>
    389e:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <lrint>
    38a2:	2a e0       	ldi	r18, 0x0A	; 10
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	0e 94 5f 34 	call	0x68be	; 0x68be <__mulsi3>
    38ae:	f8 01       	movw	r30, r16
    38b0:	61 93       	st	Z+, r22
    38b2:	71 93       	st	Z+, r23
    38b4:	81 93       	st	Z+, r24
    38b6:	91 93       	st	Z+, r25
    38b8:	8f 01       	movw	r16, r30
    38ba:	21 96       	adiw	r28, 0x01	; 1
    38bc:	c8 34       	cpi	r28, 0x48	; 72
    38be:	d1 05       	cpc	r29, r1
    38c0:	59 f6       	brne	.-106    	; 0x3858 <__SPKR_set_up_freq_LUT+0x28>
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	df 91       	pop	r29
    38c6:	cf 91       	pop	r28
    38c8:	1f 91       	pop	r17
    38ca:	0f 91       	pop	r16
    38cc:	08 95       	ret

000038ce <__SPKR_open_beep_mode>:
    38ce:	8a e0       	ldi	r24, 0x0A	; 10
    38d0:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    38d4:	88 23       	and	r24, r24
    38d6:	71 f4       	brne	.+28     	; 0x38f4 <__SPKR_open_beep_mode+0x26>
    38d8:	10 92 89 04 	sts	0x0489, r1
    38dc:	10 92 88 04 	sts	0x0488, r1
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__SPKR_init>
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	80 93 7f 04 	sts	0x047F, r24
    38ec:	8a e0       	ldi	r24, 0x0A	; 10
    38ee:	61 e0       	ldi	r22, 0x01	; 1
    38f0:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    38f4:	8a e0       	ldi	r24, 0x0A	; 10
    38f6:	91 e0       	ldi	r25, 0x01	; 1
    38f8:	08 95       	ret

000038fa <__SPKR_open_tone_mode>:
    38fa:	1f 93       	push	r17
    38fc:	8b e0       	ldi	r24, 0x0B	; 11
    38fe:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    3902:	88 23       	and	r24, r24
    3904:	11 f0       	breq	.+4      	; 0x390a <__SPKR_open_tone_mode+0x10>
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	21 c0       	rjmp	.+66     	; 0x394c <__SPKR_open_tone_mode+0x52>
    390a:	89 e0       	ldi	r24, 0x09	; 9
    390c:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    3910:	88 23       	and	r24, r24
    3912:	d9 f4       	brne	.+54     	; 0x394a <__SPKR_open_tone_mode+0x50>
    3914:	0e 94 18 1c 	call	0x3830	; 0x3830 <__SPKR_set_up_freq_LUT>
    3918:	18 2f       	mov	r17, r24
    391a:	81 30       	cpi	r24, 0x01	; 1
    391c:	b1 f4       	brne	.+44     	; 0x394a <__SPKR_open_tone_mode+0x50>
    391e:	10 92 80 04 	sts	0x0480, r1
    3922:	10 92 81 04 	sts	0x0481, r1
    3926:	10 92 82 04 	sts	0x0482, r1
    392a:	10 92 83 04 	sts	0x0483, r1
    392e:	8d e0       	ldi	r24, 0x0D	; 13
    3930:	60 ea       	ldi	r22, 0xA0	; 160
    3932:	76 e2       	ldi	r23, 0x26	; 38
    3934:	0e 94 03 25 	call	0x4a06	; 0x4a06 <ISR_attach>
    3938:	82 e0       	ldi	r24, 0x02	; 2
    393a:	0e 94 1d 27 	call	0x4e3a	; 0x4e3a <__SPKR_init>
    393e:	10 93 7e 04 	sts	0x047E, r17
    3942:	89 e0       	ldi	r24, 0x09	; 9
    3944:	61 e0       	ldi	r22, 0x01	; 1
    3946:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    394a:	91 e0       	ldi	r25, 0x01	; 1
    394c:	89 e0       	ldi	r24, 0x09	; 9
    394e:	1f 91       	pop	r17
    3950:	08 95       	ret

00003952 <SPKR_open>:
    3952:	81 30       	cpi	r24, 0x01	; 1
    3954:	29 f0       	breq	.+10     	; 0x3960 <SPKR_open+0xe>
    3956:	82 30       	cpi	r24, 0x02	; 2
    3958:	31 f0       	breq	.+12     	; 0x3966 <SPKR_open+0x14>
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	89 e0       	ldi	r24, 0x09	; 9
    395e:	08 95       	ret
    3960:	0e 94 67 1c 	call	0x38ce	; 0x38ce <__SPKR_open_beep_mode>
    3964:	08 95       	ret
    3966:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <__SPKR_open_tone_mode>
    396a:	08 95       	ret

0000396c <STEPPER_get_nSteps>:
    396c:	80 91 c0 07 	lds	r24, 0x07C0
    3970:	90 91 c1 07 	lds	r25, 0x07C1
    3974:	20 91 c2 07 	lds	r18, 0x07C2
    3978:	30 91 c3 07 	lds	r19, 0x07C3
    397c:	bc 01       	movw	r22, r24
    397e:	c9 01       	movw	r24, r18
    3980:	08 95       	ret

00003982 <STEPPER_stepmode>:
    3982:	2f 92       	push	r2
    3984:	3f 92       	push	r3
    3986:	4f 92       	push	r4
    3988:	5f 92       	push	r5
    398a:	6f 92       	push	r6
    398c:	7f 92       	push	r7
    398e:	8f 92       	push	r8
    3990:	9f 92       	push	r9
    3992:	af 92       	push	r10
    3994:	bf 92       	push	r11
    3996:	cf 92       	push	r12
    3998:	df 92       	push	r13
    399a:	ef 92       	push	r14
    399c:	ff 92       	push	r15
    399e:	0f 93       	push	r16
    39a0:	1f 93       	push	r17
    39a2:	df 93       	push	r29
    39a4:	cf 93       	push	r28
    39a6:	cd b7       	in	r28, 0x3d	; 61
    39a8:	de b7       	in	r29, 0x3e	; 62
    39aa:	58 2e       	mov	r5, r24
    39ac:	96 2e       	mov	r9, r22
    39ae:	44 2e       	mov	r4, r20
    39b0:	39 01       	movw	r6, r18
    39b2:	3c 2c       	mov	r3, r12
    39b4:	c9 8c       	ldd	r12, Y+25	; 0x19
    39b6:	da 8c       	ldd	r13, Y+26	; 0x1a
    39b8:	2b 8c       	ldd	r2, Y+27	; 0x1b
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	68 17       	cp	r22, r24
    39be:	39 f1       	breq	.+78     	; 0x3a0e <STEPPER_stepmode+0x8c>
    39c0:	68 17       	cp	r22, r24
    39c2:	28 f0       	brcs	.+10     	; 0x39ce <STEPPER_stepmode+0x4c>
    39c4:	92 e0       	ldi	r25, 0x02	; 2
    39c6:	69 17       	cp	r22, r25
    39c8:	09 f0       	breq	.+2      	; 0x39cc <STEPPER_stepmode+0x4a>
    39ca:	85 c0       	rjmp	.+266    	; 0x3ad6 <STEPPER_stepmode+0x154>
    39cc:	49 c0       	rjmp	.+146    	; 0x3a60 <STEPPER_stepmode+0xde>
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	61 e0       	ldi	r22, 0x01	; 1
    39d2:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <STEPPER_set_mode>
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	b7 01       	movw	r22, r14
    39da:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <STEPPER_set_accel>
    39de:	80 e0       	ldi	r24, 0x00	; 0
    39e0:	64 2d       	mov	r22, r4
    39e2:	a3 01       	movw	r20, r6
    39e4:	98 01       	movw	r18, r16
    39e6:	03 2d       	mov	r16, r3
    39e8:	ee 24       	eor	r14, r14
    39ea:	e3 94       	inc	r14
    39ec:	e5 ee       	ldi	r30, 0xE5	; 229
    39ee:	ce 2e       	mov	r12, r30
    39f0:	e7 e0       	ldi	r30, 0x07	; 7
    39f2:	de 2e       	mov	r13, r30
    39f4:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <STEPPER_step>
    39f8:	55 20       	and	r5, r5
    39fa:	09 f0       	breq	.+2      	; 0x39fe <STEPPER_stepmode+0x7c>
    39fc:	6c c0       	rjmp	.+216    	; 0x3ad6 <STEPPER_stepmode+0x154>
    39fe:	00 d0       	rcall	.+0      	; 0x3a00 <STEPPER_stepmode+0x7e>
    3a00:	0f 92       	push	r0
    3a02:	ed b7       	in	r30, 0x3d	; 61
    3a04:	fe b7       	in	r31, 0x3e	; 62
    3a06:	11 82       	std	Z+1, r1	; 0x01
    3a08:	b3 82       	std	Z+3, r11	; 0x03
    3a0a:	a2 82       	std	Z+2, r10	; 0x02
    3a0c:	23 c0       	rjmp	.+70     	; 0x3a54 <STEPPER_stepmode+0xd2>
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	61 e0       	ldi	r22, 0x01	; 1
    3a12:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <STEPPER_set_mode>
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	b6 01       	movw	r22, r12
    3a1a:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <STEPPER_set_accel>
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	68 2d       	mov	r22, r8
    3a22:	4d 89       	ldd	r20, Y+21	; 0x15
    3a24:	5e 89       	ldd	r21, Y+22	; 0x16
    3a26:	2f 89       	ldd	r18, Y+23	; 0x17
    3a28:	38 8d       	ldd	r19, Y+24	; 0x18
    3a2a:	02 2d       	mov	r16, r2
    3a2c:	ee 24       	eor	r14, r14
    3a2e:	e3 94       	inc	r14
    3a30:	75 ee       	ldi	r23, 0xE5	; 229
    3a32:	c7 2e       	mov	r12, r23
    3a34:	77 e0       	ldi	r23, 0x07	; 7
    3a36:	d7 2e       	mov	r13, r23
    3a38:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <STEPPER_step>
    3a3c:	55 20       	and	r5, r5
    3a3e:	09 f0       	breq	.+2      	; 0x3a42 <STEPPER_stepmode+0xc0>
    3a40:	4a c0       	rjmp	.+148    	; 0x3ad6 <STEPPER_stepmode+0x154>
    3a42:	00 d0       	rcall	.+0      	; 0x3a44 <STEPPER_stepmode+0xc2>
    3a44:	0f 92       	push	r0
    3a46:	ed b7       	in	r30, 0x3d	; 61
    3a48:	fe b7       	in	r31, 0x3e	; 62
    3a4a:	91 82       	std	Z+1, r9	; 0x01
    3a4c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a4e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a50:	93 83       	std	Z+3, r25	; 0x03
    3a52:	82 83       	std	Z+2, r24	; 0x02
    3a54:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <STEPPER_wait_and_then>
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	3b c0       	rjmp	.+118    	; 0x3ad6 <STEPPER_stepmode+0x154>
    3a60:	82 e0       	ldi	r24, 0x02	; 2
    3a62:	61 e0       	ldi	r22, 0x01	; 1
    3a64:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <STEPPER_set_mode>
    3a68:	80 e0       	ldi	r24, 0x00	; 0
    3a6a:	b7 01       	movw	r22, r14
    3a6c:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <STEPPER_set_accel>
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	b6 01       	movw	r22, r12
    3a74:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <STEPPER_set_accel>
    3a78:	80 e0       	ldi	r24, 0x00	; 0
    3a7a:	64 2d       	mov	r22, r4
    3a7c:	a3 01       	movw	r20, r6
    3a7e:	98 01       	movw	r18, r16
    3a80:	03 2d       	mov	r16, r3
    3a82:	ee 24       	eor	r14, r14
    3a84:	e3 94       	inc	r14
    3a86:	95 ee       	ldi	r25, 0xE5	; 229
    3a88:	c9 2e       	mov	r12, r25
    3a8a:	97 e0       	ldi	r25, 0x07	; 7
    3a8c:	d9 2e       	mov	r13, r25
    3a8e:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <STEPPER_step>
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	68 2d       	mov	r22, r8
    3a96:	4d 89       	ldd	r20, Y+21	; 0x15
    3a98:	5e 89       	ldd	r21, Y+22	; 0x16
    3a9a:	2f 89       	ldd	r18, Y+23	; 0x17
    3a9c:	38 8d       	ldd	r19, Y+24	; 0x18
    3a9e:	02 2d       	mov	r16, r2
    3aa0:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <STEPPER_step>
    3aa4:	55 20       	and	r5, r5
    3aa6:	b9 f4       	brne	.+46     	; 0x3ad6 <STEPPER_stepmode+0x154>
    3aa8:	00 d0       	rcall	.+0      	; 0x3aaa <STEPPER_stepmode+0x128>
    3aaa:	00 d0       	rcall	.+0      	; 0x3aac <STEPPER_stepmode+0x12a>
    3aac:	0f 92       	push	r0
    3aae:	ad b7       	in	r26, 0x3d	; 61
    3ab0:	be b7       	in	r27, 0x3e	; 62
    3ab2:	11 96       	adiw	r26, 0x01	; 1
    3ab4:	ed b7       	in	r30, 0x3d	; 61
    3ab6:	fe b7       	in	r31, 0x3e	; 62
    3ab8:	91 82       	std	Z+1, r9	; 0x01
    3aba:	fd 01       	movw	r30, r26
    3abc:	b2 82       	std	Z+2, r11	; 0x02
    3abe:	a1 82       	std	Z+1, r10	; 0x01
    3ac0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ac2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ac4:	94 83       	std	Z+4, r25	; 0x04
    3ac6:	83 83       	std	Z+3, r24	; 0x03
    3ac8:	0e 94 cd 1f 	call	0x3f9a	; 0x3f9a <STEPPER_wait_and_then>
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	0f 90       	pop	r0
    3ad6:	cf 91       	pop	r28
    3ad8:	df 91       	pop	r29
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	ff 90       	pop	r15
    3ae0:	ef 90       	pop	r14
    3ae2:	df 90       	pop	r13
    3ae4:	cf 90       	pop	r12
    3ae6:	bf 90       	pop	r11
    3ae8:	af 90       	pop	r10
    3aea:	9f 90       	pop	r9
    3aec:	8f 90       	pop	r8
    3aee:	7f 90       	pop	r7
    3af0:	6f 90       	pop	r6
    3af2:	5f 90       	pop	r5
    3af4:	4f 90       	pop	r4
    3af6:	3f 90       	pop	r3
    3af8:	2f 90       	pop	r2
    3afa:	08 95       	ret

00003afc <STEPPER_move>:
    3afc:	6f 92       	push	r6
    3afe:	7f 92       	push	r7
    3b00:	8f 92       	push	r8
    3b02:	9f 92       	push	r9
    3b04:	af 92       	push	r10
    3b06:	bf 92       	push	r11
    3b08:	cf 92       	push	r12
    3b0a:	df 92       	push	r13
    3b0c:	ef 92       	push	r14
    3b0e:	ff 92       	push	r15
    3b10:	0f 93       	push	r16
    3b12:	1f 93       	push	r17
    3b14:	df 93       	push	r29
    3b16:	cf 93       	push	r28
    3b18:	cd b7       	in	r28, 0x3d	; 61
    3b1a:	de b7       	in	r29, 0x3e	; 62
    3b1c:	94 2e       	mov	r9, r20
    3b1e:	7c 2d       	mov	r23, r12
    3b20:	d5 01       	movw	r26, r10
    3b22:	49 89       	ldd	r20, Y+17	; 0x11
    3b24:	5a 89       	ldd	r21, Y+18	; 0x12
    3b26:	ab 88       	ldd	r10, Y+19	; 0x13
    3b28:	bc 88       	ldd	r11, Y+20	; 0x14
    3b2a:	cd 88       	ldd	r12, Y+21	; 0x15
    3b2c:	de 88       	ldd	r13, Y+22	; 0x16
    3b2e:	9f 89       	ldd	r25, Y+23	; 0x17
    3b30:	81 30       	cpi	r24, 0x01	; 1
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <STEPPER_move+0x3a>
    3b34:	57 c0       	rjmp	.+174    	; 0x3be4 <STEPPER_move+0xe8>
    3b36:	81 30       	cpi	r24, 0x01	; 1
    3b38:	b8 f1       	brcs	.+110    	; 0x3ba8 <STEPPER_move+0xac>
    3b3a:	82 30       	cpi	r24, 0x02	; 2
    3b3c:	09 f0       	breq	.+2      	; 0x3b40 <STEPPER_move+0x44>
    3b3e:	76 c0       	rjmp	.+236    	; 0x3c2c <STEPPER_move+0x130>
    3b40:	61 30       	cpi	r22, 0x01	; 1
    3b42:	91 f0       	breq	.+36     	; 0x3b68 <STEPPER_move+0x6c>
    3b44:	61 30       	cpi	r22, 0x01	; 1
    3b46:	20 f0       	brcs	.+8      	; 0x3b50 <STEPPER_move+0x54>
    3b48:	62 30       	cpi	r22, 0x02	; 2
    3b4a:	09 f0       	breq	.+2      	; 0x3b4e <STEPPER_move+0x52>
    3b4c:	6f c0       	rjmp	.+222    	; 0x3c2c <STEPPER_move+0x130>
    3b4e:	15 c0       	rjmp	.+42     	; 0x3b7a <STEPPER_move+0x7e>
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	60 e0       	ldi	r22, 0x00	; 0
    3b54:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <STEPPER_set_mode>
    3b58:	80 e0       	ldi	r24, 0x00	; 0
    3b5a:	b7 01       	movw	r22, r14
    3b5c:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <STEPPER_set_accel>
    3b60:	80 e0       	ldi	r24, 0x00	; 0
    3b62:	69 2d       	mov	r22, r9
    3b64:	a8 01       	movw	r20, r16
    3b66:	1d c0       	rjmp	.+58     	; 0x3ba2 <STEPPER_move+0xa6>
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <STEPPER_set_mode>
    3b70:	81 e0       	ldi	r24, 0x01	; 1
    3b72:	b6 01       	movw	r22, r12
    3b74:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <STEPPER_set_accel>
    3b78:	11 c0       	rjmp	.+34     	; 0x3b9c <STEPPER_move+0xa0>
    3b7a:	82 e0       	ldi	r24, 0x02	; 2
    3b7c:	60 e0       	ldi	r22, 0x00	; 0
    3b7e:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <STEPPER_set_mode>
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	b7 01       	movw	r22, r14
    3b86:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <STEPPER_set_accel>
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	b6 01       	movw	r22, r12
    3b8e:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <STEPPER_set_accel>
    3b92:	80 e0       	ldi	r24, 0x00	; 0
    3b94:	69 2d       	mov	r22, r9
    3b96:	a8 01       	movw	r20, r16
    3b98:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <STEPPER_run>
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	68 2d       	mov	r22, r8
    3ba0:	a5 01       	movw	r20, r10
    3ba2:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <STEPPER_run>
    3ba6:	42 c0       	rjmp	.+132    	; 0x3c2c <STEPPER_move+0x130>
    3ba8:	ed b7       	in	r30, 0x3d	; 61
    3baa:	fe b7       	in	r31, 0x3e	; 62
    3bac:	39 97       	sbiw	r30, 0x09	; 9
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	fe bf       	out	0x3e, r31	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	ed bf       	out	0x3d, r30	; 61
    3bb8:	6d b6       	in	r6, 0x3d	; 61
    3bba:	7e b6       	in	r7, 0x3e	; 62
    3bbc:	08 94       	sec
    3bbe:	61 1c       	adc	r6, r1
    3bc0:	71 1c       	adc	r7, r1
    3bc2:	52 83       	std	Z+2, r21	; 0x02
    3bc4:	41 83       	std	Z+1, r20	; 0x01
    3bc6:	f3 01       	movw	r30, r6
    3bc8:	b3 82       	std	Z+3, r11	; 0x03
    3bca:	a2 82       	std	Z+2, r10	; 0x02
    3bcc:	d5 82       	std	Z+5, r13	; 0x05
    3bce:	c4 82       	std	Z+4, r12	; 0x04
    3bd0:	96 83       	std	Z+6, r25	; 0x06
    3bd2:	88 8d       	ldd	r24, Y+24	; 0x18
    3bd4:	99 8d       	ldd	r25, Y+25	; 0x19
    3bd6:	90 87       	std	Z+8, r25	; 0x08
    3bd8:	87 83       	std	Z+7, r24	; 0x07
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	49 2d       	mov	r20, r9
    3bde:	c7 2e       	mov	r12, r23
    3be0:	5d 01       	movw	r10, r26
    3be2:	1a c0       	rjmp	.+52     	; 0x3c18 <STEPPER_move+0x11c>
    3be4:	ed b7       	in	r30, 0x3d	; 61
    3be6:	fe b7       	in	r31, 0x3e	; 62
    3be8:	39 97       	sbiw	r30, 0x09	; 9
    3bea:	0f b6       	in	r0, 0x3f	; 63
    3bec:	f8 94       	cli
    3bee:	fe bf       	out	0x3e, r31	; 62
    3bf0:	0f be       	out	0x3f, r0	; 63
    3bf2:	ed bf       	out	0x3d, r30	; 61
    3bf4:	ad b7       	in	r26, 0x3d	; 61
    3bf6:	be b7       	in	r27, 0x3e	; 62
    3bf8:	11 96       	adiw	r26, 0x01	; 1
    3bfa:	52 83       	std	Z+2, r21	; 0x02
    3bfc:	41 83       	std	Z+1, r20	; 0x01
    3bfe:	fd 01       	movw	r30, r26
    3c00:	b3 82       	std	Z+3, r11	; 0x03
    3c02:	a2 82       	std	Z+2, r10	; 0x02
    3c04:	d5 82       	std	Z+5, r13	; 0x05
    3c06:	c4 82       	std	Z+4, r12	; 0x04
    3c08:	96 83       	std	Z+6, r25	; 0x06
    3c0a:	10 86       	std	Z+8, r1	; 0x08
    3c0c:	17 82       	std	Z+7, r1	; 0x07
    3c0e:	81 e0       	ldi	r24, 0x01	; 1
    3c10:	49 2d       	mov	r20, r9
    3c12:	c7 2e       	mov	r12, r23
    3c14:	aa 24       	eor	r10, r10
    3c16:	bb 24       	eor	r11, r11
    3c18:	0e 94 c1 1c 	call	0x3982	; 0x3982 <STEPPER_stepmode>
    3c1c:	8d b7       	in	r24, 0x3d	; 61
    3c1e:	9e b7       	in	r25, 0x3e	; 62
    3c20:	09 96       	adiw	r24, 0x09	; 9
    3c22:	0f b6       	in	r0, 0x3f	; 63
    3c24:	f8 94       	cli
    3c26:	9e bf       	out	0x3e, r25	; 62
    3c28:	0f be       	out	0x3f, r0	; 63
    3c2a:	8d bf       	out	0x3d, r24	; 61
    3c2c:	cf 91       	pop	r28
    3c2e:	df 91       	pop	r29
    3c30:	1f 91       	pop	r17
    3c32:	0f 91       	pop	r16
    3c34:	ff 90       	pop	r15
    3c36:	ef 90       	pop	r14
    3c38:	df 90       	pop	r13
    3c3a:	cf 90       	pop	r12
    3c3c:	bf 90       	pop	r11
    3c3e:	af 90       	pop	r10
    3c40:	9f 90       	pop	r9
    3c42:	8f 90       	pop	r8
    3c44:	7f 90       	pop	r7
    3c46:	6f 90       	pop	r6
    3c48:	08 95       	ret

00003c4a <STEPPER_open>:
    3c4a:	0e 94 af 27 	call	0x4f5e	; 0x4f5e <__STEPPER_init>
    3c4e:	81 e0       	ldi	r24, 0x01	; 1
    3c50:	80 93 e4 07 	sts	0x07E4, r24
    3c54:	ee ea       	ldi	r30, 0xAE	; 174
    3c56:	f7 e0       	ldi	r31, 0x07	; 7
    3c58:	11 92       	st	Z+, r1
    3c5a:	11 92       	st	Z+, r1
    3c5c:	11 82       	std	Z+1, r1	; 0x01
    3c5e:	10 82       	st	Z, r1
    3c60:	32 96       	adiw	r30, 0x02	; 2
    3c62:	11 82       	std	Z+1, r1	; 0x01
    3c64:	10 82       	st	Z, r1
    3c66:	32 96       	adiw	r30, 0x02	; 2
    3c68:	11 82       	std	Z+1, r1	; 0x01
    3c6a:	10 82       	st	Z, r1
    3c6c:	32 96       	adiw	r30, 0x02	; 2
    3c6e:	11 82       	std	Z+1, r1	; 0x01
    3c70:	10 82       	st	Z, r1
    3c72:	32 96       	adiw	r30, 0x02	; 2
    3c74:	11 82       	std	Z+1, r1	; 0x01
    3c76:	10 82       	st	Z, r1
    3c78:	32 96       	adiw	r30, 0x02	; 2
    3c7a:	11 82       	std	Z+1, r1	; 0x01
    3c7c:	10 82       	st	Z, r1
    3c7e:	32 96       	adiw	r30, 0x02	; 2
    3c80:	11 82       	std	Z+1, r1	; 0x01
    3c82:	10 82       	st	Z, r1
    3c84:	32 96       	adiw	r30, 0x02	; 2
    3c86:	11 82       	std	Z+1, r1	; 0x01
    3c88:	10 82       	st	Z, r1
    3c8a:	32 96       	adiw	r30, 0x02	; 2
    3c8c:	11 82       	std	Z+1, r1	; 0x01
    3c8e:	10 82       	st	Z, r1
    3c90:	32 96       	adiw	r30, 0x02	; 2
    3c92:	11 82       	std	Z+1, r1	; 0x01
    3c94:	10 82       	st	Z, r1
    3c96:	32 96       	adiw	r30, 0x02	; 2
    3c98:	11 82       	std	Z+1, r1	; 0x01
    3c9a:	10 82       	st	Z, r1
    3c9c:	32 96       	adiw	r30, 0x02	; 2
    3c9e:	11 82       	std	Z+1, r1	; 0x01
    3ca0:	10 82       	st	Z, r1
    3ca2:	36 96       	adiw	r30, 0x06	; 6
    3ca4:	11 92       	st	Z+, r1
    3ca6:	11 92       	st	Z+, r1
    3ca8:	11 92       	st	Z+, r1
    3caa:	10 82       	st	Z, r1
    3cac:	32 96       	adiw	r30, 0x02	; 2
    3cae:	11 92       	st	Z+, r1
    3cb0:	11 92       	st	Z+, r1
    3cb2:	11 92       	st	Z+, r1
    3cb4:	11 92       	st	Z+, r1
    3cb6:	11 92       	st	Z+, r1
    3cb8:	11 92       	st	Z+, r1
    3cba:	11 92       	st	Z+, r1
    3cbc:	11 82       	std	Z+1, r1	; 0x01
    3cbe:	10 82       	st	Z, r1
    3cc0:	32 96       	adiw	r30, 0x02	; 2
    3cc2:	11 82       	std	Z+1, r1	; 0x01
    3cc4:	10 82       	st	Z, r1
    3cc6:	32 96       	adiw	r30, 0x02	; 2
    3cc8:	11 82       	std	Z+1, r1	; 0x01
    3cca:	10 82       	st	Z, r1
    3ccc:	32 96       	adiw	r30, 0x02	; 2
    3cce:	11 82       	std	Z+1, r1	; 0x01
    3cd0:	10 82       	st	Z, r1
    3cd2:	76 97       	sbiw	r30, 0x16	; 22
    3cd4:	11 82       	std	Z+1, r1	; 0x01
    3cd6:	10 82       	st	Z, r1
    3cd8:	32 96       	adiw	r30, 0x02	; 2
    3cda:	11 82       	std	Z+1, r1	; 0x01
    3cdc:	10 82       	st	Z, r1
    3cde:	10 92 e3 07 	sts	0x07E3, r1
    3ce2:	10 92 e2 07 	sts	0x07E2, r1
    3ce6:	10 92 e4 07 	sts	0x07E4, r1
    3cea:	87 e0       	ldi	r24, 0x07	; 7
    3cec:	61 e0       	ldi	r22, 0x01	; 1
    3cee:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    3cf2:	87 e0       	ldi	r24, 0x07	; 7
    3cf4:	91 e0       	ldi	r25, 0x01	; 1
    3cf6:	08 95       	ret

00003cf8 <STEPPER_run>:
    3cf8:	ef 92       	push	r14
    3cfa:	ff 92       	push	r15
    3cfc:	0f 93       	push	r16
    3cfe:	1f 93       	push	r17
    3d00:	18 2f       	mov	r17, r24
    3d02:	06 2f       	mov	r16, r22
    3d04:	7a 01       	movw	r14, r20
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <STEPPER_set_mode>
    3d0c:	81 2f       	mov	r24, r17
    3d0e:	60 2f       	mov	r22, r16
    3d10:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <STEPPER_set_dir>
    3d14:	81 2f       	mov	r24, r17
    3d16:	b7 01       	movw	r22, r14
    3d18:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <STEPPER_set_speed>
    3d1c:	1f 91       	pop	r17
    3d1e:	0f 91       	pop	r16
    3d20:	ff 90       	pop	r15
    3d22:	ef 90       	pop	r14
    3d24:	08 95       	ret

00003d26 <STEPPER_set_accel>:
    3d26:	48 2f       	mov	r20, r24
    3d28:	81 e0       	ldi	r24, 0x01	; 1
    3d2a:	80 93 e4 07 	sts	0x07E4, r24
    3d2e:	cb 01       	movw	r24, r22
    3d30:	23 e0       	ldi	r18, 0x03	; 3
    3d32:	69 3e       	cpi	r22, 0xE9	; 233
    3d34:	72 07       	cpc	r23, r18
    3d36:	10 f0       	brcs	.+4      	; 0x3d3c <STEPPER_set_accel+0x16>
    3d38:	88 ee       	ldi	r24, 0xE8	; 232
    3d3a:	93 e0       	ldi	r25, 0x03	; 3
    3d3c:	41 30       	cpi	r20, 0x01	; 1
    3d3e:	71 f0       	breq	.+28     	; 0x3d5c <STEPPER_set_accel+0x36>
    3d40:	41 30       	cpi	r20, 0x01	; 1
    3d42:	18 f0       	brcs	.+6      	; 0x3d4a <STEPPER_set_accel+0x24>
    3d44:	42 30       	cpi	r20, 0x02	; 2
    3d46:	71 f4       	brne	.+28     	; 0x3d64 <STEPPER_set_accel+0x3e>
    3d48:	05 c0       	rjmp	.+10     	; 0x3d54 <STEPPER_set_accel+0x2e>
    3d4a:	90 93 b9 07 	sts	0x07B9, r25
    3d4e:	80 93 b8 07 	sts	0x07B8, r24
    3d52:	08 c0       	rjmp	.+16     	; 0x3d64 <STEPPER_set_accel+0x3e>
    3d54:	90 93 b9 07 	sts	0x07B9, r25
    3d58:	80 93 b8 07 	sts	0x07B8, r24
    3d5c:	90 93 bb 07 	sts	0x07BB, r25
    3d60:	80 93 ba 07 	sts	0x07BA, r24
    3d64:	10 92 e4 07 	sts	0x07E4, r1
    3d68:	08 95       	ret

00003d6a <STEPPER_set_dir>:
    3d6a:	98 2f       	mov	r25, r24
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	80 93 e4 07 	sts	0x07E4, r24
    3d72:	91 30       	cpi	r25, 0x01	; 1
    3d74:	51 f0       	breq	.+20     	; 0x3d8a <STEPPER_set_dir+0x20>
    3d76:	91 30       	cpi	r25, 0x01	; 1
    3d78:	18 f0       	brcs	.+6      	; 0x3d80 <STEPPER_set_dir+0x16>
    3d7a:	92 30       	cpi	r25, 0x02	; 2
    3d7c:	41 f4       	brne	.+16     	; 0x3d8e <STEPPER_set_dir+0x24>
    3d7e:	03 c0       	rjmp	.+6      	; 0x3d86 <STEPPER_set_dir+0x1c>
    3d80:	60 93 d1 07 	sts	0x07D1, r22
    3d84:	04 c0       	rjmp	.+8      	; 0x3d8e <STEPPER_set_dir+0x24>
    3d86:	60 93 d1 07 	sts	0x07D1, r22
    3d8a:	60 93 d2 07 	sts	0x07D2, r22
    3d8e:	10 92 e4 07 	sts	0x07E4, r1
    3d92:	08 95       	ret

00003d94 <STEPPER_set_mode>:
    3d94:	98 2f       	mov	r25, r24
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	80 93 e4 07 	sts	0x07E4, r24
    3d9c:	91 30       	cpi	r25, 0x01	; 1
    3d9e:	51 f0       	breq	.+20     	; 0x3db4 <STEPPER_set_mode+0x20>
    3da0:	91 30       	cpi	r25, 0x01	; 1
    3da2:	18 f0       	brcs	.+6      	; 0x3daa <STEPPER_set_mode+0x16>
    3da4:	92 30       	cpi	r25, 0x02	; 2
    3da6:	41 f4       	brne	.+16     	; 0x3db8 <STEPPER_set_mode+0x24>
    3da8:	03 c0       	rjmp	.+6      	; 0x3db0 <STEPPER_set_mode+0x1c>
    3daa:	60 93 ae 07 	sts	0x07AE, r22
    3dae:	04 c0       	rjmp	.+8      	; 0x3db8 <STEPPER_set_mode+0x24>
    3db0:	60 93 ae 07 	sts	0x07AE, r22
    3db4:	60 93 af 07 	sts	0x07AF, r22
    3db8:	10 92 e4 07 	sts	0x07E4, r1
    3dbc:	08 95       	ret

00003dbe <STEPPER_set_speed>:
    3dbe:	48 2f       	mov	r20, r24
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	80 93 e4 07 	sts	0x07E4, r24
    3dc6:	cb 01       	movw	r24, r22
    3dc8:	21 e0       	ldi	r18, 0x01	; 1
    3dca:	61 39       	cpi	r22, 0x91	; 145
    3dcc:	72 07       	cpc	r23, r18
    3dce:	10 f0       	brcs	.+4      	; 0x3dd4 <STEPPER_set_speed+0x16>
    3dd0:	80 e9       	ldi	r24, 0x90	; 144
    3dd2:	91 e0       	ldi	r25, 0x01	; 1
    3dd4:	41 30       	cpi	r20, 0x01	; 1
    3dd6:	71 f0       	breq	.+28     	; 0x3df4 <STEPPER_set_speed+0x36>
    3dd8:	41 30       	cpi	r20, 0x01	; 1
    3dda:	18 f0       	brcs	.+6      	; 0x3de2 <STEPPER_set_speed+0x24>
    3ddc:	42 30       	cpi	r20, 0x02	; 2
    3dde:	71 f4       	brne	.+28     	; 0x3dfc <STEPPER_set_speed+0x3e>
    3de0:	05 c0       	rjmp	.+10     	; 0x3dec <STEPPER_set_speed+0x2e>
    3de2:	90 93 b1 07 	sts	0x07B1, r25
    3de6:	80 93 b0 07 	sts	0x07B0, r24
    3dea:	08 c0       	rjmp	.+16     	; 0x3dfc <STEPPER_set_speed+0x3e>
    3dec:	90 93 b1 07 	sts	0x07B1, r25
    3df0:	80 93 b0 07 	sts	0x07B0, r24
    3df4:	90 93 b3 07 	sts	0x07B3, r25
    3df8:	80 93 b2 07 	sts	0x07B2, r24
    3dfc:	10 92 e4 07 	sts	0x07E4, r1
    3e00:	08 95       	ret

00003e02 <STEPPER_set_steps>:
    3e02:	98 2f       	mov	r25, r24
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	80 93 e4 07 	sts	0x07E4, r24
    3e0a:	91 30       	cpi	r25, 0x01	; 1
    3e0c:	71 f0       	breq	.+28     	; 0x3e2a <STEPPER_set_steps+0x28>
    3e0e:	91 30       	cpi	r25, 0x01	; 1
    3e10:	18 f0       	brcs	.+6      	; 0x3e18 <STEPPER_set_steps+0x16>
    3e12:	92 30       	cpi	r25, 0x02	; 2
    3e14:	71 f4       	brne	.+28     	; 0x3e32 <STEPPER_set_steps+0x30>
    3e16:	05 c0       	rjmp	.+10     	; 0x3e22 <STEPPER_set_steps+0x20>
    3e18:	70 93 c1 07 	sts	0x07C1, r23
    3e1c:	60 93 c0 07 	sts	0x07C0, r22
    3e20:	08 c0       	rjmp	.+16     	; 0x3e32 <STEPPER_set_steps+0x30>
    3e22:	70 93 c1 07 	sts	0x07C1, r23
    3e26:	60 93 c0 07 	sts	0x07C0, r22
    3e2a:	70 93 c3 07 	sts	0x07C3, r23
    3e2e:	60 93 c2 07 	sts	0x07C2, r22
    3e32:	10 92 e4 07 	sts	0x07E4, r1
    3e36:	08 95       	ret

00003e38 <STEPPER_step>:
    3e38:	8f 92       	push	r8
    3e3a:	9f 92       	push	r9
    3e3c:	af 92       	push	r10
    3e3e:	bf 92       	push	r11
    3e40:	cf 92       	push	r12
    3e42:	df 92       	push	r13
    3e44:	ef 92       	push	r14
    3e46:	ff 92       	push	r15
    3e48:	0f 93       	push	r16
    3e4a:	1f 93       	push	r17
    3e4c:	cf 93       	push	r28
    3e4e:	df 93       	push	r29
    3e50:	18 2f       	mov	r17, r24
    3e52:	f6 2e       	mov	r15, r22
    3e54:	5a 01       	movw	r10, r20
    3e56:	49 01       	movw	r8, r18
    3e58:	e6 01       	movw	r28, r12
    3e5a:	61 e0       	ldi	r22, 0x01	; 1
    3e5c:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <STEPPER_set_mode>
    3e60:	81 2f       	mov	r24, r17
    3e62:	b5 01       	movw	r22, r10
    3e64:	a4 01       	movw	r20, r8
    3e66:	0e 94 ce 27 	call	0x4f9c	; 0x4f9c <STEPPER_setup_decels>
    3e6a:	81 2f       	mov	r24, r17
    3e6c:	6f 2d       	mov	r22, r15
    3e6e:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <STEPPER_set_dir>
    3e72:	81 2f       	mov	r24, r17
    3e74:	60 2f       	mov	r22, r16
    3e76:	0e 94 b9 27 	call	0x4f72	; 0x4f72 <STEPPER_set_stop_mode>
    3e7a:	81 2f       	mov	r24, r17
    3e7c:	b5 01       	movw	r22, r10
    3e7e:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <STEPPER_set_steps>
    3e82:	c1 14       	cp	r12, r1
    3e84:	d1 04       	cpc	r13, r1
    3e86:	99 f0       	breq	.+38     	; 0x3eae <STEPPER_step+0x76>
    3e88:	11 30       	cpi	r17, 0x01	; 1
    3e8a:	49 f0       	breq	.+18     	; 0x3e9e <STEPPER_step+0x66>
    3e8c:	11 30       	cpi	r17, 0x01	; 1
    3e8e:	18 f0       	brcs	.+6      	; 0x3e96 <STEPPER_step+0x5e>
    3e90:	12 30       	cpi	r17, 0x02	; 2
    3e92:	69 f4       	brne	.+26     	; 0x3eae <STEPPER_step+0x76>
    3e94:	06 c0       	rjmp	.+12     	; 0x3ea2 <STEPPER_step+0x6a>
    3e96:	18 82       	st	Y, r1
    3e98:	10 92 e0 07 	sts	0x07E0, r1
    3e9c:	08 c0       	rjmp	.+16     	; 0x3eae <STEPPER_step+0x76>
    3e9e:	19 82       	std	Y+1, r1	; 0x01
    3ea0:	04 c0       	rjmp	.+8      	; 0x3eaa <STEPPER_step+0x72>
    3ea2:	18 82       	st	Y, r1
    3ea4:	19 82       	std	Y+1, r1	; 0x01
    3ea6:	10 92 e0 07 	sts	0x07E0, r1
    3eaa:	10 92 e1 07 	sts	0x07E1, r1
    3eae:	d0 93 e3 07 	sts	0x07E3, r29
    3eb2:	c0 93 e2 07 	sts	0x07E2, r28
    3eb6:	ee 20       	and	r14, r14
    3eb8:	b9 f5       	brne	.+110    	; 0x3f28 <STEPPER_step+0xf0>
    3eba:	8e e8       	ldi	r24, 0x8E	; 142
    3ebc:	94 e0       	ldi	r25, 0x04	; 4
    3ebe:	90 93 e3 07 	sts	0x07E3, r25
    3ec2:	80 93 e2 07 	sts	0x07E2, r24
    3ec6:	81 2f       	mov	r24, r17
    3ec8:	b4 01       	movw	r22, r8
    3eca:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <STEPPER_set_speed>
    3ece:	81 2f       	mov	r24, r17
    3ed0:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <STEPPER_go>
    3ed4:	11 30       	cpi	r17, 0x01	; 1
    3ed6:	71 f0       	breq	.+28     	; 0x3ef4 <STEPPER_step+0xbc>
    3ed8:	11 30       	cpi	r17, 0x01	; 1
    3eda:	18 f0       	brcs	.+6      	; 0x3ee2 <STEPPER_step+0xaa>
    3edc:	12 30       	cpi	r17, 0x02	; 2
    3ede:	59 f5       	brne	.+86     	; 0x3f36 <STEPPER_step+0xfe>
    3ee0:	12 c0       	rjmp	.+36     	; 0x3f06 <STEPPER_step+0xce>
    3ee2:	10 92 8e 04 	sts	0x048E, r1
    3ee6:	10 92 e0 07 	sts	0x07E0, r1
    3eea:	80 91 8e 04 	lds	r24, 0x048E
    3eee:	88 23       	and	r24, r24
    3ef0:	e1 f3       	breq	.-8      	; 0x3eea <STEPPER_step+0xb2>
    3ef2:	21 c0       	rjmp	.+66     	; 0x3f36 <STEPPER_step+0xfe>
    3ef4:	10 92 8f 04 	sts	0x048F, r1
    3ef8:	10 92 e1 07 	sts	0x07E1, r1
    3efc:	80 91 8f 04 	lds	r24, 0x048F
    3f00:	88 23       	and	r24, r24
    3f02:	e1 f3       	breq	.-8      	; 0x3efc <STEPPER_step+0xc4>
    3f04:	18 c0       	rjmp	.+48     	; 0x3f36 <STEPPER_step+0xfe>
    3f06:	10 92 8e 04 	sts	0x048E, r1
    3f0a:	10 92 8f 04 	sts	0x048F, r1
    3f0e:	10 92 e0 07 	sts	0x07E0, r1
    3f12:	10 92 e1 07 	sts	0x07E1, r1
    3f16:	80 91 8e 04 	lds	r24, 0x048E
    3f1a:	88 23       	and	r24, r24
    3f1c:	e1 f3       	breq	.-8      	; 0x3f16 <STEPPER_step+0xde>
    3f1e:	80 91 8f 04 	lds	r24, 0x048F
    3f22:	88 23       	and	r24, r24
    3f24:	c1 f3       	breq	.-16     	; 0x3f16 <STEPPER_step+0xde>
    3f26:	07 c0       	rjmp	.+14     	; 0x3f36 <STEPPER_step+0xfe>
    3f28:	81 2f       	mov	r24, r17
    3f2a:	b4 01       	movw	r22, r8
    3f2c:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <STEPPER_set_speed>
    3f30:	81 2f       	mov	r24, r17
    3f32:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <STEPPER_go>
    3f36:	df 91       	pop	r29
    3f38:	cf 91       	pop	r28
    3f3a:	1f 91       	pop	r17
    3f3c:	0f 91       	pop	r16
    3f3e:	ff 90       	pop	r15
    3f40:	ef 90       	pop	r14
    3f42:	df 90       	pop	r13
    3f44:	cf 90       	pop	r12
    3f46:	bf 90       	pop	r11
    3f48:	af 90       	pop	r10
    3f4a:	9f 90       	pop	r9
    3f4c:	8f 90       	pop	r8
    3f4e:	08 95       	ret

00003f50 <STEPPER_stop>:
    3f50:	0f 93       	push	r16
    3f52:	1f 93       	push	r17
    3f54:	18 2f       	mov	r17, r24
    3f56:	06 2f       	mov	r16, r22
    3f58:	66 23       	and	r22, r22
    3f5a:	49 f4       	brne	.+18     	; 0x3f6e <STEPPER_stop+0x1e>
    3f5c:	60 e0       	ldi	r22, 0x00	; 0
    3f5e:	70 e0       	ldi	r23, 0x00	; 0
    3f60:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <STEPPER_set_speed>
    3f64:	81 2f       	mov	r24, r17
    3f66:	60 e0       	ldi	r22, 0x00	; 0
    3f68:	70 e0       	ldi	r23, 0x00	; 0
    3f6a:	0e 94 01 1f 	call	0x3e02	; 0x3e02 <STEPPER_set_steps>
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	80 93 e4 07 	sts	0x07E4, r24
    3f74:	11 30       	cpi	r17, 0x01	; 1
    3f76:	51 f0       	breq	.+20     	; 0x3f8c <STEPPER_stop+0x3c>
    3f78:	11 30       	cpi	r17, 0x01	; 1
    3f7a:	18 f0       	brcs	.+6      	; 0x3f82 <STEPPER_stop+0x32>
    3f7c:	12 30       	cpi	r17, 0x02	; 2
    3f7e:	41 f4       	brne	.+16     	; 0x3f90 <STEPPER_stop+0x40>
    3f80:	03 c0       	rjmp	.+6      	; 0x3f88 <STEPPER_stop+0x38>
    3f82:	00 93 cc 07 	sts	0x07CC, r16
    3f86:	04 c0       	rjmp	.+8      	; 0x3f90 <STEPPER_stop+0x40>
    3f88:	00 93 cc 07 	sts	0x07CC, r16
    3f8c:	00 93 cd 07 	sts	0x07CD, r16
    3f90:	10 92 e4 07 	sts	0x07E4, r1
    3f94:	1f 91       	pop	r17
    3f96:	0f 91       	pop	r16
    3f98:	08 95       	ret

00003f9a <STEPPER_wait_and_then>:
    3f9a:	cf 92       	push	r12
    3f9c:	df 92       	push	r13
    3f9e:	ef 92       	push	r14
    3fa0:	ff 92       	push	r15
    3fa2:	0f 93       	push	r16
    3fa4:	1f 93       	push	r17
    3fa6:	df 93       	push	r29
    3fa8:	cf 93       	push	r28
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fb0:	81 30       	cpi	r24, 0x01	; 1
    3fb2:	61 f0       	breq	.+24     	; 0x3fcc <STEPPER_wait_and_then+0x32>
    3fb4:	81 30       	cpi	r24, 0x01	; 1
    3fb6:	18 f0       	brcs	.+6      	; 0x3fbe <STEPPER_wait_and_then+0x24>
    3fb8:	82 30       	cpi	r24, 0x02	; 2
    3fba:	a1 f5       	brne	.+104    	; 0x4024 <STEPPER_wait_and_then+0x8a>
    3fbc:	11 c0       	rjmp	.+34     	; 0x3fe0 <STEPPER_wait_and_then+0x46>
    3fbe:	ec 85       	ldd	r30, Y+12	; 0x0c
    3fc0:	fd 85       	ldd	r31, Y+13	; 0x0d
    3fc2:	80 91 e5 07 	lds	r24, 0x07E5
    3fc6:	88 23       	and	r24, r24
    3fc8:	e1 f3       	breq	.-8      	; 0x3fc2 <STEPPER_wait_and_then+0x28>
    3fca:	06 c0       	rjmp	.+12     	; 0x3fd8 <STEPPER_wait_and_then+0x3e>
    3fcc:	ec 85       	ldd	r30, Y+12	; 0x0c
    3fce:	fd 85       	ldd	r31, Y+13	; 0x0d
    3fd0:	80 91 e6 07 	lds	r24, 0x07E6
    3fd4:	88 23       	and	r24, r24
    3fd6:	e1 f3       	breq	.-8      	; 0x3fd0 <STEPPER_wait_and_then+0x36>
    3fd8:	30 97       	sbiw	r30, 0x00	; 0
    3fda:	21 f1       	breq	.+72     	; 0x4024 <STEPPER_wait_and_then+0x8a>
    3fdc:	09 95       	icall
    3fde:	22 c0       	rjmp	.+68     	; 0x4024 <STEPPER_wait_and_then+0x8a>
    3fe0:	cc 84       	ldd	r12, Y+12	; 0x0c
    3fe2:	dd 84       	ldd	r13, Y+13	; 0x0d
    3fe4:	ee 84       	ldd	r14, Y+14	; 0x0e
    3fe6:	ff 84       	ldd	r15, Y+15	; 0x0f
    3fe8:	00 e0       	ldi	r16, 0x00	; 0
    3fea:	10 e0       	ldi	r17, 0x00	; 0
    3fec:	00 23       	and	r16, r16
    3fee:	51 f4       	brne	.+20     	; 0x4004 <STEPPER_wait_and_then+0x6a>
    3ff0:	80 91 e5 07 	lds	r24, 0x07E5
    3ff4:	88 23       	and	r24, r24
    3ff6:	31 f0       	breq	.+12     	; 0x4004 <STEPPER_wait_and_then+0x6a>
    3ff8:	c1 14       	cp	r12, r1
    3ffa:	d1 04       	cpc	r13, r1
    3ffc:	11 f0       	breq	.+4      	; 0x4002 <STEPPER_wait_and_then+0x68>
    3ffe:	f6 01       	movw	r30, r12
    4000:	09 95       	icall
    4002:	01 e0       	ldi	r16, 0x01	; 1
    4004:	11 23       	and	r17, r17
    4006:	51 f4       	brne	.+20     	; 0x401c <STEPPER_wait_and_then+0x82>
    4008:	80 91 e6 07 	lds	r24, 0x07E6
    400c:	88 23       	and	r24, r24
    400e:	31 f0       	breq	.+12     	; 0x401c <STEPPER_wait_and_then+0x82>
    4010:	e1 14       	cp	r14, r1
    4012:	f1 04       	cpc	r15, r1
    4014:	11 f0       	breq	.+4      	; 0x401a <STEPPER_wait_and_then+0x80>
    4016:	f7 01       	movw	r30, r14
    4018:	09 95       	icall
    401a:	11 e0       	ldi	r17, 0x01	; 1
    401c:	00 23       	and	r16, r16
    401e:	31 f3       	breq	.-52     	; 0x3fec <STEPPER_wait_and_then+0x52>
    4020:	11 23       	and	r17, r17
    4022:	21 f3       	breq	.-56     	; 0x3fec <STEPPER_wait_and_then+0x52>
    4024:	cf 91       	pop	r28
    4026:	df 91       	pop	r29
    4028:	1f 91       	pop	r17
    402a:	0f 91       	pop	r16
    402c:	ff 90       	pop	r15
    402e:	ef 90       	pop	r14
    4030:	df 90       	pop	r13
    4032:	cf 90       	pop	r12
    4034:	08 95       	ret

00004036 <SYS_get_state>:
    4036:	e8 2f       	mov	r30, r24
    4038:	f0 e0       	ldi	r31, 0x00	; 0
    403a:	e3 31       	cpi	r30, 0x13	; 19
    403c:	f1 05       	cpc	r31, r1
    403e:	40 f4       	brcc	.+16     	; 0x4050 <SYS_get_state+0x1a>
    4040:	e2 5c       	subi	r30, 0xC2	; 194
    4042:	ff 4f       	sbci	r31, 0xFF	; 255
    4044:	ee 0f       	add	r30, r30
    4046:	ff 1f       	adc	r31, r31
    4048:	05 90       	lpm	r0, Z+
    404a:	f4 91       	lpm	r31, Z+
    404c:	e0 2d       	mov	r30, r0
    404e:	09 94       	ijmp
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	08 95       	ret
    4054:	80 91 e7 07 	lds	r24, 0x07E7
    4058:	08 95       	ret
    405a:	80 91 e8 07 	lds	r24, 0x07E8
    405e:	08 95       	ret
    4060:	80 91 e9 07 	lds	r24, 0x07E9
    4064:	08 95       	ret
    4066:	80 91 ea 07 	lds	r24, 0x07EA
    406a:	08 95       	ret
    406c:	80 91 eb 07 	lds	r24, 0x07EB
    4070:	08 95       	ret
    4072:	80 91 ed 07 	lds	r24, 0x07ED
    4076:	08 95       	ret
    4078:	80 91 ec 07 	lds	r24, 0x07EC
    407c:	08 95       	ret
    407e:	80 91 ee 07 	lds	r24, 0x07EE
    4082:	08 95       	ret
    4084:	80 91 ef 07 	lds	r24, 0x07EF
    4088:	08 95       	ret
    408a:	80 91 f0 07 	lds	r24, 0x07F0
    408e:	08 95       	ret
    4090:	80 91 f1 07 	lds	r24, 0x07F1
    4094:	08 95       	ret
    4096:	80 91 f2 07 	lds	r24, 0x07F2
    409a:	08 95       	ret
    409c:	80 91 f3 07 	lds	r24, 0x07F3
    40a0:	08 95       	ret
    40a2:	80 91 f4 07 	lds	r24, 0x07F4
    40a6:	08 95       	ret
    40a8:	80 91 f5 07 	lds	r24, 0x07F5
    40ac:	08 95       	ret
    40ae:	80 91 f6 07 	lds	r24, 0x07F6
    40b2:	08 95       	ret
    40b4:	80 91 f7 07 	lds	r24, 0x07F7
    40b8:	08 95       	ret
    40ba:	80 91 f8 07 	lds	r24, 0x07F8
    40be:	08 95       	ret
    40c0:	80 91 f9 07 	lds	r24, 0x07F9
    40c4:	08 95       	ret

000040c6 <SYS_set_state>:
    40c6:	e8 2f       	mov	r30, r24
    40c8:	f0 e0       	ldi	r31, 0x00	; 0
    40ca:	e3 31       	cpi	r30, 0x13	; 19
    40cc:	f1 05       	cpc	r31, r1
    40ce:	08 f0       	brcs	.+2      	; 0x40d2 <SYS_set_state+0xc>
    40d0:	40 c0       	rjmp	.+128    	; 0x4152 <SYS_set_state+0x8c>
    40d2:	ef 5a       	subi	r30, 0xAF	; 175
    40d4:	ff 4f       	sbci	r31, 0xFF	; 255
    40d6:	ee 0f       	add	r30, r30
    40d8:	ff 1f       	adc	r31, r31
    40da:	05 90       	lpm	r0, Z+
    40dc:	f4 91       	lpm	r31, Z+
    40de:	e0 2d       	mov	r30, r0
    40e0:	09 94       	ijmp
    40e2:	60 93 e7 07 	sts	0x07E7, r22
    40e6:	08 95       	ret
    40e8:	60 93 e8 07 	sts	0x07E8, r22
    40ec:	08 95       	ret
    40ee:	60 93 e9 07 	sts	0x07E9, r22
    40f2:	08 95       	ret
    40f4:	60 93 ea 07 	sts	0x07EA, r22
    40f8:	08 95       	ret
    40fa:	60 93 eb 07 	sts	0x07EB, r22
    40fe:	08 95       	ret
    4100:	60 93 ed 07 	sts	0x07ED, r22
    4104:	08 95       	ret
    4106:	60 93 ec 07 	sts	0x07EC, r22
    410a:	08 95       	ret
    410c:	60 93 ee 07 	sts	0x07EE, r22
    4110:	08 95       	ret
    4112:	60 93 ef 07 	sts	0x07EF, r22
    4116:	08 95       	ret
    4118:	60 93 f0 07 	sts	0x07F0, r22
    411c:	08 95       	ret
    411e:	60 93 f1 07 	sts	0x07F1, r22
    4122:	08 95       	ret
    4124:	60 93 f2 07 	sts	0x07F2, r22
    4128:	08 95       	ret
    412a:	60 93 f3 07 	sts	0x07F3, r22
    412e:	08 95       	ret
    4130:	60 93 f4 07 	sts	0x07F4, r22
    4134:	08 95       	ret
    4136:	60 93 f5 07 	sts	0x07F5, r22
    413a:	08 95       	ret
    413c:	60 93 f6 07 	sts	0x07F6, r22
    4140:	08 95       	ret
    4142:	60 93 f7 07 	sts	0x07F7, r22
    4146:	08 95       	ret
    4148:	60 93 f8 07 	sts	0x07F8, r22
    414c:	08 95       	ret
    414e:	60 93 f7 07 	sts	0x07F7, r22
    4152:	08 95       	ret

00004154 <ATTINY_get_sensors>:
    4154:	0f 93       	push	r16
    4156:	1f 93       	push	r17
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    415e:	81 30       	cpi	r24, 0x01	; 1
    4160:	11 f0       	breq	.+4      	; 0x4166 <ATTINY_get_sensors+0x12>
    4162:	00 e0       	ldi	r16, 0x00	; 0
    4164:	24 c0       	rjmp	.+72     	; 0x41ae <ATTINY_get_sensors+0x5a>
    4166:	87 e0       	ldi	r24, 0x07	; 7
    4168:	0e 94 a1 1b 	call	0x3742	; 0x3742 <SPI_set_slave_addr>
    416c:	82 e0       	ldi	r24, 0x02	; 2
    416e:	6a e0       	ldi	r22, 0x0A	; 10
    4170:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <SPI_transmit>
    4174:	82 e0       	ldi	r24, 0x02	; 2
    4176:	62 eb       	ldi	r22, 0xB2	; 178
    4178:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <SPI_transmit>
    417c:	18 ec       	ldi	r17, 0xC8	; 200
    417e:	81 2f       	mov	r24, r17
    4180:	8a 95       	dec	r24
    4182:	f1 f7       	brne	.-4      	; 0x4180 <ATTINY_get_sensors+0x2c>
    4184:	82 e0       	ldi	r24, 0x02	; 2
    4186:	60 e0       	ldi	r22, 0x00	; 0
    4188:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <SPI_receive>
    418c:	08 2f       	mov	r16, r24
    418e:	81 2f       	mov	r24, r17
    4190:	8a 95       	dec	r24
    4192:	f1 f7       	brne	.-4      	; 0x4190 <ATTINY_get_sensors+0x3c>
    4194:	82 e0       	ldi	r24, 0x02	; 2
    4196:	60 e0       	ldi	r22, 0x00	; 0
    4198:	0e 94 85 26 	call	0x4d0a	; 0x4d0a <SPI_receive>
    419c:	1a 95       	dec	r17
    419e:	f1 f7       	brne	.-4      	; 0x419c <ATTINY_get_sensors+0x48>
    41a0:	87 e0       	ldi	r24, 0x07	; 7
    41a2:	0e 94 a1 1b 	call	0x3742	; 0x3742 <SPI_set_slave_addr>
    41a6:	88 e8       	ldi	r24, 0x88	; 136
    41a8:	93 e1       	ldi	r25, 0x13	; 19
    41aa:	01 97       	sbiw	r24, 0x01	; 1
    41ac:	f1 f7       	brne	.-4      	; 0x41aa <ATTINY_get_sensors+0x56>
    41ae:	80 2f       	mov	r24, r16
    41b0:	1f 91       	pop	r17
    41b2:	0f 91       	pop	r16
    41b4:	08 95       	ret

000041b6 <ATTINY_get_SW_state>:
    41b6:	1f 93       	push	r17
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	18 2f       	mov	r17, r24
    41be:	80 91 91 04 	lds	r24, 0x0491
    41c2:	88 23       	and	r24, r24
    41c4:	41 f0       	breq	.+16     	; 0x41d6 <ATTINY_get_SW_state+0x20>
    41c6:	80 91 9b 04 	lds	r24, 0x049B
    41ca:	88 23       	and	r24, r24
    41cc:	99 f0       	breq	.+38     	; 0x41f4 <ATTINY_get_SW_state+0x3e>
    41ce:	10 92 91 04 	sts	0x0491, r1
    41d2:	10 92 9b 04 	sts	0x049B, r1
    41d6:	0e 94 aa 20 	call	0x4154	; 0x4154 <ATTINY_get_sensors>
    41da:	80 93 90 04 	sts	0x0490, r24
    41de:	85 e9       	ldi	r24, 0x95	; 149
    41e0:	94 e0       	ldi	r25, 0x04	; 4
    41e2:	61 e0       	ldi	r22, 0x01	; 1
    41e4:	40 e0       	ldi	r20, 0x00	; 0
    41e6:	22 e3       	ldi	r18, 0x32	; 50
    41e8:	30 e0       	ldi	r19, 0x00	; 0
    41ea:	0e 94 99 21 	call	0x4332	; 0x4332 <TMRSRVC_new>
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	80 93 91 04 	sts	0x0491, r24
    41f4:	90 91 90 04 	lds	r25, 0x0490
    41f8:	a1 2f       	mov	r26, r17
    41fa:	b0 e0       	ldi	r27, 0x00	; 0
    41fc:	ed 01       	movw	r28, r26
    41fe:	cc 5b       	subi	r28, 0xBC	; 188
    4200:	db 4f       	sbci	r29, 0xFB	; 251
    4202:	88 81       	ld	r24, Y
    4204:	88 23       	and	r24, r24
    4206:	69 f0       	breq	.+26     	; 0x4222 <ATTINY_get_SW_state+0x6c>
    4208:	fd 01       	movw	r30, r26
    420a:	e9 5b       	subi	r30, 0xB9	; 185
    420c:	fb 4f       	sbci	r31, 0xFB	; 251
    420e:	80 81       	ld	r24, Z
    4210:	98 23       	and	r25, r24
    4212:	c1 f0       	breq	.+48     	; 0x4244 <ATTINY_get_SW_state+0x8e>
    4214:	fd 01       	movw	r30, r26
    4216:	ee 56       	subi	r30, 0x6E	; 110
    4218:	fb 4f       	sbci	r31, 0xFB	; 251
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	80 83       	st	Z, r24
    421e:	18 82       	st	Y, r1
    4220:	11 c0       	rjmp	.+34     	; 0x4244 <ATTINY_get_SW_state+0x8e>
    4222:	fd 01       	movw	r30, r26
    4224:	ee 56       	subi	r30, 0x6E	; 110
    4226:	fb 4f       	sbci	r31, 0xFB	; 251
    4228:	80 81       	ld	r24, Z
    422a:	81 11       	cpse	r24, r1
    422c:	10 82       	st	Z, r1
    422e:	fd 01       	movw	r30, r26
    4230:	e9 5b       	subi	r30, 0xB9	; 185
    4232:	fb 4f       	sbci	r31, 0xFB	; 251
    4234:	80 81       	ld	r24, Z
    4236:	98 23       	and	r25, r24
    4238:	29 f4       	brne	.+10     	; 0x4244 <ATTINY_get_SW_state+0x8e>
    423a:	fd 01       	movw	r30, r26
    423c:	ec 5b       	subi	r30, 0xBC	; 188
    423e:	fb 4f       	sbci	r31, 0xFB	; 251
    4240:	81 e0       	ldi	r24, 0x01	; 1
    4242:	80 83       	st	Z, r24
    4244:	ae 56       	subi	r26, 0x6E	; 110
    4246:	bb 4f       	sbci	r27, 0xFB	; 251
    4248:	8c 91       	ld	r24, X
    424a:	df 91       	pop	r29
    424c:	cf 91       	pop	r28
    424e:	1f 91       	pop	r17
    4250:	08 95       	ret

00004252 <ATTINY_open>:
    4252:	82 e0       	ldi	r24, 0x02	; 2
    4254:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    4258:	88 23       	and	r24, r24
    425a:	19 f4       	brne	.+6      	; 0x4262 <ATTINY_open+0x10>
    425c:	90 e0       	ldi	r25, 0x00	; 0
    425e:	82 e0       	ldi	r24, 0x02	; 2
    4260:	08 95       	ret
    4262:	10 92 15 08 	sts	0x0815, r1
    4266:	10 92 14 08 	sts	0x0814, r1
    426a:	10 92 17 08 	sts	0x0817, r1
    426e:	10 92 16 08 	sts	0x0816, r1
    4272:	10 92 19 08 	sts	0x0819, r1
    4276:	10 92 18 08 	sts	0x0818, r1
    427a:	10 92 1b 08 	sts	0x081B, r1
    427e:	10 92 1a 08 	sts	0x081A, r1
    4282:	10 92 1d 08 	sts	0x081D, r1
    4286:	10 92 1c 08 	sts	0x081C, r1
    428a:	80 e9       	ldi	r24, 0x90	; 144
    428c:	91 e0       	ldi	r25, 0x01	; 1
    428e:	90 93 01 08 	sts	0x0801, r25
    4292:	80 93 00 08 	sts	0x0800, r24
    4296:	90 93 03 08 	sts	0x0803, r25
    429a:	80 93 02 08 	sts	0x0802, r24
    429e:	90 93 05 08 	sts	0x0805, r25
    42a2:	80 93 04 08 	sts	0x0804, r24
    42a6:	90 93 07 08 	sts	0x0807, r25
    42aa:	80 93 06 08 	sts	0x0806, r24
    42ae:	90 93 09 08 	sts	0x0809, r25
    42b2:	80 93 08 08 	sts	0x0808, r24
    42b6:	84 e3       	ldi	r24, 0x34	; 52
    42b8:	98 e0       	ldi	r25, 0x08	; 8
    42ba:	90 93 0b 08 	sts	0x080B, r25
    42be:	80 93 0a 08 	sts	0x080A, r24
    42c2:	90 93 0d 08 	sts	0x080D, r25
    42c6:	80 93 0c 08 	sts	0x080C, r24
    42ca:	90 93 0f 08 	sts	0x080F, r25
    42ce:	80 93 0e 08 	sts	0x080E, r24
    42d2:	90 93 11 08 	sts	0x0811, r25
    42d6:	80 93 10 08 	sts	0x0810, r24
    42da:	90 93 13 08 	sts	0x0813, r25
    42de:	80 93 12 08 	sts	0x0812, r24
    42e2:	81 e0       	ldi	r24, 0x01	; 1
    42e4:	61 e0       	ldi	r22, 0x01	; 1
    42e6:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    42ea:	91 e0       	ldi	r25, 0x01	; 1
    42ec:	81 e0       	ldi	r24, 0x01	; 1
    42ee:	08 95       	ret

000042f0 <TMRSRVC_delay>:
    42f0:	df 93       	push	r29
    42f2:	cf 93       	push	r28
    42f4:	cd b7       	in	r28, 0x3d	; 61
    42f6:	de b7       	in	r29, 0x3e	; 62
    42f8:	29 97       	sbiw	r28, 0x09	; 9
    42fa:	0f b6       	in	r0, 0x3f	; 63
    42fc:	f8 94       	cli
    42fe:	de bf       	out	0x3e, r29	; 62
    4300:	0f be       	out	0x3f, r0	; 63
    4302:	cd bf       	out	0x3d, r28	; 61
    4304:	9c 01       	movw	r18, r24
    4306:	ce 01       	movw	r24, r28
    4308:	01 96       	adiw	r24, 0x01	; 1
    430a:	61 e0       	ldi	r22, 0x01	; 1
    430c:	40 e0       	ldi	r20, 0x00	; 0
    430e:	0e 94 99 21 	call	0x4332	; 0x4332 <TMRSRVC_new>
    4312:	98 2f       	mov	r25, r24
    4314:	88 23       	and	r24, r24
    4316:	19 f4       	brne	.+6      	; 0x431e <TMRSRVC_delay+0x2e>
    4318:	8f 81       	ldd	r24, Y+7	; 0x07
    431a:	88 23       	and	r24, r24
    431c:	e9 f3       	breq	.-6      	; 0x4318 <TMRSRVC_delay+0x28>
    431e:	89 2f       	mov	r24, r25
    4320:	29 96       	adiw	r28, 0x09	; 9
    4322:	0f b6       	in	r0, 0x3f	; 63
    4324:	f8 94       	cli
    4326:	de bf       	out	0x3e, r29	; 62
    4328:	0f be       	out	0x3f, r0	; 63
    432a:	cd bf       	out	0x3d, r28	; 61
    432c:	cf 91       	pop	r28
    432e:	df 91       	pop	r29
    4330:	08 95       	ret

00004332 <TMRSRVC_new>:
    4332:	ef 92       	push	r14
    4334:	ff 92       	push	r15
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	ec 01       	movw	r28, r24
    4340:	f6 2e       	mov	r15, r22
    4342:	e4 2e       	mov	r14, r20
    4344:	89 01       	movw	r16, r18
    4346:	88 e0       	ldi	r24, 0x08	; 8
    4348:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    434c:	81 30       	cpi	r24, 0x01	; 1
    434e:	11 f0       	breq	.+4      	; 0x4354 <TMRSRVC_new+0x22>
    4350:	81 e0       	ldi	r24, 0x01	; 1
    4352:	26 c0       	rjmp	.+76     	; 0x43a0 <TMRSRVC_new+0x6e>
    4354:	84 e0       	ldi	r24, 0x04	; 4
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	0e 94 d7 34 	call	0x69ae	; 0x69ae <malloc>
    435c:	fc 01       	movw	r30, r24
    435e:	00 97       	sbiw	r24, 0x00	; 0
    4360:	11 f4       	brne	.+4      	; 0x4366 <TMRSRVC_new+0x34>
    4362:	82 e0       	ldi	r24, 0x02	; 2
    4364:	1d c0       	rjmp	.+58     	; 0x43a0 <TMRSRVC_new+0x6e>
    4366:	f9 82       	std	Y+1, r15	; 0x01
    4368:	f0 fc       	sbrc	r15, 0
    436a:	1e 82       	std	Y+6, r1	; 0x06
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	e8 16       	cp	r14, r24
    4370:	19 f4       	brne	.+6      	; 0x4378 <TMRSRVC_new+0x46>
    4372:	89 81       	ldd	r24, Y+1	; 0x01
    4374:	84 60       	ori	r24, 0x04	; 4
    4376:	89 83       	std	Y+1, r24	; 0x01
    4378:	89 81       	ldd	r24, Y+1	; 0x01
    437a:	88 60       	ori	r24, 0x08	; 8
    437c:	89 83       	std	Y+1, r24	; 0x01
    437e:	1b 83       	std	Y+3, r17	; 0x03
    4380:	0a 83       	std	Y+2, r16	; 0x02
    4382:	1d 83       	std	Y+5, r17	; 0x05
    4384:	0c 83       	std	Y+4, r16	; 0x04
    4386:	d1 83       	std	Z+1, r29	; 0x01
    4388:	c0 83       	st	Z, r28
    438a:	13 82       	std	Z+3, r1	; 0x03
    438c:	12 82       	std	Z+2, r1	; 0x02
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	80 93 ee 04 	sts	0x04EE, r24
    4394:	cf 01       	movw	r24, r30
    4396:	0e 94 2e 28 	call	0x505c	; 0x505c <TMRSRVC_insert>
    439a:	10 92 ee 04 	sts	0x04EE, r1
    439e:	80 e0       	ldi	r24, 0x00	; 0
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	1f 91       	pop	r17
    43a6:	0f 91       	pop	r16
    43a8:	ff 90       	pop	r15
    43aa:	ef 90       	pop	r14
    43ac:	08 95       	ret

000043ae <I2C_MSTR_get>:
    43ae:	fc 01       	movw	r30, r24
    43b0:	80 91 21 08 	lds	r24, 0x0821
    43b4:	81 30       	cpi	r24, 0x01	; 1
    43b6:	11 f0       	breq	.+4      	; 0x43bc <I2C_MSTR_get+0xe>
    43b8:	85 e0       	ldi	r24, 0x05	; 5
    43ba:	08 95       	ret
    43bc:	80 91 22 08 	lds	r24, 0x0822
    43c0:	81 30       	cpi	r24, 0x01	; 1
    43c2:	11 f0       	breq	.+4      	; 0x43c8 <I2C_MSTR_get+0x1a>
    43c4:	8a e0       	ldi	r24, 0x0A	; 10
    43c6:	08 95       	ret
    43c8:	61 30       	cpi	r22, 0x01	; 1
    43ca:	11 f4       	brne	.+4      	; 0x43d0 <I2C_MSTR_get+0x22>
    43cc:	84 ec       	ldi	r24, 0xC4	; 196
    43ce:	01 c0       	rjmp	.+2      	; 0x43d2 <I2C_MSTR_get+0x24>
    43d0:	84 e8       	ldi	r24, 0x84	; 132
    43d2:	80 93 bc 00 	sts	0x00BC, r24
    43d6:	80 91 bc 00 	lds	r24, 0x00BC
    43da:	87 ff       	sbrs	r24, 7
    43dc:	fc cf       	rjmp	.-8      	; 0x43d6 <I2C_MSTR_get+0x28>
    43de:	61 30       	cpi	r22, 0x01	; 1
    43e0:	31 f4       	brne	.+12     	; 0x43ee <I2C_MSTR_get+0x40>
    43e2:	80 91 b9 00 	lds	r24, 0x00B9
    43e6:	88 7f       	andi	r24, 0xF8	; 248
    43e8:	80 35       	cpi	r24, 0x50	; 80
    43ea:	59 f4       	brne	.+22     	; 0x4402 <I2C_MSTR_get+0x54>
    43ec:	05 c0       	rjmp	.+10     	; 0x43f8 <I2C_MSTR_get+0x4a>
    43ee:	80 91 b9 00 	lds	r24, 0x00B9
    43f2:	88 7f       	andi	r24, 0xF8	; 248
    43f4:	88 35       	cpi	r24, 0x58	; 88
    43f6:	29 f4       	brne	.+10     	; 0x4402 <I2C_MSTR_get+0x54>
    43f8:	80 91 bb 00 	lds	r24, 0x00BB
    43fc:	80 83       	st	Z, r24
    43fe:	80 e0       	ldi	r24, 0x00	; 0
    4400:	08 95       	ret
    4402:	82 e0       	ldi	r24, 0x02	; 2
    4404:	08 95       	ret

00004406 <I2C_MSTR_send>:
    4406:	98 2f       	mov	r25, r24
    4408:	80 91 21 08 	lds	r24, 0x0821
    440c:	81 30       	cpi	r24, 0x01	; 1
    440e:	11 f0       	breq	.+4      	; 0x4414 <I2C_MSTR_send+0xe>
    4410:	85 e0       	ldi	r24, 0x05	; 5
    4412:	08 95       	ret
    4414:	80 91 22 08 	lds	r24, 0x0822
    4418:	81 30       	cpi	r24, 0x01	; 1
    441a:	11 f0       	breq	.+4      	; 0x4420 <I2C_MSTR_send+0x1a>
    441c:	8a e0       	ldi	r24, 0x0A	; 10
    441e:	08 95       	ret
    4420:	90 93 bb 00 	sts	0x00BB, r25
    4424:	84 e8       	ldi	r24, 0x84	; 132
    4426:	80 93 bc 00 	sts	0x00BC, r24
    442a:	80 91 bc 00 	lds	r24, 0x00BC
    442e:	87 ff       	sbrs	r24, 7
    4430:	fc cf       	rjmp	.-8      	; 0x442a <I2C_MSTR_send+0x24>
    4432:	80 91 b9 00 	lds	r24, 0x00B9
    4436:	90 e0       	ldi	r25, 0x00	; 0
    4438:	88 7f       	andi	r24, 0xF8	; 248
    443a:	90 70       	andi	r25, 0x00	; 0
    443c:	88 32       	cpi	r24, 0x28	; 40
    443e:	91 05       	cpc	r25, r1
    4440:	21 f0       	breq	.+8      	; 0x444a <I2C_MSTR_send+0x44>
    4442:	c0 97       	sbiw	r24, 0x30	; 48
    4444:	21 f4       	brne	.+8      	; 0x444e <I2C_MSTR_send+0x48>
    4446:	83 e0       	ldi	r24, 0x03	; 3
    4448:	08 95       	ret
    444a:	80 e0       	ldi	r24, 0x00	; 0
    444c:	08 95       	ret
    444e:	8c e0       	ldi	r24, 0x0C	; 12
    4450:	08 95       	ret

00004452 <I2C_MSTR_start>:
    4452:	98 2f       	mov	r25, r24
    4454:	20 91 21 08 	lds	r18, 0x0821
    4458:	21 30       	cpi	r18, 0x01	; 1
    445a:	11 f0       	breq	.+4      	; 0x4460 <I2C_MSTR_start+0xe>
    445c:	85 e0       	ldi	r24, 0x05	; 5
    445e:	08 95       	ret
    4460:	80 91 23 08 	lds	r24, 0x0823
    4464:	81 30       	cpi	r24, 0x01	; 1
    4466:	11 f4       	brne	.+4      	; 0x446c <I2C_MSTR_start+0x1a>
    4468:	89 e0       	ldi	r24, 0x09	; 9
    446a:	08 95       	ret
    446c:	20 93 22 08 	sts	0x0822, r18
    4470:	84 ea       	ldi	r24, 0xA4	; 164
    4472:	80 93 bc 00 	sts	0x00BC, r24
    4476:	80 91 bc 00 	lds	r24, 0x00BC
    447a:	87 ff       	sbrs	r24, 7
    447c:	fc cf       	rjmp	.-8      	; 0x4476 <I2C_MSTR_start+0x24>
    447e:	80 91 b9 00 	lds	r24, 0x00B9
    4482:	88 7f       	andi	r24, 0xF8	; 248
    4484:	88 30       	cpi	r24, 0x08	; 8
    4486:	39 f0       	breq	.+14     	; 0x4496 <I2C_MSTR_start+0x44>
    4488:	80 91 b9 00 	lds	r24, 0x00B9
    448c:	88 7f       	andi	r24, 0xF8	; 248
    448e:	80 31       	cpi	r24, 0x10	; 16
    4490:	11 f0       	breq	.+4      	; 0x4496 <I2C_MSTR_start+0x44>
    4492:	81 e0       	ldi	r24, 0x01	; 1
    4494:	08 95       	ret
    4496:	61 30       	cpi	r22, 0x01	; 1
    4498:	19 f4       	brne	.+6      	; 0x44a0 <I2C_MSTR_start+0x4e>
    449a:	99 0f       	add	r25, r25
    449c:	91 60       	ori	r25, 0x01	; 1
    449e:	03 c0       	rjmp	.+6      	; 0x44a6 <I2C_MSTR_start+0x54>
    44a0:	66 23       	and	r22, r22
    44a2:	19 f4       	brne	.+6      	; 0x44aa <I2C_MSTR_start+0x58>
    44a4:	99 0f       	add	r25, r25
    44a6:	90 93 bb 00 	sts	0x00BB, r25
    44aa:	84 e8       	ldi	r24, 0x84	; 132
    44ac:	80 93 bc 00 	sts	0x00BC, r24
    44b0:	80 91 bc 00 	lds	r24, 0x00BC
    44b4:	87 ff       	sbrs	r24, 7
    44b6:	fc cf       	rjmp	.-8      	; 0x44b0 <I2C_MSTR_start+0x5e>
    44b8:	61 30       	cpi	r22, 0x01	; 1
    44ba:	31 f4       	brne	.+12     	; 0x44c8 <I2C_MSTR_start+0x76>
    44bc:	80 91 b9 00 	lds	r24, 0x00B9
    44c0:	88 7f       	andi	r24, 0xF8	; 248
    44c2:	80 34       	cpi	r24, 0x40	; 64
    44c4:	41 f4       	brne	.+16     	; 0x44d6 <I2C_MSTR_start+0x84>
    44c6:	09 c0       	rjmp	.+18     	; 0x44da <I2C_MSTR_start+0x88>
    44c8:	66 23       	and	r22, r22
    44ca:	39 f4       	brne	.+14     	; 0x44da <I2C_MSTR_start+0x88>
    44cc:	80 91 b9 00 	lds	r24, 0x00B9
    44d0:	88 7f       	andi	r24, 0xF8	; 248
    44d2:	88 31       	cpi	r24, 0x18	; 24
    44d4:	11 f0       	breq	.+4      	; 0x44da <I2C_MSTR_start+0x88>
    44d6:	82 e0       	ldi	r24, 0x02	; 2
    44d8:	08 95       	ret
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	08 95       	ret

000044de <I2C_MSTR_stop>:
    44de:	80 91 22 08 	lds	r24, 0x0822
    44e2:	81 30       	cpi	r24, 0x01	; 1
    44e4:	11 f0       	breq	.+4      	; 0x44ea <I2C_MSTR_stop+0xc>
    44e6:	8a e0       	ldi	r24, 0x0A	; 10
    44e8:	08 95       	ret
    44ea:	80 91 24 08 	lds	r24, 0x0824
    44ee:	81 30       	cpi	r24, 0x01	; 1
    44f0:	29 f4       	brne	.+10     	; 0x44fc <I2C_MSTR_stop+0x1e>
    44f2:	85 e9       	ldi	r24, 0x95	; 149
    44f4:	80 93 bc 00 	sts	0x00BC, r24
    44f8:	80 e0       	ldi	r24, 0x00	; 0
    44fa:	08 95       	ret
    44fc:	84 e9       	ldi	r24, 0x94	; 148
    44fe:	80 93 bc 00 	sts	0x00BC, r24
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	08 95       	ret

00004506 <I2C_open>:
    4506:	82 e1       	ldi	r24, 0x12	; 18
    4508:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    450c:	88 23       	and	r24, r24
    450e:	b1 f4       	brne	.+44     	; 0x453c <I2C_open+0x36>
    4510:	10 92 21 08 	sts	0x0821, r1
    4514:	10 92 22 08 	sts	0x0822, r1
    4518:	10 92 23 08 	sts	0x0823, r1
    451c:	10 92 24 08 	sts	0x0824, r1
    4520:	10 92 25 08 	sts	0x0825, r1
    4524:	0e 94 ca 28 	call	0x5194	; 0x5194 <__I2C_init>
    4528:	87 e1       	ldi	r24, 0x17	; 23
    452a:	60 e0       	ldi	r22, 0x00	; 0
    452c:	0e 94 a1 22 	call	0x4542	; 0x4542 <I2C_set_BRG>
    4530:	0e 94 c0 28 	call	0x5180	; 0x5180 <I2C_enable>
    4534:	82 e1       	ldi	r24, 0x12	; 18
    4536:	61 e0       	ldi	r22, 0x01	; 1
    4538:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    453c:	82 e1       	ldi	r24, 0x12	; 18
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	08 95       	ret

00004542 <I2C_set_BRG>:
    4542:	63 70       	andi	r22, 0x03	; 3
    4544:	60 93 b9 00 	sts	0x00B9, r22
    4548:	80 93 b8 00 	sts	0x00B8, r24
    454c:	81 e0       	ldi	r24, 0x01	; 1
    454e:	80 93 21 08 	sts	0x0821, r24
    4552:	08 95       	ret

00004554 <__ADC_init>:
    4554:	8f e1       	ldi	r24, 0x1F	; 31
    4556:	80 93 7c 00 	sts	0x007C, r24
    455a:	ea e7       	ldi	r30, 0x7A	; 122
    455c:	f0 e0       	ldi	r31, 0x00	; 0
    455e:	87 e0       	ldi	r24, 0x07	; 7
    4560:	80 83       	st	Z, r24
    4562:	80 81       	ld	r24, Z
    4564:	80 68       	ori	r24, 0x80	; 128
    4566:	80 83       	st	Z, r24
    4568:	08 95       	ret

0000456a <CBOT_init>:
    456a:	0e 94 0b 28 	call	0x5016	; 0x5016 <SYS_init>
    456e:	0e 94 e7 25 	call	0x4bce	; 0x4bce <ATMEGA_open>
    4572:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <ISR_open>
    4576:	0e 94 97 28 	call	0x512e	; 0x512e <TMRSRVC_open>
    457a:	0e 94 4c 26 	call	0x4c98	; 0x4c98 <SPI_open>
    457e:	0e 94 29 21 	call	0x4252	; 0x4252 <ATTINY_open>
    4582:	78 94       	sei
    4584:	08 95       	ret

00004586 <CBOT_ISR_init>:
    4586:	00 00       	nop
    4588:	08 95       	ret

0000458a <__vector_16>:
    458a:	1f 92       	push	r1
    458c:	0f 92       	push	r0
    458e:	0f b6       	in	r0, 0x3f	; 63
    4590:	0f 92       	push	r0
    4592:	11 24       	eor	r1, r1
    4594:	2f 93       	push	r18
    4596:	3f 93       	push	r19
    4598:	4f 93       	push	r20
    459a:	5f 93       	push	r21
    459c:	6f 93       	push	r22
    459e:	7f 93       	push	r23
    45a0:	8f 93       	push	r24
    45a2:	9f 93       	push	r25
    45a4:	af 93       	push	r26
    45a6:	bf 93       	push	r27
    45a8:	ef 93       	push	r30
    45aa:	ff 93       	push	r31
    45ac:	e0 91 be 04 	lds	r30, 0x04BE
    45b0:	f0 91 bf 04 	lds	r31, 0x04BF
    45b4:	30 97       	sbiw	r30, 0x00	; 0
    45b6:	09 f0       	breq	.+2      	; 0x45ba <__vector_16+0x30>
    45b8:	09 95       	icall
    45ba:	ff 91       	pop	r31
    45bc:	ef 91       	pop	r30
    45be:	bf 91       	pop	r27
    45c0:	af 91       	pop	r26
    45c2:	9f 91       	pop	r25
    45c4:	8f 91       	pop	r24
    45c6:	7f 91       	pop	r23
    45c8:	6f 91       	pop	r22
    45ca:	5f 91       	pop	r21
    45cc:	4f 91       	pop	r20
    45ce:	3f 91       	pop	r19
    45d0:	2f 91       	pop	r18
    45d2:	0f 90       	pop	r0
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	0f 90       	pop	r0
    45d8:	1f 90       	pop	r1
    45da:	18 95       	reti

000045dc <__vector_17>:
    45dc:	1f 92       	push	r1
    45de:	0f 92       	push	r0
    45e0:	0f b6       	in	r0, 0x3f	; 63
    45e2:	0f 92       	push	r0
    45e4:	11 24       	eor	r1, r1
    45e6:	2f 93       	push	r18
    45e8:	3f 93       	push	r19
    45ea:	4f 93       	push	r20
    45ec:	5f 93       	push	r21
    45ee:	6f 93       	push	r22
    45f0:	7f 93       	push	r23
    45f2:	8f 93       	push	r24
    45f4:	9f 93       	push	r25
    45f6:	af 93       	push	r26
    45f8:	bf 93       	push	r27
    45fa:	ef 93       	push	r30
    45fc:	ff 93       	push	r31
    45fe:	e0 91 c0 04 	lds	r30, 0x04C0
    4602:	f0 91 c1 04 	lds	r31, 0x04C1
    4606:	30 97       	sbiw	r30, 0x00	; 0
    4608:	09 f0       	breq	.+2      	; 0x460c <__vector_17+0x30>
    460a:	09 95       	icall
    460c:	ff 91       	pop	r31
    460e:	ef 91       	pop	r30
    4610:	bf 91       	pop	r27
    4612:	af 91       	pop	r26
    4614:	9f 91       	pop	r25
    4616:	8f 91       	pop	r24
    4618:	7f 91       	pop	r23
    461a:	6f 91       	pop	r22
    461c:	5f 91       	pop	r21
    461e:	4f 91       	pop	r20
    4620:	3f 91       	pop	r19
    4622:	2f 91       	pop	r18
    4624:	0f 90       	pop	r0
    4626:	0f be       	out	0x3f, r0	; 63
    4628:	0f 90       	pop	r0
    462a:	1f 90       	pop	r1
    462c:	18 95       	reti

0000462e <__vector_18>:
    462e:	1f 92       	push	r1
    4630:	0f 92       	push	r0
    4632:	0f b6       	in	r0, 0x3f	; 63
    4634:	0f 92       	push	r0
    4636:	11 24       	eor	r1, r1
    4638:	2f 93       	push	r18
    463a:	3f 93       	push	r19
    463c:	4f 93       	push	r20
    463e:	5f 93       	push	r21
    4640:	6f 93       	push	r22
    4642:	7f 93       	push	r23
    4644:	8f 93       	push	r24
    4646:	9f 93       	push	r25
    4648:	af 93       	push	r26
    464a:	bf 93       	push	r27
    464c:	ef 93       	push	r30
    464e:	ff 93       	push	r31
    4650:	e0 91 c2 04 	lds	r30, 0x04C2
    4654:	f0 91 c3 04 	lds	r31, 0x04C3
    4658:	30 97       	sbiw	r30, 0x00	; 0
    465a:	09 f0       	breq	.+2      	; 0x465e <__vector_18+0x30>
    465c:	09 95       	icall
    465e:	ff 91       	pop	r31
    4660:	ef 91       	pop	r30
    4662:	bf 91       	pop	r27
    4664:	af 91       	pop	r26
    4666:	9f 91       	pop	r25
    4668:	8f 91       	pop	r24
    466a:	7f 91       	pop	r23
    466c:	6f 91       	pop	r22
    466e:	5f 91       	pop	r21
    4670:	4f 91       	pop	r20
    4672:	3f 91       	pop	r19
    4674:	2f 91       	pop	r18
    4676:	0f 90       	pop	r0
    4678:	0f be       	out	0x3f, r0	; 63
    467a:	0f 90       	pop	r0
    467c:	1f 90       	pop	r1
    467e:	18 95       	reti

00004680 <__vector_9>:
    4680:	1f 92       	push	r1
    4682:	0f 92       	push	r0
    4684:	0f b6       	in	r0, 0x3f	; 63
    4686:	0f 92       	push	r0
    4688:	11 24       	eor	r1, r1
    468a:	2f 93       	push	r18
    468c:	3f 93       	push	r19
    468e:	4f 93       	push	r20
    4690:	5f 93       	push	r21
    4692:	6f 93       	push	r22
    4694:	7f 93       	push	r23
    4696:	8f 93       	push	r24
    4698:	9f 93       	push	r25
    469a:	af 93       	push	r26
    469c:	bf 93       	push	r27
    469e:	ef 93       	push	r30
    46a0:	ff 93       	push	r31
    46a2:	e0 91 b0 04 	lds	r30, 0x04B0
    46a6:	f0 91 b1 04 	lds	r31, 0x04B1
    46aa:	30 97       	sbiw	r30, 0x00	; 0
    46ac:	09 f0       	breq	.+2      	; 0x46b0 <__vector_9+0x30>
    46ae:	09 95       	icall
    46b0:	ff 91       	pop	r31
    46b2:	ef 91       	pop	r30
    46b4:	bf 91       	pop	r27
    46b6:	af 91       	pop	r26
    46b8:	9f 91       	pop	r25
    46ba:	8f 91       	pop	r24
    46bc:	7f 91       	pop	r23
    46be:	6f 91       	pop	r22
    46c0:	5f 91       	pop	r21
    46c2:	4f 91       	pop	r20
    46c4:	3f 91       	pop	r19
    46c6:	2f 91       	pop	r18
    46c8:	0f 90       	pop	r0
    46ca:	0f be       	out	0x3f, r0	; 63
    46cc:	0f 90       	pop	r0
    46ce:	1f 90       	pop	r1
    46d0:	18 95       	reti

000046d2 <__vector_10>:
    46d2:	1f 92       	push	r1
    46d4:	0f 92       	push	r0
    46d6:	0f b6       	in	r0, 0x3f	; 63
    46d8:	0f 92       	push	r0
    46da:	11 24       	eor	r1, r1
    46dc:	2f 93       	push	r18
    46de:	3f 93       	push	r19
    46e0:	4f 93       	push	r20
    46e2:	5f 93       	push	r21
    46e4:	6f 93       	push	r22
    46e6:	7f 93       	push	r23
    46e8:	8f 93       	push	r24
    46ea:	9f 93       	push	r25
    46ec:	af 93       	push	r26
    46ee:	bf 93       	push	r27
    46f0:	ef 93       	push	r30
    46f2:	ff 93       	push	r31
    46f4:	e0 91 b2 04 	lds	r30, 0x04B2
    46f8:	f0 91 b3 04 	lds	r31, 0x04B3
    46fc:	30 97       	sbiw	r30, 0x00	; 0
    46fe:	09 f0       	breq	.+2      	; 0x4702 <__vector_10+0x30>
    4700:	09 95       	icall
    4702:	ff 91       	pop	r31
    4704:	ef 91       	pop	r30
    4706:	bf 91       	pop	r27
    4708:	af 91       	pop	r26
    470a:	9f 91       	pop	r25
    470c:	8f 91       	pop	r24
    470e:	7f 91       	pop	r23
    4710:	6f 91       	pop	r22
    4712:	5f 91       	pop	r21
    4714:	4f 91       	pop	r20
    4716:	3f 91       	pop	r19
    4718:	2f 91       	pop	r18
    471a:	0f 90       	pop	r0
    471c:	0f be       	out	0x3f, r0	; 63
    471e:	0f 90       	pop	r0
    4720:	1f 90       	pop	r1
    4722:	18 95       	reti

00004724 <__vector_11>:
    4724:	1f 92       	push	r1
    4726:	0f 92       	push	r0
    4728:	0f b6       	in	r0, 0x3f	; 63
    472a:	0f 92       	push	r0
    472c:	11 24       	eor	r1, r1
    472e:	2f 93       	push	r18
    4730:	3f 93       	push	r19
    4732:	4f 93       	push	r20
    4734:	5f 93       	push	r21
    4736:	6f 93       	push	r22
    4738:	7f 93       	push	r23
    473a:	8f 93       	push	r24
    473c:	9f 93       	push	r25
    473e:	af 93       	push	r26
    4740:	bf 93       	push	r27
    4742:	ef 93       	push	r30
    4744:	ff 93       	push	r31
    4746:	e0 91 b4 04 	lds	r30, 0x04B4
    474a:	f0 91 b5 04 	lds	r31, 0x04B5
    474e:	30 97       	sbiw	r30, 0x00	; 0
    4750:	09 f0       	breq	.+2      	; 0x4754 <__vector_11+0x30>
    4752:	09 95       	icall
    4754:	ff 91       	pop	r31
    4756:	ef 91       	pop	r30
    4758:	bf 91       	pop	r27
    475a:	af 91       	pop	r26
    475c:	9f 91       	pop	r25
    475e:	8f 91       	pop	r24
    4760:	7f 91       	pop	r23
    4762:	6f 91       	pop	r22
    4764:	5f 91       	pop	r21
    4766:	4f 91       	pop	r20
    4768:	3f 91       	pop	r19
    476a:	2f 91       	pop	r18
    476c:	0f 90       	pop	r0
    476e:	0f be       	out	0x3f, r0	; 63
    4770:	0f 90       	pop	r0
    4772:	1f 90       	pop	r1
    4774:	18 95       	reti

00004776 <__vector_13>:
    4776:	1f 92       	push	r1
    4778:	0f 92       	push	r0
    477a:	0f b6       	in	r0, 0x3f	; 63
    477c:	0f 92       	push	r0
    477e:	11 24       	eor	r1, r1
    4780:	2f 93       	push	r18
    4782:	3f 93       	push	r19
    4784:	4f 93       	push	r20
    4786:	5f 93       	push	r21
    4788:	6f 93       	push	r22
    478a:	7f 93       	push	r23
    478c:	8f 93       	push	r24
    478e:	9f 93       	push	r25
    4790:	af 93       	push	r26
    4792:	bf 93       	push	r27
    4794:	ef 93       	push	r30
    4796:	ff 93       	push	r31
    4798:	e0 91 b8 04 	lds	r30, 0x04B8
    479c:	f0 91 b9 04 	lds	r31, 0x04B9
    47a0:	30 97       	sbiw	r30, 0x00	; 0
    47a2:	09 f0       	breq	.+2      	; 0x47a6 <__vector_13+0x30>
    47a4:	09 95       	icall
    47a6:	ff 91       	pop	r31
    47a8:	ef 91       	pop	r30
    47aa:	bf 91       	pop	r27
    47ac:	af 91       	pop	r26
    47ae:	9f 91       	pop	r25
    47b0:	8f 91       	pop	r24
    47b2:	7f 91       	pop	r23
    47b4:	6f 91       	pop	r22
    47b6:	5f 91       	pop	r21
    47b8:	4f 91       	pop	r20
    47ba:	3f 91       	pop	r19
    47bc:	2f 91       	pop	r18
    47be:	0f 90       	pop	r0
    47c0:	0f be       	out	0x3f, r0	; 63
    47c2:	0f 90       	pop	r0
    47c4:	1f 90       	pop	r1
    47c6:	18 95       	reti

000047c8 <__vector_14>:
    47c8:	1f 92       	push	r1
    47ca:	0f 92       	push	r0
    47cc:	0f b6       	in	r0, 0x3f	; 63
    47ce:	0f 92       	push	r0
    47d0:	11 24       	eor	r1, r1
    47d2:	2f 93       	push	r18
    47d4:	3f 93       	push	r19
    47d6:	4f 93       	push	r20
    47d8:	5f 93       	push	r21
    47da:	6f 93       	push	r22
    47dc:	7f 93       	push	r23
    47de:	8f 93       	push	r24
    47e0:	9f 93       	push	r25
    47e2:	af 93       	push	r26
    47e4:	bf 93       	push	r27
    47e6:	ef 93       	push	r30
    47e8:	ff 93       	push	r31
    47ea:	e0 91 ba 04 	lds	r30, 0x04BA
    47ee:	f0 91 bb 04 	lds	r31, 0x04BB
    47f2:	30 97       	sbiw	r30, 0x00	; 0
    47f4:	09 f0       	breq	.+2      	; 0x47f8 <__vector_14+0x30>
    47f6:	09 95       	icall
    47f8:	ff 91       	pop	r31
    47fa:	ef 91       	pop	r30
    47fc:	bf 91       	pop	r27
    47fe:	af 91       	pop	r26
    4800:	9f 91       	pop	r25
    4802:	8f 91       	pop	r24
    4804:	7f 91       	pop	r23
    4806:	6f 91       	pop	r22
    4808:	5f 91       	pop	r21
    480a:	4f 91       	pop	r20
    480c:	3f 91       	pop	r19
    480e:	2f 91       	pop	r18
    4810:	0f 90       	pop	r0
    4812:	0f be       	out	0x3f, r0	; 63
    4814:	0f 90       	pop	r0
    4816:	1f 90       	pop	r1
    4818:	18 95       	reti

0000481a <__vector_12>:
    481a:	1f 92       	push	r1
    481c:	0f 92       	push	r0
    481e:	0f b6       	in	r0, 0x3f	; 63
    4820:	0f 92       	push	r0
    4822:	11 24       	eor	r1, r1
    4824:	2f 93       	push	r18
    4826:	3f 93       	push	r19
    4828:	4f 93       	push	r20
    482a:	5f 93       	push	r21
    482c:	6f 93       	push	r22
    482e:	7f 93       	push	r23
    4830:	8f 93       	push	r24
    4832:	9f 93       	push	r25
    4834:	af 93       	push	r26
    4836:	bf 93       	push	r27
    4838:	ef 93       	push	r30
    483a:	ff 93       	push	r31
    483c:	e0 91 b6 04 	lds	r30, 0x04B6
    4840:	f0 91 b7 04 	lds	r31, 0x04B7
    4844:	30 97       	sbiw	r30, 0x00	; 0
    4846:	09 f0       	breq	.+2      	; 0x484a <__vector_12+0x30>
    4848:	09 95       	icall
    484a:	ff 91       	pop	r31
    484c:	ef 91       	pop	r30
    484e:	bf 91       	pop	r27
    4850:	af 91       	pop	r26
    4852:	9f 91       	pop	r25
    4854:	8f 91       	pop	r24
    4856:	7f 91       	pop	r23
    4858:	6f 91       	pop	r22
    485a:	5f 91       	pop	r21
    485c:	4f 91       	pop	r20
    485e:	3f 91       	pop	r19
    4860:	2f 91       	pop	r18
    4862:	0f 90       	pop	r0
    4864:	0f be       	out	0x3f, r0	; 63
    4866:	0f 90       	pop	r0
    4868:	1f 90       	pop	r1
    486a:	18 95       	reti

0000486c <__vector_15>:
    486c:	1f 92       	push	r1
    486e:	0f 92       	push	r0
    4870:	0f b6       	in	r0, 0x3f	; 63
    4872:	0f 92       	push	r0
    4874:	11 24       	eor	r1, r1
    4876:	2f 93       	push	r18
    4878:	3f 93       	push	r19
    487a:	4f 93       	push	r20
    487c:	5f 93       	push	r21
    487e:	6f 93       	push	r22
    4880:	7f 93       	push	r23
    4882:	8f 93       	push	r24
    4884:	9f 93       	push	r25
    4886:	af 93       	push	r26
    4888:	bf 93       	push	r27
    488a:	ef 93       	push	r30
    488c:	ff 93       	push	r31
    488e:	e0 91 bc 04 	lds	r30, 0x04BC
    4892:	f0 91 bd 04 	lds	r31, 0x04BD
    4896:	30 97       	sbiw	r30, 0x00	; 0
    4898:	09 f0       	breq	.+2      	; 0x489c <__vector_15+0x30>
    489a:	09 95       	icall
    489c:	ff 91       	pop	r31
    489e:	ef 91       	pop	r30
    48a0:	bf 91       	pop	r27
    48a2:	af 91       	pop	r26
    48a4:	9f 91       	pop	r25
    48a6:	8f 91       	pop	r24
    48a8:	7f 91       	pop	r23
    48aa:	6f 91       	pop	r22
    48ac:	5f 91       	pop	r21
    48ae:	4f 91       	pop	r20
    48b0:	3f 91       	pop	r19
    48b2:	2f 91       	pop	r18
    48b4:	0f 90       	pop	r0
    48b6:	0f be       	out	0x3f, r0	; 63
    48b8:	0f 90       	pop	r0
    48ba:	1f 90       	pop	r1
    48bc:	18 95       	reti

000048be <__vector_4>:
    48be:	1f 92       	push	r1
    48c0:	0f 92       	push	r0
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	0f 92       	push	r0
    48c6:	11 24       	eor	r1, r1
    48c8:	2f 93       	push	r18
    48ca:	3f 93       	push	r19
    48cc:	4f 93       	push	r20
    48ce:	5f 93       	push	r21
    48d0:	6f 93       	push	r22
    48d2:	7f 93       	push	r23
    48d4:	8f 93       	push	r24
    48d6:	9f 93       	push	r25
    48d8:	af 93       	push	r26
    48da:	bf 93       	push	r27
    48dc:	ef 93       	push	r30
    48de:	ff 93       	push	r31
    48e0:	e0 91 a6 04 	lds	r30, 0x04A6
    48e4:	f0 91 a7 04 	lds	r31, 0x04A7
    48e8:	30 97       	sbiw	r30, 0x00	; 0
    48ea:	09 f0       	breq	.+2      	; 0x48ee <__vector_4+0x30>
    48ec:	09 95       	icall
    48ee:	ff 91       	pop	r31
    48f0:	ef 91       	pop	r30
    48f2:	bf 91       	pop	r27
    48f4:	af 91       	pop	r26
    48f6:	9f 91       	pop	r25
    48f8:	8f 91       	pop	r24
    48fa:	7f 91       	pop	r23
    48fc:	6f 91       	pop	r22
    48fe:	5f 91       	pop	r21
    4900:	4f 91       	pop	r20
    4902:	3f 91       	pop	r19
    4904:	2f 91       	pop	r18
    4906:	0f 90       	pop	r0
    4908:	0f be       	out	0x3f, r0	; 63
    490a:	0f 90       	pop	r0
    490c:	1f 90       	pop	r1
    490e:	18 95       	reti

00004910 <__vector_5>:
    4910:	1f 92       	push	r1
    4912:	0f 92       	push	r0
    4914:	0f b6       	in	r0, 0x3f	; 63
    4916:	0f 92       	push	r0
    4918:	11 24       	eor	r1, r1
    491a:	2f 93       	push	r18
    491c:	3f 93       	push	r19
    491e:	4f 93       	push	r20
    4920:	5f 93       	push	r21
    4922:	6f 93       	push	r22
    4924:	7f 93       	push	r23
    4926:	8f 93       	push	r24
    4928:	9f 93       	push	r25
    492a:	af 93       	push	r26
    492c:	bf 93       	push	r27
    492e:	ef 93       	push	r30
    4930:	ff 93       	push	r31
    4932:	e0 91 a8 04 	lds	r30, 0x04A8
    4936:	f0 91 a9 04 	lds	r31, 0x04A9
    493a:	30 97       	sbiw	r30, 0x00	; 0
    493c:	09 f0       	breq	.+2      	; 0x4940 <__vector_5+0x30>
    493e:	09 95       	icall
    4940:	ff 91       	pop	r31
    4942:	ef 91       	pop	r30
    4944:	bf 91       	pop	r27
    4946:	af 91       	pop	r26
    4948:	9f 91       	pop	r25
    494a:	8f 91       	pop	r24
    494c:	7f 91       	pop	r23
    494e:	6f 91       	pop	r22
    4950:	5f 91       	pop	r21
    4952:	4f 91       	pop	r20
    4954:	3f 91       	pop	r19
    4956:	2f 91       	pop	r18
    4958:	0f 90       	pop	r0
    495a:	0f be       	out	0x3f, r0	; 63
    495c:	0f 90       	pop	r0
    495e:	1f 90       	pop	r1
    4960:	18 95       	reti

00004962 <__vector_6>:
    4962:	1f 92       	push	r1
    4964:	0f 92       	push	r0
    4966:	0f b6       	in	r0, 0x3f	; 63
    4968:	0f 92       	push	r0
    496a:	11 24       	eor	r1, r1
    496c:	2f 93       	push	r18
    496e:	3f 93       	push	r19
    4970:	4f 93       	push	r20
    4972:	5f 93       	push	r21
    4974:	6f 93       	push	r22
    4976:	7f 93       	push	r23
    4978:	8f 93       	push	r24
    497a:	9f 93       	push	r25
    497c:	af 93       	push	r26
    497e:	bf 93       	push	r27
    4980:	ef 93       	push	r30
    4982:	ff 93       	push	r31
    4984:	e0 91 aa 04 	lds	r30, 0x04AA
    4988:	f0 91 ab 04 	lds	r31, 0x04AB
    498c:	30 97       	sbiw	r30, 0x00	; 0
    498e:	09 f0       	breq	.+2      	; 0x4992 <__vector_6+0x30>
    4990:	09 95       	icall
    4992:	ff 91       	pop	r31
    4994:	ef 91       	pop	r30
    4996:	bf 91       	pop	r27
    4998:	af 91       	pop	r26
    499a:	9f 91       	pop	r25
    499c:	8f 91       	pop	r24
    499e:	7f 91       	pop	r23
    49a0:	6f 91       	pop	r22
    49a2:	5f 91       	pop	r21
    49a4:	4f 91       	pop	r20
    49a6:	3f 91       	pop	r19
    49a8:	2f 91       	pop	r18
    49aa:	0f 90       	pop	r0
    49ac:	0f be       	out	0x3f, r0	; 63
    49ae:	0f 90       	pop	r0
    49b0:	1f 90       	pop	r1
    49b2:	18 95       	reti

000049b4 <__vector_7>:
    49b4:	1f 92       	push	r1
    49b6:	0f 92       	push	r0
    49b8:	0f b6       	in	r0, 0x3f	; 63
    49ba:	0f 92       	push	r0
    49bc:	11 24       	eor	r1, r1
    49be:	2f 93       	push	r18
    49c0:	3f 93       	push	r19
    49c2:	4f 93       	push	r20
    49c4:	5f 93       	push	r21
    49c6:	6f 93       	push	r22
    49c8:	7f 93       	push	r23
    49ca:	8f 93       	push	r24
    49cc:	9f 93       	push	r25
    49ce:	af 93       	push	r26
    49d0:	bf 93       	push	r27
    49d2:	ef 93       	push	r30
    49d4:	ff 93       	push	r31
    49d6:	e0 91 ac 04 	lds	r30, 0x04AC
    49da:	f0 91 ad 04 	lds	r31, 0x04AD
    49de:	30 97       	sbiw	r30, 0x00	; 0
    49e0:	09 f0       	breq	.+2      	; 0x49e4 <__vector_7+0x30>
    49e2:	09 95       	icall
    49e4:	ff 91       	pop	r31
    49e6:	ef 91       	pop	r30
    49e8:	bf 91       	pop	r27
    49ea:	af 91       	pop	r26
    49ec:	9f 91       	pop	r25
    49ee:	8f 91       	pop	r24
    49f0:	7f 91       	pop	r23
    49f2:	6f 91       	pop	r22
    49f4:	5f 91       	pop	r21
    49f6:	4f 91       	pop	r20
    49f8:	3f 91       	pop	r19
    49fa:	2f 91       	pop	r18
    49fc:	0f 90       	pop	r0
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	0f 90       	pop	r0
    4a02:	1f 90       	pop	r1
    4a04:	18 95       	reti

00004a06 <ISR_attach>:
    4a06:	e8 2f       	mov	r30, r24
    4a08:	80 32       	cpi	r24, 0x20	; 32
    4a0a:	68 f4       	brcc	.+26     	; 0x4a26 <ISR_attach+0x20>
    4a0c:	80 51       	subi	r24, 0x10	; 16
    4a0e:	83 30       	cpi	r24, 0x03	; 3
    4a10:	50 f0       	brcs	.+20     	; 0x4a26 <ISR_attach+0x20>
    4a12:	f0 e0       	ldi	r31, 0x00	; 0
    4a14:	ee 0f       	add	r30, r30
    4a16:	ff 1f       	adc	r31, r31
    4a18:	e2 56       	subi	r30, 0x62	; 98
    4a1a:	fb 4f       	sbci	r31, 0xFB	; 251
    4a1c:	20 81       	ld	r18, Z
    4a1e:	31 81       	ldd	r19, Z+1	; 0x01
    4a20:	71 83       	std	Z+1, r23	; 0x01
    4a22:	60 83       	st	Z, r22
    4a24:	02 c0       	rjmp	.+4      	; 0x4a2a <ISR_attach+0x24>
    4a26:	20 e0       	ldi	r18, 0x00	; 0
    4a28:	30 e0       	ldi	r19, 0x00	; 0
    4a2a:	c9 01       	movw	r24, r18
    4a2c:	08 95       	ret

00004a2e <ISR_open>:
    4a2e:	80 e1       	ldi	r24, 0x10	; 16
    4a30:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    4a34:	88 23       	and	r24, r24
    4a36:	61 f4       	brne	.+24     	; 0x4a50 <ISR_open+0x22>
    4a38:	ee e9       	ldi	r30, 0x9E	; 158
    4a3a:	f4 e0       	ldi	r31, 0x04	; 4
    4a3c:	11 92       	st	Z+, r1
    4a3e:	11 92       	st	Z+, r1
    4a40:	84 e0       	ldi	r24, 0x04	; 4
    4a42:	ee 3d       	cpi	r30, 0xDE	; 222
    4a44:	f8 07       	cpc	r31, r24
    4a46:	d1 f7       	brne	.-12     	; 0x4a3c <ISR_open+0xe>
    4a48:	80 e1       	ldi	r24, 0x10	; 16
    4a4a:	61 e0       	ldi	r22, 0x01	; 1
    4a4c:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    4a50:	80 e1       	ldi	r24, 0x10	; 16
    4a52:	91 e0       	ldi	r25, 0x01	; 1
    4a54:	08 95       	ret

00004a56 <__LCD_init>:
    4a56:	23 9a       	sbi	0x04, 3	; 4
    4a58:	08 95       	ret

00004a5a <__LCD_putchar>:
    4a5a:	ff 92       	push	r15
    4a5c:	0f 93       	push	r16
    4a5e:	1f 93       	push	r17
    4a60:	cf 93       	push	r28
    4a62:	df 93       	push	r29
    4a64:	f8 2e       	mov	r15, r24
    4a66:	8a e0       	ldi	r24, 0x0A	; 10
    4a68:	f8 16       	cp	r15, r24
    4a6a:	b1 f0       	breq	.+44     	; 0x4a98 <__LCD_putchar+0x3e>
    4a6c:	8f 15       	cp	r24, r15
    4a6e:	48 f0       	brcs	.+18     	; 0x4a82 <__LCD_putchar+0x28>
    4a70:	e8 e0       	ldi	r30, 0x08	; 8
    4a72:	fe 16       	cp	r15, r30
    4a74:	b9 f1       	breq	.+110    	; 0x4ae4 <__LCD_putchar+0x8a>
    4a76:	ef 15       	cp	r30, r15
    4a78:	38 f1       	brcs	.+78     	; 0x4ac8 <__LCD_putchar+0x6e>
    4a7a:	f7 e0       	ldi	r31, 0x07	; 7
    4a7c:	ff 16       	cp	r15, r31
    4a7e:	51 f4       	brne	.+20     	; 0x4a94 <__LCD_putchar+0x3a>
    4a80:	3b c0       	rjmp	.+118    	; 0x4af8 <__LCD_putchar+0x9e>
    4a82:	8d e0       	ldi	r24, 0x0D	; 13
    4a84:	f8 16       	cp	r15, r24
    4a86:	59 f0       	breq	.+22     	; 0x4a9e <__LCD_putchar+0x44>
    4a88:	eb e1       	ldi	r30, 0x1B	; 27
    4a8a:	fe 16       	cp	r15, r30
    4a8c:	89 f0       	breq	.+34     	; 0x4ab0 <__LCD_putchar+0x56>
    4a8e:	fc e0       	ldi	r31, 0x0C	; 12
    4a90:	ff 16       	cp	r15, r31
    4a92:	41 f0       	breq	.+16     	; 0x4aa4 <__LCD_putchar+0x4a>
    4a94:	01 e0       	ldi	r16, 0x01	; 1
    4a96:	41 c0       	rjmp	.+130    	; 0x4b1a <__LCD_putchar+0xc0>
    4a98:	10 92 fa 07 	sts	0x07FA, r1
    4a9c:	03 c0       	rjmp	.+6      	; 0x4aa4 <__LCD_putchar+0x4a>
    4a9e:	10 92 fa 07 	sts	0x07FA, r1
    4aa2:	3a c0       	rjmp	.+116    	; 0x4b18 <__LCD_putchar+0xbe>
    4aa4:	80 91 fb 07 	lds	r24, 0x07FB
    4aa8:	81 50       	subi	r24, 0x01	; 1
    4aaa:	80 93 fb 07 	sts	0x07FB, r24
    4aae:	34 c0       	rjmp	.+104    	; 0x4b18 <__LCD_putchar+0xbe>
    4ab0:	0e 94 86 1a 	call	0x350c	; 0x350c <LCD_clear>
    4ab4:	14 c0       	rjmp	.+40     	; 0x4ade <__LCD_putchar+0x84>
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	61 e0       	ldi	r22, 0x01	; 1
    4aba:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    4abe:	80 91 fa 07 	lds	r24, 0x07FA
    4ac2:	8f 5f       	subi	r24, 0xFF	; 255
    4ac4:	80 93 fa 07 	sts	0x07FA, r24
    4ac8:	80 91 fa 07 	lds	r24, 0x07FA
    4acc:	87 ff       	sbrs	r24, 7
    4ace:	f3 cf       	rjmp	.-26     	; 0x4ab6 <__LCD_putchar+0x5c>
    4ad0:	10 92 fa 07 	sts	0x07FA, r1
    4ad4:	80 91 fb 07 	lds	r24, 0x07FB
    4ad8:	81 50       	subi	r24, 0x01	; 1
    4ada:	80 93 fb 07 	sts	0x07FB, r24
    4ade:	00 e0       	ldi	r16, 0x00	; 0
    4ae0:	11 e0       	ldi	r17, 0x01	; 1
    4ae2:	1c c0       	rjmp	.+56     	; 0x4b1c <__LCD_putchar+0xc2>
    4ae4:	80 91 fa 07 	lds	r24, 0x07FA
    4ae8:	88 23       	and	r24, r24
    4aea:	b1 f0       	breq	.+44     	; 0x4b18 <__LCD_putchar+0xbe>
    4aec:	80 91 fa 07 	lds	r24, 0x07FA
    4af0:	86 50       	subi	r24, 0x06	; 6
    4af2:	80 93 fa 07 	sts	0x07FA, r24
    4af6:	10 c0       	rjmp	.+32     	; 0x4b18 <__LCD_putchar+0xbe>
    4af8:	81 e0       	ldi	r24, 0x01	; 1
    4afa:	0e 94 a9 1c 	call	0x3952	; 0x3952 <SPKR_open>
    4afe:	64 ef       	ldi	r22, 0xF4	; 244
    4b00:	71 e0       	ldi	r23, 0x01	; 1
    4b02:	80 e0       	ldi	r24, 0x00	; 0
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	4d e7       	ldi	r20, 0x7D	; 125
    4b08:	50 e0       	ldi	r21, 0x00	; 0
    4b0a:	24 e6       	ldi	r18, 0x64	; 100
    4b0c:	30 e0       	ldi	r19, 0x00	; 0
    4b0e:	0e 94 47 27 	call	0x4e8e	; 0x4e8e <SPKR_play_beep>
    4b12:	81 e0       	ldi	r24, 0x01	; 1
    4b14:	0e 94 13 27 	call	0x4e26	; 0x4e26 <SPKR_close>
    4b18:	00 e0       	ldi	r16, 0x00	; 0
    4b1a:	10 e0       	ldi	r17, 0x00	; 0
    4b1c:	80 91 fb 07 	lds	r24, 0x07FB
    4b20:	60 91 fa 07 	lds	r22, 0x07FA
    4b24:	0e 94 4c 1b 	call	0x3698	; 0x3698 <LCD_set_PGC_addr>
    4b28:	00 23       	and	r16, r16
    4b2a:	51 f1       	breq	.+84     	; 0x4b80 <__LCD_putchar+0x126>
    4b2c:	85 e0       	ldi	r24, 0x05	; 5
    4b2e:	f8 9e       	mul	r15, r24
    4b30:	c0 01       	movw	r24, r0
    4b32:	11 24       	eor	r1, r1
    4b34:	ec 01       	movw	r28, r24
    4b36:	c3 55       	subi	r28, 0x53	; 83
    4b38:	df 4f       	sbci	r29, 0xFF	; 255
    4b3a:	8c 01       	movw	r16, r24
    4b3c:	0e 54       	subi	r16, 0x4E	; 78
    4b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b40:	fe 01       	movw	r30, r28
    4b42:	84 91       	lpm	r24, Z+
    4b44:	61 e0       	ldi	r22, 0x01	; 1
    4b46:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    4b4a:	21 96       	adiw	r28, 0x01	; 1
    4b4c:	c0 17       	cp	r28, r16
    4b4e:	d1 07       	cpc	r29, r17
    4b50:	b9 f7       	brne	.-18     	; 0x4b40 <__LCD_putchar+0xe6>
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	61 e0       	ldi	r22, 0x01	; 1
    4b56:	0e 94 65 1b 	call	0x36ca	; 0x36ca <LCD_write>
    4b5a:	80 91 fa 07 	lds	r24, 0x07FA
    4b5e:	8a 5f       	subi	r24, 0xFA	; 250
    4b60:	80 93 fa 07 	sts	0x07FA, r24
    4b64:	80 91 fa 07 	lds	r24, 0x07FA
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	8c 37       	cpi	r24, 0x7C	; 124
    4b6c:	91 05       	cpc	r25, r1
    4b6e:	3c f0       	brlt	.+14     	; 0x4b7e <__LCD_putchar+0x124>
    4b70:	10 92 fa 07 	sts	0x07FA, r1
    4b74:	80 91 fb 07 	lds	r24, 0x07FB
    4b78:	81 50       	subi	r24, 0x01	; 1
    4b7a:	80 93 fb 07 	sts	0x07FB, r24
    4b7e:	11 e0       	ldi	r17, 0x01	; 1
    4b80:	80 91 fb 07 	lds	r24, 0x07FB
    4b84:	83 70       	andi	r24, 0x03	; 3
    4b86:	80 93 fb 07 	sts	0x07FB, r24
    4b8a:	11 30       	cpi	r17, 0x01	; 1
    4b8c:	59 f4       	brne	.+22     	; 0x4ba4 <__LCD_putchar+0x14a>
    4b8e:	80 91 fc 07 	lds	r24, 0x07FC
    4b92:	81 30       	cpi	r24, 0x01	; 1
    4b94:	39 f4       	brne	.+14     	; 0x4ba4 <__LCD_putchar+0x14a>
    4b96:	e0 91 fd 07 	lds	r30, 0x07FD
    4b9a:	f0 91 fe 07 	lds	r31, 0x07FE
    4b9e:	30 97       	sbiw	r30, 0x00	; 0
    4ba0:	09 f0       	breq	.+2      	; 0x4ba4 <__LCD_putchar+0x14a>
    4ba2:	09 95       	icall
    4ba4:	80 e0       	ldi	r24, 0x00	; 0
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	df 91       	pop	r29
    4baa:	cf 91       	pop	r28
    4bac:	1f 91       	pop	r17
    4bae:	0f 91       	pop	r16
    4bb0:	ff 90       	pop	r15
    4bb2:	08 95       	ret

00004bb4 <__LED_clr_pattern>:
    4bb4:	85 fd       	sbrc	r24, 5
    4bb6:	5d 98       	cbi	0x0b, 5	; 11
    4bb8:	86 fd       	sbrc	r24, 6
    4bba:	5e 98       	cbi	0x0b, 6	; 11
    4bbc:	08 95       	ret

00004bbe <__LED_init>:
    4bbe:	55 9a       	sbi	0x0a, 5	; 10
    4bc0:	56 9a       	sbi	0x0a, 6	; 10
    4bc2:	08 95       	ret

00004bc4 <__LED_set_pattern>:
    4bc4:	85 fd       	sbrc	r24, 5
    4bc6:	5d 9a       	sbi	0x0b, 5	; 11
    4bc8:	86 fd       	sbrc	r24, 6
    4bca:	5e 9a       	sbi	0x0b, 6	; 11
    4bcc:	08 95       	ret

00004bce <ATMEGA_open>:
    4bce:	80 e0       	ldi	r24, 0x00	; 0
    4bd0:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    4bd4:	88 23       	and	r24, r24
    4bd6:	51 f4       	brne	.+20     	; 0x4bec <ATMEGA_open+0x1e>
    4bd8:	f8 94       	cli
    4bda:	0e 94 de 28 	call	0x51bc	; 0x51bc <__ATMEGA_init>
    4bde:	81 e0       	ldi	r24, 0x01	; 1
    4be0:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <ATMEGA_set_clk_mode>
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	61 e0       	ldi	r22, 0x01	; 1
    4be8:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    4bec:	80 e0       	ldi	r24, 0x00	; 0
    4bee:	91 e0       	ldi	r25, 0x01	; 1
    4bf0:	08 95       	ret

00004bf2 <ATMEGA_set_clk_mode>:
    4bf2:	81 30       	cpi	r24, 0x01	; 1
    4bf4:	49 f0       	breq	.+18     	; 0x4c08 <ATMEGA_set_clk_mode+0x16>
    4bf6:	f8 94       	cli
    4bf8:	81 30       	cpi	r24, 0x01	; 1
    4bfa:	20 f1       	brcs	.+72     	; 0x4c44 <ATMEGA_set_clk_mode+0x52>
    4bfc:	82 30       	cpi	r24, 0x02	; 2
    4bfe:	b1 f0       	breq	.+44     	; 0x4c2c <ATMEGA_set_clk_mode+0x3a>
    4c00:	83 30       	cpi	r24, 0x03	; 3
    4c02:	09 f0       	breq	.+2      	; 0x4c06 <ATMEGA_set_clk_mode+0x14>
    4c04:	45 c0       	rjmp	.+138    	; 0x4c90 <ATMEGA_set_clk_mode+0x9e>
    4c06:	17 c0       	rjmp	.+46     	; 0x4c36 <ATMEGA_set_clk_mode+0x44>
    4c08:	2c 9a       	sbi	0x05, 4	; 5
    4c0a:	80 e8       	ldi	r24, 0x80	; 128
    4c0c:	80 93 61 00 	sts	0x0061, r24
    4c10:	10 92 61 00 	sts	0x0061, r1
    4c14:	80 e0       	ldi	r24, 0x00	; 0
    4c16:	90 e0       	ldi	r25, 0x00	; 0
    4c18:	00 00       	nop
    4c1a:	01 96       	adiw	r24, 0x01	; 1
    4c1c:	88 32       	cpi	r24, 0x28	; 40
    4c1e:	91 05       	cpc	r25, r1
    4c20:	d9 f7       	brne	.-10     	; 0x4c18 <ATMEGA_set_clk_mode+0x26>
    4c22:	10 92 68 00 	sts	0x0068, r1
    4c26:	10 92 6b 00 	sts	0x006B, r1
    4c2a:	08 95       	ret
    4c2c:	80 e8       	ldi	r24, 0x80	; 128
    4c2e:	80 93 61 00 	sts	0x0061, r24
    4c32:	83 e0       	ldi	r24, 0x03	; 3
    4c34:	04 c0       	rjmp	.+8      	; 0x4c3e <ATMEGA_set_clk_mode+0x4c>
    4c36:	80 e8       	ldi	r24, 0x80	; 128
    4c38:	80 93 61 00 	sts	0x0061, r24
    4c3c:	88 e0       	ldi	r24, 0x08	; 8
    4c3e:	80 93 61 00 	sts	0x0061, r24
    4c42:	28 c0       	rjmp	.+80     	; 0x4c94 <ATMEGA_set_clk_mode+0xa2>
    4c44:	80 e0       	ldi	r24, 0x00	; 0
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	00 00       	nop
    4c4a:	01 96       	adiw	r24, 0x01	; 1
    4c4c:	2d e6       	ldi	r18, 0x6D	; 109
    4c4e:	80 36       	cpi	r24, 0x60	; 96
    4c50:	92 07       	cpc	r25, r18
    4c52:	d1 f7       	brne	.-12     	; 0x4c48 <ATMEGA_set_clk_mode+0x56>
    4c54:	2c 98       	cbi	0x05, 4	; 5
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	00 00       	nop
    4c5c:	01 96       	adiw	r24, 0x01	; 1
    4c5e:	2d e6       	ldi	r18, 0x6D	; 109
    4c60:	80 36       	cpi	r24, 0x60	; 96
    4c62:	92 07       	cpc	r25, r18
    4c64:	d1 f7       	brne	.-12     	; 0x4c5a <ATMEGA_set_clk_mode+0x68>
    4c66:	10 92 7a 00 	sts	0x007A, r1
    4c6a:	8f ef       	ldi	r24, 0xFF	; 255
    4c6c:	80 93 64 00 	sts	0x0064, r24
    4c70:	80 91 68 00 	lds	r24, 0x0068
    4c74:	81 60       	ori	r24, 0x01	; 1
    4c76:	80 93 68 00 	sts	0x0068, r24
    4c7a:	80 91 6b 00 	lds	r24, 0x006B
    4c7e:	84 60       	ori	r24, 0x04	; 4
    4c80:	80 93 6b 00 	sts	0x006B, r24
    4c84:	78 94       	sei
    4c86:	83 b7       	in	r24, 0x33	; 51
    4c88:	81 60       	ori	r24, 0x01	; 1
    4c8a:	83 bf       	out	0x33, r24	; 51
    4c8c:	88 95       	sleep
    4c8e:	08 95       	ret
    4c90:	82 30       	cpi	r24, 0x02	; 2
    4c92:	08 f0       	brcs	.+2      	; 0x4c96 <ATMEGA_set_clk_mode+0xa4>
    4c94:	78 94       	sei
    4c96:	08 95       	ret

00004c98 <SPI_open>:
    4c98:	0f 93       	push	r16
    4c9a:	1f 93       	push	r17
    4c9c:	0e 94 0a 29 	call	0x5214	; 0x5214 <__SPI_init>
    4ca0:	80 e0       	ldi	r24, 0x00	; 0
    4ca2:	69 ef       	ldi	r22, 0xF9	; 249
    4ca4:	78 e2       	ldi	r23, 0x28	; 40
    4ca6:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <SPI_set_config_func>
    4caa:	81 e0       	ldi	r24, 0x01	; 1
    4cac:	61 ef       	ldi	r22, 0xF1	; 241
    4cae:	78 e2       	ldi	r23, 0x28	; 40
    4cb0:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <SPI_set_config_func>
    4cb4:	82 e0       	ldi	r24, 0x02	; 2
    4cb6:	69 ee       	ldi	r22, 0xE9	; 233
    4cb8:	78 e2       	ldi	r23, 0x28	; 40
    4cba:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <SPI_set_config_func>
    4cbe:	86 e0       	ldi	r24, 0x06	; 6
    4cc0:	61 e0       	ldi	r22, 0x01	; 1
    4cc2:	79 e2       	ldi	r23, 0x29	; 41
    4cc4:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <SPI_set_config_func>
    4cc8:	01 ee       	ldi	r16, 0xE1	; 225
    4cca:	18 e2       	ldi	r17, 0x28	; 40
    4ccc:	83 e0       	ldi	r24, 0x03	; 3
    4cce:	b8 01       	movw	r22, r16
    4cd0:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <SPI_set_config_func>
    4cd4:	84 e0       	ldi	r24, 0x04	; 4
    4cd6:	b8 01       	movw	r22, r16
    4cd8:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <SPI_set_config_func>
    4cdc:	85 e0       	ldi	r24, 0x05	; 5
    4cde:	b8 01       	movw	r22, r16
    4ce0:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <SPI_set_config_func>
    4ce4:	87 e0       	ldi	r24, 0x07	; 7
    4ce6:	b8 01       	movw	r22, r16
    4ce8:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <SPI_set_config_func>
    4cec:	82 e0       	ldi	r24, 0x02	; 2
    4cee:	61 e0       	ldi	r22, 0x01	; 1
    4cf0:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    4cf4:	8f ef       	ldi	r24, 0xFF	; 255
    4cf6:	80 93 ff 07 	sts	0x07FF, r24
    4cfa:	87 e0       	ldi	r24, 0x07	; 7
    4cfc:	0e 94 a1 1b 	call	0x3742	; 0x3742 <SPI_set_slave_addr>
    4d00:	82 e0       	ldi	r24, 0x02	; 2
    4d02:	91 e0       	ldi	r25, 0x01	; 1
    4d04:	1f 91       	pop	r17
    4d06:	0f 91       	pop	r16
    4d08:	08 95       	ret

00004d0a <SPI_receive>:
    4d0a:	1f 93       	push	r17
    4d0c:	16 2f       	mov	r17, r22
    4d0e:	0e 94 a1 1b 	call	0x3742	; 0x3742 <SPI_set_slave_addr>
    4d12:	82 e0       	ldi	r24, 0x02	; 2
    4d14:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    4d18:	81 30       	cpi	r24, 0x01	; 1
    4d1a:	11 f0       	breq	.+4      	; 0x4d20 <SPI_receive+0x16>
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	05 c0       	rjmp	.+10     	; 0x4d2a <SPI_receive+0x20>
    4d20:	1e bd       	out	0x2e, r17	; 46
    4d22:	0d b4       	in	r0, 0x2d	; 45
    4d24:	07 fe       	sbrs	r0, 7
    4d26:	fd cf       	rjmp	.-6      	; 0x4d22 <SPI_receive+0x18>
    4d28:	8e b5       	in	r24, 0x2e	; 46
    4d2a:	1f 91       	pop	r17
    4d2c:	08 95       	ret

00004d2e <SPI_set_config_func>:
    4d2e:	e8 2f       	mov	r30, r24
    4d30:	f0 e0       	ldi	r31, 0x00	; 0
    4d32:	ee 0f       	add	r30, r30
    4d34:	ff 1f       	adc	r31, r31
    4d36:	e2 52       	subi	r30, 0x22	; 34
    4d38:	fb 4f       	sbci	r31, 0xFB	; 251
    4d3a:	71 83       	std	Z+1, r23	; 0x01
    4d3c:	60 83       	st	Z, r22
    4d3e:	08 95       	ret

00004d40 <__SPKR_TIMER1_COMPA_vect>:
    4d40:	0e 94 a3 26 	call	0x4d46	; 0x4d46 <SPKR_clk>
    4d44:	08 95       	ret

00004d46 <SPKR_clk>:
    4d46:	80 91 80 04 	lds	r24, 0x0480
    4d4a:	90 91 81 04 	lds	r25, 0x0481
    4d4e:	a0 91 82 04 	lds	r26, 0x0482
    4d52:	b0 91 83 04 	lds	r27, 0x0483
    4d56:	20 91 84 04 	lds	r18, 0x0484
    4d5a:	30 91 85 04 	lds	r19, 0x0485
    4d5e:	40 91 86 04 	lds	r20, 0x0486
    4d62:	50 91 87 04 	lds	r21, 0x0487
    4d66:	28 0f       	add	r18, r24
    4d68:	39 1f       	adc	r19, r25
    4d6a:	4a 1f       	adc	r20, r26
    4d6c:	5b 1f       	adc	r21, r27
    4d6e:	20 93 80 04 	sts	0x0480, r18
    4d72:	30 93 81 04 	sts	0x0481, r19
    4d76:	40 93 82 04 	sts	0x0482, r20
    4d7a:	50 93 83 04 	sts	0x0483, r21
    4d7e:	80 91 80 04 	lds	r24, 0x0480
    4d82:	90 91 81 04 	lds	r25, 0x0481
    4d86:	a0 91 82 04 	lds	r26, 0x0482
    4d8a:	b0 91 83 04 	lds	r27, 0x0483
    4d8e:	88 51       	subi	r24, 0x18	; 24
    4d90:	96 4f       	sbci	r25, 0xF6	; 246
    4d92:	a0 40       	sbci	r26, 0x00	; 0
    4d94:	b0 40       	sbci	r27, 0x00	; 0
    4d96:	bc f0       	brlt	.+46     	; 0x4dc6 <SPKR_clk+0x80>
    4d98:	8b b1       	in	r24, 0x0b	; 11
    4d9a:	80 58       	subi	r24, 0x80	; 128
    4d9c:	8b b9       	out	0x0b, r24	; 11
    4d9e:	80 91 80 04 	lds	r24, 0x0480
    4da2:	90 91 81 04 	lds	r25, 0x0481
    4da6:	a0 91 82 04 	lds	r26, 0x0482
    4daa:	b0 91 83 04 	lds	r27, 0x0483
    4dae:	88 51       	subi	r24, 0x18	; 24
    4db0:	96 4f       	sbci	r25, 0xF6	; 246
    4db2:	a0 40       	sbci	r26, 0x00	; 0
    4db4:	b0 40       	sbci	r27, 0x00	; 0
    4db6:	80 93 80 04 	sts	0x0480, r24
    4dba:	90 93 81 04 	sts	0x0481, r25
    4dbe:	a0 93 82 04 	sts	0x0482, r26
    4dc2:	b0 93 83 04 	sts	0x0483, r27
    4dc6:	08 95       	ret

00004dc8 <__SPKR_close_beep_mode>:
    4dc8:	8a e0       	ldi	r24, 0x0A	; 10
    4dca:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    4dce:	81 30       	cpi	r24, 0x01	; 1
    4dd0:	41 f4       	brne	.+16     	; 0x4de2 <__SPKR_close_beep_mode+0x1a>
    4dd2:	0e 94 11 29 	call	0x5222	; 0x5222 <__SPKR_close>
    4dd6:	10 92 7f 04 	sts	0x047F, r1
    4dda:	8a e0       	ldi	r24, 0x0A	; 10
    4ddc:	60 e0       	ldi	r22, 0x00	; 0
    4dde:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    4de2:	08 95       	ret

00004de4 <__SPKR_close_tone_mode>:
    4de4:	89 e0       	ldi	r24, 0x09	; 9
    4de6:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    4dea:	81 30       	cpi	r24, 0x01	; 1
    4dec:	d9 f4       	brne	.+54     	; 0x4e24 <__SPKR_close_tone_mode+0x40>
    4dee:	80 91 7e 04 	lds	r24, 0x047E
    4df2:	88 23       	and	r24, r24
    4df4:	11 f0       	breq	.+4      	; 0x4dfa <__SPKR_close_tone_mode+0x16>
    4df6:	0e 94 94 27 	call	0x4f28	; 0x4f28 <__SPKR_stop>
    4dfa:	82 e0       	ldi	r24, 0x02	; 2
    4dfc:	0e 94 11 29 	call	0x5222	; 0x5222 <__SPKR_close>
    4e00:	80 91 8c 04 	lds	r24, 0x048C
    4e04:	90 91 8d 04 	lds	r25, 0x048D
    4e08:	00 97       	sbiw	r24, 0x00	; 0
    4e0a:	31 f0       	breq	.+12     	; 0x4e18 <__SPKR_close_tone_mode+0x34>
    4e0c:	0e 94 84 35 	call	0x6b08	; 0x6b08 <free>
    4e10:	10 92 8d 04 	sts	0x048D, r1
    4e14:	10 92 8c 04 	sts	0x048C, r1
    4e18:	10 92 7e 04 	sts	0x047E, r1
    4e1c:	89 e0       	ldi	r24, 0x09	; 9
    4e1e:	60 e0       	ldi	r22, 0x00	; 0
    4e20:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    4e24:	08 95       	ret

00004e26 <SPKR_close>:
    4e26:	81 30       	cpi	r24, 0x01	; 1
    4e28:	29 f0       	breq	.+10     	; 0x4e34 <SPKR_close+0xe>
    4e2a:	82 30       	cpi	r24, 0x02	; 2
    4e2c:	29 f4       	brne	.+10     	; 0x4e38 <SPKR_close+0x12>
    4e2e:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <__SPKR_close_tone_mode>
    4e32:	08 95       	ret
    4e34:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <__SPKR_close_beep_mode>
    4e38:	08 95       	ret

00004e3a <__SPKR_init>:
    4e3a:	98 2f       	mov	r25, r24
    4e3c:	80 91 7e 04 	lds	r24, 0x047E
    4e40:	88 23       	and	r24, r24
    4e42:	31 f4       	brne	.+12     	; 0x4e50 <__SPKR_init+0x16>
    4e44:	80 91 7f 04 	lds	r24, 0x047F
    4e48:	88 23       	and	r24, r24
    4e4a:	11 f4       	brne	.+4      	; 0x4e50 <__SPKR_init+0x16>
    4e4c:	57 9a       	sbi	0x0a, 7	; 10
    4e4e:	5f 98       	cbi	0x0b, 7	; 11
    4e50:	80 91 7e 04 	lds	r24, 0x047E
    4e54:	88 23       	and	r24, r24
    4e56:	d1 f4       	brne	.+52     	; 0x4e8c <__SPKR_init+0x52>
    4e58:	92 30       	cpi	r25, 0x02	; 2
    4e5a:	c1 f4       	brne	.+48     	; 0x4e8c <__SPKR_init+0x52>
    4e5c:	10 92 80 00 	sts	0x0080, r1
    4e60:	10 92 81 00 	sts	0x0081, r1
    4e64:	80 91 81 00 	lds	r24, 0x0081
    4e68:	88 60       	ori	r24, 0x08	; 8
    4e6a:	80 93 81 00 	sts	0x0081, r24
    4e6e:	80 91 81 00 	lds	r24, 0x0081
    4e72:	81 60       	ori	r24, 0x01	; 1
    4e74:	80 93 81 00 	sts	0x0081, r24
    4e78:	10 92 85 00 	sts	0x0085, r1
    4e7c:	10 92 84 00 	sts	0x0084, r1
    4e80:	81 e0       	ldi	r24, 0x01	; 1
    4e82:	80 93 89 00 	sts	0x0089, r24
    4e86:	80 e9       	ldi	r24, 0x90	; 144
    4e88:	80 93 88 00 	sts	0x0088, r24
    4e8c:	08 95       	ret

00004e8e <SPKR_play_beep>:
    4e8e:	8f 92       	push	r8
    4e90:	9f 92       	push	r9
    4e92:	af 92       	push	r10
    4e94:	bf 92       	push	r11
    4e96:	cf 92       	push	r12
    4e98:	df 92       	push	r13
    4e9a:	ef 92       	push	r14
    4e9c:	ff 92       	push	r15
    4e9e:	0f 93       	push	r16
    4ea0:	1f 93       	push	r17
    4ea2:	cf 93       	push	r28
    4ea4:	df 93       	push	r29
    4ea6:	4b 01       	movw	r8, r22
    4ea8:	5c 01       	movw	r10, r24
    4eaa:	ea 01       	movw	r28, r20
    4eac:	b9 01       	movw	r22, r18
    4eae:	21 15       	cp	r18, r1
    4eb0:	31 05       	cpc	r19, r1
    4eb2:	39 f1       	breq	.+78     	; 0x4f02 <SPKR_play_beep+0x74>
    4eb4:	9e 01       	movw	r18, r28
    4eb6:	44 27       	eor	r20, r20
    4eb8:	37 fd       	sbrc	r19, 7
    4eba:	40 95       	com	r20
    4ebc:	54 2f       	mov	r21, r20
    4ebe:	65 36       	cpi	r22, 0x65	; 101
    4ec0:	71 05       	cpc	r23, r1
    4ec2:	10 f0       	brcs	.+4      	; 0x4ec8 <SPKR_play_beep+0x3a>
    4ec4:	64 e6       	ldi	r22, 0x64	; 100
    4ec6:	70 e0       	ldi	r23, 0x00	; 0
    4ec8:	80 e0       	ldi	r24, 0x00	; 0
    4eca:	90 e0       	ldi	r25, 0x00	; 0
    4ecc:	0e 94 5f 34 	call	0x68be	; 0x68be <__mulsi3>
    4ed0:	24 e6       	ldi	r18, 0x64	; 100
    4ed2:	30 e0       	ldi	r19, 0x00	; 0
    4ed4:	40 e0       	ldi	r20, 0x00	; 0
    4ed6:	50 e0       	ldi	r21, 0x00	; 0
    4ed8:	0e 94 7e 34 	call	0x68fc	; 0x68fc <__udivmodsi4>
    4edc:	79 01       	movw	r14, r18
    4ede:	8a 01       	movw	r16, r20
    4ee0:	c5 01       	movw	r24, r10
    4ee2:	b4 01       	movw	r22, r8
    4ee4:	0e 94 01 1c 	call	0x3802	; 0x3802 <SPKR_beep>
    4ee8:	c7 01       	movw	r24, r14
    4eea:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
    4eee:	60 e0       	ldi	r22, 0x00	; 0
    4ef0:	70 e0       	ldi	r23, 0x00	; 0
    4ef2:	80 e0       	ldi	r24, 0x00	; 0
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	0e 94 01 1c 	call	0x3802	; 0x3802 <SPKR_beep>
    4efa:	ce 01       	movw	r24, r28
    4efc:	8e 19       	sub	r24, r14
    4efe:	9f 09       	sbc	r25, r15
    4f00:	04 c0       	rjmp	.+8      	; 0x4f0a <SPKR_play_beep+0x7c>
    4f02:	41 15       	cp	r20, r1
    4f04:	51 05       	cpc	r21, r1
    4f06:	19 f0       	breq	.+6      	; 0x4f0e <SPKR_play_beep+0x80>
    4f08:	ca 01       	movw	r24, r20
    4f0a:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_delay>
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	1f 91       	pop	r17
    4f14:	0f 91       	pop	r16
    4f16:	ff 90       	pop	r15
    4f18:	ef 90       	pop	r14
    4f1a:	df 90       	pop	r13
    4f1c:	cf 90       	pop	r12
    4f1e:	bf 90       	pop	r11
    4f20:	af 90       	pop	r10
    4f22:	9f 90       	pop	r9
    4f24:	8f 90       	pop	r8
    4f26:	08 95       	ret

00004f28 <__SPKR_stop>:
    4f28:	ef e6       	ldi	r30, 0x6F	; 111
    4f2a:	f0 e0       	ldi	r31, 0x00	; 0
    4f2c:	80 81       	ld	r24, Z
    4f2e:	8d 7f       	andi	r24, 0xFD	; 253
    4f30:	80 83       	st	Z, r24
    4f32:	08 95       	ret

00004f34 <STEPPER_go>:
    4f34:	98 2f       	mov	r25, r24
    4f36:	81 e0       	ldi	r24, 0x01	; 1
    4f38:	80 93 e4 07 	sts	0x07E4, r24
    4f3c:	91 30       	cpi	r25, 0x01	; 1
    4f3e:	51 f0       	breq	.+20     	; 0x4f54 <STEPPER_go+0x20>
    4f40:	91 30       	cpi	r25, 0x01	; 1
    4f42:	18 f0       	brcs	.+6      	; 0x4f4a <STEPPER_go+0x16>
    4f44:	92 30       	cpi	r25, 0x02	; 2
    4f46:	41 f4       	brne	.+16     	; 0x4f58 <STEPPER_go+0x24>
    4f48:	03 c0       	rjmp	.+6      	; 0x4f50 <STEPPER_go+0x1c>
    4f4a:	10 92 cc 07 	sts	0x07CC, r1
    4f4e:	04 c0       	rjmp	.+8      	; 0x4f58 <STEPPER_go+0x24>
    4f50:	10 92 cc 07 	sts	0x07CC, r1
    4f54:	10 92 cd 07 	sts	0x07CD, r1
    4f58:	10 92 e4 07 	sts	0x07E4, r1
    4f5c:	08 95       	ret

00004f5e <__STEPPER_init>:
    4f5e:	3a 9a       	sbi	0x07, 2	; 7
    4f60:	3b 9a       	sbi	0x07, 3	; 7
    4f62:	3c 9a       	sbi	0x07, 4	; 7
    4f64:	3d 9a       	sbi	0x07, 5	; 7
    4f66:	3e 9a       	sbi	0x07, 6	; 7
    4f68:	3f 9a       	sbi	0x07, 7	; 7
    4f6a:	88 b1       	in	r24, 0x08	; 8
    4f6c:	83 70       	andi	r24, 0x03	; 3
    4f6e:	88 b9       	out	0x08, r24	; 8
    4f70:	08 95       	ret

00004f72 <STEPPER_set_stop_mode>:
    4f72:	98 2f       	mov	r25, r24
    4f74:	81 e0       	ldi	r24, 0x01	; 1
    4f76:	80 93 e4 07 	sts	0x07E4, r24
    4f7a:	91 30       	cpi	r25, 0x01	; 1
    4f7c:	51 f0       	breq	.+20     	; 0x4f92 <STEPPER_set_stop_mode+0x20>
    4f7e:	91 30       	cpi	r25, 0x01	; 1
    4f80:	18 f0       	brcs	.+6      	; 0x4f88 <STEPPER_set_stop_mode+0x16>
    4f82:	92 30       	cpi	r25, 0x02	; 2
    4f84:	41 f4       	brne	.+16     	; 0x4f96 <STEPPER_set_stop_mode+0x24>
    4f86:	03 c0       	rjmp	.+6      	; 0x4f8e <STEPPER_set_stop_mode+0x1c>
    4f88:	60 93 ce 07 	sts	0x07CE, r22
    4f8c:	04 c0       	rjmp	.+8      	; 0x4f96 <STEPPER_set_stop_mode+0x24>
    4f8e:	60 93 ce 07 	sts	0x07CE, r22
    4f92:	60 93 cf 07 	sts	0x07CF, r22
    4f96:	10 92 e4 07 	sts	0x07E4, r1
    4f9a:	08 95       	ret

00004f9c <STEPPER_setup_decels>:
    4f9c:	0f 93       	push	r16
    4f9e:	1f 93       	push	r17
    4fa0:	cf 93       	push	r28
    4fa2:	df 93       	push	r29
    4fa4:	eb 01       	movw	r28, r22
    4fa6:	8a 01       	movw	r16, r20
    4fa8:	81 30       	cpi	r24, 0x01	; 1
    4faa:	01 f1       	breq	.+64     	; 0x4fec <STEPPER_setup_decels+0x50>
    4fac:	81 30       	cpi	r24, 0x01	; 1
    4fae:	18 f0       	brcs	.+6      	; 0x4fb6 <STEPPER_setup_decels+0x1a>
    4fb0:	82 30       	cpi	r24, 0x02	; 2
    4fb2:	61 f5       	brne	.+88     	; 0x500c <STEPPER_setup_decels+0x70>
    4fb4:	0d c0       	rjmp	.+26     	; 0x4fd0 <STEPPER_setup_decels+0x34>
    4fb6:	80 91 b8 07 	lds	r24, 0x07B8
    4fba:	90 91 b9 07 	lds	r25, 0x07B9
    4fbe:	89 2b       	or	r24, r25
    4fc0:	11 f0       	breq	.+4      	; 0x4fc6 <STEPPER_setup_decels+0x2a>
    4fc2:	80 e0       	ldi	r24, 0x00	; 0
    4fc4:	1a c0       	rjmp	.+52     	; 0x4ffa <STEPPER_setup_decels+0x5e>
    4fc6:	10 92 c5 07 	sts	0x07C5, r1
    4fca:	10 92 c4 07 	sts	0x07C4, r1
    4fce:	1e c0       	rjmp	.+60     	; 0x500c <STEPPER_setup_decels+0x70>
    4fd0:	80 91 b8 07 	lds	r24, 0x07B8
    4fd4:	90 91 b9 07 	lds	r25, 0x07B9
    4fd8:	89 2b       	or	r24, r25
    4fda:	21 f0       	breq	.+8      	; 0x4fe4 <STEPPER_setup_decels+0x48>
    4fdc:	80 e0       	ldi	r24, 0x00	; 0
    4fde:	0e 94 2d 29 	call	0x525a	; 0x525a <STEPPER_set_decel_step_values>
    4fe2:	04 c0       	rjmp	.+8      	; 0x4fec <STEPPER_setup_decels+0x50>
    4fe4:	10 92 c5 07 	sts	0x07C5, r1
    4fe8:	10 92 c4 07 	sts	0x07C4, r1
    4fec:	80 91 ba 07 	lds	r24, 0x07BA
    4ff0:	90 91 bb 07 	lds	r25, 0x07BB
    4ff4:	89 2b       	or	r24, r25
    4ff6:	31 f0       	breq	.+12     	; 0x5004 <STEPPER_setup_decels+0x68>
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	be 01       	movw	r22, r28
    4ffc:	a8 01       	movw	r20, r16
    4ffe:	0e 94 2d 29 	call	0x525a	; 0x525a <STEPPER_set_decel_step_values>
    5002:	04 c0       	rjmp	.+8      	; 0x500c <STEPPER_setup_decels+0x70>
    5004:	10 92 c7 07 	sts	0x07C7, r1
    5008:	10 92 c6 07 	sts	0x07C6, r1
    500c:	df 91       	pop	r29
    500e:	cf 91       	pop	r28
    5010:	1f 91       	pop	r17
    5012:	0f 91       	pop	r16
    5014:	08 95       	ret

00005016 <SYS_init>:
    5016:	10 92 e7 07 	sts	0x07E7, r1
    501a:	10 92 e8 07 	sts	0x07E8, r1
    501e:	10 92 ec 07 	sts	0x07EC, r1
    5022:	10 92 e9 07 	sts	0x07E9, r1
    5026:	10 92 eb 07 	sts	0x07EB, r1
    502a:	10 92 ed 07 	sts	0x07ED, r1
    502e:	10 92 ee 07 	sts	0x07EE, r1
    5032:	10 92 ef 07 	sts	0x07EF, r1
    5036:	10 92 f0 07 	sts	0x07F0, r1
    503a:	10 92 f1 07 	sts	0x07F1, r1
    503e:	10 92 f2 07 	sts	0x07F2, r1
    5042:	10 92 f3 07 	sts	0x07F3, r1
    5046:	10 92 f4 07 	sts	0x07F4, r1
    504a:	10 92 f5 07 	sts	0x07F5, r1
    504e:	10 92 f6 07 	sts	0x07F6, r1
    5052:	10 92 f7 07 	sts	0x07F7, r1
    5056:	10 92 f8 07 	sts	0x07F8, r1
    505a:	08 95       	ret

0000505c <TMRSRVC_insert>:
    505c:	cf 92       	push	r12
    505e:	df 92       	push	r13
    5060:	ef 92       	push	r14
    5062:	ff 92       	push	r15
    5064:	0f 93       	push	r16
    5066:	1f 93       	push	r17
    5068:	cf 93       	push	r28
    506a:	df 93       	push	r29
    506c:	ec 01       	movw	r28, r24
    506e:	80 91 1e 08 	lds	r24, 0x081E
    5072:	88 23       	and	r24, r24
    5074:	39 f4       	brne	.+14     	; 0x5084 <TMRSRVC_insert+0x28>
    5076:	d0 93 20 08 	sts	0x0820, r29
    507a:	c0 93 1f 08 	sts	0x081F, r28
    507e:	0e 94 bc 28 	call	0x5178	; 0x5178 <TMRSRVC_start>
    5082:	47 c0       	rjmp	.+142    	; 0x5112 <TMRSRVC_insert+0xb6>
    5084:	c0 90 1f 08 	lds	r12, 0x081F
    5088:	d0 90 20 08 	lds	r13, 0x0820
    508c:	00 e0       	ldi	r16, 0x00	; 0
    508e:	10 e0       	ldi	r17, 0x00	; 0
    5090:	ee 24       	eor	r14, r14
    5092:	ff 24       	eor	r15, r15
    5094:	37 c0       	rjmp	.+110    	; 0x5104 <TMRSRVC_insert+0xa8>
    5096:	a8 81       	ld	r26, Y
    5098:	b9 81       	ldd	r27, Y+1	; 0x01
    509a:	fd 01       	movw	r30, r26
    509c:	64 81       	ldd	r22, Z+4	; 0x04
    509e:	75 81       	ldd	r23, Z+5	; 0x05
    50a0:	f6 01       	movw	r30, r12
    50a2:	40 81       	ld	r20, Z
    50a4:	51 81       	ldd	r21, Z+1	; 0x01
    50a6:	fa 01       	movw	r30, r20
    50a8:	84 81       	ldd	r24, Z+4	; 0x04
    50aa:	95 81       	ldd	r25, Z+5	; 0x05
    50ac:	9b 01       	movw	r18, r22
    50ae:	28 1b       	sub	r18, r24
    50b0:	39 0b       	sbc	r19, r25
    50b2:	37 ff       	sbrs	r19, 7
    50b4:	0f c0       	rjmp	.+30     	; 0x50d4 <TMRSRVC_insert+0x78>
    50b6:	86 1b       	sub	r24, r22
    50b8:	97 0b       	sbc	r25, r23
    50ba:	95 83       	std	Z+5, r25	; 0x05
    50bc:	84 83       	std	Z+4, r24	; 0x04
    50be:	db 82       	std	Y+3, r13	; 0x03
    50c0:	ca 82       	std	Y+2, r12	; 0x02
    50c2:	01 2b       	or	r16, r17
    50c4:	29 f4       	brne	.+10     	; 0x50d0 <TMRSRVC_insert+0x74>
    50c6:	d0 93 20 08 	sts	0x0820, r29
    50ca:	c0 93 1f 08 	sts	0x081F, r28
    50ce:	21 c0       	rjmp	.+66     	; 0x5112 <TMRSRVC_insert+0xb6>
    50d0:	f7 01       	movw	r30, r14
    50d2:	0c c0       	rjmp	.+24     	; 0x50ec <TMRSRVC_insert+0x90>
    50d4:	f6 01       	movw	r30, r12
    50d6:	82 81       	ldd	r24, Z+2	; 0x02
    50d8:	93 81       	ldd	r25, Z+3	; 0x03
    50da:	21 15       	cp	r18, r1
    50dc:	31 05       	cpc	r19, r1
    50de:	49 f4       	brne	.+18     	; 0x50f2 <TMRSRVC_insert+0x96>
    50e0:	fd 01       	movw	r30, r26
    50e2:	15 82       	std	Z+5, r1	; 0x05
    50e4:	14 82       	std	Z+4, r1	; 0x04
    50e6:	9b 83       	std	Y+3, r25	; 0x03
    50e8:	8a 83       	std	Y+2, r24	; 0x02
    50ea:	f6 01       	movw	r30, r12
    50ec:	d3 83       	std	Z+3, r29	; 0x03
    50ee:	c2 83       	std	Z+2, r28	; 0x02
    50f0:	10 c0       	rjmp	.+32     	; 0x5112 <TMRSRVC_insert+0xb6>
    50f2:	fd 01       	movw	r30, r26
    50f4:	35 83       	std	Z+5, r19	; 0x05
    50f6:	24 83       	std	Z+4, r18	; 0x04
    50f8:	00 97       	sbiw	r24, 0x00	; 0
    50fa:	b9 f3       	breq	.-18     	; 0x50ea <TMRSRVC_insert+0x8e>
    50fc:	0f 5f       	subi	r16, 0xFF	; 255
    50fe:	1f 4f       	sbci	r17, 0xFF	; 255
    5100:	76 01       	movw	r14, r12
    5102:	6c 01       	movw	r12, r24
    5104:	80 91 1e 08 	lds	r24, 0x081E
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	08 17       	cp	r16, r24
    510c:	19 07       	cpc	r17, r25
    510e:	18 f2       	brcs	.-122    	; 0x5096 <TMRSRVC_insert+0x3a>
    5110:	ec cf       	rjmp	.-40     	; 0x50ea <TMRSRVC_insert+0x8e>
    5112:	80 91 1e 08 	lds	r24, 0x081E
    5116:	8f 5f       	subi	r24, 0xFF	; 255
    5118:	80 93 1e 08 	sts	0x081E, r24
    511c:	df 91       	pop	r29
    511e:	cf 91       	pop	r28
    5120:	1f 91       	pop	r17
    5122:	0f 91       	pop	r16
    5124:	ff 90       	pop	r15
    5126:	ef 90       	pop	r14
    5128:	df 90       	pop	r13
    512a:	cf 90       	pop	r12
    512c:	08 95       	ret

0000512e <TMRSRVC_open>:
    512e:	88 e0       	ldi	r24, 0x08	; 8
    5130:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    5134:	88 23       	and	r24, r24
    5136:	b9 f4       	brne	.+46     	; 0x5166 <TMRSRVC_open+0x38>
    5138:	10 92 1e 08 	sts	0x081E, r1
    513c:	10 92 20 08 	sts	0x0820, r1
    5140:	10 92 1f 08 	sts	0x081F, r1
    5144:	10 92 ee 04 	sts	0x04EE, r1
    5148:	10 92 ef 04 	sts	0x04EF, r1
    514c:	80 e1       	ldi	r24, 0x10	; 16
    514e:	6a e9       	ldi	r22, 0x9A	; 154
    5150:	79 e2       	ldi	r23, 0x29	; 41
    5152:	0e 94 cd 28 	call	0x519a	; 0x519a <__ISR_attach>
    5156:	0e 94 a1 29 	call	0x5342	; 0x5342 <__TMRSRVC_init>
    515a:	0e 94 b6 28 	call	0x516c	; 0x516c <__TMRSRVC_start>
    515e:	88 e0       	ldi	r24, 0x08	; 8
    5160:	61 e0       	ldi	r22, 0x01	; 1
    5162:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SYS_set_state>
    5166:	88 e0       	ldi	r24, 0x08	; 8
    5168:	91 e0       	ldi	r25, 0x01	; 1
    516a:	08 95       	ret

0000516c <__TMRSRVC_start>:
    516c:	ee e6       	ldi	r30, 0x6E	; 110
    516e:	f0 e0       	ldi	r31, 0x00	; 0
    5170:	80 81       	ld	r24, Z
    5172:	82 60       	ori	r24, 0x02	; 2
    5174:	80 83       	st	Z, r24
    5176:	08 95       	ret

00005178 <TMRSRVC_start>:
    5178:	81 e0       	ldi	r24, 0x01	; 1
    517a:	80 93 ef 04 	sts	0x04EF, r24
    517e:	08 95       	ret

00005180 <I2C_enable>:
    5180:	80 91 21 08 	lds	r24, 0x0821
    5184:	81 30       	cpi	r24, 0x01	; 1
    5186:	29 f4       	brne	.+10     	; 0x5192 <I2C_enable+0x12>
    5188:	80 91 bc 00 	lds	r24, 0x00BC
    518c:	84 60       	ori	r24, 0x04	; 4
    518e:	80 93 bc 00 	sts	0x00BC, r24
    5192:	08 95       	ret

00005194 <__I2C_init>:
    5194:	38 98       	cbi	0x07, 0	; 7
    5196:	39 98       	cbi	0x07, 1	; 7
    5198:	08 95       	ret

0000519a <__ISR_attach>:
    519a:	80 32       	cpi	r24, 0x20	; 32
    519c:	18 f0       	brcs	.+6      	; 0x51a4 <__ISR_attach+0xa>
    519e:	20 e0       	ldi	r18, 0x00	; 0
    51a0:	30 e0       	ldi	r19, 0x00	; 0
    51a2:	0a c0       	rjmp	.+20     	; 0x51b8 <__ISR_attach+0x1e>
    51a4:	e8 2f       	mov	r30, r24
    51a6:	f0 e0       	ldi	r31, 0x00	; 0
    51a8:	ee 0f       	add	r30, r30
    51aa:	ff 1f       	adc	r31, r31
    51ac:	e2 56       	subi	r30, 0x62	; 98
    51ae:	fb 4f       	sbci	r31, 0xFB	; 251
    51b0:	20 81       	ld	r18, Z
    51b2:	31 81       	ldd	r19, Z+1	; 0x01
    51b4:	71 83       	std	Z+1, r23	; 0x01
    51b6:	60 83       	st	Z, r22
    51b8:	c9 01       	movw	r24, r18
    51ba:	08 95       	ret

000051bc <__ATMEGA_init>:
    51bc:	24 9a       	sbi	0x04, 4	; 4
    51be:	2c 9a       	sbi	0x05, 4	; 5
    51c0:	08 95       	ret

000051c2 <SPI_default_config>:
    51c2:	83 e5       	ldi	r24, 0x53	; 83
    51c4:	8c bd       	out	0x2c, r24	; 44
    51c6:	81 e0       	ldi	r24, 0x01	; 1
    51c8:	8d bd       	out	0x2d, r24	; 45
    51ca:	8d e0       	ldi	r24, 0x0D	; 13
    51cc:	8a 95       	dec	r24
    51ce:	f1 f7       	brne	.-4      	; 0x51cc <SPI_default_config+0xa>
    51d0:	08 95       	ret

000051d2 <SPI_ATtiny0_config>:
    51d2:	83 e5       	ldi	r24, 0x53	; 83
    51d4:	8c bd       	out	0x2c, r24	; 44
    51d6:	1d bc       	out	0x2d, r1	; 45
    51d8:	84 ef       	ldi	r24, 0xF4	; 244
    51da:	91 e0       	ldi	r25, 0x01	; 1
    51dc:	01 97       	sbiw	r24, 0x01	; 1
    51de:	f1 f7       	brne	.-4      	; 0x51dc <SPI_ATtiny0_config+0xa>
    51e0:	08 95       	ret

000051e2 <SPI_PSXC_config>:
    51e2:	8f e7       	ldi	r24, 0x7F	; 127
    51e4:	8c bd       	out	0x2c, r24	; 44
    51e6:	1d bc       	out	0x2d, r1	; 45
    51e8:	84 ef       	ldi	r24, 0xF4	; 244
    51ea:	91 e0       	ldi	r25, 0x01	; 1
    51ec:	01 97       	sbiw	r24, 0x01	; 1
    51ee:	f1 f7       	brne	.-4      	; 0x51ec <SPI_PSXC_config+0xa>
    51f0:	08 95       	ret

000051f2 <SPI_LCD_config>:
    51f2:	83 e5       	ldi	r24, 0x53	; 83
    51f4:	8c bd       	out	0x2c, r24	; 44
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	8d bd       	out	0x2d, r24	; 45
    51fa:	8d e0       	ldi	r24, 0x0D	; 13
    51fc:	8a 95       	dec	r24
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <SPI_LCD_config+0xa>
    5200:	08 95       	ret

00005202 <SPI_FLASH_config>:
    5202:	83 e5       	ldi	r24, 0x53	; 83
    5204:	8c bd       	out	0x2c, r24	; 44
    5206:	81 e0       	ldi	r24, 0x01	; 1
    5208:	8d bd       	out	0x2d, r24	; 45
    520a:	84 ef       	ldi	r24, 0xF4	; 244
    520c:	91 e0       	ldi	r25, 0x01	; 1
    520e:	01 97       	sbiw	r24, 0x01	; 1
    5210:	f1 f7       	brne	.-4      	; 0x520e <SPI_FLASH_config+0xc>
    5212:	08 95       	ret

00005214 <__SPI_init>:
    5214:	25 9a       	sbi	0x04, 5	; 4
    5216:	26 98       	cbi	0x04, 6	; 4
    5218:	27 9a       	sbi	0x04, 7	; 4
    521a:	20 9a       	sbi	0x04, 0	; 4
    521c:	21 9a       	sbi	0x04, 1	; 4
    521e:	22 9a       	sbi	0x04, 2	; 4
    5220:	08 95       	ret

00005222 <__SPKR_close>:
    5222:	82 30       	cpi	r24, 0x02	; 2
    5224:	29 f4       	brne	.+10     	; 0x5230 <__SPKR_close+0xe>
    5226:	80 91 81 00 	lds	r24, 0x0081
    522a:	8e 7f       	andi	r24, 0xFE	; 254
    522c:	80 93 81 00 	sts	0x0081, r24
    5230:	80 91 7e 04 	lds	r24, 0x047E
    5234:	81 30       	cpi	r24, 0x01	; 1
    5236:	31 f4       	brne	.+12     	; 0x5244 <__SPKR_close+0x22>
    5238:	80 91 7f 04 	lds	r24, 0x047F
    523c:	81 30       	cpi	r24, 0x01	; 1
    523e:	11 f4       	brne	.+4      	; 0x5244 <__SPKR_close+0x22>
    5240:	00 00       	nop
    5242:	08 95       	ret
    5244:	80 91 7e 04 	lds	r24, 0x047E
    5248:	81 30       	cpi	r24, 0x01	; 1
    524a:	21 f0       	breq	.+8      	; 0x5254 <__SPKR_close+0x32>
    524c:	80 91 7f 04 	lds	r24, 0x047F
    5250:	81 30       	cpi	r24, 0x01	; 1
    5252:	11 f4       	brne	.+4      	; 0x5258 <__SPKR_close+0x36>
    5254:	5f 98       	cbi	0x0b, 7	; 11
    5256:	57 98       	cbi	0x0a, 7	; 10
    5258:	08 95       	ret

0000525a <STEPPER_set_decel_step_values>:
    525a:	ef 92       	push	r14
    525c:	ff 92       	push	r15
    525e:	0f 93       	push	r16
    5260:	1f 93       	push	r17
    5262:	cf 93       	push	r28
    5264:	df 93       	push	r29
    5266:	eb 01       	movw	r28, r22
    5268:	88 23       	and	r24, r24
    526a:	21 f0       	breq	.+8      	; 0x5274 <STEPPER_set_decel_step_values+0x1a>
    526c:	81 30       	cpi	r24, 0x01	; 1
    526e:	09 f0       	breq	.+2      	; 0x5272 <STEPPER_set_decel_step_values+0x18>
    5270:	5a c0       	rjmp	.+180    	; 0x5326 <STEPPER_set_decel_step_values+0xcc>
    5272:	2d c0       	rjmp	.+90     	; 0x52ce <STEPPER_set_decel_step_values+0x74>
    5274:	9a 01       	movw	r18, r20
    5276:	40 e0       	ldi	r20, 0x00	; 0
    5278:	50 e0       	ldi	r21, 0x00	; 0
    527a:	ca 01       	movw	r24, r20
    527c:	b9 01       	movw	r22, r18
    527e:	0e 94 5f 34 	call	0x68be	; 0x68be <__mulsi3>
    5282:	20 91 b8 07 	lds	r18, 0x07B8
    5286:	30 91 b9 07 	lds	r19, 0x07B9
    528a:	22 0f       	add	r18, r18
    528c:	33 1f       	adc	r19, r19
    528e:	40 e0       	ldi	r20, 0x00	; 0
    5290:	50 e0       	ldi	r21, 0x00	; 0
    5292:	0e 94 7e 34 	call	0x68fc	; 0x68fc <__udivmodsi4>
    5296:	79 01       	movw	r14, r18
    5298:	8a 01       	movw	r16, r20
    529a:	a8 01       	movw	r20, r16
    529c:	97 01       	movw	r18, r14
    529e:	22 0f       	add	r18, r18
    52a0:	33 1f       	adc	r19, r19
    52a2:	44 1f       	adc	r20, r20
    52a4:	55 1f       	adc	r21, r21
    52a6:	ce 01       	movw	r24, r28
    52a8:	a0 e0       	ldi	r26, 0x00	; 0
    52aa:	b0 e0       	ldi	r27, 0x00	; 0
    52ac:	82 17       	cp	r24, r18
    52ae:	93 07       	cpc	r25, r19
    52b0:	a4 07       	cpc	r26, r20
    52b2:	b5 07       	cpc	r27, r21
    52b4:	28 f0       	brcs	.+10     	; 0x52c0 <STEPPER_set_decel_step_values+0x66>
    52b6:	f0 92 c5 07 	sts	0x07C5, r15
    52ba:	e0 92 c4 07 	sts	0x07C4, r14
    52be:	33 c0       	rjmp	.+102    	; 0x5326 <STEPPER_set_decel_step_values+0xcc>
    52c0:	d6 95       	lsr	r29
    52c2:	c7 95       	ror	r28
    52c4:	d0 93 c5 07 	sts	0x07C5, r29
    52c8:	c0 93 c4 07 	sts	0x07C4, r28
    52cc:	2c c0       	rjmp	.+88     	; 0x5326 <STEPPER_set_decel_step_values+0xcc>
    52ce:	9a 01       	movw	r18, r20
    52d0:	40 e0       	ldi	r20, 0x00	; 0
    52d2:	50 e0       	ldi	r21, 0x00	; 0
    52d4:	ca 01       	movw	r24, r20
    52d6:	b9 01       	movw	r22, r18
    52d8:	0e 94 5f 34 	call	0x68be	; 0x68be <__mulsi3>
    52dc:	20 91 ba 07 	lds	r18, 0x07BA
    52e0:	30 91 bb 07 	lds	r19, 0x07BB
    52e4:	22 0f       	add	r18, r18
    52e6:	33 1f       	adc	r19, r19
    52e8:	40 e0       	ldi	r20, 0x00	; 0
    52ea:	50 e0       	ldi	r21, 0x00	; 0
    52ec:	0e 94 7e 34 	call	0x68fc	; 0x68fc <__udivmodsi4>
    52f0:	79 01       	movw	r14, r18
    52f2:	8a 01       	movw	r16, r20
    52f4:	a8 01       	movw	r20, r16
    52f6:	97 01       	movw	r18, r14
    52f8:	22 0f       	add	r18, r18
    52fa:	33 1f       	adc	r19, r19
    52fc:	44 1f       	adc	r20, r20
    52fe:	55 1f       	adc	r21, r21
    5300:	ce 01       	movw	r24, r28
    5302:	a0 e0       	ldi	r26, 0x00	; 0
    5304:	b0 e0       	ldi	r27, 0x00	; 0
    5306:	82 17       	cp	r24, r18
    5308:	93 07       	cpc	r25, r19
    530a:	a4 07       	cpc	r26, r20
    530c:	b5 07       	cpc	r27, r21
    530e:	28 f0       	brcs	.+10     	; 0x531a <STEPPER_set_decel_step_values+0xc0>
    5310:	f0 92 c7 07 	sts	0x07C7, r15
    5314:	e0 92 c6 07 	sts	0x07C6, r14
    5318:	06 c0       	rjmp	.+12     	; 0x5326 <STEPPER_set_decel_step_values+0xcc>
    531a:	d6 95       	lsr	r29
    531c:	c7 95       	ror	r28
    531e:	d0 93 c7 07 	sts	0x07C7, r29
    5322:	c0 93 c6 07 	sts	0x07C6, r28
    5326:	df 91       	pop	r29
    5328:	cf 91       	pop	r28
    532a:	1f 91       	pop	r17
    532c:	0f 91       	pop	r16
    532e:	ff 90       	pop	r15
    5330:	ef 90       	pop	r14
    5332:	08 95       	ret

00005334 <__TIMER0_COMPA_vect>:
    5334:	0e 94 aa 29 	call	0x5354	; 0x5354 <TMRSRVC_tick>
    5338:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <STEPPER_clk>
    533c:	0e 94 c3 29 	call	0x5386	; 0x5386 <SPKR_beep_clk>
    5340:	08 95       	ret

00005342 <__TMRSRVC_init>:
    5342:	84 b5       	in	r24, 0x24	; 36
    5344:	82 60       	ori	r24, 0x02	; 2
    5346:	84 bd       	out	0x24, r24	; 36
    5348:	85 b5       	in	r24, 0x25	; 37
    534a:	84 60       	ori	r24, 0x04	; 4
    534c:	85 bd       	out	0x25, r24	; 37
    534e:	8e e4       	ldi	r24, 0x4E	; 78
    5350:	87 bd       	out	0x27, r24	; 39
    5352:	08 95       	ret

00005354 <TMRSRVC_tick>:
    5354:	88 e0       	ldi	r24, 0x08	; 8
    5356:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    535a:	88 23       	and	r24, r24
    535c:	11 f4       	brne	.+4      	; 0x5362 <TMRSRVC_tick+0xe>
    535e:	84 e0       	ldi	r24, 0x04	; 4
    5360:	08 95       	ret
    5362:	80 91 ef 04 	lds	r24, 0x04EF
    5366:	88 23       	and	r24, r24
    5368:	11 f4       	brne	.+4      	; 0x536e <TMRSRVC_tick+0x1a>
    536a:	83 e0       	ldi	r24, 0x03	; 3
    536c:	08 95       	ret
    536e:	80 91 ee 04 	lds	r24, 0x04EE
    5372:	88 23       	and	r24, r24
    5374:	11 f0       	breq	.+4      	; 0x537a <TMRSRVC_tick+0x26>
    5376:	82 e0       	ldi	r24, 0x02	; 2
    5378:	08 95       	ret
    537a:	0e 94 37 2c 	call	0x586e	; 0x586e <TMRSRVC_process>
    537e:	81 30       	cpi	r24, 0x01	; 1
    5380:	e1 f3       	breq	.-8      	; 0x537a <TMRSRVC_tick+0x26>
    5382:	80 e0       	ldi	r24, 0x00	; 0
    5384:	08 95       	ret

00005386 <SPKR_beep_clk>:
    5386:	80 91 7f 04 	lds	r24, 0x047F
    538a:	81 30       	cpi	r24, 0x01	; 1
    538c:	11 f5       	brne	.+68     	; 0x53d2 <SPKR_beep_clk+0x4c>
    538e:	80 91 88 04 	lds	r24, 0x0488
    5392:	90 91 89 04 	lds	r25, 0x0489
    5396:	20 91 8a 04 	lds	r18, 0x048A
    539a:	30 91 8b 04 	lds	r19, 0x048B
    539e:	28 0f       	add	r18, r24
    53a0:	39 1f       	adc	r19, r25
    53a2:	30 93 89 04 	sts	0x0489, r19
    53a6:	20 93 88 04 	sts	0x0488, r18
    53aa:	80 91 88 04 	lds	r24, 0x0488
    53ae:	90 91 89 04 	lds	r25, 0x0489
    53b2:	88 5e       	subi	r24, 0xE8	; 232
    53b4:	93 40       	sbci	r25, 0x03	; 3
    53b6:	6c f0       	brlt	.+26     	; 0x53d2 <SPKR_beep_clk+0x4c>
    53b8:	8b b1       	in	r24, 0x0b	; 11
    53ba:	80 58       	subi	r24, 0x80	; 128
    53bc:	8b b9       	out	0x0b, r24	; 11
    53be:	80 91 88 04 	lds	r24, 0x0488
    53c2:	90 91 89 04 	lds	r25, 0x0489
    53c6:	88 5e       	subi	r24, 0xE8	; 232
    53c8:	93 40       	sbci	r25, 0x03	; 3
    53ca:	90 93 89 04 	sts	0x0489, r25
    53ce:	80 93 88 04 	sts	0x0488, r24
    53d2:	08 95       	ret

000053d4 <STEPPER_clk>:
    53d4:	87 e0       	ldi	r24, 0x07	; 7
    53d6:	0e 94 1b 20 	call	0x4036	; 0x4036 <SYS_get_state>
    53da:	81 30       	cpi	r24, 0x01	; 1
    53dc:	09 f0       	breq	.+2      	; 0x53e0 <STEPPER_clk+0xc>
    53de:	aa c0       	rjmp	.+340    	; 0x5534 <STEPPER_clk+0x160>
    53e0:	80 91 b8 07 	lds	r24, 0x07B8
    53e4:	90 91 b9 07 	lds	r25, 0x07B9
    53e8:	89 2b       	or	r24, r25
    53ea:	09 f1       	breq	.+66     	; 0x542e <STEPPER_clk+0x5a>
    53ec:	80 91 dc 07 	lds	r24, 0x07DC
    53f0:	90 91 dd 07 	lds	r25, 0x07DD
    53f4:	20 91 b8 07 	lds	r18, 0x07B8
    53f8:	30 91 b9 07 	lds	r19, 0x07B9
    53fc:	82 0f       	add	r24, r18
    53fe:	93 1f       	adc	r25, r19
    5400:	90 93 dd 07 	sts	0x07DD, r25
    5404:	80 93 dc 07 	sts	0x07DC, r24
    5408:	80 91 dc 07 	lds	r24, 0x07DC
    540c:	90 91 dd 07 	lds	r25, 0x07DD
    5410:	88 5e       	subi	r24, 0xE8	; 232
    5412:	93 40       	sbci	r25, 0x03	; 3
    5414:	a4 f0       	brlt	.+40     	; 0x543e <STEPPER_clk+0x6a>
    5416:	80 91 dc 07 	lds	r24, 0x07DC
    541a:	90 91 dd 07 	lds	r25, 0x07DD
    541e:	88 5e       	subi	r24, 0xE8	; 232
    5420:	93 40       	sbci	r25, 0x03	; 3
    5422:	90 93 dd 07 	sts	0x07DD, r25
    5426:	80 93 dc 07 	sts	0x07DC, r24
    542a:	41 e0       	ldi	r20, 0x01	; 1
    542c:	09 c0       	rjmp	.+18     	; 0x5440 <STEPPER_clk+0x6c>
    542e:	80 91 b0 07 	lds	r24, 0x07B0
    5432:	90 91 b1 07 	lds	r25, 0x07B1
    5436:	90 93 b5 07 	sts	0x07B5, r25
    543a:	80 93 b4 07 	sts	0x07B4, r24
    543e:	40 e0       	ldi	r20, 0x00	; 0
    5440:	80 91 ba 07 	lds	r24, 0x07BA
    5444:	90 91 bb 07 	lds	r25, 0x07BB
    5448:	89 2b       	or	r24, r25
    544a:	09 f1       	breq	.+66     	; 0x548e <STEPPER_clk+0xba>
    544c:	80 91 de 07 	lds	r24, 0x07DE
    5450:	90 91 df 07 	lds	r25, 0x07DF
    5454:	20 91 ba 07 	lds	r18, 0x07BA
    5458:	30 91 bb 07 	lds	r19, 0x07BB
    545c:	82 0f       	add	r24, r18
    545e:	93 1f       	adc	r25, r19
    5460:	90 93 df 07 	sts	0x07DF, r25
    5464:	80 93 de 07 	sts	0x07DE, r24
    5468:	80 91 de 07 	lds	r24, 0x07DE
    546c:	90 91 df 07 	lds	r25, 0x07DF
    5470:	88 5e       	subi	r24, 0xE8	; 232
    5472:	93 40       	sbci	r25, 0x03	; 3
    5474:	a4 f0       	brlt	.+40     	; 0x549e <STEPPER_clk+0xca>
    5476:	80 91 de 07 	lds	r24, 0x07DE
    547a:	90 91 df 07 	lds	r25, 0x07DF
    547e:	88 5e       	subi	r24, 0xE8	; 232
    5480:	93 40       	sbci	r25, 0x03	; 3
    5482:	90 93 df 07 	sts	0x07DF, r25
    5486:	80 93 de 07 	sts	0x07DE, r24
    548a:	61 e0       	ldi	r22, 0x01	; 1
    548c:	09 c0       	rjmp	.+18     	; 0x54a0 <STEPPER_clk+0xcc>
    548e:	80 91 b2 07 	lds	r24, 0x07B2
    5492:	90 91 b3 07 	lds	r25, 0x07B3
    5496:	90 93 b7 07 	sts	0x07B7, r25
    549a:	80 93 b6 07 	sts	0x07B6, r24
    549e:	60 e0       	ldi	r22, 0x00	; 0
    54a0:	84 2f       	mov	r24, r20
    54a2:	0e 94 9b 2a 	call	0x5536	; 0x5536 <STEPPER_process_accel>
    54a6:	80 91 d8 07 	lds	r24, 0x07D8
    54aa:	90 91 d9 07 	lds	r25, 0x07D9
    54ae:	20 91 b4 07 	lds	r18, 0x07B4
    54b2:	30 91 b5 07 	lds	r19, 0x07B5
    54b6:	28 0f       	add	r18, r24
    54b8:	39 1f       	adc	r19, r25
    54ba:	30 93 d9 07 	sts	0x07D9, r19
    54be:	20 93 d8 07 	sts	0x07D8, r18
    54c2:	80 91 d8 07 	lds	r24, 0x07D8
    54c6:	90 91 d9 07 	lds	r25, 0x07D9
    54ca:	88 5e       	subi	r24, 0xE8	; 232
    54cc:	93 40       	sbci	r25, 0x03	; 3
    54ce:	14 f4       	brge	.+4      	; 0x54d4 <STEPPER_clk+0x100>
    54d0:	40 e0       	ldi	r20, 0x00	; 0
    54d2:	0b c0       	rjmp	.+22     	; 0x54ea <STEPPER_clk+0x116>
    54d4:	80 91 d8 07 	lds	r24, 0x07D8
    54d8:	90 91 d9 07 	lds	r25, 0x07D9
    54dc:	88 5e       	subi	r24, 0xE8	; 232
    54de:	93 40       	sbci	r25, 0x03	; 3
    54e0:	90 93 d9 07 	sts	0x07D9, r25
    54e4:	80 93 d8 07 	sts	0x07D8, r24
    54e8:	41 e0       	ldi	r20, 0x01	; 1
    54ea:	80 91 da 07 	lds	r24, 0x07DA
    54ee:	90 91 db 07 	lds	r25, 0x07DB
    54f2:	20 91 b6 07 	lds	r18, 0x07B6
    54f6:	30 91 b7 07 	lds	r19, 0x07B7
    54fa:	28 0f       	add	r18, r24
    54fc:	39 1f       	adc	r19, r25
    54fe:	30 93 db 07 	sts	0x07DB, r19
    5502:	20 93 da 07 	sts	0x07DA, r18
    5506:	80 91 da 07 	lds	r24, 0x07DA
    550a:	90 91 db 07 	lds	r25, 0x07DB
    550e:	88 5e       	subi	r24, 0xE8	; 232
    5510:	93 40       	sbci	r25, 0x03	; 3
    5512:	14 f4       	brge	.+4      	; 0x5518 <STEPPER_clk+0x144>
    5514:	60 e0       	ldi	r22, 0x00	; 0
    5516:	0b c0       	rjmp	.+22     	; 0x552e <STEPPER_clk+0x15a>
    5518:	80 91 da 07 	lds	r24, 0x07DA
    551c:	90 91 db 07 	lds	r25, 0x07DB
    5520:	88 5e       	subi	r24, 0xE8	; 232
    5522:	93 40       	sbci	r25, 0x03	; 3
    5524:	90 93 db 07 	sts	0x07DB, r25
    5528:	80 93 da 07 	sts	0x07DA, r24
    552c:	61 e0       	ldi	r22, 0x01	; 1
    552e:	84 2f       	mov	r24, r20
    5530:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <STEPPER_process_run_mode>
    5534:	08 95       	ret

00005536 <STEPPER_process_accel>:
    5536:	88 23       	and	r24, r24
    5538:	f1 f0       	breq	.+60     	; 0x5576 <STEPPER_process_accel+0x40>
    553a:	20 91 b0 07 	lds	r18, 0x07B0
    553e:	30 91 b1 07 	lds	r19, 0x07B1
    5542:	80 91 b4 07 	lds	r24, 0x07B4
    5546:	90 91 b5 07 	lds	r25, 0x07B5
    554a:	28 1b       	sub	r18, r24
    554c:	39 0b       	sbc	r19, r25
    554e:	12 16       	cp	r1, r18
    5550:	13 06       	cpc	r1, r19
    5552:	34 f4       	brge	.+12     	; 0x5560 <STEPPER_process_accel+0x2a>
    5554:	80 91 b4 07 	lds	r24, 0x07B4
    5558:	90 91 b5 07 	lds	r25, 0x07B5
    555c:	01 96       	adiw	r24, 0x01	; 1
    555e:	07 c0       	rjmp	.+14     	; 0x556e <STEPPER_process_accel+0x38>
    5560:	23 2b       	or	r18, r19
    5562:	49 f0       	breq	.+18     	; 0x5576 <STEPPER_process_accel+0x40>
    5564:	80 91 b4 07 	lds	r24, 0x07B4
    5568:	90 91 b5 07 	lds	r25, 0x07B5
    556c:	01 97       	sbiw	r24, 0x01	; 1
    556e:	90 93 b5 07 	sts	0x07B5, r25
    5572:	80 93 b4 07 	sts	0x07B4, r24
    5576:	66 23       	and	r22, r22
    5578:	11 f1       	breq	.+68     	; 0x55be <STEPPER_process_accel+0x88>
    557a:	20 91 b2 07 	lds	r18, 0x07B2
    557e:	30 91 b3 07 	lds	r19, 0x07B3
    5582:	80 91 b6 07 	lds	r24, 0x07B6
    5586:	90 91 b7 07 	lds	r25, 0x07B7
    558a:	28 1b       	sub	r18, r24
    558c:	39 0b       	sbc	r19, r25
    558e:	12 16       	cp	r1, r18
    5590:	13 06       	cpc	r1, r19
    5592:	54 f4       	brge	.+20     	; 0x55a8 <STEPPER_process_accel+0x72>
    5594:	80 91 b6 07 	lds	r24, 0x07B6
    5598:	90 91 b7 07 	lds	r25, 0x07B7
    559c:	01 96       	adiw	r24, 0x01	; 1
    559e:	90 93 b7 07 	sts	0x07B7, r25
    55a2:	80 93 b6 07 	sts	0x07B6, r24
    55a6:	08 95       	ret
    55a8:	23 2b       	or	r18, r19
    55aa:	49 f0       	breq	.+18     	; 0x55be <STEPPER_process_accel+0x88>
    55ac:	80 91 b6 07 	lds	r24, 0x07B6
    55b0:	90 91 b7 07 	lds	r25, 0x07B7
    55b4:	01 97       	sbiw	r24, 0x01	; 1
    55b6:	90 93 b7 07 	sts	0x07B7, r25
    55ba:	80 93 b6 07 	sts	0x07B6, r24
    55be:	08 95       	ret

000055c0 <STEPPER_process_run_mode>:
    55c0:	0f 93       	push	r16
    55c2:	1f 93       	push	r17
    55c4:	18 2f       	mov	r17, r24
    55c6:	06 2f       	mov	r16, r22
    55c8:	80 91 e4 07 	lds	r24, 0x07E4
    55cc:	88 23       	and	r24, r24
    55ce:	09 f0       	breq	.+2      	; 0x55d2 <STEPPER_process_run_mode+0x12>
    55d0:	e7 c0       	rjmp	.+462    	; 0x57a0 <STEPPER_process_run_mode+0x1e0>
    55d2:	80 91 cc 07 	lds	r24, 0x07CC
    55d6:	88 23       	and	r24, r24
    55d8:	09 f0       	breq	.+2      	; 0x55dc <STEPPER_process_run_mode+0x1c>
    55da:	5a c0       	rjmp	.+180    	; 0x5690 <STEPPER_process_run_mode+0xd0>
    55dc:	80 91 b4 07 	lds	r24, 0x07B4
    55e0:	90 91 b5 07 	lds	r25, 0x07B5
    55e4:	89 2b       	or	r24, r25
    55e6:	e9 f4       	brne	.+58     	; 0x5622 <STEPPER_process_run_mode+0x62>
    55e8:	80 91 f0 04 	lds	r24, 0x04F0
    55ec:	83 7e       	andi	r24, 0xE3	; 227
    55ee:	80 93 f0 04 	sts	0x04F0, r24
    55f2:	10 92 d5 07 	sts	0x07D5, r1
    55f6:	80 91 e0 07 	lds	r24, 0x07E0
    55fa:	88 23       	and	r24, r24
    55fc:	09 f4       	brne	.+2      	; 0x5600 <STEPPER_process_run_mode+0x40>
    55fe:	5d c0       	rjmp	.+186    	; 0x56ba <STEPPER_process_run_mode+0xfa>
    5600:	60 91 ce 07 	lds	r22, 0x07CE
    5604:	80 e0       	ldi	r24, 0x00	; 0
    5606:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <STEPPER_stop>
    560a:	e0 91 e2 07 	lds	r30, 0x07E2
    560e:	f0 91 e3 07 	lds	r31, 0x07E3
    5612:	30 97       	sbiw	r30, 0x00	; 0
    5614:	09 f4       	brne	.+2      	; 0x5618 <STEPPER_process_run_mode+0x58>
    5616:	51 c0       	rjmp	.+162    	; 0x56ba <STEPPER_process_run_mode+0xfa>
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	80 83       	st	Z, r24
    561c:	10 92 e0 07 	sts	0x07E0, r1
    5620:	4c c0       	rjmp	.+152    	; 0x56ba <STEPPER_process_run_mode+0xfa>
    5622:	80 91 ae 07 	lds	r24, 0x07AE
    5626:	81 30       	cpi	r24, 0x01	; 1
    5628:	41 f4       	brne	.+16     	; 0x563a <STEPPER_process_run_mode+0x7a>
    562a:	80 91 c0 07 	lds	r24, 0x07C0
    562e:	90 91 c1 07 	lds	r25, 0x07C1
    5632:	01 97       	sbiw	r24, 0x01	; 1
    5634:	11 f4       	brne	.+4      	; 0x563a <STEPPER_process_run_mode+0x7a>
    5636:	11 e0       	ldi	r17, 0x01	; 1
    5638:	02 c0       	rjmp	.+4      	; 0x563e <STEPPER_process_run_mode+0x7e>
    563a:	11 23       	and	r17, r17
    563c:	f1 f1       	breq	.+124    	; 0x56ba <STEPPER_process_run_mode+0xfa>
    563e:	e0 91 d3 07 	lds	r30, 0x07D3
    5642:	f0 e0       	ldi	r31, 0x00	; 0
    5644:	e4 5c       	subi	r30, 0xC4	; 196
    5646:	fb 4f       	sbci	r31, 0xFB	; 251
    5648:	90 91 f0 04 	lds	r25, 0x04F0
    564c:	93 7e       	andi	r25, 0xE3	; 227
    564e:	80 81       	ld	r24, Z
    5650:	89 2b       	or	r24, r25
    5652:	80 93 f0 04 	sts	0x04F0, r24
    5656:	80 91 d1 07 	lds	r24, 0x07D1
    565a:	88 23       	and	r24, r24
    565c:	21 f4       	brne	.+8      	; 0x5666 <STEPPER_process_run_mode+0xa6>
    565e:	80 91 d3 07 	lds	r24, 0x07D3
    5662:	8f 5f       	subi	r24, 0xFF	; 255
    5664:	03 c0       	rjmp	.+6      	; 0x566c <STEPPER_process_run_mode+0xac>
    5666:	80 91 d3 07 	lds	r24, 0x07D3
    566a:	81 50       	subi	r24, 0x01	; 1
    566c:	80 93 d3 07 	sts	0x07D3, r24
    5670:	80 91 d3 07 	lds	r24, 0x07D3
    5674:	83 70       	andi	r24, 0x03	; 3
    5676:	80 93 d3 07 	sts	0x07D3, r24
    567a:	81 e0       	ldi	r24, 0x01	; 1
    567c:	80 93 d5 07 	sts	0x07D5, r24
    5680:	80 91 ae 07 	lds	r24, 0x07AE
    5684:	81 30       	cpi	r24, 0x01	; 1
    5686:	c9 f4       	brne	.+50     	; 0x56ba <STEPPER_process_run_mode+0xfa>
    5688:	80 e0       	ldi	r24, 0x00	; 0
    568a:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <STEPPER_process_step_mode>
    568e:	15 c0       	rjmp	.+42     	; 0x56ba <STEPPER_process_run_mode+0xfa>
    5690:	90 91 f0 04 	lds	r25, 0x04F0
    5694:	93 7e       	andi	r25, 0xE3	; 227
    5696:	90 93 f0 04 	sts	0x04F0, r25
    569a:	e0 91 d3 07 	lds	r30, 0x07D3
    569e:	f0 e0       	ldi	r31, 0x00	; 0
    56a0:	e4 5c       	subi	r30, 0xC4	; 196
    56a2:	fb 4f       	sbci	r31, 0xFB	; 251
    56a4:	80 81       	ld	r24, Z
    56a6:	89 2b       	or	r24, r25
    56a8:	80 93 f0 04 	sts	0x04F0, r24
    56ac:	82 e0       	ldi	r24, 0x02	; 2
    56ae:	80 93 d5 07 	sts	0x07D5, r24
    56b2:	10 92 b5 07 	sts	0x07B5, r1
    56b6:	10 92 b4 07 	sts	0x07B4, r1
    56ba:	80 91 cd 07 	lds	r24, 0x07CD
    56be:	88 23       	and	r24, r24
    56c0:	09 f0       	breq	.+2      	; 0x56c4 <STEPPER_process_run_mode+0x104>
    56c2:	59 c0       	rjmp	.+178    	; 0x5776 <STEPPER_process_run_mode+0x1b6>
    56c4:	80 91 b6 07 	lds	r24, 0x07B6
    56c8:	90 91 b7 07 	lds	r25, 0x07B7
    56cc:	89 2b       	or	r24, r25
    56ce:	e9 f4       	brne	.+58     	; 0x570a <STEPPER_process_run_mode+0x14a>
    56d0:	80 91 f0 04 	lds	r24, 0x04F0
    56d4:	8f 71       	andi	r24, 0x1F	; 31
    56d6:	80 93 f0 04 	sts	0x04F0, r24
    56da:	10 92 d6 07 	sts	0x07D6, r1
    56de:	80 91 e1 07 	lds	r24, 0x07E1
    56e2:	88 23       	and	r24, r24
    56e4:	09 f4       	brne	.+2      	; 0x56e8 <STEPPER_process_run_mode+0x128>
    56e6:	5c c0       	rjmp	.+184    	; 0x57a0 <STEPPER_process_run_mode+0x1e0>
    56e8:	60 91 cf 07 	lds	r22, 0x07CF
    56ec:	81 e0       	ldi	r24, 0x01	; 1
    56ee:	0e 94 a8 1f 	call	0x3f50	; 0x3f50 <STEPPER_stop>
    56f2:	e0 91 e2 07 	lds	r30, 0x07E2
    56f6:	f0 91 e3 07 	lds	r31, 0x07E3
    56fa:	30 97       	sbiw	r30, 0x00	; 0
    56fc:	09 f4       	brne	.+2      	; 0x5700 <STEPPER_process_run_mode+0x140>
    56fe:	50 c0       	rjmp	.+160    	; 0x57a0 <STEPPER_process_run_mode+0x1e0>
    5700:	81 e0       	ldi	r24, 0x01	; 1
    5702:	81 83       	std	Z+1, r24	; 0x01
    5704:	10 92 e1 07 	sts	0x07E1, r1
    5708:	4b c0       	rjmp	.+150    	; 0x57a0 <STEPPER_process_run_mode+0x1e0>
    570a:	80 91 af 07 	lds	r24, 0x07AF
    570e:	81 30       	cpi	r24, 0x01	; 1
    5710:	41 f4       	brne	.+16     	; 0x5722 <STEPPER_process_run_mode+0x162>
    5712:	80 91 c2 07 	lds	r24, 0x07C2
    5716:	90 91 c3 07 	lds	r25, 0x07C3
    571a:	01 97       	sbiw	r24, 0x01	; 1
    571c:	11 f4       	brne	.+4      	; 0x5722 <STEPPER_process_run_mode+0x162>
    571e:	01 e0       	ldi	r16, 0x01	; 1
    5720:	02 c0       	rjmp	.+4      	; 0x5726 <STEPPER_process_run_mode+0x166>
    5722:	00 23       	and	r16, r16
    5724:	e9 f1       	breq	.+122    	; 0x57a0 <STEPPER_process_run_mode+0x1e0>
    5726:	e0 91 d4 07 	lds	r30, 0x07D4
    572a:	f0 e0       	ldi	r31, 0x00	; 0
    572c:	e0 5c       	subi	r30, 0xC0	; 192
    572e:	fb 4f       	sbci	r31, 0xFB	; 251
    5730:	90 91 f0 04 	lds	r25, 0x04F0
    5734:	9f 71       	andi	r25, 0x1F	; 31
    5736:	80 81       	ld	r24, Z
    5738:	89 2b       	or	r24, r25
    573a:	80 93 f0 04 	sts	0x04F0, r24
    573e:	80 91 d2 07 	lds	r24, 0x07D2
    5742:	88 23       	and	r24, r24
    5744:	21 f4       	brne	.+8      	; 0x574e <STEPPER_process_run_mode+0x18e>
    5746:	80 91 d4 07 	lds	r24, 0x07D4
    574a:	8f 5f       	subi	r24, 0xFF	; 255
    574c:	03 c0       	rjmp	.+6      	; 0x5754 <STEPPER_process_run_mode+0x194>
    574e:	80 91 d4 07 	lds	r24, 0x07D4
    5752:	81 50       	subi	r24, 0x01	; 1
    5754:	80 93 d4 07 	sts	0x07D4, r24
    5758:	80 91 d4 07 	lds	r24, 0x07D4
    575c:	83 70       	andi	r24, 0x03	; 3
    575e:	80 93 d4 07 	sts	0x07D4, r24
    5762:	81 e0       	ldi	r24, 0x01	; 1
    5764:	80 93 d6 07 	sts	0x07D6, r24
    5768:	80 91 af 07 	lds	r24, 0x07AF
    576c:	81 30       	cpi	r24, 0x01	; 1
    576e:	c1 f4       	brne	.+48     	; 0x57a0 <STEPPER_process_run_mode+0x1e0>
    5770:	0e 94 e3 2b 	call	0x57c6	; 0x57c6 <STEPPER_process_step_mode>
    5774:	15 c0       	rjmp	.+42     	; 0x57a0 <STEPPER_process_run_mode+0x1e0>
    5776:	90 91 f0 04 	lds	r25, 0x04F0
    577a:	9f 71       	andi	r25, 0x1F	; 31
    577c:	90 93 f0 04 	sts	0x04F0, r25
    5780:	e0 91 d4 07 	lds	r30, 0x07D4
    5784:	f0 e0       	ldi	r31, 0x00	; 0
    5786:	e0 5c       	subi	r30, 0xC0	; 192
    5788:	fb 4f       	sbci	r31, 0xFB	; 251
    578a:	80 81       	ld	r24, Z
    578c:	89 2b       	or	r24, r25
    578e:	80 93 f0 04 	sts	0x04F0, r24
    5792:	82 e0       	ldi	r24, 0x02	; 2
    5794:	80 93 d6 07 	sts	0x07D6, r24
    5798:	10 92 b7 07 	sts	0x07B7, r1
    579c:	10 92 b6 07 	sts	0x07B6, r1
    57a0:	80 91 d7 07 	lds	r24, 0x07D7
    57a4:	88 23       	and	r24, r24
    57a6:	31 f4       	brne	.+12     	; 0x57b4 <STEPPER_process_run_mode+0x1f4>
    57a8:	80 ef       	ldi	r24, 0xF0	; 240
    57aa:	94 e0       	ldi	r25, 0x04	; 4
    57ac:	61 2f       	mov	r22, r17
    57ae:	40 2f       	mov	r20, r16
    57b0:	0e 94 a5 2c 	call	0x594a	; 0x594a <STEPPER_process_pwm>
    57b4:	88 b1       	in	r24, 0x08	; 8
    57b6:	83 70       	andi	r24, 0x03	; 3
    57b8:	90 91 f0 04 	lds	r25, 0x04F0
    57bc:	89 2b       	or	r24, r25
    57be:	88 b9       	out	0x08, r24	; 8
    57c0:	1f 91       	pop	r17
    57c2:	0f 91       	pop	r16
    57c4:	08 95       	ret

000057c6 <STEPPER_process_step_mode>:
    57c6:	88 23       	and	r24, r24
    57c8:	21 f0       	breq	.+8      	; 0x57d2 <STEPPER_process_step_mode+0xc>
    57ca:	81 30       	cpi	r24, 0x01	; 1
    57cc:	09 f0       	breq	.+2      	; 0x57d0 <STEPPER_process_step_mode+0xa>
    57ce:	4e c0       	rjmp	.+156    	; 0x586c <STEPPER_process_step_mode+0xa6>
    57d0:	27 c0       	rjmp	.+78     	; 0x5820 <STEPPER_process_step_mode+0x5a>
    57d2:	80 91 c0 07 	lds	r24, 0x07C0
    57d6:	90 91 c1 07 	lds	r25, 0x07C1
    57da:	89 2b       	or	r24, r25
    57dc:	49 f0       	breq	.+18     	; 0x57f0 <STEPPER_process_step_mode+0x2a>
    57de:	80 91 c0 07 	lds	r24, 0x07C0
    57e2:	90 91 c1 07 	lds	r25, 0x07C1
    57e6:	01 97       	sbiw	r24, 0x01	; 1
    57e8:	90 93 c1 07 	sts	0x07C1, r25
    57ec:	80 93 c0 07 	sts	0x07C0, r24
    57f0:	80 91 e0 07 	lds	r24, 0x07E0
    57f4:	88 23       	and	r24, r24
    57f6:	d1 f5       	brne	.+116    	; 0x586c <STEPPER_process_step_mode+0xa6>
    57f8:	20 91 c0 07 	lds	r18, 0x07C0
    57fc:	30 91 c1 07 	lds	r19, 0x07C1
    5800:	80 91 c4 07 	lds	r24, 0x07C4
    5804:	90 91 c5 07 	lds	r25, 0x07C5
    5808:	28 17       	cp	r18, r24
    580a:	39 07       	cpc	r19, r25
    580c:	79 f5       	brne	.+94     	; 0x586c <STEPPER_process_step_mode+0xa6>
    580e:	80 e0       	ldi	r24, 0x00	; 0
    5810:	60 e0       	ldi	r22, 0x00	; 0
    5812:	70 e0       	ldi	r23, 0x00	; 0
    5814:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <STEPPER_set_speed>
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	80 93 e0 07 	sts	0x07E0, r24
    581e:	08 95       	ret
    5820:	80 91 c2 07 	lds	r24, 0x07C2
    5824:	90 91 c3 07 	lds	r25, 0x07C3
    5828:	89 2b       	or	r24, r25
    582a:	49 f0       	breq	.+18     	; 0x583e <STEPPER_process_step_mode+0x78>
    582c:	80 91 c2 07 	lds	r24, 0x07C2
    5830:	90 91 c3 07 	lds	r25, 0x07C3
    5834:	01 97       	sbiw	r24, 0x01	; 1
    5836:	90 93 c3 07 	sts	0x07C3, r25
    583a:	80 93 c2 07 	sts	0x07C2, r24
    583e:	80 91 e1 07 	lds	r24, 0x07E1
    5842:	88 23       	and	r24, r24
    5844:	99 f4       	brne	.+38     	; 0x586c <STEPPER_process_step_mode+0xa6>
    5846:	20 91 c2 07 	lds	r18, 0x07C2
    584a:	30 91 c3 07 	lds	r19, 0x07C3
    584e:	80 91 c6 07 	lds	r24, 0x07C6
    5852:	90 91 c7 07 	lds	r25, 0x07C7
    5856:	28 17       	cp	r18, r24
    5858:	39 07       	cpc	r19, r25
    585a:	41 f4       	brne	.+16     	; 0x586c <STEPPER_process_step_mode+0xa6>
    585c:	81 e0       	ldi	r24, 0x01	; 1
    585e:	60 e0       	ldi	r22, 0x00	; 0
    5860:	70 e0       	ldi	r23, 0x00	; 0
    5862:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <STEPPER_set_speed>
    5866:	81 e0       	ldi	r24, 0x01	; 1
    5868:	80 93 e1 07 	sts	0x07E1, r24
    586c:	08 95       	ret

0000586e <TMRSRVC_process>:
    586e:	ff 92       	push	r15
    5870:	0f 93       	push	r16
    5872:	1f 93       	push	r17
    5874:	cf 93       	push	r28
    5876:	df 93       	push	r29
    5878:	80 91 1e 08 	lds	r24, 0x081E
    587c:	88 23       	and	r24, r24
    587e:	09 f4       	brne	.+2      	; 0x5882 <TMRSRVC_process+0x14>
    5880:	59 c0       	rjmp	.+178    	; 0x5934 <TMRSRVC_process+0xc6>
    5882:	00 91 1f 08 	lds	r16, 0x081F
    5886:	10 91 20 08 	lds	r17, 0x0820
    588a:	f8 01       	movw	r30, r16
    588c:	c0 81       	ld	r28, Z
    588e:	d1 81       	ldd	r29, Z+1	; 0x01
    5890:	8c 81       	ldd	r24, Y+4	; 0x04
    5892:	9d 81       	ldd	r25, Y+5	; 0x05
    5894:	01 97       	sbiw	r24, 0x01	; 1
    5896:	9d 83       	std	Y+5, r25	; 0x05
    5898:	8c 83       	std	Y+4, r24	; 0x04
    589a:	18 16       	cp	r1, r24
    589c:	19 06       	cpc	r1, r25
    589e:	0c f4       	brge	.+2      	; 0x58a2 <TMRSRVC_process+0x34>
    58a0:	49 c0       	rjmp	.+146    	; 0x5934 <TMRSRVC_process+0xc6>
    58a2:	89 81       	ldd	r24, Y+1	; 0x01
    58a4:	80 ff       	sbrs	r24, 0
    58a6:	05 c0       	rjmp	.+10     	; 0x58b2 <TMRSRVC_process+0x44>
    58a8:	8e 81       	ldd	r24, Y+6	; 0x06
    58aa:	88 23       	and	r24, r24
    58ac:	11 f4       	brne	.+4      	; 0x58b2 <TMRSRVC_process+0x44>
    58ae:	81 e0       	ldi	r24, 0x01	; 1
    58b0:	8e 83       	std	Y+6, r24	; 0x06
    58b2:	89 81       	ldd	r24, Y+1	; 0x01
    58b4:	81 ff       	sbrs	r24, 1
    58b6:	03 c0       	rjmp	.+6      	; 0x58be <TMRSRVC_process+0x50>
    58b8:	ef 81       	ldd	r30, Y+7	; 0x07
    58ba:	f8 85       	ldd	r31, Y+8	; 0x08
    58bc:	09 95       	icall
    58be:	80 91 1e 08 	lds	r24, 0x081E
    58c2:	82 30       	cpi	r24, 0x02	; 2
    58c4:	a8 f0       	brcs	.+42     	; 0x58f0 <TMRSRVC_process+0x82>
    58c6:	f8 01       	movw	r30, r16
    58c8:	82 81       	ldd	r24, Z+2	; 0x02
    58ca:	93 81       	ldd	r25, Z+3	; 0x03
    58cc:	90 93 20 08 	sts	0x0820, r25
    58d0:	80 93 1f 08 	sts	0x081F, r24
    58d4:	13 82       	std	Z+3, r1	; 0x03
    58d6:	12 82       	std	Z+2, r1	; 0x02
    58d8:	e0 91 00 00 	lds	r30, 0x0000
    58dc:	f0 91 01 00 	lds	r31, 0x0001
    58e0:	84 81       	ldd	r24, Z+4	; 0x04
    58e2:	95 81       	ldd	r25, Z+5	; 0x05
    58e4:	18 16       	cp	r1, r24
    58e6:	19 06       	cpc	r1, r25
    58e8:	3c f0       	brlt	.+14     	; 0x58f8 <TMRSRVC_process+0x8a>
    58ea:	ff 24       	eor	r15, r15
    58ec:	f3 94       	inc	r15
    58ee:	05 c0       	rjmp	.+10     	; 0x58fa <TMRSRVC_process+0x8c>
    58f0:	10 92 20 08 	sts	0x0820, r1
    58f4:	10 92 1f 08 	sts	0x081F, r1
    58f8:	ff 24       	eor	r15, r15
    58fa:	80 91 1e 08 	lds	r24, 0x081E
    58fe:	81 50       	subi	r24, 0x01	; 1
    5900:	80 93 1e 08 	sts	0x081E, r24
    5904:	80 91 1e 08 	lds	r24, 0x081E
    5908:	88 23       	and	r24, r24
    590a:	11 f4       	brne	.+4      	; 0x5910 <TMRSRVC_process+0xa2>
    590c:	0e 94 a2 2c 	call	0x5944	; 0x5944 <TMRSRVC_stop>
    5910:	89 81       	ldd	r24, Y+1	; 0x01
    5912:	82 ff       	sbrs	r24, 2
    5914:	08 c0       	rjmp	.+16     	; 0x5926 <TMRSRVC_process+0xb8>
    5916:	8a 81       	ldd	r24, Y+2	; 0x02
    5918:	9b 81       	ldd	r25, Y+3	; 0x03
    591a:	9d 83       	std	Y+5, r25	; 0x05
    591c:	8c 83       	std	Y+4, r24	; 0x04
    591e:	c8 01       	movw	r24, r16
    5920:	0e 94 2e 28 	call	0x505c	; 0x505c <TMRSRVC_insert>
    5924:	08 c0       	rjmp	.+16     	; 0x5936 <TMRSRVC_process+0xc8>
    5926:	c8 01       	movw	r24, r16
    5928:	0e 94 84 35 	call	0x6b08	; 0x6b08 <free>
    592c:	89 81       	ldd	r24, Y+1	; 0x01
    592e:	8f 7e       	andi	r24, 0xEF	; 239
    5930:	89 83       	std	Y+1, r24	; 0x01
    5932:	01 c0       	rjmp	.+2      	; 0x5936 <TMRSRVC_process+0xc8>
    5934:	ff 24       	eor	r15, r15
    5936:	8f 2d       	mov	r24, r15
    5938:	df 91       	pop	r29
    593a:	cf 91       	pop	r28
    593c:	1f 91       	pop	r17
    593e:	0f 91       	pop	r16
    5940:	ff 90       	pop	r15
    5942:	08 95       	ret

00005944 <TMRSRVC_stop>:
    5944:	10 92 ef 04 	sts	0x04EF, r1
    5948:	08 95       	ret

0000594a <STEPPER_process_pwm>:
    594a:	fc 01       	movw	r30, r24
    594c:	80 91 d5 07 	lds	r24, 0x07D5
    5950:	82 30       	cpi	r24, 0x02	; 2
    5952:	69 f4       	brne	.+26     	; 0x596e <STEPPER_process_pwm+0x24>
    5954:	80 91 f4 04 	lds	r24, 0x04F4
    5958:	91 e0       	ldi	r25, 0x01	; 1
    595a:	89 27       	eor	r24, r25
    595c:	80 93 f4 04 	sts	0x04F4, r24
    5960:	88 23       	and	r24, r24
    5962:	09 f0       	breq	.+2      	; 0x5966 <STEPPER_process_pwm+0x1c>
    5964:	3e c0       	rjmp	.+124    	; 0x59e2 <STEPPER_process_pwm+0x98>
    5966:	80 81       	ld	r24, Z
    5968:	83 7e       	andi	r24, 0xE3	; 227
    596a:	80 83       	st	Z, r24
    596c:	3a c0       	rjmp	.+116    	; 0x59e2 <STEPPER_process_pwm+0x98>
    596e:	80 91 b4 07 	lds	r24, 0x07B4
    5972:	90 91 b5 07 	lds	r25, 0x07B5
    5976:	c3 97       	sbiw	r24, 0x33	; 51
    5978:	a4 f5       	brge	.+104    	; 0x59e2 <STEPPER_process_pwm+0x98>
    597a:	66 23       	and	r22, r22
    597c:	d1 f0       	breq	.+52     	; 0x59b2 <STEPPER_process_pwm+0x68>
    597e:	20 91 b4 07 	lds	r18, 0x07B4
    5982:	30 91 b5 07 	lds	r19, 0x07B5
    5986:	80 e6       	ldi	r24, 0x60	; 96
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	bc 01       	movw	r22, r24
    598c:	26 9f       	mul	r18, r22
    598e:	c0 01       	movw	r24, r0
    5990:	27 9f       	mul	r18, r23
    5992:	90 0d       	add	r25, r0
    5994:	36 9f       	mul	r19, r22
    5996:	90 0d       	add	r25, r0
    5998:	11 24       	eor	r1, r1
    599a:	88 0f       	add	r24, r24
    599c:	89 2f       	mov	r24, r25
    599e:	88 1f       	adc	r24, r24
    59a0:	99 0b       	sbc	r25, r25
    59a2:	90 93 c9 07 	sts	0x07C9, r25
    59a6:	80 93 c8 07 	sts	0x07C8, r24
    59aa:	81 e0       	ldi	r24, 0x01	; 1
    59ac:	80 93 f2 04 	sts	0x04F2, r24
    59b0:	18 c0       	rjmp	.+48     	; 0x59e2 <STEPPER_process_pwm+0x98>
    59b2:	80 91 f2 04 	lds	r24, 0x04F2
    59b6:	88 23       	and	r24, r24
    59b8:	a1 f0       	breq	.+40     	; 0x59e2 <STEPPER_process_pwm+0x98>
    59ba:	80 91 c8 07 	lds	r24, 0x07C8
    59be:	90 91 c9 07 	lds	r25, 0x07C9
    59c2:	01 97       	sbiw	r24, 0x01	; 1
    59c4:	90 93 c9 07 	sts	0x07C9, r25
    59c8:	80 93 c8 07 	sts	0x07C8, r24
    59cc:	80 91 c8 07 	lds	r24, 0x07C8
    59d0:	90 91 c9 07 	lds	r25, 0x07C9
    59d4:	89 2b       	or	r24, r25
    59d6:	29 f4       	brne	.+10     	; 0x59e2 <STEPPER_process_pwm+0x98>
    59d8:	80 81       	ld	r24, Z
    59da:	83 7e       	andi	r24, 0xE3	; 227
    59dc:	80 83       	st	Z, r24
    59de:	10 92 f2 04 	sts	0x04F2, r1
    59e2:	80 91 d6 07 	lds	r24, 0x07D6
    59e6:	82 30       	cpi	r24, 0x02	; 2
    59e8:	69 f4       	brne	.+26     	; 0x5a04 <STEPPER_process_pwm+0xba>
    59ea:	80 91 f3 04 	lds	r24, 0x04F3
    59ee:	91 e0       	ldi	r25, 0x01	; 1
    59f0:	89 27       	eor	r24, r25
    59f2:	80 93 f3 04 	sts	0x04F3, r24
    59f6:	88 23       	and	r24, r24
    59f8:	09 f0       	breq	.+2      	; 0x59fc <STEPPER_process_pwm+0xb2>
    59fa:	3e c0       	rjmp	.+124    	; 0x5a78 <STEPPER_process_pwm+0x12e>
    59fc:	80 81       	ld	r24, Z
    59fe:	8f 71       	andi	r24, 0x1F	; 31
    5a00:	80 83       	st	Z, r24
    5a02:	08 95       	ret
    5a04:	80 91 b6 07 	lds	r24, 0x07B6
    5a08:	90 91 b7 07 	lds	r25, 0x07B7
    5a0c:	c3 97       	sbiw	r24, 0x33	; 51
    5a0e:	a4 f5       	brge	.+104    	; 0x5a78 <STEPPER_process_pwm+0x12e>
    5a10:	44 23       	and	r20, r20
    5a12:	d1 f0       	breq	.+52     	; 0x5a48 <STEPPER_process_pwm+0xfe>
    5a14:	20 91 b6 07 	lds	r18, 0x07B6
    5a18:	30 91 b7 07 	lds	r19, 0x07B7
    5a1c:	80 e6       	ldi	r24, 0x60	; 96
    5a1e:	90 e0       	ldi	r25, 0x00	; 0
    5a20:	ac 01       	movw	r20, r24
    5a22:	24 9f       	mul	r18, r20
    5a24:	c0 01       	movw	r24, r0
    5a26:	25 9f       	mul	r18, r21
    5a28:	90 0d       	add	r25, r0
    5a2a:	34 9f       	mul	r19, r20
    5a2c:	90 0d       	add	r25, r0
    5a2e:	11 24       	eor	r1, r1
    5a30:	88 0f       	add	r24, r24
    5a32:	89 2f       	mov	r24, r25
    5a34:	88 1f       	adc	r24, r24
    5a36:	99 0b       	sbc	r25, r25
    5a38:	90 93 cb 07 	sts	0x07CB, r25
    5a3c:	80 93 ca 07 	sts	0x07CA, r24
    5a40:	81 e0       	ldi	r24, 0x01	; 1
    5a42:	80 93 f1 04 	sts	0x04F1, r24
    5a46:	08 95       	ret
    5a48:	80 91 f1 04 	lds	r24, 0x04F1
    5a4c:	88 23       	and	r24, r24
    5a4e:	a1 f0       	breq	.+40     	; 0x5a78 <STEPPER_process_pwm+0x12e>
    5a50:	80 91 ca 07 	lds	r24, 0x07CA
    5a54:	90 91 cb 07 	lds	r25, 0x07CB
    5a58:	01 97       	sbiw	r24, 0x01	; 1
    5a5a:	90 93 cb 07 	sts	0x07CB, r25
    5a5e:	80 93 ca 07 	sts	0x07CA, r24
    5a62:	80 91 ca 07 	lds	r24, 0x07CA
    5a66:	90 91 cb 07 	lds	r25, 0x07CB
    5a6a:	89 2b       	or	r24, r25
    5a6c:	29 f4       	brne	.+10     	; 0x5a78 <STEPPER_process_pwm+0x12e>
    5a6e:	80 81       	ld	r24, Z
    5a70:	8f 71       	andi	r24, 0x1F	; 31
    5a72:	80 83       	st	Z, r24
    5a74:	10 92 f1 04 	sts	0x04F1, r1
    5a78:	08 95       	ret

00005a7a <__subsf3>:
    5a7a:	50 58       	subi	r21, 0x80	; 128

00005a7c <__addsf3>:
    5a7c:	bb 27       	eor	r27, r27
    5a7e:	aa 27       	eor	r26, r26
    5a80:	0e d0       	rcall	.+28     	; 0x5a9e <__addsf3x>
    5a82:	75 c1       	rjmp	.+746    	; 0x5d6e <__fp_round>
    5a84:	66 d1       	rcall	.+716    	; 0x5d52 <__fp_pscA>
    5a86:	30 f0       	brcs	.+12     	; 0x5a94 <__addsf3+0x18>
    5a88:	6b d1       	rcall	.+726    	; 0x5d60 <__fp_pscB>
    5a8a:	20 f0       	brcs	.+8      	; 0x5a94 <__addsf3+0x18>
    5a8c:	31 f4       	brne	.+12     	; 0x5a9a <__addsf3+0x1e>
    5a8e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a90:	11 f4       	brne	.+4      	; 0x5a96 <__addsf3+0x1a>
    5a92:	1e f4       	brtc	.+6      	; 0x5a9a <__addsf3+0x1e>
    5a94:	5b c1       	rjmp	.+694    	; 0x5d4c <__fp_nan>
    5a96:	0e f4       	brtc	.+2      	; 0x5a9a <__addsf3+0x1e>
    5a98:	e0 95       	com	r30
    5a9a:	e7 fb       	bst	r30, 7
    5a9c:	51 c1       	rjmp	.+674    	; 0x5d40 <__fp_inf>

00005a9e <__addsf3x>:
    5a9e:	e9 2f       	mov	r30, r25
    5aa0:	77 d1       	rcall	.+750    	; 0x5d90 <__fp_split3>
    5aa2:	80 f3       	brcs	.-32     	; 0x5a84 <__addsf3+0x8>
    5aa4:	ba 17       	cp	r27, r26
    5aa6:	62 07       	cpc	r22, r18
    5aa8:	73 07       	cpc	r23, r19
    5aaa:	84 07       	cpc	r24, r20
    5aac:	95 07       	cpc	r25, r21
    5aae:	18 f0       	brcs	.+6      	; 0x5ab6 <__addsf3x+0x18>
    5ab0:	71 f4       	brne	.+28     	; 0x5ace <__addsf3x+0x30>
    5ab2:	9e f5       	brtc	.+102    	; 0x5b1a <__addsf3x+0x7c>
    5ab4:	8f c1       	rjmp	.+798    	; 0x5dd4 <__fp_zero>
    5ab6:	0e f4       	brtc	.+2      	; 0x5aba <__addsf3x+0x1c>
    5ab8:	e0 95       	com	r30
    5aba:	0b 2e       	mov	r0, r27
    5abc:	ba 2f       	mov	r27, r26
    5abe:	a0 2d       	mov	r26, r0
    5ac0:	0b 01       	movw	r0, r22
    5ac2:	b9 01       	movw	r22, r18
    5ac4:	90 01       	movw	r18, r0
    5ac6:	0c 01       	movw	r0, r24
    5ac8:	ca 01       	movw	r24, r20
    5aca:	a0 01       	movw	r20, r0
    5acc:	11 24       	eor	r1, r1
    5ace:	ff 27       	eor	r31, r31
    5ad0:	59 1b       	sub	r21, r25
    5ad2:	99 f0       	breq	.+38     	; 0x5afa <__addsf3x+0x5c>
    5ad4:	59 3f       	cpi	r21, 0xF9	; 249
    5ad6:	50 f4       	brcc	.+20     	; 0x5aec <__addsf3x+0x4e>
    5ad8:	50 3e       	cpi	r21, 0xE0	; 224
    5ada:	68 f1       	brcs	.+90     	; 0x5b36 <__addsf3x+0x98>
    5adc:	1a 16       	cp	r1, r26
    5ade:	f0 40       	sbci	r31, 0x00	; 0
    5ae0:	a2 2f       	mov	r26, r18
    5ae2:	23 2f       	mov	r18, r19
    5ae4:	34 2f       	mov	r19, r20
    5ae6:	44 27       	eor	r20, r20
    5ae8:	58 5f       	subi	r21, 0xF8	; 248
    5aea:	f3 cf       	rjmp	.-26     	; 0x5ad2 <__addsf3x+0x34>
    5aec:	46 95       	lsr	r20
    5aee:	37 95       	ror	r19
    5af0:	27 95       	ror	r18
    5af2:	a7 95       	ror	r26
    5af4:	f0 40       	sbci	r31, 0x00	; 0
    5af6:	53 95       	inc	r21
    5af8:	c9 f7       	brne	.-14     	; 0x5aec <__addsf3x+0x4e>
    5afa:	7e f4       	brtc	.+30     	; 0x5b1a <__addsf3x+0x7c>
    5afc:	1f 16       	cp	r1, r31
    5afe:	ba 0b       	sbc	r27, r26
    5b00:	62 0b       	sbc	r22, r18
    5b02:	73 0b       	sbc	r23, r19
    5b04:	84 0b       	sbc	r24, r20
    5b06:	ba f0       	brmi	.+46     	; 0x5b36 <__addsf3x+0x98>
    5b08:	91 50       	subi	r25, 0x01	; 1
    5b0a:	a1 f0       	breq	.+40     	; 0x5b34 <__addsf3x+0x96>
    5b0c:	ff 0f       	add	r31, r31
    5b0e:	bb 1f       	adc	r27, r27
    5b10:	66 1f       	adc	r22, r22
    5b12:	77 1f       	adc	r23, r23
    5b14:	88 1f       	adc	r24, r24
    5b16:	c2 f7       	brpl	.-16     	; 0x5b08 <__addsf3x+0x6a>
    5b18:	0e c0       	rjmp	.+28     	; 0x5b36 <__addsf3x+0x98>
    5b1a:	ba 0f       	add	r27, r26
    5b1c:	62 1f       	adc	r22, r18
    5b1e:	73 1f       	adc	r23, r19
    5b20:	84 1f       	adc	r24, r20
    5b22:	48 f4       	brcc	.+18     	; 0x5b36 <__addsf3x+0x98>
    5b24:	87 95       	ror	r24
    5b26:	77 95       	ror	r23
    5b28:	67 95       	ror	r22
    5b2a:	b7 95       	ror	r27
    5b2c:	f7 95       	ror	r31
    5b2e:	9e 3f       	cpi	r25, 0xFE	; 254
    5b30:	08 f0       	brcs	.+2      	; 0x5b34 <__addsf3x+0x96>
    5b32:	b3 cf       	rjmp	.-154    	; 0x5a9a <__addsf3+0x1e>
    5b34:	93 95       	inc	r25
    5b36:	88 0f       	add	r24, r24
    5b38:	08 f0       	brcs	.+2      	; 0x5b3c <__addsf3x+0x9e>
    5b3a:	99 27       	eor	r25, r25
    5b3c:	ee 0f       	add	r30, r30
    5b3e:	97 95       	ror	r25
    5b40:	87 95       	ror	r24
    5b42:	08 95       	ret

00005b44 <__cmpsf2>:
    5b44:	d9 d0       	rcall	.+434    	; 0x5cf8 <__fp_cmp>
    5b46:	08 f4       	brcc	.+2      	; 0x5b4a <__cmpsf2+0x6>
    5b48:	81 e0       	ldi	r24, 0x01	; 1
    5b4a:	08 95       	ret

00005b4c <__divsf3>:
    5b4c:	0c d0       	rcall	.+24     	; 0x5b66 <__divsf3x>
    5b4e:	0f c1       	rjmp	.+542    	; 0x5d6e <__fp_round>
    5b50:	07 d1       	rcall	.+526    	; 0x5d60 <__fp_pscB>
    5b52:	40 f0       	brcs	.+16     	; 0x5b64 <__divsf3+0x18>
    5b54:	fe d0       	rcall	.+508    	; 0x5d52 <__fp_pscA>
    5b56:	30 f0       	brcs	.+12     	; 0x5b64 <__divsf3+0x18>
    5b58:	21 f4       	brne	.+8      	; 0x5b62 <__divsf3+0x16>
    5b5a:	5f 3f       	cpi	r21, 0xFF	; 255
    5b5c:	19 f0       	breq	.+6      	; 0x5b64 <__divsf3+0x18>
    5b5e:	f0 c0       	rjmp	.+480    	; 0x5d40 <__fp_inf>
    5b60:	51 11       	cpse	r21, r1
    5b62:	39 c1       	rjmp	.+626    	; 0x5dd6 <__fp_szero>
    5b64:	f3 c0       	rjmp	.+486    	; 0x5d4c <__fp_nan>

00005b66 <__divsf3x>:
    5b66:	14 d1       	rcall	.+552    	; 0x5d90 <__fp_split3>
    5b68:	98 f3       	brcs	.-26     	; 0x5b50 <__divsf3+0x4>

00005b6a <__divsf3_pse>:
    5b6a:	99 23       	and	r25, r25
    5b6c:	c9 f3       	breq	.-14     	; 0x5b60 <__divsf3+0x14>
    5b6e:	55 23       	and	r21, r21
    5b70:	b1 f3       	breq	.-20     	; 0x5b5e <__divsf3+0x12>
    5b72:	95 1b       	sub	r25, r21
    5b74:	55 0b       	sbc	r21, r21
    5b76:	bb 27       	eor	r27, r27
    5b78:	aa 27       	eor	r26, r26
    5b7a:	62 17       	cp	r22, r18
    5b7c:	73 07       	cpc	r23, r19
    5b7e:	84 07       	cpc	r24, r20
    5b80:	38 f0       	brcs	.+14     	; 0x5b90 <__divsf3_pse+0x26>
    5b82:	9f 5f       	subi	r25, 0xFF	; 255
    5b84:	5f 4f       	sbci	r21, 0xFF	; 255
    5b86:	22 0f       	add	r18, r18
    5b88:	33 1f       	adc	r19, r19
    5b8a:	44 1f       	adc	r20, r20
    5b8c:	aa 1f       	adc	r26, r26
    5b8e:	a9 f3       	breq	.-22     	; 0x5b7a <__divsf3_pse+0x10>
    5b90:	33 d0       	rcall	.+102    	; 0x5bf8 <__divsf3_pse+0x8e>
    5b92:	0e 2e       	mov	r0, r30
    5b94:	3a f0       	brmi	.+14     	; 0x5ba4 <__divsf3_pse+0x3a>
    5b96:	e0 e8       	ldi	r30, 0x80	; 128
    5b98:	30 d0       	rcall	.+96     	; 0x5bfa <__divsf3_pse+0x90>
    5b9a:	91 50       	subi	r25, 0x01	; 1
    5b9c:	50 40       	sbci	r21, 0x00	; 0
    5b9e:	e6 95       	lsr	r30
    5ba0:	00 1c       	adc	r0, r0
    5ba2:	ca f7       	brpl	.-14     	; 0x5b96 <__divsf3_pse+0x2c>
    5ba4:	29 d0       	rcall	.+82     	; 0x5bf8 <__divsf3_pse+0x8e>
    5ba6:	fe 2f       	mov	r31, r30
    5ba8:	27 d0       	rcall	.+78     	; 0x5bf8 <__divsf3_pse+0x8e>
    5baa:	66 0f       	add	r22, r22
    5bac:	77 1f       	adc	r23, r23
    5bae:	88 1f       	adc	r24, r24
    5bb0:	bb 1f       	adc	r27, r27
    5bb2:	26 17       	cp	r18, r22
    5bb4:	37 07       	cpc	r19, r23
    5bb6:	48 07       	cpc	r20, r24
    5bb8:	ab 07       	cpc	r26, r27
    5bba:	b0 e8       	ldi	r27, 0x80	; 128
    5bbc:	09 f0       	breq	.+2      	; 0x5bc0 <__divsf3_pse+0x56>
    5bbe:	bb 0b       	sbc	r27, r27
    5bc0:	80 2d       	mov	r24, r0
    5bc2:	bf 01       	movw	r22, r30
    5bc4:	ff 27       	eor	r31, r31
    5bc6:	93 58       	subi	r25, 0x83	; 131
    5bc8:	5f 4f       	sbci	r21, 0xFF	; 255
    5bca:	2a f0       	brmi	.+10     	; 0x5bd6 <__divsf3_pse+0x6c>
    5bcc:	9e 3f       	cpi	r25, 0xFE	; 254
    5bce:	51 05       	cpc	r21, r1
    5bd0:	68 f0       	brcs	.+26     	; 0x5bec <__divsf3_pse+0x82>
    5bd2:	b6 c0       	rjmp	.+364    	; 0x5d40 <__fp_inf>
    5bd4:	00 c1       	rjmp	.+512    	; 0x5dd6 <__fp_szero>
    5bd6:	5f 3f       	cpi	r21, 0xFF	; 255
    5bd8:	ec f3       	brlt	.-6      	; 0x5bd4 <__divsf3_pse+0x6a>
    5bda:	98 3e       	cpi	r25, 0xE8	; 232
    5bdc:	dc f3       	brlt	.-10     	; 0x5bd4 <__divsf3_pse+0x6a>
    5bde:	86 95       	lsr	r24
    5be0:	77 95       	ror	r23
    5be2:	67 95       	ror	r22
    5be4:	b7 95       	ror	r27
    5be6:	f7 95       	ror	r31
    5be8:	9f 5f       	subi	r25, 0xFF	; 255
    5bea:	c9 f7       	brne	.-14     	; 0x5bde <__divsf3_pse+0x74>
    5bec:	88 0f       	add	r24, r24
    5bee:	91 1d       	adc	r25, r1
    5bf0:	96 95       	lsr	r25
    5bf2:	87 95       	ror	r24
    5bf4:	97 f9       	bld	r25, 7
    5bf6:	08 95       	ret
    5bf8:	e1 e0       	ldi	r30, 0x01	; 1
    5bfa:	66 0f       	add	r22, r22
    5bfc:	77 1f       	adc	r23, r23
    5bfe:	88 1f       	adc	r24, r24
    5c00:	bb 1f       	adc	r27, r27
    5c02:	62 17       	cp	r22, r18
    5c04:	73 07       	cpc	r23, r19
    5c06:	84 07       	cpc	r24, r20
    5c08:	ba 07       	cpc	r27, r26
    5c0a:	20 f0       	brcs	.+8      	; 0x5c14 <__divsf3_pse+0xaa>
    5c0c:	62 1b       	sub	r22, r18
    5c0e:	73 0b       	sbc	r23, r19
    5c10:	84 0b       	sbc	r24, r20
    5c12:	ba 0b       	sbc	r27, r26
    5c14:	ee 1f       	adc	r30, r30
    5c16:	88 f7       	brcc	.-30     	; 0x5bfa <__divsf3_pse+0x90>
    5c18:	e0 95       	com	r30
    5c1a:	08 95       	ret

00005c1c <__fixsfsi>:
    5c1c:	04 d0       	rcall	.+8      	; 0x5c26 <__fixunssfsi>
    5c1e:	68 94       	set
    5c20:	b1 11       	cpse	r27, r1
    5c22:	d9 c0       	rjmp	.+434    	; 0x5dd6 <__fp_szero>
    5c24:	08 95       	ret

00005c26 <__fixunssfsi>:
    5c26:	bc d0       	rcall	.+376    	; 0x5da0 <__fp_splitA>
    5c28:	88 f0       	brcs	.+34     	; 0x5c4c <__fixunssfsi+0x26>
    5c2a:	9f 57       	subi	r25, 0x7F	; 127
    5c2c:	90 f0       	brcs	.+36     	; 0x5c52 <__fixunssfsi+0x2c>
    5c2e:	b9 2f       	mov	r27, r25
    5c30:	99 27       	eor	r25, r25
    5c32:	b7 51       	subi	r27, 0x17	; 23
    5c34:	a0 f0       	brcs	.+40     	; 0x5c5e <__fixunssfsi+0x38>
    5c36:	d1 f0       	breq	.+52     	; 0x5c6c <__fixunssfsi+0x46>
    5c38:	66 0f       	add	r22, r22
    5c3a:	77 1f       	adc	r23, r23
    5c3c:	88 1f       	adc	r24, r24
    5c3e:	99 1f       	adc	r25, r25
    5c40:	1a f0       	brmi	.+6      	; 0x5c48 <__fixunssfsi+0x22>
    5c42:	ba 95       	dec	r27
    5c44:	c9 f7       	brne	.-14     	; 0x5c38 <__fixunssfsi+0x12>
    5c46:	12 c0       	rjmp	.+36     	; 0x5c6c <__fixunssfsi+0x46>
    5c48:	b1 30       	cpi	r27, 0x01	; 1
    5c4a:	81 f0       	breq	.+32     	; 0x5c6c <__fixunssfsi+0x46>
    5c4c:	c3 d0       	rcall	.+390    	; 0x5dd4 <__fp_zero>
    5c4e:	b1 e0       	ldi	r27, 0x01	; 1
    5c50:	08 95       	ret
    5c52:	c0 c0       	rjmp	.+384    	; 0x5dd4 <__fp_zero>
    5c54:	67 2f       	mov	r22, r23
    5c56:	78 2f       	mov	r23, r24
    5c58:	88 27       	eor	r24, r24
    5c5a:	b8 5f       	subi	r27, 0xF8	; 248
    5c5c:	39 f0       	breq	.+14     	; 0x5c6c <__fixunssfsi+0x46>
    5c5e:	b9 3f       	cpi	r27, 0xF9	; 249
    5c60:	cc f3       	brlt	.-14     	; 0x5c54 <__fixunssfsi+0x2e>
    5c62:	86 95       	lsr	r24
    5c64:	77 95       	ror	r23
    5c66:	67 95       	ror	r22
    5c68:	b3 95       	inc	r27
    5c6a:	d9 f7       	brne	.-10     	; 0x5c62 <__fixunssfsi+0x3c>
    5c6c:	3e f4       	brtc	.+14     	; 0x5c7c <__fixunssfsi+0x56>
    5c6e:	90 95       	com	r25
    5c70:	80 95       	com	r24
    5c72:	70 95       	com	r23
    5c74:	61 95       	neg	r22
    5c76:	7f 4f       	sbci	r23, 0xFF	; 255
    5c78:	8f 4f       	sbci	r24, 0xFF	; 255
    5c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c7c:	08 95       	ret

00005c7e <__floatunsisf>:
    5c7e:	e8 94       	clt
    5c80:	09 c0       	rjmp	.+18     	; 0x5c94 <__floatsisf+0x12>

00005c82 <__floatsisf>:
    5c82:	97 fb       	bst	r25, 7
    5c84:	3e f4       	brtc	.+14     	; 0x5c94 <__floatsisf+0x12>
    5c86:	90 95       	com	r25
    5c88:	80 95       	com	r24
    5c8a:	70 95       	com	r23
    5c8c:	61 95       	neg	r22
    5c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c90:	8f 4f       	sbci	r24, 0xFF	; 255
    5c92:	9f 4f       	sbci	r25, 0xFF	; 255
    5c94:	99 23       	and	r25, r25
    5c96:	a9 f0       	breq	.+42     	; 0x5cc2 <__floatsisf+0x40>
    5c98:	f9 2f       	mov	r31, r25
    5c9a:	96 e9       	ldi	r25, 0x96	; 150
    5c9c:	bb 27       	eor	r27, r27
    5c9e:	93 95       	inc	r25
    5ca0:	f6 95       	lsr	r31
    5ca2:	87 95       	ror	r24
    5ca4:	77 95       	ror	r23
    5ca6:	67 95       	ror	r22
    5ca8:	b7 95       	ror	r27
    5caa:	f1 11       	cpse	r31, r1
    5cac:	f8 cf       	rjmp	.-16     	; 0x5c9e <__floatsisf+0x1c>
    5cae:	fa f4       	brpl	.+62     	; 0x5cee <__floatsisf+0x6c>
    5cb0:	bb 0f       	add	r27, r27
    5cb2:	11 f4       	brne	.+4      	; 0x5cb8 <__floatsisf+0x36>
    5cb4:	60 ff       	sbrs	r22, 0
    5cb6:	1b c0       	rjmp	.+54     	; 0x5cee <__floatsisf+0x6c>
    5cb8:	6f 5f       	subi	r22, 0xFF	; 255
    5cba:	7f 4f       	sbci	r23, 0xFF	; 255
    5cbc:	8f 4f       	sbci	r24, 0xFF	; 255
    5cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc0:	16 c0       	rjmp	.+44     	; 0x5cee <__floatsisf+0x6c>
    5cc2:	88 23       	and	r24, r24
    5cc4:	11 f0       	breq	.+4      	; 0x5cca <__floatsisf+0x48>
    5cc6:	96 e9       	ldi	r25, 0x96	; 150
    5cc8:	11 c0       	rjmp	.+34     	; 0x5cec <__floatsisf+0x6a>
    5cca:	77 23       	and	r23, r23
    5ccc:	21 f0       	breq	.+8      	; 0x5cd6 <__floatsisf+0x54>
    5cce:	9e e8       	ldi	r25, 0x8E	; 142
    5cd0:	87 2f       	mov	r24, r23
    5cd2:	76 2f       	mov	r23, r22
    5cd4:	05 c0       	rjmp	.+10     	; 0x5ce0 <__floatsisf+0x5e>
    5cd6:	66 23       	and	r22, r22
    5cd8:	71 f0       	breq	.+28     	; 0x5cf6 <__floatsisf+0x74>
    5cda:	96 e8       	ldi	r25, 0x86	; 134
    5cdc:	86 2f       	mov	r24, r22
    5cde:	70 e0       	ldi	r23, 0x00	; 0
    5ce0:	60 e0       	ldi	r22, 0x00	; 0
    5ce2:	2a f0       	brmi	.+10     	; 0x5cee <__floatsisf+0x6c>
    5ce4:	9a 95       	dec	r25
    5ce6:	66 0f       	add	r22, r22
    5ce8:	77 1f       	adc	r23, r23
    5cea:	88 1f       	adc	r24, r24
    5cec:	da f7       	brpl	.-10     	; 0x5ce4 <__floatsisf+0x62>
    5cee:	88 0f       	add	r24, r24
    5cf0:	96 95       	lsr	r25
    5cf2:	87 95       	ror	r24
    5cf4:	97 f9       	bld	r25, 7
    5cf6:	08 95       	ret

00005cf8 <__fp_cmp>:
    5cf8:	99 0f       	add	r25, r25
    5cfa:	00 08       	sbc	r0, r0
    5cfc:	55 0f       	add	r21, r21
    5cfe:	aa 0b       	sbc	r26, r26
    5d00:	e0 e8       	ldi	r30, 0x80	; 128
    5d02:	fe ef       	ldi	r31, 0xFE	; 254
    5d04:	16 16       	cp	r1, r22
    5d06:	17 06       	cpc	r1, r23
    5d08:	e8 07       	cpc	r30, r24
    5d0a:	f9 07       	cpc	r31, r25
    5d0c:	c0 f0       	brcs	.+48     	; 0x5d3e <__fp_cmp+0x46>
    5d0e:	12 16       	cp	r1, r18
    5d10:	13 06       	cpc	r1, r19
    5d12:	e4 07       	cpc	r30, r20
    5d14:	f5 07       	cpc	r31, r21
    5d16:	98 f0       	brcs	.+38     	; 0x5d3e <__fp_cmp+0x46>
    5d18:	62 1b       	sub	r22, r18
    5d1a:	73 0b       	sbc	r23, r19
    5d1c:	84 0b       	sbc	r24, r20
    5d1e:	95 0b       	sbc	r25, r21
    5d20:	39 f4       	brne	.+14     	; 0x5d30 <__fp_cmp+0x38>
    5d22:	0a 26       	eor	r0, r26
    5d24:	61 f0       	breq	.+24     	; 0x5d3e <__fp_cmp+0x46>
    5d26:	23 2b       	or	r18, r19
    5d28:	24 2b       	or	r18, r20
    5d2a:	25 2b       	or	r18, r21
    5d2c:	21 f4       	brne	.+8      	; 0x5d36 <__fp_cmp+0x3e>
    5d2e:	08 95       	ret
    5d30:	0a 26       	eor	r0, r26
    5d32:	09 f4       	brne	.+2      	; 0x5d36 <__fp_cmp+0x3e>
    5d34:	a1 40       	sbci	r26, 0x01	; 1
    5d36:	a6 95       	lsr	r26
    5d38:	8f ef       	ldi	r24, 0xFF	; 255
    5d3a:	81 1d       	adc	r24, r1
    5d3c:	81 1d       	adc	r24, r1
    5d3e:	08 95       	ret

00005d40 <__fp_inf>:
    5d40:	97 f9       	bld	r25, 7
    5d42:	9f 67       	ori	r25, 0x7F	; 127
    5d44:	80 e8       	ldi	r24, 0x80	; 128
    5d46:	70 e0       	ldi	r23, 0x00	; 0
    5d48:	60 e0       	ldi	r22, 0x00	; 0
    5d4a:	08 95       	ret

00005d4c <__fp_nan>:
    5d4c:	9f ef       	ldi	r25, 0xFF	; 255
    5d4e:	80 ec       	ldi	r24, 0xC0	; 192
    5d50:	08 95       	ret

00005d52 <__fp_pscA>:
    5d52:	00 24       	eor	r0, r0
    5d54:	0a 94       	dec	r0
    5d56:	16 16       	cp	r1, r22
    5d58:	17 06       	cpc	r1, r23
    5d5a:	18 06       	cpc	r1, r24
    5d5c:	09 06       	cpc	r0, r25
    5d5e:	08 95       	ret

00005d60 <__fp_pscB>:
    5d60:	00 24       	eor	r0, r0
    5d62:	0a 94       	dec	r0
    5d64:	12 16       	cp	r1, r18
    5d66:	13 06       	cpc	r1, r19
    5d68:	14 06       	cpc	r1, r20
    5d6a:	05 06       	cpc	r0, r21
    5d6c:	08 95       	ret

00005d6e <__fp_round>:
    5d6e:	09 2e       	mov	r0, r25
    5d70:	03 94       	inc	r0
    5d72:	00 0c       	add	r0, r0
    5d74:	11 f4       	brne	.+4      	; 0x5d7a <__fp_round+0xc>
    5d76:	88 23       	and	r24, r24
    5d78:	52 f0       	brmi	.+20     	; 0x5d8e <__fp_round+0x20>
    5d7a:	bb 0f       	add	r27, r27
    5d7c:	40 f4       	brcc	.+16     	; 0x5d8e <__fp_round+0x20>
    5d7e:	bf 2b       	or	r27, r31
    5d80:	11 f4       	brne	.+4      	; 0x5d86 <__fp_round+0x18>
    5d82:	60 ff       	sbrs	r22, 0
    5d84:	04 c0       	rjmp	.+8      	; 0x5d8e <__fp_round+0x20>
    5d86:	6f 5f       	subi	r22, 0xFF	; 255
    5d88:	7f 4f       	sbci	r23, 0xFF	; 255
    5d8a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d8c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d8e:	08 95       	ret

00005d90 <__fp_split3>:
    5d90:	57 fd       	sbrc	r21, 7
    5d92:	90 58       	subi	r25, 0x80	; 128
    5d94:	44 0f       	add	r20, r20
    5d96:	55 1f       	adc	r21, r21
    5d98:	59 f0       	breq	.+22     	; 0x5db0 <__fp_splitA+0x10>
    5d9a:	5f 3f       	cpi	r21, 0xFF	; 255
    5d9c:	71 f0       	breq	.+28     	; 0x5dba <__fp_splitA+0x1a>
    5d9e:	47 95       	ror	r20

00005da0 <__fp_splitA>:
    5da0:	88 0f       	add	r24, r24
    5da2:	97 fb       	bst	r25, 7
    5da4:	99 1f       	adc	r25, r25
    5da6:	61 f0       	breq	.+24     	; 0x5dc0 <__fp_splitA+0x20>
    5da8:	9f 3f       	cpi	r25, 0xFF	; 255
    5daa:	79 f0       	breq	.+30     	; 0x5dca <__fp_splitA+0x2a>
    5dac:	87 95       	ror	r24
    5dae:	08 95       	ret
    5db0:	12 16       	cp	r1, r18
    5db2:	13 06       	cpc	r1, r19
    5db4:	14 06       	cpc	r1, r20
    5db6:	55 1f       	adc	r21, r21
    5db8:	f2 cf       	rjmp	.-28     	; 0x5d9e <__fp_split3+0xe>
    5dba:	46 95       	lsr	r20
    5dbc:	f1 df       	rcall	.-30     	; 0x5da0 <__fp_splitA>
    5dbe:	08 c0       	rjmp	.+16     	; 0x5dd0 <__fp_splitA+0x30>
    5dc0:	16 16       	cp	r1, r22
    5dc2:	17 06       	cpc	r1, r23
    5dc4:	18 06       	cpc	r1, r24
    5dc6:	99 1f       	adc	r25, r25
    5dc8:	f1 cf       	rjmp	.-30     	; 0x5dac <__fp_splitA+0xc>
    5dca:	86 95       	lsr	r24
    5dcc:	71 05       	cpc	r23, r1
    5dce:	61 05       	cpc	r22, r1
    5dd0:	08 94       	sec
    5dd2:	08 95       	ret

00005dd4 <__fp_zero>:
    5dd4:	e8 94       	clt

00005dd6 <__fp_szero>:
    5dd6:	bb 27       	eor	r27, r27
    5dd8:	66 27       	eor	r22, r22
    5dda:	77 27       	eor	r23, r23
    5ddc:	cb 01       	movw	r24, r22
    5dde:	97 f9       	bld	r25, 7
    5de0:	08 95       	ret

00005de2 <__gesf2>:
    5de2:	8a df       	rcall	.-236    	; 0x5cf8 <__fp_cmp>
    5de4:	08 f4       	brcc	.+2      	; 0x5de8 <__gesf2+0x6>
    5de6:	8f ef       	ldi	r24, 0xFF	; 255
    5de8:	08 95       	ret

00005dea <lrint>:
    5dea:	da df       	rcall	.-76     	; 0x5da0 <__fp_splitA>
    5dec:	a8 f1       	brcs	.+106    	; 0x5e58 <lrint+0x6e>
    5dee:	9e 57       	subi	r25, 0x7E	; 126
    5df0:	a8 f1       	brcs	.+106    	; 0x5e5c <lrint+0x72>
    5df2:	98 51       	subi	r25, 0x18	; 24
    5df4:	60 f0       	brcs	.+24     	; 0x5e0e <lrint+0x24>
    5df6:	39 f1       	breq	.+78     	; 0x5e46 <lrint+0x5c>
    5df8:	98 30       	cpi	r25, 0x08	; 8
    5dfa:	70 f5       	brcc	.+92     	; 0x5e58 <lrint+0x6e>
    5dfc:	09 2e       	mov	r0, r25
    5dfe:	99 27       	eor	r25, r25
    5e00:	66 0f       	add	r22, r22
    5e02:	77 1f       	adc	r23, r23
    5e04:	88 1f       	adc	r24, r24
    5e06:	99 1f       	adc	r25, r25
    5e08:	0a 94       	dec	r0
    5e0a:	d1 f7       	brne	.-12     	; 0x5e00 <lrint+0x16>
    5e0c:	1c c0       	rjmp	.+56     	; 0x5e46 <lrint+0x5c>
    5e0e:	bb 27       	eor	r27, r27
    5e10:	99 3f       	cpi	r25, 0xF9	; 249
    5e12:	4c f4       	brge	.+18     	; 0x5e26 <lrint+0x3c>
    5e14:	b1 11       	cpse	r27, r1
    5e16:	b1 e0       	ldi	r27, 0x01	; 1
    5e18:	b6 2b       	or	r27, r22
    5e1a:	67 2f       	mov	r22, r23
    5e1c:	78 2f       	mov	r23, r24
    5e1e:	88 27       	eor	r24, r24
    5e20:	98 5f       	subi	r25, 0xF8	; 248
    5e22:	b1 f7       	brne	.-20     	; 0x5e10 <lrint+0x26>
    5e24:	08 c0       	rjmp	.+16     	; 0x5e36 <lrint+0x4c>
    5e26:	86 95       	lsr	r24
    5e28:	77 95       	ror	r23
    5e2a:	67 95       	ror	r22
    5e2c:	b7 95       	ror	r27
    5e2e:	08 f4       	brcc	.+2      	; 0x5e32 <lrint+0x48>
    5e30:	b1 60       	ori	r27, 0x01	; 1
    5e32:	93 95       	inc	r25
    5e34:	c1 f7       	brne	.-16     	; 0x5e26 <lrint+0x3c>
    5e36:	bb 0f       	add	r27, r27
    5e38:	30 f4       	brcc	.+12     	; 0x5e46 <lrint+0x5c>
    5e3a:	11 f4       	brne	.+4      	; 0x5e40 <lrint+0x56>
    5e3c:	60 ff       	sbrs	r22, 0
    5e3e:	03 c0       	rjmp	.+6      	; 0x5e46 <lrint+0x5c>
    5e40:	6f 5f       	subi	r22, 0xFF	; 255
    5e42:	7f 4f       	sbci	r23, 0xFF	; 255
    5e44:	8f 4f       	sbci	r24, 0xFF	; 255
    5e46:	3e f4       	brtc	.+14     	; 0x5e56 <lrint+0x6c>
    5e48:	90 95       	com	r25
    5e4a:	80 95       	com	r24
    5e4c:	70 95       	com	r23
    5e4e:	61 95       	neg	r22
    5e50:	7f 4f       	sbci	r23, 0xFF	; 255
    5e52:	8f 4f       	sbci	r24, 0xFF	; 255
    5e54:	9f 4f       	sbci	r25, 0xFF	; 255
    5e56:	08 95       	ret
    5e58:	68 94       	set
    5e5a:	bd cf       	rjmp	.-134    	; 0x5dd6 <__fp_szero>
    5e5c:	bb cf       	rjmp	.-138    	; 0x5dd4 <__fp_zero>

00005e5e <__mulsf3>:
    5e5e:	0b d0       	rcall	.+22     	; 0x5e76 <__mulsf3x>
    5e60:	86 cf       	rjmp	.-244    	; 0x5d6e <__fp_round>
    5e62:	77 df       	rcall	.-274    	; 0x5d52 <__fp_pscA>
    5e64:	28 f0       	brcs	.+10     	; 0x5e70 <__mulsf3+0x12>
    5e66:	7c df       	rcall	.-264    	; 0x5d60 <__fp_pscB>
    5e68:	18 f0       	brcs	.+6      	; 0x5e70 <__mulsf3+0x12>
    5e6a:	95 23       	and	r25, r21
    5e6c:	09 f0       	breq	.+2      	; 0x5e70 <__mulsf3+0x12>
    5e6e:	68 cf       	rjmp	.-304    	; 0x5d40 <__fp_inf>
    5e70:	6d cf       	rjmp	.-294    	; 0x5d4c <__fp_nan>
    5e72:	11 24       	eor	r1, r1
    5e74:	b0 cf       	rjmp	.-160    	; 0x5dd6 <__fp_szero>

00005e76 <__mulsf3x>:
    5e76:	8c df       	rcall	.-232    	; 0x5d90 <__fp_split3>
    5e78:	a0 f3       	brcs	.-24     	; 0x5e62 <__mulsf3+0x4>

00005e7a <__mulsf3_pse>:
    5e7a:	95 9f       	mul	r25, r21
    5e7c:	d1 f3       	breq	.-12     	; 0x5e72 <__mulsf3+0x14>
    5e7e:	95 0f       	add	r25, r21
    5e80:	50 e0       	ldi	r21, 0x00	; 0
    5e82:	55 1f       	adc	r21, r21
    5e84:	62 9f       	mul	r22, r18
    5e86:	f0 01       	movw	r30, r0
    5e88:	72 9f       	mul	r23, r18
    5e8a:	bb 27       	eor	r27, r27
    5e8c:	f0 0d       	add	r31, r0
    5e8e:	b1 1d       	adc	r27, r1
    5e90:	63 9f       	mul	r22, r19
    5e92:	aa 27       	eor	r26, r26
    5e94:	f0 0d       	add	r31, r0
    5e96:	b1 1d       	adc	r27, r1
    5e98:	aa 1f       	adc	r26, r26
    5e9a:	64 9f       	mul	r22, r20
    5e9c:	66 27       	eor	r22, r22
    5e9e:	b0 0d       	add	r27, r0
    5ea0:	a1 1d       	adc	r26, r1
    5ea2:	66 1f       	adc	r22, r22
    5ea4:	82 9f       	mul	r24, r18
    5ea6:	22 27       	eor	r18, r18
    5ea8:	b0 0d       	add	r27, r0
    5eaa:	a1 1d       	adc	r26, r1
    5eac:	62 1f       	adc	r22, r18
    5eae:	73 9f       	mul	r23, r19
    5eb0:	b0 0d       	add	r27, r0
    5eb2:	a1 1d       	adc	r26, r1
    5eb4:	62 1f       	adc	r22, r18
    5eb6:	83 9f       	mul	r24, r19
    5eb8:	a0 0d       	add	r26, r0
    5eba:	61 1d       	adc	r22, r1
    5ebc:	22 1f       	adc	r18, r18
    5ebe:	74 9f       	mul	r23, r20
    5ec0:	33 27       	eor	r19, r19
    5ec2:	a0 0d       	add	r26, r0
    5ec4:	61 1d       	adc	r22, r1
    5ec6:	23 1f       	adc	r18, r19
    5ec8:	84 9f       	mul	r24, r20
    5eca:	60 0d       	add	r22, r0
    5ecc:	21 1d       	adc	r18, r1
    5ece:	82 2f       	mov	r24, r18
    5ed0:	76 2f       	mov	r23, r22
    5ed2:	6a 2f       	mov	r22, r26
    5ed4:	11 24       	eor	r1, r1
    5ed6:	9f 57       	subi	r25, 0x7F	; 127
    5ed8:	50 40       	sbci	r21, 0x00	; 0
    5eda:	8a f0       	brmi	.+34     	; 0x5efe <__mulsf3_pse+0x84>
    5edc:	e1 f0       	breq	.+56     	; 0x5f16 <__mulsf3_pse+0x9c>
    5ede:	88 23       	and	r24, r24
    5ee0:	4a f0       	brmi	.+18     	; 0x5ef4 <__mulsf3_pse+0x7a>
    5ee2:	ee 0f       	add	r30, r30
    5ee4:	ff 1f       	adc	r31, r31
    5ee6:	bb 1f       	adc	r27, r27
    5ee8:	66 1f       	adc	r22, r22
    5eea:	77 1f       	adc	r23, r23
    5eec:	88 1f       	adc	r24, r24
    5eee:	91 50       	subi	r25, 0x01	; 1
    5ef0:	50 40       	sbci	r21, 0x00	; 0
    5ef2:	a9 f7       	brne	.-22     	; 0x5ede <__mulsf3_pse+0x64>
    5ef4:	9e 3f       	cpi	r25, 0xFE	; 254
    5ef6:	51 05       	cpc	r21, r1
    5ef8:	70 f0       	brcs	.+28     	; 0x5f16 <__mulsf3_pse+0x9c>
    5efa:	22 cf       	rjmp	.-444    	; 0x5d40 <__fp_inf>
    5efc:	6c cf       	rjmp	.-296    	; 0x5dd6 <__fp_szero>
    5efe:	5f 3f       	cpi	r21, 0xFF	; 255
    5f00:	ec f3       	brlt	.-6      	; 0x5efc <__mulsf3_pse+0x82>
    5f02:	98 3e       	cpi	r25, 0xE8	; 232
    5f04:	dc f3       	brlt	.-10     	; 0x5efc <__mulsf3_pse+0x82>
    5f06:	86 95       	lsr	r24
    5f08:	77 95       	ror	r23
    5f0a:	67 95       	ror	r22
    5f0c:	b7 95       	ror	r27
    5f0e:	f7 95       	ror	r31
    5f10:	e7 95       	ror	r30
    5f12:	9f 5f       	subi	r25, 0xFF	; 255
    5f14:	c1 f7       	brne	.-16     	; 0x5f06 <__mulsf3_pse+0x8c>
    5f16:	fe 2b       	or	r31, r30
    5f18:	88 0f       	add	r24, r24
    5f1a:	91 1d       	adc	r25, r1
    5f1c:	96 95       	lsr	r25
    5f1e:	87 95       	ror	r24
    5f20:	97 f9       	bld	r25, 7
    5f22:	08 95       	ret

00005f24 <pow>:
    5f24:	fa 01       	movw	r30, r20
    5f26:	ee 0f       	add	r30, r30
    5f28:	ff 1f       	adc	r31, r31
    5f2a:	30 96       	adiw	r30, 0x00	; 0
    5f2c:	21 05       	cpc	r18, r1
    5f2e:	31 05       	cpc	r19, r1
    5f30:	99 f1       	breq	.+102    	; 0x5f98 <pow+0x74>
    5f32:	61 15       	cp	r22, r1
    5f34:	71 05       	cpc	r23, r1
    5f36:	61 f4       	brne	.+24     	; 0x5f50 <pow+0x2c>
    5f38:	80 38       	cpi	r24, 0x80	; 128
    5f3a:	bf e3       	ldi	r27, 0x3F	; 63
    5f3c:	9b 07       	cpc	r25, r27
    5f3e:	49 f1       	breq	.+82     	; 0x5f92 <pow+0x6e>
    5f40:	68 94       	set
    5f42:	90 38       	cpi	r25, 0x80	; 128
    5f44:	81 05       	cpc	r24, r1
    5f46:	61 f0       	breq	.+24     	; 0x5f60 <pow+0x3c>
    5f48:	80 38       	cpi	r24, 0x80	; 128
    5f4a:	bf ef       	ldi	r27, 0xFF	; 255
    5f4c:	9b 07       	cpc	r25, r27
    5f4e:	41 f0       	breq	.+16     	; 0x5f60 <pow+0x3c>
    5f50:	99 23       	and	r25, r25
    5f52:	42 f5       	brpl	.+80     	; 0x5fa4 <pow+0x80>
    5f54:	ff 3f       	cpi	r31, 0xFF	; 255
    5f56:	e1 05       	cpc	r30, r1
    5f58:	31 05       	cpc	r19, r1
    5f5a:	21 05       	cpc	r18, r1
    5f5c:	11 f1       	breq	.+68     	; 0x5fa2 <pow+0x7e>
    5f5e:	e8 94       	clt
    5f60:	08 94       	sec
    5f62:	e7 95       	ror	r30
    5f64:	d9 01       	movw	r26, r18
    5f66:	aa 23       	and	r26, r26
    5f68:	29 f4       	brne	.+10     	; 0x5f74 <pow+0x50>
    5f6a:	ab 2f       	mov	r26, r27
    5f6c:	be 2f       	mov	r27, r30
    5f6e:	f8 5f       	subi	r31, 0xF8	; 248
    5f70:	d0 f3       	brcs	.-12     	; 0x5f66 <pow+0x42>
    5f72:	10 c0       	rjmp	.+32     	; 0x5f94 <pow+0x70>
    5f74:	ff 5f       	subi	r31, 0xFF	; 255
    5f76:	70 f4       	brcc	.+28     	; 0x5f94 <pow+0x70>
    5f78:	a6 95       	lsr	r26
    5f7a:	e0 f7       	brcc	.-8      	; 0x5f74 <pow+0x50>
    5f7c:	f7 39       	cpi	r31, 0x97	; 151
    5f7e:	50 f0       	brcs	.+20     	; 0x5f94 <pow+0x70>
    5f80:	19 f0       	breq	.+6      	; 0x5f88 <pow+0x64>
    5f82:	ff 3a       	cpi	r31, 0xAF	; 175
    5f84:	38 f4       	brcc	.+14     	; 0x5f94 <pow+0x70>
    5f86:	9f 77       	andi	r25, 0x7F	; 127
    5f88:	9f 93       	push	r25
    5f8a:	0c d0       	rcall	.+24     	; 0x5fa4 <pow+0x80>
    5f8c:	0f 90       	pop	r0
    5f8e:	07 fc       	sbrc	r0, 7
    5f90:	90 58       	subi	r25, 0x80	; 128
    5f92:	08 95       	ret
    5f94:	3e f0       	brts	.+14     	; 0x5fa4 <pow+0x80>
    5f96:	da ce       	rjmp	.-588    	; 0x5d4c <__fp_nan>
    5f98:	60 e0       	ldi	r22, 0x00	; 0
    5f9a:	70 e0       	ldi	r23, 0x00	; 0
    5f9c:	80 e8       	ldi	r24, 0x80	; 128
    5f9e:	9f e3       	ldi	r25, 0x3F	; 63
    5fa0:	08 95       	ret
    5fa2:	4f e7       	ldi	r20, 0x7F	; 127
    5fa4:	9f 77       	andi	r25, 0x7F	; 127
    5fa6:	5f 93       	push	r21
    5fa8:	4f 93       	push	r20
    5faa:	3f 93       	push	r19
    5fac:	2f 93       	push	r18
    5fae:	9e d0       	rcall	.+316    	; 0x60ec <log>
    5fb0:	2f 91       	pop	r18
    5fb2:	3f 91       	pop	r19
    5fb4:	4f 91       	pop	r20
    5fb6:	5f 91       	pop	r21
    5fb8:	52 df       	rcall	.-348    	; 0x5e5e <__mulsf3>
    5fba:	05 c0       	rjmp	.+10     	; 0x5fc6 <exp>
    5fbc:	19 f4       	brne	.+6      	; 0x5fc4 <pow+0xa0>
    5fbe:	0e f0       	brts	.+2      	; 0x5fc2 <pow+0x9e>
    5fc0:	bf ce       	rjmp	.-642    	; 0x5d40 <__fp_inf>
    5fc2:	08 cf       	rjmp	.-496    	; 0x5dd4 <__fp_zero>
    5fc4:	c3 ce       	rjmp	.-634    	; 0x5d4c <__fp_nan>

00005fc6 <exp>:
    5fc6:	ec de       	rcall	.-552    	; 0x5da0 <__fp_splitA>
    5fc8:	c8 f3       	brcs	.-14     	; 0x5fbc <pow+0x98>
    5fca:	96 38       	cpi	r25, 0x86	; 134
    5fcc:	c0 f7       	brcc	.-16     	; 0x5fbe <pow+0x9a>
    5fce:	07 f8       	bld	r0, 7
    5fd0:	0f 92       	push	r0
    5fd2:	e8 94       	clt
    5fd4:	2b e3       	ldi	r18, 0x3B	; 59
    5fd6:	3a ea       	ldi	r19, 0xAA	; 170
    5fd8:	48 eb       	ldi	r20, 0xB8	; 184
    5fda:	5f e7       	ldi	r21, 0x7F	; 127
    5fdc:	4e df       	rcall	.-356    	; 0x5e7a <__mulsf3_pse>
    5fde:	0f 92       	push	r0
    5fe0:	0f 92       	push	r0
    5fe2:	0f 92       	push	r0
    5fe4:	4d b7       	in	r20, 0x3d	; 61
    5fe6:	5e b7       	in	r21, 0x3e	; 62
    5fe8:	0f 92       	push	r0
    5fea:	c0 d0       	rcall	.+384    	; 0x616c <modf>
    5fec:	e8 ec       	ldi	r30, 0xC8	; 200
    5fee:	f0 e0       	ldi	r31, 0x00	; 0
    5ff0:	16 d0       	rcall	.+44     	; 0x601e <__fp_powser>
    5ff2:	4f 91       	pop	r20
    5ff4:	5f 91       	pop	r21
    5ff6:	ef 91       	pop	r30
    5ff8:	ff 91       	pop	r31
    5ffa:	e5 95       	asr	r30
    5ffc:	ee 1f       	adc	r30, r30
    5ffe:	ff 1f       	adc	r31, r31
    6000:	49 f0       	breq	.+18     	; 0x6014 <exp+0x4e>
    6002:	fe 57       	subi	r31, 0x7E	; 126
    6004:	e0 68       	ori	r30, 0x80	; 128
    6006:	44 27       	eor	r20, r20
    6008:	ee 0f       	add	r30, r30
    600a:	44 1f       	adc	r20, r20
    600c:	fa 95       	dec	r31
    600e:	e1 f7       	brne	.-8      	; 0x6008 <exp+0x42>
    6010:	41 95       	neg	r20
    6012:	55 0b       	sbc	r21, r21
    6014:	32 d0       	rcall	.+100    	; 0x607a <ldexp>
    6016:	0f 90       	pop	r0
    6018:	07 fe       	sbrs	r0, 7
    601a:	26 c0       	rjmp	.+76     	; 0x6068 <inverse>
    601c:	08 95       	ret

0000601e <__fp_powser>:
    601e:	df 93       	push	r29
    6020:	cf 93       	push	r28
    6022:	1f 93       	push	r17
    6024:	0f 93       	push	r16
    6026:	ff 92       	push	r15
    6028:	ef 92       	push	r14
    602a:	df 92       	push	r13
    602c:	7b 01       	movw	r14, r22
    602e:	8c 01       	movw	r16, r24
    6030:	68 94       	set
    6032:	05 c0       	rjmp	.+10     	; 0x603e <__fp_powser+0x20>
    6034:	da 2e       	mov	r13, r26
    6036:	ef 01       	movw	r28, r30
    6038:	1e df       	rcall	.-452    	; 0x5e76 <__mulsf3x>
    603a:	fe 01       	movw	r30, r28
    603c:	e8 94       	clt
    603e:	a5 91       	lpm	r26, Z+
    6040:	25 91       	lpm	r18, Z+
    6042:	35 91       	lpm	r19, Z+
    6044:	45 91       	lpm	r20, Z+
    6046:	55 91       	lpm	r21, Z+
    6048:	ae f3       	brts	.-22     	; 0x6034 <__fp_powser+0x16>
    604a:	ef 01       	movw	r28, r30
    604c:	28 dd       	rcall	.-1456   	; 0x5a9e <__addsf3x>
    604e:	fe 01       	movw	r30, r28
    6050:	97 01       	movw	r18, r14
    6052:	a8 01       	movw	r20, r16
    6054:	da 94       	dec	r13
    6056:	79 f7       	brne	.-34     	; 0x6036 <__fp_powser+0x18>
    6058:	df 90       	pop	r13
    605a:	ef 90       	pop	r14
    605c:	ff 90       	pop	r15
    605e:	0f 91       	pop	r16
    6060:	1f 91       	pop	r17
    6062:	cf 91       	pop	r28
    6064:	df 91       	pop	r29
    6066:	08 95       	ret

00006068 <inverse>:
    6068:	9b 01       	movw	r18, r22
    606a:	ac 01       	movw	r20, r24
    606c:	60 e0       	ldi	r22, 0x00	; 0
    606e:	70 e0       	ldi	r23, 0x00	; 0
    6070:	80 e8       	ldi	r24, 0x80	; 128
    6072:	9f e3       	ldi	r25, 0x3F	; 63
    6074:	6b cd       	rjmp	.-1322   	; 0x5b4c <__divsf3>
    6076:	64 ce       	rjmp	.-824    	; 0x5d40 <__fp_inf>
    6078:	ac c0       	rjmp	.+344    	; 0x61d2 <__fp_mpack>

0000607a <ldexp>:
    607a:	92 de       	rcall	.-732    	; 0x5da0 <__fp_splitA>
    607c:	e8 f3       	brcs	.-6      	; 0x6078 <inverse+0x10>
    607e:	99 23       	and	r25, r25
    6080:	d9 f3       	breq	.-10     	; 0x6078 <inverse+0x10>
    6082:	94 0f       	add	r25, r20
    6084:	51 1d       	adc	r21, r1
    6086:	bb f3       	brvs	.-18     	; 0x6076 <inverse+0xe>
    6088:	91 50       	subi	r25, 0x01	; 1
    608a:	50 40       	sbci	r21, 0x00	; 0
    608c:	94 f0       	brlt	.+36     	; 0x60b2 <ldexp+0x38>
    608e:	59 f0       	breq	.+22     	; 0x60a6 <ldexp+0x2c>
    6090:	88 23       	and	r24, r24
    6092:	32 f0       	brmi	.+12     	; 0x60a0 <ldexp+0x26>
    6094:	66 0f       	add	r22, r22
    6096:	77 1f       	adc	r23, r23
    6098:	88 1f       	adc	r24, r24
    609a:	91 50       	subi	r25, 0x01	; 1
    609c:	50 40       	sbci	r21, 0x00	; 0
    609e:	c1 f7       	brne	.-16     	; 0x6090 <ldexp+0x16>
    60a0:	9e 3f       	cpi	r25, 0xFE	; 254
    60a2:	51 05       	cpc	r21, r1
    60a4:	44 f7       	brge	.-48     	; 0x6076 <inverse+0xe>
    60a6:	88 0f       	add	r24, r24
    60a8:	91 1d       	adc	r25, r1
    60aa:	96 95       	lsr	r25
    60ac:	87 95       	ror	r24
    60ae:	97 f9       	bld	r25, 7
    60b0:	08 95       	ret
    60b2:	5f 3f       	cpi	r21, 0xFF	; 255
    60b4:	ac f0       	brlt	.+42     	; 0x60e0 <ldexp+0x66>
    60b6:	98 3e       	cpi	r25, 0xE8	; 232
    60b8:	9c f0       	brlt	.+38     	; 0x60e0 <ldexp+0x66>
    60ba:	bb 27       	eor	r27, r27
    60bc:	86 95       	lsr	r24
    60be:	77 95       	ror	r23
    60c0:	67 95       	ror	r22
    60c2:	b7 95       	ror	r27
    60c4:	08 f4       	brcc	.+2      	; 0x60c8 <ldexp+0x4e>
    60c6:	b1 60       	ori	r27, 0x01	; 1
    60c8:	93 95       	inc	r25
    60ca:	c1 f7       	brne	.-16     	; 0x60bc <ldexp+0x42>
    60cc:	bb 0f       	add	r27, r27
    60ce:	58 f7       	brcc	.-42     	; 0x60a6 <ldexp+0x2c>
    60d0:	11 f4       	brne	.+4      	; 0x60d6 <ldexp+0x5c>
    60d2:	60 ff       	sbrs	r22, 0
    60d4:	e8 cf       	rjmp	.-48     	; 0x60a6 <ldexp+0x2c>
    60d6:	6f 5f       	subi	r22, 0xFF	; 255
    60d8:	7f 4f       	sbci	r23, 0xFF	; 255
    60da:	8f 4f       	sbci	r24, 0xFF	; 255
    60dc:	9f 4f       	sbci	r25, 0xFF	; 255
    60de:	e3 cf       	rjmp	.-58     	; 0x60a6 <ldexp+0x2c>
    60e0:	7a ce       	rjmp	.-780    	; 0x5dd6 <__fp_szero>
    60e2:	0e f0       	brts	.+2      	; 0x60e6 <ldexp+0x6c>
    60e4:	76 c0       	rjmp	.+236    	; 0x61d2 <__fp_mpack>
    60e6:	32 ce       	rjmp	.-924    	; 0x5d4c <__fp_nan>
    60e8:	68 94       	set
    60ea:	2a ce       	rjmp	.-940    	; 0x5d40 <__fp_inf>

000060ec <log>:
    60ec:	59 de       	rcall	.-846    	; 0x5da0 <__fp_splitA>
    60ee:	c8 f3       	brcs	.-14     	; 0x60e2 <ldexp+0x68>
    60f0:	99 23       	and	r25, r25
    60f2:	d1 f3       	breq	.-12     	; 0x60e8 <ldexp+0x6e>
    60f4:	c6 f3       	brts	.-16     	; 0x60e6 <ldexp+0x6c>
    60f6:	df 93       	push	r29
    60f8:	cf 93       	push	r28
    60fa:	1f 93       	push	r17
    60fc:	0f 93       	push	r16
    60fe:	ff 92       	push	r15
    6100:	c9 2f       	mov	r28, r25
    6102:	dd 27       	eor	r29, r29
    6104:	88 23       	and	r24, r24
    6106:	2a f0       	brmi	.+10     	; 0x6112 <log+0x26>
    6108:	21 97       	sbiw	r28, 0x01	; 1
    610a:	66 0f       	add	r22, r22
    610c:	77 1f       	adc	r23, r23
    610e:	88 1f       	adc	r24, r24
    6110:	da f7       	brpl	.-10     	; 0x6108 <log+0x1c>
    6112:	20 e0       	ldi	r18, 0x00	; 0
    6114:	30 e0       	ldi	r19, 0x00	; 0
    6116:	40 e8       	ldi	r20, 0x80	; 128
    6118:	5f eb       	ldi	r21, 0xBF	; 191
    611a:	9f e3       	ldi	r25, 0x3F	; 63
    611c:	88 39       	cpi	r24, 0x98	; 152
    611e:	20 f0       	brcs	.+8      	; 0x6128 <log+0x3c>
    6120:	80 3e       	cpi	r24, 0xE0	; 224
    6122:	30 f0       	brcs	.+12     	; 0x6130 <log+0x44>
    6124:	21 96       	adiw	r28, 0x01	; 1
    6126:	8f 77       	andi	r24, 0x7F	; 127
    6128:	a9 dc       	rcall	.-1710   	; 0x5a7c <__addsf3>
    612a:	e0 ef       	ldi	r30, 0xF0	; 240
    612c:	f0 e0       	ldi	r31, 0x00	; 0
    612e:	03 c0       	rjmp	.+6      	; 0x6136 <log+0x4a>
    6130:	a5 dc       	rcall	.-1718   	; 0x5a7c <__addsf3>
    6132:	ed e1       	ldi	r30, 0x1D	; 29
    6134:	f1 e0       	ldi	r31, 0x01	; 1
    6136:	73 df       	rcall	.-282    	; 0x601e <__fp_powser>
    6138:	8b 01       	movw	r16, r22
    613a:	be 01       	movw	r22, r28
    613c:	ec 01       	movw	r28, r24
    613e:	fb 2e       	mov	r15, r27
    6140:	6f 57       	subi	r22, 0x7F	; 127
    6142:	71 09       	sbc	r23, r1
    6144:	75 95       	asr	r23
    6146:	77 1f       	adc	r23, r23
    6148:	88 0b       	sbc	r24, r24
    614a:	99 0b       	sbc	r25, r25
    614c:	9a dd       	rcall	.-1228   	; 0x5c82 <__floatsisf>
    614e:	28 e1       	ldi	r18, 0x18	; 24
    6150:	32 e7       	ldi	r19, 0x72	; 114
    6152:	41 e3       	ldi	r20, 0x31	; 49
    6154:	5f e3       	ldi	r21, 0x3F	; 63
    6156:	8f de       	rcall	.-738    	; 0x5e76 <__mulsf3x>
    6158:	af 2d       	mov	r26, r15
    615a:	98 01       	movw	r18, r16
    615c:	ae 01       	movw	r20, r28
    615e:	ff 90       	pop	r15
    6160:	0f 91       	pop	r16
    6162:	1f 91       	pop	r17
    6164:	cf 91       	pop	r28
    6166:	df 91       	pop	r29
    6168:	9a dc       	rcall	.-1740   	; 0x5a9e <__addsf3x>
    616a:	01 ce       	rjmp	.-1022   	; 0x5d6e <__fp_round>

0000616c <modf>:
    616c:	fa 01       	movw	r30, r20
    616e:	dc 01       	movw	r26, r24
    6170:	aa 0f       	add	r26, r26
    6172:	bb 1f       	adc	r27, r27
    6174:	9b 01       	movw	r18, r22
    6176:	ac 01       	movw	r20, r24
    6178:	bf 57       	subi	r27, 0x7F	; 127
    617a:	28 f4       	brcc	.+10     	; 0x6186 <modf+0x1a>
    617c:	22 27       	eor	r18, r18
    617e:	33 27       	eor	r19, r19
    6180:	44 27       	eor	r20, r20
    6182:	50 78       	andi	r21, 0x80	; 128
    6184:	1f c0       	rjmp	.+62     	; 0x61c4 <modf+0x58>
    6186:	b7 51       	subi	r27, 0x17	; 23
    6188:	88 f4       	brcc	.+34     	; 0x61ac <modf+0x40>
    618a:	ab 2f       	mov	r26, r27
    618c:	00 24       	eor	r0, r0
    618e:	46 95       	lsr	r20
    6190:	37 95       	ror	r19
    6192:	27 95       	ror	r18
    6194:	01 1c       	adc	r0, r1
    6196:	a3 95       	inc	r26
    6198:	d2 f3       	brmi	.-12     	; 0x618e <modf+0x22>
    619a:	00 20       	and	r0, r0
    619c:	69 f0       	breq	.+26     	; 0x61b8 <modf+0x4c>
    619e:	22 0f       	add	r18, r18
    61a0:	33 1f       	adc	r19, r19
    61a2:	44 1f       	adc	r20, r20
    61a4:	b3 95       	inc	r27
    61a6:	da f3       	brmi	.-10     	; 0x619e <modf+0x32>
    61a8:	0d d0       	rcall	.+26     	; 0x61c4 <modf+0x58>
    61aa:	67 cc       	rjmp	.-1842   	; 0x5a7a <__subsf3>
    61ac:	61 30       	cpi	r22, 0x01	; 1
    61ae:	71 05       	cpc	r23, r1
    61b0:	a0 e8       	ldi	r26, 0x80	; 128
    61b2:	8a 07       	cpc	r24, r26
    61b4:	b9 46       	sbci	r27, 0x69	; 105
    61b6:	30 f4       	brcc	.+12     	; 0x61c4 <modf+0x58>
    61b8:	9b 01       	movw	r18, r22
    61ba:	ac 01       	movw	r20, r24
    61bc:	66 27       	eor	r22, r22
    61be:	77 27       	eor	r23, r23
    61c0:	88 27       	eor	r24, r24
    61c2:	90 78       	andi	r25, 0x80	; 128
    61c4:	30 96       	adiw	r30, 0x00	; 0
    61c6:	21 f0       	breq	.+8      	; 0x61d0 <modf+0x64>
    61c8:	20 83       	st	Z, r18
    61ca:	31 83       	std	Z+1, r19	; 0x01
    61cc:	42 83       	std	Z+2, r20	; 0x02
    61ce:	53 83       	std	Z+3, r21	; 0x03
    61d0:	08 95       	ret

000061d2 <__fp_mpack>:
    61d2:	9f 3f       	cpi	r25, 0xFF	; 255
    61d4:	31 f0       	breq	.+12     	; 0x61e2 <__fp_mpack_finite+0xc>

000061d6 <__fp_mpack_finite>:
    61d6:	91 50       	subi	r25, 0x01	; 1
    61d8:	20 f4       	brcc	.+8      	; 0x61e2 <__fp_mpack_finite+0xc>
    61da:	87 95       	ror	r24
    61dc:	77 95       	ror	r23
    61de:	67 95       	ror	r22
    61e0:	b7 95       	ror	r27
    61e2:	88 0f       	add	r24, r24
    61e4:	91 1d       	adc	r25, r1
    61e6:	96 95       	lsr	r25
    61e8:	87 95       	ror	r24
    61ea:	97 f9       	bld	r25, 7
    61ec:	08 95       	ret

000061ee <vfprintf>:
    61ee:	a1 e1       	ldi	r26, 0x11	; 17
    61f0:	b0 e0       	ldi	r27, 0x00	; 0
    61f2:	ec ef       	ldi	r30, 0xFC	; 252
    61f4:	f0 e3       	ldi	r31, 0x30	; 48
    61f6:	a4 c3       	rjmp	.+1864   	; 0x6940 <__prologue_saves__>
    61f8:	3c 01       	movw	r6, r24
    61fa:	7f 87       	std	Y+15, r23	; 0x0f
    61fc:	6e 87       	std	Y+14, r22	; 0x0e
    61fe:	6a 01       	movw	r12, r20
    6200:	fc 01       	movw	r30, r24
    6202:	17 82       	std	Z+7, r1	; 0x07
    6204:	16 82       	std	Z+6, r1	; 0x06
    6206:	83 81       	ldd	r24, Z+3	; 0x03
    6208:	81 fd       	sbrc	r24, 1
    620a:	03 c0       	rjmp	.+6      	; 0x6212 <vfprintf+0x24>
    620c:	6f ef       	ldi	r22, 0xFF	; 255
    620e:	7f ef       	ldi	r23, 0xFF	; 255
    6210:	52 c3       	rjmp	.+1700   	; 0x68b6 <vfprintf+0x6c8>
    6212:	9e 01       	movw	r18, r28
    6214:	2f 5f       	subi	r18, 0xFF	; 255
    6216:	3f 4f       	sbci	r19, 0xFF	; 255
    6218:	39 8b       	std	Y+17, r19	; 0x11
    621a:	28 8b       	std	Y+16, r18	; 0x10
    621c:	f3 01       	movw	r30, r6
    621e:	23 81       	ldd	r18, Z+3	; 0x03
    6220:	ee 85       	ldd	r30, Y+14	; 0x0e
    6222:	ff 85       	ldd	r31, Y+15	; 0x0f
    6224:	23 fd       	sbrc	r18, 3
    6226:	85 91       	lpm	r24, Z+
    6228:	23 ff       	sbrs	r18, 3
    622a:	81 91       	ld	r24, Z+
    622c:	ff 87       	std	Y+15, r31	; 0x0f
    622e:	ee 87       	std	Y+14, r30	; 0x0e
    6230:	88 23       	and	r24, r24
    6232:	09 f4       	brne	.+2      	; 0x6236 <vfprintf+0x48>
    6234:	3d c3       	rjmp	.+1658   	; 0x68b0 <vfprintf+0x6c2>
    6236:	85 32       	cpi	r24, 0x25	; 37
    6238:	51 f4       	brne	.+20     	; 0x624e <vfprintf+0x60>
    623a:	ee 85       	ldd	r30, Y+14	; 0x0e
    623c:	ff 85       	ldd	r31, Y+15	; 0x0f
    623e:	23 fd       	sbrc	r18, 3
    6240:	85 91       	lpm	r24, Z+
    6242:	23 ff       	sbrs	r18, 3
    6244:	81 91       	ld	r24, Z+
    6246:	ff 87       	std	Y+15, r31	; 0x0f
    6248:	ee 87       	std	Y+14, r30	; 0x0e
    624a:	85 32       	cpi	r24, 0x25	; 37
    624c:	21 f4       	brne	.+8      	; 0x6256 <vfprintf+0x68>
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	b3 01       	movw	r22, r6
    6252:	a0 d5       	rcall	.+2880   	; 0x6d94 <fputc>
    6254:	e3 cf       	rjmp	.-58     	; 0x621c <vfprintf+0x2e>
    6256:	98 2f       	mov	r25, r24
    6258:	10 e0       	ldi	r17, 0x00	; 0
    625a:	88 24       	eor	r8, r8
    625c:	99 24       	eor	r9, r9
    625e:	10 32       	cpi	r17, 0x20	; 32
    6260:	b0 f4       	brcc	.+44     	; 0x628e <vfprintf+0xa0>
    6262:	9b 32       	cpi	r25, 0x2B	; 43
    6264:	69 f0       	breq	.+26     	; 0x6280 <vfprintf+0x92>
    6266:	9c 32       	cpi	r25, 0x2C	; 44
    6268:	28 f4       	brcc	.+10     	; 0x6274 <vfprintf+0x86>
    626a:	90 32       	cpi	r25, 0x20	; 32
    626c:	51 f0       	breq	.+20     	; 0x6282 <vfprintf+0x94>
    626e:	93 32       	cpi	r25, 0x23	; 35
    6270:	71 f4       	brne	.+28     	; 0x628e <vfprintf+0xa0>
    6272:	0b c0       	rjmp	.+22     	; 0x628a <vfprintf+0x9c>
    6274:	9d 32       	cpi	r25, 0x2D	; 45
    6276:	39 f0       	breq	.+14     	; 0x6286 <vfprintf+0x98>
    6278:	90 33       	cpi	r25, 0x30	; 48
    627a:	49 f4       	brne	.+18     	; 0x628e <vfprintf+0xa0>
    627c:	11 60       	ori	r17, 0x01	; 1
    627e:	28 c0       	rjmp	.+80     	; 0x62d0 <vfprintf+0xe2>
    6280:	12 60       	ori	r17, 0x02	; 2
    6282:	14 60       	ori	r17, 0x04	; 4
    6284:	25 c0       	rjmp	.+74     	; 0x62d0 <vfprintf+0xe2>
    6286:	18 60       	ori	r17, 0x08	; 8
    6288:	23 c0       	rjmp	.+70     	; 0x62d0 <vfprintf+0xe2>
    628a:	10 61       	ori	r17, 0x10	; 16
    628c:	21 c0       	rjmp	.+66     	; 0x62d0 <vfprintf+0xe2>
    628e:	17 fd       	sbrc	r17, 7
    6290:	2a c0       	rjmp	.+84     	; 0x62e6 <vfprintf+0xf8>
    6292:	89 2f       	mov	r24, r25
    6294:	80 53       	subi	r24, 0x30	; 48
    6296:	8a 30       	cpi	r24, 0x0A	; 10
    6298:	78 f4       	brcc	.+30     	; 0x62b8 <vfprintf+0xca>
    629a:	16 ff       	sbrs	r17, 6
    629c:	06 c0       	rjmp	.+12     	; 0x62aa <vfprintf+0xbc>
    629e:	fa e0       	ldi	r31, 0x0A	; 10
    62a0:	9f 9e       	mul	r9, r31
    62a2:	90 2c       	mov	r9, r0
    62a4:	11 24       	eor	r1, r1
    62a6:	98 0e       	add	r9, r24
    62a8:	13 c0       	rjmp	.+38     	; 0x62d0 <vfprintf+0xe2>
    62aa:	3a e0       	ldi	r19, 0x0A	; 10
    62ac:	83 9e       	mul	r8, r19
    62ae:	80 2c       	mov	r8, r0
    62b0:	11 24       	eor	r1, r1
    62b2:	88 0e       	add	r8, r24
    62b4:	10 62       	ori	r17, 0x20	; 32
    62b6:	0c c0       	rjmp	.+24     	; 0x62d0 <vfprintf+0xe2>
    62b8:	9e 32       	cpi	r25, 0x2E	; 46
    62ba:	21 f4       	brne	.+8      	; 0x62c4 <vfprintf+0xd6>
    62bc:	16 fd       	sbrc	r17, 6
    62be:	f8 c2       	rjmp	.+1520   	; 0x68b0 <vfprintf+0x6c2>
    62c0:	10 64       	ori	r17, 0x40	; 64
    62c2:	06 c0       	rjmp	.+12     	; 0x62d0 <vfprintf+0xe2>
    62c4:	9c 36       	cpi	r25, 0x6C	; 108
    62c6:	11 f4       	brne	.+4      	; 0x62cc <vfprintf+0xde>
    62c8:	10 68       	ori	r17, 0x80	; 128
    62ca:	02 c0       	rjmp	.+4      	; 0x62d0 <vfprintf+0xe2>
    62cc:	98 36       	cpi	r25, 0x68	; 104
    62ce:	59 f4       	brne	.+22     	; 0x62e6 <vfprintf+0xf8>
    62d0:	ee 85       	ldd	r30, Y+14	; 0x0e
    62d2:	ff 85       	ldd	r31, Y+15	; 0x0f
    62d4:	23 fd       	sbrc	r18, 3
    62d6:	95 91       	lpm	r25, Z+
    62d8:	23 ff       	sbrs	r18, 3
    62da:	91 91       	ld	r25, Z+
    62dc:	ff 87       	std	Y+15, r31	; 0x0f
    62de:	ee 87       	std	Y+14, r30	; 0x0e
    62e0:	99 23       	and	r25, r25
    62e2:	09 f0       	breq	.+2      	; 0x62e6 <vfprintf+0xf8>
    62e4:	bc cf       	rjmp	.-136    	; 0x625e <vfprintf+0x70>
    62e6:	89 2f       	mov	r24, r25
    62e8:	85 54       	subi	r24, 0x45	; 69
    62ea:	83 30       	cpi	r24, 0x03	; 3
    62ec:	20 f4       	brcc	.+8      	; 0x62f6 <vfprintf+0x108>
    62ee:	81 2f       	mov	r24, r17
    62f0:	80 61       	ori	r24, 0x10	; 16
    62f2:	90 5e       	subi	r25, 0xE0	; 224
    62f4:	07 c0       	rjmp	.+14     	; 0x6304 <vfprintf+0x116>
    62f6:	89 2f       	mov	r24, r25
    62f8:	85 56       	subi	r24, 0x65	; 101
    62fa:	83 30       	cpi	r24, 0x03	; 3
    62fc:	08 f0       	brcs	.+2      	; 0x6300 <vfprintf+0x112>
    62fe:	8f c1       	rjmp	.+798    	; 0x661e <vfprintf+0x430>
    6300:	81 2f       	mov	r24, r17
    6302:	8f 7e       	andi	r24, 0xEF	; 239
    6304:	86 fd       	sbrc	r24, 6
    6306:	02 c0       	rjmp	.+4      	; 0x630c <vfprintf+0x11e>
    6308:	76 e0       	ldi	r23, 0x06	; 6
    630a:	97 2e       	mov	r9, r23
    630c:	6f e3       	ldi	r22, 0x3F	; 63
    630e:	f6 2e       	mov	r15, r22
    6310:	f8 22       	and	r15, r24
    6312:	95 36       	cpi	r25, 0x65	; 101
    6314:	19 f4       	brne	.+6      	; 0x631c <vfprintf+0x12e>
    6316:	f0 e4       	ldi	r31, 0x40	; 64
    6318:	ff 2a       	or	r15, r31
    631a:	07 c0       	rjmp	.+14     	; 0x632a <vfprintf+0x13c>
    631c:	96 36       	cpi	r25, 0x66	; 102
    631e:	19 f4       	brne	.+6      	; 0x6326 <vfprintf+0x138>
    6320:	20 e8       	ldi	r18, 0x80	; 128
    6322:	f2 2a       	or	r15, r18
    6324:	02 c0       	rjmp	.+4      	; 0x632a <vfprintf+0x13c>
    6326:	91 10       	cpse	r9, r1
    6328:	9a 94       	dec	r9
    632a:	f7 fe       	sbrs	r15, 7
    632c:	0a c0       	rjmp	.+20     	; 0x6342 <vfprintf+0x154>
    632e:	3b e3       	ldi	r19, 0x3B	; 59
    6330:	39 15       	cp	r19, r9
    6332:	18 f4       	brcc	.+6      	; 0x633a <vfprintf+0x14c>
    6334:	5c e3       	ldi	r21, 0x3C	; 60
    6336:	b5 2e       	mov	r11, r21
    6338:	02 c0       	rjmp	.+4      	; 0x633e <vfprintf+0x150>
    633a:	b9 2c       	mov	r11, r9
    633c:	b3 94       	inc	r11
    633e:	27 e0       	ldi	r18, 0x07	; 7
    6340:	09 c0       	rjmp	.+18     	; 0x6354 <vfprintf+0x166>
    6342:	47 e0       	ldi	r20, 0x07	; 7
    6344:	49 15       	cp	r20, r9
    6346:	20 f4       	brcc	.+8      	; 0x6350 <vfprintf+0x162>
    6348:	bb 24       	eor	r11, r11
    634a:	47 e0       	ldi	r20, 0x07	; 7
    634c:	94 2e       	mov	r9, r20
    634e:	f7 cf       	rjmp	.-18     	; 0x633e <vfprintf+0x150>
    6350:	29 2d       	mov	r18, r9
    6352:	bb 24       	eor	r11, r11
    6354:	c6 01       	movw	r24, r12
    6356:	04 96       	adiw	r24, 0x04	; 4
    6358:	9d 87       	std	Y+13, r25	; 0x0d
    635a:	8c 87       	std	Y+12, r24	; 0x0c
    635c:	f6 01       	movw	r30, r12
    635e:	60 81       	ld	r22, Z
    6360:	71 81       	ldd	r23, Z+1	; 0x01
    6362:	82 81       	ldd	r24, Z+2	; 0x02
    6364:	93 81       	ldd	r25, Z+3	; 0x03
    6366:	ae 01       	movw	r20, r28
    6368:	4f 5f       	subi	r20, 0xFF	; 255
    636a:	5f 4f       	sbci	r21, 0xFF	; 255
    636c:	0b 2d       	mov	r16, r11
    636e:	24 d4       	rcall	.+2120   	; 0x6bb8 <__ftoa_engine>
    6370:	6c 01       	movw	r12, r24
    6372:	09 81       	ldd	r16, Y+1	; 0x01
    6374:	20 2e       	mov	r2, r16
    6376:	33 24       	eor	r3, r3
    6378:	00 ff       	sbrs	r16, 0
    637a:	04 c0       	rjmp	.+8      	; 0x6384 <vfprintf+0x196>
    637c:	03 fd       	sbrc	r16, 3
    637e:	02 c0       	rjmp	.+4      	; 0x6384 <vfprintf+0x196>
    6380:	1d e2       	ldi	r17, 0x2D	; 45
    6382:	09 c0       	rjmp	.+18     	; 0x6396 <vfprintf+0x1a8>
    6384:	f1 fe       	sbrs	r15, 1
    6386:	02 c0       	rjmp	.+4      	; 0x638c <vfprintf+0x19e>
    6388:	1b e2       	ldi	r17, 0x2B	; 43
    638a:	05 c0       	rjmp	.+10     	; 0x6396 <vfprintf+0x1a8>
    638c:	f2 fc       	sbrc	r15, 2
    638e:	02 c0       	rjmp	.+4      	; 0x6394 <vfprintf+0x1a6>
    6390:	10 e0       	ldi	r17, 0x00	; 0
    6392:	01 c0       	rjmp	.+2      	; 0x6396 <vfprintf+0x1a8>
    6394:	10 e2       	ldi	r17, 0x20	; 32
    6396:	c1 01       	movw	r24, r2
    6398:	8c 70       	andi	r24, 0x0C	; 12
    639a:	90 70       	andi	r25, 0x00	; 0
    639c:	89 2b       	or	r24, r25
    639e:	a1 f1       	breq	.+104    	; 0x6408 <vfprintf+0x21a>
    63a0:	11 23       	and	r17, r17
    63a2:	11 f4       	brne	.+4      	; 0x63a8 <vfprintf+0x1ba>
    63a4:	83 e0       	ldi	r24, 0x03	; 3
    63a6:	01 c0       	rjmp	.+2      	; 0x63aa <vfprintf+0x1bc>
    63a8:	84 e0       	ldi	r24, 0x04	; 4
    63aa:	88 15       	cp	r24, r8
    63ac:	10 f0       	brcs	.+4      	; 0x63b2 <vfprintf+0x1c4>
    63ae:	88 24       	eor	r8, r8
    63b0:	09 c0       	rjmp	.+18     	; 0x63c4 <vfprintf+0x1d6>
    63b2:	88 1a       	sub	r8, r24
    63b4:	f3 fc       	sbrc	r15, 3
    63b6:	06 c0       	rjmp	.+12     	; 0x63c4 <vfprintf+0x1d6>
    63b8:	80 e2       	ldi	r24, 0x20	; 32
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	b3 01       	movw	r22, r6
    63be:	ea d4       	rcall	.+2516   	; 0x6d94 <fputc>
    63c0:	8a 94       	dec	r8
    63c2:	d1 f7       	brne	.-12     	; 0x63b8 <vfprintf+0x1ca>
    63c4:	11 23       	and	r17, r17
    63c6:	21 f0       	breq	.+8      	; 0x63d0 <vfprintf+0x1e2>
    63c8:	81 2f       	mov	r24, r17
    63ca:	90 e0       	ldi	r25, 0x00	; 0
    63cc:	b3 01       	movw	r22, r6
    63ce:	e2 d4       	rcall	.+2500   	; 0x6d94 <fputc>
    63d0:	23 fe       	sbrs	r2, 3
    63d2:	03 c0       	rjmp	.+6      	; 0x63da <vfprintf+0x1ec>
    63d4:	0f e5       	ldi	r16, 0x5F	; 95
    63d6:	15 e0       	ldi	r17, 0x05	; 5
    63d8:	0d c0       	rjmp	.+26     	; 0x63f4 <vfprintf+0x206>
    63da:	03 e6       	ldi	r16, 0x63	; 99
    63dc:	15 e0       	ldi	r17, 0x05	; 5
    63de:	0a c0       	rjmp	.+20     	; 0x63f4 <vfprintf+0x206>
    63e0:	e1 14       	cp	r14, r1
    63e2:	f1 04       	cpc	r15, r1
    63e4:	09 f0       	breq	.+2      	; 0x63e8 <vfprintf+0x1fa>
    63e6:	80 52       	subi	r24, 0x20	; 32
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	b3 01       	movw	r22, r6
    63ec:	d3 d4       	rcall	.+2470   	; 0x6d94 <fputc>
    63ee:	0f 5f       	subi	r16, 0xFF	; 255
    63f0:	1f 4f       	sbci	r17, 0xFF	; 255
    63f2:	05 c0       	rjmp	.+10     	; 0x63fe <vfprintf+0x210>
    63f4:	ef 2c       	mov	r14, r15
    63f6:	ff 24       	eor	r15, r15
    63f8:	f0 e1       	ldi	r31, 0x10	; 16
    63fa:	ef 22       	and	r14, r31
    63fc:	ff 24       	eor	r15, r15
    63fe:	f8 01       	movw	r30, r16
    6400:	84 91       	lpm	r24, Z+
    6402:	88 23       	and	r24, r24
    6404:	69 f7       	brne	.-38     	; 0x63e0 <vfprintf+0x1f2>
    6406:	08 c1       	rjmp	.+528    	; 0x6618 <vfprintf+0x42a>
    6408:	f7 fe       	sbrs	r15, 7
    640a:	12 c0       	rjmp	.+36     	; 0x6430 <vfprintf+0x242>
    640c:	bc 0c       	add	r11, r12
    640e:	24 fe       	sbrs	r2, 4
    6410:	04 c0       	rjmp	.+8      	; 0x641a <vfprintf+0x22c>
    6412:	8a 81       	ldd	r24, Y+2	; 0x02
    6414:	81 33       	cpi	r24, 0x31	; 49
    6416:	09 f4       	brne	.+2      	; 0x641a <vfprintf+0x22c>
    6418:	ba 94       	dec	r11
    641a:	1b 14       	cp	r1, r11
    641c:	1c f0       	brlt	.+6      	; 0x6424 <vfprintf+0x236>
    641e:	bb 24       	eor	r11, r11
    6420:	b3 94       	inc	r11
    6422:	2d c0       	rjmp	.+90     	; 0x647e <vfprintf+0x290>
    6424:	f8 e0       	ldi	r31, 0x08	; 8
    6426:	fb 15       	cp	r31, r11
    6428:	50 f5       	brcc	.+84     	; 0x647e <vfprintf+0x290>
    642a:	38 e0       	ldi	r19, 0x08	; 8
    642c:	b3 2e       	mov	r11, r19
    642e:	27 c0       	rjmp	.+78     	; 0x647e <vfprintf+0x290>
    6430:	f6 fc       	sbrc	r15, 6
    6432:	25 c0       	rjmp	.+74     	; 0x647e <vfprintf+0x290>
    6434:	89 2d       	mov	r24, r9
    6436:	90 e0       	ldi	r25, 0x00	; 0
    6438:	8c 15       	cp	r24, r12
    643a:	9d 05       	cpc	r25, r13
    643c:	4c f0       	brlt	.+18     	; 0x6450 <vfprintf+0x262>
    643e:	2c ef       	ldi	r18, 0xFC	; 252
    6440:	c2 16       	cp	r12, r18
    6442:	2f ef       	ldi	r18, 0xFF	; 255
    6444:	d2 06       	cpc	r13, r18
    6446:	24 f0       	brlt	.+8      	; 0x6450 <vfprintf+0x262>
    6448:	30 e8       	ldi	r19, 0x80	; 128
    644a:	f3 2a       	or	r15, r19
    644c:	01 c0       	rjmp	.+2      	; 0x6450 <vfprintf+0x262>
    644e:	9a 94       	dec	r9
    6450:	99 20       	and	r9, r9
    6452:	49 f0       	breq	.+18     	; 0x6466 <vfprintf+0x278>
    6454:	e2 e0       	ldi	r30, 0x02	; 2
    6456:	f0 e0       	ldi	r31, 0x00	; 0
    6458:	ec 0f       	add	r30, r28
    645a:	fd 1f       	adc	r31, r29
    645c:	e9 0d       	add	r30, r9
    645e:	f1 1d       	adc	r31, r1
    6460:	80 81       	ld	r24, Z
    6462:	80 33       	cpi	r24, 0x30	; 48
    6464:	a1 f3       	breq	.-24     	; 0x644e <vfprintf+0x260>
    6466:	f7 fe       	sbrs	r15, 7
    6468:	0a c0       	rjmp	.+20     	; 0x647e <vfprintf+0x290>
    646a:	b9 2c       	mov	r11, r9
    646c:	b3 94       	inc	r11
    646e:	89 2d       	mov	r24, r9
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	c8 16       	cp	r12, r24
    6474:	d9 06       	cpc	r13, r25
    6476:	14 f0       	brlt	.+4      	; 0x647c <vfprintf+0x28e>
    6478:	99 24       	eor	r9, r9
    647a:	01 c0       	rjmp	.+2      	; 0x647e <vfprintf+0x290>
    647c:	9c 18       	sub	r9, r12
    647e:	f7 fc       	sbrc	r15, 7
    6480:	03 c0       	rjmp	.+6      	; 0x6488 <vfprintf+0x29a>
    6482:	25 e0       	ldi	r18, 0x05	; 5
    6484:	30 e0       	ldi	r19, 0x00	; 0
    6486:	09 c0       	rjmp	.+18     	; 0x649a <vfprintf+0x2ac>
    6488:	1c 14       	cp	r1, r12
    648a:	1d 04       	cpc	r1, r13
    648c:	1c f0       	brlt	.+6      	; 0x6494 <vfprintf+0x2a6>
    648e:	21 e0       	ldi	r18, 0x01	; 1
    6490:	30 e0       	ldi	r19, 0x00	; 0
    6492:	03 c0       	rjmp	.+6      	; 0x649a <vfprintf+0x2ac>
    6494:	96 01       	movw	r18, r12
    6496:	2f 5f       	subi	r18, 0xFF	; 255
    6498:	3f 4f       	sbci	r19, 0xFF	; 255
    649a:	11 23       	and	r17, r17
    649c:	11 f0       	breq	.+4      	; 0x64a2 <vfprintf+0x2b4>
    649e:	2f 5f       	subi	r18, 0xFF	; 255
    64a0:	3f 4f       	sbci	r19, 0xFF	; 255
    64a2:	99 20       	and	r9, r9
    64a4:	29 f0       	breq	.+10     	; 0x64b0 <vfprintf+0x2c2>
    64a6:	89 2d       	mov	r24, r9
    64a8:	90 e0       	ldi	r25, 0x00	; 0
    64aa:	01 96       	adiw	r24, 0x01	; 1
    64ac:	28 0f       	add	r18, r24
    64ae:	39 1f       	adc	r19, r25
    64b0:	88 2d       	mov	r24, r8
    64b2:	90 e0       	ldi	r25, 0x00	; 0
    64b4:	28 17       	cp	r18, r24
    64b6:	39 07       	cpc	r19, r25
    64b8:	14 f0       	brlt	.+4      	; 0x64be <vfprintf+0x2d0>
    64ba:	88 24       	eor	r8, r8
    64bc:	01 c0       	rjmp	.+2      	; 0x64c0 <vfprintf+0x2d2>
    64be:	82 1a       	sub	r8, r18
    64c0:	4f 2c       	mov	r4, r15
    64c2:	55 24       	eor	r5, r5
    64c4:	c2 01       	movw	r24, r4
    64c6:	89 70       	andi	r24, 0x09	; 9
    64c8:	90 70       	andi	r25, 0x00	; 0
    64ca:	89 2b       	or	r24, r25
    64cc:	31 f0       	breq	.+12     	; 0x64da <vfprintf+0x2ec>
    64ce:	07 c0       	rjmp	.+14     	; 0x64de <vfprintf+0x2f0>
    64d0:	80 e2       	ldi	r24, 0x20	; 32
    64d2:	90 e0       	ldi	r25, 0x00	; 0
    64d4:	b3 01       	movw	r22, r6
    64d6:	5e d4       	rcall	.+2236   	; 0x6d94 <fputc>
    64d8:	8a 94       	dec	r8
    64da:	88 20       	and	r8, r8
    64dc:	c9 f7       	brne	.-14     	; 0x64d0 <vfprintf+0x2e2>
    64de:	11 23       	and	r17, r17
    64e0:	21 f0       	breq	.+8      	; 0x64ea <vfprintf+0x2fc>
    64e2:	81 2f       	mov	r24, r17
    64e4:	90 e0       	ldi	r25, 0x00	; 0
    64e6:	b3 01       	movw	r22, r6
    64e8:	55 d4       	rcall	.+2218   	; 0x6d94 <fputc>
    64ea:	43 fe       	sbrs	r4, 3
    64ec:	06 c0       	rjmp	.+12     	; 0x64fa <vfprintf+0x30c>
    64ee:	07 c0       	rjmp	.+14     	; 0x64fe <vfprintf+0x310>
    64f0:	80 e3       	ldi	r24, 0x30	; 48
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	b3 01       	movw	r22, r6
    64f6:	4e d4       	rcall	.+2204   	; 0x6d94 <fputc>
    64f8:	8a 94       	dec	r8
    64fa:	88 20       	and	r8, r8
    64fc:	c9 f7       	brne	.-14     	; 0x64f0 <vfprintf+0x302>
    64fe:	f7 fe       	sbrs	r15, 7
    6500:	44 c0       	rjmp	.+136    	; 0x658a <vfprintf+0x39c>
    6502:	86 01       	movw	r16, r12
    6504:	d7 fe       	sbrs	r13, 7
    6506:	02 c0       	rjmp	.+4      	; 0x650c <vfprintf+0x31e>
    6508:	00 e0       	ldi	r16, 0x00	; 0
    650a:	10 e0       	ldi	r17, 0x00	; 0
    650c:	76 01       	movw	r14, r12
    650e:	08 94       	sec
    6510:	e1 1c       	adc	r14, r1
    6512:	f1 1c       	adc	r15, r1
    6514:	e0 1a       	sub	r14, r16
    6516:	f1 0a       	sbc	r15, r17
    6518:	41 e0       	ldi	r20, 0x01	; 1
    651a:	50 e0       	ldi	r21, 0x00	; 0
    651c:	4c 0f       	add	r20, r28
    651e:	5d 1f       	adc	r21, r29
    6520:	e4 0e       	add	r14, r20
    6522:	f5 1e       	adc	r15, r21
    6524:	26 01       	movw	r4, r12
    6526:	4b 18       	sub	r4, r11
    6528:	51 08       	sbc	r5, r1
    652a:	89 2d       	mov	r24, r9
    652c:	90 e0       	ldi	r25, 0x00	; 0
    652e:	aa 24       	eor	r10, r10
    6530:	bb 24       	eor	r11, r11
    6532:	a8 1a       	sub	r10, r24
    6534:	b9 0a       	sbc	r11, r25
    6536:	5f ef       	ldi	r21, 0xFF	; 255
    6538:	0f 3f       	cpi	r16, 0xFF	; 255
    653a:	15 07       	cpc	r17, r21
    653c:	21 f4       	brne	.+8      	; 0x6546 <vfprintf+0x358>
    653e:	8e e2       	ldi	r24, 0x2E	; 46
    6540:	90 e0       	ldi	r25, 0x00	; 0
    6542:	b3 01       	movw	r22, r6
    6544:	27 d4       	rcall	.+2126   	; 0x6d94 <fputc>
    6546:	c0 16       	cp	r12, r16
    6548:	d1 06       	cpc	r13, r17
    654a:	34 f0       	brlt	.+12     	; 0x6558 <vfprintf+0x36a>
    654c:	40 16       	cp	r4, r16
    654e:	51 06       	cpc	r5, r17
    6550:	1c f4       	brge	.+6      	; 0x6558 <vfprintf+0x36a>
    6552:	f7 01       	movw	r30, r14
    6554:	80 81       	ld	r24, Z
    6556:	01 c0       	rjmp	.+2      	; 0x655a <vfprintf+0x36c>
    6558:	80 e3       	ldi	r24, 0x30	; 48
    655a:	01 50       	subi	r16, 0x01	; 1
    655c:	10 40       	sbci	r17, 0x00	; 0
    655e:	08 94       	sec
    6560:	e1 1c       	adc	r14, r1
    6562:	f1 1c       	adc	r15, r1
    6564:	0a 15       	cp	r16, r10
    6566:	1b 05       	cpc	r17, r11
    6568:	24 f0       	brlt	.+8      	; 0x6572 <vfprintf+0x384>
    656a:	90 e0       	ldi	r25, 0x00	; 0
    656c:	b3 01       	movw	r22, r6
    656e:	12 d4       	rcall	.+2084   	; 0x6d94 <fputc>
    6570:	e2 cf       	rjmp	.-60     	; 0x6536 <vfprintf+0x348>
    6572:	0c 15       	cp	r16, r12
    6574:	1d 05       	cpc	r17, r13
    6576:	39 f4       	brne	.+14     	; 0x6586 <vfprintf+0x398>
    6578:	9a 81       	ldd	r25, Y+2	; 0x02
    657a:	96 33       	cpi	r25, 0x36	; 54
    657c:	18 f4       	brcc	.+6      	; 0x6584 <vfprintf+0x396>
    657e:	95 33       	cpi	r25, 0x35	; 53
    6580:	11 f4       	brne	.+4      	; 0x6586 <vfprintf+0x398>
    6582:	24 fe       	sbrs	r2, 4
    6584:	81 e3       	ldi	r24, 0x31	; 49
    6586:	90 e0       	ldi	r25, 0x00	; 0
    6588:	45 c0       	rjmp	.+138    	; 0x6614 <vfprintf+0x426>
    658a:	8a 81       	ldd	r24, Y+2	; 0x02
    658c:	81 33       	cpi	r24, 0x31	; 49
    658e:	09 f0       	breq	.+2      	; 0x6592 <vfprintf+0x3a4>
    6590:	0f 7e       	andi	r16, 0xEF	; 239
    6592:	90 e0       	ldi	r25, 0x00	; 0
    6594:	b3 01       	movw	r22, r6
    6596:	fe d3       	rcall	.+2044   	; 0x6d94 <fputc>
    6598:	99 20       	and	r9, r9
    659a:	91 f0       	breq	.+36     	; 0x65c0 <vfprintf+0x3d2>
    659c:	8e e2       	ldi	r24, 0x2E	; 46
    659e:	90 e0       	ldi	r25, 0x00	; 0
    65a0:	b3 01       	movw	r22, r6
    65a2:	f8 d3       	rcall	.+2032   	; 0x6d94 <fputc>
    65a4:	12 e0       	ldi	r17, 0x02	; 2
    65a6:	e1 e0       	ldi	r30, 0x01	; 1
    65a8:	f0 e0       	ldi	r31, 0x00	; 0
    65aa:	ec 0f       	add	r30, r28
    65ac:	fd 1f       	adc	r31, r29
    65ae:	e1 0f       	add	r30, r17
    65b0:	f1 1d       	adc	r31, r1
    65b2:	1f 5f       	subi	r17, 0xFF	; 255
    65b4:	80 81       	ld	r24, Z
    65b6:	90 e0       	ldi	r25, 0x00	; 0
    65b8:	b3 01       	movw	r22, r6
    65ba:	ec d3       	rcall	.+2008   	; 0x6d94 <fputc>
    65bc:	9a 94       	dec	r9
    65be:	99 f7       	brne	.-26     	; 0x65a6 <vfprintf+0x3b8>
    65c0:	44 fc       	sbrc	r4, 4
    65c2:	03 c0       	rjmp	.+6      	; 0x65ca <vfprintf+0x3dc>
    65c4:	85 e6       	ldi	r24, 0x65	; 101
    65c6:	90 e0       	ldi	r25, 0x00	; 0
    65c8:	02 c0       	rjmp	.+4      	; 0x65ce <vfprintf+0x3e0>
    65ca:	85 e4       	ldi	r24, 0x45	; 69
    65cc:	90 e0       	ldi	r25, 0x00	; 0
    65ce:	b3 01       	movw	r22, r6
    65d0:	e1 d3       	rcall	.+1986   	; 0x6d94 <fputc>
    65d2:	d7 fc       	sbrc	r13, 7
    65d4:	05 c0       	rjmp	.+10     	; 0x65e0 <vfprintf+0x3f2>
    65d6:	c1 14       	cp	r12, r1
    65d8:	d1 04       	cpc	r13, r1
    65da:	41 f4       	brne	.+16     	; 0x65ec <vfprintf+0x3fe>
    65dc:	04 ff       	sbrs	r16, 4
    65de:	06 c0       	rjmp	.+12     	; 0x65ec <vfprintf+0x3fe>
    65e0:	d0 94       	com	r13
    65e2:	c1 94       	neg	r12
    65e4:	d1 08       	sbc	r13, r1
    65e6:	d3 94       	inc	r13
    65e8:	8d e2       	ldi	r24, 0x2D	; 45
    65ea:	01 c0       	rjmp	.+2      	; 0x65ee <vfprintf+0x400>
    65ec:	8b e2       	ldi	r24, 0x2B	; 43
    65ee:	90 e0       	ldi	r25, 0x00	; 0
    65f0:	b3 01       	movw	r22, r6
    65f2:	d0 d3       	rcall	.+1952   	; 0x6d94 <fputc>
    65f4:	80 e3       	ldi	r24, 0x30	; 48
    65f6:	05 c0       	rjmp	.+10     	; 0x6602 <vfprintf+0x414>
    65f8:	8f 5f       	subi	r24, 0xFF	; 255
    65fa:	26 ef       	ldi	r18, 0xF6	; 246
    65fc:	3f ef       	ldi	r19, 0xFF	; 255
    65fe:	c2 0e       	add	r12, r18
    6600:	d3 1e       	adc	r13, r19
    6602:	3a e0       	ldi	r19, 0x0A	; 10
    6604:	c3 16       	cp	r12, r19
    6606:	d1 04       	cpc	r13, r1
    6608:	bc f7       	brge	.-18     	; 0x65f8 <vfprintf+0x40a>
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	b3 01       	movw	r22, r6
    660e:	c2 d3       	rcall	.+1924   	; 0x6d94 <fputc>
    6610:	c6 01       	movw	r24, r12
    6612:	c0 96       	adiw	r24, 0x30	; 48
    6614:	b3 01       	movw	r22, r6
    6616:	be d3       	rcall	.+1916   	; 0x6d94 <fputc>
    6618:	cc 84       	ldd	r12, Y+12	; 0x0c
    661a:	dd 84       	ldd	r13, Y+13	; 0x0d
    661c:	46 c1       	rjmp	.+652    	; 0x68aa <vfprintf+0x6bc>
    661e:	93 36       	cpi	r25, 0x63	; 99
    6620:	31 f0       	breq	.+12     	; 0x662e <vfprintf+0x440>
    6622:	93 37       	cpi	r25, 0x73	; 115
    6624:	99 f0       	breq	.+38     	; 0x664c <vfprintf+0x45e>
    6626:	93 35       	cpi	r25, 0x53	; 83
    6628:	09 f0       	breq	.+2      	; 0x662c <vfprintf+0x43e>
    662a:	55 c0       	rjmp	.+170    	; 0x66d6 <vfprintf+0x4e8>
    662c:	22 c0       	rjmp	.+68     	; 0x6672 <vfprintf+0x484>
    662e:	f6 01       	movw	r30, r12
    6630:	80 81       	ld	r24, Z
    6632:	89 83       	std	Y+1, r24	; 0x01
    6634:	5e 01       	movw	r10, r28
    6636:	08 94       	sec
    6638:	a1 1c       	adc	r10, r1
    663a:	b1 1c       	adc	r11, r1
    663c:	22 e0       	ldi	r18, 0x02	; 2
    663e:	30 e0       	ldi	r19, 0x00	; 0
    6640:	c2 0e       	add	r12, r18
    6642:	d3 1e       	adc	r13, r19
    6644:	21 e0       	ldi	r18, 0x01	; 1
    6646:	e2 2e       	mov	r14, r18
    6648:	f1 2c       	mov	r15, r1
    664a:	11 c0       	rjmp	.+34     	; 0x666e <vfprintf+0x480>
    664c:	f6 01       	movw	r30, r12
    664e:	a0 80       	ld	r10, Z
    6650:	b1 80       	ldd	r11, Z+1	; 0x01
    6652:	16 fd       	sbrc	r17, 6
    6654:	03 c0       	rjmp	.+6      	; 0x665c <vfprintf+0x46e>
    6656:	6f ef       	ldi	r22, 0xFF	; 255
    6658:	7f ef       	ldi	r23, 0xFF	; 255
    665a:	02 c0       	rjmp	.+4      	; 0x6660 <vfprintf+0x472>
    665c:	69 2d       	mov	r22, r9
    665e:	70 e0       	ldi	r23, 0x00	; 0
    6660:	22 e0       	ldi	r18, 0x02	; 2
    6662:	30 e0       	ldi	r19, 0x00	; 0
    6664:	c2 0e       	add	r12, r18
    6666:	d3 1e       	adc	r13, r19
    6668:	c5 01       	movw	r24, r10
    666a:	89 d3       	rcall	.+1810   	; 0x6d7e <strnlen>
    666c:	7c 01       	movw	r14, r24
    666e:	1f 77       	andi	r17, 0x7F	; 127
    6670:	12 c0       	rjmp	.+36     	; 0x6696 <vfprintf+0x4a8>
    6672:	f6 01       	movw	r30, r12
    6674:	a0 80       	ld	r10, Z
    6676:	b1 80       	ldd	r11, Z+1	; 0x01
    6678:	16 fd       	sbrc	r17, 6
    667a:	03 c0       	rjmp	.+6      	; 0x6682 <vfprintf+0x494>
    667c:	6f ef       	ldi	r22, 0xFF	; 255
    667e:	7f ef       	ldi	r23, 0xFF	; 255
    6680:	02 c0       	rjmp	.+4      	; 0x6686 <vfprintf+0x498>
    6682:	69 2d       	mov	r22, r9
    6684:	70 e0       	ldi	r23, 0x00	; 0
    6686:	22 e0       	ldi	r18, 0x02	; 2
    6688:	30 e0       	ldi	r19, 0x00	; 0
    668a:	c2 0e       	add	r12, r18
    668c:	d3 1e       	adc	r13, r19
    668e:	c5 01       	movw	r24, r10
    6690:	6b d3       	rcall	.+1750   	; 0x6d68 <strnlen_P>
    6692:	7c 01       	movw	r14, r24
    6694:	10 68       	ori	r17, 0x80	; 128
    6696:	13 ff       	sbrs	r17, 3
    6698:	06 c0       	rjmp	.+12     	; 0x66a6 <vfprintf+0x4b8>
    669a:	19 c0       	rjmp	.+50     	; 0x66ce <vfprintf+0x4e0>
    669c:	80 e2       	ldi	r24, 0x20	; 32
    669e:	90 e0       	ldi	r25, 0x00	; 0
    66a0:	b3 01       	movw	r22, r6
    66a2:	78 d3       	rcall	.+1776   	; 0x6d94 <fputc>
    66a4:	8a 94       	dec	r8
    66a6:	88 2d       	mov	r24, r8
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	e8 16       	cp	r14, r24
    66ac:	f9 06       	cpc	r15, r25
    66ae:	b0 f3       	brcs	.-20     	; 0x669c <vfprintf+0x4ae>
    66b0:	0e c0       	rjmp	.+28     	; 0x66ce <vfprintf+0x4e0>
    66b2:	f5 01       	movw	r30, r10
    66b4:	17 fd       	sbrc	r17, 7
    66b6:	85 91       	lpm	r24, Z+
    66b8:	17 ff       	sbrs	r17, 7
    66ba:	81 91       	ld	r24, Z+
    66bc:	5f 01       	movw	r10, r30
    66be:	90 e0       	ldi	r25, 0x00	; 0
    66c0:	b3 01       	movw	r22, r6
    66c2:	68 d3       	rcall	.+1744   	; 0x6d94 <fputc>
    66c4:	81 10       	cpse	r8, r1
    66c6:	8a 94       	dec	r8
    66c8:	08 94       	sec
    66ca:	e1 08       	sbc	r14, r1
    66cc:	f1 08       	sbc	r15, r1
    66ce:	e1 14       	cp	r14, r1
    66d0:	f1 04       	cpc	r15, r1
    66d2:	79 f7       	brne	.-34     	; 0x66b2 <vfprintf+0x4c4>
    66d4:	ea c0       	rjmp	.+468    	; 0x68aa <vfprintf+0x6bc>
    66d6:	94 36       	cpi	r25, 0x64	; 100
    66d8:	11 f0       	breq	.+4      	; 0x66de <vfprintf+0x4f0>
    66da:	99 36       	cpi	r25, 0x69	; 105
    66dc:	81 f5       	brne	.+96     	; 0x673e <vfprintf+0x550>
    66de:	17 ff       	sbrs	r17, 7
    66e0:	08 c0       	rjmp	.+16     	; 0x66f2 <vfprintf+0x504>
    66e2:	f6 01       	movw	r30, r12
    66e4:	20 81       	ld	r18, Z
    66e6:	31 81       	ldd	r19, Z+1	; 0x01
    66e8:	42 81       	ldd	r20, Z+2	; 0x02
    66ea:	53 81       	ldd	r21, Z+3	; 0x03
    66ec:	84 e0       	ldi	r24, 0x04	; 4
    66ee:	90 e0       	ldi	r25, 0x00	; 0
    66f0:	0a c0       	rjmp	.+20     	; 0x6706 <vfprintf+0x518>
    66f2:	f6 01       	movw	r30, r12
    66f4:	80 81       	ld	r24, Z
    66f6:	91 81       	ldd	r25, Z+1	; 0x01
    66f8:	9c 01       	movw	r18, r24
    66fa:	44 27       	eor	r20, r20
    66fc:	37 fd       	sbrc	r19, 7
    66fe:	40 95       	com	r20
    6700:	54 2f       	mov	r21, r20
    6702:	82 e0       	ldi	r24, 0x02	; 2
    6704:	90 e0       	ldi	r25, 0x00	; 0
    6706:	c8 0e       	add	r12, r24
    6708:	d9 1e       	adc	r13, r25
    670a:	9f e6       	ldi	r25, 0x6F	; 111
    670c:	f9 2e       	mov	r15, r25
    670e:	f1 22       	and	r15, r17
    6710:	57 ff       	sbrs	r21, 7
    6712:	09 c0       	rjmp	.+18     	; 0x6726 <vfprintf+0x538>
    6714:	50 95       	com	r21
    6716:	40 95       	com	r20
    6718:	30 95       	com	r19
    671a:	21 95       	neg	r18
    671c:	3f 4f       	sbci	r19, 0xFF	; 255
    671e:	4f 4f       	sbci	r20, 0xFF	; 255
    6720:	5f 4f       	sbci	r21, 0xFF	; 255
    6722:	90 e8       	ldi	r25, 0x80	; 128
    6724:	f9 2a       	or	r15, r25
    6726:	ca 01       	movw	r24, r20
    6728:	b9 01       	movw	r22, r18
    672a:	ae 01       	movw	r20, r28
    672c:	4f 5f       	subi	r20, 0xFF	; 255
    672e:	5f 4f       	sbci	r21, 0xFF	; 255
    6730:	2a e0       	ldi	r18, 0x0A	; 10
    6732:	30 e0       	ldi	r19, 0x00	; 0
    6734:	a2 d3       	rcall	.+1860   	; 0x6e7a <__ultoa_invert>
    6736:	e8 2e       	mov	r14, r24
    6738:	e8 89       	ldd	r30, Y+16	; 0x10
    673a:	ee 1a       	sub	r14, r30
    673c:	40 c0       	rjmp	.+128    	; 0x67be <vfprintf+0x5d0>
    673e:	95 37       	cpi	r25, 0x75	; 117
    6740:	21 f4       	brne	.+8      	; 0x674a <vfprintf+0x55c>
    6742:	1f 7e       	andi	r17, 0xEF	; 239
    6744:	2a e0       	ldi	r18, 0x0A	; 10
    6746:	30 e0       	ldi	r19, 0x00	; 0
    6748:	1c c0       	rjmp	.+56     	; 0x6782 <vfprintf+0x594>
    674a:	19 7f       	andi	r17, 0xF9	; 249
    674c:	9f 36       	cpi	r25, 0x6F	; 111
    674e:	61 f0       	breq	.+24     	; 0x6768 <vfprintf+0x57a>
    6750:	90 37       	cpi	r25, 0x70	; 112
    6752:	20 f4       	brcc	.+8      	; 0x675c <vfprintf+0x56e>
    6754:	98 35       	cpi	r25, 0x58	; 88
    6756:	09 f0       	breq	.+2      	; 0x675a <vfprintf+0x56c>
    6758:	ab c0       	rjmp	.+342    	; 0x68b0 <vfprintf+0x6c2>
    675a:	0f c0       	rjmp	.+30     	; 0x677a <vfprintf+0x58c>
    675c:	90 37       	cpi	r25, 0x70	; 112
    675e:	39 f0       	breq	.+14     	; 0x676e <vfprintf+0x580>
    6760:	98 37       	cpi	r25, 0x78	; 120
    6762:	09 f0       	breq	.+2      	; 0x6766 <vfprintf+0x578>
    6764:	a5 c0       	rjmp	.+330    	; 0x68b0 <vfprintf+0x6c2>
    6766:	04 c0       	rjmp	.+8      	; 0x6770 <vfprintf+0x582>
    6768:	28 e0       	ldi	r18, 0x08	; 8
    676a:	30 e0       	ldi	r19, 0x00	; 0
    676c:	0a c0       	rjmp	.+20     	; 0x6782 <vfprintf+0x594>
    676e:	10 61       	ori	r17, 0x10	; 16
    6770:	14 fd       	sbrc	r17, 4
    6772:	14 60       	ori	r17, 0x04	; 4
    6774:	20 e1       	ldi	r18, 0x10	; 16
    6776:	30 e0       	ldi	r19, 0x00	; 0
    6778:	04 c0       	rjmp	.+8      	; 0x6782 <vfprintf+0x594>
    677a:	14 fd       	sbrc	r17, 4
    677c:	16 60       	ori	r17, 0x06	; 6
    677e:	20 e1       	ldi	r18, 0x10	; 16
    6780:	32 e0       	ldi	r19, 0x02	; 2
    6782:	17 ff       	sbrs	r17, 7
    6784:	08 c0       	rjmp	.+16     	; 0x6796 <vfprintf+0x5a8>
    6786:	f6 01       	movw	r30, r12
    6788:	60 81       	ld	r22, Z
    678a:	71 81       	ldd	r23, Z+1	; 0x01
    678c:	82 81       	ldd	r24, Z+2	; 0x02
    678e:	93 81       	ldd	r25, Z+3	; 0x03
    6790:	44 e0       	ldi	r20, 0x04	; 4
    6792:	50 e0       	ldi	r21, 0x00	; 0
    6794:	08 c0       	rjmp	.+16     	; 0x67a6 <vfprintf+0x5b8>
    6796:	f6 01       	movw	r30, r12
    6798:	80 81       	ld	r24, Z
    679a:	91 81       	ldd	r25, Z+1	; 0x01
    679c:	bc 01       	movw	r22, r24
    679e:	80 e0       	ldi	r24, 0x00	; 0
    67a0:	90 e0       	ldi	r25, 0x00	; 0
    67a2:	42 e0       	ldi	r20, 0x02	; 2
    67a4:	50 e0       	ldi	r21, 0x00	; 0
    67a6:	c4 0e       	add	r12, r20
    67a8:	d5 1e       	adc	r13, r21
    67aa:	ae 01       	movw	r20, r28
    67ac:	4f 5f       	subi	r20, 0xFF	; 255
    67ae:	5f 4f       	sbci	r21, 0xFF	; 255
    67b0:	64 d3       	rcall	.+1736   	; 0x6e7a <__ultoa_invert>
    67b2:	e8 2e       	mov	r14, r24
    67b4:	58 89       	ldd	r21, Y+16	; 0x10
    67b6:	e5 1a       	sub	r14, r21
    67b8:	8f e7       	ldi	r24, 0x7F	; 127
    67ba:	f8 2e       	mov	r15, r24
    67bc:	f1 22       	and	r15, r17
    67be:	f6 fe       	sbrs	r15, 6
    67c0:	0b c0       	rjmp	.+22     	; 0x67d8 <vfprintf+0x5ea>
    67c2:	8e ef       	ldi	r24, 0xFE	; 254
    67c4:	f8 22       	and	r15, r24
    67c6:	e9 14       	cp	r14, r9
    67c8:	38 f4       	brcc	.+14     	; 0x67d8 <vfprintf+0x5ea>
    67ca:	f4 fe       	sbrs	r15, 4
    67cc:	07 c0       	rjmp	.+14     	; 0x67dc <vfprintf+0x5ee>
    67ce:	f2 fc       	sbrc	r15, 2
    67d0:	05 c0       	rjmp	.+10     	; 0x67dc <vfprintf+0x5ee>
    67d2:	9f ee       	ldi	r25, 0xEF	; 239
    67d4:	f9 22       	and	r15, r25
    67d6:	02 c0       	rjmp	.+4      	; 0x67dc <vfprintf+0x5ee>
    67d8:	1e 2d       	mov	r17, r14
    67da:	01 c0       	rjmp	.+2      	; 0x67de <vfprintf+0x5f0>
    67dc:	19 2d       	mov	r17, r9
    67de:	f4 fe       	sbrs	r15, 4
    67e0:	0d c0       	rjmp	.+26     	; 0x67fc <vfprintf+0x60e>
    67e2:	fe 01       	movw	r30, r28
    67e4:	ee 0d       	add	r30, r14
    67e6:	f1 1d       	adc	r31, r1
    67e8:	80 81       	ld	r24, Z
    67ea:	80 33       	cpi	r24, 0x30	; 48
    67ec:	19 f4       	brne	.+6      	; 0x67f4 <vfprintf+0x606>
    67ee:	e9 ee       	ldi	r30, 0xE9	; 233
    67f0:	fe 22       	and	r15, r30
    67f2:	08 c0       	rjmp	.+16     	; 0x6804 <vfprintf+0x616>
    67f4:	1f 5f       	subi	r17, 0xFF	; 255
    67f6:	f2 fe       	sbrs	r15, 2
    67f8:	05 c0       	rjmp	.+10     	; 0x6804 <vfprintf+0x616>
    67fa:	03 c0       	rjmp	.+6      	; 0x6802 <vfprintf+0x614>
    67fc:	8f 2d       	mov	r24, r15
    67fe:	86 78       	andi	r24, 0x86	; 134
    6800:	09 f0       	breq	.+2      	; 0x6804 <vfprintf+0x616>
    6802:	1f 5f       	subi	r17, 0xFF	; 255
    6804:	0f 2d       	mov	r16, r15
    6806:	f3 fc       	sbrc	r15, 3
    6808:	13 c0       	rjmp	.+38     	; 0x6830 <vfprintf+0x642>
    680a:	f0 fe       	sbrs	r15, 0
    680c:	0e c0       	rjmp	.+28     	; 0x682a <vfprintf+0x63c>
    680e:	18 15       	cp	r17, r8
    6810:	10 f0       	brcs	.+4      	; 0x6816 <vfprintf+0x628>
    6812:	9e 2c       	mov	r9, r14
    6814:	0a c0       	rjmp	.+20     	; 0x682a <vfprintf+0x63c>
    6816:	9e 2c       	mov	r9, r14
    6818:	98 0c       	add	r9, r8
    681a:	91 1a       	sub	r9, r17
    681c:	18 2d       	mov	r17, r8
    681e:	05 c0       	rjmp	.+10     	; 0x682a <vfprintf+0x63c>
    6820:	80 e2       	ldi	r24, 0x20	; 32
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	b3 01       	movw	r22, r6
    6826:	b6 d2       	rcall	.+1388   	; 0x6d94 <fputc>
    6828:	1f 5f       	subi	r17, 0xFF	; 255
    682a:	18 15       	cp	r17, r8
    682c:	c8 f3       	brcs	.-14     	; 0x6820 <vfprintf+0x632>
    682e:	04 c0       	rjmp	.+8      	; 0x6838 <vfprintf+0x64a>
    6830:	18 15       	cp	r17, r8
    6832:	10 f4       	brcc	.+4      	; 0x6838 <vfprintf+0x64a>
    6834:	81 1a       	sub	r8, r17
    6836:	01 c0       	rjmp	.+2      	; 0x683a <vfprintf+0x64c>
    6838:	88 24       	eor	r8, r8
    683a:	04 ff       	sbrs	r16, 4
    683c:	0e c0       	rjmp	.+28     	; 0x685a <vfprintf+0x66c>
    683e:	80 e3       	ldi	r24, 0x30	; 48
    6840:	90 e0       	ldi	r25, 0x00	; 0
    6842:	b3 01       	movw	r22, r6
    6844:	a7 d2       	rcall	.+1358   	; 0x6d94 <fputc>
    6846:	02 ff       	sbrs	r16, 2
    6848:	1b c0       	rjmp	.+54     	; 0x6880 <vfprintf+0x692>
    684a:	01 fd       	sbrc	r16, 1
    684c:	03 c0       	rjmp	.+6      	; 0x6854 <vfprintf+0x666>
    684e:	88 e7       	ldi	r24, 0x78	; 120
    6850:	90 e0       	ldi	r25, 0x00	; 0
    6852:	0e c0       	rjmp	.+28     	; 0x6870 <vfprintf+0x682>
    6854:	88 e5       	ldi	r24, 0x58	; 88
    6856:	90 e0       	ldi	r25, 0x00	; 0
    6858:	0b c0       	rjmp	.+22     	; 0x6870 <vfprintf+0x682>
    685a:	80 2f       	mov	r24, r16
    685c:	86 78       	andi	r24, 0x86	; 134
    685e:	81 f0       	breq	.+32     	; 0x6880 <vfprintf+0x692>
    6860:	01 ff       	sbrs	r16, 1
    6862:	02 c0       	rjmp	.+4      	; 0x6868 <vfprintf+0x67a>
    6864:	8b e2       	ldi	r24, 0x2B	; 43
    6866:	01 c0       	rjmp	.+2      	; 0x686a <vfprintf+0x67c>
    6868:	80 e2       	ldi	r24, 0x20	; 32
    686a:	f7 fc       	sbrc	r15, 7
    686c:	8d e2       	ldi	r24, 0x2D	; 45
    686e:	90 e0       	ldi	r25, 0x00	; 0
    6870:	b3 01       	movw	r22, r6
    6872:	90 d2       	rcall	.+1312   	; 0x6d94 <fputc>
    6874:	05 c0       	rjmp	.+10     	; 0x6880 <vfprintf+0x692>
    6876:	80 e3       	ldi	r24, 0x30	; 48
    6878:	90 e0       	ldi	r25, 0x00	; 0
    687a:	b3 01       	movw	r22, r6
    687c:	8b d2       	rcall	.+1302   	; 0x6d94 <fputc>
    687e:	9a 94       	dec	r9
    6880:	e9 14       	cp	r14, r9
    6882:	c8 f3       	brcs	.-14     	; 0x6876 <vfprintf+0x688>
    6884:	ea 94       	dec	r14
    6886:	e1 e0       	ldi	r30, 0x01	; 1
    6888:	f0 e0       	ldi	r31, 0x00	; 0
    688a:	ec 0f       	add	r30, r28
    688c:	fd 1f       	adc	r31, r29
    688e:	ee 0d       	add	r30, r14
    6890:	f1 1d       	adc	r31, r1
    6892:	80 81       	ld	r24, Z
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	b3 01       	movw	r22, r6
    6898:	7d d2       	rcall	.+1274   	; 0x6d94 <fputc>
    689a:	ee 20       	and	r14, r14
    689c:	99 f7       	brne	.-26     	; 0x6884 <vfprintf+0x696>
    689e:	05 c0       	rjmp	.+10     	; 0x68aa <vfprintf+0x6bc>
    68a0:	80 e2       	ldi	r24, 0x20	; 32
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	b3 01       	movw	r22, r6
    68a6:	76 d2       	rcall	.+1260   	; 0x6d94 <fputc>
    68a8:	8a 94       	dec	r8
    68aa:	88 20       	and	r8, r8
    68ac:	c9 f7       	brne	.-14     	; 0x68a0 <vfprintf+0x6b2>
    68ae:	b6 cc       	rjmp	.-1684   	; 0x621c <vfprintf+0x2e>
    68b0:	f3 01       	movw	r30, r6
    68b2:	66 81       	ldd	r22, Z+6	; 0x06
    68b4:	77 81       	ldd	r23, Z+7	; 0x07
    68b6:	cb 01       	movw	r24, r22
    68b8:	61 96       	adiw	r28, 0x11	; 17
    68ba:	e2 e1       	ldi	r30, 0x12	; 18
    68bc:	5d c0       	rjmp	.+186    	; 0x6978 <__epilogue_restores__>

000068be <__mulsi3>:
    68be:	62 9f       	mul	r22, r18
    68c0:	d0 01       	movw	r26, r0
    68c2:	73 9f       	mul	r23, r19
    68c4:	f0 01       	movw	r30, r0
    68c6:	82 9f       	mul	r24, r18
    68c8:	e0 0d       	add	r30, r0
    68ca:	f1 1d       	adc	r31, r1
    68cc:	64 9f       	mul	r22, r20
    68ce:	e0 0d       	add	r30, r0
    68d0:	f1 1d       	adc	r31, r1
    68d2:	92 9f       	mul	r25, r18
    68d4:	f0 0d       	add	r31, r0
    68d6:	83 9f       	mul	r24, r19
    68d8:	f0 0d       	add	r31, r0
    68da:	74 9f       	mul	r23, r20
    68dc:	f0 0d       	add	r31, r0
    68de:	65 9f       	mul	r22, r21
    68e0:	f0 0d       	add	r31, r0
    68e2:	99 27       	eor	r25, r25
    68e4:	72 9f       	mul	r23, r18
    68e6:	b0 0d       	add	r27, r0
    68e8:	e1 1d       	adc	r30, r1
    68ea:	f9 1f       	adc	r31, r25
    68ec:	63 9f       	mul	r22, r19
    68ee:	b0 0d       	add	r27, r0
    68f0:	e1 1d       	adc	r30, r1
    68f2:	f9 1f       	adc	r31, r25
    68f4:	bd 01       	movw	r22, r26
    68f6:	cf 01       	movw	r24, r30
    68f8:	11 24       	eor	r1, r1
    68fa:	08 95       	ret

000068fc <__udivmodsi4>:
    68fc:	a1 e2       	ldi	r26, 0x21	; 33
    68fe:	1a 2e       	mov	r1, r26
    6900:	aa 1b       	sub	r26, r26
    6902:	bb 1b       	sub	r27, r27
    6904:	fd 01       	movw	r30, r26
    6906:	0d c0       	rjmp	.+26     	; 0x6922 <__udivmodsi4_ep>

00006908 <__udivmodsi4_loop>:
    6908:	aa 1f       	adc	r26, r26
    690a:	bb 1f       	adc	r27, r27
    690c:	ee 1f       	adc	r30, r30
    690e:	ff 1f       	adc	r31, r31
    6910:	a2 17       	cp	r26, r18
    6912:	b3 07       	cpc	r27, r19
    6914:	e4 07       	cpc	r30, r20
    6916:	f5 07       	cpc	r31, r21
    6918:	20 f0       	brcs	.+8      	; 0x6922 <__udivmodsi4_ep>
    691a:	a2 1b       	sub	r26, r18
    691c:	b3 0b       	sbc	r27, r19
    691e:	e4 0b       	sbc	r30, r20
    6920:	f5 0b       	sbc	r31, r21

00006922 <__udivmodsi4_ep>:
    6922:	66 1f       	adc	r22, r22
    6924:	77 1f       	adc	r23, r23
    6926:	88 1f       	adc	r24, r24
    6928:	99 1f       	adc	r25, r25
    692a:	1a 94       	dec	r1
    692c:	69 f7       	brne	.-38     	; 0x6908 <__udivmodsi4_loop>
    692e:	60 95       	com	r22
    6930:	70 95       	com	r23
    6932:	80 95       	com	r24
    6934:	90 95       	com	r25
    6936:	9b 01       	movw	r18, r22
    6938:	ac 01       	movw	r20, r24
    693a:	bd 01       	movw	r22, r26
    693c:	cf 01       	movw	r24, r30
    693e:	08 95       	ret

00006940 <__prologue_saves__>:
    6940:	2f 92       	push	r2
    6942:	3f 92       	push	r3
    6944:	4f 92       	push	r4
    6946:	5f 92       	push	r5
    6948:	6f 92       	push	r6
    694a:	7f 92       	push	r7
    694c:	8f 92       	push	r8
    694e:	9f 92       	push	r9
    6950:	af 92       	push	r10
    6952:	bf 92       	push	r11
    6954:	cf 92       	push	r12
    6956:	df 92       	push	r13
    6958:	ef 92       	push	r14
    695a:	ff 92       	push	r15
    695c:	0f 93       	push	r16
    695e:	1f 93       	push	r17
    6960:	cf 93       	push	r28
    6962:	df 93       	push	r29
    6964:	cd b7       	in	r28, 0x3d	; 61
    6966:	de b7       	in	r29, 0x3e	; 62
    6968:	ca 1b       	sub	r28, r26
    696a:	db 0b       	sbc	r29, r27
    696c:	0f b6       	in	r0, 0x3f	; 63
    696e:	f8 94       	cli
    6970:	de bf       	out	0x3e, r29	; 62
    6972:	0f be       	out	0x3f, r0	; 63
    6974:	cd bf       	out	0x3d, r28	; 61
    6976:	09 94       	ijmp

00006978 <__epilogue_restores__>:
    6978:	2a 88       	ldd	r2, Y+18	; 0x12
    697a:	39 88       	ldd	r3, Y+17	; 0x11
    697c:	48 88       	ldd	r4, Y+16	; 0x10
    697e:	5f 84       	ldd	r5, Y+15	; 0x0f
    6980:	6e 84       	ldd	r6, Y+14	; 0x0e
    6982:	7d 84       	ldd	r7, Y+13	; 0x0d
    6984:	8c 84       	ldd	r8, Y+12	; 0x0c
    6986:	9b 84       	ldd	r9, Y+11	; 0x0b
    6988:	aa 84       	ldd	r10, Y+10	; 0x0a
    698a:	b9 84       	ldd	r11, Y+9	; 0x09
    698c:	c8 84       	ldd	r12, Y+8	; 0x08
    698e:	df 80       	ldd	r13, Y+7	; 0x07
    6990:	ee 80       	ldd	r14, Y+6	; 0x06
    6992:	fd 80       	ldd	r15, Y+5	; 0x05
    6994:	0c 81       	ldd	r16, Y+4	; 0x04
    6996:	1b 81       	ldd	r17, Y+3	; 0x03
    6998:	aa 81       	ldd	r26, Y+2	; 0x02
    699a:	b9 81       	ldd	r27, Y+1	; 0x01
    699c:	ce 0f       	add	r28, r30
    699e:	d1 1d       	adc	r29, r1
    69a0:	0f b6       	in	r0, 0x3f	; 63
    69a2:	f8 94       	cli
    69a4:	de bf       	out	0x3e, r29	; 62
    69a6:	0f be       	out	0x3f, r0	; 63
    69a8:	cd bf       	out	0x3d, r28	; 61
    69aa:	ed 01       	movw	r28, r26
    69ac:	08 95       	ret

000069ae <malloc>:
    69ae:	cf 93       	push	r28
    69b0:	df 93       	push	r29
    69b2:	bc 01       	movw	r22, r24
    69b4:	82 30       	cpi	r24, 0x02	; 2
    69b6:	91 05       	cpc	r25, r1
    69b8:	10 f4       	brcc	.+4      	; 0x69be <malloc+0x10>
    69ba:	62 e0       	ldi	r22, 0x02	; 2
    69bc:	70 e0       	ldi	r23, 0x00	; 0
    69be:	a0 91 28 08 	lds	r26, 0x0828
    69c2:	b0 91 29 08 	lds	r27, 0x0829
    69c6:	ed 01       	movw	r28, r26
    69c8:	e0 e0       	ldi	r30, 0x00	; 0
    69ca:	f0 e0       	ldi	r31, 0x00	; 0
    69cc:	40 e0       	ldi	r20, 0x00	; 0
    69ce:	50 e0       	ldi	r21, 0x00	; 0
    69d0:	21 c0       	rjmp	.+66     	; 0x6a14 <malloc+0x66>
    69d2:	88 81       	ld	r24, Y
    69d4:	99 81       	ldd	r25, Y+1	; 0x01
    69d6:	86 17       	cp	r24, r22
    69d8:	97 07       	cpc	r25, r23
    69da:	69 f4       	brne	.+26     	; 0x69f6 <malloc+0x48>
    69dc:	8a 81       	ldd	r24, Y+2	; 0x02
    69de:	9b 81       	ldd	r25, Y+3	; 0x03
    69e0:	30 97       	sbiw	r30, 0x00	; 0
    69e2:	19 f0       	breq	.+6      	; 0x69ea <malloc+0x3c>
    69e4:	93 83       	std	Z+3, r25	; 0x03
    69e6:	82 83       	std	Z+2, r24	; 0x02
    69e8:	04 c0       	rjmp	.+8      	; 0x69f2 <malloc+0x44>
    69ea:	90 93 29 08 	sts	0x0829, r25
    69ee:	80 93 28 08 	sts	0x0828, r24
    69f2:	fe 01       	movw	r30, r28
    69f4:	34 c0       	rjmp	.+104    	; 0x6a5e <malloc+0xb0>
    69f6:	68 17       	cp	r22, r24
    69f8:	79 07       	cpc	r23, r25
    69fa:	38 f4       	brcc	.+14     	; 0x6a0a <malloc+0x5c>
    69fc:	41 15       	cp	r20, r1
    69fe:	51 05       	cpc	r21, r1
    6a00:	19 f0       	breq	.+6      	; 0x6a08 <malloc+0x5a>
    6a02:	84 17       	cp	r24, r20
    6a04:	95 07       	cpc	r25, r21
    6a06:	08 f4       	brcc	.+2      	; 0x6a0a <malloc+0x5c>
    6a08:	ac 01       	movw	r20, r24
    6a0a:	fe 01       	movw	r30, r28
    6a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    6a10:	9c 01       	movw	r18, r24
    6a12:	e9 01       	movw	r28, r18
    6a14:	20 97       	sbiw	r28, 0x00	; 0
    6a16:	e9 f6       	brne	.-70     	; 0x69d2 <malloc+0x24>
    6a18:	41 15       	cp	r20, r1
    6a1a:	51 05       	cpc	r21, r1
    6a1c:	a9 f1       	breq	.+106    	; 0x6a88 <malloc+0xda>
    6a1e:	ca 01       	movw	r24, r20
    6a20:	86 1b       	sub	r24, r22
    6a22:	97 0b       	sbc	r25, r23
    6a24:	04 97       	sbiw	r24, 0x04	; 4
    6a26:	08 f4       	brcc	.+2      	; 0x6a2a <malloc+0x7c>
    6a28:	ba 01       	movw	r22, r20
    6a2a:	e0 e0       	ldi	r30, 0x00	; 0
    6a2c:	f0 e0       	ldi	r31, 0x00	; 0
    6a2e:	2a c0       	rjmp	.+84     	; 0x6a84 <malloc+0xd6>
    6a30:	8d 91       	ld	r24, X+
    6a32:	9c 91       	ld	r25, X
    6a34:	11 97       	sbiw	r26, 0x01	; 1
    6a36:	84 17       	cp	r24, r20
    6a38:	95 07       	cpc	r25, r21
    6a3a:	f9 f4       	brne	.+62     	; 0x6a7a <malloc+0xcc>
    6a3c:	64 17       	cp	r22, r20
    6a3e:	75 07       	cpc	r23, r21
    6a40:	81 f4       	brne	.+32     	; 0x6a62 <malloc+0xb4>
    6a42:	12 96       	adiw	r26, 0x02	; 2
    6a44:	8d 91       	ld	r24, X+
    6a46:	9c 91       	ld	r25, X
    6a48:	13 97       	sbiw	r26, 0x03	; 3
    6a4a:	30 97       	sbiw	r30, 0x00	; 0
    6a4c:	19 f0       	breq	.+6      	; 0x6a54 <malloc+0xa6>
    6a4e:	93 83       	std	Z+3, r25	; 0x03
    6a50:	82 83       	std	Z+2, r24	; 0x02
    6a52:	04 c0       	rjmp	.+8      	; 0x6a5c <malloc+0xae>
    6a54:	90 93 29 08 	sts	0x0829, r25
    6a58:	80 93 28 08 	sts	0x0828, r24
    6a5c:	fd 01       	movw	r30, r26
    6a5e:	32 96       	adiw	r30, 0x02	; 2
    6a60:	4f c0       	rjmp	.+158    	; 0x6b00 <malloc+0x152>
    6a62:	ca 01       	movw	r24, r20
    6a64:	86 1b       	sub	r24, r22
    6a66:	97 0b       	sbc	r25, r23
    6a68:	fd 01       	movw	r30, r26
    6a6a:	e8 0f       	add	r30, r24
    6a6c:	f9 1f       	adc	r31, r25
    6a6e:	61 93       	st	Z+, r22
    6a70:	71 93       	st	Z+, r23
    6a72:	02 97       	sbiw	r24, 0x02	; 2
    6a74:	8d 93       	st	X+, r24
    6a76:	9c 93       	st	X, r25
    6a78:	43 c0       	rjmp	.+134    	; 0x6b00 <malloc+0x152>
    6a7a:	fd 01       	movw	r30, r26
    6a7c:	82 81       	ldd	r24, Z+2	; 0x02
    6a7e:	93 81       	ldd	r25, Z+3	; 0x03
    6a80:	9c 01       	movw	r18, r24
    6a82:	d9 01       	movw	r26, r18
    6a84:	10 97       	sbiw	r26, 0x00	; 0
    6a86:	a1 f6       	brne	.-88     	; 0x6a30 <malloc+0x82>
    6a88:	80 91 26 08 	lds	r24, 0x0826
    6a8c:	90 91 27 08 	lds	r25, 0x0827
    6a90:	89 2b       	or	r24, r25
    6a92:	41 f4       	brne	.+16     	; 0x6aa4 <malloc+0xf6>
    6a94:	80 91 5a 04 	lds	r24, 0x045A
    6a98:	90 91 5b 04 	lds	r25, 0x045B
    6a9c:	90 93 27 08 	sts	0x0827, r25
    6aa0:	80 93 26 08 	sts	0x0826, r24
    6aa4:	40 91 5c 04 	lds	r20, 0x045C
    6aa8:	50 91 5d 04 	lds	r21, 0x045D
    6aac:	41 15       	cp	r20, r1
    6aae:	51 05       	cpc	r21, r1
    6ab0:	41 f4       	brne	.+16     	; 0x6ac2 <malloc+0x114>
    6ab2:	4d b7       	in	r20, 0x3d	; 61
    6ab4:	5e b7       	in	r21, 0x3e	; 62
    6ab6:	80 91 58 04 	lds	r24, 0x0458
    6aba:	90 91 59 04 	lds	r25, 0x0459
    6abe:	48 1b       	sub	r20, r24
    6ac0:	59 0b       	sbc	r21, r25
    6ac2:	20 91 26 08 	lds	r18, 0x0826
    6ac6:	30 91 27 08 	lds	r19, 0x0827
    6aca:	24 17       	cp	r18, r20
    6acc:	35 07       	cpc	r19, r21
    6ace:	b0 f4       	brcc	.+44     	; 0x6afc <malloc+0x14e>
    6ad0:	ca 01       	movw	r24, r20
    6ad2:	82 1b       	sub	r24, r18
    6ad4:	93 0b       	sbc	r25, r19
    6ad6:	86 17       	cp	r24, r22
    6ad8:	97 07       	cpc	r25, r23
    6ada:	80 f0       	brcs	.+32     	; 0x6afc <malloc+0x14e>
    6adc:	ab 01       	movw	r20, r22
    6ade:	4e 5f       	subi	r20, 0xFE	; 254
    6ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    6ae2:	84 17       	cp	r24, r20
    6ae4:	95 07       	cpc	r25, r21
    6ae6:	50 f0       	brcs	.+20     	; 0x6afc <malloc+0x14e>
    6ae8:	42 0f       	add	r20, r18
    6aea:	53 1f       	adc	r21, r19
    6aec:	50 93 27 08 	sts	0x0827, r21
    6af0:	40 93 26 08 	sts	0x0826, r20
    6af4:	f9 01       	movw	r30, r18
    6af6:	61 93       	st	Z+, r22
    6af8:	71 93       	st	Z+, r23
    6afa:	02 c0       	rjmp	.+4      	; 0x6b00 <malloc+0x152>
    6afc:	e0 e0       	ldi	r30, 0x00	; 0
    6afe:	f0 e0       	ldi	r31, 0x00	; 0
    6b00:	cf 01       	movw	r24, r30
    6b02:	df 91       	pop	r29
    6b04:	cf 91       	pop	r28
    6b06:	08 95       	ret

00006b08 <free>:
    6b08:	cf 93       	push	r28
    6b0a:	df 93       	push	r29
    6b0c:	00 97       	sbiw	r24, 0x00	; 0
    6b0e:	09 f4       	brne	.+2      	; 0x6b12 <free+0xa>
    6b10:	50 c0       	rjmp	.+160    	; 0x6bb2 <free+0xaa>
    6b12:	ec 01       	movw	r28, r24
    6b14:	22 97       	sbiw	r28, 0x02	; 2
    6b16:	1b 82       	std	Y+3, r1	; 0x03
    6b18:	1a 82       	std	Y+2, r1	; 0x02
    6b1a:	a0 91 28 08 	lds	r26, 0x0828
    6b1e:	b0 91 29 08 	lds	r27, 0x0829
    6b22:	10 97       	sbiw	r26, 0x00	; 0
    6b24:	09 f1       	breq	.+66     	; 0x6b68 <free+0x60>
    6b26:	40 e0       	ldi	r20, 0x00	; 0
    6b28:	50 e0       	ldi	r21, 0x00	; 0
    6b2a:	ac 17       	cp	r26, r28
    6b2c:	bd 07       	cpc	r27, r29
    6b2e:	08 f1       	brcs	.+66     	; 0x6b72 <free+0x6a>
    6b30:	bb 83       	std	Y+3, r27	; 0x03
    6b32:	aa 83       	std	Y+2, r26	; 0x02
    6b34:	fe 01       	movw	r30, r28
    6b36:	21 91       	ld	r18, Z+
    6b38:	31 91       	ld	r19, Z+
    6b3a:	e2 0f       	add	r30, r18
    6b3c:	f3 1f       	adc	r31, r19
    6b3e:	ae 17       	cp	r26, r30
    6b40:	bf 07       	cpc	r27, r31
    6b42:	79 f4       	brne	.+30     	; 0x6b62 <free+0x5a>
    6b44:	8d 91       	ld	r24, X+
    6b46:	9c 91       	ld	r25, X
    6b48:	11 97       	sbiw	r26, 0x01	; 1
    6b4a:	28 0f       	add	r18, r24
    6b4c:	39 1f       	adc	r19, r25
    6b4e:	2e 5f       	subi	r18, 0xFE	; 254
    6b50:	3f 4f       	sbci	r19, 0xFF	; 255
    6b52:	39 83       	std	Y+1, r19	; 0x01
    6b54:	28 83       	st	Y, r18
    6b56:	12 96       	adiw	r26, 0x02	; 2
    6b58:	8d 91       	ld	r24, X+
    6b5a:	9c 91       	ld	r25, X
    6b5c:	13 97       	sbiw	r26, 0x03	; 3
    6b5e:	9b 83       	std	Y+3, r25	; 0x03
    6b60:	8a 83       	std	Y+2, r24	; 0x02
    6b62:	41 15       	cp	r20, r1
    6b64:	51 05       	cpc	r21, r1
    6b66:	71 f4       	brne	.+28     	; 0x6b84 <free+0x7c>
    6b68:	d0 93 29 08 	sts	0x0829, r29
    6b6c:	c0 93 28 08 	sts	0x0828, r28
    6b70:	20 c0       	rjmp	.+64     	; 0x6bb2 <free+0xaa>
    6b72:	12 96       	adiw	r26, 0x02	; 2
    6b74:	8d 91       	ld	r24, X+
    6b76:	9c 91       	ld	r25, X
    6b78:	13 97       	sbiw	r26, 0x03	; 3
    6b7a:	ad 01       	movw	r20, r26
    6b7c:	00 97       	sbiw	r24, 0x00	; 0
    6b7e:	11 f0       	breq	.+4      	; 0x6b84 <free+0x7c>
    6b80:	dc 01       	movw	r26, r24
    6b82:	d3 cf       	rjmp	.-90     	; 0x6b2a <free+0x22>
    6b84:	fa 01       	movw	r30, r20
    6b86:	d3 83       	std	Z+3, r29	; 0x03
    6b88:	c2 83       	std	Z+2, r28	; 0x02
    6b8a:	21 91       	ld	r18, Z+
    6b8c:	31 91       	ld	r19, Z+
    6b8e:	e2 0f       	add	r30, r18
    6b90:	f3 1f       	adc	r31, r19
    6b92:	ce 17       	cp	r28, r30
    6b94:	df 07       	cpc	r29, r31
    6b96:	69 f4       	brne	.+26     	; 0x6bb2 <free+0xaa>
    6b98:	88 81       	ld	r24, Y
    6b9a:	99 81       	ldd	r25, Y+1	; 0x01
    6b9c:	28 0f       	add	r18, r24
    6b9e:	39 1f       	adc	r19, r25
    6ba0:	2e 5f       	subi	r18, 0xFE	; 254
    6ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    6ba4:	fa 01       	movw	r30, r20
    6ba6:	31 83       	std	Z+1, r19	; 0x01
    6ba8:	20 83       	st	Z, r18
    6baa:	8a 81       	ldd	r24, Y+2	; 0x02
    6bac:	9b 81       	ldd	r25, Y+3	; 0x03
    6bae:	93 83       	std	Z+3, r25	; 0x03
    6bb0:	82 83       	std	Z+2, r24	; 0x02
    6bb2:	df 91       	pop	r29
    6bb4:	cf 91       	pop	r28
    6bb6:	08 95       	ret

00006bb8 <__ftoa_engine>:
    6bb8:	28 30       	cpi	r18, 0x08	; 8
    6bba:	08 f0       	brcs	.+2      	; 0x6bbe <__ftoa_engine+0x6>
    6bbc:	27 e0       	ldi	r18, 0x07	; 7
    6bbe:	33 27       	eor	r19, r19
    6bc0:	da 01       	movw	r26, r20
    6bc2:	99 0f       	add	r25, r25
    6bc4:	31 1d       	adc	r19, r1
    6bc6:	87 fd       	sbrc	r24, 7
    6bc8:	91 60       	ori	r25, 0x01	; 1
    6bca:	00 96       	adiw	r24, 0x00	; 0
    6bcc:	61 05       	cpc	r22, r1
    6bce:	71 05       	cpc	r23, r1
    6bd0:	39 f4       	brne	.+14     	; 0x6be0 <__ftoa_engine+0x28>
    6bd2:	32 60       	ori	r19, 0x02	; 2
    6bd4:	2e 5f       	subi	r18, 0xFE	; 254
    6bd6:	3d 93       	st	X+, r19
    6bd8:	30 e3       	ldi	r19, 0x30	; 48
    6bda:	2a 95       	dec	r18
    6bdc:	e1 f7       	brne	.-8      	; 0x6bd6 <__ftoa_engine+0x1e>
    6bde:	08 95       	ret
    6be0:	9f 3f       	cpi	r25, 0xFF	; 255
    6be2:	30 f0       	brcs	.+12     	; 0x6bf0 <__ftoa_engine+0x38>
    6be4:	80 38       	cpi	r24, 0x80	; 128
    6be6:	71 05       	cpc	r23, r1
    6be8:	61 05       	cpc	r22, r1
    6bea:	09 f0       	breq	.+2      	; 0x6bee <__ftoa_engine+0x36>
    6bec:	3c 5f       	subi	r19, 0xFC	; 252
    6bee:	3c 5f       	subi	r19, 0xFC	; 252
    6bf0:	3d 93       	st	X+, r19
    6bf2:	91 30       	cpi	r25, 0x01	; 1
    6bf4:	08 f0       	brcs	.+2      	; 0x6bf8 <__ftoa_engine+0x40>
    6bf6:	80 68       	ori	r24, 0x80	; 128
    6bf8:	91 1d       	adc	r25, r1
    6bfa:	df 93       	push	r29
    6bfc:	cf 93       	push	r28
    6bfe:	1f 93       	push	r17
    6c00:	0f 93       	push	r16
    6c02:	ff 92       	push	r15
    6c04:	ef 92       	push	r14
    6c06:	19 2f       	mov	r17, r25
    6c08:	98 7f       	andi	r25, 0xF8	; 248
    6c0a:	96 95       	lsr	r25
    6c0c:	e9 2f       	mov	r30, r25
    6c0e:	96 95       	lsr	r25
    6c10:	96 95       	lsr	r25
    6c12:	e9 0f       	add	r30, r25
    6c14:	ff 27       	eor	r31, r31
    6c16:	ef 53       	subi	r30, 0x3F	; 63
    6c18:	fa 4f       	sbci	r31, 0xFA	; 250
    6c1a:	99 27       	eor	r25, r25
    6c1c:	33 27       	eor	r19, r19
    6c1e:	ee 24       	eor	r14, r14
    6c20:	ff 24       	eor	r15, r15
    6c22:	a7 01       	movw	r20, r14
    6c24:	e7 01       	movw	r28, r14
    6c26:	05 90       	lpm	r0, Z+
    6c28:	08 94       	sec
    6c2a:	07 94       	ror	r0
    6c2c:	28 f4       	brcc	.+10     	; 0x6c38 <__ftoa_engine+0x80>
    6c2e:	36 0f       	add	r19, r22
    6c30:	e7 1e       	adc	r14, r23
    6c32:	f8 1e       	adc	r15, r24
    6c34:	49 1f       	adc	r20, r25
    6c36:	51 1d       	adc	r21, r1
    6c38:	66 0f       	add	r22, r22
    6c3a:	77 1f       	adc	r23, r23
    6c3c:	88 1f       	adc	r24, r24
    6c3e:	99 1f       	adc	r25, r25
    6c40:	06 94       	lsr	r0
    6c42:	a1 f7       	brne	.-24     	; 0x6c2c <__ftoa_engine+0x74>
    6c44:	05 90       	lpm	r0, Z+
    6c46:	07 94       	ror	r0
    6c48:	28 f4       	brcc	.+10     	; 0x6c54 <__ftoa_engine+0x9c>
    6c4a:	e7 0e       	add	r14, r23
    6c4c:	f8 1e       	adc	r15, r24
    6c4e:	49 1f       	adc	r20, r25
    6c50:	56 1f       	adc	r21, r22
    6c52:	c1 1d       	adc	r28, r1
    6c54:	77 0f       	add	r23, r23
    6c56:	88 1f       	adc	r24, r24
    6c58:	99 1f       	adc	r25, r25
    6c5a:	66 1f       	adc	r22, r22
    6c5c:	06 94       	lsr	r0
    6c5e:	a1 f7       	brne	.-24     	; 0x6c48 <__ftoa_engine+0x90>
    6c60:	05 90       	lpm	r0, Z+
    6c62:	07 94       	ror	r0
    6c64:	28 f4       	brcc	.+10     	; 0x6c70 <__ftoa_engine+0xb8>
    6c66:	f8 0e       	add	r15, r24
    6c68:	49 1f       	adc	r20, r25
    6c6a:	56 1f       	adc	r21, r22
    6c6c:	c7 1f       	adc	r28, r23
    6c6e:	d1 1d       	adc	r29, r1
    6c70:	88 0f       	add	r24, r24
    6c72:	99 1f       	adc	r25, r25
    6c74:	66 1f       	adc	r22, r22
    6c76:	77 1f       	adc	r23, r23
    6c78:	06 94       	lsr	r0
    6c7a:	a1 f7       	brne	.-24     	; 0x6c64 <__ftoa_engine+0xac>
    6c7c:	05 90       	lpm	r0, Z+
    6c7e:	07 94       	ror	r0
    6c80:	20 f4       	brcc	.+8      	; 0x6c8a <__ftoa_engine+0xd2>
    6c82:	49 0f       	add	r20, r25
    6c84:	56 1f       	adc	r21, r22
    6c86:	c7 1f       	adc	r28, r23
    6c88:	d8 1f       	adc	r29, r24
    6c8a:	99 0f       	add	r25, r25
    6c8c:	66 1f       	adc	r22, r22
    6c8e:	77 1f       	adc	r23, r23
    6c90:	88 1f       	adc	r24, r24
    6c92:	06 94       	lsr	r0
    6c94:	a9 f7       	brne	.-22     	; 0x6c80 <__ftoa_engine+0xc8>
    6c96:	84 91       	lpm	r24, Z+
    6c98:	10 95       	com	r17
    6c9a:	17 70       	andi	r17, 0x07	; 7
    6c9c:	41 f0       	breq	.+16     	; 0x6cae <__ftoa_engine+0xf6>
    6c9e:	d6 95       	lsr	r29
    6ca0:	c7 95       	ror	r28
    6ca2:	57 95       	ror	r21
    6ca4:	47 95       	ror	r20
    6ca6:	f7 94       	ror	r15
    6ca8:	e7 94       	ror	r14
    6caa:	1a 95       	dec	r17
    6cac:	c1 f7       	brne	.-16     	; 0x6c9e <__ftoa_engine+0xe6>
    6cae:	e7 e6       	ldi	r30, 0x67	; 103
    6cb0:	f5 e0       	ldi	r31, 0x05	; 5
    6cb2:	68 94       	set
    6cb4:	15 90       	lpm	r1, Z+
    6cb6:	15 91       	lpm	r17, Z+
    6cb8:	35 91       	lpm	r19, Z+
    6cba:	65 91       	lpm	r22, Z+
    6cbc:	95 91       	lpm	r25, Z+
    6cbe:	05 90       	lpm	r0, Z+
    6cc0:	7f e2       	ldi	r23, 0x2F	; 47
    6cc2:	73 95       	inc	r23
    6cc4:	e1 18       	sub	r14, r1
    6cc6:	f1 0a       	sbc	r15, r17
    6cc8:	43 0b       	sbc	r20, r19
    6cca:	56 0b       	sbc	r21, r22
    6ccc:	c9 0b       	sbc	r28, r25
    6cce:	d0 09       	sbc	r29, r0
    6cd0:	c0 f7       	brcc	.-16     	; 0x6cc2 <__ftoa_engine+0x10a>
    6cd2:	e1 0c       	add	r14, r1
    6cd4:	f1 1e       	adc	r15, r17
    6cd6:	43 1f       	adc	r20, r19
    6cd8:	56 1f       	adc	r21, r22
    6cda:	c9 1f       	adc	r28, r25
    6cdc:	d0 1d       	adc	r29, r0
    6cde:	7e f4       	brtc	.+30     	; 0x6cfe <__ftoa_engine+0x146>
    6ce0:	70 33       	cpi	r23, 0x30	; 48
    6ce2:	11 f4       	brne	.+4      	; 0x6ce8 <__ftoa_engine+0x130>
    6ce4:	8a 95       	dec	r24
    6ce6:	e6 cf       	rjmp	.-52     	; 0x6cb4 <__ftoa_engine+0xfc>
    6ce8:	e8 94       	clt
    6cea:	01 50       	subi	r16, 0x01	; 1
    6cec:	30 f0       	brcs	.+12     	; 0x6cfa <__ftoa_engine+0x142>
    6cee:	08 0f       	add	r16, r24
    6cf0:	0a f4       	brpl	.+2      	; 0x6cf4 <__ftoa_engine+0x13c>
    6cf2:	00 27       	eor	r16, r16
    6cf4:	02 17       	cp	r16, r18
    6cf6:	08 f4       	brcc	.+2      	; 0x6cfa <__ftoa_engine+0x142>
    6cf8:	20 2f       	mov	r18, r16
    6cfa:	23 95       	inc	r18
    6cfc:	02 2f       	mov	r16, r18
    6cfe:	7a 33       	cpi	r23, 0x3A	; 58
    6d00:	28 f0       	brcs	.+10     	; 0x6d0c <__ftoa_engine+0x154>
    6d02:	79 e3       	ldi	r23, 0x39	; 57
    6d04:	7d 93       	st	X+, r23
    6d06:	2a 95       	dec	r18
    6d08:	e9 f7       	brne	.-6      	; 0x6d04 <__ftoa_engine+0x14c>
    6d0a:	10 c0       	rjmp	.+32     	; 0x6d2c <__ftoa_engine+0x174>
    6d0c:	7d 93       	st	X+, r23
    6d0e:	2a 95       	dec	r18
    6d10:	89 f6       	brne	.-94     	; 0x6cb4 <__ftoa_engine+0xfc>
    6d12:	06 94       	lsr	r0
    6d14:	97 95       	ror	r25
    6d16:	67 95       	ror	r22
    6d18:	37 95       	ror	r19
    6d1a:	17 95       	ror	r17
    6d1c:	17 94       	ror	r1
    6d1e:	e1 18       	sub	r14, r1
    6d20:	f1 0a       	sbc	r15, r17
    6d22:	43 0b       	sbc	r20, r19
    6d24:	56 0b       	sbc	r21, r22
    6d26:	c9 0b       	sbc	r28, r25
    6d28:	d0 09       	sbc	r29, r0
    6d2a:	98 f0       	brcs	.+38     	; 0x6d52 <__ftoa_engine+0x19a>
    6d2c:	23 95       	inc	r18
    6d2e:	7e 91       	ld	r23, -X
    6d30:	73 95       	inc	r23
    6d32:	7a 33       	cpi	r23, 0x3A	; 58
    6d34:	08 f0       	brcs	.+2      	; 0x6d38 <__ftoa_engine+0x180>
    6d36:	70 e3       	ldi	r23, 0x30	; 48
    6d38:	7c 93       	st	X, r23
    6d3a:	20 13       	cpse	r18, r16
    6d3c:	b8 f7       	brcc	.-18     	; 0x6d2c <__ftoa_engine+0x174>
    6d3e:	7e 91       	ld	r23, -X
    6d40:	70 61       	ori	r23, 0x10	; 16
    6d42:	7d 93       	st	X+, r23
    6d44:	30 f0       	brcs	.+12     	; 0x6d52 <__ftoa_engine+0x19a>
    6d46:	83 95       	inc	r24
    6d48:	71 e3       	ldi	r23, 0x31	; 49
    6d4a:	7d 93       	st	X+, r23
    6d4c:	70 e3       	ldi	r23, 0x30	; 48
    6d4e:	2a 95       	dec	r18
    6d50:	e1 f7       	brne	.-8      	; 0x6d4a <__ftoa_engine+0x192>
    6d52:	11 24       	eor	r1, r1
    6d54:	ef 90       	pop	r14
    6d56:	ff 90       	pop	r15
    6d58:	0f 91       	pop	r16
    6d5a:	1f 91       	pop	r17
    6d5c:	cf 91       	pop	r28
    6d5e:	df 91       	pop	r29
    6d60:	99 27       	eor	r25, r25
    6d62:	87 fd       	sbrc	r24, 7
    6d64:	90 95       	com	r25
    6d66:	08 95       	ret

00006d68 <strnlen_P>:
    6d68:	fc 01       	movw	r30, r24
    6d6a:	05 90       	lpm	r0, Z+
    6d6c:	61 50       	subi	r22, 0x01	; 1
    6d6e:	70 40       	sbci	r23, 0x00	; 0
    6d70:	01 10       	cpse	r0, r1
    6d72:	d8 f7       	brcc	.-10     	; 0x6d6a <strnlen_P+0x2>
    6d74:	80 95       	com	r24
    6d76:	90 95       	com	r25
    6d78:	8e 0f       	add	r24, r30
    6d7a:	9f 1f       	adc	r25, r31
    6d7c:	08 95       	ret

00006d7e <strnlen>:
    6d7e:	fc 01       	movw	r30, r24
    6d80:	61 50       	subi	r22, 0x01	; 1
    6d82:	70 40       	sbci	r23, 0x00	; 0
    6d84:	01 90       	ld	r0, Z+
    6d86:	01 10       	cpse	r0, r1
    6d88:	d8 f7       	brcc	.-10     	; 0x6d80 <strnlen+0x2>
    6d8a:	80 95       	com	r24
    6d8c:	90 95       	com	r25
    6d8e:	8e 0f       	add	r24, r30
    6d90:	9f 1f       	adc	r25, r31
    6d92:	08 95       	ret

00006d94 <fputc>:
    6d94:	0f 93       	push	r16
    6d96:	1f 93       	push	r17
    6d98:	cf 93       	push	r28
    6d9a:	df 93       	push	r29
    6d9c:	8c 01       	movw	r16, r24
    6d9e:	eb 01       	movw	r28, r22
    6da0:	8b 81       	ldd	r24, Y+3	; 0x03
    6da2:	81 ff       	sbrs	r24, 1
    6da4:	1b c0       	rjmp	.+54     	; 0x6ddc <fputc+0x48>
    6da6:	82 ff       	sbrs	r24, 2
    6da8:	0d c0       	rjmp	.+26     	; 0x6dc4 <fputc+0x30>
    6daa:	2e 81       	ldd	r18, Y+6	; 0x06
    6dac:	3f 81       	ldd	r19, Y+7	; 0x07
    6dae:	8c 81       	ldd	r24, Y+4	; 0x04
    6db0:	9d 81       	ldd	r25, Y+5	; 0x05
    6db2:	28 17       	cp	r18, r24
    6db4:	39 07       	cpc	r19, r25
    6db6:	64 f4       	brge	.+24     	; 0x6dd0 <fputc+0x3c>
    6db8:	e8 81       	ld	r30, Y
    6dba:	f9 81       	ldd	r31, Y+1	; 0x01
    6dbc:	01 93       	st	Z+, r16
    6dbe:	f9 83       	std	Y+1, r31	; 0x01
    6dc0:	e8 83       	st	Y, r30
    6dc2:	06 c0       	rjmp	.+12     	; 0x6dd0 <fputc+0x3c>
    6dc4:	e8 85       	ldd	r30, Y+8	; 0x08
    6dc6:	f9 85       	ldd	r31, Y+9	; 0x09
    6dc8:	80 2f       	mov	r24, r16
    6dca:	09 95       	icall
    6dcc:	89 2b       	or	r24, r25
    6dce:	31 f4       	brne	.+12     	; 0x6ddc <fputc+0x48>
    6dd0:	8e 81       	ldd	r24, Y+6	; 0x06
    6dd2:	9f 81       	ldd	r25, Y+7	; 0x07
    6dd4:	01 96       	adiw	r24, 0x01	; 1
    6dd6:	9f 83       	std	Y+7, r25	; 0x07
    6dd8:	8e 83       	std	Y+6, r24	; 0x06
    6dda:	02 c0       	rjmp	.+4      	; 0x6de0 <fputc+0x4c>
    6ddc:	0f ef       	ldi	r16, 0xFF	; 255
    6dde:	1f ef       	ldi	r17, 0xFF	; 255
    6de0:	c8 01       	movw	r24, r16
    6de2:	df 91       	pop	r29
    6de4:	cf 91       	pop	r28
    6de6:	1f 91       	pop	r17
    6de8:	0f 91       	pop	r16
    6dea:	08 95       	ret

00006dec <printf>:
    6dec:	a0 e0       	ldi	r26, 0x00	; 0
    6dee:	b0 e0       	ldi	r27, 0x00	; 0
    6df0:	eb ef       	ldi	r30, 0xFB	; 251
    6df2:	f6 e3       	ldi	r31, 0x36	; 54
    6df4:	b5 cd       	rjmp	.-1174   	; 0x6960 <__prologue_saves__+0x20>
    6df6:	fe 01       	movw	r30, r28
    6df8:	35 96       	adiw	r30, 0x05	; 5
    6dfa:	61 91       	ld	r22, Z+
    6dfc:	71 91       	ld	r23, Z+
    6dfe:	80 91 2c 08 	lds	r24, 0x082C
    6e02:	90 91 2d 08 	lds	r25, 0x082D
    6e06:	af 01       	movw	r20, r30
    6e08:	f2 d9       	rcall	.-3100   	; 0x61ee <vfprintf>
    6e0a:	20 96       	adiw	r28, 0x00	; 0
    6e0c:	e2 e0       	ldi	r30, 0x02	; 2
    6e0e:	c4 cd       	rjmp	.-1144   	; 0x6998 <__epilogue_restores__+0x20>

00006e10 <puts>:
    6e10:	0f 93       	push	r16
    6e12:	1f 93       	push	r17
    6e14:	cf 93       	push	r28
    6e16:	df 93       	push	r29
    6e18:	8c 01       	movw	r16, r24
    6e1a:	e0 91 2c 08 	lds	r30, 0x082C
    6e1e:	f0 91 2d 08 	lds	r31, 0x082D
    6e22:	83 81       	ldd	r24, Z+3	; 0x03
    6e24:	81 ff       	sbrs	r24, 1
    6e26:	21 c0       	rjmp	.+66     	; 0x6e6a <puts+0x5a>
    6e28:	c0 e0       	ldi	r28, 0x00	; 0
    6e2a:	d0 e0       	ldi	r29, 0x00	; 0
    6e2c:	0d c0       	rjmp	.+26     	; 0x6e48 <puts+0x38>
    6e2e:	e0 91 2c 08 	lds	r30, 0x082C
    6e32:	f0 91 2d 08 	lds	r31, 0x082D
    6e36:	20 85       	ldd	r18, Z+8	; 0x08
    6e38:	31 85       	ldd	r19, Z+9	; 0x09
    6e3a:	bf 01       	movw	r22, r30
    6e3c:	f9 01       	movw	r30, r18
    6e3e:	09 95       	icall
    6e40:	89 2b       	or	r24, r25
    6e42:	11 f0       	breq	.+4      	; 0x6e48 <puts+0x38>
    6e44:	cf ef       	ldi	r28, 0xFF	; 255
    6e46:	df ef       	ldi	r29, 0xFF	; 255
    6e48:	f8 01       	movw	r30, r16
    6e4a:	81 91       	ld	r24, Z+
    6e4c:	8f 01       	movw	r16, r30
    6e4e:	88 23       	and	r24, r24
    6e50:	71 f7       	brne	.-36     	; 0x6e2e <puts+0x1e>
    6e52:	e0 91 2c 08 	lds	r30, 0x082C
    6e56:	f0 91 2d 08 	lds	r31, 0x082D
    6e5a:	20 85       	ldd	r18, Z+8	; 0x08
    6e5c:	31 85       	ldd	r19, Z+9	; 0x09
    6e5e:	8a e0       	ldi	r24, 0x0A	; 10
    6e60:	bf 01       	movw	r22, r30
    6e62:	f9 01       	movw	r30, r18
    6e64:	09 95       	icall
    6e66:	89 2b       	or	r24, r25
    6e68:	11 f0       	breq	.+4      	; 0x6e6e <puts+0x5e>
    6e6a:	cf ef       	ldi	r28, 0xFF	; 255
    6e6c:	df ef       	ldi	r29, 0xFF	; 255
    6e6e:	ce 01       	movw	r24, r28
    6e70:	df 91       	pop	r29
    6e72:	cf 91       	pop	r28
    6e74:	1f 91       	pop	r17
    6e76:	0f 91       	pop	r16
    6e78:	08 95       	ret

00006e7a <__ultoa_invert>:
    6e7a:	fa 01       	movw	r30, r20
    6e7c:	aa 27       	eor	r26, r26
    6e7e:	28 30       	cpi	r18, 0x08	; 8
    6e80:	51 f1       	breq	.+84     	; 0x6ed6 <__ultoa_invert+0x5c>
    6e82:	20 31       	cpi	r18, 0x10	; 16
    6e84:	81 f1       	breq	.+96     	; 0x6ee6 <__ultoa_invert+0x6c>
    6e86:	e8 94       	clt
    6e88:	6f 93       	push	r22
    6e8a:	6e 7f       	andi	r22, 0xFE	; 254
    6e8c:	6e 5f       	subi	r22, 0xFE	; 254
    6e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    6e90:	8f 4f       	sbci	r24, 0xFF	; 255
    6e92:	9f 4f       	sbci	r25, 0xFF	; 255
    6e94:	af 4f       	sbci	r26, 0xFF	; 255
    6e96:	b1 e0       	ldi	r27, 0x01	; 1
    6e98:	3e d0       	rcall	.+124    	; 0x6f16 <__ultoa_invert+0x9c>
    6e9a:	b4 e0       	ldi	r27, 0x04	; 4
    6e9c:	3c d0       	rcall	.+120    	; 0x6f16 <__ultoa_invert+0x9c>
    6e9e:	67 0f       	add	r22, r23
    6ea0:	78 1f       	adc	r23, r24
    6ea2:	89 1f       	adc	r24, r25
    6ea4:	9a 1f       	adc	r25, r26
    6ea6:	a1 1d       	adc	r26, r1
    6ea8:	68 0f       	add	r22, r24
    6eaa:	79 1f       	adc	r23, r25
    6eac:	8a 1f       	adc	r24, r26
    6eae:	91 1d       	adc	r25, r1
    6eb0:	a1 1d       	adc	r26, r1
    6eb2:	6a 0f       	add	r22, r26
    6eb4:	71 1d       	adc	r23, r1
    6eb6:	81 1d       	adc	r24, r1
    6eb8:	91 1d       	adc	r25, r1
    6eba:	a1 1d       	adc	r26, r1
    6ebc:	20 d0       	rcall	.+64     	; 0x6efe <__ultoa_invert+0x84>
    6ebe:	09 f4       	brne	.+2      	; 0x6ec2 <__ultoa_invert+0x48>
    6ec0:	68 94       	set
    6ec2:	3f 91       	pop	r19
    6ec4:	2a e0       	ldi	r18, 0x0A	; 10
    6ec6:	26 9f       	mul	r18, r22
    6ec8:	11 24       	eor	r1, r1
    6eca:	30 19       	sub	r19, r0
    6ecc:	30 5d       	subi	r19, 0xD0	; 208
    6ece:	31 93       	st	Z+, r19
    6ed0:	de f6       	brtc	.-74     	; 0x6e88 <__ultoa_invert+0xe>
    6ed2:	cf 01       	movw	r24, r30
    6ed4:	08 95       	ret
    6ed6:	46 2f       	mov	r20, r22
    6ed8:	47 70       	andi	r20, 0x07	; 7
    6eda:	40 5d       	subi	r20, 0xD0	; 208
    6edc:	41 93       	st	Z+, r20
    6ede:	b3 e0       	ldi	r27, 0x03	; 3
    6ee0:	0f d0       	rcall	.+30     	; 0x6f00 <__ultoa_invert+0x86>
    6ee2:	c9 f7       	brne	.-14     	; 0x6ed6 <__ultoa_invert+0x5c>
    6ee4:	f6 cf       	rjmp	.-20     	; 0x6ed2 <__ultoa_invert+0x58>
    6ee6:	46 2f       	mov	r20, r22
    6ee8:	4f 70       	andi	r20, 0x0F	; 15
    6eea:	40 5d       	subi	r20, 0xD0	; 208
    6eec:	4a 33       	cpi	r20, 0x3A	; 58
    6eee:	18 f0       	brcs	.+6      	; 0x6ef6 <__ultoa_invert+0x7c>
    6ef0:	49 5d       	subi	r20, 0xD9	; 217
    6ef2:	31 fd       	sbrc	r19, 1
    6ef4:	40 52       	subi	r20, 0x20	; 32
    6ef6:	41 93       	st	Z+, r20
    6ef8:	02 d0       	rcall	.+4      	; 0x6efe <__ultoa_invert+0x84>
    6efa:	a9 f7       	brne	.-22     	; 0x6ee6 <__ultoa_invert+0x6c>
    6efc:	ea cf       	rjmp	.-44     	; 0x6ed2 <__ultoa_invert+0x58>
    6efe:	b4 e0       	ldi	r27, 0x04	; 4
    6f00:	a6 95       	lsr	r26
    6f02:	97 95       	ror	r25
    6f04:	87 95       	ror	r24
    6f06:	77 95       	ror	r23
    6f08:	67 95       	ror	r22
    6f0a:	ba 95       	dec	r27
    6f0c:	c9 f7       	brne	.-14     	; 0x6f00 <__ultoa_invert+0x86>
    6f0e:	00 97       	sbiw	r24, 0x00	; 0
    6f10:	61 05       	cpc	r22, r1
    6f12:	71 05       	cpc	r23, r1
    6f14:	08 95       	ret
    6f16:	9b 01       	movw	r18, r22
    6f18:	ac 01       	movw	r20, r24
    6f1a:	0a 2e       	mov	r0, r26
    6f1c:	06 94       	lsr	r0
    6f1e:	57 95       	ror	r21
    6f20:	47 95       	ror	r20
    6f22:	37 95       	ror	r19
    6f24:	27 95       	ror	r18
    6f26:	ba 95       	dec	r27
    6f28:	c9 f7       	brne	.-14     	; 0x6f1c <__ultoa_invert+0xa2>
    6f2a:	62 0f       	add	r22, r18
    6f2c:	73 1f       	adc	r23, r19
    6f2e:	84 1f       	adc	r24, r20
    6f30:	95 1f       	adc	r25, r21
    6f32:	a0 1d       	adc	r26, r0
    6f34:	08 95       	ret

00006f36 <_exit>:
    6f36:	f8 94       	cli

00006f38 <__stop_program>:
    6f38:	ff cf       	rjmp	.-2      	; 0x6f38 <__stop_program>
