
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000252  00800100  00006d90  00006e24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d2  00800352  00800352  00007076  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00007076  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000084d  00000000  00000000  000070d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e2f  00000000  00000000  00007923  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000482  00000000  00000000  00009752  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a6d  00000000  00000000  00009bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  0000b644  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000dff  00000000  00000000  0000b994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013b5  00000000  00000000  0000c793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 8a 23 	jmp	0x4714	; 0x4714 <__vector_4>
      14:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <__vector_5>
      18:	0c 94 dc 23 	jmp	0x47b8	; 0x47b8 <__vector_6>
      1c:	0c 94 05 24 	jmp	0x480a	; 0x480a <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 6b 22 	jmp	0x44d6	; 0x44d6 <__vector_9>
      28:	0c 94 94 22 	jmp	0x4528	; 0x4528 <__vector_10>
      2c:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__vector_11>
      30:	0c 94 38 23 	jmp	0x4670	; 0x4670 <__vector_12>
      34:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__vector_13>
      38:	0c 94 0f 23 	jmp	0x461e	; 0x461e <__vector_14>
      3c:	0c 94 61 23 	jmp	0x46c2	; 0x46c2 <__vector_15>
      40:	0c 94 f0 21 	jmp	0x43e0	; 0x43e0 <__vector_16>
      44:	0c 94 19 22 	jmp	0x4432	; 0x4432 <__vector_17>
      48:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	55 1f       	adc	r21, r21
      7e:	58 1f       	adc	r21, r24
      80:	5b 1f       	adc	r21, r27
      82:	5e 1f       	adc	r21, r30
      84:	67 1f       	adc	r22, r23
      86:	61 1f       	adc	r22, r17
      88:	64 1f       	adc	r22, r20
      8a:	6a 1f       	adc	r22, r26
      8c:	6d 1f       	adc	r22, r29
      8e:	70 1f       	adc	r23, r16
      90:	73 1f       	adc	r23, r19
      92:	76 1f       	adc	r23, r22
      94:	79 1f       	adc	r23, r25
      96:	7c 1f       	adc	r23, r28
      98:	7f 1f       	adc	r23, r31
      9a:	82 1f       	adc	r24, r18
      9c:	85 1f       	adc	r24, r21
      9e:	88 1f       	adc	r24, r24
      a0:	8b 1f       	adc	r24, r27
      a2:	9c 1f       	adc	r25, r28
      a4:	9f 1f       	adc	r25, r31
      a6:	a2 1f       	adc	r26, r18
      a8:	a5 1f       	adc	r26, r21
      aa:	ae 1f       	adc	r26, r30
      ac:	a8 1f       	adc	r26, r24
      ae:	ab 1f       	adc	r26, r27
      b0:	b1 1f       	adc	r27, r17
      b2:	b4 1f       	adc	r27, r20
      b4:	b7 1f       	adc	r27, r23
      b6:	ba 1f       	adc	r27, r26
      b8:	bd 1f       	adc	r27, r29
      ba:	c0 1f       	adc	r28, r16
      bc:	c3 1f       	adc	r28, r19
      be:	c6 1f       	adc	r28, r22
      c0:	c9 1f       	adc	r28, r25
      c2:	cc 1f       	adc	r28, r28
      c4:	cf 1f       	adc	r28, r31
      c6:	d2 1f       	adc	r29, r18
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e0 e9       	ldi	r30, 0x90	; 144
     676:	fd e6       	ldi	r31, 0x6D	; 109
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a2 35       	cpi	r26, 0x52	; 82
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	a2 e5       	ldi	r26, 0x52	; 82
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a4 32       	cpi	r26, 0x24	; 36
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 a8 19 	call	0x3350	; 0x3350 <main>
     698:	0c 94 c6 36 	jmp	0x6d8c	; 0x6d8c <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 2e 21 	call	0x425c	; 0x425c <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 02 21 	call	0x4204	; 0x4204 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 9a 21 	call	0x4334	; 0x4334 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 9d 19 	call	0x333a	; 0x333a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 49 19 	call	0x3292	; 0x3292 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 9d 19 	call	0x333a	; 0x333a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 49 19 	call	0x3292	; 0x3292 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 9d 19 	call	0x333a	; 0x333a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 49 19 	call	0x3292	; 0x3292 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 9d 19 	call	0x333a	; 0x333a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 49 19 	call	0x3292	; 0x3292 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 9d 19 	call	0x333a	; 0x333a <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 49 19 	call	0x3292	; 0x3292 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 9d 19 	call	0x333a	; 0x333a <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 66 19 	call	0x32cc	; 0x32cc <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 49 19 	call	0x3292	; 0x3292 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 ee 03 	sts	0x03EE, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 06 20 	call	0x400c	; 0x400c <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 06 20 	call	0x400c	; 0x400c <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 06 20 	call	0x400c	; 0x400c <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 ee 03 	sts	0x03EE, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 06 20 	call	0x400c	; 0x400c <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 06 20 	call	0x400c	; 0x400c <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 06 20 	call	0x400c	; 0x400c <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 c0 1a 	call	0x3580	; 0x3580 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 ab 1a 	call	0x3556	; 0x3556 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 ab 1a 	call	0x3556	; 0x3556 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 c0 1a 	call	0x3580	; 0x3580 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 ab 1a 	call	0x3556	; 0x3556 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 ab 1a 	call	0x3556	; 0x3556 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 c0 1a 	call	0x3580	; 0x3580 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 c0 1a 	call	0x3580	; 0x3580 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 ab 1a 	call	0x3556	; 0x3556 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 ab 1a 	call	0x3556	; 0x3556 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	81 e6       	ldi	r24, 0x61	; 97
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	a4 e8       	ldi	r26, 0x84	; 132
     c56:	b6 e0       	ldi	r27, 0x06	; 6
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	ec e7       	ldi	r30, 0x7C	; 124
     c5e:	f5 e0       	ldi	r31, 0x05	; 5
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	89 ee       	ldi	r24, 0xE9	; 233
     c66:	94 e0       	ldi	r25, 0x04	; 4
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 0c 06 	lds	r10, 0x060C
     c9e:	b0 90 0d 06 	lds	r11, 0x060D
     ca2:	c0 90 0e 06 	lds	r12, 0x060E
     ca6:	d0 90 0f 06 	lds	r13, 0x060F
			rtIR_old[i] = rtIR;
     caa:	e0 90 10 06 	lds	r14, 0x0610
     cae:	f0 90 11 06 	lds	r15, 0x0611
     cb2:	00 91 12 06 	lds	r16, 0x0612
     cb6:	10 91 13 06 	lds	r17, 0x0613
			ftIR_old[i] = ftIR;
     cba:	20 90 69 04 	lds	r2, 0x0469
     cbe:	30 90 6a 04 	lds	r3, 0x046A
     cc2:	40 90 6b 04 	lds	r4, 0x046B
     cc6:	50 90 6c 04 	lds	r5, 0x046C
			bkIR_old[i] = bkIR;
     cca:	20 91 73 04 	lds	r18, 0x0473
     cce:	30 91 74 04 	lds	r19, 0x0474
     cd2:	40 91 75 04 	lds	r20, 0x0475
     cd6:	50 91 76 04 	lds	r21, 0x0476
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	ef 50       	subi	r30, 0x0F	; 15
     ce2:	fc 4f       	sbci	r31, 0xFC	; 252
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	ec 5e       	subi	r30, 0xEC	; 236
     cf0:	f9 4f       	sbci	r31, 0xF9	; 249
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e4 5f       	subi	r30, 0xF4	; 244
     cfe:	fa 4f       	sbci	r31, 0xFA	; 250
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e7 58       	subi	r30, 0x87	; 135
     d0c:	fb 4f       	sbci	r31, 0xFB	; 251
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a9 5e       	subi	r26, 0xE9	; 233
     e02:	b3 40       	sbci	r27, 0x03	; 3
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 0c 06 	lds	r24, 0x060C
     e0c:	90 91 0d 06 	lds	r25, 0x060D
     e10:	a0 91 0e 06 	lds	r26, 0x060E
     e14:	b0 91 0f 06 	lds	r27, 0x060F
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 10 06 	lds	r24, 0x0610
     e28:	90 91 11 06 	lds	r25, 0x0611
     e2c:	a0 91 12 06 	lds	r26, 0x0612
     e30:	b0 91 13 06 	lds	r27, 0x0613
     e34:	80 93 14 06 	sts	0x0614, r24
     e38:	90 93 15 06 	sts	0x0615, r25
     e3c:	a0 93 16 06 	sts	0x0616, r26
     e40:	b0 93 17 06 	sts	0x0617, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 69 04 	lds	r24, 0x0469
     e48:	90 91 6a 04 	lds	r25, 0x046A
     e4c:	a0 91 6b 04 	lds	r26, 0x046B
     e50:	b0 91 6c 04 	lds	r27, 0x046C
     e54:	80 93 0c 05 	sts	0x050C, r24
     e58:	90 93 0d 05 	sts	0x050D, r25
     e5c:	a0 93 0e 05 	sts	0x050E, r26
     e60:	b0 93 0f 05 	sts	0x050F, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 73 04 	lds	r24, 0x0473
     e68:	90 91 74 04 	lds	r25, 0x0474
     e6c:	a0 91 75 04 	lds	r26, 0x0475
     e70:	b0 91 76 04 	lds	r27, 0x0476
     e74:	80 93 79 04 	sts	0x0479, r24
     e78:	90 93 7a 04 	sts	0x047A, r25
     e7c:	a0 93 7b 04 	sts	0x047B, r26
     e80:	b0 93 7c 04 	sts	0x047C, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
     e94:	60 93 0c 06 	sts	0x060C, r22
     e98:	70 93 0d 06 	sts	0x060D, r23
     e9c:	80 93 0e 06 	sts	0x060E, r24
     ea0:	90 93 0f 06 	sts	0x060F, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
     eb8:	60 93 10 06 	sts	0x0610, r22
     ebc:	70 93 11 06 	sts	0x0611, r23
     ec0:	80 93 12 06 	sts	0x0612, r24
     ec4:	90 93 13 06 	sts	0x0613, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
     edc:	60 93 69 04 	sts	0x0469, r22
     ee0:	70 93 6a 04 	sts	0x046A, r23
     ee4:	80 93 6b 04 	sts	0x046B, r24
     ee8:	90 93 6c 04 	sts	0x046C, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
     f00:	60 93 73 04 	sts	0x0473, r22
     f04:	70 93 74 04 	sts	0x0474, r23
     f08:	80 93 75 04 	sts	0x0475, r24
     f0c:	90 93 76 04 	sts	0x0476, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 6d 04 	sts	0x046D, r24
     f66:	90 93 6e 04 	sts	0x046E, r25
     f6a:	a0 93 6f 04 	sts	0x046F, r26
     f6e:	b0 93 70 04 	sts	0x0470, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 6d 04 	lds	r18, 0x046D
     f7a:	30 91 6e 04 	lds	r19, 0x046E
     f7e:	40 91 6f 04 	lds	r20, 0x046F
     f82:	50 91 70 04 	lds	r21, 0x0470
     f86:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 6d 04 	sts	0x046D, r22
     f92:	70 93 6e 04 	sts	0x046E, r23
     f96:	80 93 6f 04 	sts	0x046F, r24
     f9a:	90 93 70 04 	sts	0x0470, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 08 05 	lds	r18, 0x0508
     fa6:	30 91 09 05 	lds	r19, 0x0509
     faa:	40 91 0a 05 	lds	r20, 0x050A
     fae:	50 91 0b 05 	lds	r21, 0x050B
     fb2:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__subsf3>
     fb6:	2d ec       	ldi	r18, 0xCD	; 205
     fb8:	3c ec       	ldi	r19, 0xCC	; 204
     fba:	4c ec       	ldi	r20, 0xCC	; 204
     fbc:	5d e3       	ldi	r21, 0x3D	; 61
     fbe:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    1032:	60 91 69 04 	lds	r22, 0x0469
    1036:	70 91 6a 04 	lds	r23, 0x046A
    103a:	80 91 6b 04 	lds	r24, 0x046B
    103e:	90 91 6c 04 	lds	r25, 0x046C
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    104e:	f8 2e       	mov	r15, r24
    1050:	ff 1c       	adc	r15, r15
    1052:	ff 24       	eor	r15, r15
    1054:	ff 1c       	adc	r15, r15
    1056:	ff 0c       	add	r15, r15
    1058:	ff 0c       	add	r15, r15
    105a:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    105c:	60 91 0c 06 	lds	r22, 0x060C
    1060:	70 91 0d 06 	lds	r23, 0x060D
    1064:	80 91 0e 06 	lds	r24, 0x060E
    1068:	90 91 0f 06 	lds	r25, 0x060F
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 ef       	ldi	r20, 0xF0	; 240
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    1078:	08 2f       	mov	r16, r24
    107a:	00 1f       	adc	r16, r16
    107c:	00 27       	eor	r16, r16
    107e:	00 1f       	adc	r16, r16
    1080:	00 0f       	add	r16, r16
    1082:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    1084:	60 91 73 04 	lds	r22, 0x0473
    1088:	70 91 74 04 	lds	r23, 0x0474
    108c:	80 91 75 04 	lds	r24, 0x0475
    1090:	90 91 76 04 	lds	r25, 0x0476
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	4c e0       	ldi	r20, 0x0C	; 12
    109a:	52 e4       	ldi	r21, 0x42	; 66
    109c:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    10a0:	18 2f       	mov	r17, r24
    10a2:	11 1f       	adc	r17, r17
    10a4:	11 27       	eor	r17, r17
    10a6:	11 1f       	adc	r17, r17
    10a8:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    10aa:	ee 24       	eor	r14, r14
    10ac:	60 91 10 06 	lds	r22, 0x0610
    10b0:	70 91 11 06 	lds	r23, 0x0611
    10b4:	80 91 12 06 	lds	r24, 0x0612
    10b8:	90 91 13 06 	lds	r25, 0x0613
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 ef       	ldi	r20, 0xF0	; 240
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	14 f4       	brge	.+4      	; 0x10d0 <checkWorld+0xa6>
    10cc:	ee 24       	eor	r14, r14
    10ce:	e3 94       	inc	r14
    10d0:	8f 2d       	mov	r24, r15
    10d2:	8e 0d       	add	r24, r14
    10d4:	80 0f       	add	r24, r16
    10d6:	81 0f       	add	r24, r17
    10d8:	80 93 71 04 	sts	0x0471, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    10dc:	20 91 72 04 	lds	r18, 0x0472
    10e0:	e2 2f       	mov	r30, r18
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	e4 57       	subi	r30, 0x74	; 116
    10e6:	f9 4f       	sbci	r31, 0xF9	; 249
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	90 93 78 04 	sts	0x0478, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    10ee:	89 17       	cp	r24, r25
    10f0:	19 f4       	brne	.+6      	; 0x10f8 <checkWorld+0xce>
		currentMoveWorld += 1;
    10f2:	2f 5f       	subi	r18, 0xFF	; 255
    10f4:	20 93 72 04 	sts	0x0472, r18
	}
}
    10f8:	1f 91       	pop	r17
    10fa:	0f 91       	pop	r16
    10fc:	ff 90       	pop	r15
    10fe:	ef 90       	pop	r14
    1100:	08 95       	ret

00001102 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    1102:	2f 92       	push	r2
    1104:	3f 92       	push	r3
    1106:	4f 92       	push	r4
    1108:	5f 92       	push	r5
    110a:	6f 92       	push	r6
    110c:	7f 92       	push	r7
    110e:	8f 92       	push	r8
    1110:	9f 92       	push	r9
    1112:	af 92       	push	r10
    1114:	bf 92       	push	r11
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	a0 97       	sbiw	r28, 0x20	; 32
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	de bf       	out	0x3e, r29	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	cd bf       	out	0x3d, r28	; 61
    1136:	2b 01       	movw	r4, r22
    1138:	3c 01       	movw	r6, r24
    113a:	2d 83       	std	Y+5, r18	; 0x05
    113c:	3e 83       	std	Y+6, r19	; 0x06
    113e:	4f 83       	std	Y+7, r20	; 0x07
    1140:	58 87       	std	Y+8, r21	; 0x08
    1142:	e9 86       	std	Y+9, r14	; 0x09
    1144:	fa 86       	std	Y+10, r15	; 0x0a
    1146:	0b 87       	std	Y+11, r16	; 0x0b
    1148:	1c 87       	std	Y+12, r17	; 0x0c
    114a:	ad 86       	std	Y+13, r10	; 0x0d
    114c:	be 86       	std	Y+14, r11	; 0x0e
    114e:	cf 86       	std	Y+15, r12	; 0x0f
    1150:	d8 8a       	std	Y+16, r13	; 0x10
    1152:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    1154:	33 24       	eor	r3, r3
    1156:	ca 01       	movw	r24, r20
    1158:	b9 01       	movw	r22, r18
    115a:	20 e0       	ldi	r18, 0x00	; 0
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	40 e0       	ldi	r20, 0x00	; 0
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <__gesf2>
    1166:	18 16       	cp	r1, r24
    1168:	14 f4       	brge	.+4      	; 0x116e <move_arc_stnb+0x6c>
    116a:	33 24       	eor	r3, r3
    116c:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    116e:	6d 81       	ldd	r22, Y+5	; 0x05
    1170:	7e 81       	ldd	r23, Y+6	; 0x06
    1172:	8f 81       	ldd	r24, Y+7	; 0x07
    1174:	98 85       	ldd	r25, Y+8	; 0x08
    1176:	2c ed       	ldi	r18, 0xDC	; 220
    1178:	38 eb       	ldi	r19, 0xB8	; 184
    117a:	48 e0       	ldi	r20, 0x08	; 8
    117c:	5e e3       	ldi	r21, 0x3E	; 62
    117e:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1182:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__fixsfsi>
    1186:	9b 01       	movw	r18, r22
    1188:	77 ff       	sbrs	r23, 7
    118a:	03 c0       	rjmp	.+6      	; 0x1192 <move_arc_stnb+0x90>
    118c:	30 95       	com	r19
    118e:	21 95       	neg	r18
    1190:	3f 4f       	sbci	r19, 0xFF	; 255
    1192:	b9 01       	movw	r22, r18
    1194:	88 27       	eor	r24, r24
    1196:	77 fd       	sbrc	r23, 7
    1198:	80 95       	com	r24
    119a:	98 2f       	mov	r25, r24
    119c:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__floatsisf>
    11a0:	69 83       	std	Y+1, r22	; 0x01
    11a2:	7a 83       	std	Y+2, r23	; 0x02
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    11a8:	69 85       	ldd	r22, Y+9	; 0x09
    11aa:	7a 85       	ldd	r23, Y+10	; 0x0a
    11ac:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ae:	9c 85       	ldd	r25, Y+12	; 0x0c
    11b0:	2c ed       	ldi	r18, 0xDC	; 220
    11b2:	38 eb       	ldi	r19, 0xB8	; 184
    11b4:	48 e0       	ldi	r20, 0x08	; 8
    11b6:	5e e3       	ldi	r21, 0x3E	; 62
    11b8:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    11bc:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__fixsfsi>
    11c0:	9b 01       	movw	r18, r22
    11c2:	77 ff       	sbrs	r23, 7
    11c4:	03 c0       	rjmp	.+6      	; 0x11cc <move_arc_stnb+0xca>
    11c6:	30 95       	com	r19
    11c8:	21 95       	neg	r18
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	b9 01       	movw	r22, r18
    11ce:	88 27       	eor	r24, r24
    11d0:	77 fd       	sbrc	r23, 7
    11d2:	80 95       	com	r24
    11d4:	98 2f       	mov	r25, r24
    11d6:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__floatsisf>
    11da:	4b 01       	movw	r8, r22
    11dc:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    11de:	6d 85       	ldd	r22, Y+13	; 0x0d
    11e0:	7e 85       	ldd	r23, Y+14	; 0x0e
    11e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e4:	98 89       	ldd	r25, Y+16	; 0x10
    11e6:	2c ed       	ldi	r18, 0xDC	; 220
    11e8:	38 eb       	ldi	r19, 0xB8	; 184
    11ea:	48 e0       	ldi	r20, 0x08	; 8
    11ec:	5e e3       	ldi	r21, 0x3E	; 62
    11ee:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    11f2:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__fixsfsi>
    11f6:	9b 01       	movw	r18, r22
    11f8:	77 ff       	sbrs	r23, 7
    11fa:	03 c0       	rjmp	.+6      	; 0x1202 <move_arc_stnb+0x100>
    11fc:	30 95       	com	r19
    11fe:	21 95       	neg	r18
    1200:	3f 4f       	sbci	r19, 0xFF	; 255
    1202:	b9 01       	movw	r22, r18
    1204:	88 27       	eor	r24, r24
    1206:	77 fd       	sbrc	r23, 7
    1208:	80 95       	com	r24
    120a:	98 2f       	mov	r25, r24
    120c:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__floatsisf>
    1210:	6b 01       	movw	r12, r22
    1212:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1214:	c3 01       	movw	r24, r6
    1216:	b2 01       	movw	r22, r4
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 e0       	ldi	r20, 0x00	; 0
    121e:	5f e4       	ldi	r21, 0x4F	; 79
    1220:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    1224:	88 23       	and	r24, r24
    1226:	a1 f5       	brne	.+104    	; 0x1290 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1228:	69 81       	ldd	r22, Y+1	; 0x01
    122a:	7a 81       	ldd	r23, Y+2	; 0x02
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1234:	2b 01       	movw	r4, r22
    1236:	3c 01       	movw	r6, r24
    1238:	c5 01       	movw	r24, r10
    123a:	b4 01       	movw	r22, r8
    123c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1240:	4b 01       	movw	r8, r22
    1242:	5c 01       	movw	r10, r24
    1244:	c7 01       	movw	r24, r14
    1246:	b6 01       	movw	r22, r12
    1248:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    124c:	6b 01       	movw	r12, r22
    124e:	7c 01       	movw	r14, r24
    1250:	2d b7       	in	r18, 0x3d	; 61
    1252:	3e b7       	in	r19, 0x3e	; 62
    1254:	29 50       	subi	r18, 0x09	; 9
    1256:	30 40       	sbci	r19, 0x00	; 0
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	3e bf       	out	0x3e, r19	; 62
    125e:	0f be       	out	0x3f, r0	; 63
    1260:	2d bf       	out	0x3d, r18	; 61
    1262:	ed b7       	in	r30, 0x3d	; 61
    1264:	fe b7       	in	r31, 0x3e	; 62
    1266:	31 96       	adiw	r30, 0x01	; 1
    1268:	ad b7       	in	r26, 0x3d	; 61
    126a:	be b7       	in	r27, 0x3e	; 62
    126c:	12 96       	adiw	r26, 0x02	; 2
    126e:	5c 92       	st	X, r5
    1270:	4e 92       	st	-X, r4
    1272:	11 97       	sbiw	r26, 0x01	; 1
    1274:	93 82       	std	Z+3, r9	; 0x03
    1276:	82 82       	std	Z+2, r8	; 0x02
    1278:	75 83       	std	Z+5, r23	; 0x05
    127a:	64 83       	std	Z+4, r22	; 0x04
    127c:	26 82       	std	Z+6, r2	; 0x06
    127e:	10 86       	std	Z+8, r1	; 0x08
    1280:	17 82       	std	Z+7, r1	; 0x07
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	62 e0       	ldi	r22, 0x02	; 2
    1286:	43 2d       	mov	r20, r3
    1288:	92 01       	movw	r18, r4
    128a:	84 01       	movw	r16, r8
    128c:	76 01       	movw	r14, r12
    128e:	c1 c1       	rjmp	.+898    	; 0x1612 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1290:	c3 01       	movw	r24, r6
    1292:	b2 01       	movw	r22, r4
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	e9 f5       	brne	.+122    	; 0x131e <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    12a4:	69 81       	ldd	r22, Y+1	; 0x01
    12a6:	7a 81       	ldd	r23, Y+2	; 0x02
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    12b0:	3b 01       	movw	r6, r22
    12b2:	c5 01       	movw	r24, r10
    12b4:	b4 01       	movw	r22, r8
    12b6:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    12ba:	8b 01       	movw	r16, r22
    12bc:	c7 01       	movw	r24, r14
    12be:	b6 01       	movw	r22, r12
    12c0:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    12c4:	7b 01       	movw	r14, r22
    12c6:	2d b7       	in	r18, 0x3d	; 61
    12c8:	3e b7       	in	r19, 0x3e	; 62
    12ca:	29 50       	subi	r18, 0x09	; 9
    12cc:	30 40       	sbci	r19, 0x00	; 0
    12ce:	0f b6       	in	r0, 0x3f	; 63
    12d0:	f8 94       	cli
    12d2:	3e bf       	out	0x3e, r19	; 62
    12d4:	0f be       	out	0x3f, r0	; 63
    12d6:	2d bf       	out	0x3d, r18	; 61
    12d8:	ed b7       	in	r30, 0x3d	; 61
    12da:	fe b7       	in	r31, 0x3e	; 62
    12dc:	31 96       	adiw	r30, 0x01	; 1
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	33 20       	and	r3, r3
    12e2:	09 f4       	brne	.+2      	; 0x12e6 <move_arc_stnb+0x1e4>
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	71 82       	std	Z+1, r7	; 0x01
    12e8:	60 82       	st	Z, r6
    12ea:	13 83       	std	Z+3, r17	; 0x03
    12ec:	02 83       	std	Z+2, r16	; 0x02
    12ee:	f5 82       	std	Z+5, r15	; 0x05
    12f0:	e4 82       	std	Z+4, r14	; 0x04
    12f2:	26 82       	std	Z+6, r2	; 0x06
    12f4:	10 86       	std	Z+8, r1	; 0x08
    12f6:	17 82       	std	Z+7, r1	; 0x07
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	62 e0       	ldi	r22, 0x02	; 2
    12fc:	93 01       	movw	r18, r6
    12fe:	c2 2c       	mov	r12, r2
    1300:	aa 24       	eor	r10, r10
    1302:	bb 24       	eor	r11, r11
    1304:	83 2c       	mov	r8, r3
    1306:	0e 94 a9 1c 	call	0x3952	; 0x3952 <STEPPER_move>
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	ad b7       	in	r26, 0x3d	; 61
    130e:	be b7       	in	r27, 0x3e	; 62
    1310:	19 96       	adiw	r26, 0x09	; 9
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	be bf       	out	0x3e, r27	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	ad bf       	out	0x3d, r26	; 61
    131c:	89 c1       	rjmp	.+786    	; 0x1630 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    131e:	c3 01       	movw	r24, r6
    1320:	b2 01       	movw	r22, r4
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <__gesf2>
    132e:	18 16       	cp	r1, r24
    1330:	0c f0       	brlt	.+2      	; 0x1334 <move_arc_stnb+0x232>
    1332:	b1 c0       	rjmp	.+354    	; 0x1496 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1334:	66 e6       	ldi	r22, 0x66	; 102
    1336:	76 e6       	ldi	r23, 0x66	; 102
    1338:	8a ea       	ldi	r24, 0xAA	; 170
    133a:	91 ec       	ldi	r25, 0xC1	; 193
    133c:	a3 01       	movw	r20, r6
    133e:	92 01       	movw	r18, r4
    1340:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	5f e3       	ldi	r21, 0x3F	; 63
    134c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    1350:	7b 01       	movw	r14, r22
    1352:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1354:	66 e6       	ldi	r22, 0x66	; 102
    1356:	76 e6       	ldi	r23, 0x66	; 102
    1358:	8a ea       	ldi	r24, 0xAA	; 170
    135a:	91 e4       	ldi	r25, 0x41	; 65
    135c:	a3 01       	movw	r20, r6
    135e:	92 01       	movw	r18, r4
    1360:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    1370:	5b 01       	movw	r10, r22
    1372:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1374:	ed b7       	in	r30, 0x3d	; 61
    1376:	fe b7       	in	r31, 0x3e	; 62
    1378:	39 97       	sbiw	r30, 0x09	; 9
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	fe bf       	out	0x3e, r31	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	ed bf       	out	0x3d, r30	; 61
    1384:	8d b6       	in	r8, 0x3d	; 61
    1386:	9e b6       	in	r9, 0x3e	; 62
    1388:	08 94       	sec
    138a:	81 1c       	adc	r8, r1
    138c:	91 1c       	adc	r9, r1
    138e:	6d 81       	ldd	r22, Y+5	; 0x05
    1390:	7e 81       	ldd	r23, Y+6	; 0x06
    1392:	8f 81       	ldd	r24, Y+7	; 0x07
    1394:	98 85       	ldd	r25, Y+8	; 0x08
    1396:	a8 01       	movw	r20, r16
    1398:	97 01       	movw	r18, r14
    139a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    139e:	2c ed       	ldi	r18, 0xDC	; 220
    13a0:	38 eb       	ldi	r19, 0xB8	; 184
    13a2:	48 e0       	ldi	r20, 0x08	; 8
    13a4:	5e e3       	ldi	r21, 0x3E	; 62
    13a6:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    13aa:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    13ae:	69 8b       	std	Y+17, r22	; 0x11
    13b0:	7a 8b       	std	Y+18, r23	; 0x12
    13b2:	8b 8b       	std	Y+19, r24	; 0x13
    13b4:	9c 8b       	std	Y+20, r25	; 0x14
    13b6:	69 85       	ldd	r22, Y+9	; 0x09
    13b8:	7a 85       	ldd	r23, Y+10	; 0x0a
    13ba:	8b 85       	ldd	r24, Y+11	; 0x0b
    13bc:	9c 85       	ldd	r25, Y+12	; 0x0c
    13be:	a8 01       	movw	r20, r16
    13c0:	97 01       	movw	r18, r14
    13c2:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    13c6:	2c ed       	ldi	r18, 0xDC	; 220
    13c8:	38 eb       	ldi	r19, 0xB8	; 184
    13ca:	48 e0       	ldi	r20, 0x08	; 8
    13cc:	5e e3       	ldi	r21, 0x3E	; 62
    13ce:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    13d2:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    13d6:	6d 8b       	std	Y+21, r22	; 0x15
    13d8:	7e 8b       	std	Y+22, r23	; 0x16
    13da:	8f 8b       	std	Y+23, r24	; 0x17
    13dc:	98 8f       	std	Y+24, r25	; 0x18
    13de:	6d 85       	ldd	r22, Y+13	; 0x0d
    13e0:	7e 85       	ldd	r23, Y+14	; 0x0e
    13e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13e4:	98 89       	ldd	r25, Y+16	; 0x10
    13e6:	a8 01       	movw	r20, r16
    13e8:	97 01       	movw	r18, r14
    13ea:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    13ee:	2c ed       	ldi	r18, 0xDC	; 220
    13f0:	38 eb       	ldi	r19, 0xB8	; 184
    13f2:	48 e0       	ldi	r20, 0x08	; 8
    13f4:	5e e3       	ldi	r21, 0x3E	; 62
    13f6:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    13fa:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    13fe:	2b 01       	movw	r4, r22
    1400:	3c 01       	movw	r6, r24
    1402:	6d 81       	ldd	r22, Y+5	; 0x05
    1404:	7e 81       	ldd	r23, Y+6	; 0x06
    1406:	8f 81       	ldd	r24, Y+7	; 0x07
    1408:	98 85       	ldd	r25, Y+8	; 0x08
    140a:	a6 01       	movw	r20, r12
    140c:	95 01       	movw	r18, r10
    140e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1412:	2c ed       	ldi	r18, 0xDC	; 220
    1414:	38 eb       	ldi	r19, 0xB8	; 184
    1416:	48 e0       	ldi	r20, 0x08	; 8
    1418:	5e e3       	ldi	r21, 0x3E	; 62
    141a:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    141e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1422:	d4 01       	movw	r26, r8
    1424:	6d 93       	st	X+, r22
    1426:	7c 93       	st	X, r23
    1428:	69 85       	ldd	r22, Y+9	; 0x09
    142a:	7a 85       	ldd	r23, Y+10	; 0x0a
    142c:	8b 85       	ldd	r24, Y+11	; 0x0b
    142e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1430:	a6 01       	movw	r20, r12
    1432:	95 01       	movw	r18, r10
    1434:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1438:	2c ed       	ldi	r18, 0xDC	; 220
    143a:	38 eb       	ldi	r19, 0xB8	; 184
    143c:	48 e0       	ldi	r20, 0x08	; 8
    143e:	5e e3       	ldi	r21, 0x3E	; 62
    1440:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1444:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1448:	f4 01       	movw	r30, r8
    144a:	73 83       	std	Z+3, r23	; 0x03
    144c:	62 83       	std	Z+2, r22	; 0x02
    144e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1450:	7e 85       	ldd	r23, Y+14	; 0x0e
    1452:	8f 85       	ldd	r24, Y+15	; 0x0f
    1454:	98 89       	ldd	r25, Y+16	; 0x10
    1456:	a6 01       	movw	r20, r12
    1458:	95 01       	movw	r18, r10
    145a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    145e:	2c ed       	ldi	r18, 0xDC	; 220
    1460:	38 eb       	ldi	r19, 0xB8	; 184
    1462:	48 e0       	ldi	r20, 0x08	; 8
    1464:	5e e3       	ldi	r21, 0x3E	; 62
    1466:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    146a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    146e:	d4 01       	movw	r26, r8
    1470:	15 96       	adiw	r26, 0x05	; 5
    1472:	7c 93       	st	X, r23
    1474:	6e 93       	st	-X, r22
    1476:	14 97       	sbiw	r26, 0x04	; 4
    1478:	16 96       	adiw	r26, 0x06	; 6
    147a:	2c 92       	st	X, r2
    147c:	16 97       	sbiw	r26, 0x06	; 6
    147e:	18 96       	adiw	r26, 0x08	; 8
    1480:	1c 92       	st	X, r1
    1482:	1e 92       	st	-X, r1
    1484:	17 97       	sbiw	r26, 0x07	; 7
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	43 2d       	mov	r20, r3
    148c:	29 89       	ldd	r18, Y+17	; 0x11
    148e:	3a 89       	ldd	r19, Y+18	; 0x12
    1490:	0d 89       	ldd	r16, Y+21	; 0x15
    1492:	1e 89       	ldd	r17, Y+22	; 0x16
    1494:	bd c0       	rjmp	.+378    	; 0x1610 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1496:	c3 01       	movw	r24, r6
    1498:	b2 01       	movw	r22, r4
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	40 e0       	ldi	r20, 0x00	; 0
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    14a6:	87 fd       	sbrc	r24, 7
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <move_arc_stnb+0x3ac>
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	c1 c0       	rjmp	.+386    	; 0x1630 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    14ae:	66 e6       	ldi	r22, 0x66	; 102
    14b0:	76 e6       	ldi	r23, 0x66	; 102
    14b2:	8a ea       	ldi	r24, 0xAA	; 170
    14b4:	91 e4       	ldi	r25, 0x41	; 65
    14b6:	a3 01       	movw	r20, r6
    14b8:	92 01       	movw	r18, r4
    14ba:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	40 e8       	ldi	r20, 0x80	; 128
    14c4:	5f e3       	ldi	r21, 0x3F	; 63
    14c6:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    14ca:	7b 01       	movw	r14, r22
    14cc:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    14ce:	66 e6       	ldi	r22, 0x66	; 102
    14d0:	76 e6       	ldi	r23, 0x66	; 102
    14d2:	8a ea       	ldi	r24, 0xAA	; 170
    14d4:	91 ec       	ldi	r25, 0xC1	; 193
    14d6:	a3 01       	movw	r20, r6
    14d8:	92 01       	movw	r18, r4
    14da:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e8       	ldi	r20, 0x80	; 128
    14e4:	5f e3       	ldi	r21, 0x3F	; 63
    14e6:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    14ea:	5b 01       	movw	r10, r22
    14ec:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    14ee:	2d b7       	in	r18, 0x3d	; 61
    14f0:	3e b7       	in	r19, 0x3e	; 62
    14f2:	29 50       	subi	r18, 0x09	; 9
    14f4:	30 40       	sbci	r19, 0x00	; 0
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	3e bf       	out	0x3e, r19	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	2d bf       	out	0x3d, r18	; 61
    1500:	8d b6       	in	r8, 0x3d	; 61
    1502:	9e b6       	in	r9, 0x3e	; 62
    1504:	08 94       	sec
    1506:	81 1c       	adc	r8, r1
    1508:	91 1c       	adc	r9, r1
    150a:	6d 81       	ldd	r22, Y+5	; 0x05
    150c:	7e 81       	ldd	r23, Y+6	; 0x06
    150e:	8f 81       	ldd	r24, Y+7	; 0x07
    1510:	98 85       	ldd	r25, Y+8	; 0x08
    1512:	a8 01       	movw	r20, r16
    1514:	97 01       	movw	r18, r14
    1516:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    151a:	2c ed       	ldi	r18, 0xDC	; 220
    151c:	38 eb       	ldi	r19, 0xB8	; 184
    151e:	48 e0       	ldi	r20, 0x08	; 8
    1520:	5e e3       	ldi	r21, 0x3E	; 62
    1522:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1526:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    152a:	69 8f       	std	Y+25, r22	; 0x19
    152c:	7a 8f       	std	Y+26, r23	; 0x1a
    152e:	8b 8f       	std	Y+27, r24	; 0x1b
    1530:	9c 8f       	std	Y+28, r25	; 0x1c
    1532:	69 85       	ldd	r22, Y+9	; 0x09
    1534:	7a 85       	ldd	r23, Y+10	; 0x0a
    1536:	8b 85       	ldd	r24, Y+11	; 0x0b
    1538:	9c 85       	ldd	r25, Y+12	; 0x0c
    153a:	a8 01       	movw	r20, r16
    153c:	97 01       	movw	r18, r14
    153e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1542:	2c ed       	ldi	r18, 0xDC	; 220
    1544:	38 eb       	ldi	r19, 0xB8	; 184
    1546:	48 e0       	ldi	r20, 0x08	; 8
    1548:	5e e3       	ldi	r21, 0x3E	; 62
    154a:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    154e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1552:	6d 8f       	std	Y+29, r22	; 0x1d
    1554:	7e 8f       	std	Y+30, r23	; 0x1e
    1556:	8f 8f       	std	Y+31, r24	; 0x1f
    1558:	98 a3       	std	Y+32, r25	; 0x20
    155a:	6d 85       	ldd	r22, Y+13	; 0x0d
    155c:	7e 85       	ldd	r23, Y+14	; 0x0e
    155e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1560:	98 89       	ldd	r25, Y+16	; 0x10
    1562:	a8 01       	movw	r20, r16
    1564:	97 01       	movw	r18, r14
    1566:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    156a:	2c ed       	ldi	r18, 0xDC	; 220
    156c:	38 eb       	ldi	r19, 0xB8	; 184
    156e:	48 e0       	ldi	r20, 0x08	; 8
    1570:	5e e3       	ldi	r21, 0x3E	; 62
    1572:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1576:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    157a:	2b 01       	movw	r4, r22
    157c:	3c 01       	movw	r6, r24
    157e:	6d 81       	ldd	r22, Y+5	; 0x05
    1580:	7e 81       	ldd	r23, Y+6	; 0x06
    1582:	8f 81       	ldd	r24, Y+7	; 0x07
    1584:	98 85       	ldd	r25, Y+8	; 0x08
    1586:	a6 01       	movw	r20, r12
    1588:	95 01       	movw	r18, r10
    158a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    158e:	2c ed       	ldi	r18, 0xDC	; 220
    1590:	38 eb       	ldi	r19, 0xB8	; 184
    1592:	48 e0       	ldi	r20, 0x08	; 8
    1594:	5e e3       	ldi	r21, 0x3E	; 62
    1596:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    159a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    159e:	d4 01       	movw	r26, r8
    15a0:	6d 93       	st	X+, r22
    15a2:	7c 93       	st	X, r23
    15a4:	69 85       	ldd	r22, Y+9	; 0x09
    15a6:	7a 85       	ldd	r23, Y+10	; 0x0a
    15a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    15aa:	9c 85       	ldd	r25, Y+12	; 0x0c
    15ac:	a6 01       	movw	r20, r12
    15ae:	95 01       	movw	r18, r10
    15b0:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    15b4:	2c ed       	ldi	r18, 0xDC	; 220
    15b6:	38 eb       	ldi	r19, 0xB8	; 184
    15b8:	48 e0       	ldi	r20, 0x08	; 8
    15ba:	5e e3       	ldi	r21, 0x3E	; 62
    15bc:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    15c0:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    15c4:	f4 01       	movw	r30, r8
    15c6:	73 83       	std	Z+3, r23	; 0x03
    15c8:	62 83       	std	Z+2, r22	; 0x02
    15ca:	6d 85       	ldd	r22, Y+13	; 0x0d
    15cc:	7e 85       	ldd	r23, Y+14	; 0x0e
    15ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d0:	98 89       	ldd	r25, Y+16	; 0x10
    15d2:	a6 01       	movw	r20, r12
    15d4:	95 01       	movw	r18, r10
    15d6:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    15da:	2c ed       	ldi	r18, 0xDC	; 220
    15dc:	38 eb       	ldi	r19, 0xB8	; 184
    15de:	48 e0       	ldi	r20, 0x08	; 8
    15e0:	5e e3       	ldi	r21, 0x3E	; 62
    15e2:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    15e6:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    15ea:	d4 01       	movw	r26, r8
    15ec:	15 96       	adiw	r26, 0x05	; 5
    15ee:	7c 93       	st	X, r23
    15f0:	6e 93       	st	-X, r22
    15f2:	14 97       	sbiw	r26, 0x04	; 4
    15f4:	16 96       	adiw	r26, 0x06	; 6
    15f6:	2c 92       	st	X, r2
    15f8:	16 97       	sbiw	r26, 0x06	; 6
    15fa:	18 96       	adiw	r26, 0x08	; 8
    15fc:	1c 92       	st	X, r1
    15fe:	1e 92       	st	-X, r1
    1600:	17 97       	sbiw	r26, 0x07	; 7
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	62 e0       	ldi	r22, 0x02	; 2
    1606:	43 2d       	mov	r20, r3
    1608:	29 8d       	ldd	r18, Y+25	; 0x19
    160a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    160c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    160e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1610:	72 01       	movw	r14, r4
    1612:	c2 2c       	mov	r12, r2
    1614:	aa 24       	eor	r10, r10
    1616:	bb 24       	eor	r11, r11
    1618:	83 2c       	mov	r8, r3
    161a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <STEPPER_move>
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	ed b7       	in	r30, 0x3d	; 61
    1622:	fe b7       	in	r31, 0x3e	; 62
    1624:	39 96       	adiw	r30, 0x09	; 9
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	fe bf       	out	0x3e, r31	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1630:	a0 96       	adiw	r28, 0x20	; 32
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	9f 90       	pop	r9
    1652:	8f 90       	pop	r8
    1654:	7f 90       	pop	r7
    1656:	6f 90       	pop	r6
    1658:	5f 90       	pop	r5
    165a:	4f 90       	pop	r4
    165c:	3f 90       	pop	r3
    165e:	2f 90       	pop	r2
    1660:	08 95       	ret

00001662 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    1662:	2f 92       	push	r2
    1664:	3f 92       	push	r3
    1666:	4f 92       	push	r4
    1668:	5f 92       	push	r5
    166a:	6f 92       	push	r6
    166c:	7f 92       	push	r7
    166e:	8f 92       	push	r8
    1670:	9f 92       	push	r9
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	a0 97       	sbiw	r28, 0x20	; 32
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	2b 01       	movw	r4, r22
    1698:	3c 01       	movw	r6, r24
    169a:	2d 83       	std	Y+5, r18	; 0x05
    169c:	3e 83       	std	Y+6, r19	; 0x06
    169e:	4f 83       	std	Y+7, r20	; 0x07
    16a0:	58 87       	std	Y+8, r21	; 0x08
    16a2:	e9 86       	std	Y+9, r14	; 0x09
    16a4:	fa 86       	std	Y+10, r15	; 0x0a
    16a6:	0b 87       	std	Y+11, r16	; 0x0b
    16a8:	1c 87       	std	Y+12, r17	; 0x0c
    16aa:	ad 86       	std	Y+13, r10	; 0x0d
    16ac:	be 86       	std	Y+14, r11	; 0x0e
    16ae:	cf 86       	std	Y+15, r12	; 0x0f
    16b0:	d8 8a       	std	Y+16, r13	; 0x10
    16b2:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    16b4:	33 24       	eor	r3, r3
    16b6:	ca 01       	movw	r24, r20
    16b8:	b9 01       	movw	r22, r18
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e0       	ldi	r20, 0x00	; 0
    16c0:	50 e0       	ldi	r21, 0x00	; 0
    16c2:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <__gesf2>
    16c6:	18 16       	cp	r1, r24
    16c8:	14 f4       	brge	.+4      	; 0x16ce <move_arc_stwt+0x6c>
    16ca:	33 24       	eor	r3, r3
    16cc:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    16ce:	6d 81       	ldd	r22, Y+5	; 0x05
    16d0:	7e 81       	ldd	r23, Y+6	; 0x06
    16d2:	8f 81       	ldd	r24, Y+7	; 0x07
    16d4:	98 85       	ldd	r25, Y+8	; 0x08
    16d6:	2c ed       	ldi	r18, 0xDC	; 220
    16d8:	38 eb       	ldi	r19, 0xB8	; 184
    16da:	48 e0       	ldi	r20, 0x08	; 8
    16dc:	5e e3       	ldi	r21, 0x3E	; 62
    16de:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    16e2:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__fixsfsi>
    16e6:	9b 01       	movw	r18, r22
    16e8:	77 ff       	sbrs	r23, 7
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <move_arc_stwt+0x90>
    16ec:	30 95       	com	r19
    16ee:	21 95       	neg	r18
    16f0:	3f 4f       	sbci	r19, 0xFF	; 255
    16f2:	b9 01       	movw	r22, r18
    16f4:	88 27       	eor	r24, r24
    16f6:	77 fd       	sbrc	r23, 7
    16f8:	80 95       	com	r24
    16fa:	98 2f       	mov	r25, r24
    16fc:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__floatsisf>
    1700:	69 83       	std	Y+1, r22	; 0x01
    1702:	7a 83       	std	Y+2, r23	; 0x02
    1704:	8b 83       	std	Y+3, r24	; 0x03
    1706:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1708:	69 85       	ldd	r22, Y+9	; 0x09
    170a:	7a 85       	ldd	r23, Y+10	; 0x0a
    170c:	8b 85       	ldd	r24, Y+11	; 0x0b
    170e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1710:	2c ed       	ldi	r18, 0xDC	; 220
    1712:	38 eb       	ldi	r19, 0xB8	; 184
    1714:	48 e0       	ldi	r20, 0x08	; 8
    1716:	5e e3       	ldi	r21, 0x3E	; 62
    1718:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    171c:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__fixsfsi>
    1720:	9b 01       	movw	r18, r22
    1722:	77 ff       	sbrs	r23, 7
    1724:	03 c0       	rjmp	.+6      	; 0x172c <move_arc_stwt+0xca>
    1726:	30 95       	com	r19
    1728:	21 95       	neg	r18
    172a:	3f 4f       	sbci	r19, 0xFF	; 255
    172c:	b9 01       	movw	r22, r18
    172e:	88 27       	eor	r24, r24
    1730:	77 fd       	sbrc	r23, 7
    1732:	80 95       	com	r24
    1734:	98 2f       	mov	r25, r24
    1736:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__floatsisf>
    173a:	4b 01       	movw	r8, r22
    173c:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    173e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1740:	7e 85       	ldd	r23, Y+14	; 0x0e
    1742:	8f 85       	ldd	r24, Y+15	; 0x0f
    1744:	98 89       	ldd	r25, Y+16	; 0x10
    1746:	2c ed       	ldi	r18, 0xDC	; 220
    1748:	38 eb       	ldi	r19, 0xB8	; 184
    174a:	48 e0       	ldi	r20, 0x08	; 8
    174c:	5e e3       	ldi	r21, 0x3E	; 62
    174e:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1752:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__fixsfsi>
    1756:	9b 01       	movw	r18, r22
    1758:	77 ff       	sbrs	r23, 7
    175a:	03 c0       	rjmp	.+6      	; 0x1762 <move_arc_stwt+0x100>
    175c:	30 95       	com	r19
    175e:	21 95       	neg	r18
    1760:	3f 4f       	sbci	r19, 0xFF	; 255
    1762:	b9 01       	movw	r22, r18
    1764:	88 27       	eor	r24, r24
    1766:	77 fd       	sbrc	r23, 7
    1768:	80 95       	com	r24
    176a:	98 2f       	mov	r25, r24
    176c:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__floatsisf>
    1770:	6b 01       	movw	r12, r22
    1772:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1774:	c3 01       	movw	r24, r6
    1776:	b2 01       	movw	r22, r4
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	40 e0       	ldi	r20, 0x00	; 0
    177e:	5f e4       	ldi	r21, 0x4F	; 79
    1780:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    1784:	88 23       	and	r24, r24
    1786:	a1 f5       	brne	.+104    	; 0x17f0 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1788:	69 81       	ldd	r22, Y+1	; 0x01
    178a:	7a 81       	ldd	r23, Y+2	; 0x02
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1794:	2b 01       	movw	r4, r22
    1796:	3c 01       	movw	r6, r24
    1798:	c5 01       	movw	r24, r10
    179a:	b4 01       	movw	r22, r8
    179c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    17a0:	4b 01       	movw	r8, r22
    17a2:	5c 01       	movw	r10, r24
    17a4:	c7 01       	movw	r24, r14
    17a6:	b6 01       	movw	r22, r12
    17a8:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    17ac:	6b 01       	movw	r12, r22
    17ae:	7c 01       	movw	r14, r24
    17b0:	2d b7       	in	r18, 0x3d	; 61
    17b2:	3e b7       	in	r19, 0x3e	; 62
    17b4:	29 50       	subi	r18, 0x09	; 9
    17b6:	30 40       	sbci	r19, 0x00	; 0
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	3e bf       	out	0x3e, r19	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	2d bf       	out	0x3d, r18	; 61
    17c2:	ed b7       	in	r30, 0x3d	; 61
    17c4:	fe b7       	in	r31, 0x3e	; 62
    17c6:	31 96       	adiw	r30, 0x01	; 1
    17c8:	ad b7       	in	r26, 0x3d	; 61
    17ca:	be b7       	in	r27, 0x3e	; 62
    17cc:	12 96       	adiw	r26, 0x02	; 2
    17ce:	5c 92       	st	X, r5
    17d0:	4e 92       	st	-X, r4
    17d2:	11 97       	sbiw	r26, 0x01	; 1
    17d4:	93 82       	std	Z+3, r9	; 0x03
    17d6:	82 82       	std	Z+2, r8	; 0x02
    17d8:	75 83       	std	Z+5, r23	; 0x05
    17da:	64 83       	std	Z+4, r22	; 0x04
    17dc:	26 82       	std	Z+6, r2	; 0x06
    17de:	10 86       	std	Z+8, r1	; 0x08
    17e0:	17 82       	std	Z+7, r1	; 0x07
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	43 2d       	mov	r20, r3
    17e8:	92 01       	movw	r18, r4
    17ea:	84 01       	movw	r16, r8
    17ec:	76 01       	movw	r14, r12
    17ee:	c1 c1       	rjmp	.+898    	; 0x1b72 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    17f0:	c3 01       	movw	r24, r6
    17f2:	b2 01       	movw	r22, r4
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	40 e0       	ldi	r20, 0x00	; 0
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    1800:	88 23       	and	r24, r24
    1802:	e9 f5       	brne	.+122    	; 0x187e <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1804:	69 81       	ldd	r22, Y+1	; 0x01
    1806:	7a 81       	ldd	r23, Y+2	; 0x02
    1808:	8b 81       	ldd	r24, Y+3	; 0x03
    180a:	9c 81       	ldd	r25, Y+4	; 0x04
    180c:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1810:	3b 01       	movw	r6, r22
    1812:	c5 01       	movw	r24, r10
    1814:	b4 01       	movw	r22, r8
    1816:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    181a:	8b 01       	movw	r16, r22
    181c:	c7 01       	movw	r24, r14
    181e:	b6 01       	movw	r22, r12
    1820:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1824:	7b 01       	movw	r14, r22
    1826:	2d b7       	in	r18, 0x3d	; 61
    1828:	3e b7       	in	r19, 0x3e	; 62
    182a:	29 50       	subi	r18, 0x09	; 9
    182c:	30 40       	sbci	r19, 0x00	; 0
    182e:	0f b6       	in	r0, 0x3f	; 63
    1830:	f8 94       	cli
    1832:	3e bf       	out	0x3e, r19	; 62
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	2d bf       	out	0x3d, r18	; 61
    1838:	ed b7       	in	r30, 0x3d	; 61
    183a:	fe b7       	in	r31, 0x3e	; 62
    183c:	31 96       	adiw	r30, 0x01	; 1
    183e:	40 e0       	ldi	r20, 0x00	; 0
    1840:	33 20       	and	r3, r3
    1842:	09 f4       	brne	.+2      	; 0x1846 <move_arc_stwt+0x1e4>
    1844:	41 e0       	ldi	r20, 0x01	; 1
    1846:	71 82       	std	Z+1, r7	; 0x01
    1848:	60 82       	st	Z, r6
    184a:	13 83       	std	Z+3, r17	; 0x03
    184c:	02 83       	std	Z+2, r16	; 0x02
    184e:	f5 82       	std	Z+5, r15	; 0x05
    1850:	e4 82       	std	Z+4, r14	; 0x04
    1852:	26 82       	std	Z+6, r2	; 0x06
    1854:	10 86       	std	Z+8, r1	; 0x08
    1856:	17 82       	std	Z+7, r1	; 0x07
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	62 e0       	ldi	r22, 0x02	; 2
    185c:	93 01       	movw	r18, r6
    185e:	c2 2c       	mov	r12, r2
    1860:	aa 24       	eor	r10, r10
    1862:	bb 24       	eor	r11, r11
    1864:	83 2c       	mov	r8, r3
    1866:	0e 94 a9 1c 	call	0x3952	; 0x3952 <STEPPER_move>
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	ad b7       	in	r26, 0x3d	; 61
    186e:	be b7       	in	r27, 0x3e	; 62
    1870:	19 96       	adiw	r26, 0x09	; 9
    1872:	0f b6       	in	r0, 0x3f	; 63
    1874:	f8 94       	cli
    1876:	be bf       	out	0x3e, r27	; 62
    1878:	0f be       	out	0x3f, r0	; 63
    187a:	ad bf       	out	0x3d, r26	; 61
    187c:	89 c1       	rjmp	.+786    	; 0x1b90 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    187e:	c3 01       	movw	r24, r6
    1880:	b2 01       	movw	r22, r4
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <__gesf2>
    188e:	18 16       	cp	r1, r24
    1890:	0c f0       	brlt	.+2      	; 0x1894 <move_arc_stwt+0x232>
    1892:	b1 c0       	rjmp	.+354    	; 0x19f6 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1894:	66 e6       	ldi	r22, 0x66	; 102
    1896:	76 e6       	ldi	r23, 0x66	; 102
    1898:	8a ea       	ldi	r24, 0xAA	; 170
    189a:	91 ec       	ldi	r25, 0xC1	; 193
    189c:	a3 01       	movw	r20, r6
    189e:	92 01       	movw	r18, r4
    18a0:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e8       	ldi	r20, 0x80	; 128
    18aa:	5f e3       	ldi	r21, 0x3F	; 63
    18ac:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    18b0:	7b 01       	movw	r14, r22
    18b2:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    18b4:	66 e6       	ldi	r22, 0x66	; 102
    18b6:	76 e6       	ldi	r23, 0x66	; 102
    18b8:	8a ea       	ldi	r24, 0xAA	; 170
    18ba:	91 e4       	ldi	r25, 0x41	; 65
    18bc:	a3 01       	movw	r20, r6
    18be:	92 01       	movw	r18, r4
    18c0:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	40 e8       	ldi	r20, 0x80	; 128
    18ca:	5f e3       	ldi	r21, 0x3F	; 63
    18cc:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    18d0:	5b 01       	movw	r10, r22
    18d2:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    18d4:	ed b7       	in	r30, 0x3d	; 61
    18d6:	fe b7       	in	r31, 0x3e	; 62
    18d8:	39 97       	sbiw	r30, 0x09	; 9
    18da:	0f b6       	in	r0, 0x3f	; 63
    18dc:	f8 94       	cli
    18de:	fe bf       	out	0x3e, r31	; 62
    18e0:	0f be       	out	0x3f, r0	; 63
    18e2:	ed bf       	out	0x3d, r30	; 61
    18e4:	8d b6       	in	r8, 0x3d	; 61
    18e6:	9e b6       	in	r9, 0x3e	; 62
    18e8:	08 94       	sec
    18ea:	81 1c       	adc	r8, r1
    18ec:	91 1c       	adc	r9, r1
    18ee:	6d 81       	ldd	r22, Y+5	; 0x05
    18f0:	7e 81       	ldd	r23, Y+6	; 0x06
    18f2:	8f 81       	ldd	r24, Y+7	; 0x07
    18f4:	98 85       	ldd	r25, Y+8	; 0x08
    18f6:	a8 01       	movw	r20, r16
    18f8:	97 01       	movw	r18, r14
    18fa:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    18fe:	2c ed       	ldi	r18, 0xDC	; 220
    1900:	38 eb       	ldi	r19, 0xB8	; 184
    1902:	48 e0       	ldi	r20, 0x08	; 8
    1904:	5e e3       	ldi	r21, 0x3E	; 62
    1906:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    190a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    190e:	69 8b       	std	Y+17, r22	; 0x11
    1910:	7a 8b       	std	Y+18, r23	; 0x12
    1912:	8b 8b       	std	Y+19, r24	; 0x13
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	69 85       	ldd	r22, Y+9	; 0x09
    1918:	7a 85       	ldd	r23, Y+10	; 0x0a
    191a:	8b 85       	ldd	r24, Y+11	; 0x0b
    191c:	9c 85       	ldd	r25, Y+12	; 0x0c
    191e:	a8 01       	movw	r20, r16
    1920:	97 01       	movw	r18, r14
    1922:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1926:	2c ed       	ldi	r18, 0xDC	; 220
    1928:	38 eb       	ldi	r19, 0xB8	; 184
    192a:	48 e0       	ldi	r20, 0x08	; 8
    192c:	5e e3       	ldi	r21, 0x3E	; 62
    192e:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1932:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1936:	6d 8b       	std	Y+21, r22	; 0x15
    1938:	7e 8b       	std	Y+22, r23	; 0x16
    193a:	8f 8b       	std	Y+23, r24	; 0x17
    193c:	98 8f       	std	Y+24, r25	; 0x18
    193e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1940:	7e 85       	ldd	r23, Y+14	; 0x0e
    1942:	8f 85       	ldd	r24, Y+15	; 0x0f
    1944:	98 89       	ldd	r25, Y+16	; 0x10
    1946:	a8 01       	movw	r20, r16
    1948:	97 01       	movw	r18, r14
    194a:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    194e:	2c ed       	ldi	r18, 0xDC	; 220
    1950:	38 eb       	ldi	r19, 0xB8	; 184
    1952:	48 e0       	ldi	r20, 0x08	; 8
    1954:	5e e3       	ldi	r21, 0x3E	; 62
    1956:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    195a:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    195e:	2b 01       	movw	r4, r22
    1960:	3c 01       	movw	r6, r24
    1962:	6d 81       	ldd	r22, Y+5	; 0x05
    1964:	7e 81       	ldd	r23, Y+6	; 0x06
    1966:	8f 81       	ldd	r24, Y+7	; 0x07
    1968:	98 85       	ldd	r25, Y+8	; 0x08
    196a:	a6 01       	movw	r20, r12
    196c:	95 01       	movw	r18, r10
    196e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1972:	2c ed       	ldi	r18, 0xDC	; 220
    1974:	38 eb       	ldi	r19, 0xB8	; 184
    1976:	48 e0       	ldi	r20, 0x08	; 8
    1978:	5e e3       	ldi	r21, 0x3E	; 62
    197a:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    197e:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1982:	d4 01       	movw	r26, r8
    1984:	6d 93       	st	X+, r22
    1986:	7c 93       	st	X, r23
    1988:	69 85       	ldd	r22, Y+9	; 0x09
    198a:	7a 85       	ldd	r23, Y+10	; 0x0a
    198c:	8b 85       	ldd	r24, Y+11	; 0x0b
    198e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1990:	a6 01       	movw	r20, r12
    1992:	95 01       	movw	r18, r10
    1994:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1998:	2c ed       	ldi	r18, 0xDC	; 220
    199a:	38 eb       	ldi	r19, 0xB8	; 184
    199c:	48 e0       	ldi	r20, 0x08	; 8
    199e:	5e e3       	ldi	r21, 0x3E	; 62
    19a0:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    19a4:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    19a8:	f4 01       	movw	r30, r8
    19aa:	73 83       	std	Z+3, r23	; 0x03
    19ac:	62 83       	std	Z+2, r22	; 0x02
    19ae:	6d 85       	ldd	r22, Y+13	; 0x0d
    19b0:	7e 85       	ldd	r23, Y+14	; 0x0e
    19b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b4:	98 89       	ldd	r25, Y+16	; 0x10
    19b6:	a6 01       	movw	r20, r12
    19b8:	95 01       	movw	r18, r10
    19ba:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    19be:	2c ed       	ldi	r18, 0xDC	; 220
    19c0:	38 eb       	ldi	r19, 0xB8	; 184
    19c2:	48 e0       	ldi	r20, 0x08	; 8
    19c4:	5e e3       	ldi	r21, 0x3E	; 62
    19c6:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    19ca:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    19ce:	d4 01       	movw	r26, r8
    19d0:	15 96       	adiw	r26, 0x05	; 5
    19d2:	7c 93       	st	X, r23
    19d4:	6e 93       	st	-X, r22
    19d6:	14 97       	sbiw	r26, 0x04	; 4
    19d8:	16 96       	adiw	r26, 0x06	; 6
    19da:	2c 92       	st	X, r2
    19dc:	16 97       	sbiw	r26, 0x06	; 6
    19de:	18 96       	adiw	r26, 0x08	; 8
    19e0:	1c 92       	st	X, r1
    19e2:	1e 92       	st	-X, r1
    19e4:	17 97       	sbiw	r26, 0x07	; 7
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	62 e0       	ldi	r22, 0x02	; 2
    19ea:	43 2d       	mov	r20, r3
    19ec:	29 89       	ldd	r18, Y+17	; 0x11
    19ee:	3a 89       	ldd	r19, Y+18	; 0x12
    19f0:	0d 89       	ldd	r16, Y+21	; 0x15
    19f2:	1e 89       	ldd	r17, Y+22	; 0x16
    19f4:	bd c0       	rjmp	.+378    	; 0x1b70 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    19f6:	c3 01       	movw	r24, r6
    19f8:	b2 01       	movw	r22, r4
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	50 e0       	ldi	r21, 0x00	; 0
    1a02:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    1a06:	87 fd       	sbrc	r24, 7
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <move_arc_stwt+0x3ac>
    1a0a:	80 e0       	ldi	r24, 0x00	; 0
    1a0c:	c1 c0       	rjmp	.+386    	; 0x1b90 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1a0e:	66 e6       	ldi	r22, 0x66	; 102
    1a10:	76 e6       	ldi	r23, 0x66	; 102
    1a12:	8a ea       	ldi	r24, 0xAA	; 170
    1a14:	91 e4       	ldi	r25, 0x41	; 65
    1a16:	a3 01       	movw	r20, r6
    1a18:	92 01       	movw	r18, r4
    1a1a:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    1a2a:	7b 01       	movw	r14, r22
    1a2c:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1a2e:	66 e6       	ldi	r22, 0x66	; 102
    1a30:	76 e6       	ldi	r23, 0x66	; 102
    1a32:	8a ea       	ldi	r24, 0xAA	; 170
    1a34:	91 ec       	ldi	r25, 0xC1	; 193
    1a36:	a3 01       	movw	r20, r6
    1a38:	92 01       	movw	r18, r4
    1a3a:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1a3e:	20 e0       	ldi	r18, 0x00	; 0
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	5f e3       	ldi	r21, 0x3F	; 63
    1a46:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    1a4a:	5b 01       	movw	r10, r22
    1a4c:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1a4e:	2d b7       	in	r18, 0x3d	; 61
    1a50:	3e b7       	in	r19, 0x3e	; 62
    1a52:	29 50       	subi	r18, 0x09	; 9
    1a54:	30 40       	sbci	r19, 0x00	; 0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	3e bf       	out	0x3e, r19	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	2d bf       	out	0x3d, r18	; 61
    1a60:	8d b6       	in	r8, 0x3d	; 61
    1a62:	9e b6       	in	r9, 0x3e	; 62
    1a64:	08 94       	sec
    1a66:	81 1c       	adc	r8, r1
    1a68:	91 1c       	adc	r9, r1
    1a6a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a6c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a70:	98 85       	ldd	r25, Y+8	; 0x08
    1a72:	a8 01       	movw	r20, r16
    1a74:	97 01       	movw	r18, r14
    1a76:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1a7a:	2c ed       	ldi	r18, 0xDC	; 220
    1a7c:	38 eb       	ldi	r19, 0xB8	; 184
    1a7e:	48 e0       	ldi	r20, 0x08	; 8
    1a80:	5e e3       	ldi	r21, 0x3E	; 62
    1a82:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1a86:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1a8a:	69 8f       	std	Y+25, r22	; 0x19
    1a8c:	7a 8f       	std	Y+26, r23	; 0x1a
    1a8e:	8b 8f       	std	Y+27, r24	; 0x1b
    1a90:	9c 8f       	std	Y+28, r25	; 0x1c
    1a92:	69 85       	ldd	r22, Y+9	; 0x09
    1a94:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a96:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a98:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a9a:	a8 01       	movw	r20, r16
    1a9c:	97 01       	movw	r18, r14
    1a9e:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1aa2:	2c ed       	ldi	r18, 0xDC	; 220
    1aa4:	38 eb       	ldi	r19, 0xB8	; 184
    1aa6:	48 e0       	ldi	r20, 0x08	; 8
    1aa8:	5e e3       	ldi	r21, 0x3E	; 62
    1aaa:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1aae:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1ab2:	6d 8f       	std	Y+29, r22	; 0x1d
    1ab4:	7e 8f       	std	Y+30, r23	; 0x1e
    1ab6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ab8:	98 a3       	std	Y+32, r25	; 0x20
    1aba:	6d 85       	ldd	r22, Y+13	; 0x0d
    1abc:	7e 85       	ldd	r23, Y+14	; 0x0e
    1abe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ac0:	98 89       	ldd	r25, Y+16	; 0x10
    1ac2:	a8 01       	movw	r20, r16
    1ac4:	97 01       	movw	r18, r14
    1ac6:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1aca:	2c ed       	ldi	r18, 0xDC	; 220
    1acc:	38 eb       	ldi	r19, 0xB8	; 184
    1ace:	48 e0       	ldi	r20, 0x08	; 8
    1ad0:	5e e3       	ldi	r21, 0x3E	; 62
    1ad2:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1ad6:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1ada:	2b 01       	movw	r4, r22
    1adc:	3c 01       	movw	r6, r24
    1ade:	6d 81       	ldd	r22, Y+5	; 0x05
    1ae0:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae2:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae4:	98 85       	ldd	r25, Y+8	; 0x08
    1ae6:	a6 01       	movw	r20, r12
    1ae8:	95 01       	movw	r18, r10
    1aea:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1aee:	2c ed       	ldi	r18, 0xDC	; 220
    1af0:	38 eb       	ldi	r19, 0xB8	; 184
    1af2:	48 e0       	ldi	r20, 0x08	; 8
    1af4:	5e e3       	ldi	r21, 0x3E	; 62
    1af6:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1afa:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1afe:	d4 01       	movw	r26, r8
    1b00:	6d 93       	st	X+, r22
    1b02:	7c 93       	st	X, r23
    1b04:	69 85       	ldd	r22, Y+9	; 0x09
    1b06:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b08:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b0a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b0c:	a6 01       	movw	r20, r12
    1b0e:	95 01       	movw	r18, r10
    1b10:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1b14:	2c ed       	ldi	r18, 0xDC	; 220
    1b16:	38 eb       	ldi	r19, 0xB8	; 184
    1b18:	48 e0       	ldi	r20, 0x08	; 8
    1b1a:	5e e3       	ldi	r21, 0x3E	; 62
    1b1c:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1b20:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1b24:	f4 01       	movw	r30, r8
    1b26:	73 83       	std	Z+3, r23	; 0x03
    1b28:	62 83       	std	Z+2, r22	; 0x02
    1b2a:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b2c:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b30:	98 89       	ldd	r25, Y+16	; 0x10
    1b32:	a6 01       	movw	r20, r12
    1b34:	95 01       	movw	r18, r10
    1b36:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    1b3a:	2c ed       	ldi	r18, 0xDC	; 220
    1b3c:	38 eb       	ldi	r19, 0xB8	; 184
    1b3e:	48 e0       	ldi	r20, 0x08	; 8
    1b40:	5e e3       	ldi	r21, 0x3E	; 62
    1b42:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    1b46:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1b4a:	d4 01       	movw	r26, r8
    1b4c:	15 96       	adiw	r26, 0x05	; 5
    1b4e:	7c 93       	st	X, r23
    1b50:	6e 93       	st	-X, r22
    1b52:	14 97       	sbiw	r26, 0x04	; 4
    1b54:	16 96       	adiw	r26, 0x06	; 6
    1b56:	2c 92       	st	X, r2
    1b58:	16 97       	sbiw	r26, 0x06	; 6
    1b5a:	18 96       	adiw	r26, 0x08	; 8
    1b5c:	1c 92       	st	X, r1
    1b5e:	1e 92       	st	-X, r1
    1b60:	17 97       	sbiw	r26, 0x07	; 7
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	62 e0       	ldi	r22, 0x02	; 2
    1b66:	43 2d       	mov	r20, r3
    1b68:	29 8d       	ldd	r18, Y+25	; 0x19
    1b6a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1b6c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1b6e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1b70:	72 01       	movw	r14, r4
    1b72:	c2 2c       	mov	r12, r2
    1b74:	aa 24       	eor	r10, r10
    1b76:	bb 24       	eor	r11, r11
    1b78:	83 2c       	mov	r8, r3
    1b7a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <STEPPER_move>
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	ed b7       	in	r30, 0x3d	; 61
    1b82:	fe b7       	in	r31, 0x3e	; 62
    1b84:	39 96       	adiw	r30, 0x09	; 9
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	fe bf       	out	0x3e, r31	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1b90:	a0 96       	adiw	r28, 0x20	; 32
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	de bf       	out	0x3e, r29	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	cd bf       	out	0x3d, r28	; 61
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	1f 91       	pop	r17
    1ba2:	0f 91       	pop	r16
    1ba4:	ff 90       	pop	r15
    1ba6:	ef 90       	pop	r14
    1ba8:	df 90       	pop	r13
    1baa:	cf 90       	pop	r12
    1bac:	bf 90       	pop	r11
    1bae:	af 90       	pop	r10
    1bb0:	9f 90       	pop	r9
    1bb2:	8f 90       	pop	r8
    1bb4:	7f 90       	pop	r7
    1bb6:	6f 90       	pop	r6
    1bb8:	5f 90       	pop	r5
    1bba:	4f 90       	pop	r4
    1bbc:	3f 90       	pop	r3
    1bbe:	2f 90       	pop	r2
    1bc0:	08 95       	ret

00001bc2 <setOdometry>:
* Input Variables:	void
* Output Return:	float odometry 
* Overview:		    Sets the odometry to move
********************************************************************/
void setOdometry( float odometry )
{	
    1bc2:	8f 92       	push	r8
    1bc4:	af 92       	push	r10
    1bc6:	bf 92       	push	r11
    1bc8:	cf 92       	push	r12
    1bca:	ef 92       	push	r14
    1bcc:	ff 92       	push	r15
    1bce:	0f 93       	push	r16
    1bd0:	1f 93       	push	r17
	// Set the gloable odometryTrigger
	odometryTrigger = odometry;
    1bd2:	60 93 f1 04 	sts	0x04F1, r22
    1bd6:	70 93 f2 04 	sts	0x04F2, r23
    1bda:	80 93 f3 04 	sts	0x04F3, r24
    1bde:	90 93 f4 04 	sts	0x04F4, r25

	// Set the stepers
	STEPPER_move_stnb( STEPPER_BOTH, 
    1be2:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    1be6:	8b 01       	movw	r16, r22
    1be8:	9c 01       	movw	r18, r24
    1bea:	8d b7       	in	r24, 0x3d	; 61
    1bec:	9e b7       	in	r25, 0x3e	; 62
    1bee:	09 97       	sbiw	r24, 0x09	; 9
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	9e bf       	out	0x3e, r25	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	8d bf       	out	0x3d, r24	; 61
    1bfa:	ed b7       	in	r30, 0x3d	; 61
    1bfc:	fe b7       	in	r31, 0x3e	; 62
    1bfe:	31 96       	adiw	r30, 0x01	; 1
    1c00:	ad b7       	in	r26, 0x3d	; 61
    1c02:	be b7       	in	r27, 0x3e	; 62
    1c04:	12 96       	adiw	r26, 0x02	; 2
    1c06:	1c 93       	st	X, r17
    1c08:	0e 93       	st	-X, r16
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
    1c0c:	84 ef       	ldi	r24, 0xF4	; 244
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	93 83       	std	Z+3, r25	; 0x03
    1c12:	82 83       	std	Z+2, r24	; 0x02
    1c14:	95 83       	std	Z+5, r25	; 0x05
    1c16:	84 83       	std	Z+4, r24	; 0x04
    1c18:	16 82       	std	Z+6, r1	; 0x06
    1c1a:	10 86       	std	Z+8, r1	; 0x08
    1c1c:	17 82       	std	Z+7, r1	; 0x07
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	62 e0       	ldi	r22, 0x02	; 2
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	98 01       	movw	r18, r16
    1c26:	04 ef       	ldi	r16, 0xF4	; 244
    1c28:	11 e0       	ldi	r17, 0x01	; 1
    1c2a:	94 ef       	ldi	r25, 0xF4	; 244
    1c2c:	e9 2e       	mov	r14, r25
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	f9 2e       	mov	r15, r25
    1c32:	cc 24       	eor	r12, r12
    1c34:	aa 24       	eor	r10, r10
    1c36:	bb 24       	eor	r11, r11
    1c38:	88 24       	eor	r8, r8
    1c3a:	83 94       	inc	r8
    1c3c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <STEPPER_move>
    1c40:	8d b7       	in	r24, 0x3d	; 61
    1c42:	9e b7       	in	r25, 0x3e	; 62
    1c44:	09 96       	adiw	r24, 0x09	; 9
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	9e bf       	out	0x3e, r25	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	8d bf       	out	0x3d, r24	; 61
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF, // Left
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF ); // Right
}
    1c50:	1f 91       	pop	r17
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	cf 90       	pop	r12
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	8f 90       	pop	r8
    1c60:	08 95       	ret

00001c62 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1c62:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1c66:	28 2f       	mov	r18, r24
    1c68:	21 70       	andi	r18, 0x01	; 1
    1c6a:	20 93 0a 06 	sts	0x060A, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	82 70       	andi	r24, 0x02	; 2
    1c72:	90 70       	andi	r25, 0x00	; 0
    1c74:	95 95       	asr	r25
    1c76:	87 95       	ror	r24
    1c78:	80 93 0b 06 	sts	0x060B, r24
}
    1c7c:	08 95       	ret

00001c7e <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1c7e:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1c82:	60 93 01 05 	sts	0x0501, r22
    1c86:	70 93 02 05 	sts	0x0502, r23
    1c8a:	80 93 03 05 	sts	0x0503, r24
    1c8e:	90 93 04 05 	sts	0x0504, r25
	leftLightVolt = getLeftLight();
    1c92:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1c96:	60 93 99 06 	sts	0x0699, r22
    1c9a:	70 93 9a 06 	sts	0x069A, r23
    1c9e:	80 93 9b 06 	sts	0x069B, r24
    1ca2:	90 93 9c 06 	sts	0x069C, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1ca6:	08 95       	ret

00001ca8 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1ca8:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1cac:	60 93 69 04 	sts	0x0469, r22
    1cb0:	70 93 6a 04 	sts	0x046A, r23
    1cb4:	80 93 6b 04 	sts	0x046B, r24
    1cb8:	90 93 6c 04 	sts	0x046C, r25
	bkIR = getBackIR();
    1cbc:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1cc0:	60 93 73 04 	sts	0x0473, r22
    1cc4:	70 93 74 04 	sts	0x0474, r23
    1cc8:	80 93 75 04 	sts	0x0475, r24
    1ccc:	90 93 76 04 	sts	0x0476, r25
	ltIR = getLeftIR();
    1cd0:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1cd4:	60 93 0c 06 	sts	0x060C, r22
    1cd8:	70 93 0d 06 	sts	0x060D, r23
    1cdc:	80 93 0e 06 	sts	0x060E, r24
    1ce0:	90 93 0f 06 	sts	0x060F, r25
	rtIR = getRightIR();
    1ce4:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1ce8:	60 93 10 06 	sts	0x0610, r22
    1cec:	70 93 11 06 	sts	0x0611, r23
    1cf0:	80 93 12 06 	sts	0x0612, r24
    1cf4:	90 93 13 06 	sts	0x0613, r25
}
    1cf8:	08 95       	ret

00001cfa <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1cfa:	cf 92       	push	r12
    1cfc:	df 92       	push	r13
    1cfe:	ef 92       	push	r14
    1d00:	ff 92       	push	r15
    1d02:	0f 93       	push	r16
    1d04:	1f 93       	push	r17
    1d06:	cf 93       	push	r28
    1d08:	df 93       	push	r29
    1d0a:	16 2f       	mov	r17, r22
    1d0c:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1d0e:	5f e1       	ldi	r21, 0x1F	; 31
    1d10:	f5 2e       	mov	r15, r21
    1d12:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1d14:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1d16:	0f 2d       	mov	r16, r15
    1d18:	06 95       	lsr	r16
    1d1a:	06 95       	lsr	r16
    1d1c:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1d1e:	c0 2f       	mov	r28, r16
    1d20:	d0 e0       	ldi	r29, 0x00	; 0
    1d22:	c1 2e       	mov	r12, r17
    1d24:	dd 24       	eor	r13, r13
    1d26:	ce 01       	movw	r24, r28
    1d28:	b6 01       	movw	r22, r12
    1d2a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1d2e:	80 2f       	mov	r24, r16
    1d30:	61 2f       	mov	r22, r17
    1d32:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <LCD_set_next_PGC>
    1d36:	fe 01       	movw	r30, r28
    1d38:	45 e0       	ldi	r20, 0x05	; 5
    1d3a:	ee 0f       	add	r30, r30
    1d3c:	ff 1f       	adc	r31, r31
    1d3e:	4a 95       	dec	r20
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <LCD_set_pixel+0x40>
    1d42:	2f 2d       	mov	r18, r15
    1d44:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1d46:	ee 20       	and	r14, r14
    1d48:	89 f0       	breq	.+34     	; 0x1d6c <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1d4a:	ec 0d       	add	r30, r12
    1d4c:	fd 1d       	adc	r31, r13
    1d4e:	ec 57       	subi	r30, 0x7C	; 124
    1d50:	fa 4f       	sbci	r31, 0xFA	; 250
    1d52:	27 70       	andi	r18, 0x07	; 7
    1d54:	30 70       	andi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <LCD_set_pixel+0x66>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	2a 95       	dec	r18
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <LCD_set_pixel+0x62>
    1d64:	20 81       	ld	r18, Z
    1d66:	28 2b       	or	r18, r24
    1d68:	20 83       	st	Z, r18
    1d6a:	11 c0       	rjmp	.+34     	; 0x1d8e <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1d6c:	ec 0d       	add	r30, r12
    1d6e:	fd 1d       	adc	r31, r13
    1d70:	ec 57       	subi	r30, 0x7C	; 124
    1d72:	fa 4f       	sbci	r31, 0xFA	; 250
    1d74:	27 70       	andi	r18, 0x07	; 7
    1d76:	30 70       	andi	r19, 0x00	; 0
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <LCD_set_pixel+0x88>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	2a 95       	dec	r18
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <LCD_set_pixel+0x84>
    1d86:	80 95       	com	r24
    1d88:	20 81       	ld	r18, Z
    1d8a:	82 23       	and	r24, r18
    1d8c:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1d8e:	35 e0       	ldi	r19, 0x05	; 5
    1d90:	cc 0f       	add	r28, r28
    1d92:	dd 1f       	adc	r29, r29
    1d94:	3a 95       	dec	r19
    1d96:	e1 f7       	brne	.-8      	; 0x1d90 <LCD_set_pixel+0x96>
    1d98:	cc 0d       	add	r28, r12
    1d9a:	dd 1d       	adc	r29, r13
    1d9c:	cc 57       	subi	r28, 0x7C	; 124
    1d9e:	da 4f       	sbci	r29, 0xFA	; 250
    1da0:	88 81       	ld	r24, Y
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
}
    1da8:	df 91       	pop	r29
    1daa:	cf 91       	pop	r28
    1dac:	1f 91       	pop	r17
    1dae:	0f 91       	pop	r16
    1db0:	ff 90       	pop	r15
    1db2:	ef 90       	pop	r14
    1db4:	df 90       	pop	r13
    1db6:	cf 90       	pop	r12
    1db8:	08 95       	ret

00001dba <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1dba:	7f 92       	push	r7
    1dbc:	8f 92       	push	r8
    1dbe:	9f 92       	push	r9
    1dc0:	af 92       	push	r10
    1dc2:	bf 92       	push	r11
    1dc4:	cf 92       	push	r12
    1dc6:	df 92       	push	r13
    1dc8:	ef 92       	push	r14
    1dca:	ff 92       	push	r15
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	98 2e       	mov	r9, r24
    1dd2:	b6 2e       	mov	r11, r22
    1dd4:	c4 2e       	mov	r12, r20
    1dd6:	a2 2e       	mov	r10, r18
    1dd8:	70 2e       	mov	r7, r16
    1dda:	8e 2c       	mov	r8, r14

	r = r*LCD_CELL_OFFSET;
    1ddc:	bb 0c       	add	r11, r11
    1dde:	bb 0c       	add	r11, r11
    1de0:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1de2:	dd 24       	eor	r13, r13
    1de4:	23 e0       	ldi	r18, 0x03	; 3
    1de6:	cc 0c       	add	r12, r12
    1de8:	dd 1c       	adc	r13, r13
    1dea:	2a 95       	dec	r18
    1dec:	e1 f7       	brne	.-8      	; 0x1de6 <printCell+0x2c>
    1dee:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1df0:	0f e1       	ldi	r16, 0x1F	; 31
    1df2:	0b 19       	sub	r16, r11
    1df4:	80 2f       	mov	r24, r16
    1df6:	6c 2d       	mov	r22, r12
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1dfe:	98 e1       	ldi	r25, 0x18	; 24
    1e00:	e9 2e       	mov	r14, r25
    1e02:	eb 18       	sub	r14, r11
    1e04:	8e 2d       	mov	r24, r14
    1e06:	6c 2d       	mov	r22, r12
    1e08:	41 e0       	ldi	r20, 0x01	; 1
    1e0a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1e0e:	87 e0       	ldi	r24, 0x07	; 7
    1e10:	f8 2e       	mov	r15, r24
    1e12:	fc 0c       	add	r15, r12
    1e14:	80 2f       	mov	r24, r16
    1e16:	6f 2d       	mov	r22, r15
    1e18:	41 e0       	ldi	r20, 0x01	; 1
    1e1a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1e1e:	8e 2d       	mov	r24, r14
    1e20:	6f 2d       	mov	r22, r15
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	
	if(cell&0b1000){
    1e28:	d9 2c       	mov	r13, r9
    1e2a:	93 fe       	sbrs	r9, 3
    1e2c:	24 c0       	rjmp	.+72     	; 0x1e76 <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1e2e:	61 2f       	mov	r22, r17
    1e30:	6f 5f       	subi	r22, 0xFF	; 255
    1e32:	80 2f       	mov	r24, r16
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1e3a:	61 2f       	mov	r22, r17
    1e3c:	6e 5f       	subi	r22, 0xFE	; 254
    1e3e:	80 2f       	mov	r24, r16
    1e40:	41 e0       	ldi	r20, 0x01	; 1
    1e42:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1e46:	61 2f       	mov	r22, r17
    1e48:	6d 5f       	subi	r22, 0xFD	; 253
    1e4a:	80 2f       	mov	r24, r16
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1e52:	61 2f       	mov	r22, r17
    1e54:	6c 5f       	subi	r22, 0xFC	; 252
    1e56:	80 2f       	mov	r24, r16
    1e58:	41 e0       	ldi	r20, 0x01	; 1
    1e5a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1e5e:	61 2f       	mov	r22, r17
    1e60:	6b 5f       	subi	r22, 0xFB	; 251
    1e62:	80 2f       	mov	r24, r16
    1e64:	41 e0       	ldi	r20, 0x01	; 1
    1e66:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1e6a:	61 2f       	mov	r22, r17
    1e6c:	6a 5f       	subi	r22, 0xFA	; 250
    1e6e:	80 2f       	mov	r24, r16
    1e70:	41 e0       	ldi	r20, 0x01	; 1
    1e72:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	}
	if(cell&0b0100){
    1e76:	d2 fe       	sbrs	r13, 2
    1e78:	25 c0       	rjmp	.+74     	; 0x1ec4 <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1e7a:	8b 2d       	mov	r24, r11
    1e7c:	80 95       	com	r24
    1e7e:	81 5e       	subi	r24, 0xE1	; 225
    1e80:	6f 2d       	mov	r22, r15
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1e88:	8d e1       	ldi	r24, 0x1D	; 29
    1e8a:	8b 19       	sub	r24, r11
    1e8c:	6f 2d       	mov	r22, r15
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1e94:	8c e1       	ldi	r24, 0x1C	; 28
    1e96:	8b 19       	sub	r24, r11
    1e98:	6f 2d       	mov	r22, r15
    1e9a:	41 e0       	ldi	r20, 0x01	; 1
    1e9c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1ea0:	8b e1       	ldi	r24, 0x1B	; 27
    1ea2:	8b 19       	sub	r24, r11
    1ea4:	6f 2d       	mov	r22, r15
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1eac:	8a e1       	ldi	r24, 0x1A	; 26
    1eae:	8b 19       	sub	r24, r11
    1eb0:	6f 2d       	mov	r22, r15
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1eb8:	89 e1       	ldi	r24, 0x19	; 25
    1eba:	8b 19       	sub	r24, r11
    1ebc:	6f 2d       	mov	r22, r15
    1ebe:	41 e0       	ldi	r20, 0x01	; 1
    1ec0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	}
	if(cell&0b0010){
    1ec4:	d1 fe       	sbrs	r13, 1
    1ec6:	24 c0       	rjmp	.+72     	; 0x1f10 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1ec8:	61 2f       	mov	r22, r17
    1eca:	6f 5f       	subi	r22, 0xFF	; 255
    1ecc:	8e 2d       	mov	r24, r14
    1ece:	41 e0       	ldi	r20, 0x01	; 1
    1ed0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1ed4:	61 2f       	mov	r22, r17
    1ed6:	6e 5f       	subi	r22, 0xFE	; 254
    1ed8:	8e 2d       	mov	r24, r14
    1eda:	41 e0       	ldi	r20, 0x01	; 1
    1edc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1ee0:	61 2f       	mov	r22, r17
    1ee2:	6d 5f       	subi	r22, 0xFD	; 253
    1ee4:	8e 2d       	mov	r24, r14
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1eec:	61 2f       	mov	r22, r17
    1eee:	6c 5f       	subi	r22, 0xFC	; 252
    1ef0:	8e 2d       	mov	r24, r14
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1ef8:	61 2f       	mov	r22, r17
    1efa:	6b 5f       	subi	r22, 0xFB	; 251
    1efc:	8e 2d       	mov	r24, r14
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1f04:	61 2f       	mov	r22, r17
    1f06:	6a 5f       	subi	r22, 0xFA	; 250
    1f08:	8e 2d       	mov	r24, r14
    1f0a:	41 e0       	ldi	r20, 0x01	; 1
    1f0c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	}
	if(cell&0b0001){
    1f10:	d0 fe       	sbrs	r13, 0
    1f12:	25 c0       	rjmp	.+74     	; 0x1f5e <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1f14:	8b 2d       	mov	r24, r11
    1f16:	80 95       	com	r24
    1f18:	81 5e       	subi	r24, 0xE1	; 225
    1f1a:	61 2f       	mov	r22, r17
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1f22:	8d e1       	ldi	r24, 0x1D	; 29
    1f24:	8b 19       	sub	r24, r11
    1f26:	61 2f       	mov	r22, r17
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1f2e:	8c e1       	ldi	r24, 0x1C	; 28
    1f30:	8b 19       	sub	r24, r11
    1f32:	61 2f       	mov	r22, r17
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1f3a:	8b e1       	ldi	r24, 0x1B	; 27
    1f3c:	8b 19       	sub	r24, r11
    1f3e:	61 2f       	mov	r22, r17
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1f46:	8a e1       	ldi	r24, 0x1A	; 26
    1f48:	8b 19       	sub	r24, r11
    1f4a:	61 2f       	mov	r22, r17
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1f52:	89 e1       	ldi	r24, 0x19	; 25
    1f54:	8b 19       	sub	r24, r11
    1f56:	61 2f       	mov	r22, r17
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
	}	
	if(isrobot){
    1f5e:	aa 20       	and	r10, r10
    1f60:	09 f4       	brne	.+2      	; 0x1f64 <printCell+0x1aa>
    1f62:	87 c0       	rjmp	.+270    	; 0x2072 <printCell+0x2b8>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1f64:	0c e1       	ldi	r16, 0x1C	; 28
    1f66:	f0 2e       	mov	r15, r16
    1f68:	fb 18       	sub	r15, r11
    1f6a:	b3 e0       	ldi	r27, 0x03	; 3
    1f6c:	cb 2e       	mov	r12, r27
    1f6e:	c1 0e       	add	r12, r17
    1f70:	8f 2d       	mov	r24, r15
    1f72:	6c 2d       	mov	r22, r12
    1f74:	4a 2d       	mov	r20, r10
    1f76:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1f7a:	ab e1       	ldi	r26, 0x1B	; 27
    1f7c:	ea 2e       	mov	r14, r26
    1f7e:	eb 18       	sub	r14, r11
    1f80:	8e 2d       	mov	r24, r14
    1f82:	6c 2d       	mov	r22, r12
    1f84:	4a 2d       	mov	r20, r10
    1f86:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1f8a:	f4 e0       	ldi	r31, 0x04	; 4
    1f8c:	df 2e       	mov	r13, r31
    1f8e:	d1 0e       	add	r13, r17
    1f90:	8f 2d       	mov	r24, r15
    1f92:	6d 2d       	mov	r22, r13
    1f94:	4a 2d       	mov	r20, r10
    1f96:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1f9a:	8e 2d       	mov	r24, r14
    1f9c:	6d 2d       	mov	r22, r13
    1f9e:	4a 2d       	mov	r20, r10
    1fa0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		
		switch(orent){
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	78 16       	cp	r7, r24
    1fa8:	c9 f0       	breq	.+50     	; 0x1fdc <printCell+0x222>
    1faa:	78 16       	cp	r7, r24
    1fac:	40 f0       	brcs	.+16     	; 0x1fbe <printCell+0x204>
    1fae:	82 e0       	ldi	r24, 0x02	; 2
    1fb0:	78 16       	cp	r7, r24
    1fb2:	49 f1       	breq	.+82     	; 0x2006 <printCell+0x24c>
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	78 16       	cp	r7, r24
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <printCell+0x202>
    1fba:	94 c0       	rjmp	.+296    	; 0x20e4 <printCell+0x32a>
    1fbc:	3f c0       	rjmp	.+126    	; 0x203c <printCell+0x282>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1fbe:	8d e1       	ldi	r24, 0x1D	; 29
    1fc0:	8b 19       	sub	r24, r11
    1fc2:	6c 2d       	mov	r22, r12
    1fc4:	4a 2d       	mov	r20, r10
    1fc6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, !reset);
    1fca:	00 e0       	ldi	r16, 0x00	; 0
    1fcc:	88 20       	and	r8, r8
    1fce:	09 f4       	brne	.+2      	; 0x1fd2 <printCell+0x218>
    1fd0:	01 e0       	ldi	r16, 0x01	; 1
    1fd2:	1b 5f       	subi	r17, 0xFB	; 251
    1fd4:	8f 2d       	mov	r24, r15
    1fd6:	61 2f       	mov	r22, r17
    1fd8:	40 2f       	mov	r20, r16
    1fda:	0e c0       	rjmp	.+28     	; 0x1ff8 <printCell+0x23e>
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, !reset);
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, !reset);	
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, !reset);
    1fdc:	00 e0       	ldi	r16, 0x00	; 0
    1fde:	88 20       	and	r8, r8
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <printCell+0x22a>
    1fe2:	01 e0       	ldi	r16, 0x01	; 1
    1fe4:	8d e1       	ldi	r24, 0x1D	; 29
    1fe6:	8b 19       	sub	r24, r11
    1fe8:	6c 2d       	mov	r22, r12
    1fea:	40 2f       	mov	r20, r16
    1fec:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1ff0:	1b 5f       	subi	r17, 0xFB	; 251
    1ff2:	8f 2d       	mov	r24, r15
    1ff4:	61 2f       	mov	r22, r17
    1ff6:	4a 2d       	mov	r20, r10
    1ff8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, !reset);
    1ffc:	8a e1       	ldi	r24, 0x1A	; 26
    1ffe:	8b 19       	sub	r24, r11
    2000:	6d 2d       	mov	r22, r13
    2002:	40 2f       	mov	r20, r16
    2004:	14 c0       	rjmp	.+40     	; 0x202e <printCell+0x274>
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, !reset);	
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, !reset);
    2006:	00 e0       	ldi	r16, 0x00	; 0
    2008:	88 20       	and	r8, r8
    200a:	09 f4       	brne	.+2      	; 0x200e <printCell+0x254>
    200c:	01 e0       	ldi	r16, 0x01	; 1
    200e:	8d e1       	ldi	r24, 0x1D	; 29
    2010:	8b 19       	sub	r24, r11
    2012:	6c 2d       	mov	r22, r12
    2014:	40 2f       	mov	r20, r16
    2016:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, !reset);
    201a:	1b 5f       	subi	r17, 0xFB	; 251
    201c:	8f 2d       	mov	r24, r15
    201e:	61 2f       	mov	r22, r17
    2020:	40 2f       	mov	r20, r16
    2022:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    2026:	8a e1       	ldi	r24, 0x1A	; 26
    2028:	8b 19       	sub	r24, r11
    202a:	6d 2d       	mov	r22, r13
    202c:	4a 2d       	mov	r20, r10
    202e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, !reset);	
    2032:	13 50       	subi	r17, 0x03	; 3
    2034:	8e 2d       	mov	r24, r14
    2036:	61 2f       	mov	r22, r17
    2038:	40 2f       	mov	r20, r16
    203a:	52 c0       	rjmp	.+164    	; 0x20e0 <printCell+0x326>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, !reset);
    203c:	00 e0       	ldi	r16, 0x00	; 0
    203e:	88 20       	and	r8, r8
    2040:	09 f4       	brne	.+2      	; 0x2044 <printCell+0x28a>
    2042:	01 e0       	ldi	r16, 0x01	; 1
    2044:	8d e1       	ldi	r24, 0x1D	; 29
    2046:	8b 19       	sub	r24, r11
    2048:	6c 2d       	mov	r22, r12
    204a:	40 2f       	mov	r20, r16
    204c:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, !reset);
    2050:	1b 5f       	subi	r17, 0xFB	; 251
    2052:	8f 2d       	mov	r24, r15
    2054:	61 2f       	mov	r22, r17
    2056:	40 2f       	mov	r20, r16
    2058:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, !reset);
    205c:	8a e1       	ldi	r24, 0x1A	; 26
    205e:	8b 19       	sub	r24, r11
    2060:	6d 2d       	mov	r22, r13
    2062:	40 2f       	mov	r20, r16
    2064:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    2068:	13 50       	subi	r17, 0x03	; 3
    206a:	8e 2d       	mov	r24, r14
    206c:	61 2f       	mov	r22, r17
    206e:	4a 2d       	mov	r20, r10
    2070:	37 c0       	rjmp	.+110    	; 0x20e0 <printCell+0x326>
				break;
			default:
				break;
		}
	}
	else if(reset){
    2072:	88 20       	and	r8, r8
    2074:	b9 f1       	breq	.+110    	; 0x20e4 <printCell+0x32a>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    2076:	ec e1       	ldi	r30, 0x1C	; 28
    2078:	ce 2e       	mov	r12, r30
    207a:	cb 18       	sub	r12, r11
    207c:	73 e0       	ldi	r23, 0x03	; 3
    207e:	e7 2e       	mov	r14, r23
    2080:	e1 0e       	add	r14, r17
    2082:	8c 2d       	mov	r24, r12
    2084:	6e 2d       	mov	r22, r14
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    208c:	0b e1       	ldi	r16, 0x1B	; 27
    208e:	0b 19       	sub	r16, r11
    2090:	80 2f       	mov	r24, r16
    2092:	6e 2d       	mov	r22, r14
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    209a:	64 e0       	ldi	r22, 0x04	; 4
    209c:	f6 2e       	mov	r15, r22
    209e:	f1 0e       	add	r15, r17
    20a0:	8c 2d       	mov	r24, r12
    20a2:	6f 2d       	mov	r22, r15
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    20aa:	80 2f       	mov	r24, r16
    20ac:	6f 2d       	mov	r22, r15
    20ae:	40 e0       	ldi	r20, 0x00	; 0
    20b0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    20b4:	8d e1       	ldi	r24, 0x1D	; 29
    20b6:	8b 19       	sub	r24, r11
    20b8:	6e 2d       	mov	r22, r14
    20ba:	40 e0       	ldi	r20, 0x00	; 0
    20bc:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    20c0:	1b 5f       	subi	r17, 0xFB	; 251
    20c2:	8c 2d       	mov	r24, r12
    20c4:	61 2f       	mov	r22, r17
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    20cc:	8a e1       	ldi	r24, 0x1A	; 26
    20ce:	8b 19       	sub	r24, r11
    20d0:	6f 2d       	mov	r22, r15
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    20d8:	13 50       	subi	r17, 0x03	; 3
    20da:	80 2f       	mov	r24, r16
    20dc:	61 2f       	mov	r22, r17
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <LCD_set_pixel>
		}
}
    20e4:	1f 91       	pop	r17
    20e6:	0f 91       	pop	r16
    20e8:	ff 90       	pop	r15
    20ea:	ef 90       	pop	r14
    20ec:	df 90       	pop	r13
    20ee:	cf 90       	pop	r12
    20f0:	bf 90       	pop	r11
    20f2:	af 90       	pop	r10
    20f4:	9f 90       	pop	r9
    20f6:	8f 90       	pop	r8
    20f8:	7f 90       	pop	r7
    20fa:	08 95       	ret

000020fc <printMap>:
* Input Variables:	unsigned char, unsigned char, char
* Output Return:	void
* Overview:		    Prints the map with the robot
********************************************************************/
void printMap(unsigned char curOrient, unsigned char curCell, char reset)
{
    20fc:	8f 92       	push	r8
    20fe:	9f 92       	push	r9
    2100:	af 92       	push	r10
    2102:	bf 92       	push	r11
    2104:	cf 92       	push	r12
    2106:	df 92       	push	r13
    2108:	ef 92       	push	r14
    210a:	ff 92       	push	r15
    210c:	0f 93       	push	r16
    210e:	1f 93       	push	r17
    2110:	cf 93       	push	r28
    2112:	df 93       	push	r29
    2114:	88 2e       	mov	r8, r24
    2116:	94 2e       	mov	r9, r20
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = curCell >> 2;
    2118:	a6 2e       	mov	r10, r22
    211a:	a6 94       	lsr	r10
    211c:	a6 94       	lsr	r10
	unsigned char curCol = curCell & 0b0011;
    211e:	43 e0       	ldi	r20, 0x03	; 3
    2120:	b4 2e       	mov	r11, r20
    2122:	b6 22       	and	r11, r22
    2124:	cc 24       	eor	r12, r12
    2126:	dd 24       	eor	r13, r13
    2128:	1d c0       	rjmp	.+58     	; 0x2164 <printMap+0x68>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    212a:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    212c:	fa 14       	cp	r15, r10
    212e:	19 f0       	breq	.+6      	; 0x2136 <printMap+0x3a>
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	06 c0       	rjmp	.+12     	; 0x2142 <printMap+0x46>
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	1b 15       	cp	r17, r11
    213c:	11 f4       	brne	.+4      	; 0x2142 <printMap+0x46>
    213e:	21 e0       	ldi	r18, 0x01	; 1
    2140:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, curOrient, reset);
    2142:	6f 2d       	mov	r22, r15
    2144:	41 2f       	mov	r20, r17
    2146:	08 2d       	mov	r16, r8
    2148:	e9 2c       	mov	r14, r9
    214a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <printCell>
	unsigned char curRow = curCell >> 2;
	unsigned char curCol = curCell & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    214e:	1f 5f       	subi	r17, 0xFF	; 255
    2150:	21 96       	adiw	r28, 0x01	; 1
    2152:	14 30       	cpi	r17, 0x04	; 4
    2154:	51 f7       	brne	.-44     	; 0x212a <printMap+0x2e>
    2156:	08 94       	sec
    2158:	c1 1c       	adc	r12, r1
    215a:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = curCell >> 2;
	unsigned char curCol = curCell & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    215c:	84 e0       	ldi	r24, 0x04	; 4
    215e:	c8 16       	cp	r12, r24
    2160:	d1 04       	cpc	r13, r1
    2162:	51 f0       	breq	.+20     	; 0x2178 <printMap+0x7c>
    2164:	fc 2c       	mov	r15, r12
    2166:	e6 01       	movw	r28, r12
    2168:	cc 0f       	add	r28, r28
    216a:	dd 1f       	adc	r29, r29
    216c:	cc 0f       	add	r28, r28
    216e:	dd 1f       	adc	r29, r29
    2170:	ca 51       	subi	r28, 0x1A	; 26
    2172:	dd 4f       	sbci	r29, 0xFD	; 253
    2174:	10 e0       	ldi	r17, 0x00	; 0
    2176:	d9 cf       	rjmp	.-78     	; 0x212a <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, curOrient, reset);
		}	
	}
}
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	1f 91       	pop	r17
    217e:	0f 91       	pop	r16
    2180:	ff 90       	pop	r15
    2182:	ef 90       	pop	r14
    2184:	df 90       	pop	r13
    2186:	cf 90       	pop	r12
    2188:	bf 90       	pop	r11
    218a:	af 90       	pop	r10
    218c:	9f 90       	pop	r9
    218e:	8f 90       	pop	r8
    2190:	08 95       	ret

00002192 <checkOdometry>:
*					sets the flag whe appropriate
********************************************************************/
char checkOdometry( char reset )
{	
	// Check for a reset
	if (reset){
    2192:	88 23       	and	r24, r24
    2194:	91 f0       	breq	.+36     	; 0x21ba <checkOdometry+0x28>
		odometryTrigger = 0;
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e0       	ldi	r26, 0x00	; 0
    219c:	b0 e0       	ldi	r27, 0x00	; 0
    219e:	80 93 f1 04 	sts	0x04F1, r24
    21a2:	90 93 f2 04 	sts	0x04F2, r25
    21a6:	a0 93 f3 04 	sts	0x04F3, r26
    21aa:	b0 93 f4 04 	sts	0x04F4, r27
		STEPPER_set_steps(STEPPER_BOTH,odometryTrigger);
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	70 e0       	ldi	r23, 0x00	; 0
    21b4:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <STEPPER_set_steps>
    21b8:	17 c0       	rjmp	.+46     	; 0x21e8 <checkOdometry+0x56>
		return SUCCESS;
	}

	// Get the current number of steps
	curr_step = STEPPER_get_nSteps();
    21ba:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <STEPPER_get_nSteps>
    21be:	60 93 04 06 	sts	0x0604, r22
    21c2:	70 93 05 06 	sts	0x0605, r23
    21c6:	80 93 06 06 	sts	0x0606, r24
    21ca:	90 93 07 06 	sts	0x0607, r25
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	80 91 06 06 	lds	r24, 0x0606
    21d4:	90 91 07 06 	lds	r25, 0x0607
    21d8:	20 91 04 06 	lds	r18, 0x0604
    21dc:	30 91 05 06 	lds	r19, 0x0605
    21e0:	82 0f       	add	r24, r18
    21e2:	93 1f       	adc	r25, r19
    21e4:	89 2b       	or	r24, r25
    21e6:	09 f4       	brne	.+2      	; 0x21ea <checkOdometry+0x58>
    21e8:	41 e0       	ldi	r20, 0x01	; 1
	}

	// But if not zero
	//then return fial
	return FAIL;
}
    21ea:	84 2f       	mov	r24, r20
    21ec:	08 95       	ret

000021ee <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{
    21ee:	5f 92       	push	r5
    21f0:	6f 92       	push	r6
    21f2:	7f 92       	push	r7
    21f4:	8f 92       	push	r8
    21f6:	9f 92       	push	r9
    21f8:	af 92       	push	r10
    21fa:	bf 92       	push	r11
    21fc:	cf 92       	push	r12
    21fe:	df 92       	push	r13
    2200:	ef 92       	push	r14
    2202:	ff 92       	push	r15
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
	// Check for collision
	if(ftIR <= IR_OBST_F_THRESH){
    220c:	e0 90 69 04 	lds	r14, 0x0469
    2210:	f0 90 6a 04 	lds	r15, 0x046A
    2214:	00 91 6b 04 	lds	r16, 0x046B
    2218:	10 91 6c 04 	lds	r17, 0x046C
    221c:	c8 01       	movw	r24, r16
    221e:	b7 01       	movw	r22, r14
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e2       	ldi	r20, 0x20	; 32
    2226:	51 e4       	ldi	r21, 0x41	; 65
    2228:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    222c:	18 16       	cp	r1, r24
    222e:	14 f0       	brlt	.+4      	; 0x2234 <moveWall+0x46>
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	1b c1       	rjmp	.+566    	; 0x246a <moveWall+0x27c>
		return SUCCESS;
	}

	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    2234:	55 24       	eor	r5, r5
    2236:	c8 01       	movw	r24, r16
    2238:	b7 01       	movw	r22, r14
    223a:	20 e0       	ldi	r18, 0x00	; 0
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	40 e0       	ldi	r20, 0x00	; 0
    2240:	50 e0       	ldi	r21, 0x00	; 0
    2242:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    2246:	88 23       	and	r24, r24
    2248:	14 f4       	brge	.+4      	; 0x224e <moveWall+0x60>
    224a:	55 24       	eor	r5, r5
    224c:	53 94       	inc	r5
    224e:	a0 90 10 06 	lds	r10, 0x0610
    2252:	b0 90 11 06 	lds	r11, 0x0611
    2256:	c0 90 12 06 	lds	r12, 0x0612
    225a:	d0 90 13 06 	lds	r13, 0x0613
    225e:	60 90 0c 06 	lds	r6, 0x060C
    2262:	70 90 0d 06 	lds	r7, 0x060D
    2266:	80 90 0e 06 	lds	r8, 0x060E
    226a:	90 90 0f 06 	lds	r9, 0x060F
	if(!isWall){
    226e:	55 20       	and	r5, r5
    2270:	41 f5       	brne	.+80     	; 0x22c2 <moveWall+0xd4>
    2272:	60 91 73 04 	lds	r22, 0x0473
    2276:	70 91 74 04 	lds	r23, 0x0474
    227a:	80 91 75 04 	lds	r24, 0x0475
    227e:	90 91 76 04 	lds	r25, 0x0476
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    228e:	87 fd       	sbrc	r24, 7
    2290:	18 c0       	rjmp	.+48     	; 0x22c2 <moveWall+0xd4>
    2292:	c6 01       	movw	r24, r12
    2294:	b5 01       	movw	r22, r10
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e5       	ldi	r20, 0x50	; 80
    229c:	51 e4       	ldi	r21, 0x41	; 65
    229e:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    22a2:	87 fd       	sbrc	r24, 7
    22a4:	0e c0       	rjmp	.+28     	; 0x22c2 <moveWall+0xd4>
    22a6:	c4 01       	movw	r24, r8
    22a8:	b3 01       	movw	r22, r6
    22aa:	20 e0       	ldi	r18, 0x00	; 0
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	40 e5       	ldi	r20, 0x50	; 80
    22b0:	51 e4       	ldi	r21, 0x41	; 65
    22b2:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    22b6:	87 fd       	sbrc	r24, 7
    22b8:	04 c0       	rjmp	.+8      	; 0x22c2 <moveWall+0xd4>
	
		// Update the speeds the same to go forward
		STEPPER_set_speed(STEPPER_BOTH, MAX_SPEED_STEP);
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	64 ef       	ldi	r22, 0xF4	; 244
    22be:	71 e0       	ldi	r23, 0x01	; 1
    22c0:	cf c0       	rjmp	.+414    	; 0x2460 <moveWall+0x272>
	BOOL isLEFT;
	float error;	
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    22c2:	c6 01       	movw	r24, r12
    22c4:	b5 01       	movw	r22, r10
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e5       	ldi	r20, 0x50	; 80
    22cc:	51 e4       	ldi	r21, 0x41	; 65
    22ce:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <__gesf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	64 f4       	brge	.+24     	; 0x22ee <moveWall+0x100>
		rtIR = IR_WALL_R_THRESH;
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 e5       	ldi	r26, 0x50	; 80
    22dc:	b1 e4       	ldi	r27, 0x41	; 65
    22de:	80 93 10 06 	sts	0x0610, r24
    22e2:	90 93 11 06 	sts	0x0611, r25
    22e6:	a0 93 12 06 	sts	0x0612, r26
    22ea:	b0 93 13 06 	sts	0x0613, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    22ee:	c4 01       	movw	r24, r8
    22f0:	b3 01       	movw	r22, r6
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e5       	ldi	r20, 0x50	; 80
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 1c 2e 	call	0x5c38	; 0x5c38 <__gesf2>
    22fe:	18 16       	cp	r1, r24
    2300:	14 f0       	brlt	.+4      	; 0x2306 <moveWall+0x118>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	0d c0       	rjmp	.+26     	; 0x2320 <moveWall+0x132>
		ltIR = IR_WALL_L_THRESH;
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	a0 e5       	ldi	r26, 0x50	; 80
    230c:	b1 e4       	ldi	r27, 0x41	; 65
    230e:	80 93 0c 06 	sts	0x060C, r24
    2312:	90 93 0d 06 	sts	0x060D, r25
    2316:	a0 93 0e 06 	sts	0x060E, r26
    231a:	b0 93 0f 06 	sts	0x060F, r27
    231e:	81 e0       	ldi	r24, 0x01	; 1
		isLEFT = 1;
	}
	
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2320:	55 20       	and	r5, r5
    2322:	21 f1       	breq	.+72     	; 0x236c <moveWall+0x17e>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2324:	88 23       	and	r24, r24
    2326:	29 f0       	breq	.+10     	; 0x2332 <moveWall+0x144>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2328:	60 e0       	ldi	r22, 0x00	; 0
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	8a e7       	ldi	r24, 0x7A	; 122
    232e:	94 e4       	ldi	r25, 0x44	; 68
    2330:	04 c0       	rjmp	.+8      	; 0x233a <moveWall+0x14c>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    2332:	60 e0       	ldi	r22, 0x00	; 0
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	8a e7       	ldi	r24, 0x7A	; 122
    2338:	94 ec       	ldi	r25, 0xC4	; 196
    233a:	a8 01       	movw	r20, r16
    233c:	97 01       	movw	r18, r14
    233e:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    2342:	20 91 0c 06 	lds	r18, 0x060C
    2346:	30 91 0d 06 	lds	r19, 0x060D
    234a:	40 91 0e 06 	lds	r20, 0x060E
    234e:	50 91 0f 06 	lds	r21, 0x060F
    2352:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    2356:	9b 01       	movw	r18, r22
    2358:	ac 01       	movw	r20, r24
    235a:	60 91 10 06 	lds	r22, 0x0610
    235e:	70 91 11 06 	lds	r23, 0x0611
    2362:	80 91 12 06 	lds	r24, 0x0612
    2366:	90 91 13 06 	lds	r25, 0x0613
    236a:	10 c0       	rjmp	.+32     	; 0x238c <moveWall+0x19e>
	// the error is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    236c:	60 91 10 06 	lds	r22, 0x0610
    2370:	70 91 11 06 	lds	r23, 0x0611
    2374:	80 91 12 06 	lds	r24, 0x0612
    2378:	90 91 13 06 	lds	r25, 0x0613
    237c:	20 91 0c 06 	lds	r18, 0x060C
    2380:	30 91 0d 06 	lds	r19, 0x060D
    2384:	40 91 0e 06 	lds	r20, 0x060E
    2388:	50 91 0f 06 	lds	r21, 0x060F
    238c:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__subsf3>
    2390:	e6 2f       	mov	r30, r22
	}

	// Use the PID controller function to calculate error
	float effort = pidController(error, 0);
    2392:	2e 2f       	mov	r18, r30
    2394:	37 2f       	mov	r19, r23
    2396:	48 2f       	mov	r20, r24
    2398:	59 2f       	mov	r21, r25
    239a:	b9 01       	movw	r22, r18
    239c:	ca 01       	movw	r24, r20
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    23a4:	7b 01       	movw	r14, r22
    23a6:	8c 01       	movw	r16, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    23a8:	0e 94 39 2d 	call	0x5a72	; 0x5a72 <__fixsfsi>
    23ac:	eb 01       	movw	r28, r22
    23ae:	77 ff       	sbrs	r23, 7
    23b0:	03 c0       	rjmp	.+6      	; 0x23b8 <moveWall+0x1ca>
    23b2:	d0 95       	com	r29
    23b4:	c1 95       	neg	r28
    23b6:	df 4f       	sbci	r29, 0xFF	; 255
    23b8:	c5 36       	cpi	r28, 0x65	; 101
    23ba:	d1 05       	cpc	r29, r1
    23bc:	fc f0       	brlt	.+62     	; 0x23fc <moveWall+0x20e>
    23be:	c8 01       	movw	r24, r16
    23c0:	b7 01       	movw	r22, r14
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e0       	ldi	r20, 0x00	; 0
    23c8:	50 e0       	ldi	r21, 0x00	; 0
    23ca:	0e 94 cd 2c 	call	0x599a	; 0x599a <__cmpsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	a9 f0       	breq	.+42     	; 0x23fc <moveWall+0x20e>
		effort = MAX_EFFORT*(effort/abs(effort));
    23d2:	be 01       	movw	r22, r28
    23d4:	88 27       	eor	r24, r24
    23d6:	77 fd       	sbrc	r23, 7
    23d8:	80 95       	com	r24
    23da:	98 2f       	mov	r25, r24
    23dc:	0e 94 6c 2d 	call	0x5ad8	; 0x5ad8 <__floatsisf>
    23e0:	9b 01       	movw	r18, r22
    23e2:	ac 01       	movw	r20, r24
    23e4:	c8 01       	movw	r24, r16
    23e6:	b7 01       	movw	r22, r14
    23e8:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	48 ec       	ldi	r20, 0xC8	; 200
    23f2:	52 e4       	ldi	r21, 0x42	; 66
    23f4:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    23f8:	7b 01       	movw	r14, r22
    23fa:	8c 01       	movw	r16, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED_STEP/2 + (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
    23fc:	c8 01       	movw	r24, r16
    23fe:	b7 01       	movw	r22, r14
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	48 ec       	ldi	r20, 0xC8	; 200
    2406:	52 e4       	ldi	r21, 0x42	; 66
    2408:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    240c:	7b 01       	movw	r14, r22
    240e:	8c 01       	movw	r16, r24
	float stepper_speed_R = MAX_SPEED_STEP/2 - (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
	
	// Update the speeds the same to move with wall
	STEPPER_set_speed(STEPPER_LEFT, stepper_speed_L);
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	4a e7       	ldi	r20, 0x7A	; 122
    2416:	53 e4       	ldi	r21, 0x43	; 67
    2418:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	4a e7       	ldi	r20, 0x7A	; 122
    2422:	53 e4       	ldi	r21, 0x43	; 67
    2424:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    2428:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    242c:	9b 01       	movw	r18, r22
    242e:	ac 01       	movw	r20, r24
    2430:	80 e0       	ldi	r24, 0x00	; 0
    2432:	b9 01       	movw	r22, r18
    2434:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <STEPPER_set_speed>
	STEPPER_set_speed(STEPPER_RIGHT, stepper_speed_R);
    2438:	c8 01       	movw	r24, r16
    243a:	b7 01       	movw	r22, r14
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	4a e7       	ldi	r20, 0x7A	; 122
    2442:	53 ec       	ldi	r21, 0xC3	; 195
    2444:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    2448:	20 e0       	ldi	r18, 0x00	; 0
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	4a e7       	ldi	r20, 0x7A	; 122
    244e:	53 e4       	ldi	r21, 0x43	; 67
    2450:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__addsf3>
    2454:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <__fixunssfsi>
    2458:	9b 01       	movw	r18, r22
    245a:	ac 01       	movw	r20, r24
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	b9 01       	movw	r22, r18
    2460:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <STEPPER_set_speed>
	
	// Return weather or not we are finished
	return checkOdometry(NO_RESET);
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	0e 94 c9 10 	call	0x2192	; 0x2192 <checkOdometry>
}
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	0f 91       	pop	r16
    2472:	ff 90       	pop	r15
    2474:	ef 90       	pop	r14
    2476:	df 90       	pop	r13
    2478:	cf 90       	pop	r12
    247a:	bf 90       	pop	r11
    247c:	af 90       	pop	r10
    247e:	9f 90       	pop	r9
    2480:	8f 90       	pop	r8
    2482:	7f 90       	pop	r7
    2484:	6f 90       	pop	r6
    2486:	5f 90       	pop	r5
    2488:	08 95       	ret

0000248a <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    248a:	0e 94 54 20 	call	0x40a8	; 0x40a8 <ATTINY_open>
    248e:	90 93 ee 03 	sts	0x03EE, r25
    2492:	80 93 ed 03 	sts	0x03ED, r24
	LEopstat = LED_open(); //open the LED module
    2496:	0e 94 b7 1a 	call	0x356e	; 0x356e <LED_open>
    249a:	90 93 ec 03 	sts	0x03EC, r25
    249e:	80 93 eb 03 	sts	0x03EB, r24
	LCopstat = LCD_open(); //open the LCD module
    24a2:	0e 94 ce 19 	call	0x339c	; 0x339c <LCD_open>
    24a6:	90 93 ea 03 	sts	0x03EA, r25
    24aa:	80 93 e9 03 	sts	0x03E9, r24
	STEPPER_open(); // Open STEPPER module for use
    24ae:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in tone mode
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <SPKR_open>
	
	LED_open();
    24b8:	0e 94 b7 1a 	call	0x356e	; 0x356e <LED_open>
	I2C_open();
    24bc:	0e 94 ae 21 	call	0x435c	; 0x435c <I2C_open>
	ADC_open();//open the ADC module
    24c0:	0e 94 3b 19 	call	0x3276	; 0x3276 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	0e 94 9d 19 	call	0x333a	; 0x333a <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    24ca:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
	prefilter(1);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    24d4:	8f ee       	ldi	r24, 0xEF	; 239
    24d6:	90 e0       	ldi	r25, 0x00	; 0
    24d8:	a5 e8       	ldi	r26, 0x85	; 133
    24da:	b1 e4       	ldi	r27, 0x41	; 65
    24dc:	80 93 f1 04 	sts	0x04F1, r24
    24e0:	90 93 f2 04 	sts	0x04F2, r25
    24e4:	a0 93 f3 04 	sts	0x04F3, r26
    24e8:	b0 93 f4 04 	sts	0x04F4, r27
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	0a c0       	rjmp	.+20     	; 0x2506 <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    24f2:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    24f4:	01 96       	adiw	r24, 0x01	; 1
    24f6:	80 32       	cpi	r24, 0x20	; 32
    24f8:	91 05       	cpc	r25, r1
    24fa:	d9 f7       	brne	.-10     	; 0x24f2 <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    24fc:	2f 5f       	subi	r18, 0xFF	; 255
    24fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2500:	24 30       	cpi	r18, 0x04	; 4
    2502:	31 05       	cpc	r19, r1
    2504:	59 f0       	breq	.+22     	; 0x251c <initializeRobot+0x92>
    2506:	f9 01       	movw	r30, r18
    2508:	55 e0       	ldi	r21, 0x05	; 5
    250a:	ee 0f       	add	r30, r30
    250c:	ff 1f       	adc	r31, r31
    250e:	5a 95       	dec	r21
    2510:	e1 f7       	brne	.-8      	; 0x250a <initializeRobot+0x80>
    2512:	ec 57       	subi	r30, 0x7C	; 124
    2514:	fa 4f       	sbci	r31, 0xFA	; 250
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	eb cf       	rjmp	.-42     	; 0x24f2 <initializeRobot+0x68>
    251c:	08 95       	ret

0000251e <localize>:
* Output Return:	none
* Overview:			localize the robot
********************************************************************/
void localize (void)
{	
}
    251e:	08 95       	ret

00002520 <fourNeighborSearch>:
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    2520:	48 2f       	mov	r20, r24
    2522:	46 95       	lsr	r20
    2524:	46 95       	lsr	r20
	unsigned char curCol = (curCell&0b0011);
    2526:	58 2f       	mov	r21, r24
    2528:	53 70       	andi	r21, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 0){
    252a:	a4 2f       	mov	r26, r20
    252c:	b0 e0       	ldi	r27, 0x00	; 0
    252e:	25 2f       	mov	r18, r21
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	fd 01       	movw	r30, r26
    2534:	ee 0f       	add	r30, r30
    2536:	ff 1f       	adc	r31, r31
    2538:	ee 0f       	add	r30, r30
    253a:	ff 1f       	adc	r31, r31
    253c:	e2 0f       	add	r30, r18
    253e:	f3 1f       	adc	r31, r19
    2540:	ee 59       	subi	r30, 0x9E	; 158
    2542:	fc 4f       	sbci	r31, 0xFC	; 252
    2544:	80 81       	ld	r24, Z
    2546:	88 23       	and	r24, r24
    2548:	11 f4       	brne	.+4      	; 0x254e <fourNeighborSearch+0x2e>
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	08 95       	ret
	
	// Perform a 4-neighbor search and store the lowest value
	
	// LCD_clear();
	//Check the north cell
	curRow--;
    254e:	e4 2f       	mov	r30, r20
    2550:	e1 50       	subi	r30, 0x01	; 1
	if((curRow)<WORLD_ROW_SIZE){
    2552:	e4 30       	cpi	r30, 0x04	; 4
    2554:	80 f4       	brcc	.+32     	; 0x2576 <fourNeighborSearch+0x56>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	ee 0f       	add	r30, r30
    255a:	ff 1f       	adc	r31, r31
    255c:	ee 0f       	add	r30, r30
    255e:	ff 1f       	adc	r31, r31
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	ee 59       	subi	r30, 0x9E	; 158
    2566:	fc 4f       	sbci	r31, 0xFC	; 252
    2568:	e0 81       	ld	r30, Z
		// LCD_printf("NORTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    256a:	e4 36       	cpi	r30, 0x64	; 100
    256c:	20 f4       	brcc	.+8      	; 0x2576 <fourNeighborSearch+0x56>
			minVal = curVal;
			nextOrientation = NORTH;
    256e:	10 92 07 05 	sts	0x0507, r1
    2572:	9e 2f       	mov	r25, r30
    2574:	01 c0       	rjmp	.+2      	; 0x2578 <fourNeighborSearch+0x58>
    2576:	94 e6       	ldi	r25, 0x64	; 100
		}
	}
	
	curRow++;
	curRow++;
    2578:	84 2f       	mov	r24, r20
    257a:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the south cell
	if((curRow)<WORLD_ROW_SIZE){
    257c:	84 30       	cpi	r24, 0x04	; 4
    257e:	88 f4       	brcc	.+34     	; 0x25a2 <fourNeighborSearch+0x82>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    2580:	e8 2f       	mov	r30, r24
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	ee 0f       	add	r30, r30
    2586:	ff 1f       	adc	r31, r31
    2588:	ee 0f       	add	r30, r30
    258a:	ff 1f       	adc	r31, r31
    258c:	e2 0f       	add	r30, r18
    258e:	f3 1f       	adc	r31, r19
    2590:	ee 59       	subi	r30, 0x9E	; 158
    2592:	fc 4f       	sbci	r31, 0xFC	; 252
    2594:	e0 81       	ld	r30, Z
		// LCD_printf("SOUTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2596:	e9 17       	cp	r30, r25
    2598:	20 f4       	brcc	.+8      	; 0x25a2 <fourNeighborSearch+0x82>
			minVal = curVal;
			nextOrientation = SOUTH;
    259a:	82 e0       	ldi	r24, 0x02	; 2
    259c:	80 93 07 05 	sts	0x0507, r24
    25a0:	9e 2f       	mov	r25, r30
		}
	}
	
	curRow--;
	curCol++;
    25a2:	85 2f       	mov	r24, r21
    25a4:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the east cell
	if((curCol)<WORLD_COLUMN_SIZE){
    25a6:	84 30       	cpi	r24, 0x04	; 4
    25a8:	81 f0       	breq	.+32     	; 0x25ca <fourNeighborSearch+0xaa>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
    25aa:	fd 01       	movw	r30, r26
    25ac:	ee 0f       	add	r30, r30
    25ae:	ff 1f       	adc	r31, r31
    25b0:	ee 0f       	add	r30, r30
    25b2:	ff 1f       	adc	r31, r31
    25b4:	e8 0f       	add	r30, r24
    25b6:	f1 1d       	adc	r31, r1
    25b8:	ee 59       	subi	r30, 0x9E	; 158
    25ba:	fc 4f       	sbci	r31, 0xFC	; 252
    25bc:	e0 81       	ld	r30, Z
		// LCD_printf("EAST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    25be:	e9 17       	cp	r30, r25
    25c0:	20 f4       	brcc	.+8      	; 0x25ca <fourNeighborSearch+0xaa>
			minVal = curVal;
			nextOrientation = EAST;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	80 93 07 05 	sts	0x0507, r24
    25c8:	9e 2f       	mov	r25, r30
		}
	}
	
	curCol--;
	curCol--;
    25ca:	85 2f       	mov	r24, r21
    25cc:	81 50       	subi	r24, 0x01	; 1
	// Check the west cell
	if((curCol)<WORLD_COLUMN_SIZE){
    25ce:	84 30       	cpi	r24, 0x04	; 4
    25d0:	80 f4       	brcc	.+32     	; 0x25f2 <fourNeighborSearch+0xd2>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
		// LCD_printf("WEST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    25d2:	aa 0f       	add	r26, r26
    25d4:	bb 1f       	adc	r27, r27
    25d6:	aa 0f       	add	r26, r26
    25d8:	bb 1f       	adc	r27, r27
    25da:	a8 0f       	add	r26, r24
    25dc:	b1 1d       	adc	r27, r1
    25de:	ae 59       	subi	r26, 0x9E	; 158
    25e0:	bc 4f       	sbci	r27, 0xFC	; 252
    25e2:	8c 91       	ld	r24, X
    25e4:	89 17       	cp	r24, r25
    25e6:	28 f4       	brcc	.+10     	; 0x25f2 <fourNeighborSearch+0xd2>
			minVal = curVal;
			nextOrientation = WEST;
    25e8:	83 e0       	ldi	r24, 0x03	; 3
    25ea:	80 93 07 05 	sts	0x0507, r24
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	08 95       	ret
    25f2:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    25f4:	08 95       	ret

000025f6 <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
void wavefrontMake(void)
{
    25f6:	bf 92       	push	r11
    25f8:	cf 92       	push	r12
    25fa:	df 92       	push	r13
    25fc:	ef 92       	push	r14
    25fe:	ff 92       	push	r15
    2600:	0f 93       	push	r16
    2602:	1f 93       	push	r17
    2604:	cf 93       	push	r28
    2606:	df 93       	push	r29
	// User-defined goal location
	// unsigned char goalLocation = currentGoalWorld;
	// Extract x and y goal location
	int rowGoal = (currentGoalWorld>>2);
    2608:	80 91 77 04 	lds	r24, 0x0477
	int colGoal = (currentGoalWorld&0b0011);
    260c:	28 2f       	mov	r18, r24
    260e:	30 e0       	ldi	r19, 0x00	; 0
    2610:	23 70       	andi	r18, 0x03	; 3
    2612:	30 70       	andi	r19, 0x00	; 0
    2614:	86 95       	lsr	r24
    2616:	86 95       	lsr	r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	cc 27       	eor	r28, r28
    261c:	dd 27       	eor	r29, r29
    261e:	c8 1b       	sub	r28, r24
    2620:	d9 0b       	sbc	r29, r25
    2622:	00 e0       	ldi	r16, 0x00	; 0
    2624:	10 e0       	ldi	r17, 0x00	; 0
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    2626:	cc 24       	eor	r12, r12
    2628:	dd 24       	eor	r13, r13
    262a:	c2 1a       	sub	r12, r18
    262c:	d3 0a       	sbc	r13, r19
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
				ROBOT_METRIC_WORLD[row][col] = 99;
    262e:	f3 e6       	ldi	r31, 0x63	; 99
    2630:	bf 2e       	mov	r11, r31
    2632:	25 c0       	rjmp	.+74     	; 0x267e <wavefrontMake+0x88>
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
    2634:	8c 91       	ld	r24, X
    2636:	8f 30       	cpi	r24, 0x0F	; 15
    2638:	11 f4       	brne	.+4      	; 0x263e <wavefrontMake+0x48>
				ROBOT_METRIC_WORLD[row][col] = 99;
    263a:	b0 82       	st	Z, r11
    263c:	11 c0       	rjmp	.+34     	; 0x2660 <wavefrontMake+0x6a>
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
    263e:	9a 01       	movw	r18, r20
    2640:	57 ff       	sbrs	r21, 7
    2642:	04 c0       	rjmp	.+8      	; 0x264c <wavefrontMake+0x56>
    2644:	22 27       	eor	r18, r18
    2646:	33 27       	eor	r19, r19
    2648:	24 1b       	sub	r18, r20
    264a:	35 0b       	sbc	r19, r21
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
    264c:	22 9f       	mul	r18, r18
    264e:	c0 01       	movw	r24, r0
    2650:	23 9f       	mul	r18, r19
    2652:	90 0d       	add	r25, r0
    2654:	32 9f       	mul	r19, r18
    2656:	90 0d       	add	r25, r0
    2658:	11 24       	eor	r1, r1
    265a:	8e 0d       	add	r24, r14
    265c:	9f 1d       	adc	r25, r15
    265e:	80 83       	st	Z, r24
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
    2660:	6f 5f       	subi	r22, 0xFF	; 255
    2662:	7f 4f       	sbci	r23, 0xFF	; 255
    2664:	11 96       	adiw	r26, 0x01	; 1
    2666:	31 96       	adiw	r30, 0x01	; 1
    2668:	4f 5f       	subi	r20, 0xFF	; 255
    266a:	5f 4f       	sbci	r21, 0xFF	; 255
    266c:	64 30       	cpi	r22, 0x04	; 4
    266e:	71 05       	cpc	r23, r1
    2670:	09 f7       	brne	.-62     	; 0x2634 <wavefrontMake+0x3e>
	unsigned int rowDelta, colDelta;
	int row, col;
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
    2672:	0f 5f       	subi	r16, 0xFF	; 255
    2674:	1f 4f       	sbci	r17, 0xFF	; 255
    2676:	21 96       	adiw	r28, 0x01	; 1
    2678:	04 30       	cpi	r16, 0x04	; 4
    267a:	11 05       	cpc	r17, r1
    267c:	e9 f0       	breq	.+58     	; 0x26b8 <wavefrontMake+0xc2>
				ROBOT_METRIC_WORLD[row][col] = 99;
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
    267e:	ce 01       	movw	r24, r28
    2680:	d7 ff       	sbrs	r29, 7
    2682:	04 c0       	rjmp	.+8      	; 0x268c <wavefrontMake+0x96>
    2684:	88 27       	eor	r24, r24
    2686:	99 27       	eor	r25, r25
    2688:	8c 1b       	sub	r24, r28
    268a:	9d 0b       	sbc	r25, r29
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    268c:	88 9f       	mul	r24, r24
    268e:	70 01       	movw	r14, r0
    2690:	89 9f       	mul	r24, r25
    2692:	f0 0c       	add	r15, r0
    2694:	98 9f       	mul	r25, r24
    2696:	f0 0c       	add	r15, r0
    2698:	11 24       	eor	r1, r1
    269a:	c8 01       	movw	r24, r16
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	dc 01       	movw	r26, r24
    26a6:	aa 51       	subi	r26, 0x1A	; 26
    26a8:	bd 4f       	sbci	r27, 0xFD	; 253
    26aa:	fc 01       	movw	r30, r24
    26ac:	ee 59       	subi	r30, 0x9E	; 158
    26ae:	fc 4f       	sbci	r31, 0xFC	; 252
    26b0:	a6 01       	movw	r20, r12
    26b2:	60 e0       	ldi	r22, 0x00	; 0
    26b4:	70 e0       	ldi	r23, 0x00	; 0
    26b6:	be cf       	rjmp	.-132    	; 0x2634 <wavefrontMake+0x3e>
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
			}
		}
	}
}
    26b8:	df 91       	pop	r29
    26ba:	cf 91       	pop	r28
    26bc:	1f 91       	pop	r17
    26be:	0f 91       	pop	r16
    26c0:	ff 90       	pop	r15
    26c2:	ef 90       	pop	r14
    26c4:	df 90       	pop	r13
    26c6:	cf 90       	pop	r12
    26c8:	bf 90       	pop	r11
    26ca:	08 95       	ret

000026cc <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    26cc:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    26ce:	10 91 08 06 	lds	r17, 0x0608
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,TO_MAP_ROTATE);
    26d2:	80 91 71 04 	lds	r24, 0x0471
    26d6:	60 91 06 05 	lds	r22, 0x0506
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    26e0:	e1 2f       	mov	r30, r17
    26e2:	e6 95       	lsr	r30
    26e4:	e6 95       	lsr	r30
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	ee 0f       	add	r30, r30
    26ea:	ff 1f       	adc	r31, r31
    26ec:	ee 0f       	add	r30, r30
    26ee:	ff 1f       	adc	r31, r31
    26f0:	13 70       	andi	r17, 0x03	; 3
    26f2:	e1 0f       	add	r30, r17
    26f4:	f1 1d       	adc	r31, r1
    26f6:	ea 51       	subi	r30, 0x1A	; 26
    26f8:	fd 4f       	sbci	r31, 0xFD	; 253
    26fa:	80 83       	st	Z, r24
}
    26fc:	1f 91       	pop	r17
    26fe:	08 95       	ret

00002700 <checkFire>:
* Input Variables:	none
* Output Return:	unsigned char
* Overview:			Checks world for Fires
********************************************************************/
unsigned char checkFire(void)
{
    2700:	ef 92       	push	r14
    2702:	ff 92       	push	r15
    2704:	0f 93       	push	r16
    2706:	1f 93       	push	r17
	// Acquire the current gateway
	unsigned char curGate = currentGateway;
	
	// Acquire the current cell
	unsigned char curRow = (currentCellWorld>>2);
    2708:	00 91 08 06 	lds	r16, 0x0608
    270c:	10 2f       	mov	r17, r16
    270e:	16 95       	lsr	r17
    2710:	16 95       	lsr	r17
	unsigned char curCol = (currentCellWorld&0b0011);
    2712:	83 e0       	ldi	r24, 0x03	; 3
    2714:	e8 2e       	mov	r14, r24
    2716:	e0 22       	and	r14, r16
	unsigned char curCell = ROBOT_WORLD[curRow][curCol];
    2718:	e1 2f       	mov	r30, r17
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	ee 0f       	add	r30, r30
    271e:	ff 1f       	adc	r31, r31
    2720:	ee 0f       	add	r30, r30
    2722:	ff 1f       	adc	r31, r31
    2724:	ee 0d       	add	r30, r14
    2726:	f1 1d       	adc	r31, r1
    2728:	ea 51       	subi	r30, 0x1A	; 26
    272a:	fd 4f       	sbci	r31, 0xFD	; 253
    272c:	f0 80       	ld	r15, Z
	
	// Rotate the current gateway wrt to current orientation
	curGate = rotateCell (curGate, currentOrientation, TO_MAP_ROTATE);
    272e:	80 91 71 04 	lds	r24, 0x0471
    2732:	60 91 06 05 	lds	r22, 0x0506
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Return the boolean value of the equality
	if (curGate != curCell){
    273c:	8f 15       	cp	r24, r15
    273e:	e9 f0       	breq	.+58     	; 0x277a <checkFire+0x7a>
		switch(curGate^curCell){
    2740:	8f 25       	eor	r24, r15
    2742:	82 30       	cpi	r24, 0x02	; 2
    2744:	61 f0       	breq	.+24     	; 0x275e <checkFire+0x5e>
    2746:	83 30       	cpi	r24, 0x03	; 3
    2748:	18 f4       	brcc	.+6      	; 0x2750 <checkFire+0x50>
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	b1 f4       	brne	.+44     	; 0x277a <checkFire+0x7a>
    274e:	05 c0       	rjmp	.+10     	; 0x275a <checkFire+0x5a>
    2750:	84 30       	cpi	r24, 0x04	; 4
    2752:	69 f0       	breq	.+26     	; 0x276e <checkFire+0x6e>
    2754:	88 30       	cpi	r24, 0x08	; 8
    2756:	89 f4       	brne	.+34     	; 0x277a <checkFire+0x7a>
    2758:	0e c0       	rjmp	.+28     	; 0x2776 <checkFire+0x76>
			case 0b0001:
				currentFireCell = (curRow<<2)+(curCol-1);
    275a:	01 50       	subi	r16, 0x01	; 1
    275c:	09 c0       	rjmp	.+18     	; 0x2770 <checkFire+0x70>
				break;
			case 0b0010:
				currentFireCell = ((curRow+1)<<2)+(curCol);
    275e:	1f 5f       	subi	r17, 0xFF	; 255
    2760:	11 0f       	add	r17, r17
    2762:	11 0f       	add	r17, r17
    2764:	1e 0d       	add	r17, r14
    2766:	10 93 98 06 	sts	0x0698, r17
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	07 c0       	rjmp	.+14     	; 0x277c <checkFire+0x7c>
				return SUCCESS;
				break;
			case 0b0100:
				currentFireCell = (curRow<<2)+(curCol+1);
    276e:	0f 5f       	subi	r16, 0xFF	; 255
    2770:	00 93 98 06 	sts	0x0698, r16
    2774:	fa cf       	rjmp	.-12     	; 0x276a <checkFire+0x6a>
				return SUCCESS;
				break;
			case 0b1000:
				currentFireCell = ((curRow-1)<<2)+(curCol);
    2776:	11 50       	subi	r17, 0x01	; 1
    2778:	f3 cf       	rjmp	.-26     	; 0x2760 <checkFire+0x60>
				return SUCCESS;
    277a:	80 e0       	ldi	r24, 0x00	; 0
		}
		return SUCCESS;
	}
	return FAIL;
	// return 0;
}
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	ff 90       	pop	r15
    2782:	ef 90       	pop	r14
    2784:	08 95       	ret

00002786 <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    2786:	ff 92       	push	r15
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    278e:	08 2f       	mov	r16, r24
    2790:	06 95       	lsr	r16
    2792:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;			
    2794:	93 e0       	ldi	r25, 0x03	; 3
    2796:	f9 2e       	mov	r15, r25
    2798:	f8 22       	and	r15, r24
		
	switch(curMove){
    279a:	62 30       	cpi	r22, 0x02	; 2
    279c:	31 f0       	breq	.+12     	; 0x27aa <shiftMap+0x24>
    279e:	63 30       	cpi	r22, 0x03	; 3
    27a0:	a9 f0       	breq	.+42     	; 0x27cc <shiftMap+0x46>
    27a2:	61 30       	cpi	r22, 0x01	; 1
    27a4:	b1 f4       	brne	.+44     	; 0x27d2 <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    27a6:	11 50       	subi	r17, 0x01	; 1
    27a8:	12 c0       	rjmp	.+36     	; 0x27ce <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    27aa:	41 30       	cpi	r20, 0x01	; 1
    27ac:	49 f0       	breq	.+18     	; 0x27c0 <shiftMap+0x3a>
    27ae:	41 30       	cpi	r20, 0x01	; 1
    27b0:	28 f0       	brcs	.+10     	; 0x27bc <shiftMap+0x36>
    27b2:	42 30       	cpi	r20, 0x02	; 2
    27b4:	39 f0       	breq	.+14     	; 0x27c4 <shiftMap+0x3e>
    27b6:	43 30       	cpi	r20, 0x03	; 3
    27b8:	b9 f4       	brne	.+46     	; 0x27e8 <shiftMap+0x62>
    27ba:	06 c0       	rjmp	.+12     	; 0x27c8 <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    27bc:	01 50       	subi	r16, 0x01	; 1
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    27c0:	f3 94       	inc	r15
    27c2:	12 c0       	rjmp	.+36     	; 0x27e8 <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    27c4:	0f 5f       	subi	r16, 0xFF	; 255
    27c6:	10 c0       	rjmp	.+32     	; 0x27e8 <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    27c8:	fa 94       	dec	r15
    27ca:	0e c0       	rjmp	.+28     	; 0x27e8 <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    27cc:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    27ce:	13 70       	andi	r17, 0x03	; 3
    27d0:	0b c0       	rjmp	.+22     	; 0x27e8 <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <shiftMap+0x4e>
    27d4:	84 e4       	ldi	r24, 0x44	; 68
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	ed b7       	in	r30, 0x3d	; 61
    27da:	fe b7       	in	r31, 0x3e	; 62
    27dc:	92 83       	std	Z+2, r25	; 0x02
    27de:	81 83       	std	Z+1, r24	; 0x01
    27e0:	0e 94 21 36 	call	0x6c42	; 0x6c42 <printf>
    27e4:	0f 90       	pop	r0
    27e6:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    27e8:	10 93 06 05 	sts	0x0506, r17
    27ec:	00 0f       	add	r16, r16
    27ee:	00 0f       	add	r16, r16
	return currentCell;
}
    27f0:	80 2f       	mov	r24, r16
    27f2:	8f 0d       	add	r24, r15
    27f4:	1f 91       	pop	r17
    27f6:	0f 91       	pop	r16
    27f8:	ff 90       	pop	r15
    27fa:	08 95       	ret

000027fc <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char row, unsigned char col)
{	
    27fc:	df 92       	push	r13
    27fe:	ef 92       	push	r14
    2800:	ff 92       	push	r15
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	18 2f       	mov	r17, r24
    2808:	06 2f       	mov	r16, r22
    280a:	ff 24       	eor	r15, r15
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	2b c0       	rjmp	.+86     	; 0x2866 <matchBranch+0x6a>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    2810:	15 30       	cpi	r17, 0x05	; 5
    2812:	88 f5       	brcc	.+98     	; 0x2876 <matchBranch+0x7a>
    2814:	05 30       	cpi	r16, 0x05	; 5
    2816:	78 f5       	brcc	.+94     	; 0x2876 <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    2818:	ef 2d       	mov	r30, r15
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	ee 5a       	subi	r30, 0xAE	; 174
    281e:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    2820:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    2822:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    2824:	80 81       	ld	r24, Z
    2826:	6e 2d       	mov	r22, r14
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    282e:	e1 2f       	mov	r30, r17
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	e0 0f       	add	r30, r16
    283c:	f1 1d       	adc	r31, r1
    283e:	ea 51       	subi	r30, 0x1A	; 26
    2840:	fd 4f       	sbci	r31, 0xFD	; 253
    2842:	90 81       	ld	r25, Z
    2844:	89 17       	cp	r24, r25
    2846:	b9 f4       	brne	.+46     	; 0x2876 <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		curCell = (curRow << 2) + curCol;
    2848:	11 0f       	add	r17, r17
    284a:	11 0f       	add	r17, r17
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		curCell = shiftMap(curCell, curMove, curOrnt);
    284c:	81 2f       	mov	r24, r17
    284e:	80 0f       	add	r24, r16
    2850:	6d 2d       	mov	r22, r13
    2852:	4e 2d       	mov	r20, r14
    2854:	0e 94 c3 13 	call	0x2786	; 0x2786 <shiftMap>
    2858:	98 2f       	mov	r25, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = curCell >> 2;
    285a:	18 2f       	mov	r17, r24
    285c:	16 95       	lsr	r17
    285e:	16 95       	lsr	r17
		curCol = curCell & 0b0011;
    2860:	08 2f       	mov	r16, r24
    2862:	03 70       	andi	r16, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    2864:	f3 94       	inc	r15
    2866:	80 91 61 03 	lds	r24, 0x0361
    286a:	f8 16       	cp	r15, r24
    286c:	88 f2       	brcs	.-94     	; 0x2810 <matchBranch+0x14>
		curRow = curCell >> 2;
		curCol = curCell & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	currentCellWorld = curCell;
    286e:	90 93 08 06 	sts	0x0608, r25
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	01 c0       	rjmp	.+2      	; 0x2878 <matchBranch+0x7c>
	return SUCCESS;
    2876:	80 e0       	ldi	r24, 0x00	; 0
}
    2878:	1f 91       	pop	r17
    287a:	0f 91       	pop	r16
    287c:	ff 90       	pop	r15
    287e:	ef 90       	pop	r14
    2880:	df 90       	pop	r13
    2882:	08 95       	ret

00002884 <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    2884:	cf 92       	push	r12
    2886:	df 92       	push	r13
    2888:	ef 92       	push	r14
    288a:	ff 92       	push	r15
    288c:	0f 93       	push	r16
    288e:	1f 93       	push	r17
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	0f 92       	push	r0
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
	unsigned char i = 0;
	
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    289a:	e0 90 52 03 	lds	r14, 0x0352
	
	// Local variables for nested for loops 
	unsigned char row, col;
	
	// Stores the number of matching seeds
	matchSeeds = 0;
    289e:	10 92 a0 06 	sts	0x06A0, r1
    28a2:	00 e0       	ldi	r16, 0x00	; 0
    28a4:	10 e0       	ldi	r17, 0x00	; 0
    28a6:	1c c0       	rjmp	.+56     	; 0x28e0 <localizeGateway+0x5c>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    28a8:	f6 01       	movw	r30, r12
    28aa:	80 81       	ld	r24, Z
    28ac:	e8 16       	cp	r14, r24
    28ae:	69 f4       	brne	.+26     	; 0x28ca <localizeGateway+0x46>
			
				//Check to see if we have a matching branch
				if(matchBranch(row,col)){
    28b0:	8f 2d       	mov	r24, r15
    28b2:	69 2f       	mov	r22, r25
    28b4:	99 83       	std	Y+1, r25	; 0x01
    28b6:	0e 94 fe 13 	call	0x27fc	; 0x27fc <matchBranch>
    28ba:	99 81       	ldd	r25, Y+1	; 0x01
    28bc:	88 23       	and	r24, r24
    28be:	29 f0       	breq	.+10     	; 0x28ca <localizeGateway+0x46>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    28c0:	80 91 a0 06 	lds	r24, 0x06A0
    28c4:	8f 5f       	subi	r24, 0xFF	; 255
    28c6:	80 93 a0 06 	sts	0x06A0, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    28ca:	9f 5f       	subi	r25, 0xFF	; 255
    28cc:	08 94       	sec
    28ce:	c1 1c       	adc	r12, r1
    28d0:	d1 1c       	adc	r13, r1
    28d2:	94 30       	cpi	r25, 0x04	; 4
    28d4:	49 f7       	brne	.-46     	; 0x28a8 <localizeGateway+0x24>
    28d6:	0f 5f       	subi	r16, 0xFF	; 255
    28d8:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    28da:	04 30       	cpi	r16, 0x04	; 4
    28dc:	11 05       	cpc	r17, r1
    28de:	61 f0       	breq	.+24     	; 0x28f8 <localizeGateway+0x74>
    28e0:	f0 2e       	mov	r15, r16
    28e2:	68 01       	movw	r12, r16
    28e4:	cc 0c       	add	r12, r12
    28e6:	dd 1c       	adc	r13, r13
    28e8:	cc 0c       	add	r12, r12
    28ea:	dd 1c       	adc	r13, r13
    28ec:	86 ee       	ldi	r24, 0xE6	; 230
    28ee:	92 e0       	ldi	r25, 0x02	; 2
    28f0:	c8 0e       	add	r12, r24
    28f2:	d9 1e       	adc	r13, r25
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	d8 cf       	rjmp	.-80     	; 0x28a8 <localizeGateway+0x24>
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	80 91 a0 06 	lds	r24, 0x06A0
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	09 f0       	breq	.+2      	; 0x2904 <localizeGateway+0x80>
    2902:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    2904:	89 2f       	mov	r24, r25
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	ff 90       	pop	r15
    2912:	ef 90       	pop	r14
    2914:	df 90       	pop	r13
    2916:	cf 90       	pop	r12
    2918:	08 95       	ret

0000291a <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    291a:	80 91 71 04 	lds	r24, 0x0471
    291e:	80 fd       	sbrc	r24, 0
    2920:	02 c0       	rjmp	.+4      	; 0x2926 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	05 c0       	rjmp	.+10     	; 0x2930 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    2926:	83 fd       	sbrc	r24, 3
    2928:	02 c0       	rjmp	.+4      	; 0x292e <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    292a:	82 e0       	ldi	r24, 0x02	; 2
    292c:	01 c0       	rjmp	.+2      	; 0x2930 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    292e:	83 e0       	ldi	r24, 0x03	; 3
    2930:	80 93 ef 03 	sts	0x03EF, r24
	}
	
	switch(oldMove){
    2934:	80 91 f0 03 	lds	r24, 0x03F0
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	29 f0       	breq	.+10     	; 0x2946 <planMap+0x2c>
    293c:	81 30       	cpi	r24, 0x01	; 1
    293e:	38 f0       	brcs	.+14     	; 0x294e <planMap+0x34>
    2940:	84 30       	cpi	r24, 0x04	; 4
    2942:	28 f4       	brcc	.+10     	; 0x294e <planMap+0x34>
    2944:	0f c0       	rjmp	.+30     	; 0x2964 <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	80 93 ef 03 	sts	0x03EF, r24
    294c:	0b c0       	rjmp	.+22     	; 0x2964 <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    294e:	00 d0       	rcall	.+0      	; 0x2950 <planMap+0x36>
    2950:	8d e4       	ldi	r24, 0x4D	; 77
    2952:	91 e0       	ldi	r25, 0x01	; 1
    2954:	ed b7       	in	r30, 0x3d	; 61
    2956:	fe b7       	in	r31, 0x3e	; 62
    2958:	92 83       	std	Z+2, r25	; 0x02
    295a:	81 83       	std	Z+1, r24	; 0x01
    295c:	0e 94 21 36 	call	0x6c42	; 0x6c42 <printf>
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
			break;
	}
	
	oldMove = currentMove;
    2964:	80 91 ef 03 	lds	r24, 0x03EF
    2968:	80 93 f0 03 	sts	0x03F0, r24
}
    296c:	08 95       	ret

0000296e <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch >= BRANCH_MAX){
    296e:	80 91 61 03 	lds	r24, 0x0361
    2972:	85 30       	cpi	r24, 0x05	; 5
    2974:	80 f0       	brcs	.+32     	; 0x2996 <planGateway+0x28>
    2976:	e2 e5       	ldi	r30, 0x52	; 82
    2978:	f3 e0       	ldi	r31, 0x03	; 3
		for(i = 0; i < BRANCH_MAX; i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    297a:	81 81       	ldd	r24, Z+1	; 0x01
    297c:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    297e:	86 81       	ldd	r24, Z+6	; 0x06
    2980:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2982:	83 85       	ldd	r24, Z+11	; 0x0b
    2984:	82 87       	std	Z+10, r24	; 0x0a
    2986:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch >= BRANCH_MAX){
		for(i = 0; i < BRANCH_MAX; i++){
    2988:	83 e0       	ldi	r24, 0x03	; 3
    298a:	e7 35       	cpi	r30, 0x57	; 87
    298c:	f8 07       	cpc	r31, r24
    298e:	a9 f7       	brne	.-22     	; 0x297a <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2990:	84 e0       	ldi	r24, 0x04	; 4
    2992:	80 93 61 03 	sts	0x0361, r24
	}
	
	// Decide what the current move should be
	planMap();
    2996:	0e 94 8d 14 	call	0x291a	; 0x291a <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    299a:	e0 91 61 03 	lds	r30, 0x0361
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	ee 5a       	subi	r30, 0xAE	; 174
    29a2:	fc 4f       	sbci	r31, 0xFC	; 252
    29a4:	80 91 71 04 	lds	r24, 0x0471
    29a8:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    29aa:	90 91 ef 03 	lds	r25, 0x03EF
    29ae:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    29b0:	80 91 06 05 	lds	r24, 0x0506
    29b4:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    29b6:	92 30       	cpi	r25, 0x02	; 2
    29b8:	b1 f0       	breq	.+44     	; 0x29e6 <planGateway+0x78>
    29ba:	93 30       	cpi	r25, 0x03	; 3
    29bc:	21 f0       	breq	.+8      	; 0x29c6 <planGateway+0x58>
    29be:	91 30       	cpi	r25, 0x01	; 1
    29c0:	39 f4       	brne	.+14     	; 0x29d0 <planGateway+0x62>
		case MOVE_LEFT:
			// If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    29c2:	81 50       	subi	r24, 0x01	; 1
    29c4:	01 c0       	rjmp	.+2      	; 0x29c8 <planGateway+0x5a>
			break;
		case MOVE_RIGHT:
			// If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    29c6:	8f 5f       	subi	r24, 0xFF	; 255
    29c8:	83 70       	andi	r24, 0x03	; 3
    29ca:	80 93 06 05 	sts	0x0506, r24
    29ce:	0b c0       	rjmp	.+22     	; 0x29e6 <planGateway+0x78>
			break;
		default:
			LCD_printf("Whatz2?!");
    29d0:	00 d0       	rcall	.+0      	; 0x29d2 <planGateway+0x64>
    29d2:	86 e5       	ldi	r24, 0x56	; 86
    29d4:	91 e0       	ldi	r25, 0x01	; 1
    29d6:	ed b7       	in	r30, 0x3d	; 61
    29d8:	fe b7       	in	r31, 0x3e	; 62
    29da:	92 83       	std	Z+2, r25	; 0x02
    29dc:	81 83       	std	Z+1, r24	; 0x01
    29de:	0e 94 21 36 	call	0x6c42	; 0x6c42 <printf>
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    29e6:	80 91 61 03 	lds	r24, 0x0361
    29ea:	8f 5f       	subi	r24, 0xFF	; 255
    29ec:	80 93 61 03 	sts	0x0361, r24
}
    29f0:	08 95       	ret

000029f2 <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    29f2:	90 91 06 05 	lds	r25, 0x0506
    29f6:	91 30       	cpi	r25, 0x01	; 1
    29f8:	91 f0       	breq	.+36     	; 0x2a1e <planMetric+0x2c>
    29fa:	91 30       	cpi	r25, 0x01	; 1
    29fc:	28 f0       	brcs	.+10     	; 0x2a08 <planMetric+0x16>
    29fe:	92 30       	cpi	r25, 0x02	; 2
    2a00:	d9 f0       	breq	.+54     	; 0x2a38 <planMetric+0x46>
    2a02:	93 30       	cpi	r25, 0x03	; 3
    2a04:	c1 f5       	brne	.+112    	; 0x2a76 <planMetric+0x84>
    2a06:	23 c0       	rjmp	.+70     	; 0x2a4e <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    2a08:	80 91 07 05 	lds	r24, 0x0507
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	91 f0       	breq	.+36     	; 0x2a34 <planMetric+0x42>
    2a10:	81 30       	cpi	r24, 0x01	; 1
    2a12:	68 f1       	brcs	.+90     	; 0x2a6e <planMetric+0x7c>
    2a14:	82 30       	cpi	r24, 0x02	; 2
    2a16:	49 f1       	breq	.+82     	; 0x2a6a <planMetric+0x78>
    2a18:	83 30       	cpi	r24, 0x03	; 3
    2a1a:	69 f5       	brne	.+90     	; 0x2a76 <planMetric+0x84>
    2a1c:	26 c0       	rjmp	.+76     	; 0x2a6a <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    2a1e:	80 91 07 05 	lds	r24, 0x0507
    2a22:	81 30       	cpi	r24, 0x01	; 1
    2a24:	21 f1       	breq	.+72     	; 0x2a6e <planMetric+0x7c>
    2a26:	81 30       	cpi	r24, 0x01	; 1
    2a28:	e8 f0       	brcs	.+58     	; 0x2a64 <planMetric+0x72>
    2a2a:	82 30       	cpi	r24, 0x02	; 2
    2a2c:	19 f0       	breq	.+6      	; 0x2a34 <planMetric+0x42>
    2a2e:	83 30       	cpi	r24, 0x03	; 3
    2a30:	11 f5       	brne	.+68     	; 0x2a76 <planMetric+0x84>
    2a32:	18 c0       	rjmp	.+48     	; 0x2a64 <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    2a34:	83 e0       	ldi	r24, 0x03	; 3
    2a36:	1c c0       	rjmp	.+56     	; 0x2a70 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    2a38:	80 91 07 05 	lds	r24, 0x0507
    2a3c:	81 30       	cpi	r24, 0x01	; 1
    2a3e:	c1 f0       	breq	.+48     	; 0x2a70 <planMetric+0x7e>
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	98 f0       	brcs	.+38     	; 0x2a6a <planMetric+0x78>
    2a44:	82 30       	cpi	r24, 0x02	; 2
    2a46:	a1 f0       	breq	.+40     	; 0x2a70 <planMetric+0x7e>
    2a48:	83 30       	cpi	r24, 0x03	; 3
    2a4a:	a9 f4       	brne	.+42     	; 0x2a76 <planMetric+0x84>
    2a4c:	11 c0       	rjmp	.+34     	; 0x2a70 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    2a4e:	80 91 07 05 	lds	r24, 0x0507
    2a52:	81 30       	cpi	r24, 0x01	; 1
    2a54:	69 f0       	breq	.+26     	; 0x2a70 <planMetric+0x7e>
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	28 f0       	brcs	.+10     	; 0x2a64 <planMetric+0x72>
    2a5a:	82 30       	cpi	r24, 0x02	; 2
    2a5c:	31 f0       	breq	.+12     	; 0x2a6a <planMetric+0x78>
    2a5e:	83 30       	cpi	r24, 0x03	; 3
    2a60:	51 f4       	brne	.+20     	; 0x2a76 <planMetric+0x84>
    2a62:	05 c0       	rjmp	.+10     	; 0x2a6e <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    2a64:	90 93 ef 03 	sts	0x03EF, r25
    2a68:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    2a6a:	81 e0       	ldi	r24, 0x01	; 1
    2a6c:	01 c0       	rjmp	.+2      	; 0x2a70 <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    2a6e:	82 e0       	ldi	r24, 0x02	; 2
    2a70:	80 93 ef 03 	sts	0x03EF, r24
    2a74:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <planMetric+0x86>
    2a78:	8f e5       	ldi	r24, 0x5F	; 95
    2a7a:	91 e0       	ldi	r25, 0x01	; 1
    2a7c:	ed b7       	in	r30, 0x3d	; 61
    2a7e:	fe b7       	in	r31, 0x3e	; 62
    2a80:	92 83       	std	Z+2, r25	; 0x02
    2a82:	81 83       	std	Z+1, r24	; 0x01
    2a84:	0e 94 21 36 	call	0x6c42	; 0x6c42 <printf>
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
    2a8c:	08 95       	ret

00002a8e <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2a8e:	cf 92       	push	r12
    2a90:	df 92       	push	r13
    2a92:	ef 92       	push	r14
    2a94:	ff 92       	push	r15
    2a96:	0f 93       	push	r16
    2a98:	1f 93       	push	r17
    2a9a:	df 93       	push	r29
    2a9c:	cf 93       	push	r28
    2a9e:	0f 92       	push	r0
    2aa0:	cd b7       	in	r28, 0x3d	; 61
    2aa2:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2aa4:	80 91 08 06 	lds	r24, 0x0608
    2aa8:	f8 2e       	mov	r15, r24
    2aaa:	f6 94       	lsr	r15
    2aac:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2aae:	98 2f       	mov	r25, r24
    2ab0:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2ab2:	00 91 06 05 	lds	r16, 0x0506
    2ab6:	cc 24       	eor	r12, r12
    2ab8:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2aba:	f6 01       	movw	r30, r12
    2abc:	eb 50       	subi	r30, 0x0B	; 11
    2abe:	fb 4f       	sbci	r31, 0xFB	; 251
    2ac0:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2ac2:	ef 2d       	mov	r30, r15
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	ee 0f       	add	r30, r30
    2ac8:	ff 1f       	adc	r31, r31
    2aca:	ee 0f       	add	r30, r30
    2acc:	ff 1f       	adc	r31, r31
    2ace:	e9 0f       	add	r30, r25
    2ad0:	f1 1d       	adc	r31, r1
    2ad2:	ea 51       	subi	r30, 0x1A	; 26
    2ad4:	fd 4f       	sbci	r31, 0xFD	; 253
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2ad6:	80 81       	ld	r24, Z
    2ad8:	60 2f       	mov	r22, r16
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	99 83       	std	Y+1, r25	; 0x01
    2ade:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2ae2:	f6 01       	movw	r30, r12
    2ae4:	e4 57       	subi	r30, 0x74	; 116
    2ae6:	f9 4f       	sbci	r31, 0xF9	; 249
    2ae8:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2aea:	99 81       	ldd	r25, Y+1	; 0x01
    2aec:	12 30       	cpi	r17, 0x02	; 2
    2aee:	89 f4       	brne	.+34     	; 0x2b12 <getGateways+0x84>
			switch(curOrient){
    2af0:	01 30       	cpi	r16, 0x01	; 1
    2af2:	49 f0       	breq	.+18     	; 0x2b06 <getGateways+0x78>
    2af4:	01 30       	cpi	r16, 0x01	; 1
    2af6:	28 f0       	brcs	.+10     	; 0x2b02 <getGateways+0x74>
    2af8:	02 30       	cpi	r16, 0x02	; 2
    2afa:	39 f0       	breq	.+14     	; 0x2b0a <getGateways+0x7c>
    2afc:	03 30       	cpi	r16, 0x03	; 3
    2afe:	89 f4       	brne	.+34     	; 0x2b22 <getGateways+0x94>
    2b00:	06 c0       	rjmp	.+12     	; 0x2b0e <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    2b02:	fa 94       	dec	r15
    2b04:	0e c0       	rjmp	.+28     	; 0x2b22 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    2b06:	9f 5f       	subi	r25, 0xFF	; 255
    2b08:	0c c0       	rjmp	.+24     	; 0x2b22 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    2b0a:	f3 94       	inc	r15
    2b0c:	0a c0       	rjmp	.+20     	; 0x2b22 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    2b0e:	91 50       	subi	r25, 0x01	; 1
    2b10:	08 c0       	rjmp	.+16     	; 0x2b22 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    2b12:	13 30       	cpi	r17, 0x03	; 3
    2b14:	11 f4       	brne	.+4      	; 0x2b1a <getGateways+0x8c>
			curOrient++;
    2b16:	0f 5f       	subi	r16, 0xFF	; 255
    2b18:	03 c0       	rjmp	.+6      	; 0x2b20 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    2b1a:	11 30       	cpi	r17, 0x01	; 1
    2b1c:	11 f4       	brne	.+4      	; 0x2b22 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    2b1e:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    2b20:	03 70       	andi	r16, 0x03	; 3
    2b22:	08 94       	sec
    2b24:	c1 1c       	adc	r12, r1
    2b26:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2b28:	8d e0       	ldi	r24, 0x0D	; 13
    2b2a:	c8 16       	cp	r12, r24
    2b2c:	d1 04       	cpc	r13, r1
    2b2e:	29 f6       	brne	.-118    	; 0x2aba <getGateways+0x2c>
    2b30:	cc 24       	eor	r12, r12
    2b32:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2b34:	98 e6       	ldi	r25, 0x68	; 104
    2b36:	e9 2e       	mov	r14, r25
    2b38:	91 e0       	ldi	r25, 0x01	; 1
    2b3a:	f9 2e       	mov	r15, r25
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2b3c:	f6 01       	movw	r30, r12
    2b3e:	e4 57       	subi	r30, 0x74	; 116
    2b40:	f9 4f       	sbci	r31, 0xF9	; 249
    2b42:	00 81       	ld	r16, Z
		LCD_clear();
    2b44:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2b48:	20 2f       	mov	r18, r16
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	ad b7       	in	r26, 0x3d	; 61
    2b4e:	be b7       	in	r27, 0x3e	; 62
    2b50:	54 97       	sbiw	r26, 0x14	; 20
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	be bf       	out	0x3e, r27	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	ad bf       	out	0x3d, r26	; 61
    2b5c:	ed b7       	in	r30, 0x3d	; 61
    2b5e:	fe b7       	in	r31, 0x3e	; 62
    2b60:	31 96       	adiw	r30, 0x01	; 1
    2b62:	12 96       	adiw	r26, 0x02	; 2
    2b64:	fc 92       	st	X, r15
    2b66:	ee 92       	st	-X, r14
    2b68:	11 97       	sbiw	r26, 0x01	; 1
    2b6a:	d3 82       	std	Z+3, r13	; 0x03
    2b6c:	c2 82       	std	Z+2, r12	; 0x02
    2b6e:	11 27       	eor	r17, r17
    2b70:	07 fd       	sbrc	r16, 7
    2b72:	10 95       	com	r17
    2b74:	00 27       	eor	r16, r16
    2b76:	11 0f       	add	r17, r17
    2b78:	00 1f       	adc	r16, r16
    2b7a:	11 27       	eor	r17, r17
    2b7c:	15 83       	std	Z+5, r17	; 0x05
    2b7e:	04 83       	std	Z+4, r16	; 0x04
    2b80:	c9 01       	movw	r24, r18
    2b82:	b6 e0       	ldi	r27, 0x06	; 6
    2b84:	96 95       	lsr	r25
    2b86:	87 95       	ror	r24
    2b88:	ba 95       	dec	r27
    2b8a:	e1 f7       	brne	.-8      	; 0x2b84 <getGateways+0xf6>
    2b8c:	81 70       	andi	r24, 0x01	; 1
    2b8e:	90 70       	andi	r25, 0x00	; 0
    2b90:	97 83       	std	Z+7, r25	; 0x07
    2b92:	86 83       	std	Z+6, r24	; 0x06
    2b94:	c9 01       	movw	r24, r18
    2b96:	a5 e0       	ldi	r26, 0x05	; 5
    2b98:	96 95       	lsr	r25
    2b9a:	87 95       	ror	r24
    2b9c:	aa 95       	dec	r26
    2b9e:	e1 f7       	brne	.-8      	; 0x2b98 <getGateways+0x10a>
    2ba0:	81 70       	andi	r24, 0x01	; 1
    2ba2:	90 70       	andi	r25, 0x00	; 0
    2ba4:	91 87       	std	Z+9, r25	; 0x09
    2ba6:	80 87       	std	Z+8, r24	; 0x08
    2ba8:	c9 01       	movw	r24, r18
    2baa:	74 e0       	ldi	r23, 0x04	; 4
    2bac:	96 95       	lsr	r25
    2bae:	87 95       	ror	r24
    2bb0:	7a 95       	dec	r23
    2bb2:	e1 f7       	brne	.-8      	; 0x2bac <getGateways+0x11e>
    2bb4:	81 70       	andi	r24, 0x01	; 1
    2bb6:	90 70       	andi	r25, 0x00	; 0
    2bb8:	93 87       	std	Z+11, r25	; 0x0b
    2bba:	82 87       	std	Z+10, r24	; 0x0a
    2bbc:	c9 01       	movw	r24, r18
    2bbe:	63 e0       	ldi	r22, 0x03	; 3
    2bc0:	96 95       	lsr	r25
    2bc2:	87 95       	ror	r24
    2bc4:	6a 95       	dec	r22
    2bc6:	e1 f7       	brne	.-8      	; 0x2bc0 <getGateways+0x132>
    2bc8:	81 70       	andi	r24, 0x01	; 1
    2bca:	90 70       	andi	r25, 0x00	; 0
    2bcc:	95 87       	std	Z+13, r25	; 0x0d
    2bce:	84 87       	std	Z+12, r24	; 0x0c
    2bd0:	c9 01       	movw	r24, r18
    2bd2:	96 95       	lsr	r25
    2bd4:	87 95       	ror	r24
    2bd6:	96 95       	lsr	r25
    2bd8:	87 95       	ror	r24
    2bda:	81 70       	andi	r24, 0x01	; 1
    2bdc:	90 70       	andi	r25, 0x00	; 0
    2bde:	97 87       	std	Z+15, r25	; 0x0f
    2be0:	86 87       	std	Z+14, r24	; 0x0e
    2be2:	c9 01       	movw	r24, r18
    2be4:	96 95       	lsr	r25
    2be6:	87 95       	ror	r24
    2be8:	81 70       	andi	r24, 0x01	; 1
    2bea:	90 70       	andi	r25, 0x00	; 0
    2bec:	91 8b       	std	Z+17, r25	; 0x11
    2bee:	80 8b       	std	Z+16, r24	; 0x10
    2bf0:	21 70       	andi	r18, 0x01	; 1
    2bf2:	30 70       	andi	r19, 0x00	; 0
    2bf4:	33 8b       	std	Z+19, r19	; 0x13
    2bf6:	22 8b       	std	Z+18, r18	; 0x12
    2bf8:	0e 94 21 36 	call	0x6c42	; 0x6c42 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    2bfc:	ed b7       	in	r30, 0x3d	; 61
    2bfe:	fe b7       	in	r31, 0x3e	; 62
    2c00:	74 96       	adiw	r30, 0x14	; 20
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	fe bf       	out	0x3e, r31	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	ed bf       	out	0x3d, r30	; 61
    2c0c:	88 ee       	ldi	r24, 0xE8	; 232
    2c0e:	93 e0       	ldi	r25, 0x03	; 3
    2c10:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
    2c14:	08 94       	sec
    2c16:	c1 1c       	adc	r12, r1
    2c18:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2c1a:	fd e0       	ldi	r31, 0x0D	; 13
    2c1c:	cf 16       	cp	r12, r31
    2c1e:	d1 04       	cpc	r13, r1
    2c20:	09 f0       	breq	.+2      	; 0x2c24 <getGateways+0x196>
    2c22:	8c cf       	rjmp	.-232    	; 0x2b3c <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    2c24:	0f 90       	pop	r0
    2c26:	cf 91       	pop	r28
    2c28:	df 91       	pop	r29
    2c2a:	1f 91       	pop	r17
    2c2c:	0f 91       	pop	r16
    2c2e:	ff 90       	pop	r15
    2c30:	ef 90       	pop	r14
    2c32:	df 90       	pop	r13
    2c34:	cf 90       	pop	r12
    2c36:	08 95       	ret

00002c38 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2c38:	8f 92       	push	r8
    2c3a:	af 92       	push	r10
    2c3c:	bf 92       	push	r11
    2c3e:	cf 92       	push	r12
    2c40:	df 92       	push	r13
    2c42:	ef 92       	push	r14
    2c44:	ff 92       	push	r15
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
	char isDone = 0;
	pidController(0,RESET);
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	90 e0       	ldi	r25, 0x00	; 0
    2c52:	41 e0       	ldi	r20, 0x01	; 1
    2c54:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
	switch(currentMove){
    2c58:	80 91 ef 03 	lds	r24, 0x03EF
    2c5c:	82 30       	cpi	r24, 0x02	; 2
    2c5e:	69 f0       	breq	.+26     	; 0x2c7a <moveMap+0x42>
    2c60:	83 30       	cpi	r24, 0x03	; 3
    2c62:	c1 f0       	breq	.+48     	; 0x2c94 <moveMap+0x5c>
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	d1 f5       	brne	.+116    	; 0x2cdc <moveMap+0xa4>
		case MOVE_LEFT:
			move_arc_stwt(POINT_TURN, LEFT_TURN, 30, 30, 0);
    2c68:	60 e0       	ldi	r22, 0x00	; 0
    2c6a:	70 e0       	ldi	r23, 0x00	; 0
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	44 e8       	ldi	r20, 0x84	; 132
    2c76:	51 ec       	ldi	r21, 0xC1	; 193
    2c78:	15 c0       	rjmp	.+42     	; 0x2ca4 <moveMap+0x6c>
			TMRSRVC_delay(BRAKE_DELAY);
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
    2c7a:	60 e0       	ldi	r22, 0x00	; 0
    2c7c:	70 e0       	ldi	r23, 0x00	; 0
    2c7e:	85 ea       	ldi	r24, 0xA5	; 165
    2c80:	93 e4       	ldi	r25, 0x43	; 67
    2c82:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <setOdometry>
			while(!isDone){
				checkIR();
    2c86:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
				isDone = moveWall();
    2c8a:	0e 94 f7 10 	call	0x21ee	; 0x21ee <moveWall>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
			while(!isDone){
    2c8e:	88 23       	and	r24, r24
    2c90:	d1 f3       	breq	.-12     	; 0x2c86 <moveMap+0x4e>
    2c92:	17 c0       	rjmp	.+46     	; 0x2cc2 <moveMap+0x8a>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			
			// move_arc_stwt(NO_TURN, 45, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 30, 30, 0);
    2c94:	60 e0       	ldi	r22, 0x00	; 0
    2c96:	70 e0       	ldi	r23, 0x00	; 0
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	44 e8       	ldi	r20, 0x84	; 132
    2ca2:	51 e4       	ldi	r21, 0x41	; 65
    2ca4:	0f 2e       	mov	r0, r31
    2ca6:	f0 e0       	ldi	r31, 0x00	; 0
    2ca8:	ef 2e       	mov	r14, r31
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	ff 2e       	mov	r15, r31
    2cae:	f0 ef       	ldi	r31, 0xF0	; 240
    2cb0:	0f 2f       	mov	r16, r31
    2cb2:	f1 e4       	ldi	r31, 0x41	; 65
    2cb4:	1f 2f       	mov	r17, r31
    2cb6:	f0 2d       	mov	r31, r0
    2cb8:	57 01       	movw	r10, r14
    2cba:	68 01       	movw	r12, r16
    2cbc:	88 24       	eor	r8, r8
    2cbe:	0e 94 31 0b 	call	0x1662	; 0x1662 <move_arc_stwt>
			
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_ON);
    2cc2:	82 e0       	ldi	r24, 0x02	; 2
    2cc4:	61 e0       	ldi	r22, 0x01	; 1
    2cc6:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <STEPPER_stop>
			TMRSRVC_delay(BRAKE_DELAY);
    2cca:	82 e3       	ldi	r24, 0x32	; 50
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    2cd2:	82 e0       	ldi	r24, 0x02	; 2
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <STEPPER_stop>
    2cda:	0b c0       	rjmp	.+22     	; 0x2cf2 <moveMap+0xba>
			break;
		default:
			LCD_printf("Whatz2?!");
    2cdc:	00 d0       	rcall	.+0      	; 0x2cde <moveMap+0xa6>
    2cde:	86 e5       	ldi	r24, 0x56	; 86
    2ce0:	91 e0       	ldi	r25, 0x01	; 1
    2ce2:	ed b7       	in	r30, 0x3d	; 61
    2ce4:	fe b7       	in	r31, 0x3e	; 62
    2ce6:	92 83       	std	Z+2, r25	; 0x02
    2ce8:	81 83       	std	Z+1, r24	; 0x01
    2cea:	0e 94 21 36 	call	0x6c42	; 0x6c42 <printf>
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
			break;
	}
}
    2cf2:	1f 91       	pop	r17
    2cf4:	0f 91       	pop	r16
    2cf6:	ff 90       	pop	r15
    2cf8:	ef 90       	pop	r14
    2cfa:	df 90       	pop	r13
    2cfc:	cf 90       	pop	r12
    2cfe:	bf 90       	pop	r11
    2d00:	af 90       	pop	r10
    2d02:	8f 90       	pop	r8
    2d04:	08 95       	ret

00002d06 <map>:
* Input Variables:	none
* Output Return:	none
* Overview:			Makes the robot map the world
********************************************************************/
void map (void)
{
    2d06:	ef 92       	push	r14
    2d08:	ff 92       	push	r15
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
	// Initialize State
	isMapping = 1;
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	80 93 a1 06 	sts	0x06A1, r24
			break;
		}
		
		//Print Map
		LCD_clear();
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    2d18:	ea e8       	ldi	r30, 0x8A	; 138
    2d1a:	ee 2e       	mov	r14, r30
    2d1c:	e1 e0       	ldi	r30, 0x01	; 1
    2d1e:	fe 2e       	mov	r15, r30
    2d20:	26 c1       	rjmp	.+588    	; 0x2f6e <map+0x268>
	
	// Mapping Loop
	while(isMapping)
	{	
		//Sense
		checkIR();	
    2d22:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
		checkWorld();
    2d26:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		//Record
		setGateways();
    2d2a:	0e 94 66 13 	call	0x26cc	; 0x26cc <setGateways>
				
		//Plan using the Map
		planMap();
    2d2e:	0e 94 8d 14 	call	0x291a	; 0x291a <planMap>
		
		//Act on the Map
		moveMap();
    2d32:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <moveMap>
		
		//Shift the Map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    2d36:	80 91 08 06 	lds	r24, 0x0608
    2d3a:	60 91 ef 03 	lds	r22, 0x03EF
    2d3e:	40 91 06 05 	lds	r20, 0x0506
    2d42:	0e 94 c3 13 	call	0x2786	; 0x2786 <shiftMap>
    2d46:	80 93 08 06 	sts	0x0608, r24
		
		//Break?
		isMapping = !((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    2d4a:	90 91 09 06 	lds	r25, 0x0609
    2d4e:	98 17       	cp	r25, r24
    2d50:	41 f4       	brne	.+16     	; 0x2d62 <map+0x5c>
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	90 91 05 05 	lds	r25, 0x0505
    2d5a:	80 91 06 05 	lds	r24, 0x0506
    2d5e:	98 17       	cp	r25, r24
    2d60:	11 f0       	breq	.+4      	; 0x2d66 <map+0x60>
    2d62:	21 e0       	ldi	r18, 0x01	; 1
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	20 93 a1 06 	sts	0x06A1, r18
		if(!isMapping){			
    2d6a:	22 23       	and	r18, r18
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <map+0x6a>
    2d6e:	04 c1       	rjmp	.+520    	; 0x2f78 <map+0x272>
			break;
		}
		
		//Print Map
		LCD_clear();
    2d70:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    2d74:	80 91 ef 03 	lds	r24, 0x03EF
    2d78:	28 2f       	mov	r18, r24
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	60 91 08 06 	lds	r22, 0x0608
    2d80:	46 2f       	mov	r20, r22
    2d82:	50 e0       	ldi	r21, 0x00	; 0
    2d84:	00 91 06 05 	lds	r16, 0x0506
    2d88:	a0 2f       	mov	r26, r16
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
    2d90:	e2 97       	sbiw	r28, 0x32	; 50
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	ed b7       	in	r30, 0x3d	; 61
    2d9e:	fe b7       	in	r31, 0x3e	; 62
    2da0:	31 96       	adiw	r30, 0x01	; 1
    2da2:	fa 82       	std	Y+2, r15	; 0x02
    2da4:	e9 82       	std	Y+1, r14	; 0x01
    2da6:	99 27       	eor	r25, r25
    2da8:	87 fd       	sbrc	r24, 7
    2daa:	90 95       	com	r25
    2dac:	88 27       	eor	r24, r24
    2dae:	99 0f       	add	r25, r25
    2db0:	88 1f       	adc	r24, r24
    2db2:	99 27       	eor	r25, r25
    2db4:	93 83       	std	Z+3, r25	; 0x03
    2db6:	82 83       	std	Z+2, r24	; 0x02
    2db8:	c9 01       	movw	r24, r18
    2dba:	16 e0       	ldi	r17, 0x06	; 6
    2dbc:	96 95       	lsr	r25
    2dbe:	87 95       	ror	r24
    2dc0:	1a 95       	dec	r17
    2dc2:	e1 f7       	brne	.-8      	; 0x2dbc <map+0xb6>
    2dc4:	81 70       	andi	r24, 0x01	; 1
    2dc6:	90 70       	andi	r25, 0x00	; 0
    2dc8:	95 83       	std	Z+5, r25	; 0x05
    2dca:	84 83       	std	Z+4, r24	; 0x04
    2dcc:	c9 01       	movw	r24, r18
    2dce:	75 e0       	ldi	r23, 0x05	; 5
    2dd0:	96 95       	lsr	r25
    2dd2:	87 95       	ror	r24
    2dd4:	7a 95       	dec	r23
    2dd6:	e1 f7       	brne	.-8      	; 0x2dd0 <map+0xca>
    2dd8:	81 70       	andi	r24, 0x01	; 1
    2dda:	90 70       	andi	r25, 0x00	; 0
    2ddc:	97 83       	std	Z+7, r25	; 0x07
    2dde:	86 83       	std	Z+6, r24	; 0x06
    2de0:	c9 01       	movw	r24, r18
    2de2:	14 e0       	ldi	r17, 0x04	; 4
    2de4:	96 95       	lsr	r25
    2de6:	87 95       	ror	r24
    2de8:	1a 95       	dec	r17
    2dea:	e1 f7       	brne	.-8      	; 0x2de4 <map+0xde>
    2dec:	81 70       	andi	r24, 0x01	; 1
    2dee:	90 70       	andi	r25, 0x00	; 0
    2df0:	91 87       	std	Z+9, r25	; 0x09
    2df2:	80 87       	std	Z+8, r24	; 0x08
    2df4:	c9 01       	movw	r24, r18
    2df6:	73 e0       	ldi	r23, 0x03	; 3
    2df8:	96 95       	lsr	r25
    2dfa:	87 95       	ror	r24
    2dfc:	7a 95       	dec	r23
    2dfe:	e1 f7       	brne	.-8      	; 0x2df8 <map+0xf2>
    2e00:	81 70       	andi	r24, 0x01	; 1
    2e02:	90 70       	andi	r25, 0x00	; 0
    2e04:	93 87       	std	Z+11, r25	; 0x0b
    2e06:	82 87       	std	Z+10, r24	; 0x0a
    2e08:	c9 01       	movw	r24, r18
    2e0a:	96 95       	lsr	r25
    2e0c:	87 95       	ror	r24
    2e0e:	96 95       	lsr	r25
    2e10:	87 95       	ror	r24
    2e12:	81 70       	andi	r24, 0x01	; 1
    2e14:	90 70       	andi	r25, 0x00	; 0
    2e16:	95 87       	std	Z+13, r25	; 0x0d
    2e18:	84 87       	std	Z+12, r24	; 0x0c
    2e1a:	c9 01       	movw	r24, r18
    2e1c:	96 95       	lsr	r25
    2e1e:	87 95       	ror	r24
    2e20:	81 70       	andi	r24, 0x01	; 1
    2e22:	90 70       	andi	r25, 0x00	; 0
    2e24:	97 87       	std	Z+15, r25	; 0x0f
    2e26:	86 87       	std	Z+14, r24	; 0x0e
    2e28:	21 70       	andi	r18, 0x01	; 1
    2e2a:	30 70       	andi	r19, 0x00	; 0
    2e2c:	31 8b       	std	Z+17, r19	; 0x11
    2e2e:	20 8b       	std	Z+16, r18	; 0x10
    2e30:	77 27       	eor	r23, r23
    2e32:	67 fd       	sbrc	r22, 7
    2e34:	70 95       	com	r23
    2e36:	66 27       	eor	r22, r22
    2e38:	77 0f       	add	r23, r23
    2e3a:	66 1f       	adc	r22, r22
    2e3c:	77 27       	eor	r23, r23
    2e3e:	73 8b       	std	Z+19, r23	; 0x13
    2e40:	62 8b       	std	Z+18, r22	; 0x12
    2e42:	ca 01       	movw	r24, r20
    2e44:	26 e0       	ldi	r18, 0x06	; 6
    2e46:	96 95       	lsr	r25
    2e48:	87 95       	ror	r24
    2e4a:	2a 95       	dec	r18
    2e4c:	e1 f7       	brne	.-8      	; 0x2e46 <map+0x140>
    2e4e:	81 70       	andi	r24, 0x01	; 1
    2e50:	90 70       	andi	r25, 0x00	; 0
    2e52:	95 8b       	std	Z+21, r25	; 0x15
    2e54:	84 8b       	std	Z+20, r24	; 0x14
    2e56:	ca 01       	movw	r24, r20
    2e58:	15 e0       	ldi	r17, 0x05	; 5
    2e5a:	96 95       	lsr	r25
    2e5c:	87 95       	ror	r24
    2e5e:	1a 95       	dec	r17
    2e60:	e1 f7       	brne	.-8      	; 0x2e5a <map+0x154>
    2e62:	81 70       	andi	r24, 0x01	; 1
    2e64:	90 70       	andi	r25, 0x00	; 0
    2e66:	97 8b       	std	Z+23, r25	; 0x17
    2e68:	86 8b       	std	Z+22, r24	; 0x16
    2e6a:	ca 01       	movw	r24, r20
    2e6c:	74 e0       	ldi	r23, 0x04	; 4
    2e6e:	96 95       	lsr	r25
    2e70:	87 95       	ror	r24
    2e72:	7a 95       	dec	r23
    2e74:	e1 f7       	brne	.-8      	; 0x2e6e <map+0x168>
    2e76:	81 70       	andi	r24, 0x01	; 1
    2e78:	90 70       	andi	r25, 0x00	; 0
    2e7a:	91 8f       	std	Z+25, r25	; 0x19
    2e7c:	80 8f       	std	Z+24, r24	; 0x18
    2e7e:	ca 01       	movw	r24, r20
    2e80:	63 e0       	ldi	r22, 0x03	; 3
    2e82:	96 95       	lsr	r25
    2e84:	87 95       	ror	r24
    2e86:	6a 95       	dec	r22
    2e88:	e1 f7       	brne	.-8      	; 0x2e82 <map+0x17c>
    2e8a:	81 70       	andi	r24, 0x01	; 1
    2e8c:	90 70       	andi	r25, 0x00	; 0
    2e8e:	93 8f       	std	Z+27, r25	; 0x1b
    2e90:	82 8f       	std	Z+26, r24	; 0x1a
    2e92:	ca 01       	movw	r24, r20
    2e94:	96 95       	lsr	r25
    2e96:	87 95       	ror	r24
    2e98:	96 95       	lsr	r25
    2e9a:	87 95       	ror	r24
    2e9c:	81 70       	andi	r24, 0x01	; 1
    2e9e:	90 70       	andi	r25, 0x00	; 0
    2ea0:	95 8f       	std	Z+29, r25	; 0x1d
    2ea2:	84 8f       	std	Z+28, r24	; 0x1c
    2ea4:	ca 01       	movw	r24, r20
    2ea6:	96 95       	lsr	r25
    2ea8:	87 95       	ror	r24
    2eaa:	81 70       	andi	r24, 0x01	; 1
    2eac:	90 70       	andi	r25, 0x00	; 0
    2eae:	97 8f       	std	Z+31, r25	; 0x1f
    2eb0:	86 8f       	std	Z+30, r24	; 0x1e
    2eb2:	41 70       	andi	r20, 0x01	; 1
    2eb4:	50 70       	andi	r21, 0x00	; 0
    2eb6:	51 a3       	std	Z+33, r21	; 0x21
    2eb8:	40 a3       	std	Z+32, r20	; 0x20
    2eba:	11 27       	eor	r17, r17
    2ebc:	07 fd       	sbrc	r16, 7
    2ebe:	10 95       	com	r17
    2ec0:	00 27       	eor	r16, r16
    2ec2:	11 0f       	add	r17, r17
    2ec4:	00 1f       	adc	r16, r16
    2ec6:	11 27       	eor	r17, r17
    2ec8:	13 a3       	std	Z+35, r17	; 0x23
    2eca:	02 a3       	std	Z+34, r16	; 0x22
    2ecc:	cd 01       	movw	r24, r26
    2ece:	16 e0       	ldi	r17, 0x06	; 6
    2ed0:	96 95       	lsr	r25
    2ed2:	87 95       	ror	r24
    2ed4:	1a 95       	dec	r17
    2ed6:	e1 f7       	brne	.-8      	; 0x2ed0 <map+0x1ca>
    2ed8:	81 70       	andi	r24, 0x01	; 1
    2eda:	90 70       	andi	r25, 0x00	; 0
    2edc:	95 a3       	std	Z+37, r25	; 0x25
    2ede:	84 a3       	std	Z+36, r24	; 0x24
    2ee0:	cd 01       	movw	r24, r26
    2ee2:	75 e0       	ldi	r23, 0x05	; 5
    2ee4:	96 95       	lsr	r25
    2ee6:	87 95       	ror	r24
    2ee8:	7a 95       	dec	r23
    2eea:	e1 f7       	brne	.-8      	; 0x2ee4 <map+0x1de>
    2eec:	81 70       	andi	r24, 0x01	; 1
    2eee:	90 70       	andi	r25, 0x00	; 0
    2ef0:	97 a3       	std	Z+39, r25	; 0x27
    2ef2:	86 a3       	std	Z+38, r24	; 0x26
    2ef4:	cd 01       	movw	r24, r26
    2ef6:	64 e0       	ldi	r22, 0x04	; 4
    2ef8:	96 95       	lsr	r25
    2efa:	87 95       	ror	r24
    2efc:	6a 95       	dec	r22
    2efe:	e1 f7       	brne	.-8      	; 0x2ef8 <map+0x1f2>
    2f00:	81 70       	andi	r24, 0x01	; 1
    2f02:	90 70       	andi	r25, 0x00	; 0
    2f04:	91 a7       	std	Z+41, r25	; 0x29
    2f06:	80 a7       	std	Z+40, r24	; 0x28
    2f08:	cd 01       	movw	r24, r26
    2f0a:	53 e0       	ldi	r21, 0x03	; 3
    2f0c:	96 95       	lsr	r25
    2f0e:	87 95       	ror	r24
    2f10:	5a 95       	dec	r21
    2f12:	e1 f7       	brne	.-8      	; 0x2f0c <map+0x206>
    2f14:	81 70       	andi	r24, 0x01	; 1
    2f16:	90 70       	andi	r25, 0x00	; 0
    2f18:	93 a7       	std	Z+43, r25	; 0x2b
    2f1a:	82 a7       	std	Z+42, r24	; 0x2a
    2f1c:	cd 01       	movw	r24, r26
    2f1e:	96 95       	lsr	r25
    2f20:	87 95       	ror	r24
    2f22:	96 95       	lsr	r25
    2f24:	87 95       	ror	r24
    2f26:	81 70       	andi	r24, 0x01	; 1
    2f28:	90 70       	andi	r25, 0x00	; 0
    2f2a:	95 a7       	std	Z+45, r25	; 0x2d
    2f2c:	84 a7       	std	Z+44, r24	; 0x2c
    2f2e:	cd 01       	movw	r24, r26
    2f30:	96 95       	lsr	r25
    2f32:	87 95       	ror	r24
    2f34:	81 70       	andi	r24, 0x01	; 1
    2f36:	90 70       	andi	r25, 0x00	; 0
    2f38:	97 a7       	std	Z+47, r25	; 0x2f
    2f3a:	86 a7       	std	Z+46, r24	; 0x2e
    2f3c:	a1 70       	andi	r26, 0x01	; 1
    2f3e:	b0 70       	andi	r27, 0x00	; 0
    2f40:	b1 ab       	std	Z+49, r27	; 0x31
    2f42:	a0 ab       	std	Z+48, r26	; 0x30
    2f44:	0e 94 21 36 	call	0x6c42	; 0x6c42 <printf>
		printMap(currentOrientation,currentCellWorld,RESET);
    2f48:	ed b7       	in	r30, 0x3d	; 61
    2f4a:	fe b7       	in	r31, 0x3e	; 62
    2f4c:	f2 96       	adiw	r30, 0x32	; 50
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	fe bf       	out	0x3e, r31	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	ed bf       	out	0x3d, r30	; 61
    2f58:	80 91 06 05 	lds	r24, 0x0506
    2f5c:	60 91 08 06 	lds	r22, 0x0608
    2f60:	41 e0       	ldi	r20, 0x01	; 1
    2f62:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(500);//wait 3 seconds
    2f66:	84 ef       	ldi	r24, 0xF4	; 244
    2f68:	91 e0       	ldi	r25, 0x01	; 1
    2f6a:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
{
	// Initialize State
	isMapping = 1;
	
	// Mapping Loop
	while(isMapping)
    2f6e:	80 91 a1 06 	lds	r24, 0x06A1
    2f72:	88 23       	and	r24, r24
    2f74:	09 f0       	breq	.+2      	; 0x2f78 <map+0x272>
    2f76:	d5 ce       	rjmp	.-598    	; 0x2d22 <map+0x1c>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
		printMap(currentOrientation,currentCellWorld,RESET);
		TMRSRVC_delay(500);//wait 3 seconds
	}
	
}
    2f78:	df 91       	pop	r29
    2f7a:	cf 91       	pop	r28
    2f7c:	1f 91       	pop	r17
    2f7e:	0f 91       	pop	r16
    2f80:	ff 90       	pop	r15
    2f82:	ef 90       	pop	r14
    2f84:	08 95       	ret

00002f86 <metric>:
* Input Variables:	none
* Output Return:	none
* Overview:			Moves the robot to the goal
********************************************************************/
void metric (void)
{
    2f86:	1f 93       	push	r17
	// currentCellWorld = 0b0000;
	// currentGoalWorld = 15;
	
	// Make metric map
	wavefrontMake();
    2f88:	0e 94 fb 12 	call	0x25f6	; 0x25f6 <wavefrontMake>
	
	// Initialize State
	isGoal = 0;
    2f8c:	10 92 9d 06 	sts	0x069D, r1
    2f90:	10 e0       	ldi	r17, 0x00	; 0
    2f92:	6b c0       	rjmp	.+214    	; 0x306a <metric+0xe4>
	unsigned char isSiren = 0;
	
	// Metric Loop 
	while(!isGoal){
		
		if(isSiren){
    2f94:	11 23       	and	r17, r17
    2f96:	41 f0       	breq	.+16     	; 0x2fa8 <metric+0x22>
			SPKR_beep(500);
    2f98:	64 ef       	ldi	r22, 0xF4	; 244
    2f9a:	71 e0       	ldi	r23, 0x01	; 1
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <SPKR_beep>
    2fa4:	10 e0       	ldi	r17, 0x00	; 0
    2fa6:	07 c0       	rjmp	.+14     	; 0x2fb6 <metric+0x30>
			isSiren = 0;
		}
		else{
			SPKR_beep(250);
    2fa8:	6a ef       	ldi	r22, 0xFA	; 250
    2faa:	70 e0       	ldi	r23, 0x00	; 0
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	0e 94 2c 1b 	call	0x3658	; 0x3658 <SPKR_beep>
    2fb4:	11 e0       	ldi	r17, 0x01	; 1
			isSiren = 1;
		}
	
		LCD_clear();
    2fb6:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
		
		switch(currentOrientation){
    2fba:	80 91 06 05 	lds	r24, 0x0506
    2fbe:	81 30       	cpi	r24, 0x01	; 1
    2fc0:	51 f0       	breq	.+20     	; 0x2fd6 <metric+0x50>
    2fc2:	81 30       	cpi	r24, 0x01	; 1
    2fc4:	28 f0       	brcs	.+10     	; 0x2fd0 <metric+0x4a>
    2fc6:	82 30       	cpi	r24, 0x02	; 2
    2fc8:	49 f0       	breq	.+18     	; 0x2fdc <metric+0x56>
    2fca:	83 30       	cpi	r24, 0x03	; 3
    2fcc:	71 f4       	brne	.+28     	; 0x2fea <metric+0x64>
    2fce:	09 c0       	rjmp	.+18     	; 0x2fe2 <metric+0x5c>
			case NORTH:
				LCD_printf("CurtOrent:NORTH\n");
    2fd0:	8d ed       	ldi	r24, 0xDD	; 221
    2fd2:	91 e0       	ldi	r25, 0x01	; 1
    2fd4:	08 c0       	rjmp	.+16     	; 0x2fe6 <metric+0x60>
				break;
			case EAST:
				LCD_printf("CurtOrent:EAST\n");
    2fd6:	8d ee       	ldi	r24, 0xED	; 237
    2fd8:	91 e0       	ldi	r25, 0x01	; 1
    2fda:	05 c0       	rjmp	.+10     	; 0x2fe6 <metric+0x60>
				break;
			case SOUTH:
				LCD_printf("CurtOrent:SOUTH\n");
    2fdc:	8c ef       	ldi	r24, 0xFC	; 252
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	02 c0       	rjmp	.+4      	; 0x2fe6 <metric+0x60>
				break;
			case WEST:
				LCD_printf("CurtOrent:WEST\n");
    2fe2:	8c e0       	ldi	r24, 0x0C	; 12
    2fe4:	92 e0       	ldi	r25, 0x02	; 2
    2fe6:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
			default:
				break;
		}
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    2fea:	80 91 08 06 	lds	r24, 0x0608
    2fee:	0e 94 90 12 	call	0x2520	; 0x2520 <fourNeighborSearch>
    2ff2:	80 93 9d 06 	sts	0x069D, r24
		if(isGoal){
    2ff6:	88 23       	and	r24, r24
    2ff8:	e9 f5       	brne	.+122    	; 0x3074 <metric+0xee>
			break;
		}
				
		switch(nextOrientation){
    2ffa:	80 91 07 05 	lds	r24, 0x0507
    2ffe:	81 30       	cpi	r24, 0x01	; 1
    3000:	51 f0       	breq	.+20     	; 0x3016 <metric+0x90>
    3002:	81 30       	cpi	r24, 0x01	; 1
    3004:	28 f0       	brcs	.+10     	; 0x3010 <metric+0x8a>
    3006:	82 30       	cpi	r24, 0x02	; 2
    3008:	49 f0       	breq	.+18     	; 0x301c <metric+0x96>
    300a:	83 30       	cpi	r24, 0x03	; 3
    300c:	71 f4       	brne	.+28     	; 0x302a <metric+0xa4>
    300e:	09 c0       	rjmp	.+18     	; 0x3022 <metric+0x9c>
			case NORTH:
				LCD_printf("NextOrent:NORTH\n");
    3010:	8b e1       	ldi	r24, 0x1B	; 27
    3012:	92 e0       	ldi	r25, 0x02	; 2
    3014:	08 c0       	rjmp	.+16     	; 0x3026 <metric+0xa0>
				break;
			case EAST:
				LCD_printf("NextOrent:EAST\n");
    3016:	8b e2       	ldi	r24, 0x2B	; 43
    3018:	92 e0       	ldi	r25, 0x02	; 2
    301a:	05 c0       	rjmp	.+10     	; 0x3026 <metric+0xa0>
				break;
			case SOUTH:
				LCD_printf("NextOrent:SOUTH\n");
    301c:	8a e3       	ldi	r24, 0x3A	; 58
    301e:	92 e0       	ldi	r25, 0x02	; 2
    3020:	02 c0       	rjmp	.+4      	; 0x3026 <metric+0xa0>
				break;
			case WEST:
				LCD_printf("NextOrent:WEST\n");
    3022:	8a e4       	ldi	r24, 0x4A	; 74
    3024:	92 e0       	ldi	r25, 0x02	; 2
    3026:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
				break;
			default:
				break;
		}
		
		switch(currentMove){
    302a:	80 91 ef 03 	lds	r24, 0x03EF
    302e:	82 30       	cpi	r24, 0x02	; 2
    3030:	51 f0       	breq	.+20     	; 0x3046 <metric+0xc0>
    3032:	83 30       	cpi	r24, 0x03	; 3
    3034:	29 f0       	breq	.+10     	; 0x3040 <metric+0xba>
    3036:	81 30       	cpi	r24, 0x01	; 1
    3038:	51 f4       	brne	.+20     	; 0x304e <metric+0xc8>
			case MOVE_LEFT:
				LCD_printf("CurMOVE:LEFT\n");
    303a:	89 e5       	ldi	r24, 0x59	; 89
    303c:	92 e0       	ldi	r25, 0x02	; 2
    303e:	05 c0       	rjmp	.+10     	; 0x304a <metric+0xc4>
				break;
			case MOVE_RIGHT:
				LCD_printf("CurMOVE:RIGHT\n");
    3040:	86 e6       	ldi	r24, 0x66	; 102
    3042:	92 e0       	ldi	r25, 0x02	; 2
    3044:	02 c0       	rjmp	.+4      	; 0x304a <metric+0xc4>
				break;
			case MOVE_FORWARD:
				LCD_printf("CurMOVE:FORWARD\n");
    3046:	84 e7       	ldi	r24, 0x74	; 116
    3048:	92 e0       	ldi	r25, 0x02	; 2
    304a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
			default:
				break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    304e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <planMetric>
		
		// Act on the move
		moveMap();
    3052:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    3056:	80 91 08 06 	lds	r24, 0x0608
    305a:	60 91 ef 03 	lds	r22, 0x03EF
    305e:	40 91 06 05 	lds	r20, 0x0506
    3062:	0e 94 c3 13 	call	0x2786	; 0x2786 <shiftMap>
    3066:	80 93 08 06 	sts	0x0608, r24
	// Initialize State
	isGoal = 0;
	unsigned char isSiren = 0;
	
	// Metric Loop 
	while(!isGoal){
    306a:	80 91 9d 06 	lds	r24, 0x069D
    306e:	88 23       	and	r24, r24
    3070:	09 f4       	brne	.+2      	; 0x3074 <metric+0xee>
    3072:	90 cf       	rjmp	.-224    	; 0x2f94 <metric+0xe>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
		// TMRSRVC_delay(2000);//wait 1 seconds
	}
	SPKR_beep(0);
    3074:	60 e0       	ldi	r22, 0x00	; 0
    3076:	70 e0       	ldi	r23, 0x00	; 0
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <SPKR_beep>
}
    3080:	1f 91       	pop	r17
    3082:	08 95       	ret

00003084 <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    3084:	1f 93       	push	r17
	// initialize the robot
	initializeRobot();
    3086:	0e 94 45 12 	call	0x248a	; 0x248a <initializeRobot>
	currentOrientation = NORTH;
    308a:	10 92 06 05 	sts	0x0506, r1
	
	// Ask for Goal
	char isDone = 0;
	unsigned char btnHolder = UNPRESSED;
	LCD_clear();
    308e:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
	LCD_printf("      Goal?\n\n\n\n");
    3092:	84 e8       	ldi	r24, 0x84	; 132
    3094:	92 e0       	ldi	r25, 0x02	; 2
    3096:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
	while(!isDone){
		btnHolder = EnterTopoCommand();
    309a:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
		switch(btnHolder){
    309e:	82 30       	cpi	r24, 0x02	; 2
    30a0:	29 f0       	breq	.+10     	; 0x30ac <CBOT_main+0x28>
    30a2:	83 30       	cpi	r24, 0x03	; 3
    30a4:	49 f0       	breq	.+18     	; 0x30b8 <CBOT_main+0x34>
    30a6:	81 30       	cpi	r24, 0x01	; 1
    30a8:	69 f4       	brne	.+26     	; 0x30c4 <CBOT_main+0x40>
    30aa:	02 c0       	rjmp	.+4      	; 0x30b0 <CBOT_main+0x2c>
    30ac:	11 e0       	ldi	r17, 0x01	; 1
    30ae:	0b c0       	rjmp	.+22     	; 0x30c6 <CBOT_main+0x42>
			case MOVE_LEFT:
				currentGoalWorld--;
    30b0:	80 91 77 04 	lds	r24, 0x0477
    30b4:	81 50       	subi	r24, 0x01	; 1
    30b6:	03 c0       	rjmp	.+6      	; 0x30be <CBOT_main+0x3a>
				break;
			case MOVE_FORWARD:
				isDone = 1;
				break;
			case MOVE_RIGHT:
				currentGoalWorld++;
    30b8:	80 91 77 04 	lds	r24, 0x0477
    30bc:	8f 5f       	subi	r24, 0xFF	; 255
				currentGoalWorld = currentGoalWorld&0b1111;
    30be:	8f 70       	andi	r24, 0x0F	; 15
    30c0:	80 93 77 04 	sts	0x0477, r24
    30c4:	10 e0       	ldi	r17, 0x00	; 0
				break;
			default:
				break;
		}
		printMap(currentOrientation,currentGoalWorld,RESET);
    30c6:	80 91 06 05 	lds	r24, 0x0506
    30ca:	60 91 77 04 	lds	r22, 0x0477
    30ce:	41 e0       	ldi	r20, 0x01	; 1
    30d0:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(100);//wait .1 seconds
    30d4:	84 e6       	ldi	r24, 0x64	; 100
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
	// Ask for Goal
	char isDone = 0;
	unsigned char btnHolder = UNPRESSED;
	LCD_clear();
	LCD_printf("      Goal?\n\n\n\n");
	while(!isDone){
    30dc:	11 23       	and	r17, r17
    30de:	e9 f2       	breq	.-70     	; 0x309a <CBOT_main+0x16>
	}
	
	// Ask for starting orentation
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
    30e0:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
	LCD_printf("      Orient?\n\n\n\n");
    30e4:	83 e9       	ldi	r24, 0x93	; 147
    30e6:	92 e0       	ldi	r25, 0x02	; 2
    30e8:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
	while(!isDone){
		btnHolder = EnterTopoCommand();
    30ec:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
		switch(btnHolder){
    30f0:	82 30       	cpi	r24, 0x02	; 2
    30f2:	29 f0       	breq	.+10     	; 0x30fe <CBOT_main+0x7a>
    30f4:	83 30       	cpi	r24, 0x03	; 3
    30f6:	49 f0       	breq	.+18     	; 0x310a <CBOT_main+0x86>
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	69 f4       	brne	.+26     	; 0x3116 <CBOT_main+0x92>
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <CBOT_main+0x7e>
    30fe:	11 e0       	ldi	r17, 0x01	; 1
    3100:	0b c0       	rjmp	.+22     	; 0x3118 <CBOT_main+0x94>
			case MOVE_LEFT:
				// If we move left
				// shift our oriention CCW
				currentOrientation--;
    3102:	80 91 06 05 	lds	r24, 0x0506
    3106:	81 50       	subi	r24, 0x01	; 1
    3108:	03 c0       	rjmp	.+6      	; 0x3110 <CBOT_main+0x8c>
				isDone = 1;
				break;
			case MOVE_RIGHT:
				// If we move right
				// shift our oriention CW
				currentOrientation++;
    310a:	80 91 06 05 	lds	r24, 0x0506
    310e:	8f 5f       	subi	r24, 0xFF	; 255
				currentOrientation = currentOrientation&0b11;
    3110:	83 70       	andi	r24, 0x03	; 3
    3112:	80 93 06 05 	sts	0x0506, r24
    3116:	10 e0       	ldi	r17, 0x00	; 0
				break;
			default:
				break;
		}
		printMap(currentOrientation,currentGoalWorld,RESET);
    3118:	80 91 06 05 	lds	r24, 0x0506
    311c:	60 91 77 04 	lds	r22, 0x0477
    3120:	41 e0       	ldi	r20, 0x01	; 1
    3122:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(100);//wait .1 seconds
    3126:	84 e6       	ldi	r24, 0x64	; 100
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
	// Ask for starting orentation
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
	LCD_printf("      Orient?\n\n\n\n");
	while(!isDone){
    312e:	11 23       	and	r17, r17
    3130:	e9 f2       	breq	.-70     	; 0x30ec <CBOT_main+0x68>
	}
	
	// Ask to start
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
    3132:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
	LCD_printf("      Start?\n\n\n\n");
    3136:	84 ea       	ldi	r24, 0xA4	; 164
    3138:	92 e0       	ldi	r25, 0x02	; 2
    313a:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
	while(!isDone){
		btnHolder = EnterTopoCommand();
    313e:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
		switch(btnHolder){
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	11 f4       	brne	.+4      	; 0x314a <CBOT_main+0xc6>
    3146:	11 e0       	ldi	r17, 0x01	; 1
    3148:	01 c0       	rjmp	.+2      	; 0x314c <CBOT_main+0xc8>
    314a:	10 e0       	ldi	r17, 0x00	; 0
			case MOVE_RIGHT:
				break;
			default:
				break;
		}
		printMap(currentOrientation,currentGoalWorld,RESET);
    314c:	80 91 06 05 	lds	r24, 0x0506
    3150:	60 91 77 04 	lds	r22, 0x0477
    3154:	41 e0       	ldi	r20, 0x01	; 1
    3156:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(100);//wait .1 seconds
    315a:	84 e6       	ldi	r24, 0x64	; 100
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
	// Ask to start
	isDone = 0;
	btnHolder = UNPRESSED;
	LCD_clear();
	LCD_printf("      Start?\n\n\n\n");
	while(!isDone){
    3162:	11 23       	and	r17, r17
    3164:	61 f3       	breq	.-40     	; 0x313e <CBOT_main+0xba>
	
	// Locilize the Robot
	// localize();
	
	// Initialize State
	isLost = 1;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	80 93 9e 06 	sts	0x069E, r24
	oldMove = MOVE_STOP;
    316c:	84 e0       	ldi	r24, 0x04	; 4
    316e:	80 93 f0 03 	sts	0x03F0, r24
    3172:	0c c0       	rjmp	.+24     	; 0x318c <CBOT_main+0x108>
		if(!isLost){
			break;
		}
		
		//Sense Gateway
		checkIR();	
    3174:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
		checkWorld();
    3178:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    317c:	0e 94 b7 14 	call	0x296e	; 0x296e <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    3180:	0e 94 42 14 	call	0x2884	; 0x2884 <localizeGateway>
    3184:	80 93 9e 06 	sts	0x069E, r24
		
		//Act on the Gateway
		moveMap();
    3188:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <moveMap>
	// Initialize State
	isLost = 1;
	oldMove = MOVE_STOP;
	
	// Localization Loop 
	while(isLost)
    318c:	80 91 9e 06 	lds	r24, 0x069E
    3190:	88 23       	and	r24, r24
    3192:	81 f7       	brne	.-32     	; 0x3174 <CBOT_main+0xf0>
		// default:
			// LCD_printf("Whatz2?!");
			// break;
	// }
	
		SPKR_beep(500);	
    3194:	64 ef       	ldi	r22, 0xF4	; 244
    3196:	71 e0       	ldi	r23, 0x01	; 1
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <SPKR_beep>
		// LCD_clear();
		// LCD_printf("LOLZ\nI'm found!");
		// TMRSRVC_delay(3000);//wait 3 seconds
		
		LCD_clear();
    31a0:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
		LCD_printf("      New Map\n\n\n\n");
    31a4:	84 eb       	ldi	r24, 0xB4	; 180
    31a6:	92 e0       	ldi	r25, 0x02	; 2
    31a8:	0e 94 33 36 	call	0x6c66	; 0x6c66 <puts>
		printMap(currentOrientation,currentCellWorld,RESET);
    31ac:	80 91 06 05 	lds	r24, 0x0506
    31b0:	60 91 08 06 	lds	r22, 0x0608
    31b4:	41 e0       	ldi	r20, 0x01	; 1
    31b6:	0e 94 7e 10 	call	0x20fc	; 0x20fc <printMap>
		TMRSRVC_delay(5000);//wait 1 seconds
    31ba:	88 e8       	ldi	r24, 0x88	; 136
    31bc:	93 e1       	ldi	r25, 0x13	; 19
    31be:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
		SPKR_beep(0);
    31c2:	60 e0       	ldi	r22, 0x00	; 0
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 2c 1b 	call	0x3658	; 0x3658 <SPKR_beep>
		
		
	// currentCellWorld = 0;
	isFire = 0;
    31ce:	10 92 9f 06 	sts	0x069F, r1
    31d2:	18 c0       	rjmp	.+48     	; 0x3204 <CBOT_main+0x180>
	
	// Go firefight
	while(!isFire){
		//Sense Gateway
		checkIR();	
    31d4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <checkIR>
		checkWorld();
    31d8:	0e 94 15 08 	call	0x102a	; 0x102a <checkWorld>
		
		isFire = checkFire();
    31dc:	0e 94 80 13 	call	0x2700	; 0x2700 <checkFire>
    31e0:	80 93 9f 06 	sts	0x069F, r24
		if(isFire){
    31e4:	88 23       	and	r24, r24
    31e6:	91 f4       	brne	.+36     	; 0x320c <CBOT_main+0x188>
			break;
		}
		
		// Plan using Map
		planMap();
    31e8:	0e 94 8d 14 	call	0x291a	; 0x291a <planMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    31ec:	80 91 08 06 	lds	r24, 0x0608
    31f0:	60 91 ef 03 	lds	r22, 0x03EF
    31f4:	40 91 06 05 	lds	r20, 0x0506
    31f8:	0e 94 c3 13 	call	0x2786	; 0x2786 <shiftMap>
    31fc:	80 93 08 06 	sts	0x0608, r24
		
		// Act on the Map
		moveMap();
    3200:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <moveMap>
		
	// currentCellWorld = 0;
	isFire = 0;
	
	// Go firefight
	while(!isFire){
    3204:	80 91 9f 06 	lds	r24, 0x069F
    3208:	88 23       	and	r24, r24
    320a:	21 f3       	breq	.-56     	; 0x31d4 <CBOT_main+0x150>
	// LCD_clear();
	// LCD_printf("Fire = %i\n\n\n\n", currentFireCell);
	// TMRSRVC_delay(5000);
	
	// Moves the Robot to the goal
	metric();
    320c:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <metric>
	
		
		// Print that you are at home and the fire cell location
		LCD_clear();
    3210:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
		LCD_printf("LOLZ\nI'm HOME\nFire at Cell: %i\n\n",currentFireCell);
    3214:	00 d0       	rcall	.+0      	; 0x3216 <CBOT_main+0x192>
    3216:	00 d0       	rcall	.+0      	; 0x3218 <CBOT_main+0x194>
    3218:	ed b7       	in	r30, 0x3d	; 61
    321a:	fe b7       	in	r31, 0x3e	; 62
    321c:	31 96       	adiw	r30, 0x01	; 1
    321e:	85 ec       	ldi	r24, 0xC5	; 197
    3220:	92 e0       	ldi	r25, 0x02	; 2
    3222:	ad b7       	in	r26, 0x3d	; 61
    3224:	be b7       	in	r27, 0x3e	; 62
    3226:	12 96       	adiw	r26, 0x02	; 2
    3228:	9c 93       	st	X, r25
    322a:	8e 93       	st	-X, r24
    322c:	11 97       	sbiw	r26, 0x01	; 1
    322e:	80 91 98 06 	lds	r24, 0x0698
    3232:	82 83       	std	Z+2, r24	; 0x02
    3234:	13 82       	std	Z+3, r1	; 0x03
    3236:	0e 94 21 36 	call	0x6c42	; 0x6c42 <printf>
		// Stop when home is reached
		STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    323a:	0f 90       	pop	r0
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	82 e0       	ldi	r24, 0x02	; 2
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <STEPPER_stop>
		// Beep when home is reached
		SPKR_beep(500);
    324a:	64 ef       	ldi	r22, 0xF4	; 244
    324c:	71 e0       	ldi	r23, 0x01	; 1
    324e:	80 e0       	ldi	r24, 0x00	; 0
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	0e 94 2c 1b 	call	0x3658	; 0x3658 <SPKR_beep>
		TMRSRVC_delay(3000);//wait 3 seconds
    3256:	88 eb       	ldi	r24, 0xB8	; 184
    3258:	9b e0       	ldi	r25, 0x0B	; 11
    325a:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
		SPKR_beep(0);
    325e:	60 e0       	ldi	r22, 0x00	; 0
    3260:	70 e0       	ldi	r23, 0x00	; 0
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 2c 1b 	call	0x3658	; 0x3658 <SPKR_beep>
		TMRSRVC_delay(7000);//wait 7 seconds
    326a:	88 e5       	ldi	r24, 0x58	; 88
    326c:	9b e1       	ldi	r25, 0x1B	; 27
    326e:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/

}// end the CBOT_main()
    3272:	1f 91       	pop	r17
    3274:	08 95       	ret

00003276 <ADC_open>:
    3276:	8f e0       	ldi	r24, 0x0F	; 15
    3278:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    327c:	88 23       	and	r24, r24
    327e:	31 f4       	brne	.+12     	; 0x328c <ADC_open+0x16>
    3280:	0e 94 d5 21 	call	0x43aa	; 0x43aa <__ADC_init>
    3284:	8f e0       	ldi	r24, 0x0F	; 15
    3286:	61 e0       	ldi	r22, 0x01	; 1
    3288:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    328c:	8f e0       	ldi	r24, 0x0F	; 15
    328e:	91 e0       	ldi	r25, 0x01	; 1
    3290:	08 95       	ret

00003292 <ADC_sample>:
    3292:	8f e0       	ldi	r24, 0x0F	; 15
    3294:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    3298:	81 30       	cpi	r24, 0x01	; 1
    329a:	19 f0       	breq	.+6      	; 0x32a2 <ADC_sample+0x10>
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	13 c0       	rjmp	.+38     	; 0x32c8 <ADC_sample+0x36>
    32a2:	80 91 7a 00 	lds	r24, 0x007A
    32a6:	80 64       	ori	r24, 0x40	; 64
    32a8:	80 93 7a 00 	sts	0x007A, r24
    32ac:	80 91 7a 00 	lds	r24, 0x007A
    32b0:	86 fd       	sbrc	r24, 6
    32b2:	fc cf       	rjmp	.-8      	; 0x32ac <ADC_sample+0x1a>
    32b4:	30 91 78 00 	lds	r19, 0x0078
    32b8:	20 91 79 00 	lds	r18, 0x0079
    32bc:	92 2f       	mov	r25, r18
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	23 2f       	mov	r18, r19
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	28 2b       	or	r18, r24
    32c6:	39 2b       	or	r19, r25
    32c8:	c9 01       	movw	r24, r18
    32ca:	08 95       	ret

000032cc <ADC_set_channel>:
    32cc:	58 2f       	mov	r21, r24
    32ce:	80 91 f6 02 	lds	r24, 0x02F6
    32d2:	88 30       	cpi	r24, 0x08	; 8
    32d4:	d8 f4       	brcc	.+54     	; 0x330c <ADC_set_channel+0x40>
    32d6:	40 91 7e 00 	lds	r20, 0x007E
    32da:	21 e0       	ldi	r18, 0x01	; 1
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	b9 01       	movw	r22, r18
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <ADC_set_channel+0x1a>
    32e2:	66 0f       	add	r22, r22
    32e4:	77 1f       	adc	r23, r23
    32e6:	8a 95       	dec	r24
    32e8:	e2 f7       	brpl	.-8      	; 0x32e2 <ADC_set_channel+0x16>
    32ea:	cb 01       	movw	r24, r22
    32ec:	80 95       	com	r24
    32ee:	84 23       	and	r24, r20
    32f0:	80 93 7e 00 	sts	0x007E, r24
    32f4:	80 91 7e 00 	lds	r24, 0x007E
    32f8:	05 2e       	mov	r0, r21
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <ADC_set_channel+0x34>
    32fc:	22 0f       	add	r18, r18
    32fe:	33 1f       	adc	r19, r19
    3300:	0a 94       	dec	r0
    3302:	e2 f7       	brpl	.-8      	; 0x32fc <ADC_set_channel+0x30>
    3304:	82 2b       	or	r24, r18
    3306:	80 93 7e 00 	sts	0x007E, r24
    330a:	0d c0       	rjmp	.+26     	; 0x3326 <ADC_set_channel+0x5a>
    330c:	20 91 7e 00 	lds	r18, 0x007E
    3310:	81 e0       	ldi	r24, 0x01	; 1
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	05 2e       	mov	r0, r21
    3316:	02 c0       	rjmp	.+4      	; 0x331c <ADC_set_channel+0x50>
    3318:	88 0f       	add	r24, r24
    331a:	99 1f       	adc	r25, r25
    331c:	0a 94       	dec	r0
    331e:	e2 f7       	brpl	.-8      	; 0x3318 <ADC_set_channel+0x4c>
    3320:	28 2b       	or	r18, r24
    3322:	20 93 7e 00 	sts	0x007E, r18
    3326:	50 93 f6 02 	sts	0x02F6, r21
    332a:	80 91 7c 00 	lds	r24, 0x007C
    332e:	5f 71       	andi	r21, 0x1F	; 31
    3330:	80 7e       	andi	r24, 0xE0	; 224
    3332:	85 2b       	or	r24, r21
    3334:	80 93 7c 00 	sts	0x007C, r24
    3338:	08 95       	ret

0000333a <ADC_set_VREF>:
    333a:	ec e7       	ldi	r30, 0x7C	; 124
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	90 81       	ld	r25, Z
    3340:	82 95       	swap	r24
    3342:	88 0f       	add	r24, r24
    3344:	88 0f       	add	r24, r24
    3346:	80 7c       	andi	r24, 0xC0	; 192
    3348:	9f 73       	andi	r25, 0x3F	; 63
    334a:	98 2b       	or	r25, r24
    334c:	90 83       	st	Z, r25
    334e:	08 95       	ret

00003350 <main>:
    3350:	0e 94 ee 21 	call	0x43dc	; 0x43dc <CBOT_ISR_init>
    3354:	0e 94 e0 21 	call	0x43c0	; 0x43c0 <CBOT_init>
    3358:	0e 94 42 18 	call	0x3084	; 0x3084 <CBOT_main>
    335c:	80 e0       	ldi	r24, 0x00	; 0
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	08 95       	ret

00003362 <LCD_clear>:
    3362:	0f 93       	push	r16
    3364:	1f 93       	push	r17
    3366:	80 e4       	ldi	r24, 0x40	; 64
    3368:	60 e0       	ldi	r22, 0x00	; 0
    336a:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    336e:	00 e0       	ldi	r16, 0x00	; 0
    3370:	80 2f       	mov	r24, r16
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_set_PGC_addr>
    3378:	10 e0       	ldi	r17, 0x00	; 0
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	61 e0       	ldi	r22, 0x01	; 1
    337e:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    3382:	1f 5f       	subi	r17, 0xFF	; 255
    3384:	10 38       	cpi	r17, 0x80	; 128
    3386:	c9 f7       	brne	.-14     	; 0x337a <LCD_clear+0x18>
    3388:	0f 5f       	subi	r16, 0xFF	; 255
    338a:	04 30       	cpi	r16, 0x04	; 4
    338c:	89 f7       	brne	.-30     	; 0x3370 <LCD_clear+0xe>
    338e:	83 e0       	ldi	r24, 0x03	; 3
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <LCD_set_next_PGC>
    3396:	1f 91       	pop	r17
    3398:	0f 91       	pop	r16
    339a:	08 95       	ret

0000339c <LCD_open>:
    339c:	0f 93       	push	r16
    339e:	1f 93       	push	r17
    33a0:	82 e0       	ldi	r24, 0x02	; 2
    33a2:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    33a6:	88 23       	and	r24, r24
    33a8:	11 f4       	brne	.+4      	; 0x33ae <LCD_open+0x12>
    33aa:	82 e0       	ldi	r24, 0x02	; 2
    33ac:	06 c0       	rjmp	.+12     	; 0x33ba <LCD_open+0x1e>
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    33b4:	88 23       	and	r24, r24
    33b6:	19 f4       	brne	.+6      	; 0x33be <LCD_open+0x22>
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	90 e0       	ldi	r25, 0x00	; 0
    33bc:	6d c0       	rjmp	.+218    	; 0x3498 <LCD_open+0xfc>
    33be:	0e 94 56 24 	call	0x48ac	; 0x48ac <__LCD_init>
    33c2:	85 e0       	ldi	r24, 0x05	; 5
    33c4:	61 e0       	ldi	r22, 0x01	; 1
    33c6:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    33ca:	8e ea       	ldi	r24, 0xAE	; 174
    33cc:	60 e0       	ldi	r22, 0x00	; 0
    33ce:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    33d2:	82 ea       	ldi	r24, 0xA2	; 162
    33d4:	60 e0       	ldi	r22, 0x00	; 0
    33d6:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    33da:	80 ea       	ldi	r24, 0xA0	; 160
    33dc:	60 e0       	ldi	r22, 0x00	; 0
    33de:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    33e2:	00 e5       	ldi	r16, 0x50	; 80
    33e4:	13 ec       	ldi	r17, 0xC3	; 195
    33e6:	c8 01       	movw	r24, r16
    33e8:	01 97       	sbiw	r24, 0x01	; 1
    33ea:	f1 f7       	brne	.-4      	; 0x33e8 <LCD_open+0x4c>
    33ec:	80 ec       	ldi	r24, 0xC0	; 192
    33ee:	60 e0       	ldi	r22, 0x00	; 0
    33f0:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    33f4:	8f e2       	ldi	r24, 0x2F	; 47
    33f6:	60 e0       	ldi	r22, 0x00	; 0
    33f8:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    33fc:	81 e8       	ldi	r24, 0x81	; 129
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    3404:	86 e1       	ldi	r24, 0x16	; 22
    3406:	60 e0       	ldi	r22, 0x00	; 0
    3408:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    340c:	82 e2       	ldi	r24, 0x22	; 34
    340e:	60 e0       	ldi	r22, 0x00	; 0
    3410:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    3414:	c8 01       	movw	r24, r16
    3416:	01 97       	sbiw	r24, 0x01	; 1
    3418:	f1 f7       	brne	.-4      	; 0x3416 <LCD_open+0x7a>
    341a:	8f ea       	ldi	r24, 0xAF	; 175
    341c:	60 e0       	ldi	r22, 0x00	; 0
    341e:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    3422:	86 ea       	ldi	r24, 0xA6	; 166
    3424:	60 e0       	ldi	r22, 0x00	; 0
    3426:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    342a:	85 ea       	ldi	r24, 0xA5	; 165
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	90 e0       	ldi	r25, 0x00	; 0
    3436:	28 e8       	ldi	r18, 0x88	; 136
    3438:	33 e1       	ldi	r19, 0x13	; 19
    343a:	f9 01       	movw	r30, r18
    343c:	31 97       	sbiw	r30, 0x01	; 1
    343e:	f1 f7       	brne	.-4      	; 0x343c <LCD_open+0xa0>
    3440:	01 96       	adiw	r24, 0x01	; 1
    3442:	43 e0       	ldi	r20, 0x03	; 3
    3444:	88 3e       	cpi	r24, 0xE8	; 232
    3446:	94 07       	cpc	r25, r20
    3448:	c1 f7       	brne	.-16     	; 0x343a <LCD_open+0x9e>
    344a:	83 eb       	ldi	r24, 0xB3	; 179
    344c:	60 e0       	ldi	r22, 0x00	; 0
    344e:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    3452:	80 e4       	ldi	r24, 0x40	; 64
    3454:	60 e0       	ldi	r22, 0x00	; 0
    3456:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    345a:	83 e0       	ldi	r24, 0x03	; 3
    345c:	60 e0       	ldi	r22, 0x00	; 0
    345e:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_set_PGC_addr>
    3462:	83 e0       	ldi	r24, 0x03	; 3
    3464:	60 e0       	ldi	r22, 0x00	; 0
    3466:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <LCD_set_next_PGC>
    346a:	10 92 f0 06 	sts	0x06F0, r1
    346e:	10 92 f2 06 	sts	0x06F2, r1
    3472:	10 92 f1 06 	sts	0x06F1, r1
    3476:	8d e3       	ldi	r24, 0x3D	; 61
    3478:	93 e0       	ldi	r25, 0x03	; 3
    347a:	90 93 21 07 	sts	0x0721, r25
    347e:	80 93 20 07 	sts	0x0720, r24
    3482:	88 e1       	ldi	r24, 0x18	; 24
    3484:	0e 94 4f 1a 	call	0x349e	; 0x349e <LCD_set_backlight>
    3488:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
    348c:	84 ea       	ldi	r24, 0xA4	; 164
    348e:	60 e0       	ldi	r22, 0x00	; 0
    3490:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    3494:	85 e0       	ldi	r24, 0x05	; 5
    3496:	91 e0       	ldi	r25, 0x01	; 1
    3498:	1f 91       	pop	r17
    349a:	0f 91       	pop	r16
    349c:	08 95       	ret

0000349e <LCD_set_backlight>:
    349e:	1f 93       	push	r17
    34a0:	18 2f       	mov	r17, r24
    34a2:	85 e0       	ldi	r24, 0x05	; 5
    34a4:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    34a8:	81 30       	cpi	r24, 0x01	; 1
    34aa:	c1 f4       	brne	.+48     	; 0x34dc <LCD_set_backlight+0x3e>
    34ac:	87 e0       	ldi	r24, 0x07	; 7
    34ae:	0e 94 cc 1a 	call	0x3598	; 0x3598 <SPI_set_slave_addr>
    34b2:	82 e0       	ldi	r24, 0x02	; 2
    34b4:	6a e0       	ldi	r22, 0x0A	; 10
    34b6:	0e 94 1d 1b 	call	0x363a	; 0x363a <SPI_transmit>
    34ba:	82 e0       	ldi	r24, 0x02	; 2
    34bc:	61 eb       	ldi	r22, 0xB1	; 177
    34be:	0e 94 1d 1b 	call	0x363a	; 0x363a <SPI_transmit>
    34c2:	61 2f       	mov	r22, r17
    34c4:	11 32       	cpi	r17, 0x21	; 33
    34c6:	08 f0       	brcs	.+2      	; 0x34ca <LCD_set_backlight+0x2c>
    34c8:	60 e2       	ldi	r22, 0x20	; 32
    34ca:	82 e0       	ldi	r24, 0x02	; 2
    34cc:	0e 94 1d 1b 	call	0x363a	; 0x363a <SPI_transmit>
    34d0:	89 ee       	ldi	r24, 0xE9	; 233
    34d2:	8a 95       	dec	r24
    34d4:	f1 f7       	brne	.-4      	; 0x34d2 <LCD_set_backlight+0x34>
    34d6:	87 e0       	ldi	r24, 0x07	; 7
    34d8:	0e 94 cc 1a 	call	0x3598	; 0x3598 <SPI_set_slave_addr>
    34dc:	1f 91       	pop	r17
    34de:	08 95       	ret

000034e0 <LCD_set_next_PGC>:
    34e0:	83 70       	andi	r24, 0x03	; 3
    34e2:	6f 77       	andi	r22, 0x7F	; 127
    34e4:	60 93 ee 06 	sts	0x06EE, r22
    34e8:	80 93 ef 06 	sts	0x06EF, r24
    34ec:	08 95       	ret

000034ee <LCD_set_PGC_addr>:
    34ee:	0f 93       	push	r16
    34f0:	1f 93       	push	r17
    34f2:	06 2f       	mov	r16, r22
    34f4:	16 2f       	mov	r17, r22
    34f6:	1f 77       	andi	r17, 0x7F	; 127
    34f8:	83 70       	andi	r24, 0x03	; 3
    34fa:	80 6b       	ori	r24, 0xB0	; 176
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    3502:	12 95       	swap	r17
    3504:	1f 70       	andi	r17, 0x0F	; 15
    3506:	81 2f       	mov	r24, r17
    3508:	80 61       	ori	r24, 0x10	; 16
    350a:	60 e0       	ldi	r22, 0x00	; 0
    350c:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    3510:	80 2f       	mov	r24, r16
    3512:	8f 70       	andi	r24, 0x0F	; 15
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    351a:	1f 91       	pop	r17
    351c:	0f 91       	pop	r16
    351e:	08 95       	ret

00003520 <LCD_write>:
    3520:	0f 93       	push	r16
    3522:	1f 93       	push	r17
    3524:	08 2f       	mov	r16, r24
    3526:	16 2f       	mov	r17, r22
    3528:	85 e0       	ldi	r24, 0x05	; 5
    352a:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    352e:	81 30       	cpi	r24, 0x01	; 1
    3530:	79 f4       	brne	.+30     	; 0x3550 <LCD_write+0x30>
    3532:	11 23       	and	r17, r17
    3534:	19 f0       	breq	.+6      	; 0x353c <LCD_write+0x1c>
    3536:	11 30       	cpi	r17, 0x01	; 1
    3538:	21 f4       	brne	.+8      	; 0x3542 <LCD_write+0x22>
    353a:	02 c0       	rjmp	.+4      	; 0x3540 <LCD_write+0x20>
    353c:	2b 98       	cbi	0x05, 3	; 5
    353e:	01 c0       	rjmp	.+2      	; 0x3542 <LCD_write+0x22>
    3540:	2b 9a       	sbi	0x05, 3	; 5
    3542:	86 e0       	ldi	r24, 0x06	; 6
    3544:	8a 95       	dec	r24
    3546:	f1 f7       	brne	.-4      	; 0x3544 <LCD_write+0x24>
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	60 2f       	mov	r22, r16
    354c:	0e 94 1d 1b 	call	0x363a	; 0x363a <SPI_transmit>
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	08 95       	ret

00003556 <LED_clr_pattern>:
    3556:	1f 93       	push	r17
    3558:	18 2f       	mov	r17, r24
    355a:	86 e0       	ldi	r24, 0x06	; 6
    355c:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    3560:	81 30       	cpi	r24, 0x01	; 1
    3562:	19 f4       	brne	.+6      	; 0x356a <LED_clr_pattern+0x14>
    3564:	81 2f       	mov	r24, r17
    3566:	0e 94 05 25 	call	0x4a0a	; 0x4a0a <__LED_clr_pattern>
    356a:	1f 91       	pop	r17
    356c:	08 95       	ret

0000356e <LED_open>:
    356e:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <__LED_init>
    3572:	86 e0       	ldi	r24, 0x06	; 6
    3574:	61 e0       	ldi	r22, 0x01	; 1
    3576:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    357a:	86 e0       	ldi	r24, 0x06	; 6
    357c:	91 e0       	ldi	r25, 0x01	; 1
    357e:	08 95       	ret

00003580 <LED_set_pattern>:
    3580:	1f 93       	push	r17
    3582:	18 2f       	mov	r17, r24
    3584:	86 e0       	ldi	r24, 0x06	; 6
    3586:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    358a:	81 30       	cpi	r24, 0x01	; 1
    358c:	19 f4       	brne	.+6      	; 0x3594 <LED_set_pattern+0x14>
    358e:	81 2f       	mov	r24, r17
    3590:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__LED_set_pattern>
    3594:	1f 91       	pop	r17
    3596:	08 95       	ret

00003598 <SPI_set_slave_addr>:
    3598:	1f 93       	push	r17
    359a:	18 2f       	mov	r17, r24
    359c:	82 e0       	ldi	r24, 0x02	; 2
    359e:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    35a2:	81 30       	cpi	r24, 0x01	; 1
    35a4:	09 f0       	breq	.+2      	; 0x35a8 <SPI_set_slave_addr+0x10>
    35a6:	47 c0       	rjmp	.+142    	; 0x3636 <SPI_set_slave_addr+0x9e>
    35a8:	91 2f       	mov	r25, r17
    35aa:	97 70       	andi	r25, 0x07	; 7
    35ac:	80 91 f3 06 	lds	r24, 0x06F3
    35b0:	98 17       	cp	r25, r24
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <SPI_set_slave_addr+0x1e>
    35b4:	40 c0       	rjmp	.+128    	; 0x3636 <SPI_set_slave_addr+0x9e>
    35b6:	90 93 f3 06 	sts	0x06F3, r25
    35ba:	85 b1       	in	r24, 0x05	; 5
    35bc:	88 7f       	andi	r24, 0xF8	; 248
    35be:	89 2b       	or	r24, r25
    35c0:	85 b9       	out	0x05, r24	; 5
    35c2:	93 30       	cpi	r25, 0x03	; 3
    35c4:	11 f1       	breq	.+68     	; 0x360a <SPI_set_slave_addr+0x72>
    35c6:	94 30       	cpi	r25, 0x04	; 4
    35c8:	28 f4       	brcc	.+10     	; 0x35d4 <SPI_set_slave_addr+0x3c>
    35ca:	91 30       	cpi	r25, 0x01	; 1
    35cc:	51 f0       	breq	.+20     	; 0x35e2 <SPI_set_slave_addr+0x4a>
    35ce:	92 30       	cpi	r25, 0x02	; 2
    35d0:	90 f4       	brcc	.+36     	; 0x35f6 <SPI_set_slave_addr+0x5e>
    35d2:	0c c0       	rjmp	.+24     	; 0x35ec <SPI_set_slave_addr+0x54>
    35d4:	95 30       	cpi	r25, 0x05	; 5
    35d6:	19 f1       	breq	.+70     	; 0x361e <SPI_set_slave_addr+0x86>
    35d8:	95 30       	cpi	r25, 0x05	; 5
    35da:	e0 f0       	brcs	.+56     	; 0x3614 <SPI_set_slave_addr+0x7c>
    35dc:	96 30       	cpi	r25, 0x06	; 6
    35de:	21 f5       	brne	.+72     	; 0x3628 <SPI_set_slave_addr+0x90>
    35e0:	0f c0       	rjmp	.+30     	; 0x3600 <SPI_set_slave_addr+0x68>
    35e2:	e0 91 d4 03 	lds	r30, 0x03D4
    35e6:	f0 91 d5 03 	lds	r31, 0x03D5
    35ea:	22 c0       	rjmp	.+68     	; 0x3630 <SPI_set_slave_addr+0x98>
    35ec:	e0 91 d2 03 	lds	r30, 0x03D2
    35f0:	f0 91 d3 03 	lds	r31, 0x03D3
    35f4:	1d c0       	rjmp	.+58     	; 0x3630 <SPI_set_slave_addr+0x98>
    35f6:	e0 91 d6 03 	lds	r30, 0x03D6
    35fa:	f0 91 d7 03 	lds	r31, 0x03D7
    35fe:	18 c0       	rjmp	.+48     	; 0x3630 <SPI_set_slave_addr+0x98>
    3600:	e0 91 de 03 	lds	r30, 0x03DE
    3604:	f0 91 df 03 	lds	r31, 0x03DF
    3608:	13 c0       	rjmp	.+38     	; 0x3630 <SPI_set_slave_addr+0x98>
    360a:	e0 91 d8 03 	lds	r30, 0x03D8
    360e:	f0 91 d9 03 	lds	r31, 0x03D9
    3612:	0e c0       	rjmp	.+28     	; 0x3630 <SPI_set_slave_addr+0x98>
    3614:	e0 91 da 03 	lds	r30, 0x03DA
    3618:	f0 91 db 03 	lds	r31, 0x03DB
    361c:	09 c0       	rjmp	.+18     	; 0x3630 <SPI_set_slave_addr+0x98>
    361e:	e0 91 dc 03 	lds	r30, 0x03DC
    3622:	f0 91 dd 03 	lds	r31, 0x03DD
    3626:	04 c0       	rjmp	.+8      	; 0x3630 <SPI_set_slave_addr+0x98>
    3628:	e0 91 e0 03 	lds	r30, 0x03E0
    362c:	f0 91 e1 03 	lds	r31, 0x03E1
    3630:	30 97       	sbiw	r30, 0x00	; 0
    3632:	09 f0       	breq	.+2      	; 0x3636 <SPI_set_slave_addr+0x9e>
    3634:	09 95       	icall
    3636:	1f 91       	pop	r17
    3638:	08 95       	ret

0000363a <SPI_transmit>:
    363a:	1f 93       	push	r17
    363c:	16 2f       	mov	r17, r22
    363e:	0e 94 cc 1a 	call	0x3598	; 0x3598 <SPI_set_slave_addr>
    3642:	82 e0       	ldi	r24, 0x02	; 2
    3644:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    3648:	81 30       	cpi	r24, 0x01	; 1
    364a:	21 f4       	brne	.+8      	; 0x3654 <SPI_transmit+0x1a>
    364c:	1e bd       	out	0x2e, r17	; 46
    364e:	0d b4       	in	r0, 0x2d	; 45
    3650:	07 fe       	sbrs	r0, 7
    3652:	fd cf       	rjmp	.-6      	; 0x364e <SPI_transmit+0x14>
    3654:	1f 91       	pop	r17
    3656:	08 95       	ret

00003658 <SPKR_beep>:
    3658:	9b 01       	movw	r18, r22
    365a:	ac 01       	movw	r20, r24
    365c:	80 91 73 03 	lds	r24, 0x0373
    3660:	88 23       	and	r24, r24
    3662:	81 f0       	breq	.+32     	; 0x3684 <SPKR_beep+0x2c>
    3664:	da 01       	movw	r26, r20
    3666:	c9 01       	movw	r24, r18
    3668:	88 0f       	add	r24, r24
    366a:	99 1f       	adc	r25, r25
    366c:	aa 1f       	adc	r26, r26
    366e:	bb 1f       	adc	r27, r27
    3670:	90 93 7f 03 	sts	0x037F, r25
    3674:	80 93 7e 03 	sts	0x037E, r24
    3678:	21 15       	cp	r18, r1
    367a:	31 05       	cpc	r19, r1
    367c:	41 05       	cpc	r20, r1
    367e:	51 05       	cpc	r21, r1
    3680:	09 f4       	brne	.+2      	; 0x3684 <SPKR_beep+0x2c>
    3682:	5f 98       	cbi	0x0b, 7	; 11
    3684:	08 95       	ret

00003686 <__SPKR_set_up_freq_LUT>:
    3686:	0f 93       	push	r16
    3688:	1f 93       	push	r17
    368a:	cf 93       	push	r28
    368c:	df 93       	push	r29
    368e:	80 e2       	ldi	r24, 0x20	; 32
    3690:	91 e0       	ldi	r25, 0x01	; 1
    3692:	0e 94 02 34 	call	0x6804	; 0x6804 <malloc>
    3696:	9c 01       	movw	r18, r24
    3698:	90 93 81 03 	sts	0x0381, r25
    369c:	80 93 80 03 	sts	0x0380, r24
    36a0:	89 2b       	or	r24, r25
    36a2:	11 f4       	brne	.+4      	; 0x36a8 <__SPKR_set_up_freq_LUT+0x22>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	39 c0       	rjmp	.+114    	; 0x371a <__SPKR_set_up_freq_LUT+0x94>
    36a8:	89 01       	movw	r16, r18
    36aa:	c0 e0       	ldi	r28, 0x00	; 0
    36ac:	d0 e0       	ldi	r29, 0x00	; 0
    36ae:	be 01       	movw	r22, r28
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	0e 94 6a 2d 	call	0x5ad4	; 0x5ad4 <__floatunsisf>
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	40 ea       	ldi	r20, 0xA0	; 160
    36be:	51 e4       	ldi	r21, 0x41	; 65
    36c0:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <__divsf3>
    36c4:	27 ef       	ldi	r18, 0xF7	; 247
    36c6:	35 e7       	ldi	r19, 0x75	; 117
    36c8:	40 e0       	ldi	r20, 0x00	; 0
    36ca:	5f e3       	ldi	r21, 0x3F	; 63
    36cc:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    36d0:	9b 01       	movw	r18, r22
    36d2:	ac 01       	movw	r20, r24
    36d4:	60 e0       	ldi	r22, 0x00	; 0
    36d6:	70 e0       	ldi	r23, 0x00	; 0
    36d8:	80 e2       	ldi	r24, 0x20	; 32
    36da:	91 e4       	ldi	r25, 0x41	; 65
    36dc:	0e 94 bd 2e 	call	0x5d7a	; 0x5d7a <pow>
    36e0:	9b 01       	movw	r18, r22
    36e2:	ac 01       	movw	r20, r24
    36e4:	ca 01       	movw	r24, r20
    36e6:	b9 01       	movw	r22, r18
    36e8:	2d ec       	ldi	r18, 0xCD	; 205
    36ea:	3c ec       	ldi	r19, 0xCC	; 204
    36ec:	42 e8       	ldi	r20, 0x82	; 130
    36ee:	51 e4       	ldi	r21, 0x41	; 65
    36f0:	0e 94 5a 2e 	call	0x5cb4	; 0x5cb4 <__mulsf3>
    36f4:	0e 94 20 2e 	call	0x5c40	; 0x5c40 <lrint>
    36f8:	2a e0       	ldi	r18, 0x0A	; 10
    36fa:	30 e0       	ldi	r19, 0x00	; 0
    36fc:	40 e0       	ldi	r20, 0x00	; 0
    36fe:	50 e0       	ldi	r21, 0x00	; 0
    3700:	0e 94 8a 33 	call	0x6714	; 0x6714 <__mulsi3>
    3704:	f8 01       	movw	r30, r16
    3706:	61 93       	st	Z+, r22
    3708:	71 93       	st	Z+, r23
    370a:	81 93       	st	Z+, r24
    370c:	91 93       	st	Z+, r25
    370e:	8f 01       	movw	r16, r30
    3710:	21 96       	adiw	r28, 0x01	; 1
    3712:	c8 34       	cpi	r28, 0x48	; 72
    3714:	d1 05       	cpc	r29, r1
    3716:	59 f6       	brne	.-106    	; 0x36ae <__SPKR_set_up_freq_LUT+0x28>
    3718:	81 e0       	ldi	r24, 0x01	; 1
    371a:	df 91       	pop	r29
    371c:	cf 91       	pop	r28
    371e:	1f 91       	pop	r17
    3720:	0f 91       	pop	r16
    3722:	08 95       	ret

00003724 <__SPKR_open_beep_mode>:
    3724:	8a e0       	ldi	r24, 0x0A	; 10
    3726:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    372a:	88 23       	and	r24, r24
    372c:	71 f4       	brne	.+28     	; 0x374a <__SPKR_open_beep_mode+0x26>
    372e:	10 92 7d 03 	sts	0x037D, r1
    3732:	10 92 7c 03 	sts	0x037C, r1
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__SPKR_init>
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	80 93 73 03 	sts	0x0373, r24
    3742:	8a e0       	ldi	r24, 0x0A	; 10
    3744:	61 e0       	ldi	r22, 0x01	; 1
    3746:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    374a:	8a e0       	ldi	r24, 0x0A	; 10
    374c:	91 e0       	ldi	r25, 0x01	; 1
    374e:	08 95       	ret

00003750 <__SPKR_open_tone_mode>:
    3750:	1f 93       	push	r17
    3752:	8b e0       	ldi	r24, 0x0B	; 11
    3754:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    3758:	88 23       	and	r24, r24
    375a:	11 f0       	breq	.+4      	; 0x3760 <__SPKR_open_tone_mode+0x10>
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	21 c0       	rjmp	.+66     	; 0x37a2 <__SPKR_open_tone_mode+0x52>
    3760:	89 e0       	ldi	r24, 0x09	; 9
    3762:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    3766:	88 23       	and	r24, r24
    3768:	d9 f4       	brne	.+54     	; 0x37a0 <__SPKR_open_tone_mode+0x50>
    376a:	0e 94 43 1b 	call	0x3686	; 0x3686 <__SPKR_set_up_freq_LUT>
    376e:	18 2f       	mov	r17, r24
    3770:	81 30       	cpi	r24, 0x01	; 1
    3772:	b1 f4       	brne	.+44     	; 0x37a0 <__SPKR_open_tone_mode+0x50>
    3774:	10 92 74 03 	sts	0x0374, r1
    3778:	10 92 75 03 	sts	0x0375, r1
    377c:	10 92 76 03 	sts	0x0376, r1
    3780:	10 92 77 03 	sts	0x0377, r1
    3784:	8d e0       	ldi	r24, 0x0D	; 13
    3786:	6b ec       	ldi	r22, 0xCB	; 203
    3788:	75 e2       	ldi	r23, 0x25	; 37
    378a:	0e 94 2e 24 	call	0x485c	; 0x485c <ISR_attach>
    378e:	82 e0       	ldi	r24, 0x02	; 2
    3790:	0e 94 48 26 	call	0x4c90	; 0x4c90 <__SPKR_init>
    3794:	10 93 72 03 	sts	0x0372, r17
    3798:	89 e0       	ldi	r24, 0x09	; 9
    379a:	61 e0       	ldi	r22, 0x01	; 1
    379c:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    37a0:	91 e0       	ldi	r25, 0x01	; 1
    37a2:	89 e0       	ldi	r24, 0x09	; 9
    37a4:	1f 91       	pop	r17
    37a6:	08 95       	ret

000037a8 <SPKR_open>:
    37a8:	81 30       	cpi	r24, 0x01	; 1
    37aa:	29 f0       	breq	.+10     	; 0x37b6 <SPKR_open+0xe>
    37ac:	82 30       	cpi	r24, 0x02	; 2
    37ae:	31 f0       	breq	.+12     	; 0x37bc <SPKR_open+0x14>
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	89 e0       	ldi	r24, 0x09	; 9
    37b4:	08 95       	ret
    37b6:	0e 94 92 1b 	call	0x3724	; 0x3724 <__SPKR_open_beep_mode>
    37ba:	08 95       	ret
    37bc:	0e 94 a8 1b 	call	0x3750	; 0x3750 <__SPKR_open_tone_mode>
    37c0:	08 95       	ret

000037c2 <STEPPER_get_nSteps>:
    37c2:	80 91 b4 06 	lds	r24, 0x06B4
    37c6:	90 91 b5 06 	lds	r25, 0x06B5
    37ca:	20 91 b6 06 	lds	r18, 0x06B6
    37ce:	30 91 b7 06 	lds	r19, 0x06B7
    37d2:	bc 01       	movw	r22, r24
    37d4:	c9 01       	movw	r24, r18
    37d6:	08 95       	ret

000037d8 <STEPPER_stepmode>:
    37d8:	2f 92       	push	r2
    37da:	3f 92       	push	r3
    37dc:	4f 92       	push	r4
    37de:	5f 92       	push	r5
    37e0:	6f 92       	push	r6
    37e2:	7f 92       	push	r7
    37e4:	8f 92       	push	r8
    37e6:	9f 92       	push	r9
    37e8:	af 92       	push	r10
    37ea:	bf 92       	push	r11
    37ec:	cf 92       	push	r12
    37ee:	df 92       	push	r13
    37f0:	ef 92       	push	r14
    37f2:	ff 92       	push	r15
    37f4:	0f 93       	push	r16
    37f6:	1f 93       	push	r17
    37f8:	df 93       	push	r29
    37fa:	cf 93       	push	r28
    37fc:	cd b7       	in	r28, 0x3d	; 61
    37fe:	de b7       	in	r29, 0x3e	; 62
    3800:	58 2e       	mov	r5, r24
    3802:	96 2e       	mov	r9, r22
    3804:	44 2e       	mov	r4, r20
    3806:	39 01       	movw	r6, r18
    3808:	3c 2c       	mov	r3, r12
    380a:	c9 8c       	ldd	r12, Y+25	; 0x19
    380c:	da 8c       	ldd	r13, Y+26	; 0x1a
    380e:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	68 17       	cp	r22, r24
    3814:	39 f1       	breq	.+78     	; 0x3864 <STEPPER_stepmode+0x8c>
    3816:	68 17       	cp	r22, r24
    3818:	28 f0       	brcs	.+10     	; 0x3824 <STEPPER_stepmode+0x4c>
    381a:	92 e0       	ldi	r25, 0x02	; 2
    381c:	69 17       	cp	r22, r25
    381e:	09 f0       	breq	.+2      	; 0x3822 <STEPPER_stepmode+0x4a>
    3820:	85 c0       	rjmp	.+266    	; 0x392c <STEPPER_stepmode+0x154>
    3822:	49 c0       	rjmp	.+146    	; 0x38b6 <STEPPER_stepmode+0xde>
    3824:	80 e0       	ldi	r24, 0x00	; 0
    3826:	61 e0       	ldi	r22, 0x01	; 1
    3828:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <STEPPER_set_mode>
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	b7 01       	movw	r22, r14
    3830:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <STEPPER_set_accel>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	64 2d       	mov	r22, r4
    3838:	a3 01       	movw	r20, r6
    383a:	98 01       	movw	r18, r16
    383c:	03 2d       	mov	r16, r3
    383e:	ee 24       	eor	r14, r14
    3840:	e3 94       	inc	r14
    3842:	e9 ed       	ldi	r30, 0xD9	; 217
    3844:	ce 2e       	mov	r12, r30
    3846:	e6 e0       	ldi	r30, 0x06	; 6
    3848:	de 2e       	mov	r13, r30
    384a:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <STEPPER_step>
    384e:	55 20       	and	r5, r5
    3850:	09 f0       	breq	.+2      	; 0x3854 <STEPPER_stepmode+0x7c>
    3852:	6c c0       	rjmp	.+216    	; 0x392c <STEPPER_stepmode+0x154>
    3854:	00 d0       	rcall	.+0      	; 0x3856 <STEPPER_stepmode+0x7e>
    3856:	0f 92       	push	r0
    3858:	ed b7       	in	r30, 0x3d	; 61
    385a:	fe b7       	in	r31, 0x3e	; 62
    385c:	11 82       	std	Z+1, r1	; 0x01
    385e:	b3 82       	std	Z+3, r11	; 0x03
    3860:	a2 82       	std	Z+2, r10	; 0x02
    3862:	23 c0       	rjmp	.+70     	; 0x38aa <STEPPER_stepmode+0xd2>
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	61 e0       	ldi	r22, 0x01	; 1
    3868:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <STEPPER_set_mode>
    386c:	81 e0       	ldi	r24, 0x01	; 1
    386e:	b6 01       	movw	r22, r12
    3870:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <STEPPER_set_accel>
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	68 2d       	mov	r22, r8
    3878:	4d 89       	ldd	r20, Y+21	; 0x15
    387a:	5e 89       	ldd	r21, Y+22	; 0x16
    387c:	2f 89       	ldd	r18, Y+23	; 0x17
    387e:	38 8d       	ldd	r19, Y+24	; 0x18
    3880:	02 2d       	mov	r16, r2
    3882:	ee 24       	eor	r14, r14
    3884:	e3 94       	inc	r14
    3886:	79 ed       	ldi	r23, 0xD9	; 217
    3888:	c7 2e       	mov	r12, r23
    388a:	76 e0       	ldi	r23, 0x06	; 6
    388c:	d7 2e       	mov	r13, r23
    388e:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <STEPPER_step>
    3892:	55 20       	and	r5, r5
    3894:	09 f0       	breq	.+2      	; 0x3898 <STEPPER_stepmode+0xc0>
    3896:	4a c0       	rjmp	.+148    	; 0x392c <STEPPER_stepmode+0x154>
    3898:	00 d0       	rcall	.+0      	; 0x389a <STEPPER_stepmode+0xc2>
    389a:	0f 92       	push	r0
    389c:	ed b7       	in	r30, 0x3d	; 61
    389e:	fe b7       	in	r31, 0x3e	; 62
    38a0:	91 82       	std	Z+1, r9	; 0x01
    38a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38a6:	93 83       	std	Z+3, r25	; 0x03
    38a8:	82 83       	std	Z+2, r24	; 0x02
    38aa:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <STEPPER_wait_and_then>
    38ae:	0f 90       	pop	r0
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	3b c0       	rjmp	.+118    	; 0x392c <STEPPER_stepmode+0x154>
    38b6:	82 e0       	ldi	r24, 0x02	; 2
    38b8:	61 e0       	ldi	r22, 0x01	; 1
    38ba:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <STEPPER_set_mode>
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	b7 01       	movw	r22, r14
    38c2:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <STEPPER_set_accel>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	b6 01       	movw	r22, r12
    38ca:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <STEPPER_set_accel>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	64 2d       	mov	r22, r4
    38d2:	a3 01       	movw	r20, r6
    38d4:	98 01       	movw	r18, r16
    38d6:	03 2d       	mov	r16, r3
    38d8:	ee 24       	eor	r14, r14
    38da:	e3 94       	inc	r14
    38dc:	99 ed       	ldi	r25, 0xD9	; 217
    38de:	c9 2e       	mov	r12, r25
    38e0:	96 e0       	ldi	r25, 0x06	; 6
    38e2:	d9 2e       	mov	r13, r25
    38e4:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <STEPPER_step>
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	68 2d       	mov	r22, r8
    38ec:	4d 89       	ldd	r20, Y+21	; 0x15
    38ee:	5e 89       	ldd	r21, Y+22	; 0x16
    38f0:	2f 89       	ldd	r18, Y+23	; 0x17
    38f2:	38 8d       	ldd	r19, Y+24	; 0x18
    38f4:	02 2d       	mov	r16, r2
    38f6:	0e 94 47 1e 	call	0x3c8e	; 0x3c8e <STEPPER_step>
    38fa:	55 20       	and	r5, r5
    38fc:	b9 f4       	brne	.+46     	; 0x392c <STEPPER_stepmode+0x154>
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <STEPPER_stepmode+0x128>
    3900:	00 d0       	rcall	.+0      	; 0x3902 <STEPPER_stepmode+0x12a>
    3902:	0f 92       	push	r0
    3904:	ad b7       	in	r26, 0x3d	; 61
    3906:	be b7       	in	r27, 0x3e	; 62
    3908:	11 96       	adiw	r26, 0x01	; 1
    390a:	ed b7       	in	r30, 0x3d	; 61
    390c:	fe b7       	in	r31, 0x3e	; 62
    390e:	91 82       	std	Z+1, r9	; 0x01
    3910:	fd 01       	movw	r30, r26
    3912:	b2 82       	std	Z+2, r11	; 0x02
    3914:	a1 82       	std	Z+1, r10	; 0x01
    3916:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3918:	9d 8d       	ldd	r25, Y+29	; 0x1d
    391a:	94 83       	std	Z+4, r25	; 0x04
    391c:	83 83       	std	Z+3, r24	; 0x03
    391e:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <STEPPER_wait_and_then>
    3922:	0f 90       	pop	r0
    3924:	0f 90       	pop	r0
    3926:	0f 90       	pop	r0
    3928:	0f 90       	pop	r0
    392a:	0f 90       	pop	r0
    392c:	cf 91       	pop	r28
    392e:	df 91       	pop	r29
    3930:	1f 91       	pop	r17
    3932:	0f 91       	pop	r16
    3934:	ff 90       	pop	r15
    3936:	ef 90       	pop	r14
    3938:	df 90       	pop	r13
    393a:	cf 90       	pop	r12
    393c:	bf 90       	pop	r11
    393e:	af 90       	pop	r10
    3940:	9f 90       	pop	r9
    3942:	8f 90       	pop	r8
    3944:	7f 90       	pop	r7
    3946:	6f 90       	pop	r6
    3948:	5f 90       	pop	r5
    394a:	4f 90       	pop	r4
    394c:	3f 90       	pop	r3
    394e:	2f 90       	pop	r2
    3950:	08 95       	ret

00003952 <STEPPER_move>:
    3952:	6f 92       	push	r6
    3954:	7f 92       	push	r7
    3956:	8f 92       	push	r8
    3958:	9f 92       	push	r9
    395a:	af 92       	push	r10
    395c:	bf 92       	push	r11
    395e:	cf 92       	push	r12
    3960:	df 92       	push	r13
    3962:	ef 92       	push	r14
    3964:	ff 92       	push	r15
    3966:	0f 93       	push	r16
    3968:	1f 93       	push	r17
    396a:	df 93       	push	r29
    396c:	cf 93       	push	r28
    396e:	cd b7       	in	r28, 0x3d	; 61
    3970:	de b7       	in	r29, 0x3e	; 62
    3972:	94 2e       	mov	r9, r20
    3974:	7c 2d       	mov	r23, r12
    3976:	d5 01       	movw	r26, r10
    3978:	49 89       	ldd	r20, Y+17	; 0x11
    397a:	5a 89       	ldd	r21, Y+18	; 0x12
    397c:	ab 88       	ldd	r10, Y+19	; 0x13
    397e:	bc 88       	ldd	r11, Y+20	; 0x14
    3980:	cd 88       	ldd	r12, Y+21	; 0x15
    3982:	de 88       	ldd	r13, Y+22	; 0x16
    3984:	9f 89       	ldd	r25, Y+23	; 0x17
    3986:	81 30       	cpi	r24, 0x01	; 1
    3988:	09 f4       	brne	.+2      	; 0x398c <STEPPER_move+0x3a>
    398a:	57 c0       	rjmp	.+174    	; 0x3a3a <STEPPER_move+0xe8>
    398c:	81 30       	cpi	r24, 0x01	; 1
    398e:	b8 f1       	brcs	.+110    	; 0x39fe <STEPPER_move+0xac>
    3990:	82 30       	cpi	r24, 0x02	; 2
    3992:	09 f0       	breq	.+2      	; 0x3996 <STEPPER_move+0x44>
    3994:	76 c0       	rjmp	.+236    	; 0x3a82 <STEPPER_move+0x130>
    3996:	61 30       	cpi	r22, 0x01	; 1
    3998:	91 f0       	breq	.+36     	; 0x39be <STEPPER_move+0x6c>
    399a:	61 30       	cpi	r22, 0x01	; 1
    399c:	20 f0       	brcs	.+8      	; 0x39a6 <STEPPER_move+0x54>
    399e:	62 30       	cpi	r22, 0x02	; 2
    39a0:	09 f0       	breq	.+2      	; 0x39a4 <STEPPER_move+0x52>
    39a2:	6f c0       	rjmp	.+222    	; 0x3a82 <STEPPER_move+0x130>
    39a4:	15 c0       	rjmp	.+42     	; 0x39d0 <STEPPER_move+0x7e>
    39a6:	80 e0       	ldi	r24, 0x00	; 0
    39a8:	60 e0       	ldi	r22, 0x00	; 0
    39aa:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <STEPPER_set_mode>
    39ae:	80 e0       	ldi	r24, 0x00	; 0
    39b0:	b7 01       	movw	r22, r14
    39b2:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <STEPPER_set_accel>
    39b6:	80 e0       	ldi	r24, 0x00	; 0
    39b8:	69 2d       	mov	r22, r9
    39ba:	a8 01       	movw	r20, r16
    39bc:	1d c0       	rjmp	.+58     	; 0x39f8 <STEPPER_move+0xa6>
    39be:	81 e0       	ldi	r24, 0x01	; 1
    39c0:	60 e0       	ldi	r22, 0x00	; 0
    39c2:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <STEPPER_set_mode>
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	b6 01       	movw	r22, r12
    39ca:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <STEPPER_set_accel>
    39ce:	11 c0       	rjmp	.+34     	; 0x39f2 <STEPPER_move+0xa0>
    39d0:	82 e0       	ldi	r24, 0x02	; 2
    39d2:	60 e0       	ldi	r22, 0x00	; 0
    39d4:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <STEPPER_set_mode>
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	b7 01       	movw	r22, r14
    39dc:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <STEPPER_set_accel>
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	b6 01       	movw	r22, r12
    39e4:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <STEPPER_set_accel>
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	69 2d       	mov	r22, r9
    39ec:	a8 01       	movw	r20, r16
    39ee:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <STEPPER_run>
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	68 2d       	mov	r22, r8
    39f6:	a5 01       	movw	r20, r10
    39f8:	0e 94 a7 1d 	call	0x3b4e	; 0x3b4e <STEPPER_run>
    39fc:	42 c0       	rjmp	.+132    	; 0x3a82 <STEPPER_move+0x130>
    39fe:	ed b7       	in	r30, 0x3d	; 61
    3a00:	fe b7       	in	r31, 0x3e	; 62
    3a02:	39 97       	sbiw	r30, 0x09	; 9
    3a04:	0f b6       	in	r0, 0x3f	; 63
    3a06:	f8 94       	cli
    3a08:	fe bf       	out	0x3e, r31	; 62
    3a0a:	0f be       	out	0x3f, r0	; 63
    3a0c:	ed bf       	out	0x3d, r30	; 61
    3a0e:	6d b6       	in	r6, 0x3d	; 61
    3a10:	7e b6       	in	r7, 0x3e	; 62
    3a12:	08 94       	sec
    3a14:	61 1c       	adc	r6, r1
    3a16:	71 1c       	adc	r7, r1
    3a18:	52 83       	std	Z+2, r21	; 0x02
    3a1a:	41 83       	std	Z+1, r20	; 0x01
    3a1c:	f3 01       	movw	r30, r6
    3a1e:	b3 82       	std	Z+3, r11	; 0x03
    3a20:	a2 82       	std	Z+2, r10	; 0x02
    3a22:	d5 82       	std	Z+5, r13	; 0x05
    3a24:	c4 82       	std	Z+4, r12	; 0x04
    3a26:	96 83       	std	Z+6, r25	; 0x06
    3a28:	88 8d       	ldd	r24, Y+24	; 0x18
    3a2a:	99 8d       	ldd	r25, Y+25	; 0x19
    3a2c:	90 87       	std	Z+8, r25	; 0x08
    3a2e:	87 83       	std	Z+7, r24	; 0x07
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	49 2d       	mov	r20, r9
    3a34:	c7 2e       	mov	r12, r23
    3a36:	5d 01       	movw	r10, r26
    3a38:	1a c0       	rjmp	.+52     	; 0x3a6e <STEPPER_move+0x11c>
    3a3a:	ed b7       	in	r30, 0x3d	; 61
    3a3c:	fe b7       	in	r31, 0x3e	; 62
    3a3e:	39 97       	sbiw	r30, 0x09	; 9
    3a40:	0f b6       	in	r0, 0x3f	; 63
    3a42:	f8 94       	cli
    3a44:	fe bf       	out	0x3e, r31	; 62
    3a46:	0f be       	out	0x3f, r0	; 63
    3a48:	ed bf       	out	0x3d, r30	; 61
    3a4a:	ad b7       	in	r26, 0x3d	; 61
    3a4c:	be b7       	in	r27, 0x3e	; 62
    3a4e:	11 96       	adiw	r26, 0x01	; 1
    3a50:	52 83       	std	Z+2, r21	; 0x02
    3a52:	41 83       	std	Z+1, r20	; 0x01
    3a54:	fd 01       	movw	r30, r26
    3a56:	b3 82       	std	Z+3, r11	; 0x03
    3a58:	a2 82       	std	Z+2, r10	; 0x02
    3a5a:	d5 82       	std	Z+5, r13	; 0x05
    3a5c:	c4 82       	std	Z+4, r12	; 0x04
    3a5e:	96 83       	std	Z+6, r25	; 0x06
    3a60:	10 86       	std	Z+8, r1	; 0x08
    3a62:	17 82       	std	Z+7, r1	; 0x07
    3a64:	81 e0       	ldi	r24, 0x01	; 1
    3a66:	49 2d       	mov	r20, r9
    3a68:	c7 2e       	mov	r12, r23
    3a6a:	aa 24       	eor	r10, r10
    3a6c:	bb 24       	eor	r11, r11
    3a6e:	0e 94 ec 1b 	call	0x37d8	; 0x37d8 <STEPPER_stepmode>
    3a72:	8d b7       	in	r24, 0x3d	; 61
    3a74:	9e b7       	in	r25, 0x3e	; 62
    3a76:	09 96       	adiw	r24, 0x09	; 9
    3a78:	0f b6       	in	r0, 0x3f	; 63
    3a7a:	f8 94       	cli
    3a7c:	9e bf       	out	0x3e, r25	; 62
    3a7e:	0f be       	out	0x3f, r0	; 63
    3a80:	8d bf       	out	0x3d, r24	; 61
    3a82:	cf 91       	pop	r28
    3a84:	df 91       	pop	r29
    3a86:	1f 91       	pop	r17
    3a88:	0f 91       	pop	r16
    3a8a:	ff 90       	pop	r15
    3a8c:	ef 90       	pop	r14
    3a8e:	df 90       	pop	r13
    3a90:	cf 90       	pop	r12
    3a92:	bf 90       	pop	r11
    3a94:	af 90       	pop	r10
    3a96:	9f 90       	pop	r9
    3a98:	8f 90       	pop	r8
    3a9a:	7f 90       	pop	r7
    3a9c:	6f 90       	pop	r6
    3a9e:	08 95       	ret

00003aa0 <STEPPER_open>:
    3aa0:	0e 94 da 26 	call	0x4db4	; 0x4db4 <__STEPPER_init>
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	80 93 d8 06 	sts	0x06D8, r24
    3aaa:	e2 ea       	ldi	r30, 0xA2	; 162
    3aac:	f6 e0       	ldi	r31, 0x06	; 6
    3aae:	11 92       	st	Z+, r1
    3ab0:	11 92       	st	Z+, r1
    3ab2:	11 82       	std	Z+1, r1	; 0x01
    3ab4:	10 82       	st	Z, r1
    3ab6:	32 96       	adiw	r30, 0x02	; 2
    3ab8:	11 82       	std	Z+1, r1	; 0x01
    3aba:	10 82       	st	Z, r1
    3abc:	32 96       	adiw	r30, 0x02	; 2
    3abe:	11 82       	std	Z+1, r1	; 0x01
    3ac0:	10 82       	st	Z, r1
    3ac2:	32 96       	adiw	r30, 0x02	; 2
    3ac4:	11 82       	std	Z+1, r1	; 0x01
    3ac6:	10 82       	st	Z, r1
    3ac8:	32 96       	adiw	r30, 0x02	; 2
    3aca:	11 82       	std	Z+1, r1	; 0x01
    3acc:	10 82       	st	Z, r1
    3ace:	32 96       	adiw	r30, 0x02	; 2
    3ad0:	11 82       	std	Z+1, r1	; 0x01
    3ad2:	10 82       	st	Z, r1
    3ad4:	32 96       	adiw	r30, 0x02	; 2
    3ad6:	11 82       	std	Z+1, r1	; 0x01
    3ad8:	10 82       	st	Z, r1
    3ada:	32 96       	adiw	r30, 0x02	; 2
    3adc:	11 82       	std	Z+1, r1	; 0x01
    3ade:	10 82       	st	Z, r1
    3ae0:	32 96       	adiw	r30, 0x02	; 2
    3ae2:	11 82       	std	Z+1, r1	; 0x01
    3ae4:	10 82       	st	Z, r1
    3ae6:	32 96       	adiw	r30, 0x02	; 2
    3ae8:	11 82       	std	Z+1, r1	; 0x01
    3aea:	10 82       	st	Z, r1
    3aec:	32 96       	adiw	r30, 0x02	; 2
    3aee:	11 82       	std	Z+1, r1	; 0x01
    3af0:	10 82       	st	Z, r1
    3af2:	32 96       	adiw	r30, 0x02	; 2
    3af4:	11 82       	std	Z+1, r1	; 0x01
    3af6:	10 82       	st	Z, r1
    3af8:	36 96       	adiw	r30, 0x06	; 6
    3afa:	11 92       	st	Z+, r1
    3afc:	11 92       	st	Z+, r1
    3afe:	11 92       	st	Z+, r1
    3b00:	10 82       	st	Z, r1
    3b02:	32 96       	adiw	r30, 0x02	; 2
    3b04:	11 92       	st	Z+, r1
    3b06:	11 92       	st	Z+, r1
    3b08:	11 92       	st	Z+, r1
    3b0a:	11 92       	st	Z+, r1
    3b0c:	11 92       	st	Z+, r1
    3b0e:	11 92       	st	Z+, r1
    3b10:	11 92       	st	Z+, r1
    3b12:	11 82       	std	Z+1, r1	; 0x01
    3b14:	10 82       	st	Z, r1
    3b16:	32 96       	adiw	r30, 0x02	; 2
    3b18:	11 82       	std	Z+1, r1	; 0x01
    3b1a:	10 82       	st	Z, r1
    3b1c:	32 96       	adiw	r30, 0x02	; 2
    3b1e:	11 82       	std	Z+1, r1	; 0x01
    3b20:	10 82       	st	Z, r1
    3b22:	32 96       	adiw	r30, 0x02	; 2
    3b24:	11 82       	std	Z+1, r1	; 0x01
    3b26:	10 82       	st	Z, r1
    3b28:	76 97       	sbiw	r30, 0x16	; 22
    3b2a:	11 82       	std	Z+1, r1	; 0x01
    3b2c:	10 82       	st	Z, r1
    3b2e:	32 96       	adiw	r30, 0x02	; 2
    3b30:	11 82       	std	Z+1, r1	; 0x01
    3b32:	10 82       	st	Z, r1
    3b34:	10 92 d7 06 	sts	0x06D7, r1
    3b38:	10 92 d6 06 	sts	0x06D6, r1
    3b3c:	10 92 d8 06 	sts	0x06D8, r1
    3b40:	87 e0       	ldi	r24, 0x07	; 7
    3b42:	61 e0       	ldi	r22, 0x01	; 1
    3b44:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    3b48:	87 e0       	ldi	r24, 0x07	; 7
    3b4a:	91 e0       	ldi	r25, 0x01	; 1
    3b4c:	08 95       	ret

00003b4e <STEPPER_run>:
    3b4e:	ef 92       	push	r14
    3b50:	ff 92       	push	r15
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	18 2f       	mov	r17, r24
    3b58:	06 2f       	mov	r16, r22
    3b5a:	7a 01       	movw	r14, r20
    3b5c:	60 e0       	ldi	r22, 0x00	; 0
    3b5e:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <STEPPER_set_mode>
    3b62:	81 2f       	mov	r24, r17
    3b64:	60 2f       	mov	r22, r16
    3b66:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <STEPPER_set_dir>
    3b6a:	81 2f       	mov	r24, r17
    3b6c:	b7 01       	movw	r22, r14
    3b6e:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <STEPPER_set_speed>
    3b72:	1f 91       	pop	r17
    3b74:	0f 91       	pop	r16
    3b76:	ff 90       	pop	r15
    3b78:	ef 90       	pop	r14
    3b7a:	08 95       	ret

00003b7c <STEPPER_set_accel>:
    3b7c:	48 2f       	mov	r20, r24
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	80 93 d8 06 	sts	0x06D8, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	23 e0       	ldi	r18, 0x03	; 3
    3b88:	69 3e       	cpi	r22, 0xE9	; 233
    3b8a:	72 07       	cpc	r23, r18
    3b8c:	10 f0       	brcs	.+4      	; 0x3b92 <STEPPER_set_accel+0x16>
    3b8e:	88 ee       	ldi	r24, 0xE8	; 232
    3b90:	93 e0       	ldi	r25, 0x03	; 3
    3b92:	41 30       	cpi	r20, 0x01	; 1
    3b94:	71 f0       	breq	.+28     	; 0x3bb2 <STEPPER_set_accel+0x36>
    3b96:	41 30       	cpi	r20, 0x01	; 1
    3b98:	18 f0       	brcs	.+6      	; 0x3ba0 <STEPPER_set_accel+0x24>
    3b9a:	42 30       	cpi	r20, 0x02	; 2
    3b9c:	71 f4       	brne	.+28     	; 0x3bba <STEPPER_set_accel+0x3e>
    3b9e:	05 c0       	rjmp	.+10     	; 0x3baa <STEPPER_set_accel+0x2e>
    3ba0:	90 93 ad 06 	sts	0x06AD, r25
    3ba4:	80 93 ac 06 	sts	0x06AC, r24
    3ba8:	08 c0       	rjmp	.+16     	; 0x3bba <STEPPER_set_accel+0x3e>
    3baa:	90 93 ad 06 	sts	0x06AD, r25
    3bae:	80 93 ac 06 	sts	0x06AC, r24
    3bb2:	90 93 af 06 	sts	0x06AF, r25
    3bb6:	80 93 ae 06 	sts	0x06AE, r24
    3bba:	10 92 d8 06 	sts	0x06D8, r1
    3bbe:	08 95       	ret

00003bc0 <STEPPER_set_dir>:
    3bc0:	98 2f       	mov	r25, r24
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	80 93 d8 06 	sts	0x06D8, r24
    3bc8:	91 30       	cpi	r25, 0x01	; 1
    3bca:	51 f0       	breq	.+20     	; 0x3be0 <STEPPER_set_dir+0x20>
    3bcc:	91 30       	cpi	r25, 0x01	; 1
    3bce:	18 f0       	brcs	.+6      	; 0x3bd6 <STEPPER_set_dir+0x16>
    3bd0:	92 30       	cpi	r25, 0x02	; 2
    3bd2:	41 f4       	brne	.+16     	; 0x3be4 <STEPPER_set_dir+0x24>
    3bd4:	03 c0       	rjmp	.+6      	; 0x3bdc <STEPPER_set_dir+0x1c>
    3bd6:	60 93 c5 06 	sts	0x06C5, r22
    3bda:	04 c0       	rjmp	.+8      	; 0x3be4 <STEPPER_set_dir+0x24>
    3bdc:	60 93 c5 06 	sts	0x06C5, r22
    3be0:	60 93 c6 06 	sts	0x06C6, r22
    3be4:	10 92 d8 06 	sts	0x06D8, r1
    3be8:	08 95       	ret

00003bea <STEPPER_set_mode>:
    3bea:	98 2f       	mov	r25, r24
    3bec:	81 e0       	ldi	r24, 0x01	; 1
    3bee:	80 93 d8 06 	sts	0x06D8, r24
    3bf2:	91 30       	cpi	r25, 0x01	; 1
    3bf4:	51 f0       	breq	.+20     	; 0x3c0a <STEPPER_set_mode+0x20>
    3bf6:	91 30       	cpi	r25, 0x01	; 1
    3bf8:	18 f0       	brcs	.+6      	; 0x3c00 <STEPPER_set_mode+0x16>
    3bfa:	92 30       	cpi	r25, 0x02	; 2
    3bfc:	41 f4       	brne	.+16     	; 0x3c0e <STEPPER_set_mode+0x24>
    3bfe:	03 c0       	rjmp	.+6      	; 0x3c06 <STEPPER_set_mode+0x1c>
    3c00:	60 93 a2 06 	sts	0x06A2, r22
    3c04:	04 c0       	rjmp	.+8      	; 0x3c0e <STEPPER_set_mode+0x24>
    3c06:	60 93 a2 06 	sts	0x06A2, r22
    3c0a:	60 93 a3 06 	sts	0x06A3, r22
    3c0e:	10 92 d8 06 	sts	0x06D8, r1
    3c12:	08 95       	ret

00003c14 <STEPPER_set_speed>:
    3c14:	48 2f       	mov	r20, r24
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	80 93 d8 06 	sts	0x06D8, r24
    3c1c:	cb 01       	movw	r24, r22
    3c1e:	21 e0       	ldi	r18, 0x01	; 1
    3c20:	61 39       	cpi	r22, 0x91	; 145
    3c22:	72 07       	cpc	r23, r18
    3c24:	10 f0       	brcs	.+4      	; 0x3c2a <STEPPER_set_speed+0x16>
    3c26:	80 e9       	ldi	r24, 0x90	; 144
    3c28:	91 e0       	ldi	r25, 0x01	; 1
    3c2a:	41 30       	cpi	r20, 0x01	; 1
    3c2c:	71 f0       	breq	.+28     	; 0x3c4a <STEPPER_set_speed+0x36>
    3c2e:	41 30       	cpi	r20, 0x01	; 1
    3c30:	18 f0       	brcs	.+6      	; 0x3c38 <STEPPER_set_speed+0x24>
    3c32:	42 30       	cpi	r20, 0x02	; 2
    3c34:	71 f4       	brne	.+28     	; 0x3c52 <STEPPER_set_speed+0x3e>
    3c36:	05 c0       	rjmp	.+10     	; 0x3c42 <STEPPER_set_speed+0x2e>
    3c38:	90 93 a5 06 	sts	0x06A5, r25
    3c3c:	80 93 a4 06 	sts	0x06A4, r24
    3c40:	08 c0       	rjmp	.+16     	; 0x3c52 <STEPPER_set_speed+0x3e>
    3c42:	90 93 a5 06 	sts	0x06A5, r25
    3c46:	80 93 a4 06 	sts	0x06A4, r24
    3c4a:	90 93 a7 06 	sts	0x06A7, r25
    3c4e:	80 93 a6 06 	sts	0x06A6, r24
    3c52:	10 92 d8 06 	sts	0x06D8, r1
    3c56:	08 95       	ret

00003c58 <STEPPER_set_steps>:
    3c58:	98 2f       	mov	r25, r24
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	80 93 d8 06 	sts	0x06D8, r24
    3c60:	91 30       	cpi	r25, 0x01	; 1
    3c62:	71 f0       	breq	.+28     	; 0x3c80 <STEPPER_set_steps+0x28>
    3c64:	91 30       	cpi	r25, 0x01	; 1
    3c66:	18 f0       	brcs	.+6      	; 0x3c6e <STEPPER_set_steps+0x16>
    3c68:	92 30       	cpi	r25, 0x02	; 2
    3c6a:	71 f4       	brne	.+28     	; 0x3c88 <STEPPER_set_steps+0x30>
    3c6c:	05 c0       	rjmp	.+10     	; 0x3c78 <STEPPER_set_steps+0x20>
    3c6e:	70 93 b5 06 	sts	0x06B5, r23
    3c72:	60 93 b4 06 	sts	0x06B4, r22
    3c76:	08 c0       	rjmp	.+16     	; 0x3c88 <STEPPER_set_steps+0x30>
    3c78:	70 93 b5 06 	sts	0x06B5, r23
    3c7c:	60 93 b4 06 	sts	0x06B4, r22
    3c80:	70 93 b7 06 	sts	0x06B7, r23
    3c84:	60 93 b6 06 	sts	0x06B6, r22
    3c88:	10 92 d8 06 	sts	0x06D8, r1
    3c8c:	08 95       	ret

00003c8e <STEPPER_step>:
    3c8e:	8f 92       	push	r8
    3c90:	9f 92       	push	r9
    3c92:	af 92       	push	r10
    3c94:	bf 92       	push	r11
    3c96:	cf 92       	push	r12
    3c98:	df 92       	push	r13
    3c9a:	ef 92       	push	r14
    3c9c:	ff 92       	push	r15
    3c9e:	0f 93       	push	r16
    3ca0:	1f 93       	push	r17
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	18 2f       	mov	r17, r24
    3ca8:	f6 2e       	mov	r15, r22
    3caa:	5a 01       	movw	r10, r20
    3cac:	49 01       	movw	r8, r18
    3cae:	e6 01       	movw	r28, r12
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	0e 94 f5 1d 	call	0x3bea	; 0x3bea <STEPPER_set_mode>
    3cb6:	81 2f       	mov	r24, r17
    3cb8:	b5 01       	movw	r22, r10
    3cba:	a4 01       	movw	r20, r8
    3cbc:	0e 94 f9 26 	call	0x4df2	; 0x4df2 <STEPPER_setup_decels>
    3cc0:	81 2f       	mov	r24, r17
    3cc2:	6f 2d       	mov	r22, r15
    3cc4:	0e 94 e0 1d 	call	0x3bc0	; 0x3bc0 <STEPPER_set_dir>
    3cc8:	81 2f       	mov	r24, r17
    3cca:	60 2f       	mov	r22, r16
    3ccc:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <STEPPER_set_stop_mode>
    3cd0:	81 2f       	mov	r24, r17
    3cd2:	b5 01       	movw	r22, r10
    3cd4:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <STEPPER_set_steps>
    3cd8:	c1 14       	cp	r12, r1
    3cda:	d1 04       	cpc	r13, r1
    3cdc:	99 f0       	breq	.+38     	; 0x3d04 <STEPPER_step+0x76>
    3cde:	11 30       	cpi	r17, 0x01	; 1
    3ce0:	49 f0       	breq	.+18     	; 0x3cf4 <STEPPER_step+0x66>
    3ce2:	11 30       	cpi	r17, 0x01	; 1
    3ce4:	18 f0       	brcs	.+6      	; 0x3cec <STEPPER_step+0x5e>
    3ce6:	12 30       	cpi	r17, 0x02	; 2
    3ce8:	69 f4       	brne	.+26     	; 0x3d04 <STEPPER_step+0x76>
    3cea:	06 c0       	rjmp	.+12     	; 0x3cf8 <STEPPER_step+0x6a>
    3cec:	18 82       	st	Y, r1
    3cee:	10 92 d4 06 	sts	0x06D4, r1
    3cf2:	08 c0       	rjmp	.+16     	; 0x3d04 <STEPPER_step+0x76>
    3cf4:	19 82       	std	Y+1, r1	; 0x01
    3cf6:	04 c0       	rjmp	.+8      	; 0x3d00 <STEPPER_step+0x72>
    3cf8:	18 82       	st	Y, r1
    3cfa:	19 82       	std	Y+1, r1	; 0x01
    3cfc:	10 92 d4 06 	sts	0x06D4, r1
    3d00:	10 92 d5 06 	sts	0x06D5, r1
    3d04:	d0 93 d7 06 	sts	0x06D7, r29
    3d08:	c0 93 d6 06 	sts	0x06D6, r28
    3d0c:	ee 20       	and	r14, r14
    3d0e:	b9 f5       	brne	.+110    	; 0x3d7e <STEPPER_step+0xf0>
    3d10:	82 e8       	ldi	r24, 0x82	; 130
    3d12:	93 e0       	ldi	r25, 0x03	; 3
    3d14:	90 93 d7 06 	sts	0x06D7, r25
    3d18:	80 93 d6 06 	sts	0x06D6, r24
    3d1c:	81 2f       	mov	r24, r17
    3d1e:	b4 01       	movw	r22, r8
    3d20:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <STEPPER_set_speed>
    3d24:	81 2f       	mov	r24, r17
    3d26:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <STEPPER_go>
    3d2a:	11 30       	cpi	r17, 0x01	; 1
    3d2c:	71 f0       	breq	.+28     	; 0x3d4a <STEPPER_step+0xbc>
    3d2e:	11 30       	cpi	r17, 0x01	; 1
    3d30:	18 f0       	brcs	.+6      	; 0x3d38 <STEPPER_step+0xaa>
    3d32:	12 30       	cpi	r17, 0x02	; 2
    3d34:	59 f5       	brne	.+86     	; 0x3d8c <STEPPER_step+0xfe>
    3d36:	12 c0       	rjmp	.+36     	; 0x3d5c <STEPPER_step+0xce>
    3d38:	10 92 82 03 	sts	0x0382, r1
    3d3c:	10 92 d4 06 	sts	0x06D4, r1
    3d40:	80 91 82 03 	lds	r24, 0x0382
    3d44:	88 23       	and	r24, r24
    3d46:	e1 f3       	breq	.-8      	; 0x3d40 <STEPPER_step+0xb2>
    3d48:	21 c0       	rjmp	.+66     	; 0x3d8c <STEPPER_step+0xfe>
    3d4a:	10 92 83 03 	sts	0x0383, r1
    3d4e:	10 92 d5 06 	sts	0x06D5, r1
    3d52:	80 91 83 03 	lds	r24, 0x0383
    3d56:	88 23       	and	r24, r24
    3d58:	e1 f3       	breq	.-8      	; 0x3d52 <STEPPER_step+0xc4>
    3d5a:	18 c0       	rjmp	.+48     	; 0x3d8c <STEPPER_step+0xfe>
    3d5c:	10 92 82 03 	sts	0x0382, r1
    3d60:	10 92 83 03 	sts	0x0383, r1
    3d64:	10 92 d4 06 	sts	0x06D4, r1
    3d68:	10 92 d5 06 	sts	0x06D5, r1
    3d6c:	80 91 82 03 	lds	r24, 0x0382
    3d70:	88 23       	and	r24, r24
    3d72:	e1 f3       	breq	.-8      	; 0x3d6c <STEPPER_step+0xde>
    3d74:	80 91 83 03 	lds	r24, 0x0383
    3d78:	88 23       	and	r24, r24
    3d7a:	c1 f3       	breq	.-16     	; 0x3d6c <STEPPER_step+0xde>
    3d7c:	07 c0       	rjmp	.+14     	; 0x3d8c <STEPPER_step+0xfe>
    3d7e:	81 2f       	mov	r24, r17
    3d80:	b4 01       	movw	r22, r8
    3d82:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <STEPPER_set_speed>
    3d86:	81 2f       	mov	r24, r17
    3d88:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <STEPPER_go>
    3d8c:	df 91       	pop	r29
    3d8e:	cf 91       	pop	r28
    3d90:	1f 91       	pop	r17
    3d92:	0f 91       	pop	r16
    3d94:	ff 90       	pop	r15
    3d96:	ef 90       	pop	r14
    3d98:	df 90       	pop	r13
    3d9a:	cf 90       	pop	r12
    3d9c:	bf 90       	pop	r11
    3d9e:	af 90       	pop	r10
    3da0:	9f 90       	pop	r9
    3da2:	8f 90       	pop	r8
    3da4:	08 95       	ret

00003da6 <STEPPER_stop>:
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	18 2f       	mov	r17, r24
    3dac:	06 2f       	mov	r16, r22
    3dae:	66 23       	and	r22, r22
    3db0:	49 f4       	brne	.+18     	; 0x3dc4 <STEPPER_stop+0x1e>
    3db2:	60 e0       	ldi	r22, 0x00	; 0
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <STEPPER_set_speed>
    3dba:	81 2f       	mov	r24, r17
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	70 e0       	ldi	r23, 0x00	; 0
    3dc0:	0e 94 2c 1e 	call	0x3c58	; 0x3c58 <STEPPER_set_steps>
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	80 93 d8 06 	sts	0x06D8, r24
    3dca:	11 30       	cpi	r17, 0x01	; 1
    3dcc:	51 f0       	breq	.+20     	; 0x3de2 <STEPPER_stop+0x3c>
    3dce:	11 30       	cpi	r17, 0x01	; 1
    3dd0:	18 f0       	brcs	.+6      	; 0x3dd8 <STEPPER_stop+0x32>
    3dd2:	12 30       	cpi	r17, 0x02	; 2
    3dd4:	41 f4       	brne	.+16     	; 0x3de6 <STEPPER_stop+0x40>
    3dd6:	03 c0       	rjmp	.+6      	; 0x3dde <STEPPER_stop+0x38>
    3dd8:	00 93 c0 06 	sts	0x06C0, r16
    3ddc:	04 c0       	rjmp	.+8      	; 0x3de6 <STEPPER_stop+0x40>
    3dde:	00 93 c0 06 	sts	0x06C0, r16
    3de2:	00 93 c1 06 	sts	0x06C1, r16
    3de6:	10 92 d8 06 	sts	0x06D8, r1
    3dea:	1f 91       	pop	r17
    3dec:	0f 91       	pop	r16
    3dee:	08 95       	ret

00003df0 <STEPPER_wait_and_then>:
    3df0:	cf 92       	push	r12
    3df2:	df 92       	push	r13
    3df4:	ef 92       	push	r14
    3df6:	ff 92       	push	r15
    3df8:	0f 93       	push	r16
    3dfa:	1f 93       	push	r17
    3dfc:	df 93       	push	r29
    3dfe:	cf 93       	push	r28
    3e00:	cd b7       	in	r28, 0x3d	; 61
    3e02:	de b7       	in	r29, 0x3e	; 62
    3e04:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e06:	81 30       	cpi	r24, 0x01	; 1
    3e08:	61 f0       	breq	.+24     	; 0x3e22 <STEPPER_wait_and_then+0x32>
    3e0a:	81 30       	cpi	r24, 0x01	; 1
    3e0c:	18 f0       	brcs	.+6      	; 0x3e14 <STEPPER_wait_and_then+0x24>
    3e0e:	82 30       	cpi	r24, 0x02	; 2
    3e10:	a1 f5       	brne	.+104    	; 0x3e7a <STEPPER_wait_and_then+0x8a>
    3e12:	11 c0       	rjmp	.+34     	; 0x3e36 <STEPPER_wait_and_then+0x46>
    3e14:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e16:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e18:	80 91 d9 06 	lds	r24, 0x06D9
    3e1c:	88 23       	and	r24, r24
    3e1e:	e1 f3       	breq	.-8      	; 0x3e18 <STEPPER_wait_and_then+0x28>
    3e20:	06 c0       	rjmp	.+12     	; 0x3e2e <STEPPER_wait_and_then+0x3e>
    3e22:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e24:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e26:	80 91 da 06 	lds	r24, 0x06DA
    3e2a:	88 23       	and	r24, r24
    3e2c:	e1 f3       	breq	.-8      	; 0x3e26 <STEPPER_wait_and_then+0x36>
    3e2e:	30 97       	sbiw	r30, 0x00	; 0
    3e30:	21 f1       	breq	.+72     	; 0x3e7a <STEPPER_wait_and_then+0x8a>
    3e32:	09 95       	icall
    3e34:	22 c0       	rjmp	.+68     	; 0x3e7a <STEPPER_wait_and_then+0x8a>
    3e36:	cc 84       	ldd	r12, Y+12	; 0x0c
    3e38:	dd 84       	ldd	r13, Y+13	; 0x0d
    3e3a:	ee 84       	ldd	r14, Y+14	; 0x0e
    3e3c:	ff 84       	ldd	r15, Y+15	; 0x0f
    3e3e:	00 e0       	ldi	r16, 0x00	; 0
    3e40:	10 e0       	ldi	r17, 0x00	; 0
    3e42:	00 23       	and	r16, r16
    3e44:	51 f4       	brne	.+20     	; 0x3e5a <STEPPER_wait_and_then+0x6a>
    3e46:	80 91 d9 06 	lds	r24, 0x06D9
    3e4a:	88 23       	and	r24, r24
    3e4c:	31 f0       	breq	.+12     	; 0x3e5a <STEPPER_wait_and_then+0x6a>
    3e4e:	c1 14       	cp	r12, r1
    3e50:	d1 04       	cpc	r13, r1
    3e52:	11 f0       	breq	.+4      	; 0x3e58 <STEPPER_wait_and_then+0x68>
    3e54:	f6 01       	movw	r30, r12
    3e56:	09 95       	icall
    3e58:	01 e0       	ldi	r16, 0x01	; 1
    3e5a:	11 23       	and	r17, r17
    3e5c:	51 f4       	brne	.+20     	; 0x3e72 <STEPPER_wait_and_then+0x82>
    3e5e:	80 91 da 06 	lds	r24, 0x06DA
    3e62:	88 23       	and	r24, r24
    3e64:	31 f0       	breq	.+12     	; 0x3e72 <STEPPER_wait_and_then+0x82>
    3e66:	e1 14       	cp	r14, r1
    3e68:	f1 04       	cpc	r15, r1
    3e6a:	11 f0       	breq	.+4      	; 0x3e70 <STEPPER_wait_and_then+0x80>
    3e6c:	f7 01       	movw	r30, r14
    3e6e:	09 95       	icall
    3e70:	11 e0       	ldi	r17, 0x01	; 1
    3e72:	00 23       	and	r16, r16
    3e74:	31 f3       	breq	.-52     	; 0x3e42 <STEPPER_wait_and_then+0x52>
    3e76:	11 23       	and	r17, r17
    3e78:	21 f3       	breq	.-56     	; 0x3e42 <STEPPER_wait_and_then+0x52>
    3e7a:	cf 91       	pop	r28
    3e7c:	df 91       	pop	r29
    3e7e:	1f 91       	pop	r17
    3e80:	0f 91       	pop	r16
    3e82:	ff 90       	pop	r15
    3e84:	ef 90       	pop	r14
    3e86:	df 90       	pop	r13
    3e88:	cf 90       	pop	r12
    3e8a:	08 95       	ret

00003e8c <SYS_get_state>:
    3e8c:	e8 2f       	mov	r30, r24
    3e8e:	f0 e0       	ldi	r31, 0x00	; 0
    3e90:	e3 31       	cpi	r30, 0x13	; 19
    3e92:	f1 05       	cpc	r31, r1
    3e94:	40 f4       	brcc	.+16     	; 0x3ea6 <SYS_get_state+0x1a>
    3e96:	e2 5c       	subi	r30, 0xC2	; 194
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	ee 0f       	add	r30, r30
    3e9c:	ff 1f       	adc	r31, r31
    3e9e:	05 90       	lpm	r0, Z+
    3ea0:	f4 91       	lpm	r31, Z+
    3ea2:	e0 2d       	mov	r30, r0
    3ea4:	09 94       	ijmp
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	08 95       	ret
    3eaa:	80 91 db 06 	lds	r24, 0x06DB
    3eae:	08 95       	ret
    3eb0:	80 91 dc 06 	lds	r24, 0x06DC
    3eb4:	08 95       	ret
    3eb6:	80 91 dd 06 	lds	r24, 0x06DD
    3eba:	08 95       	ret
    3ebc:	80 91 de 06 	lds	r24, 0x06DE
    3ec0:	08 95       	ret
    3ec2:	80 91 df 06 	lds	r24, 0x06DF
    3ec6:	08 95       	ret
    3ec8:	80 91 e1 06 	lds	r24, 0x06E1
    3ecc:	08 95       	ret
    3ece:	80 91 e0 06 	lds	r24, 0x06E0
    3ed2:	08 95       	ret
    3ed4:	80 91 e2 06 	lds	r24, 0x06E2
    3ed8:	08 95       	ret
    3eda:	80 91 e3 06 	lds	r24, 0x06E3
    3ede:	08 95       	ret
    3ee0:	80 91 e4 06 	lds	r24, 0x06E4
    3ee4:	08 95       	ret
    3ee6:	80 91 e5 06 	lds	r24, 0x06E5
    3eea:	08 95       	ret
    3eec:	80 91 e6 06 	lds	r24, 0x06E6
    3ef0:	08 95       	ret
    3ef2:	80 91 e7 06 	lds	r24, 0x06E7
    3ef6:	08 95       	ret
    3ef8:	80 91 e8 06 	lds	r24, 0x06E8
    3efc:	08 95       	ret
    3efe:	80 91 e9 06 	lds	r24, 0x06E9
    3f02:	08 95       	ret
    3f04:	80 91 ea 06 	lds	r24, 0x06EA
    3f08:	08 95       	ret
    3f0a:	80 91 eb 06 	lds	r24, 0x06EB
    3f0e:	08 95       	ret
    3f10:	80 91 ec 06 	lds	r24, 0x06EC
    3f14:	08 95       	ret
    3f16:	80 91 ed 06 	lds	r24, 0x06ED
    3f1a:	08 95       	ret

00003f1c <SYS_set_state>:
    3f1c:	e8 2f       	mov	r30, r24
    3f1e:	f0 e0       	ldi	r31, 0x00	; 0
    3f20:	e3 31       	cpi	r30, 0x13	; 19
    3f22:	f1 05       	cpc	r31, r1
    3f24:	08 f0       	brcs	.+2      	; 0x3f28 <SYS_set_state+0xc>
    3f26:	40 c0       	rjmp	.+128    	; 0x3fa8 <SYS_set_state+0x8c>
    3f28:	ef 5a       	subi	r30, 0xAF	; 175
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	ee 0f       	add	r30, r30
    3f2e:	ff 1f       	adc	r31, r31
    3f30:	05 90       	lpm	r0, Z+
    3f32:	f4 91       	lpm	r31, Z+
    3f34:	e0 2d       	mov	r30, r0
    3f36:	09 94       	ijmp
    3f38:	60 93 db 06 	sts	0x06DB, r22
    3f3c:	08 95       	ret
    3f3e:	60 93 dc 06 	sts	0x06DC, r22
    3f42:	08 95       	ret
    3f44:	60 93 dd 06 	sts	0x06DD, r22
    3f48:	08 95       	ret
    3f4a:	60 93 de 06 	sts	0x06DE, r22
    3f4e:	08 95       	ret
    3f50:	60 93 df 06 	sts	0x06DF, r22
    3f54:	08 95       	ret
    3f56:	60 93 e1 06 	sts	0x06E1, r22
    3f5a:	08 95       	ret
    3f5c:	60 93 e0 06 	sts	0x06E0, r22
    3f60:	08 95       	ret
    3f62:	60 93 e2 06 	sts	0x06E2, r22
    3f66:	08 95       	ret
    3f68:	60 93 e3 06 	sts	0x06E3, r22
    3f6c:	08 95       	ret
    3f6e:	60 93 e4 06 	sts	0x06E4, r22
    3f72:	08 95       	ret
    3f74:	60 93 e5 06 	sts	0x06E5, r22
    3f78:	08 95       	ret
    3f7a:	60 93 e6 06 	sts	0x06E6, r22
    3f7e:	08 95       	ret
    3f80:	60 93 e7 06 	sts	0x06E7, r22
    3f84:	08 95       	ret
    3f86:	60 93 e8 06 	sts	0x06E8, r22
    3f8a:	08 95       	ret
    3f8c:	60 93 e9 06 	sts	0x06E9, r22
    3f90:	08 95       	ret
    3f92:	60 93 ea 06 	sts	0x06EA, r22
    3f96:	08 95       	ret
    3f98:	60 93 eb 06 	sts	0x06EB, r22
    3f9c:	08 95       	ret
    3f9e:	60 93 ec 06 	sts	0x06EC, r22
    3fa2:	08 95       	ret
    3fa4:	60 93 eb 06 	sts	0x06EB, r22
    3fa8:	08 95       	ret

00003faa <ATTINY_get_sensors>:
    3faa:	0f 93       	push	r16
    3fac:	1f 93       	push	r17
    3fae:	81 e0       	ldi	r24, 0x01	; 1
    3fb0:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    3fb4:	81 30       	cpi	r24, 0x01	; 1
    3fb6:	11 f0       	breq	.+4      	; 0x3fbc <ATTINY_get_sensors+0x12>
    3fb8:	00 e0       	ldi	r16, 0x00	; 0
    3fba:	24 c0       	rjmp	.+72     	; 0x4004 <ATTINY_get_sensors+0x5a>
    3fbc:	87 e0       	ldi	r24, 0x07	; 7
    3fbe:	0e 94 cc 1a 	call	0x3598	; 0x3598 <SPI_set_slave_addr>
    3fc2:	82 e0       	ldi	r24, 0x02	; 2
    3fc4:	6a e0       	ldi	r22, 0x0A	; 10
    3fc6:	0e 94 1d 1b 	call	0x363a	; 0x363a <SPI_transmit>
    3fca:	82 e0       	ldi	r24, 0x02	; 2
    3fcc:	62 eb       	ldi	r22, 0xB2	; 178
    3fce:	0e 94 1d 1b 	call	0x363a	; 0x363a <SPI_transmit>
    3fd2:	18 ec       	ldi	r17, 0xC8	; 200
    3fd4:	81 2f       	mov	r24, r17
    3fd6:	8a 95       	dec	r24
    3fd8:	f1 f7       	brne	.-4      	; 0x3fd6 <ATTINY_get_sensors+0x2c>
    3fda:	82 e0       	ldi	r24, 0x02	; 2
    3fdc:	60 e0       	ldi	r22, 0x00	; 0
    3fde:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <SPI_receive>
    3fe2:	08 2f       	mov	r16, r24
    3fe4:	81 2f       	mov	r24, r17
    3fe6:	8a 95       	dec	r24
    3fe8:	f1 f7       	brne	.-4      	; 0x3fe6 <ATTINY_get_sensors+0x3c>
    3fea:	82 e0       	ldi	r24, 0x02	; 2
    3fec:	60 e0       	ldi	r22, 0x00	; 0
    3fee:	0e 94 b0 25 	call	0x4b60	; 0x4b60 <SPI_receive>
    3ff2:	1a 95       	dec	r17
    3ff4:	f1 f7       	brne	.-4      	; 0x3ff2 <ATTINY_get_sensors+0x48>
    3ff6:	87 e0       	ldi	r24, 0x07	; 7
    3ff8:	0e 94 cc 1a 	call	0x3598	; 0x3598 <SPI_set_slave_addr>
    3ffc:	88 e8       	ldi	r24, 0x88	; 136
    3ffe:	93 e1       	ldi	r25, 0x13	; 19
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	f1 f7       	brne	.-4      	; 0x4000 <ATTINY_get_sensors+0x56>
    4004:	80 2f       	mov	r24, r16
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    400a:	08 95       	ret

0000400c <ATTINY_get_SW_state>:
    400c:	1f 93       	push	r17
    400e:	cf 93       	push	r28
    4010:	df 93       	push	r29
    4012:	18 2f       	mov	r17, r24
    4014:	80 91 85 03 	lds	r24, 0x0385
    4018:	88 23       	and	r24, r24
    401a:	41 f0       	breq	.+16     	; 0x402c <ATTINY_get_SW_state+0x20>
    401c:	80 91 8f 03 	lds	r24, 0x038F
    4020:	88 23       	and	r24, r24
    4022:	99 f0       	breq	.+38     	; 0x404a <ATTINY_get_SW_state+0x3e>
    4024:	10 92 85 03 	sts	0x0385, r1
    4028:	10 92 8f 03 	sts	0x038F, r1
    402c:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <ATTINY_get_sensors>
    4030:	80 93 84 03 	sts	0x0384, r24
    4034:	89 e8       	ldi	r24, 0x89	; 137
    4036:	93 e0       	ldi	r25, 0x03	; 3
    4038:	61 e0       	ldi	r22, 0x01	; 1
    403a:	40 e0       	ldi	r20, 0x00	; 0
    403c:	22 e3       	ldi	r18, 0x32	; 50
    403e:	30 e0       	ldi	r19, 0x00	; 0
    4040:	0e 94 c4 20 	call	0x4188	; 0x4188 <TMRSRVC_new>
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	80 93 85 03 	sts	0x0385, r24
    404a:	90 91 84 03 	lds	r25, 0x0384
    404e:	a1 2f       	mov	r26, r17
    4050:	b0 e0       	ldi	r27, 0x00	; 0
    4052:	ed 01       	movw	r28, r26
    4054:	c9 5c       	subi	r28, 0xC9	; 201
    4056:	dc 4f       	sbci	r29, 0xFC	; 252
    4058:	88 81       	ld	r24, Y
    405a:	88 23       	and	r24, r24
    405c:	69 f0       	breq	.+26     	; 0x4078 <ATTINY_get_SW_state+0x6c>
    405e:	fd 01       	movw	r30, r26
    4060:	e6 5c       	subi	r30, 0xC6	; 198
    4062:	fc 4f       	sbci	r31, 0xFC	; 252
    4064:	80 81       	ld	r24, Z
    4066:	98 23       	and	r25, r24
    4068:	c1 f0       	breq	.+48     	; 0x409a <ATTINY_get_SW_state+0x8e>
    406a:	fd 01       	movw	r30, r26
    406c:	ea 57       	subi	r30, 0x7A	; 122
    406e:	fc 4f       	sbci	r31, 0xFC	; 252
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	80 83       	st	Z, r24
    4074:	18 82       	st	Y, r1
    4076:	11 c0       	rjmp	.+34     	; 0x409a <ATTINY_get_SW_state+0x8e>
    4078:	fd 01       	movw	r30, r26
    407a:	ea 57       	subi	r30, 0x7A	; 122
    407c:	fc 4f       	sbci	r31, 0xFC	; 252
    407e:	80 81       	ld	r24, Z
    4080:	81 11       	cpse	r24, r1
    4082:	10 82       	st	Z, r1
    4084:	fd 01       	movw	r30, r26
    4086:	e6 5c       	subi	r30, 0xC6	; 198
    4088:	fc 4f       	sbci	r31, 0xFC	; 252
    408a:	80 81       	ld	r24, Z
    408c:	98 23       	and	r25, r24
    408e:	29 f4       	brne	.+10     	; 0x409a <ATTINY_get_SW_state+0x8e>
    4090:	fd 01       	movw	r30, r26
    4092:	e9 5c       	subi	r30, 0xC9	; 201
    4094:	fc 4f       	sbci	r31, 0xFC	; 252
    4096:	81 e0       	ldi	r24, 0x01	; 1
    4098:	80 83       	st	Z, r24
    409a:	aa 57       	subi	r26, 0x7A	; 122
    409c:	bc 4f       	sbci	r27, 0xFC	; 252
    409e:	8c 91       	ld	r24, X
    40a0:	df 91       	pop	r29
    40a2:	cf 91       	pop	r28
    40a4:	1f 91       	pop	r17
    40a6:	08 95       	ret

000040a8 <ATTINY_open>:
    40a8:	82 e0       	ldi	r24, 0x02	; 2
    40aa:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    40ae:	88 23       	and	r24, r24
    40b0:	19 f4       	brne	.+6      	; 0x40b8 <ATTINY_open+0x10>
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	82 e0       	ldi	r24, 0x02	; 2
    40b6:	08 95       	ret
    40b8:	10 92 09 07 	sts	0x0709, r1
    40bc:	10 92 08 07 	sts	0x0708, r1
    40c0:	10 92 0b 07 	sts	0x070B, r1
    40c4:	10 92 0a 07 	sts	0x070A, r1
    40c8:	10 92 0d 07 	sts	0x070D, r1
    40cc:	10 92 0c 07 	sts	0x070C, r1
    40d0:	10 92 0f 07 	sts	0x070F, r1
    40d4:	10 92 0e 07 	sts	0x070E, r1
    40d8:	10 92 11 07 	sts	0x0711, r1
    40dc:	10 92 10 07 	sts	0x0710, r1
    40e0:	80 e9       	ldi	r24, 0x90	; 144
    40e2:	91 e0       	ldi	r25, 0x01	; 1
    40e4:	90 93 f5 06 	sts	0x06F5, r25
    40e8:	80 93 f4 06 	sts	0x06F4, r24
    40ec:	90 93 f7 06 	sts	0x06F7, r25
    40f0:	80 93 f6 06 	sts	0x06F6, r24
    40f4:	90 93 f9 06 	sts	0x06F9, r25
    40f8:	80 93 f8 06 	sts	0x06F8, r24
    40fc:	90 93 fb 06 	sts	0x06FB, r25
    4100:	80 93 fa 06 	sts	0x06FA, r24
    4104:	90 93 fd 06 	sts	0x06FD, r25
    4108:	80 93 fc 06 	sts	0x06FC, r24
    410c:	84 e3       	ldi	r24, 0x34	; 52
    410e:	98 e0       	ldi	r25, 0x08	; 8
    4110:	90 93 ff 06 	sts	0x06FF, r25
    4114:	80 93 fe 06 	sts	0x06FE, r24
    4118:	90 93 01 07 	sts	0x0701, r25
    411c:	80 93 00 07 	sts	0x0700, r24
    4120:	90 93 03 07 	sts	0x0703, r25
    4124:	80 93 02 07 	sts	0x0702, r24
    4128:	90 93 05 07 	sts	0x0705, r25
    412c:	80 93 04 07 	sts	0x0704, r24
    4130:	90 93 07 07 	sts	0x0707, r25
    4134:	80 93 06 07 	sts	0x0706, r24
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	61 e0       	ldi	r22, 0x01	; 1
    413c:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    4140:	91 e0       	ldi	r25, 0x01	; 1
    4142:	81 e0       	ldi	r24, 0x01	; 1
    4144:	08 95       	ret

00004146 <TMRSRVC_delay>:
    4146:	df 93       	push	r29
    4148:	cf 93       	push	r28
    414a:	cd b7       	in	r28, 0x3d	; 61
    414c:	de b7       	in	r29, 0x3e	; 62
    414e:	29 97       	sbiw	r28, 0x09	; 9
    4150:	0f b6       	in	r0, 0x3f	; 63
    4152:	f8 94       	cli
    4154:	de bf       	out	0x3e, r29	; 62
    4156:	0f be       	out	0x3f, r0	; 63
    4158:	cd bf       	out	0x3d, r28	; 61
    415a:	9c 01       	movw	r18, r24
    415c:	ce 01       	movw	r24, r28
    415e:	01 96       	adiw	r24, 0x01	; 1
    4160:	61 e0       	ldi	r22, 0x01	; 1
    4162:	40 e0       	ldi	r20, 0x00	; 0
    4164:	0e 94 c4 20 	call	0x4188	; 0x4188 <TMRSRVC_new>
    4168:	98 2f       	mov	r25, r24
    416a:	88 23       	and	r24, r24
    416c:	19 f4       	brne	.+6      	; 0x4174 <TMRSRVC_delay+0x2e>
    416e:	8f 81       	ldd	r24, Y+7	; 0x07
    4170:	88 23       	and	r24, r24
    4172:	e9 f3       	breq	.-6      	; 0x416e <TMRSRVC_delay+0x28>
    4174:	89 2f       	mov	r24, r25
    4176:	29 96       	adiw	r28, 0x09	; 9
    4178:	0f b6       	in	r0, 0x3f	; 63
    417a:	f8 94       	cli
    417c:	de bf       	out	0x3e, r29	; 62
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	cd bf       	out	0x3d, r28	; 61
    4182:	cf 91       	pop	r28
    4184:	df 91       	pop	r29
    4186:	08 95       	ret

00004188 <TMRSRVC_new>:
    4188:	ef 92       	push	r14
    418a:	ff 92       	push	r15
    418c:	0f 93       	push	r16
    418e:	1f 93       	push	r17
    4190:	cf 93       	push	r28
    4192:	df 93       	push	r29
    4194:	ec 01       	movw	r28, r24
    4196:	f6 2e       	mov	r15, r22
    4198:	e4 2e       	mov	r14, r20
    419a:	89 01       	movw	r16, r18
    419c:	88 e0       	ldi	r24, 0x08	; 8
    419e:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    41a2:	81 30       	cpi	r24, 0x01	; 1
    41a4:	11 f0       	breq	.+4      	; 0x41aa <TMRSRVC_new+0x22>
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	26 c0       	rjmp	.+76     	; 0x41f6 <TMRSRVC_new+0x6e>
    41aa:	84 e0       	ldi	r24, 0x04	; 4
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	0e 94 02 34 	call	0x6804	; 0x6804 <malloc>
    41b2:	fc 01       	movw	r30, r24
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	11 f4       	brne	.+4      	; 0x41bc <TMRSRVC_new+0x34>
    41b8:	82 e0       	ldi	r24, 0x02	; 2
    41ba:	1d c0       	rjmp	.+58     	; 0x41f6 <TMRSRVC_new+0x6e>
    41bc:	f9 82       	std	Y+1, r15	; 0x01
    41be:	f0 fc       	sbrc	r15, 0
    41c0:	1e 82       	std	Y+6, r1	; 0x06
    41c2:	81 e0       	ldi	r24, 0x01	; 1
    41c4:	e8 16       	cp	r14, r24
    41c6:	19 f4       	brne	.+6      	; 0x41ce <TMRSRVC_new+0x46>
    41c8:	89 81       	ldd	r24, Y+1	; 0x01
    41ca:	84 60       	ori	r24, 0x04	; 4
    41cc:	89 83       	std	Y+1, r24	; 0x01
    41ce:	89 81       	ldd	r24, Y+1	; 0x01
    41d0:	88 60       	ori	r24, 0x08	; 8
    41d2:	89 83       	std	Y+1, r24	; 0x01
    41d4:	1b 83       	std	Y+3, r17	; 0x03
    41d6:	0a 83       	std	Y+2, r16	; 0x02
    41d8:	1d 83       	std	Y+5, r17	; 0x05
    41da:	0c 83       	std	Y+4, r16	; 0x04
    41dc:	d1 83       	std	Z+1, r29	; 0x01
    41de:	c0 83       	st	Z, r28
    41e0:	13 82       	std	Z+3, r1	; 0x03
    41e2:	12 82       	std	Z+2, r1	; 0x02
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	80 93 e2 03 	sts	0x03E2, r24
    41ea:	cf 01       	movw	r24, r30
    41ec:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <TMRSRVC_insert>
    41f0:	10 92 e2 03 	sts	0x03E2, r1
    41f4:	80 e0       	ldi	r24, 0x00	; 0
    41f6:	df 91       	pop	r29
    41f8:	cf 91       	pop	r28
    41fa:	1f 91       	pop	r17
    41fc:	0f 91       	pop	r16
    41fe:	ff 90       	pop	r15
    4200:	ef 90       	pop	r14
    4202:	08 95       	ret

00004204 <I2C_MSTR_get>:
    4204:	fc 01       	movw	r30, r24
    4206:	80 91 15 07 	lds	r24, 0x0715
    420a:	81 30       	cpi	r24, 0x01	; 1
    420c:	11 f0       	breq	.+4      	; 0x4212 <I2C_MSTR_get+0xe>
    420e:	85 e0       	ldi	r24, 0x05	; 5
    4210:	08 95       	ret
    4212:	80 91 16 07 	lds	r24, 0x0716
    4216:	81 30       	cpi	r24, 0x01	; 1
    4218:	11 f0       	breq	.+4      	; 0x421e <I2C_MSTR_get+0x1a>
    421a:	8a e0       	ldi	r24, 0x0A	; 10
    421c:	08 95       	ret
    421e:	61 30       	cpi	r22, 0x01	; 1
    4220:	11 f4       	brne	.+4      	; 0x4226 <I2C_MSTR_get+0x22>
    4222:	84 ec       	ldi	r24, 0xC4	; 196
    4224:	01 c0       	rjmp	.+2      	; 0x4228 <I2C_MSTR_get+0x24>
    4226:	84 e8       	ldi	r24, 0x84	; 132
    4228:	80 93 bc 00 	sts	0x00BC, r24
    422c:	80 91 bc 00 	lds	r24, 0x00BC
    4230:	87 ff       	sbrs	r24, 7
    4232:	fc cf       	rjmp	.-8      	; 0x422c <I2C_MSTR_get+0x28>
    4234:	61 30       	cpi	r22, 0x01	; 1
    4236:	31 f4       	brne	.+12     	; 0x4244 <I2C_MSTR_get+0x40>
    4238:	80 91 b9 00 	lds	r24, 0x00B9
    423c:	88 7f       	andi	r24, 0xF8	; 248
    423e:	80 35       	cpi	r24, 0x50	; 80
    4240:	59 f4       	brne	.+22     	; 0x4258 <I2C_MSTR_get+0x54>
    4242:	05 c0       	rjmp	.+10     	; 0x424e <I2C_MSTR_get+0x4a>
    4244:	80 91 b9 00 	lds	r24, 0x00B9
    4248:	88 7f       	andi	r24, 0xF8	; 248
    424a:	88 35       	cpi	r24, 0x58	; 88
    424c:	29 f4       	brne	.+10     	; 0x4258 <I2C_MSTR_get+0x54>
    424e:	80 91 bb 00 	lds	r24, 0x00BB
    4252:	80 83       	st	Z, r24
    4254:	80 e0       	ldi	r24, 0x00	; 0
    4256:	08 95       	ret
    4258:	82 e0       	ldi	r24, 0x02	; 2
    425a:	08 95       	ret

0000425c <I2C_MSTR_send>:
    425c:	98 2f       	mov	r25, r24
    425e:	80 91 15 07 	lds	r24, 0x0715
    4262:	81 30       	cpi	r24, 0x01	; 1
    4264:	11 f0       	breq	.+4      	; 0x426a <I2C_MSTR_send+0xe>
    4266:	85 e0       	ldi	r24, 0x05	; 5
    4268:	08 95       	ret
    426a:	80 91 16 07 	lds	r24, 0x0716
    426e:	81 30       	cpi	r24, 0x01	; 1
    4270:	11 f0       	breq	.+4      	; 0x4276 <I2C_MSTR_send+0x1a>
    4272:	8a e0       	ldi	r24, 0x0A	; 10
    4274:	08 95       	ret
    4276:	90 93 bb 00 	sts	0x00BB, r25
    427a:	84 e8       	ldi	r24, 0x84	; 132
    427c:	80 93 bc 00 	sts	0x00BC, r24
    4280:	80 91 bc 00 	lds	r24, 0x00BC
    4284:	87 ff       	sbrs	r24, 7
    4286:	fc cf       	rjmp	.-8      	; 0x4280 <I2C_MSTR_send+0x24>
    4288:	80 91 b9 00 	lds	r24, 0x00B9
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	88 7f       	andi	r24, 0xF8	; 248
    4290:	90 70       	andi	r25, 0x00	; 0
    4292:	88 32       	cpi	r24, 0x28	; 40
    4294:	91 05       	cpc	r25, r1
    4296:	21 f0       	breq	.+8      	; 0x42a0 <I2C_MSTR_send+0x44>
    4298:	c0 97       	sbiw	r24, 0x30	; 48
    429a:	21 f4       	brne	.+8      	; 0x42a4 <I2C_MSTR_send+0x48>
    429c:	83 e0       	ldi	r24, 0x03	; 3
    429e:	08 95       	ret
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    42a2:	08 95       	ret
    42a4:	8c e0       	ldi	r24, 0x0C	; 12
    42a6:	08 95       	ret

000042a8 <I2C_MSTR_start>:
    42a8:	98 2f       	mov	r25, r24
    42aa:	20 91 15 07 	lds	r18, 0x0715
    42ae:	21 30       	cpi	r18, 0x01	; 1
    42b0:	11 f0       	breq	.+4      	; 0x42b6 <I2C_MSTR_start+0xe>
    42b2:	85 e0       	ldi	r24, 0x05	; 5
    42b4:	08 95       	ret
    42b6:	80 91 17 07 	lds	r24, 0x0717
    42ba:	81 30       	cpi	r24, 0x01	; 1
    42bc:	11 f4       	brne	.+4      	; 0x42c2 <I2C_MSTR_start+0x1a>
    42be:	89 e0       	ldi	r24, 0x09	; 9
    42c0:	08 95       	ret
    42c2:	20 93 16 07 	sts	0x0716, r18
    42c6:	84 ea       	ldi	r24, 0xA4	; 164
    42c8:	80 93 bc 00 	sts	0x00BC, r24
    42cc:	80 91 bc 00 	lds	r24, 0x00BC
    42d0:	87 ff       	sbrs	r24, 7
    42d2:	fc cf       	rjmp	.-8      	; 0x42cc <I2C_MSTR_start+0x24>
    42d4:	80 91 b9 00 	lds	r24, 0x00B9
    42d8:	88 7f       	andi	r24, 0xF8	; 248
    42da:	88 30       	cpi	r24, 0x08	; 8
    42dc:	39 f0       	breq	.+14     	; 0x42ec <I2C_MSTR_start+0x44>
    42de:	80 91 b9 00 	lds	r24, 0x00B9
    42e2:	88 7f       	andi	r24, 0xF8	; 248
    42e4:	80 31       	cpi	r24, 0x10	; 16
    42e6:	11 f0       	breq	.+4      	; 0x42ec <I2C_MSTR_start+0x44>
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	08 95       	ret
    42ec:	61 30       	cpi	r22, 0x01	; 1
    42ee:	19 f4       	brne	.+6      	; 0x42f6 <I2C_MSTR_start+0x4e>
    42f0:	99 0f       	add	r25, r25
    42f2:	91 60       	ori	r25, 0x01	; 1
    42f4:	03 c0       	rjmp	.+6      	; 0x42fc <I2C_MSTR_start+0x54>
    42f6:	66 23       	and	r22, r22
    42f8:	19 f4       	brne	.+6      	; 0x4300 <I2C_MSTR_start+0x58>
    42fa:	99 0f       	add	r25, r25
    42fc:	90 93 bb 00 	sts	0x00BB, r25
    4300:	84 e8       	ldi	r24, 0x84	; 132
    4302:	80 93 bc 00 	sts	0x00BC, r24
    4306:	80 91 bc 00 	lds	r24, 0x00BC
    430a:	87 ff       	sbrs	r24, 7
    430c:	fc cf       	rjmp	.-8      	; 0x4306 <I2C_MSTR_start+0x5e>
    430e:	61 30       	cpi	r22, 0x01	; 1
    4310:	31 f4       	brne	.+12     	; 0x431e <I2C_MSTR_start+0x76>
    4312:	80 91 b9 00 	lds	r24, 0x00B9
    4316:	88 7f       	andi	r24, 0xF8	; 248
    4318:	80 34       	cpi	r24, 0x40	; 64
    431a:	41 f4       	brne	.+16     	; 0x432c <I2C_MSTR_start+0x84>
    431c:	09 c0       	rjmp	.+18     	; 0x4330 <I2C_MSTR_start+0x88>
    431e:	66 23       	and	r22, r22
    4320:	39 f4       	brne	.+14     	; 0x4330 <I2C_MSTR_start+0x88>
    4322:	80 91 b9 00 	lds	r24, 0x00B9
    4326:	88 7f       	andi	r24, 0xF8	; 248
    4328:	88 31       	cpi	r24, 0x18	; 24
    432a:	11 f0       	breq	.+4      	; 0x4330 <I2C_MSTR_start+0x88>
    432c:	82 e0       	ldi	r24, 0x02	; 2
    432e:	08 95       	ret
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	08 95       	ret

00004334 <I2C_MSTR_stop>:
    4334:	80 91 16 07 	lds	r24, 0x0716
    4338:	81 30       	cpi	r24, 0x01	; 1
    433a:	11 f0       	breq	.+4      	; 0x4340 <I2C_MSTR_stop+0xc>
    433c:	8a e0       	ldi	r24, 0x0A	; 10
    433e:	08 95       	ret
    4340:	80 91 18 07 	lds	r24, 0x0718
    4344:	81 30       	cpi	r24, 0x01	; 1
    4346:	29 f4       	brne	.+10     	; 0x4352 <I2C_MSTR_stop+0x1e>
    4348:	85 e9       	ldi	r24, 0x95	; 149
    434a:	80 93 bc 00 	sts	0x00BC, r24
    434e:	80 e0       	ldi	r24, 0x00	; 0
    4350:	08 95       	ret
    4352:	84 e9       	ldi	r24, 0x94	; 148
    4354:	80 93 bc 00 	sts	0x00BC, r24
    4358:	80 e0       	ldi	r24, 0x00	; 0
    435a:	08 95       	ret

0000435c <I2C_open>:
    435c:	82 e1       	ldi	r24, 0x12	; 18
    435e:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    4362:	88 23       	and	r24, r24
    4364:	b1 f4       	brne	.+44     	; 0x4392 <I2C_open+0x36>
    4366:	10 92 15 07 	sts	0x0715, r1
    436a:	10 92 16 07 	sts	0x0716, r1
    436e:	10 92 17 07 	sts	0x0717, r1
    4372:	10 92 18 07 	sts	0x0718, r1
    4376:	10 92 19 07 	sts	0x0719, r1
    437a:	0e 94 f5 27 	call	0x4fea	; 0x4fea <__I2C_init>
    437e:	87 e1       	ldi	r24, 0x17	; 23
    4380:	60 e0       	ldi	r22, 0x00	; 0
    4382:	0e 94 cc 21 	call	0x4398	; 0x4398 <I2C_set_BRG>
    4386:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <I2C_enable>
    438a:	82 e1       	ldi	r24, 0x12	; 18
    438c:	61 e0       	ldi	r22, 0x01	; 1
    438e:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    4392:	82 e1       	ldi	r24, 0x12	; 18
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	08 95       	ret

00004398 <I2C_set_BRG>:
    4398:	63 70       	andi	r22, 0x03	; 3
    439a:	60 93 b9 00 	sts	0x00B9, r22
    439e:	80 93 b8 00 	sts	0x00B8, r24
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	80 93 15 07 	sts	0x0715, r24
    43a8:	08 95       	ret

000043aa <__ADC_init>:
    43aa:	8f e1       	ldi	r24, 0x1F	; 31
    43ac:	80 93 7c 00 	sts	0x007C, r24
    43b0:	ea e7       	ldi	r30, 0x7A	; 122
    43b2:	f0 e0       	ldi	r31, 0x00	; 0
    43b4:	87 e0       	ldi	r24, 0x07	; 7
    43b6:	80 83       	st	Z, r24
    43b8:	80 81       	ld	r24, Z
    43ba:	80 68       	ori	r24, 0x80	; 128
    43bc:	80 83       	st	Z, r24
    43be:	08 95       	ret

000043c0 <CBOT_init>:
    43c0:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <SYS_init>
    43c4:	0e 94 12 25 	call	0x4a24	; 0x4a24 <ATMEGA_open>
    43c8:	0e 94 42 24 	call	0x4884	; 0x4884 <ISR_open>
    43cc:	0e 94 c2 27 	call	0x4f84	; 0x4f84 <TMRSRVC_open>
    43d0:	0e 94 77 25 	call	0x4aee	; 0x4aee <SPI_open>
    43d4:	0e 94 54 20 	call	0x40a8	; 0x40a8 <ATTINY_open>
    43d8:	78 94       	sei
    43da:	08 95       	ret

000043dc <CBOT_ISR_init>:
    43dc:	00 00       	nop
    43de:	08 95       	ret

000043e0 <__vector_16>:
    43e0:	1f 92       	push	r1
    43e2:	0f 92       	push	r0
    43e4:	0f b6       	in	r0, 0x3f	; 63
    43e6:	0f 92       	push	r0
    43e8:	11 24       	eor	r1, r1
    43ea:	2f 93       	push	r18
    43ec:	3f 93       	push	r19
    43ee:	4f 93       	push	r20
    43f0:	5f 93       	push	r21
    43f2:	6f 93       	push	r22
    43f4:	7f 93       	push	r23
    43f6:	8f 93       	push	r24
    43f8:	9f 93       	push	r25
    43fa:	af 93       	push	r26
    43fc:	bf 93       	push	r27
    43fe:	ef 93       	push	r30
    4400:	ff 93       	push	r31
    4402:	e0 91 b2 03 	lds	r30, 0x03B2
    4406:	f0 91 b3 03 	lds	r31, 0x03B3
    440a:	30 97       	sbiw	r30, 0x00	; 0
    440c:	09 f0       	breq	.+2      	; 0x4410 <__vector_16+0x30>
    440e:	09 95       	icall
    4410:	ff 91       	pop	r31
    4412:	ef 91       	pop	r30
    4414:	bf 91       	pop	r27
    4416:	af 91       	pop	r26
    4418:	9f 91       	pop	r25
    441a:	8f 91       	pop	r24
    441c:	7f 91       	pop	r23
    441e:	6f 91       	pop	r22
    4420:	5f 91       	pop	r21
    4422:	4f 91       	pop	r20
    4424:	3f 91       	pop	r19
    4426:	2f 91       	pop	r18
    4428:	0f 90       	pop	r0
    442a:	0f be       	out	0x3f, r0	; 63
    442c:	0f 90       	pop	r0
    442e:	1f 90       	pop	r1
    4430:	18 95       	reti

00004432 <__vector_17>:
    4432:	1f 92       	push	r1
    4434:	0f 92       	push	r0
    4436:	0f b6       	in	r0, 0x3f	; 63
    4438:	0f 92       	push	r0
    443a:	11 24       	eor	r1, r1
    443c:	2f 93       	push	r18
    443e:	3f 93       	push	r19
    4440:	4f 93       	push	r20
    4442:	5f 93       	push	r21
    4444:	6f 93       	push	r22
    4446:	7f 93       	push	r23
    4448:	8f 93       	push	r24
    444a:	9f 93       	push	r25
    444c:	af 93       	push	r26
    444e:	bf 93       	push	r27
    4450:	ef 93       	push	r30
    4452:	ff 93       	push	r31
    4454:	e0 91 b4 03 	lds	r30, 0x03B4
    4458:	f0 91 b5 03 	lds	r31, 0x03B5
    445c:	30 97       	sbiw	r30, 0x00	; 0
    445e:	09 f0       	breq	.+2      	; 0x4462 <__vector_17+0x30>
    4460:	09 95       	icall
    4462:	ff 91       	pop	r31
    4464:	ef 91       	pop	r30
    4466:	bf 91       	pop	r27
    4468:	af 91       	pop	r26
    446a:	9f 91       	pop	r25
    446c:	8f 91       	pop	r24
    446e:	7f 91       	pop	r23
    4470:	6f 91       	pop	r22
    4472:	5f 91       	pop	r21
    4474:	4f 91       	pop	r20
    4476:	3f 91       	pop	r19
    4478:	2f 91       	pop	r18
    447a:	0f 90       	pop	r0
    447c:	0f be       	out	0x3f, r0	; 63
    447e:	0f 90       	pop	r0
    4480:	1f 90       	pop	r1
    4482:	18 95       	reti

00004484 <__vector_18>:
    4484:	1f 92       	push	r1
    4486:	0f 92       	push	r0
    4488:	0f b6       	in	r0, 0x3f	; 63
    448a:	0f 92       	push	r0
    448c:	11 24       	eor	r1, r1
    448e:	2f 93       	push	r18
    4490:	3f 93       	push	r19
    4492:	4f 93       	push	r20
    4494:	5f 93       	push	r21
    4496:	6f 93       	push	r22
    4498:	7f 93       	push	r23
    449a:	8f 93       	push	r24
    449c:	9f 93       	push	r25
    449e:	af 93       	push	r26
    44a0:	bf 93       	push	r27
    44a2:	ef 93       	push	r30
    44a4:	ff 93       	push	r31
    44a6:	e0 91 b6 03 	lds	r30, 0x03B6
    44aa:	f0 91 b7 03 	lds	r31, 0x03B7
    44ae:	30 97       	sbiw	r30, 0x00	; 0
    44b0:	09 f0       	breq	.+2      	; 0x44b4 <__vector_18+0x30>
    44b2:	09 95       	icall
    44b4:	ff 91       	pop	r31
    44b6:	ef 91       	pop	r30
    44b8:	bf 91       	pop	r27
    44ba:	af 91       	pop	r26
    44bc:	9f 91       	pop	r25
    44be:	8f 91       	pop	r24
    44c0:	7f 91       	pop	r23
    44c2:	6f 91       	pop	r22
    44c4:	5f 91       	pop	r21
    44c6:	4f 91       	pop	r20
    44c8:	3f 91       	pop	r19
    44ca:	2f 91       	pop	r18
    44cc:	0f 90       	pop	r0
    44ce:	0f be       	out	0x3f, r0	; 63
    44d0:	0f 90       	pop	r0
    44d2:	1f 90       	pop	r1
    44d4:	18 95       	reti

000044d6 <__vector_9>:
    44d6:	1f 92       	push	r1
    44d8:	0f 92       	push	r0
    44da:	0f b6       	in	r0, 0x3f	; 63
    44dc:	0f 92       	push	r0
    44de:	11 24       	eor	r1, r1
    44e0:	2f 93       	push	r18
    44e2:	3f 93       	push	r19
    44e4:	4f 93       	push	r20
    44e6:	5f 93       	push	r21
    44e8:	6f 93       	push	r22
    44ea:	7f 93       	push	r23
    44ec:	8f 93       	push	r24
    44ee:	9f 93       	push	r25
    44f0:	af 93       	push	r26
    44f2:	bf 93       	push	r27
    44f4:	ef 93       	push	r30
    44f6:	ff 93       	push	r31
    44f8:	e0 91 a4 03 	lds	r30, 0x03A4
    44fc:	f0 91 a5 03 	lds	r31, 0x03A5
    4500:	30 97       	sbiw	r30, 0x00	; 0
    4502:	09 f0       	breq	.+2      	; 0x4506 <__vector_9+0x30>
    4504:	09 95       	icall
    4506:	ff 91       	pop	r31
    4508:	ef 91       	pop	r30
    450a:	bf 91       	pop	r27
    450c:	af 91       	pop	r26
    450e:	9f 91       	pop	r25
    4510:	8f 91       	pop	r24
    4512:	7f 91       	pop	r23
    4514:	6f 91       	pop	r22
    4516:	5f 91       	pop	r21
    4518:	4f 91       	pop	r20
    451a:	3f 91       	pop	r19
    451c:	2f 91       	pop	r18
    451e:	0f 90       	pop	r0
    4520:	0f be       	out	0x3f, r0	; 63
    4522:	0f 90       	pop	r0
    4524:	1f 90       	pop	r1
    4526:	18 95       	reti

00004528 <__vector_10>:
    4528:	1f 92       	push	r1
    452a:	0f 92       	push	r0
    452c:	0f b6       	in	r0, 0x3f	; 63
    452e:	0f 92       	push	r0
    4530:	11 24       	eor	r1, r1
    4532:	2f 93       	push	r18
    4534:	3f 93       	push	r19
    4536:	4f 93       	push	r20
    4538:	5f 93       	push	r21
    453a:	6f 93       	push	r22
    453c:	7f 93       	push	r23
    453e:	8f 93       	push	r24
    4540:	9f 93       	push	r25
    4542:	af 93       	push	r26
    4544:	bf 93       	push	r27
    4546:	ef 93       	push	r30
    4548:	ff 93       	push	r31
    454a:	e0 91 a6 03 	lds	r30, 0x03A6
    454e:	f0 91 a7 03 	lds	r31, 0x03A7
    4552:	30 97       	sbiw	r30, 0x00	; 0
    4554:	09 f0       	breq	.+2      	; 0x4558 <__vector_10+0x30>
    4556:	09 95       	icall
    4558:	ff 91       	pop	r31
    455a:	ef 91       	pop	r30
    455c:	bf 91       	pop	r27
    455e:	af 91       	pop	r26
    4560:	9f 91       	pop	r25
    4562:	8f 91       	pop	r24
    4564:	7f 91       	pop	r23
    4566:	6f 91       	pop	r22
    4568:	5f 91       	pop	r21
    456a:	4f 91       	pop	r20
    456c:	3f 91       	pop	r19
    456e:	2f 91       	pop	r18
    4570:	0f 90       	pop	r0
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	0f 90       	pop	r0
    4576:	1f 90       	pop	r1
    4578:	18 95       	reti

0000457a <__vector_11>:
    457a:	1f 92       	push	r1
    457c:	0f 92       	push	r0
    457e:	0f b6       	in	r0, 0x3f	; 63
    4580:	0f 92       	push	r0
    4582:	11 24       	eor	r1, r1
    4584:	2f 93       	push	r18
    4586:	3f 93       	push	r19
    4588:	4f 93       	push	r20
    458a:	5f 93       	push	r21
    458c:	6f 93       	push	r22
    458e:	7f 93       	push	r23
    4590:	8f 93       	push	r24
    4592:	9f 93       	push	r25
    4594:	af 93       	push	r26
    4596:	bf 93       	push	r27
    4598:	ef 93       	push	r30
    459a:	ff 93       	push	r31
    459c:	e0 91 a8 03 	lds	r30, 0x03A8
    45a0:	f0 91 a9 03 	lds	r31, 0x03A9
    45a4:	30 97       	sbiw	r30, 0x00	; 0
    45a6:	09 f0       	breq	.+2      	; 0x45aa <__vector_11+0x30>
    45a8:	09 95       	icall
    45aa:	ff 91       	pop	r31
    45ac:	ef 91       	pop	r30
    45ae:	bf 91       	pop	r27
    45b0:	af 91       	pop	r26
    45b2:	9f 91       	pop	r25
    45b4:	8f 91       	pop	r24
    45b6:	7f 91       	pop	r23
    45b8:	6f 91       	pop	r22
    45ba:	5f 91       	pop	r21
    45bc:	4f 91       	pop	r20
    45be:	3f 91       	pop	r19
    45c0:	2f 91       	pop	r18
    45c2:	0f 90       	pop	r0
    45c4:	0f be       	out	0x3f, r0	; 63
    45c6:	0f 90       	pop	r0
    45c8:	1f 90       	pop	r1
    45ca:	18 95       	reti

000045cc <__vector_13>:
    45cc:	1f 92       	push	r1
    45ce:	0f 92       	push	r0
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	0f 92       	push	r0
    45d4:	11 24       	eor	r1, r1
    45d6:	2f 93       	push	r18
    45d8:	3f 93       	push	r19
    45da:	4f 93       	push	r20
    45dc:	5f 93       	push	r21
    45de:	6f 93       	push	r22
    45e0:	7f 93       	push	r23
    45e2:	8f 93       	push	r24
    45e4:	9f 93       	push	r25
    45e6:	af 93       	push	r26
    45e8:	bf 93       	push	r27
    45ea:	ef 93       	push	r30
    45ec:	ff 93       	push	r31
    45ee:	e0 91 ac 03 	lds	r30, 0x03AC
    45f2:	f0 91 ad 03 	lds	r31, 0x03AD
    45f6:	30 97       	sbiw	r30, 0x00	; 0
    45f8:	09 f0       	breq	.+2      	; 0x45fc <__vector_13+0x30>
    45fa:	09 95       	icall
    45fc:	ff 91       	pop	r31
    45fe:	ef 91       	pop	r30
    4600:	bf 91       	pop	r27
    4602:	af 91       	pop	r26
    4604:	9f 91       	pop	r25
    4606:	8f 91       	pop	r24
    4608:	7f 91       	pop	r23
    460a:	6f 91       	pop	r22
    460c:	5f 91       	pop	r21
    460e:	4f 91       	pop	r20
    4610:	3f 91       	pop	r19
    4612:	2f 91       	pop	r18
    4614:	0f 90       	pop	r0
    4616:	0f be       	out	0x3f, r0	; 63
    4618:	0f 90       	pop	r0
    461a:	1f 90       	pop	r1
    461c:	18 95       	reti

0000461e <__vector_14>:
    461e:	1f 92       	push	r1
    4620:	0f 92       	push	r0
    4622:	0f b6       	in	r0, 0x3f	; 63
    4624:	0f 92       	push	r0
    4626:	11 24       	eor	r1, r1
    4628:	2f 93       	push	r18
    462a:	3f 93       	push	r19
    462c:	4f 93       	push	r20
    462e:	5f 93       	push	r21
    4630:	6f 93       	push	r22
    4632:	7f 93       	push	r23
    4634:	8f 93       	push	r24
    4636:	9f 93       	push	r25
    4638:	af 93       	push	r26
    463a:	bf 93       	push	r27
    463c:	ef 93       	push	r30
    463e:	ff 93       	push	r31
    4640:	e0 91 ae 03 	lds	r30, 0x03AE
    4644:	f0 91 af 03 	lds	r31, 0x03AF
    4648:	30 97       	sbiw	r30, 0x00	; 0
    464a:	09 f0       	breq	.+2      	; 0x464e <__vector_14+0x30>
    464c:	09 95       	icall
    464e:	ff 91       	pop	r31
    4650:	ef 91       	pop	r30
    4652:	bf 91       	pop	r27
    4654:	af 91       	pop	r26
    4656:	9f 91       	pop	r25
    4658:	8f 91       	pop	r24
    465a:	7f 91       	pop	r23
    465c:	6f 91       	pop	r22
    465e:	5f 91       	pop	r21
    4660:	4f 91       	pop	r20
    4662:	3f 91       	pop	r19
    4664:	2f 91       	pop	r18
    4666:	0f 90       	pop	r0
    4668:	0f be       	out	0x3f, r0	; 63
    466a:	0f 90       	pop	r0
    466c:	1f 90       	pop	r1
    466e:	18 95       	reti

00004670 <__vector_12>:
    4670:	1f 92       	push	r1
    4672:	0f 92       	push	r0
    4674:	0f b6       	in	r0, 0x3f	; 63
    4676:	0f 92       	push	r0
    4678:	11 24       	eor	r1, r1
    467a:	2f 93       	push	r18
    467c:	3f 93       	push	r19
    467e:	4f 93       	push	r20
    4680:	5f 93       	push	r21
    4682:	6f 93       	push	r22
    4684:	7f 93       	push	r23
    4686:	8f 93       	push	r24
    4688:	9f 93       	push	r25
    468a:	af 93       	push	r26
    468c:	bf 93       	push	r27
    468e:	ef 93       	push	r30
    4690:	ff 93       	push	r31
    4692:	e0 91 aa 03 	lds	r30, 0x03AA
    4696:	f0 91 ab 03 	lds	r31, 0x03AB
    469a:	30 97       	sbiw	r30, 0x00	; 0
    469c:	09 f0       	breq	.+2      	; 0x46a0 <__vector_12+0x30>
    469e:	09 95       	icall
    46a0:	ff 91       	pop	r31
    46a2:	ef 91       	pop	r30
    46a4:	bf 91       	pop	r27
    46a6:	af 91       	pop	r26
    46a8:	9f 91       	pop	r25
    46aa:	8f 91       	pop	r24
    46ac:	7f 91       	pop	r23
    46ae:	6f 91       	pop	r22
    46b0:	5f 91       	pop	r21
    46b2:	4f 91       	pop	r20
    46b4:	3f 91       	pop	r19
    46b6:	2f 91       	pop	r18
    46b8:	0f 90       	pop	r0
    46ba:	0f be       	out	0x3f, r0	; 63
    46bc:	0f 90       	pop	r0
    46be:	1f 90       	pop	r1
    46c0:	18 95       	reti

000046c2 <__vector_15>:
    46c2:	1f 92       	push	r1
    46c4:	0f 92       	push	r0
    46c6:	0f b6       	in	r0, 0x3f	; 63
    46c8:	0f 92       	push	r0
    46ca:	11 24       	eor	r1, r1
    46cc:	2f 93       	push	r18
    46ce:	3f 93       	push	r19
    46d0:	4f 93       	push	r20
    46d2:	5f 93       	push	r21
    46d4:	6f 93       	push	r22
    46d6:	7f 93       	push	r23
    46d8:	8f 93       	push	r24
    46da:	9f 93       	push	r25
    46dc:	af 93       	push	r26
    46de:	bf 93       	push	r27
    46e0:	ef 93       	push	r30
    46e2:	ff 93       	push	r31
    46e4:	e0 91 b0 03 	lds	r30, 0x03B0
    46e8:	f0 91 b1 03 	lds	r31, 0x03B1
    46ec:	30 97       	sbiw	r30, 0x00	; 0
    46ee:	09 f0       	breq	.+2      	; 0x46f2 <__vector_15+0x30>
    46f0:	09 95       	icall
    46f2:	ff 91       	pop	r31
    46f4:	ef 91       	pop	r30
    46f6:	bf 91       	pop	r27
    46f8:	af 91       	pop	r26
    46fa:	9f 91       	pop	r25
    46fc:	8f 91       	pop	r24
    46fe:	7f 91       	pop	r23
    4700:	6f 91       	pop	r22
    4702:	5f 91       	pop	r21
    4704:	4f 91       	pop	r20
    4706:	3f 91       	pop	r19
    4708:	2f 91       	pop	r18
    470a:	0f 90       	pop	r0
    470c:	0f be       	out	0x3f, r0	; 63
    470e:	0f 90       	pop	r0
    4710:	1f 90       	pop	r1
    4712:	18 95       	reti

00004714 <__vector_4>:
    4714:	1f 92       	push	r1
    4716:	0f 92       	push	r0
    4718:	0f b6       	in	r0, 0x3f	; 63
    471a:	0f 92       	push	r0
    471c:	11 24       	eor	r1, r1
    471e:	2f 93       	push	r18
    4720:	3f 93       	push	r19
    4722:	4f 93       	push	r20
    4724:	5f 93       	push	r21
    4726:	6f 93       	push	r22
    4728:	7f 93       	push	r23
    472a:	8f 93       	push	r24
    472c:	9f 93       	push	r25
    472e:	af 93       	push	r26
    4730:	bf 93       	push	r27
    4732:	ef 93       	push	r30
    4734:	ff 93       	push	r31
    4736:	e0 91 9a 03 	lds	r30, 0x039A
    473a:	f0 91 9b 03 	lds	r31, 0x039B
    473e:	30 97       	sbiw	r30, 0x00	; 0
    4740:	09 f0       	breq	.+2      	; 0x4744 <__vector_4+0x30>
    4742:	09 95       	icall
    4744:	ff 91       	pop	r31
    4746:	ef 91       	pop	r30
    4748:	bf 91       	pop	r27
    474a:	af 91       	pop	r26
    474c:	9f 91       	pop	r25
    474e:	8f 91       	pop	r24
    4750:	7f 91       	pop	r23
    4752:	6f 91       	pop	r22
    4754:	5f 91       	pop	r21
    4756:	4f 91       	pop	r20
    4758:	3f 91       	pop	r19
    475a:	2f 91       	pop	r18
    475c:	0f 90       	pop	r0
    475e:	0f be       	out	0x3f, r0	; 63
    4760:	0f 90       	pop	r0
    4762:	1f 90       	pop	r1
    4764:	18 95       	reti

00004766 <__vector_5>:
    4766:	1f 92       	push	r1
    4768:	0f 92       	push	r0
    476a:	0f b6       	in	r0, 0x3f	; 63
    476c:	0f 92       	push	r0
    476e:	11 24       	eor	r1, r1
    4770:	2f 93       	push	r18
    4772:	3f 93       	push	r19
    4774:	4f 93       	push	r20
    4776:	5f 93       	push	r21
    4778:	6f 93       	push	r22
    477a:	7f 93       	push	r23
    477c:	8f 93       	push	r24
    477e:	9f 93       	push	r25
    4780:	af 93       	push	r26
    4782:	bf 93       	push	r27
    4784:	ef 93       	push	r30
    4786:	ff 93       	push	r31
    4788:	e0 91 9c 03 	lds	r30, 0x039C
    478c:	f0 91 9d 03 	lds	r31, 0x039D
    4790:	30 97       	sbiw	r30, 0x00	; 0
    4792:	09 f0       	breq	.+2      	; 0x4796 <__vector_5+0x30>
    4794:	09 95       	icall
    4796:	ff 91       	pop	r31
    4798:	ef 91       	pop	r30
    479a:	bf 91       	pop	r27
    479c:	af 91       	pop	r26
    479e:	9f 91       	pop	r25
    47a0:	8f 91       	pop	r24
    47a2:	7f 91       	pop	r23
    47a4:	6f 91       	pop	r22
    47a6:	5f 91       	pop	r21
    47a8:	4f 91       	pop	r20
    47aa:	3f 91       	pop	r19
    47ac:	2f 91       	pop	r18
    47ae:	0f 90       	pop	r0
    47b0:	0f be       	out	0x3f, r0	; 63
    47b2:	0f 90       	pop	r0
    47b4:	1f 90       	pop	r1
    47b6:	18 95       	reti

000047b8 <__vector_6>:
    47b8:	1f 92       	push	r1
    47ba:	0f 92       	push	r0
    47bc:	0f b6       	in	r0, 0x3f	; 63
    47be:	0f 92       	push	r0
    47c0:	11 24       	eor	r1, r1
    47c2:	2f 93       	push	r18
    47c4:	3f 93       	push	r19
    47c6:	4f 93       	push	r20
    47c8:	5f 93       	push	r21
    47ca:	6f 93       	push	r22
    47cc:	7f 93       	push	r23
    47ce:	8f 93       	push	r24
    47d0:	9f 93       	push	r25
    47d2:	af 93       	push	r26
    47d4:	bf 93       	push	r27
    47d6:	ef 93       	push	r30
    47d8:	ff 93       	push	r31
    47da:	e0 91 9e 03 	lds	r30, 0x039E
    47de:	f0 91 9f 03 	lds	r31, 0x039F
    47e2:	30 97       	sbiw	r30, 0x00	; 0
    47e4:	09 f0       	breq	.+2      	; 0x47e8 <__vector_6+0x30>
    47e6:	09 95       	icall
    47e8:	ff 91       	pop	r31
    47ea:	ef 91       	pop	r30
    47ec:	bf 91       	pop	r27
    47ee:	af 91       	pop	r26
    47f0:	9f 91       	pop	r25
    47f2:	8f 91       	pop	r24
    47f4:	7f 91       	pop	r23
    47f6:	6f 91       	pop	r22
    47f8:	5f 91       	pop	r21
    47fa:	4f 91       	pop	r20
    47fc:	3f 91       	pop	r19
    47fe:	2f 91       	pop	r18
    4800:	0f 90       	pop	r0
    4802:	0f be       	out	0x3f, r0	; 63
    4804:	0f 90       	pop	r0
    4806:	1f 90       	pop	r1
    4808:	18 95       	reti

0000480a <__vector_7>:
    480a:	1f 92       	push	r1
    480c:	0f 92       	push	r0
    480e:	0f b6       	in	r0, 0x3f	; 63
    4810:	0f 92       	push	r0
    4812:	11 24       	eor	r1, r1
    4814:	2f 93       	push	r18
    4816:	3f 93       	push	r19
    4818:	4f 93       	push	r20
    481a:	5f 93       	push	r21
    481c:	6f 93       	push	r22
    481e:	7f 93       	push	r23
    4820:	8f 93       	push	r24
    4822:	9f 93       	push	r25
    4824:	af 93       	push	r26
    4826:	bf 93       	push	r27
    4828:	ef 93       	push	r30
    482a:	ff 93       	push	r31
    482c:	e0 91 a0 03 	lds	r30, 0x03A0
    4830:	f0 91 a1 03 	lds	r31, 0x03A1
    4834:	30 97       	sbiw	r30, 0x00	; 0
    4836:	09 f0       	breq	.+2      	; 0x483a <__vector_7+0x30>
    4838:	09 95       	icall
    483a:	ff 91       	pop	r31
    483c:	ef 91       	pop	r30
    483e:	bf 91       	pop	r27
    4840:	af 91       	pop	r26
    4842:	9f 91       	pop	r25
    4844:	8f 91       	pop	r24
    4846:	7f 91       	pop	r23
    4848:	6f 91       	pop	r22
    484a:	5f 91       	pop	r21
    484c:	4f 91       	pop	r20
    484e:	3f 91       	pop	r19
    4850:	2f 91       	pop	r18
    4852:	0f 90       	pop	r0
    4854:	0f be       	out	0x3f, r0	; 63
    4856:	0f 90       	pop	r0
    4858:	1f 90       	pop	r1
    485a:	18 95       	reti

0000485c <ISR_attach>:
    485c:	e8 2f       	mov	r30, r24
    485e:	80 32       	cpi	r24, 0x20	; 32
    4860:	68 f4       	brcc	.+26     	; 0x487c <ISR_attach+0x20>
    4862:	80 51       	subi	r24, 0x10	; 16
    4864:	83 30       	cpi	r24, 0x03	; 3
    4866:	50 f0       	brcs	.+20     	; 0x487c <ISR_attach+0x20>
    4868:	f0 e0       	ldi	r31, 0x00	; 0
    486a:	ee 0f       	add	r30, r30
    486c:	ff 1f       	adc	r31, r31
    486e:	ee 56       	subi	r30, 0x6E	; 110
    4870:	fc 4f       	sbci	r31, 0xFC	; 252
    4872:	20 81       	ld	r18, Z
    4874:	31 81       	ldd	r19, Z+1	; 0x01
    4876:	71 83       	std	Z+1, r23	; 0x01
    4878:	60 83       	st	Z, r22
    487a:	02 c0       	rjmp	.+4      	; 0x4880 <ISR_attach+0x24>
    487c:	20 e0       	ldi	r18, 0x00	; 0
    487e:	30 e0       	ldi	r19, 0x00	; 0
    4880:	c9 01       	movw	r24, r18
    4882:	08 95       	ret

00004884 <ISR_open>:
    4884:	80 e1       	ldi	r24, 0x10	; 16
    4886:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    488a:	88 23       	and	r24, r24
    488c:	61 f4       	brne	.+24     	; 0x48a6 <ISR_open+0x22>
    488e:	e2 e9       	ldi	r30, 0x92	; 146
    4890:	f3 e0       	ldi	r31, 0x03	; 3
    4892:	11 92       	st	Z+, r1
    4894:	11 92       	st	Z+, r1
    4896:	83 e0       	ldi	r24, 0x03	; 3
    4898:	e2 3d       	cpi	r30, 0xD2	; 210
    489a:	f8 07       	cpc	r31, r24
    489c:	d1 f7       	brne	.-12     	; 0x4892 <ISR_open+0xe>
    489e:	80 e1       	ldi	r24, 0x10	; 16
    48a0:	61 e0       	ldi	r22, 0x01	; 1
    48a2:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    48a6:	80 e1       	ldi	r24, 0x10	; 16
    48a8:	91 e0       	ldi	r25, 0x01	; 1
    48aa:	08 95       	ret

000048ac <__LCD_init>:
    48ac:	23 9a       	sbi	0x04, 3	; 4
    48ae:	08 95       	ret

000048b0 <__LCD_putchar>:
    48b0:	ff 92       	push	r15
    48b2:	0f 93       	push	r16
    48b4:	1f 93       	push	r17
    48b6:	cf 93       	push	r28
    48b8:	df 93       	push	r29
    48ba:	f8 2e       	mov	r15, r24
    48bc:	8a e0       	ldi	r24, 0x0A	; 10
    48be:	f8 16       	cp	r15, r24
    48c0:	b1 f0       	breq	.+44     	; 0x48ee <__LCD_putchar+0x3e>
    48c2:	8f 15       	cp	r24, r15
    48c4:	48 f0       	brcs	.+18     	; 0x48d8 <__LCD_putchar+0x28>
    48c6:	e8 e0       	ldi	r30, 0x08	; 8
    48c8:	fe 16       	cp	r15, r30
    48ca:	b9 f1       	breq	.+110    	; 0x493a <__LCD_putchar+0x8a>
    48cc:	ef 15       	cp	r30, r15
    48ce:	38 f1       	brcs	.+78     	; 0x491e <__LCD_putchar+0x6e>
    48d0:	f7 e0       	ldi	r31, 0x07	; 7
    48d2:	ff 16       	cp	r15, r31
    48d4:	51 f4       	brne	.+20     	; 0x48ea <__LCD_putchar+0x3a>
    48d6:	3b c0       	rjmp	.+118    	; 0x494e <__LCD_putchar+0x9e>
    48d8:	8d e0       	ldi	r24, 0x0D	; 13
    48da:	f8 16       	cp	r15, r24
    48dc:	59 f0       	breq	.+22     	; 0x48f4 <__LCD_putchar+0x44>
    48de:	eb e1       	ldi	r30, 0x1B	; 27
    48e0:	fe 16       	cp	r15, r30
    48e2:	89 f0       	breq	.+34     	; 0x4906 <__LCD_putchar+0x56>
    48e4:	fc e0       	ldi	r31, 0x0C	; 12
    48e6:	ff 16       	cp	r15, r31
    48e8:	41 f0       	breq	.+16     	; 0x48fa <__LCD_putchar+0x4a>
    48ea:	01 e0       	ldi	r16, 0x01	; 1
    48ec:	41 c0       	rjmp	.+130    	; 0x4970 <__LCD_putchar+0xc0>
    48ee:	10 92 ee 06 	sts	0x06EE, r1
    48f2:	03 c0       	rjmp	.+6      	; 0x48fa <__LCD_putchar+0x4a>
    48f4:	10 92 ee 06 	sts	0x06EE, r1
    48f8:	3a c0       	rjmp	.+116    	; 0x496e <__LCD_putchar+0xbe>
    48fa:	80 91 ef 06 	lds	r24, 0x06EF
    48fe:	81 50       	subi	r24, 0x01	; 1
    4900:	80 93 ef 06 	sts	0x06EF, r24
    4904:	34 c0       	rjmp	.+104    	; 0x496e <__LCD_putchar+0xbe>
    4906:	0e 94 b1 19 	call	0x3362	; 0x3362 <LCD_clear>
    490a:	14 c0       	rjmp	.+40     	; 0x4934 <__LCD_putchar+0x84>
    490c:	80 e0       	ldi	r24, 0x00	; 0
    490e:	61 e0       	ldi	r22, 0x01	; 1
    4910:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    4914:	80 91 ee 06 	lds	r24, 0x06EE
    4918:	8f 5f       	subi	r24, 0xFF	; 255
    491a:	80 93 ee 06 	sts	0x06EE, r24
    491e:	80 91 ee 06 	lds	r24, 0x06EE
    4922:	87 ff       	sbrs	r24, 7
    4924:	f3 cf       	rjmp	.-26     	; 0x490c <__LCD_putchar+0x5c>
    4926:	10 92 ee 06 	sts	0x06EE, r1
    492a:	80 91 ef 06 	lds	r24, 0x06EF
    492e:	81 50       	subi	r24, 0x01	; 1
    4930:	80 93 ef 06 	sts	0x06EF, r24
    4934:	00 e0       	ldi	r16, 0x00	; 0
    4936:	11 e0       	ldi	r17, 0x01	; 1
    4938:	1c c0       	rjmp	.+56     	; 0x4972 <__LCD_putchar+0xc2>
    493a:	80 91 ee 06 	lds	r24, 0x06EE
    493e:	88 23       	and	r24, r24
    4940:	b1 f0       	breq	.+44     	; 0x496e <__LCD_putchar+0xbe>
    4942:	80 91 ee 06 	lds	r24, 0x06EE
    4946:	86 50       	subi	r24, 0x06	; 6
    4948:	80 93 ee 06 	sts	0x06EE, r24
    494c:	10 c0       	rjmp	.+32     	; 0x496e <__LCD_putchar+0xbe>
    494e:	81 e0       	ldi	r24, 0x01	; 1
    4950:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <SPKR_open>
    4954:	64 ef       	ldi	r22, 0xF4	; 244
    4956:	71 e0       	ldi	r23, 0x01	; 1
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	4d e7       	ldi	r20, 0x7D	; 125
    495e:	50 e0       	ldi	r21, 0x00	; 0
    4960:	24 e6       	ldi	r18, 0x64	; 100
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <SPKR_play_beep>
    4968:	81 e0       	ldi	r24, 0x01	; 1
    496a:	0e 94 3e 26 	call	0x4c7c	; 0x4c7c <SPKR_close>
    496e:	00 e0       	ldi	r16, 0x00	; 0
    4970:	10 e0       	ldi	r17, 0x00	; 0
    4972:	80 91 ef 06 	lds	r24, 0x06EF
    4976:	60 91 ee 06 	lds	r22, 0x06EE
    497a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <LCD_set_PGC_addr>
    497e:	00 23       	and	r16, r16
    4980:	51 f1       	breq	.+84     	; 0x49d6 <__LCD_putchar+0x126>
    4982:	85 e0       	ldi	r24, 0x05	; 5
    4984:	f8 9e       	mul	r15, r24
    4986:	c0 01       	movw	r24, r0
    4988:	11 24       	eor	r1, r1
    498a:	ec 01       	movw	r28, r24
    498c:	c3 55       	subi	r28, 0x53	; 83
    498e:	df 4f       	sbci	r29, 0xFF	; 255
    4990:	8c 01       	movw	r16, r24
    4992:	0e 54       	subi	r16, 0x4E	; 78
    4994:	1f 4f       	sbci	r17, 0xFF	; 255
    4996:	fe 01       	movw	r30, r28
    4998:	84 91       	lpm	r24, Z+
    499a:	61 e0       	ldi	r22, 0x01	; 1
    499c:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    49a0:	21 96       	adiw	r28, 0x01	; 1
    49a2:	c0 17       	cp	r28, r16
    49a4:	d1 07       	cpc	r29, r17
    49a6:	b9 f7       	brne	.-18     	; 0x4996 <__LCD_putchar+0xe6>
    49a8:	80 e0       	ldi	r24, 0x00	; 0
    49aa:	61 e0       	ldi	r22, 0x01	; 1
    49ac:	0e 94 90 1a 	call	0x3520	; 0x3520 <LCD_write>
    49b0:	80 91 ee 06 	lds	r24, 0x06EE
    49b4:	8a 5f       	subi	r24, 0xFA	; 250
    49b6:	80 93 ee 06 	sts	0x06EE, r24
    49ba:	80 91 ee 06 	lds	r24, 0x06EE
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	8c 37       	cpi	r24, 0x7C	; 124
    49c2:	91 05       	cpc	r25, r1
    49c4:	3c f0       	brlt	.+14     	; 0x49d4 <__LCD_putchar+0x124>
    49c6:	10 92 ee 06 	sts	0x06EE, r1
    49ca:	80 91 ef 06 	lds	r24, 0x06EF
    49ce:	81 50       	subi	r24, 0x01	; 1
    49d0:	80 93 ef 06 	sts	0x06EF, r24
    49d4:	11 e0       	ldi	r17, 0x01	; 1
    49d6:	80 91 ef 06 	lds	r24, 0x06EF
    49da:	83 70       	andi	r24, 0x03	; 3
    49dc:	80 93 ef 06 	sts	0x06EF, r24
    49e0:	11 30       	cpi	r17, 0x01	; 1
    49e2:	59 f4       	brne	.+22     	; 0x49fa <__LCD_putchar+0x14a>
    49e4:	80 91 f0 06 	lds	r24, 0x06F0
    49e8:	81 30       	cpi	r24, 0x01	; 1
    49ea:	39 f4       	brne	.+14     	; 0x49fa <__LCD_putchar+0x14a>
    49ec:	e0 91 f1 06 	lds	r30, 0x06F1
    49f0:	f0 91 f2 06 	lds	r31, 0x06F2
    49f4:	30 97       	sbiw	r30, 0x00	; 0
    49f6:	09 f0       	breq	.+2      	; 0x49fa <__LCD_putchar+0x14a>
    49f8:	09 95       	icall
    49fa:	80 e0       	ldi	r24, 0x00	; 0
    49fc:	90 e0       	ldi	r25, 0x00	; 0
    49fe:	df 91       	pop	r29
    4a00:	cf 91       	pop	r28
    4a02:	1f 91       	pop	r17
    4a04:	0f 91       	pop	r16
    4a06:	ff 90       	pop	r15
    4a08:	08 95       	ret

00004a0a <__LED_clr_pattern>:
    4a0a:	85 fd       	sbrc	r24, 5
    4a0c:	5d 98       	cbi	0x0b, 5	; 11
    4a0e:	86 fd       	sbrc	r24, 6
    4a10:	5e 98       	cbi	0x0b, 6	; 11
    4a12:	08 95       	ret

00004a14 <__LED_init>:
    4a14:	55 9a       	sbi	0x0a, 5	; 10
    4a16:	56 9a       	sbi	0x0a, 6	; 10
    4a18:	08 95       	ret

00004a1a <__LED_set_pattern>:
    4a1a:	85 fd       	sbrc	r24, 5
    4a1c:	5d 9a       	sbi	0x0b, 5	; 11
    4a1e:	86 fd       	sbrc	r24, 6
    4a20:	5e 9a       	sbi	0x0b, 6	; 11
    4a22:	08 95       	ret

00004a24 <ATMEGA_open>:
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    4a2a:	88 23       	and	r24, r24
    4a2c:	51 f4       	brne	.+20     	; 0x4a42 <ATMEGA_open+0x1e>
    4a2e:	f8 94       	cli
    4a30:	0e 94 09 28 	call	0x5012	; 0x5012 <__ATMEGA_init>
    4a34:	81 e0       	ldi	r24, 0x01	; 1
    4a36:	0e 94 24 25 	call	0x4a48	; 0x4a48 <ATMEGA_set_clk_mode>
    4a3a:	80 e0       	ldi	r24, 0x00	; 0
    4a3c:	61 e0       	ldi	r22, 0x01	; 1
    4a3e:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    4a42:	80 e0       	ldi	r24, 0x00	; 0
    4a44:	91 e0       	ldi	r25, 0x01	; 1
    4a46:	08 95       	ret

00004a48 <ATMEGA_set_clk_mode>:
    4a48:	81 30       	cpi	r24, 0x01	; 1
    4a4a:	49 f0       	breq	.+18     	; 0x4a5e <ATMEGA_set_clk_mode+0x16>
    4a4c:	f8 94       	cli
    4a4e:	81 30       	cpi	r24, 0x01	; 1
    4a50:	20 f1       	brcs	.+72     	; 0x4a9a <ATMEGA_set_clk_mode+0x52>
    4a52:	82 30       	cpi	r24, 0x02	; 2
    4a54:	b1 f0       	breq	.+44     	; 0x4a82 <ATMEGA_set_clk_mode+0x3a>
    4a56:	83 30       	cpi	r24, 0x03	; 3
    4a58:	09 f0       	breq	.+2      	; 0x4a5c <ATMEGA_set_clk_mode+0x14>
    4a5a:	45 c0       	rjmp	.+138    	; 0x4ae6 <ATMEGA_set_clk_mode+0x9e>
    4a5c:	17 c0       	rjmp	.+46     	; 0x4a8c <ATMEGA_set_clk_mode+0x44>
    4a5e:	2c 9a       	sbi	0x05, 4	; 5
    4a60:	80 e8       	ldi	r24, 0x80	; 128
    4a62:	80 93 61 00 	sts	0x0061, r24
    4a66:	10 92 61 00 	sts	0x0061, r1
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	00 00       	nop
    4a70:	01 96       	adiw	r24, 0x01	; 1
    4a72:	88 32       	cpi	r24, 0x28	; 40
    4a74:	91 05       	cpc	r25, r1
    4a76:	d9 f7       	brne	.-10     	; 0x4a6e <ATMEGA_set_clk_mode+0x26>
    4a78:	10 92 68 00 	sts	0x0068, r1
    4a7c:	10 92 6b 00 	sts	0x006B, r1
    4a80:	08 95       	ret
    4a82:	80 e8       	ldi	r24, 0x80	; 128
    4a84:	80 93 61 00 	sts	0x0061, r24
    4a88:	83 e0       	ldi	r24, 0x03	; 3
    4a8a:	04 c0       	rjmp	.+8      	; 0x4a94 <ATMEGA_set_clk_mode+0x4c>
    4a8c:	80 e8       	ldi	r24, 0x80	; 128
    4a8e:	80 93 61 00 	sts	0x0061, r24
    4a92:	88 e0       	ldi	r24, 0x08	; 8
    4a94:	80 93 61 00 	sts	0x0061, r24
    4a98:	28 c0       	rjmp	.+80     	; 0x4aea <ATMEGA_set_clk_mode+0xa2>
    4a9a:	80 e0       	ldi	r24, 0x00	; 0
    4a9c:	90 e0       	ldi	r25, 0x00	; 0
    4a9e:	00 00       	nop
    4aa0:	01 96       	adiw	r24, 0x01	; 1
    4aa2:	2d e6       	ldi	r18, 0x6D	; 109
    4aa4:	80 36       	cpi	r24, 0x60	; 96
    4aa6:	92 07       	cpc	r25, r18
    4aa8:	d1 f7       	brne	.-12     	; 0x4a9e <ATMEGA_set_clk_mode+0x56>
    4aaa:	2c 98       	cbi	0x05, 4	; 5
    4aac:	80 e0       	ldi	r24, 0x00	; 0
    4aae:	90 e0       	ldi	r25, 0x00	; 0
    4ab0:	00 00       	nop
    4ab2:	01 96       	adiw	r24, 0x01	; 1
    4ab4:	2d e6       	ldi	r18, 0x6D	; 109
    4ab6:	80 36       	cpi	r24, 0x60	; 96
    4ab8:	92 07       	cpc	r25, r18
    4aba:	d1 f7       	brne	.-12     	; 0x4ab0 <ATMEGA_set_clk_mode+0x68>
    4abc:	10 92 7a 00 	sts	0x007A, r1
    4ac0:	8f ef       	ldi	r24, 0xFF	; 255
    4ac2:	80 93 64 00 	sts	0x0064, r24
    4ac6:	80 91 68 00 	lds	r24, 0x0068
    4aca:	81 60       	ori	r24, 0x01	; 1
    4acc:	80 93 68 00 	sts	0x0068, r24
    4ad0:	80 91 6b 00 	lds	r24, 0x006B
    4ad4:	84 60       	ori	r24, 0x04	; 4
    4ad6:	80 93 6b 00 	sts	0x006B, r24
    4ada:	78 94       	sei
    4adc:	83 b7       	in	r24, 0x33	; 51
    4ade:	81 60       	ori	r24, 0x01	; 1
    4ae0:	83 bf       	out	0x33, r24	; 51
    4ae2:	88 95       	sleep
    4ae4:	08 95       	ret
    4ae6:	82 30       	cpi	r24, 0x02	; 2
    4ae8:	08 f0       	brcs	.+2      	; 0x4aec <ATMEGA_set_clk_mode+0xa4>
    4aea:	78 94       	sei
    4aec:	08 95       	ret

00004aee <SPI_open>:
    4aee:	0f 93       	push	r16
    4af0:	1f 93       	push	r17
    4af2:	0e 94 35 28 	call	0x506a	; 0x506a <__SPI_init>
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	64 e2       	ldi	r22, 0x24	; 36
    4afa:	78 e2       	ldi	r23, 0x28	; 40
    4afc:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <SPI_set_config_func>
    4b00:	81 e0       	ldi	r24, 0x01	; 1
    4b02:	6c e1       	ldi	r22, 0x1C	; 28
    4b04:	78 e2       	ldi	r23, 0x28	; 40
    4b06:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <SPI_set_config_func>
    4b0a:	82 e0       	ldi	r24, 0x02	; 2
    4b0c:	64 e1       	ldi	r22, 0x14	; 20
    4b0e:	78 e2       	ldi	r23, 0x28	; 40
    4b10:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <SPI_set_config_func>
    4b14:	86 e0       	ldi	r24, 0x06	; 6
    4b16:	6c e2       	ldi	r22, 0x2C	; 44
    4b18:	78 e2       	ldi	r23, 0x28	; 40
    4b1a:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <SPI_set_config_func>
    4b1e:	0c e0       	ldi	r16, 0x0C	; 12
    4b20:	18 e2       	ldi	r17, 0x28	; 40
    4b22:	83 e0       	ldi	r24, 0x03	; 3
    4b24:	b8 01       	movw	r22, r16
    4b26:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <SPI_set_config_func>
    4b2a:	84 e0       	ldi	r24, 0x04	; 4
    4b2c:	b8 01       	movw	r22, r16
    4b2e:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <SPI_set_config_func>
    4b32:	85 e0       	ldi	r24, 0x05	; 5
    4b34:	b8 01       	movw	r22, r16
    4b36:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <SPI_set_config_func>
    4b3a:	87 e0       	ldi	r24, 0x07	; 7
    4b3c:	b8 01       	movw	r22, r16
    4b3e:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <SPI_set_config_func>
    4b42:	82 e0       	ldi	r24, 0x02	; 2
    4b44:	61 e0       	ldi	r22, 0x01	; 1
    4b46:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    4b4a:	8f ef       	ldi	r24, 0xFF	; 255
    4b4c:	80 93 f3 06 	sts	0x06F3, r24
    4b50:	87 e0       	ldi	r24, 0x07	; 7
    4b52:	0e 94 cc 1a 	call	0x3598	; 0x3598 <SPI_set_slave_addr>
    4b56:	82 e0       	ldi	r24, 0x02	; 2
    4b58:	91 e0       	ldi	r25, 0x01	; 1
    4b5a:	1f 91       	pop	r17
    4b5c:	0f 91       	pop	r16
    4b5e:	08 95       	ret

00004b60 <SPI_receive>:
    4b60:	1f 93       	push	r17
    4b62:	16 2f       	mov	r17, r22
    4b64:	0e 94 cc 1a 	call	0x3598	; 0x3598 <SPI_set_slave_addr>
    4b68:	82 e0       	ldi	r24, 0x02	; 2
    4b6a:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    4b6e:	81 30       	cpi	r24, 0x01	; 1
    4b70:	11 f0       	breq	.+4      	; 0x4b76 <SPI_receive+0x16>
    4b72:	80 e0       	ldi	r24, 0x00	; 0
    4b74:	05 c0       	rjmp	.+10     	; 0x4b80 <SPI_receive+0x20>
    4b76:	1e bd       	out	0x2e, r17	; 46
    4b78:	0d b4       	in	r0, 0x2d	; 45
    4b7a:	07 fe       	sbrs	r0, 7
    4b7c:	fd cf       	rjmp	.-6      	; 0x4b78 <SPI_receive+0x18>
    4b7e:	8e b5       	in	r24, 0x2e	; 46
    4b80:	1f 91       	pop	r17
    4b82:	08 95       	ret

00004b84 <SPI_set_config_func>:
    4b84:	e8 2f       	mov	r30, r24
    4b86:	f0 e0       	ldi	r31, 0x00	; 0
    4b88:	ee 0f       	add	r30, r30
    4b8a:	ff 1f       	adc	r31, r31
    4b8c:	ee 52       	subi	r30, 0x2E	; 46
    4b8e:	fc 4f       	sbci	r31, 0xFC	; 252
    4b90:	71 83       	std	Z+1, r23	; 0x01
    4b92:	60 83       	st	Z, r22
    4b94:	08 95       	ret

00004b96 <__SPKR_TIMER1_COMPA_vect>:
    4b96:	0e 94 ce 25 	call	0x4b9c	; 0x4b9c <SPKR_clk>
    4b9a:	08 95       	ret

00004b9c <SPKR_clk>:
    4b9c:	80 91 74 03 	lds	r24, 0x0374
    4ba0:	90 91 75 03 	lds	r25, 0x0375
    4ba4:	a0 91 76 03 	lds	r26, 0x0376
    4ba8:	b0 91 77 03 	lds	r27, 0x0377
    4bac:	20 91 78 03 	lds	r18, 0x0378
    4bb0:	30 91 79 03 	lds	r19, 0x0379
    4bb4:	40 91 7a 03 	lds	r20, 0x037A
    4bb8:	50 91 7b 03 	lds	r21, 0x037B
    4bbc:	28 0f       	add	r18, r24
    4bbe:	39 1f       	adc	r19, r25
    4bc0:	4a 1f       	adc	r20, r26
    4bc2:	5b 1f       	adc	r21, r27
    4bc4:	20 93 74 03 	sts	0x0374, r18
    4bc8:	30 93 75 03 	sts	0x0375, r19
    4bcc:	40 93 76 03 	sts	0x0376, r20
    4bd0:	50 93 77 03 	sts	0x0377, r21
    4bd4:	80 91 74 03 	lds	r24, 0x0374
    4bd8:	90 91 75 03 	lds	r25, 0x0375
    4bdc:	a0 91 76 03 	lds	r26, 0x0376
    4be0:	b0 91 77 03 	lds	r27, 0x0377
    4be4:	88 51       	subi	r24, 0x18	; 24
    4be6:	96 4f       	sbci	r25, 0xF6	; 246
    4be8:	a0 40       	sbci	r26, 0x00	; 0
    4bea:	b0 40       	sbci	r27, 0x00	; 0
    4bec:	bc f0       	brlt	.+46     	; 0x4c1c <SPKR_clk+0x80>
    4bee:	8b b1       	in	r24, 0x0b	; 11
    4bf0:	80 58       	subi	r24, 0x80	; 128
    4bf2:	8b b9       	out	0x0b, r24	; 11
    4bf4:	80 91 74 03 	lds	r24, 0x0374
    4bf8:	90 91 75 03 	lds	r25, 0x0375
    4bfc:	a0 91 76 03 	lds	r26, 0x0376
    4c00:	b0 91 77 03 	lds	r27, 0x0377
    4c04:	88 51       	subi	r24, 0x18	; 24
    4c06:	96 4f       	sbci	r25, 0xF6	; 246
    4c08:	a0 40       	sbci	r26, 0x00	; 0
    4c0a:	b0 40       	sbci	r27, 0x00	; 0
    4c0c:	80 93 74 03 	sts	0x0374, r24
    4c10:	90 93 75 03 	sts	0x0375, r25
    4c14:	a0 93 76 03 	sts	0x0376, r26
    4c18:	b0 93 77 03 	sts	0x0377, r27
    4c1c:	08 95       	ret

00004c1e <__SPKR_close_beep_mode>:
    4c1e:	8a e0       	ldi	r24, 0x0A	; 10
    4c20:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    4c24:	81 30       	cpi	r24, 0x01	; 1
    4c26:	41 f4       	brne	.+16     	; 0x4c38 <__SPKR_close_beep_mode+0x1a>
    4c28:	0e 94 3c 28 	call	0x5078	; 0x5078 <__SPKR_close>
    4c2c:	10 92 73 03 	sts	0x0373, r1
    4c30:	8a e0       	ldi	r24, 0x0A	; 10
    4c32:	60 e0       	ldi	r22, 0x00	; 0
    4c34:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    4c38:	08 95       	ret

00004c3a <__SPKR_close_tone_mode>:
    4c3a:	89 e0       	ldi	r24, 0x09	; 9
    4c3c:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    4c40:	81 30       	cpi	r24, 0x01	; 1
    4c42:	d9 f4       	brne	.+54     	; 0x4c7a <__SPKR_close_tone_mode+0x40>
    4c44:	80 91 72 03 	lds	r24, 0x0372
    4c48:	88 23       	and	r24, r24
    4c4a:	11 f0       	breq	.+4      	; 0x4c50 <__SPKR_close_tone_mode+0x16>
    4c4c:	0e 94 bf 26 	call	0x4d7e	; 0x4d7e <__SPKR_stop>
    4c50:	82 e0       	ldi	r24, 0x02	; 2
    4c52:	0e 94 3c 28 	call	0x5078	; 0x5078 <__SPKR_close>
    4c56:	80 91 80 03 	lds	r24, 0x0380
    4c5a:	90 91 81 03 	lds	r25, 0x0381
    4c5e:	00 97       	sbiw	r24, 0x00	; 0
    4c60:	31 f0       	breq	.+12     	; 0x4c6e <__SPKR_close_tone_mode+0x34>
    4c62:	0e 94 af 34 	call	0x695e	; 0x695e <free>
    4c66:	10 92 81 03 	sts	0x0381, r1
    4c6a:	10 92 80 03 	sts	0x0380, r1
    4c6e:	10 92 72 03 	sts	0x0372, r1
    4c72:	89 e0       	ldi	r24, 0x09	; 9
    4c74:	60 e0       	ldi	r22, 0x00	; 0
    4c76:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    4c7a:	08 95       	ret

00004c7c <SPKR_close>:
    4c7c:	81 30       	cpi	r24, 0x01	; 1
    4c7e:	29 f0       	breq	.+10     	; 0x4c8a <SPKR_close+0xe>
    4c80:	82 30       	cpi	r24, 0x02	; 2
    4c82:	29 f4       	brne	.+10     	; 0x4c8e <SPKR_close+0x12>
    4c84:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <__SPKR_close_tone_mode>
    4c88:	08 95       	ret
    4c8a:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <__SPKR_close_beep_mode>
    4c8e:	08 95       	ret

00004c90 <__SPKR_init>:
    4c90:	98 2f       	mov	r25, r24
    4c92:	80 91 72 03 	lds	r24, 0x0372
    4c96:	88 23       	and	r24, r24
    4c98:	31 f4       	brne	.+12     	; 0x4ca6 <__SPKR_init+0x16>
    4c9a:	80 91 73 03 	lds	r24, 0x0373
    4c9e:	88 23       	and	r24, r24
    4ca0:	11 f4       	brne	.+4      	; 0x4ca6 <__SPKR_init+0x16>
    4ca2:	57 9a       	sbi	0x0a, 7	; 10
    4ca4:	5f 98       	cbi	0x0b, 7	; 11
    4ca6:	80 91 72 03 	lds	r24, 0x0372
    4caa:	88 23       	and	r24, r24
    4cac:	d1 f4       	brne	.+52     	; 0x4ce2 <__SPKR_init+0x52>
    4cae:	92 30       	cpi	r25, 0x02	; 2
    4cb0:	c1 f4       	brne	.+48     	; 0x4ce2 <__SPKR_init+0x52>
    4cb2:	10 92 80 00 	sts	0x0080, r1
    4cb6:	10 92 81 00 	sts	0x0081, r1
    4cba:	80 91 81 00 	lds	r24, 0x0081
    4cbe:	88 60       	ori	r24, 0x08	; 8
    4cc0:	80 93 81 00 	sts	0x0081, r24
    4cc4:	80 91 81 00 	lds	r24, 0x0081
    4cc8:	81 60       	ori	r24, 0x01	; 1
    4cca:	80 93 81 00 	sts	0x0081, r24
    4cce:	10 92 85 00 	sts	0x0085, r1
    4cd2:	10 92 84 00 	sts	0x0084, r1
    4cd6:	81 e0       	ldi	r24, 0x01	; 1
    4cd8:	80 93 89 00 	sts	0x0089, r24
    4cdc:	80 e9       	ldi	r24, 0x90	; 144
    4cde:	80 93 88 00 	sts	0x0088, r24
    4ce2:	08 95       	ret

00004ce4 <SPKR_play_beep>:
    4ce4:	8f 92       	push	r8
    4ce6:	9f 92       	push	r9
    4ce8:	af 92       	push	r10
    4cea:	bf 92       	push	r11
    4cec:	cf 92       	push	r12
    4cee:	df 92       	push	r13
    4cf0:	ef 92       	push	r14
    4cf2:	ff 92       	push	r15
    4cf4:	0f 93       	push	r16
    4cf6:	1f 93       	push	r17
    4cf8:	cf 93       	push	r28
    4cfa:	df 93       	push	r29
    4cfc:	4b 01       	movw	r8, r22
    4cfe:	5c 01       	movw	r10, r24
    4d00:	ea 01       	movw	r28, r20
    4d02:	b9 01       	movw	r22, r18
    4d04:	21 15       	cp	r18, r1
    4d06:	31 05       	cpc	r19, r1
    4d08:	39 f1       	breq	.+78     	; 0x4d58 <SPKR_play_beep+0x74>
    4d0a:	9e 01       	movw	r18, r28
    4d0c:	44 27       	eor	r20, r20
    4d0e:	37 fd       	sbrc	r19, 7
    4d10:	40 95       	com	r20
    4d12:	54 2f       	mov	r21, r20
    4d14:	65 36       	cpi	r22, 0x65	; 101
    4d16:	71 05       	cpc	r23, r1
    4d18:	10 f0       	brcs	.+4      	; 0x4d1e <SPKR_play_beep+0x3a>
    4d1a:	64 e6       	ldi	r22, 0x64	; 100
    4d1c:	70 e0       	ldi	r23, 0x00	; 0
    4d1e:	80 e0       	ldi	r24, 0x00	; 0
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	0e 94 8a 33 	call	0x6714	; 0x6714 <__mulsi3>
    4d26:	24 e6       	ldi	r18, 0x64	; 100
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 e0       	ldi	r20, 0x00	; 0
    4d2c:	50 e0       	ldi	r21, 0x00	; 0
    4d2e:	0e 94 a9 33 	call	0x6752	; 0x6752 <__udivmodsi4>
    4d32:	79 01       	movw	r14, r18
    4d34:	8a 01       	movw	r16, r20
    4d36:	c5 01       	movw	r24, r10
    4d38:	b4 01       	movw	r22, r8
    4d3a:	0e 94 2c 1b 	call	0x3658	; 0x3658 <SPKR_beep>
    4d3e:	c7 01       	movw	r24, r14
    4d40:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
    4d44:	60 e0       	ldi	r22, 0x00	; 0
    4d46:	70 e0       	ldi	r23, 0x00	; 0
    4d48:	80 e0       	ldi	r24, 0x00	; 0
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	0e 94 2c 1b 	call	0x3658	; 0x3658 <SPKR_beep>
    4d50:	ce 01       	movw	r24, r28
    4d52:	8e 19       	sub	r24, r14
    4d54:	9f 09       	sbc	r25, r15
    4d56:	04 c0       	rjmp	.+8      	; 0x4d60 <SPKR_play_beep+0x7c>
    4d58:	41 15       	cp	r20, r1
    4d5a:	51 05       	cpc	r21, r1
    4d5c:	19 f0       	breq	.+6      	; 0x4d64 <SPKR_play_beep+0x80>
    4d5e:	ca 01       	movw	r24, r20
    4d60:	0e 94 a3 20 	call	0x4146	; 0x4146 <TMRSRVC_delay>
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	1f 91       	pop	r17
    4d6a:	0f 91       	pop	r16
    4d6c:	ff 90       	pop	r15
    4d6e:	ef 90       	pop	r14
    4d70:	df 90       	pop	r13
    4d72:	cf 90       	pop	r12
    4d74:	bf 90       	pop	r11
    4d76:	af 90       	pop	r10
    4d78:	9f 90       	pop	r9
    4d7a:	8f 90       	pop	r8
    4d7c:	08 95       	ret

00004d7e <__SPKR_stop>:
    4d7e:	ef e6       	ldi	r30, 0x6F	; 111
    4d80:	f0 e0       	ldi	r31, 0x00	; 0
    4d82:	80 81       	ld	r24, Z
    4d84:	8d 7f       	andi	r24, 0xFD	; 253
    4d86:	80 83       	st	Z, r24
    4d88:	08 95       	ret

00004d8a <STEPPER_go>:
    4d8a:	98 2f       	mov	r25, r24
    4d8c:	81 e0       	ldi	r24, 0x01	; 1
    4d8e:	80 93 d8 06 	sts	0x06D8, r24
    4d92:	91 30       	cpi	r25, 0x01	; 1
    4d94:	51 f0       	breq	.+20     	; 0x4daa <STEPPER_go+0x20>
    4d96:	91 30       	cpi	r25, 0x01	; 1
    4d98:	18 f0       	brcs	.+6      	; 0x4da0 <STEPPER_go+0x16>
    4d9a:	92 30       	cpi	r25, 0x02	; 2
    4d9c:	41 f4       	brne	.+16     	; 0x4dae <STEPPER_go+0x24>
    4d9e:	03 c0       	rjmp	.+6      	; 0x4da6 <STEPPER_go+0x1c>
    4da0:	10 92 c0 06 	sts	0x06C0, r1
    4da4:	04 c0       	rjmp	.+8      	; 0x4dae <STEPPER_go+0x24>
    4da6:	10 92 c0 06 	sts	0x06C0, r1
    4daa:	10 92 c1 06 	sts	0x06C1, r1
    4dae:	10 92 d8 06 	sts	0x06D8, r1
    4db2:	08 95       	ret

00004db4 <__STEPPER_init>:
    4db4:	3a 9a       	sbi	0x07, 2	; 7
    4db6:	3b 9a       	sbi	0x07, 3	; 7
    4db8:	3c 9a       	sbi	0x07, 4	; 7
    4dba:	3d 9a       	sbi	0x07, 5	; 7
    4dbc:	3e 9a       	sbi	0x07, 6	; 7
    4dbe:	3f 9a       	sbi	0x07, 7	; 7
    4dc0:	88 b1       	in	r24, 0x08	; 8
    4dc2:	83 70       	andi	r24, 0x03	; 3
    4dc4:	88 b9       	out	0x08, r24	; 8
    4dc6:	08 95       	ret

00004dc8 <STEPPER_set_stop_mode>:
    4dc8:	98 2f       	mov	r25, r24
    4dca:	81 e0       	ldi	r24, 0x01	; 1
    4dcc:	80 93 d8 06 	sts	0x06D8, r24
    4dd0:	91 30       	cpi	r25, 0x01	; 1
    4dd2:	51 f0       	breq	.+20     	; 0x4de8 <STEPPER_set_stop_mode+0x20>
    4dd4:	91 30       	cpi	r25, 0x01	; 1
    4dd6:	18 f0       	brcs	.+6      	; 0x4dde <STEPPER_set_stop_mode+0x16>
    4dd8:	92 30       	cpi	r25, 0x02	; 2
    4dda:	41 f4       	brne	.+16     	; 0x4dec <STEPPER_set_stop_mode+0x24>
    4ddc:	03 c0       	rjmp	.+6      	; 0x4de4 <STEPPER_set_stop_mode+0x1c>
    4dde:	60 93 c2 06 	sts	0x06C2, r22
    4de2:	04 c0       	rjmp	.+8      	; 0x4dec <STEPPER_set_stop_mode+0x24>
    4de4:	60 93 c2 06 	sts	0x06C2, r22
    4de8:	60 93 c3 06 	sts	0x06C3, r22
    4dec:	10 92 d8 06 	sts	0x06D8, r1
    4df0:	08 95       	ret

00004df2 <STEPPER_setup_decels>:
    4df2:	0f 93       	push	r16
    4df4:	1f 93       	push	r17
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	eb 01       	movw	r28, r22
    4dfc:	8a 01       	movw	r16, r20
    4dfe:	81 30       	cpi	r24, 0x01	; 1
    4e00:	01 f1       	breq	.+64     	; 0x4e42 <STEPPER_setup_decels+0x50>
    4e02:	81 30       	cpi	r24, 0x01	; 1
    4e04:	18 f0       	brcs	.+6      	; 0x4e0c <STEPPER_setup_decels+0x1a>
    4e06:	82 30       	cpi	r24, 0x02	; 2
    4e08:	61 f5       	brne	.+88     	; 0x4e62 <STEPPER_setup_decels+0x70>
    4e0a:	0d c0       	rjmp	.+26     	; 0x4e26 <STEPPER_setup_decels+0x34>
    4e0c:	80 91 ac 06 	lds	r24, 0x06AC
    4e10:	90 91 ad 06 	lds	r25, 0x06AD
    4e14:	89 2b       	or	r24, r25
    4e16:	11 f0       	breq	.+4      	; 0x4e1c <STEPPER_setup_decels+0x2a>
    4e18:	80 e0       	ldi	r24, 0x00	; 0
    4e1a:	1a c0       	rjmp	.+52     	; 0x4e50 <STEPPER_setup_decels+0x5e>
    4e1c:	10 92 b9 06 	sts	0x06B9, r1
    4e20:	10 92 b8 06 	sts	0x06B8, r1
    4e24:	1e c0       	rjmp	.+60     	; 0x4e62 <STEPPER_setup_decels+0x70>
    4e26:	80 91 ac 06 	lds	r24, 0x06AC
    4e2a:	90 91 ad 06 	lds	r25, 0x06AD
    4e2e:	89 2b       	or	r24, r25
    4e30:	21 f0       	breq	.+8      	; 0x4e3a <STEPPER_setup_decels+0x48>
    4e32:	80 e0       	ldi	r24, 0x00	; 0
    4e34:	0e 94 58 28 	call	0x50b0	; 0x50b0 <STEPPER_set_decel_step_values>
    4e38:	04 c0       	rjmp	.+8      	; 0x4e42 <STEPPER_setup_decels+0x50>
    4e3a:	10 92 b9 06 	sts	0x06B9, r1
    4e3e:	10 92 b8 06 	sts	0x06B8, r1
    4e42:	80 91 ae 06 	lds	r24, 0x06AE
    4e46:	90 91 af 06 	lds	r25, 0x06AF
    4e4a:	89 2b       	or	r24, r25
    4e4c:	31 f0       	breq	.+12     	; 0x4e5a <STEPPER_setup_decels+0x68>
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	be 01       	movw	r22, r28
    4e52:	a8 01       	movw	r20, r16
    4e54:	0e 94 58 28 	call	0x50b0	; 0x50b0 <STEPPER_set_decel_step_values>
    4e58:	04 c0       	rjmp	.+8      	; 0x4e62 <STEPPER_setup_decels+0x70>
    4e5a:	10 92 bb 06 	sts	0x06BB, r1
    4e5e:	10 92 ba 06 	sts	0x06BA, r1
    4e62:	df 91       	pop	r29
    4e64:	cf 91       	pop	r28
    4e66:	1f 91       	pop	r17
    4e68:	0f 91       	pop	r16
    4e6a:	08 95       	ret

00004e6c <SYS_init>:
    4e6c:	10 92 db 06 	sts	0x06DB, r1
    4e70:	10 92 dc 06 	sts	0x06DC, r1
    4e74:	10 92 e0 06 	sts	0x06E0, r1
    4e78:	10 92 dd 06 	sts	0x06DD, r1
    4e7c:	10 92 df 06 	sts	0x06DF, r1
    4e80:	10 92 e1 06 	sts	0x06E1, r1
    4e84:	10 92 e2 06 	sts	0x06E2, r1
    4e88:	10 92 e3 06 	sts	0x06E3, r1
    4e8c:	10 92 e4 06 	sts	0x06E4, r1
    4e90:	10 92 e5 06 	sts	0x06E5, r1
    4e94:	10 92 e6 06 	sts	0x06E6, r1
    4e98:	10 92 e7 06 	sts	0x06E7, r1
    4e9c:	10 92 e8 06 	sts	0x06E8, r1
    4ea0:	10 92 e9 06 	sts	0x06E9, r1
    4ea4:	10 92 ea 06 	sts	0x06EA, r1
    4ea8:	10 92 eb 06 	sts	0x06EB, r1
    4eac:	10 92 ec 06 	sts	0x06EC, r1
    4eb0:	08 95       	ret

00004eb2 <TMRSRVC_insert>:
    4eb2:	cf 92       	push	r12
    4eb4:	df 92       	push	r13
    4eb6:	ef 92       	push	r14
    4eb8:	ff 92       	push	r15
    4eba:	0f 93       	push	r16
    4ebc:	1f 93       	push	r17
    4ebe:	cf 93       	push	r28
    4ec0:	df 93       	push	r29
    4ec2:	ec 01       	movw	r28, r24
    4ec4:	80 91 12 07 	lds	r24, 0x0712
    4ec8:	88 23       	and	r24, r24
    4eca:	39 f4       	brne	.+14     	; 0x4eda <TMRSRVC_insert+0x28>
    4ecc:	d0 93 14 07 	sts	0x0714, r29
    4ed0:	c0 93 13 07 	sts	0x0713, r28
    4ed4:	0e 94 e7 27 	call	0x4fce	; 0x4fce <TMRSRVC_start>
    4ed8:	47 c0       	rjmp	.+142    	; 0x4f68 <TMRSRVC_insert+0xb6>
    4eda:	c0 90 13 07 	lds	r12, 0x0713
    4ede:	d0 90 14 07 	lds	r13, 0x0714
    4ee2:	00 e0       	ldi	r16, 0x00	; 0
    4ee4:	10 e0       	ldi	r17, 0x00	; 0
    4ee6:	ee 24       	eor	r14, r14
    4ee8:	ff 24       	eor	r15, r15
    4eea:	37 c0       	rjmp	.+110    	; 0x4f5a <TMRSRVC_insert+0xa8>
    4eec:	a8 81       	ld	r26, Y
    4eee:	b9 81       	ldd	r27, Y+1	; 0x01
    4ef0:	fd 01       	movw	r30, r26
    4ef2:	64 81       	ldd	r22, Z+4	; 0x04
    4ef4:	75 81       	ldd	r23, Z+5	; 0x05
    4ef6:	f6 01       	movw	r30, r12
    4ef8:	40 81       	ld	r20, Z
    4efa:	51 81       	ldd	r21, Z+1	; 0x01
    4efc:	fa 01       	movw	r30, r20
    4efe:	84 81       	ldd	r24, Z+4	; 0x04
    4f00:	95 81       	ldd	r25, Z+5	; 0x05
    4f02:	9b 01       	movw	r18, r22
    4f04:	28 1b       	sub	r18, r24
    4f06:	39 0b       	sbc	r19, r25
    4f08:	37 ff       	sbrs	r19, 7
    4f0a:	0f c0       	rjmp	.+30     	; 0x4f2a <TMRSRVC_insert+0x78>
    4f0c:	86 1b       	sub	r24, r22
    4f0e:	97 0b       	sbc	r25, r23
    4f10:	95 83       	std	Z+5, r25	; 0x05
    4f12:	84 83       	std	Z+4, r24	; 0x04
    4f14:	db 82       	std	Y+3, r13	; 0x03
    4f16:	ca 82       	std	Y+2, r12	; 0x02
    4f18:	01 2b       	or	r16, r17
    4f1a:	29 f4       	brne	.+10     	; 0x4f26 <TMRSRVC_insert+0x74>
    4f1c:	d0 93 14 07 	sts	0x0714, r29
    4f20:	c0 93 13 07 	sts	0x0713, r28
    4f24:	21 c0       	rjmp	.+66     	; 0x4f68 <TMRSRVC_insert+0xb6>
    4f26:	f7 01       	movw	r30, r14
    4f28:	0c c0       	rjmp	.+24     	; 0x4f42 <TMRSRVC_insert+0x90>
    4f2a:	f6 01       	movw	r30, r12
    4f2c:	82 81       	ldd	r24, Z+2	; 0x02
    4f2e:	93 81       	ldd	r25, Z+3	; 0x03
    4f30:	21 15       	cp	r18, r1
    4f32:	31 05       	cpc	r19, r1
    4f34:	49 f4       	brne	.+18     	; 0x4f48 <TMRSRVC_insert+0x96>
    4f36:	fd 01       	movw	r30, r26
    4f38:	15 82       	std	Z+5, r1	; 0x05
    4f3a:	14 82       	std	Z+4, r1	; 0x04
    4f3c:	9b 83       	std	Y+3, r25	; 0x03
    4f3e:	8a 83       	std	Y+2, r24	; 0x02
    4f40:	f6 01       	movw	r30, r12
    4f42:	d3 83       	std	Z+3, r29	; 0x03
    4f44:	c2 83       	std	Z+2, r28	; 0x02
    4f46:	10 c0       	rjmp	.+32     	; 0x4f68 <TMRSRVC_insert+0xb6>
    4f48:	fd 01       	movw	r30, r26
    4f4a:	35 83       	std	Z+5, r19	; 0x05
    4f4c:	24 83       	std	Z+4, r18	; 0x04
    4f4e:	00 97       	sbiw	r24, 0x00	; 0
    4f50:	b9 f3       	breq	.-18     	; 0x4f40 <TMRSRVC_insert+0x8e>
    4f52:	0f 5f       	subi	r16, 0xFF	; 255
    4f54:	1f 4f       	sbci	r17, 0xFF	; 255
    4f56:	76 01       	movw	r14, r12
    4f58:	6c 01       	movw	r12, r24
    4f5a:	80 91 12 07 	lds	r24, 0x0712
    4f5e:	90 e0       	ldi	r25, 0x00	; 0
    4f60:	08 17       	cp	r16, r24
    4f62:	19 07       	cpc	r17, r25
    4f64:	18 f2       	brcs	.-122    	; 0x4eec <TMRSRVC_insert+0x3a>
    4f66:	ec cf       	rjmp	.-40     	; 0x4f40 <TMRSRVC_insert+0x8e>
    4f68:	80 91 12 07 	lds	r24, 0x0712
    4f6c:	8f 5f       	subi	r24, 0xFF	; 255
    4f6e:	80 93 12 07 	sts	0x0712, r24
    4f72:	df 91       	pop	r29
    4f74:	cf 91       	pop	r28
    4f76:	1f 91       	pop	r17
    4f78:	0f 91       	pop	r16
    4f7a:	ff 90       	pop	r15
    4f7c:	ef 90       	pop	r14
    4f7e:	df 90       	pop	r13
    4f80:	cf 90       	pop	r12
    4f82:	08 95       	ret

00004f84 <TMRSRVC_open>:
    4f84:	88 e0       	ldi	r24, 0x08	; 8
    4f86:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    4f8a:	88 23       	and	r24, r24
    4f8c:	b9 f4       	brne	.+46     	; 0x4fbc <TMRSRVC_open+0x38>
    4f8e:	10 92 12 07 	sts	0x0712, r1
    4f92:	10 92 14 07 	sts	0x0714, r1
    4f96:	10 92 13 07 	sts	0x0713, r1
    4f9a:	10 92 e2 03 	sts	0x03E2, r1
    4f9e:	10 92 e3 03 	sts	0x03E3, r1
    4fa2:	80 e1       	ldi	r24, 0x10	; 16
    4fa4:	65 ec       	ldi	r22, 0xC5	; 197
    4fa6:	78 e2       	ldi	r23, 0x28	; 40
    4fa8:	0e 94 f8 27 	call	0x4ff0	; 0x4ff0 <__ISR_attach>
    4fac:	0e 94 cc 28 	call	0x5198	; 0x5198 <__TMRSRVC_init>
    4fb0:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <__TMRSRVC_start>
    4fb4:	88 e0       	ldi	r24, 0x08	; 8
    4fb6:	61 e0       	ldi	r22, 0x01	; 1
    4fb8:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <SYS_set_state>
    4fbc:	88 e0       	ldi	r24, 0x08	; 8
    4fbe:	91 e0       	ldi	r25, 0x01	; 1
    4fc0:	08 95       	ret

00004fc2 <__TMRSRVC_start>:
    4fc2:	ee e6       	ldi	r30, 0x6E	; 110
    4fc4:	f0 e0       	ldi	r31, 0x00	; 0
    4fc6:	80 81       	ld	r24, Z
    4fc8:	82 60       	ori	r24, 0x02	; 2
    4fca:	80 83       	st	Z, r24
    4fcc:	08 95       	ret

00004fce <TMRSRVC_start>:
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	80 93 e3 03 	sts	0x03E3, r24
    4fd4:	08 95       	ret

00004fd6 <I2C_enable>:
    4fd6:	80 91 15 07 	lds	r24, 0x0715
    4fda:	81 30       	cpi	r24, 0x01	; 1
    4fdc:	29 f4       	brne	.+10     	; 0x4fe8 <I2C_enable+0x12>
    4fde:	80 91 bc 00 	lds	r24, 0x00BC
    4fe2:	84 60       	ori	r24, 0x04	; 4
    4fe4:	80 93 bc 00 	sts	0x00BC, r24
    4fe8:	08 95       	ret

00004fea <__I2C_init>:
    4fea:	38 98       	cbi	0x07, 0	; 7
    4fec:	39 98       	cbi	0x07, 1	; 7
    4fee:	08 95       	ret

00004ff0 <__ISR_attach>:
    4ff0:	80 32       	cpi	r24, 0x20	; 32
    4ff2:	18 f0       	brcs	.+6      	; 0x4ffa <__ISR_attach+0xa>
    4ff4:	20 e0       	ldi	r18, 0x00	; 0
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	0a c0       	rjmp	.+20     	; 0x500e <__ISR_attach+0x1e>
    4ffa:	e8 2f       	mov	r30, r24
    4ffc:	f0 e0       	ldi	r31, 0x00	; 0
    4ffe:	ee 0f       	add	r30, r30
    5000:	ff 1f       	adc	r31, r31
    5002:	ee 56       	subi	r30, 0x6E	; 110
    5004:	fc 4f       	sbci	r31, 0xFC	; 252
    5006:	20 81       	ld	r18, Z
    5008:	31 81       	ldd	r19, Z+1	; 0x01
    500a:	71 83       	std	Z+1, r23	; 0x01
    500c:	60 83       	st	Z, r22
    500e:	c9 01       	movw	r24, r18
    5010:	08 95       	ret

00005012 <__ATMEGA_init>:
    5012:	24 9a       	sbi	0x04, 4	; 4
    5014:	2c 9a       	sbi	0x05, 4	; 5
    5016:	08 95       	ret

00005018 <SPI_default_config>:
    5018:	83 e5       	ldi	r24, 0x53	; 83
    501a:	8c bd       	out	0x2c, r24	; 44
    501c:	81 e0       	ldi	r24, 0x01	; 1
    501e:	8d bd       	out	0x2d, r24	; 45
    5020:	8d e0       	ldi	r24, 0x0D	; 13
    5022:	8a 95       	dec	r24
    5024:	f1 f7       	brne	.-4      	; 0x5022 <SPI_default_config+0xa>
    5026:	08 95       	ret

00005028 <SPI_ATtiny0_config>:
    5028:	83 e5       	ldi	r24, 0x53	; 83
    502a:	8c bd       	out	0x2c, r24	; 44
    502c:	1d bc       	out	0x2d, r1	; 45
    502e:	84 ef       	ldi	r24, 0xF4	; 244
    5030:	91 e0       	ldi	r25, 0x01	; 1
    5032:	01 97       	sbiw	r24, 0x01	; 1
    5034:	f1 f7       	brne	.-4      	; 0x5032 <SPI_ATtiny0_config+0xa>
    5036:	08 95       	ret

00005038 <SPI_PSXC_config>:
    5038:	8f e7       	ldi	r24, 0x7F	; 127
    503a:	8c bd       	out	0x2c, r24	; 44
    503c:	1d bc       	out	0x2d, r1	; 45
    503e:	84 ef       	ldi	r24, 0xF4	; 244
    5040:	91 e0       	ldi	r25, 0x01	; 1
    5042:	01 97       	sbiw	r24, 0x01	; 1
    5044:	f1 f7       	brne	.-4      	; 0x5042 <SPI_PSXC_config+0xa>
    5046:	08 95       	ret

00005048 <SPI_LCD_config>:
    5048:	83 e5       	ldi	r24, 0x53	; 83
    504a:	8c bd       	out	0x2c, r24	; 44
    504c:	81 e0       	ldi	r24, 0x01	; 1
    504e:	8d bd       	out	0x2d, r24	; 45
    5050:	8d e0       	ldi	r24, 0x0D	; 13
    5052:	8a 95       	dec	r24
    5054:	f1 f7       	brne	.-4      	; 0x5052 <SPI_LCD_config+0xa>
    5056:	08 95       	ret

00005058 <SPI_FLASH_config>:
    5058:	83 e5       	ldi	r24, 0x53	; 83
    505a:	8c bd       	out	0x2c, r24	; 44
    505c:	81 e0       	ldi	r24, 0x01	; 1
    505e:	8d bd       	out	0x2d, r24	; 45
    5060:	84 ef       	ldi	r24, 0xF4	; 244
    5062:	91 e0       	ldi	r25, 0x01	; 1
    5064:	01 97       	sbiw	r24, 0x01	; 1
    5066:	f1 f7       	brne	.-4      	; 0x5064 <SPI_FLASH_config+0xc>
    5068:	08 95       	ret

0000506a <__SPI_init>:
    506a:	25 9a       	sbi	0x04, 5	; 4
    506c:	26 98       	cbi	0x04, 6	; 4
    506e:	27 9a       	sbi	0x04, 7	; 4
    5070:	20 9a       	sbi	0x04, 0	; 4
    5072:	21 9a       	sbi	0x04, 1	; 4
    5074:	22 9a       	sbi	0x04, 2	; 4
    5076:	08 95       	ret

00005078 <__SPKR_close>:
    5078:	82 30       	cpi	r24, 0x02	; 2
    507a:	29 f4       	brne	.+10     	; 0x5086 <__SPKR_close+0xe>
    507c:	80 91 81 00 	lds	r24, 0x0081
    5080:	8e 7f       	andi	r24, 0xFE	; 254
    5082:	80 93 81 00 	sts	0x0081, r24
    5086:	80 91 72 03 	lds	r24, 0x0372
    508a:	81 30       	cpi	r24, 0x01	; 1
    508c:	31 f4       	brne	.+12     	; 0x509a <__SPKR_close+0x22>
    508e:	80 91 73 03 	lds	r24, 0x0373
    5092:	81 30       	cpi	r24, 0x01	; 1
    5094:	11 f4       	brne	.+4      	; 0x509a <__SPKR_close+0x22>
    5096:	00 00       	nop
    5098:	08 95       	ret
    509a:	80 91 72 03 	lds	r24, 0x0372
    509e:	81 30       	cpi	r24, 0x01	; 1
    50a0:	21 f0       	breq	.+8      	; 0x50aa <__SPKR_close+0x32>
    50a2:	80 91 73 03 	lds	r24, 0x0373
    50a6:	81 30       	cpi	r24, 0x01	; 1
    50a8:	11 f4       	brne	.+4      	; 0x50ae <__SPKR_close+0x36>
    50aa:	5f 98       	cbi	0x0b, 7	; 11
    50ac:	57 98       	cbi	0x0a, 7	; 10
    50ae:	08 95       	ret

000050b0 <STEPPER_set_decel_step_values>:
    50b0:	ef 92       	push	r14
    50b2:	ff 92       	push	r15
    50b4:	0f 93       	push	r16
    50b6:	1f 93       	push	r17
    50b8:	cf 93       	push	r28
    50ba:	df 93       	push	r29
    50bc:	eb 01       	movw	r28, r22
    50be:	88 23       	and	r24, r24
    50c0:	21 f0       	breq	.+8      	; 0x50ca <STEPPER_set_decel_step_values+0x1a>
    50c2:	81 30       	cpi	r24, 0x01	; 1
    50c4:	09 f0       	breq	.+2      	; 0x50c8 <STEPPER_set_decel_step_values+0x18>
    50c6:	5a c0       	rjmp	.+180    	; 0x517c <STEPPER_set_decel_step_values+0xcc>
    50c8:	2d c0       	rjmp	.+90     	; 0x5124 <STEPPER_set_decel_step_values+0x74>
    50ca:	9a 01       	movw	r18, r20
    50cc:	40 e0       	ldi	r20, 0x00	; 0
    50ce:	50 e0       	ldi	r21, 0x00	; 0
    50d0:	ca 01       	movw	r24, r20
    50d2:	b9 01       	movw	r22, r18
    50d4:	0e 94 8a 33 	call	0x6714	; 0x6714 <__mulsi3>
    50d8:	20 91 ac 06 	lds	r18, 0x06AC
    50dc:	30 91 ad 06 	lds	r19, 0x06AD
    50e0:	22 0f       	add	r18, r18
    50e2:	33 1f       	adc	r19, r19
    50e4:	40 e0       	ldi	r20, 0x00	; 0
    50e6:	50 e0       	ldi	r21, 0x00	; 0
    50e8:	0e 94 a9 33 	call	0x6752	; 0x6752 <__udivmodsi4>
    50ec:	79 01       	movw	r14, r18
    50ee:	8a 01       	movw	r16, r20
    50f0:	a8 01       	movw	r20, r16
    50f2:	97 01       	movw	r18, r14
    50f4:	22 0f       	add	r18, r18
    50f6:	33 1f       	adc	r19, r19
    50f8:	44 1f       	adc	r20, r20
    50fa:	55 1f       	adc	r21, r21
    50fc:	ce 01       	movw	r24, r28
    50fe:	a0 e0       	ldi	r26, 0x00	; 0
    5100:	b0 e0       	ldi	r27, 0x00	; 0
    5102:	82 17       	cp	r24, r18
    5104:	93 07       	cpc	r25, r19
    5106:	a4 07       	cpc	r26, r20
    5108:	b5 07       	cpc	r27, r21
    510a:	28 f0       	brcs	.+10     	; 0x5116 <STEPPER_set_decel_step_values+0x66>
    510c:	f0 92 b9 06 	sts	0x06B9, r15
    5110:	e0 92 b8 06 	sts	0x06B8, r14
    5114:	33 c0       	rjmp	.+102    	; 0x517c <STEPPER_set_decel_step_values+0xcc>
    5116:	d6 95       	lsr	r29
    5118:	c7 95       	ror	r28
    511a:	d0 93 b9 06 	sts	0x06B9, r29
    511e:	c0 93 b8 06 	sts	0x06B8, r28
    5122:	2c c0       	rjmp	.+88     	; 0x517c <STEPPER_set_decel_step_values+0xcc>
    5124:	9a 01       	movw	r18, r20
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	50 e0       	ldi	r21, 0x00	; 0
    512a:	ca 01       	movw	r24, r20
    512c:	b9 01       	movw	r22, r18
    512e:	0e 94 8a 33 	call	0x6714	; 0x6714 <__mulsi3>
    5132:	20 91 ae 06 	lds	r18, 0x06AE
    5136:	30 91 af 06 	lds	r19, 0x06AF
    513a:	22 0f       	add	r18, r18
    513c:	33 1f       	adc	r19, r19
    513e:	40 e0       	ldi	r20, 0x00	; 0
    5140:	50 e0       	ldi	r21, 0x00	; 0
    5142:	0e 94 a9 33 	call	0x6752	; 0x6752 <__udivmodsi4>
    5146:	79 01       	movw	r14, r18
    5148:	8a 01       	movw	r16, r20
    514a:	a8 01       	movw	r20, r16
    514c:	97 01       	movw	r18, r14
    514e:	22 0f       	add	r18, r18
    5150:	33 1f       	adc	r19, r19
    5152:	44 1f       	adc	r20, r20
    5154:	55 1f       	adc	r21, r21
    5156:	ce 01       	movw	r24, r28
    5158:	a0 e0       	ldi	r26, 0x00	; 0
    515a:	b0 e0       	ldi	r27, 0x00	; 0
    515c:	82 17       	cp	r24, r18
    515e:	93 07       	cpc	r25, r19
    5160:	a4 07       	cpc	r26, r20
    5162:	b5 07       	cpc	r27, r21
    5164:	28 f0       	brcs	.+10     	; 0x5170 <STEPPER_set_decel_step_values+0xc0>
    5166:	f0 92 bb 06 	sts	0x06BB, r15
    516a:	e0 92 ba 06 	sts	0x06BA, r14
    516e:	06 c0       	rjmp	.+12     	; 0x517c <STEPPER_set_decel_step_values+0xcc>
    5170:	d6 95       	lsr	r29
    5172:	c7 95       	ror	r28
    5174:	d0 93 bb 06 	sts	0x06BB, r29
    5178:	c0 93 ba 06 	sts	0x06BA, r28
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	1f 91       	pop	r17
    5182:	0f 91       	pop	r16
    5184:	ff 90       	pop	r15
    5186:	ef 90       	pop	r14
    5188:	08 95       	ret

0000518a <__TIMER0_COMPA_vect>:
    518a:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TMRSRVC_tick>
    518e:	0e 94 15 29 	call	0x522a	; 0x522a <STEPPER_clk>
    5192:	0e 94 ee 28 	call	0x51dc	; 0x51dc <SPKR_beep_clk>
    5196:	08 95       	ret

00005198 <__TMRSRVC_init>:
    5198:	84 b5       	in	r24, 0x24	; 36
    519a:	82 60       	ori	r24, 0x02	; 2
    519c:	84 bd       	out	0x24, r24	; 36
    519e:	85 b5       	in	r24, 0x25	; 37
    51a0:	84 60       	ori	r24, 0x04	; 4
    51a2:	85 bd       	out	0x25, r24	; 37
    51a4:	8e e4       	ldi	r24, 0x4E	; 78
    51a6:	87 bd       	out	0x27, r24	; 39
    51a8:	08 95       	ret

000051aa <TMRSRVC_tick>:
    51aa:	88 e0       	ldi	r24, 0x08	; 8
    51ac:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    51b0:	88 23       	and	r24, r24
    51b2:	11 f4       	brne	.+4      	; 0x51b8 <TMRSRVC_tick+0xe>
    51b4:	84 e0       	ldi	r24, 0x04	; 4
    51b6:	08 95       	ret
    51b8:	80 91 e3 03 	lds	r24, 0x03E3
    51bc:	88 23       	and	r24, r24
    51be:	11 f4       	brne	.+4      	; 0x51c4 <TMRSRVC_tick+0x1a>
    51c0:	83 e0       	ldi	r24, 0x03	; 3
    51c2:	08 95       	ret
    51c4:	80 91 e2 03 	lds	r24, 0x03E2
    51c8:	88 23       	and	r24, r24
    51ca:	11 f0       	breq	.+4      	; 0x51d0 <TMRSRVC_tick+0x26>
    51cc:	82 e0       	ldi	r24, 0x02	; 2
    51ce:	08 95       	ret
    51d0:	0e 94 62 2b 	call	0x56c4	; 0x56c4 <TMRSRVC_process>
    51d4:	81 30       	cpi	r24, 0x01	; 1
    51d6:	e1 f3       	breq	.-8      	; 0x51d0 <TMRSRVC_tick+0x26>
    51d8:	80 e0       	ldi	r24, 0x00	; 0
    51da:	08 95       	ret

000051dc <SPKR_beep_clk>:
    51dc:	80 91 73 03 	lds	r24, 0x0373
    51e0:	81 30       	cpi	r24, 0x01	; 1
    51e2:	11 f5       	brne	.+68     	; 0x5228 <SPKR_beep_clk+0x4c>
    51e4:	80 91 7c 03 	lds	r24, 0x037C
    51e8:	90 91 7d 03 	lds	r25, 0x037D
    51ec:	20 91 7e 03 	lds	r18, 0x037E
    51f0:	30 91 7f 03 	lds	r19, 0x037F
    51f4:	28 0f       	add	r18, r24
    51f6:	39 1f       	adc	r19, r25
    51f8:	30 93 7d 03 	sts	0x037D, r19
    51fc:	20 93 7c 03 	sts	0x037C, r18
    5200:	80 91 7c 03 	lds	r24, 0x037C
    5204:	90 91 7d 03 	lds	r25, 0x037D
    5208:	88 5e       	subi	r24, 0xE8	; 232
    520a:	93 40       	sbci	r25, 0x03	; 3
    520c:	6c f0       	brlt	.+26     	; 0x5228 <SPKR_beep_clk+0x4c>
    520e:	8b b1       	in	r24, 0x0b	; 11
    5210:	80 58       	subi	r24, 0x80	; 128
    5212:	8b b9       	out	0x0b, r24	; 11
    5214:	80 91 7c 03 	lds	r24, 0x037C
    5218:	90 91 7d 03 	lds	r25, 0x037D
    521c:	88 5e       	subi	r24, 0xE8	; 232
    521e:	93 40       	sbci	r25, 0x03	; 3
    5220:	90 93 7d 03 	sts	0x037D, r25
    5224:	80 93 7c 03 	sts	0x037C, r24
    5228:	08 95       	ret

0000522a <STEPPER_clk>:
    522a:	87 e0       	ldi	r24, 0x07	; 7
    522c:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <SYS_get_state>
    5230:	81 30       	cpi	r24, 0x01	; 1
    5232:	09 f0       	breq	.+2      	; 0x5236 <STEPPER_clk+0xc>
    5234:	aa c0       	rjmp	.+340    	; 0x538a <STEPPER_clk+0x160>
    5236:	80 91 ac 06 	lds	r24, 0x06AC
    523a:	90 91 ad 06 	lds	r25, 0x06AD
    523e:	89 2b       	or	r24, r25
    5240:	09 f1       	breq	.+66     	; 0x5284 <STEPPER_clk+0x5a>
    5242:	80 91 d0 06 	lds	r24, 0x06D0
    5246:	90 91 d1 06 	lds	r25, 0x06D1
    524a:	20 91 ac 06 	lds	r18, 0x06AC
    524e:	30 91 ad 06 	lds	r19, 0x06AD
    5252:	82 0f       	add	r24, r18
    5254:	93 1f       	adc	r25, r19
    5256:	90 93 d1 06 	sts	0x06D1, r25
    525a:	80 93 d0 06 	sts	0x06D0, r24
    525e:	80 91 d0 06 	lds	r24, 0x06D0
    5262:	90 91 d1 06 	lds	r25, 0x06D1
    5266:	88 5e       	subi	r24, 0xE8	; 232
    5268:	93 40       	sbci	r25, 0x03	; 3
    526a:	a4 f0       	brlt	.+40     	; 0x5294 <STEPPER_clk+0x6a>
    526c:	80 91 d0 06 	lds	r24, 0x06D0
    5270:	90 91 d1 06 	lds	r25, 0x06D1
    5274:	88 5e       	subi	r24, 0xE8	; 232
    5276:	93 40       	sbci	r25, 0x03	; 3
    5278:	90 93 d1 06 	sts	0x06D1, r25
    527c:	80 93 d0 06 	sts	0x06D0, r24
    5280:	41 e0       	ldi	r20, 0x01	; 1
    5282:	09 c0       	rjmp	.+18     	; 0x5296 <STEPPER_clk+0x6c>
    5284:	80 91 a4 06 	lds	r24, 0x06A4
    5288:	90 91 a5 06 	lds	r25, 0x06A5
    528c:	90 93 a9 06 	sts	0x06A9, r25
    5290:	80 93 a8 06 	sts	0x06A8, r24
    5294:	40 e0       	ldi	r20, 0x00	; 0
    5296:	80 91 ae 06 	lds	r24, 0x06AE
    529a:	90 91 af 06 	lds	r25, 0x06AF
    529e:	89 2b       	or	r24, r25
    52a0:	09 f1       	breq	.+66     	; 0x52e4 <STEPPER_clk+0xba>
    52a2:	80 91 d2 06 	lds	r24, 0x06D2
    52a6:	90 91 d3 06 	lds	r25, 0x06D3
    52aa:	20 91 ae 06 	lds	r18, 0x06AE
    52ae:	30 91 af 06 	lds	r19, 0x06AF
    52b2:	82 0f       	add	r24, r18
    52b4:	93 1f       	adc	r25, r19
    52b6:	90 93 d3 06 	sts	0x06D3, r25
    52ba:	80 93 d2 06 	sts	0x06D2, r24
    52be:	80 91 d2 06 	lds	r24, 0x06D2
    52c2:	90 91 d3 06 	lds	r25, 0x06D3
    52c6:	88 5e       	subi	r24, 0xE8	; 232
    52c8:	93 40       	sbci	r25, 0x03	; 3
    52ca:	a4 f0       	brlt	.+40     	; 0x52f4 <STEPPER_clk+0xca>
    52cc:	80 91 d2 06 	lds	r24, 0x06D2
    52d0:	90 91 d3 06 	lds	r25, 0x06D3
    52d4:	88 5e       	subi	r24, 0xE8	; 232
    52d6:	93 40       	sbci	r25, 0x03	; 3
    52d8:	90 93 d3 06 	sts	0x06D3, r25
    52dc:	80 93 d2 06 	sts	0x06D2, r24
    52e0:	61 e0       	ldi	r22, 0x01	; 1
    52e2:	09 c0       	rjmp	.+18     	; 0x52f6 <STEPPER_clk+0xcc>
    52e4:	80 91 a6 06 	lds	r24, 0x06A6
    52e8:	90 91 a7 06 	lds	r25, 0x06A7
    52ec:	90 93 ab 06 	sts	0x06AB, r25
    52f0:	80 93 aa 06 	sts	0x06AA, r24
    52f4:	60 e0       	ldi	r22, 0x00	; 0
    52f6:	84 2f       	mov	r24, r20
    52f8:	0e 94 c6 29 	call	0x538c	; 0x538c <STEPPER_process_accel>
    52fc:	80 91 cc 06 	lds	r24, 0x06CC
    5300:	90 91 cd 06 	lds	r25, 0x06CD
    5304:	20 91 a8 06 	lds	r18, 0x06A8
    5308:	30 91 a9 06 	lds	r19, 0x06A9
    530c:	28 0f       	add	r18, r24
    530e:	39 1f       	adc	r19, r25
    5310:	30 93 cd 06 	sts	0x06CD, r19
    5314:	20 93 cc 06 	sts	0x06CC, r18
    5318:	80 91 cc 06 	lds	r24, 0x06CC
    531c:	90 91 cd 06 	lds	r25, 0x06CD
    5320:	88 5e       	subi	r24, 0xE8	; 232
    5322:	93 40       	sbci	r25, 0x03	; 3
    5324:	14 f4       	brge	.+4      	; 0x532a <STEPPER_clk+0x100>
    5326:	40 e0       	ldi	r20, 0x00	; 0
    5328:	0b c0       	rjmp	.+22     	; 0x5340 <STEPPER_clk+0x116>
    532a:	80 91 cc 06 	lds	r24, 0x06CC
    532e:	90 91 cd 06 	lds	r25, 0x06CD
    5332:	88 5e       	subi	r24, 0xE8	; 232
    5334:	93 40       	sbci	r25, 0x03	; 3
    5336:	90 93 cd 06 	sts	0x06CD, r25
    533a:	80 93 cc 06 	sts	0x06CC, r24
    533e:	41 e0       	ldi	r20, 0x01	; 1
    5340:	80 91 ce 06 	lds	r24, 0x06CE
    5344:	90 91 cf 06 	lds	r25, 0x06CF
    5348:	20 91 aa 06 	lds	r18, 0x06AA
    534c:	30 91 ab 06 	lds	r19, 0x06AB
    5350:	28 0f       	add	r18, r24
    5352:	39 1f       	adc	r19, r25
    5354:	30 93 cf 06 	sts	0x06CF, r19
    5358:	20 93 ce 06 	sts	0x06CE, r18
    535c:	80 91 ce 06 	lds	r24, 0x06CE
    5360:	90 91 cf 06 	lds	r25, 0x06CF
    5364:	88 5e       	subi	r24, 0xE8	; 232
    5366:	93 40       	sbci	r25, 0x03	; 3
    5368:	14 f4       	brge	.+4      	; 0x536e <STEPPER_clk+0x144>
    536a:	60 e0       	ldi	r22, 0x00	; 0
    536c:	0b c0       	rjmp	.+22     	; 0x5384 <STEPPER_clk+0x15a>
    536e:	80 91 ce 06 	lds	r24, 0x06CE
    5372:	90 91 cf 06 	lds	r25, 0x06CF
    5376:	88 5e       	subi	r24, 0xE8	; 232
    5378:	93 40       	sbci	r25, 0x03	; 3
    537a:	90 93 cf 06 	sts	0x06CF, r25
    537e:	80 93 ce 06 	sts	0x06CE, r24
    5382:	61 e0       	ldi	r22, 0x01	; 1
    5384:	84 2f       	mov	r24, r20
    5386:	0e 94 0b 2a 	call	0x5416	; 0x5416 <STEPPER_process_run_mode>
    538a:	08 95       	ret

0000538c <STEPPER_process_accel>:
    538c:	88 23       	and	r24, r24
    538e:	f1 f0       	breq	.+60     	; 0x53cc <STEPPER_process_accel+0x40>
    5390:	20 91 a4 06 	lds	r18, 0x06A4
    5394:	30 91 a5 06 	lds	r19, 0x06A5
    5398:	80 91 a8 06 	lds	r24, 0x06A8
    539c:	90 91 a9 06 	lds	r25, 0x06A9
    53a0:	28 1b       	sub	r18, r24
    53a2:	39 0b       	sbc	r19, r25
    53a4:	12 16       	cp	r1, r18
    53a6:	13 06       	cpc	r1, r19
    53a8:	34 f4       	brge	.+12     	; 0x53b6 <STEPPER_process_accel+0x2a>
    53aa:	80 91 a8 06 	lds	r24, 0x06A8
    53ae:	90 91 a9 06 	lds	r25, 0x06A9
    53b2:	01 96       	adiw	r24, 0x01	; 1
    53b4:	07 c0       	rjmp	.+14     	; 0x53c4 <STEPPER_process_accel+0x38>
    53b6:	23 2b       	or	r18, r19
    53b8:	49 f0       	breq	.+18     	; 0x53cc <STEPPER_process_accel+0x40>
    53ba:	80 91 a8 06 	lds	r24, 0x06A8
    53be:	90 91 a9 06 	lds	r25, 0x06A9
    53c2:	01 97       	sbiw	r24, 0x01	; 1
    53c4:	90 93 a9 06 	sts	0x06A9, r25
    53c8:	80 93 a8 06 	sts	0x06A8, r24
    53cc:	66 23       	and	r22, r22
    53ce:	11 f1       	breq	.+68     	; 0x5414 <STEPPER_process_accel+0x88>
    53d0:	20 91 a6 06 	lds	r18, 0x06A6
    53d4:	30 91 a7 06 	lds	r19, 0x06A7
    53d8:	80 91 aa 06 	lds	r24, 0x06AA
    53dc:	90 91 ab 06 	lds	r25, 0x06AB
    53e0:	28 1b       	sub	r18, r24
    53e2:	39 0b       	sbc	r19, r25
    53e4:	12 16       	cp	r1, r18
    53e6:	13 06       	cpc	r1, r19
    53e8:	54 f4       	brge	.+20     	; 0x53fe <STEPPER_process_accel+0x72>
    53ea:	80 91 aa 06 	lds	r24, 0x06AA
    53ee:	90 91 ab 06 	lds	r25, 0x06AB
    53f2:	01 96       	adiw	r24, 0x01	; 1
    53f4:	90 93 ab 06 	sts	0x06AB, r25
    53f8:	80 93 aa 06 	sts	0x06AA, r24
    53fc:	08 95       	ret
    53fe:	23 2b       	or	r18, r19
    5400:	49 f0       	breq	.+18     	; 0x5414 <STEPPER_process_accel+0x88>
    5402:	80 91 aa 06 	lds	r24, 0x06AA
    5406:	90 91 ab 06 	lds	r25, 0x06AB
    540a:	01 97       	sbiw	r24, 0x01	; 1
    540c:	90 93 ab 06 	sts	0x06AB, r25
    5410:	80 93 aa 06 	sts	0x06AA, r24
    5414:	08 95       	ret

00005416 <STEPPER_process_run_mode>:
    5416:	0f 93       	push	r16
    5418:	1f 93       	push	r17
    541a:	18 2f       	mov	r17, r24
    541c:	06 2f       	mov	r16, r22
    541e:	80 91 d8 06 	lds	r24, 0x06D8
    5422:	88 23       	and	r24, r24
    5424:	09 f0       	breq	.+2      	; 0x5428 <STEPPER_process_run_mode+0x12>
    5426:	e7 c0       	rjmp	.+462    	; 0x55f6 <STEPPER_process_run_mode+0x1e0>
    5428:	80 91 c0 06 	lds	r24, 0x06C0
    542c:	88 23       	and	r24, r24
    542e:	09 f0       	breq	.+2      	; 0x5432 <STEPPER_process_run_mode+0x1c>
    5430:	5a c0       	rjmp	.+180    	; 0x54e6 <STEPPER_process_run_mode+0xd0>
    5432:	80 91 a8 06 	lds	r24, 0x06A8
    5436:	90 91 a9 06 	lds	r25, 0x06A9
    543a:	89 2b       	or	r24, r25
    543c:	e9 f4       	brne	.+58     	; 0x5478 <STEPPER_process_run_mode+0x62>
    543e:	80 91 e4 03 	lds	r24, 0x03E4
    5442:	83 7e       	andi	r24, 0xE3	; 227
    5444:	80 93 e4 03 	sts	0x03E4, r24
    5448:	10 92 c9 06 	sts	0x06C9, r1
    544c:	80 91 d4 06 	lds	r24, 0x06D4
    5450:	88 23       	and	r24, r24
    5452:	09 f4       	brne	.+2      	; 0x5456 <STEPPER_process_run_mode+0x40>
    5454:	5d c0       	rjmp	.+186    	; 0x5510 <STEPPER_process_run_mode+0xfa>
    5456:	60 91 c2 06 	lds	r22, 0x06C2
    545a:	80 e0       	ldi	r24, 0x00	; 0
    545c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <STEPPER_stop>
    5460:	e0 91 d6 06 	lds	r30, 0x06D6
    5464:	f0 91 d7 06 	lds	r31, 0x06D7
    5468:	30 97       	sbiw	r30, 0x00	; 0
    546a:	09 f4       	brne	.+2      	; 0x546e <STEPPER_process_run_mode+0x58>
    546c:	51 c0       	rjmp	.+162    	; 0x5510 <STEPPER_process_run_mode+0xfa>
    546e:	81 e0       	ldi	r24, 0x01	; 1
    5470:	80 83       	st	Z, r24
    5472:	10 92 d4 06 	sts	0x06D4, r1
    5476:	4c c0       	rjmp	.+152    	; 0x5510 <STEPPER_process_run_mode+0xfa>
    5478:	80 91 a2 06 	lds	r24, 0x06A2
    547c:	81 30       	cpi	r24, 0x01	; 1
    547e:	41 f4       	brne	.+16     	; 0x5490 <STEPPER_process_run_mode+0x7a>
    5480:	80 91 b4 06 	lds	r24, 0x06B4
    5484:	90 91 b5 06 	lds	r25, 0x06B5
    5488:	01 97       	sbiw	r24, 0x01	; 1
    548a:	11 f4       	brne	.+4      	; 0x5490 <STEPPER_process_run_mode+0x7a>
    548c:	11 e0       	ldi	r17, 0x01	; 1
    548e:	02 c0       	rjmp	.+4      	; 0x5494 <STEPPER_process_run_mode+0x7e>
    5490:	11 23       	and	r17, r17
    5492:	f1 f1       	breq	.+124    	; 0x5510 <STEPPER_process_run_mode+0xfa>
    5494:	e0 91 c7 06 	lds	r30, 0x06C7
    5498:	f0 e0       	ldi	r31, 0x00	; 0
    549a:	e1 5d       	subi	r30, 0xD1	; 209
    549c:	fc 4f       	sbci	r31, 0xFC	; 252
    549e:	90 91 e4 03 	lds	r25, 0x03E4
    54a2:	93 7e       	andi	r25, 0xE3	; 227
    54a4:	80 81       	ld	r24, Z
    54a6:	89 2b       	or	r24, r25
    54a8:	80 93 e4 03 	sts	0x03E4, r24
    54ac:	80 91 c5 06 	lds	r24, 0x06C5
    54b0:	88 23       	and	r24, r24
    54b2:	21 f4       	brne	.+8      	; 0x54bc <STEPPER_process_run_mode+0xa6>
    54b4:	80 91 c7 06 	lds	r24, 0x06C7
    54b8:	8f 5f       	subi	r24, 0xFF	; 255
    54ba:	03 c0       	rjmp	.+6      	; 0x54c2 <STEPPER_process_run_mode+0xac>
    54bc:	80 91 c7 06 	lds	r24, 0x06C7
    54c0:	81 50       	subi	r24, 0x01	; 1
    54c2:	80 93 c7 06 	sts	0x06C7, r24
    54c6:	80 91 c7 06 	lds	r24, 0x06C7
    54ca:	83 70       	andi	r24, 0x03	; 3
    54cc:	80 93 c7 06 	sts	0x06C7, r24
    54d0:	81 e0       	ldi	r24, 0x01	; 1
    54d2:	80 93 c9 06 	sts	0x06C9, r24
    54d6:	80 91 a2 06 	lds	r24, 0x06A2
    54da:	81 30       	cpi	r24, 0x01	; 1
    54dc:	c9 f4       	brne	.+50     	; 0x5510 <STEPPER_process_run_mode+0xfa>
    54de:	80 e0       	ldi	r24, 0x00	; 0
    54e0:	0e 94 0e 2b 	call	0x561c	; 0x561c <STEPPER_process_step_mode>
    54e4:	15 c0       	rjmp	.+42     	; 0x5510 <STEPPER_process_run_mode+0xfa>
    54e6:	90 91 e4 03 	lds	r25, 0x03E4
    54ea:	93 7e       	andi	r25, 0xE3	; 227
    54ec:	90 93 e4 03 	sts	0x03E4, r25
    54f0:	e0 91 c7 06 	lds	r30, 0x06C7
    54f4:	f0 e0       	ldi	r31, 0x00	; 0
    54f6:	e1 5d       	subi	r30, 0xD1	; 209
    54f8:	fc 4f       	sbci	r31, 0xFC	; 252
    54fa:	80 81       	ld	r24, Z
    54fc:	89 2b       	or	r24, r25
    54fe:	80 93 e4 03 	sts	0x03E4, r24
    5502:	82 e0       	ldi	r24, 0x02	; 2
    5504:	80 93 c9 06 	sts	0x06C9, r24
    5508:	10 92 a9 06 	sts	0x06A9, r1
    550c:	10 92 a8 06 	sts	0x06A8, r1
    5510:	80 91 c1 06 	lds	r24, 0x06C1
    5514:	88 23       	and	r24, r24
    5516:	09 f0       	breq	.+2      	; 0x551a <STEPPER_process_run_mode+0x104>
    5518:	59 c0       	rjmp	.+178    	; 0x55cc <STEPPER_process_run_mode+0x1b6>
    551a:	80 91 aa 06 	lds	r24, 0x06AA
    551e:	90 91 ab 06 	lds	r25, 0x06AB
    5522:	89 2b       	or	r24, r25
    5524:	e9 f4       	brne	.+58     	; 0x5560 <STEPPER_process_run_mode+0x14a>
    5526:	80 91 e4 03 	lds	r24, 0x03E4
    552a:	8f 71       	andi	r24, 0x1F	; 31
    552c:	80 93 e4 03 	sts	0x03E4, r24
    5530:	10 92 ca 06 	sts	0x06CA, r1
    5534:	80 91 d5 06 	lds	r24, 0x06D5
    5538:	88 23       	and	r24, r24
    553a:	09 f4       	brne	.+2      	; 0x553e <STEPPER_process_run_mode+0x128>
    553c:	5c c0       	rjmp	.+184    	; 0x55f6 <STEPPER_process_run_mode+0x1e0>
    553e:	60 91 c3 06 	lds	r22, 0x06C3
    5542:	81 e0       	ldi	r24, 0x01	; 1
    5544:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <STEPPER_stop>
    5548:	e0 91 d6 06 	lds	r30, 0x06D6
    554c:	f0 91 d7 06 	lds	r31, 0x06D7
    5550:	30 97       	sbiw	r30, 0x00	; 0
    5552:	09 f4       	brne	.+2      	; 0x5556 <STEPPER_process_run_mode+0x140>
    5554:	50 c0       	rjmp	.+160    	; 0x55f6 <STEPPER_process_run_mode+0x1e0>
    5556:	81 e0       	ldi	r24, 0x01	; 1
    5558:	81 83       	std	Z+1, r24	; 0x01
    555a:	10 92 d5 06 	sts	0x06D5, r1
    555e:	4b c0       	rjmp	.+150    	; 0x55f6 <STEPPER_process_run_mode+0x1e0>
    5560:	80 91 a3 06 	lds	r24, 0x06A3
    5564:	81 30       	cpi	r24, 0x01	; 1
    5566:	41 f4       	brne	.+16     	; 0x5578 <STEPPER_process_run_mode+0x162>
    5568:	80 91 b6 06 	lds	r24, 0x06B6
    556c:	90 91 b7 06 	lds	r25, 0x06B7
    5570:	01 97       	sbiw	r24, 0x01	; 1
    5572:	11 f4       	brne	.+4      	; 0x5578 <STEPPER_process_run_mode+0x162>
    5574:	01 e0       	ldi	r16, 0x01	; 1
    5576:	02 c0       	rjmp	.+4      	; 0x557c <STEPPER_process_run_mode+0x166>
    5578:	00 23       	and	r16, r16
    557a:	e9 f1       	breq	.+122    	; 0x55f6 <STEPPER_process_run_mode+0x1e0>
    557c:	e0 91 c8 06 	lds	r30, 0x06C8
    5580:	f0 e0       	ldi	r31, 0x00	; 0
    5582:	ed 5c       	subi	r30, 0xCD	; 205
    5584:	fc 4f       	sbci	r31, 0xFC	; 252
    5586:	90 91 e4 03 	lds	r25, 0x03E4
    558a:	9f 71       	andi	r25, 0x1F	; 31
    558c:	80 81       	ld	r24, Z
    558e:	89 2b       	or	r24, r25
    5590:	80 93 e4 03 	sts	0x03E4, r24
    5594:	80 91 c6 06 	lds	r24, 0x06C6
    5598:	88 23       	and	r24, r24
    559a:	21 f4       	brne	.+8      	; 0x55a4 <STEPPER_process_run_mode+0x18e>
    559c:	80 91 c8 06 	lds	r24, 0x06C8
    55a0:	8f 5f       	subi	r24, 0xFF	; 255
    55a2:	03 c0       	rjmp	.+6      	; 0x55aa <STEPPER_process_run_mode+0x194>
    55a4:	80 91 c8 06 	lds	r24, 0x06C8
    55a8:	81 50       	subi	r24, 0x01	; 1
    55aa:	80 93 c8 06 	sts	0x06C8, r24
    55ae:	80 91 c8 06 	lds	r24, 0x06C8
    55b2:	83 70       	andi	r24, 0x03	; 3
    55b4:	80 93 c8 06 	sts	0x06C8, r24
    55b8:	81 e0       	ldi	r24, 0x01	; 1
    55ba:	80 93 ca 06 	sts	0x06CA, r24
    55be:	80 91 a3 06 	lds	r24, 0x06A3
    55c2:	81 30       	cpi	r24, 0x01	; 1
    55c4:	c1 f4       	brne	.+48     	; 0x55f6 <STEPPER_process_run_mode+0x1e0>
    55c6:	0e 94 0e 2b 	call	0x561c	; 0x561c <STEPPER_process_step_mode>
    55ca:	15 c0       	rjmp	.+42     	; 0x55f6 <STEPPER_process_run_mode+0x1e0>
    55cc:	90 91 e4 03 	lds	r25, 0x03E4
    55d0:	9f 71       	andi	r25, 0x1F	; 31
    55d2:	90 93 e4 03 	sts	0x03E4, r25
    55d6:	e0 91 c8 06 	lds	r30, 0x06C8
    55da:	f0 e0       	ldi	r31, 0x00	; 0
    55dc:	ed 5c       	subi	r30, 0xCD	; 205
    55de:	fc 4f       	sbci	r31, 0xFC	; 252
    55e0:	80 81       	ld	r24, Z
    55e2:	89 2b       	or	r24, r25
    55e4:	80 93 e4 03 	sts	0x03E4, r24
    55e8:	82 e0       	ldi	r24, 0x02	; 2
    55ea:	80 93 ca 06 	sts	0x06CA, r24
    55ee:	10 92 ab 06 	sts	0x06AB, r1
    55f2:	10 92 aa 06 	sts	0x06AA, r1
    55f6:	80 91 cb 06 	lds	r24, 0x06CB
    55fa:	88 23       	and	r24, r24
    55fc:	31 f4       	brne	.+12     	; 0x560a <STEPPER_process_run_mode+0x1f4>
    55fe:	84 ee       	ldi	r24, 0xE4	; 228
    5600:	93 e0       	ldi	r25, 0x03	; 3
    5602:	61 2f       	mov	r22, r17
    5604:	40 2f       	mov	r20, r16
    5606:	0e 94 d0 2b 	call	0x57a0	; 0x57a0 <STEPPER_process_pwm>
    560a:	88 b1       	in	r24, 0x08	; 8
    560c:	83 70       	andi	r24, 0x03	; 3
    560e:	90 91 e4 03 	lds	r25, 0x03E4
    5612:	89 2b       	or	r24, r25
    5614:	88 b9       	out	0x08, r24	; 8
    5616:	1f 91       	pop	r17
    5618:	0f 91       	pop	r16
    561a:	08 95       	ret

0000561c <STEPPER_process_step_mode>:
    561c:	88 23       	and	r24, r24
    561e:	21 f0       	breq	.+8      	; 0x5628 <STEPPER_process_step_mode+0xc>
    5620:	81 30       	cpi	r24, 0x01	; 1
    5622:	09 f0       	breq	.+2      	; 0x5626 <STEPPER_process_step_mode+0xa>
    5624:	4e c0       	rjmp	.+156    	; 0x56c2 <STEPPER_process_step_mode+0xa6>
    5626:	27 c0       	rjmp	.+78     	; 0x5676 <STEPPER_process_step_mode+0x5a>
    5628:	80 91 b4 06 	lds	r24, 0x06B4
    562c:	90 91 b5 06 	lds	r25, 0x06B5
    5630:	89 2b       	or	r24, r25
    5632:	49 f0       	breq	.+18     	; 0x5646 <STEPPER_process_step_mode+0x2a>
    5634:	80 91 b4 06 	lds	r24, 0x06B4
    5638:	90 91 b5 06 	lds	r25, 0x06B5
    563c:	01 97       	sbiw	r24, 0x01	; 1
    563e:	90 93 b5 06 	sts	0x06B5, r25
    5642:	80 93 b4 06 	sts	0x06B4, r24
    5646:	80 91 d4 06 	lds	r24, 0x06D4
    564a:	88 23       	and	r24, r24
    564c:	d1 f5       	brne	.+116    	; 0x56c2 <STEPPER_process_step_mode+0xa6>
    564e:	20 91 b4 06 	lds	r18, 0x06B4
    5652:	30 91 b5 06 	lds	r19, 0x06B5
    5656:	80 91 b8 06 	lds	r24, 0x06B8
    565a:	90 91 b9 06 	lds	r25, 0x06B9
    565e:	28 17       	cp	r18, r24
    5660:	39 07       	cpc	r19, r25
    5662:	79 f5       	brne	.+94     	; 0x56c2 <STEPPER_process_step_mode+0xa6>
    5664:	80 e0       	ldi	r24, 0x00	; 0
    5666:	60 e0       	ldi	r22, 0x00	; 0
    5668:	70 e0       	ldi	r23, 0x00	; 0
    566a:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <STEPPER_set_speed>
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	80 93 d4 06 	sts	0x06D4, r24
    5674:	08 95       	ret
    5676:	80 91 b6 06 	lds	r24, 0x06B6
    567a:	90 91 b7 06 	lds	r25, 0x06B7
    567e:	89 2b       	or	r24, r25
    5680:	49 f0       	breq	.+18     	; 0x5694 <STEPPER_process_step_mode+0x78>
    5682:	80 91 b6 06 	lds	r24, 0x06B6
    5686:	90 91 b7 06 	lds	r25, 0x06B7
    568a:	01 97       	sbiw	r24, 0x01	; 1
    568c:	90 93 b7 06 	sts	0x06B7, r25
    5690:	80 93 b6 06 	sts	0x06B6, r24
    5694:	80 91 d5 06 	lds	r24, 0x06D5
    5698:	88 23       	and	r24, r24
    569a:	99 f4       	brne	.+38     	; 0x56c2 <STEPPER_process_step_mode+0xa6>
    569c:	20 91 b6 06 	lds	r18, 0x06B6
    56a0:	30 91 b7 06 	lds	r19, 0x06B7
    56a4:	80 91 ba 06 	lds	r24, 0x06BA
    56a8:	90 91 bb 06 	lds	r25, 0x06BB
    56ac:	28 17       	cp	r18, r24
    56ae:	39 07       	cpc	r19, r25
    56b0:	41 f4       	brne	.+16     	; 0x56c2 <STEPPER_process_step_mode+0xa6>
    56b2:	81 e0       	ldi	r24, 0x01	; 1
    56b4:	60 e0       	ldi	r22, 0x00	; 0
    56b6:	70 e0       	ldi	r23, 0x00	; 0
    56b8:	0e 94 0a 1e 	call	0x3c14	; 0x3c14 <STEPPER_set_speed>
    56bc:	81 e0       	ldi	r24, 0x01	; 1
    56be:	80 93 d5 06 	sts	0x06D5, r24
    56c2:	08 95       	ret

000056c4 <TMRSRVC_process>:
    56c4:	ff 92       	push	r15
    56c6:	0f 93       	push	r16
    56c8:	1f 93       	push	r17
    56ca:	cf 93       	push	r28
    56cc:	df 93       	push	r29
    56ce:	80 91 12 07 	lds	r24, 0x0712
    56d2:	88 23       	and	r24, r24
    56d4:	09 f4       	brne	.+2      	; 0x56d8 <TMRSRVC_process+0x14>
    56d6:	59 c0       	rjmp	.+178    	; 0x578a <TMRSRVC_process+0xc6>
    56d8:	00 91 13 07 	lds	r16, 0x0713
    56dc:	10 91 14 07 	lds	r17, 0x0714
    56e0:	f8 01       	movw	r30, r16
    56e2:	c0 81       	ld	r28, Z
    56e4:	d1 81       	ldd	r29, Z+1	; 0x01
    56e6:	8c 81       	ldd	r24, Y+4	; 0x04
    56e8:	9d 81       	ldd	r25, Y+5	; 0x05
    56ea:	01 97       	sbiw	r24, 0x01	; 1
    56ec:	9d 83       	std	Y+5, r25	; 0x05
    56ee:	8c 83       	std	Y+4, r24	; 0x04
    56f0:	18 16       	cp	r1, r24
    56f2:	19 06       	cpc	r1, r25
    56f4:	0c f4       	brge	.+2      	; 0x56f8 <TMRSRVC_process+0x34>
    56f6:	49 c0       	rjmp	.+146    	; 0x578a <TMRSRVC_process+0xc6>
    56f8:	89 81       	ldd	r24, Y+1	; 0x01
    56fa:	80 ff       	sbrs	r24, 0
    56fc:	05 c0       	rjmp	.+10     	; 0x5708 <TMRSRVC_process+0x44>
    56fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5700:	88 23       	and	r24, r24
    5702:	11 f4       	brne	.+4      	; 0x5708 <TMRSRVC_process+0x44>
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	8e 83       	std	Y+6, r24	; 0x06
    5708:	89 81       	ldd	r24, Y+1	; 0x01
    570a:	81 ff       	sbrs	r24, 1
    570c:	03 c0       	rjmp	.+6      	; 0x5714 <TMRSRVC_process+0x50>
    570e:	ef 81       	ldd	r30, Y+7	; 0x07
    5710:	f8 85       	ldd	r31, Y+8	; 0x08
    5712:	09 95       	icall
    5714:	80 91 12 07 	lds	r24, 0x0712
    5718:	82 30       	cpi	r24, 0x02	; 2
    571a:	a8 f0       	brcs	.+42     	; 0x5746 <TMRSRVC_process+0x82>
    571c:	f8 01       	movw	r30, r16
    571e:	82 81       	ldd	r24, Z+2	; 0x02
    5720:	93 81       	ldd	r25, Z+3	; 0x03
    5722:	90 93 14 07 	sts	0x0714, r25
    5726:	80 93 13 07 	sts	0x0713, r24
    572a:	13 82       	std	Z+3, r1	; 0x03
    572c:	12 82       	std	Z+2, r1	; 0x02
    572e:	e0 91 00 00 	lds	r30, 0x0000
    5732:	f0 91 01 00 	lds	r31, 0x0001
    5736:	84 81       	ldd	r24, Z+4	; 0x04
    5738:	95 81       	ldd	r25, Z+5	; 0x05
    573a:	18 16       	cp	r1, r24
    573c:	19 06       	cpc	r1, r25
    573e:	3c f0       	brlt	.+14     	; 0x574e <TMRSRVC_process+0x8a>
    5740:	ff 24       	eor	r15, r15
    5742:	f3 94       	inc	r15
    5744:	05 c0       	rjmp	.+10     	; 0x5750 <TMRSRVC_process+0x8c>
    5746:	10 92 14 07 	sts	0x0714, r1
    574a:	10 92 13 07 	sts	0x0713, r1
    574e:	ff 24       	eor	r15, r15
    5750:	80 91 12 07 	lds	r24, 0x0712
    5754:	81 50       	subi	r24, 0x01	; 1
    5756:	80 93 12 07 	sts	0x0712, r24
    575a:	80 91 12 07 	lds	r24, 0x0712
    575e:	88 23       	and	r24, r24
    5760:	11 f4       	brne	.+4      	; 0x5766 <TMRSRVC_process+0xa2>
    5762:	0e 94 cd 2b 	call	0x579a	; 0x579a <TMRSRVC_stop>
    5766:	89 81       	ldd	r24, Y+1	; 0x01
    5768:	82 ff       	sbrs	r24, 2
    576a:	08 c0       	rjmp	.+16     	; 0x577c <TMRSRVC_process+0xb8>
    576c:	8a 81       	ldd	r24, Y+2	; 0x02
    576e:	9b 81       	ldd	r25, Y+3	; 0x03
    5770:	9d 83       	std	Y+5, r25	; 0x05
    5772:	8c 83       	std	Y+4, r24	; 0x04
    5774:	c8 01       	movw	r24, r16
    5776:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <TMRSRVC_insert>
    577a:	08 c0       	rjmp	.+16     	; 0x578c <TMRSRVC_process+0xc8>
    577c:	c8 01       	movw	r24, r16
    577e:	0e 94 af 34 	call	0x695e	; 0x695e <free>
    5782:	89 81       	ldd	r24, Y+1	; 0x01
    5784:	8f 7e       	andi	r24, 0xEF	; 239
    5786:	89 83       	std	Y+1, r24	; 0x01
    5788:	01 c0       	rjmp	.+2      	; 0x578c <TMRSRVC_process+0xc8>
    578a:	ff 24       	eor	r15, r15
    578c:	8f 2d       	mov	r24, r15
    578e:	df 91       	pop	r29
    5790:	cf 91       	pop	r28
    5792:	1f 91       	pop	r17
    5794:	0f 91       	pop	r16
    5796:	ff 90       	pop	r15
    5798:	08 95       	ret

0000579a <TMRSRVC_stop>:
    579a:	10 92 e3 03 	sts	0x03E3, r1
    579e:	08 95       	ret

000057a0 <STEPPER_process_pwm>:
    57a0:	fc 01       	movw	r30, r24
    57a2:	80 91 c9 06 	lds	r24, 0x06C9
    57a6:	82 30       	cpi	r24, 0x02	; 2
    57a8:	69 f4       	brne	.+26     	; 0x57c4 <STEPPER_process_pwm+0x24>
    57aa:	80 91 e8 03 	lds	r24, 0x03E8
    57ae:	91 e0       	ldi	r25, 0x01	; 1
    57b0:	89 27       	eor	r24, r25
    57b2:	80 93 e8 03 	sts	0x03E8, r24
    57b6:	88 23       	and	r24, r24
    57b8:	09 f0       	breq	.+2      	; 0x57bc <STEPPER_process_pwm+0x1c>
    57ba:	3e c0       	rjmp	.+124    	; 0x5838 <STEPPER_process_pwm+0x98>
    57bc:	80 81       	ld	r24, Z
    57be:	83 7e       	andi	r24, 0xE3	; 227
    57c0:	80 83       	st	Z, r24
    57c2:	3a c0       	rjmp	.+116    	; 0x5838 <STEPPER_process_pwm+0x98>
    57c4:	80 91 a8 06 	lds	r24, 0x06A8
    57c8:	90 91 a9 06 	lds	r25, 0x06A9
    57cc:	c3 97       	sbiw	r24, 0x33	; 51
    57ce:	a4 f5       	brge	.+104    	; 0x5838 <STEPPER_process_pwm+0x98>
    57d0:	66 23       	and	r22, r22
    57d2:	d1 f0       	breq	.+52     	; 0x5808 <STEPPER_process_pwm+0x68>
    57d4:	20 91 a8 06 	lds	r18, 0x06A8
    57d8:	30 91 a9 06 	lds	r19, 0x06A9
    57dc:	80 e6       	ldi	r24, 0x60	; 96
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	bc 01       	movw	r22, r24
    57e2:	26 9f       	mul	r18, r22
    57e4:	c0 01       	movw	r24, r0
    57e6:	27 9f       	mul	r18, r23
    57e8:	90 0d       	add	r25, r0
    57ea:	36 9f       	mul	r19, r22
    57ec:	90 0d       	add	r25, r0
    57ee:	11 24       	eor	r1, r1
    57f0:	88 0f       	add	r24, r24
    57f2:	89 2f       	mov	r24, r25
    57f4:	88 1f       	adc	r24, r24
    57f6:	99 0b       	sbc	r25, r25
    57f8:	90 93 bd 06 	sts	0x06BD, r25
    57fc:	80 93 bc 06 	sts	0x06BC, r24
    5800:	81 e0       	ldi	r24, 0x01	; 1
    5802:	80 93 e6 03 	sts	0x03E6, r24
    5806:	18 c0       	rjmp	.+48     	; 0x5838 <STEPPER_process_pwm+0x98>
    5808:	80 91 e6 03 	lds	r24, 0x03E6
    580c:	88 23       	and	r24, r24
    580e:	a1 f0       	breq	.+40     	; 0x5838 <STEPPER_process_pwm+0x98>
    5810:	80 91 bc 06 	lds	r24, 0x06BC
    5814:	90 91 bd 06 	lds	r25, 0x06BD
    5818:	01 97       	sbiw	r24, 0x01	; 1
    581a:	90 93 bd 06 	sts	0x06BD, r25
    581e:	80 93 bc 06 	sts	0x06BC, r24
    5822:	80 91 bc 06 	lds	r24, 0x06BC
    5826:	90 91 bd 06 	lds	r25, 0x06BD
    582a:	89 2b       	or	r24, r25
    582c:	29 f4       	brne	.+10     	; 0x5838 <STEPPER_process_pwm+0x98>
    582e:	80 81       	ld	r24, Z
    5830:	83 7e       	andi	r24, 0xE3	; 227
    5832:	80 83       	st	Z, r24
    5834:	10 92 e6 03 	sts	0x03E6, r1
    5838:	80 91 ca 06 	lds	r24, 0x06CA
    583c:	82 30       	cpi	r24, 0x02	; 2
    583e:	69 f4       	brne	.+26     	; 0x585a <STEPPER_process_pwm+0xba>
    5840:	80 91 e7 03 	lds	r24, 0x03E7
    5844:	91 e0       	ldi	r25, 0x01	; 1
    5846:	89 27       	eor	r24, r25
    5848:	80 93 e7 03 	sts	0x03E7, r24
    584c:	88 23       	and	r24, r24
    584e:	09 f0       	breq	.+2      	; 0x5852 <STEPPER_process_pwm+0xb2>
    5850:	3e c0       	rjmp	.+124    	; 0x58ce <STEPPER_process_pwm+0x12e>
    5852:	80 81       	ld	r24, Z
    5854:	8f 71       	andi	r24, 0x1F	; 31
    5856:	80 83       	st	Z, r24
    5858:	08 95       	ret
    585a:	80 91 aa 06 	lds	r24, 0x06AA
    585e:	90 91 ab 06 	lds	r25, 0x06AB
    5862:	c3 97       	sbiw	r24, 0x33	; 51
    5864:	a4 f5       	brge	.+104    	; 0x58ce <STEPPER_process_pwm+0x12e>
    5866:	44 23       	and	r20, r20
    5868:	d1 f0       	breq	.+52     	; 0x589e <STEPPER_process_pwm+0xfe>
    586a:	20 91 aa 06 	lds	r18, 0x06AA
    586e:	30 91 ab 06 	lds	r19, 0x06AB
    5872:	80 e6       	ldi	r24, 0x60	; 96
    5874:	90 e0       	ldi	r25, 0x00	; 0
    5876:	ac 01       	movw	r20, r24
    5878:	24 9f       	mul	r18, r20
    587a:	c0 01       	movw	r24, r0
    587c:	25 9f       	mul	r18, r21
    587e:	90 0d       	add	r25, r0
    5880:	34 9f       	mul	r19, r20
    5882:	90 0d       	add	r25, r0
    5884:	11 24       	eor	r1, r1
    5886:	88 0f       	add	r24, r24
    5888:	89 2f       	mov	r24, r25
    588a:	88 1f       	adc	r24, r24
    588c:	99 0b       	sbc	r25, r25
    588e:	90 93 bf 06 	sts	0x06BF, r25
    5892:	80 93 be 06 	sts	0x06BE, r24
    5896:	81 e0       	ldi	r24, 0x01	; 1
    5898:	80 93 e5 03 	sts	0x03E5, r24
    589c:	08 95       	ret
    589e:	80 91 e5 03 	lds	r24, 0x03E5
    58a2:	88 23       	and	r24, r24
    58a4:	a1 f0       	breq	.+40     	; 0x58ce <STEPPER_process_pwm+0x12e>
    58a6:	80 91 be 06 	lds	r24, 0x06BE
    58aa:	90 91 bf 06 	lds	r25, 0x06BF
    58ae:	01 97       	sbiw	r24, 0x01	; 1
    58b0:	90 93 bf 06 	sts	0x06BF, r25
    58b4:	80 93 be 06 	sts	0x06BE, r24
    58b8:	80 91 be 06 	lds	r24, 0x06BE
    58bc:	90 91 bf 06 	lds	r25, 0x06BF
    58c0:	89 2b       	or	r24, r25
    58c2:	29 f4       	brne	.+10     	; 0x58ce <STEPPER_process_pwm+0x12e>
    58c4:	80 81       	ld	r24, Z
    58c6:	8f 71       	andi	r24, 0x1F	; 31
    58c8:	80 83       	st	Z, r24
    58ca:	10 92 e5 03 	sts	0x03E5, r1
    58ce:	08 95       	ret

000058d0 <__subsf3>:
    58d0:	50 58       	subi	r21, 0x80	; 128

000058d2 <__addsf3>:
    58d2:	bb 27       	eor	r27, r27
    58d4:	aa 27       	eor	r26, r26
    58d6:	0e d0       	rcall	.+28     	; 0x58f4 <__addsf3x>
    58d8:	75 c1       	rjmp	.+746    	; 0x5bc4 <__fp_round>
    58da:	66 d1       	rcall	.+716    	; 0x5ba8 <__fp_pscA>
    58dc:	30 f0       	brcs	.+12     	; 0x58ea <__addsf3+0x18>
    58de:	6b d1       	rcall	.+726    	; 0x5bb6 <__fp_pscB>
    58e0:	20 f0       	brcs	.+8      	; 0x58ea <__addsf3+0x18>
    58e2:	31 f4       	brne	.+12     	; 0x58f0 <__addsf3+0x1e>
    58e4:	9f 3f       	cpi	r25, 0xFF	; 255
    58e6:	11 f4       	brne	.+4      	; 0x58ec <__addsf3+0x1a>
    58e8:	1e f4       	brtc	.+6      	; 0x58f0 <__addsf3+0x1e>
    58ea:	5b c1       	rjmp	.+694    	; 0x5ba2 <__fp_nan>
    58ec:	0e f4       	brtc	.+2      	; 0x58f0 <__addsf3+0x1e>
    58ee:	e0 95       	com	r30
    58f0:	e7 fb       	bst	r30, 7
    58f2:	51 c1       	rjmp	.+674    	; 0x5b96 <__fp_inf>

000058f4 <__addsf3x>:
    58f4:	e9 2f       	mov	r30, r25
    58f6:	77 d1       	rcall	.+750    	; 0x5be6 <__fp_split3>
    58f8:	80 f3       	brcs	.-32     	; 0x58da <__addsf3+0x8>
    58fa:	ba 17       	cp	r27, r26
    58fc:	62 07       	cpc	r22, r18
    58fe:	73 07       	cpc	r23, r19
    5900:	84 07       	cpc	r24, r20
    5902:	95 07       	cpc	r25, r21
    5904:	18 f0       	brcs	.+6      	; 0x590c <__addsf3x+0x18>
    5906:	71 f4       	brne	.+28     	; 0x5924 <__addsf3x+0x30>
    5908:	9e f5       	brtc	.+102    	; 0x5970 <__addsf3x+0x7c>
    590a:	8f c1       	rjmp	.+798    	; 0x5c2a <__fp_zero>
    590c:	0e f4       	brtc	.+2      	; 0x5910 <__addsf3x+0x1c>
    590e:	e0 95       	com	r30
    5910:	0b 2e       	mov	r0, r27
    5912:	ba 2f       	mov	r27, r26
    5914:	a0 2d       	mov	r26, r0
    5916:	0b 01       	movw	r0, r22
    5918:	b9 01       	movw	r22, r18
    591a:	90 01       	movw	r18, r0
    591c:	0c 01       	movw	r0, r24
    591e:	ca 01       	movw	r24, r20
    5920:	a0 01       	movw	r20, r0
    5922:	11 24       	eor	r1, r1
    5924:	ff 27       	eor	r31, r31
    5926:	59 1b       	sub	r21, r25
    5928:	99 f0       	breq	.+38     	; 0x5950 <__addsf3x+0x5c>
    592a:	59 3f       	cpi	r21, 0xF9	; 249
    592c:	50 f4       	brcc	.+20     	; 0x5942 <__addsf3x+0x4e>
    592e:	50 3e       	cpi	r21, 0xE0	; 224
    5930:	68 f1       	brcs	.+90     	; 0x598c <__addsf3x+0x98>
    5932:	1a 16       	cp	r1, r26
    5934:	f0 40       	sbci	r31, 0x00	; 0
    5936:	a2 2f       	mov	r26, r18
    5938:	23 2f       	mov	r18, r19
    593a:	34 2f       	mov	r19, r20
    593c:	44 27       	eor	r20, r20
    593e:	58 5f       	subi	r21, 0xF8	; 248
    5940:	f3 cf       	rjmp	.-26     	; 0x5928 <__addsf3x+0x34>
    5942:	46 95       	lsr	r20
    5944:	37 95       	ror	r19
    5946:	27 95       	ror	r18
    5948:	a7 95       	ror	r26
    594a:	f0 40       	sbci	r31, 0x00	; 0
    594c:	53 95       	inc	r21
    594e:	c9 f7       	brne	.-14     	; 0x5942 <__addsf3x+0x4e>
    5950:	7e f4       	brtc	.+30     	; 0x5970 <__addsf3x+0x7c>
    5952:	1f 16       	cp	r1, r31
    5954:	ba 0b       	sbc	r27, r26
    5956:	62 0b       	sbc	r22, r18
    5958:	73 0b       	sbc	r23, r19
    595a:	84 0b       	sbc	r24, r20
    595c:	ba f0       	brmi	.+46     	; 0x598c <__addsf3x+0x98>
    595e:	91 50       	subi	r25, 0x01	; 1
    5960:	a1 f0       	breq	.+40     	; 0x598a <__addsf3x+0x96>
    5962:	ff 0f       	add	r31, r31
    5964:	bb 1f       	adc	r27, r27
    5966:	66 1f       	adc	r22, r22
    5968:	77 1f       	adc	r23, r23
    596a:	88 1f       	adc	r24, r24
    596c:	c2 f7       	brpl	.-16     	; 0x595e <__addsf3x+0x6a>
    596e:	0e c0       	rjmp	.+28     	; 0x598c <__addsf3x+0x98>
    5970:	ba 0f       	add	r27, r26
    5972:	62 1f       	adc	r22, r18
    5974:	73 1f       	adc	r23, r19
    5976:	84 1f       	adc	r24, r20
    5978:	48 f4       	brcc	.+18     	; 0x598c <__addsf3x+0x98>
    597a:	87 95       	ror	r24
    597c:	77 95       	ror	r23
    597e:	67 95       	ror	r22
    5980:	b7 95       	ror	r27
    5982:	f7 95       	ror	r31
    5984:	9e 3f       	cpi	r25, 0xFE	; 254
    5986:	08 f0       	brcs	.+2      	; 0x598a <__addsf3x+0x96>
    5988:	b3 cf       	rjmp	.-154    	; 0x58f0 <__addsf3+0x1e>
    598a:	93 95       	inc	r25
    598c:	88 0f       	add	r24, r24
    598e:	08 f0       	brcs	.+2      	; 0x5992 <__addsf3x+0x9e>
    5990:	99 27       	eor	r25, r25
    5992:	ee 0f       	add	r30, r30
    5994:	97 95       	ror	r25
    5996:	87 95       	ror	r24
    5998:	08 95       	ret

0000599a <__cmpsf2>:
    599a:	d9 d0       	rcall	.+434    	; 0x5b4e <__fp_cmp>
    599c:	08 f4       	brcc	.+2      	; 0x59a0 <__cmpsf2+0x6>
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	08 95       	ret

000059a2 <__divsf3>:
    59a2:	0c d0       	rcall	.+24     	; 0x59bc <__divsf3x>
    59a4:	0f c1       	rjmp	.+542    	; 0x5bc4 <__fp_round>
    59a6:	07 d1       	rcall	.+526    	; 0x5bb6 <__fp_pscB>
    59a8:	40 f0       	brcs	.+16     	; 0x59ba <__divsf3+0x18>
    59aa:	fe d0       	rcall	.+508    	; 0x5ba8 <__fp_pscA>
    59ac:	30 f0       	brcs	.+12     	; 0x59ba <__divsf3+0x18>
    59ae:	21 f4       	brne	.+8      	; 0x59b8 <__divsf3+0x16>
    59b0:	5f 3f       	cpi	r21, 0xFF	; 255
    59b2:	19 f0       	breq	.+6      	; 0x59ba <__divsf3+0x18>
    59b4:	f0 c0       	rjmp	.+480    	; 0x5b96 <__fp_inf>
    59b6:	51 11       	cpse	r21, r1
    59b8:	39 c1       	rjmp	.+626    	; 0x5c2c <__fp_szero>
    59ba:	f3 c0       	rjmp	.+486    	; 0x5ba2 <__fp_nan>

000059bc <__divsf3x>:
    59bc:	14 d1       	rcall	.+552    	; 0x5be6 <__fp_split3>
    59be:	98 f3       	brcs	.-26     	; 0x59a6 <__divsf3+0x4>

000059c0 <__divsf3_pse>:
    59c0:	99 23       	and	r25, r25
    59c2:	c9 f3       	breq	.-14     	; 0x59b6 <__divsf3+0x14>
    59c4:	55 23       	and	r21, r21
    59c6:	b1 f3       	breq	.-20     	; 0x59b4 <__divsf3+0x12>
    59c8:	95 1b       	sub	r25, r21
    59ca:	55 0b       	sbc	r21, r21
    59cc:	bb 27       	eor	r27, r27
    59ce:	aa 27       	eor	r26, r26
    59d0:	62 17       	cp	r22, r18
    59d2:	73 07       	cpc	r23, r19
    59d4:	84 07       	cpc	r24, r20
    59d6:	38 f0       	brcs	.+14     	; 0x59e6 <__divsf3_pse+0x26>
    59d8:	9f 5f       	subi	r25, 0xFF	; 255
    59da:	5f 4f       	sbci	r21, 0xFF	; 255
    59dc:	22 0f       	add	r18, r18
    59de:	33 1f       	adc	r19, r19
    59e0:	44 1f       	adc	r20, r20
    59e2:	aa 1f       	adc	r26, r26
    59e4:	a9 f3       	breq	.-22     	; 0x59d0 <__divsf3_pse+0x10>
    59e6:	33 d0       	rcall	.+102    	; 0x5a4e <__divsf3_pse+0x8e>
    59e8:	0e 2e       	mov	r0, r30
    59ea:	3a f0       	brmi	.+14     	; 0x59fa <__divsf3_pse+0x3a>
    59ec:	e0 e8       	ldi	r30, 0x80	; 128
    59ee:	30 d0       	rcall	.+96     	; 0x5a50 <__divsf3_pse+0x90>
    59f0:	91 50       	subi	r25, 0x01	; 1
    59f2:	50 40       	sbci	r21, 0x00	; 0
    59f4:	e6 95       	lsr	r30
    59f6:	00 1c       	adc	r0, r0
    59f8:	ca f7       	brpl	.-14     	; 0x59ec <__divsf3_pse+0x2c>
    59fa:	29 d0       	rcall	.+82     	; 0x5a4e <__divsf3_pse+0x8e>
    59fc:	fe 2f       	mov	r31, r30
    59fe:	27 d0       	rcall	.+78     	; 0x5a4e <__divsf3_pse+0x8e>
    5a00:	66 0f       	add	r22, r22
    5a02:	77 1f       	adc	r23, r23
    5a04:	88 1f       	adc	r24, r24
    5a06:	bb 1f       	adc	r27, r27
    5a08:	26 17       	cp	r18, r22
    5a0a:	37 07       	cpc	r19, r23
    5a0c:	48 07       	cpc	r20, r24
    5a0e:	ab 07       	cpc	r26, r27
    5a10:	b0 e8       	ldi	r27, 0x80	; 128
    5a12:	09 f0       	breq	.+2      	; 0x5a16 <__divsf3_pse+0x56>
    5a14:	bb 0b       	sbc	r27, r27
    5a16:	80 2d       	mov	r24, r0
    5a18:	bf 01       	movw	r22, r30
    5a1a:	ff 27       	eor	r31, r31
    5a1c:	93 58       	subi	r25, 0x83	; 131
    5a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a20:	2a f0       	brmi	.+10     	; 0x5a2c <__divsf3_pse+0x6c>
    5a22:	9e 3f       	cpi	r25, 0xFE	; 254
    5a24:	51 05       	cpc	r21, r1
    5a26:	68 f0       	brcs	.+26     	; 0x5a42 <__divsf3_pse+0x82>
    5a28:	b6 c0       	rjmp	.+364    	; 0x5b96 <__fp_inf>
    5a2a:	00 c1       	rjmp	.+512    	; 0x5c2c <__fp_szero>
    5a2c:	5f 3f       	cpi	r21, 0xFF	; 255
    5a2e:	ec f3       	brlt	.-6      	; 0x5a2a <__divsf3_pse+0x6a>
    5a30:	98 3e       	cpi	r25, 0xE8	; 232
    5a32:	dc f3       	brlt	.-10     	; 0x5a2a <__divsf3_pse+0x6a>
    5a34:	86 95       	lsr	r24
    5a36:	77 95       	ror	r23
    5a38:	67 95       	ror	r22
    5a3a:	b7 95       	ror	r27
    5a3c:	f7 95       	ror	r31
    5a3e:	9f 5f       	subi	r25, 0xFF	; 255
    5a40:	c9 f7       	brne	.-14     	; 0x5a34 <__divsf3_pse+0x74>
    5a42:	88 0f       	add	r24, r24
    5a44:	91 1d       	adc	r25, r1
    5a46:	96 95       	lsr	r25
    5a48:	87 95       	ror	r24
    5a4a:	97 f9       	bld	r25, 7
    5a4c:	08 95       	ret
    5a4e:	e1 e0       	ldi	r30, 0x01	; 1
    5a50:	66 0f       	add	r22, r22
    5a52:	77 1f       	adc	r23, r23
    5a54:	88 1f       	adc	r24, r24
    5a56:	bb 1f       	adc	r27, r27
    5a58:	62 17       	cp	r22, r18
    5a5a:	73 07       	cpc	r23, r19
    5a5c:	84 07       	cpc	r24, r20
    5a5e:	ba 07       	cpc	r27, r26
    5a60:	20 f0       	brcs	.+8      	; 0x5a6a <__divsf3_pse+0xaa>
    5a62:	62 1b       	sub	r22, r18
    5a64:	73 0b       	sbc	r23, r19
    5a66:	84 0b       	sbc	r24, r20
    5a68:	ba 0b       	sbc	r27, r26
    5a6a:	ee 1f       	adc	r30, r30
    5a6c:	88 f7       	brcc	.-30     	; 0x5a50 <__divsf3_pse+0x90>
    5a6e:	e0 95       	com	r30
    5a70:	08 95       	ret

00005a72 <__fixsfsi>:
    5a72:	04 d0       	rcall	.+8      	; 0x5a7c <__fixunssfsi>
    5a74:	68 94       	set
    5a76:	b1 11       	cpse	r27, r1
    5a78:	d9 c0       	rjmp	.+434    	; 0x5c2c <__fp_szero>
    5a7a:	08 95       	ret

00005a7c <__fixunssfsi>:
    5a7c:	bc d0       	rcall	.+376    	; 0x5bf6 <__fp_splitA>
    5a7e:	88 f0       	brcs	.+34     	; 0x5aa2 <__fixunssfsi+0x26>
    5a80:	9f 57       	subi	r25, 0x7F	; 127
    5a82:	90 f0       	brcs	.+36     	; 0x5aa8 <__fixunssfsi+0x2c>
    5a84:	b9 2f       	mov	r27, r25
    5a86:	99 27       	eor	r25, r25
    5a88:	b7 51       	subi	r27, 0x17	; 23
    5a8a:	a0 f0       	brcs	.+40     	; 0x5ab4 <__fixunssfsi+0x38>
    5a8c:	d1 f0       	breq	.+52     	; 0x5ac2 <__fixunssfsi+0x46>
    5a8e:	66 0f       	add	r22, r22
    5a90:	77 1f       	adc	r23, r23
    5a92:	88 1f       	adc	r24, r24
    5a94:	99 1f       	adc	r25, r25
    5a96:	1a f0       	brmi	.+6      	; 0x5a9e <__fixunssfsi+0x22>
    5a98:	ba 95       	dec	r27
    5a9a:	c9 f7       	brne	.-14     	; 0x5a8e <__fixunssfsi+0x12>
    5a9c:	12 c0       	rjmp	.+36     	; 0x5ac2 <__fixunssfsi+0x46>
    5a9e:	b1 30       	cpi	r27, 0x01	; 1
    5aa0:	81 f0       	breq	.+32     	; 0x5ac2 <__fixunssfsi+0x46>
    5aa2:	c3 d0       	rcall	.+390    	; 0x5c2a <__fp_zero>
    5aa4:	b1 e0       	ldi	r27, 0x01	; 1
    5aa6:	08 95       	ret
    5aa8:	c0 c0       	rjmp	.+384    	; 0x5c2a <__fp_zero>
    5aaa:	67 2f       	mov	r22, r23
    5aac:	78 2f       	mov	r23, r24
    5aae:	88 27       	eor	r24, r24
    5ab0:	b8 5f       	subi	r27, 0xF8	; 248
    5ab2:	39 f0       	breq	.+14     	; 0x5ac2 <__fixunssfsi+0x46>
    5ab4:	b9 3f       	cpi	r27, 0xF9	; 249
    5ab6:	cc f3       	brlt	.-14     	; 0x5aaa <__fixunssfsi+0x2e>
    5ab8:	86 95       	lsr	r24
    5aba:	77 95       	ror	r23
    5abc:	67 95       	ror	r22
    5abe:	b3 95       	inc	r27
    5ac0:	d9 f7       	brne	.-10     	; 0x5ab8 <__fixunssfsi+0x3c>
    5ac2:	3e f4       	brtc	.+14     	; 0x5ad2 <__fixunssfsi+0x56>
    5ac4:	90 95       	com	r25
    5ac6:	80 95       	com	r24
    5ac8:	70 95       	com	r23
    5aca:	61 95       	neg	r22
    5acc:	7f 4f       	sbci	r23, 0xFF	; 255
    5ace:	8f 4f       	sbci	r24, 0xFF	; 255
    5ad0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ad2:	08 95       	ret

00005ad4 <__floatunsisf>:
    5ad4:	e8 94       	clt
    5ad6:	09 c0       	rjmp	.+18     	; 0x5aea <__floatsisf+0x12>

00005ad8 <__floatsisf>:
    5ad8:	97 fb       	bst	r25, 7
    5ada:	3e f4       	brtc	.+14     	; 0x5aea <__floatsisf+0x12>
    5adc:	90 95       	com	r25
    5ade:	80 95       	com	r24
    5ae0:	70 95       	com	r23
    5ae2:	61 95       	neg	r22
    5ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    5aea:	99 23       	and	r25, r25
    5aec:	a9 f0       	breq	.+42     	; 0x5b18 <__floatsisf+0x40>
    5aee:	f9 2f       	mov	r31, r25
    5af0:	96 e9       	ldi	r25, 0x96	; 150
    5af2:	bb 27       	eor	r27, r27
    5af4:	93 95       	inc	r25
    5af6:	f6 95       	lsr	r31
    5af8:	87 95       	ror	r24
    5afa:	77 95       	ror	r23
    5afc:	67 95       	ror	r22
    5afe:	b7 95       	ror	r27
    5b00:	f1 11       	cpse	r31, r1
    5b02:	f8 cf       	rjmp	.-16     	; 0x5af4 <__floatsisf+0x1c>
    5b04:	fa f4       	brpl	.+62     	; 0x5b44 <__floatsisf+0x6c>
    5b06:	bb 0f       	add	r27, r27
    5b08:	11 f4       	brne	.+4      	; 0x5b0e <__floatsisf+0x36>
    5b0a:	60 ff       	sbrs	r22, 0
    5b0c:	1b c0       	rjmp	.+54     	; 0x5b44 <__floatsisf+0x6c>
    5b0e:	6f 5f       	subi	r22, 0xFF	; 255
    5b10:	7f 4f       	sbci	r23, 0xFF	; 255
    5b12:	8f 4f       	sbci	r24, 0xFF	; 255
    5b14:	9f 4f       	sbci	r25, 0xFF	; 255
    5b16:	16 c0       	rjmp	.+44     	; 0x5b44 <__floatsisf+0x6c>
    5b18:	88 23       	and	r24, r24
    5b1a:	11 f0       	breq	.+4      	; 0x5b20 <__floatsisf+0x48>
    5b1c:	96 e9       	ldi	r25, 0x96	; 150
    5b1e:	11 c0       	rjmp	.+34     	; 0x5b42 <__floatsisf+0x6a>
    5b20:	77 23       	and	r23, r23
    5b22:	21 f0       	breq	.+8      	; 0x5b2c <__floatsisf+0x54>
    5b24:	9e e8       	ldi	r25, 0x8E	; 142
    5b26:	87 2f       	mov	r24, r23
    5b28:	76 2f       	mov	r23, r22
    5b2a:	05 c0       	rjmp	.+10     	; 0x5b36 <__floatsisf+0x5e>
    5b2c:	66 23       	and	r22, r22
    5b2e:	71 f0       	breq	.+28     	; 0x5b4c <__floatsisf+0x74>
    5b30:	96 e8       	ldi	r25, 0x86	; 134
    5b32:	86 2f       	mov	r24, r22
    5b34:	70 e0       	ldi	r23, 0x00	; 0
    5b36:	60 e0       	ldi	r22, 0x00	; 0
    5b38:	2a f0       	brmi	.+10     	; 0x5b44 <__floatsisf+0x6c>
    5b3a:	9a 95       	dec	r25
    5b3c:	66 0f       	add	r22, r22
    5b3e:	77 1f       	adc	r23, r23
    5b40:	88 1f       	adc	r24, r24
    5b42:	da f7       	brpl	.-10     	; 0x5b3a <__floatsisf+0x62>
    5b44:	88 0f       	add	r24, r24
    5b46:	96 95       	lsr	r25
    5b48:	87 95       	ror	r24
    5b4a:	97 f9       	bld	r25, 7
    5b4c:	08 95       	ret

00005b4e <__fp_cmp>:
    5b4e:	99 0f       	add	r25, r25
    5b50:	00 08       	sbc	r0, r0
    5b52:	55 0f       	add	r21, r21
    5b54:	aa 0b       	sbc	r26, r26
    5b56:	e0 e8       	ldi	r30, 0x80	; 128
    5b58:	fe ef       	ldi	r31, 0xFE	; 254
    5b5a:	16 16       	cp	r1, r22
    5b5c:	17 06       	cpc	r1, r23
    5b5e:	e8 07       	cpc	r30, r24
    5b60:	f9 07       	cpc	r31, r25
    5b62:	c0 f0       	brcs	.+48     	; 0x5b94 <__fp_cmp+0x46>
    5b64:	12 16       	cp	r1, r18
    5b66:	13 06       	cpc	r1, r19
    5b68:	e4 07       	cpc	r30, r20
    5b6a:	f5 07       	cpc	r31, r21
    5b6c:	98 f0       	brcs	.+38     	; 0x5b94 <__fp_cmp+0x46>
    5b6e:	62 1b       	sub	r22, r18
    5b70:	73 0b       	sbc	r23, r19
    5b72:	84 0b       	sbc	r24, r20
    5b74:	95 0b       	sbc	r25, r21
    5b76:	39 f4       	brne	.+14     	; 0x5b86 <__fp_cmp+0x38>
    5b78:	0a 26       	eor	r0, r26
    5b7a:	61 f0       	breq	.+24     	; 0x5b94 <__fp_cmp+0x46>
    5b7c:	23 2b       	or	r18, r19
    5b7e:	24 2b       	or	r18, r20
    5b80:	25 2b       	or	r18, r21
    5b82:	21 f4       	brne	.+8      	; 0x5b8c <__fp_cmp+0x3e>
    5b84:	08 95       	ret
    5b86:	0a 26       	eor	r0, r26
    5b88:	09 f4       	brne	.+2      	; 0x5b8c <__fp_cmp+0x3e>
    5b8a:	a1 40       	sbci	r26, 0x01	; 1
    5b8c:	a6 95       	lsr	r26
    5b8e:	8f ef       	ldi	r24, 0xFF	; 255
    5b90:	81 1d       	adc	r24, r1
    5b92:	81 1d       	adc	r24, r1
    5b94:	08 95       	ret

00005b96 <__fp_inf>:
    5b96:	97 f9       	bld	r25, 7
    5b98:	9f 67       	ori	r25, 0x7F	; 127
    5b9a:	80 e8       	ldi	r24, 0x80	; 128
    5b9c:	70 e0       	ldi	r23, 0x00	; 0
    5b9e:	60 e0       	ldi	r22, 0x00	; 0
    5ba0:	08 95       	ret

00005ba2 <__fp_nan>:
    5ba2:	9f ef       	ldi	r25, 0xFF	; 255
    5ba4:	80 ec       	ldi	r24, 0xC0	; 192
    5ba6:	08 95       	ret

00005ba8 <__fp_pscA>:
    5ba8:	00 24       	eor	r0, r0
    5baa:	0a 94       	dec	r0
    5bac:	16 16       	cp	r1, r22
    5bae:	17 06       	cpc	r1, r23
    5bb0:	18 06       	cpc	r1, r24
    5bb2:	09 06       	cpc	r0, r25
    5bb4:	08 95       	ret

00005bb6 <__fp_pscB>:
    5bb6:	00 24       	eor	r0, r0
    5bb8:	0a 94       	dec	r0
    5bba:	12 16       	cp	r1, r18
    5bbc:	13 06       	cpc	r1, r19
    5bbe:	14 06       	cpc	r1, r20
    5bc0:	05 06       	cpc	r0, r21
    5bc2:	08 95       	ret

00005bc4 <__fp_round>:
    5bc4:	09 2e       	mov	r0, r25
    5bc6:	03 94       	inc	r0
    5bc8:	00 0c       	add	r0, r0
    5bca:	11 f4       	brne	.+4      	; 0x5bd0 <__fp_round+0xc>
    5bcc:	88 23       	and	r24, r24
    5bce:	52 f0       	brmi	.+20     	; 0x5be4 <__fp_round+0x20>
    5bd0:	bb 0f       	add	r27, r27
    5bd2:	40 f4       	brcc	.+16     	; 0x5be4 <__fp_round+0x20>
    5bd4:	bf 2b       	or	r27, r31
    5bd6:	11 f4       	brne	.+4      	; 0x5bdc <__fp_round+0x18>
    5bd8:	60 ff       	sbrs	r22, 0
    5bda:	04 c0       	rjmp	.+8      	; 0x5be4 <__fp_round+0x20>
    5bdc:	6f 5f       	subi	r22, 0xFF	; 255
    5bde:	7f 4f       	sbci	r23, 0xFF	; 255
    5be0:	8f 4f       	sbci	r24, 0xFF	; 255
    5be2:	9f 4f       	sbci	r25, 0xFF	; 255
    5be4:	08 95       	ret

00005be6 <__fp_split3>:
    5be6:	57 fd       	sbrc	r21, 7
    5be8:	90 58       	subi	r25, 0x80	; 128
    5bea:	44 0f       	add	r20, r20
    5bec:	55 1f       	adc	r21, r21
    5bee:	59 f0       	breq	.+22     	; 0x5c06 <__fp_splitA+0x10>
    5bf0:	5f 3f       	cpi	r21, 0xFF	; 255
    5bf2:	71 f0       	breq	.+28     	; 0x5c10 <__fp_splitA+0x1a>
    5bf4:	47 95       	ror	r20

00005bf6 <__fp_splitA>:
    5bf6:	88 0f       	add	r24, r24
    5bf8:	97 fb       	bst	r25, 7
    5bfa:	99 1f       	adc	r25, r25
    5bfc:	61 f0       	breq	.+24     	; 0x5c16 <__fp_splitA+0x20>
    5bfe:	9f 3f       	cpi	r25, 0xFF	; 255
    5c00:	79 f0       	breq	.+30     	; 0x5c20 <__fp_splitA+0x2a>
    5c02:	87 95       	ror	r24
    5c04:	08 95       	ret
    5c06:	12 16       	cp	r1, r18
    5c08:	13 06       	cpc	r1, r19
    5c0a:	14 06       	cpc	r1, r20
    5c0c:	55 1f       	adc	r21, r21
    5c0e:	f2 cf       	rjmp	.-28     	; 0x5bf4 <__fp_split3+0xe>
    5c10:	46 95       	lsr	r20
    5c12:	f1 df       	rcall	.-30     	; 0x5bf6 <__fp_splitA>
    5c14:	08 c0       	rjmp	.+16     	; 0x5c26 <__fp_splitA+0x30>
    5c16:	16 16       	cp	r1, r22
    5c18:	17 06       	cpc	r1, r23
    5c1a:	18 06       	cpc	r1, r24
    5c1c:	99 1f       	adc	r25, r25
    5c1e:	f1 cf       	rjmp	.-30     	; 0x5c02 <__fp_splitA+0xc>
    5c20:	86 95       	lsr	r24
    5c22:	71 05       	cpc	r23, r1
    5c24:	61 05       	cpc	r22, r1
    5c26:	08 94       	sec
    5c28:	08 95       	ret

00005c2a <__fp_zero>:
    5c2a:	e8 94       	clt

00005c2c <__fp_szero>:
    5c2c:	bb 27       	eor	r27, r27
    5c2e:	66 27       	eor	r22, r22
    5c30:	77 27       	eor	r23, r23
    5c32:	cb 01       	movw	r24, r22
    5c34:	97 f9       	bld	r25, 7
    5c36:	08 95       	ret

00005c38 <__gesf2>:
    5c38:	8a df       	rcall	.-236    	; 0x5b4e <__fp_cmp>
    5c3a:	08 f4       	brcc	.+2      	; 0x5c3e <__gesf2+0x6>
    5c3c:	8f ef       	ldi	r24, 0xFF	; 255
    5c3e:	08 95       	ret

00005c40 <lrint>:
    5c40:	da df       	rcall	.-76     	; 0x5bf6 <__fp_splitA>
    5c42:	a8 f1       	brcs	.+106    	; 0x5cae <lrint+0x6e>
    5c44:	9e 57       	subi	r25, 0x7E	; 126
    5c46:	a8 f1       	brcs	.+106    	; 0x5cb2 <lrint+0x72>
    5c48:	98 51       	subi	r25, 0x18	; 24
    5c4a:	60 f0       	brcs	.+24     	; 0x5c64 <lrint+0x24>
    5c4c:	39 f1       	breq	.+78     	; 0x5c9c <lrint+0x5c>
    5c4e:	98 30       	cpi	r25, 0x08	; 8
    5c50:	70 f5       	brcc	.+92     	; 0x5cae <lrint+0x6e>
    5c52:	09 2e       	mov	r0, r25
    5c54:	99 27       	eor	r25, r25
    5c56:	66 0f       	add	r22, r22
    5c58:	77 1f       	adc	r23, r23
    5c5a:	88 1f       	adc	r24, r24
    5c5c:	99 1f       	adc	r25, r25
    5c5e:	0a 94       	dec	r0
    5c60:	d1 f7       	brne	.-12     	; 0x5c56 <lrint+0x16>
    5c62:	1c c0       	rjmp	.+56     	; 0x5c9c <lrint+0x5c>
    5c64:	bb 27       	eor	r27, r27
    5c66:	99 3f       	cpi	r25, 0xF9	; 249
    5c68:	4c f4       	brge	.+18     	; 0x5c7c <lrint+0x3c>
    5c6a:	b1 11       	cpse	r27, r1
    5c6c:	b1 e0       	ldi	r27, 0x01	; 1
    5c6e:	b6 2b       	or	r27, r22
    5c70:	67 2f       	mov	r22, r23
    5c72:	78 2f       	mov	r23, r24
    5c74:	88 27       	eor	r24, r24
    5c76:	98 5f       	subi	r25, 0xF8	; 248
    5c78:	b1 f7       	brne	.-20     	; 0x5c66 <lrint+0x26>
    5c7a:	08 c0       	rjmp	.+16     	; 0x5c8c <lrint+0x4c>
    5c7c:	86 95       	lsr	r24
    5c7e:	77 95       	ror	r23
    5c80:	67 95       	ror	r22
    5c82:	b7 95       	ror	r27
    5c84:	08 f4       	brcc	.+2      	; 0x5c88 <lrint+0x48>
    5c86:	b1 60       	ori	r27, 0x01	; 1
    5c88:	93 95       	inc	r25
    5c8a:	c1 f7       	brne	.-16     	; 0x5c7c <lrint+0x3c>
    5c8c:	bb 0f       	add	r27, r27
    5c8e:	30 f4       	brcc	.+12     	; 0x5c9c <lrint+0x5c>
    5c90:	11 f4       	brne	.+4      	; 0x5c96 <lrint+0x56>
    5c92:	60 ff       	sbrs	r22, 0
    5c94:	03 c0       	rjmp	.+6      	; 0x5c9c <lrint+0x5c>
    5c96:	6f 5f       	subi	r22, 0xFF	; 255
    5c98:	7f 4f       	sbci	r23, 0xFF	; 255
    5c9a:	8f 4f       	sbci	r24, 0xFF	; 255
    5c9c:	3e f4       	brtc	.+14     	; 0x5cac <lrint+0x6c>
    5c9e:	90 95       	com	r25
    5ca0:	80 95       	com	r24
    5ca2:	70 95       	com	r23
    5ca4:	61 95       	neg	r22
    5ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    5caa:	9f 4f       	sbci	r25, 0xFF	; 255
    5cac:	08 95       	ret
    5cae:	68 94       	set
    5cb0:	bd cf       	rjmp	.-134    	; 0x5c2c <__fp_szero>
    5cb2:	bb cf       	rjmp	.-138    	; 0x5c2a <__fp_zero>

00005cb4 <__mulsf3>:
    5cb4:	0b d0       	rcall	.+22     	; 0x5ccc <__mulsf3x>
    5cb6:	86 cf       	rjmp	.-244    	; 0x5bc4 <__fp_round>
    5cb8:	77 df       	rcall	.-274    	; 0x5ba8 <__fp_pscA>
    5cba:	28 f0       	brcs	.+10     	; 0x5cc6 <__mulsf3+0x12>
    5cbc:	7c df       	rcall	.-264    	; 0x5bb6 <__fp_pscB>
    5cbe:	18 f0       	brcs	.+6      	; 0x5cc6 <__mulsf3+0x12>
    5cc0:	95 23       	and	r25, r21
    5cc2:	09 f0       	breq	.+2      	; 0x5cc6 <__mulsf3+0x12>
    5cc4:	68 cf       	rjmp	.-304    	; 0x5b96 <__fp_inf>
    5cc6:	6d cf       	rjmp	.-294    	; 0x5ba2 <__fp_nan>
    5cc8:	11 24       	eor	r1, r1
    5cca:	b0 cf       	rjmp	.-160    	; 0x5c2c <__fp_szero>

00005ccc <__mulsf3x>:
    5ccc:	8c df       	rcall	.-232    	; 0x5be6 <__fp_split3>
    5cce:	a0 f3       	brcs	.-24     	; 0x5cb8 <__mulsf3+0x4>

00005cd0 <__mulsf3_pse>:
    5cd0:	95 9f       	mul	r25, r21
    5cd2:	d1 f3       	breq	.-12     	; 0x5cc8 <__mulsf3+0x14>
    5cd4:	95 0f       	add	r25, r21
    5cd6:	50 e0       	ldi	r21, 0x00	; 0
    5cd8:	55 1f       	adc	r21, r21
    5cda:	62 9f       	mul	r22, r18
    5cdc:	f0 01       	movw	r30, r0
    5cde:	72 9f       	mul	r23, r18
    5ce0:	bb 27       	eor	r27, r27
    5ce2:	f0 0d       	add	r31, r0
    5ce4:	b1 1d       	adc	r27, r1
    5ce6:	63 9f       	mul	r22, r19
    5ce8:	aa 27       	eor	r26, r26
    5cea:	f0 0d       	add	r31, r0
    5cec:	b1 1d       	adc	r27, r1
    5cee:	aa 1f       	adc	r26, r26
    5cf0:	64 9f       	mul	r22, r20
    5cf2:	66 27       	eor	r22, r22
    5cf4:	b0 0d       	add	r27, r0
    5cf6:	a1 1d       	adc	r26, r1
    5cf8:	66 1f       	adc	r22, r22
    5cfa:	82 9f       	mul	r24, r18
    5cfc:	22 27       	eor	r18, r18
    5cfe:	b0 0d       	add	r27, r0
    5d00:	a1 1d       	adc	r26, r1
    5d02:	62 1f       	adc	r22, r18
    5d04:	73 9f       	mul	r23, r19
    5d06:	b0 0d       	add	r27, r0
    5d08:	a1 1d       	adc	r26, r1
    5d0a:	62 1f       	adc	r22, r18
    5d0c:	83 9f       	mul	r24, r19
    5d0e:	a0 0d       	add	r26, r0
    5d10:	61 1d       	adc	r22, r1
    5d12:	22 1f       	adc	r18, r18
    5d14:	74 9f       	mul	r23, r20
    5d16:	33 27       	eor	r19, r19
    5d18:	a0 0d       	add	r26, r0
    5d1a:	61 1d       	adc	r22, r1
    5d1c:	23 1f       	adc	r18, r19
    5d1e:	84 9f       	mul	r24, r20
    5d20:	60 0d       	add	r22, r0
    5d22:	21 1d       	adc	r18, r1
    5d24:	82 2f       	mov	r24, r18
    5d26:	76 2f       	mov	r23, r22
    5d28:	6a 2f       	mov	r22, r26
    5d2a:	11 24       	eor	r1, r1
    5d2c:	9f 57       	subi	r25, 0x7F	; 127
    5d2e:	50 40       	sbci	r21, 0x00	; 0
    5d30:	8a f0       	brmi	.+34     	; 0x5d54 <__mulsf3_pse+0x84>
    5d32:	e1 f0       	breq	.+56     	; 0x5d6c <__mulsf3_pse+0x9c>
    5d34:	88 23       	and	r24, r24
    5d36:	4a f0       	brmi	.+18     	; 0x5d4a <__mulsf3_pse+0x7a>
    5d38:	ee 0f       	add	r30, r30
    5d3a:	ff 1f       	adc	r31, r31
    5d3c:	bb 1f       	adc	r27, r27
    5d3e:	66 1f       	adc	r22, r22
    5d40:	77 1f       	adc	r23, r23
    5d42:	88 1f       	adc	r24, r24
    5d44:	91 50       	subi	r25, 0x01	; 1
    5d46:	50 40       	sbci	r21, 0x00	; 0
    5d48:	a9 f7       	brne	.-22     	; 0x5d34 <__mulsf3_pse+0x64>
    5d4a:	9e 3f       	cpi	r25, 0xFE	; 254
    5d4c:	51 05       	cpc	r21, r1
    5d4e:	70 f0       	brcs	.+28     	; 0x5d6c <__mulsf3_pse+0x9c>
    5d50:	22 cf       	rjmp	.-444    	; 0x5b96 <__fp_inf>
    5d52:	6c cf       	rjmp	.-296    	; 0x5c2c <__fp_szero>
    5d54:	5f 3f       	cpi	r21, 0xFF	; 255
    5d56:	ec f3       	brlt	.-6      	; 0x5d52 <__mulsf3_pse+0x82>
    5d58:	98 3e       	cpi	r25, 0xE8	; 232
    5d5a:	dc f3       	brlt	.-10     	; 0x5d52 <__mulsf3_pse+0x82>
    5d5c:	86 95       	lsr	r24
    5d5e:	77 95       	ror	r23
    5d60:	67 95       	ror	r22
    5d62:	b7 95       	ror	r27
    5d64:	f7 95       	ror	r31
    5d66:	e7 95       	ror	r30
    5d68:	9f 5f       	subi	r25, 0xFF	; 255
    5d6a:	c1 f7       	brne	.-16     	; 0x5d5c <__mulsf3_pse+0x8c>
    5d6c:	fe 2b       	or	r31, r30
    5d6e:	88 0f       	add	r24, r24
    5d70:	91 1d       	adc	r25, r1
    5d72:	96 95       	lsr	r25
    5d74:	87 95       	ror	r24
    5d76:	97 f9       	bld	r25, 7
    5d78:	08 95       	ret

00005d7a <pow>:
    5d7a:	fa 01       	movw	r30, r20
    5d7c:	ee 0f       	add	r30, r30
    5d7e:	ff 1f       	adc	r31, r31
    5d80:	30 96       	adiw	r30, 0x00	; 0
    5d82:	21 05       	cpc	r18, r1
    5d84:	31 05       	cpc	r19, r1
    5d86:	99 f1       	breq	.+102    	; 0x5dee <pow+0x74>
    5d88:	61 15       	cp	r22, r1
    5d8a:	71 05       	cpc	r23, r1
    5d8c:	61 f4       	brne	.+24     	; 0x5da6 <pow+0x2c>
    5d8e:	80 38       	cpi	r24, 0x80	; 128
    5d90:	bf e3       	ldi	r27, 0x3F	; 63
    5d92:	9b 07       	cpc	r25, r27
    5d94:	49 f1       	breq	.+82     	; 0x5de8 <pow+0x6e>
    5d96:	68 94       	set
    5d98:	90 38       	cpi	r25, 0x80	; 128
    5d9a:	81 05       	cpc	r24, r1
    5d9c:	61 f0       	breq	.+24     	; 0x5db6 <pow+0x3c>
    5d9e:	80 38       	cpi	r24, 0x80	; 128
    5da0:	bf ef       	ldi	r27, 0xFF	; 255
    5da2:	9b 07       	cpc	r25, r27
    5da4:	41 f0       	breq	.+16     	; 0x5db6 <pow+0x3c>
    5da6:	99 23       	and	r25, r25
    5da8:	42 f5       	brpl	.+80     	; 0x5dfa <pow+0x80>
    5daa:	ff 3f       	cpi	r31, 0xFF	; 255
    5dac:	e1 05       	cpc	r30, r1
    5dae:	31 05       	cpc	r19, r1
    5db0:	21 05       	cpc	r18, r1
    5db2:	11 f1       	breq	.+68     	; 0x5df8 <pow+0x7e>
    5db4:	e8 94       	clt
    5db6:	08 94       	sec
    5db8:	e7 95       	ror	r30
    5dba:	d9 01       	movw	r26, r18
    5dbc:	aa 23       	and	r26, r26
    5dbe:	29 f4       	brne	.+10     	; 0x5dca <pow+0x50>
    5dc0:	ab 2f       	mov	r26, r27
    5dc2:	be 2f       	mov	r27, r30
    5dc4:	f8 5f       	subi	r31, 0xF8	; 248
    5dc6:	d0 f3       	brcs	.-12     	; 0x5dbc <pow+0x42>
    5dc8:	10 c0       	rjmp	.+32     	; 0x5dea <pow+0x70>
    5dca:	ff 5f       	subi	r31, 0xFF	; 255
    5dcc:	70 f4       	brcc	.+28     	; 0x5dea <pow+0x70>
    5dce:	a6 95       	lsr	r26
    5dd0:	e0 f7       	brcc	.-8      	; 0x5dca <pow+0x50>
    5dd2:	f7 39       	cpi	r31, 0x97	; 151
    5dd4:	50 f0       	brcs	.+20     	; 0x5dea <pow+0x70>
    5dd6:	19 f0       	breq	.+6      	; 0x5dde <pow+0x64>
    5dd8:	ff 3a       	cpi	r31, 0xAF	; 175
    5dda:	38 f4       	brcc	.+14     	; 0x5dea <pow+0x70>
    5ddc:	9f 77       	andi	r25, 0x7F	; 127
    5dde:	9f 93       	push	r25
    5de0:	0c d0       	rcall	.+24     	; 0x5dfa <pow+0x80>
    5de2:	0f 90       	pop	r0
    5de4:	07 fc       	sbrc	r0, 7
    5de6:	90 58       	subi	r25, 0x80	; 128
    5de8:	08 95       	ret
    5dea:	3e f0       	brts	.+14     	; 0x5dfa <pow+0x80>
    5dec:	da ce       	rjmp	.-588    	; 0x5ba2 <__fp_nan>
    5dee:	60 e0       	ldi	r22, 0x00	; 0
    5df0:	70 e0       	ldi	r23, 0x00	; 0
    5df2:	80 e8       	ldi	r24, 0x80	; 128
    5df4:	9f e3       	ldi	r25, 0x3F	; 63
    5df6:	08 95       	ret
    5df8:	4f e7       	ldi	r20, 0x7F	; 127
    5dfa:	9f 77       	andi	r25, 0x7F	; 127
    5dfc:	5f 93       	push	r21
    5dfe:	4f 93       	push	r20
    5e00:	3f 93       	push	r19
    5e02:	2f 93       	push	r18
    5e04:	9e d0       	rcall	.+316    	; 0x5f42 <log>
    5e06:	2f 91       	pop	r18
    5e08:	3f 91       	pop	r19
    5e0a:	4f 91       	pop	r20
    5e0c:	5f 91       	pop	r21
    5e0e:	52 df       	rcall	.-348    	; 0x5cb4 <__mulsf3>
    5e10:	05 c0       	rjmp	.+10     	; 0x5e1c <exp>
    5e12:	19 f4       	brne	.+6      	; 0x5e1a <pow+0xa0>
    5e14:	0e f0       	brts	.+2      	; 0x5e18 <pow+0x9e>
    5e16:	bf ce       	rjmp	.-642    	; 0x5b96 <__fp_inf>
    5e18:	08 cf       	rjmp	.-496    	; 0x5c2a <__fp_zero>
    5e1a:	c3 ce       	rjmp	.-634    	; 0x5ba2 <__fp_nan>

00005e1c <exp>:
    5e1c:	ec de       	rcall	.-552    	; 0x5bf6 <__fp_splitA>
    5e1e:	c8 f3       	brcs	.-14     	; 0x5e12 <pow+0x98>
    5e20:	96 38       	cpi	r25, 0x86	; 134
    5e22:	c0 f7       	brcc	.-16     	; 0x5e14 <pow+0x9a>
    5e24:	07 f8       	bld	r0, 7
    5e26:	0f 92       	push	r0
    5e28:	e8 94       	clt
    5e2a:	2b e3       	ldi	r18, 0x3B	; 59
    5e2c:	3a ea       	ldi	r19, 0xAA	; 170
    5e2e:	48 eb       	ldi	r20, 0xB8	; 184
    5e30:	5f e7       	ldi	r21, 0x7F	; 127
    5e32:	4e df       	rcall	.-356    	; 0x5cd0 <__mulsf3_pse>
    5e34:	0f 92       	push	r0
    5e36:	0f 92       	push	r0
    5e38:	0f 92       	push	r0
    5e3a:	4d b7       	in	r20, 0x3d	; 61
    5e3c:	5e b7       	in	r21, 0x3e	; 62
    5e3e:	0f 92       	push	r0
    5e40:	c0 d0       	rcall	.+384    	; 0x5fc2 <modf>
    5e42:	e8 ec       	ldi	r30, 0xC8	; 200
    5e44:	f0 e0       	ldi	r31, 0x00	; 0
    5e46:	16 d0       	rcall	.+44     	; 0x5e74 <__fp_powser>
    5e48:	4f 91       	pop	r20
    5e4a:	5f 91       	pop	r21
    5e4c:	ef 91       	pop	r30
    5e4e:	ff 91       	pop	r31
    5e50:	e5 95       	asr	r30
    5e52:	ee 1f       	adc	r30, r30
    5e54:	ff 1f       	adc	r31, r31
    5e56:	49 f0       	breq	.+18     	; 0x5e6a <exp+0x4e>
    5e58:	fe 57       	subi	r31, 0x7E	; 126
    5e5a:	e0 68       	ori	r30, 0x80	; 128
    5e5c:	44 27       	eor	r20, r20
    5e5e:	ee 0f       	add	r30, r30
    5e60:	44 1f       	adc	r20, r20
    5e62:	fa 95       	dec	r31
    5e64:	e1 f7       	brne	.-8      	; 0x5e5e <exp+0x42>
    5e66:	41 95       	neg	r20
    5e68:	55 0b       	sbc	r21, r21
    5e6a:	32 d0       	rcall	.+100    	; 0x5ed0 <ldexp>
    5e6c:	0f 90       	pop	r0
    5e6e:	07 fe       	sbrs	r0, 7
    5e70:	26 c0       	rjmp	.+76     	; 0x5ebe <inverse>
    5e72:	08 95       	ret

00005e74 <__fp_powser>:
    5e74:	df 93       	push	r29
    5e76:	cf 93       	push	r28
    5e78:	1f 93       	push	r17
    5e7a:	0f 93       	push	r16
    5e7c:	ff 92       	push	r15
    5e7e:	ef 92       	push	r14
    5e80:	df 92       	push	r13
    5e82:	7b 01       	movw	r14, r22
    5e84:	8c 01       	movw	r16, r24
    5e86:	68 94       	set
    5e88:	05 c0       	rjmp	.+10     	; 0x5e94 <__fp_powser+0x20>
    5e8a:	da 2e       	mov	r13, r26
    5e8c:	ef 01       	movw	r28, r30
    5e8e:	1e df       	rcall	.-452    	; 0x5ccc <__mulsf3x>
    5e90:	fe 01       	movw	r30, r28
    5e92:	e8 94       	clt
    5e94:	a5 91       	lpm	r26, Z+
    5e96:	25 91       	lpm	r18, Z+
    5e98:	35 91       	lpm	r19, Z+
    5e9a:	45 91       	lpm	r20, Z+
    5e9c:	55 91       	lpm	r21, Z+
    5e9e:	ae f3       	brts	.-22     	; 0x5e8a <__fp_powser+0x16>
    5ea0:	ef 01       	movw	r28, r30
    5ea2:	28 dd       	rcall	.-1456   	; 0x58f4 <__addsf3x>
    5ea4:	fe 01       	movw	r30, r28
    5ea6:	97 01       	movw	r18, r14
    5ea8:	a8 01       	movw	r20, r16
    5eaa:	da 94       	dec	r13
    5eac:	79 f7       	brne	.-34     	; 0x5e8c <__fp_powser+0x18>
    5eae:	df 90       	pop	r13
    5eb0:	ef 90       	pop	r14
    5eb2:	ff 90       	pop	r15
    5eb4:	0f 91       	pop	r16
    5eb6:	1f 91       	pop	r17
    5eb8:	cf 91       	pop	r28
    5eba:	df 91       	pop	r29
    5ebc:	08 95       	ret

00005ebe <inverse>:
    5ebe:	9b 01       	movw	r18, r22
    5ec0:	ac 01       	movw	r20, r24
    5ec2:	60 e0       	ldi	r22, 0x00	; 0
    5ec4:	70 e0       	ldi	r23, 0x00	; 0
    5ec6:	80 e8       	ldi	r24, 0x80	; 128
    5ec8:	9f e3       	ldi	r25, 0x3F	; 63
    5eca:	6b cd       	rjmp	.-1322   	; 0x59a2 <__divsf3>
    5ecc:	64 ce       	rjmp	.-824    	; 0x5b96 <__fp_inf>
    5ece:	ac c0       	rjmp	.+344    	; 0x6028 <__fp_mpack>

00005ed0 <ldexp>:
    5ed0:	92 de       	rcall	.-732    	; 0x5bf6 <__fp_splitA>
    5ed2:	e8 f3       	brcs	.-6      	; 0x5ece <inverse+0x10>
    5ed4:	99 23       	and	r25, r25
    5ed6:	d9 f3       	breq	.-10     	; 0x5ece <inverse+0x10>
    5ed8:	94 0f       	add	r25, r20
    5eda:	51 1d       	adc	r21, r1
    5edc:	bb f3       	brvs	.-18     	; 0x5ecc <inverse+0xe>
    5ede:	91 50       	subi	r25, 0x01	; 1
    5ee0:	50 40       	sbci	r21, 0x00	; 0
    5ee2:	94 f0       	brlt	.+36     	; 0x5f08 <ldexp+0x38>
    5ee4:	59 f0       	breq	.+22     	; 0x5efc <ldexp+0x2c>
    5ee6:	88 23       	and	r24, r24
    5ee8:	32 f0       	brmi	.+12     	; 0x5ef6 <ldexp+0x26>
    5eea:	66 0f       	add	r22, r22
    5eec:	77 1f       	adc	r23, r23
    5eee:	88 1f       	adc	r24, r24
    5ef0:	91 50       	subi	r25, 0x01	; 1
    5ef2:	50 40       	sbci	r21, 0x00	; 0
    5ef4:	c1 f7       	brne	.-16     	; 0x5ee6 <ldexp+0x16>
    5ef6:	9e 3f       	cpi	r25, 0xFE	; 254
    5ef8:	51 05       	cpc	r21, r1
    5efa:	44 f7       	brge	.-48     	; 0x5ecc <inverse+0xe>
    5efc:	88 0f       	add	r24, r24
    5efe:	91 1d       	adc	r25, r1
    5f00:	96 95       	lsr	r25
    5f02:	87 95       	ror	r24
    5f04:	97 f9       	bld	r25, 7
    5f06:	08 95       	ret
    5f08:	5f 3f       	cpi	r21, 0xFF	; 255
    5f0a:	ac f0       	brlt	.+42     	; 0x5f36 <ldexp+0x66>
    5f0c:	98 3e       	cpi	r25, 0xE8	; 232
    5f0e:	9c f0       	brlt	.+38     	; 0x5f36 <ldexp+0x66>
    5f10:	bb 27       	eor	r27, r27
    5f12:	86 95       	lsr	r24
    5f14:	77 95       	ror	r23
    5f16:	67 95       	ror	r22
    5f18:	b7 95       	ror	r27
    5f1a:	08 f4       	brcc	.+2      	; 0x5f1e <ldexp+0x4e>
    5f1c:	b1 60       	ori	r27, 0x01	; 1
    5f1e:	93 95       	inc	r25
    5f20:	c1 f7       	brne	.-16     	; 0x5f12 <ldexp+0x42>
    5f22:	bb 0f       	add	r27, r27
    5f24:	58 f7       	brcc	.-42     	; 0x5efc <ldexp+0x2c>
    5f26:	11 f4       	brne	.+4      	; 0x5f2c <ldexp+0x5c>
    5f28:	60 ff       	sbrs	r22, 0
    5f2a:	e8 cf       	rjmp	.-48     	; 0x5efc <ldexp+0x2c>
    5f2c:	6f 5f       	subi	r22, 0xFF	; 255
    5f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    5f30:	8f 4f       	sbci	r24, 0xFF	; 255
    5f32:	9f 4f       	sbci	r25, 0xFF	; 255
    5f34:	e3 cf       	rjmp	.-58     	; 0x5efc <ldexp+0x2c>
    5f36:	7a ce       	rjmp	.-780    	; 0x5c2c <__fp_szero>
    5f38:	0e f0       	brts	.+2      	; 0x5f3c <ldexp+0x6c>
    5f3a:	76 c0       	rjmp	.+236    	; 0x6028 <__fp_mpack>
    5f3c:	32 ce       	rjmp	.-924    	; 0x5ba2 <__fp_nan>
    5f3e:	68 94       	set
    5f40:	2a ce       	rjmp	.-940    	; 0x5b96 <__fp_inf>

00005f42 <log>:
    5f42:	59 de       	rcall	.-846    	; 0x5bf6 <__fp_splitA>
    5f44:	c8 f3       	brcs	.-14     	; 0x5f38 <ldexp+0x68>
    5f46:	99 23       	and	r25, r25
    5f48:	d1 f3       	breq	.-12     	; 0x5f3e <ldexp+0x6e>
    5f4a:	c6 f3       	brts	.-16     	; 0x5f3c <ldexp+0x6c>
    5f4c:	df 93       	push	r29
    5f4e:	cf 93       	push	r28
    5f50:	1f 93       	push	r17
    5f52:	0f 93       	push	r16
    5f54:	ff 92       	push	r15
    5f56:	c9 2f       	mov	r28, r25
    5f58:	dd 27       	eor	r29, r29
    5f5a:	88 23       	and	r24, r24
    5f5c:	2a f0       	brmi	.+10     	; 0x5f68 <log+0x26>
    5f5e:	21 97       	sbiw	r28, 0x01	; 1
    5f60:	66 0f       	add	r22, r22
    5f62:	77 1f       	adc	r23, r23
    5f64:	88 1f       	adc	r24, r24
    5f66:	da f7       	brpl	.-10     	; 0x5f5e <log+0x1c>
    5f68:	20 e0       	ldi	r18, 0x00	; 0
    5f6a:	30 e0       	ldi	r19, 0x00	; 0
    5f6c:	40 e8       	ldi	r20, 0x80	; 128
    5f6e:	5f eb       	ldi	r21, 0xBF	; 191
    5f70:	9f e3       	ldi	r25, 0x3F	; 63
    5f72:	88 39       	cpi	r24, 0x98	; 152
    5f74:	20 f0       	brcs	.+8      	; 0x5f7e <log+0x3c>
    5f76:	80 3e       	cpi	r24, 0xE0	; 224
    5f78:	30 f0       	brcs	.+12     	; 0x5f86 <log+0x44>
    5f7a:	21 96       	adiw	r28, 0x01	; 1
    5f7c:	8f 77       	andi	r24, 0x7F	; 127
    5f7e:	a9 dc       	rcall	.-1710   	; 0x58d2 <__addsf3>
    5f80:	e0 ef       	ldi	r30, 0xF0	; 240
    5f82:	f0 e0       	ldi	r31, 0x00	; 0
    5f84:	03 c0       	rjmp	.+6      	; 0x5f8c <log+0x4a>
    5f86:	a5 dc       	rcall	.-1718   	; 0x58d2 <__addsf3>
    5f88:	ed e1       	ldi	r30, 0x1D	; 29
    5f8a:	f1 e0       	ldi	r31, 0x01	; 1
    5f8c:	73 df       	rcall	.-282    	; 0x5e74 <__fp_powser>
    5f8e:	8b 01       	movw	r16, r22
    5f90:	be 01       	movw	r22, r28
    5f92:	ec 01       	movw	r28, r24
    5f94:	fb 2e       	mov	r15, r27
    5f96:	6f 57       	subi	r22, 0x7F	; 127
    5f98:	71 09       	sbc	r23, r1
    5f9a:	75 95       	asr	r23
    5f9c:	77 1f       	adc	r23, r23
    5f9e:	88 0b       	sbc	r24, r24
    5fa0:	99 0b       	sbc	r25, r25
    5fa2:	9a dd       	rcall	.-1228   	; 0x5ad8 <__floatsisf>
    5fa4:	28 e1       	ldi	r18, 0x18	; 24
    5fa6:	32 e7       	ldi	r19, 0x72	; 114
    5fa8:	41 e3       	ldi	r20, 0x31	; 49
    5faa:	5f e3       	ldi	r21, 0x3F	; 63
    5fac:	8f de       	rcall	.-738    	; 0x5ccc <__mulsf3x>
    5fae:	af 2d       	mov	r26, r15
    5fb0:	98 01       	movw	r18, r16
    5fb2:	ae 01       	movw	r20, r28
    5fb4:	ff 90       	pop	r15
    5fb6:	0f 91       	pop	r16
    5fb8:	1f 91       	pop	r17
    5fba:	cf 91       	pop	r28
    5fbc:	df 91       	pop	r29
    5fbe:	9a dc       	rcall	.-1740   	; 0x58f4 <__addsf3x>
    5fc0:	01 ce       	rjmp	.-1022   	; 0x5bc4 <__fp_round>

00005fc2 <modf>:
    5fc2:	fa 01       	movw	r30, r20
    5fc4:	dc 01       	movw	r26, r24
    5fc6:	aa 0f       	add	r26, r26
    5fc8:	bb 1f       	adc	r27, r27
    5fca:	9b 01       	movw	r18, r22
    5fcc:	ac 01       	movw	r20, r24
    5fce:	bf 57       	subi	r27, 0x7F	; 127
    5fd0:	28 f4       	brcc	.+10     	; 0x5fdc <modf+0x1a>
    5fd2:	22 27       	eor	r18, r18
    5fd4:	33 27       	eor	r19, r19
    5fd6:	44 27       	eor	r20, r20
    5fd8:	50 78       	andi	r21, 0x80	; 128
    5fda:	1f c0       	rjmp	.+62     	; 0x601a <modf+0x58>
    5fdc:	b7 51       	subi	r27, 0x17	; 23
    5fde:	88 f4       	brcc	.+34     	; 0x6002 <modf+0x40>
    5fe0:	ab 2f       	mov	r26, r27
    5fe2:	00 24       	eor	r0, r0
    5fe4:	46 95       	lsr	r20
    5fe6:	37 95       	ror	r19
    5fe8:	27 95       	ror	r18
    5fea:	01 1c       	adc	r0, r1
    5fec:	a3 95       	inc	r26
    5fee:	d2 f3       	brmi	.-12     	; 0x5fe4 <modf+0x22>
    5ff0:	00 20       	and	r0, r0
    5ff2:	69 f0       	breq	.+26     	; 0x600e <modf+0x4c>
    5ff4:	22 0f       	add	r18, r18
    5ff6:	33 1f       	adc	r19, r19
    5ff8:	44 1f       	adc	r20, r20
    5ffa:	b3 95       	inc	r27
    5ffc:	da f3       	brmi	.-10     	; 0x5ff4 <modf+0x32>
    5ffe:	0d d0       	rcall	.+26     	; 0x601a <modf+0x58>
    6000:	67 cc       	rjmp	.-1842   	; 0x58d0 <__subsf3>
    6002:	61 30       	cpi	r22, 0x01	; 1
    6004:	71 05       	cpc	r23, r1
    6006:	a0 e8       	ldi	r26, 0x80	; 128
    6008:	8a 07       	cpc	r24, r26
    600a:	b9 46       	sbci	r27, 0x69	; 105
    600c:	30 f4       	brcc	.+12     	; 0x601a <modf+0x58>
    600e:	9b 01       	movw	r18, r22
    6010:	ac 01       	movw	r20, r24
    6012:	66 27       	eor	r22, r22
    6014:	77 27       	eor	r23, r23
    6016:	88 27       	eor	r24, r24
    6018:	90 78       	andi	r25, 0x80	; 128
    601a:	30 96       	adiw	r30, 0x00	; 0
    601c:	21 f0       	breq	.+8      	; 0x6026 <modf+0x64>
    601e:	20 83       	st	Z, r18
    6020:	31 83       	std	Z+1, r19	; 0x01
    6022:	42 83       	std	Z+2, r20	; 0x02
    6024:	53 83       	std	Z+3, r21	; 0x03
    6026:	08 95       	ret

00006028 <__fp_mpack>:
    6028:	9f 3f       	cpi	r25, 0xFF	; 255
    602a:	31 f0       	breq	.+12     	; 0x6038 <__fp_mpack_finite+0xc>

0000602c <__fp_mpack_finite>:
    602c:	91 50       	subi	r25, 0x01	; 1
    602e:	20 f4       	brcc	.+8      	; 0x6038 <__fp_mpack_finite+0xc>
    6030:	87 95       	ror	r24
    6032:	77 95       	ror	r23
    6034:	67 95       	ror	r22
    6036:	b7 95       	ror	r27
    6038:	88 0f       	add	r24, r24
    603a:	91 1d       	adc	r25, r1
    603c:	96 95       	lsr	r25
    603e:	87 95       	ror	r24
    6040:	97 f9       	bld	r25, 7
    6042:	08 95       	ret

00006044 <vfprintf>:
    6044:	a1 e1       	ldi	r26, 0x11	; 17
    6046:	b0 e0       	ldi	r27, 0x00	; 0
    6048:	e7 e2       	ldi	r30, 0x27	; 39
    604a:	f0 e3       	ldi	r31, 0x30	; 48
    604c:	a4 c3       	rjmp	.+1864   	; 0x6796 <__prologue_saves__>
    604e:	3c 01       	movw	r6, r24
    6050:	7f 87       	std	Y+15, r23	; 0x0f
    6052:	6e 87       	std	Y+14, r22	; 0x0e
    6054:	6a 01       	movw	r12, r20
    6056:	fc 01       	movw	r30, r24
    6058:	17 82       	std	Z+7, r1	; 0x07
    605a:	16 82       	std	Z+6, r1	; 0x06
    605c:	83 81       	ldd	r24, Z+3	; 0x03
    605e:	81 fd       	sbrc	r24, 1
    6060:	03 c0       	rjmp	.+6      	; 0x6068 <vfprintf+0x24>
    6062:	6f ef       	ldi	r22, 0xFF	; 255
    6064:	7f ef       	ldi	r23, 0xFF	; 255
    6066:	52 c3       	rjmp	.+1700   	; 0x670c <vfprintf+0x6c8>
    6068:	9e 01       	movw	r18, r28
    606a:	2f 5f       	subi	r18, 0xFF	; 255
    606c:	3f 4f       	sbci	r19, 0xFF	; 255
    606e:	39 8b       	std	Y+17, r19	; 0x11
    6070:	28 8b       	std	Y+16, r18	; 0x10
    6072:	f3 01       	movw	r30, r6
    6074:	23 81       	ldd	r18, Z+3	; 0x03
    6076:	ee 85       	ldd	r30, Y+14	; 0x0e
    6078:	ff 85       	ldd	r31, Y+15	; 0x0f
    607a:	23 fd       	sbrc	r18, 3
    607c:	85 91       	lpm	r24, Z+
    607e:	23 ff       	sbrs	r18, 3
    6080:	81 91       	ld	r24, Z+
    6082:	ff 87       	std	Y+15, r31	; 0x0f
    6084:	ee 87       	std	Y+14, r30	; 0x0e
    6086:	88 23       	and	r24, r24
    6088:	09 f4       	brne	.+2      	; 0x608c <vfprintf+0x48>
    608a:	3d c3       	rjmp	.+1658   	; 0x6706 <vfprintf+0x6c2>
    608c:	85 32       	cpi	r24, 0x25	; 37
    608e:	51 f4       	brne	.+20     	; 0x60a4 <vfprintf+0x60>
    6090:	ee 85       	ldd	r30, Y+14	; 0x0e
    6092:	ff 85       	ldd	r31, Y+15	; 0x0f
    6094:	23 fd       	sbrc	r18, 3
    6096:	85 91       	lpm	r24, Z+
    6098:	23 ff       	sbrs	r18, 3
    609a:	81 91       	ld	r24, Z+
    609c:	ff 87       	std	Y+15, r31	; 0x0f
    609e:	ee 87       	std	Y+14, r30	; 0x0e
    60a0:	85 32       	cpi	r24, 0x25	; 37
    60a2:	21 f4       	brne	.+8      	; 0x60ac <vfprintf+0x68>
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	b3 01       	movw	r22, r6
    60a8:	a0 d5       	rcall	.+2880   	; 0x6bea <fputc>
    60aa:	e3 cf       	rjmp	.-58     	; 0x6072 <vfprintf+0x2e>
    60ac:	98 2f       	mov	r25, r24
    60ae:	10 e0       	ldi	r17, 0x00	; 0
    60b0:	88 24       	eor	r8, r8
    60b2:	99 24       	eor	r9, r9
    60b4:	10 32       	cpi	r17, 0x20	; 32
    60b6:	b0 f4       	brcc	.+44     	; 0x60e4 <vfprintf+0xa0>
    60b8:	9b 32       	cpi	r25, 0x2B	; 43
    60ba:	69 f0       	breq	.+26     	; 0x60d6 <vfprintf+0x92>
    60bc:	9c 32       	cpi	r25, 0x2C	; 44
    60be:	28 f4       	brcc	.+10     	; 0x60ca <vfprintf+0x86>
    60c0:	90 32       	cpi	r25, 0x20	; 32
    60c2:	51 f0       	breq	.+20     	; 0x60d8 <vfprintf+0x94>
    60c4:	93 32       	cpi	r25, 0x23	; 35
    60c6:	71 f4       	brne	.+28     	; 0x60e4 <vfprintf+0xa0>
    60c8:	0b c0       	rjmp	.+22     	; 0x60e0 <vfprintf+0x9c>
    60ca:	9d 32       	cpi	r25, 0x2D	; 45
    60cc:	39 f0       	breq	.+14     	; 0x60dc <vfprintf+0x98>
    60ce:	90 33       	cpi	r25, 0x30	; 48
    60d0:	49 f4       	brne	.+18     	; 0x60e4 <vfprintf+0xa0>
    60d2:	11 60       	ori	r17, 0x01	; 1
    60d4:	28 c0       	rjmp	.+80     	; 0x6126 <vfprintf+0xe2>
    60d6:	12 60       	ori	r17, 0x02	; 2
    60d8:	14 60       	ori	r17, 0x04	; 4
    60da:	25 c0       	rjmp	.+74     	; 0x6126 <vfprintf+0xe2>
    60dc:	18 60       	ori	r17, 0x08	; 8
    60de:	23 c0       	rjmp	.+70     	; 0x6126 <vfprintf+0xe2>
    60e0:	10 61       	ori	r17, 0x10	; 16
    60e2:	21 c0       	rjmp	.+66     	; 0x6126 <vfprintf+0xe2>
    60e4:	17 fd       	sbrc	r17, 7
    60e6:	2a c0       	rjmp	.+84     	; 0x613c <vfprintf+0xf8>
    60e8:	89 2f       	mov	r24, r25
    60ea:	80 53       	subi	r24, 0x30	; 48
    60ec:	8a 30       	cpi	r24, 0x0A	; 10
    60ee:	78 f4       	brcc	.+30     	; 0x610e <vfprintf+0xca>
    60f0:	16 ff       	sbrs	r17, 6
    60f2:	06 c0       	rjmp	.+12     	; 0x6100 <vfprintf+0xbc>
    60f4:	fa e0       	ldi	r31, 0x0A	; 10
    60f6:	9f 9e       	mul	r9, r31
    60f8:	90 2c       	mov	r9, r0
    60fa:	11 24       	eor	r1, r1
    60fc:	98 0e       	add	r9, r24
    60fe:	13 c0       	rjmp	.+38     	; 0x6126 <vfprintf+0xe2>
    6100:	3a e0       	ldi	r19, 0x0A	; 10
    6102:	83 9e       	mul	r8, r19
    6104:	80 2c       	mov	r8, r0
    6106:	11 24       	eor	r1, r1
    6108:	88 0e       	add	r8, r24
    610a:	10 62       	ori	r17, 0x20	; 32
    610c:	0c c0       	rjmp	.+24     	; 0x6126 <vfprintf+0xe2>
    610e:	9e 32       	cpi	r25, 0x2E	; 46
    6110:	21 f4       	brne	.+8      	; 0x611a <vfprintf+0xd6>
    6112:	16 fd       	sbrc	r17, 6
    6114:	f8 c2       	rjmp	.+1520   	; 0x6706 <vfprintf+0x6c2>
    6116:	10 64       	ori	r17, 0x40	; 64
    6118:	06 c0       	rjmp	.+12     	; 0x6126 <vfprintf+0xe2>
    611a:	9c 36       	cpi	r25, 0x6C	; 108
    611c:	11 f4       	brne	.+4      	; 0x6122 <vfprintf+0xde>
    611e:	10 68       	ori	r17, 0x80	; 128
    6120:	02 c0       	rjmp	.+4      	; 0x6126 <vfprintf+0xe2>
    6122:	98 36       	cpi	r25, 0x68	; 104
    6124:	59 f4       	brne	.+22     	; 0x613c <vfprintf+0xf8>
    6126:	ee 85       	ldd	r30, Y+14	; 0x0e
    6128:	ff 85       	ldd	r31, Y+15	; 0x0f
    612a:	23 fd       	sbrc	r18, 3
    612c:	95 91       	lpm	r25, Z+
    612e:	23 ff       	sbrs	r18, 3
    6130:	91 91       	ld	r25, Z+
    6132:	ff 87       	std	Y+15, r31	; 0x0f
    6134:	ee 87       	std	Y+14, r30	; 0x0e
    6136:	99 23       	and	r25, r25
    6138:	09 f0       	breq	.+2      	; 0x613c <vfprintf+0xf8>
    613a:	bc cf       	rjmp	.-136    	; 0x60b4 <vfprintf+0x70>
    613c:	89 2f       	mov	r24, r25
    613e:	85 54       	subi	r24, 0x45	; 69
    6140:	83 30       	cpi	r24, 0x03	; 3
    6142:	20 f4       	brcc	.+8      	; 0x614c <vfprintf+0x108>
    6144:	81 2f       	mov	r24, r17
    6146:	80 61       	ori	r24, 0x10	; 16
    6148:	90 5e       	subi	r25, 0xE0	; 224
    614a:	07 c0       	rjmp	.+14     	; 0x615a <vfprintf+0x116>
    614c:	89 2f       	mov	r24, r25
    614e:	85 56       	subi	r24, 0x65	; 101
    6150:	83 30       	cpi	r24, 0x03	; 3
    6152:	08 f0       	brcs	.+2      	; 0x6156 <vfprintf+0x112>
    6154:	8f c1       	rjmp	.+798    	; 0x6474 <vfprintf+0x430>
    6156:	81 2f       	mov	r24, r17
    6158:	8f 7e       	andi	r24, 0xEF	; 239
    615a:	86 fd       	sbrc	r24, 6
    615c:	02 c0       	rjmp	.+4      	; 0x6162 <vfprintf+0x11e>
    615e:	76 e0       	ldi	r23, 0x06	; 6
    6160:	97 2e       	mov	r9, r23
    6162:	6f e3       	ldi	r22, 0x3F	; 63
    6164:	f6 2e       	mov	r15, r22
    6166:	f8 22       	and	r15, r24
    6168:	95 36       	cpi	r25, 0x65	; 101
    616a:	19 f4       	brne	.+6      	; 0x6172 <vfprintf+0x12e>
    616c:	f0 e4       	ldi	r31, 0x40	; 64
    616e:	ff 2a       	or	r15, r31
    6170:	07 c0       	rjmp	.+14     	; 0x6180 <vfprintf+0x13c>
    6172:	96 36       	cpi	r25, 0x66	; 102
    6174:	19 f4       	brne	.+6      	; 0x617c <vfprintf+0x138>
    6176:	20 e8       	ldi	r18, 0x80	; 128
    6178:	f2 2a       	or	r15, r18
    617a:	02 c0       	rjmp	.+4      	; 0x6180 <vfprintf+0x13c>
    617c:	91 10       	cpse	r9, r1
    617e:	9a 94       	dec	r9
    6180:	f7 fe       	sbrs	r15, 7
    6182:	0a c0       	rjmp	.+20     	; 0x6198 <vfprintf+0x154>
    6184:	3b e3       	ldi	r19, 0x3B	; 59
    6186:	39 15       	cp	r19, r9
    6188:	18 f4       	brcc	.+6      	; 0x6190 <vfprintf+0x14c>
    618a:	5c e3       	ldi	r21, 0x3C	; 60
    618c:	b5 2e       	mov	r11, r21
    618e:	02 c0       	rjmp	.+4      	; 0x6194 <vfprintf+0x150>
    6190:	b9 2c       	mov	r11, r9
    6192:	b3 94       	inc	r11
    6194:	27 e0       	ldi	r18, 0x07	; 7
    6196:	09 c0       	rjmp	.+18     	; 0x61aa <vfprintf+0x166>
    6198:	47 e0       	ldi	r20, 0x07	; 7
    619a:	49 15       	cp	r20, r9
    619c:	20 f4       	brcc	.+8      	; 0x61a6 <vfprintf+0x162>
    619e:	bb 24       	eor	r11, r11
    61a0:	47 e0       	ldi	r20, 0x07	; 7
    61a2:	94 2e       	mov	r9, r20
    61a4:	f7 cf       	rjmp	.-18     	; 0x6194 <vfprintf+0x150>
    61a6:	29 2d       	mov	r18, r9
    61a8:	bb 24       	eor	r11, r11
    61aa:	c6 01       	movw	r24, r12
    61ac:	04 96       	adiw	r24, 0x04	; 4
    61ae:	9d 87       	std	Y+13, r25	; 0x0d
    61b0:	8c 87       	std	Y+12, r24	; 0x0c
    61b2:	f6 01       	movw	r30, r12
    61b4:	60 81       	ld	r22, Z
    61b6:	71 81       	ldd	r23, Z+1	; 0x01
    61b8:	82 81       	ldd	r24, Z+2	; 0x02
    61ba:	93 81       	ldd	r25, Z+3	; 0x03
    61bc:	ae 01       	movw	r20, r28
    61be:	4f 5f       	subi	r20, 0xFF	; 255
    61c0:	5f 4f       	sbci	r21, 0xFF	; 255
    61c2:	0b 2d       	mov	r16, r11
    61c4:	24 d4       	rcall	.+2120   	; 0x6a0e <__ftoa_engine>
    61c6:	6c 01       	movw	r12, r24
    61c8:	09 81       	ldd	r16, Y+1	; 0x01
    61ca:	20 2e       	mov	r2, r16
    61cc:	33 24       	eor	r3, r3
    61ce:	00 ff       	sbrs	r16, 0
    61d0:	04 c0       	rjmp	.+8      	; 0x61da <vfprintf+0x196>
    61d2:	03 fd       	sbrc	r16, 3
    61d4:	02 c0       	rjmp	.+4      	; 0x61da <vfprintf+0x196>
    61d6:	1d e2       	ldi	r17, 0x2D	; 45
    61d8:	09 c0       	rjmp	.+18     	; 0x61ec <vfprintf+0x1a8>
    61da:	f1 fe       	sbrs	r15, 1
    61dc:	02 c0       	rjmp	.+4      	; 0x61e2 <vfprintf+0x19e>
    61de:	1b e2       	ldi	r17, 0x2B	; 43
    61e0:	05 c0       	rjmp	.+10     	; 0x61ec <vfprintf+0x1a8>
    61e2:	f2 fc       	sbrc	r15, 2
    61e4:	02 c0       	rjmp	.+4      	; 0x61ea <vfprintf+0x1a6>
    61e6:	10 e0       	ldi	r17, 0x00	; 0
    61e8:	01 c0       	rjmp	.+2      	; 0x61ec <vfprintf+0x1a8>
    61ea:	10 e2       	ldi	r17, 0x20	; 32
    61ec:	c1 01       	movw	r24, r2
    61ee:	8c 70       	andi	r24, 0x0C	; 12
    61f0:	90 70       	andi	r25, 0x00	; 0
    61f2:	89 2b       	or	r24, r25
    61f4:	a1 f1       	breq	.+104    	; 0x625e <vfprintf+0x21a>
    61f6:	11 23       	and	r17, r17
    61f8:	11 f4       	brne	.+4      	; 0x61fe <vfprintf+0x1ba>
    61fa:	83 e0       	ldi	r24, 0x03	; 3
    61fc:	01 c0       	rjmp	.+2      	; 0x6200 <vfprintf+0x1bc>
    61fe:	84 e0       	ldi	r24, 0x04	; 4
    6200:	88 15       	cp	r24, r8
    6202:	10 f0       	brcs	.+4      	; 0x6208 <vfprintf+0x1c4>
    6204:	88 24       	eor	r8, r8
    6206:	09 c0       	rjmp	.+18     	; 0x621a <vfprintf+0x1d6>
    6208:	88 1a       	sub	r8, r24
    620a:	f3 fc       	sbrc	r15, 3
    620c:	06 c0       	rjmp	.+12     	; 0x621a <vfprintf+0x1d6>
    620e:	80 e2       	ldi	r24, 0x20	; 32
    6210:	90 e0       	ldi	r25, 0x00	; 0
    6212:	b3 01       	movw	r22, r6
    6214:	ea d4       	rcall	.+2516   	; 0x6bea <fputc>
    6216:	8a 94       	dec	r8
    6218:	d1 f7       	brne	.-12     	; 0x620e <vfprintf+0x1ca>
    621a:	11 23       	and	r17, r17
    621c:	21 f0       	breq	.+8      	; 0x6226 <vfprintf+0x1e2>
    621e:	81 2f       	mov	r24, r17
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	b3 01       	movw	r22, r6
    6224:	e2 d4       	rcall	.+2500   	; 0x6bea <fputc>
    6226:	23 fe       	sbrs	r2, 3
    6228:	03 c0       	rjmp	.+6      	; 0x6230 <vfprintf+0x1ec>
    622a:	0f e5       	ldi	r16, 0x5F	; 95
    622c:	15 e0       	ldi	r17, 0x05	; 5
    622e:	0d c0       	rjmp	.+26     	; 0x624a <vfprintf+0x206>
    6230:	03 e6       	ldi	r16, 0x63	; 99
    6232:	15 e0       	ldi	r17, 0x05	; 5
    6234:	0a c0       	rjmp	.+20     	; 0x624a <vfprintf+0x206>
    6236:	e1 14       	cp	r14, r1
    6238:	f1 04       	cpc	r15, r1
    623a:	09 f0       	breq	.+2      	; 0x623e <vfprintf+0x1fa>
    623c:	80 52       	subi	r24, 0x20	; 32
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	b3 01       	movw	r22, r6
    6242:	d3 d4       	rcall	.+2470   	; 0x6bea <fputc>
    6244:	0f 5f       	subi	r16, 0xFF	; 255
    6246:	1f 4f       	sbci	r17, 0xFF	; 255
    6248:	05 c0       	rjmp	.+10     	; 0x6254 <vfprintf+0x210>
    624a:	ef 2c       	mov	r14, r15
    624c:	ff 24       	eor	r15, r15
    624e:	f0 e1       	ldi	r31, 0x10	; 16
    6250:	ef 22       	and	r14, r31
    6252:	ff 24       	eor	r15, r15
    6254:	f8 01       	movw	r30, r16
    6256:	84 91       	lpm	r24, Z+
    6258:	88 23       	and	r24, r24
    625a:	69 f7       	brne	.-38     	; 0x6236 <vfprintf+0x1f2>
    625c:	08 c1       	rjmp	.+528    	; 0x646e <vfprintf+0x42a>
    625e:	f7 fe       	sbrs	r15, 7
    6260:	12 c0       	rjmp	.+36     	; 0x6286 <vfprintf+0x242>
    6262:	bc 0c       	add	r11, r12
    6264:	24 fe       	sbrs	r2, 4
    6266:	04 c0       	rjmp	.+8      	; 0x6270 <vfprintf+0x22c>
    6268:	8a 81       	ldd	r24, Y+2	; 0x02
    626a:	81 33       	cpi	r24, 0x31	; 49
    626c:	09 f4       	brne	.+2      	; 0x6270 <vfprintf+0x22c>
    626e:	ba 94       	dec	r11
    6270:	1b 14       	cp	r1, r11
    6272:	1c f0       	brlt	.+6      	; 0x627a <vfprintf+0x236>
    6274:	bb 24       	eor	r11, r11
    6276:	b3 94       	inc	r11
    6278:	2d c0       	rjmp	.+90     	; 0x62d4 <vfprintf+0x290>
    627a:	f8 e0       	ldi	r31, 0x08	; 8
    627c:	fb 15       	cp	r31, r11
    627e:	50 f5       	brcc	.+84     	; 0x62d4 <vfprintf+0x290>
    6280:	38 e0       	ldi	r19, 0x08	; 8
    6282:	b3 2e       	mov	r11, r19
    6284:	27 c0       	rjmp	.+78     	; 0x62d4 <vfprintf+0x290>
    6286:	f6 fc       	sbrc	r15, 6
    6288:	25 c0       	rjmp	.+74     	; 0x62d4 <vfprintf+0x290>
    628a:	89 2d       	mov	r24, r9
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	8c 15       	cp	r24, r12
    6290:	9d 05       	cpc	r25, r13
    6292:	4c f0       	brlt	.+18     	; 0x62a6 <vfprintf+0x262>
    6294:	2c ef       	ldi	r18, 0xFC	; 252
    6296:	c2 16       	cp	r12, r18
    6298:	2f ef       	ldi	r18, 0xFF	; 255
    629a:	d2 06       	cpc	r13, r18
    629c:	24 f0       	brlt	.+8      	; 0x62a6 <vfprintf+0x262>
    629e:	30 e8       	ldi	r19, 0x80	; 128
    62a0:	f3 2a       	or	r15, r19
    62a2:	01 c0       	rjmp	.+2      	; 0x62a6 <vfprintf+0x262>
    62a4:	9a 94       	dec	r9
    62a6:	99 20       	and	r9, r9
    62a8:	49 f0       	breq	.+18     	; 0x62bc <vfprintf+0x278>
    62aa:	e2 e0       	ldi	r30, 0x02	; 2
    62ac:	f0 e0       	ldi	r31, 0x00	; 0
    62ae:	ec 0f       	add	r30, r28
    62b0:	fd 1f       	adc	r31, r29
    62b2:	e9 0d       	add	r30, r9
    62b4:	f1 1d       	adc	r31, r1
    62b6:	80 81       	ld	r24, Z
    62b8:	80 33       	cpi	r24, 0x30	; 48
    62ba:	a1 f3       	breq	.-24     	; 0x62a4 <vfprintf+0x260>
    62bc:	f7 fe       	sbrs	r15, 7
    62be:	0a c0       	rjmp	.+20     	; 0x62d4 <vfprintf+0x290>
    62c0:	b9 2c       	mov	r11, r9
    62c2:	b3 94       	inc	r11
    62c4:	89 2d       	mov	r24, r9
    62c6:	90 e0       	ldi	r25, 0x00	; 0
    62c8:	c8 16       	cp	r12, r24
    62ca:	d9 06       	cpc	r13, r25
    62cc:	14 f0       	brlt	.+4      	; 0x62d2 <vfprintf+0x28e>
    62ce:	99 24       	eor	r9, r9
    62d0:	01 c0       	rjmp	.+2      	; 0x62d4 <vfprintf+0x290>
    62d2:	9c 18       	sub	r9, r12
    62d4:	f7 fc       	sbrc	r15, 7
    62d6:	03 c0       	rjmp	.+6      	; 0x62de <vfprintf+0x29a>
    62d8:	25 e0       	ldi	r18, 0x05	; 5
    62da:	30 e0       	ldi	r19, 0x00	; 0
    62dc:	09 c0       	rjmp	.+18     	; 0x62f0 <vfprintf+0x2ac>
    62de:	1c 14       	cp	r1, r12
    62e0:	1d 04       	cpc	r1, r13
    62e2:	1c f0       	brlt	.+6      	; 0x62ea <vfprintf+0x2a6>
    62e4:	21 e0       	ldi	r18, 0x01	; 1
    62e6:	30 e0       	ldi	r19, 0x00	; 0
    62e8:	03 c0       	rjmp	.+6      	; 0x62f0 <vfprintf+0x2ac>
    62ea:	96 01       	movw	r18, r12
    62ec:	2f 5f       	subi	r18, 0xFF	; 255
    62ee:	3f 4f       	sbci	r19, 0xFF	; 255
    62f0:	11 23       	and	r17, r17
    62f2:	11 f0       	breq	.+4      	; 0x62f8 <vfprintf+0x2b4>
    62f4:	2f 5f       	subi	r18, 0xFF	; 255
    62f6:	3f 4f       	sbci	r19, 0xFF	; 255
    62f8:	99 20       	and	r9, r9
    62fa:	29 f0       	breq	.+10     	; 0x6306 <vfprintf+0x2c2>
    62fc:	89 2d       	mov	r24, r9
    62fe:	90 e0       	ldi	r25, 0x00	; 0
    6300:	01 96       	adiw	r24, 0x01	; 1
    6302:	28 0f       	add	r18, r24
    6304:	39 1f       	adc	r19, r25
    6306:	88 2d       	mov	r24, r8
    6308:	90 e0       	ldi	r25, 0x00	; 0
    630a:	28 17       	cp	r18, r24
    630c:	39 07       	cpc	r19, r25
    630e:	14 f0       	brlt	.+4      	; 0x6314 <vfprintf+0x2d0>
    6310:	88 24       	eor	r8, r8
    6312:	01 c0       	rjmp	.+2      	; 0x6316 <vfprintf+0x2d2>
    6314:	82 1a       	sub	r8, r18
    6316:	4f 2c       	mov	r4, r15
    6318:	55 24       	eor	r5, r5
    631a:	c2 01       	movw	r24, r4
    631c:	89 70       	andi	r24, 0x09	; 9
    631e:	90 70       	andi	r25, 0x00	; 0
    6320:	89 2b       	or	r24, r25
    6322:	31 f0       	breq	.+12     	; 0x6330 <vfprintf+0x2ec>
    6324:	07 c0       	rjmp	.+14     	; 0x6334 <vfprintf+0x2f0>
    6326:	80 e2       	ldi	r24, 0x20	; 32
    6328:	90 e0       	ldi	r25, 0x00	; 0
    632a:	b3 01       	movw	r22, r6
    632c:	5e d4       	rcall	.+2236   	; 0x6bea <fputc>
    632e:	8a 94       	dec	r8
    6330:	88 20       	and	r8, r8
    6332:	c9 f7       	brne	.-14     	; 0x6326 <vfprintf+0x2e2>
    6334:	11 23       	and	r17, r17
    6336:	21 f0       	breq	.+8      	; 0x6340 <vfprintf+0x2fc>
    6338:	81 2f       	mov	r24, r17
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	b3 01       	movw	r22, r6
    633e:	55 d4       	rcall	.+2218   	; 0x6bea <fputc>
    6340:	43 fe       	sbrs	r4, 3
    6342:	06 c0       	rjmp	.+12     	; 0x6350 <vfprintf+0x30c>
    6344:	07 c0       	rjmp	.+14     	; 0x6354 <vfprintf+0x310>
    6346:	80 e3       	ldi	r24, 0x30	; 48
    6348:	90 e0       	ldi	r25, 0x00	; 0
    634a:	b3 01       	movw	r22, r6
    634c:	4e d4       	rcall	.+2204   	; 0x6bea <fputc>
    634e:	8a 94       	dec	r8
    6350:	88 20       	and	r8, r8
    6352:	c9 f7       	brne	.-14     	; 0x6346 <vfprintf+0x302>
    6354:	f7 fe       	sbrs	r15, 7
    6356:	44 c0       	rjmp	.+136    	; 0x63e0 <vfprintf+0x39c>
    6358:	86 01       	movw	r16, r12
    635a:	d7 fe       	sbrs	r13, 7
    635c:	02 c0       	rjmp	.+4      	; 0x6362 <vfprintf+0x31e>
    635e:	00 e0       	ldi	r16, 0x00	; 0
    6360:	10 e0       	ldi	r17, 0x00	; 0
    6362:	76 01       	movw	r14, r12
    6364:	08 94       	sec
    6366:	e1 1c       	adc	r14, r1
    6368:	f1 1c       	adc	r15, r1
    636a:	e0 1a       	sub	r14, r16
    636c:	f1 0a       	sbc	r15, r17
    636e:	41 e0       	ldi	r20, 0x01	; 1
    6370:	50 e0       	ldi	r21, 0x00	; 0
    6372:	4c 0f       	add	r20, r28
    6374:	5d 1f       	adc	r21, r29
    6376:	e4 0e       	add	r14, r20
    6378:	f5 1e       	adc	r15, r21
    637a:	26 01       	movw	r4, r12
    637c:	4b 18       	sub	r4, r11
    637e:	51 08       	sbc	r5, r1
    6380:	89 2d       	mov	r24, r9
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	aa 24       	eor	r10, r10
    6386:	bb 24       	eor	r11, r11
    6388:	a8 1a       	sub	r10, r24
    638a:	b9 0a       	sbc	r11, r25
    638c:	5f ef       	ldi	r21, 0xFF	; 255
    638e:	0f 3f       	cpi	r16, 0xFF	; 255
    6390:	15 07       	cpc	r17, r21
    6392:	21 f4       	brne	.+8      	; 0x639c <vfprintf+0x358>
    6394:	8e e2       	ldi	r24, 0x2E	; 46
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	b3 01       	movw	r22, r6
    639a:	27 d4       	rcall	.+2126   	; 0x6bea <fputc>
    639c:	c0 16       	cp	r12, r16
    639e:	d1 06       	cpc	r13, r17
    63a0:	34 f0       	brlt	.+12     	; 0x63ae <vfprintf+0x36a>
    63a2:	40 16       	cp	r4, r16
    63a4:	51 06       	cpc	r5, r17
    63a6:	1c f4       	brge	.+6      	; 0x63ae <vfprintf+0x36a>
    63a8:	f7 01       	movw	r30, r14
    63aa:	80 81       	ld	r24, Z
    63ac:	01 c0       	rjmp	.+2      	; 0x63b0 <vfprintf+0x36c>
    63ae:	80 e3       	ldi	r24, 0x30	; 48
    63b0:	01 50       	subi	r16, 0x01	; 1
    63b2:	10 40       	sbci	r17, 0x00	; 0
    63b4:	08 94       	sec
    63b6:	e1 1c       	adc	r14, r1
    63b8:	f1 1c       	adc	r15, r1
    63ba:	0a 15       	cp	r16, r10
    63bc:	1b 05       	cpc	r17, r11
    63be:	24 f0       	brlt	.+8      	; 0x63c8 <vfprintf+0x384>
    63c0:	90 e0       	ldi	r25, 0x00	; 0
    63c2:	b3 01       	movw	r22, r6
    63c4:	12 d4       	rcall	.+2084   	; 0x6bea <fputc>
    63c6:	e2 cf       	rjmp	.-60     	; 0x638c <vfprintf+0x348>
    63c8:	0c 15       	cp	r16, r12
    63ca:	1d 05       	cpc	r17, r13
    63cc:	39 f4       	brne	.+14     	; 0x63dc <vfprintf+0x398>
    63ce:	9a 81       	ldd	r25, Y+2	; 0x02
    63d0:	96 33       	cpi	r25, 0x36	; 54
    63d2:	18 f4       	brcc	.+6      	; 0x63da <vfprintf+0x396>
    63d4:	95 33       	cpi	r25, 0x35	; 53
    63d6:	11 f4       	brne	.+4      	; 0x63dc <vfprintf+0x398>
    63d8:	24 fe       	sbrs	r2, 4
    63da:	81 e3       	ldi	r24, 0x31	; 49
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	45 c0       	rjmp	.+138    	; 0x646a <vfprintf+0x426>
    63e0:	8a 81       	ldd	r24, Y+2	; 0x02
    63e2:	81 33       	cpi	r24, 0x31	; 49
    63e4:	09 f0       	breq	.+2      	; 0x63e8 <vfprintf+0x3a4>
    63e6:	0f 7e       	andi	r16, 0xEF	; 239
    63e8:	90 e0       	ldi	r25, 0x00	; 0
    63ea:	b3 01       	movw	r22, r6
    63ec:	fe d3       	rcall	.+2044   	; 0x6bea <fputc>
    63ee:	99 20       	and	r9, r9
    63f0:	91 f0       	breq	.+36     	; 0x6416 <vfprintf+0x3d2>
    63f2:	8e e2       	ldi	r24, 0x2E	; 46
    63f4:	90 e0       	ldi	r25, 0x00	; 0
    63f6:	b3 01       	movw	r22, r6
    63f8:	f8 d3       	rcall	.+2032   	; 0x6bea <fputc>
    63fa:	12 e0       	ldi	r17, 0x02	; 2
    63fc:	e1 e0       	ldi	r30, 0x01	; 1
    63fe:	f0 e0       	ldi	r31, 0x00	; 0
    6400:	ec 0f       	add	r30, r28
    6402:	fd 1f       	adc	r31, r29
    6404:	e1 0f       	add	r30, r17
    6406:	f1 1d       	adc	r31, r1
    6408:	1f 5f       	subi	r17, 0xFF	; 255
    640a:	80 81       	ld	r24, Z
    640c:	90 e0       	ldi	r25, 0x00	; 0
    640e:	b3 01       	movw	r22, r6
    6410:	ec d3       	rcall	.+2008   	; 0x6bea <fputc>
    6412:	9a 94       	dec	r9
    6414:	99 f7       	brne	.-26     	; 0x63fc <vfprintf+0x3b8>
    6416:	44 fc       	sbrc	r4, 4
    6418:	03 c0       	rjmp	.+6      	; 0x6420 <vfprintf+0x3dc>
    641a:	85 e6       	ldi	r24, 0x65	; 101
    641c:	90 e0       	ldi	r25, 0x00	; 0
    641e:	02 c0       	rjmp	.+4      	; 0x6424 <vfprintf+0x3e0>
    6420:	85 e4       	ldi	r24, 0x45	; 69
    6422:	90 e0       	ldi	r25, 0x00	; 0
    6424:	b3 01       	movw	r22, r6
    6426:	e1 d3       	rcall	.+1986   	; 0x6bea <fputc>
    6428:	d7 fc       	sbrc	r13, 7
    642a:	05 c0       	rjmp	.+10     	; 0x6436 <vfprintf+0x3f2>
    642c:	c1 14       	cp	r12, r1
    642e:	d1 04       	cpc	r13, r1
    6430:	41 f4       	brne	.+16     	; 0x6442 <vfprintf+0x3fe>
    6432:	04 ff       	sbrs	r16, 4
    6434:	06 c0       	rjmp	.+12     	; 0x6442 <vfprintf+0x3fe>
    6436:	d0 94       	com	r13
    6438:	c1 94       	neg	r12
    643a:	d1 08       	sbc	r13, r1
    643c:	d3 94       	inc	r13
    643e:	8d e2       	ldi	r24, 0x2D	; 45
    6440:	01 c0       	rjmp	.+2      	; 0x6444 <vfprintf+0x400>
    6442:	8b e2       	ldi	r24, 0x2B	; 43
    6444:	90 e0       	ldi	r25, 0x00	; 0
    6446:	b3 01       	movw	r22, r6
    6448:	d0 d3       	rcall	.+1952   	; 0x6bea <fputc>
    644a:	80 e3       	ldi	r24, 0x30	; 48
    644c:	05 c0       	rjmp	.+10     	; 0x6458 <vfprintf+0x414>
    644e:	8f 5f       	subi	r24, 0xFF	; 255
    6450:	26 ef       	ldi	r18, 0xF6	; 246
    6452:	3f ef       	ldi	r19, 0xFF	; 255
    6454:	c2 0e       	add	r12, r18
    6456:	d3 1e       	adc	r13, r19
    6458:	3a e0       	ldi	r19, 0x0A	; 10
    645a:	c3 16       	cp	r12, r19
    645c:	d1 04       	cpc	r13, r1
    645e:	bc f7       	brge	.-18     	; 0x644e <vfprintf+0x40a>
    6460:	90 e0       	ldi	r25, 0x00	; 0
    6462:	b3 01       	movw	r22, r6
    6464:	c2 d3       	rcall	.+1924   	; 0x6bea <fputc>
    6466:	c6 01       	movw	r24, r12
    6468:	c0 96       	adiw	r24, 0x30	; 48
    646a:	b3 01       	movw	r22, r6
    646c:	be d3       	rcall	.+1916   	; 0x6bea <fputc>
    646e:	cc 84       	ldd	r12, Y+12	; 0x0c
    6470:	dd 84       	ldd	r13, Y+13	; 0x0d
    6472:	46 c1       	rjmp	.+652    	; 0x6700 <vfprintf+0x6bc>
    6474:	93 36       	cpi	r25, 0x63	; 99
    6476:	31 f0       	breq	.+12     	; 0x6484 <vfprintf+0x440>
    6478:	93 37       	cpi	r25, 0x73	; 115
    647a:	99 f0       	breq	.+38     	; 0x64a2 <vfprintf+0x45e>
    647c:	93 35       	cpi	r25, 0x53	; 83
    647e:	09 f0       	breq	.+2      	; 0x6482 <vfprintf+0x43e>
    6480:	55 c0       	rjmp	.+170    	; 0x652c <vfprintf+0x4e8>
    6482:	22 c0       	rjmp	.+68     	; 0x64c8 <vfprintf+0x484>
    6484:	f6 01       	movw	r30, r12
    6486:	80 81       	ld	r24, Z
    6488:	89 83       	std	Y+1, r24	; 0x01
    648a:	5e 01       	movw	r10, r28
    648c:	08 94       	sec
    648e:	a1 1c       	adc	r10, r1
    6490:	b1 1c       	adc	r11, r1
    6492:	22 e0       	ldi	r18, 0x02	; 2
    6494:	30 e0       	ldi	r19, 0x00	; 0
    6496:	c2 0e       	add	r12, r18
    6498:	d3 1e       	adc	r13, r19
    649a:	21 e0       	ldi	r18, 0x01	; 1
    649c:	e2 2e       	mov	r14, r18
    649e:	f1 2c       	mov	r15, r1
    64a0:	11 c0       	rjmp	.+34     	; 0x64c4 <vfprintf+0x480>
    64a2:	f6 01       	movw	r30, r12
    64a4:	a0 80       	ld	r10, Z
    64a6:	b1 80       	ldd	r11, Z+1	; 0x01
    64a8:	16 fd       	sbrc	r17, 6
    64aa:	03 c0       	rjmp	.+6      	; 0x64b2 <vfprintf+0x46e>
    64ac:	6f ef       	ldi	r22, 0xFF	; 255
    64ae:	7f ef       	ldi	r23, 0xFF	; 255
    64b0:	02 c0       	rjmp	.+4      	; 0x64b6 <vfprintf+0x472>
    64b2:	69 2d       	mov	r22, r9
    64b4:	70 e0       	ldi	r23, 0x00	; 0
    64b6:	22 e0       	ldi	r18, 0x02	; 2
    64b8:	30 e0       	ldi	r19, 0x00	; 0
    64ba:	c2 0e       	add	r12, r18
    64bc:	d3 1e       	adc	r13, r19
    64be:	c5 01       	movw	r24, r10
    64c0:	89 d3       	rcall	.+1810   	; 0x6bd4 <strnlen>
    64c2:	7c 01       	movw	r14, r24
    64c4:	1f 77       	andi	r17, 0x7F	; 127
    64c6:	12 c0       	rjmp	.+36     	; 0x64ec <vfprintf+0x4a8>
    64c8:	f6 01       	movw	r30, r12
    64ca:	a0 80       	ld	r10, Z
    64cc:	b1 80       	ldd	r11, Z+1	; 0x01
    64ce:	16 fd       	sbrc	r17, 6
    64d0:	03 c0       	rjmp	.+6      	; 0x64d8 <vfprintf+0x494>
    64d2:	6f ef       	ldi	r22, 0xFF	; 255
    64d4:	7f ef       	ldi	r23, 0xFF	; 255
    64d6:	02 c0       	rjmp	.+4      	; 0x64dc <vfprintf+0x498>
    64d8:	69 2d       	mov	r22, r9
    64da:	70 e0       	ldi	r23, 0x00	; 0
    64dc:	22 e0       	ldi	r18, 0x02	; 2
    64de:	30 e0       	ldi	r19, 0x00	; 0
    64e0:	c2 0e       	add	r12, r18
    64e2:	d3 1e       	adc	r13, r19
    64e4:	c5 01       	movw	r24, r10
    64e6:	6b d3       	rcall	.+1750   	; 0x6bbe <strnlen_P>
    64e8:	7c 01       	movw	r14, r24
    64ea:	10 68       	ori	r17, 0x80	; 128
    64ec:	13 ff       	sbrs	r17, 3
    64ee:	06 c0       	rjmp	.+12     	; 0x64fc <vfprintf+0x4b8>
    64f0:	19 c0       	rjmp	.+50     	; 0x6524 <vfprintf+0x4e0>
    64f2:	80 e2       	ldi	r24, 0x20	; 32
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	b3 01       	movw	r22, r6
    64f8:	78 d3       	rcall	.+1776   	; 0x6bea <fputc>
    64fa:	8a 94       	dec	r8
    64fc:	88 2d       	mov	r24, r8
    64fe:	90 e0       	ldi	r25, 0x00	; 0
    6500:	e8 16       	cp	r14, r24
    6502:	f9 06       	cpc	r15, r25
    6504:	b0 f3       	brcs	.-20     	; 0x64f2 <vfprintf+0x4ae>
    6506:	0e c0       	rjmp	.+28     	; 0x6524 <vfprintf+0x4e0>
    6508:	f5 01       	movw	r30, r10
    650a:	17 fd       	sbrc	r17, 7
    650c:	85 91       	lpm	r24, Z+
    650e:	17 ff       	sbrs	r17, 7
    6510:	81 91       	ld	r24, Z+
    6512:	5f 01       	movw	r10, r30
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	b3 01       	movw	r22, r6
    6518:	68 d3       	rcall	.+1744   	; 0x6bea <fputc>
    651a:	81 10       	cpse	r8, r1
    651c:	8a 94       	dec	r8
    651e:	08 94       	sec
    6520:	e1 08       	sbc	r14, r1
    6522:	f1 08       	sbc	r15, r1
    6524:	e1 14       	cp	r14, r1
    6526:	f1 04       	cpc	r15, r1
    6528:	79 f7       	brne	.-34     	; 0x6508 <vfprintf+0x4c4>
    652a:	ea c0       	rjmp	.+468    	; 0x6700 <vfprintf+0x6bc>
    652c:	94 36       	cpi	r25, 0x64	; 100
    652e:	11 f0       	breq	.+4      	; 0x6534 <vfprintf+0x4f0>
    6530:	99 36       	cpi	r25, 0x69	; 105
    6532:	81 f5       	brne	.+96     	; 0x6594 <vfprintf+0x550>
    6534:	17 ff       	sbrs	r17, 7
    6536:	08 c0       	rjmp	.+16     	; 0x6548 <vfprintf+0x504>
    6538:	f6 01       	movw	r30, r12
    653a:	20 81       	ld	r18, Z
    653c:	31 81       	ldd	r19, Z+1	; 0x01
    653e:	42 81       	ldd	r20, Z+2	; 0x02
    6540:	53 81       	ldd	r21, Z+3	; 0x03
    6542:	84 e0       	ldi	r24, 0x04	; 4
    6544:	90 e0       	ldi	r25, 0x00	; 0
    6546:	0a c0       	rjmp	.+20     	; 0x655c <vfprintf+0x518>
    6548:	f6 01       	movw	r30, r12
    654a:	80 81       	ld	r24, Z
    654c:	91 81       	ldd	r25, Z+1	; 0x01
    654e:	9c 01       	movw	r18, r24
    6550:	44 27       	eor	r20, r20
    6552:	37 fd       	sbrc	r19, 7
    6554:	40 95       	com	r20
    6556:	54 2f       	mov	r21, r20
    6558:	82 e0       	ldi	r24, 0x02	; 2
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	c8 0e       	add	r12, r24
    655e:	d9 1e       	adc	r13, r25
    6560:	9f e6       	ldi	r25, 0x6F	; 111
    6562:	f9 2e       	mov	r15, r25
    6564:	f1 22       	and	r15, r17
    6566:	57 ff       	sbrs	r21, 7
    6568:	09 c0       	rjmp	.+18     	; 0x657c <vfprintf+0x538>
    656a:	50 95       	com	r21
    656c:	40 95       	com	r20
    656e:	30 95       	com	r19
    6570:	21 95       	neg	r18
    6572:	3f 4f       	sbci	r19, 0xFF	; 255
    6574:	4f 4f       	sbci	r20, 0xFF	; 255
    6576:	5f 4f       	sbci	r21, 0xFF	; 255
    6578:	90 e8       	ldi	r25, 0x80	; 128
    657a:	f9 2a       	or	r15, r25
    657c:	ca 01       	movw	r24, r20
    657e:	b9 01       	movw	r22, r18
    6580:	ae 01       	movw	r20, r28
    6582:	4f 5f       	subi	r20, 0xFF	; 255
    6584:	5f 4f       	sbci	r21, 0xFF	; 255
    6586:	2a e0       	ldi	r18, 0x0A	; 10
    6588:	30 e0       	ldi	r19, 0x00	; 0
    658a:	a2 d3       	rcall	.+1860   	; 0x6cd0 <__ultoa_invert>
    658c:	e8 2e       	mov	r14, r24
    658e:	e8 89       	ldd	r30, Y+16	; 0x10
    6590:	ee 1a       	sub	r14, r30
    6592:	40 c0       	rjmp	.+128    	; 0x6614 <vfprintf+0x5d0>
    6594:	95 37       	cpi	r25, 0x75	; 117
    6596:	21 f4       	brne	.+8      	; 0x65a0 <vfprintf+0x55c>
    6598:	1f 7e       	andi	r17, 0xEF	; 239
    659a:	2a e0       	ldi	r18, 0x0A	; 10
    659c:	30 e0       	ldi	r19, 0x00	; 0
    659e:	1c c0       	rjmp	.+56     	; 0x65d8 <vfprintf+0x594>
    65a0:	19 7f       	andi	r17, 0xF9	; 249
    65a2:	9f 36       	cpi	r25, 0x6F	; 111
    65a4:	61 f0       	breq	.+24     	; 0x65be <vfprintf+0x57a>
    65a6:	90 37       	cpi	r25, 0x70	; 112
    65a8:	20 f4       	brcc	.+8      	; 0x65b2 <vfprintf+0x56e>
    65aa:	98 35       	cpi	r25, 0x58	; 88
    65ac:	09 f0       	breq	.+2      	; 0x65b0 <vfprintf+0x56c>
    65ae:	ab c0       	rjmp	.+342    	; 0x6706 <vfprintf+0x6c2>
    65b0:	0f c0       	rjmp	.+30     	; 0x65d0 <vfprintf+0x58c>
    65b2:	90 37       	cpi	r25, 0x70	; 112
    65b4:	39 f0       	breq	.+14     	; 0x65c4 <vfprintf+0x580>
    65b6:	98 37       	cpi	r25, 0x78	; 120
    65b8:	09 f0       	breq	.+2      	; 0x65bc <vfprintf+0x578>
    65ba:	a5 c0       	rjmp	.+330    	; 0x6706 <vfprintf+0x6c2>
    65bc:	04 c0       	rjmp	.+8      	; 0x65c6 <vfprintf+0x582>
    65be:	28 e0       	ldi	r18, 0x08	; 8
    65c0:	30 e0       	ldi	r19, 0x00	; 0
    65c2:	0a c0       	rjmp	.+20     	; 0x65d8 <vfprintf+0x594>
    65c4:	10 61       	ori	r17, 0x10	; 16
    65c6:	14 fd       	sbrc	r17, 4
    65c8:	14 60       	ori	r17, 0x04	; 4
    65ca:	20 e1       	ldi	r18, 0x10	; 16
    65cc:	30 e0       	ldi	r19, 0x00	; 0
    65ce:	04 c0       	rjmp	.+8      	; 0x65d8 <vfprintf+0x594>
    65d0:	14 fd       	sbrc	r17, 4
    65d2:	16 60       	ori	r17, 0x06	; 6
    65d4:	20 e1       	ldi	r18, 0x10	; 16
    65d6:	32 e0       	ldi	r19, 0x02	; 2
    65d8:	17 ff       	sbrs	r17, 7
    65da:	08 c0       	rjmp	.+16     	; 0x65ec <vfprintf+0x5a8>
    65dc:	f6 01       	movw	r30, r12
    65de:	60 81       	ld	r22, Z
    65e0:	71 81       	ldd	r23, Z+1	; 0x01
    65e2:	82 81       	ldd	r24, Z+2	; 0x02
    65e4:	93 81       	ldd	r25, Z+3	; 0x03
    65e6:	44 e0       	ldi	r20, 0x04	; 4
    65e8:	50 e0       	ldi	r21, 0x00	; 0
    65ea:	08 c0       	rjmp	.+16     	; 0x65fc <vfprintf+0x5b8>
    65ec:	f6 01       	movw	r30, r12
    65ee:	80 81       	ld	r24, Z
    65f0:	91 81       	ldd	r25, Z+1	; 0x01
    65f2:	bc 01       	movw	r22, r24
    65f4:	80 e0       	ldi	r24, 0x00	; 0
    65f6:	90 e0       	ldi	r25, 0x00	; 0
    65f8:	42 e0       	ldi	r20, 0x02	; 2
    65fa:	50 e0       	ldi	r21, 0x00	; 0
    65fc:	c4 0e       	add	r12, r20
    65fe:	d5 1e       	adc	r13, r21
    6600:	ae 01       	movw	r20, r28
    6602:	4f 5f       	subi	r20, 0xFF	; 255
    6604:	5f 4f       	sbci	r21, 0xFF	; 255
    6606:	64 d3       	rcall	.+1736   	; 0x6cd0 <__ultoa_invert>
    6608:	e8 2e       	mov	r14, r24
    660a:	58 89       	ldd	r21, Y+16	; 0x10
    660c:	e5 1a       	sub	r14, r21
    660e:	8f e7       	ldi	r24, 0x7F	; 127
    6610:	f8 2e       	mov	r15, r24
    6612:	f1 22       	and	r15, r17
    6614:	f6 fe       	sbrs	r15, 6
    6616:	0b c0       	rjmp	.+22     	; 0x662e <vfprintf+0x5ea>
    6618:	8e ef       	ldi	r24, 0xFE	; 254
    661a:	f8 22       	and	r15, r24
    661c:	e9 14       	cp	r14, r9
    661e:	38 f4       	brcc	.+14     	; 0x662e <vfprintf+0x5ea>
    6620:	f4 fe       	sbrs	r15, 4
    6622:	07 c0       	rjmp	.+14     	; 0x6632 <vfprintf+0x5ee>
    6624:	f2 fc       	sbrc	r15, 2
    6626:	05 c0       	rjmp	.+10     	; 0x6632 <vfprintf+0x5ee>
    6628:	9f ee       	ldi	r25, 0xEF	; 239
    662a:	f9 22       	and	r15, r25
    662c:	02 c0       	rjmp	.+4      	; 0x6632 <vfprintf+0x5ee>
    662e:	1e 2d       	mov	r17, r14
    6630:	01 c0       	rjmp	.+2      	; 0x6634 <vfprintf+0x5f0>
    6632:	19 2d       	mov	r17, r9
    6634:	f4 fe       	sbrs	r15, 4
    6636:	0d c0       	rjmp	.+26     	; 0x6652 <vfprintf+0x60e>
    6638:	fe 01       	movw	r30, r28
    663a:	ee 0d       	add	r30, r14
    663c:	f1 1d       	adc	r31, r1
    663e:	80 81       	ld	r24, Z
    6640:	80 33       	cpi	r24, 0x30	; 48
    6642:	19 f4       	brne	.+6      	; 0x664a <vfprintf+0x606>
    6644:	e9 ee       	ldi	r30, 0xE9	; 233
    6646:	fe 22       	and	r15, r30
    6648:	08 c0       	rjmp	.+16     	; 0x665a <vfprintf+0x616>
    664a:	1f 5f       	subi	r17, 0xFF	; 255
    664c:	f2 fe       	sbrs	r15, 2
    664e:	05 c0       	rjmp	.+10     	; 0x665a <vfprintf+0x616>
    6650:	03 c0       	rjmp	.+6      	; 0x6658 <vfprintf+0x614>
    6652:	8f 2d       	mov	r24, r15
    6654:	86 78       	andi	r24, 0x86	; 134
    6656:	09 f0       	breq	.+2      	; 0x665a <vfprintf+0x616>
    6658:	1f 5f       	subi	r17, 0xFF	; 255
    665a:	0f 2d       	mov	r16, r15
    665c:	f3 fc       	sbrc	r15, 3
    665e:	13 c0       	rjmp	.+38     	; 0x6686 <vfprintf+0x642>
    6660:	f0 fe       	sbrs	r15, 0
    6662:	0e c0       	rjmp	.+28     	; 0x6680 <vfprintf+0x63c>
    6664:	18 15       	cp	r17, r8
    6666:	10 f0       	brcs	.+4      	; 0x666c <vfprintf+0x628>
    6668:	9e 2c       	mov	r9, r14
    666a:	0a c0       	rjmp	.+20     	; 0x6680 <vfprintf+0x63c>
    666c:	9e 2c       	mov	r9, r14
    666e:	98 0c       	add	r9, r8
    6670:	91 1a       	sub	r9, r17
    6672:	18 2d       	mov	r17, r8
    6674:	05 c0       	rjmp	.+10     	; 0x6680 <vfprintf+0x63c>
    6676:	80 e2       	ldi	r24, 0x20	; 32
    6678:	90 e0       	ldi	r25, 0x00	; 0
    667a:	b3 01       	movw	r22, r6
    667c:	b6 d2       	rcall	.+1388   	; 0x6bea <fputc>
    667e:	1f 5f       	subi	r17, 0xFF	; 255
    6680:	18 15       	cp	r17, r8
    6682:	c8 f3       	brcs	.-14     	; 0x6676 <vfprintf+0x632>
    6684:	04 c0       	rjmp	.+8      	; 0x668e <vfprintf+0x64a>
    6686:	18 15       	cp	r17, r8
    6688:	10 f4       	brcc	.+4      	; 0x668e <vfprintf+0x64a>
    668a:	81 1a       	sub	r8, r17
    668c:	01 c0       	rjmp	.+2      	; 0x6690 <vfprintf+0x64c>
    668e:	88 24       	eor	r8, r8
    6690:	04 ff       	sbrs	r16, 4
    6692:	0e c0       	rjmp	.+28     	; 0x66b0 <vfprintf+0x66c>
    6694:	80 e3       	ldi	r24, 0x30	; 48
    6696:	90 e0       	ldi	r25, 0x00	; 0
    6698:	b3 01       	movw	r22, r6
    669a:	a7 d2       	rcall	.+1358   	; 0x6bea <fputc>
    669c:	02 ff       	sbrs	r16, 2
    669e:	1b c0       	rjmp	.+54     	; 0x66d6 <vfprintf+0x692>
    66a0:	01 fd       	sbrc	r16, 1
    66a2:	03 c0       	rjmp	.+6      	; 0x66aa <vfprintf+0x666>
    66a4:	88 e7       	ldi	r24, 0x78	; 120
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	0e c0       	rjmp	.+28     	; 0x66c6 <vfprintf+0x682>
    66aa:	88 e5       	ldi	r24, 0x58	; 88
    66ac:	90 e0       	ldi	r25, 0x00	; 0
    66ae:	0b c0       	rjmp	.+22     	; 0x66c6 <vfprintf+0x682>
    66b0:	80 2f       	mov	r24, r16
    66b2:	86 78       	andi	r24, 0x86	; 134
    66b4:	81 f0       	breq	.+32     	; 0x66d6 <vfprintf+0x692>
    66b6:	01 ff       	sbrs	r16, 1
    66b8:	02 c0       	rjmp	.+4      	; 0x66be <vfprintf+0x67a>
    66ba:	8b e2       	ldi	r24, 0x2B	; 43
    66bc:	01 c0       	rjmp	.+2      	; 0x66c0 <vfprintf+0x67c>
    66be:	80 e2       	ldi	r24, 0x20	; 32
    66c0:	f7 fc       	sbrc	r15, 7
    66c2:	8d e2       	ldi	r24, 0x2D	; 45
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	b3 01       	movw	r22, r6
    66c8:	90 d2       	rcall	.+1312   	; 0x6bea <fputc>
    66ca:	05 c0       	rjmp	.+10     	; 0x66d6 <vfprintf+0x692>
    66cc:	80 e3       	ldi	r24, 0x30	; 48
    66ce:	90 e0       	ldi	r25, 0x00	; 0
    66d0:	b3 01       	movw	r22, r6
    66d2:	8b d2       	rcall	.+1302   	; 0x6bea <fputc>
    66d4:	9a 94       	dec	r9
    66d6:	e9 14       	cp	r14, r9
    66d8:	c8 f3       	brcs	.-14     	; 0x66cc <vfprintf+0x688>
    66da:	ea 94       	dec	r14
    66dc:	e1 e0       	ldi	r30, 0x01	; 1
    66de:	f0 e0       	ldi	r31, 0x00	; 0
    66e0:	ec 0f       	add	r30, r28
    66e2:	fd 1f       	adc	r31, r29
    66e4:	ee 0d       	add	r30, r14
    66e6:	f1 1d       	adc	r31, r1
    66e8:	80 81       	ld	r24, Z
    66ea:	90 e0       	ldi	r25, 0x00	; 0
    66ec:	b3 01       	movw	r22, r6
    66ee:	7d d2       	rcall	.+1274   	; 0x6bea <fputc>
    66f0:	ee 20       	and	r14, r14
    66f2:	99 f7       	brne	.-26     	; 0x66da <vfprintf+0x696>
    66f4:	05 c0       	rjmp	.+10     	; 0x6700 <vfprintf+0x6bc>
    66f6:	80 e2       	ldi	r24, 0x20	; 32
    66f8:	90 e0       	ldi	r25, 0x00	; 0
    66fa:	b3 01       	movw	r22, r6
    66fc:	76 d2       	rcall	.+1260   	; 0x6bea <fputc>
    66fe:	8a 94       	dec	r8
    6700:	88 20       	and	r8, r8
    6702:	c9 f7       	brne	.-14     	; 0x66f6 <vfprintf+0x6b2>
    6704:	b6 cc       	rjmp	.-1684   	; 0x6072 <vfprintf+0x2e>
    6706:	f3 01       	movw	r30, r6
    6708:	66 81       	ldd	r22, Z+6	; 0x06
    670a:	77 81       	ldd	r23, Z+7	; 0x07
    670c:	cb 01       	movw	r24, r22
    670e:	61 96       	adiw	r28, 0x11	; 17
    6710:	e2 e1       	ldi	r30, 0x12	; 18
    6712:	5d c0       	rjmp	.+186    	; 0x67ce <__epilogue_restores__>

00006714 <__mulsi3>:
    6714:	62 9f       	mul	r22, r18
    6716:	d0 01       	movw	r26, r0
    6718:	73 9f       	mul	r23, r19
    671a:	f0 01       	movw	r30, r0
    671c:	82 9f       	mul	r24, r18
    671e:	e0 0d       	add	r30, r0
    6720:	f1 1d       	adc	r31, r1
    6722:	64 9f       	mul	r22, r20
    6724:	e0 0d       	add	r30, r0
    6726:	f1 1d       	adc	r31, r1
    6728:	92 9f       	mul	r25, r18
    672a:	f0 0d       	add	r31, r0
    672c:	83 9f       	mul	r24, r19
    672e:	f0 0d       	add	r31, r0
    6730:	74 9f       	mul	r23, r20
    6732:	f0 0d       	add	r31, r0
    6734:	65 9f       	mul	r22, r21
    6736:	f0 0d       	add	r31, r0
    6738:	99 27       	eor	r25, r25
    673a:	72 9f       	mul	r23, r18
    673c:	b0 0d       	add	r27, r0
    673e:	e1 1d       	adc	r30, r1
    6740:	f9 1f       	adc	r31, r25
    6742:	63 9f       	mul	r22, r19
    6744:	b0 0d       	add	r27, r0
    6746:	e1 1d       	adc	r30, r1
    6748:	f9 1f       	adc	r31, r25
    674a:	bd 01       	movw	r22, r26
    674c:	cf 01       	movw	r24, r30
    674e:	11 24       	eor	r1, r1
    6750:	08 95       	ret

00006752 <__udivmodsi4>:
    6752:	a1 e2       	ldi	r26, 0x21	; 33
    6754:	1a 2e       	mov	r1, r26
    6756:	aa 1b       	sub	r26, r26
    6758:	bb 1b       	sub	r27, r27
    675a:	fd 01       	movw	r30, r26
    675c:	0d c0       	rjmp	.+26     	; 0x6778 <__udivmodsi4_ep>

0000675e <__udivmodsi4_loop>:
    675e:	aa 1f       	adc	r26, r26
    6760:	bb 1f       	adc	r27, r27
    6762:	ee 1f       	adc	r30, r30
    6764:	ff 1f       	adc	r31, r31
    6766:	a2 17       	cp	r26, r18
    6768:	b3 07       	cpc	r27, r19
    676a:	e4 07       	cpc	r30, r20
    676c:	f5 07       	cpc	r31, r21
    676e:	20 f0       	brcs	.+8      	; 0x6778 <__udivmodsi4_ep>
    6770:	a2 1b       	sub	r26, r18
    6772:	b3 0b       	sbc	r27, r19
    6774:	e4 0b       	sbc	r30, r20
    6776:	f5 0b       	sbc	r31, r21

00006778 <__udivmodsi4_ep>:
    6778:	66 1f       	adc	r22, r22
    677a:	77 1f       	adc	r23, r23
    677c:	88 1f       	adc	r24, r24
    677e:	99 1f       	adc	r25, r25
    6780:	1a 94       	dec	r1
    6782:	69 f7       	brne	.-38     	; 0x675e <__udivmodsi4_loop>
    6784:	60 95       	com	r22
    6786:	70 95       	com	r23
    6788:	80 95       	com	r24
    678a:	90 95       	com	r25
    678c:	9b 01       	movw	r18, r22
    678e:	ac 01       	movw	r20, r24
    6790:	bd 01       	movw	r22, r26
    6792:	cf 01       	movw	r24, r30
    6794:	08 95       	ret

00006796 <__prologue_saves__>:
    6796:	2f 92       	push	r2
    6798:	3f 92       	push	r3
    679a:	4f 92       	push	r4
    679c:	5f 92       	push	r5
    679e:	6f 92       	push	r6
    67a0:	7f 92       	push	r7
    67a2:	8f 92       	push	r8
    67a4:	9f 92       	push	r9
    67a6:	af 92       	push	r10
    67a8:	bf 92       	push	r11
    67aa:	cf 92       	push	r12
    67ac:	df 92       	push	r13
    67ae:	ef 92       	push	r14
    67b0:	ff 92       	push	r15
    67b2:	0f 93       	push	r16
    67b4:	1f 93       	push	r17
    67b6:	cf 93       	push	r28
    67b8:	df 93       	push	r29
    67ba:	cd b7       	in	r28, 0x3d	; 61
    67bc:	de b7       	in	r29, 0x3e	; 62
    67be:	ca 1b       	sub	r28, r26
    67c0:	db 0b       	sbc	r29, r27
    67c2:	0f b6       	in	r0, 0x3f	; 63
    67c4:	f8 94       	cli
    67c6:	de bf       	out	0x3e, r29	; 62
    67c8:	0f be       	out	0x3f, r0	; 63
    67ca:	cd bf       	out	0x3d, r28	; 61
    67cc:	09 94       	ijmp

000067ce <__epilogue_restores__>:
    67ce:	2a 88       	ldd	r2, Y+18	; 0x12
    67d0:	39 88       	ldd	r3, Y+17	; 0x11
    67d2:	48 88       	ldd	r4, Y+16	; 0x10
    67d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    67d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    67d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    67da:	8c 84       	ldd	r8, Y+12	; 0x0c
    67dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    67de:	aa 84       	ldd	r10, Y+10	; 0x0a
    67e0:	b9 84       	ldd	r11, Y+9	; 0x09
    67e2:	c8 84       	ldd	r12, Y+8	; 0x08
    67e4:	df 80       	ldd	r13, Y+7	; 0x07
    67e6:	ee 80       	ldd	r14, Y+6	; 0x06
    67e8:	fd 80       	ldd	r15, Y+5	; 0x05
    67ea:	0c 81       	ldd	r16, Y+4	; 0x04
    67ec:	1b 81       	ldd	r17, Y+3	; 0x03
    67ee:	aa 81       	ldd	r26, Y+2	; 0x02
    67f0:	b9 81       	ldd	r27, Y+1	; 0x01
    67f2:	ce 0f       	add	r28, r30
    67f4:	d1 1d       	adc	r29, r1
    67f6:	0f b6       	in	r0, 0x3f	; 63
    67f8:	f8 94       	cli
    67fa:	de bf       	out	0x3e, r29	; 62
    67fc:	0f be       	out	0x3f, r0	; 63
    67fe:	cd bf       	out	0x3d, r28	; 61
    6800:	ed 01       	movw	r28, r26
    6802:	08 95       	ret

00006804 <malloc>:
    6804:	cf 93       	push	r28
    6806:	df 93       	push	r29
    6808:	bc 01       	movw	r22, r24
    680a:	82 30       	cpi	r24, 0x02	; 2
    680c:	91 05       	cpc	r25, r1
    680e:	10 f4       	brcc	.+4      	; 0x6814 <malloc+0x10>
    6810:	62 e0       	ldi	r22, 0x02	; 2
    6812:	70 e0       	ldi	r23, 0x00	; 0
    6814:	a0 91 1c 07 	lds	r26, 0x071C
    6818:	b0 91 1d 07 	lds	r27, 0x071D
    681c:	ed 01       	movw	r28, r26
    681e:	e0 e0       	ldi	r30, 0x00	; 0
    6820:	f0 e0       	ldi	r31, 0x00	; 0
    6822:	40 e0       	ldi	r20, 0x00	; 0
    6824:	50 e0       	ldi	r21, 0x00	; 0
    6826:	21 c0       	rjmp	.+66     	; 0x686a <malloc+0x66>
    6828:	88 81       	ld	r24, Y
    682a:	99 81       	ldd	r25, Y+1	; 0x01
    682c:	86 17       	cp	r24, r22
    682e:	97 07       	cpc	r25, r23
    6830:	69 f4       	brne	.+26     	; 0x684c <malloc+0x48>
    6832:	8a 81       	ldd	r24, Y+2	; 0x02
    6834:	9b 81       	ldd	r25, Y+3	; 0x03
    6836:	30 97       	sbiw	r30, 0x00	; 0
    6838:	19 f0       	breq	.+6      	; 0x6840 <malloc+0x3c>
    683a:	93 83       	std	Z+3, r25	; 0x03
    683c:	82 83       	std	Z+2, r24	; 0x02
    683e:	04 c0       	rjmp	.+8      	; 0x6848 <malloc+0x44>
    6840:	90 93 1d 07 	sts	0x071D, r25
    6844:	80 93 1c 07 	sts	0x071C, r24
    6848:	fe 01       	movw	r30, r28
    684a:	34 c0       	rjmp	.+104    	; 0x68b4 <malloc+0xb0>
    684c:	68 17       	cp	r22, r24
    684e:	79 07       	cpc	r23, r25
    6850:	38 f4       	brcc	.+14     	; 0x6860 <malloc+0x5c>
    6852:	41 15       	cp	r20, r1
    6854:	51 05       	cpc	r21, r1
    6856:	19 f0       	breq	.+6      	; 0x685e <malloc+0x5a>
    6858:	84 17       	cp	r24, r20
    685a:	95 07       	cpc	r25, r21
    685c:	08 f4       	brcc	.+2      	; 0x6860 <malloc+0x5c>
    685e:	ac 01       	movw	r20, r24
    6860:	fe 01       	movw	r30, r28
    6862:	8a 81       	ldd	r24, Y+2	; 0x02
    6864:	9b 81       	ldd	r25, Y+3	; 0x03
    6866:	9c 01       	movw	r18, r24
    6868:	e9 01       	movw	r28, r18
    686a:	20 97       	sbiw	r28, 0x00	; 0
    686c:	e9 f6       	brne	.-70     	; 0x6828 <malloc+0x24>
    686e:	41 15       	cp	r20, r1
    6870:	51 05       	cpc	r21, r1
    6872:	a9 f1       	breq	.+106    	; 0x68de <malloc+0xda>
    6874:	ca 01       	movw	r24, r20
    6876:	86 1b       	sub	r24, r22
    6878:	97 0b       	sbc	r25, r23
    687a:	04 97       	sbiw	r24, 0x04	; 4
    687c:	08 f4       	brcc	.+2      	; 0x6880 <malloc+0x7c>
    687e:	ba 01       	movw	r22, r20
    6880:	e0 e0       	ldi	r30, 0x00	; 0
    6882:	f0 e0       	ldi	r31, 0x00	; 0
    6884:	2a c0       	rjmp	.+84     	; 0x68da <malloc+0xd6>
    6886:	8d 91       	ld	r24, X+
    6888:	9c 91       	ld	r25, X
    688a:	11 97       	sbiw	r26, 0x01	; 1
    688c:	84 17       	cp	r24, r20
    688e:	95 07       	cpc	r25, r21
    6890:	f9 f4       	brne	.+62     	; 0x68d0 <malloc+0xcc>
    6892:	64 17       	cp	r22, r20
    6894:	75 07       	cpc	r23, r21
    6896:	81 f4       	brne	.+32     	; 0x68b8 <malloc+0xb4>
    6898:	12 96       	adiw	r26, 0x02	; 2
    689a:	8d 91       	ld	r24, X+
    689c:	9c 91       	ld	r25, X
    689e:	13 97       	sbiw	r26, 0x03	; 3
    68a0:	30 97       	sbiw	r30, 0x00	; 0
    68a2:	19 f0       	breq	.+6      	; 0x68aa <malloc+0xa6>
    68a4:	93 83       	std	Z+3, r25	; 0x03
    68a6:	82 83       	std	Z+2, r24	; 0x02
    68a8:	04 c0       	rjmp	.+8      	; 0x68b2 <malloc+0xae>
    68aa:	90 93 1d 07 	sts	0x071D, r25
    68ae:	80 93 1c 07 	sts	0x071C, r24
    68b2:	fd 01       	movw	r30, r26
    68b4:	32 96       	adiw	r30, 0x02	; 2
    68b6:	4f c0       	rjmp	.+158    	; 0x6956 <malloc+0x152>
    68b8:	ca 01       	movw	r24, r20
    68ba:	86 1b       	sub	r24, r22
    68bc:	97 0b       	sbc	r25, r23
    68be:	fd 01       	movw	r30, r26
    68c0:	e8 0f       	add	r30, r24
    68c2:	f9 1f       	adc	r31, r25
    68c4:	61 93       	st	Z+, r22
    68c6:	71 93       	st	Z+, r23
    68c8:	02 97       	sbiw	r24, 0x02	; 2
    68ca:	8d 93       	st	X+, r24
    68cc:	9c 93       	st	X, r25
    68ce:	43 c0       	rjmp	.+134    	; 0x6956 <malloc+0x152>
    68d0:	fd 01       	movw	r30, r26
    68d2:	82 81       	ldd	r24, Z+2	; 0x02
    68d4:	93 81       	ldd	r25, Z+3	; 0x03
    68d6:	9c 01       	movw	r18, r24
    68d8:	d9 01       	movw	r26, r18
    68da:	10 97       	sbiw	r26, 0x00	; 0
    68dc:	a1 f6       	brne	.-88     	; 0x6886 <malloc+0x82>
    68de:	80 91 1a 07 	lds	r24, 0x071A
    68e2:	90 91 1b 07 	lds	r25, 0x071B
    68e6:	89 2b       	or	r24, r25
    68e8:	41 f4       	brne	.+16     	; 0x68fa <malloc+0xf6>
    68ea:	80 91 4d 03 	lds	r24, 0x034D
    68ee:	90 91 4e 03 	lds	r25, 0x034E
    68f2:	90 93 1b 07 	sts	0x071B, r25
    68f6:	80 93 1a 07 	sts	0x071A, r24
    68fa:	40 91 4f 03 	lds	r20, 0x034F
    68fe:	50 91 50 03 	lds	r21, 0x0350
    6902:	41 15       	cp	r20, r1
    6904:	51 05       	cpc	r21, r1
    6906:	41 f4       	brne	.+16     	; 0x6918 <malloc+0x114>
    6908:	4d b7       	in	r20, 0x3d	; 61
    690a:	5e b7       	in	r21, 0x3e	; 62
    690c:	80 91 4b 03 	lds	r24, 0x034B
    6910:	90 91 4c 03 	lds	r25, 0x034C
    6914:	48 1b       	sub	r20, r24
    6916:	59 0b       	sbc	r21, r25
    6918:	20 91 1a 07 	lds	r18, 0x071A
    691c:	30 91 1b 07 	lds	r19, 0x071B
    6920:	24 17       	cp	r18, r20
    6922:	35 07       	cpc	r19, r21
    6924:	b0 f4       	brcc	.+44     	; 0x6952 <malloc+0x14e>
    6926:	ca 01       	movw	r24, r20
    6928:	82 1b       	sub	r24, r18
    692a:	93 0b       	sbc	r25, r19
    692c:	86 17       	cp	r24, r22
    692e:	97 07       	cpc	r25, r23
    6930:	80 f0       	brcs	.+32     	; 0x6952 <malloc+0x14e>
    6932:	ab 01       	movw	r20, r22
    6934:	4e 5f       	subi	r20, 0xFE	; 254
    6936:	5f 4f       	sbci	r21, 0xFF	; 255
    6938:	84 17       	cp	r24, r20
    693a:	95 07       	cpc	r25, r21
    693c:	50 f0       	brcs	.+20     	; 0x6952 <malloc+0x14e>
    693e:	42 0f       	add	r20, r18
    6940:	53 1f       	adc	r21, r19
    6942:	50 93 1b 07 	sts	0x071B, r21
    6946:	40 93 1a 07 	sts	0x071A, r20
    694a:	f9 01       	movw	r30, r18
    694c:	61 93       	st	Z+, r22
    694e:	71 93       	st	Z+, r23
    6950:	02 c0       	rjmp	.+4      	; 0x6956 <malloc+0x152>
    6952:	e0 e0       	ldi	r30, 0x00	; 0
    6954:	f0 e0       	ldi	r31, 0x00	; 0
    6956:	cf 01       	movw	r24, r30
    6958:	df 91       	pop	r29
    695a:	cf 91       	pop	r28
    695c:	08 95       	ret

0000695e <free>:
    695e:	cf 93       	push	r28
    6960:	df 93       	push	r29
    6962:	00 97       	sbiw	r24, 0x00	; 0
    6964:	09 f4       	brne	.+2      	; 0x6968 <free+0xa>
    6966:	50 c0       	rjmp	.+160    	; 0x6a08 <free+0xaa>
    6968:	ec 01       	movw	r28, r24
    696a:	22 97       	sbiw	r28, 0x02	; 2
    696c:	1b 82       	std	Y+3, r1	; 0x03
    696e:	1a 82       	std	Y+2, r1	; 0x02
    6970:	a0 91 1c 07 	lds	r26, 0x071C
    6974:	b0 91 1d 07 	lds	r27, 0x071D
    6978:	10 97       	sbiw	r26, 0x00	; 0
    697a:	09 f1       	breq	.+66     	; 0x69be <free+0x60>
    697c:	40 e0       	ldi	r20, 0x00	; 0
    697e:	50 e0       	ldi	r21, 0x00	; 0
    6980:	ac 17       	cp	r26, r28
    6982:	bd 07       	cpc	r27, r29
    6984:	08 f1       	brcs	.+66     	; 0x69c8 <free+0x6a>
    6986:	bb 83       	std	Y+3, r27	; 0x03
    6988:	aa 83       	std	Y+2, r26	; 0x02
    698a:	fe 01       	movw	r30, r28
    698c:	21 91       	ld	r18, Z+
    698e:	31 91       	ld	r19, Z+
    6990:	e2 0f       	add	r30, r18
    6992:	f3 1f       	adc	r31, r19
    6994:	ae 17       	cp	r26, r30
    6996:	bf 07       	cpc	r27, r31
    6998:	79 f4       	brne	.+30     	; 0x69b8 <free+0x5a>
    699a:	8d 91       	ld	r24, X+
    699c:	9c 91       	ld	r25, X
    699e:	11 97       	sbiw	r26, 0x01	; 1
    69a0:	28 0f       	add	r18, r24
    69a2:	39 1f       	adc	r19, r25
    69a4:	2e 5f       	subi	r18, 0xFE	; 254
    69a6:	3f 4f       	sbci	r19, 0xFF	; 255
    69a8:	39 83       	std	Y+1, r19	; 0x01
    69aa:	28 83       	st	Y, r18
    69ac:	12 96       	adiw	r26, 0x02	; 2
    69ae:	8d 91       	ld	r24, X+
    69b0:	9c 91       	ld	r25, X
    69b2:	13 97       	sbiw	r26, 0x03	; 3
    69b4:	9b 83       	std	Y+3, r25	; 0x03
    69b6:	8a 83       	std	Y+2, r24	; 0x02
    69b8:	41 15       	cp	r20, r1
    69ba:	51 05       	cpc	r21, r1
    69bc:	71 f4       	brne	.+28     	; 0x69da <free+0x7c>
    69be:	d0 93 1d 07 	sts	0x071D, r29
    69c2:	c0 93 1c 07 	sts	0x071C, r28
    69c6:	20 c0       	rjmp	.+64     	; 0x6a08 <free+0xaa>
    69c8:	12 96       	adiw	r26, 0x02	; 2
    69ca:	8d 91       	ld	r24, X+
    69cc:	9c 91       	ld	r25, X
    69ce:	13 97       	sbiw	r26, 0x03	; 3
    69d0:	ad 01       	movw	r20, r26
    69d2:	00 97       	sbiw	r24, 0x00	; 0
    69d4:	11 f0       	breq	.+4      	; 0x69da <free+0x7c>
    69d6:	dc 01       	movw	r26, r24
    69d8:	d3 cf       	rjmp	.-90     	; 0x6980 <free+0x22>
    69da:	fa 01       	movw	r30, r20
    69dc:	d3 83       	std	Z+3, r29	; 0x03
    69de:	c2 83       	std	Z+2, r28	; 0x02
    69e0:	21 91       	ld	r18, Z+
    69e2:	31 91       	ld	r19, Z+
    69e4:	e2 0f       	add	r30, r18
    69e6:	f3 1f       	adc	r31, r19
    69e8:	ce 17       	cp	r28, r30
    69ea:	df 07       	cpc	r29, r31
    69ec:	69 f4       	brne	.+26     	; 0x6a08 <free+0xaa>
    69ee:	88 81       	ld	r24, Y
    69f0:	99 81       	ldd	r25, Y+1	; 0x01
    69f2:	28 0f       	add	r18, r24
    69f4:	39 1f       	adc	r19, r25
    69f6:	2e 5f       	subi	r18, 0xFE	; 254
    69f8:	3f 4f       	sbci	r19, 0xFF	; 255
    69fa:	fa 01       	movw	r30, r20
    69fc:	31 83       	std	Z+1, r19	; 0x01
    69fe:	20 83       	st	Z, r18
    6a00:	8a 81       	ldd	r24, Y+2	; 0x02
    6a02:	9b 81       	ldd	r25, Y+3	; 0x03
    6a04:	93 83       	std	Z+3, r25	; 0x03
    6a06:	82 83       	std	Z+2, r24	; 0x02
    6a08:	df 91       	pop	r29
    6a0a:	cf 91       	pop	r28
    6a0c:	08 95       	ret

00006a0e <__ftoa_engine>:
    6a0e:	28 30       	cpi	r18, 0x08	; 8
    6a10:	08 f0       	brcs	.+2      	; 0x6a14 <__ftoa_engine+0x6>
    6a12:	27 e0       	ldi	r18, 0x07	; 7
    6a14:	33 27       	eor	r19, r19
    6a16:	da 01       	movw	r26, r20
    6a18:	99 0f       	add	r25, r25
    6a1a:	31 1d       	adc	r19, r1
    6a1c:	87 fd       	sbrc	r24, 7
    6a1e:	91 60       	ori	r25, 0x01	; 1
    6a20:	00 96       	adiw	r24, 0x00	; 0
    6a22:	61 05       	cpc	r22, r1
    6a24:	71 05       	cpc	r23, r1
    6a26:	39 f4       	brne	.+14     	; 0x6a36 <__ftoa_engine+0x28>
    6a28:	32 60       	ori	r19, 0x02	; 2
    6a2a:	2e 5f       	subi	r18, 0xFE	; 254
    6a2c:	3d 93       	st	X+, r19
    6a2e:	30 e3       	ldi	r19, 0x30	; 48
    6a30:	2a 95       	dec	r18
    6a32:	e1 f7       	brne	.-8      	; 0x6a2c <__ftoa_engine+0x1e>
    6a34:	08 95       	ret
    6a36:	9f 3f       	cpi	r25, 0xFF	; 255
    6a38:	30 f0       	brcs	.+12     	; 0x6a46 <__ftoa_engine+0x38>
    6a3a:	80 38       	cpi	r24, 0x80	; 128
    6a3c:	71 05       	cpc	r23, r1
    6a3e:	61 05       	cpc	r22, r1
    6a40:	09 f0       	breq	.+2      	; 0x6a44 <__ftoa_engine+0x36>
    6a42:	3c 5f       	subi	r19, 0xFC	; 252
    6a44:	3c 5f       	subi	r19, 0xFC	; 252
    6a46:	3d 93       	st	X+, r19
    6a48:	91 30       	cpi	r25, 0x01	; 1
    6a4a:	08 f0       	brcs	.+2      	; 0x6a4e <__ftoa_engine+0x40>
    6a4c:	80 68       	ori	r24, 0x80	; 128
    6a4e:	91 1d       	adc	r25, r1
    6a50:	df 93       	push	r29
    6a52:	cf 93       	push	r28
    6a54:	1f 93       	push	r17
    6a56:	0f 93       	push	r16
    6a58:	ff 92       	push	r15
    6a5a:	ef 92       	push	r14
    6a5c:	19 2f       	mov	r17, r25
    6a5e:	98 7f       	andi	r25, 0xF8	; 248
    6a60:	96 95       	lsr	r25
    6a62:	e9 2f       	mov	r30, r25
    6a64:	96 95       	lsr	r25
    6a66:	96 95       	lsr	r25
    6a68:	e9 0f       	add	r30, r25
    6a6a:	ff 27       	eor	r31, r31
    6a6c:	ef 53       	subi	r30, 0x3F	; 63
    6a6e:	fa 4f       	sbci	r31, 0xFA	; 250
    6a70:	99 27       	eor	r25, r25
    6a72:	33 27       	eor	r19, r19
    6a74:	ee 24       	eor	r14, r14
    6a76:	ff 24       	eor	r15, r15
    6a78:	a7 01       	movw	r20, r14
    6a7a:	e7 01       	movw	r28, r14
    6a7c:	05 90       	lpm	r0, Z+
    6a7e:	08 94       	sec
    6a80:	07 94       	ror	r0
    6a82:	28 f4       	brcc	.+10     	; 0x6a8e <__ftoa_engine+0x80>
    6a84:	36 0f       	add	r19, r22
    6a86:	e7 1e       	adc	r14, r23
    6a88:	f8 1e       	adc	r15, r24
    6a8a:	49 1f       	adc	r20, r25
    6a8c:	51 1d       	adc	r21, r1
    6a8e:	66 0f       	add	r22, r22
    6a90:	77 1f       	adc	r23, r23
    6a92:	88 1f       	adc	r24, r24
    6a94:	99 1f       	adc	r25, r25
    6a96:	06 94       	lsr	r0
    6a98:	a1 f7       	brne	.-24     	; 0x6a82 <__ftoa_engine+0x74>
    6a9a:	05 90       	lpm	r0, Z+
    6a9c:	07 94       	ror	r0
    6a9e:	28 f4       	brcc	.+10     	; 0x6aaa <__ftoa_engine+0x9c>
    6aa0:	e7 0e       	add	r14, r23
    6aa2:	f8 1e       	adc	r15, r24
    6aa4:	49 1f       	adc	r20, r25
    6aa6:	56 1f       	adc	r21, r22
    6aa8:	c1 1d       	adc	r28, r1
    6aaa:	77 0f       	add	r23, r23
    6aac:	88 1f       	adc	r24, r24
    6aae:	99 1f       	adc	r25, r25
    6ab0:	66 1f       	adc	r22, r22
    6ab2:	06 94       	lsr	r0
    6ab4:	a1 f7       	brne	.-24     	; 0x6a9e <__ftoa_engine+0x90>
    6ab6:	05 90       	lpm	r0, Z+
    6ab8:	07 94       	ror	r0
    6aba:	28 f4       	brcc	.+10     	; 0x6ac6 <__ftoa_engine+0xb8>
    6abc:	f8 0e       	add	r15, r24
    6abe:	49 1f       	adc	r20, r25
    6ac0:	56 1f       	adc	r21, r22
    6ac2:	c7 1f       	adc	r28, r23
    6ac4:	d1 1d       	adc	r29, r1
    6ac6:	88 0f       	add	r24, r24
    6ac8:	99 1f       	adc	r25, r25
    6aca:	66 1f       	adc	r22, r22
    6acc:	77 1f       	adc	r23, r23
    6ace:	06 94       	lsr	r0
    6ad0:	a1 f7       	brne	.-24     	; 0x6aba <__ftoa_engine+0xac>
    6ad2:	05 90       	lpm	r0, Z+
    6ad4:	07 94       	ror	r0
    6ad6:	20 f4       	brcc	.+8      	; 0x6ae0 <__ftoa_engine+0xd2>
    6ad8:	49 0f       	add	r20, r25
    6ada:	56 1f       	adc	r21, r22
    6adc:	c7 1f       	adc	r28, r23
    6ade:	d8 1f       	adc	r29, r24
    6ae0:	99 0f       	add	r25, r25
    6ae2:	66 1f       	adc	r22, r22
    6ae4:	77 1f       	adc	r23, r23
    6ae6:	88 1f       	adc	r24, r24
    6ae8:	06 94       	lsr	r0
    6aea:	a9 f7       	brne	.-22     	; 0x6ad6 <__ftoa_engine+0xc8>
    6aec:	84 91       	lpm	r24, Z+
    6aee:	10 95       	com	r17
    6af0:	17 70       	andi	r17, 0x07	; 7
    6af2:	41 f0       	breq	.+16     	; 0x6b04 <__ftoa_engine+0xf6>
    6af4:	d6 95       	lsr	r29
    6af6:	c7 95       	ror	r28
    6af8:	57 95       	ror	r21
    6afa:	47 95       	ror	r20
    6afc:	f7 94       	ror	r15
    6afe:	e7 94       	ror	r14
    6b00:	1a 95       	dec	r17
    6b02:	c1 f7       	brne	.-16     	; 0x6af4 <__ftoa_engine+0xe6>
    6b04:	e7 e6       	ldi	r30, 0x67	; 103
    6b06:	f5 e0       	ldi	r31, 0x05	; 5
    6b08:	68 94       	set
    6b0a:	15 90       	lpm	r1, Z+
    6b0c:	15 91       	lpm	r17, Z+
    6b0e:	35 91       	lpm	r19, Z+
    6b10:	65 91       	lpm	r22, Z+
    6b12:	95 91       	lpm	r25, Z+
    6b14:	05 90       	lpm	r0, Z+
    6b16:	7f e2       	ldi	r23, 0x2F	; 47
    6b18:	73 95       	inc	r23
    6b1a:	e1 18       	sub	r14, r1
    6b1c:	f1 0a       	sbc	r15, r17
    6b1e:	43 0b       	sbc	r20, r19
    6b20:	56 0b       	sbc	r21, r22
    6b22:	c9 0b       	sbc	r28, r25
    6b24:	d0 09       	sbc	r29, r0
    6b26:	c0 f7       	brcc	.-16     	; 0x6b18 <__ftoa_engine+0x10a>
    6b28:	e1 0c       	add	r14, r1
    6b2a:	f1 1e       	adc	r15, r17
    6b2c:	43 1f       	adc	r20, r19
    6b2e:	56 1f       	adc	r21, r22
    6b30:	c9 1f       	adc	r28, r25
    6b32:	d0 1d       	adc	r29, r0
    6b34:	7e f4       	brtc	.+30     	; 0x6b54 <__ftoa_engine+0x146>
    6b36:	70 33       	cpi	r23, 0x30	; 48
    6b38:	11 f4       	brne	.+4      	; 0x6b3e <__ftoa_engine+0x130>
    6b3a:	8a 95       	dec	r24
    6b3c:	e6 cf       	rjmp	.-52     	; 0x6b0a <__ftoa_engine+0xfc>
    6b3e:	e8 94       	clt
    6b40:	01 50       	subi	r16, 0x01	; 1
    6b42:	30 f0       	brcs	.+12     	; 0x6b50 <__ftoa_engine+0x142>
    6b44:	08 0f       	add	r16, r24
    6b46:	0a f4       	brpl	.+2      	; 0x6b4a <__ftoa_engine+0x13c>
    6b48:	00 27       	eor	r16, r16
    6b4a:	02 17       	cp	r16, r18
    6b4c:	08 f4       	brcc	.+2      	; 0x6b50 <__ftoa_engine+0x142>
    6b4e:	20 2f       	mov	r18, r16
    6b50:	23 95       	inc	r18
    6b52:	02 2f       	mov	r16, r18
    6b54:	7a 33       	cpi	r23, 0x3A	; 58
    6b56:	28 f0       	brcs	.+10     	; 0x6b62 <__ftoa_engine+0x154>
    6b58:	79 e3       	ldi	r23, 0x39	; 57
    6b5a:	7d 93       	st	X+, r23
    6b5c:	2a 95       	dec	r18
    6b5e:	e9 f7       	brne	.-6      	; 0x6b5a <__ftoa_engine+0x14c>
    6b60:	10 c0       	rjmp	.+32     	; 0x6b82 <__ftoa_engine+0x174>
    6b62:	7d 93       	st	X+, r23
    6b64:	2a 95       	dec	r18
    6b66:	89 f6       	brne	.-94     	; 0x6b0a <__ftoa_engine+0xfc>
    6b68:	06 94       	lsr	r0
    6b6a:	97 95       	ror	r25
    6b6c:	67 95       	ror	r22
    6b6e:	37 95       	ror	r19
    6b70:	17 95       	ror	r17
    6b72:	17 94       	ror	r1
    6b74:	e1 18       	sub	r14, r1
    6b76:	f1 0a       	sbc	r15, r17
    6b78:	43 0b       	sbc	r20, r19
    6b7a:	56 0b       	sbc	r21, r22
    6b7c:	c9 0b       	sbc	r28, r25
    6b7e:	d0 09       	sbc	r29, r0
    6b80:	98 f0       	brcs	.+38     	; 0x6ba8 <__ftoa_engine+0x19a>
    6b82:	23 95       	inc	r18
    6b84:	7e 91       	ld	r23, -X
    6b86:	73 95       	inc	r23
    6b88:	7a 33       	cpi	r23, 0x3A	; 58
    6b8a:	08 f0       	brcs	.+2      	; 0x6b8e <__ftoa_engine+0x180>
    6b8c:	70 e3       	ldi	r23, 0x30	; 48
    6b8e:	7c 93       	st	X, r23
    6b90:	20 13       	cpse	r18, r16
    6b92:	b8 f7       	brcc	.-18     	; 0x6b82 <__ftoa_engine+0x174>
    6b94:	7e 91       	ld	r23, -X
    6b96:	70 61       	ori	r23, 0x10	; 16
    6b98:	7d 93       	st	X+, r23
    6b9a:	30 f0       	brcs	.+12     	; 0x6ba8 <__ftoa_engine+0x19a>
    6b9c:	83 95       	inc	r24
    6b9e:	71 e3       	ldi	r23, 0x31	; 49
    6ba0:	7d 93       	st	X+, r23
    6ba2:	70 e3       	ldi	r23, 0x30	; 48
    6ba4:	2a 95       	dec	r18
    6ba6:	e1 f7       	brne	.-8      	; 0x6ba0 <__ftoa_engine+0x192>
    6ba8:	11 24       	eor	r1, r1
    6baa:	ef 90       	pop	r14
    6bac:	ff 90       	pop	r15
    6bae:	0f 91       	pop	r16
    6bb0:	1f 91       	pop	r17
    6bb2:	cf 91       	pop	r28
    6bb4:	df 91       	pop	r29
    6bb6:	99 27       	eor	r25, r25
    6bb8:	87 fd       	sbrc	r24, 7
    6bba:	90 95       	com	r25
    6bbc:	08 95       	ret

00006bbe <strnlen_P>:
    6bbe:	fc 01       	movw	r30, r24
    6bc0:	05 90       	lpm	r0, Z+
    6bc2:	61 50       	subi	r22, 0x01	; 1
    6bc4:	70 40       	sbci	r23, 0x00	; 0
    6bc6:	01 10       	cpse	r0, r1
    6bc8:	d8 f7       	brcc	.-10     	; 0x6bc0 <strnlen_P+0x2>
    6bca:	80 95       	com	r24
    6bcc:	90 95       	com	r25
    6bce:	8e 0f       	add	r24, r30
    6bd0:	9f 1f       	adc	r25, r31
    6bd2:	08 95       	ret

00006bd4 <strnlen>:
    6bd4:	fc 01       	movw	r30, r24
    6bd6:	61 50       	subi	r22, 0x01	; 1
    6bd8:	70 40       	sbci	r23, 0x00	; 0
    6bda:	01 90       	ld	r0, Z+
    6bdc:	01 10       	cpse	r0, r1
    6bde:	d8 f7       	brcc	.-10     	; 0x6bd6 <strnlen+0x2>
    6be0:	80 95       	com	r24
    6be2:	90 95       	com	r25
    6be4:	8e 0f       	add	r24, r30
    6be6:	9f 1f       	adc	r25, r31
    6be8:	08 95       	ret

00006bea <fputc>:
    6bea:	0f 93       	push	r16
    6bec:	1f 93       	push	r17
    6bee:	cf 93       	push	r28
    6bf0:	df 93       	push	r29
    6bf2:	8c 01       	movw	r16, r24
    6bf4:	eb 01       	movw	r28, r22
    6bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    6bf8:	81 ff       	sbrs	r24, 1
    6bfa:	1b c0       	rjmp	.+54     	; 0x6c32 <fputc+0x48>
    6bfc:	82 ff       	sbrs	r24, 2
    6bfe:	0d c0       	rjmp	.+26     	; 0x6c1a <fputc+0x30>
    6c00:	2e 81       	ldd	r18, Y+6	; 0x06
    6c02:	3f 81       	ldd	r19, Y+7	; 0x07
    6c04:	8c 81       	ldd	r24, Y+4	; 0x04
    6c06:	9d 81       	ldd	r25, Y+5	; 0x05
    6c08:	28 17       	cp	r18, r24
    6c0a:	39 07       	cpc	r19, r25
    6c0c:	64 f4       	brge	.+24     	; 0x6c26 <fputc+0x3c>
    6c0e:	e8 81       	ld	r30, Y
    6c10:	f9 81       	ldd	r31, Y+1	; 0x01
    6c12:	01 93       	st	Z+, r16
    6c14:	f9 83       	std	Y+1, r31	; 0x01
    6c16:	e8 83       	st	Y, r30
    6c18:	06 c0       	rjmp	.+12     	; 0x6c26 <fputc+0x3c>
    6c1a:	e8 85       	ldd	r30, Y+8	; 0x08
    6c1c:	f9 85       	ldd	r31, Y+9	; 0x09
    6c1e:	80 2f       	mov	r24, r16
    6c20:	09 95       	icall
    6c22:	89 2b       	or	r24, r25
    6c24:	31 f4       	brne	.+12     	; 0x6c32 <fputc+0x48>
    6c26:	8e 81       	ldd	r24, Y+6	; 0x06
    6c28:	9f 81       	ldd	r25, Y+7	; 0x07
    6c2a:	01 96       	adiw	r24, 0x01	; 1
    6c2c:	9f 83       	std	Y+7, r25	; 0x07
    6c2e:	8e 83       	std	Y+6, r24	; 0x06
    6c30:	02 c0       	rjmp	.+4      	; 0x6c36 <fputc+0x4c>
    6c32:	0f ef       	ldi	r16, 0xFF	; 255
    6c34:	1f ef       	ldi	r17, 0xFF	; 255
    6c36:	c8 01       	movw	r24, r16
    6c38:	df 91       	pop	r29
    6c3a:	cf 91       	pop	r28
    6c3c:	1f 91       	pop	r17
    6c3e:	0f 91       	pop	r16
    6c40:	08 95       	ret

00006c42 <printf>:
    6c42:	a0 e0       	ldi	r26, 0x00	; 0
    6c44:	b0 e0       	ldi	r27, 0x00	; 0
    6c46:	e6 e2       	ldi	r30, 0x26	; 38
    6c48:	f6 e3       	ldi	r31, 0x36	; 54
    6c4a:	b5 cd       	rjmp	.-1174   	; 0x67b6 <__prologue_saves__+0x20>
    6c4c:	fe 01       	movw	r30, r28
    6c4e:	35 96       	adiw	r30, 0x05	; 5
    6c50:	61 91       	ld	r22, Z+
    6c52:	71 91       	ld	r23, Z+
    6c54:	80 91 20 07 	lds	r24, 0x0720
    6c58:	90 91 21 07 	lds	r25, 0x0721
    6c5c:	af 01       	movw	r20, r30
    6c5e:	f2 d9       	rcall	.-3100   	; 0x6044 <vfprintf>
    6c60:	20 96       	adiw	r28, 0x00	; 0
    6c62:	e2 e0       	ldi	r30, 0x02	; 2
    6c64:	c4 cd       	rjmp	.-1144   	; 0x67ee <__epilogue_restores__+0x20>

00006c66 <puts>:
    6c66:	0f 93       	push	r16
    6c68:	1f 93       	push	r17
    6c6a:	cf 93       	push	r28
    6c6c:	df 93       	push	r29
    6c6e:	8c 01       	movw	r16, r24
    6c70:	e0 91 20 07 	lds	r30, 0x0720
    6c74:	f0 91 21 07 	lds	r31, 0x0721
    6c78:	83 81       	ldd	r24, Z+3	; 0x03
    6c7a:	81 ff       	sbrs	r24, 1
    6c7c:	21 c0       	rjmp	.+66     	; 0x6cc0 <puts+0x5a>
    6c7e:	c0 e0       	ldi	r28, 0x00	; 0
    6c80:	d0 e0       	ldi	r29, 0x00	; 0
    6c82:	0d c0       	rjmp	.+26     	; 0x6c9e <puts+0x38>
    6c84:	e0 91 20 07 	lds	r30, 0x0720
    6c88:	f0 91 21 07 	lds	r31, 0x0721
    6c8c:	20 85       	ldd	r18, Z+8	; 0x08
    6c8e:	31 85       	ldd	r19, Z+9	; 0x09
    6c90:	bf 01       	movw	r22, r30
    6c92:	f9 01       	movw	r30, r18
    6c94:	09 95       	icall
    6c96:	89 2b       	or	r24, r25
    6c98:	11 f0       	breq	.+4      	; 0x6c9e <puts+0x38>
    6c9a:	cf ef       	ldi	r28, 0xFF	; 255
    6c9c:	df ef       	ldi	r29, 0xFF	; 255
    6c9e:	f8 01       	movw	r30, r16
    6ca0:	81 91       	ld	r24, Z+
    6ca2:	8f 01       	movw	r16, r30
    6ca4:	88 23       	and	r24, r24
    6ca6:	71 f7       	brne	.-36     	; 0x6c84 <puts+0x1e>
    6ca8:	e0 91 20 07 	lds	r30, 0x0720
    6cac:	f0 91 21 07 	lds	r31, 0x0721
    6cb0:	20 85       	ldd	r18, Z+8	; 0x08
    6cb2:	31 85       	ldd	r19, Z+9	; 0x09
    6cb4:	8a e0       	ldi	r24, 0x0A	; 10
    6cb6:	bf 01       	movw	r22, r30
    6cb8:	f9 01       	movw	r30, r18
    6cba:	09 95       	icall
    6cbc:	89 2b       	or	r24, r25
    6cbe:	11 f0       	breq	.+4      	; 0x6cc4 <puts+0x5e>
    6cc0:	cf ef       	ldi	r28, 0xFF	; 255
    6cc2:	df ef       	ldi	r29, 0xFF	; 255
    6cc4:	ce 01       	movw	r24, r28
    6cc6:	df 91       	pop	r29
    6cc8:	cf 91       	pop	r28
    6cca:	1f 91       	pop	r17
    6ccc:	0f 91       	pop	r16
    6cce:	08 95       	ret

00006cd0 <__ultoa_invert>:
    6cd0:	fa 01       	movw	r30, r20
    6cd2:	aa 27       	eor	r26, r26
    6cd4:	28 30       	cpi	r18, 0x08	; 8
    6cd6:	51 f1       	breq	.+84     	; 0x6d2c <__ultoa_invert+0x5c>
    6cd8:	20 31       	cpi	r18, 0x10	; 16
    6cda:	81 f1       	breq	.+96     	; 0x6d3c <__ultoa_invert+0x6c>
    6cdc:	e8 94       	clt
    6cde:	6f 93       	push	r22
    6ce0:	6e 7f       	andi	r22, 0xFE	; 254
    6ce2:	6e 5f       	subi	r22, 0xFE	; 254
    6ce4:	7f 4f       	sbci	r23, 0xFF	; 255
    6ce6:	8f 4f       	sbci	r24, 0xFF	; 255
    6ce8:	9f 4f       	sbci	r25, 0xFF	; 255
    6cea:	af 4f       	sbci	r26, 0xFF	; 255
    6cec:	b1 e0       	ldi	r27, 0x01	; 1
    6cee:	3e d0       	rcall	.+124    	; 0x6d6c <__ultoa_invert+0x9c>
    6cf0:	b4 e0       	ldi	r27, 0x04	; 4
    6cf2:	3c d0       	rcall	.+120    	; 0x6d6c <__ultoa_invert+0x9c>
    6cf4:	67 0f       	add	r22, r23
    6cf6:	78 1f       	adc	r23, r24
    6cf8:	89 1f       	adc	r24, r25
    6cfa:	9a 1f       	adc	r25, r26
    6cfc:	a1 1d       	adc	r26, r1
    6cfe:	68 0f       	add	r22, r24
    6d00:	79 1f       	adc	r23, r25
    6d02:	8a 1f       	adc	r24, r26
    6d04:	91 1d       	adc	r25, r1
    6d06:	a1 1d       	adc	r26, r1
    6d08:	6a 0f       	add	r22, r26
    6d0a:	71 1d       	adc	r23, r1
    6d0c:	81 1d       	adc	r24, r1
    6d0e:	91 1d       	adc	r25, r1
    6d10:	a1 1d       	adc	r26, r1
    6d12:	20 d0       	rcall	.+64     	; 0x6d54 <__ultoa_invert+0x84>
    6d14:	09 f4       	brne	.+2      	; 0x6d18 <__ultoa_invert+0x48>
    6d16:	68 94       	set
    6d18:	3f 91       	pop	r19
    6d1a:	2a e0       	ldi	r18, 0x0A	; 10
    6d1c:	26 9f       	mul	r18, r22
    6d1e:	11 24       	eor	r1, r1
    6d20:	30 19       	sub	r19, r0
    6d22:	30 5d       	subi	r19, 0xD0	; 208
    6d24:	31 93       	st	Z+, r19
    6d26:	de f6       	brtc	.-74     	; 0x6cde <__ultoa_invert+0xe>
    6d28:	cf 01       	movw	r24, r30
    6d2a:	08 95       	ret
    6d2c:	46 2f       	mov	r20, r22
    6d2e:	47 70       	andi	r20, 0x07	; 7
    6d30:	40 5d       	subi	r20, 0xD0	; 208
    6d32:	41 93       	st	Z+, r20
    6d34:	b3 e0       	ldi	r27, 0x03	; 3
    6d36:	0f d0       	rcall	.+30     	; 0x6d56 <__ultoa_invert+0x86>
    6d38:	c9 f7       	brne	.-14     	; 0x6d2c <__ultoa_invert+0x5c>
    6d3a:	f6 cf       	rjmp	.-20     	; 0x6d28 <__ultoa_invert+0x58>
    6d3c:	46 2f       	mov	r20, r22
    6d3e:	4f 70       	andi	r20, 0x0F	; 15
    6d40:	40 5d       	subi	r20, 0xD0	; 208
    6d42:	4a 33       	cpi	r20, 0x3A	; 58
    6d44:	18 f0       	brcs	.+6      	; 0x6d4c <__ultoa_invert+0x7c>
    6d46:	49 5d       	subi	r20, 0xD9	; 217
    6d48:	31 fd       	sbrc	r19, 1
    6d4a:	40 52       	subi	r20, 0x20	; 32
    6d4c:	41 93       	st	Z+, r20
    6d4e:	02 d0       	rcall	.+4      	; 0x6d54 <__ultoa_invert+0x84>
    6d50:	a9 f7       	brne	.-22     	; 0x6d3c <__ultoa_invert+0x6c>
    6d52:	ea cf       	rjmp	.-44     	; 0x6d28 <__ultoa_invert+0x58>
    6d54:	b4 e0       	ldi	r27, 0x04	; 4
    6d56:	a6 95       	lsr	r26
    6d58:	97 95       	ror	r25
    6d5a:	87 95       	ror	r24
    6d5c:	77 95       	ror	r23
    6d5e:	67 95       	ror	r22
    6d60:	ba 95       	dec	r27
    6d62:	c9 f7       	brne	.-14     	; 0x6d56 <__ultoa_invert+0x86>
    6d64:	00 97       	sbiw	r24, 0x00	; 0
    6d66:	61 05       	cpc	r22, r1
    6d68:	71 05       	cpc	r23, r1
    6d6a:	08 95       	ret
    6d6c:	9b 01       	movw	r18, r22
    6d6e:	ac 01       	movw	r20, r24
    6d70:	0a 2e       	mov	r0, r26
    6d72:	06 94       	lsr	r0
    6d74:	57 95       	ror	r21
    6d76:	47 95       	ror	r20
    6d78:	37 95       	ror	r19
    6d7a:	27 95       	ror	r18
    6d7c:	ba 95       	dec	r27
    6d7e:	c9 f7       	brne	.-14     	; 0x6d72 <__ultoa_invert+0xa2>
    6d80:	62 0f       	add	r22, r18
    6d82:	73 1f       	adc	r23, r19
    6d84:	84 1f       	adc	r24, r20
    6d86:	95 1f       	adc	r25, r21
    6d88:	a0 1d       	adc	r26, r0
    6d8a:	08 95       	ret

00006d8c <_exit>:
    6d8c:	f8 94       	cli

00006d8e <__stop_program>:
    6d8e:	ff cf       	rjmp	.-2      	; 0x6d8e <__stop_program>
