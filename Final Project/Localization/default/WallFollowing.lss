
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000358  00800100  00007104  00007198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007104  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d8  00800458  00800458  000074f0  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000074f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000087b  00000000  00000000  00007550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e9b  00000000  00000000  00007dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000048e  00000000  00000000  00009c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a1d  00000000  00000000  0000a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  0000bb14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e2b  00000000  00000000  0000be64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001379  00000000  00000000  0000cc8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 2d 25 	jmp	0x4a5a	; 0x4a5a <__vector_4>
      14:	0c 94 56 25 	jmp	0x4aac	; 0x4aac <__vector_5>
      18:	0c 94 7f 25 	jmp	0x4afe	; 0x4afe <__vector_6>
      1c:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 0e 24 	jmp	0x481c	; 0x481c <__vector_9>
      28:	0c 94 37 24 	jmp	0x486e	; 0x486e <__vector_10>
      2c:	0c 94 60 24 	jmp	0x48c0	; 0x48c0 <__vector_11>
      30:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <__vector_12>
      34:	0c 94 89 24 	jmp	0x4912	; 0x4912 <__vector_13>
      38:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__vector_14>
      3c:	0c 94 04 25 	jmp	0x4a08	; 0x4a08 <__vector_15>
      40:	0c 94 93 23 	jmp	0x4726	; 0x4726 <__vector_16>
      44:	0c 94 bc 23 	jmp	0x4778	; 0x4778 <__vector_17>
      48:	0c 94 e5 23 	jmp	0x47ca	; 0x47ca <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	f8 20       	and	r15, r8
      7e:	fb 20       	and	r15, r11
      80:	fe 20       	and	r15, r14
      82:	01 21       	and	r16, r1
      84:	0a 21       	and	r16, r10
      86:	04 21       	and	r16, r4
      88:	07 21       	and	r16, r7
      8a:	0d 21       	and	r16, r13
      8c:	10 21       	and	r17, r0
      8e:	13 21       	and	r17, r3
      90:	16 21       	and	r17, r6
      92:	19 21       	and	r17, r9
      94:	1c 21       	and	r17, r12
      96:	1f 21       	and	r17, r15
      98:	22 21       	and	r18, r2
      9a:	25 21       	and	r18, r5
      9c:	28 21       	and	r18, r8
      9e:	2b 21       	and	r18, r11
      a0:	2e 21       	and	r18, r14
      a2:	3f 21       	and	r19, r15
      a4:	42 21       	and	r20, r2
      a6:	45 21       	and	r20, r5
      a8:	48 21       	and	r20, r8
      aa:	51 21       	and	r21, r1
      ac:	4b 21       	and	r20, r11
      ae:	4e 21       	and	r20, r14
      b0:	54 21       	and	r21, r4
      b2:	57 21       	and	r21, r7
      b4:	5a 21       	and	r21, r10
      b6:	5d 21       	and	r21, r13
      b8:	60 21       	and	r22, r0
      ba:	63 21       	and	r22, r3
      bc:	66 21       	and	r22, r6
      be:	69 21       	and	r22, r9
      c0:	6c 21       	and	r22, r12
      c2:	6f 21       	and	r22, r15
      c4:	72 21       	and	r23, r2
      c6:	75 21       	and	r23, r5
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e4 e0       	ldi	r30, 0x04	; 4
     676:	f1 e7       	ldi	r31, 0x71	; 113
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a8 35       	cpi	r26, 0x58	; 88
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	a8 e5       	ldi	r26, 0x58	; 88
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a0 33       	cpi	r26, 0x30	; 48
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <main>
     698:	0c 94 80 38 	jmp	0x7100	; 0x7100 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 d1 22 	call	0x45a2	; 0x45a2 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 f7 22 	call	0x45ee	; 0x45ee <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 a5 22 	call	0x454a	; 0x454a <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 3d 23 	call	0x467a	; 0x467a <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 57 1b 	call	0x36ae	; 0x36ae <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 20 1b 	call	0x3640	; 0x3640 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 03 1b 	call	0x3606	; 0x3606 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 57 1b 	call	0x36ae	; 0x36ae <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 20 1b 	call	0x3640	; 0x3640 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 03 1b 	call	0x3606	; 0x3606 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 57 1b 	call	0x36ae	; 0x36ae <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 20 1b 	call	0x3640	; 0x3640 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 03 1b 	call	0x3606	; 0x3606 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 57 1b 	call	0x36ae	; 0x36ae <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 20 1b 	call	0x3640	; 0x3640 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 03 1b 	call	0x3606	; 0x3606 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 57 1b 	call	0x36ae	; 0x36ae <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 20 1b 	call	0x3640	; 0x3640 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 03 1b 	call	0x3606	; 0x3606 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 57 1b 	call	0x36ae	; 0x36ae <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 20 1b 	call	0x3640	; 0x3640 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 03 1b 	call	0x3606	; 0x3606 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 f4 04 	sts	0x04F4, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 a9 21 	call	0x4352	; 0x4352 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 a9 21 	call	0x4352	; 0x4352 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 a9 21 	call	0x4352	; 0x4352 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 f4 04 	sts	0x04F4, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 a9 21 	call	0x4352	; 0x4352 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 a9 21 	call	0x4352	; 0x4352 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 a9 21 	call	0x4352	; 0x4352 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 ed 37 	call	0x6fda	; 0x6fda <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 ed 37 	call	0x6fda	; 0x6fda <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 ed 37 	call	0x6fda	; 0x6fda <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 65 1c 	call	0x38ca	; 0x38ca <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	89 e6       	ldi	r24, 0x69	; 105
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	ad e8       	ldi	r26, 0x8D	; 141
     c56:	b7 e0       	ldi	r27, 0x07	; 7
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e4 e8       	ldi	r30, 0x84	; 132
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	81 ef       	ldi	r24, 0xF1	; 241
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 14 07 	lds	r10, 0x0714
     c9e:	b0 90 15 07 	lds	r11, 0x0715
     ca2:	c0 90 16 07 	lds	r12, 0x0716
     ca6:	d0 90 17 07 	lds	r13, 0x0717
			rtIR_old[i] = rtIR;
     caa:	e0 90 19 07 	lds	r14, 0x0719
     cae:	f0 90 1a 07 	lds	r15, 0x071A
     cb2:	00 91 1b 07 	lds	r16, 0x071B
     cb6:	10 91 1c 07 	lds	r17, 0x071C
			ftIR_old[i] = ftIR;
     cba:	20 90 71 05 	lds	r2, 0x0571
     cbe:	30 90 72 05 	lds	r3, 0x0572
     cc2:	40 90 73 05 	lds	r4, 0x0573
     cc6:	50 90 74 05 	lds	r5, 0x0574
			bkIR_old[i] = bkIR;
     cca:	20 91 7b 05 	lds	r18, 0x057B
     cce:	30 91 7c 05 	lds	r19, 0x057C
     cd2:	40 91 7d 05 	lds	r20, 0x057D
     cd6:	50 91 7e 05 	lds	r21, 0x057E
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e7 50       	subi	r30, 0x07	; 7
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e3 5e       	subi	r30, 0xE3	; 227
     cf0:	f8 4f       	sbci	r31, 0xF8	; 248
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	ec 5e       	subi	r30, 0xEC	; 236
     cfe:	f9 4f       	sbci	r31, 0xF9	; 249
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	ef 57       	subi	r30, 0x7F	; 127
     d0c:	fa 4f       	sbci	r31, 0xFA	; 250
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a1 5f       	subi	r26, 0xF1	; 241
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 14 07 	lds	r24, 0x0714
     e0c:	90 91 15 07 	lds	r25, 0x0715
     e10:	a0 91 16 07 	lds	r26, 0x0716
     e14:	b0 91 17 07 	lds	r27, 0x0717
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 19 07 	lds	r24, 0x0719
     e28:	90 91 1a 07 	lds	r25, 0x071A
     e2c:	a0 91 1b 07 	lds	r26, 0x071B
     e30:	b0 91 1c 07 	lds	r27, 0x071C
     e34:	80 93 1d 07 	sts	0x071D, r24
     e38:	90 93 1e 07 	sts	0x071E, r25
     e3c:	a0 93 1f 07 	sts	0x071F, r26
     e40:	b0 93 20 07 	sts	0x0720, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 71 05 	lds	r24, 0x0571
     e48:	90 91 72 05 	lds	r25, 0x0572
     e4c:	a0 91 73 05 	lds	r26, 0x0573
     e50:	b0 91 74 05 	lds	r27, 0x0574
     e54:	80 93 14 06 	sts	0x0614, r24
     e58:	90 93 15 06 	sts	0x0615, r25
     e5c:	a0 93 16 06 	sts	0x0616, r26
     e60:	b0 93 17 06 	sts	0x0617, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 7b 05 	lds	r24, 0x057B
     e68:	90 91 7c 05 	lds	r25, 0x057C
     e6c:	a0 91 7d 05 	lds	r26, 0x057D
     e70:	b0 91 7e 05 	lds	r27, 0x057E
     e74:	80 93 81 05 	sts	0x0581, r24
     e78:	90 93 82 05 	sts	0x0582, r25
     e7c:	a0 93 83 05 	sts	0x0583, r26
     e80:	b0 93 84 05 	sts	0x0584, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
     e94:	60 93 14 07 	sts	0x0714, r22
     e98:	70 93 15 07 	sts	0x0715, r23
     e9c:	80 93 16 07 	sts	0x0716, r24
     ea0:	90 93 17 07 	sts	0x0717, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
     eb8:	60 93 19 07 	sts	0x0719, r22
     ebc:	70 93 1a 07 	sts	0x071A, r23
     ec0:	80 93 1b 07 	sts	0x071B, r24
     ec4:	90 93 1c 07 	sts	0x071C, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
     edc:	60 93 71 05 	sts	0x0571, r22
     ee0:	70 93 72 05 	sts	0x0572, r23
     ee4:	80 93 73 05 	sts	0x0573, r24
     ee8:	90 93 74 05 	sts	0x0574, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
     f00:	60 93 7b 05 	sts	0x057B, r22
     f04:	70 93 7c 05 	sts	0x057C, r23
     f08:	80 93 7d 05 	sts	0x057D, r24
     f0c:	90 93 7e 05 	sts	0x057E, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 75 05 	sts	0x0575, r24
     f66:	90 93 76 05 	sts	0x0576, r25
     f6a:	a0 93 77 05 	sts	0x0577, r26
     f6e:	b0 93 78 05 	sts	0x0578, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 75 05 	lds	r18, 0x0575
     f7a:	30 91 76 05 	lds	r19, 0x0576
     f7e:	40 91 77 05 	lds	r20, 0x0577
     f82:	50 91 78 05 	lds	r21, 0x0578
     f86:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 75 05 	sts	0x0575, r22
     f92:	70 93 76 05 	sts	0x0576, r23
     f96:	80 93 77 05 	sts	0x0577, r24
     f9a:	90 93 78 05 	sts	0x0578, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 10 06 	lds	r18, 0x0610
     fa6:	30 91 11 06 	lds	r19, 0x0611
     faa:	40 91 12 06 	lds	r20, 0x0612
     fae:	50 91 13 06 	lds	r21, 0x0613
     fb2:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__subsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a0 97       	sbiw	r28, 0x20	; 32
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	2d 83       	std	Y+5, r18	; 0x05
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	e9 86       	std	Y+9, r14	; 0x09
    106c:	fa 86       	std	Y+10, r15	; 0x0a
    106e:	0b 87       	std	Y+11, r16	; 0x0b
    1070:	1c 87       	std	Y+12, r17	; 0x0c
    1072:	ad 86       	std	Y+13, r10	; 0x0d
    1074:	be 86       	std	Y+14, r11	; 0x0e
    1076:	cf 86       	std	Y+15, r12	; 0x0f
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    107c:	33 24       	eor	r3, r3
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	14 f4       	brge	.+4      	; 0x1096 <move_arc_stnb+0x6c>
    1092:	33 24       	eor	r3, r3
    1094:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1096:	6d 81       	ldd	r22, Y+5	; 0x05
    1098:	7e 81       	ldd	r23, Y+6	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	2c ed       	ldi	r18, 0xDC	; 220
    10a0:	38 eb       	ldi	r19, 0xB8	; 184
    10a2:	48 e0       	ldi	r20, 0x08	; 8
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    10aa:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	77 ff       	sbrs	r23, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <move_arc_stnb+0x90>
    10b4:	30 95       	com	r19
    10b6:	21 95       	neg	r18
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	b9 01       	movw	r22, r18
    10bc:	88 27       	eor	r24, r24
    10be:	77 fd       	sbrc	r23, 7
    10c0:	80 95       	com	r24
    10c2:	98 2f       	mov	r25, r24
    10c4:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <__floatsisf>
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    10d0:	69 85       	ldd	r22, Y+9	; 0x09
    10d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	2c ed       	ldi	r18, 0xDC	; 220
    10da:	38 eb       	ldi	r19, 0xB8	; 184
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    10e4:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__fixsfsi>
    10e8:	9b 01       	movw	r18, r22
    10ea:	77 ff       	sbrs	r23, 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <move_arc_stnb+0xca>
    10ee:	30 95       	com	r19
    10f0:	21 95       	neg	r18
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <__floatsisf>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1106:	6d 85       	ldd	r22, Y+13	; 0x0d
    1108:	7e 85       	ldd	r23, Y+14	; 0x0e
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	2c ed       	ldi	r18, 0xDC	; 220
    1110:	38 eb       	ldi	r19, 0xB8	; 184
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	5e e3       	ldi	r21, 0x3E	; 62
    1116:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    111a:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	77 ff       	sbrs	r23, 7
    1122:	03 c0       	rjmp	.+6      	; 0x112a <move_arc_stnb+0x100>
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <__floatsisf>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	5f e4       	ldi	r21, 0x4F	; 79
    1148:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	a1 f5       	brne	.+104    	; 0x11b8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	2d b7       	in	r18, 0x3d	; 61
    117a:	3e b7       	in	r19, 0x3e	; 62
    117c:	29 50       	subi	r18, 0x09	; 9
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	3e bf       	out	0x3e, r19	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	2d bf       	out	0x3d, r18	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	ad b7       	in	r26, 0x3d	; 61
    1192:	be b7       	in	r27, 0x3e	; 62
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	5c 92       	st	X, r5
    1198:	4e 92       	st	-X, r4
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	93 82       	std	Z+3, r9	; 0x03
    119e:	82 82       	std	Z+2, r8	; 0x02
    11a0:	75 83       	std	Z+5, r23	; 0x05
    11a2:	64 83       	std	Z+4, r22	; 0x04
    11a4:	26 82       	std	Z+6, r2	; 0x06
    11a6:	10 86       	std	Z+8, r1	; 0x08
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	43 2d       	mov	r20, r3
    11b0:	92 01       	movw	r18, r4
    11b2:	84 01       	movw	r16, r8
    11b4:	76 01       	movw	r14, r12
    11b6:	c1 c1       	rjmp	.+898    	; 0x153a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	e9 f5       	brne	.+122    	; 0x1246 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    11d8:	3b 01       	movw	r6, r22
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    11e2:	8b 01       	movw	r16, r22
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    11ec:	7b 01       	movw	r14, r22
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	29 50       	subi	r18, 0x09	; 9
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	3e bf       	out	0x3e, r19	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	2d bf       	out	0x3d, r18	; 61
    1200:	ed b7       	in	r30, 0x3d	; 61
    1202:	fe b7       	in	r31, 0x3e	; 62
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <move_arc_stnb+0x1e4>
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	71 82       	std	Z+1, r7	; 0x01
    1210:	60 82       	st	Z, r6
    1212:	13 83       	std	Z+3, r17	; 0x03
    1214:	02 83       	std	Z+2, r16	; 0x02
    1216:	f5 82       	std	Z+5, r15	; 0x05
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	26 82       	std	Z+6, r2	; 0x06
    121c:	10 86       	std	Z+8, r1	; 0x08
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	93 01       	movw	r18, r6
    1226:	c2 2c       	mov	r12, r2
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	83 2c       	mov	r8, r3
    122e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <STEPPER_move>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	be bf       	out	0x3e, r27	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ad bf       	out	0x3d, r26	; 61
    1244:	89 c1       	rjmp	.+786    	; 0x1558 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1246:	c3 01       	movw	r24, r6
    1248:	b2 01       	movw	r22, r4
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__gesf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <move_arc_stnb+0x232>
    125a:	b1 c0       	rjmp	.+354    	; 0x13be <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    125c:	66 e6       	ldi	r22, 0x66	; 102
    125e:	76 e6       	ldi	r23, 0x66	; 102
    1260:	8a ea       	ldi	r24, 0xAA	; 170
    1262:	91 ec       	ldi	r25, 0xC1	; 193
    1264:	a3 01       	movw	r20, r6
    1266:	92 01       	movw	r18, r4
    1268:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    127c:	66 e6       	ldi	r22, 0x66	; 102
    127e:	76 e6       	ldi	r23, 0x66	; 102
    1280:	8a ea       	ldi	r24, 0xAA	; 170
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	a3 01       	movw	r20, r6
    1286:	92 01       	movw	r18, r4
    1288:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	39 97       	sbiw	r30, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8d b6       	in	r8, 0x3d	; 61
    12ae:	9e b6       	in	r9, 0x3e	; 62
    12b0:	08 94       	sec
    12b2:	81 1c       	adc	r8, r1
    12b4:	91 1c       	adc	r9, r1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	a8 01       	movw	r20, r16
    12c0:	97 01       	movw	r18, r14
    12c2:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    12c6:	2c ed       	ldi	r18, 0xDC	; 220
    12c8:	38 eb       	ldi	r19, 0xB8	; 184
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    12d2:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    12d6:	69 8b       	std	Y+17, r22	; 0x11
    12d8:	7a 8b       	std	Y+18, r23	; 0x12
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    12ee:	2c ed       	ldi	r18, 0xDC	; 220
    12f0:	38 eb       	ldi	r19, 0xB8	; 184
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	5e e3       	ldi	r21, 0x3E	; 62
    12f6:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    12fa:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	6d 85       	ldd	r22, Y+13	; 0x0d
    1308:	7e 85       	ldd	r23, Y+14	; 0x0e
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	a8 01       	movw	r20, r16
    1310:	97 01       	movw	r18, r14
    1312:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1316:	2c ed       	ldi	r18, 0xDC	; 220
    1318:	38 eb       	ldi	r19, 0xB8	; 184
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1322:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1326:	2b 01       	movw	r4, r22
    1328:	3c 01       	movw	r6, r24
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	7e 81       	ldd	r23, Y+6	; 0x06
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a6 01       	movw	r20, r12
    1334:	95 01       	movw	r18, r10
    1336:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    133a:	2c ed       	ldi	r18, 0xDC	; 220
    133c:	38 eb       	ldi	r19, 0xB8	; 184
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1346:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    134a:	d4 01       	movw	r26, r8
    134c:	6d 93       	st	X+, r22
    134e:	7c 93       	st	X, r23
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1360:	2c ed       	ldi	r18, 0xDC	; 220
    1362:	38 eb       	ldi	r19, 0xB8	; 184
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	5e e3       	ldi	r21, 0x3E	; 62
    1368:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    136c:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1370:	f4 01       	movw	r30, r8
    1372:	73 83       	std	Z+3, r23	; 0x03
    1374:	62 83       	std	Z+2, r22	; 0x02
    1376:	6d 85       	ldd	r22, Y+13	; 0x0d
    1378:	7e 85       	ldd	r23, Y+14	; 0x0e
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	a6 01       	movw	r20, r12
    1380:	95 01       	movw	r18, r10
    1382:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1386:	2c ed       	ldi	r18, 0xDC	; 220
    1388:	38 eb       	ldi	r19, 0xB8	; 184
    138a:	48 e0       	ldi	r20, 0x08	; 8
    138c:	5e e3       	ldi	r21, 0x3E	; 62
    138e:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1392:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1396:	d4 01       	movw	r26, r8
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	7c 93       	st	X, r23
    139c:	6e 93       	st	-X, r22
    139e:	14 97       	sbiw	r26, 0x04	; 4
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2c 92       	st	X, r2
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	1c 92       	st	X, r1
    13aa:	1e 92       	st	-X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	43 2d       	mov	r20, r3
    13b4:	29 89       	ldd	r18, Y+17	; 0x11
    13b6:	3a 89       	ldd	r19, Y+18	; 0x12
    13b8:	0d 89       	ldd	r16, Y+21	; 0x15
    13ba:	1e 89       	ldd	r17, Y+22	; 0x16
    13bc:	bd c0       	rjmp	.+378    	; 0x1538 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    13ce:	87 fd       	sbrc	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <move_arc_stnb+0x3ac>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	c1 c0       	rjmp	.+386    	; 0x1558 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    13d6:	66 e6       	ldi	r22, 0x66	; 102
    13d8:	76 e6       	ldi	r23, 0x66	; 102
    13da:	8a ea       	ldi	r24, 0xAA	; 170
    13dc:	91 e4       	ldi	r25, 0x41	; 65
    13de:	a3 01       	movw	r20, r6
    13e0:	92 01       	movw	r18, r4
    13e2:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    13f6:	66 e6       	ldi	r22, 0x66	; 102
    13f8:	76 e6       	ldi	r23, 0x66	; 102
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	91 ec       	ldi	r25, 0xC1	; 193
    13fe:	a3 01       	movw	r20, r6
    1400:	92 01       	movw	r18, r4
    1402:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    1412:	5b 01       	movw	r10, r22
    1414:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1416:	2d b7       	in	r18, 0x3d	; 61
    1418:	3e b7       	in	r19, 0x3e	; 62
    141a:	29 50       	subi	r18, 0x09	; 9
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	3e bf       	out	0x3e, r19	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	2d bf       	out	0x3d, r18	; 61
    1428:	8d b6       	in	r8, 0x3d	; 61
    142a:	9e b6       	in	r9, 0x3e	; 62
    142c:	08 94       	sec
    142e:	81 1c       	adc	r8, r1
    1430:	91 1c       	adc	r9, r1
    1432:	6d 81       	ldd	r22, Y+5	; 0x05
    1434:	7e 81       	ldd	r23, Y+6	; 0x06
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1442:	2c ed       	ldi	r18, 0xDC	; 220
    1444:	38 eb       	ldi	r19, 0xB8	; 184
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    144e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1452:	69 8f       	std	Y+25, r22	; 0x19
    1454:	7a 8f       	std	Y+26, r23	; 0x1a
    1456:	8b 8f       	std	Y+27, r24	; 0x1b
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	69 85       	ldd	r22, Y+9	; 0x09
    145c:	7a 85       	ldd	r23, Y+10	; 0x0a
    145e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1460:	9c 85       	ldd	r25, Y+12	; 0x0c
    1462:	a8 01       	movw	r20, r16
    1464:	97 01       	movw	r18, r14
    1466:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    146a:	2c ed       	ldi	r18, 0xDC	; 220
    146c:	38 eb       	ldi	r19, 0xB8	; 184
    146e:	48 e0       	ldi	r20, 0x08	; 8
    1470:	5e e3       	ldi	r21, 0x3E	; 62
    1472:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1476:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    147a:	6d 8f       	std	Y+29, r22	; 0x1d
    147c:	7e 8f       	std	Y+30, r23	; 0x1e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	a8 01       	movw	r20, r16
    148c:	97 01       	movw	r18, r14
    148e:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1492:	2c ed       	ldi	r18, 0xDC	; 220
    1494:	38 eb       	ldi	r19, 0xB8	; 184
    1496:	48 e0       	ldi	r20, 0x08	; 8
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    149e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    14a2:	2b 01       	movw	r4, r22
    14a4:	3c 01       	movw	r6, r24
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	a6 01       	movw	r20, r12
    14b0:	95 01       	movw	r18, r10
    14b2:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    14b6:	2c ed       	ldi	r18, 0xDC	; 220
    14b8:	38 eb       	ldi	r19, 0xB8	; 184
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    14c2:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    14c6:	d4 01       	movw	r26, r8
    14c8:	6d 93       	st	X+, r22
    14ca:	7c 93       	st	X, r23
    14cc:	69 85       	ldd	r22, Y+9	; 0x09
    14ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d4:	a6 01       	movw	r20, r12
    14d6:	95 01       	movw	r18, r10
    14d8:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    14dc:	2c ed       	ldi	r18, 0xDC	; 220
    14de:	38 eb       	ldi	r19, 0xB8	; 184
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	5e e3       	ldi	r21, 0x3E	; 62
    14e4:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    14e8:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    14ec:	f4 01       	movw	r30, r8
    14ee:	73 83       	std	Z+3, r23	; 0x03
    14f0:	62 83       	std	Z+2, r22	; 0x02
    14f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1502:	2c ed       	ldi	r18, 0xDC	; 220
    1504:	38 eb       	ldi	r19, 0xB8	; 184
    1506:	48 e0       	ldi	r20, 0x08	; 8
    1508:	5e e3       	ldi	r21, 0x3E	; 62
    150a:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    150e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1512:	d4 01       	movw	r26, r8
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	7c 93       	st	X, r23
    1518:	6e 93       	st	-X, r22
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	16 96       	adiw	r26, 0x06	; 6
    151e:	2c 92       	st	X, r2
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	18 96       	adiw	r26, 0x08	; 8
    1524:	1c 92       	st	X, r1
    1526:	1e 92       	st	-X, r1
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	43 2d       	mov	r20, r3
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1534:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1536:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1538:	72 01       	movw	r14, r4
    153a:	c2 2c       	mov	r12, r2
    153c:	aa 24       	eor	r10, r10
    153e:	bb 24       	eor	r11, r11
    1540:	83 2c       	mov	r8, r3
    1542:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <STEPPER_move>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	39 96       	adiw	r30, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	fe bf       	out	0x3e, r31	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	2b 01       	movw	r4, r22
    15c0:	3c 01       	movw	r6, r24
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	e9 86       	std	Y+9, r14	; 0x09
    15cc:	fa 86       	std	Y+10, r15	; 0x0a
    15ce:	0b 87       	std	Y+11, r16	; 0x0b
    15d0:	1c 87       	std	Y+12, r17	; 0x0c
    15d2:	ad 86       	std	Y+13, r10	; 0x0d
    15d4:	be 86       	std	Y+14, r11	; 0x0e
    15d6:	cf 86       	std	Y+15, r12	; 0x0f
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    15dc:	33 24       	eor	r3, r3
    15de:	ca 01       	movw	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	14 f4       	brge	.+4      	; 0x15f6 <move_arc_stwt+0x6c>
    15f2:	33 24       	eor	r3, r3
    15f4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	2c ed       	ldi	r18, 0xDC	; 220
    1600:	38 eb       	ldi	r19, 0xB8	; 184
    1602:	48 e0       	ldi	r20, 0x08	; 8
    1604:	5e e3       	ldi	r21, 0x3E	; 62
    1606:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    160a:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	77 ff       	sbrs	r23, 7
    1612:	03 c0       	rjmp	.+6      	; 0x161a <move_arc_stwt+0x90>
    1614:	30 95       	com	r19
    1616:	21 95       	neg	r18
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	b9 01       	movw	r22, r18
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <__floatsisf>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	2c ed       	ldi	r18, 0xDC	; 220
    163a:	38 eb       	ldi	r19, 0xB8	; 184
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	5e e3       	ldi	r21, 0x3E	; 62
    1640:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1644:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__fixsfsi>
    1648:	9b 01       	movw	r18, r22
    164a:	77 ff       	sbrs	r23, 7
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <move_arc_stwt+0xca>
    164e:	30 95       	com	r19
    1650:	21 95       	neg	r18
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	b9 01       	movw	r22, r18
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <__floatsisf>
    1662:	4b 01       	movw	r8, r22
    1664:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1666:	6d 85       	ldd	r22, Y+13	; 0x0d
    1668:	7e 85       	ldd	r23, Y+14	; 0x0e
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	2c ed       	ldi	r18, 0xDC	; 220
    1670:	38 eb       	ldi	r19, 0xB8	; 184
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	5e e3       	ldi	r21, 0x3E	; 62
    1676:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    167a:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 ff       	sbrs	r23, 7
    1682:	03 c0       	rjmp	.+6      	; 0x168a <move_arc_stwt+0x100>
    1684:	30 95       	com	r19
    1686:	21 95       	neg	r18
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <__floatsisf>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	5f e4       	ldi	r21, 0x4F	; 79
    16a8:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	a1 f5       	brne	.+104    	; 0x1718 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    16b0:	69 81       	ldd	r22, Y+1	; 0x01
    16b2:	7a 81       	ldd	r23, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	c5 01       	movw	r24, r10
    16c2:	b4 01       	movw	r22, r8
    16c4:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	29 50       	subi	r18, 0x09	; 9
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	3e bf       	out	0x3e, r19	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	2d bf       	out	0x3d, r18	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ad b7       	in	r26, 0x3d	; 61
    16f2:	be b7       	in	r27, 0x3e	; 62
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	5c 92       	st	X, r5
    16f8:	4e 92       	st	-X, r4
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	93 82       	std	Z+3, r9	; 0x03
    16fe:	82 82       	std	Z+2, r8	; 0x02
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    1704:	26 82       	std	Z+6, r2	; 0x06
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	43 2d       	mov	r20, r3
    1710:	92 01       	movw	r18, r4
    1712:	84 01       	movw	r16, r8
    1714:	76 01       	movw	r14, r12
    1716:	c1 c1       	rjmp	.+898    	; 0x1a9a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	e9 f5       	brne	.+122    	; 0x17a6 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1738:	3b 01       	movw	r6, r22
    173a:	c5 01       	movw	r24, r10
    173c:	b4 01       	movw	r22, r8
    173e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1742:	8b 01       	movw	r16, r22
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    174c:	7b 01       	movw	r14, r22
    174e:	2d b7       	in	r18, 0x3d	; 61
    1750:	3e b7       	in	r19, 0x3e	; 62
    1752:	29 50       	subi	r18, 0x09	; 9
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	2d bf       	out	0x3d, r18	; 61
    1760:	ed b7       	in	r30, 0x3d	; 61
    1762:	fe b7       	in	r31, 0x3e	; 62
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	33 20       	and	r3, r3
    176a:	09 f4       	brne	.+2      	; 0x176e <move_arc_stwt+0x1e4>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	71 82       	std	Z+1, r7	; 0x01
    1770:	60 82       	st	Z, r6
    1772:	13 83       	std	Z+3, r17	; 0x03
    1774:	02 83       	std	Z+2, r16	; 0x02
    1776:	f5 82       	std	Z+5, r15	; 0x05
    1778:	e4 82       	std	Z+4, r14	; 0x04
    177a:	26 82       	std	Z+6, r2	; 0x06
    177c:	10 86       	std	Z+8, r1	; 0x08
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	93 01       	movw	r18, r6
    1786:	c2 2c       	mov	r12, r2
    1788:	aa 24       	eor	r10, r10
    178a:	bb 24       	eor	r11, r11
    178c:	83 2c       	mov	r8, r3
    178e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <STEPPER_move>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	19 96       	adiw	r26, 0x09	; 9
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	be bf       	out	0x3e, r27	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	ad bf       	out	0x3d, r26	; 61
    17a4:	89 c1       	rjmp	.+786    	; 0x1ab8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <move_arc_stwt+0x232>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17bc:	66 e6       	ldi	r22, 0x66	; 102
    17be:	76 e6       	ldi	r23, 0x66	; 102
    17c0:	8a ea       	ldi	r24, 0xAA	; 170
    17c2:	91 ec       	ldi	r25, 0xC1	; 193
    17c4:	a3 01       	movw	r20, r6
    17c6:	92 01       	movw	r18, r4
    17c8:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    17d8:	7b 01       	movw	r14, r22
    17da:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17dc:	66 e6       	ldi	r22, 0x66	; 102
    17de:	76 e6       	ldi	r23, 0x66	; 102
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	91 e4       	ldi	r25, 0x41	; 65
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    17f8:	5b 01       	movw	r10, r22
    17fa:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    17fc:	ed b7       	in	r30, 0x3d	; 61
    17fe:	fe b7       	in	r31, 0x3e	; 62
    1800:	39 97       	sbiw	r30, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	8d b6       	in	r8, 0x3d	; 61
    180e:	9e b6       	in	r9, 0x3e	; 62
    1810:	08 94       	sec
    1812:	81 1c       	adc	r8, r1
    1814:	91 1c       	adc	r9, r1
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	a8 01       	movw	r20, r16
    1820:	97 01       	movw	r18, r14
    1822:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1826:	2c ed       	ldi	r18, 0xDC	; 220
    1828:	38 eb       	ldi	r19, 0xB8	; 184
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	5e e3       	ldi	r21, 0x3E	; 62
    182e:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1832:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1836:	69 8b       	std	Y+17, r22	; 0x11
    1838:	7a 8b       	std	Y+18, r23	; 0x12
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	69 85       	ldd	r22, Y+9	; 0x09
    1840:	7a 85       	ldd	r23, Y+10	; 0x0a
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	a8 01       	movw	r20, r16
    1848:	97 01       	movw	r18, r14
    184a:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    184e:	2c ed       	ldi	r18, 0xDC	; 220
    1850:	38 eb       	ldi	r19, 0xB8	; 184
    1852:	48 e0       	ldi	r20, 0x08	; 8
    1854:	5e e3       	ldi	r21, 0x3E	; 62
    1856:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    185a:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	6d 85       	ldd	r22, Y+13	; 0x0d
    1868:	7e 85       	ldd	r23, Y+14	; 0x0e
    186a:	8f 85       	ldd	r24, Y+15	; 0x0f
    186c:	98 89       	ldd	r25, Y+16	; 0x10
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1876:	2c ed       	ldi	r18, 0xDC	; 220
    1878:	38 eb       	ldi	r19, 0xB8	; 184
    187a:	48 e0       	ldi	r20, 0x08	; 8
    187c:	5e e3       	ldi	r21, 0x3E	; 62
    187e:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1882:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1886:	2b 01       	movw	r4, r22
    1888:	3c 01       	movw	r6, r24
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	a6 01       	movw	r20, r12
    1894:	95 01       	movw	r18, r10
    1896:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    189a:	2c ed       	ldi	r18, 0xDC	; 220
    189c:	38 eb       	ldi	r19, 0xB8	; 184
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    18a6:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    18aa:	d4 01       	movw	r26, r8
    18ac:	6d 93       	st	X+, r22
    18ae:	7c 93       	st	X, r23
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    18c0:	2c ed       	ldi	r18, 0xDC	; 220
    18c2:	38 eb       	ldi	r19, 0xB8	; 184
    18c4:	48 e0       	ldi	r20, 0x08	; 8
    18c6:	5e e3       	ldi	r21, 0x3E	; 62
    18c8:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    18cc:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    18d0:	f4 01       	movw	r30, r8
    18d2:	73 83       	std	Z+3, r23	; 0x03
    18d4:	62 83       	std	Z+2, r22	; 0x02
    18d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	a6 01       	movw	r20, r12
    18e0:	95 01       	movw	r18, r10
    18e2:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    18e6:	2c ed       	ldi	r18, 0xDC	; 220
    18e8:	38 eb       	ldi	r19, 0xB8	; 184
    18ea:	48 e0       	ldi	r20, 0x08	; 8
    18ec:	5e e3       	ldi	r21, 0x3E	; 62
    18ee:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    18f2:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    18f6:	d4 01       	movw	r26, r8
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	7c 93       	st	X, r23
    18fc:	6e 93       	st	-X, r22
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	2c 92       	st	X, r2
    1904:	16 97       	sbiw	r26, 0x06	; 6
    1906:	18 96       	adiw	r26, 0x08	; 8
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	43 2d       	mov	r20, r3
    1914:	29 89       	ldd	r18, Y+17	; 0x11
    1916:	3a 89       	ldd	r19, Y+18	; 0x12
    1918:	0d 89       	ldd	r16, Y+21	; 0x15
    191a:	1e 89       	ldd	r17, Y+22	; 0x16
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    192e:	87 fd       	sbrc	r24, 7
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <move_arc_stwt+0x3ac>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c1 c0       	rjmp	.+386    	; 0x1ab8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1936:	66 e6       	ldi	r22, 0x66	; 102
    1938:	76 e6       	ldi	r23, 0x66	; 102
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	91 e4       	ldi	r25, 0x41	; 65
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1956:	66 e6       	ldi	r22, 0x66	; 102
    1958:	76 e6       	ldi	r23, 0x66	; 102
    195a:	8a ea       	ldi	r24, 0xAA	; 170
    195c:	91 ec       	ldi	r25, 0xC1	; 193
    195e:	a3 01       	movw	r20, r6
    1960:	92 01       	movw	r18, r4
    1962:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    1972:	5b 01       	movw	r10, r22
    1974:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1976:	2d b7       	in	r18, 0x3d	; 61
    1978:	3e b7       	in	r19, 0x3e	; 62
    197a:	29 50       	subi	r18, 0x09	; 9
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	3e bf       	out	0x3e, r19	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	2d bf       	out	0x3d, r18	; 61
    1988:	8d b6       	in	r8, 0x3d	; 61
    198a:	9e b6       	in	r9, 0x3e	; 62
    198c:	08 94       	sec
    198e:	81 1c       	adc	r8, r1
    1990:	91 1c       	adc	r9, r1
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	a8 01       	movw	r20, r16
    199c:	97 01       	movw	r18, r14
    199e:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    19a2:	2c ed       	ldi	r18, 0xDC	; 220
    19a4:	38 eb       	ldi	r19, 0xB8	; 184
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	5e e3       	ldi	r21, 0x3E	; 62
    19aa:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    19ae:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    19b2:	69 8f       	std	Y+25, r22	; 0x19
    19b4:	7a 8f       	std	Y+26, r23	; 0x1a
    19b6:	8b 8f       	std	Y+27, r24	; 0x1b
    19b8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	a8 01       	movw	r20, r16
    19c4:	97 01       	movw	r18, r14
    19c6:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    19ca:	2c ed       	ldi	r18, 0xDC	; 220
    19cc:	38 eb       	ldi	r19, 0xB8	; 184
    19ce:	48 e0       	ldi	r20, 0x08	; 8
    19d0:	5e e3       	ldi	r21, 0x3E	; 62
    19d2:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    19d6:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    19da:	6d 8f       	std	Y+29, r22	; 0x1d
    19dc:	7e 8f       	std	Y+30, r23	; 0x1e
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	a8 01       	movw	r20, r16
    19ec:	97 01       	movw	r18, r14
    19ee:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    19f2:	2c ed       	ldi	r18, 0xDC	; 220
    19f4:	38 eb       	ldi	r19, 0xB8	; 184
    19f6:	48 e0       	ldi	r20, 0x08	; 8
    19f8:	5e e3       	ldi	r21, 0x3E	; 62
    19fa:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    19fe:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1a02:	2b 01       	movw	r4, r22
    1a04:	3c 01       	movw	r6, r24
    1a06:	6d 81       	ldd	r22, Y+5	; 0x05
    1a08:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1a16:	2c ed       	ldi	r18, 0xDC	; 220
    1a18:	38 eb       	ldi	r19, 0xB8	; 184
    1a1a:	48 e0       	ldi	r20, 0x08	; 8
    1a1c:	5e e3       	ldi	r21, 0x3E	; 62
    1a1e:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1a22:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1a26:	d4 01       	movw	r26, r8
    1a28:	6d 93       	st	X+, r22
    1a2a:	7c 93       	st	X, r23
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1a3c:	2c ed       	ldi	r18, 0xDC	; 220
    1a3e:	38 eb       	ldi	r19, 0xB8	; 184
    1a40:	48 e0       	ldi	r20, 0x08	; 8
    1a42:	5e e3       	ldi	r21, 0x3E	; 62
    1a44:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1a48:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	73 83       	std	Z+3, r23	; 0x03
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1a62:	2c ed       	ldi	r18, 0xDC	; 220
    1a64:	38 eb       	ldi	r19, 0xB8	; 184
    1a66:	48 e0       	ldi	r20, 0x08	; 8
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    1a6e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    1a72:	d4 01       	movw	r26, r8
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	7c 93       	st	X, r23
    1a78:	6e 93       	st	-X, r22
    1a7a:	14 97       	sbiw	r26, 0x04	; 4
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	2c 92       	st	X, r2
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	18 96       	adiw	r26, 0x08	; 8
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	17 97       	sbiw	r26, 0x07	; 7
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	43 2d       	mov	r20, r3
    1a90:	29 8d       	ldd	r18, Y+25	; 0x19
    1a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a94:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a98:	72 01       	movw	r14, r4
    1a9a:	c2 2c       	mov	r12, r2
    1a9c:	aa 24       	eor	r10, r10
    1a9e:	bb 24       	eor	r11, r11
    1aa0:	83 2c       	mov	r8, r3
    1aa2:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <STEPPER_move>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	39 96       	adiw	r30, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ab8:	a0 96       	adiw	r28, 0x20	; 32
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1aea:	0e 94 78 21 	call	0x42f0	; 0x42f0 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1aee:	28 2f       	mov	r18, r24
    1af0:	21 70       	andi	r18, 0x01	; 1
    1af2:	20 93 12 07 	sts	0x0712, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	82 70       	andi	r24, 0x02	; 2
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	95 95       	asr	r25
    1afe:	87 95       	ror	r24
    1b00:	80 93 13 07 	sts	0x0713, r24
}
    1b04:	08 95       	ret

00001b06 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1b06:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1b0a:	60 93 09 06 	sts	0x0609, r22
    1b0e:	70 93 0a 06 	sts	0x060A, r23
    1b12:	80 93 0b 06 	sts	0x060B, r24
    1b16:	90 93 0c 06 	sts	0x060C, r25
	leftLightVolt = getLeftLight();
    1b1a:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1b1e:	60 93 a1 07 	sts	0x07A1, r22
    1b22:	70 93 a2 07 	sts	0x07A2, r23
    1b26:	80 93 a3 07 	sts	0x07A3, r24
    1b2a:	90 93 a4 07 	sts	0x07A4, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1b2e:	08 95       	ret

00001b30 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1b30:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1b34:	60 93 71 05 	sts	0x0571, r22
    1b38:	70 93 72 05 	sts	0x0572, r23
    1b3c:	80 93 73 05 	sts	0x0573, r24
    1b40:	90 93 74 05 	sts	0x0574, r25
	bkIR = getBackIR();
    1b44:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1b48:	60 93 7b 05 	sts	0x057B, r22
    1b4c:	70 93 7c 05 	sts	0x057C, r23
    1b50:	80 93 7d 05 	sts	0x057D, r24
    1b54:	90 93 7e 05 	sts	0x057E, r25
	ltIR = getLeftIR();
    1b58:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1b5c:	60 93 14 07 	sts	0x0714, r22
    1b60:	70 93 15 07 	sts	0x0715, r23
    1b64:	80 93 16 07 	sts	0x0716, r24
    1b68:	90 93 17 07 	sts	0x0717, r25
	rtIR = getRightIR();
    1b6c:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1b70:	60 93 19 07 	sts	0x0719, r22
    1b74:	70 93 1a 07 	sts	0x071A, r23
    1b78:	80 93 1b 07 	sts	0x071B, r24
    1b7c:	90 93 1c 07 	sts	0x071C, r25
}
    1b80:	08 95       	ret

00001b82 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	16 2f       	mov	r17, r22
    1b94:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1b96:	5f e1       	ldi	r21, 0x1F	; 31
    1b98:	f5 2e       	mov	r15, r21
    1b9a:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1b9c:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1b9e:	0f 2d       	mov	r16, r15
    1ba0:	06 95       	lsr	r16
    1ba2:	06 95       	lsr	r16
    1ba4:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1ba6:	c0 2f       	mov	r28, r16
    1ba8:	d0 e0       	ldi	r29, 0x00	; 0
    1baa:	c1 2e       	mov	r12, r17
    1bac:	dd 24       	eor	r13, r13
    1bae:	ce 01       	movw	r24, r28
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1bb6:	80 2f       	mov	r24, r16
    1bb8:	61 2f       	mov	r22, r17
    1bba:	0e 94 2a 1c 	call	0x3854	; 0x3854 <LCD_set_next_PGC>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	45 e0       	ldi	r20, 0x05	; 5
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	4a 95       	dec	r20
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <LCD_set_pixel+0x40>
    1bca:	2f 2d       	mov	r18, r15
    1bcc:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1bce:	ee 20       	and	r14, r14
    1bd0:	89 f0       	breq	.+34     	; 0x1bf4 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1bd2:	ec 0d       	add	r30, r12
    1bd4:	fd 1d       	adc	r31, r13
    1bd6:	e4 57       	subi	r30, 0x74	; 116
    1bd8:	f9 4f       	sbci	r31, 0xF9	; 249
    1bda:	27 70       	andi	r18, 0x07	; 7
    1bdc:	30 70       	andi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <LCD_set_pixel+0x66>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	2a 95       	dec	r18
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <LCD_set_pixel+0x62>
    1bec:	20 81       	ld	r18, Z
    1bee:	28 2b       	or	r18, r24
    1bf0:	20 83       	st	Z, r18
    1bf2:	11 c0       	rjmp	.+34     	; 0x1c16 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1bf4:	ec 0d       	add	r30, r12
    1bf6:	fd 1d       	adc	r31, r13
    1bf8:	e4 57       	subi	r30, 0x74	; 116
    1bfa:	f9 4f       	sbci	r31, 0xF9	; 249
    1bfc:	27 70       	andi	r18, 0x07	; 7
    1bfe:	30 70       	andi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <LCD_set_pixel+0x88>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	2a 95       	dec	r18
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <LCD_set_pixel+0x84>
    1c0e:	80 95       	com	r24
    1c10:	20 81       	ld	r18, Z
    1c12:	82 23       	and	r24, r18
    1c14:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1c16:	35 e0       	ldi	r19, 0x05	; 5
    1c18:	cc 0f       	add	r28, r28
    1c1a:	dd 1f       	adc	r29, r29
    1c1c:	3a 95       	dec	r19
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <LCD_set_pixel+0x96>
    1c20:	cc 0d       	add	r28, r12
    1c22:	dd 1d       	adc	r29, r13
    1c24:	c4 57       	subi	r28, 0x74	; 116
    1c26:	d9 4f       	sbci	r29, 0xF9	; 249
    1c28:	88 81       	ld	r24, Y
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	08 95       	ret

00001c42 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1c42:	7f 92       	push	r7
    1c44:	8f 92       	push	r8
    1c46:	9f 92       	push	r9
    1c48:	af 92       	push	r10
    1c4a:	bf 92       	push	r11
    1c4c:	cf 92       	push	r12
    1c4e:	df 92       	push	r13
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	98 2e       	mov	r9, r24
    1c5a:	b6 2e       	mov	r11, r22
    1c5c:	c4 2e       	mov	r12, r20
    1c5e:	a2 2e       	mov	r10, r18
    1c60:	80 2e       	mov	r8, r16
    1c62:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1c64:	bb 0c       	add	r11, r11
    1c66:	bb 0c       	add	r11, r11
    1c68:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1c6a:	dd 24       	eor	r13, r13
    1c6c:	23 e0       	ldi	r18, 0x03	; 3
    1c6e:	cc 0c       	add	r12, r12
    1c70:	dd 1c       	adc	r13, r13
    1c72:	2a 95       	dec	r18
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <printCell+0x2c>
    1c76:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1c78:	0f e1       	ldi	r16, 0x1F	; 31
    1c7a:	0b 19       	sub	r16, r11
    1c7c:	80 2f       	mov	r24, r16
    1c7e:	6c 2d       	mov	r22, r12
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1c86:	98 e1       	ldi	r25, 0x18	; 24
    1c88:	e9 2e       	mov	r14, r25
    1c8a:	eb 18       	sub	r14, r11
    1c8c:	8e 2d       	mov	r24, r14
    1c8e:	6c 2d       	mov	r22, r12
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1c96:	87 e0       	ldi	r24, 0x07	; 7
    1c98:	f8 2e       	mov	r15, r24
    1c9a:	fc 0c       	add	r15, r12
    1c9c:	80 2f       	mov	r24, r16
    1c9e:	6f 2d       	mov	r22, r15
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1ca6:	8e 2d       	mov	r24, r14
    1ca8:	6f 2d       	mov	r22, r15
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	
	if(cell&0b1000){
    1cb0:	c9 2c       	mov	r12, r9
    1cb2:	93 fe       	sbrs	r9, 3
    1cb4:	24 c0       	rjmp	.+72     	; 0x1cfe <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1cb6:	61 2f       	mov	r22, r17
    1cb8:	6f 5f       	subi	r22, 0xFF	; 255
    1cba:	80 2f       	mov	r24, r16
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1cc2:	61 2f       	mov	r22, r17
    1cc4:	6e 5f       	subi	r22, 0xFE	; 254
    1cc6:	80 2f       	mov	r24, r16
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1cce:	61 2f       	mov	r22, r17
    1cd0:	6d 5f       	subi	r22, 0xFD	; 253
    1cd2:	80 2f       	mov	r24, r16
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1cda:	61 2f       	mov	r22, r17
    1cdc:	6c 5f       	subi	r22, 0xFC	; 252
    1cde:	80 2f       	mov	r24, r16
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1ce6:	61 2f       	mov	r22, r17
    1ce8:	6b 5f       	subi	r22, 0xFB	; 251
    1cea:	80 2f       	mov	r24, r16
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1cf2:	61 2f       	mov	r22, r17
    1cf4:	6a 5f       	subi	r22, 0xFA	; 250
    1cf6:	80 2f       	mov	r24, r16
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0100){
    1cfe:	c2 fe       	sbrs	r12, 2
    1d00:	25 c0       	rjmp	.+74     	; 0x1d4c <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1d02:	8b 2d       	mov	r24, r11
    1d04:	80 95       	com	r24
    1d06:	81 5e       	subi	r24, 0xE1	; 225
    1d08:	6f 2d       	mov	r22, r15
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1d10:	8d e1       	ldi	r24, 0x1D	; 29
    1d12:	8b 19       	sub	r24, r11
    1d14:	6f 2d       	mov	r22, r15
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1d1c:	8c e1       	ldi	r24, 0x1C	; 28
    1d1e:	8b 19       	sub	r24, r11
    1d20:	6f 2d       	mov	r22, r15
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1d28:	8b e1       	ldi	r24, 0x1B	; 27
    1d2a:	8b 19       	sub	r24, r11
    1d2c:	6f 2d       	mov	r22, r15
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1d34:	8a e1       	ldi	r24, 0x1A	; 26
    1d36:	8b 19       	sub	r24, r11
    1d38:	6f 2d       	mov	r22, r15
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1d40:	89 e1       	ldi	r24, 0x19	; 25
    1d42:	8b 19       	sub	r24, r11
    1d44:	6f 2d       	mov	r22, r15
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0010){
    1d4c:	c1 fe       	sbrs	r12, 1
    1d4e:	24 c0       	rjmp	.+72     	; 0x1d98 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1d50:	61 2f       	mov	r22, r17
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	8e 2d       	mov	r24, r14
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1d5c:	61 2f       	mov	r22, r17
    1d5e:	6e 5f       	subi	r22, 0xFE	; 254
    1d60:	8e 2d       	mov	r24, r14
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1d68:	61 2f       	mov	r22, r17
    1d6a:	6d 5f       	subi	r22, 0xFD	; 253
    1d6c:	8e 2d       	mov	r24, r14
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1d74:	61 2f       	mov	r22, r17
    1d76:	6c 5f       	subi	r22, 0xFC	; 252
    1d78:	8e 2d       	mov	r24, r14
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1d80:	61 2f       	mov	r22, r17
    1d82:	6b 5f       	subi	r22, 0xFB	; 251
    1d84:	8e 2d       	mov	r24, r14
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1d8c:	61 2f       	mov	r22, r17
    1d8e:	6a 5f       	subi	r22, 0xFA	; 250
    1d90:	8e 2d       	mov	r24, r14
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0001){
    1d98:	c0 fe       	sbrs	r12, 0
    1d9a:	25 c0       	rjmp	.+74     	; 0x1de6 <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1d9c:	8b 2d       	mov	r24, r11
    1d9e:	80 95       	com	r24
    1da0:	81 5e       	subi	r24, 0xE1	; 225
    1da2:	61 2f       	mov	r22, r17
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1daa:	8d e1       	ldi	r24, 0x1D	; 29
    1dac:	8b 19       	sub	r24, r11
    1dae:	61 2f       	mov	r22, r17
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1db6:	8c e1       	ldi	r24, 0x1C	; 28
    1db8:	8b 19       	sub	r24, r11
    1dba:	61 2f       	mov	r22, r17
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1dc2:	8b e1       	ldi	r24, 0x1B	; 27
    1dc4:	8b 19       	sub	r24, r11
    1dc6:	61 2f       	mov	r22, r17
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1dce:	8a e1       	ldi	r24, 0x1A	; 26
    1dd0:	8b 19       	sub	r24, r11
    1dd2:	61 2f       	mov	r22, r17
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1dda:	89 e1       	ldi	r24, 0x19	; 25
    1ddc:	8b 19       	sub	r24, r11
    1dde:	61 2f       	mov	r22, r17
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}	
	if(isrobot){
    1de6:	aa 20       	and	r10, r10
    1de8:	e1 f1       	breq	.+120    	; 0x1e62 <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1dea:	bc e1       	ldi	r27, 0x1C	; 28
    1dec:	eb 2e       	mov	r14, r27
    1dee:	eb 18       	sub	r14, r11
    1df0:	a3 e0       	ldi	r26, 0x03	; 3
    1df2:	ca 2e       	mov	r12, r26
    1df4:	c1 0e       	add	r12, r17
    1df6:	8e 2d       	mov	r24, r14
    1df8:	6c 2d       	mov	r22, r12
    1dfa:	4a 2d       	mov	r20, r10
    1dfc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1e00:	fb e1       	ldi	r31, 0x1B	; 27
    1e02:	ff 2e       	mov	r15, r31
    1e04:	fb 18       	sub	r15, r11
    1e06:	8f 2d       	mov	r24, r15
    1e08:	6c 2d       	mov	r22, r12
    1e0a:	4a 2d       	mov	r20, r10
    1e0c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1e10:	01 2f       	mov	r16, r17
    1e12:	0c 5f       	subi	r16, 0xFC	; 252
    1e14:	8e 2d       	mov	r24, r14
    1e16:	60 2f       	mov	r22, r16
    1e18:	4a 2d       	mov	r20, r10
    1e1a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1e1e:	8f 2d       	mov	r24, r15
    1e20:	60 2f       	mov	r22, r16
    1e22:	4a 2d       	mov	r20, r10
    1e24:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		
		switch(orent){
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	88 16       	cp	r8, r24
    1e2c:	71 f0       	breq	.+28     	; 0x1e4a <printCell+0x208>
    1e2e:	88 16       	cp	r8, r24
    1e30:	40 f0       	brcs	.+16     	; 0x1e42 <printCell+0x200>
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	88 16       	cp	r8, r24
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <printCell+0x20e>
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	88 16       	cp	r8, r24
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <printCell+0x1fe>
    1e3e:	4a c0       	rjmp	.+148    	; 0x1ed4 <printCell+0x292>
    1e40:	0b c0       	rjmp	.+22     	; 0x1e58 <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1e42:	8d e1       	ldi	r24, 0x1D	; 29
    1e44:	8b 19       	sub	r24, r11
    1e46:	6c 2d       	mov	r22, r12
    1e48:	0a c0       	rjmp	.+20     	; 0x1e5e <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1e4a:	1b 5f       	subi	r17, 0xFB	; 251
    1e4c:	8e 2d       	mov	r24, r14
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    1e50:	8a e1       	ldi	r24, 0x1A	; 26
    1e52:	8b 19       	sub	r24, r11
    1e54:	60 2f       	mov	r22, r16
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    1e58:	1e 5f       	subi	r17, 0xFE	; 254
    1e5a:	8f 2d       	mov	r24, r15
    1e5c:	61 2f       	mov	r22, r17
    1e5e:	4a 2d       	mov	r20, r10
    1e60:	37 c0       	rjmp	.+110    	; 0x1ed0 <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    1e62:	77 20       	and	r7, r7
    1e64:	b9 f1       	breq	.+110    	; 0x1ed4 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1e66:	ec e1       	ldi	r30, 0x1C	; 28
    1e68:	ce 2e       	mov	r12, r30
    1e6a:	cb 18       	sub	r12, r11
    1e6c:	73 e0       	ldi	r23, 0x03	; 3
    1e6e:	e7 2e       	mov	r14, r23
    1e70:	e1 0e       	add	r14, r17
    1e72:	8c 2d       	mov	r24, r12
    1e74:	6e 2d       	mov	r22, r14
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1e7c:	0b e1       	ldi	r16, 0x1B	; 27
    1e7e:	0b 19       	sub	r16, r11
    1e80:	80 2f       	mov	r24, r16
    1e82:	6e 2d       	mov	r22, r14
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1e8a:	64 e0       	ldi	r22, 0x04	; 4
    1e8c:	f6 2e       	mov	r15, r22
    1e8e:	f1 0e       	add	r15, r17
    1e90:	8c 2d       	mov	r24, r12
    1e92:	6f 2d       	mov	r22, r15
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1e9a:	80 2f       	mov	r24, r16
    1e9c:	6f 2d       	mov	r22, r15
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1ea4:	8d e1       	ldi	r24, 0x1D	; 29
    1ea6:	8b 19       	sub	r24, r11
    1ea8:	6e 2d       	mov	r22, r14
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1eb0:	1b 5f       	subi	r17, 0xFB	; 251
    1eb2:	8c 2d       	mov	r24, r12
    1eb4:	61 2f       	mov	r22, r17
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    1ebc:	8a e1       	ldi	r24, 0x1A	; 26
    1ebe:	8b 19       	sub	r24, r11
    1ec0:	6f 2d       	mov	r22, r15
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    1ec8:	13 50       	subi	r17, 0x03	; 3
    1eca:	80 2f       	mov	r24, r16
    1ecc:	61 2f       	mov	r22, r17
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		}
}
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	bf 90       	pop	r11
    1ee2:	af 90       	pop	r10
    1ee4:	9f 90       	pop	r9
    1ee6:	8f 90       	pop	r8
    1ee8:	7f 90       	pop	r7
    1eea:	08 95       	ret

00001eec <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    1eec:	9f 92       	push	r9
    1eee:	af 92       	push	r10
    1ef0:	bf 92       	push	r11
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1f04:	80 91 10 07 	lds	r24, 0x0710
    1f08:	a8 2e       	mov	r10, r24
    1f0a:	a6 94       	lsr	r10
    1f0c:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    1f0e:	43 e0       	ldi	r20, 0x03	; 3
    1f10:	b4 2e       	mov	r11, r20
    1f12:	b8 22       	and	r11, r24
    1f14:	cc 24       	eor	r12, r12
    1f16:	dd 24       	eor	r13, r13
    1f18:	1e c0       	rjmp	.+60     	; 0x1f56 <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1f1a:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    1f1c:	fa 14       	cp	r15, r10
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <printMap+0x3a>
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	06 c0       	rjmp	.+12     	; 0x1f32 <printMap+0x46>
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	1b 15       	cp	r17, r11
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <printMap+0x46>
    1f2e:	21 e0       	ldi	r18, 0x01	; 1
    1f30:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    1f32:	6f 2d       	mov	r22, r15
    1f34:	41 2f       	mov	r20, r17
    1f36:	00 91 0e 06 	lds	r16, 0x060E
    1f3a:	e9 2c       	mov	r14, r9
    1f3c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1f40:	1f 5f       	subi	r17, 0xFF	; 255
    1f42:	21 96       	adiw	r28, 0x01	; 1
    1f44:	14 30       	cpi	r17, 0x04	; 4
    1f46:	49 f7       	brne	.-46     	; 0x1f1a <printMap+0x2e>
    1f48:	08 94       	sec
    1f4a:	c1 1c       	adc	r12, r1
    1f4c:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1f4e:	84 e0       	ldi	r24, 0x04	; 4
    1f50:	c8 16       	cp	r12, r24
    1f52:	d1 04       	cpc	r13, r1
    1f54:	51 f0       	breq	.+20     	; 0x1f6a <printMap+0x7e>
    1f56:	fc 2c       	mov	r15, r12
    1f58:	e6 01       	movw	r28, r12
    1f5a:	cc 0f       	add	r28, r28
    1f5c:	dd 1f       	adc	r29, r29
    1f5e:	cc 0f       	add	r28, r28
    1f60:	dd 1f       	adc	r29, r29
    1f62:	c3 52       	subi	r28, 0x23	; 35
    1f64:	dc 4f       	sbci	r29, 0xFC	; 252
    1f66:	10 e0       	ldi	r17, 0x00	; 0
    1f68:	d8 cf       	rjmp	.-80     	; 0x1f1a <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	bf 90       	pop	r11
    1f7c:	af 90       	pop	r10
    1f7e:	9f 90       	pop	r9
    1f80:	08 95       	ret

00001f82 <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
    1f82:	1f 93       	push	r17
    1f84:	18 2f       	mov	r17, r24
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	
	// AT START: odometry is REALLY SMALL & odometryTrigger is at approx 343
	// Suggest breaking apart the IF case?
	if((odometry > odometryTrigger))
    1f86:	60 91 a5 07 	lds	r22, 0x07A5
    1f8a:	70 91 a6 07 	lds	r23, 0x07A6
    1f8e:	80 91 a7 07 	lds	r24, 0x07A7
    1f92:	90 91 a8 07 	lds	r25, 0x07A8
    1f96:	20 91 f5 04 	lds	r18, 0x04F5
    1f9a:	30 91 f6 04 	lds	r19, 0x04F6
    1f9e:	40 91 f7 04 	lds	r20, 0x04F7
    1fa2:	50 91 f8 04 	lds	r21, 0x04F8
    1fa6:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	5f e3       	ldi	r21, 0x3F	; 63
    1fb2:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1fb6:	2c ed       	ldi	r18, 0xDC	; 220
    1fb8:	38 eb       	ldi	r19, 0xB8	; 184
    1fba:	48 e0       	ldi	r20, 0x08	; 8
    1fbc:	5e e3       	ldi	r21, 0x3E	; 62
    1fbe:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    1fc2:	20 91 f9 05 	lds	r18, 0x05F9
    1fc6:	30 91 fa 05 	lds	r19, 0x05FA
    1fca:	40 91 fb 05 	lds	r20, 0x05FB
    1fce:	50 91 fc 05 	lds	r21, 0x05FC
    1fd2:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__gesf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	bc f4       	brge	.+46     	; 0x2008 <checkOdometry+0x86>
	{
		odometryFlag = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	80 93 18 07 	sts	0x0718, r24
		odometryStepL = 0;
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e0       	ldi	r26, 0x00	; 0
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	80 93 a5 07 	sts	0x07A5, r24
    1fec:	90 93 a6 07 	sts	0x07A6, r25
    1ff0:	a0 93 a7 07 	sts	0x07A7, r26
    1ff4:	b0 93 a8 07 	sts	0x07A8, r27
		odometryStepR = 0;
    1ff8:	80 93 f5 04 	sts	0x04F5, r24
    1ffc:	90 93 f6 04 	sts	0x04F6, r25
    2000:	a0 93 f7 04 	sts	0x04F7, r26
    2004:	b0 93 f8 04 	sts	0x04F8, r27
	}
	if (reset){
    2008:	11 23       	and	r17, r17
    200a:	d9 f0       	breq	.+54     	; 0x2042 <checkOdometry+0xc0>
		STEPPER_set_steps(STEPPER_BOTH,0);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <STEPPER_set_steps>
		odometryFlag = 0;
    2016:	10 92 18 07 	sts	0x0718, r1
		odometryStepL = 0;
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	80 93 a5 07 	sts	0x07A5, r24
    2026:	90 93 a6 07 	sts	0x07A6, r25
    202a:	a0 93 a7 07 	sts	0x07A7, r26
    202e:	b0 93 a8 07 	sts	0x07A8, r27
		odometryStepR = 0;
    2032:	80 93 f5 04 	sts	0x04F5, r24
    2036:	90 93 f6 04 	sts	0x04F6, r25
    203a:	a0 93 f7 04 	sts	0x04F7, r26
    203e:	b0 93 f8 04 	sts	0x04F8, r27
	
	// // Else the flag RESETS to ZERO?!
	// else{
		// odometryFlag = 0;
	// }
}
    2042:	1f 91       	pop	r17
    2044:	08 95       	ret

00002046 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2046:	0e 94 f7 21 	call	0x43ee	; 0x43ee <ATTINY_open>
    204a:	90 93 f4 04 	sts	0x04F4, r25
    204e:	80 93 f3 04 	sts	0x04F3, r24
	LEopstat = LED_open(); //open the LED module
    2052:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <LED_open>
    2056:	90 93 f2 04 	sts	0x04F2, r25
    205a:	80 93 f1 04 	sts	0x04F1, r24
	LCopstat = LCD_open(); //open the LCD module
    205e:	0e 94 88 1b 	call	0x3710	; 0x3710 <LCD_open>
    2062:	90 93 f0 04 	sts	0x04F0, r25
    2066:	80 93 ef 04 	sts	0x04EF, r24
	STEPPER_open(); // Open STEPPER module for use
    206a:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	0e 94 77 1d 	call	0x3aee	; 0x3aee <SPKR_open>
	
	LED_open();
    2074:	0e 94 71 1c 	call	0x38e2	; 0x38e2 <LED_open>
	I2C_open();
    2078:	0e 94 51 23 	call	0x46a2	; 0x46a2 <I2C_open>
	ADC_open();//open the ADC module
    207c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	0e 94 57 1b 	call	0x36ae	; 0x36ae <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    2086:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <checkIR>
	prefilter(1);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    2090:	8f ee       	ldi	r24, 0xEF	; 239
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a5 e8       	ldi	r26, 0x85	; 133
    2096:	b1 e4       	ldi	r27, 0x41	; 65
    2098:	80 93 f9 05 	sts	0x05F9, r24
    209c:	90 93 fa 05 	sts	0x05FA, r25
    20a0:	a0 93 fb 05 	sts	0x05FB, r26
    20a4:	b0 93 fc 05 	sts	0x05FC, r27
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	0a c0       	rjmp	.+20     	; 0x20c2 <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    20ae:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	80 32       	cpi	r24, 0x20	; 32
    20b4:	91 05       	cpc	r25, r1
    20b6:	d9 f7       	brne	.-10     	; 0x20ae <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	24 30       	cpi	r18, 0x04	; 4
    20be:	31 05       	cpc	r19, r1
    20c0:	59 f0       	breq	.+22     	; 0x20d8 <initializeRobot+0x92>
    20c2:	f9 01       	movw	r30, r18
    20c4:	55 e0       	ldi	r21, 0x05	; 5
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	5a 95       	dec	r21
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <initializeRobot+0x80>
    20ce:	e4 57       	subi	r30, 0x74	; 116
    20d0:	f9 4f       	sbci	r31, 0xF9	; 249
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	eb cf       	rjmp	.-42     	; 0x20ae <initializeRobot+0x68>
    20d8:	08 95       	ret

000020da <fourNeighborSearch>:
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    20da:	48 2f       	mov	r20, r24
    20dc:	46 95       	lsr	r20
    20de:	46 95       	lsr	r20
	unsigned char curCol = (curCell&0b0011);
    20e0:	58 2f       	mov	r21, r24
    20e2:	53 70       	andi	r21, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 0){
    20e4:	a4 2f       	mov	r26, r20
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	25 2f       	mov	r18, r21
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	fd 01       	movw	r30, r26
    20ee:	ee 0f       	add	r30, r30
    20f0:	ff 1f       	adc	r31, r31
    20f2:	ee 0f       	add	r30, r30
    20f4:	ff 1f       	adc	r31, r31
    20f6:	e2 0f       	add	r30, r18
    20f8:	f3 1f       	adc	r31, r19
    20fa:	e8 59       	subi	r30, 0x98	; 152
    20fc:	fb 4f       	sbci	r31, 0xFB	; 251
    20fe:	80 81       	ld	r24, Z
    2100:	88 23       	and	r24, r24
    2102:	11 f4       	brne	.+4      	; 0x2108 <fourNeighborSearch+0x2e>
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	08 95       	ret
	
	// Perform a 4-neighbor search and store the lowest value
	
	// LCD_clear();
	//Check the north cell
	curRow--;
    2108:	e4 2f       	mov	r30, r20
    210a:	e1 50       	subi	r30, 0x01	; 1
	if((curRow)<WORLD_ROW_SIZE){
    210c:	e4 30       	cpi	r30, 0x04	; 4
    210e:	80 f4       	brcc	.+32     	; 0x2130 <fourNeighborSearch+0x56>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	ee 0f       	add	r30, r30
    2114:	ff 1f       	adc	r31, r31
    2116:	ee 0f       	add	r30, r30
    2118:	ff 1f       	adc	r31, r31
    211a:	e2 0f       	add	r30, r18
    211c:	f3 1f       	adc	r31, r19
    211e:	e8 59       	subi	r30, 0x98	; 152
    2120:	fb 4f       	sbci	r31, 0xFB	; 251
    2122:	e0 81       	ld	r30, Z
		// LCD_printf("NORTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2124:	e4 36       	cpi	r30, 0x64	; 100
    2126:	20 f4       	brcc	.+8      	; 0x2130 <fourNeighborSearch+0x56>
			minVal = curVal;
			nextOrientation = NORTH;
    2128:	10 92 0f 06 	sts	0x060F, r1
    212c:	9e 2f       	mov	r25, r30
    212e:	01 c0       	rjmp	.+2      	; 0x2132 <fourNeighborSearch+0x58>
    2130:	94 e6       	ldi	r25, 0x64	; 100
		}
	}
	
	curRow++;
	curRow++;
    2132:	84 2f       	mov	r24, r20
    2134:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the south cell
	if((curRow)<WORLD_ROW_SIZE){
    2136:	84 30       	cpi	r24, 0x04	; 4
    2138:	88 f4       	brcc	.+34     	; 0x215c <fourNeighborSearch+0x82>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    213a:	e8 2f       	mov	r30, r24
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	e2 0f       	add	r30, r18
    2148:	f3 1f       	adc	r31, r19
    214a:	e8 59       	subi	r30, 0x98	; 152
    214c:	fb 4f       	sbci	r31, 0xFB	; 251
    214e:	e0 81       	ld	r30, Z
		// LCD_printf("SOUTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2150:	e9 17       	cp	r30, r25
    2152:	20 f4       	brcc	.+8      	; 0x215c <fourNeighborSearch+0x82>
			minVal = curVal;
			nextOrientation = SOUTH;
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	80 93 0f 06 	sts	0x060F, r24
    215a:	9e 2f       	mov	r25, r30
		}
	}
	
	curRow--;
	curCol++;
    215c:	85 2f       	mov	r24, r21
    215e:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the east cell
	if((curCol)<WORLD_COLUMN_SIZE){
    2160:	84 30       	cpi	r24, 0x04	; 4
    2162:	81 f0       	breq	.+32     	; 0x2184 <fourNeighborSearch+0xaa>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
    2164:	fd 01       	movw	r30, r26
    2166:	ee 0f       	add	r30, r30
    2168:	ff 1f       	adc	r31, r31
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	e8 0f       	add	r30, r24
    2170:	f1 1d       	adc	r31, r1
    2172:	e8 59       	subi	r30, 0x98	; 152
    2174:	fb 4f       	sbci	r31, 0xFB	; 251
    2176:	e0 81       	ld	r30, Z
		// LCD_printf("EAST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2178:	e9 17       	cp	r30, r25
    217a:	20 f4       	brcc	.+8      	; 0x2184 <fourNeighborSearch+0xaa>
			minVal = curVal;
			nextOrientation = EAST;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	80 93 0f 06 	sts	0x060F, r24
    2182:	9e 2f       	mov	r25, r30
		}
	}
	
	curCol--;
	curCol--;
    2184:	85 2f       	mov	r24, r21
    2186:	81 50       	subi	r24, 0x01	; 1
	// Check the west cell
	if((curCol)<WORLD_COLUMN_SIZE){
    2188:	84 30       	cpi	r24, 0x04	; 4
    218a:	80 f4       	brcc	.+32     	; 0x21ac <fourNeighborSearch+0xd2>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
		// LCD_printf("WEST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    218c:	aa 0f       	add	r26, r26
    218e:	bb 1f       	adc	r27, r27
    2190:	aa 0f       	add	r26, r26
    2192:	bb 1f       	adc	r27, r27
    2194:	a8 0f       	add	r26, r24
    2196:	b1 1d       	adc	r27, r1
    2198:	a8 59       	subi	r26, 0x98	; 152
    219a:	bb 4f       	sbci	r27, 0xFB	; 251
    219c:	8c 91       	ld	r24, X
    219e:	89 17       	cp	r24, r25
    21a0:	28 f4       	brcc	.+10     	; 0x21ac <fourNeighborSearch+0xd2>
			minVal = curVal;
			nextOrientation = WEST;
    21a2:	83 e0       	ldi	r24, 0x03	; 3
    21a4:	80 93 0f 06 	sts	0x060F, r24
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	08 95       	ret
    21ac:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    21ae:	08 95       	ret

000021b0 <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
void wavefrontMake(void)
{
    21b0:	8f 92       	push	r8
    21b2:	9f 92       	push	r9
    21b4:	bf 92       	push	r11
    21b6:	cf 92       	push	r12
    21b8:	df 92       	push	r13
    21ba:	ef 92       	push	r14
    21bc:	ff 92       	push	r15
    21be:	0f 93       	push	r16
    21c0:	1f 93       	push	r17
    21c2:	cf 93       	push	r28
    21c4:	df 93       	push	r29
	// User-defined goal location
	// unsigned char goalLocation = currentGoalWorld;
	// Extract x and y goal location
	int rowGoal = (currentGoalWorld>>2);
    21c6:	90 91 7f 05 	lds	r25, 0x057F
    21ca:	89 2f       	mov	r24, r25
    21cc:	86 95       	lsr	r24
    21ce:	86 95       	lsr	r24
    21d0:	c8 2e       	mov	r12, r24
    21d2:	dd 24       	eor	r13, r13
	int colGoal = (currentGoalWorld&0b0011);
    21d4:	e9 2e       	mov	r14, r25
    21d6:	ff 24       	eor	r15, r15
    21d8:	83 e0       	ldi	r24, 0x03	; 3
    21da:	e8 22       	and	r14, r24
    21dc:	ff 24       	eor	r15, r15
    21de:	c0 e0       	ldi	r28, 0x00	; 0
    21e0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
				ROBOT_METRIC_WORLD[row][col] = 99;
    21e2:	13 e6       	ldi	r17, 0x63	; 99
    21e4:	b1 2e       	mov	r11, r17
    21e6:	3f c0       	rjmp	.+126    	; 0x2266 <wavefrontMake+0xb6>
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
    21e8:	d8 01       	movw	r26, r16
    21ea:	8c 91       	ld	r24, X
    21ec:	8f 30       	cpi	r24, 0x0F	; 15
    21ee:	11 f4       	brne	.+4      	; 0x21f4 <wavefrontMake+0x44>
				ROBOT_METRIC_WORLD[row][col] = 99;
    21f0:	b0 82       	st	Z, r11
    21f2:	2a c0       	rjmp	.+84     	; 0x2248 <wavefrontMake+0x98>
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs((WORLD_CELL[row][col]>>2) - rowGoal);
    21f4:	d4 01       	movw	r26, r8
    21f6:	9c 91       	ld	r25, X
    21f8:	89 2f       	mov	r24, r25
    21fa:	86 95       	lsr	r24
    21fc:	86 95       	lsr	r24
    21fe:	48 2f       	mov	r20, r24
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	4c 19       	sub	r20, r12
    2204:	5d 09       	sbc	r21, r13
    2206:	57 ff       	sbrs	r21, 7
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <wavefrontMake+0x60>
    220a:	50 95       	com	r21
    220c:	41 95       	neg	r20
    220e:	5f 4f       	sbci	r21, 0xFF	; 255
				colDelta = abs((WORLD_CELL[row][col]&0b0011) - colGoal);
    2210:	29 2f       	mov	r18, r25
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	23 70       	andi	r18, 0x03	; 3
    2216:	30 70       	andi	r19, 0x00	; 0
    2218:	2e 19       	sub	r18, r14
    221a:	3f 09       	sbc	r19, r15
    221c:	37 ff       	sbrs	r19, 7
    221e:	03 c0       	rjmp	.+6      	; 0x2226 <wavefrontMake+0x76>
    2220:	30 95       	com	r19
    2222:	21 95       	neg	r18
    2224:	3f 4f       	sbci	r19, 0xFF	; 255
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
    2226:	22 9f       	mul	r18, r18
    2228:	c0 01       	movw	r24, r0
    222a:	23 9f       	mul	r18, r19
    222c:	90 0d       	add	r25, r0
    222e:	32 9f       	mul	r19, r18
    2230:	90 0d       	add	r25, r0
    2232:	11 24       	eor	r1, r1
    2234:	44 9f       	mul	r20, r20
    2236:	90 01       	movw	r18, r0
    2238:	45 9f       	mul	r20, r21
    223a:	30 0d       	add	r19, r0
    223c:	54 9f       	mul	r21, r20
    223e:	30 0d       	add	r19, r0
    2240:	11 24       	eor	r1, r1
    2242:	82 0f       	add	r24, r18
    2244:	93 1f       	adc	r25, r19
    2246:	80 83       	st	Z, r24
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
    2248:	6f 5f       	subi	r22, 0xFF	; 255
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	0f 5f       	subi	r16, 0xFF	; 255
    224e:	1f 4f       	sbci	r17, 0xFF	; 255
    2250:	31 96       	adiw	r30, 0x01	; 1
    2252:	08 94       	sec
    2254:	81 1c       	adc	r8, r1
    2256:	91 1c       	adc	r9, r1
    2258:	64 30       	cpi	r22, 0x04	; 4
    225a:	71 05       	cpc	r23, r1
    225c:	29 f6       	brne	.-118    	; 0x21e8 <wavefrontMake+0x38>
	unsigned int rowDelta, colDelta;
	int row, col;
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
    225e:	21 96       	adiw	r28, 0x01	; 1
    2260:	c4 30       	cpi	r28, 0x04	; 4
    2262:	d1 05       	cpc	r29, r1
    2264:	a1 f0       	breq	.+40     	; 0x228e <wavefrontMake+0xde>
    2266:	ce 01       	movw	r24, r28
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	88 0f       	add	r24, r24
    226e:	99 1f       	adc	r25, r25
    2270:	8c 01       	movw	r16, r24
    2272:	03 52       	subi	r16, 0x23	; 35
    2274:	1c 4f       	sbci	r17, 0xFC	; 252
    2276:	fc 01       	movw	r30, r24
    2278:	e8 59       	subi	r30, 0x98	; 152
    227a:	fb 4f       	sbci	r31, 0xFB	; 251
    227c:	ad ee       	ldi	r26, 0xED	; 237
    227e:	8a 2e       	mov	r8, r26
    2280:	a3 e0       	ldi	r26, 0x03	; 3
    2282:	9a 2e       	mov	r9, r26
    2284:	88 0e       	add	r8, r24
    2286:	99 1e       	adc	r9, r25
    2288:	60 e0       	ldi	r22, 0x00	; 0
    228a:	70 e0       	ldi	r23, 0x00	; 0
    228c:	ad cf       	rjmp	.-166    	; 0x21e8 <wavefrontMake+0x38>
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
			}
		}
	}
}
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	df 90       	pop	r13
    229c:	cf 90       	pop	r12
    229e:	bf 90       	pop	r11
    22a0:	9f 90       	pop	r9
    22a2:	8f 90       	pop	r8
    22a4:	08 95       	ret

000022a6 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    22a6:	ef 92       	push	r14
    22a8:	ff 92       	push	r15
    22aa:	0f 93       	push	r16
    22ac:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    22ae:	60 91 71 05 	lds	r22, 0x0571
    22b2:	70 91 72 05 	lds	r23, 0x0572
    22b6:	80 91 73 05 	lds	r24, 0x0573
    22ba:	90 91 74 05 	lds	r25, 0x0574
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e5       	ldi	r20, 0x50	; 80
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    22ca:	f8 2e       	mov	r15, r24
    22cc:	ff 1c       	adc	r15, r15
    22ce:	ff 24       	eor	r15, r15
    22d0:	ff 1c       	adc	r15, r15
    22d2:	ff 0c       	add	r15, r15
    22d4:	ff 0c       	add	r15, r15
    22d6:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    22d8:	60 91 14 07 	lds	r22, 0x0714
    22dc:	70 91 15 07 	lds	r23, 0x0715
    22e0:	80 91 16 07 	lds	r24, 0x0716
    22e4:	90 91 17 07 	lds	r25, 0x0717
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 ef       	ldi	r20, 0xF0	; 240
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    22f4:	08 2f       	mov	r16, r24
    22f6:	00 1f       	adc	r16, r16
    22f8:	00 27       	eor	r16, r16
    22fa:	00 1f       	adc	r16, r16
    22fc:	00 0f       	add	r16, r16
    22fe:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    2300:	60 91 7b 05 	lds	r22, 0x057B
    2304:	70 91 7c 05 	lds	r23, 0x057C
    2308:	80 91 7d 05 	lds	r24, 0x057D
    230c:	90 91 7e 05 	lds	r25, 0x057E
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	4c e0       	ldi	r20, 0x0C	; 12
    2316:	52 e4       	ldi	r21, 0x42	; 66
    2318:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    231c:	18 2f       	mov	r17, r24
    231e:	11 1f       	adc	r17, r17
    2320:	11 27       	eor	r17, r17
    2322:	11 1f       	adc	r17, r17
    2324:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    2326:	ee 24       	eor	r14, r14
    2328:	60 91 19 07 	lds	r22, 0x0719
    232c:	70 91 1a 07 	lds	r23, 0x071A
    2330:	80 91 1b 07 	lds	r24, 0x071B
    2334:	90 91 1c 07 	lds	r25, 0x071C
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 ef       	ldi	r20, 0xF0	; 240
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    2344:	88 23       	and	r24, r24
    2346:	14 f4       	brge	.+4      	; 0x234c <checkWorld+0xa6>
    2348:	ee 24       	eor	r14, r14
    234a:	e3 94       	inc	r14
    234c:	8f 2d       	mov	r24, r15
    234e:	8e 0d       	add	r24, r14
    2350:	80 0f       	add	r24, r16
    2352:	81 0f       	add	r24, r17
    2354:	80 93 79 05 	sts	0x0579, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    2358:	20 91 7a 05 	lds	r18, 0x057A
    235c:	e2 2f       	mov	r30, r18
    235e:	f0 e0       	ldi	r31, 0x00	; 0
    2360:	eb 56       	subi	r30, 0x6B	; 107
    2362:	f8 4f       	sbci	r31, 0xF8	; 248
    2364:	91 81       	ldd	r25, Z+1	; 0x01
    2366:	90 93 80 05 	sts	0x0580, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    236a:	89 17       	cp	r24, r25
    236c:	19 f4       	brne	.+6      	; 0x2374 <checkWorld+0xce>
		currentMoveWorld += 1;
    236e:	2f 5f       	subi	r18, 0xFF	; 255
    2370:	20 93 7a 05 	sts	0x057A, r18
	}
}
    2374:	1f 91       	pop	r17
    2376:	0f 91       	pop	r16
    2378:	ff 90       	pop	r15
    237a:	ef 90       	pop	r14
    237c:	08 95       	ret

0000237e <moveWallOld>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWallOld( void )
{	
    237e:	2f 92       	push	r2
    2380:	3f 92       	push	r3
    2382:	4f 92       	push	r4
    2384:	5f 92       	push	r5
    2386:	6f 92       	push	r6
    2388:	7f 92       	push	r7
    238a:	8f 92       	push	r8
    238c:	9f 92       	push	r9
    238e:	af 92       	push	r10
    2390:	bf 92       	push	r11
    2392:	cf 92       	push	r12
    2394:	df 92       	push	r13
    2396:	ef 92       	push	r14
    2398:	ff 92       	push	r15
    239a:	0f 93       	push	r16
    239c:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    239e:	e0 90 71 05 	lds	r14, 0x0571
    23a2:	f0 90 72 05 	lds	r15, 0x0572
    23a6:	00 91 73 05 	lds	r16, 0x0573
    23aa:	10 91 74 05 	lds	r17, 0x0574
    23ae:	33 24       	eor	r3, r3
    23b0:	c8 01       	movw	r24, r16
    23b2:	b7 01       	movw	r22, r14
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    23c0:	88 23       	and	r24, r24
    23c2:	14 f4       	brge	.+4      	; 0x23c8 <moveWallOld+0x4a>
    23c4:	33 24       	eor	r3, r3
    23c6:	33 94       	inc	r3
    23c8:	a0 90 19 07 	lds	r10, 0x0719
    23cc:	b0 90 1a 07 	lds	r11, 0x071A
    23d0:	c0 90 1b 07 	lds	r12, 0x071B
    23d4:	d0 90 1c 07 	lds	r13, 0x071C
    23d8:	40 90 14 07 	lds	r4, 0x0714
    23dc:	50 90 15 07 	lds	r5, 0x0715
    23e0:	60 90 16 07 	lds	r6, 0x0716
    23e4:	70 90 17 07 	lds	r7, 0x0717
    23e8:	88 24       	eor	r8, r8
    23ea:	60 91 7b 05 	lds	r22, 0x057B
    23ee:	70 91 7c 05 	lds	r23, 0x057C
    23f2:	80 91 7d 05 	lds	r24, 0x057D
    23f6:	90 91 7e 05 	lds	r25, 0x057E
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e7       	ldi	r20, 0x70	; 112
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    2406:	88 23       	and	r24, r24
    2408:	14 f4       	brge	.+4      	; 0x240e <moveWallOld+0x90>
    240a:	88 24       	eor	r8, r8
    240c:	83 94       	inc	r8
    240e:	93 2c       	mov	r9, r3
    2410:	98 28       	or	r9, r8
    2412:	88 24       	eor	r8, r8
    2414:	c6 01       	movw	r24, r12
    2416:	b5 01       	movw	r22, r10
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e7       	ldi	r20, 0x70	; 112
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    2424:	88 23       	and	r24, r24
    2426:	14 f4       	brge	.+4      	; 0x242c <moveWallOld+0xae>
    2428:	88 24       	eor	r8, r8
    242a:	83 94       	inc	r8
    242c:	98 28       	or	r9, r8
    242e:	88 24       	eor	r8, r8
    2430:	c3 01       	movw	r24, r6
    2432:	b2 01       	movw	r22, r4
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e7       	ldi	r20, 0x70	; 112
    243a:	51 e4       	ldi	r21, 0x41	; 65
    243c:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    2440:	88 23       	and	r24, r24
    2442:	14 f4       	brge	.+4      	; 0x2448 <moveWallOld+0xca>
    2444:	88 24       	eor	r8, r8
    2446:	83 94       	inc	r8
    2448:	29 2c       	mov	r2, r9
    244a:	28 28       	or	r2, r8
	if(!isWall){	
    244c:	81 f4       	brne	.+32     	; 0x246e <moveWallOld+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	70 e0       	ldi	r23, 0x00	; 0
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	9f e4       	ldi	r25, 0x4F	; 79
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e2       	ldi	r20, 0x20	; 32
    245c:	51 e4       	ldi	r21, 0x41	; 65
    245e:	79 01       	movw	r14, r18
    2460:	8a 01       	movw	r16, r20
    2462:	59 01       	movw	r10, r18
    2464:	6a 01       	movw	r12, r20
    2466:	88 24       	eor	r8, r8
    2468:	0e 94 15 08 	call	0x102a	; 0x102a <move_arc_stnb>
    246c:	f7 c0       	rjmp	.+494    	; 0x265c <moveWallOld+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    246e:	c6 01       	movw	r24, r12
    2470:	b5 01       	movw	r22, r10
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	40 e7       	ldi	r20, 0x70	; 112
    2478:	51 e4       	ldi	r21, 0x41	; 65
    247a:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__gesf2>
    247e:	18 16       	cp	r1, r24
    2480:	64 f4       	brge	.+24     	; 0x249a <moveWallOld+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e4       	ldi	r26, 0x40	; 64
    2488:	b0 ec       	ldi	r27, 0xC0	; 192
    248a:	80 93 19 07 	sts	0x0719, r24
    248e:	90 93 1a 07 	sts	0x071A, r25
    2492:	a0 93 1b 07 	sts	0x071B, r26
    2496:	b0 93 1c 07 	sts	0x071C, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    249a:	c3 01       	movw	r24, r6
    249c:	b2 01       	movw	r22, r4
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e7       	ldi	r20, 0x70	; 112
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__gesf2>
    24aa:	18 16       	cp	r1, r24
    24ac:	14 f0       	brlt	.+4      	; 0x24b2 <moveWallOld+0x134>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	0d c0       	rjmp	.+26     	; 0x24cc <moveWallOld+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	a0 e4       	ldi	r26, 0x40	; 64
    24b8:	b0 ec       	ldi	r27, 0xC0	; 192
    24ba:	80 93 14 07 	sts	0x0714, r24
    24be:	90 93 15 07 	sts	0x0715, r25
    24c2:	a0 93 16 07 	sts	0x0716, r26
    24c6:	b0 93 17 07 	sts	0x0717, r27
    24ca:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    24cc:	33 20       	and	r3, r3
    24ce:	21 f1       	breq	.+72     	; 0x2518 <moveWallOld+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    24d0:	88 23       	and	r24, r24
    24d2:	29 f0       	breq	.+10     	; 0x24de <moveWallOld+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	70 e0       	ldi	r23, 0x00	; 0
    24d8:	8a e7       	ldi	r24, 0x7A	; 122
    24da:	94 e4       	ldi	r25, 0x44	; 68
    24dc:	04 c0       	rjmp	.+8      	; 0x24e6 <moveWallOld+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	70 e0       	ldi	r23, 0x00	; 0
    24e2:	8a e7       	ldi	r24, 0x7A	; 122
    24e4:	94 ec       	ldi	r25, 0xC4	; 196
    24e6:	a8 01       	movw	r20, r16
    24e8:	97 01       	movw	r18, r14
    24ea:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    24ee:	20 91 14 07 	lds	r18, 0x0714
    24f2:	30 91 15 07 	lds	r19, 0x0715
    24f6:	40 91 16 07 	lds	r20, 0x0716
    24fa:	50 91 17 07 	lds	r21, 0x0717
    24fe:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    2502:	9b 01       	movw	r18, r22
    2504:	ac 01       	movw	r20, r24
    2506:	60 91 19 07 	lds	r22, 0x0719
    250a:	70 91 1a 07 	lds	r23, 0x071A
    250e:	80 91 1b 07 	lds	r24, 0x071B
    2512:	90 91 1c 07 	lds	r25, 0x071C
    2516:	10 c0       	rjmp	.+32     	; 0x2538 <moveWallOld+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2518:	60 91 19 07 	lds	r22, 0x0719
    251c:	70 91 1a 07 	lds	r23, 0x071A
    2520:	80 91 1b 07 	lds	r24, 0x071B
    2524:	90 91 1c 07 	lds	r25, 0x071C
    2528:	20 91 14 07 	lds	r18, 0x0714
    252c:	30 91 15 07 	lds	r19, 0x0715
    2530:	40 91 16 07 	lds	r20, 0x0716
    2534:	50 91 17 07 	lds	r21, 0x0717
    2538:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    253c:	90 58       	subi	r25, 0x80	; 128
    253e:	40 e0       	ldi	r20, 0x00	; 0
    2540:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2544:	6b 01       	movw	r12, r22
    2546:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2548:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__fixsfsi>
    254c:	8b 01       	movw	r16, r22
    254e:	77 ff       	sbrs	r23, 7
    2550:	03 c0       	rjmp	.+6      	; 0x2558 <moveWallOld+0x1da>
    2552:	10 95       	com	r17
    2554:	01 95       	neg	r16
    2556:	1f 4f       	sbci	r17, 0xFF	; 255
    2558:	05 36       	cpi	r16, 0x65	; 101
    255a:	11 05       	cpc	r17, r1
    255c:	fc f0       	brlt	.+62     	; 0x259c <moveWallOld+0x21e>
    255e:	c7 01       	movw	r24, r14
    2560:	b6 01       	movw	r22, r12
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e0       	ldi	r20, 0x00	; 0
    2568:	50 e0       	ldi	r21, 0x00	; 0
    256a:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    256e:	88 23       	and	r24, r24
    2570:	a9 f0       	breq	.+42     	; 0x259c <moveWallOld+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    2572:	b8 01       	movw	r22, r16
    2574:	88 27       	eor	r24, r24
    2576:	77 fd       	sbrc	r23, 7
    2578:	80 95       	com	r24
    257a:	98 2f       	mov	r25, r24
    257c:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <__floatsisf>
    2580:	9b 01       	movw	r18, r22
    2582:	ac 01       	movw	r20, r24
    2584:	c7 01       	movw	r24, r14
    2586:	b6 01       	movw	r22, r12
    2588:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	48 ec       	ldi	r20, 0xC8	; 200
    2592:	52 e4       	ldi	r21, 0x42	; 66
    2594:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    2598:	6b 01       	movw	r12, r22
    259a:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    259c:	c7 01       	movw	r24, r14
    259e:	b6 01       	movw	r22, r12
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	48 ec       	ldi	r20, 0xC8	; 200
    25a6:	52 e4       	ldi	r21, 0x42	; 66
    25a8:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    25ac:	6b 01       	movw	r12, r22
    25ae:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    25b0:	8d b7       	in	r24, 0x3d	; 61
    25b2:	9e b7       	in	r25, 0x3e	; 62
    25b4:	09 97       	sbiw	r24, 0x09	; 9
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	9e bf       	out	0x3e, r25	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	8d bf       	out	0x3d, r24	; 61
    25c0:	0d b7       	in	r16, 0x3d	; 61
    25c2:	1e b7       	in	r17, 0x3e	; 62
    25c4:	0f 5f       	subi	r16, 0xFF	; 255
    25c6:	1f 4f       	sbci	r17, 0xFF	; 255
    25c8:	c7 01       	movw	r24, r14
    25ca:	b6 01       	movw	r22, r12
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	48 ec       	ldi	r20, 0xC8	; 200
    25d2:	52 e4       	ldi	r21, 0x42	; 66
    25d4:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	48 ec       	ldi	r20, 0xC8	; 200
    25de:	52 e4       	ldi	r21, 0x42	; 66
    25e0:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    25e4:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    25e8:	4b 01       	movw	r8, r22
    25ea:	5c 01       	movw	r10, r24
    25ec:	82 e3       	ldi	r24, 0x32	; 50
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	f8 01       	movw	r30, r16
    25f2:	91 83       	std	Z+1, r25	; 0x01
    25f4:	80 83       	st	Z, r24
    25f6:	c7 01       	movw	r24, r14
    25f8:	b6 01       	movw	r22, r12
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	48 ec       	ldi	r20, 0xC8	; 200
    2600:	52 ec       	ldi	r21, 0xC2	; 194
    2602:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	30 e0       	ldi	r19, 0x00	; 0
    260a:	48 ec       	ldi	r20, 0xC8	; 200
    260c:	52 e4       	ldi	r21, 0x42	; 66
    260e:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    2612:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    2616:	f8 01       	movw	r30, r16
    2618:	73 83       	std	Z+3, r23	; 0x03
    261a:	62 83       	std	Z+2, r22	; 0x02
    261c:	82 ec       	ldi	r24, 0xC2	; 194
    261e:	91 e0       	ldi	r25, 0x01	; 1
    2620:	95 83       	std	Z+5, r25	; 0x05
    2622:	84 83       	std	Z+4, r24	; 0x04
    2624:	16 82       	std	Z+6, r1	; 0x06
    2626:	10 86       	std	Z+8, r1	; 0x08
    2628:	17 82       	std	Z+7, r1	; 0x07
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	62 e0       	ldi	r22, 0x02	; 2
    262e:	41 e0       	ldi	r20, 0x01	; 1
    2630:	22 e3       	ldi	r18, 0x32	; 50
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	84 01       	movw	r16, r8
    2636:	92 ec       	ldi	r25, 0xC2	; 194
    2638:	e9 2e       	mov	r14, r25
    263a:	91 e0       	ldi	r25, 0x01	; 1
    263c:	f9 2e       	mov	r15, r25
    263e:	cc 24       	eor	r12, r12
    2640:	aa 24       	eor	r10, r10
    2642:	bb 24       	eor	r11, r11
    2644:	88 24       	eor	r8, r8
    2646:	83 94       	inc	r8
    2648:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <STEPPER_move>
    264c:	8d b7       	in	r24, 0x3d	; 61
    264e:	9e b7       	in	r25, 0x3e	; 62
    2650:	09 96       	adiw	r24, 0x09	; 9
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	9e bf       	out	0x3e, r25	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    265c:	82 2d       	mov	r24, r2
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	df 90       	pop	r13
    2668:	cf 90       	pop	r12
    266a:	bf 90       	pop	r11
    266c:	af 90       	pop	r10
    266e:	9f 90       	pop	r9
    2670:	8f 90       	pop	r8
    2672:	7f 90       	pop	r7
    2674:	6f 90       	pop	r6
    2676:	5f 90       	pop	r5
    2678:	4f 90       	pop	r4
    267a:	3f 90       	pop	r3
    267c:	2f 90       	pop	r2
    267e:	08 95       	ret

00002680 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    2680:	2f 92       	push	r2
    2682:	3f 92       	push	r3
    2684:	4f 92       	push	r4
    2686:	5f 92       	push	r5
    2688:	6f 92       	push	r6
    268a:	7f 92       	push	r7
    268c:	8f 92       	push	r8
    268e:	9f 92       	push	r9
    2690:	af 92       	push	r10
    2692:	bf 92       	push	r11
    2694:	cf 92       	push	r12
    2696:	df 92       	push	r13
    2698:	ef 92       	push	r14
    269a:	ff 92       	push	r15
    269c:	0f 93       	push	r16
    269e:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    26a0:	e0 90 71 05 	lds	r14, 0x0571
    26a4:	f0 90 72 05 	lds	r15, 0x0572
    26a8:	00 91 73 05 	lds	r16, 0x0573
    26ac:	10 91 74 05 	lds	r17, 0x0574
    26b0:	33 24       	eor	r3, r3
    26b2:	c8 01       	movw	r24, r16
    26b4:	b7 01       	movw	r22, r14
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	14 f4       	brge	.+4      	; 0x26ca <moveWall+0x4a>
    26c6:	33 24       	eor	r3, r3
    26c8:	33 94       	inc	r3
    26ca:	a0 90 19 07 	lds	r10, 0x0719
    26ce:	b0 90 1a 07 	lds	r11, 0x071A
    26d2:	c0 90 1b 07 	lds	r12, 0x071B
    26d6:	d0 90 1c 07 	lds	r13, 0x071C
    26da:	40 90 14 07 	lds	r4, 0x0714
    26de:	50 90 15 07 	lds	r5, 0x0715
    26e2:	60 90 16 07 	lds	r6, 0x0716
    26e6:	70 90 17 07 	lds	r7, 0x0717
    26ea:	88 24       	eor	r8, r8
    26ec:	60 91 7b 05 	lds	r22, 0x057B
    26f0:	70 91 7c 05 	lds	r23, 0x057C
    26f4:	80 91 7d 05 	lds	r24, 0x057D
    26f8:	90 91 7e 05 	lds	r25, 0x057E
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e7       	ldi	r20, 0x70	; 112
    2702:	51 e4       	ldi	r21, 0x41	; 65
    2704:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    2708:	88 23       	and	r24, r24
    270a:	14 f4       	brge	.+4      	; 0x2710 <moveWall+0x90>
    270c:	88 24       	eor	r8, r8
    270e:	83 94       	inc	r8
    2710:	93 2c       	mov	r9, r3
    2712:	98 28       	or	r9, r8
    2714:	88 24       	eor	r8, r8
    2716:	c6 01       	movw	r24, r12
    2718:	b5 01       	movw	r22, r10
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e7       	ldi	r20, 0x70	; 112
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    2726:	88 23       	and	r24, r24
    2728:	14 f4       	brge	.+4      	; 0x272e <moveWall+0xae>
    272a:	88 24       	eor	r8, r8
    272c:	83 94       	inc	r8
    272e:	98 28       	or	r9, r8
    2730:	88 24       	eor	r8, r8
    2732:	c3 01       	movw	r24, r6
    2734:	b2 01       	movw	r22, r4
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e7       	ldi	r20, 0x70	; 112
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    2742:	88 23       	and	r24, r24
    2744:	14 f4       	brge	.+4      	; 0x274a <moveWall+0xca>
    2746:	88 24       	eor	r8, r8
    2748:	83 94       	inc	r8
    274a:	29 2c       	mov	r2, r9
    274c:	28 28       	or	r2, r8
	if(!isWall){
    274e:	09 f0       	breq	.+2      	; 0x2752 <moveWall+0xd2>
    2750:	8a c0       	rjmp	.+276    	; 0x2866 <moveWall+0x1e6>
	
		// Update odometry
		curr_step = STEPPER_get_nSteps();
    2752:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <STEPPER_get_nSteps>
    2756:	60 93 0c 07 	sts	0x070C, r22
    275a:	70 93 0d 07 	sts	0x070D, r23
    275e:	80 93 0e 07 	sts	0x070E, r24
    2762:	90 93 0f 07 	sts	0x070F, r25
		
		if(curr_step.left != 0){
    2766:	cb 01       	movw	r24, r22
    2768:	61 15       	cp	r22, r1
    276a:	71 05       	cpc	r23, r1
    276c:	e1 f0       	breq	.+56     	; 0x27a6 <moveWall+0x126>
			odometryStepL += WALL_STEP - curr_step.left;
    276e:	64 e1       	ldi	r22, 0x14	; 20
    2770:	70 e0       	ldi	r23, 0x00	; 0
    2772:	68 1b       	sub	r22, r24
    2774:	79 0b       	sbc	r23, r25
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
    277e:	9b 01       	movw	r18, r22
    2780:	ac 01       	movw	r20, r24
    2782:	60 91 a5 07 	lds	r22, 0x07A5
    2786:	70 91 a6 07 	lds	r23, 0x07A6
    278a:	80 91 a7 07 	lds	r24, 0x07A7
    278e:	90 91 a8 07 	lds	r25, 0x07A8
    2792:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    2796:	60 93 a5 07 	sts	0x07A5, r22
    279a:	70 93 a6 07 	sts	0x07A6, r23
    279e:	80 93 a7 07 	sts	0x07A7, r24
    27a2:	90 93 a8 07 	sts	0x07A8, r25
		}
		if(curr_step.right != 0){
    27a6:	80 91 0e 07 	lds	r24, 0x070E
    27aa:	90 91 0f 07 	lds	r25, 0x070F
    27ae:	00 97       	sbiw	r24, 0x00	; 0
    27b0:	e1 f0       	breq	.+56     	; 0x27ea <moveWall+0x16a>
			odometryStepR += WALL_STEP - curr_step.right;
    27b2:	64 e1       	ldi	r22, 0x14	; 20
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	68 1b       	sub	r22, r24
    27b8:	79 0b       	sbc	r23, r25
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
    27c2:	9b 01       	movw	r18, r22
    27c4:	ac 01       	movw	r20, r24
    27c6:	60 91 f5 04 	lds	r22, 0x04F5
    27ca:	70 91 f6 04 	lds	r23, 0x04F6
    27ce:	80 91 f7 04 	lds	r24, 0x04F7
    27d2:	90 91 f8 04 	lds	r25, 0x04F8
    27d6:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    27da:	60 93 f5 04 	sts	0x04F5, r22
    27de:	70 93 f6 04 	sts	0x04F6, r23
    27e2:	80 93 f7 04 	sts	0x04F7, r24
    27e6:	90 93 f8 04 	sts	0x04F8, r25
		}
		
		STEPPER_set_steps(STEPPER_BOTH,0);
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <STEPPER_set_steps>
	
		// Move with wall
		STEPPER_move_stnb( STEPPER_BOTH, 
    27f4:	8d b7       	in	r24, 0x3d	; 61
    27f6:	9e b7       	in	r25, 0x3e	; 62
    27f8:	09 97       	sbiw	r24, 0x09	; 9
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	9e bf       	out	0x3e, r25	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	8d bf       	out	0x3d, r24	; 61
    2804:	ed b7       	in	r30, 0x3d	; 61
    2806:	fe b7       	in	r31, 0x3e	; 62
    2808:	31 96       	adiw	r30, 0x01	; 1
    280a:	84 e1       	ldi	r24, 0x14	; 20
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	ad b7       	in	r26, 0x3d	; 61
    2810:	be b7       	in	r27, 0x3e	; 62
    2812:	12 96       	adiw	r26, 0x02	; 2
    2814:	9c 93       	st	X, r25
    2816:	8e 93       	st	-X, r24
    2818:	11 97       	sbiw	r26, 0x01	; 1
    281a:	88 ec       	ldi	r24, 0xC8	; 200
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	93 83       	std	Z+3, r25	; 0x03
    2820:	82 83       	std	Z+2, r24	; 0x02
    2822:	82 ec       	ldi	r24, 0xC2	; 194
    2824:	91 e0       	ldi	r25, 0x01	; 1
    2826:	95 83       	std	Z+5, r25	; 0x05
    2828:	84 83       	std	Z+4, r24	; 0x04
    282a:	16 82       	std	Z+6, r1	; 0x06
    282c:	10 86       	std	Z+8, r1	; 0x08
    282e:	17 82       	std	Z+7, r1	; 0x07
    2830:	81 e0       	ldi	r24, 0x01	; 1
    2832:	62 e0       	ldi	r22, 0x02	; 2
    2834:	41 e0       	ldi	r20, 0x01	; 1
    2836:	24 e1       	ldi	r18, 0x14	; 20
    2838:	30 e0       	ldi	r19, 0x00	; 0
    283a:	08 ec       	ldi	r16, 0xC8	; 200
    283c:	10 e0       	ldi	r17, 0x00	; 0
    283e:	72 ec       	ldi	r23, 0xC2	; 194
    2840:	e7 2e       	mov	r14, r23
    2842:	71 e0       	ldi	r23, 0x01	; 1
    2844:	f7 2e       	mov	r15, r23
    2846:	cc 24       	eor	r12, r12
    2848:	aa 24       	eor	r10, r10
    284a:	bb 24       	eor	r11, r11
    284c:	88 24       	eor	r8, r8
    284e:	83 94       	inc	r8
    2850:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <STEPPER_move>
    2854:	ed b7       	in	r30, 0x3d	; 61
    2856:	fe b7       	in	r31, 0x3e	; 62
    2858:	39 96       	adiw	r30, 0x09	; 9
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	fe bf       	out	0x3e, r31	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	ed bf       	out	0x3d, r30	; 61
    2864:	48 c1       	rjmp	.+656    	; 0x2af6 <moveWall+0x476>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2866:	c6 01       	movw	r24, r12
    2868:	b5 01       	movw	r22, r10
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	40 e7       	ldi	r20, 0x70	; 112
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__gesf2>
    2876:	18 16       	cp	r1, r24
    2878:	64 f4       	brge	.+24     	; 0x2892 <moveWall+0x212>
		rtIR = IR_WALL_R_THRESH-18;
    287a:	80 e0       	ldi	r24, 0x00	; 0
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	a0 e4       	ldi	r26, 0x40	; 64
    2880:	b0 ec       	ldi	r27, 0xC0	; 192
    2882:	80 93 19 07 	sts	0x0719, r24
    2886:	90 93 1a 07 	sts	0x071A, r25
    288a:	a0 93 1b 07 	sts	0x071B, r26
    288e:	b0 93 1c 07 	sts	0x071C, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2892:	c3 01       	movw	r24, r6
    2894:	b2 01       	movw	r22, r4
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e7       	ldi	r20, 0x70	; 112
    289c:	51 e4       	ldi	r21, 0x41	; 65
    289e:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__gesf2>
    28a2:	18 16       	cp	r1, r24
    28a4:	14 f0       	brlt	.+4      	; 0x28aa <moveWall+0x22a>
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	0d c0       	rjmp	.+26     	; 0x28c4 <moveWall+0x244>
		ltIR = IR_WALL_L_THRESH-18;
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	a0 e4       	ldi	r26, 0x40	; 64
    28b0:	b0 ec       	ldi	r27, 0xC0	; 192
    28b2:	80 93 14 07 	sts	0x0714, r24
    28b6:	90 93 15 07 	sts	0x0715, r25
    28ba:	a0 93 16 07 	sts	0x0716, r26
    28be:	b0 93 17 07 	sts	0x0717, r27
    28c2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    28c4:	33 20       	and	r3, r3
    28c6:	21 f1       	breq	.+72     	; 0x2910 <moveWall+0x290>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    28c8:	88 23       	and	r24, r24
    28ca:	29 f0       	breq	.+10     	; 0x28d6 <moveWall+0x256>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    28cc:	60 e0       	ldi	r22, 0x00	; 0
    28ce:	70 e0       	ldi	r23, 0x00	; 0
    28d0:	8a e7       	ldi	r24, 0x7A	; 122
    28d2:	94 e4       	ldi	r25, 0x44	; 68
    28d4:	04 c0       	rjmp	.+8      	; 0x28de <moveWall+0x25e>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    28d6:	60 e0       	ldi	r22, 0x00	; 0
    28d8:	70 e0       	ldi	r23, 0x00	; 0
    28da:	8a e7       	ldi	r24, 0x7A	; 122
    28dc:	94 ec       	ldi	r25, 0xC4	; 196
    28de:	a8 01       	movw	r20, r16
    28e0:	97 01       	movw	r18, r14
    28e2:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    28e6:	20 91 14 07 	lds	r18, 0x0714
    28ea:	30 91 15 07 	lds	r19, 0x0715
    28ee:	40 91 16 07 	lds	r20, 0x0716
    28f2:	50 91 17 07 	lds	r21, 0x0717
    28f6:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    28fa:	9b 01       	movw	r18, r22
    28fc:	ac 01       	movw	r20, r24
    28fe:	60 91 19 07 	lds	r22, 0x0719
    2902:	70 91 1a 07 	lds	r23, 0x071A
    2906:	80 91 1b 07 	lds	r24, 0x071B
    290a:	90 91 1c 07 	lds	r25, 0x071C
    290e:	10 c0       	rjmp	.+32     	; 0x2930 <moveWall+0x2b0>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2910:	60 91 19 07 	lds	r22, 0x0719
    2914:	70 91 1a 07 	lds	r23, 0x071A
    2918:	80 91 1b 07 	lds	r24, 0x071B
    291c:	90 91 1c 07 	lds	r25, 0x071C
    2920:	20 91 14 07 	lds	r18, 0x0714
    2924:	30 91 15 07 	lds	r19, 0x0715
    2928:	40 91 16 07 	lds	r20, 0x0716
    292c:	50 91 17 07 	lds	r21, 0x0717
    2930:	0e 94 22 2e 	call	0x5c44	; 0x5c44 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2934:	90 58       	subi	r25, 0x80	; 128
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    293c:	6b 01       	movw	r12, r22
    293e:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2940:	0e 94 f3 2e 	call	0x5de6	; 0x5de6 <__fixsfsi>
    2944:	8b 01       	movw	r16, r22
    2946:	77 ff       	sbrs	r23, 7
    2948:	03 c0       	rjmp	.+6      	; 0x2950 <moveWall+0x2d0>
    294a:	10 95       	com	r17
    294c:	01 95       	neg	r16
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	05 36       	cpi	r16, 0x65	; 101
    2952:	11 05       	cpc	r17, r1
    2954:	fc f0       	brlt	.+62     	; 0x2994 <moveWall+0x314>
    2956:	c7 01       	movw	r24, r14
    2958:	b6 01       	movw	r22, r12
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	50 e0       	ldi	r21, 0x00	; 0
    2962:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <__cmpsf2>
    2966:	88 23       	and	r24, r24
    2968:	a9 f0       	breq	.+42     	; 0x2994 <moveWall+0x314>
		effort = MAX_EFFORT*(effort/abs(effort));
    296a:	b8 01       	movw	r22, r16
    296c:	88 27       	eor	r24, r24
    296e:	77 fd       	sbrc	r23, 7
    2970:	80 95       	com	r24
    2972:	98 2f       	mov	r25, r24
    2974:	0e 94 26 2f 	call	0x5e4c	; 0x5e4c <__floatsisf>
    2978:	9b 01       	movw	r18, r22
    297a:	ac 01       	movw	r20, r24
    297c:	c7 01       	movw	r24, r14
    297e:	b6 01       	movw	r22, r12
    2980:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	48 ec       	ldi	r20, 0xC8	; 200
    298a:	52 e4       	ldi	r21, 0x42	; 66
    298c:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    2990:	6b 01       	movw	r12, r22
    2992:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2994:	c7 01       	movw	r24, r14
    2996:	b6 01       	movw	r22, r12
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	48 ec       	ldi	r20, 0xC8	; 200
    299e:	52 e4       	ldi	r21, 0x42	; 66
    29a0:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    29a4:	4b 01       	movw	r8, r22
    29a6:	5c 01       	movw	r10, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    29a8:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <STEPPER_get_nSteps>
    29ac:	60 93 0c 07 	sts	0x070C, r22
    29b0:	70 93 0d 07 	sts	0x070D, r23
    29b4:	80 93 0e 07 	sts	0x070E, r24
    29b8:	90 93 0f 07 	sts	0x070F, r25
	
	if(curr_step.left != 0){
    29bc:	cb 01       	movw	r24, r22
    29be:	61 15       	cp	r22, r1
    29c0:	71 05       	cpc	r23, r1
    29c2:	e1 f0       	breq	.+56     	; 0x29fc <moveWall+0x37c>
		odometryStepL += WALL_STEP - (curr_step.left);
    29c4:	64 e1       	ldi	r22, 0x14	; 20
    29c6:	70 e0       	ldi	r23, 0x00	; 0
    29c8:	68 1b       	sub	r22, r24
    29ca:	79 0b       	sbc	r23, r25
    29cc:	80 e0       	ldi	r24, 0x00	; 0
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
    29d4:	9b 01       	movw	r18, r22
    29d6:	ac 01       	movw	r20, r24
    29d8:	60 91 a5 07 	lds	r22, 0x07A5
    29dc:	70 91 a6 07 	lds	r23, 0x07A6
    29e0:	80 91 a7 07 	lds	r24, 0x07A7
    29e4:	90 91 a8 07 	lds	r25, 0x07A8
    29e8:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    29ec:	60 93 a5 07 	sts	0x07A5, r22
    29f0:	70 93 a6 07 	sts	0x07A6, r23
    29f4:	80 93 a7 07 	sts	0x07A7, r24
    29f8:	90 93 a8 07 	sts	0x07A8, r25
	}
	if(curr_step.right != 0){
    29fc:	80 91 0e 07 	lds	r24, 0x070E
    2a00:	90 91 0f 07 	lds	r25, 0x070F
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	e1 f0       	breq	.+56     	; 0x2a40 <moveWall+0x3c0>
		odometryStepR += WALL_STEP - (curr_step.right);
    2a08:	64 e1       	ldi	r22, 0x14	; 20
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	68 1b       	sub	r22, r24
    2a0e:	79 0b       	sbc	r23, r25
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
    2a18:	9b 01       	movw	r18, r22
    2a1a:	ac 01       	movw	r20, r24
    2a1c:	60 91 f5 04 	lds	r22, 0x04F5
    2a20:	70 91 f6 04 	lds	r23, 0x04F6
    2a24:	80 91 f7 04 	lds	r24, 0x04F7
    2a28:	90 91 f8 04 	lds	r25, 0x04F8
    2a2c:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    2a30:	60 93 f5 04 	sts	0x04F5, r22
    2a34:	70 93 f6 04 	sts	0x04F6, r23
    2a38:	80 93 f7 04 	sts	0x04F7, r24
    2a3c:	90 93 f8 04 	sts	0x04F8, r25
	}
	
	STEPPER_set_steps(STEPPER_BOTH,0);
    2a40:	82 e0       	ldi	r24, 0x02	; 2
    2a42:	60 e0       	ldi	r22, 0x00	; 0
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <STEPPER_set_steps>
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    2a4a:	8d b7       	in	r24, 0x3d	; 61
    2a4c:	9e b7       	in	r25, 0x3e	; 62
    2a4e:	09 97       	sbiw	r24, 0x09	; 9
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	9e bf       	out	0x3e, r25	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	8d bf       	out	0x3d, r24	; 61
    2a5a:	0d b7       	in	r16, 0x3d	; 61
    2a5c:	1e b7       	in	r17, 0x3e	; 62
    2a5e:	0f 5f       	subi	r16, 0xFF	; 255
    2a60:	1f 4f       	sbci	r17, 0xFF	; 255
    2a62:	c5 01       	movw	r24, r10
    2a64:	b4 01       	movw	r22, r8
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	48 ec       	ldi	r20, 0xC8	; 200
    2a6c:	52 e4       	ldi	r21, 0x42	; 66
    2a6e:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	48 ec       	ldi	r20, 0xC8	; 200
    2a78:	52 e4       	ldi	r21, 0x42	; 66
    2a7a:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    2a7e:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    2a82:	6b 01       	movw	r12, r22
    2a84:	7c 01       	movw	r14, r24
    2a86:	84 e1       	ldi	r24, 0x14	; 20
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	d8 01       	movw	r26, r16
    2a8c:	8d 93       	st	X+, r24
    2a8e:	9c 93       	st	X, r25
    2a90:	c5 01       	movw	r24, r10
    2a92:	b4 01       	movw	r22, r8
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	48 ec       	ldi	r20, 0xC8	; 200
    2a9a:	52 ec       	ldi	r21, 0xC2	; 194
    2a9c:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	48 ec       	ldi	r20, 0xC8	; 200
    2aa6:	52 e4       	ldi	r21, 0x42	; 66
    2aa8:	0e 94 23 2e 	call	0x5c46	; 0x5c46 <__addsf3>
    2aac:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <__fixunssfsi>
    2ab0:	f8 01       	movw	r30, r16
    2ab2:	73 83       	std	Z+3, r23	; 0x03
    2ab4:	62 83       	std	Z+2, r22	; 0x02
    2ab6:	82 ec       	ldi	r24, 0xC2	; 194
    2ab8:	91 e0       	ldi	r25, 0x01	; 1
    2aba:	95 83       	std	Z+5, r25	; 0x05
    2abc:	84 83       	std	Z+4, r24	; 0x04
    2abe:	16 82       	std	Z+6, r1	; 0x06
    2ac0:	10 86       	std	Z+8, r1	; 0x08
    2ac2:	17 82       	std	Z+7, r1	; 0x07
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	62 e0       	ldi	r22, 0x02	; 2
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	24 e1       	ldi	r18, 0x14	; 20
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	86 01       	movw	r16, r12
    2ad0:	52 ec       	ldi	r21, 0xC2	; 194
    2ad2:	e5 2e       	mov	r14, r21
    2ad4:	51 e0       	ldi	r21, 0x01	; 1
    2ad6:	f5 2e       	mov	r15, r21
    2ad8:	cc 24       	eor	r12, r12
    2ada:	aa 24       	eor	r10, r10
    2adc:	bb 24       	eor	r11, r11
    2ade:	88 24       	eor	r8, r8
    2ae0:	83 94       	inc	r8
    2ae2:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <STEPPER_move>
    2ae6:	8d b7       	in	r24, 0x3d	; 61
    2ae8:	9e b7       	in	r25, 0x3e	; 62
    2aea:	09 96       	adiw	r24, 0x09	; 9
    2aec:	0f b6       	in	r0, 0x3f	; 63
    2aee:	f8 94       	cli
    2af0:	9e bf       	out	0x3e, r25	; 62
    2af2:	0f be       	out	0x3f, r0	; 63
    2af4:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2af6:	82 2d       	mov	r24, r2
    2af8:	1f 91       	pop	r17
    2afa:	0f 91       	pop	r16
    2afc:	ff 90       	pop	r15
    2afe:	ef 90       	pop	r14
    2b00:	df 90       	pop	r13
    2b02:	cf 90       	pop	r12
    2b04:	bf 90       	pop	r11
    2b06:	af 90       	pop	r10
    2b08:	9f 90       	pop	r9
    2b0a:	8f 90       	pop	r8
    2b0c:	7f 90       	pop	r7
    2b0e:	6f 90       	pop	r6
    2b10:	5f 90       	pop	r5
    2b12:	4f 90       	pop	r4
    2b14:	3f 90       	pop	r3
    2b16:	2f 90       	pop	r2
    2b18:	08 95       	ret

00002b1a <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    2b22:	08 2f       	mov	r16, r24
    2b24:	06 95       	lsr	r16
    2b26:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    2b28:	e3 e0       	ldi	r30, 0x03	; 3
    2b2a:	fe 2e       	mov	r15, r30
    2b2c:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(curMove){
    2b2e:	62 30       	cpi	r22, 0x02	; 2
    2b30:	31 f0       	breq	.+12     	; 0x2b3e <shiftMap+0x24>
    2b32:	63 30       	cpi	r22, 0x03	; 3
    2b34:	a9 f0       	breq	.+42     	; 0x2b60 <shiftMap+0x46>
    2b36:	61 30       	cpi	r22, 0x01	; 1
    2b38:	b1 f4       	brne	.+44     	; 0x2b66 <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2b3a:	11 50       	subi	r17, 0x01	; 1
    2b3c:	12 c0       	rjmp	.+36     	; 0x2b62 <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2b3e:	41 30       	cpi	r20, 0x01	; 1
    2b40:	49 f0       	breq	.+18     	; 0x2b54 <shiftMap+0x3a>
    2b42:	41 30       	cpi	r20, 0x01	; 1
    2b44:	28 f0       	brcs	.+10     	; 0x2b50 <shiftMap+0x36>
    2b46:	42 30       	cpi	r20, 0x02	; 2
    2b48:	39 f0       	breq	.+14     	; 0x2b58 <shiftMap+0x3e>
    2b4a:	43 30       	cpi	r20, 0x03	; 3
    2b4c:	b9 f4       	brne	.+46     	; 0x2b7c <shiftMap+0x62>
    2b4e:	06 c0       	rjmp	.+12     	; 0x2b5c <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    2b50:	01 50       	subi	r16, 0x01	; 1
    2b52:	14 c0       	rjmp	.+40     	; 0x2b7c <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    2b54:	f3 94       	inc	r15
    2b56:	12 c0       	rjmp	.+36     	; 0x2b7c <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    2b58:	0f 5f       	subi	r16, 0xFF	; 255
    2b5a:	10 c0       	rjmp	.+32     	; 0x2b7c <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    2b5c:	fa 94       	dec	r15
    2b5e:	0e c0       	rjmp	.+28     	; 0x2b7c <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2b60:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    2b62:	13 70       	andi	r17, 0x03	; 3
    2b64:	0b c0       	rjmp	.+22     	; 0x2b7c <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <shiftMap+0x4e>
    2b68:	84 e4       	ldi	r24, 0x44	; 68
    2b6a:	91 e0       	ldi	r25, 0x01	; 1
    2b6c:	ed b7       	in	r30, 0x3d	; 61
    2b6e:	fe b7       	in	r31, 0x3e	; 62
    2b70:	92 83       	std	Z+2, r25	; 0x02
    2b72:	81 83       	std	Z+1, r24	; 0x01
    2b74:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
    2b78:	0f 90       	pop	r0
    2b7a:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    2b7c:	10 93 0e 06 	sts	0x060E, r17
    2b80:	00 0f       	add	r16, r16
    2b82:	00 0f       	add	r16, r16
	return currentCell;
}
    2b84:	80 2f       	mov	r24, r16
    2b86:	8f 0d       	add	r24, r15
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	ff 90       	pop	r15
    2b8e:	08 95       	ret

00002b90 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2b90:	8f 92       	push	r8
    2b92:	af 92       	push	r10
    2b94:	bf 92       	push	r11
    2b96:	cf 92       	push	r12
    2b98:	df 92       	push	r13
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
	switch(currentMove){
    2ba2:	80 91 a9 07 	lds	r24, 0x07A9
    2ba6:	82 30       	cpi	r24, 0x02	; 2
    2ba8:	69 f0       	breq	.+26     	; 0x2bc4 <moveMap+0x34>
    2baa:	83 30       	cpi	r24, 0x03	; 3
    2bac:	a1 f0       	breq	.+40     	; 0x2bd6 <moveMap+0x46>
    2bae:	81 30       	cpi	r24, 0x01	; 1
    2bb0:	51 f5       	brne	.+84     	; 0x2c06 <moveMap+0x76>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	70 e0       	ldi	r23, 0x00	; 0
    2bb6:	80 e0       	ldi	r24, 0x00	; 0
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	4c e8       	ldi	r20, 0x8C	; 140
    2bc0:	51 ec       	ldi	r21, 0xC1	; 193
    2bc2:	11 c0       	rjmp	.+34     	; 0x2be6 <moveMap+0x56>
			// while(!odometryFlag){
				// moveWall();
				// checkOdometry(0);
			// }
			
			move_arc_stwt(NO_TURN, 45, 10, 10, 0);
    2bc4:	60 e0       	ldi	r22, 0x00	; 0
    2bc6:	70 e0       	ldi	r23, 0x00	; 0
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	9f e4       	ldi	r25, 0x4F	; 79
    2bcc:	20 e0       	ldi	r18, 0x00	; 0
    2bce:	30 e0       	ldi	r19, 0x00	; 0
    2bd0:	44 e3       	ldi	r20, 0x34	; 52
    2bd2:	52 e4       	ldi	r21, 0x42	; 66
    2bd4:	08 c0       	rjmp	.+16     	; 0x2be6 <moveMap+0x56>
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2bd6:	60 e0       	ldi	r22, 0x00	; 0
    2bd8:	70 e0       	ldi	r23, 0x00	; 0
    2bda:	80 e0       	ldi	r24, 0x00	; 0
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4c e8       	ldi	r20, 0x8C	; 140
    2be4:	51 e4       	ldi	r21, 0x41	; 65
    2be6:	0f 2e       	mov	r0, r31
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	ef 2e       	mov	r14, r31
    2bec:	f0 e0       	ldi	r31, 0x00	; 0
    2bee:	ff 2e       	mov	r15, r31
    2bf0:	f0 e2       	ldi	r31, 0x20	; 32
    2bf2:	0f 2f       	mov	r16, r31
    2bf4:	f1 e4       	ldi	r31, 0x41	; 65
    2bf6:	1f 2f       	mov	r17, r31
    2bf8:	f0 2d       	mov	r31, r0
    2bfa:	57 01       	movw	r10, r14
    2bfc:	68 01       	movw	r12, r16
    2bfe:	88 24       	eor	r8, r8
    2c00:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2c04:	0b c0       	rjmp	.+22     	; 0x2c1c <moveMap+0x8c>
			break;
		default:
			LCD_printf("Whatz2?!");
    2c06:	00 d0       	rcall	.+0      	; 0x2c08 <moveMap+0x78>
    2c08:	8d e4       	ldi	r24, 0x4D	; 77
    2c0a:	91 e0       	ldi	r25, 0x01	; 1
    2c0c:	ed b7       	in	r30, 0x3d	; 61
    2c0e:	fe b7       	in	r31, 0x3e	; 62
    2c10:	92 83       	std	Z+2, r25	; 0x02
    2c12:	81 83       	std	Z+1, r24	; 0x01
    2c14:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
			break;
	}
}
    2c1c:	1f 91       	pop	r17
    2c1e:	0f 91       	pop	r16
    2c20:	ff 90       	pop	r15
    2c22:	ef 90       	pop	r14
    2c24:	df 90       	pop	r13
    2c26:	cf 90       	pop	r12
    2c28:	bf 90       	pop	r11
    2c2a:	af 90       	pop	r10
    2c2c:	8f 90       	pop	r8
    2c2e:	08 95       	ret

00002c30 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    2c30:	80 91 79 05 	lds	r24, 0x0579
    2c34:	80 fd       	sbrc	r24, 0
    2c36:	02 c0       	rjmp	.+4      	; 0x2c3c <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	05 c0       	rjmp	.+10     	; 0x2c46 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    2c3c:	83 fd       	sbrc	r24, 3
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    2c40:	82 e0       	ldi	r24, 0x02	; 2
    2c42:	01 c0       	rjmp	.+2      	; 0x2c46 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    2c44:	83 e0       	ldi	r24, 0x03	; 3
    2c46:	80 93 a9 07 	sts	0x07A9, r24
	}
	
	switch(oldMove){
    2c4a:	80 91 aa 07 	lds	r24, 0x07AA
    2c4e:	81 30       	cpi	r24, 0x01	; 1
    2c50:	29 f0       	breq	.+10     	; 0x2c5c <planMap+0x2c>
    2c52:	81 30       	cpi	r24, 0x01	; 1
    2c54:	38 f0       	brcs	.+14     	; 0x2c64 <planMap+0x34>
    2c56:	84 30       	cpi	r24, 0x04	; 4
    2c58:	28 f4       	brcc	.+10     	; 0x2c64 <planMap+0x34>
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2c5c:	82 e0       	ldi	r24, 0x02	; 2
    2c5e:	80 93 a9 07 	sts	0x07A9, r24
    2c62:	0b c0       	rjmp	.+22     	; 0x2c7a <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <planMap+0x36>
    2c66:	86 e5       	ldi	r24, 0x56	; 86
    2c68:	91 e0       	ldi	r25, 0x01	; 1
    2c6a:	ed b7       	in	r30, 0x3d	; 61
    2c6c:	fe b7       	in	r31, 0x3e	; 62
    2c6e:	92 83       	std	Z+2, r25	; 0x02
    2c70:	81 83       	std	Z+1, r24	; 0x01
    2c72:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    2c7a:	80 91 a9 07 	lds	r24, 0x07A9
    2c7e:	80 93 aa 07 	sts	0x07AA, r24
}
    2c82:	08 95       	ret

00002c84 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    2c84:	80 91 67 04 	lds	r24, 0x0467
    2c88:	85 30       	cpi	r24, 0x05	; 5
    2c8a:	80 f0       	brcs	.+32     	; 0x2cac <planGateway+0x28>
    2c8c:	e8 e5       	ldi	r30, 0x58	; 88
    2c8e:	f4 e0       	ldi	r31, 0x04	; 4
		for(i = 0; i<=(BRANCH_MAX-1); i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    2c90:	81 81       	ldd	r24, Z+1	; 0x01
    2c92:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2c94:	86 81       	ldd	r24, Z+6	; 0x06
    2c96:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2c98:	83 85       	ldd	r24, Z+11	; 0x0b
    2c9a:	82 87       	std	Z+10, r24	; 0x0a
    2c9c:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<=(BRANCH_MAX-1); i++){
    2c9e:	84 e0       	ldi	r24, 0x04	; 4
    2ca0:	ed 35       	cpi	r30, 0x5D	; 93
    2ca2:	f8 07       	cpc	r31, r24
    2ca4:	a9 f7       	brne	.-22     	; 0x2c90 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2ca6:	84 e0       	ldi	r24, 0x04	; 4
    2ca8:	80 93 67 04 	sts	0x0467, r24
	}
	
	// Decide what the current move should be
	planMap();
    2cac:	0e 94 18 16 	call	0x2c30	; 0x2c30 <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    2cb0:	e0 91 67 04 	lds	r30, 0x0467
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	e8 5a       	subi	r30, 0xA8	; 168
    2cb8:	fb 4f       	sbci	r31, 0xFB	; 251
    2cba:	80 91 79 05 	lds	r24, 0x0579
    2cbe:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2cc0:	90 91 a9 07 	lds	r25, 0x07A9
    2cc4:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2cc6:	80 91 0e 06 	lds	r24, 0x060E
    2cca:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2ccc:	91 30       	cpi	r25, 0x01	; 1
    2cce:	19 f0       	breq	.+6      	; 0x2cd6 <planGateway+0x52>
    2cd0:	93 30       	cpi	r25, 0x03	; 3
    2cd2:	41 f4       	brne	.+16     	; 0x2ce4 <planGateway+0x60>
    2cd4:	02 c0       	rjmp	.+4      	; 0x2cda <planGateway+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2cd6:	81 50       	subi	r24, 0x01	; 1
    2cd8:	01 c0       	rjmp	.+2      	; 0x2cdc <planGateway+0x58>
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2cda:	8f 5f       	subi	r24, 0xFF	; 255
    2cdc:	83 70       	andi	r24, 0x03	; 3
    2cde:	80 93 0e 06 	sts	0x060E, r24
    2ce2:	0b c0       	rjmp	.+22     	; 0x2cfa <planGateway+0x76>
			break;
		default:
			LCD_printf("Whatz2?!");
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <planGateway+0x62>
    2ce6:	8d e4       	ldi	r24, 0x4D	; 77
    2ce8:	91 e0       	ldi	r25, 0x01	; 1
    2cea:	ed b7       	in	r30, 0x3d	; 61
    2cec:	fe b7       	in	r31, 0x3e	; 62
    2cee:	92 83       	std	Z+2, r25	; 0x02
    2cf0:	81 83       	std	Z+1, r24	; 0x01
    2cf2:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2cfa:	80 91 67 04 	lds	r24, 0x0467
    2cfe:	8f 5f       	subi	r24, 0xFF	; 255
    2d00:	80 93 67 04 	sts	0x0467, r24
}
    2d04:	08 95       	ret

00002d06 <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    2d06:	90 91 0e 06 	lds	r25, 0x060E
    2d0a:	91 30       	cpi	r25, 0x01	; 1
    2d0c:	91 f0       	breq	.+36     	; 0x2d32 <planMetric+0x2c>
    2d0e:	91 30       	cpi	r25, 0x01	; 1
    2d10:	28 f0       	brcs	.+10     	; 0x2d1c <planMetric+0x16>
    2d12:	92 30       	cpi	r25, 0x02	; 2
    2d14:	d9 f0       	breq	.+54     	; 0x2d4c <planMetric+0x46>
    2d16:	93 30       	cpi	r25, 0x03	; 3
    2d18:	c1 f5       	brne	.+112    	; 0x2d8a <planMetric+0x84>
    2d1a:	23 c0       	rjmp	.+70     	; 0x2d62 <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    2d1c:	80 91 0f 06 	lds	r24, 0x060F
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	91 f0       	breq	.+36     	; 0x2d48 <planMetric+0x42>
    2d24:	81 30       	cpi	r24, 0x01	; 1
    2d26:	68 f1       	brcs	.+90     	; 0x2d82 <planMetric+0x7c>
    2d28:	82 30       	cpi	r24, 0x02	; 2
    2d2a:	49 f1       	breq	.+82     	; 0x2d7e <planMetric+0x78>
    2d2c:	83 30       	cpi	r24, 0x03	; 3
    2d2e:	69 f5       	brne	.+90     	; 0x2d8a <planMetric+0x84>
    2d30:	26 c0       	rjmp	.+76     	; 0x2d7e <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    2d32:	80 91 0f 06 	lds	r24, 0x060F
    2d36:	81 30       	cpi	r24, 0x01	; 1
    2d38:	21 f1       	breq	.+72     	; 0x2d82 <planMetric+0x7c>
    2d3a:	81 30       	cpi	r24, 0x01	; 1
    2d3c:	e8 f0       	brcs	.+58     	; 0x2d78 <planMetric+0x72>
    2d3e:	82 30       	cpi	r24, 0x02	; 2
    2d40:	19 f0       	breq	.+6      	; 0x2d48 <planMetric+0x42>
    2d42:	83 30       	cpi	r24, 0x03	; 3
    2d44:	11 f5       	brne	.+68     	; 0x2d8a <planMetric+0x84>
    2d46:	18 c0       	rjmp	.+48     	; 0x2d78 <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    2d48:	83 e0       	ldi	r24, 0x03	; 3
    2d4a:	1c c0       	rjmp	.+56     	; 0x2d84 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    2d4c:	80 91 0f 06 	lds	r24, 0x060F
    2d50:	81 30       	cpi	r24, 0x01	; 1
    2d52:	c1 f0       	breq	.+48     	; 0x2d84 <planMetric+0x7e>
    2d54:	81 30       	cpi	r24, 0x01	; 1
    2d56:	98 f0       	brcs	.+38     	; 0x2d7e <planMetric+0x78>
    2d58:	82 30       	cpi	r24, 0x02	; 2
    2d5a:	a1 f0       	breq	.+40     	; 0x2d84 <planMetric+0x7e>
    2d5c:	83 30       	cpi	r24, 0x03	; 3
    2d5e:	a9 f4       	brne	.+42     	; 0x2d8a <planMetric+0x84>
    2d60:	11 c0       	rjmp	.+34     	; 0x2d84 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    2d62:	80 91 0f 06 	lds	r24, 0x060F
    2d66:	81 30       	cpi	r24, 0x01	; 1
    2d68:	69 f0       	breq	.+26     	; 0x2d84 <planMetric+0x7e>
    2d6a:	81 30       	cpi	r24, 0x01	; 1
    2d6c:	28 f0       	brcs	.+10     	; 0x2d78 <planMetric+0x72>
    2d6e:	82 30       	cpi	r24, 0x02	; 2
    2d70:	31 f0       	breq	.+12     	; 0x2d7e <planMetric+0x78>
    2d72:	83 30       	cpi	r24, 0x03	; 3
    2d74:	51 f4       	brne	.+20     	; 0x2d8a <planMetric+0x84>
    2d76:	05 c0       	rjmp	.+10     	; 0x2d82 <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    2d78:	90 93 a9 07 	sts	0x07A9, r25
    2d7c:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	01 c0       	rjmp	.+2      	; 0x2d84 <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    2d82:	82 e0       	ldi	r24, 0x02	; 2
    2d84:	80 93 a9 07 	sts	0x07A9, r24
    2d88:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    2d8a:	00 d0       	rcall	.+0      	; 0x2d8c <planMetric+0x86>
    2d8c:	8f e5       	ldi	r24, 0x5F	; 95
    2d8e:	91 e0       	ldi	r25, 0x01	; 1
    2d90:	ed b7       	in	r30, 0x3d	; 61
    2d92:	fe b7       	in	r31, 0x3e	; 62
    2d94:	92 83       	std	Z+2, r25	; 0x02
    2d96:	81 83       	std	Z+1, r24	; 0x01
    2d98:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	08 95       	ret

00002da2 <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    2da2:	8f 92       	push	r8
    2da4:	af 92       	push	r10
    2da6:	bf 92       	push	r11
    2da8:	cf 92       	push	r12
    2daa:	df 92       	push	r13
    2dac:	ef 92       	push	r14
    2dae:	ff 92       	push	r15
    2db0:	0f 93       	push	r16
    2db2:	1f 93       	push	r17
	LCD_clear();
    2db4:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    2db8:	e0 91 7a 05 	lds	r30, 0x057A
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	e3 50       	subi	r30, 0x03	; 3
    2dc0:	fa 4f       	sbci	r31, 0xFA	; 250
    2dc2:	e0 81       	ld	r30, Z
    2dc4:	e0 93 a9 07 	sts	0x07A9, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    2dc8:	80 e0       	ldi	r24, 0x00	; 0
    2dca:	e1 30       	cpi	r30, 0x01	; 1
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <moveWorld+0x2e>
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	e3 30       	cpi	r30, 0x03	; 3
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <moveWorld+0x36>
    2dd6:	91 e0       	ldi	r25, 0x01	; 1
    2dd8:	89 2b       	or	r24, r25
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	50 e0       	ldi	r21, 0x00	; 0
    2de2:	80 91 aa 07 	lds	r24, 0x07AA
    2de6:	82 30       	cpi	r24, 0x02	; 2
    2de8:	11 f4       	brne	.+4      	; 0x2dee <moveWorld+0x4c>
    2dea:	41 e0       	ldi	r20, 0x01	; 1
    2dec:	50 e0       	ldi	r21, 0x00	; 0
    2dee:	24 23       	and	r18, r20
    2df0:	35 23       	and	r19, r21
    2df2:	23 2b       	or	r18, r19
    2df4:	b9 f0       	breq	.+46     	; 0x2e24 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2df6:	60 e0       	ldi	r22, 0x00	; 0
    2df8:	70 e0       	ldi	r23, 0x00	; 0
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	9f e4       	ldi	r25, 0x4F	; 79
    2dfe:	28 e4       	ldi	r18, 0x48	; 72
    2e00:	31 ee       	ldi	r19, 0xE1	; 225
    2e02:	46 eb       	ldi	r20, 0xB6	; 182
    2e04:	51 e4       	ldi	r21, 0x41	; 65
    2e06:	0f 2e       	mov	r0, r31
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	ef 2e       	mov	r14, r31
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	ff 2e       	mov	r15, r31
    2e10:	f0 e2       	ldi	r31, 0x20	; 32
    2e12:	0f 2f       	mov	r16, r31
    2e14:	f1 e4       	ldi	r31, 0x41	; 65
    2e16:	1f 2f       	mov	r17, r31
    2e18:	f0 2d       	mov	r31, r0
    2e1a:	57 01       	movw	r10, r14
    2e1c:	68 01       	movw	r12, r16
    2e1e:	88 24       	eor	r8, r8
    2e20:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    2e24:	20 91 aa 07 	lds	r18, 0x07AA
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	21 30       	cpi	r18, 0x01	; 1
    2e2c:	09 f4       	brne	.+2      	; 0x2e30 <moveWorld+0x8e>
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	23 30       	cpi	r18, 0x03	; 3
    2e34:	09 f4       	brne	.+2      	; 0x2e38 <moveWorld+0x96>
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	89 2b       	or	r24, r25
    2e3a:	28 2f       	mov	r18, r24
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	50 e0       	ldi	r21, 0x00	; 0
    2e42:	80 91 a9 07 	lds	r24, 0x07A9
    2e46:	82 30       	cpi	r24, 0x02	; 2
    2e48:	11 f4       	brne	.+4      	; 0x2e4e <moveWorld+0xac>
    2e4a:	41 e0       	ldi	r20, 0x01	; 1
    2e4c:	50 e0       	ldi	r21, 0x00	; 0
    2e4e:	24 23       	and	r18, r20
    2e50:	35 23       	and	r19, r21
    2e52:	23 2b       	or	r18, r19
    2e54:	b9 f0       	breq	.+46     	; 0x2e84 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    2e56:	60 e0       	ldi	r22, 0x00	; 0
    2e58:	70 e0       	ldi	r23, 0x00	; 0
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	9f e4       	ldi	r25, 0x4F	; 79
    2e5e:	25 e3       	ldi	r18, 0x35	; 53
    2e60:	3f ee       	ldi	r19, 0xEF	; 239
    2e62:	40 ea       	ldi	r20, 0xA0	; 160
    2e64:	51 e4       	ldi	r21, 0x41	; 65
    2e66:	0f 2e       	mov	r0, r31
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	ef 2e       	mov	r14, r31
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	ff 2e       	mov	r15, r31
    2e70:	f0 e2       	ldi	r31, 0x20	; 32
    2e72:	0f 2f       	mov	r16, r31
    2e74:	f1 e4       	ldi	r31, 0x41	; 65
    2e76:	1f 2f       	mov	r17, r31
    2e78:	f0 2d       	mov	r31, r0
    2e7a:	57 01       	movw	r10, r14
    2e7c:	68 01       	movw	r12, r16
    2e7e:	88 24       	eor	r8, r8
    2e80:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	switch(currentMove){
    2e84:	80 91 a9 07 	lds	r24, 0x07A9
    2e88:	82 30       	cpi	r24, 0x02	; 2
    2e8a:	c1 f1       	breq	.+112    	; 0x2efc <moveWorld+0x15a>
    2e8c:	83 30       	cpi	r24, 0x03	; 3
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <moveWorld+0xf0>
    2e90:	61 c0       	rjmp	.+194    	; 0x2f54 <moveWorld+0x1b2>
    2e92:	81 30       	cpi	r24, 0x01	; 1
    2e94:	09 f0       	breq	.+2      	; 0x2e98 <moveWorld+0xf6>
    2e96:	9f c0       	rjmp	.+318    	; 0x2fd6 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2e98:	8d b7       	in	r24, 0x3d	; 61
    2e9a:	9e b7       	in	r25, 0x3e	; 62
    2e9c:	08 97       	sbiw	r24, 0x08	; 8
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	9e bf       	out	0x3e, r25	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	8d bf       	out	0x3d, r24	; 61
    2ea8:	ed b7       	in	r30, 0x3d	; 61
    2eaa:	fe b7       	in	r31, 0x3e	; 62
    2eac:	31 96       	adiw	r30, 0x01	; 1
    2eae:	88 e6       	ldi	r24, 0x68	; 104
    2eb0:	91 e0       	ldi	r25, 0x01	; 1
    2eb2:	ad b7       	in	r26, 0x3d	; 61
    2eb4:	be b7       	in	r27, 0x3e	; 62
    2eb6:	12 96       	adiw	r26, 0x02	; 2
    2eb8:	9c 93       	st	X, r25
    2eba:	8e 93       	st	-X, r24
    2ebc:	11 97       	sbiw	r26, 0x01	; 1
    2ebe:	80 91 7a 05 	lds	r24, 0x057A
    2ec2:	82 83       	std	Z+2, r24	; 0x02
    2ec4:	13 82       	std	Z+3, r1	; 0x03
    2ec6:	80 91 79 05 	lds	r24, 0x0579
    2eca:	84 83       	std	Z+4, r24	; 0x04
    2ecc:	15 82       	std	Z+5, r1	; 0x05
    2ece:	80 91 80 05 	lds	r24, 0x0580
    2ed2:	86 83       	std	Z+6, r24	; 0x06
    2ed4:	17 82       	std	Z+7, r1	; 0x07
    2ed6:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2eda:	ed b7       	in	r30, 0x3d	; 61
    2edc:	fe b7       	in	r31, 0x3e	; 62
    2ede:	38 96       	adiw	r30, 0x08	; 8
    2ee0:	0f b6       	in	r0, 0x3f	; 63
    2ee2:	f8 94       	cli
    2ee4:	fe bf       	out	0x3e, r31	; 62
    2ee6:	0f be       	out	0x3f, r0	; 63
    2ee8:	ed bf       	out	0x3d, r30	; 61
    2eea:	60 e0       	ldi	r22, 0x00	; 0
    2eec:	70 e0       	ldi	r23, 0x00	; 0
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	4c e8       	ldi	r20, 0x8C	; 140
    2ef8:	51 ec       	ldi	r21, 0xC1	; 193
    2efa:	5d c0       	rjmp	.+186    	; 0x2fb6 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2efc:	8d b7       	in	r24, 0x3d	; 61
    2efe:	9e b7       	in	r25, 0x3e	; 62
    2f00:	08 97       	sbiw	r24, 0x08	; 8
    2f02:	0f b6       	in	r0, 0x3f	; 63
    2f04:	f8 94       	cli
    2f06:	9e bf       	out	0x3e, r25	; 62
    2f08:	0f be       	out	0x3f, r0	; 63
    2f0a:	8d bf       	out	0x3d, r24	; 61
    2f0c:	ed b7       	in	r30, 0x3d	; 61
    2f0e:	fe b7       	in	r31, 0x3e	; 62
    2f10:	31 96       	adiw	r30, 0x01	; 1
    2f12:	83 e9       	ldi	r24, 0x93	; 147
    2f14:	91 e0       	ldi	r25, 0x01	; 1
    2f16:	ad b7       	in	r26, 0x3d	; 61
    2f18:	be b7       	in	r27, 0x3e	; 62
    2f1a:	12 96       	adiw	r26, 0x02	; 2
    2f1c:	9c 93       	st	X, r25
    2f1e:	8e 93       	st	-X, r24
    2f20:	11 97       	sbiw	r26, 0x01	; 1
    2f22:	80 91 7a 05 	lds	r24, 0x057A
    2f26:	82 83       	std	Z+2, r24	; 0x02
    2f28:	13 82       	std	Z+3, r1	; 0x03
    2f2a:	80 91 79 05 	lds	r24, 0x0579
    2f2e:	84 83       	std	Z+4, r24	; 0x04
    2f30:	15 82       	std	Z+5, r1	; 0x05
    2f32:	80 91 80 05 	lds	r24, 0x0580
    2f36:	86 83       	std	Z+6, r24	; 0x06
    2f38:	17 82       	std	Z+7, r1	; 0x07
    2f3a:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWallOld();
    2f3e:	ed b7       	in	r30, 0x3d	; 61
    2f40:	fe b7       	in	r31, 0x3e	; 62
    2f42:	38 96       	adiw	r30, 0x08	; 8
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	fe bf       	out	0x3e, r31	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	ed bf       	out	0x3d, r30	; 61
    2f4e:	0e 94 bf 11 	call	0x237e	; 0x237e <moveWallOld>
    2f52:	53 c0       	rjmp	.+166    	; 0x2ffa <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2f54:	8d b7       	in	r24, 0x3d	; 61
    2f56:	9e b7       	in	r25, 0x3e	; 62
    2f58:	08 97       	sbiw	r24, 0x08	; 8
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	9e bf       	out	0x3e, r25	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	8d bf       	out	0x3d, r24	; 61
    2f64:	ed b7       	in	r30, 0x3d	; 61
    2f66:	fe b7       	in	r31, 0x3e	; 62
    2f68:	31 96       	adiw	r30, 0x01	; 1
    2f6a:	81 ec       	ldi	r24, 0xC1	; 193
    2f6c:	91 e0       	ldi	r25, 0x01	; 1
    2f6e:	ad b7       	in	r26, 0x3d	; 61
    2f70:	be b7       	in	r27, 0x3e	; 62
    2f72:	12 96       	adiw	r26, 0x02	; 2
    2f74:	9c 93       	st	X, r25
    2f76:	8e 93       	st	-X, r24
    2f78:	11 97       	sbiw	r26, 0x01	; 1
    2f7a:	80 91 7a 05 	lds	r24, 0x057A
    2f7e:	82 83       	std	Z+2, r24	; 0x02
    2f80:	13 82       	std	Z+3, r1	; 0x03
    2f82:	80 91 79 05 	lds	r24, 0x0579
    2f86:	84 83       	std	Z+4, r24	; 0x04
    2f88:	15 82       	std	Z+5, r1	; 0x05
    2f8a:	80 91 80 05 	lds	r24, 0x0580
    2f8e:	86 83       	std	Z+6, r24	; 0x06
    2f90:	17 82       	std	Z+7, r1	; 0x07
    2f92:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2f96:	ed b7       	in	r30, 0x3d	; 61
    2f98:	fe b7       	in	r31, 0x3e	; 62
    2f9a:	38 96       	adiw	r30, 0x08	; 8
    2f9c:	0f b6       	in	r0, 0x3f	; 63
    2f9e:	f8 94       	cli
    2fa0:	fe bf       	out	0x3e, r31	; 62
    2fa2:	0f be       	out	0x3f, r0	; 63
    2fa4:	ed bf       	out	0x3d, r30	; 61
    2fa6:	60 e0       	ldi	r22, 0x00	; 0
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	4c e8       	ldi	r20, 0x8C	; 140
    2fb4:	51 e4       	ldi	r21, 0x41	; 65
    2fb6:	0f 2e       	mov	r0, r31
    2fb8:	f0 e0       	ldi	r31, 0x00	; 0
    2fba:	ef 2e       	mov	r14, r31
    2fbc:	f0 e0       	ldi	r31, 0x00	; 0
    2fbe:	ff 2e       	mov	r15, r31
    2fc0:	f0 e2       	ldi	r31, 0x20	; 32
    2fc2:	0f 2f       	mov	r16, r31
    2fc4:	f1 e4       	ldi	r31, 0x41	; 65
    2fc6:	1f 2f       	mov	r17, r31
    2fc8:	f0 2d       	mov	r31, r0
    2fca:	57 01       	movw	r10, r14
    2fcc:	68 01       	movw	r12, r16
    2fce:	88 24       	eor	r8, r8
    2fd0:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2fd4:	12 c0       	rjmp	.+36     	; 0x2ffa <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    2fd6:	00 d0       	rcall	.+0      	; 0x2fd8 <moveWorld+0x236>
    2fd8:	8d ee       	ldi	r24, 0xED	; 237
    2fda:	91 e0       	ldi	r25, 0x01	; 1
    2fdc:	ad b7       	in	r26, 0x3d	; 61
    2fde:	be b7       	in	r27, 0x3e	; 62
    2fe0:	12 96       	adiw	r26, 0x02	; 2
    2fe2:	9c 93       	st	X, r25
    2fe4:	8e 93       	st	-X, r24
    2fe6:	11 97       	sbiw	r26, 0x01	; 1
    2fe8:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	60 e0       	ldi	r22, 0x00	; 0
    2ff4:	0e 94 76 20 	call	0x40ec	; 0x40ec <STEPPER_stop>
    2ff8:	ff cf       	rjmp	.-2      	; 0x2ff8 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2ffa:	80 91 a9 07 	lds	r24, 0x07A9
    2ffe:	80 93 aa 07 	sts	0x07AA, r24
	return 1;
}
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	ff 90       	pop	r15
    300a:	ef 90       	pop	r14
    300c:	df 90       	pop	r13
    300e:	cf 90       	pop	r12
    3010:	bf 90       	pop	r11
    3012:	af 90       	pop	r10
    3014:	8f 90       	pop	r8
    3016:	08 95       	ret

00003018 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    3018:	ff 92       	push	r15
    301a:	0f 93       	push	r16
    301c:	1f 93       	push	r17
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	ff 24       	eor	r15, r15
    3024:	f3 94       	inc	r15
    3026:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    3028:	c6 ef       	ldi	r28, 0xF6	; 246
    302a:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    302c:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    3030:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	21 f0       	breq	.+8      	; 0x303e <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    3036:	82 30       	cpi	r24, 0x02	; 2
    3038:	11 f0       	breq	.+4      	; 0x303e <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    303a:	83 30       	cpi	r24, 0x03	; 3
    303c:	39 f4       	brne	.+14     	; 0x304c <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    303e:	e1 2f       	mov	r30, r17
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	e3 50       	subi	r30, 0x03	; 3
    3044:	fa 4f       	sbci	r31, 0xFA	; 250
    3046:	00 83       	st	Z, r16
			i++;
    3048:	1f 5f       	subi	r17, 0xFF	; 255
    304a:	02 c0       	rjmp	.+4      	; 0x3050 <movesInput+0x38>
		}

		if (btnHolder != 0){
    304c:	88 23       	and	r24, r24
    304e:	21 f1       	breq	.+72     	; 0x3098 <movesInput+0x80>
			LCD_clear();
    3050:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    3054:	8d b7       	in	r24, 0x3d	; 61
    3056:	9e b7       	in	r25, 0x3e	; 62
    3058:	08 97       	sbiw	r24, 0x08	; 8
    305a:	0f b6       	in	r0, 0x3f	; 63
    305c:	f8 94       	cli
    305e:	9e bf       	out	0x3e, r25	; 62
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	8d bf       	out	0x3d, r24	; 61
    3064:	ed b7       	in	r30, 0x3d	; 61
    3066:	fe b7       	in	r31, 0x3e	; 62
    3068:	31 96       	adiw	r30, 0x01	; 1
    306a:	ad b7       	in	r26, 0x3d	; 61
    306c:	be b7       	in	r27, 0x3e	; 62
    306e:	12 96       	adiw	r26, 0x02	; 2
    3070:	dc 93       	st	X, r29
    3072:	ce 93       	st	-X, r28
    3074:	11 97       	sbiw	r26, 0x01	; 1
    3076:	f2 82       	std	Z+2, r15	; 0x02
    3078:	13 82       	std	Z+3, r1	; 0x03
    307a:	04 83       	std	Z+4, r16	; 0x04
    307c:	15 82       	std	Z+5, r1	; 0x05
    307e:	16 83       	std	Z+6, r17	; 0x06
    3080:	17 82       	std	Z+7, r1	; 0x07
    3082:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
    3086:	f0 2e       	mov	r15, r16
    3088:	8d b7       	in	r24, 0x3d	; 61
    308a:	9e b7       	in	r25, 0x3e	; 62
    308c:	08 96       	adiw	r24, 0x08	; 8
    308e:	0f b6       	in	r0, 0x3f	; 63
    3090:	f8 94       	cli
    3092:	9e bf       	out	0x3e, r25	; 62
    3094:	0f be       	out	0x3f, r0	; 63
    3096:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    3098:	84 ef       	ldi	r24, 0xF4	; 244
    309a:	91 e0       	ldi	r25, 0x01	; 1
    309c:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    30a0:	1b 30       	cpi	r17, 0x0B	; 11
    30a2:	20 f2       	brcs	.-120    	; 0x302c <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    30a4:	1f 5f       	subi	r17, 0xFF	; 255
    30a6:	e1 2f       	mov	r30, r17
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	e3 50       	subi	r30, 0x03	; 3
    30ac:	fa 4f       	sbci	r31, 0xFA	; 250
    30ae:	84 e0       	ldi	r24, 0x04	; 4
    30b0:	80 83       	st	Z, r24
}
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	1f 91       	pop	r17
    30b8:	0f 91       	pop	r16
    30ba:	ff 90       	pop	r15
    30bc:	08 95       	ret

000030be <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    30c6:	c7 e2       	ldi	r28, 0x27	; 39
    30c8:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    30ca:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    30ce:	81 30       	cpi	r24, 0x01	; 1
    30d0:	21 f4       	brne	.+8      	; 0x30da <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    30d2:	80 91 10 07 	lds	r24, 0x0710
    30d6:	88 0f       	add	r24, r24
    30d8:	06 c0       	rjmp	.+12     	; 0x30e6 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    30da:	82 30       	cpi	r24, 0x02	; 2
    30dc:	39 f4       	brne	.+14     	; 0x30ec <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    30de:	80 91 10 07 	lds	r24, 0x0710
    30e2:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    30e4:	8f 5f       	subi	r24, 0xFF	; 255
    30e6:	80 93 10 07 	sts	0x0710, r24
			i++;
    30ea:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    30ec:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    30f0:	00 d0       	rcall	.+0      	; 0x30f2 <worldInput+0x34>
    30f2:	00 d0       	rcall	.+0      	; 0x30f4 <worldInput+0x36>
    30f4:	00 d0       	rcall	.+0      	; 0x30f6 <worldInput+0x38>
    30f6:	ed b7       	in	r30, 0x3d	; 61
    30f8:	fe b7       	in	r31, 0x3e	; 62
    30fa:	31 96       	adiw	r30, 0x01	; 1
    30fc:	ad b7       	in	r26, 0x3d	; 61
    30fe:	be b7       	in	r27, 0x3e	; 62
    3100:	12 96       	adiw	r26, 0x02	; 2
    3102:	dc 93       	st	X, r29
    3104:	ce 93       	st	-X, r28
    3106:	11 97       	sbiw	r26, 0x01	; 1
    3108:	80 91 10 07 	lds	r24, 0x0710
    310c:	82 83       	std	Z+2, r24	; 0x02
    310e:	13 82       	std	Z+3, r1	; 0x03
    3110:	14 83       	std	Z+4, r17	; 0x04
    3112:	15 82       	std	Z+5, r1	; 0x05
    3114:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    3118:	8d b7       	in	r24, 0x3d	; 61
    311a:	9e b7       	in	r25, 0x3e	; 62
    311c:	06 96       	adiw	r24, 0x06	; 6
    311e:	0f b6       	in	r0, 0x3f	; 63
    3120:	f8 94       	cli
    3122:	9e bf       	out	0x3e, r25	; 62
    3124:	0f be       	out	0x3f, r0	; 63
    3126:	8d bf       	out	0x3d, r24	; 61
    3128:	84 ef       	ldi	r24, 0xF4	; 244
    312a:	91 e0       	ldi	r25, 0x01	; 1
    312c:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    3130:	14 30       	cpi	r17, 0x04	; 4
    3132:	58 f2       	brcs	.-106    	; 0x30ca <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    3134:	80 91 10 07 	lds	r24, 0x0710
    3138:	80 93 11 07 	sts	0x0711, r24
}
    313c:	df 91       	pop	r29
    313e:	cf 91       	pop	r28
    3140:	1f 91       	pop	r17
    3142:	08 95       	ret

00003144 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    3144:	1f 93       	push	r17
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
    314a:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    314c:	cf e4       	ldi	r28, 0x4F	; 79
    314e:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    3150:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	21 f4       	brne	.+8      	; 0x3160 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    3158:	80 91 0e 06 	lds	r24, 0x060E
    315c:	88 0f       	add	r24, r24
    315e:	06 c0       	rjmp	.+12     	; 0x316c <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    3160:	82 30       	cpi	r24, 0x02	; 2
    3162:	41 f4       	brne	.+16     	; 0x3174 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    3164:	80 91 0e 06 	lds	r24, 0x060E
    3168:	88 0f       	add	r24, r24
			currentOrientation += 1;
    316a:	8f 5f       	subi	r24, 0xFF	; 255
    316c:	80 93 0e 06 	sts	0x060E, r24
			i++;
    3170:	1f 5f       	subi	r17, 0xFF	; 255
    3172:	02 c0       	rjmp	.+4      	; 0x3178 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    3174:	88 23       	and	r24, r24
    3176:	f1 f0       	breq	.+60     	; 0x31b4 <orientationInput+0x70>
			LCD_clear();
    3178:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    317c:	00 d0       	rcall	.+0      	; 0x317e <orientationInput+0x3a>
    317e:	00 d0       	rcall	.+0      	; 0x3180 <orientationInput+0x3c>
    3180:	00 d0       	rcall	.+0      	; 0x3182 <orientationInput+0x3e>
    3182:	ed b7       	in	r30, 0x3d	; 61
    3184:	fe b7       	in	r31, 0x3e	; 62
    3186:	31 96       	adiw	r30, 0x01	; 1
    3188:	ad b7       	in	r26, 0x3d	; 61
    318a:	be b7       	in	r27, 0x3e	; 62
    318c:	12 96       	adiw	r26, 0x02	; 2
    318e:	dc 93       	st	X, r29
    3190:	ce 93       	st	-X, r28
    3192:	11 97       	sbiw	r26, 0x01	; 1
    3194:	80 91 0e 06 	lds	r24, 0x060E
    3198:	82 83       	std	Z+2, r24	; 0x02
    319a:	13 82       	std	Z+3, r1	; 0x03
    319c:	14 83       	std	Z+4, r17	; 0x04
    319e:	15 82       	std	Z+5, r1	; 0x05
    31a0:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
    31a4:	8d b7       	in	r24, 0x3d	; 61
    31a6:	9e b7       	in	r25, 0x3e	; 62
    31a8:	06 96       	adiw	r24, 0x06	; 6
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	9e bf       	out	0x3e, r25	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    31b4:	84 ef       	ldi	r24, 0xF4	; 244
    31b6:	91 e0       	ldi	r25, 0x01	; 1
    31b8:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    31bc:	12 30       	cpi	r17, 0x02	; 2
    31be:	40 f2       	brcs	.-112    	; 0x3150 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    31c0:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
	switch(currentOrientation){
    31c4:	80 91 0e 06 	lds	r24, 0x060E
    31c8:	81 30       	cpi	r24, 0x01	; 1
    31ca:	51 f0       	breq	.+20     	; 0x31e0 <orientationInput+0x9c>
    31cc:	81 30       	cpi	r24, 0x01	; 1
    31ce:	28 f0       	brcs	.+10     	; 0x31da <orientationInput+0x96>
    31d0:	82 30       	cpi	r24, 0x02	; 2
    31d2:	49 f0       	breq	.+18     	; 0x31e6 <orientationInput+0xa2>
    31d4:	83 30       	cpi	r24, 0x03	; 3
    31d6:	71 f4       	brne	.+28     	; 0x31f4 <orientationInput+0xb0>
    31d8:	09 c0       	rjmp	.+18     	; 0x31ec <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    31da:	8e e7       	ldi	r24, 0x7E	; 126
    31dc:	92 e0       	ldi	r25, 0x02	; 2
    31de:	08 c0       	rjmp	.+16     	; 0x31f0 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    31e0:	80 ea       	ldi	r24, 0xA0	; 160
    31e2:	92 e0       	ldi	r25, 0x02	; 2
    31e4:	05 c0       	rjmp	.+10     	; 0x31f0 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    31e6:	81 ec       	ldi	r24, 0xC1	; 193
    31e8:	92 e0       	ldi	r25, 0x02	; 2
    31ea:	02 c0       	rjmp	.+4      	; 0x31f0 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    31ec:	83 ee       	ldi	r24, 0xE3	; 227
    31ee:	92 e0       	ldi	r25, 0x02	; 2
    31f0:	0e 94 ed 37 	call	0x6fda	; 0x6fda <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    31f4:	80 91 0e 06 	lds	r24, 0x060E
    31f8:	80 93 0d 06 	sts	0x060D, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    31fc:	84 ef       	ldi	r24, 0xF4	; 244
    31fe:	91 e0       	ldi	r25, 0x01	; 1
    3200:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
}
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	1f 91       	pop	r17
    320a:	08 95       	ret

0000320c <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    320c:	cf 92       	push	r12
    320e:	df 92       	push	r13
    3210:	ef 92       	push	r14
    3212:	ff 92       	push	r15
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	df 93       	push	r29
    321a:	cf 93       	push	r28
    321c:	0f 92       	push	r0
    321e:	cd b7       	in	r28, 0x3d	; 61
    3220:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    3222:	80 91 10 07 	lds	r24, 0x0710
    3226:	f8 2e       	mov	r15, r24
    3228:	f6 94       	lsr	r15
    322a:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    322c:	98 2f       	mov	r25, r24
    322e:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    3230:	00 91 0e 06 	lds	r16, 0x060E
    3234:	cc 24       	eor	r12, r12
    3236:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    3238:	f6 01       	movw	r30, r12
    323a:	e3 50       	subi	r30, 0x03	; 3
    323c:	fa 4f       	sbci	r31, 0xFA	; 250
    323e:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    3240:	ef 2d       	mov	r30, r15
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	ee 0f       	add	r30, r30
    3246:	ff 1f       	adc	r31, r31
    3248:	ee 0f       	add	r30, r30
    324a:	ff 1f       	adc	r31, r31
    324c:	e9 0f       	add	r30, r25
    324e:	f1 1d       	adc	r31, r1
    3250:	e3 52       	subi	r30, 0x23	; 35
    3252:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    3254:	80 81       	ld	r24, Z
    3256:	60 2f       	mov	r22, r16
    3258:	41 e0       	ldi	r20, 0x01	; 1
    325a:	99 83       	std	Y+1, r25	; 0x01
    325c:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    3260:	f6 01       	movw	r30, r12
    3262:	eb 56       	subi	r30, 0x6B	; 107
    3264:	f8 4f       	sbci	r31, 0xF8	; 248
    3266:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    3268:	99 81       	ldd	r25, Y+1	; 0x01
    326a:	12 30       	cpi	r17, 0x02	; 2
    326c:	89 f4       	brne	.+34     	; 0x3290 <getGateways+0x84>
			switch(curOrient){
    326e:	01 30       	cpi	r16, 0x01	; 1
    3270:	49 f0       	breq	.+18     	; 0x3284 <getGateways+0x78>
    3272:	01 30       	cpi	r16, 0x01	; 1
    3274:	28 f0       	brcs	.+10     	; 0x3280 <getGateways+0x74>
    3276:	02 30       	cpi	r16, 0x02	; 2
    3278:	39 f0       	breq	.+14     	; 0x3288 <getGateways+0x7c>
    327a:	03 30       	cpi	r16, 0x03	; 3
    327c:	89 f4       	brne	.+34     	; 0x32a0 <getGateways+0x94>
    327e:	06 c0       	rjmp	.+12     	; 0x328c <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    3280:	fa 94       	dec	r15
    3282:	0e c0       	rjmp	.+28     	; 0x32a0 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    3284:	9f 5f       	subi	r25, 0xFF	; 255
    3286:	0c c0       	rjmp	.+24     	; 0x32a0 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    3288:	f3 94       	inc	r15
    328a:	0a c0       	rjmp	.+20     	; 0x32a0 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    328c:	91 50       	subi	r25, 0x01	; 1
    328e:	08 c0       	rjmp	.+16     	; 0x32a0 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    3290:	13 30       	cpi	r17, 0x03	; 3
    3292:	11 f4       	brne	.+4      	; 0x3298 <getGateways+0x8c>
			curOrient++;
    3294:	0f 5f       	subi	r16, 0xFF	; 255
    3296:	03 c0       	rjmp	.+6      	; 0x329e <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    3298:	11 30       	cpi	r17, 0x01	; 1
    329a:	11 f4       	brne	.+4      	; 0x32a0 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    329c:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    329e:	03 70       	andi	r16, 0x03	; 3
    32a0:	08 94       	sec
    32a2:	c1 1c       	adc	r12, r1
    32a4:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    32a6:	8d e0       	ldi	r24, 0x0D	; 13
    32a8:	c8 16       	cp	r12, r24
    32aa:	d1 04       	cpc	r13, r1
    32ac:	29 f6       	brne	.-118    	; 0x3238 <getGateways+0x2c>
    32ae:	cc 24       	eor	r12, r12
    32b0:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    32b2:	74 e0       	ldi	r23, 0x04	; 4
    32b4:	e7 2e       	mov	r14, r23
    32b6:	73 e0       	ldi	r23, 0x03	; 3
    32b8:	f7 2e       	mov	r15, r23
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    32ba:	f6 01       	movw	r30, r12
    32bc:	eb 56       	subi	r30, 0x6B	; 107
    32be:	f8 4f       	sbci	r31, 0xF8	; 248
    32c0:	00 81       	ld	r16, Z
		LCD_clear();
    32c2:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    32c6:	20 2f       	mov	r18, r16
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	ad b7       	in	r26, 0x3d	; 61
    32cc:	be b7       	in	r27, 0x3e	; 62
    32ce:	54 97       	sbiw	r26, 0x14	; 20
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	be bf       	out	0x3e, r27	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	ad bf       	out	0x3d, r26	; 61
    32da:	ed b7       	in	r30, 0x3d	; 61
    32dc:	fe b7       	in	r31, 0x3e	; 62
    32de:	31 96       	adiw	r30, 0x01	; 1
    32e0:	12 96       	adiw	r26, 0x02	; 2
    32e2:	fc 92       	st	X, r15
    32e4:	ee 92       	st	-X, r14
    32e6:	11 97       	sbiw	r26, 0x01	; 1
    32e8:	d3 82       	std	Z+3, r13	; 0x03
    32ea:	c2 82       	std	Z+2, r12	; 0x02
    32ec:	11 27       	eor	r17, r17
    32ee:	07 fd       	sbrc	r16, 7
    32f0:	10 95       	com	r17
    32f2:	00 27       	eor	r16, r16
    32f4:	11 0f       	add	r17, r17
    32f6:	00 1f       	adc	r16, r16
    32f8:	11 27       	eor	r17, r17
    32fa:	15 83       	std	Z+5, r17	; 0x05
    32fc:	04 83       	std	Z+4, r16	; 0x04
    32fe:	c9 01       	movw	r24, r18
    3300:	56 e0       	ldi	r21, 0x06	; 6
    3302:	96 95       	lsr	r25
    3304:	87 95       	ror	r24
    3306:	5a 95       	dec	r21
    3308:	e1 f7       	brne	.-8      	; 0x3302 <getGateways+0xf6>
    330a:	81 70       	andi	r24, 0x01	; 1
    330c:	90 70       	andi	r25, 0x00	; 0
    330e:	97 83       	std	Z+7, r25	; 0x07
    3310:	86 83       	std	Z+6, r24	; 0x06
    3312:	c9 01       	movw	r24, r18
    3314:	45 e0       	ldi	r20, 0x05	; 5
    3316:	96 95       	lsr	r25
    3318:	87 95       	ror	r24
    331a:	4a 95       	dec	r20
    331c:	e1 f7       	brne	.-8      	; 0x3316 <getGateways+0x10a>
    331e:	81 70       	andi	r24, 0x01	; 1
    3320:	90 70       	andi	r25, 0x00	; 0
    3322:	91 87       	std	Z+9, r25	; 0x09
    3324:	80 87       	std	Z+8, r24	; 0x08
    3326:	c9 01       	movw	r24, r18
    3328:	04 e0       	ldi	r16, 0x04	; 4
    332a:	96 95       	lsr	r25
    332c:	87 95       	ror	r24
    332e:	0a 95       	dec	r16
    3330:	e1 f7       	brne	.-8      	; 0x332a <getGateways+0x11e>
    3332:	81 70       	andi	r24, 0x01	; 1
    3334:	90 70       	andi	r25, 0x00	; 0
    3336:	93 87       	std	Z+11, r25	; 0x0b
    3338:	82 87       	std	Z+10, r24	; 0x0a
    333a:	c9 01       	movw	r24, r18
    333c:	13 e0       	ldi	r17, 0x03	; 3
    333e:	96 95       	lsr	r25
    3340:	87 95       	ror	r24
    3342:	1a 95       	dec	r17
    3344:	e1 f7       	brne	.-8      	; 0x333e <getGateways+0x132>
    3346:	81 70       	andi	r24, 0x01	; 1
    3348:	90 70       	andi	r25, 0x00	; 0
    334a:	95 87       	std	Z+13, r25	; 0x0d
    334c:	84 87       	std	Z+12, r24	; 0x0c
    334e:	c9 01       	movw	r24, r18
    3350:	96 95       	lsr	r25
    3352:	87 95       	ror	r24
    3354:	96 95       	lsr	r25
    3356:	87 95       	ror	r24
    3358:	81 70       	andi	r24, 0x01	; 1
    335a:	90 70       	andi	r25, 0x00	; 0
    335c:	97 87       	std	Z+15, r25	; 0x0f
    335e:	86 87       	std	Z+14, r24	; 0x0e
    3360:	c9 01       	movw	r24, r18
    3362:	96 95       	lsr	r25
    3364:	87 95       	ror	r24
    3366:	81 70       	andi	r24, 0x01	; 1
    3368:	90 70       	andi	r25, 0x00	; 0
    336a:	91 8b       	std	Z+17, r25	; 0x11
    336c:	80 8b       	std	Z+16, r24	; 0x10
    336e:	21 70       	andi	r18, 0x01	; 1
    3370:	30 70       	andi	r19, 0x00	; 0
    3372:	33 8b       	std	Z+19, r19	; 0x13
    3374:	22 8b       	std	Z+18, r18	; 0x12
    3376:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    337a:	ed b7       	in	r30, 0x3d	; 61
    337c:	fe b7       	in	r31, 0x3e	; 62
    337e:	74 96       	adiw	r30, 0x14	; 20
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	fe bf       	out	0x3e, r31	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	ed bf       	out	0x3d, r30	; 61
    338a:	88 ee       	ldi	r24, 0xE8	; 232
    338c:	93 e0       	ldi	r25, 0x03	; 3
    338e:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
    3392:	08 94       	sec
    3394:	c1 1c       	adc	r12, r1
    3396:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    3398:	fd e0       	ldi	r31, 0x0D	; 13
    339a:	cf 16       	cp	r12, r31
    339c:	d1 04       	cpc	r13, r1
    339e:	09 f0       	breq	.+2      	; 0x33a2 <getGateways+0x196>
    33a0:	8c cf       	rjmp	.-232    	; 0x32ba <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    33a2:	0f 90       	pop	r0
    33a4:	cf 91       	pop	r28
    33a6:	df 91       	pop	r29
    33a8:	1f 91       	pop	r17
    33aa:	0f 91       	pop	r16
    33ac:	ff 90       	pop	r15
    33ae:	ef 90       	pop	r14
    33b0:	df 90       	pop	r13
    33b2:	cf 90       	pop	r12
    33b4:	08 95       	ret

000033b6 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    33b6:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    33b8:	10 91 10 07 	lds	r17, 0x0710
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    33bc:	80 91 79 05 	lds	r24, 0x0579
    33c0:	60 91 0e 06 	lds	r22, 0x060E
    33c4:	40 e0       	ldi	r20, 0x00	; 0
    33c6:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    33ca:	e1 2f       	mov	r30, r17
    33cc:	e6 95       	lsr	r30
    33ce:	e6 95       	lsr	r30
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	ee 0f       	add	r30, r30
    33d4:	ff 1f       	adc	r31, r31
    33d6:	ee 0f       	add	r30, r30
    33d8:	ff 1f       	adc	r31, r31
    33da:	13 70       	andi	r17, 0x03	; 3
    33dc:	e1 0f       	add	r30, r17
    33de:	f1 1d       	adc	r31, r1
    33e0:	e3 52       	subi	r30, 0x23	; 35
    33e2:	fc 4f       	sbci	r31, 0xFC	; 252
    33e4:	80 83       	st	Z, r24
}
    33e6:	1f 91       	pop	r17
    33e8:	08 95       	ret

000033ea <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    33ea:	df 92       	push	r13
    33ec:	ef 92       	push	r14
    33ee:	ff 92       	push	r15
    33f0:	0f 93       	push	r16
    33f2:	1f 93       	push	r17
    33f4:	06 2f       	mov	r16, r22
    33f6:	14 2f       	mov	r17, r20
    33f8:	ff 24       	eor	r15, r15
    33fa:	2e c0       	rjmp	.+92     	; 0x3458 <matchBranch+0x6e>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    33fc:	05 30       	cpi	r16, 0x05	; 5
    33fe:	90 f5       	brcc	.+100    	; 0x3464 <matchBranch+0x7a>
    3400:	15 30       	cpi	r17, 0x05	; 5
    3402:	80 f5       	brcc	.+96     	; 0x3464 <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    3404:	ef 2d       	mov	r30, r15
    3406:	f0 e0       	ldi	r31, 0x00	; 0
    3408:	e8 5a       	subi	r30, 0xA8	; 168
    340a:	fb 4f       	sbci	r31, 0xFB	; 251
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    340c:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    340e:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    3410:	80 81       	ld	r24, Z
    3412:	6e 2d       	mov	r22, r14
    3414:	40 e0       	ldi	r20, 0x00	; 0
    3416:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    341a:	e0 2f       	mov	r30, r16
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	ee 0f       	add	r30, r30
    3420:	ff 1f       	adc	r31, r31
    3422:	ee 0f       	add	r30, r30
    3424:	ff 1f       	adc	r31, r31
    3426:	e1 0f       	add	r30, r17
    3428:	f1 1d       	adc	r31, r1
    342a:	e3 52       	subi	r30, 0x23	; 35
    342c:	fc 4f       	sbci	r31, 0xFC	; 252
    342e:	90 81       	ld	r25, Z
    3430:	89 17       	cp	r24, r25
    3432:	c1 f4       	brne	.+48     	; 0x3464 <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		currentCellWorld = (curRow << 2) + curCol;
    3434:	80 2f       	mov	r24, r16
    3436:	88 0f       	add	r24, r24
    3438:	88 0f       	add	r24, r24
    343a:	81 0f       	add	r24, r17
    343c:	80 93 10 07 	sts	0x0710, r24
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		currentCellWorld = shiftMap(currentCellWorld, curMove, curOrnt);
    3440:	6d 2d       	mov	r22, r13
    3442:	4e 2d       	mov	r20, r14
    3444:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <shiftMap>
    3448:	80 93 10 07 	sts	0x0710, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = currentCellWorld >> 2;
    344c:	08 2f       	mov	r16, r24
    344e:	06 95       	lsr	r16
    3450:	06 95       	lsr	r16
		curCol = currentCellWorld & 0b0011;
    3452:	18 2f       	mov	r17, r24
    3454:	13 70       	andi	r17, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    3456:	f3 94       	inc	r15
    3458:	80 91 67 04 	lds	r24, 0x0467
    345c:	f8 16       	cp	r15, r24
    345e:	70 f2       	brcs	.-100    	; 0x33fc <matchBranch+0x12>
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <matchBranch+0x7c>
    3464:	80 e0       	ldi	r24, 0x00	; 0
		curCol = currentCellWorld & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	return SUCCESS;
}
    3466:	1f 91       	pop	r17
    3468:	0f 91       	pop	r16
    346a:	ff 90       	pop	r15
    346c:	ef 90       	pop	r14
    346e:	df 90       	pop	r13
    3470:	08 95       	ret

00003472 <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    3472:	df 92       	push	r13
    3474:	ef 92       	push	r14
    3476:	ff 92       	push	r15
    3478:	0f 93       	push	r16
    347a:	1f 93       	push	r17
    347c:	cf 93       	push	r28
    347e:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    3480:	d0 90 58 04 	lds	r13, 0x0458
	// Local variables for nested for loops 
	unsigned char row, col;
	// Stores the number of matching seeds
	matchSeeds = 0;
    3484:	10 92 ac 07 	sts	0x07AC, r1
    3488:	00 e0       	ldi	r16, 0x00	; 0
    348a:	10 e0       	ldi	r17, 0x00	; 0
    348c:	1a c0       	rjmp	.+52     	; 0x34c2 <localizeGateway+0x50>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    348e:	88 81       	ld	r24, Y
    3490:	d8 16       	cp	r13, r24
    3492:	69 f4       	brne	.+26     	; 0x34ae <localizeGateway+0x3c>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    3494:	8d ed       	ldi	r24, 0xDD	; 221
    3496:	93 e0       	ldi	r25, 0x03	; 3
    3498:	6e 2d       	mov	r22, r14
    349a:	4f 2d       	mov	r20, r15
    349c:	0e 94 f5 19 	call	0x33ea	; 0x33ea <matchBranch>
    34a0:	88 23       	and	r24, r24
    34a2:	29 f0       	breq	.+10     	; 0x34ae <localizeGateway+0x3c>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    34a4:	80 91 ac 07 	lds	r24, 0x07AC
    34a8:	8f 5f       	subi	r24, 0xFF	; 255
    34aa:	80 93 ac 07 	sts	0x07AC, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    34ae:	f3 94       	inc	r15
    34b0:	21 96       	adiw	r28, 0x01	; 1
    34b2:	84 e0       	ldi	r24, 0x04	; 4
    34b4:	f8 16       	cp	r15, r24
    34b6:	59 f7       	brne	.-42     	; 0x348e <localizeGateway+0x1c>
    34b8:	0f 5f       	subi	r16, 0xFF	; 255
    34ba:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    34bc:	04 30       	cpi	r16, 0x04	; 4
    34be:	11 05       	cpc	r17, r1
    34c0:	51 f0       	breq	.+20     	; 0x34d6 <localizeGateway+0x64>
    34c2:	e0 2e       	mov	r14, r16
    34c4:	e8 01       	movw	r28, r16
    34c6:	cc 0f       	add	r28, r28
    34c8:	dd 1f       	adc	r29, r29
    34ca:	cc 0f       	add	r28, r28
    34cc:	dd 1f       	adc	r29, r29
    34ce:	c3 52       	subi	r28, 0x23	; 35
    34d0:	dc 4f       	sbci	r29, 0xFC	; 252
    34d2:	ff 24       	eor	r15, r15
    34d4:	dc cf       	rjmp	.-72     	; 0x348e <localizeGateway+0x1c>
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	80 91 ac 07 	lds	r24, 0x07AC
    34dc:	81 30       	cpi	r24, 0x01	; 1
    34de:	09 f0       	breq	.+2      	; 0x34e2 <localizeGateway+0x70>
    34e0:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    34e2:	89 2f       	mov	r24, r25
    34e4:	df 91       	pop	r29
    34e6:	cf 91       	pop	r28
    34e8:	1f 91       	pop	r17
    34ea:	0f 91       	pop	r16
    34ec:	ff 90       	pop	r15
    34ee:	ef 90       	pop	r14
    34f0:	df 90       	pop	r13
    34f2:	08 95       	ret

000034f4 <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    34f4:	0e 94 23 10 	call	0x2046	; 0x2046 <initializeRobot>
	// printMap(RESET);
	// TMRSRVC_delay(10000);//wait 10 seconds
	// LCD_clear();
	
	
	currentCellWorld = 0b0000;
    34f8:	10 92 10 07 	sts	0x0710, r1
	currentGoalWorld = 0b1111;
    34fc:	8f e0       	ldi	r24, 0x0F	; 15
    34fe:	80 93 7f 05 	sts	0x057F, r24
	
	// Make metric map
	wavefrontMake();
    3502:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <wavefrontMake>
    3506:	5a c0       	rjmp	.+180    	; 0x35bc <CBOT_main+0xc8>
	
	while(!isGoal){
	
		LCD_clear();
    3508:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
		switch(currentOrientation){
    350c:	80 91 0e 06 	lds	r24, 0x060E
    3510:	81 30       	cpi	r24, 0x01	; 1
    3512:	51 f0       	breq	.+20     	; 0x3528 <CBOT_main+0x34>
    3514:	81 30       	cpi	r24, 0x01	; 1
    3516:	28 f0       	brcs	.+10     	; 0x3522 <CBOT_main+0x2e>
    3518:	82 30       	cpi	r24, 0x02	; 2
    351a:	49 f0       	breq	.+18     	; 0x352e <CBOT_main+0x3a>
    351c:	83 30       	cpi	r24, 0x03	; 3
    351e:	71 f4       	brne	.+28     	; 0x353c <CBOT_main+0x48>
    3520:	09 c0       	rjmp	.+18     	; 0x3534 <CBOT_main+0x40>
			case NORTH:
				LCD_printf("CurtOrent:NORTH\n");
    3522:	86 e2       	ldi	r24, 0x26	; 38
    3524:	93 e0       	ldi	r25, 0x03	; 3
    3526:	08 c0       	rjmp	.+16     	; 0x3538 <CBOT_main+0x44>
				break;
			case EAST:
				LCD_printf("CurtOrent:EAST\n");
    3528:	86 e3       	ldi	r24, 0x36	; 54
    352a:	93 e0       	ldi	r25, 0x03	; 3
    352c:	05 c0       	rjmp	.+10     	; 0x3538 <CBOT_main+0x44>
				break;
			case SOUTH:
				LCD_printf("CurtOrent:SOUTH\n");
    352e:	85 e4       	ldi	r24, 0x45	; 69
    3530:	93 e0       	ldi	r25, 0x03	; 3
    3532:	02 c0       	rjmp	.+4      	; 0x3538 <CBOT_main+0x44>
				break;
			case WEST:
				LCD_printf("CurtOrent:WEST\n");
    3534:	85 e5       	ldi	r24, 0x55	; 85
    3536:	93 e0       	ldi	r25, 0x03	; 3
    3538:	0e 94 ed 37 	call	0x6fda	; 0x6fda <puts>
			default:
				break;
		}
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    353c:	80 91 10 07 	lds	r24, 0x0710
    3540:	0e 94 6d 10 	call	0x20da	; 0x20da <fourNeighborSearch>
    3544:	80 93 ab 07 	sts	0x07AB, r24
		if(isGoal){
    3548:	88 23       	and	r24, r24
    354a:	e9 f5       	brne	.+122    	; 0x35c6 <CBOT_main+0xd2>
		
		// if(nextOrientation != SOUTH){
			// break;
		// }
				
		switch(nextOrientation){
    354c:	80 91 0f 06 	lds	r24, 0x060F
    3550:	81 30       	cpi	r24, 0x01	; 1
    3552:	51 f0       	breq	.+20     	; 0x3568 <CBOT_main+0x74>
    3554:	81 30       	cpi	r24, 0x01	; 1
    3556:	28 f0       	brcs	.+10     	; 0x3562 <CBOT_main+0x6e>
    3558:	82 30       	cpi	r24, 0x02	; 2
    355a:	49 f0       	breq	.+18     	; 0x356e <CBOT_main+0x7a>
    355c:	83 30       	cpi	r24, 0x03	; 3
    355e:	71 f4       	brne	.+28     	; 0x357c <CBOT_main+0x88>
    3560:	09 c0       	rjmp	.+18     	; 0x3574 <CBOT_main+0x80>
			case NORTH:
				LCD_printf("NextOrent:NORTH\n");
    3562:	84 e6       	ldi	r24, 0x64	; 100
    3564:	93 e0       	ldi	r25, 0x03	; 3
    3566:	08 c0       	rjmp	.+16     	; 0x3578 <CBOT_main+0x84>
				break;
			case EAST:
				LCD_printf("NextOrent:EAST\n");
    3568:	84 e7       	ldi	r24, 0x74	; 116
    356a:	93 e0       	ldi	r25, 0x03	; 3
    356c:	05 c0       	rjmp	.+10     	; 0x3578 <CBOT_main+0x84>
				break;
			case SOUTH:
				LCD_printf("NextOrent:SOUTH\n");
    356e:	83 e8       	ldi	r24, 0x83	; 131
    3570:	93 e0       	ldi	r25, 0x03	; 3
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <CBOT_main+0x84>
				break;
			case WEST:
				LCD_printf("NextOrent:WEST\n");
    3574:	83 e9       	ldi	r24, 0x93	; 147
    3576:	93 e0       	ldi	r25, 0x03	; 3
    3578:	0e 94 ed 37 	call	0x6fda	; 0x6fda <puts>
				break;
			default:
				break;
		}
		
		switch(currentMove){
    357c:	80 91 a9 07 	lds	r24, 0x07A9
    3580:	82 30       	cpi	r24, 0x02	; 2
    3582:	51 f0       	breq	.+20     	; 0x3598 <CBOT_main+0xa4>
    3584:	83 30       	cpi	r24, 0x03	; 3
    3586:	29 f0       	breq	.+10     	; 0x3592 <CBOT_main+0x9e>
    3588:	81 30       	cpi	r24, 0x01	; 1
    358a:	51 f4       	brne	.+20     	; 0x35a0 <CBOT_main+0xac>
			case MOVE_LEFT:
				LCD_printf("CurMOVE:LEFT\n");
    358c:	82 ea       	ldi	r24, 0xA2	; 162
    358e:	93 e0       	ldi	r25, 0x03	; 3
    3590:	05 c0       	rjmp	.+10     	; 0x359c <CBOT_main+0xa8>
				break;
			case MOVE_RIGHT:
				LCD_printf("CurMOVE:RIGHT\n");
    3592:	8f ea       	ldi	r24, 0xAF	; 175
    3594:	93 e0       	ldi	r25, 0x03	; 3
    3596:	02 c0       	rjmp	.+4      	; 0x359c <CBOT_main+0xa8>
				break;
			case MOVE_FORWARD:
				LCD_printf("CurMOVE:FORWARD\n");
    3598:	8d eb       	ldi	r24, 0xBD	; 189
    359a:	93 e0       	ldi	r25, 0x03	; 3
    359c:	0e 94 ed 37 	call	0x6fda	; 0x6fda <puts>
			default:
				break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    35a0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <planMetric>
		
		// Act on the move
		moveMap();
    35a4:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    35a8:	80 91 10 07 	lds	r24, 0x0710
    35ac:	60 91 a9 07 	lds	r22, 0x07A9
    35b0:	40 91 0e 06 	lds	r20, 0x060E
    35b4:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <shiftMap>
    35b8:	80 93 10 07 	sts	0x0710, r24
	currentGoalWorld = 0b1111;
	
	// Make metric map
	wavefrontMake();
	
	while(!isGoal){
    35bc:	80 91 ab 07 	lds	r24, 0x07AB
    35c0:	88 23       	and	r24, r24
    35c2:	09 f4       	brne	.+2      	; 0x35c6 <CBOT_main+0xd2>
    35c4:	a1 cf       	rjmp	.-190    	; 0x3508 <CBOT_main+0x14>
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
		// TMRSRVC_delay(2000);//wait 1 seconds
	}
	
	LCD_clear();
    35c6:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
	LCD_printf("LOLZ\nI'm here!");
    35ca:	00 d0       	rcall	.+0      	; 0x35cc <CBOT_main+0xd8>
    35cc:	8d ec       	ldi	r24, 0xCD	; 205
    35ce:	93 e0       	ldi	r25, 0x03	; 3
    35d0:	ed b7       	in	r30, 0x3d	; 61
    35d2:	fe b7       	in	r31, 0x3e	; 62
    35d4:	92 83       	std	Z+2, r25	; 0x02
    35d6:	81 83       	std	Z+1, r24	; 0x01
    35d8:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <printf>
	TMRSRVC_delay(5000);//wait 3 seconds
    35dc:	0f 90       	pop	r0
    35de:	0f 90       	pop	r0
    35e0:	88 e8       	ldi	r24, 0x88	; 136
    35e2:	93 e1       	ldi	r25, 0x13	; 19
    35e4:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
		// LCD_clear();
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/
}// end the CBOT_main()
    35e8:	08 95       	ret

000035ea <ADC_open>:
    35ea:	8f e0       	ldi	r24, 0x0F	; 15
    35ec:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    35f0:	88 23       	and	r24, r24
    35f2:	31 f4       	brne	.+12     	; 0x3600 <ADC_open+0x16>
    35f4:	0e 94 78 23 	call	0x46f0	; 0x46f0 <__ADC_init>
    35f8:	8f e0       	ldi	r24, 0x0F	; 15
    35fa:	61 e0       	ldi	r22, 0x01	; 1
    35fc:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    3600:	8f e0       	ldi	r24, 0x0F	; 15
    3602:	91 e0       	ldi	r25, 0x01	; 1
    3604:	08 95       	ret

00003606 <ADC_sample>:
    3606:	8f e0       	ldi	r24, 0x0F	; 15
    3608:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    360c:	81 30       	cpi	r24, 0x01	; 1
    360e:	19 f0       	breq	.+6      	; 0x3616 <ADC_sample+0x10>
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	13 c0       	rjmp	.+38     	; 0x363c <ADC_sample+0x36>
    3616:	80 91 7a 00 	lds	r24, 0x007A
    361a:	80 64       	ori	r24, 0x40	; 64
    361c:	80 93 7a 00 	sts	0x007A, r24
    3620:	80 91 7a 00 	lds	r24, 0x007A
    3624:	86 fd       	sbrc	r24, 6
    3626:	fc cf       	rjmp	.-8      	; 0x3620 <ADC_sample+0x1a>
    3628:	30 91 78 00 	lds	r19, 0x0078
    362c:	20 91 79 00 	lds	r18, 0x0079
    3630:	92 2f       	mov	r25, r18
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	23 2f       	mov	r18, r19
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	28 2b       	or	r18, r24
    363a:	39 2b       	or	r19, r25
    363c:	c9 01       	movw	r24, r18
    363e:	08 95       	ret

00003640 <ADC_set_channel>:
    3640:	58 2f       	mov	r21, r24
    3642:	80 91 fd 03 	lds	r24, 0x03FD
    3646:	88 30       	cpi	r24, 0x08	; 8
    3648:	d8 f4       	brcc	.+54     	; 0x3680 <ADC_set_channel+0x40>
    364a:	40 91 7e 00 	lds	r20, 0x007E
    364e:	21 e0       	ldi	r18, 0x01	; 1
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	b9 01       	movw	r22, r18
    3654:	02 c0       	rjmp	.+4      	; 0x365a <ADC_set_channel+0x1a>
    3656:	66 0f       	add	r22, r22
    3658:	77 1f       	adc	r23, r23
    365a:	8a 95       	dec	r24
    365c:	e2 f7       	brpl	.-8      	; 0x3656 <ADC_set_channel+0x16>
    365e:	cb 01       	movw	r24, r22
    3660:	80 95       	com	r24
    3662:	84 23       	and	r24, r20
    3664:	80 93 7e 00 	sts	0x007E, r24
    3668:	80 91 7e 00 	lds	r24, 0x007E
    366c:	05 2e       	mov	r0, r21
    366e:	02 c0       	rjmp	.+4      	; 0x3674 <ADC_set_channel+0x34>
    3670:	22 0f       	add	r18, r18
    3672:	33 1f       	adc	r19, r19
    3674:	0a 94       	dec	r0
    3676:	e2 f7       	brpl	.-8      	; 0x3670 <ADC_set_channel+0x30>
    3678:	82 2b       	or	r24, r18
    367a:	80 93 7e 00 	sts	0x007E, r24
    367e:	0d c0       	rjmp	.+26     	; 0x369a <ADC_set_channel+0x5a>
    3680:	20 91 7e 00 	lds	r18, 0x007E
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	05 2e       	mov	r0, r21
    368a:	02 c0       	rjmp	.+4      	; 0x3690 <ADC_set_channel+0x50>
    368c:	88 0f       	add	r24, r24
    368e:	99 1f       	adc	r25, r25
    3690:	0a 94       	dec	r0
    3692:	e2 f7       	brpl	.-8      	; 0x368c <ADC_set_channel+0x4c>
    3694:	28 2b       	or	r18, r24
    3696:	20 93 7e 00 	sts	0x007E, r18
    369a:	50 93 fd 03 	sts	0x03FD, r21
    369e:	80 91 7c 00 	lds	r24, 0x007C
    36a2:	5f 71       	andi	r21, 0x1F	; 31
    36a4:	80 7e       	andi	r24, 0xE0	; 224
    36a6:	85 2b       	or	r24, r21
    36a8:	80 93 7c 00 	sts	0x007C, r24
    36ac:	08 95       	ret

000036ae <ADC_set_VREF>:
    36ae:	ec e7       	ldi	r30, 0x7C	; 124
    36b0:	f0 e0       	ldi	r31, 0x00	; 0
    36b2:	90 81       	ld	r25, Z
    36b4:	82 95       	swap	r24
    36b6:	88 0f       	add	r24, r24
    36b8:	88 0f       	add	r24, r24
    36ba:	80 7c       	andi	r24, 0xC0	; 192
    36bc:	9f 73       	andi	r25, 0x3F	; 63
    36be:	98 2b       	or	r25, r24
    36c0:	90 83       	st	Z, r25
    36c2:	08 95       	ret

000036c4 <main>:
    36c4:	0e 94 91 23 	call	0x4722	; 0x4722 <CBOT_ISR_init>
    36c8:	0e 94 83 23 	call	0x4706	; 0x4706 <CBOT_init>
    36cc:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <CBOT_main>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	90 e0       	ldi	r25, 0x00	; 0
    36d4:	08 95       	ret

000036d6 <LCD_clear>:
    36d6:	0f 93       	push	r16
    36d8:	1f 93       	push	r17
    36da:	80 e4       	ldi	r24, 0x40	; 64
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    36e2:	00 e0       	ldi	r16, 0x00	; 0
    36e4:	80 2f       	mov	r24, r16
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_set_PGC_addr>
    36ec:	10 e0       	ldi	r17, 0x00	; 0
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	61 e0       	ldi	r22, 0x01	; 1
    36f2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    36f6:	1f 5f       	subi	r17, 0xFF	; 255
    36f8:	10 38       	cpi	r17, 0x80	; 128
    36fa:	c9 f7       	brne	.-14     	; 0x36ee <LCD_clear+0x18>
    36fc:	0f 5f       	subi	r16, 0xFF	; 255
    36fe:	04 30       	cpi	r16, 0x04	; 4
    3700:	89 f7       	brne	.-30     	; 0x36e4 <LCD_clear+0xe>
    3702:	83 e0       	ldi	r24, 0x03	; 3
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	0e 94 2a 1c 	call	0x3854	; 0x3854 <LCD_set_next_PGC>
    370a:	1f 91       	pop	r17
    370c:	0f 91       	pop	r16
    370e:	08 95       	ret

00003710 <LCD_open>:
    3710:	0f 93       	push	r16
    3712:	1f 93       	push	r17
    3714:	82 e0       	ldi	r24, 0x02	; 2
    3716:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    371a:	88 23       	and	r24, r24
    371c:	11 f4       	brne	.+4      	; 0x3722 <LCD_open+0x12>
    371e:	82 e0       	ldi	r24, 0x02	; 2
    3720:	06 c0       	rjmp	.+12     	; 0x372e <LCD_open+0x1e>
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    3728:	88 23       	and	r24, r24
    372a:	19 f4       	brne	.+6      	; 0x3732 <LCD_open+0x22>
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	90 e0       	ldi	r25, 0x00	; 0
    3730:	6d c0       	rjmp	.+218    	; 0x380c <LCD_open+0xfc>
    3732:	0e 94 f9 25 	call	0x4bf2	; 0x4bf2 <__LCD_init>
    3736:	85 e0       	ldi	r24, 0x05	; 5
    3738:	61 e0       	ldi	r22, 0x01	; 1
    373a:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    373e:	8e ea       	ldi	r24, 0xAE	; 174
    3740:	60 e0       	ldi	r22, 0x00	; 0
    3742:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3746:	82 ea       	ldi	r24, 0xA2	; 162
    3748:	60 e0       	ldi	r22, 0x00	; 0
    374a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    374e:	80 ea       	ldi	r24, 0xA0	; 160
    3750:	60 e0       	ldi	r22, 0x00	; 0
    3752:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3756:	00 e5       	ldi	r16, 0x50	; 80
    3758:	13 ec       	ldi	r17, 0xC3	; 195
    375a:	c8 01       	movw	r24, r16
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	f1 f7       	brne	.-4      	; 0x375c <LCD_open+0x4c>
    3760:	80 ec       	ldi	r24, 0xC0	; 192
    3762:	60 e0       	ldi	r22, 0x00	; 0
    3764:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3768:	8f e2       	ldi	r24, 0x2F	; 47
    376a:	60 e0       	ldi	r22, 0x00	; 0
    376c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3770:	81 e8       	ldi	r24, 0x81	; 129
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3778:	86 e1       	ldi	r24, 0x16	; 22
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3780:	82 e2       	ldi	r24, 0x22	; 34
    3782:	60 e0       	ldi	r22, 0x00	; 0
    3784:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3788:	c8 01       	movw	r24, r16
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	f1 f7       	brne	.-4      	; 0x378a <LCD_open+0x7a>
    378e:	8f ea       	ldi	r24, 0xAF	; 175
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3796:	86 ea       	ldi	r24, 0xA6	; 166
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    379e:	85 ea       	ldi	r24, 0xA5	; 165
    37a0:	60 e0       	ldi	r22, 0x00	; 0
    37a2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    37a6:	80 e0       	ldi	r24, 0x00	; 0
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	28 e8       	ldi	r18, 0x88	; 136
    37ac:	33 e1       	ldi	r19, 0x13	; 19
    37ae:	f9 01       	movw	r30, r18
    37b0:	31 97       	sbiw	r30, 0x01	; 1
    37b2:	f1 f7       	brne	.-4      	; 0x37b0 <LCD_open+0xa0>
    37b4:	01 96       	adiw	r24, 0x01	; 1
    37b6:	43 e0       	ldi	r20, 0x03	; 3
    37b8:	88 3e       	cpi	r24, 0xE8	; 232
    37ba:	94 07       	cpc	r25, r20
    37bc:	c1 f7       	brne	.-16     	; 0x37ae <LCD_open+0x9e>
    37be:	83 eb       	ldi	r24, 0xB3	; 179
    37c0:	60 e0       	ldi	r22, 0x00	; 0
    37c2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    37c6:	80 e4       	ldi	r24, 0x40	; 64
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    37ce:	83 e0       	ldi	r24, 0x03	; 3
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_set_PGC_addr>
    37d6:	83 e0       	ldi	r24, 0x03	; 3
    37d8:	60 e0       	ldi	r22, 0x00	; 0
    37da:	0e 94 2a 1c 	call	0x3854	; 0x3854 <LCD_set_next_PGC>
    37de:	10 92 fc 07 	sts	0x07FC, r1
    37e2:	10 92 fe 07 	sts	0x07FE, r1
    37e6:	10 92 fd 07 	sts	0x07FD, r1
    37ea:	8c e0       	ldi	r24, 0x0C	; 12
    37ec:	94 e0       	ldi	r25, 0x04	; 4
    37ee:	90 93 2d 08 	sts	0x082D, r25
    37f2:	80 93 2c 08 	sts	0x082C, r24
    37f6:	88 e1       	ldi	r24, 0x18	; 24
    37f8:	0e 94 09 1c 	call	0x3812	; 0x3812 <LCD_set_backlight>
    37fc:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
    3800:	84 ea       	ldi	r24, 0xA4	; 164
    3802:	60 e0       	ldi	r22, 0x00	; 0
    3804:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3808:	85 e0       	ldi	r24, 0x05	; 5
    380a:	91 e0       	ldi	r25, 0x01	; 1
    380c:	1f 91       	pop	r17
    380e:	0f 91       	pop	r16
    3810:	08 95       	ret

00003812 <LCD_set_backlight>:
    3812:	1f 93       	push	r17
    3814:	18 2f       	mov	r17, r24
    3816:	85 e0       	ldi	r24, 0x05	; 5
    3818:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    381c:	81 30       	cpi	r24, 0x01	; 1
    381e:	c1 f4       	brne	.+48     	; 0x3850 <LCD_set_backlight+0x3e>
    3820:	87 e0       	ldi	r24, 0x07	; 7
    3822:	0e 94 86 1c 	call	0x390c	; 0x390c <SPI_set_slave_addr>
    3826:	82 e0       	ldi	r24, 0x02	; 2
    3828:	6a e0       	ldi	r22, 0x0A	; 10
    382a:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <SPI_transmit>
    382e:	82 e0       	ldi	r24, 0x02	; 2
    3830:	61 eb       	ldi	r22, 0xB1	; 177
    3832:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <SPI_transmit>
    3836:	61 2f       	mov	r22, r17
    3838:	11 32       	cpi	r17, 0x21	; 33
    383a:	08 f0       	brcs	.+2      	; 0x383e <LCD_set_backlight+0x2c>
    383c:	60 e2       	ldi	r22, 0x20	; 32
    383e:	82 e0       	ldi	r24, 0x02	; 2
    3840:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <SPI_transmit>
    3844:	89 ee       	ldi	r24, 0xE9	; 233
    3846:	8a 95       	dec	r24
    3848:	f1 f7       	brne	.-4      	; 0x3846 <LCD_set_backlight+0x34>
    384a:	87 e0       	ldi	r24, 0x07	; 7
    384c:	0e 94 86 1c 	call	0x390c	; 0x390c <SPI_set_slave_addr>
    3850:	1f 91       	pop	r17
    3852:	08 95       	ret

00003854 <LCD_set_next_PGC>:
    3854:	83 70       	andi	r24, 0x03	; 3
    3856:	6f 77       	andi	r22, 0x7F	; 127
    3858:	60 93 fa 07 	sts	0x07FA, r22
    385c:	80 93 fb 07 	sts	0x07FB, r24
    3860:	08 95       	ret

00003862 <LCD_set_PGC_addr>:
    3862:	0f 93       	push	r16
    3864:	1f 93       	push	r17
    3866:	06 2f       	mov	r16, r22
    3868:	16 2f       	mov	r17, r22
    386a:	1f 77       	andi	r17, 0x7F	; 127
    386c:	83 70       	andi	r24, 0x03	; 3
    386e:	80 6b       	ori	r24, 0xB0	; 176
    3870:	60 e0       	ldi	r22, 0x00	; 0
    3872:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3876:	12 95       	swap	r17
    3878:	1f 70       	andi	r17, 0x0F	; 15
    387a:	81 2f       	mov	r24, r17
    387c:	80 61       	ori	r24, 0x10	; 16
    387e:	60 e0       	ldi	r22, 0x00	; 0
    3880:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    3884:	80 2f       	mov	r24, r16
    3886:	8f 70       	andi	r24, 0x0F	; 15
    3888:	60 e0       	ldi	r22, 0x00	; 0
    388a:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    388e:	1f 91       	pop	r17
    3890:	0f 91       	pop	r16
    3892:	08 95       	ret

00003894 <LCD_write>:
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	08 2f       	mov	r16, r24
    389a:	16 2f       	mov	r17, r22
    389c:	85 e0       	ldi	r24, 0x05	; 5
    389e:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    38a2:	81 30       	cpi	r24, 0x01	; 1
    38a4:	79 f4       	brne	.+30     	; 0x38c4 <LCD_write+0x30>
    38a6:	11 23       	and	r17, r17
    38a8:	19 f0       	breq	.+6      	; 0x38b0 <LCD_write+0x1c>
    38aa:	11 30       	cpi	r17, 0x01	; 1
    38ac:	21 f4       	brne	.+8      	; 0x38b6 <LCD_write+0x22>
    38ae:	02 c0       	rjmp	.+4      	; 0x38b4 <LCD_write+0x20>
    38b0:	2b 98       	cbi	0x05, 3	; 5
    38b2:	01 c0       	rjmp	.+2      	; 0x38b6 <LCD_write+0x22>
    38b4:	2b 9a       	sbi	0x05, 3	; 5
    38b6:	86 e0       	ldi	r24, 0x06	; 6
    38b8:	8a 95       	dec	r24
    38ba:	f1 f7       	brne	.-4      	; 0x38b8 <LCD_write+0x24>
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	60 2f       	mov	r22, r16
    38c0:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <SPI_transmit>
    38c4:	1f 91       	pop	r17
    38c6:	0f 91       	pop	r16
    38c8:	08 95       	ret

000038ca <LED_clr_pattern>:
    38ca:	1f 93       	push	r17
    38cc:	18 2f       	mov	r17, r24
    38ce:	86 e0       	ldi	r24, 0x06	; 6
    38d0:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    38d4:	81 30       	cpi	r24, 0x01	; 1
    38d6:	19 f4       	brne	.+6      	; 0x38de <LED_clr_pattern+0x14>
    38d8:	81 2f       	mov	r24, r17
    38da:	0e 94 a8 26 	call	0x4d50	; 0x4d50 <__LED_clr_pattern>
    38de:	1f 91       	pop	r17
    38e0:	08 95       	ret

000038e2 <LED_open>:
    38e2:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__LED_init>
    38e6:	86 e0       	ldi	r24, 0x06	; 6
    38e8:	61 e0       	ldi	r22, 0x01	; 1
    38ea:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    38ee:	86 e0       	ldi	r24, 0x06	; 6
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	08 95       	ret

000038f4 <LED_set_pattern>:
    38f4:	1f 93       	push	r17
    38f6:	18 2f       	mov	r17, r24
    38f8:	86 e0       	ldi	r24, 0x06	; 6
    38fa:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    38fe:	81 30       	cpi	r24, 0x01	; 1
    3900:	19 f4       	brne	.+6      	; 0x3908 <LED_set_pattern+0x14>
    3902:	81 2f       	mov	r24, r17
    3904:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__LED_set_pattern>
    3908:	1f 91       	pop	r17
    390a:	08 95       	ret

0000390c <SPI_set_slave_addr>:
    390c:	1f 93       	push	r17
    390e:	18 2f       	mov	r17, r24
    3910:	82 e0       	ldi	r24, 0x02	; 2
    3912:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    3916:	81 30       	cpi	r24, 0x01	; 1
    3918:	09 f0       	breq	.+2      	; 0x391c <SPI_set_slave_addr+0x10>
    391a:	47 c0       	rjmp	.+142    	; 0x39aa <SPI_set_slave_addr+0x9e>
    391c:	91 2f       	mov	r25, r17
    391e:	97 70       	andi	r25, 0x07	; 7
    3920:	80 91 ff 07 	lds	r24, 0x07FF
    3924:	98 17       	cp	r25, r24
    3926:	09 f4       	brne	.+2      	; 0x392a <SPI_set_slave_addr+0x1e>
    3928:	40 c0       	rjmp	.+128    	; 0x39aa <SPI_set_slave_addr+0x9e>
    392a:	90 93 ff 07 	sts	0x07FF, r25
    392e:	85 b1       	in	r24, 0x05	; 5
    3930:	88 7f       	andi	r24, 0xF8	; 248
    3932:	89 2b       	or	r24, r25
    3934:	85 b9       	out	0x05, r24	; 5
    3936:	93 30       	cpi	r25, 0x03	; 3
    3938:	11 f1       	breq	.+68     	; 0x397e <SPI_set_slave_addr+0x72>
    393a:	94 30       	cpi	r25, 0x04	; 4
    393c:	28 f4       	brcc	.+10     	; 0x3948 <SPI_set_slave_addr+0x3c>
    393e:	91 30       	cpi	r25, 0x01	; 1
    3940:	51 f0       	breq	.+20     	; 0x3956 <SPI_set_slave_addr+0x4a>
    3942:	92 30       	cpi	r25, 0x02	; 2
    3944:	90 f4       	brcc	.+36     	; 0x396a <SPI_set_slave_addr+0x5e>
    3946:	0c c0       	rjmp	.+24     	; 0x3960 <SPI_set_slave_addr+0x54>
    3948:	95 30       	cpi	r25, 0x05	; 5
    394a:	19 f1       	breq	.+70     	; 0x3992 <SPI_set_slave_addr+0x86>
    394c:	95 30       	cpi	r25, 0x05	; 5
    394e:	e0 f0       	brcs	.+56     	; 0x3988 <SPI_set_slave_addr+0x7c>
    3950:	96 30       	cpi	r25, 0x06	; 6
    3952:	21 f5       	brne	.+72     	; 0x399c <SPI_set_slave_addr+0x90>
    3954:	0f c0       	rjmp	.+30     	; 0x3974 <SPI_set_slave_addr+0x68>
    3956:	e0 91 ca 04 	lds	r30, 0x04CA
    395a:	f0 91 cb 04 	lds	r31, 0x04CB
    395e:	22 c0       	rjmp	.+68     	; 0x39a4 <SPI_set_slave_addr+0x98>
    3960:	e0 91 c8 04 	lds	r30, 0x04C8
    3964:	f0 91 c9 04 	lds	r31, 0x04C9
    3968:	1d c0       	rjmp	.+58     	; 0x39a4 <SPI_set_slave_addr+0x98>
    396a:	e0 91 cc 04 	lds	r30, 0x04CC
    396e:	f0 91 cd 04 	lds	r31, 0x04CD
    3972:	18 c0       	rjmp	.+48     	; 0x39a4 <SPI_set_slave_addr+0x98>
    3974:	e0 91 d4 04 	lds	r30, 0x04D4
    3978:	f0 91 d5 04 	lds	r31, 0x04D5
    397c:	13 c0       	rjmp	.+38     	; 0x39a4 <SPI_set_slave_addr+0x98>
    397e:	e0 91 ce 04 	lds	r30, 0x04CE
    3982:	f0 91 cf 04 	lds	r31, 0x04CF
    3986:	0e c0       	rjmp	.+28     	; 0x39a4 <SPI_set_slave_addr+0x98>
    3988:	e0 91 d0 04 	lds	r30, 0x04D0
    398c:	f0 91 d1 04 	lds	r31, 0x04D1
    3990:	09 c0       	rjmp	.+18     	; 0x39a4 <SPI_set_slave_addr+0x98>
    3992:	e0 91 d2 04 	lds	r30, 0x04D2
    3996:	f0 91 d3 04 	lds	r31, 0x04D3
    399a:	04 c0       	rjmp	.+8      	; 0x39a4 <SPI_set_slave_addr+0x98>
    399c:	e0 91 d6 04 	lds	r30, 0x04D6
    39a0:	f0 91 d7 04 	lds	r31, 0x04D7
    39a4:	30 97       	sbiw	r30, 0x00	; 0
    39a6:	09 f0       	breq	.+2      	; 0x39aa <SPI_set_slave_addr+0x9e>
    39a8:	09 95       	icall
    39aa:	1f 91       	pop	r17
    39ac:	08 95       	ret

000039ae <SPI_transmit>:
    39ae:	1f 93       	push	r17
    39b0:	16 2f       	mov	r17, r22
    39b2:	0e 94 86 1c 	call	0x390c	; 0x390c <SPI_set_slave_addr>
    39b6:	82 e0       	ldi	r24, 0x02	; 2
    39b8:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    39bc:	81 30       	cpi	r24, 0x01	; 1
    39be:	21 f4       	brne	.+8      	; 0x39c8 <SPI_transmit+0x1a>
    39c0:	1e bd       	out	0x2e, r17	; 46
    39c2:	0d b4       	in	r0, 0x2d	; 45
    39c4:	07 fe       	sbrs	r0, 7
    39c6:	fd cf       	rjmp	.-6      	; 0x39c2 <SPI_transmit+0x14>
    39c8:	1f 91       	pop	r17
    39ca:	08 95       	ret

000039cc <__SPKR_set_up_freq_LUT>:
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
    39d4:	80 e2       	ldi	r24, 0x20	; 32
    39d6:	91 e0       	ldi	r25, 0x01	; 1
    39d8:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <malloc>
    39dc:	9c 01       	movw	r18, r24
    39de:	90 93 e7 04 	sts	0x04E7, r25
    39e2:	80 93 e6 04 	sts	0x04E6, r24
    39e6:	89 2b       	or	r24, r25
    39e8:	11 f4       	brne	.+4      	; 0x39ee <__SPKR_set_up_freq_LUT+0x22>
    39ea:	80 e0       	ldi	r24, 0x00	; 0
    39ec:	39 c0       	rjmp	.+114    	; 0x3a60 <__SPKR_set_up_freq_LUT+0x94>
    39ee:	89 01       	movw	r16, r18
    39f0:	c0 e0       	ldi	r28, 0x00	; 0
    39f2:	d0 e0       	ldi	r29, 0x00	; 0
    39f4:	be 01       	movw	r22, r28
    39f6:	80 e0       	ldi	r24, 0x00	; 0
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	0e 94 24 2f 	call	0x5e48	; 0x5e48 <__floatunsisf>
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 ea       	ldi	r20, 0xA0	; 160
    3a04:	51 e4       	ldi	r21, 0x41	; 65
    3a06:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <__divsf3>
    3a0a:	27 ef       	ldi	r18, 0xF7	; 247
    3a0c:	35 e7       	ldi	r19, 0x75	; 117
    3a0e:	40 e0       	ldi	r20, 0x00	; 0
    3a10:	5f e3       	ldi	r21, 0x3F	; 63
    3a12:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    3a16:	9b 01       	movw	r18, r22
    3a18:	ac 01       	movw	r20, r24
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	70 e0       	ldi	r23, 0x00	; 0
    3a1e:	80 e2       	ldi	r24, 0x20	; 32
    3a20:	91 e4       	ldi	r25, 0x41	; 65
    3a22:	0e 94 77 30 	call	0x60ee	; 0x60ee <pow>
    3a26:	9b 01       	movw	r18, r22
    3a28:	ac 01       	movw	r20, r24
    3a2a:	ca 01       	movw	r24, r20
    3a2c:	b9 01       	movw	r22, r18
    3a2e:	2d ec       	ldi	r18, 0xCD	; 205
    3a30:	3c ec       	ldi	r19, 0xCC	; 204
    3a32:	42 e8       	ldi	r20, 0x82	; 130
    3a34:	51 e4       	ldi	r21, 0x41	; 65
    3a36:	0e 94 14 30 	call	0x6028	; 0x6028 <__mulsf3>
    3a3a:	0e 94 da 2f 	call	0x5fb4	; 0x5fb4 <lrint>
    3a3e:	2a e0       	ldi	r18, 0x0A	; 10
    3a40:	30 e0       	ldi	r19, 0x00	; 0
    3a42:	40 e0       	ldi	r20, 0x00	; 0
    3a44:	50 e0       	ldi	r21, 0x00	; 0
    3a46:	0e 94 44 35 	call	0x6a88	; 0x6a88 <__mulsi3>
    3a4a:	f8 01       	movw	r30, r16
    3a4c:	61 93       	st	Z+, r22
    3a4e:	71 93       	st	Z+, r23
    3a50:	81 93       	st	Z+, r24
    3a52:	91 93       	st	Z+, r25
    3a54:	8f 01       	movw	r16, r30
    3a56:	21 96       	adiw	r28, 0x01	; 1
    3a58:	c8 34       	cpi	r28, 0x48	; 72
    3a5a:	d1 05       	cpc	r29, r1
    3a5c:	59 f6       	brne	.-106    	; 0x39f4 <__SPKR_set_up_freq_LUT+0x28>
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	1f 91       	pop	r17
    3a66:	0f 91       	pop	r16
    3a68:	08 95       	ret

00003a6a <__SPKR_open_beep_mode>:
    3a6a:	8a e0       	ldi	r24, 0x0A	; 10
    3a6c:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    3a70:	88 23       	and	r24, r24
    3a72:	71 f4       	brne	.+28     	; 0x3a90 <__SPKR_open_beep_mode+0x26>
    3a74:	10 92 e3 04 	sts	0x04E3, r1
    3a78:	10 92 e2 04 	sts	0x04E2, r1
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <__SPKR_init>
    3a82:	81 e0       	ldi	r24, 0x01	; 1
    3a84:	80 93 d9 04 	sts	0x04D9, r24
    3a88:	8a e0       	ldi	r24, 0x0A	; 10
    3a8a:	61 e0       	ldi	r22, 0x01	; 1
    3a8c:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    3a90:	8a e0       	ldi	r24, 0x0A	; 10
    3a92:	91 e0       	ldi	r25, 0x01	; 1
    3a94:	08 95       	ret

00003a96 <__SPKR_open_tone_mode>:
    3a96:	1f 93       	push	r17
    3a98:	8b e0       	ldi	r24, 0x0B	; 11
    3a9a:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    3a9e:	88 23       	and	r24, r24
    3aa0:	11 f0       	breq	.+4      	; 0x3aa6 <__SPKR_open_tone_mode+0x10>
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	21 c0       	rjmp	.+66     	; 0x3ae8 <__SPKR_open_tone_mode+0x52>
    3aa6:	89 e0       	ldi	r24, 0x09	; 9
    3aa8:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    3aac:	88 23       	and	r24, r24
    3aae:	d9 f4       	brne	.+54     	; 0x3ae6 <__SPKR_open_tone_mode+0x50>
    3ab0:	0e 94 e6 1c 	call	0x39cc	; 0x39cc <__SPKR_set_up_freq_LUT>
    3ab4:	18 2f       	mov	r17, r24
    3ab6:	81 30       	cpi	r24, 0x01	; 1
    3ab8:	b1 f4       	brne	.+44     	; 0x3ae6 <__SPKR_open_tone_mode+0x50>
    3aba:	10 92 da 04 	sts	0x04DA, r1
    3abe:	10 92 db 04 	sts	0x04DB, r1
    3ac2:	10 92 dc 04 	sts	0x04DC, r1
    3ac6:	10 92 dd 04 	sts	0x04DD, r1
    3aca:	8d e0       	ldi	r24, 0x0D	; 13
    3acc:	6e e6       	ldi	r22, 0x6E	; 110
    3ace:	77 e2       	ldi	r23, 0x27	; 39
    3ad0:	0e 94 d1 25 	call	0x4ba2	; 0x4ba2 <ISR_attach>
    3ad4:	82 e0       	ldi	r24, 0x02	; 2
    3ad6:	0e 94 eb 27 	call	0x4fd6	; 0x4fd6 <__SPKR_init>
    3ada:	10 93 d8 04 	sts	0x04D8, r17
    3ade:	89 e0       	ldi	r24, 0x09	; 9
    3ae0:	61 e0       	ldi	r22, 0x01	; 1
    3ae2:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    3ae6:	91 e0       	ldi	r25, 0x01	; 1
    3ae8:	89 e0       	ldi	r24, 0x09	; 9
    3aea:	1f 91       	pop	r17
    3aec:	08 95       	ret

00003aee <SPKR_open>:
    3aee:	81 30       	cpi	r24, 0x01	; 1
    3af0:	29 f0       	breq	.+10     	; 0x3afc <SPKR_open+0xe>
    3af2:	82 30       	cpi	r24, 0x02	; 2
    3af4:	31 f0       	breq	.+12     	; 0x3b02 <SPKR_open+0x14>
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	89 e0       	ldi	r24, 0x09	; 9
    3afa:	08 95       	ret
    3afc:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__SPKR_open_beep_mode>
    3b00:	08 95       	ret
    3b02:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <__SPKR_open_tone_mode>
    3b06:	08 95       	ret

00003b08 <STEPPER_get_nSteps>:
    3b08:	80 91 c0 07 	lds	r24, 0x07C0
    3b0c:	90 91 c1 07 	lds	r25, 0x07C1
    3b10:	20 91 c2 07 	lds	r18, 0x07C2
    3b14:	30 91 c3 07 	lds	r19, 0x07C3
    3b18:	bc 01       	movw	r22, r24
    3b1a:	c9 01       	movw	r24, r18
    3b1c:	08 95       	ret

00003b1e <STEPPER_stepmode>:
    3b1e:	2f 92       	push	r2
    3b20:	3f 92       	push	r3
    3b22:	4f 92       	push	r4
    3b24:	5f 92       	push	r5
    3b26:	6f 92       	push	r6
    3b28:	7f 92       	push	r7
    3b2a:	8f 92       	push	r8
    3b2c:	9f 92       	push	r9
    3b2e:	af 92       	push	r10
    3b30:	bf 92       	push	r11
    3b32:	cf 92       	push	r12
    3b34:	df 92       	push	r13
    3b36:	ef 92       	push	r14
    3b38:	ff 92       	push	r15
    3b3a:	0f 93       	push	r16
    3b3c:	1f 93       	push	r17
    3b3e:	df 93       	push	r29
    3b40:	cf 93       	push	r28
    3b42:	cd b7       	in	r28, 0x3d	; 61
    3b44:	de b7       	in	r29, 0x3e	; 62
    3b46:	58 2e       	mov	r5, r24
    3b48:	96 2e       	mov	r9, r22
    3b4a:	44 2e       	mov	r4, r20
    3b4c:	39 01       	movw	r6, r18
    3b4e:	3c 2c       	mov	r3, r12
    3b50:	c9 8c       	ldd	r12, Y+25	; 0x19
    3b52:	da 8c       	ldd	r13, Y+26	; 0x1a
    3b54:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3b56:	81 e0       	ldi	r24, 0x01	; 1
    3b58:	68 17       	cp	r22, r24
    3b5a:	39 f1       	breq	.+78     	; 0x3baa <STEPPER_stepmode+0x8c>
    3b5c:	68 17       	cp	r22, r24
    3b5e:	28 f0       	brcs	.+10     	; 0x3b6a <STEPPER_stepmode+0x4c>
    3b60:	92 e0       	ldi	r25, 0x02	; 2
    3b62:	69 17       	cp	r22, r25
    3b64:	09 f0       	breq	.+2      	; 0x3b68 <STEPPER_stepmode+0x4a>
    3b66:	85 c0       	rjmp	.+266    	; 0x3c72 <STEPPER_stepmode+0x154>
    3b68:	49 c0       	rjmp	.+146    	; 0x3bfc <STEPPER_stepmode+0xde>
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	61 e0       	ldi	r22, 0x01	; 1
    3b6e:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <STEPPER_set_mode>
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	b7 01       	movw	r22, r14
    3b76:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <STEPPER_set_accel>
    3b7a:	80 e0       	ldi	r24, 0x00	; 0
    3b7c:	64 2d       	mov	r22, r4
    3b7e:	a3 01       	movw	r20, r6
    3b80:	98 01       	movw	r18, r16
    3b82:	03 2d       	mov	r16, r3
    3b84:	ee 24       	eor	r14, r14
    3b86:	e3 94       	inc	r14
    3b88:	e5 ee       	ldi	r30, 0xE5	; 229
    3b8a:	ce 2e       	mov	r12, r30
    3b8c:	e7 e0       	ldi	r30, 0x07	; 7
    3b8e:	de 2e       	mov	r13, r30
    3b90:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <STEPPER_step>
    3b94:	55 20       	and	r5, r5
    3b96:	09 f0       	breq	.+2      	; 0x3b9a <STEPPER_stepmode+0x7c>
    3b98:	6c c0       	rjmp	.+216    	; 0x3c72 <STEPPER_stepmode+0x154>
    3b9a:	00 d0       	rcall	.+0      	; 0x3b9c <STEPPER_stepmode+0x7e>
    3b9c:	0f 92       	push	r0
    3b9e:	ed b7       	in	r30, 0x3d	; 61
    3ba0:	fe b7       	in	r31, 0x3e	; 62
    3ba2:	11 82       	std	Z+1, r1	; 0x01
    3ba4:	b3 82       	std	Z+3, r11	; 0x03
    3ba6:	a2 82       	std	Z+2, r10	; 0x02
    3ba8:	23 c0       	rjmp	.+70     	; 0x3bf0 <STEPPER_stepmode+0xd2>
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	61 e0       	ldi	r22, 0x01	; 1
    3bae:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <STEPPER_set_mode>
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	b6 01       	movw	r22, r12
    3bb6:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <STEPPER_set_accel>
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	68 2d       	mov	r22, r8
    3bbe:	4d 89       	ldd	r20, Y+21	; 0x15
    3bc0:	5e 89       	ldd	r21, Y+22	; 0x16
    3bc2:	2f 89       	ldd	r18, Y+23	; 0x17
    3bc4:	38 8d       	ldd	r19, Y+24	; 0x18
    3bc6:	02 2d       	mov	r16, r2
    3bc8:	ee 24       	eor	r14, r14
    3bca:	e3 94       	inc	r14
    3bcc:	75 ee       	ldi	r23, 0xE5	; 229
    3bce:	c7 2e       	mov	r12, r23
    3bd0:	77 e0       	ldi	r23, 0x07	; 7
    3bd2:	d7 2e       	mov	r13, r23
    3bd4:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <STEPPER_step>
    3bd8:	55 20       	and	r5, r5
    3bda:	09 f0       	breq	.+2      	; 0x3bde <STEPPER_stepmode+0xc0>
    3bdc:	4a c0       	rjmp	.+148    	; 0x3c72 <STEPPER_stepmode+0x154>
    3bde:	00 d0       	rcall	.+0      	; 0x3be0 <STEPPER_stepmode+0xc2>
    3be0:	0f 92       	push	r0
    3be2:	ed b7       	in	r30, 0x3d	; 61
    3be4:	fe b7       	in	r31, 0x3e	; 62
    3be6:	91 82       	std	Z+1, r9	; 0x01
    3be8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3bea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bec:	93 83       	std	Z+3, r25	; 0x03
    3bee:	82 83       	std	Z+2, r24	; 0x02
    3bf0:	0e 94 9b 20 	call	0x4136	; 0x4136 <STEPPER_wait_and_then>
    3bf4:	0f 90       	pop	r0
    3bf6:	0f 90       	pop	r0
    3bf8:	0f 90       	pop	r0
    3bfa:	3b c0       	rjmp	.+118    	; 0x3c72 <STEPPER_stepmode+0x154>
    3bfc:	82 e0       	ldi	r24, 0x02	; 2
    3bfe:	61 e0       	ldi	r22, 0x01	; 1
    3c00:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <STEPPER_set_mode>
    3c04:	80 e0       	ldi	r24, 0x00	; 0
    3c06:	b7 01       	movw	r22, r14
    3c08:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <STEPPER_set_accel>
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	b6 01       	movw	r22, r12
    3c10:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <STEPPER_set_accel>
    3c14:	80 e0       	ldi	r24, 0x00	; 0
    3c16:	64 2d       	mov	r22, r4
    3c18:	a3 01       	movw	r20, r6
    3c1a:	98 01       	movw	r18, r16
    3c1c:	03 2d       	mov	r16, r3
    3c1e:	ee 24       	eor	r14, r14
    3c20:	e3 94       	inc	r14
    3c22:	95 ee       	ldi	r25, 0xE5	; 229
    3c24:	c9 2e       	mov	r12, r25
    3c26:	97 e0       	ldi	r25, 0x07	; 7
    3c28:	d9 2e       	mov	r13, r25
    3c2a:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <STEPPER_step>
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	68 2d       	mov	r22, r8
    3c32:	4d 89       	ldd	r20, Y+21	; 0x15
    3c34:	5e 89       	ldd	r21, Y+22	; 0x16
    3c36:	2f 89       	ldd	r18, Y+23	; 0x17
    3c38:	38 8d       	ldd	r19, Y+24	; 0x18
    3c3a:	02 2d       	mov	r16, r2
    3c3c:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <STEPPER_step>
    3c40:	55 20       	and	r5, r5
    3c42:	b9 f4       	brne	.+46     	; 0x3c72 <STEPPER_stepmode+0x154>
    3c44:	00 d0       	rcall	.+0      	; 0x3c46 <STEPPER_stepmode+0x128>
    3c46:	00 d0       	rcall	.+0      	; 0x3c48 <STEPPER_stepmode+0x12a>
    3c48:	0f 92       	push	r0
    3c4a:	ad b7       	in	r26, 0x3d	; 61
    3c4c:	be b7       	in	r27, 0x3e	; 62
    3c4e:	11 96       	adiw	r26, 0x01	; 1
    3c50:	ed b7       	in	r30, 0x3d	; 61
    3c52:	fe b7       	in	r31, 0x3e	; 62
    3c54:	91 82       	std	Z+1, r9	; 0x01
    3c56:	fd 01       	movw	r30, r26
    3c58:	b2 82       	std	Z+2, r11	; 0x02
    3c5a:	a1 82       	std	Z+1, r10	; 0x01
    3c5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c60:	94 83       	std	Z+4, r25	; 0x04
    3c62:	83 83       	std	Z+3, r24	; 0x03
    3c64:	0e 94 9b 20 	call	0x4136	; 0x4136 <STEPPER_wait_and_then>
    3c68:	0f 90       	pop	r0
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	cf 91       	pop	r28
    3c74:	df 91       	pop	r29
    3c76:	1f 91       	pop	r17
    3c78:	0f 91       	pop	r16
    3c7a:	ff 90       	pop	r15
    3c7c:	ef 90       	pop	r14
    3c7e:	df 90       	pop	r13
    3c80:	cf 90       	pop	r12
    3c82:	bf 90       	pop	r11
    3c84:	af 90       	pop	r10
    3c86:	9f 90       	pop	r9
    3c88:	8f 90       	pop	r8
    3c8a:	7f 90       	pop	r7
    3c8c:	6f 90       	pop	r6
    3c8e:	5f 90       	pop	r5
    3c90:	4f 90       	pop	r4
    3c92:	3f 90       	pop	r3
    3c94:	2f 90       	pop	r2
    3c96:	08 95       	ret

00003c98 <STEPPER_move>:
    3c98:	6f 92       	push	r6
    3c9a:	7f 92       	push	r7
    3c9c:	8f 92       	push	r8
    3c9e:	9f 92       	push	r9
    3ca0:	af 92       	push	r10
    3ca2:	bf 92       	push	r11
    3ca4:	cf 92       	push	r12
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	df 93       	push	r29
    3cb2:	cf 93       	push	r28
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	94 2e       	mov	r9, r20
    3cba:	7c 2d       	mov	r23, r12
    3cbc:	d5 01       	movw	r26, r10
    3cbe:	49 89       	ldd	r20, Y+17	; 0x11
    3cc0:	5a 89       	ldd	r21, Y+18	; 0x12
    3cc2:	ab 88       	ldd	r10, Y+19	; 0x13
    3cc4:	bc 88       	ldd	r11, Y+20	; 0x14
    3cc6:	cd 88       	ldd	r12, Y+21	; 0x15
    3cc8:	de 88       	ldd	r13, Y+22	; 0x16
    3cca:	9f 89       	ldd	r25, Y+23	; 0x17
    3ccc:	81 30       	cpi	r24, 0x01	; 1
    3cce:	09 f4       	brne	.+2      	; 0x3cd2 <STEPPER_move+0x3a>
    3cd0:	57 c0       	rjmp	.+174    	; 0x3d80 <STEPPER_move+0xe8>
    3cd2:	81 30       	cpi	r24, 0x01	; 1
    3cd4:	b8 f1       	brcs	.+110    	; 0x3d44 <STEPPER_move+0xac>
    3cd6:	82 30       	cpi	r24, 0x02	; 2
    3cd8:	09 f0       	breq	.+2      	; 0x3cdc <STEPPER_move+0x44>
    3cda:	76 c0       	rjmp	.+236    	; 0x3dc8 <STEPPER_move+0x130>
    3cdc:	61 30       	cpi	r22, 0x01	; 1
    3cde:	91 f0       	breq	.+36     	; 0x3d04 <STEPPER_move+0x6c>
    3ce0:	61 30       	cpi	r22, 0x01	; 1
    3ce2:	20 f0       	brcs	.+8      	; 0x3cec <STEPPER_move+0x54>
    3ce4:	62 30       	cpi	r22, 0x02	; 2
    3ce6:	09 f0       	breq	.+2      	; 0x3cea <STEPPER_move+0x52>
    3ce8:	6f c0       	rjmp	.+222    	; 0x3dc8 <STEPPER_move+0x130>
    3cea:	15 c0       	rjmp	.+42     	; 0x3d16 <STEPPER_move+0x7e>
    3cec:	80 e0       	ldi	r24, 0x00	; 0
    3cee:	60 e0       	ldi	r22, 0x00	; 0
    3cf0:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <STEPPER_set_mode>
    3cf4:	80 e0       	ldi	r24, 0x00	; 0
    3cf6:	b7 01       	movw	r22, r14
    3cf8:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <STEPPER_set_accel>
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	69 2d       	mov	r22, r9
    3d00:	a8 01       	movw	r20, r16
    3d02:	1d c0       	rjmp	.+58     	; 0x3d3e <STEPPER_move+0xa6>
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	60 e0       	ldi	r22, 0x00	; 0
    3d08:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <STEPPER_set_mode>
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	b6 01       	movw	r22, r12
    3d10:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <STEPPER_set_accel>
    3d14:	11 c0       	rjmp	.+34     	; 0x3d38 <STEPPER_move+0xa0>
    3d16:	82 e0       	ldi	r24, 0x02	; 2
    3d18:	60 e0       	ldi	r22, 0x00	; 0
    3d1a:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <STEPPER_set_mode>
    3d1e:	80 e0       	ldi	r24, 0x00	; 0
    3d20:	b7 01       	movw	r22, r14
    3d22:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <STEPPER_set_accel>
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	b6 01       	movw	r22, r12
    3d2a:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <STEPPER_set_accel>
    3d2e:	80 e0       	ldi	r24, 0x00	; 0
    3d30:	69 2d       	mov	r22, r9
    3d32:	a8 01       	movw	r20, r16
    3d34:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <STEPPER_run>
    3d38:	81 e0       	ldi	r24, 0x01	; 1
    3d3a:	68 2d       	mov	r22, r8
    3d3c:	a5 01       	movw	r20, r10
    3d3e:	0e 94 4a 1f 	call	0x3e94	; 0x3e94 <STEPPER_run>
    3d42:	42 c0       	rjmp	.+132    	; 0x3dc8 <STEPPER_move+0x130>
    3d44:	ed b7       	in	r30, 0x3d	; 61
    3d46:	fe b7       	in	r31, 0x3e	; 62
    3d48:	39 97       	sbiw	r30, 0x09	; 9
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	fe bf       	out	0x3e, r31	; 62
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	ed bf       	out	0x3d, r30	; 61
    3d54:	6d b6       	in	r6, 0x3d	; 61
    3d56:	7e b6       	in	r7, 0x3e	; 62
    3d58:	08 94       	sec
    3d5a:	61 1c       	adc	r6, r1
    3d5c:	71 1c       	adc	r7, r1
    3d5e:	52 83       	std	Z+2, r21	; 0x02
    3d60:	41 83       	std	Z+1, r20	; 0x01
    3d62:	f3 01       	movw	r30, r6
    3d64:	b3 82       	std	Z+3, r11	; 0x03
    3d66:	a2 82       	std	Z+2, r10	; 0x02
    3d68:	d5 82       	std	Z+5, r13	; 0x05
    3d6a:	c4 82       	std	Z+4, r12	; 0x04
    3d6c:	96 83       	std	Z+6, r25	; 0x06
    3d6e:	88 8d       	ldd	r24, Y+24	; 0x18
    3d70:	99 8d       	ldd	r25, Y+25	; 0x19
    3d72:	90 87       	std	Z+8, r25	; 0x08
    3d74:	87 83       	std	Z+7, r24	; 0x07
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	49 2d       	mov	r20, r9
    3d7a:	c7 2e       	mov	r12, r23
    3d7c:	5d 01       	movw	r10, r26
    3d7e:	1a c0       	rjmp	.+52     	; 0x3db4 <STEPPER_move+0x11c>
    3d80:	ed b7       	in	r30, 0x3d	; 61
    3d82:	fe b7       	in	r31, 0x3e	; 62
    3d84:	39 97       	sbiw	r30, 0x09	; 9
    3d86:	0f b6       	in	r0, 0x3f	; 63
    3d88:	f8 94       	cli
    3d8a:	fe bf       	out	0x3e, r31	; 62
    3d8c:	0f be       	out	0x3f, r0	; 63
    3d8e:	ed bf       	out	0x3d, r30	; 61
    3d90:	ad b7       	in	r26, 0x3d	; 61
    3d92:	be b7       	in	r27, 0x3e	; 62
    3d94:	11 96       	adiw	r26, 0x01	; 1
    3d96:	52 83       	std	Z+2, r21	; 0x02
    3d98:	41 83       	std	Z+1, r20	; 0x01
    3d9a:	fd 01       	movw	r30, r26
    3d9c:	b3 82       	std	Z+3, r11	; 0x03
    3d9e:	a2 82       	std	Z+2, r10	; 0x02
    3da0:	d5 82       	std	Z+5, r13	; 0x05
    3da2:	c4 82       	std	Z+4, r12	; 0x04
    3da4:	96 83       	std	Z+6, r25	; 0x06
    3da6:	10 86       	std	Z+8, r1	; 0x08
    3da8:	17 82       	std	Z+7, r1	; 0x07
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	49 2d       	mov	r20, r9
    3dae:	c7 2e       	mov	r12, r23
    3db0:	aa 24       	eor	r10, r10
    3db2:	bb 24       	eor	r11, r11
    3db4:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <STEPPER_stepmode>
    3db8:	8d b7       	in	r24, 0x3d	; 61
    3dba:	9e b7       	in	r25, 0x3e	; 62
    3dbc:	09 96       	adiw	r24, 0x09	; 9
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	9e bf       	out	0x3e, r25	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	8d bf       	out	0x3d, r24	; 61
    3dc8:	cf 91       	pop	r28
    3dca:	df 91       	pop	r29
    3dcc:	1f 91       	pop	r17
    3dce:	0f 91       	pop	r16
    3dd0:	ff 90       	pop	r15
    3dd2:	ef 90       	pop	r14
    3dd4:	df 90       	pop	r13
    3dd6:	cf 90       	pop	r12
    3dd8:	bf 90       	pop	r11
    3dda:	af 90       	pop	r10
    3ddc:	9f 90       	pop	r9
    3dde:	8f 90       	pop	r8
    3de0:	7f 90       	pop	r7
    3de2:	6f 90       	pop	r6
    3de4:	08 95       	ret

00003de6 <STEPPER_open>:
    3de6:	0e 94 7d 28 	call	0x50fa	; 0x50fa <__STEPPER_init>
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	80 93 e4 07 	sts	0x07E4, r24
    3df0:	ee ea       	ldi	r30, 0xAE	; 174
    3df2:	f7 e0       	ldi	r31, 0x07	; 7
    3df4:	11 92       	st	Z+, r1
    3df6:	11 92       	st	Z+, r1
    3df8:	11 82       	std	Z+1, r1	; 0x01
    3dfa:	10 82       	st	Z, r1
    3dfc:	32 96       	adiw	r30, 0x02	; 2
    3dfe:	11 82       	std	Z+1, r1	; 0x01
    3e00:	10 82       	st	Z, r1
    3e02:	32 96       	adiw	r30, 0x02	; 2
    3e04:	11 82       	std	Z+1, r1	; 0x01
    3e06:	10 82       	st	Z, r1
    3e08:	32 96       	adiw	r30, 0x02	; 2
    3e0a:	11 82       	std	Z+1, r1	; 0x01
    3e0c:	10 82       	st	Z, r1
    3e0e:	32 96       	adiw	r30, 0x02	; 2
    3e10:	11 82       	std	Z+1, r1	; 0x01
    3e12:	10 82       	st	Z, r1
    3e14:	32 96       	adiw	r30, 0x02	; 2
    3e16:	11 82       	std	Z+1, r1	; 0x01
    3e18:	10 82       	st	Z, r1
    3e1a:	32 96       	adiw	r30, 0x02	; 2
    3e1c:	11 82       	std	Z+1, r1	; 0x01
    3e1e:	10 82       	st	Z, r1
    3e20:	32 96       	adiw	r30, 0x02	; 2
    3e22:	11 82       	std	Z+1, r1	; 0x01
    3e24:	10 82       	st	Z, r1
    3e26:	32 96       	adiw	r30, 0x02	; 2
    3e28:	11 82       	std	Z+1, r1	; 0x01
    3e2a:	10 82       	st	Z, r1
    3e2c:	32 96       	adiw	r30, 0x02	; 2
    3e2e:	11 82       	std	Z+1, r1	; 0x01
    3e30:	10 82       	st	Z, r1
    3e32:	32 96       	adiw	r30, 0x02	; 2
    3e34:	11 82       	std	Z+1, r1	; 0x01
    3e36:	10 82       	st	Z, r1
    3e38:	32 96       	adiw	r30, 0x02	; 2
    3e3a:	11 82       	std	Z+1, r1	; 0x01
    3e3c:	10 82       	st	Z, r1
    3e3e:	36 96       	adiw	r30, 0x06	; 6
    3e40:	11 92       	st	Z+, r1
    3e42:	11 92       	st	Z+, r1
    3e44:	11 92       	st	Z+, r1
    3e46:	10 82       	st	Z, r1
    3e48:	32 96       	adiw	r30, 0x02	; 2
    3e4a:	11 92       	st	Z+, r1
    3e4c:	11 92       	st	Z+, r1
    3e4e:	11 92       	st	Z+, r1
    3e50:	11 92       	st	Z+, r1
    3e52:	11 92       	st	Z+, r1
    3e54:	11 92       	st	Z+, r1
    3e56:	11 92       	st	Z+, r1
    3e58:	11 82       	std	Z+1, r1	; 0x01
    3e5a:	10 82       	st	Z, r1
    3e5c:	32 96       	adiw	r30, 0x02	; 2
    3e5e:	11 82       	std	Z+1, r1	; 0x01
    3e60:	10 82       	st	Z, r1
    3e62:	32 96       	adiw	r30, 0x02	; 2
    3e64:	11 82       	std	Z+1, r1	; 0x01
    3e66:	10 82       	st	Z, r1
    3e68:	32 96       	adiw	r30, 0x02	; 2
    3e6a:	11 82       	std	Z+1, r1	; 0x01
    3e6c:	10 82       	st	Z, r1
    3e6e:	76 97       	sbiw	r30, 0x16	; 22
    3e70:	11 82       	std	Z+1, r1	; 0x01
    3e72:	10 82       	st	Z, r1
    3e74:	32 96       	adiw	r30, 0x02	; 2
    3e76:	11 82       	std	Z+1, r1	; 0x01
    3e78:	10 82       	st	Z, r1
    3e7a:	10 92 e3 07 	sts	0x07E3, r1
    3e7e:	10 92 e2 07 	sts	0x07E2, r1
    3e82:	10 92 e4 07 	sts	0x07E4, r1
    3e86:	87 e0       	ldi	r24, 0x07	; 7
    3e88:	61 e0       	ldi	r22, 0x01	; 1
    3e8a:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    3e8e:	87 e0       	ldi	r24, 0x07	; 7
    3e90:	91 e0       	ldi	r25, 0x01	; 1
    3e92:	08 95       	ret

00003e94 <STEPPER_run>:
    3e94:	ef 92       	push	r14
    3e96:	ff 92       	push	r15
    3e98:	0f 93       	push	r16
    3e9a:	1f 93       	push	r17
    3e9c:	18 2f       	mov	r17, r24
    3e9e:	06 2f       	mov	r16, r22
    3ea0:	7a 01       	movw	r14, r20
    3ea2:	60 e0       	ldi	r22, 0x00	; 0
    3ea4:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <STEPPER_set_mode>
    3ea8:	81 2f       	mov	r24, r17
    3eaa:	60 2f       	mov	r22, r16
    3eac:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_set_dir>
    3eb0:	81 2f       	mov	r24, r17
    3eb2:	b7 01       	movw	r22, r14
    3eb4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <STEPPER_set_speed>
    3eb8:	1f 91       	pop	r17
    3eba:	0f 91       	pop	r16
    3ebc:	ff 90       	pop	r15
    3ebe:	ef 90       	pop	r14
    3ec0:	08 95       	ret

00003ec2 <STEPPER_set_accel>:
    3ec2:	48 2f       	mov	r20, r24
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	80 93 e4 07 	sts	0x07E4, r24
    3eca:	cb 01       	movw	r24, r22
    3ecc:	23 e0       	ldi	r18, 0x03	; 3
    3ece:	69 3e       	cpi	r22, 0xE9	; 233
    3ed0:	72 07       	cpc	r23, r18
    3ed2:	10 f0       	brcs	.+4      	; 0x3ed8 <STEPPER_set_accel+0x16>
    3ed4:	88 ee       	ldi	r24, 0xE8	; 232
    3ed6:	93 e0       	ldi	r25, 0x03	; 3
    3ed8:	41 30       	cpi	r20, 0x01	; 1
    3eda:	71 f0       	breq	.+28     	; 0x3ef8 <STEPPER_set_accel+0x36>
    3edc:	41 30       	cpi	r20, 0x01	; 1
    3ede:	18 f0       	brcs	.+6      	; 0x3ee6 <STEPPER_set_accel+0x24>
    3ee0:	42 30       	cpi	r20, 0x02	; 2
    3ee2:	71 f4       	brne	.+28     	; 0x3f00 <STEPPER_set_accel+0x3e>
    3ee4:	05 c0       	rjmp	.+10     	; 0x3ef0 <STEPPER_set_accel+0x2e>
    3ee6:	90 93 b9 07 	sts	0x07B9, r25
    3eea:	80 93 b8 07 	sts	0x07B8, r24
    3eee:	08 c0       	rjmp	.+16     	; 0x3f00 <STEPPER_set_accel+0x3e>
    3ef0:	90 93 b9 07 	sts	0x07B9, r25
    3ef4:	80 93 b8 07 	sts	0x07B8, r24
    3ef8:	90 93 bb 07 	sts	0x07BB, r25
    3efc:	80 93 ba 07 	sts	0x07BA, r24
    3f00:	10 92 e4 07 	sts	0x07E4, r1
    3f04:	08 95       	ret

00003f06 <STEPPER_set_dir>:
    3f06:	98 2f       	mov	r25, r24
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	80 93 e4 07 	sts	0x07E4, r24
    3f0e:	91 30       	cpi	r25, 0x01	; 1
    3f10:	51 f0       	breq	.+20     	; 0x3f26 <STEPPER_set_dir+0x20>
    3f12:	91 30       	cpi	r25, 0x01	; 1
    3f14:	18 f0       	brcs	.+6      	; 0x3f1c <STEPPER_set_dir+0x16>
    3f16:	92 30       	cpi	r25, 0x02	; 2
    3f18:	41 f4       	brne	.+16     	; 0x3f2a <STEPPER_set_dir+0x24>
    3f1a:	03 c0       	rjmp	.+6      	; 0x3f22 <STEPPER_set_dir+0x1c>
    3f1c:	60 93 d1 07 	sts	0x07D1, r22
    3f20:	04 c0       	rjmp	.+8      	; 0x3f2a <STEPPER_set_dir+0x24>
    3f22:	60 93 d1 07 	sts	0x07D1, r22
    3f26:	60 93 d2 07 	sts	0x07D2, r22
    3f2a:	10 92 e4 07 	sts	0x07E4, r1
    3f2e:	08 95       	ret

00003f30 <STEPPER_set_mode>:
    3f30:	98 2f       	mov	r25, r24
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	80 93 e4 07 	sts	0x07E4, r24
    3f38:	91 30       	cpi	r25, 0x01	; 1
    3f3a:	51 f0       	breq	.+20     	; 0x3f50 <STEPPER_set_mode+0x20>
    3f3c:	91 30       	cpi	r25, 0x01	; 1
    3f3e:	18 f0       	brcs	.+6      	; 0x3f46 <STEPPER_set_mode+0x16>
    3f40:	92 30       	cpi	r25, 0x02	; 2
    3f42:	41 f4       	brne	.+16     	; 0x3f54 <STEPPER_set_mode+0x24>
    3f44:	03 c0       	rjmp	.+6      	; 0x3f4c <STEPPER_set_mode+0x1c>
    3f46:	60 93 ae 07 	sts	0x07AE, r22
    3f4a:	04 c0       	rjmp	.+8      	; 0x3f54 <STEPPER_set_mode+0x24>
    3f4c:	60 93 ae 07 	sts	0x07AE, r22
    3f50:	60 93 af 07 	sts	0x07AF, r22
    3f54:	10 92 e4 07 	sts	0x07E4, r1
    3f58:	08 95       	ret

00003f5a <STEPPER_set_speed>:
    3f5a:	48 2f       	mov	r20, r24
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	80 93 e4 07 	sts	0x07E4, r24
    3f62:	cb 01       	movw	r24, r22
    3f64:	21 e0       	ldi	r18, 0x01	; 1
    3f66:	61 39       	cpi	r22, 0x91	; 145
    3f68:	72 07       	cpc	r23, r18
    3f6a:	10 f0       	brcs	.+4      	; 0x3f70 <STEPPER_set_speed+0x16>
    3f6c:	80 e9       	ldi	r24, 0x90	; 144
    3f6e:	91 e0       	ldi	r25, 0x01	; 1
    3f70:	41 30       	cpi	r20, 0x01	; 1
    3f72:	71 f0       	breq	.+28     	; 0x3f90 <STEPPER_set_speed+0x36>
    3f74:	41 30       	cpi	r20, 0x01	; 1
    3f76:	18 f0       	brcs	.+6      	; 0x3f7e <STEPPER_set_speed+0x24>
    3f78:	42 30       	cpi	r20, 0x02	; 2
    3f7a:	71 f4       	brne	.+28     	; 0x3f98 <STEPPER_set_speed+0x3e>
    3f7c:	05 c0       	rjmp	.+10     	; 0x3f88 <STEPPER_set_speed+0x2e>
    3f7e:	90 93 b1 07 	sts	0x07B1, r25
    3f82:	80 93 b0 07 	sts	0x07B0, r24
    3f86:	08 c0       	rjmp	.+16     	; 0x3f98 <STEPPER_set_speed+0x3e>
    3f88:	90 93 b1 07 	sts	0x07B1, r25
    3f8c:	80 93 b0 07 	sts	0x07B0, r24
    3f90:	90 93 b3 07 	sts	0x07B3, r25
    3f94:	80 93 b2 07 	sts	0x07B2, r24
    3f98:	10 92 e4 07 	sts	0x07E4, r1
    3f9c:	08 95       	ret

00003f9e <STEPPER_set_steps>:
    3f9e:	98 2f       	mov	r25, r24
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	80 93 e4 07 	sts	0x07E4, r24
    3fa6:	91 30       	cpi	r25, 0x01	; 1
    3fa8:	71 f0       	breq	.+28     	; 0x3fc6 <STEPPER_set_steps+0x28>
    3faa:	91 30       	cpi	r25, 0x01	; 1
    3fac:	18 f0       	brcs	.+6      	; 0x3fb4 <STEPPER_set_steps+0x16>
    3fae:	92 30       	cpi	r25, 0x02	; 2
    3fb0:	71 f4       	brne	.+28     	; 0x3fce <STEPPER_set_steps+0x30>
    3fb2:	05 c0       	rjmp	.+10     	; 0x3fbe <STEPPER_set_steps+0x20>
    3fb4:	70 93 c1 07 	sts	0x07C1, r23
    3fb8:	60 93 c0 07 	sts	0x07C0, r22
    3fbc:	08 c0       	rjmp	.+16     	; 0x3fce <STEPPER_set_steps+0x30>
    3fbe:	70 93 c1 07 	sts	0x07C1, r23
    3fc2:	60 93 c0 07 	sts	0x07C0, r22
    3fc6:	70 93 c3 07 	sts	0x07C3, r23
    3fca:	60 93 c2 07 	sts	0x07C2, r22
    3fce:	10 92 e4 07 	sts	0x07E4, r1
    3fd2:	08 95       	ret

00003fd4 <STEPPER_step>:
    3fd4:	8f 92       	push	r8
    3fd6:	9f 92       	push	r9
    3fd8:	af 92       	push	r10
    3fda:	bf 92       	push	r11
    3fdc:	cf 92       	push	r12
    3fde:	df 92       	push	r13
    3fe0:	ef 92       	push	r14
    3fe2:	ff 92       	push	r15
    3fe4:	0f 93       	push	r16
    3fe6:	1f 93       	push	r17
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
    3fec:	18 2f       	mov	r17, r24
    3fee:	f6 2e       	mov	r15, r22
    3ff0:	5a 01       	movw	r10, r20
    3ff2:	49 01       	movw	r8, r18
    3ff4:	e6 01       	movw	r28, r12
    3ff6:	61 e0       	ldi	r22, 0x01	; 1
    3ff8:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <STEPPER_set_mode>
    3ffc:	81 2f       	mov	r24, r17
    3ffe:	b5 01       	movw	r22, r10
    4000:	a4 01       	movw	r20, r8
    4002:	0e 94 9c 28 	call	0x5138	; 0x5138 <STEPPER_setup_decels>
    4006:	81 2f       	mov	r24, r17
    4008:	6f 2d       	mov	r22, r15
    400a:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_set_dir>
    400e:	81 2f       	mov	r24, r17
    4010:	60 2f       	mov	r22, r16
    4012:	0e 94 87 28 	call	0x510e	; 0x510e <STEPPER_set_stop_mode>
    4016:	81 2f       	mov	r24, r17
    4018:	b5 01       	movw	r22, r10
    401a:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <STEPPER_set_steps>
    401e:	c1 14       	cp	r12, r1
    4020:	d1 04       	cpc	r13, r1
    4022:	99 f0       	breq	.+38     	; 0x404a <STEPPER_step+0x76>
    4024:	11 30       	cpi	r17, 0x01	; 1
    4026:	49 f0       	breq	.+18     	; 0x403a <STEPPER_step+0x66>
    4028:	11 30       	cpi	r17, 0x01	; 1
    402a:	18 f0       	brcs	.+6      	; 0x4032 <STEPPER_step+0x5e>
    402c:	12 30       	cpi	r17, 0x02	; 2
    402e:	69 f4       	brne	.+26     	; 0x404a <STEPPER_step+0x76>
    4030:	06 c0       	rjmp	.+12     	; 0x403e <STEPPER_step+0x6a>
    4032:	18 82       	st	Y, r1
    4034:	10 92 e0 07 	sts	0x07E0, r1
    4038:	08 c0       	rjmp	.+16     	; 0x404a <STEPPER_step+0x76>
    403a:	19 82       	std	Y+1, r1	; 0x01
    403c:	04 c0       	rjmp	.+8      	; 0x4046 <STEPPER_step+0x72>
    403e:	18 82       	st	Y, r1
    4040:	19 82       	std	Y+1, r1	; 0x01
    4042:	10 92 e0 07 	sts	0x07E0, r1
    4046:	10 92 e1 07 	sts	0x07E1, r1
    404a:	d0 93 e3 07 	sts	0x07E3, r29
    404e:	c0 93 e2 07 	sts	0x07E2, r28
    4052:	ee 20       	and	r14, r14
    4054:	b9 f5       	brne	.+110    	; 0x40c4 <STEPPER_step+0xf0>
    4056:	88 e7       	ldi	r24, 0x78	; 120
    4058:	94 e0       	ldi	r25, 0x04	; 4
    405a:	90 93 e3 07 	sts	0x07E3, r25
    405e:	80 93 e2 07 	sts	0x07E2, r24
    4062:	81 2f       	mov	r24, r17
    4064:	b4 01       	movw	r22, r8
    4066:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <STEPPER_set_speed>
    406a:	81 2f       	mov	r24, r17
    406c:	0e 94 68 28 	call	0x50d0	; 0x50d0 <STEPPER_go>
    4070:	11 30       	cpi	r17, 0x01	; 1
    4072:	71 f0       	breq	.+28     	; 0x4090 <STEPPER_step+0xbc>
    4074:	11 30       	cpi	r17, 0x01	; 1
    4076:	18 f0       	brcs	.+6      	; 0x407e <STEPPER_step+0xaa>
    4078:	12 30       	cpi	r17, 0x02	; 2
    407a:	59 f5       	brne	.+86     	; 0x40d2 <STEPPER_step+0xfe>
    407c:	12 c0       	rjmp	.+36     	; 0x40a2 <STEPPER_step+0xce>
    407e:	10 92 78 04 	sts	0x0478, r1
    4082:	10 92 e0 07 	sts	0x07E0, r1
    4086:	80 91 78 04 	lds	r24, 0x0478
    408a:	88 23       	and	r24, r24
    408c:	e1 f3       	breq	.-8      	; 0x4086 <STEPPER_step+0xb2>
    408e:	21 c0       	rjmp	.+66     	; 0x40d2 <STEPPER_step+0xfe>
    4090:	10 92 79 04 	sts	0x0479, r1
    4094:	10 92 e1 07 	sts	0x07E1, r1
    4098:	80 91 79 04 	lds	r24, 0x0479
    409c:	88 23       	and	r24, r24
    409e:	e1 f3       	breq	.-8      	; 0x4098 <STEPPER_step+0xc4>
    40a0:	18 c0       	rjmp	.+48     	; 0x40d2 <STEPPER_step+0xfe>
    40a2:	10 92 78 04 	sts	0x0478, r1
    40a6:	10 92 79 04 	sts	0x0479, r1
    40aa:	10 92 e0 07 	sts	0x07E0, r1
    40ae:	10 92 e1 07 	sts	0x07E1, r1
    40b2:	80 91 78 04 	lds	r24, 0x0478
    40b6:	88 23       	and	r24, r24
    40b8:	e1 f3       	breq	.-8      	; 0x40b2 <STEPPER_step+0xde>
    40ba:	80 91 79 04 	lds	r24, 0x0479
    40be:	88 23       	and	r24, r24
    40c0:	c1 f3       	breq	.-16     	; 0x40b2 <STEPPER_step+0xde>
    40c2:	07 c0       	rjmp	.+14     	; 0x40d2 <STEPPER_step+0xfe>
    40c4:	81 2f       	mov	r24, r17
    40c6:	b4 01       	movw	r22, r8
    40c8:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <STEPPER_set_speed>
    40cc:	81 2f       	mov	r24, r17
    40ce:	0e 94 68 28 	call	0x50d0	; 0x50d0 <STEPPER_go>
    40d2:	df 91       	pop	r29
    40d4:	cf 91       	pop	r28
    40d6:	1f 91       	pop	r17
    40d8:	0f 91       	pop	r16
    40da:	ff 90       	pop	r15
    40dc:	ef 90       	pop	r14
    40de:	df 90       	pop	r13
    40e0:	cf 90       	pop	r12
    40e2:	bf 90       	pop	r11
    40e4:	af 90       	pop	r10
    40e6:	9f 90       	pop	r9
    40e8:	8f 90       	pop	r8
    40ea:	08 95       	ret

000040ec <STEPPER_stop>:
    40ec:	0f 93       	push	r16
    40ee:	1f 93       	push	r17
    40f0:	18 2f       	mov	r17, r24
    40f2:	06 2f       	mov	r16, r22
    40f4:	66 23       	and	r22, r22
    40f6:	49 f4       	brne	.+18     	; 0x410a <STEPPER_stop+0x1e>
    40f8:	60 e0       	ldi	r22, 0x00	; 0
    40fa:	70 e0       	ldi	r23, 0x00	; 0
    40fc:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <STEPPER_set_speed>
    4100:	81 2f       	mov	r24, r17
    4102:	60 e0       	ldi	r22, 0x00	; 0
    4104:	70 e0       	ldi	r23, 0x00	; 0
    4106:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <STEPPER_set_steps>
    410a:	81 e0       	ldi	r24, 0x01	; 1
    410c:	80 93 e4 07 	sts	0x07E4, r24
    4110:	11 30       	cpi	r17, 0x01	; 1
    4112:	51 f0       	breq	.+20     	; 0x4128 <STEPPER_stop+0x3c>
    4114:	11 30       	cpi	r17, 0x01	; 1
    4116:	18 f0       	brcs	.+6      	; 0x411e <STEPPER_stop+0x32>
    4118:	12 30       	cpi	r17, 0x02	; 2
    411a:	41 f4       	brne	.+16     	; 0x412c <STEPPER_stop+0x40>
    411c:	03 c0       	rjmp	.+6      	; 0x4124 <STEPPER_stop+0x38>
    411e:	00 93 cc 07 	sts	0x07CC, r16
    4122:	04 c0       	rjmp	.+8      	; 0x412c <STEPPER_stop+0x40>
    4124:	00 93 cc 07 	sts	0x07CC, r16
    4128:	00 93 cd 07 	sts	0x07CD, r16
    412c:	10 92 e4 07 	sts	0x07E4, r1
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	08 95       	ret

00004136 <STEPPER_wait_and_then>:
    4136:	cf 92       	push	r12
    4138:	df 92       	push	r13
    413a:	ef 92       	push	r14
    413c:	ff 92       	push	r15
    413e:	0f 93       	push	r16
    4140:	1f 93       	push	r17
    4142:	df 93       	push	r29
    4144:	cf 93       	push	r28
    4146:	cd b7       	in	r28, 0x3d	; 61
    4148:	de b7       	in	r29, 0x3e	; 62
    414a:	8b 85       	ldd	r24, Y+11	; 0x0b
    414c:	81 30       	cpi	r24, 0x01	; 1
    414e:	61 f0       	breq	.+24     	; 0x4168 <STEPPER_wait_and_then+0x32>
    4150:	81 30       	cpi	r24, 0x01	; 1
    4152:	18 f0       	brcs	.+6      	; 0x415a <STEPPER_wait_and_then+0x24>
    4154:	82 30       	cpi	r24, 0x02	; 2
    4156:	a1 f5       	brne	.+104    	; 0x41c0 <STEPPER_wait_and_then+0x8a>
    4158:	11 c0       	rjmp	.+34     	; 0x417c <STEPPER_wait_and_then+0x46>
    415a:	ec 85       	ldd	r30, Y+12	; 0x0c
    415c:	fd 85       	ldd	r31, Y+13	; 0x0d
    415e:	80 91 e5 07 	lds	r24, 0x07E5
    4162:	88 23       	and	r24, r24
    4164:	e1 f3       	breq	.-8      	; 0x415e <STEPPER_wait_and_then+0x28>
    4166:	06 c0       	rjmp	.+12     	; 0x4174 <STEPPER_wait_and_then+0x3e>
    4168:	ec 85       	ldd	r30, Y+12	; 0x0c
    416a:	fd 85       	ldd	r31, Y+13	; 0x0d
    416c:	80 91 e6 07 	lds	r24, 0x07E6
    4170:	88 23       	and	r24, r24
    4172:	e1 f3       	breq	.-8      	; 0x416c <STEPPER_wait_and_then+0x36>
    4174:	30 97       	sbiw	r30, 0x00	; 0
    4176:	21 f1       	breq	.+72     	; 0x41c0 <STEPPER_wait_and_then+0x8a>
    4178:	09 95       	icall
    417a:	22 c0       	rjmp	.+68     	; 0x41c0 <STEPPER_wait_and_then+0x8a>
    417c:	cc 84       	ldd	r12, Y+12	; 0x0c
    417e:	dd 84       	ldd	r13, Y+13	; 0x0d
    4180:	ee 84       	ldd	r14, Y+14	; 0x0e
    4182:	ff 84       	ldd	r15, Y+15	; 0x0f
    4184:	00 e0       	ldi	r16, 0x00	; 0
    4186:	10 e0       	ldi	r17, 0x00	; 0
    4188:	00 23       	and	r16, r16
    418a:	51 f4       	brne	.+20     	; 0x41a0 <STEPPER_wait_and_then+0x6a>
    418c:	80 91 e5 07 	lds	r24, 0x07E5
    4190:	88 23       	and	r24, r24
    4192:	31 f0       	breq	.+12     	; 0x41a0 <STEPPER_wait_and_then+0x6a>
    4194:	c1 14       	cp	r12, r1
    4196:	d1 04       	cpc	r13, r1
    4198:	11 f0       	breq	.+4      	; 0x419e <STEPPER_wait_and_then+0x68>
    419a:	f6 01       	movw	r30, r12
    419c:	09 95       	icall
    419e:	01 e0       	ldi	r16, 0x01	; 1
    41a0:	11 23       	and	r17, r17
    41a2:	51 f4       	brne	.+20     	; 0x41b8 <STEPPER_wait_and_then+0x82>
    41a4:	80 91 e6 07 	lds	r24, 0x07E6
    41a8:	88 23       	and	r24, r24
    41aa:	31 f0       	breq	.+12     	; 0x41b8 <STEPPER_wait_and_then+0x82>
    41ac:	e1 14       	cp	r14, r1
    41ae:	f1 04       	cpc	r15, r1
    41b0:	11 f0       	breq	.+4      	; 0x41b6 <STEPPER_wait_and_then+0x80>
    41b2:	f7 01       	movw	r30, r14
    41b4:	09 95       	icall
    41b6:	11 e0       	ldi	r17, 0x01	; 1
    41b8:	00 23       	and	r16, r16
    41ba:	31 f3       	breq	.-52     	; 0x4188 <STEPPER_wait_and_then+0x52>
    41bc:	11 23       	and	r17, r17
    41be:	21 f3       	breq	.-56     	; 0x4188 <STEPPER_wait_and_then+0x52>
    41c0:	cf 91       	pop	r28
    41c2:	df 91       	pop	r29
    41c4:	1f 91       	pop	r17
    41c6:	0f 91       	pop	r16
    41c8:	ff 90       	pop	r15
    41ca:	ef 90       	pop	r14
    41cc:	df 90       	pop	r13
    41ce:	cf 90       	pop	r12
    41d0:	08 95       	ret

000041d2 <SYS_get_state>:
    41d2:	e8 2f       	mov	r30, r24
    41d4:	f0 e0       	ldi	r31, 0x00	; 0
    41d6:	e3 31       	cpi	r30, 0x13	; 19
    41d8:	f1 05       	cpc	r31, r1
    41da:	40 f4       	brcc	.+16     	; 0x41ec <SYS_get_state+0x1a>
    41dc:	e2 5c       	subi	r30, 0xC2	; 194
    41de:	ff 4f       	sbci	r31, 0xFF	; 255
    41e0:	ee 0f       	add	r30, r30
    41e2:	ff 1f       	adc	r31, r31
    41e4:	05 90       	lpm	r0, Z+
    41e6:	f4 91       	lpm	r31, Z+
    41e8:	e0 2d       	mov	r30, r0
    41ea:	09 94       	ijmp
    41ec:	80 e0       	ldi	r24, 0x00	; 0
    41ee:	08 95       	ret
    41f0:	80 91 e7 07 	lds	r24, 0x07E7
    41f4:	08 95       	ret
    41f6:	80 91 e8 07 	lds	r24, 0x07E8
    41fa:	08 95       	ret
    41fc:	80 91 e9 07 	lds	r24, 0x07E9
    4200:	08 95       	ret
    4202:	80 91 ea 07 	lds	r24, 0x07EA
    4206:	08 95       	ret
    4208:	80 91 eb 07 	lds	r24, 0x07EB
    420c:	08 95       	ret
    420e:	80 91 ed 07 	lds	r24, 0x07ED
    4212:	08 95       	ret
    4214:	80 91 ec 07 	lds	r24, 0x07EC
    4218:	08 95       	ret
    421a:	80 91 ee 07 	lds	r24, 0x07EE
    421e:	08 95       	ret
    4220:	80 91 ef 07 	lds	r24, 0x07EF
    4224:	08 95       	ret
    4226:	80 91 f0 07 	lds	r24, 0x07F0
    422a:	08 95       	ret
    422c:	80 91 f1 07 	lds	r24, 0x07F1
    4230:	08 95       	ret
    4232:	80 91 f2 07 	lds	r24, 0x07F2
    4236:	08 95       	ret
    4238:	80 91 f3 07 	lds	r24, 0x07F3
    423c:	08 95       	ret
    423e:	80 91 f4 07 	lds	r24, 0x07F4
    4242:	08 95       	ret
    4244:	80 91 f5 07 	lds	r24, 0x07F5
    4248:	08 95       	ret
    424a:	80 91 f6 07 	lds	r24, 0x07F6
    424e:	08 95       	ret
    4250:	80 91 f7 07 	lds	r24, 0x07F7
    4254:	08 95       	ret
    4256:	80 91 f8 07 	lds	r24, 0x07F8
    425a:	08 95       	ret
    425c:	80 91 f9 07 	lds	r24, 0x07F9
    4260:	08 95       	ret

00004262 <SYS_set_state>:
    4262:	e8 2f       	mov	r30, r24
    4264:	f0 e0       	ldi	r31, 0x00	; 0
    4266:	e3 31       	cpi	r30, 0x13	; 19
    4268:	f1 05       	cpc	r31, r1
    426a:	08 f0       	brcs	.+2      	; 0x426e <SYS_set_state+0xc>
    426c:	40 c0       	rjmp	.+128    	; 0x42ee <SYS_set_state+0x8c>
    426e:	ef 5a       	subi	r30, 0xAF	; 175
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	ee 0f       	add	r30, r30
    4274:	ff 1f       	adc	r31, r31
    4276:	05 90       	lpm	r0, Z+
    4278:	f4 91       	lpm	r31, Z+
    427a:	e0 2d       	mov	r30, r0
    427c:	09 94       	ijmp
    427e:	60 93 e7 07 	sts	0x07E7, r22
    4282:	08 95       	ret
    4284:	60 93 e8 07 	sts	0x07E8, r22
    4288:	08 95       	ret
    428a:	60 93 e9 07 	sts	0x07E9, r22
    428e:	08 95       	ret
    4290:	60 93 ea 07 	sts	0x07EA, r22
    4294:	08 95       	ret
    4296:	60 93 eb 07 	sts	0x07EB, r22
    429a:	08 95       	ret
    429c:	60 93 ed 07 	sts	0x07ED, r22
    42a0:	08 95       	ret
    42a2:	60 93 ec 07 	sts	0x07EC, r22
    42a6:	08 95       	ret
    42a8:	60 93 ee 07 	sts	0x07EE, r22
    42ac:	08 95       	ret
    42ae:	60 93 ef 07 	sts	0x07EF, r22
    42b2:	08 95       	ret
    42b4:	60 93 f0 07 	sts	0x07F0, r22
    42b8:	08 95       	ret
    42ba:	60 93 f1 07 	sts	0x07F1, r22
    42be:	08 95       	ret
    42c0:	60 93 f2 07 	sts	0x07F2, r22
    42c4:	08 95       	ret
    42c6:	60 93 f3 07 	sts	0x07F3, r22
    42ca:	08 95       	ret
    42cc:	60 93 f4 07 	sts	0x07F4, r22
    42d0:	08 95       	ret
    42d2:	60 93 f5 07 	sts	0x07F5, r22
    42d6:	08 95       	ret
    42d8:	60 93 f6 07 	sts	0x07F6, r22
    42dc:	08 95       	ret
    42de:	60 93 f7 07 	sts	0x07F7, r22
    42e2:	08 95       	ret
    42e4:	60 93 f8 07 	sts	0x07F8, r22
    42e8:	08 95       	ret
    42ea:	60 93 f7 07 	sts	0x07F7, r22
    42ee:	08 95       	ret

000042f0 <ATTINY_get_sensors>:
    42f0:	0f 93       	push	r16
    42f2:	1f 93       	push	r17
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    42fa:	81 30       	cpi	r24, 0x01	; 1
    42fc:	11 f0       	breq	.+4      	; 0x4302 <ATTINY_get_sensors+0x12>
    42fe:	00 e0       	ldi	r16, 0x00	; 0
    4300:	24 c0       	rjmp	.+72     	; 0x434a <ATTINY_get_sensors+0x5a>
    4302:	87 e0       	ldi	r24, 0x07	; 7
    4304:	0e 94 86 1c 	call	0x390c	; 0x390c <SPI_set_slave_addr>
    4308:	82 e0       	ldi	r24, 0x02	; 2
    430a:	6a e0       	ldi	r22, 0x0A	; 10
    430c:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <SPI_transmit>
    4310:	82 e0       	ldi	r24, 0x02	; 2
    4312:	62 eb       	ldi	r22, 0xB2	; 178
    4314:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <SPI_transmit>
    4318:	18 ec       	ldi	r17, 0xC8	; 200
    431a:	81 2f       	mov	r24, r17
    431c:	8a 95       	dec	r24
    431e:	f1 f7       	brne	.-4      	; 0x431c <ATTINY_get_sensors+0x2c>
    4320:	82 e0       	ldi	r24, 0x02	; 2
    4322:	60 e0       	ldi	r22, 0x00	; 0
    4324:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <SPI_receive>
    4328:	08 2f       	mov	r16, r24
    432a:	81 2f       	mov	r24, r17
    432c:	8a 95       	dec	r24
    432e:	f1 f7       	brne	.-4      	; 0x432c <ATTINY_get_sensors+0x3c>
    4330:	82 e0       	ldi	r24, 0x02	; 2
    4332:	60 e0       	ldi	r22, 0x00	; 0
    4334:	0e 94 53 27 	call	0x4ea6	; 0x4ea6 <SPI_receive>
    4338:	1a 95       	dec	r17
    433a:	f1 f7       	brne	.-4      	; 0x4338 <ATTINY_get_sensors+0x48>
    433c:	87 e0       	ldi	r24, 0x07	; 7
    433e:	0e 94 86 1c 	call	0x390c	; 0x390c <SPI_set_slave_addr>
    4342:	88 e8       	ldi	r24, 0x88	; 136
    4344:	93 e1       	ldi	r25, 0x13	; 19
    4346:	01 97       	sbiw	r24, 0x01	; 1
    4348:	f1 f7       	brne	.-4      	; 0x4346 <ATTINY_get_sensors+0x56>
    434a:	80 2f       	mov	r24, r16
    434c:	1f 91       	pop	r17
    434e:	0f 91       	pop	r16
    4350:	08 95       	ret

00004352 <ATTINY_get_SW_state>:
    4352:	1f 93       	push	r17
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	18 2f       	mov	r17, r24
    435a:	80 91 7b 04 	lds	r24, 0x047B
    435e:	88 23       	and	r24, r24
    4360:	41 f0       	breq	.+16     	; 0x4372 <ATTINY_get_SW_state+0x20>
    4362:	80 91 85 04 	lds	r24, 0x0485
    4366:	88 23       	and	r24, r24
    4368:	99 f0       	breq	.+38     	; 0x4390 <ATTINY_get_SW_state+0x3e>
    436a:	10 92 7b 04 	sts	0x047B, r1
    436e:	10 92 85 04 	sts	0x0485, r1
    4372:	0e 94 78 21 	call	0x42f0	; 0x42f0 <ATTINY_get_sensors>
    4376:	80 93 7a 04 	sts	0x047A, r24
    437a:	8f e7       	ldi	r24, 0x7F	; 127
    437c:	94 e0       	ldi	r25, 0x04	; 4
    437e:	61 e0       	ldi	r22, 0x01	; 1
    4380:	40 e0       	ldi	r20, 0x00	; 0
    4382:	22 e3       	ldi	r18, 0x32	; 50
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	0e 94 67 22 	call	0x44ce	; 0x44ce <TMRSRVC_new>
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	80 93 7b 04 	sts	0x047B, r24
    4390:	90 91 7a 04 	lds	r25, 0x047A
    4394:	a1 2f       	mov	r26, r17
    4396:	b0 e0       	ldi	r27, 0x00	; 0
    4398:	ed 01       	movw	r28, r26
    439a:	ca 5f       	subi	r28, 0xFA	; 250
    439c:	db 4f       	sbci	r29, 0xFB	; 251
    439e:	88 81       	ld	r24, Y
    43a0:	88 23       	and	r24, r24
    43a2:	69 f0       	breq	.+26     	; 0x43be <ATTINY_get_SW_state+0x6c>
    43a4:	fd 01       	movw	r30, r26
    43a6:	e7 5f       	subi	r30, 0xF7	; 247
    43a8:	fb 4f       	sbci	r31, 0xFB	; 251
    43aa:	80 81       	ld	r24, Z
    43ac:	98 23       	and	r25, r24
    43ae:	c1 f0       	breq	.+48     	; 0x43e0 <ATTINY_get_SW_state+0x8e>
    43b0:	fd 01       	movw	r30, r26
    43b2:	e4 58       	subi	r30, 0x84	; 132
    43b4:	fb 4f       	sbci	r31, 0xFB	; 251
    43b6:	81 e0       	ldi	r24, 0x01	; 1
    43b8:	80 83       	st	Z, r24
    43ba:	18 82       	st	Y, r1
    43bc:	11 c0       	rjmp	.+34     	; 0x43e0 <ATTINY_get_SW_state+0x8e>
    43be:	fd 01       	movw	r30, r26
    43c0:	e4 58       	subi	r30, 0x84	; 132
    43c2:	fb 4f       	sbci	r31, 0xFB	; 251
    43c4:	80 81       	ld	r24, Z
    43c6:	81 11       	cpse	r24, r1
    43c8:	10 82       	st	Z, r1
    43ca:	fd 01       	movw	r30, r26
    43cc:	e7 5f       	subi	r30, 0xF7	; 247
    43ce:	fb 4f       	sbci	r31, 0xFB	; 251
    43d0:	80 81       	ld	r24, Z
    43d2:	98 23       	and	r25, r24
    43d4:	29 f4       	brne	.+10     	; 0x43e0 <ATTINY_get_SW_state+0x8e>
    43d6:	fd 01       	movw	r30, r26
    43d8:	ea 5f       	subi	r30, 0xFA	; 250
    43da:	fb 4f       	sbci	r31, 0xFB	; 251
    43dc:	81 e0       	ldi	r24, 0x01	; 1
    43de:	80 83       	st	Z, r24
    43e0:	a4 58       	subi	r26, 0x84	; 132
    43e2:	bb 4f       	sbci	r27, 0xFB	; 251
    43e4:	8c 91       	ld	r24, X
    43e6:	df 91       	pop	r29
    43e8:	cf 91       	pop	r28
    43ea:	1f 91       	pop	r17
    43ec:	08 95       	ret

000043ee <ATTINY_open>:
    43ee:	82 e0       	ldi	r24, 0x02	; 2
    43f0:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    43f4:	88 23       	and	r24, r24
    43f6:	19 f4       	brne	.+6      	; 0x43fe <ATTINY_open+0x10>
    43f8:	90 e0       	ldi	r25, 0x00	; 0
    43fa:	82 e0       	ldi	r24, 0x02	; 2
    43fc:	08 95       	ret
    43fe:	10 92 15 08 	sts	0x0815, r1
    4402:	10 92 14 08 	sts	0x0814, r1
    4406:	10 92 17 08 	sts	0x0817, r1
    440a:	10 92 16 08 	sts	0x0816, r1
    440e:	10 92 19 08 	sts	0x0819, r1
    4412:	10 92 18 08 	sts	0x0818, r1
    4416:	10 92 1b 08 	sts	0x081B, r1
    441a:	10 92 1a 08 	sts	0x081A, r1
    441e:	10 92 1d 08 	sts	0x081D, r1
    4422:	10 92 1c 08 	sts	0x081C, r1
    4426:	80 e9       	ldi	r24, 0x90	; 144
    4428:	91 e0       	ldi	r25, 0x01	; 1
    442a:	90 93 01 08 	sts	0x0801, r25
    442e:	80 93 00 08 	sts	0x0800, r24
    4432:	90 93 03 08 	sts	0x0803, r25
    4436:	80 93 02 08 	sts	0x0802, r24
    443a:	90 93 05 08 	sts	0x0805, r25
    443e:	80 93 04 08 	sts	0x0804, r24
    4442:	90 93 07 08 	sts	0x0807, r25
    4446:	80 93 06 08 	sts	0x0806, r24
    444a:	90 93 09 08 	sts	0x0809, r25
    444e:	80 93 08 08 	sts	0x0808, r24
    4452:	84 e3       	ldi	r24, 0x34	; 52
    4454:	98 e0       	ldi	r25, 0x08	; 8
    4456:	90 93 0b 08 	sts	0x080B, r25
    445a:	80 93 0a 08 	sts	0x080A, r24
    445e:	90 93 0d 08 	sts	0x080D, r25
    4462:	80 93 0c 08 	sts	0x080C, r24
    4466:	90 93 0f 08 	sts	0x080F, r25
    446a:	80 93 0e 08 	sts	0x080E, r24
    446e:	90 93 11 08 	sts	0x0811, r25
    4472:	80 93 10 08 	sts	0x0810, r24
    4476:	90 93 13 08 	sts	0x0813, r25
    447a:	80 93 12 08 	sts	0x0812, r24
    447e:	81 e0       	ldi	r24, 0x01	; 1
    4480:	61 e0       	ldi	r22, 0x01	; 1
    4482:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    4486:	91 e0       	ldi	r25, 0x01	; 1
    4488:	81 e0       	ldi	r24, 0x01	; 1
    448a:	08 95       	ret

0000448c <TMRSRVC_delay>:
    448c:	df 93       	push	r29
    448e:	cf 93       	push	r28
    4490:	cd b7       	in	r28, 0x3d	; 61
    4492:	de b7       	in	r29, 0x3e	; 62
    4494:	29 97       	sbiw	r28, 0x09	; 9
    4496:	0f b6       	in	r0, 0x3f	; 63
    4498:	f8 94       	cli
    449a:	de bf       	out	0x3e, r29	; 62
    449c:	0f be       	out	0x3f, r0	; 63
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	9c 01       	movw	r18, r24
    44a2:	ce 01       	movw	r24, r28
    44a4:	01 96       	adiw	r24, 0x01	; 1
    44a6:	61 e0       	ldi	r22, 0x01	; 1
    44a8:	40 e0       	ldi	r20, 0x00	; 0
    44aa:	0e 94 67 22 	call	0x44ce	; 0x44ce <TMRSRVC_new>
    44ae:	98 2f       	mov	r25, r24
    44b0:	88 23       	and	r24, r24
    44b2:	19 f4       	brne	.+6      	; 0x44ba <TMRSRVC_delay+0x2e>
    44b4:	8f 81       	ldd	r24, Y+7	; 0x07
    44b6:	88 23       	and	r24, r24
    44b8:	e9 f3       	breq	.-6      	; 0x44b4 <TMRSRVC_delay+0x28>
    44ba:	89 2f       	mov	r24, r25
    44bc:	29 96       	adiw	r28, 0x09	; 9
    44be:	0f b6       	in	r0, 0x3f	; 63
    44c0:	f8 94       	cli
    44c2:	de bf       	out	0x3e, r29	; 62
    44c4:	0f be       	out	0x3f, r0	; 63
    44c6:	cd bf       	out	0x3d, r28	; 61
    44c8:	cf 91       	pop	r28
    44ca:	df 91       	pop	r29
    44cc:	08 95       	ret

000044ce <TMRSRVC_new>:
    44ce:	ef 92       	push	r14
    44d0:	ff 92       	push	r15
    44d2:	0f 93       	push	r16
    44d4:	1f 93       	push	r17
    44d6:	cf 93       	push	r28
    44d8:	df 93       	push	r29
    44da:	ec 01       	movw	r28, r24
    44dc:	f6 2e       	mov	r15, r22
    44de:	e4 2e       	mov	r14, r20
    44e0:	89 01       	movw	r16, r18
    44e2:	88 e0       	ldi	r24, 0x08	; 8
    44e4:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    44e8:	81 30       	cpi	r24, 0x01	; 1
    44ea:	11 f0       	breq	.+4      	; 0x44f0 <TMRSRVC_new+0x22>
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	26 c0       	rjmp	.+76     	; 0x453c <TMRSRVC_new+0x6e>
    44f0:	84 e0       	ldi	r24, 0x04	; 4
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <malloc>
    44f8:	fc 01       	movw	r30, r24
    44fa:	00 97       	sbiw	r24, 0x00	; 0
    44fc:	11 f4       	brne	.+4      	; 0x4502 <TMRSRVC_new+0x34>
    44fe:	82 e0       	ldi	r24, 0x02	; 2
    4500:	1d c0       	rjmp	.+58     	; 0x453c <TMRSRVC_new+0x6e>
    4502:	f9 82       	std	Y+1, r15	; 0x01
    4504:	f0 fc       	sbrc	r15, 0
    4506:	1e 82       	std	Y+6, r1	; 0x06
    4508:	81 e0       	ldi	r24, 0x01	; 1
    450a:	e8 16       	cp	r14, r24
    450c:	19 f4       	brne	.+6      	; 0x4514 <TMRSRVC_new+0x46>
    450e:	89 81       	ldd	r24, Y+1	; 0x01
    4510:	84 60       	ori	r24, 0x04	; 4
    4512:	89 83       	std	Y+1, r24	; 0x01
    4514:	89 81       	ldd	r24, Y+1	; 0x01
    4516:	88 60       	ori	r24, 0x08	; 8
    4518:	89 83       	std	Y+1, r24	; 0x01
    451a:	1b 83       	std	Y+3, r17	; 0x03
    451c:	0a 83       	std	Y+2, r16	; 0x02
    451e:	1d 83       	std	Y+5, r17	; 0x05
    4520:	0c 83       	std	Y+4, r16	; 0x04
    4522:	d1 83       	std	Z+1, r29	; 0x01
    4524:	c0 83       	st	Z, r28
    4526:	13 82       	std	Z+3, r1	; 0x03
    4528:	12 82       	std	Z+2, r1	; 0x02
    452a:	81 e0       	ldi	r24, 0x01	; 1
    452c:	80 93 e8 04 	sts	0x04E8, r24
    4530:	cf 01       	movw	r24, r30
    4532:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <TMRSRVC_insert>
    4536:	10 92 e8 04 	sts	0x04E8, r1
    453a:	80 e0       	ldi	r24, 0x00	; 0
    453c:	df 91       	pop	r29
    453e:	cf 91       	pop	r28
    4540:	1f 91       	pop	r17
    4542:	0f 91       	pop	r16
    4544:	ff 90       	pop	r15
    4546:	ef 90       	pop	r14
    4548:	08 95       	ret

0000454a <I2C_MSTR_get>:
    454a:	fc 01       	movw	r30, r24
    454c:	80 91 21 08 	lds	r24, 0x0821
    4550:	81 30       	cpi	r24, 0x01	; 1
    4552:	11 f0       	breq	.+4      	; 0x4558 <I2C_MSTR_get+0xe>
    4554:	85 e0       	ldi	r24, 0x05	; 5
    4556:	08 95       	ret
    4558:	80 91 22 08 	lds	r24, 0x0822
    455c:	81 30       	cpi	r24, 0x01	; 1
    455e:	11 f0       	breq	.+4      	; 0x4564 <I2C_MSTR_get+0x1a>
    4560:	8a e0       	ldi	r24, 0x0A	; 10
    4562:	08 95       	ret
    4564:	61 30       	cpi	r22, 0x01	; 1
    4566:	11 f4       	brne	.+4      	; 0x456c <I2C_MSTR_get+0x22>
    4568:	84 ec       	ldi	r24, 0xC4	; 196
    456a:	01 c0       	rjmp	.+2      	; 0x456e <I2C_MSTR_get+0x24>
    456c:	84 e8       	ldi	r24, 0x84	; 132
    456e:	80 93 bc 00 	sts	0x00BC, r24
    4572:	80 91 bc 00 	lds	r24, 0x00BC
    4576:	87 ff       	sbrs	r24, 7
    4578:	fc cf       	rjmp	.-8      	; 0x4572 <I2C_MSTR_get+0x28>
    457a:	61 30       	cpi	r22, 0x01	; 1
    457c:	31 f4       	brne	.+12     	; 0x458a <I2C_MSTR_get+0x40>
    457e:	80 91 b9 00 	lds	r24, 0x00B9
    4582:	88 7f       	andi	r24, 0xF8	; 248
    4584:	80 35       	cpi	r24, 0x50	; 80
    4586:	59 f4       	brne	.+22     	; 0x459e <I2C_MSTR_get+0x54>
    4588:	05 c0       	rjmp	.+10     	; 0x4594 <I2C_MSTR_get+0x4a>
    458a:	80 91 b9 00 	lds	r24, 0x00B9
    458e:	88 7f       	andi	r24, 0xF8	; 248
    4590:	88 35       	cpi	r24, 0x58	; 88
    4592:	29 f4       	brne	.+10     	; 0x459e <I2C_MSTR_get+0x54>
    4594:	80 91 bb 00 	lds	r24, 0x00BB
    4598:	80 83       	st	Z, r24
    459a:	80 e0       	ldi	r24, 0x00	; 0
    459c:	08 95       	ret
    459e:	82 e0       	ldi	r24, 0x02	; 2
    45a0:	08 95       	ret

000045a2 <I2C_MSTR_send>:
    45a2:	98 2f       	mov	r25, r24
    45a4:	80 91 21 08 	lds	r24, 0x0821
    45a8:	81 30       	cpi	r24, 0x01	; 1
    45aa:	11 f0       	breq	.+4      	; 0x45b0 <I2C_MSTR_send+0xe>
    45ac:	85 e0       	ldi	r24, 0x05	; 5
    45ae:	08 95       	ret
    45b0:	80 91 22 08 	lds	r24, 0x0822
    45b4:	81 30       	cpi	r24, 0x01	; 1
    45b6:	11 f0       	breq	.+4      	; 0x45bc <I2C_MSTR_send+0x1a>
    45b8:	8a e0       	ldi	r24, 0x0A	; 10
    45ba:	08 95       	ret
    45bc:	90 93 bb 00 	sts	0x00BB, r25
    45c0:	84 e8       	ldi	r24, 0x84	; 132
    45c2:	80 93 bc 00 	sts	0x00BC, r24
    45c6:	80 91 bc 00 	lds	r24, 0x00BC
    45ca:	87 ff       	sbrs	r24, 7
    45cc:	fc cf       	rjmp	.-8      	; 0x45c6 <I2C_MSTR_send+0x24>
    45ce:	80 91 b9 00 	lds	r24, 0x00B9
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	88 7f       	andi	r24, 0xF8	; 248
    45d6:	90 70       	andi	r25, 0x00	; 0
    45d8:	88 32       	cpi	r24, 0x28	; 40
    45da:	91 05       	cpc	r25, r1
    45dc:	21 f0       	breq	.+8      	; 0x45e6 <I2C_MSTR_send+0x44>
    45de:	c0 97       	sbiw	r24, 0x30	; 48
    45e0:	21 f4       	brne	.+8      	; 0x45ea <I2C_MSTR_send+0x48>
    45e2:	83 e0       	ldi	r24, 0x03	; 3
    45e4:	08 95       	ret
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	08 95       	ret
    45ea:	8c e0       	ldi	r24, 0x0C	; 12
    45ec:	08 95       	ret

000045ee <I2C_MSTR_start>:
    45ee:	98 2f       	mov	r25, r24
    45f0:	20 91 21 08 	lds	r18, 0x0821
    45f4:	21 30       	cpi	r18, 0x01	; 1
    45f6:	11 f0       	breq	.+4      	; 0x45fc <I2C_MSTR_start+0xe>
    45f8:	85 e0       	ldi	r24, 0x05	; 5
    45fa:	08 95       	ret
    45fc:	80 91 23 08 	lds	r24, 0x0823
    4600:	81 30       	cpi	r24, 0x01	; 1
    4602:	11 f4       	brne	.+4      	; 0x4608 <I2C_MSTR_start+0x1a>
    4604:	89 e0       	ldi	r24, 0x09	; 9
    4606:	08 95       	ret
    4608:	20 93 22 08 	sts	0x0822, r18
    460c:	84 ea       	ldi	r24, 0xA4	; 164
    460e:	80 93 bc 00 	sts	0x00BC, r24
    4612:	80 91 bc 00 	lds	r24, 0x00BC
    4616:	87 ff       	sbrs	r24, 7
    4618:	fc cf       	rjmp	.-8      	; 0x4612 <I2C_MSTR_start+0x24>
    461a:	80 91 b9 00 	lds	r24, 0x00B9
    461e:	88 7f       	andi	r24, 0xF8	; 248
    4620:	88 30       	cpi	r24, 0x08	; 8
    4622:	39 f0       	breq	.+14     	; 0x4632 <I2C_MSTR_start+0x44>
    4624:	80 91 b9 00 	lds	r24, 0x00B9
    4628:	88 7f       	andi	r24, 0xF8	; 248
    462a:	80 31       	cpi	r24, 0x10	; 16
    462c:	11 f0       	breq	.+4      	; 0x4632 <I2C_MSTR_start+0x44>
    462e:	81 e0       	ldi	r24, 0x01	; 1
    4630:	08 95       	ret
    4632:	61 30       	cpi	r22, 0x01	; 1
    4634:	19 f4       	brne	.+6      	; 0x463c <I2C_MSTR_start+0x4e>
    4636:	99 0f       	add	r25, r25
    4638:	91 60       	ori	r25, 0x01	; 1
    463a:	03 c0       	rjmp	.+6      	; 0x4642 <I2C_MSTR_start+0x54>
    463c:	66 23       	and	r22, r22
    463e:	19 f4       	brne	.+6      	; 0x4646 <I2C_MSTR_start+0x58>
    4640:	99 0f       	add	r25, r25
    4642:	90 93 bb 00 	sts	0x00BB, r25
    4646:	84 e8       	ldi	r24, 0x84	; 132
    4648:	80 93 bc 00 	sts	0x00BC, r24
    464c:	80 91 bc 00 	lds	r24, 0x00BC
    4650:	87 ff       	sbrs	r24, 7
    4652:	fc cf       	rjmp	.-8      	; 0x464c <I2C_MSTR_start+0x5e>
    4654:	61 30       	cpi	r22, 0x01	; 1
    4656:	31 f4       	brne	.+12     	; 0x4664 <I2C_MSTR_start+0x76>
    4658:	80 91 b9 00 	lds	r24, 0x00B9
    465c:	88 7f       	andi	r24, 0xF8	; 248
    465e:	80 34       	cpi	r24, 0x40	; 64
    4660:	41 f4       	brne	.+16     	; 0x4672 <I2C_MSTR_start+0x84>
    4662:	09 c0       	rjmp	.+18     	; 0x4676 <I2C_MSTR_start+0x88>
    4664:	66 23       	and	r22, r22
    4666:	39 f4       	brne	.+14     	; 0x4676 <I2C_MSTR_start+0x88>
    4668:	80 91 b9 00 	lds	r24, 0x00B9
    466c:	88 7f       	andi	r24, 0xF8	; 248
    466e:	88 31       	cpi	r24, 0x18	; 24
    4670:	11 f0       	breq	.+4      	; 0x4676 <I2C_MSTR_start+0x88>
    4672:	82 e0       	ldi	r24, 0x02	; 2
    4674:	08 95       	ret
    4676:	80 e0       	ldi	r24, 0x00	; 0
    4678:	08 95       	ret

0000467a <I2C_MSTR_stop>:
    467a:	80 91 22 08 	lds	r24, 0x0822
    467e:	81 30       	cpi	r24, 0x01	; 1
    4680:	11 f0       	breq	.+4      	; 0x4686 <I2C_MSTR_stop+0xc>
    4682:	8a e0       	ldi	r24, 0x0A	; 10
    4684:	08 95       	ret
    4686:	80 91 24 08 	lds	r24, 0x0824
    468a:	81 30       	cpi	r24, 0x01	; 1
    468c:	29 f4       	brne	.+10     	; 0x4698 <I2C_MSTR_stop+0x1e>
    468e:	85 e9       	ldi	r24, 0x95	; 149
    4690:	80 93 bc 00 	sts	0x00BC, r24
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	08 95       	ret
    4698:	84 e9       	ldi	r24, 0x94	; 148
    469a:	80 93 bc 00 	sts	0x00BC, r24
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	08 95       	ret

000046a2 <I2C_open>:
    46a2:	82 e1       	ldi	r24, 0x12	; 18
    46a4:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    46a8:	88 23       	and	r24, r24
    46aa:	b1 f4       	brne	.+44     	; 0x46d8 <I2C_open+0x36>
    46ac:	10 92 21 08 	sts	0x0821, r1
    46b0:	10 92 22 08 	sts	0x0822, r1
    46b4:	10 92 23 08 	sts	0x0823, r1
    46b8:	10 92 24 08 	sts	0x0824, r1
    46bc:	10 92 25 08 	sts	0x0825, r1
    46c0:	0e 94 98 29 	call	0x5330	; 0x5330 <__I2C_init>
    46c4:	87 e1       	ldi	r24, 0x17	; 23
    46c6:	60 e0       	ldi	r22, 0x00	; 0
    46c8:	0e 94 6f 23 	call	0x46de	; 0x46de <I2C_set_BRG>
    46cc:	0e 94 8e 29 	call	0x531c	; 0x531c <I2C_enable>
    46d0:	82 e1       	ldi	r24, 0x12	; 18
    46d2:	61 e0       	ldi	r22, 0x01	; 1
    46d4:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    46d8:	82 e1       	ldi	r24, 0x12	; 18
    46da:	90 e0       	ldi	r25, 0x00	; 0
    46dc:	08 95       	ret

000046de <I2C_set_BRG>:
    46de:	63 70       	andi	r22, 0x03	; 3
    46e0:	60 93 b9 00 	sts	0x00B9, r22
    46e4:	80 93 b8 00 	sts	0x00B8, r24
    46e8:	81 e0       	ldi	r24, 0x01	; 1
    46ea:	80 93 21 08 	sts	0x0821, r24
    46ee:	08 95       	ret

000046f0 <__ADC_init>:
    46f0:	8f e1       	ldi	r24, 0x1F	; 31
    46f2:	80 93 7c 00 	sts	0x007C, r24
    46f6:	ea e7       	ldi	r30, 0x7A	; 122
    46f8:	f0 e0       	ldi	r31, 0x00	; 0
    46fa:	87 e0       	ldi	r24, 0x07	; 7
    46fc:	80 83       	st	Z, r24
    46fe:	80 81       	ld	r24, Z
    4700:	80 68       	ori	r24, 0x80	; 128
    4702:	80 83       	st	Z, r24
    4704:	08 95       	ret

00004706 <CBOT_init>:
    4706:	0e 94 d9 28 	call	0x51b2	; 0x51b2 <SYS_init>
    470a:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <ATMEGA_open>
    470e:	0e 94 e5 25 	call	0x4bca	; 0x4bca <ISR_open>
    4712:	0e 94 65 29 	call	0x52ca	; 0x52ca <TMRSRVC_open>
    4716:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <SPI_open>
    471a:	0e 94 f7 21 	call	0x43ee	; 0x43ee <ATTINY_open>
    471e:	78 94       	sei
    4720:	08 95       	ret

00004722 <CBOT_ISR_init>:
    4722:	00 00       	nop
    4724:	08 95       	ret

00004726 <__vector_16>:
    4726:	1f 92       	push	r1
    4728:	0f 92       	push	r0
    472a:	0f b6       	in	r0, 0x3f	; 63
    472c:	0f 92       	push	r0
    472e:	11 24       	eor	r1, r1
    4730:	2f 93       	push	r18
    4732:	3f 93       	push	r19
    4734:	4f 93       	push	r20
    4736:	5f 93       	push	r21
    4738:	6f 93       	push	r22
    473a:	7f 93       	push	r23
    473c:	8f 93       	push	r24
    473e:	9f 93       	push	r25
    4740:	af 93       	push	r26
    4742:	bf 93       	push	r27
    4744:	ef 93       	push	r30
    4746:	ff 93       	push	r31
    4748:	e0 91 a8 04 	lds	r30, 0x04A8
    474c:	f0 91 a9 04 	lds	r31, 0x04A9
    4750:	30 97       	sbiw	r30, 0x00	; 0
    4752:	09 f0       	breq	.+2      	; 0x4756 <__vector_16+0x30>
    4754:	09 95       	icall
    4756:	ff 91       	pop	r31
    4758:	ef 91       	pop	r30
    475a:	bf 91       	pop	r27
    475c:	af 91       	pop	r26
    475e:	9f 91       	pop	r25
    4760:	8f 91       	pop	r24
    4762:	7f 91       	pop	r23
    4764:	6f 91       	pop	r22
    4766:	5f 91       	pop	r21
    4768:	4f 91       	pop	r20
    476a:	3f 91       	pop	r19
    476c:	2f 91       	pop	r18
    476e:	0f 90       	pop	r0
    4770:	0f be       	out	0x3f, r0	; 63
    4772:	0f 90       	pop	r0
    4774:	1f 90       	pop	r1
    4776:	18 95       	reti

00004778 <__vector_17>:
    4778:	1f 92       	push	r1
    477a:	0f 92       	push	r0
    477c:	0f b6       	in	r0, 0x3f	; 63
    477e:	0f 92       	push	r0
    4780:	11 24       	eor	r1, r1
    4782:	2f 93       	push	r18
    4784:	3f 93       	push	r19
    4786:	4f 93       	push	r20
    4788:	5f 93       	push	r21
    478a:	6f 93       	push	r22
    478c:	7f 93       	push	r23
    478e:	8f 93       	push	r24
    4790:	9f 93       	push	r25
    4792:	af 93       	push	r26
    4794:	bf 93       	push	r27
    4796:	ef 93       	push	r30
    4798:	ff 93       	push	r31
    479a:	e0 91 aa 04 	lds	r30, 0x04AA
    479e:	f0 91 ab 04 	lds	r31, 0x04AB
    47a2:	30 97       	sbiw	r30, 0x00	; 0
    47a4:	09 f0       	breq	.+2      	; 0x47a8 <__vector_17+0x30>
    47a6:	09 95       	icall
    47a8:	ff 91       	pop	r31
    47aa:	ef 91       	pop	r30
    47ac:	bf 91       	pop	r27
    47ae:	af 91       	pop	r26
    47b0:	9f 91       	pop	r25
    47b2:	8f 91       	pop	r24
    47b4:	7f 91       	pop	r23
    47b6:	6f 91       	pop	r22
    47b8:	5f 91       	pop	r21
    47ba:	4f 91       	pop	r20
    47bc:	3f 91       	pop	r19
    47be:	2f 91       	pop	r18
    47c0:	0f 90       	pop	r0
    47c2:	0f be       	out	0x3f, r0	; 63
    47c4:	0f 90       	pop	r0
    47c6:	1f 90       	pop	r1
    47c8:	18 95       	reti

000047ca <__vector_18>:
    47ca:	1f 92       	push	r1
    47cc:	0f 92       	push	r0
    47ce:	0f b6       	in	r0, 0x3f	; 63
    47d0:	0f 92       	push	r0
    47d2:	11 24       	eor	r1, r1
    47d4:	2f 93       	push	r18
    47d6:	3f 93       	push	r19
    47d8:	4f 93       	push	r20
    47da:	5f 93       	push	r21
    47dc:	6f 93       	push	r22
    47de:	7f 93       	push	r23
    47e0:	8f 93       	push	r24
    47e2:	9f 93       	push	r25
    47e4:	af 93       	push	r26
    47e6:	bf 93       	push	r27
    47e8:	ef 93       	push	r30
    47ea:	ff 93       	push	r31
    47ec:	e0 91 ac 04 	lds	r30, 0x04AC
    47f0:	f0 91 ad 04 	lds	r31, 0x04AD
    47f4:	30 97       	sbiw	r30, 0x00	; 0
    47f6:	09 f0       	breq	.+2      	; 0x47fa <__vector_18+0x30>
    47f8:	09 95       	icall
    47fa:	ff 91       	pop	r31
    47fc:	ef 91       	pop	r30
    47fe:	bf 91       	pop	r27
    4800:	af 91       	pop	r26
    4802:	9f 91       	pop	r25
    4804:	8f 91       	pop	r24
    4806:	7f 91       	pop	r23
    4808:	6f 91       	pop	r22
    480a:	5f 91       	pop	r21
    480c:	4f 91       	pop	r20
    480e:	3f 91       	pop	r19
    4810:	2f 91       	pop	r18
    4812:	0f 90       	pop	r0
    4814:	0f be       	out	0x3f, r0	; 63
    4816:	0f 90       	pop	r0
    4818:	1f 90       	pop	r1
    481a:	18 95       	reti

0000481c <__vector_9>:
    481c:	1f 92       	push	r1
    481e:	0f 92       	push	r0
    4820:	0f b6       	in	r0, 0x3f	; 63
    4822:	0f 92       	push	r0
    4824:	11 24       	eor	r1, r1
    4826:	2f 93       	push	r18
    4828:	3f 93       	push	r19
    482a:	4f 93       	push	r20
    482c:	5f 93       	push	r21
    482e:	6f 93       	push	r22
    4830:	7f 93       	push	r23
    4832:	8f 93       	push	r24
    4834:	9f 93       	push	r25
    4836:	af 93       	push	r26
    4838:	bf 93       	push	r27
    483a:	ef 93       	push	r30
    483c:	ff 93       	push	r31
    483e:	e0 91 9a 04 	lds	r30, 0x049A
    4842:	f0 91 9b 04 	lds	r31, 0x049B
    4846:	30 97       	sbiw	r30, 0x00	; 0
    4848:	09 f0       	breq	.+2      	; 0x484c <__vector_9+0x30>
    484a:	09 95       	icall
    484c:	ff 91       	pop	r31
    484e:	ef 91       	pop	r30
    4850:	bf 91       	pop	r27
    4852:	af 91       	pop	r26
    4854:	9f 91       	pop	r25
    4856:	8f 91       	pop	r24
    4858:	7f 91       	pop	r23
    485a:	6f 91       	pop	r22
    485c:	5f 91       	pop	r21
    485e:	4f 91       	pop	r20
    4860:	3f 91       	pop	r19
    4862:	2f 91       	pop	r18
    4864:	0f 90       	pop	r0
    4866:	0f be       	out	0x3f, r0	; 63
    4868:	0f 90       	pop	r0
    486a:	1f 90       	pop	r1
    486c:	18 95       	reti

0000486e <__vector_10>:
    486e:	1f 92       	push	r1
    4870:	0f 92       	push	r0
    4872:	0f b6       	in	r0, 0x3f	; 63
    4874:	0f 92       	push	r0
    4876:	11 24       	eor	r1, r1
    4878:	2f 93       	push	r18
    487a:	3f 93       	push	r19
    487c:	4f 93       	push	r20
    487e:	5f 93       	push	r21
    4880:	6f 93       	push	r22
    4882:	7f 93       	push	r23
    4884:	8f 93       	push	r24
    4886:	9f 93       	push	r25
    4888:	af 93       	push	r26
    488a:	bf 93       	push	r27
    488c:	ef 93       	push	r30
    488e:	ff 93       	push	r31
    4890:	e0 91 9c 04 	lds	r30, 0x049C
    4894:	f0 91 9d 04 	lds	r31, 0x049D
    4898:	30 97       	sbiw	r30, 0x00	; 0
    489a:	09 f0       	breq	.+2      	; 0x489e <__vector_10+0x30>
    489c:	09 95       	icall
    489e:	ff 91       	pop	r31
    48a0:	ef 91       	pop	r30
    48a2:	bf 91       	pop	r27
    48a4:	af 91       	pop	r26
    48a6:	9f 91       	pop	r25
    48a8:	8f 91       	pop	r24
    48aa:	7f 91       	pop	r23
    48ac:	6f 91       	pop	r22
    48ae:	5f 91       	pop	r21
    48b0:	4f 91       	pop	r20
    48b2:	3f 91       	pop	r19
    48b4:	2f 91       	pop	r18
    48b6:	0f 90       	pop	r0
    48b8:	0f be       	out	0x3f, r0	; 63
    48ba:	0f 90       	pop	r0
    48bc:	1f 90       	pop	r1
    48be:	18 95       	reti

000048c0 <__vector_11>:
    48c0:	1f 92       	push	r1
    48c2:	0f 92       	push	r0
    48c4:	0f b6       	in	r0, 0x3f	; 63
    48c6:	0f 92       	push	r0
    48c8:	11 24       	eor	r1, r1
    48ca:	2f 93       	push	r18
    48cc:	3f 93       	push	r19
    48ce:	4f 93       	push	r20
    48d0:	5f 93       	push	r21
    48d2:	6f 93       	push	r22
    48d4:	7f 93       	push	r23
    48d6:	8f 93       	push	r24
    48d8:	9f 93       	push	r25
    48da:	af 93       	push	r26
    48dc:	bf 93       	push	r27
    48de:	ef 93       	push	r30
    48e0:	ff 93       	push	r31
    48e2:	e0 91 9e 04 	lds	r30, 0x049E
    48e6:	f0 91 9f 04 	lds	r31, 0x049F
    48ea:	30 97       	sbiw	r30, 0x00	; 0
    48ec:	09 f0       	breq	.+2      	; 0x48f0 <__vector_11+0x30>
    48ee:	09 95       	icall
    48f0:	ff 91       	pop	r31
    48f2:	ef 91       	pop	r30
    48f4:	bf 91       	pop	r27
    48f6:	af 91       	pop	r26
    48f8:	9f 91       	pop	r25
    48fa:	8f 91       	pop	r24
    48fc:	7f 91       	pop	r23
    48fe:	6f 91       	pop	r22
    4900:	5f 91       	pop	r21
    4902:	4f 91       	pop	r20
    4904:	3f 91       	pop	r19
    4906:	2f 91       	pop	r18
    4908:	0f 90       	pop	r0
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	0f 90       	pop	r0
    490e:	1f 90       	pop	r1
    4910:	18 95       	reti

00004912 <__vector_13>:
    4912:	1f 92       	push	r1
    4914:	0f 92       	push	r0
    4916:	0f b6       	in	r0, 0x3f	; 63
    4918:	0f 92       	push	r0
    491a:	11 24       	eor	r1, r1
    491c:	2f 93       	push	r18
    491e:	3f 93       	push	r19
    4920:	4f 93       	push	r20
    4922:	5f 93       	push	r21
    4924:	6f 93       	push	r22
    4926:	7f 93       	push	r23
    4928:	8f 93       	push	r24
    492a:	9f 93       	push	r25
    492c:	af 93       	push	r26
    492e:	bf 93       	push	r27
    4930:	ef 93       	push	r30
    4932:	ff 93       	push	r31
    4934:	e0 91 a2 04 	lds	r30, 0x04A2
    4938:	f0 91 a3 04 	lds	r31, 0x04A3
    493c:	30 97       	sbiw	r30, 0x00	; 0
    493e:	09 f0       	breq	.+2      	; 0x4942 <__vector_13+0x30>
    4940:	09 95       	icall
    4942:	ff 91       	pop	r31
    4944:	ef 91       	pop	r30
    4946:	bf 91       	pop	r27
    4948:	af 91       	pop	r26
    494a:	9f 91       	pop	r25
    494c:	8f 91       	pop	r24
    494e:	7f 91       	pop	r23
    4950:	6f 91       	pop	r22
    4952:	5f 91       	pop	r21
    4954:	4f 91       	pop	r20
    4956:	3f 91       	pop	r19
    4958:	2f 91       	pop	r18
    495a:	0f 90       	pop	r0
    495c:	0f be       	out	0x3f, r0	; 63
    495e:	0f 90       	pop	r0
    4960:	1f 90       	pop	r1
    4962:	18 95       	reti

00004964 <__vector_14>:
    4964:	1f 92       	push	r1
    4966:	0f 92       	push	r0
    4968:	0f b6       	in	r0, 0x3f	; 63
    496a:	0f 92       	push	r0
    496c:	11 24       	eor	r1, r1
    496e:	2f 93       	push	r18
    4970:	3f 93       	push	r19
    4972:	4f 93       	push	r20
    4974:	5f 93       	push	r21
    4976:	6f 93       	push	r22
    4978:	7f 93       	push	r23
    497a:	8f 93       	push	r24
    497c:	9f 93       	push	r25
    497e:	af 93       	push	r26
    4980:	bf 93       	push	r27
    4982:	ef 93       	push	r30
    4984:	ff 93       	push	r31
    4986:	e0 91 a4 04 	lds	r30, 0x04A4
    498a:	f0 91 a5 04 	lds	r31, 0x04A5
    498e:	30 97       	sbiw	r30, 0x00	; 0
    4990:	09 f0       	breq	.+2      	; 0x4994 <__vector_14+0x30>
    4992:	09 95       	icall
    4994:	ff 91       	pop	r31
    4996:	ef 91       	pop	r30
    4998:	bf 91       	pop	r27
    499a:	af 91       	pop	r26
    499c:	9f 91       	pop	r25
    499e:	8f 91       	pop	r24
    49a0:	7f 91       	pop	r23
    49a2:	6f 91       	pop	r22
    49a4:	5f 91       	pop	r21
    49a6:	4f 91       	pop	r20
    49a8:	3f 91       	pop	r19
    49aa:	2f 91       	pop	r18
    49ac:	0f 90       	pop	r0
    49ae:	0f be       	out	0x3f, r0	; 63
    49b0:	0f 90       	pop	r0
    49b2:	1f 90       	pop	r1
    49b4:	18 95       	reti

000049b6 <__vector_12>:
    49b6:	1f 92       	push	r1
    49b8:	0f 92       	push	r0
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	0f 92       	push	r0
    49be:	11 24       	eor	r1, r1
    49c0:	2f 93       	push	r18
    49c2:	3f 93       	push	r19
    49c4:	4f 93       	push	r20
    49c6:	5f 93       	push	r21
    49c8:	6f 93       	push	r22
    49ca:	7f 93       	push	r23
    49cc:	8f 93       	push	r24
    49ce:	9f 93       	push	r25
    49d0:	af 93       	push	r26
    49d2:	bf 93       	push	r27
    49d4:	ef 93       	push	r30
    49d6:	ff 93       	push	r31
    49d8:	e0 91 a0 04 	lds	r30, 0x04A0
    49dc:	f0 91 a1 04 	lds	r31, 0x04A1
    49e0:	30 97       	sbiw	r30, 0x00	; 0
    49e2:	09 f0       	breq	.+2      	; 0x49e6 <__vector_12+0x30>
    49e4:	09 95       	icall
    49e6:	ff 91       	pop	r31
    49e8:	ef 91       	pop	r30
    49ea:	bf 91       	pop	r27
    49ec:	af 91       	pop	r26
    49ee:	9f 91       	pop	r25
    49f0:	8f 91       	pop	r24
    49f2:	7f 91       	pop	r23
    49f4:	6f 91       	pop	r22
    49f6:	5f 91       	pop	r21
    49f8:	4f 91       	pop	r20
    49fa:	3f 91       	pop	r19
    49fc:	2f 91       	pop	r18
    49fe:	0f 90       	pop	r0
    4a00:	0f be       	out	0x3f, r0	; 63
    4a02:	0f 90       	pop	r0
    4a04:	1f 90       	pop	r1
    4a06:	18 95       	reti

00004a08 <__vector_15>:
    4a08:	1f 92       	push	r1
    4a0a:	0f 92       	push	r0
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	0f 92       	push	r0
    4a10:	11 24       	eor	r1, r1
    4a12:	2f 93       	push	r18
    4a14:	3f 93       	push	r19
    4a16:	4f 93       	push	r20
    4a18:	5f 93       	push	r21
    4a1a:	6f 93       	push	r22
    4a1c:	7f 93       	push	r23
    4a1e:	8f 93       	push	r24
    4a20:	9f 93       	push	r25
    4a22:	af 93       	push	r26
    4a24:	bf 93       	push	r27
    4a26:	ef 93       	push	r30
    4a28:	ff 93       	push	r31
    4a2a:	e0 91 a6 04 	lds	r30, 0x04A6
    4a2e:	f0 91 a7 04 	lds	r31, 0x04A7
    4a32:	30 97       	sbiw	r30, 0x00	; 0
    4a34:	09 f0       	breq	.+2      	; 0x4a38 <__vector_15+0x30>
    4a36:	09 95       	icall
    4a38:	ff 91       	pop	r31
    4a3a:	ef 91       	pop	r30
    4a3c:	bf 91       	pop	r27
    4a3e:	af 91       	pop	r26
    4a40:	9f 91       	pop	r25
    4a42:	8f 91       	pop	r24
    4a44:	7f 91       	pop	r23
    4a46:	6f 91       	pop	r22
    4a48:	5f 91       	pop	r21
    4a4a:	4f 91       	pop	r20
    4a4c:	3f 91       	pop	r19
    4a4e:	2f 91       	pop	r18
    4a50:	0f 90       	pop	r0
    4a52:	0f be       	out	0x3f, r0	; 63
    4a54:	0f 90       	pop	r0
    4a56:	1f 90       	pop	r1
    4a58:	18 95       	reti

00004a5a <__vector_4>:
    4a5a:	1f 92       	push	r1
    4a5c:	0f 92       	push	r0
    4a5e:	0f b6       	in	r0, 0x3f	; 63
    4a60:	0f 92       	push	r0
    4a62:	11 24       	eor	r1, r1
    4a64:	2f 93       	push	r18
    4a66:	3f 93       	push	r19
    4a68:	4f 93       	push	r20
    4a6a:	5f 93       	push	r21
    4a6c:	6f 93       	push	r22
    4a6e:	7f 93       	push	r23
    4a70:	8f 93       	push	r24
    4a72:	9f 93       	push	r25
    4a74:	af 93       	push	r26
    4a76:	bf 93       	push	r27
    4a78:	ef 93       	push	r30
    4a7a:	ff 93       	push	r31
    4a7c:	e0 91 90 04 	lds	r30, 0x0490
    4a80:	f0 91 91 04 	lds	r31, 0x0491
    4a84:	30 97       	sbiw	r30, 0x00	; 0
    4a86:	09 f0       	breq	.+2      	; 0x4a8a <__vector_4+0x30>
    4a88:	09 95       	icall
    4a8a:	ff 91       	pop	r31
    4a8c:	ef 91       	pop	r30
    4a8e:	bf 91       	pop	r27
    4a90:	af 91       	pop	r26
    4a92:	9f 91       	pop	r25
    4a94:	8f 91       	pop	r24
    4a96:	7f 91       	pop	r23
    4a98:	6f 91       	pop	r22
    4a9a:	5f 91       	pop	r21
    4a9c:	4f 91       	pop	r20
    4a9e:	3f 91       	pop	r19
    4aa0:	2f 91       	pop	r18
    4aa2:	0f 90       	pop	r0
    4aa4:	0f be       	out	0x3f, r0	; 63
    4aa6:	0f 90       	pop	r0
    4aa8:	1f 90       	pop	r1
    4aaa:	18 95       	reti

00004aac <__vector_5>:
    4aac:	1f 92       	push	r1
    4aae:	0f 92       	push	r0
    4ab0:	0f b6       	in	r0, 0x3f	; 63
    4ab2:	0f 92       	push	r0
    4ab4:	11 24       	eor	r1, r1
    4ab6:	2f 93       	push	r18
    4ab8:	3f 93       	push	r19
    4aba:	4f 93       	push	r20
    4abc:	5f 93       	push	r21
    4abe:	6f 93       	push	r22
    4ac0:	7f 93       	push	r23
    4ac2:	8f 93       	push	r24
    4ac4:	9f 93       	push	r25
    4ac6:	af 93       	push	r26
    4ac8:	bf 93       	push	r27
    4aca:	ef 93       	push	r30
    4acc:	ff 93       	push	r31
    4ace:	e0 91 92 04 	lds	r30, 0x0492
    4ad2:	f0 91 93 04 	lds	r31, 0x0493
    4ad6:	30 97       	sbiw	r30, 0x00	; 0
    4ad8:	09 f0       	breq	.+2      	; 0x4adc <__vector_5+0x30>
    4ada:	09 95       	icall
    4adc:	ff 91       	pop	r31
    4ade:	ef 91       	pop	r30
    4ae0:	bf 91       	pop	r27
    4ae2:	af 91       	pop	r26
    4ae4:	9f 91       	pop	r25
    4ae6:	8f 91       	pop	r24
    4ae8:	7f 91       	pop	r23
    4aea:	6f 91       	pop	r22
    4aec:	5f 91       	pop	r21
    4aee:	4f 91       	pop	r20
    4af0:	3f 91       	pop	r19
    4af2:	2f 91       	pop	r18
    4af4:	0f 90       	pop	r0
    4af6:	0f be       	out	0x3f, r0	; 63
    4af8:	0f 90       	pop	r0
    4afa:	1f 90       	pop	r1
    4afc:	18 95       	reti

00004afe <__vector_6>:
    4afe:	1f 92       	push	r1
    4b00:	0f 92       	push	r0
    4b02:	0f b6       	in	r0, 0x3f	; 63
    4b04:	0f 92       	push	r0
    4b06:	11 24       	eor	r1, r1
    4b08:	2f 93       	push	r18
    4b0a:	3f 93       	push	r19
    4b0c:	4f 93       	push	r20
    4b0e:	5f 93       	push	r21
    4b10:	6f 93       	push	r22
    4b12:	7f 93       	push	r23
    4b14:	8f 93       	push	r24
    4b16:	9f 93       	push	r25
    4b18:	af 93       	push	r26
    4b1a:	bf 93       	push	r27
    4b1c:	ef 93       	push	r30
    4b1e:	ff 93       	push	r31
    4b20:	e0 91 94 04 	lds	r30, 0x0494
    4b24:	f0 91 95 04 	lds	r31, 0x0495
    4b28:	30 97       	sbiw	r30, 0x00	; 0
    4b2a:	09 f0       	breq	.+2      	; 0x4b2e <__vector_6+0x30>
    4b2c:	09 95       	icall
    4b2e:	ff 91       	pop	r31
    4b30:	ef 91       	pop	r30
    4b32:	bf 91       	pop	r27
    4b34:	af 91       	pop	r26
    4b36:	9f 91       	pop	r25
    4b38:	8f 91       	pop	r24
    4b3a:	7f 91       	pop	r23
    4b3c:	6f 91       	pop	r22
    4b3e:	5f 91       	pop	r21
    4b40:	4f 91       	pop	r20
    4b42:	3f 91       	pop	r19
    4b44:	2f 91       	pop	r18
    4b46:	0f 90       	pop	r0
    4b48:	0f be       	out	0x3f, r0	; 63
    4b4a:	0f 90       	pop	r0
    4b4c:	1f 90       	pop	r1
    4b4e:	18 95       	reti

00004b50 <__vector_7>:
    4b50:	1f 92       	push	r1
    4b52:	0f 92       	push	r0
    4b54:	0f b6       	in	r0, 0x3f	; 63
    4b56:	0f 92       	push	r0
    4b58:	11 24       	eor	r1, r1
    4b5a:	2f 93       	push	r18
    4b5c:	3f 93       	push	r19
    4b5e:	4f 93       	push	r20
    4b60:	5f 93       	push	r21
    4b62:	6f 93       	push	r22
    4b64:	7f 93       	push	r23
    4b66:	8f 93       	push	r24
    4b68:	9f 93       	push	r25
    4b6a:	af 93       	push	r26
    4b6c:	bf 93       	push	r27
    4b6e:	ef 93       	push	r30
    4b70:	ff 93       	push	r31
    4b72:	e0 91 96 04 	lds	r30, 0x0496
    4b76:	f0 91 97 04 	lds	r31, 0x0497
    4b7a:	30 97       	sbiw	r30, 0x00	; 0
    4b7c:	09 f0       	breq	.+2      	; 0x4b80 <__vector_7+0x30>
    4b7e:	09 95       	icall
    4b80:	ff 91       	pop	r31
    4b82:	ef 91       	pop	r30
    4b84:	bf 91       	pop	r27
    4b86:	af 91       	pop	r26
    4b88:	9f 91       	pop	r25
    4b8a:	8f 91       	pop	r24
    4b8c:	7f 91       	pop	r23
    4b8e:	6f 91       	pop	r22
    4b90:	5f 91       	pop	r21
    4b92:	4f 91       	pop	r20
    4b94:	3f 91       	pop	r19
    4b96:	2f 91       	pop	r18
    4b98:	0f 90       	pop	r0
    4b9a:	0f be       	out	0x3f, r0	; 63
    4b9c:	0f 90       	pop	r0
    4b9e:	1f 90       	pop	r1
    4ba0:	18 95       	reti

00004ba2 <ISR_attach>:
    4ba2:	e8 2f       	mov	r30, r24
    4ba4:	80 32       	cpi	r24, 0x20	; 32
    4ba6:	68 f4       	brcc	.+26     	; 0x4bc2 <ISR_attach+0x20>
    4ba8:	80 51       	subi	r24, 0x10	; 16
    4baa:	83 30       	cpi	r24, 0x03	; 3
    4bac:	50 f0       	brcs	.+20     	; 0x4bc2 <ISR_attach+0x20>
    4bae:	f0 e0       	ldi	r31, 0x00	; 0
    4bb0:	ee 0f       	add	r30, r30
    4bb2:	ff 1f       	adc	r31, r31
    4bb4:	e8 57       	subi	r30, 0x78	; 120
    4bb6:	fb 4f       	sbci	r31, 0xFB	; 251
    4bb8:	20 81       	ld	r18, Z
    4bba:	31 81       	ldd	r19, Z+1	; 0x01
    4bbc:	71 83       	std	Z+1, r23	; 0x01
    4bbe:	60 83       	st	Z, r22
    4bc0:	02 c0       	rjmp	.+4      	; 0x4bc6 <ISR_attach+0x24>
    4bc2:	20 e0       	ldi	r18, 0x00	; 0
    4bc4:	30 e0       	ldi	r19, 0x00	; 0
    4bc6:	c9 01       	movw	r24, r18
    4bc8:	08 95       	ret

00004bca <ISR_open>:
    4bca:	80 e1       	ldi	r24, 0x10	; 16
    4bcc:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    4bd0:	88 23       	and	r24, r24
    4bd2:	61 f4       	brne	.+24     	; 0x4bec <ISR_open+0x22>
    4bd4:	e8 e8       	ldi	r30, 0x88	; 136
    4bd6:	f4 e0       	ldi	r31, 0x04	; 4
    4bd8:	11 92       	st	Z+, r1
    4bda:	11 92       	st	Z+, r1
    4bdc:	84 e0       	ldi	r24, 0x04	; 4
    4bde:	e8 3c       	cpi	r30, 0xC8	; 200
    4be0:	f8 07       	cpc	r31, r24
    4be2:	d1 f7       	brne	.-12     	; 0x4bd8 <ISR_open+0xe>
    4be4:	80 e1       	ldi	r24, 0x10	; 16
    4be6:	61 e0       	ldi	r22, 0x01	; 1
    4be8:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    4bec:	80 e1       	ldi	r24, 0x10	; 16
    4bee:	91 e0       	ldi	r25, 0x01	; 1
    4bf0:	08 95       	ret

00004bf2 <__LCD_init>:
    4bf2:	23 9a       	sbi	0x04, 3	; 4
    4bf4:	08 95       	ret

00004bf6 <__LCD_putchar>:
    4bf6:	ff 92       	push	r15
    4bf8:	0f 93       	push	r16
    4bfa:	1f 93       	push	r17
    4bfc:	cf 93       	push	r28
    4bfe:	df 93       	push	r29
    4c00:	f8 2e       	mov	r15, r24
    4c02:	8a e0       	ldi	r24, 0x0A	; 10
    4c04:	f8 16       	cp	r15, r24
    4c06:	b1 f0       	breq	.+44     	; 0x4c34 <__LCD_putchar+0x3e>
    4c08:	8f 15       	cp	r24, r15
    4c0a:	48 f0       	brcs	.+18     	; 0x4c1e <__LCD_putchar+0x28>
    4c0c:	e8 e0       	ldi	r30, 0x08	; 8
    4c0e:	fe 16       	cp	r15, r30
    4c10:	b9 f1       	breq	.+110    	; 0x4c80 <__LCD_putchar+0x8a>
    4c12:	ef 15       	cp	r30, r15
    4c14:	38 f1       	brcs	.+78     	; 0x4c64 <__LCD_putchar+0x6e>
    4c16:	f7 e0       	ldi	r31, 0x07	; 7
    4c18:	ff 16       	cp	r15, r31
    4c1a:	51 f4       	brne	.+20     	; 0x4c30 <__LCD_putchar+0x3a>
    4c1c:	3b c0       	rjmp	.+118    	; 0x4c94 <__LCD_putchar+0x9e>
    4c1e:	8d e0       	ldi	r24, 0x0D	; 13
    4c20:	f8 16       	cp	r15, r24
    4c22:	59 f0       	breq	.+22     	; 0x4c3a <__LCD_putchar+0x44>
    4c24:	eb e1       	ldi	r30, 0x1B	; 27
    4c26:	fe 16       	cp	r15, r30
    4c28:	89 f0       	breq	.+34     	; 0x4c4c <__LCD_putchar+0x56>
    4c2a:	fc e0       	ldi	r31, 0x0C	; 12
    4c2c:	ff 16       	cp	r15, r31
    4c2e:	41 f0       	breq	.+16     	; 0x4c40 <__LCD_putchar+0x4a>
    4c30:	01 e0       	ldi	r16, 0x01	; 1
    4c32:	41 c0       	rjmp	.+130    	; 0x4cb6 <__LCD_putchar+0xc0>
    4c34:	10 92 fa 07 	sts	0x07FA, r1
    4c38:	03 c0       	rjmp	.+6      	; 0x4c40 <__LCD_putchar+0x4a>
    4c3a:	10 92 fa 07 	sts	0x07FA, r1
    4c3e:	3a c0       	rjmp	.+116    	; 0x4cb4 <__LCD_putchar+0xbe>
    4c40:	80 91 fb 07 	lds	r24, 0x07FB
    4c44:	81 50       	subi	r24, 0x01	; 1
    4c46:	80 93 fb 07 	sts	0x07FB, r24
    4c4a:	34 c0       	rjmp	.+104    	; 0x4cb4 <__LCD_putchar+0xbe>
    4c4c:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <LCD_clear>
    4c50:	14 c0       	rjmp	.+40     	; 0x4c7a <__LCD_putchar+0x84>
    4c52:	80 e0       	ldi	r24, 0x00	; 0
    4c54:	61 e0       	ldi	r22, 0x01	; 1
    4c56:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    4c5a:	80 91 fa 07 	lds	r24, 0x07FA
    4c5e:	8f 5f       	subi	r24, 0xFF	; 255
    4c60:	80 93 fa 07 	sts	0x07FA, r24
    4c64:	80 91 fa 07 	lds	r24, 0x07FA
    4c68:	87 ff       	sbrs	r24, 7
    4c6a:	f3 cf       	rjmp	.-26     	; 0x4c52 <__LCD_putchar+0x5c>
    4c6c:	10 92 fa 07 	sts	0x07FA, r1
    4c70:	80 91 fb 07 	lds	r24, 0x07FB
    4c74:	81 50       	subi	r24, 0x01	; 1
    4c76:	80 93 fb 07 	sts	0x07FB, r24
    4c7a:	00 e0       	ldi	r16, 0x00	; 0
    4c7c:	11 e0       	ldi	r17, 0x01	; 1
    4c7e:	1c c0       	rjmp	.+56     	; 0x4cb8 <__LCD_putchar+0xc2>
    4c80:	80 91 fa 07 	lds	r24, 0x07FA
    4c84:	88 23       	and	r24, r24
    4c86:	b1 f0       	breq	.+44     	; 0x4cb4 <__LCD_putchar+0xbe>
    4c88:	80 91 fa 07 	lds	r24, 0x07FA
    4c8c:	86 50       	subi	r24, 0x06	; 6
    4c8e:	80 93 fa 07 	sts	0x07FA, r24
    4c92:	10 c0       	rjmp	.+32     	; 0x4cb4 <__LCD_putchar+0xbe>
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	0e 94 77 1d 	call	0x3aee	; 0x3aee <SPKR_open>
    4c9a:	64 ef       	ldi	r22, 0xF4	; 244
    4c9c:	71 e0       	ldi	r23, 0x01	; 1
    4c9e:	80 e0       	ldi	r24, 0x00	; 0
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	4d e7       	ldi	r20, 0x7D	; 125
    4ca4:	50 e0       	ldi	r21, 0x00	; 0
    4ca6:	24 e6       	ldi	r18, 0x64	; 100
    4ca8:	30 e0       	ldi	r19, 0x00	; 0
    4caa:	0e 94 15 28 	call	0x502a	; 0x502a <SPKR_play_beep>
    4cae:	81 e0       	ldi	r24, 0x01	; 1
    4cb0:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <SPKR_close>
    4cb4:	00 e0       	ldi	r16, 0x00	; 0
    4cb6:	10 e0       	ldi	r17, 0x00	; 0
    4cb8:	80 91 fb 07 	lds	r24, 0x07FB
    4cbc:	60 91 fa 07 	lds	r22, 0x07FA
    4cc0:	0e 94 31 1c 	call	0x3862	; 0x3862 <LCD_set_PGC_addr>
    4cc4:	00 23       	and	r16, r16
    4cc6:	51 f1       	breq	.+84     	; 0x4d1c <__LCD_putchar+0x126>
    4cc8:	85 e0       	ldi	r24, 0x05	; 5
    4cca:	f8 9e       	mul	r15, r24
    4ccc:	c0 01       	movw	r24, r0
    4cce:	11 24       	eor	r1, r1
    4cd0:	ec 01       	movw	r28, r24
    4cd2:	c3 55       	subi	r28, 0x53	; 83
    4cd4:	df 4f       	sbci	r29, 0xFF	; 255
    4cd6:	8c 01       	movw	r16, r24
    4cd8:	0e 54       	subi	r16, 0x4E	; 78
    4cda:	1f 4f       	sbci	r17, 0xFF	; 255
    4cdc:	fe 01       	movw	r30, r28
    4cde:	84 91       	lpm	r24, Z+
    4ce0:	61 e0       	ldi	r22, 0x01	; 1
    4ce2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    4ce6:	21 96       	adiw	r28, 0x01	; 1
    4ce8:	c0 17       	cp	r28, r16
    4cea:	d1 07       	cpc	r29, r17
    4cec:	b9 f7       	brne	.-18     	; 0x4cdc <__LCD_putchar+0xe6>
    4cee:	80 e0       	ldi	r24, 0x00	; 0
    4cf0:	61 e0       	ldi	r22, 0x01	; 1
    4cf2:	0e 94 4a 1c 	call	0x3894	; 0x3894 <LCD_write>
    4cf6:	80 91 fa 07 	lds	r24, 0x07FA
    4cfa:	8a 5f       	subi	r24, 0xFA	; 250
    4cfc:	80 93 fa 07 	sts	0x07FA, r24
    4d00:	80 91 fa 07 	lds	r24, 0x07FA
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	8c 37       	cpi	r24, 0x7C	; 124
    4d08:	91 05       	cpc	r25, r1
    4d0a:	3c f0       	brlt	.+14     	; 0x4d1a <__LCD_putchar+0x124>
    4d0c:	10 92 fa 07 	sts	0x07FA, r1
    4d10:	80 91 fb 07 	lds	r24, 0x07FB
    4d14:	81 50       	subi	r24, 0x01	; 1
    4d16:	80 93 fb 07 	sts	0x07FB, r24
    4d1a:	11 e0       	ldi	r17, 0x01	; 1
    4d1c:	80 91 fb 07 	lds	r24, 0x07FB
    4d20:	83 70       	andi	r24, 0x03	; 3
    4d22:	80 93 fb 07 	sts	0x07FB, r24
    4d26:	11 30       	cpi	r17, 0x01	; 1
    4d28:	59 f4       	brne	.+22     	; 0x4d40 <__LCD_putchar+0x14a>
    4d2a:	80 91 fc 07 	lds	r24, 0x07FC
    4d2e:	81 30       	cpi	r24, 0x01	; 1
    4d30:	39 f4       	brne	.+14     	; 0x4d40 <__LCD_putchar+0x14a>
    4d32:	e0 91 fd 07 	lds	r30, 0x07FD
    4d36:	f0 91 fe 07 	lds	r31, 0x07FE
    4d3a:	30 97       	sbiw	r30, 0x00	; 0
    4d3c:	09 f0       	breq	.+2      	; 0x4d40 <__LCD_putchar+0x14a>
    4d3e:	09 95       	icall
    4d40:	80 e0       	ldi	r24, 0x00	; 0
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	df 91       	pop	r29
    4d46:	cf 91       	pop	r28
    4d48:	1f 91       	pop	r17
    4d4a:	0f 91       	pop	r16
    4d4c:	ff 90       	pop	r15
    4d4e:	08 95       	ret

00004d50 <__LED_clr_pattern>:
    4d50:	85 fd       	sbrc	r24, 5
    4d52:	5d 98       	cbi	0x0b, 5	; 11
    4d54:	86 fd       	sbrc	r24, 6
    4d56:	5e 98       	cbi	0x0b, 6	; 11
    4d58:	08 95       	ret

00004d5a <__LED_init>:
    4d5a:	55 9a       	sbi	0x0a, 5	; 10
    4d5c:	56 9a       	sbi	0x0a, 6	; 10
    4d5e:	08 95       	ret

00004d60 <__LED_set_pattern>:
    4d60:	85 fd       	sbrc	r24, 5
    4d62:	5d 9a       	sbi	0x0b, 5	; 11
    4d64:	86 fd       	sbrc	r24, 6
    4d66:	5e 9a       	sbi	0x0b, 6	; 11
    4d68:	08 95       	ret

00004d6a <ATMEGA_open>:
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    4d70:	88 23       	and	r24, r24
    4d72:	51 f4       	brne	.+20     	; 0x4d88 <ATMEGA_open+0x1e>
    4d74:	f8 94       	cli
    4d76:	0e 94 ac 29 	call	0x5358	; 0x5358 <__ATMEGA_init>
    4d7a:	81 e0       	ldi	r24, 0x01	; 1
    4d7c:	0e 94 c7 26 	call	0x4d8e	; 0x4d8e <ATMEGA_set_clk_mode>
    4d80:	80 e0       	ldi	r24, 0x00	; 0
    4d82:	61 e0       	ldi	r22, 0x01	; 1
    4d84:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    4d88:	80 e0       	ldi	r24, 0x00	; 0
    4d8a:	91 e0       	ldi	r25, 0x01	; 1
    4d8c:	08 95       	ret

00004d8e <ATMEGA_set_clk_mode>:
    4d8e:	81 30       	cpi	r24, 0x01	; 1
    4d90:	49 f0       	breq	.+18     	; 0x4da4 <ATMEGA_set_clk_mode+0x16>
    4d92:	f8 94       	cli
    4d94:	81 30       	cpi	r24, 0x01	; 1
    4d96:	20 f1       	brcs	.+72     	; 0x4de0 <ATMEGA_set_clk_mode+0x52>
    4d98:	82 30       	cpi	r24, 0x02	; 2
    4d9a:	b1 f0       	breq	.+44     	; 0x4dc8 <ATMEGA_set_clk_mode+0x3a>
    4d9c:	83 30       	cpi	r24, 0x03	; 3
    4d9e:	09 f0       	breq	.+2      	; 0x4da2 <ATMEGA_set_clk_mode+0x14>
    4da0:	45 c0       	rjmp	.+138    	; 0x4e2c <ATMEGA_set_clk_mode+0x9e>
    4da2:	17 c0       	rjmp	.+46     	; 0x4dd2 <ATMEGA_set_clk_mode+0x44>
    4da4:	2c 9a       	sbi	0x05, 4	; 5
    4da6:	80 e8       	ldi	r24, 0x80	; 128
    4da8:	80 93 61 00 	sts	0x0061, r24
    4dac:	10 92 61 00 	sts	0x0061, r1
    4db0:	80 e0       	ldi	r24, 0x00	; 0
    4db2:	90 e0       	ldi	r25, 0x00	; 0
    4db4:	00 00       	nop
    4db6:	01 96       	adiw	r24, 0x01	; 1
    4db8:	88 32       	cpi	r24, 0x28	; 40
    4dba:	91 05       	cpc	r25, r1
    4dbc:	d9 f7       	brne	.-10     	; 0x4db4 <ATMEGA_set_clk_mode+0x26>
    4dbe:	10 92 68 00 	sts	0x0068, r1
    4dc2:	10 92 6b 00 	sts	0x006B, r1
    4dc6:	08 95       	ret
    4dc8:	80 e8       	ldi	r24, 0x80	; 128
    4dca:	80 93 61 00 	sts	0x0061, r24
    4dce:	83 e0       	ldi	r24, 0x03	; 3
    4dd0:	04 c0       	rjmp	.+8      	; 0x4dda <ATMEGA_set_clk_mode+0x4c>
    4dd2:	80 e8       	ldi	r24, 0x80	; 128
    4dd4:	80 93 61 00 	sts	0x0061, r24
    4dd8:	88 e0       	ldi	r24, 0x08	; 8
    4dda:	80 93 61 00 	sts	0x0061, r24
    4dde:	28 c0       	rjmp	.+80     	; 0x4e30 <ATMEGA_set_clk_mode+0xa2>
    4de0:	80 e0       	ldi	r24, 0x00	; 0
    4de2:	90 e0       	ldi	r25, 0x00	; 0
    4de4:	00 00       	nop
    4de6:	01 96       	adiw	r24, 0x01	; 1
    4de8:	2d e6       	ldi	r18, 0x6D	; 109
    4dea:	80 36       	cpi	r24, 0x60	; 96
    4dec:	92 07       	cpc	r25, r18
    4dee:	d1 f7       	brne	.-12     	; 0x4de4 <ATMEGA_set_clk_mode+0x56>
    4df0:	2c 98       	cbi	0x05, 4	; 5
    4df2:	80 e0       	ldi	r24, 0x00	; 0
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	00 00       	nop
    4df8:	01 96       	adiw	r24, 0x01	; 1
    4dfa:	2d e6       	ldi	r18, 0x6D	; 109
    4dfc:	80 36       	cpi	r24, 0x60	; 96
    4dfe:	92 07       	cpc	r25, r18
    4e00:	d1 f7       	brne	.-12     	; 0x4df6 <ATMEGA_set_clk_mode+0x68>
    4e02:	10 92 7a 00 	sts	0x007A, r1
    4e06:	8f ef       	ldi	r24, 0xFF	; 255
    4e08:	80 93 64 00 	sts	0x0064, r24
    4e0c:	80 91 68 00 	lds	r24, 0x0068
    4e10:	81 60       	ori	r24, 0x01	; 1
    4e12:	80 93 68 00 	sts	0x0068, r24
    4e16:	80 91 6b 00 	lds	r24, 0x006B
    4e1a:	84 60       	ori	r24, 0x04	; 4
    4e1c:	80 93 6b 00 	sts	0x006B, r24
    4e20:	78 94       	sei
    4e22:	83 b7       	in	r24, 0x33	; 51
    4e24:	81 60       	ori	r24, 0x01	; 1
    4e26:	83 bf       	out	0x33, r24	; 51
    4e28:	88 95       	sleep
    4e2a:	08 95       	ret
    4e2c:	82 30       	cpi	r24, 0x02	; 2
    4e2e:	08 f0       	brcs	.+2      	; 0x4e32 <ATMEGA_set_clk_mode+0xa4>
    4e30:	78 94       	sei
    4e32:	08 95       	ret

00004e34 <SPI_open>:
    4e34:	0f 93       	push	r16
    4e36:	1f 93       	push	r17
    4e38:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <__SPI_init>
    4e3c:	80 e0       	ldi	r24, 0x00	; 0
    4e3e:	67 ec       	ldi	r22, 0xC7	; 199
    4e40:	79 e2       	ldi	r23, 0x29	; 41
    4e42:	0e 94 65 27 	call	0x4eca	; 0x4eca <SPI_set_config_func>
    4e46:	81 e0       	ldi	r24, 0x01	; 1
    4e48:	6f eb       	ldi	r22, 0xBF	; 191
    4e4a:	79 e2       	ldi	r23, 0x29	; 41
    4e4c:	0e 94 65 27 	call	0x4eca	; 0x4eca <SPI_set_config_func>
    4e50:	82 e0       	ldi	r24, 0x02	; 2
    4e52:	67 eb       	ldi	r22, 0xB7	; 183
    4e54:	79 e2       	ldi	r23, 0x29	; 41
    4e56:	0e 94 65 27 	call	0x4eca	; 0x4eca <SPI_set_config_func>
    4e5a:	86 e0       	ldi	r24, 0x06	; 6
    4e5c:	6f ec       	ldi	r22, 0xCF	; 207
    4e5e:	79 e2       	ldi	r23, 0x29	; 41
    4e60:	0e 94 65 27 	call	0x4eca	; 0x4eca <SPI_set_config_func>
    4e64:	0f ea       	ldi	r16, 0xAF	; 175
    4e66:	19 e2       	ldi	r17, 0x29	; 41
    4e68:	83 e0       	ldi	r24, 0x03	; 3
    4e6a:	b8 01       	movw	r22, r16
    4e6c:	0e 94 65 27 	call	0x4eca	; 0x4eca <SPI_set_config_func>
    4e70:	84 e0       	ldi	r24, 0x04	; 4
    4e72:	b8 01       	movw	r22, r16
    4e74:	0e 94 65 27 	call	0x4eca	; 0x4eca <SPI_set_config_func>
    4e78:	85 e0       	ldi	r24, 0x05	; 5
    4e7a:	b8 01       	movw	r22, r16
    4e7c:	0e 94 65 27 	call	0x4eca	; 0x4eca <SPI_set_config_func>
    4e80:	87 e0       	ldi	r24, 0x07	; 7
    4e82:	b8 01       	movw	r22, r16
    4e84:	0e 94 65 27 	call	0x4eca	; 0x4eca <SPI_set_config_func>
    4e88:	82 e0       	ldi	r24, 0x02	; 2
    4e8a:	61 e0       	ldi	r22, 0x01	; 1
    4e8c:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    4e90:	8f ef       	ldi	r24, 0xFF	; 255
    4e92:	80 93 ff 07 	sts	0x07FF, r24
    4e96:	87 e0       	ldi	r24, 0x07	; 7
    4e98:	0e 94 86 1c 	call	0x390c	; 0x390c <SPI_set_slave_addr>
    4e9c:	82 e0       	ldi	r24, 0x02	; 2
    4e9e:	91 e0       	ldi	r25, 0x01	; 1
    4ea0:	1f 91       	pop	r17
    4ea2:	0f 91       	pop	r16
    4ea4:	08 95       	ret

00004ea6 <SPI_receive>:
    4ea6:	1f 93       	push	r17
    4ea8:	16 2f       	mov	r17, r22
    4eaa:	0e 94 86 1c 	call	0x390c	; 0x390c <SPI_set_slave_addr>
    4eae:	82 e0       	ldi	r24, 0x02	; 2
    4eb0:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    4eb4:	81 30       	cpi	r24, 0x01	; 1
    4eb6:	11 f0       	breq	.+4      	; 0x4ebc <SPI_receive+0x16>
    4eb8:	80 e0       	ldi	r24, 0x00	; 0
    4eba:	05 c0       	rjmp	.+10     	; 0x4ec6 <SPI_receive+0x20>
    4ebc:	1e bd       	out	0x2e, r17	; 46
    4ebe:	0d b4       	in	r0, 0x2d	; 45
    4ec0:	07 fe       	sbrs	r0, 7
    4ec2:	fd cf       	rjmp	.-6      	; 0x4ebe <SPI_receive+0x18>
    4ec4:	8e b5       	in	r24, 0x2e	; 46
    4ec6:	1f 91       	pop	r17
    4ec8:	08 95       	ret

00004eca <SPI_set_config_func>:
    4eca:	e8 2f       	mov	r30, r24
    4ecc:	f0 e0       	ldi	r31, 0x00	; 0
    4ece:	ee 0f       	add	r30, r30
    4ed0:	ff 1f       	adc	r31, r31
    4ed2:	e8 53       	subi	r30, 0x38	; 56
    4ed4:	fb 4f       	sbci	r31, 0xFB	; 251
    4ed6:	71 83       	std	Z+1, r23	; 0x01
    4ed8:	60 83       	st	Z, r22
    4eda:	08 95       	ret

00004edc <__SPKR_TIMER1_COMPA_vect>:
    4edc:	0e 94 71 27 	call	0x4ee2	; 0x4ee2 <SPKR_clk>
    4ee0:	08 95       	ret

00004ee2 <SPKR_clk>:
    4ee2:	80 91 da 04 	lds	r24, 0x04DA
    4ee6:	90 91 db 04 	lds	r25, 0x04DB
    4eea:	a0 91 dc 04 	lds	r26, 0x04DC
    4eee:	b0 91 dd 04 	lds	r27, 0x04DD
    4ef2:	20 91 de 04 	lds	r18, 0x04DE
    4ef6:	30 91 df 04 	lds	r19, 0x04DF
    4efa:	40 91 e0 04 	lds	r20, 0x04E0
    4efe:	50 91 e1 04 	lds	r21, 0x04E1
    4f02:	28 0f       	add	r18, r24
    4f04:	39 1f       	adc	r19, r25
    4f06:	4a 1f       	adc	r20, r26
    4f08:	5b 1f       	adc	r21, r27
    4f0a:	20 93 da 04 	sts	0x04DA, r18
    4f0e:	30 93 db 04 	sts	0x04DB, r19
    4f12:	40 93 dc 04 	sts	0x04DC, r20
    4f16:	50 93 dd 04 	sts	0x04DD, r21
    4f1a:	80 91 da 04 	lds	r24, 0x04DA
    4f1e:	90 91 db 04 	lds	r25, 0x04DB
    4f22:	a0 91 dc 04 	lds	r26, 0x04DC
    4f26:	b0 91 dd 04 	lds	r27, 0x04DD
    4f2a:	88 51       	subi	r24, 0x18	; 24
    4f2c:	96 4f       	sbci	r25, 0xF6	; 246
    4f2e:	a0 40       	sbci	r26, 0x00	; 0
    4f30:	b0 40       	sbci	r27, 0x00	; 0
    4f32:	bc f0       	brlt	.+46     	; 0x4f62 <SPKR_clk+0x80>
    4f34:	8b b1       	in	r24, 0x0b	; 11
    4f36:	80 58       	subi	r24, 0x80	; 128
    4f38:	8b b9       	out	0x0b, r24	; 11
    4f3a:	80 91 da 04 	lds	r24, 0x04DA
    4f3e:	90 91 db 04 	lds	r25, 0x04DB
    4f42:	a0 91 dc 04 	lds	r26, 0x04DC
    4f46:	b0 91 dd 04 	lds	r27, 0x04DD
    4f4a:	88 51       	subi	r24, 0x18	; 24
    4f4c:	96 4f       	sbci	r25, 0xF6	; 246
    4f4e:	a0 40       	sbci	r26, 0x00	; 0
    4f50:	b0 40       	sbci	r27, 0x00	; 0
    4f52:	80 93 da 04 	sts	0x04DA, r24
    4f56:	90 93 db 04 	sts	0x04DB, r25
    4f5a:	a0 93 dc 04 	sts	0x04DC, r26
    4f5e:	b0 93 dd 04 	sts	0x04DD, r27
    4f62:	08 95       	ret

00004f64 <__SPKR_close_beep_mode>:
    4f64:	8a e0       	ldi	r24, 0x0A	; 10
    4f66:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    4f6a:	81 30       	cpi	r24, 0x01	; 1
    4f6c:	41 f4       	brne	.+16     	; 0x4f7e <__SPKR_close_beep_mode+0x1a>
    4f6e:	0e 94 f6 29 	call	0x53ec	; 0x53ec <__SPKR_close>
    4f72:	10 92 d9 04 	sts	0x04D9, r1
    4f76:	8a e0       	ldi	r24, 0x0A	; 10
    4f78:	60 e0       	ldi	r22, 0x00	; 0
    4f7a:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    4f7e:	08 95       	ret

00004f80 <__SPKR_close_tone_mode>:
    4f80:	89 e0       	ldi	r24, 0x09	; 9
    4f82:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    4f86:	81 30       	cpi	r24, 0x01	; 1
    4f88:	d9 f4       	brne	.+54     	; 0x4fc0 <__SPKR_close_tone_mode+0x40>
    4f8a:	80 91 d8 04 	lds	r24, 0x04D8
    4f8e:	88 23       	and	r24, r24
    4f90:	11 f0       	breq	.+4      	; 0x4f96 <__SPKR_close_tone_mode+0x16>
    4f92:	0e 94 62 28 	call	0x50c4	; 0x50c4 <__SPKR_stop>
    4f96:	82 e0       	ldi	r24, 0x02	; 2
    4f98:	0e 94 f6 29 	call	0x53ec	; 0x53ec <__SPKR_close>
    4f9c:	80 91 e6 04 	lds	r24, 0x04E6
    4fa0:	90 91 e7 04 	lds	r25, 0x04E7
    4fa4:	00 97       	sbiw	r24, 0x00	; 0
    4fa6:	31 f0       	breq	.+12     	; 0x4fb4 <__SPKR_close_tone_mode+0x34>
    4fa8:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <free>
    4fac:	10 92 e7 04 	sts	0x04E7, r1
    4fb0:	10 92 e6 04 	sts	0x04E6, r1
    4fb4:	10 92 d8 04 	sts	0x04D8, r1
    4fb8:	89 e0       	ldi	r24, 0x09	; 9
    4fba:	60 e0       	ldi	r22, 0x00	; 0
    4fbc:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    4fc0:	08 95       	ret

00004fc2 <SPKR_close>:
    4fc2:	81 30       	cpi	r24, 0x01	; 1
    4fc4:	29 f0       	breq	.+10     	; 0x4fd0 <SPKR_close+0xe>
    4fc6:	82 30       	cpi	r24, 0x02	; 2
    4fc8:	29 f4       	brne	.+10     	; 0x4fd4 <SPKR_close+0x12>
    4fca:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__SPKR_close_tone_mode>
    4fce:	08 95       	ret
    4fd0:	0e 94 b2 27 	call	0x4f64	; 0x4f64 <__SPKR_close_beep_mode>
    4fd4:	08 95       	ret

00004fd6 <__SPKR_init>:
    4fd6:	98 2f       	mov	r25, r24
    4fd8:	80 91 d8 04 	lds	r24, 0x04D8
    4fdc:	88 23       	and	r24, r24
    4fde:	31 f4       	brne	.+12     	; 0x4fec <__SPKR_init+0x16>
    4fe0:	80 91 d9 04 	lds	r24, 0x04D9
    4fe4:	88 23       	and	r24, r24
    4fe6:	11 f4       	brne	.+4      	; 0x4fec <__SPKR_init+0x16>
    4fe8:	57 9a       	sbi	0x0a, 7	; 10
    4fea:	5f 98       	cbi	0x0b, 7	; 11
    4fec:	80 91 d8 04 	lds	r24, 0x04D8
    4ff0:	88 23       	and	r24, r24
    4ff2:	d1 f4       	brne	.+52     	; 0x5028 <__SPKR_init+0x52>
    4ff4:	92 30       	cpi	r25, 0x02	; 2
    4ff6:	c1 f4       	brne	.+48     	; 0x5028 <__SPKR_init+0x52>
    4ff8:	10 92 80 00 	sts	0x0080, r1
    4ffc:	10 92 81 00 	sts	0x0081, r1
    5000:	80 91 81 00 	lds	r24, 0x0081
    5004:	88 60       	ori	r24, 0x08	; 8
    5006:	80 93 81 00 	sts	0x0081, r24
    500a:	80 91 81 00 	lds	r24, 0x0081
    500e:	81 60       	ori	r24, 0x01	; 1
    5010:	80 93 81 00 	sts	0x0081, r24
    5014:	10 92 85 00 	sts	0x0085, r1
    5018:	10 92 84 00 	sts	0x0084, r1
    501c:	81 e0       	ldi	r24, 0x01	; 1
    501e:	80 93 89 00 	sts	0x0089, r24
    5022:	80 e9       	ldi	r24, 0x90	; 144
    5024:	80 93 88 00 	sts	0x0088, r24
    5028:	08 95       	ret

0000502a <SPKR_play_beep>:
    502a:	8f 92       	push	r8
    502c:	9f 92       	push	r9
    502e:	af 92       	push	r10
    5030:	bf 92       	push	r11
    5032:	cf 92       	push	r12
    5034:	df 92       	push	r13
    5036:	ef 92       	push	r14
    5038:	ff 92       	push	r15
    503a:	0f 93       	push	r16
    503c:	1f 93       	push	r17
    503e:	cf 93       	push	r28
    5040:	df 93       	push	r29
    5042:	4b 01       	movw	r8, r22
    5044:	5c 01       	movw	r10, r24
    5046:	ea 01       	movw	r28, r20
    5048:	b9 01       	movw	r22, r18
    504a:	21 15       	cp	r18, r1
    504c:	31 05       	cpc	r19, r1
    504e:	39 f1       	breq	.+78     	; 0x509e <SPKR_play_beep+0x74>
    5050:	9e 01       	movw	r18, r28
    5052:	44 27       	eor	r20, r20
    5054:	37 fd       	sbrc	r19, 7
    5056:	40 95       	com	r20
    5058:	54 2f       	mov	r21, r20
    505a:	65 36       	cpi	r22, 0x65	; 101
    505c:	71 05       	cpc	r23, r1
    505e:	10 f0       	brcs	.+4      	; 0x5064 <SPKR_play_beep+0x3a>
    5060:	64 e6       	ldi	r22, 0x64	; 100
    5062:	70 e0       	ldi	r23, 0x00	; 0
    5064:	80 e0       	ldi	r24, 0x00	; 0
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	0e 94 44 35 	call	0x6a88	; 0x6a88 <__mulsi3>
    506c:	24 e6       	ldi	r18, 0x64	; 100
    506e:	30 e0       	ldi	r19, 0x00	; 0
    5070:	40 e0       	ldi	r20, 0x00	; 0
    5072:	50 e0       	ldi	r21, 0x00	; 0
    5074:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__udivmodsi4>
    5078:	79 01       	movw	r14, r18
    507a:	8a 01       	movw	r16, r20
    507c:	c5 01       	movw	r24, r10
    507e:	b4 01       	movw	r22, r8
    5080:	0e 94 df 29 	call	0x53be	; 0x53be <SPKR_beep>
    5084:	c7 01       	movw	r24, r14
    5086:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
    508a:	60 e0       	ldi	r22, 0x00	; 0
    508c:	70 e0       	ldi	r23, 0x00	; 0
    508e:	80 e0       	ldi	r24, 0x00	; 0
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	0e 94 df 29 	call	0x53be	; 0x53be <SPKR_beep>
    5096:	ce 01       	movw	r24, r28
    5098:	8e 19       	sub	r24, r14
    509a:	9f 09       	sbc	r25, r15
    509c:	04 c0       	rjmp	.+8      	; 0x50a6 <SPKR_play_beep+0x7c>
    509e:	41 15       	cp	r20, r1
    50a0:	51 05       	cpc	r21, r1
    50a2:	19 f0       	breq	.+6      	; 0x50aa <SPKR_play_beep+0x80>
    50a4:	ca 01       	movw	r24, r20
    50a6:	0e 94 46 22 	call	0x448c	; 0x448c <TMRSRVC_delay>
    50aa:	df 91       	pop	r29
    50ac:	cf 91       	pop	r28
    50ae:	1f 91       	pop	r17
    50b0:	0f 91       	pop	r16
    50b2:	ff 90       	pop	r15
    50b4:	ef 90       	pop	r14
    50b6:	df 90       	pop	r13
    50b8:	cf 90       	pop	r12
    50ba:	bf 90       	pop	r11
    50bc:	af 90       	pop	r10
    50be:	9f 90       	pop	r9
    50c0:	8f 90       	pop	r8
    50c2:	08 95       	ret

000050c4 <__SPKR_stop>:
    50c4:	ef e6       	ldi	r30, 0x6F	; 111
    50c6:	f0 e0       	ldi	r31, 0x00	; 0
    50c8:	80 81       	ld	r24, Z
    50ca:	8d 7f       	andi	r24, 0xFD	; 253
    50cc:	80 83       	st	Z, r24
    50ce:	08 95       	ret

000050d0 <STEPPER_go>:
    50d0:	98 2f       	mov	r25, r24
    50d2:	81 e0       	ldi	r24, 0x01	; 1
    50d4:	80 93 e4 07 	sts	0x07E4, r24
    50d8:	91 30       	cpi	r25, 0x01	; 1
    50da:	51 f0       	breq	.+20     	; 0x50f0 <STEPPER_go+0x20>
    50dc:	91 30       	cpi	r25, 0x01	; 1
    50de:	18 f0       	brcs	.+6      	; 0x50e6 <STEPPER_go+0x16>
    50e0:	92 30       	cpi	r25, 0x02	; 2
    50e2:	41 f4       	brne	.+16     	; 0x50f4 <STEPPER_go+0x24>
    50e4:	03 c0       	rjmp	.+6      	; 0x50ec <STEPPER_go+0x1c>
    50e6:	10 92 cc 07 	sts	0x07CC, r1
    50ea:	04 c0       	rjmp	.+8      	; 0x50f4 <STEPPER_go+0x24>
    50ec:	10 92 cc 07 	sts	0x07CC, r1
    50f0:	10 92 cd 07 	sts	0x07CD, r1
    50f4:	10 92 e4 07 	sts	0x07E4, r1
    50f8:	08 95       	ret

000050fa <__STEPPER_init>:
    50fa:	3a 9a       	sbi	0x07, 2	; 7
    50fc:	3b 9a       	sbi	0x07, 3	; 7
    50fe:	3c 9a       	sbi	0x07, 4	; 7
    5100:	3d 9a       	sbi	0x07, 5	; 7
    5102:	3e 9a       	sbi	0x07, 6	; 7
    5104:	3f 9a       	sbi	0x07, 7	; 7
    5106:	88 b1       	in	r24, 0x08	; 8
    5108:	83 70       	andi	r24, 0x03	; 3
    510a:	88 b9       	out	0x08, r24	; 8
    510c:	08 95       	ret

0000510e <STEPPER_set_stop_mode>:
    510e:	98 2f       	mov	r25, r24
    5110:	81 e0       	ldi	r24, 0x01	; 1
    5112:	80 93 e4 07 	sts	0x07E4, r24
    5116:	91 30       	cpi	r25, 0x01	; 1
    5118:	51 f0       	breq	.+20     	; 0x512e <STEPPER_set_stop_mode+0x20>
    511a:	91 30       	cpi	r25, 0x01	; 1
    511c:	18 f0       	brcs	.+6      	; 0x5124 <STEPPER_set_stop_mode+0x16>
    511e:	92 30       	cpi	r25, 0x02	; 2
    5120:	41 f4       	brne	.+16     	; 0x5132 <STEPPER_set_stop_mode+0x24>
    5122:	03 c0       	rjmp	.+6      	; 0x512a <STEPPER_set_stop_mode+0x1c>
    5124:	60 93 ce 07 	sts	0x07CE, r22
    5128:	04 c0       	rjmp	.+8      	; 0x5132 <STEPPER_set_stop_mode+0x24>
    512a:	60 93 ce 07 	sts	0x07CE, r22
    512e:	60 93 cf 07 	sts	0x07CF, r22
    5132:	10 92 e4 07 	sts	0x07E4, r1
    5136:	08 95       	ret

00005138 <STEPPER_setup_decels>:
    5138:	0f 93       	push	r16
    513a:	1f 93       	push	r17
    513c:	cf 93       	push	r28
    513e:	df 93       	push	r29
    5140:	eb 01       	movw	r28, r22
    5142:	8a 01       	movw	r16, r20
    5144:	81 30       	cpi	r24, 0x01	; 1
    5146:	01 f1       	breq	.+64     	; 0x5188 <STEPPER_setup_decels+0x50>
    5148:	81 30       	cpi	r24, 0x01	; 1
    514a:	18 f0       	brcs	.+6      	; 0x5152 <STEPPER_setup_decels+0x1a>
    514c:	82 30       	cpi	r24, 0x02	; 2
    514e:	61 f5       	brne	.+88     	; 0x51a8 <STEPPER_setup_decels+0x70>
    5150:	0d c0       	rjmp	.+26     	; 0x516c <STEPPER_setup_decels+0x34>
    5152:	80 91 b8 07 	lds	r24, 0x07B8
    5156:	90 91 b9 07 	lds	r25, 0x07B9
    515a:	89 2b       	or	r24, r25
    515c:	11 f0       	breq	.+4      	; 0x5162 <STEPPER_setup_decels+0x2a>
    515e:	80 e0       	ldi	r24, 0x00	; 0
    5160:	1a c0       	rjmp	.+52     	; 0x5196 <STEPPER_setup_decels+0x5e>
    5162:	10 92 c5 07 	sts	0x07C5, r1
    5166:	10 92 c4 07 	sts	0x07C4, r1
    516a:	1e c0       	rjmp	.+60     	; 0x51a8 <STEPPER_setup_decels+0x70>
    516c:	80 91 b8 07 	lds	r24, 0x07B8
    5170:	90 91 b9 07 	lds	r25, 0x07B9
    5174:	89 2b       	or	r24, r25
    5176:	21 f0       	breq	.+8      	; 0x5180 <STEPPER_setup_decels+0x48>
    5178:	80 e0       	ldi	r24, 0x00	; 0
    517a:	0e 94 12 2a 	call	0x5424	; 0x5424 <STEPPER_set_decel_step_values>
    517e:	04 c0       	rjmp	.+8      	; 0x5188 <STEPPER_setup_decels+0x50>
    5180:	10 92 c5 07 	sts	0x07C5, r1
    5184:	10 92 c4 07 	sts	0x07C4, r1
    5188:	80 91 ba 07 	lds	r24, 0x07BA
    518c:	90 91 bb 07 	lds	r25, 0x07BB
    5190:	89 2b       	or	r24, r25
    5192:	31 f0       	breq	.+12     	; 0x51a0 <STEPPER_setup_decels+0x68>
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	be 01       	movw	r22, r28
    5198:	a8 01       	movw	r20, r16
    519a:	0e 94 12 2a 	call	0x5424	; 0x5424 <STEPPER_set_decel_step_values>
    519e:	04 c0       	rjmp	.+8      	; 0x51a8 <STEPPER_setup_decels+0x70>
    51a0:	10 92 c7 07 	sts	0x07C7, r1
    51a4:	10 92 c6 07 	sts	0x07C6, r1
    51a8:	df 91       	pop	r29
    51aa:	cf 91       	pop	r28
    51ac:	1f 91       	pop	r17
    51ae:	0f 91       	pop	r16
    51b0:	08 95       	ret

000051b2 <SYS_init>:
    51b2:	10 92 e7 07 	sts	0x07E7, r1
    51b6:	10 92 e8 07 	sts	0x07E8, r1
    51ba:	10 92 ec 07 	sts	0x07EC, r1
    51be:	10 92 e9 07 	sts	0x07E9, r1
    51c2:	10 92 eb 07 	sts	0x07EB, r1
    51c6:	10 92 ed 07 	sts	0x07ED, r1
    51ca:	10 92 ee 07 	sts	0x07EE, r1
    51ce:	10 92 ef 07 	sts	0x07EF, r1
    51d2:	10 92 f0 07 	sts	0x07F0, r1
    51d6:	10 92 f1 07 	sts	0x07F1, r1
    51da:	10 92 f2 07 	sts	0x07F2, r1
    51de:	10 92 f3 07 	sts	0x07F3, r1
    51e2:	10 92 f4 07 	sts	0x07F4, r1
    51e6:	10 92 f5 07 	sts	0x07F5, r1
    51ea:	10 92 f6 07 	sts	0x07F6, r1
    51ee:	10 92 f7 07 	sts	0x07F7, r1
    51f2:	10 92 f8 07 	sts	0x07F8, r1
    51f6:	08 95       	ret

000051f8 <TMRSRVC_insert>:
    51f8:	cf 92       	push	r12
    51fa:	df 92       	push	r13
    51fc:	ef 92       	push	r14
    51fe:	ff 92       	push	r15
    5200:	0f 93       	push	r16
    5202:	1f 93       	push	r17
    5204:	cf 93       	push	r28
    5206:	df 93       	push	r29
    5208:	ec 01       	movw	r28, r24
    520a:	80 91 1e 08 	lds	r24, 0x081E
    520e:	88 23       	and	r24, r24
    5210:	39 f4       	brne	.+14     	; 0x5220 <TMRSRVC_insert+0x28>
    5212:	d0 93 20 08 	sts	0x0820, r29
    5216:	c0 93 1f 08 	sts	0x081F, r28
    521a:	0e 94 8a 29 	call	0x5314	; 0x5314 <TMRSRVC_start>
    521e:	47 c0       	rjmp	.+142    	; 0x52ae <TMRSRVC_insert+0xb6>
    5220:	c0 90 1f 08 	lds	r12, 0x081F
    5224:	d0 90 20 08 	lds	r13, 0x0820
    5228:	00 e0       	ldi	r16, 0x00	; 0
    522a:	10 e0       	ldi	r17, 0x00	; 0
    522c:	ee 24       	eor	r14, r14
    522e:	ff 24       	eor	r15, r15
    5230:	37 c0       	rjmp	.+110    	; 0x52a0 <TMRSRVC_insert+0xa8>
    5232:	a8 81       	ld	r26, Y
    5234:	b9 81       	ldd	r27, Y+1	; 0x01
    5236:	fd 01       	movw	r30, r26
    5238:	64 81       	ldd	r22, Z+4	; 0x04
    523a:	75 81       	ldd	r23, Z+5	; 0x05
    523c:	f6 01       	movw	r30, r12
    523e:	40 81       	ld	r20, Z
    5240:	51 81       	ldd	r21, Z+1	; 0x01
    5242:	fa 01       	movw	r30, r20
    5244:	84 81       	ldd	r24, Z+4	; 0x04
    5246:	95 81       	ldd	r25, Z+5	; 0x05
    5248:	9b 01       	movw	r18, r22
    524a:	28 1b       	sub	r18, r24
    524c:	39 0b       	sbc	r19, r25
    524e:	37 ff       	sbrs	r19, 7
    5250:	0f c0       	rjmp	.+30     	; 0x5270 <TMRSRVC_insert+0x78>
    5252:	86 1b       	sub	r24, r22
    5254:	97 0b       	sbc	r25, r23
    5256:	95 83       	std	Z+5, r25	; 0x05
    5258:	84 83       	std	Z+4, r24	; 0x04
    525a:	db 82       	std	Y+3, r13	; 0x03
    525c:	ca 82       	std	Y+2, r12	; 0x02
    525e:	01 2b       	or	r16, r17
    5260:	29 f4       	brne	.+10     	; 0x526c <TMRSRVC_insert+0x74>
    5262:	d0 93 20 08 	sts	0x0820, r29
    5266:	c0 93 1f 08 	sts	0x081F, r28
    526a:	21 c0       	rjmp	.+66     	; 0x52ae <TMRSRVC_insert+0xb6>
    526c:	f7 01       	movw	r30, r14
    526e:	0c c0       	rjmp	.+24     	; 0x5288 <TMRSRVC_insert+0x90>
    5270:	f6 01       	movw	r30, r12
    5272:	82 81       	ldd	r24, Z+2	; 0x02
    5274:	93 81       	ldd	r25, Z+3	; 0x03
    5276:	21 15       	cp	r18, r1
    5278:	31 05       	cpc	r19, r1
    527a:	49 f4       	brne	.+18     	; 0x528e <TMRSRVC_insert+0x96>
    527c:	fd 01       	movw	r30, r26
    527e:	15 82       	std	Z+5, r1	; 0x05
    5280:	14 82       	std	Z+4, r1	; 0x04
    5282:	9b 83       	std	Y+3, r25	; 0x03
    5284:	8a 83       	std	Y+2, r24	; 0x02
    5286:	f6 01       	movw	r30, r12
    5288:	d3 83       	std	Z+3, r29	; 0x03
    528a:	c2 83       	std	Z+2, r28	; 0x02
    528c:	10 c0       	rjmp	.+32     	; 0x52ae <TMRSRVC_insert+0xb6>
    528e:	fd 01       	movw	r30, r26
    5290:	35 83       	std	Z+5, r19	; 0x05
    5292:	24 83       	std	Z+4, r18	; 0x04
    5294:	00 97       	sbiw	r24, 0x00	; 0
    5296:	b9 f3       	breq	.-18     	; 0x5286 <TMRSRVC_insert+0x8e>
    5298:	0f 5f       	subi	r16, 0xFF	; 255
    529a:	1f 4f       	sbci	r17, 0xFF	; 255
    529c:	76 01       	movw	r14, r12
    529e:	6c 01       	movw	r12, r24
    52a0:	80 91 1e 08 	lds	r24, 0x081E
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	08 17       	cp	r16, r24
    52a8:	19 07       	cpc	r17, r25
    52aa:	18 f2       	brcs	.-122    	; 0x5232 <TMRSRVC_insert+0x3a>
    52ac:	ec cf       	rjmp	.-40     	; 0x5286 <TMRSRVC_insert+0x8e>
    52ae:	80 91 1e 08 	lds	r24, 0x081E
    52b2:	8f 5f       	subi	r24, 0xFF	; 255
    52b4:	80 93 1e 08 	sts	0x081E, r24
    52b8:	df 91       	pop	r29
    52ba:	cf 91       	pop	r28
    52bc:	1f 91       	pop	r17
    52be:	0f 91       	pop	r16
    52c0:	ff 90       	pop	r15
    52c2:	ef 90       	pop	r14
    52c4:	df 90       	pop	r13
    52c6:	cf 90       	pop	r12
    52c8:	08 95       	ret

000052ca <TMRSRVC_open>:
    52ca:	88 e0       	ldi	r24, 0x08	; 8
    52cc:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    52d0:	88 23       	and	r24, r24
    52d2:	b9 f4       	brne	.+46     	; 0x5302 <TMRSRVC_open+0x38>
    52d4:	10 92 1e 08 	sts	0x081E, r1
    52d8:	10 92 20 08 	sts	0x0820, r1
    52dc:	10 92 1f 08 	sts	0x081F, r1
    52e0:	10 92 e8 04 	sts	0x04E8, r1
    52e4:	10 92 e9 04 	sts	0x04E9, r1
    52e8:	80 e1       	ldi	r24, 0x10	; 16
    52ea:	6f e7       	ldi	r22, 0x7F	; 127
    52ec:	7a e2       	ldi	r23, 0x2A	; 42
    52ee:	0e 94 9b 29 	call	0x5336	; 0x5336 <__ISR_attach>
    52f2:	0e 94 86 2a 	call	0x550c	; 0x550c <__TMRSRVC_init>
    52f6:	0e 94 84 29 	call	0x5308	; 0x5308 <__TMRSRVC_start>
    52fa:	88 e0       	ldi	r24, 0x08	; 8
    52fc:	61 e0       	ldi	r22, 0x01	; 1
    52fe:	0e 94 31 21 	call	0x4262	; 0x4262 <SYS_set_state>
    5302:	88 e0       	ldi	r24, 0x08	; 8
    5304:	91 e0       	ldi	r25, 0x01	; 1
    5306:	08 95       	ret

00005308 <__TMRSRVC_start>:
    5308:	ee e6       	ldi	r30, 0x6E	; 110
    530a:	f0 e0       	ldi	r31, 0x00	; 0
    530c:	80 81       	ld	r24, Z
    530e:	82 60       	ori	r24, 0x02	; 2
    5310:	80 83       	st	Z, r24
    5312:	08 95       	ret

00005314 <TMRSRVC_start>:
    5314:	81 e0       	ldi	r24, 0x01	; 1
    5316:	80 93 e9 04 	sts	0x04E9, r24
    531a:	08 95       	ret

0000531c <I2C_enable>:
    531c:	80 91 21 08 	lds	r24, 0x0821
    5320:	81 30       	cpi	r24, 0x01	; 1
    5322:	29 f4       	brne	.+10     	; 0x532e <I2C_enable+0x12>
    5324:	80 91 bc 00 	lds	r24, 0x00BC
    5328:	84 60       	ori	r24, 0x04	; 4
    532a:	80 93 bc 00 	sts	0x00BC, r24
    532e:	08 95       	ret

00005330 <__I2C_init>:
    5330:	38 98       	cbi	0x07, 0	; 7
    5332:	39 98       	cbi	0x07, 1	; 7
    5334:	08 95       	ret

00005336 <__ISR_attach>:
    5336:	80 32       	cpi	r24, 0x20	; 32
    5338:	18 f0       	brcs	.+6      	; 0x5340 <__ISR_attach+0xa>
    533a:	20 e0       	ldi	r18, 0x00	; 0
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	0a c0       	rjmp	.+20     	; 0x5354 <__ISR_attach+0x1e>
    5340:	e8 2f       	mov	r30, r24
    5342:	f0 e0       	ldi	r31, 0x00	; 0
    5344:	ee 0f       	add	r30, r30
    5346:	ff 1f       	adc	r31, r31
    5348:	e8 57       	subi	r30, 0x78	; 120
    534a:	fb 4f       	sbci	r31, 0xFB	; 251
    534c:	20 81       	ld	r18, Z
    534e:	31 81       	ldd	r19, Z+1	; 0x01
    5350:	71 83       	std	Z+1, r23	; 0x01
    5352:	60 83       	st	Z, r22
    5354:	c9 01       	movw	r24, r18
    5356:	08 95       	ret

00005358 <__ATMEGA_init>:
    5358:	24 9a       	sbi	0x04, 4	; 4
    535a:	2c 9a       	sbi	0x05, 4	; 5
    535c:	08 95       	ret

0000535e <SPI_default_config>:
    535e:	83 e5       	ldi	r24, 0x53	; 83
    5360:	8c bd       	out	0x2c, r24	; 44
    5362:	81 e0       	ldi	r24, 0x01	; 1
    5364:	8d bd       	out	0x2d, r24	; 45
    5366:	8d e0       	ldi	r24, 0x0D	; 13
    5368:	8a 95       	dec	r24
    536a:	f1 f7       	brne	.-4      	; 0x5368 <SPI_default_config+0xa>
    536c:	08 95       	ret

0000536e <SPI_ATtiny0_config>:
    536e:	83 e5       	ldi	r24, 0x53	; 83
    5370:	8c bd       	out	0x2c, r24	; 44
    5372:	1d bc       	out	0x2d, r1	; 45
    5374:	84 ef       	ldi	r24, 0xF4	; 244
    5376:	91 e0       	ldi	r25, 0x01	; 1
    5378:	01 97       	sbiw	r24, 0x01	; 1
    537a:	f1 f7       	brne	.-4      	; 0x5378 <SPI_ATtiny0_config+0xa>
    537c:	08 95       	ret

0000537e <SPI_PSXC_config>:
    537e:	8f e7       	ldi	r24, 0x7F	; 127
    5380:	8c bd       	out	0x2c, r24	; 44
    5382:	1d bc       	out	0x2d, r1	; 45
    5384:	84 ef       	ldi	r24, 0xF4	; 244
    5386:	91 e0       	ldi	r25, 0x01	; 1
    5388:	01 97       	sbiw	r24, 0x01	; 1
    538a:	f1 f7       	brne	.-4      	; 0x5388 <SPI_PSXC_config+0xa>
    538c:	08 95       	ret

0000538e <SPI_LCD_config>:
    538e:	83 e5       	ldi	r24, 0x53	; 83
    5390:	8c bd       	out	0x2c, r24	; 44
    5392:	81 e0       	ldi	r24, 0x01	; 1
    5394:	8d bd       	out	0x2d, r24	; 45
    5396:	8d e0       	ldi	r24, 0x0D	; 13
    5398:	8a 95       	dec	r24
    539a:	f1 f7       	brne	.-4      	; 0x5398 <SPI_LCD_config+0xa>
    539c:	08 95       	ret

0000539e <SPI_FLASH_config>:
    539e:	83 e5       	ldi	r24, 0x53	; 83
    53a0:	8c bd       	out	0x2c, r24	; 44
    53a2:	81 e0       	ldi	r24, 0x01	; 1
    53a4:	8d bd       	out	0x2d, r24	; 45
    53a6:	84 ef       	ldi	r24, 0xF4	; 244
    53a8:	91 e0       	ldi	r25, 0x01	; 1
    53aa:	01 97       	sbiw	r24, 0x01	; 1
    53ac:	f1 f7       	brne	.-4      	; 0x53aa <SPI_FLASH_config+0xc>
    53ae:	08 95       	ret

000053b0 <__SPI_init>:
    53b0:	25 9a       	sbi	0x04, 5	; 4
    53b2:	26 98       	cbi	0x04, 6	; 4
    53b4:	27 9a       	sbi	0x04, 7	; 4
    53b6:	20 9a       	sbi	0x04, 0	; 4
    53b8:	21 9a       	sbi	0x04, 1	; 4
    53ba:	22 9a       	sbi	0x04, 2	; 4
    53bc:	08 95       	ret

000053be <SPKR_beep>:
    53be:	9b 01       	movw	r18, r22
    53c0:	ac 01       	movw	r20, r24
    53c2:	80 91 d9 04 	lds	r24, 0x04D9
    53c6:	88 23       	and	r24, r24
    53c8:	81 f0       	breq	.+32     	; 0x53ea <SPKR_beep+0x2c>
    53ca:	da 01       	movw	r26, r20
    53cc:	c9 01       	movw	r24, r18
    53ce:	88 0f       	add	r24, r24
    53d0:	99 1f       	adc	r25, r25
    53d2:	aa 1f       	adc	r26, r26
    53d4:	bb 1f       	adc	r27, r27
    53d6:	90 93 e5 04 	sts	0x04E5, r25
    53da:	80 93 e4 04 	sts	0x04E4, r24
    53de:	21 15       	cp	r18, r1
    53e0:	31 05       	cpc	r19, r1
    53e2:	41 05       	cpc	r20, r1
    53e4:	51 05       	cpc	r21, r1
    53e6:	09 f4       	brne	.+2      	; 0x53ea <SPKR_beep+0x2c>
    53e8:	5f 98       	cbi	0x0b, 7	; 11
    53ea:	08 95       	ret

000053ec <__SPKR_close>:
    53ec:	82 30       	cpi	r24, 0x02	; 2
    53ee:	29 f4       	brne	.+10     	; 0x53fa <__SPKR_close+0xe>
    53f0:	80 91 81 00 	lds	r24, 0x0081
    53f4:	8e 7f       	andi	r24, 0xFE	; 254
    53f6:	80 93 81 00 	sts	0x0081, r24
    53fa:	80 91 d8 04 	lds	r24, 0x04D8
    53fe:	81 30       	cpi	r24, 0x01	; 1
    5400:	31 f4       	brne	.+12     	; 0x540e <__SPKR_close+0x22>
    5402:	80 91 d9 04 	lds	r24, 0x04D9
    5406:	81 30       	cpi	r24, 0x01	; 1
    5408:	11 f4       	brne	.+4      	; 0x540e <__SPKR_close+0x22>
    540a:	00 00       	nop
    540c:	08 95       	ret
    540e:	80 91 d8 04 	lds	r24, 0x04D8
    5412:	81 30       	cpi	r24, 0x01	; 1
    5414:	21 f0       	breq	.+8      	; 0x541e <__SPKR_close+0x32>
    5416:	80 91 d9 04 	lds	r24, 0x04D9
    541a:	81 30       	cpi	r24, 0x01	; 1
    541c:	11 f4       	brne	.+4      	; 0x5422 <__SPKR_close+0x36>
    541e:	5f 98       	cbi	0x0b, 7	; 11
    5420:	57 98       	cbi	0x0a, 7	; 10
    5422:	08 95       	ret

00005424 <STEPPER_set_decel_step_values>:
    5424:	ef 92       	push	r14
    5426:	ff 92       	push	r15
    5428:	0f 93       	push	r16
    542a:	1f 93       	push	r17
    542c:	cf 93       	push	r28
    542e:	df 93       	push	r29
    5430:	eb 01       	movw	r28, r22
    5432:	88 23       	and	r24, r24
    5434:	21 f0       	breq	.+8      	; 0x543e <STEPPER_set_decel_step_values+0x1a>
    5436:	81 30       	cpi	r24, 0x01	; 1
    5438:	09 f0       	breq	.+2      	; 0x543c <STEPPER_set_decel_step_values+0x18>
    543a:	5a c0       	rjmp	.+180    	; 0x54f0 <STEPPER_set_decel_step_values+0xcc>
    543c:	2d c0       	rjmp	.+90     	; 0x5498 <STEPPER_set_decel_step_values+0x74>
    543e:	9a 01       	movw	r18, r20
    5440:	40 e0       	ldi	r20, 0x00	; 0
    5442:	50 e0       	ldi	r21, 0x00	; 0
    5444:	ca 01       	movw	r24, r20
    5446:	b9 01       	movw	r22, r18
    5448:	0e 94 44 35 	call	0x6a88	; 0x6a88 <__mulsi3>
    544c:	20 91 b8 07 	lds	r18, 0x07B8
    5450:	30 91 b9 07 	lds	r19, 0x07B9
    5454:	22 0f       	add	r18, r18
    5456:	33 1f       	adc	r19, r19
    5458:	40 e0       	ldi	r20, 0x00	; 0
    545a:	50 e0       	ldi	r21, 0x00	; 0
    545c:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__udivmodsi4>
    5460:	79 01       	movw	r14, r18
    5462:	8a 01       	movw	r16, r20
    5464:	a8 01       	movw	r20, r16
    5466:	97 01       	movw	r18, r14
    5468:	22 0f       	add	r18, r18
    546a:	33 1f       	adc	r19, r19
    546c:	44 1f       	adc	r20, r20
    546e:	55 1f       	adc	r21, r21
    5470:	ce 01       	movw	r24, r28
    5472:	a0 e0       	ldi	r26, 0x00	; 0
    5474:	b0 e0       	ldi	r27, 0x00	; 0
    5476:	82 17       	cp	r24, r18
    5478:	93 07       	cpc	r25, r19
    547a:	a4 07       	cpc	r26, r20
    547c:	b5 07       	cpc	r27, r21
    547e:	28 f0       	brcs	.+10     	; 0x548a <STEPPER_set_decel_step_values+0x66>
    5480:	f0 92 c5 07 	sts	0x07C5, r15
    5484:	e0 92 c4 07 	sts	0x07C4, r14
    5488:	33 c0       	rjmp	.+102    	; 0x54f0 <STEPPER_set_decel_step_values+0xcc>
    548a:	d6 95       	lsr	r29
    548c:	c7 95       	ror	r28
    548e:	d0 93 c5 07 	sts	0x07C5, r29
    5492:	c0 93 c4 07 	sts	0x07C4, r28
    5496:	2c c0       	rjmp	.+88     	; 0x54f0 <STEPPER_set_decel_step_values+0xcc>
    5498:	9a 01       	movw	r18, r20
    549a:	40 e0       	ldi	r20, 0x00	; 0
    549c:	50 e0       	ldi	r21, 0x00	; 0
    549e:	ca 01       	movw	r24, r20
    54a0:	b9 01       	movw	r22, r18
    54a2:	0e 94 44 35 	call	0x6a88	; 0x6a88 <__mulsi3>
    54a6:	20 91 ba 07 	lds	r18, 0x07BA
    54aa:	30 91 bb 07 	lds	r19, 0x07BB
    54ae:	22 0f       	add	r18, r18
    54b0:	33 1f       	adc	r19, r19
    54b2:	40 e0       	ldi	r20, 0x00	; 0
    54b4:	50 e0       	ldi	r21, 0x00	; 0
    54b6:	0e 94 63 35 	call	0x6ac6	; 0x6ac6 <__udivmodsi4>
    54ba:	79 01       	movw	r14, r18
    54bc:	8a 01       	movw	r16, r20
    54be:	a8 01       	movw	r20, r16
    54c0:	97 01       	movw	r18, r14
    54c2:	22 0f       	add	r18, r18
    54c4:	33 1f       	adc	r19, r19
    54c6:	44 1f       	adc	r20, r20
    54c8:	55 1f       	adc	r21, r21
    54ca:	ce 01       	movw	r24, r28
    54cc:	a0 e0       	ldi	r26, 0x00	; 0
    54ce:	b0 e0       	ldi	r27, 0x00	; 0
    54d0:	82 17       	cp	r24, r18
    54d2:	93 07       	cpc	r25, r19
    54d4:	a4 07       	cpc	r26, r20
    54d6:	b5 07       	cpc	r27, r21
    54d8:	28 f0       	brcs	.+10     	; 0x54e4 <STEPPER_set_decel_step_values+0xc0>
    54da:	f0 92 c7 07 	sts	0x07C7, r15
    54de:	e0 92 c6 07 	sts	0x07C6, r14
    54e2:	06 c0       	rjmp	.+12     	; 0x54f0 <STEPPER_set_decel_step_values+0xcc>
    54e4:	d6 95       	lsr	r29
    54e6:	c7 95       	ror	r28
    54e8:	d0 93 c7 07 	sts	0x07C7, r29
    54ec:	c0 93 c6 07 	sts	0x07C6, r28
    54f0:	df 91       	pop	r29
    54f2:	cf 91       	pop	r28
    54f4:	1f 91       	pop	r17
    54f6:	0f 91       	pop	r16
    54f8:	ff 90       	pop	r15
    54fa:	ef 90       	pop	r14
    54fc:	08 95       	ret

000054fe <__TIMER0_COMPA_vect>:
    54fe:	0e 94 8f 2a 	call	0x551e	; 0x551e <TMRSRVC_tick>
    5502:	0e 94 cf 2a 	call	0x559e	; 0x559e <STEPPER_clk>
    5506:	0e 94 a8 2a 	call	0x5550	; 0x5550 <SPKR_beep_clk>
    550a:	08 95       	ret

0000550c <__TMRSRVC_init>:
    550c:	84 b5       	in	r24, 0x24	; 36
    550e:	82 60       	ori	r24, 0x02	; 2
    5510:	84 bd       	out	0x24, r24	; 36
    5512:	85 b5       	in	r24, 0x25	; 37
    5514:	84 60       	ori	r24, 0x04	; 4
    5516:	85 bd       	out	0x25, r24	; 37
    5518:	8e e4       	ldi	r24, 0x4E	; 78
    551a:	87 bd       	out	0x27, r24	; 39
    551c:	08 95       	ret

0000551e <TMRSRVC_tick>:
    551e:	88 e0       	ldi	r24, 0x08	; 8
    5520:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    5524:	88 23       	and	r24, r24
    5526:	11 f4       	brne	.+4      	; 0x552c <TMRSRVC_tick+0xe>
    5528:	84 e0       	ldi	r24, 0x04	; 4
    552a:	08 95       	ret
    552c:	80 91 e9 04 	lds	r24, 0x04E9
    5530:	88 23       	and	r24, r24
    5532:	11 f4       	brne	.+4      	; 0x5538 <TMRSRVC_tick+0x1a>
    5534:	83 e0       	ldi	r24, 0x03	; 3
    5536:	08 95       	ret
    5538:	80 91 e8 04 	lds	r24, 0x04E8
    553c:	88 23       	and	r24, r24
    553e:	11 f0       	breq	.+4      	; 0x5544 <TMRSRVC_tick+0x26>
    5540:	82 e0       	ldi	r24, 0x02	; 2
    5542:	08 95       	ret
    5544:	0e 94 1c 2d 	call	0x5a38	; 0x5a38 <TMRSRVC_process>
    5548:	81 30       	cpi	r24, 0x01	; 1
    554a:	e1 f3       	breq	.-8      	; 0x5544 <TMRSRVC_tick+0x26>
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	08 95       	ret

00005550 <SPKR_beep_clk>:
    5550:	80 91 d9 04 	lds	r24, 0x04D9
    5554:	81 30       	cpi	r24, 0x01	; 1
    5556:	11 f5       	brne	.+68     	; 0x559c <SPKR_beep_clk+0x4c>
    5558:	80 91 e2 04 	lds	r24, 0x04E2
    555c:	90 91 e3 04 	lds	r25, 0x04E3
    5560:	20 91 e4 04 	lds	r18, 0x04E4
    5564:	30 91 e5 04 	lds	r19, 0x04E5
    5568:	28 0f       	add	r18, r24
    556a:	39 1f       	adc	r19, r25
    556c:	30 93 e3 04 	sts	0x04E3, r19
    5570:	20 93 e2 04 	sts	0x04E2, r18
    5574:	80 91 e2 04 	lds	r24, 0x04E2
    5578:	90 91 e3 04 	lds	r25, 0x04E3
    557c:	88 5e       	subi	r24, 0xE8	; 232
    557e:	93 40       	sbci	r25, 0x03	; 3
    5580:	6c f0       	brlt	.+26     	; 0x559c <SPKR_beep_clk+0x4c>
    5582:	8b b1       	in	r24, 0x0b	; 11
    5584:	80 58       	subi	r24, 0x80	; 128
    5586:	8b b9       	out	0x0b, r24	; 11
    5588:	80 91 e2 04 	lds	r24, 0x04E2
    558c:	90 91 e3 04 	lds	r25, 0x04E3
    5590:	88 5e       	subi	r24, 0xE8	; 232
    5592:	93 40       	sbci	r25, 0x03	; 3
    5594:	90 93 e3 04 	sts	0x04E3, r25
    5598:	80 93 e2 04 	sts	0x04E2, r24
    559c:	08 95       	ret

0000559e <STEPPER_clk>:
    559e:	87 e0       	ldi	r24, 0x07	; 7
    55a0:	0e 94 e9 20 	call	0x41d2	; 0x41d2 <SYS_get_state>
    55a4:	81 30       	cpi	r24, 0x01	; 1
    55a6:	09 f0       	breq	.+2      	; 0x55aa <STEPPER_clk+0xc>
    55a8:	aa c0       	rjmp	.+340    	; 0x56fe <STEPPER_clk+0x160>
    55aa:	80 91 b8 07 	lds	r24, 0x07B8
    55ae:	90 91 b9 07 	lds	r25, 0x07B9
    55b2:	89 2b       	or	r24, r25
    55b4:	09 f1       	breq	.+66     	; 0x55f8 <STEPPER_clk+0x5a>
    55b6:	80 91 dc 07 	lds	r24, 0x07DC
    55ba:	90 91 dd 07 	lds	r25, 0x07DD
    55be:	20 91 b8 07 	lds	r18, 0x07B8
    55c2:	30 91 b9 07 	lds	r19, 0x07B9
    55c6:	82 0f       	add	r24, r18
    55c8:	93 1f       	adc	r25, r19
    55ca:	90 93 dd 07 	sts	0x07DD, r25
    55ce:	80 93 dc 07 	sts	0x07DC, r24
    55d2:	80 91 dc 07 	lds	r24, 0x07DC
    55d6:	90 91 dd 07 	lds	r25, 0x07DD
    55da:	88 5e       	subi	r24, 0xE8	; 232
    55dc:	93 40       	sbci	r25, 0x03	; 3
    55de:	a4 f0       	brlt	.+40     	; 0x5608 <STEPPER_clk+0x6a>
    55e0:	80 91 dc 07 	lds	r24, 0x07DC
    55e4:	90 91 dd 07 	lds	r25, 0x07DD
    55e8:	88 5e       	subi	r24, 0xE8	; 232
    55ea:	93 40       	sbci	r25, 0x03	; 3
    55ec:	90 93 dd 07 	sts	0x07DD, r25
    55f0:	80 93 dc 07 	sts	0x07DC, r24
    55f4:	41 e0       	ldi	r20, 0x01	; 1
    55f6:	09 c0       	rjmp	.+18     	; 0x560a <STEPPER_clk+0x6c>
    55f8:	80 91 b0 07 	lds	r24, 0x07B0
    55fc:	90 91 b1 07 	lds	r25, 0x07B1
    5600:	90 93 b5 07 	sts	0x07B5, r25
    5604:	80 93 b4 07 	sts	0x07B4, r24
    5608:	40 e0       	ldi	r20, 0x00	; 0
    560a:	80 91 ba 07 	lds	r24, 0x07BA
    560e:	90 91 bb 07 	lds	r25, 0x07BB
    5612:	89 2b       	or	r24, r25
    5614:	09 f1       	breq	.+66     	; 0x5658 <STEPPER_clk+0xba>
    5616:	80 91 de 07 	lds	r24, 0x07DE
    561a:	90 91 df 07 	lds	r25, 0x07DF
    561e:	20 91 ba 07 	lds	r18, 0x07BA
    5622:	30 91 bb 07 	lds	r19, 0x07BB
    5626:	82 0f       	add	r24, r18
    5628:	93 1f       	adc	r25, r19
    562a:	90 93 df 07 	sts	0x07DF, r25
    562e:	80 93 de 07 	sts	0x07DE, r24
    5632:	80 91 de 07 	lds	r24, 0x07DE
    5636:	90 91 df 07 	lds	r25, 0x07DF
    563a:	88 5e       	subi	r24, 0xE8	; 232
    563c:	93 40       	sbci	r25, 0x03	; 3
    563e:	a4 f0       	brlt	.+40     	; 0x5668 <STEPPER_clk+0xca>
    5640:	80 91 de 07 	lds	r24, 0x07DE
    5644:	90 91 df 07 	lds	r25, 0x07DF
    5648:	88 5e       	subi	r24, 0xE8	; 232
    564a:	93 40       	sbci	r25, 0x03	; 3
    564c:	90 93 df 07 	sts	0x07DF, r25
    5650:	80 93 de 07 	sts	0x07DE, r24
    5654:	61 e0       	ldi	r22, 0x01	; 1
    5656:	09 c0       	rjmp	.+18     	; 0x566a <STEPPER_clk+0xcc>
    5658:	80 91 b2 07 	lds	r24, 0x07B2
    565c:	90 91 b3 07 	lds	r25, 0x07B3
    5660:	90 93 b7 07 	sts	0x07B7, r25
    5664:	80 93 b6 07 	sts	0x07B6, r24
    5668:	60 e0       	ldi	r22, 0x00	; 0
    566a:	84 2f       	mov	r24, r20
    566c:	0e 94 80 2b 	call	0x5700	; 0x5700 <STEPPER_process_accel>
    5670:	80 91 d8 07 	lds	r24, 0x07D8
    5674:	90 91 d9 07 	lds	r25, 0x07D9
    5678:	20 91 b4 07 	lds	r18, 0x07B4
    567c:	30 91 b5 07 	lds	r19, 0x07B5
    5680:	28 0f       	add	r18, r24
    5682:	39 1f       	adc	r19, r25
    5684:	30 93 d9 07 	sts	0x07D9, r19
    5688:	20 93 d8 07 	sts	0x07D8, r18
    568c:	80 91 d8 07 	lds	r24, 0x07D8
    5690:	90 91 d9 07 	lds	r25, 0x07D9
    5694:	88 5e       	subi	r24, 0xE8	; 232
    5696:	93 40       	sbci	r25, 0x03	; 3
    5698:	14 f4       	brge	.+4      	; 0x569e <STEPPER_clk+0x100>
    569a:	40 e0       	ldi	r20, 0x00	; 0
    569c:	0b c0       	rjmp	.+22     	; 0x56b4 <STEPPER_clk+0x116>
    569e:	80 91 d8 07 	lds	r24, 0x07D8
    56a2:	90 91 d9 07 	lds	r25, 0x07D9
    56a6:	88 5e       	subi	r24, 0xE8	; 232
    56a8:	93 40       	sbci	r25, 0x03	; 3
    56aa:	90 93 d9 07 	sts	0x07D9, r25
    56ae:	80 93 d8 07 	sts	0x07D8, r24
    56b2:	41 e0       	ldi	r20, 0x01	; 1
    56b4:	80 91 da 07 	lds	r24, 0x07DA
    56b8:	90 91 db 07 	lds	r25, 0x07DB
    56bc:	20 91 b6 07 	lds	r18, 0x07B6
    56c0:	30 91 b7 07 	lds	r19, 0x07B7
    56c4:	28 0f       	add	r18, r24
    56c6:	39 1f       	adc	r19, r25
    56c8:	30 93 db 07 	sts	0x07DB, r19
    56cc:	20 93 da 07 	sts	0x07DA, r18
    56d0:	80 91 da 07 	lds	r24, 0x07DA
    56d4:	90 91 db 07 	lds	r25, 0x07DB
    56d8:	88 5e       	subi	r24, 0xE8	; 232
    56da:	93 40       	sbci	r25, 0x03	; 3
    56dc:	14 f4       	brge	.+4      	; 0x56e2 <STEPPER_clk+0x144>
    56de:	60 e0       	ldi	r22, 0x00	; 0
    56e0:	0b c0       	rjmp	.+22     	; 0x56f8 <STEPPER_clk+0x15a>
    56e2:	80 91 da 07 	lds	r24, 0x07DA
    56e6:	90 91 db 07 	lds	r25, 0x07DB
    56ea:	88 5e       	subi	r24, 0xE8	; 232
    56ec:	93 40       	sbci	r25, 0x03	; 3
    56ee:	90 93 db 07 	sts	0x07DB, r25
    56f2:	80 93 da 07 	sts	0x07DA, r24
    56f6:	61 e0       	ldi	r22, 0x01	; 1
    56f8:	84 2f       	mov	r24, r20
    56fa:	0e 94 c5 2b 	call	0x578a	; 0x578a <STEPPER_process_run_mode>
    56fe:	08 95       	ret

00005700 <STEPPER_process_accel>:
    5700:	88 23       	and	r24, r24
    5702:	f1 f0       	breq	.+60     	; 0x5740 <STEPPER_process_accel+0x40>
    5704:	20 91 b0 07 	lds	r18, 0x07B0
    5708:	30 91 b1 07 	lds	r19, 0x07B1
    570c:	80 91 b4 07 	lds	r24, 0x07B4
    5710:	90 91 b5 07 	lds	r25, 0x07B5
    5714:	28 1b       	sub	r18, r24
    5716:	39 0b       	sbc	r19, r25
    5718:	12 16       	cp	r1, r18
    571a:	13 06       	cpc	r1, r19
    571c:	34 f4       	brge	.+12     	; 0x572a <STEPPER_process_accel+0x2a>
    571e:	80 91 b4 07 	lds	r24, 0x07B4
    5722:	90 91 b5 07 	lds	r25, 0x07B5
    5726:	01 96       	adiw	r24, 0x01	; 1
    5728:	07 c0       	rjmp	.+14     	; 0x5738 <STEPPER_process_accel+0x38>
    572a:	23 2b       	or	r18, r19
    572c:	49 f0       	breq	.+18     	; 0x5740 <STEPPER_process_accel+0x40>
    572e:	80 91 b4 07 	lds	r24, 0x07B4
    5732:	90 91 b5 07 	lds	r25, 0x07B5
    5736:	01 97       	sbiw	r24, 0x01	; 1
    5738:	90 93 b5 07 	sts	0x07B5, r25
    573c:	80 93 b4 07 	sts	0x07B4, r24
    5740:	66 23       	and	r22, r22
    5742:	11 f1       	breq	.+68     	; 0x5788 <STEPPER_process_accel+0x88>
    5744:	20 91 b2 07 	lds	r18, 0x07B2
    5748:	30 91 b3 07 	lds	r19, 0x07B3
    574c:	80 91 b6 07 	lds	r24, 0x07B6
    5750:	90 91 b7 07 	lds	r25, 0x07B7
    5754:	28 1b       	sub	r18, r24
    5756:	39 0b       	sbc	r19, r25
    5758:	12 16       	cp	r1, r18
    575a:	13 06       	cpc	r1, r19
    575c:	54 f4       	brge	.+20     	; 0x5772 <STEPPER_process_accel+0x72>
    575e:	80 91 b6 07 	lds	r24, 0x07B6
    5762:	90 91 b7 07 	lds	r25, 0x07B7
    5766:	01 96       	adiw	r24, 0x01	; 1
    5768:	90 93 b7 07 	sts	0x07B7, r25
    576c:	80 93 b6 07 	sts	0x07B6, r24
    5770:	08 95       	ret
    5772:	23 2b       	or	r18, r19
    5774:	49 f0       	breq	.+18     	; 0x5788 <STEPPER_process_accel+0x88>
    5776:	80 91 b6 07 	lds	r24, 0x07B6
    577a:	90 91 b7 07 	lds	r25, 0x07B7
    577e:	01 97       	sbiw	r24, 0x01	; 1
    5780:	90 93 b7 07 	sts	0x07B7, r25
    5784:	80 93 b6 07 	sts	0x07B6, r24
    5788:	08 95       	ret

0000578a <STEPPER_process_run_mode>:
    578a:	0f 93       	push	r16
    578c:	1f 93       	push	r17
    578e:	18 2f       	mov	r17, r24
    5790:	06 2f       	mov	r16, r22
    5792:	80 91 e4 07 	lds	r24, 0x07E4
    5796:	88 23       	and	r24, r24
    5798:	09 f0       	breq	.+2      	; 0x579c <STEPPER_process_run_mode+0x12>
    579a:	e7 c0       	rjmp	.+462    	; 0x596a <STEPPER_process_run_mode+0x1e0>
    579c:	80 91 cc 07 	lds	r24, 0x07CC
    57a0:	88 23       	and	r24, r24
    57a2:	09 f0       	breq	.+2      	; 0x57a6 <STEPPER_process_run_mode+0x1c>
    57a4:	5a c0       	rjmp	.+180    	; 0x585a <STEPPER_process_run_mode+0xd0>
    57a6:	80 91 b4 07 	lds	r24, 0x07B4
    57aa:	90 91 b5 07 	lds	r25, 0x07B5
    57ae:	89 2b       	or	r24, r25
    57b0:	e9 f4       	brne	.+58     	; 0x57ec <STEPPER_process_run_mode+0x62>
    57b2:	80 91 ea 04 	lds	r24, 0x04EA
    57b6:	83 7e       	andi	r24, 0xE3	; 227
    57b8:	80 93 ea 04 	sts	0x04EA, r24
    57bc:	10 92 d5 07 	sts	0x07D5, r1
    57c0:	80 91 e0 07 	lds	r24, 0x07E0
    57c4:	88 23       	and	r24, r24
    57c6:	09 f4       	brne	.+2      	; 0x57ca <STEPPER_process_run_mode+0x40>
    57c8:	5d c0       	rjmp	.+186    	; 0x5884 <STEPPER_process_run_mode+0xfa>
    57ca:	60 91 ce 07 	lds	r22, 0x07CE
    57ce:	80 e0       	ldi	r24, 0x00	; 0
    57d0:	0e 94 76 20 	call	0x40ec	; 0x40ec <STEPPER_stop>
    57d4:	e0 91 e2 07 	lds	r30, 0x07E2
    57d8:	f0 91 e3 07 	lds	r31, 0x07E3
    57dc:	30 97       	sbiw	r30, 0x00	; 0
    57de:	09 f4       	brne	.+2      	; 0x57e2 <STEPPER_process_run_mode+0x58>
    57e0:	51 c0       	rjmp	.+162    	; 0x5884 <STEPPER_process_run_mode+0xfa>
    57e2:	81 e0       	ldi	r24, 0x01	; 1
    57e4:	80 83       	st	Z, r24
    57e6:	10 92 e0 07 	sts	0x07E0, r1
    57ea:	4c c0       	rjmp	.+152    	; 0x5884 <STEPPER_process_run_mode+0xfa>
    57ec:	80 91 ae 07 	lds	r24, 0x07AE
    57f0:	81 30       	cpi	r24, 0x01	; 1
    57f2:	41 f4       	brne	.+16     	; 0x5804 <STEPPER_process_run_mode+0x7a>
    57f4:	80 91 c0 07 	lds	r24, 0x07C0
    57f8:	90 91 c1 07 	lds	r25, 0x07C1
    57fc:	01 97       	sbiw	r24, 0x01	; 1
    57fe:	11 f4       	brne	.+4      	; 0x5804 <STEPPER_process_run_mode+0x7a>
    5800:	11 e0       	ldi	r17, 0x01	; 1
    5802:	02 c0       	rjmp	.+4      	; 0x5808 <STEPPER_process_run_mode+0x7e>
    5804:	11 23       	and	r17, r17
    5806:	f1 f1       	breq	.+124    	; 0x5884 <STEPPER_process_run_mode+0xfa>
    5808:	e0 91 d3 07 	lds	r30, 0x07D3
    580c:	f0 e0       	ldi	r31, 0x00	; 0
    580e:	e2 50       	subi	r30, 0x02	; 2
    5810:	fc 4f       	sbci	r31, 0xFC	; 252
    5812:	90 91 ea 04 	lds	r25, 0x04EA
    5816:	93 7e       	andi	r25, 0xE3	; 227
    5818:	80 81       	ld	r24, Z
    581a:	89 2b       	or	r24, r25
    581c:	80 93 ea 04 	sts	0x04EA, r24
    5820:	80 91 d1 07 	lds	r24, 0x07D1
    5824:	88 23       	and	r24, r24
    5826:	21 f4       	brne	.+8      	; 0x5830 <STEPPER_process_run_mode+0xa6>
    5828:	80 91 d3 07 	lds	r24, 0x07D3
    582c:	8f 5f       	subi	r24, 0xFF	; 255
    582e:	03 c0       	rjmp	.+6      	; 0x5836 <STEPPER_process_run_mode+0xac>
    5830:	80 91 d3 07 	lds	r24, 0x07D3
    5834:	81 50       	subi	r24, 0x01	; 1
    5836:	80 93 d3 07 	sts	0x07D3, r24
    583a:	80 91 d3 07 	lds	r24, 0x07D3
    583e:	83 70       	andi	r24, 0x03	; 3
    5840:	80 93 d3 07 	sts	0x07D3, r24
    5844:	81 e0       	ldi	r24, 0x01	; 1
    5846:	80 93 d5 07 	sts	0x07D5, r24
    584a:	80 91 ae 07 	lds	r24, 0x07AE
    584e:	81 30       	cpi	r24, 0x01	; 1
    5850:	c9 f4       	brne	.+50     	; 0x5884 <STEPPER_process_run_mode+0xfa>
    5852:	80 e0       	ldi	r24, 0x00	; 0
    5854:	0e 94 c8 2c 	call	0x5990	; 0x5990 <STEPPER_process_step_mode>
    5858:	15 c0       	rjmp	.+42     	; 0x5884 <STEPPER_process_run_mode+0xfa>
    585a:	90 91 ea 04 	lds	r25, 0x04EA
    585e:	93 7e       	andi	r25, 0xE3	; 227
    5860:	90 93 ea 04 	sts	0x04EA, r25
    5864:	e0 91 d3 07 	lds	r30, 0x07D3
    5868:	f0 e0       	ldi	r31, 0x00	; 0
    586a:	e2 50       	subi	r30, 0x02	; 2
    586c:	fc 4f       	sbci	r31, 0xFC	; 252
    586e:	80 81       	ld	r24, Z
    5870:	89 2b       	or	r24, r25
    5872:	80 93 ea 04 	sts	0x04EA, r24
    5876:	82 e0       	ldi	r24, 0x02	; 2
    5878:	80 93 d5 07 	sts	0x07D5, r24
    587c:	10 92 b5 07 	sts	0x07B5, r1
    5880:	10 92 b4 07 	sts	0x07B4, r1
    5884:	80 91 cd 07 	lds	r24, 0x07CD
    5888:	88 23       	and	r24, r24
    588a:	09 f0       	breq	.+2      	; 0x588e <STEPPER_process_run_mode+0x104>
    588c:	59 c0       	rjmp	.+178    	; 0x5940 <STEPPER_process_run_mode+0x1b6>
    588e:	80 91 b6 07 	lds	r24, 0x07B6
    5892:	90 91 b7 07 	lds	r25, 0x07B7
    5896:	89 2b       	or	r24, r25
    5898:	e9 f4       	brne	.+58     	; 0x58d4 <STEPPER_process_run_mode+0x14a>
    589a:	80 91 ea 04 	lds	r24, 0x04EA
    589e:	8f 71       	andi	r24, 0x1F	; 31
    58a0:	80 93 ea 04 	sts	0x04EA, r24
    58a4:	10 92 d6 07 	sts	0x07D6, r1
    58a8:	80 91 e1 07 	lds	r24, 0x07E1
    58ac:	88 23       	and	r24, r24
    58ae:	09 f4       	brne	.+2      	; 0x58b2 <STEPPER_process_run_mode+0x128>
    58b0:	5c c0       	rjmp	.+184    	; 0x596a <STEPPER_process_run_mode+0x1e0>
    58b2:	60 91 cf 07 	lds	r22, 0x07CF
    58b6:	81 e0       	ldi	r24, 0x01	; 1
    58b8:	0e 94 76 20 	call	0x40ec	; 0x40ec <STEPPER_stop>
    58bc:	e0 91 e2 07 	lds	r30, 0x07E2
    58c0:	f0 91 e3 07 	lds	r31, 0x07E3
    58c4:	30 97       	sbiw	r30, 0x00	; 0
    58c6:	09 f4       	brne	.+2      	; 0x58ca <STEPPER_process_run_mode+0x140>
    58c8:	50 c0       	rjmp	.+160    	; 0x596a <STEPPER_process_run_mode+0x1e0>
    58ca:	81 e0       	ldi	r24, 0x01	; 1
    58cc:	81 83       	std	Z+1, r24	; 0x01
    58ce:	10 92 e1 07 	sts	0x07E1, r1
    58d2:	4b c0       	rjmp	.+150    	; 0x596a <STEPPER_process_run_mode+0x1e0>
    58d4:	80 91 af 07 	lds	r24, 0x07AF
    58d8:	81 30       	cpi	r24, 0x01	; 1
    58da:	41 f4       	brne	.+16     	; 0x58ec <STEPPER_process_run_mode+0x162>
    58dc:	80 91 c2 07 	lds	r24, 0x07C2
    58e0:	90 91 c3 07 	lds	r25, 0x07C3
    58e4:	01 97       	sbiw	r24, 0x01	; 1
    58e6:	11 f4       	brne	.+4      	; 0x58ec <STEPPER_process_run_mode+0x162>
    58e8:	01 e0       	ldi	r16, 0x01	; 1
    58ea:	02 c0       	rjmp	.+4      	; 0x58f0 <STEPPER_process_run_mode+0x166>
    58ec:	00 23       	and	r16, r16
    58ee:	e9 f1       	breq	.+122    	; 0x596a <STEPPER_process_run_mode+0x1e0>
    58f0:	e0 91 d4 07 	lds	r30, 0x07D4
    58f4:	f0 e0       	ldi	r31, 0x00	; 0
    58f6:	ee 5f       	subi	r30, 0xFE	; 254
    58f8:	fb 4f       	sbci	r31, 0xFB	; 251
    58fa:	90 91 ea 04 	lds	r25, 0x04EA
    58fe:	9f 71       	andi	r25, 0x1F	; 31
    5900:	80 81       	ld	r24, Z
    5902:	89 2b       	or	r24, r25
    5904:	80 93 ea 04 	sts	0x04EA, r24
    5908:	80 91 d2 07 	lds	r24, 0x07D2
    590c:	88 23       	and	r24, r24
    590e:	21 f4       	brne	.+8      	; 0x5918 <STEPPER_process_run_mode+0x18e>
    5910:	80 91 d4 07 	lds	r24, 0x07D4
    5914:	8f 5f       	subi	r24, 0xFF	; 255
    5916:	03 c0       	rjmp	.+6      	; 0x591e <STEPPER_process_run_mode+0x194>
    5918:	80 91 d4 07 	lds	r24, 0x07D4
    591c:	81 50       	subi	r24, 0x01	; 1
    591e:	80 93 d4 07 	sts	0x07D4, r24
    5922:	80 91 d4 07 	lds	r24, 0x07D4
    5926:	83 70       	andi	r24, 0x03	; 3
    5928:	80 93 d4 07 	sts	0x07D4, r24
    592c:	81 e0       	ldi	r24, 0x01	; 1
    592e:	80 93 d6 07 	sts	0x07D6, r24
    5932:	80 91 af 07 	lds	r24, 0x07AF
    5936:	81 30       	cpi	r24, 0x01	; 1
    5938:	c1 f4       	brne	.+48     	; 0x596a <STEPPER_process_run_mode+0x1e0>
    593a:	0e 94 c8 2c 	call	0x5990	; 0x5990 <STEPPER_process_step_mode>
    593e:	15 c0       	rjmp	.+42     	; 0x596a <STEPPER_process_run_mode+0x1e0>
    5940:	90 91 ea 04 	lds	r25, 0x04EA
    5944:	9f 71       	andi	r25, 0x1F	; 31
    5946:	90 93 ea 04 	sts	0x04EA, r25
    594a:	e0 91 d4 07 	lds	r30, 0x07D4
    594e:	f0 e0       	ldi	r31, 0x00	; 0
    5950:	ee 5f       	subi	r30, 0xFE	; 254
    5952:	fb 4f       	sbci	r31, 0xFB	; 251
    5954:	80 81       	ld	r24, Z
    5956:	89 2b       	or	r24, r25
    5958:	80 93 ea 04 	sts	0x04EA, r24
    595c:	82 e0       	ldi	r24, 0x02	; 2
    595e:	80 93 d6 07 	sts	0x07D6, r24
    5962:	10 92 b7 07 	sts	0x07B7, r1
    5966:	10 92 b6 07 	sts	0x07B6, r1
    596a:	80 91 d7 07 	lds	r24, 0x07D7
    596e:	88 23       	and	r24, r24
    5970:	31 f4       	brne	.+12     	; 0x597e <STEPPER_process_run_mode+0x1f4>
    5972:	8a ee       	ldi	r24, 0xEA	; 234
    5974:	94 e0       	ldi	r25, 0x04	; 4
    5976:	61 2f       	mov	r22, r17
    5978:	40 2f       	mov	r20, r16
    597a:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <STEPPER_process_pwm>
    597e:	88 b1       	in	r24, 0x08	; 8
    5980:	83 70       	andi	r24, 0x03	; 3
    5982:	90 91 ea 04 	lds	r25, 0x04EA
    5986:	89 2b       	or	r24, r25
    5988:	88 b9       	out	0x08, r24	; 8
    598a:	1f 91       	pop	r17
    598c:	0f 91       	pop	r16
    598e:	08 95       	ret

00005990 <STEPPER_process_step_mode>:
    5990:	88 23       	and	r24, r24
    5992:	21 f0       	breq	.+8      	; 0x599c <STEPPER_process_step_mode+0xc>
    5994:	81 30       	cpi	r24, 0x01	; 1
    5996:	09 f0       	breq	.+2      	; 0x599a <STEPPER_process_step_mode+0xa>
    5998:	4e c0       	rjmp	.+156    	; 0x5a36 <STEPPER_process_step_mode+0xa6>
    599a:	27 c0       	rjmp	.+78     	; 0x59ea <STEPPER_process_step_mode+0x5a>
    599c:	80 91 c0 07 	lds	r24, 0x07C0
    59a0:	90 91 c1 07 	lds	r25, 0x07C1
    59a4:	89 2b       	or	r24, r25
    59a6:	49 f0       	breq	.+18     	; 0x59ba <STEPPER_process_step_mode+0x2a>
    59a8:	80 91 c0 07 	lds	r24, 0x07C0
    59ac:	90 91 c1 07 	lds	r25, 0x07C1
    59b0:	01 97       	sbiw	r24, 0x01	; 1
    59b2:	90 93 c1 07 	sts	0x07C1, r25
    59b6:	80 93 c0 07 	sts	0x07C0, r24
    59ba:	80 91 e0 07 	lds	r24, 0x07E0
    59be:	88 23       	and	r24, r24
    59c0:	d1 f5       	brne	.+116    	; 0x5a36 <STEPPER_process_step_mode+0xa6>
    59c2:	20 91 c0 07 	lds	r18, 0x07C0
    59c6:	30 91 c1 07 	lds	r19, 0x07C1
    59ca:	80 91 c4 07 	lds	r24, 0x07C4
    59ce:	90 91 c5 07 	lds	r25, 0x07C5
    59d2:	28 17       	cp	r18, r24
    59d4:	39 07       	cpc	r19, r25
    59d6:	79 f5       	brne	.+94     	; 0x5a36 <STEPPER_process_step_mode+0xa6>
    59d8:	80 e0       	ldi	r24, 0x00	; 0
    59da:	60 e0       	ldi	r22, 0x00	; 0
    59dc:	70 e0       	ldi	r23, 0x00	; 0
    59de:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <STEPPER_set_speed>
    59e2:	81 e0       	ldi	r24, 0x01	; 1
    59e4:	80 93 e0 07 	sts	0x07E0, r24
    59e8:	08 95       	ret
    59ea:	80 91 c2 07 	lds	r24, 0x07C2
    59ee:	90 91 c3 07 	lds	r25, 0x07C3
    59f2:	89 2b       	or	r24, r25
    59f4:	49 f0       	breq	.+18     	; 0x5a08 <STEPPER_process_step_mode+0x78>
    59f6:	80 91 c2 07 	lds	r24, 0x07C2
    59fa:	90 91 c3 07 	lds	r25, 0x07C3
    59fe:	01 97       	sbiw	r24, 0x01	; 1
    5a00:	90 93 c3 07 	sts	0x07C3, r25
    5a04:	80 93 c2 07 	sts	0x07C2, r24
    5a08:	80 91 e1 07 	lds	r24, 0x07E1
    5a0c:	88 23       	and	r24, r24
    5a0e:	99 f4       	brne	.+38     	; 0x5a36 <STEPPER_process_step_mode+0xa6>
    5a10:	20 91 c2 07 	lds	r18, 0x07C2
    5a14:	30 91 c3 07 	lds	r19, 0x07C3
    5a18:	80 91 c6 07 	lds	r24, 0x07C6
    5a1c:	90 91 c7 07 	lds	r25, 0x07C7
    5a20:	28 17       	cp	r18, r24
    5a22:	39 07       	cpc	r19, r25
    5a24:	41 f4       	brne	.+16     	; 0x5a36 <STEPPER_process_step_mode+0xa6>
    5a26:	81 e0       	ldi	r24, 0x01	; 1
    5a28:	60 e0       	ldi	r22, 0x00	; 0
    5a2a:	70 e0       	ldi	r23, 0x00	; 0
    5a2c:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <STEPPER_set_speed>
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	80 93 e1 07 	sts	0x07E1, r24
    5a36:	08 95       	ret

00005a38 <TMRSRVC_process>:
    5a38:	ff 92       	push	r15
    5a3a:	0f 93       	push	r16
    5a3c:	1f 93       	push	r17
    5a3e:	cf 93       	push	r28
    5a40:	df 93       	push	r29
    5a42:	80 91 1e 08 	lds	r24, 0x081E
    5a46:	88 23       	and	r24, r24
    5a48:	09 f4       	brne	.+2      	; 0x5a4c <TMRSRVC_process+0x14>
    5a4a:	59 c0       	rjmp	.+178    	; 0x5afe <TMRSRVC_process+0xc6>
    5a4c:	00 91 1f 08 	lds	r16, 0x081F
    5a50:	10 91 20 08 	lds	r17, 0x0820
    5a54:	f8 01       	movw	r30, r16
    5a56:	c0 81       	ld	r28, Z
    5a58:	d1 81       	ldd	r29, Z+1	; 0x01
    5a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    5a5c:	9d 81       	ldd	r25, Y+5	; 0x05
    5a5e:	01 97       	sbiw	r24, 0x01	; 1
    5a60:	9d 83       	std	Y+5, r25	; 0x05
    5a62:	8c 83       	std	Y+4, r24	; 0x04
    5a64:	18 16       	cp	r1, r24
    5a66:	19 06       	cpc	r1, r25
    5a68:	0c f4       	brge	.+2      	; 0x5a6c <TMRSRVC_process+0x34>
    5a6a:	49 c0       	rjmp	.+146    	; 0x5afe <TMRSRVC_process+0xc6>
    5a6c:	89 81       	ldd	r24, Y+1	; 0x01
    5a6e:	80 ff       	sbrs	r24, 0
    5a70:	05 c0       	rjmp	.+10     	; 0x5a7c <TMRSRVC_process+0x44>
    5a72:	8e 81       	ldd	r24, Y+6	; 0x06
    5a74:	88 23       	and	r24, r24
    5a76:	11 f4       	brne	.+4      	; 0x5a7c <TMRSRVC_process+0x44>
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	8e 83       	std	Y+6, r24	; 0x06
    5a7c:	89 81       	ldd	r24, Y+1	; 0x01
    5a7e:	81 ff       	sbrs	r24, 1
    5a80:	03 c0       	rjmp	.+6      	; 0x5a88 <TMRSRVC_process+0x50>
    5a82:	ef 81       	ldd	r30, Y+7	; 0x07
    5a84:	f8 85       	ldd	r31, Y+8	; 0x08
    5a86:	09 95       	icall
    5a88:	80 91 1e 08 	lds	r24, 0x081E
    5a8c:	82 30       	cpi	r24, 0x02	; 2
    5a8e:	a8 f0       	brcs	.+42     	; 0x5aba <TMRSRVC_process+0x82>
    5a90:	f8 01       	movw	r30, r16
    5a92:	82 81       	ldd	r24, Z+2	; 0x02
    5a94:	93 81       	ldd	r25, Z+3	; 0x03
    5a96:	90 93 20 08 	sts	0x0820, r25
    5a9a:	80 93 1f 08 	sts	0x081F, r24
    5a9e:	13 82       	std	Z+3, r1	; 0x03
    5aa0:	12 82       	std	Z+2, r1	; 0x02
    5aa2:	e0 91 00 00 	lds	r30, 0x0000
    5aa6:	f0 91 01 00 	lds	r31, 0x0001
    5aaa:	84 81       	ldd	r24, Z+4	; 0x04
    5aac:	95 81       	ldd	r25, Z+5	; 0x05
    5aae:	18 16       	cp	r1, r24
    5ab0:	19 06       	cpc	r1, r25
    5ab2:	3c f0       	brlt	.+14     	; 0x5ac2 <TMRSRVC_process+0x8a>
    5ab4:	ff 24       	eor	r15, r15
    5ab6:	f3 94       	inc	r15
    5ab8:	05 c0       	rjmp	.+10     	; 0x5ac4 <TMRSRVC_process+0x8c>
    5aba:	10 92 20 08 	sts	0x0820, r1
    5abe:	10 92 1f 08 	sts	0x081F, r1
    5ac2:	ff 24       	eor	r15, r15
    5ac4:	80 91 1e 08 	lds	r24, 0x081E
    5ac8:	81 50       	subi	r24, 0x01	; 1
    5aca:	80 93 1e 08 	sts	0x081E, r24
    5ace:	80 91 1e 08 	lds	r24, 0x081E
    5ad2:	88 23       	and	r24, r24
    5ad4:	11 f4       	brne	.+4      	; 0x5ada <TMRSRVC_process+0xa2>
    5ad6:	0e 94 87 2d 	call	0x5b0e	; 0x5b0e <TMRSRVC_stop>
    5ada:	89 81       	ldd	r24, Y+1	; 0x01
    5adc:	82 ff       	sbrs	r24, 2
    5ade:	08 c0       	rjmp	.+16     	; 0x5af0 <TMRSRVC_process+0xb8>
    5ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ae4:	9d 83       	std	Y+5, r25	; 0x05
    5ae6:	8c 83       	std	Y+4, r24	; 0x04
    5ae8:	c8 01       	movw	r24, r16
    5aea:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <TMRSRVC_insert>
    5aee:	08 c0       	rjmp	.+16     	; 0x5b00 <TMRSRVC_process+0xc8>
    5af0:	c8 01       	movw	r24, r16
    5af2:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <free>
    5af6:	89 81       	ldd	r24, Y+1	; 0x01
    5af8:	8f 7e       	andi	r24, 0xEF	; 239
    5afa:	89 83       	std	Y+1, r24	; 0x01
    5afc:	01 c0       	rjmp	.+2      	; 0x5b00 <TMRSRVC_process+0xc8>
    5afe:	ff 24       	eor	r15, r15
    5b00:	8f 2d       	mov	r24, r15
    5b02:	df 91       	pop	r29
    5b04:	cf 91       	pop	r28
    5b06:	1f 91       	pop	r17
    5b08:	0f 91       	pop	r16
    5b0a:	ff 90       	pop	r15
    5b0c:	08 95       	ret

00005b0e <TMRSRVC_stop>:
    5b0e:	10 92 e9 04 	sts	0x04E9, r1
    5b12:	08 95       	ret

00005b14 <STEPPER_process_pwm>:
    5b14:	fc 01       	movw	r30, r24
    5b16:	80 91 d5 07 	lds	r24, 0x07D5
    5b1a:	82 30       	cpi	r24, 0x02	; 2
    5b1c:	69 f4       	brne	.+26     	; 0x5b38 <STEPPER_process_pwm+0x24>
    5b1e:	80 91 ee 04 	lds	r24, 0x04EE
    5b22:	91 e0       	ldi	r25, 0x01	; 1
    5b24:	89 27       	eor	r24, r25
    5b26:	80 93 ee 04 	sts	0x04EE, r24
    5b2a:	88 23       	and	r24, r24
    5b2c:	09 f0       	breq	.+2      	; 0x5b30 <STEPPER_process_pwm+0x1c>
    5b2e:	3e c0       	rjmp	.+124    	; 0x5bac <STEPPER_process_pwm+0x98>
    5b30:	80 81       	ld	r24, Z
    5b32:	83 7e       	andi	r24, 0xE3	; 227
    5b34:	80 83       	st	Z, r24
    5b36:	3a c0       	rjmp	.+116    	; 0x5bac <STEPPER_process_pwm+0x98>
    5b38:	80 91 b4 07 	lds	r24, 0x07B4
    5b3c:	90 91 b5 07 	lds	r25, 0x07B5
    5b40:	c3 97       	sbiw	r24, 0x33	; 51
    5b42:	a4 f5       	brge	.+104    	; 0x5bac <STEPPER_process_pwm+0x98>
    5b44:	66 23       	and	r22, r22
    5b46:	d1 f0       	breq	.+52     	; 0x5b7c <STEPPER_process_pwm+0x68>
    5b48:	20 91 b4 07 	lds	r18, 0x07B4
    5b4c:	30 91 b5 07 	lds	r19, 0x07B5
    5b50:	80 e6       	ldi	r24, 0x60	; 96
    5b52:	90 e0       	ldi	r25, 0x00	; 0
    5b54:	bc 01       	movw	r22, r24
    5b56:	26 9f       	mul	r18, r22
    5b58:	c0 01       	movw	r24, r0
    5b5a:	27 9f       	mul	r18, r23
    5b5c:	90 0d       	add	r25, r0
    5b5e:	36 9f       	mul	r19, r22
    5b60:	90 0d       	add	r25, r0
    5b62:	11 24       	eor	r1, r1
    5b64:	88 0f       	add	r24, r24
    5b66:	89 2f       	mov	r24, r25
    5b68:	88 1f       	adc	r24, r24
    5b6a:	99 0b       	sbc	r25, r25
    5b6c:	90 93 c9 07 	sts	0x07C9, r25
    5b70:	80 93 c8 07 	sts	0x07C8, r24
    5b74:	81 e0       	ldi	r24, 0x01	; 1
    5b76:	80 93 ec 04 	sts	0x04EC, r24
    5b7a:	18 c0       	rjmp	.+48     	; 0x5bac <STEPPER_process_pwm+0x98>
    5b7c:	80 91 ec 04 	lds	r24, 0x04EC
    5b80:	88 23       	and	r24, r24
    5b82:	a1 f0       	breq	.+40     	; 0x5bac <STEPPER_process_pwm+0x98>
    5b84:	80 91 c8 07 	lds	r24, 0x07C8
    5b88:	90 91 c9 07 	lds	r25, 0x07C9
    5b8c:	01 97       	sbiw	r24, 0x01	; 1
    5b8e:	90 93 c9 07 	sts	0x07C9, r25
    5b92:	80 93 c8 07 	sts	0x07C8, r24
    5b96:	80 91 c8 07 	lds	r24, 0x07C8
    5b9a:	90 91 c9 07 	lds	r25, 0x07C9
    5b9e:	89 2b       	or	r24, r25
    5ba0:	29 f4       	brne	.+10     	; 0x5bac <STEPPER_process_pwm+0x98>
    5ba2:	80 81       	ld	r24, Z
    5ba4:	83 7e       	andi	r24, 0xE3	; 227
    5ba6:	80 83       	st	Z, r24
    5ba8:	10 92 ec 04 	sts	0x04EC, r1
    5bac:	80 91 d6 07 	lds	r24, 0x07D6
    5bb0:	82 30       	cpi	r24, 0x02	; 2
    5bb2:	69 f4       	brne	.+26     	; 0x5bce <STEPPER_process_pwm+0xba>
    5bb4:	80 91 ed 04 	lds	r24, 0x04ED
    5bb8:	91 e0       	ldi	r25, 0x01	; 1
    5bba:	89 27       	eor	r24, r25
    5bbc:	80 93 ed 04 	sts	0x04ED, r24
    5bc0:	88 23       	and	r24, r24
    5bc2:	09 f0       	breq	.+2      	; 0x5bc6 <STEPPER_process_pwm+0xb2>
    5bc4:	3e c0       	rjmp	.+124    	; 0x5c42 <STEPPER_process_pwm+0x12e>
    5bc6:	80 81       	ld	r24, Z
    5bc8:	8f 71       	andi	r24, 0x1F	; 31
    5bca:	80 83       	st	Z, r24
    5bcc:	08 95       	ret
    5bce:	80 91 b6 07 	lds	r24, 0x07B6
    5bd2:	90 91 b7 07 	lds	r25, 0x07B7
    5bd6:	c3 97       	sbiw	r24, 0x33	; 51
    5bd8:	a4 f5       	brge	.+104    	; 0x5c42 <STEPPER_process_pwm+0x12e>
    5bda:	44 23       	and	r20, r20
    5bdc:	d1 f0       	breq	.+52     	; 0x5c12 <STEPPER_process_pwm+0xfe>
    5bde:	20 91 b6 07 	lds	r18, 0x07B6
    5be2:	30 91 b7 07 	lds	r19, 0x07B7
    5be6:	80 e6       	ldi	r24, 0x60	; 96
    5be8:	90 e0       	ldi	r25, 0x00	; 0
    5bea:	ac 01       	movw	r20, r24
    5bec:	24 9f       	mul	r18, r20
    5bee:	c0 01       	movw	r24, r0
    5bf0:	25 9f       	mul	r18, r21
    5bf2:	90 0d       	add	r25, r0
    5bf4:	34 9f       	mul	r19, r20
    5bf6:	90 0d       	add	r25, r0
    5bf8:	11 24       	eor	r1, r1
    5bfa:	88 0f       	add	r24, r24
    5bfc:	89 2f       	mov	r24, r25
    5bfe:	88 1f       	adc	r24, r24
    5c00:	99 0b       	sbc	r25, r25
    5c02:	90 93 cb 07 	sts	0x07CB, r25
    5c06:	80 93 ca 07 	sts	0x07CA, r24
    5c0a:	81 e0       	ldi	r24, 0x01	; 1
    5c0c:	80 93 eb 04 	sts	0x04EB, r24
    5c10:	08 95       	ret
    5c12:	80 91 eb 04 	lds	r24, 0x04EB
    5c16:	88 23       	and	r24, r24
    5c18:	a1 f0       	breq	.+40     	; 0x5c42 <STEPPER_process_pwm+0x12e>
    5c1a:	80 91 ca 07 	lds	r24, 0x07CA
    5c1e:	90 91 cb 07 	lds	r25, 0x07CB
    5c22:	01 97       	sbiw	r24, 0x01	; 1
    5c24:	90 93 cb 07 	sts	0x07CB, r25
    5c28:	80 93 ca 07 	sts	0x07CA, r24
    5c2c:	80 91 ca 07 	lds	r24, 0x07CA
    5c30:	90 91 cb 07 	lds	r25, 0x07CB
    5c34:	89 2b       	or	r24, r25
    5c36:	29 f4       	brne	.+10     	; 0x5c42 <STEPPER_process_pwm+0x12e>
    5c38:	80 81       	ld	r24, Z
    5c3a:	8f 71       	andi	r24, 0x1F	; 31
    5c3c:	80 83       	st	Z, r24
    5c3e:	10 92 eb 04 	sts	0x04EB, r1
    5c42:	08 95       	ret

00005c44 <__subsf3>:
    5c44:	50 58       	subi	r21, 0x80	; 128

00005c46 <__addsf3>:
    5c46:	bb 27       	eor	r27, r27
    5c48:	aa 27       	eor	r26, r26
    5c4a:	0e d0       	rcall	.+28     	; 0x5c68 <__addsf3x>
    5c4c:	75 c1       	rjmp	.+746    	; 0x5f38 <__fp_round>
    5c4e:	66 d1       	rcall	.+716    	; 0x5f1c <__fp_pscA>
    5c50:	30 f0       	brcs	.+12     	; 0x5c5e <__addsf3+0x18>
    5c52:	6b d1       	rcall	.+726    	; 0x5f2a <__fp_pscB>
    5c54:	20 f0       	brcs	.+8      	; 0x5c5e <__addsf3+0x18>
    5c56:	31 f4       	brne	.+12     	; 0x5c64 <__addsf3+0x1e>
    5c58:	9f 3f       	cpi	r25, 0xFF	; 255
    5c5a:	11 f4       	brne	.+4      	; 0x5c60 <__addsf3+0x1a>
    5c5c:	1e f4       	brtc	.+6      	; 0x5c64 <__addsf3+0x1e>
    5c5e:	5b c1       	rjmp	.+694    	; 0x5f16 <__fp_nan>
    5c60:	0e f4       	brtc	.+2      	; 0x5c64 <__addsf3+0x1e>
    5c62:	e0 95       	com	r30
    5c64:	e7 fb       	bst	r30, 7
    5c66:	51 c1       	rjmp	.+674    	; 0x5f0a <__fp_inf>

00005c68 <__addsf3x>:
    5c68:	e9 2f       	mov	r30, r25
    5c6a:	77 d1       	rcall	.+750    	; 0x5f5a <__fp_split3>
    5c6c:	80 f3       	brcs	.-32     	; 0x5c4e <__addsf3+0x8>
    5c6e:	ba 17       	cp	r27, r26
    5c70:	62 07       	cpc	r22, r18
    5c72:	73 07       	cpc	r23, r19
    5c74:	84 07       	cpc	r24, r20
    5c76:	95 07       	cpc	r25, r21
    5c78:	18 f0       	brcs	.+6      	; 0x5c80 <__addsf3x+0x18>
    5c7a:	71 f4       	brne	.+28     	; 0x5c98 <__addsf3x+0x30>
    5c7c:	9e f5       	brtc	.+102    	; 0x5ce4 <__addsf3x+0x7c>
    5c7e:	8f c1       	rjmp	.+798    	; 0x5f9e <__fp_zero>
    5c80:	0e f4       	brtc	.+2      	; 0x5c84 <__addsf3x+0x1c>
    5c82:	e0 95       	com	r30
    5c84:	0b 2e       	mov	r0, r27
    5c86:	ba 2f       	mov	r27, r26
    5c88:	a0 2d       	mov	r26, r0
    5c8a:	0b 01       	movw	r0, r22
    5c8c:	b9 01       	movw	r22, r18
    5c8e:	90 01       	movw	r18, r0
    5c90:	0c 01       	movw	r0, r24
    5c92:	ca 01       	movw	r24, r20
    5c94:	a0 01       	movw	r20, r0
    5c96:	11 24       	eor	r1, r1
    5c98:	ff 27       	eor	r31, r31
    5c9a:	59 1b       	sub	r21, r25
    5c9c:	99 f0       	breq	.+38     	; 0x5cc4 <__addsf3x+0x5c>
    5c9e:	59 3f       	cpi	r21, 0xF9	; 249
    5ca0:	50 f4       	brcc	.+20     	; 0x5cb6 <__addsf3x+0x4e>
    5ca2:	50 3e       	cpi	r21, 0xE0	; 224
    5ca4:	68 f1       	brcs	.+90     	; 0x5d00 <__addsf3x+0x98>
    5ca6:	1a 16       	cp	r1, r26
    5ca8:	f0 40       	sbci	r31, 0x00	; 0
    5caa:	a2 2f       	mov	r26, r18
    5cac:	23 2f       	mov	r18, r19
    5cae:	34 2f       	mov	r19, r20
    5cb0:	44 27       	eor	r20, r20
    5cb2:	58 5f       	subi	r21, 0xF8	; 248
    5cb4:	f3 cf       	rjmp	.-26     	; 0x5c9c <__addsf3x+0x34>
    5cb6:	46 95       	lsr	r20
    5cb8:	37 95       	ror	r19
    5cba:	27 95       	ror	r18
    5cbc:	a7 95       	ror	r26
    5cbe:	f0 40       	sbci	r31, 0x00	; 0
    5cc0:	53 95       	inc	r21
    5cc2:	c9 f7       	brne	.-14     	; 0x5cb6 <__addsf3x+0x4e>
    5cc4:	7e f4       	brtc	.+30     	; 0x5ce4 <__addsf3x+0x7c>
    5cc6:	1f 16       	cp	r1, r31
    5cc8:	ba 0b       	sbc	r27, r26
    5cca:	62 0b       	sbc	r22, r18
    5ccc:	73 0b       	sbc	r23, r19
    5cce:	84 0b       	sbc	r24, r20
    5cd0:	ba f0       	brmi	.+46     	; 0x5d00 <__addsf3x+0x98>
    5cd2:	91 50       	subi	r25, 0x01	; 1
    5cd4:	a1 f0       	breq	.+40     	; 0x5cfe <__addsf3x+0x96>
    5cd6:	ff 0f       	add	r31, r31
    5cd8:	bb 1f       	adc	r27, r27
    5cda:	66 1f       	adc	r22, r22
    5cdc:	77 1f       	adc	r23, r23
    5cde:	88 1f       	adc	r24, r24
    5ce0:	c2 f7       	brpl	.-16     	; 0x5cd2 <__addsf3x+0x6a>
    5ce2:	0e c0       	rjmp	.+28     	; 0x5d00 <__addsf3x+0x98>
    5ce4:	ba 0f       	add	r27, r26
    5ce6:	62 1f       	adc	r22, r18
    5ce8:	73 1f       	adc	r23, r19
    5cea:	84 1f       	adc	r24, r20
    5cec:	48 f4       	brcc	.+18     	; 0x5d00 <__addsf3x+0x98>
    5cee:	87 95       	ror	r24
    5cf0:	77 95       	ror	r23
    5cf2:	67 95       	ror	r22
    5cf4:	b7 95       	ror	r27
    5cf6:	f7 95       	ror	r31
    5cf8:	9e 3f       	cpi	r25, 0xFE	; 254
    5cfa:	08 f0       	brcs	.+2      	; 0x5cfe <__addsf3x+0x96>
    5cfc:	b3 cf       	rjmp	.-154    	; 0x5c64 <__addsf3+0x1e>
    5cfe:	93 95       	inc	r25
    5d00:	88 0f       	add	r24, r24
    5d02:	08 f0       	brcs	.+2      	; 0x5d06 <__addsf3x+0x9e>
    5d04:	99 27       	eor	r25, r25
    5d06:	ee 0f       	add	r30, r30
    5d08:	97 95       	ror	r25
    5d0a:	87 95       	ror	r24
    5d0c:	08 95       	ret

00005d0e <__cmpsf2>:
    5d0e:	d9 d0       	rcall	.+434    	; 0x5ec2 <__fp_cmp>
    5d10:	08 f4       	brcc	.+2      	; 0x5d14 <__cmpsf2+0x6>
    5d12:	81 e0       	ldi	r24, 0x01	; 1
    5d14:	08 95       	ret

00005d16 <__divsf3>:
    5d16:	0c d0       	rcall	.+24     	; 0x5d30 <__divsf3x>
    5d18:	0f c1       	rjmp	.+542    	; 0x5f38 <__fp_round>
    5d1a:	07 d1       	rcall	.+526    	; 0x5f2a <__fp_pscB>
    5d1c:	40 f0       	brcs	.+16     	; 0x5d2e <__divsf3+0x18>
    5d1e:	fe d0       	rcall	.+508    	; 0x5f1c <__fp_pscA>
    5d20:	30 f0       	brcs	.+12     	; 0x5d2e <__divsf3+0x18>
    5d22:	21 f4       	brne	.+8      	; 0x5d2c <__divsf3+0x16>
    5d24:	5f 3f       	cpi	r21, 0xFF	; 255
    5d26:	19 f0       	breq	.+6      	; 0x5d2e <__divsf3+0x18>
    5d28:	f0 c0       	rjmp	.+480    	; 0x5f0a <__fp_inf>
    5d2a:	51 11       	cpse	r21, r1
    5d2c:	39 c1       	rjmp	.+626    	; 0x5fa0 <__fp_szero>
    5d2e:	f3 c0       	rjmp	.+486    	; 0x5f16 <__fp_nan>

00005d30 <__divsf3x>:
    5d30:	14 d1       	rcall	.+552    	; 0x5f5a <__fp_split3>
    5d32:	98 f3       	brcs	.-26     	; 0x5d1a <__divsf3+0x4>

00005d34 <__divsf3_pse>:
    5d34:	99 23       	and	r25, r25
    5d36:	c9 f3       	breq	.-14     	; 0x5d2a <__divsf3+0x14>
    5d38:	55 23       	and	r21, r21
    5d3a:	b1 f3       	breq	.-20     	; 0x5d28 <__divsf3+0x12>
    5d3c:	95 1b       	sub	r25, r21
    5d3e:	55 0b       	sbc	r21, r21
    5d40:	bb 27       	eor	r27, r27
    5d42:	aa 27       	eor	r26, r26
    5d44:	62 17       	cp	r22, r18
    5d46:	73 07       	cpc	r23, r19
    5d48:	84 07       	cpc	r24, r20
    5d4a:	38 f0       	brcs	.+14     	; 0x5d5a <__divsf3_pse+0x26>
    5d4c:	9f 5f       	subi	r25, 0xFF	; 255
    5d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d50:	22 0f       	add	r18, r18
    5d52:	33 1f       	adc	r19, r19
    5d54:	44 1f       	adc	r20, r20
    5d56:	aa 1f       	adc	r26, r26
    5d58:	a9 f3       	breq	.-22     	; 0x5d44 <__divsf3_pse+0x10>
    5d5a:	33 d0       	rcall	.+102    	; 0x5dc2 <__divsf3_pse+0x8e>
    5d5c:	0e 2e       	mov	r0, r30
    5d5e:	3a f0       	brmi	.+14     	; 0x5d6e <__divsf3_pse+0x3a>
    5d60:	e0 e8       	ldi	r30, 0x80	; 128
    5d62:	30 d0       	rcall	.+96     	; 0x5dc4 <__divsf3_pse+0x90>
    5d64:	91 50       	subi	r25, 0x01	; 1
    5d66:	50 40       	sbci	r21, 0x00	; 0
    5d68:	e6 95       	lsr	r30
    5d6a:	00 1c       	adc	r0, r0
    5d6c:	ca f7       	brpl	.-14     	; 0x5d60 <__divsf3_pse+0x2c>
    5d6e:	29 d0       	rcall	.+82     	; 0x5dc2 <__divsf3_pse+0x8e>
    5d70:	fe 2f       	mov	r31, r30
    5d72:	27 d0       	rcall	.+78     	; 0x5dc2 <__divsf3_pse+0x8e>
    5d74:	66 0f       	add	r22, r22
    5d76:	77 1f       	adc	r23, r23
    5d78:	88 1f       	adc	r24, r24
    5d7a:	bb 1f       	adc	r27, r27
    5d7c:	26 17       	cp	r18, r22
    5d7e:	37 07       	cpc	r19, r23
    5d80:	48 07       	cpc	r20, r24
    5d82:	ab 07       	cpc	r26, r27
    5d84:	b0 e8       	ldi	r27, 0x80	; 128
    5d86:	09 f0       	breq	.+2      	; 0x5d8a <__divsf3_pse+0x56>
    5d88:	bb 0b       	sbc	r27, r27
    5d8a:	80 2d       	mov	r24, r0
    5d8c:	bf 01       	movw	r22, r30
    5d8e:	ff 27       	eor	r31, r31
    5d90:	93 58       	subi	r25, 0x83	; 131
    5d92:	5f 4f       	sbci	r21, 0xFF	; 255
    5d94:	2a f0       	brmi	.+10     	; 0x5da0 <__divsf3_pse+0x6c>
    5d96:	9e 3f       	cpi	r25, 0xFE	; 254
    5d98:	51 05       	cpc	r21, r1
    5d9a:	68 f0       	brcs	.+26     	; 0x5db6 <__divsf3_pse+0x82>
    5d9c:	b6 c0       	rjmp	.+364    	; 0x5f0a <__fp_inf>
    5d9e:	00 c1       	rjmp	.+512    	; 0x5fa0 <__fp_szero>
    5da0:	5f 3f       	cpi	r21, 0xFF	; 255
    5da2:	ec f3       	brlt	.-6      	; 0x5d9e <__divsf3_pse+0x6a>
    5da4:	98 3e       	cpi	r25, 0xE8	; 232
    5da6:	dc f3       	brlt	.-10     	; 0x5d9e <__divsf3_pse+0x6a>
    5da8:	86 95       	lsr	r24
    5daa:	77 95       	ror	r23
    5dac:	67 95       	ror	r22
    5dae:	b7 95       	ror	r27
    5db0:	f7 95       	ror	r31
    5db2:	9f 5f       	subi	r25, 0xFF	; 255
    5db4:	c9 f7       	brne	.-14     	; 0x5da8 <__divsf3_pse+0x74>
    5db6:	88 0f       	add	r24, r24
    5db8:	91 1d       	adc	r25, r1
    5dba:	96 95       	lsr	r25
    5dbc:	87 95       	ror	r24
    5dbe:	97 f9       	bld	r25, 7
    5dc0:	08 95       	ret
    5dc2:	e1 e0       	ldi	r30, 0x01	; 1
    5dc4:	66 0f       	add	r22, r22
    5dc6:	77 1f       	adc	r23, r23
    5dc8:	88 1f       	adc	r24, r24
    5dca:	bb 1f       	adc	r27, r27
    5dcc:	62 17       	cp	r22, r18
    5dce:	73 07       	cpc	r23, r19
    5dd0:	84 07       	cpc	r24, r20
    5dd2:	ba 07       	cpc	r27, r26
    5dd4:	20 f0       	brcs	.+8      	; 0x5dde <__divsf3_pse+0xaa>
    5dd6:	62 1b       	sub	r22, r18
    5dd8:	73 0b       	sbc	r23, r19
    5dda:	84 0b       	sbc	r24, r20
    5ddc:	ba 0b       	sbc	r27, r26
    5dde:	ee 1f       	adc	r30, r30
    5de0:	88 f7       	brcc	.-30     	; 0x5dc4 <__divsf3_pse+0x90>
    5de2:	e0 95       	com	r30
    5de4:	08 95       	ret

00005de6 <__fixsfsi>:
    5de6:	04 d0       	rcall	.+8      	; 0x5df0 <__fixunssfsi>
    5de8:	68 94       	set
    5dea:	b1 11       	cpse	r27, r1
    5dec:	d9 c0       	rjmp	.+434    	; 0x5fa0 <__fp_szero>
    5dee:	08 95       	ret

00005df0 <__fixunssfsi>:
    5df0:	bc d0       	rcall	.+376    	; 0x5f6a <__fp_splitA>
    5df2:	88 f0       	brcs	.+34     	; 0x5e16 <__fixunssfsi+0x26>
    5df4:	9f 57       	subi	r25, 0x7F	; 127
    5df6:	90 f0       	brcs	.+36     	; 0x5e1c <__fixunssfsi+0x2c>
    5df8:	b9 2f       	mov	r27, r25
    5dfa:	99 27       	eor	r25, r25
    5dfc:	b7 51       	subi	r27, 0x17	; 23
    5dfe:	a0 f0       	brcs	.+40     	; 0x5e28 <__fixunssfsi+0x38>
    5e00:	d1 f0       	breq	.+52     	; 0x5e36 <__fixunssfsi+0x46>
    5e02:	66 0f       	add	r22, r22
    5e04:	77 1f       	adc	r23, r23
    5e06:	88 1f       	adc	r24, r24
    5e08:	99 1f       	adc	r25, r25
    5e0a:	1a f0       	brmi	.+6      	; 0x5e12 <__fixunssfsi+0x22>
    5e0c:	ba 95       	dec	r27
    5e0e:	c9 f7       	brne	.-14     	; 0x5e02 <__fixunssfsi+0x12>
    5e10:	12 c0       	rjmp	.+36     	; 0x5e36 <__fixunssfsi+0x46>
    5e12:	b1 30       	cpi	r27, 0x01	; 1
    5e14:	81 f0       	breq	.+32     	; 0x5e36 <__fixunssfsi+0x46>
    5e16:	c3 d0       	rcall	.+390    	; 0x5f9e <__fp_zero>
    5e18:	b1 e0       	ldi	r27, 0x01	; 1
    5e1a:	08 95       	ret
    5e1c:	c0 c0       	rjmp	.+384    	; 0x5f9e <__fp_zero>
    5e1e:	67 2f       	mov	r22, r23
    5e20:	78 2f       	mov	r23, r24
    5e22:	88 27       	eor	r24, r24
    5e24:	b8 5f       	subi	r27, 0xF8	; 248
    5e26:	39 f0       	breq	.+14     	; 0x5e36 <__fixunssfsi+0x46>
    5e28:	b9 3f       	cpi	r27, 0xF9	; 249
    5e2a:	cc f3       	brlt	.-14     	; 0x5e1e <__fixunssfsi+0x2e>
    5e2c:	86 95       	lsr	r24
    5e2e:	77 95       	ror	r23
    5e30:	67 95       	ror	r22
    5e32:	b3 95       	inc	r27
    5e34:	d9 f7       	brne	.-10     	; 0x5e2c <__fixunssfsi+0x3c>
    5e36:	3e f4       	brtc	.+14     	; 0x5e46 <__fixunssfsi+0x56>
    5e38:	90 95       	com	r25
    5e3a:	80 95       	com	r24
    5e3c:	70 95       	com	r23
    5e3e:	61 95       	neg	r22
    5e40:	7f 4f       	sbci	r23, 0xFF	; 255
    5e42:	8f 4f       	sbci	r24, 0xFF	; 255
    5e44:	9f 4f       	sbci	r25, 0xFF	; 255
    5e46:	08 95       	ret

00005e48 <__floatunsisf>:
    5e48:	e8 94       	clt
    5e4a:	09 c0       	rjmp	.+18     	; 0x5e5e <__floatsisf+0x12>

00005e4c <__floatsisf>:
    5e4c:	97 fb       	bst	r25, 7
    5e4e:	3e f4       	brtc	.+14     	; 0x5e5e <__floatsisf+0x12>
    5e50:	90 95       	com	r25
    5e52:	80 95       	com	r24
    5e54:	70 95       	com	r23
    5e56:	61 95       	neg	r22
    5e58:	7f 4f       	sbci	r23, 0xFF	; 255
    5e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e5e:	99 23       	and	r25, r25
    5e60:	a9 f0       	breq	.+42     	; 0x5e8c <__floatsisf+0x40>
    5e62:	f9 2f       	mov	r31, r25
    5e64:	96 e9       	ldi	r25, 0x96	; 150
    5e66:	bb 27       	eor	r27, r27
    5e68:	93 95       	inc	r25
    5e6a:	f6 95       	lsr	r31
    5e6c:	87 95       	ror	r24
    5e6e:	77 95       	ror	r23
    5e70:	67 95       	ror	r22
    5e72:	b7 95       	ror	r27
    5e74:	f1 11       	cpse	r31, r1
    5e76:	f8 cf       	rjmp	.-16     	; 0x5e68 <__floatsisf+0x1c>
    5e78:	fa f4       	brpl	.+62     	; 0x5eb8 <__floatsisf+0x6c>
    5e7a:	bb 0f       	add	r27, r27
    5e7c:	11 f4       	brne	.+4      	; 0x5e82 <__floatsisf+0x36>
    5e7e:	60 ff       	sbrs	r22, 0
    5e80:	1b c0       	rjmp	.+54     	; 0x5eb8 <__floatsisf+0x6c>
    5e82:	6f 5f       	subi	r22, 0xFF	; 255
    5e84:	7f 4f       	sbci	r23, 0xFF	; 255
    5e86:	8f 4f       	sbci	r24, 0xFF	; 255
    5e88:	9f 4f       	sbci	r25, 0xFF	; 255
    5e8a:	16 c0       	rjmp	.+44     	; 0x5eb8 <__floatsisf+0x6c>
    5e8c:	88 23       	and	r24, r24
    5e8e:	11 f0       	breq	.+4      	; 0x5e94 <__floatsisf+0x48>
    5e90:	96 e9       	ldi	r25, 0x96	; 150
    5e92:	11 c0       	rjmp	.+34     	; 0x5eb6 <__floatsisf+0x6a>
    5e94:	77 23       	and	r23, r23
    5e96:	21 f0       	breq	.+8      	; 0x5ea0 <__floatsisf+0x54>
    5e98:	9e e8       	ldi	r25, 0x8E	; 142
    5e9a:	87 2f       	mov	r24, r23
    5e9c:	76 2f       	mov	r23, r22
    5e9e:	05 c0       	rjmp	.+10     	; 0x5eaa <__floatsisf+0x5e>
    5ea0:	66 23       	and	r22, r22
    5ea2:	71 f0       	breq	.+28     	; 0x5ec0 <__floatsisf+0x74>
    5ea4:	96 e8       	ldi	r25, 0x86	; 134
    5ea6:	86 2f       	mov	r24, r22
    5ea8:	70 e0       	ldi	r23, 0x00	; 0
    5eaa:	60 e0       	ldi	r22, 0x00	; 0
    5eac:	2a f0       	brmi	.+10     	; 0x5eb8 <__floatsisf+0x6c>
    5eae:	9a 95       	dec	r25
    5eb0:	66 0f       	add	r22, r22
    5eb2:	77 1f       	adc	r23, r23
    5eb4:	88 1f       	adc	r24, r24
    5eb6:	da f7       	brpl	.-10     	; 0x5eae <__floatsisf+0x62>
    5eb8:	88 0f       	add	r24, r24
    5eba:	96 95       	lsr	r25
    5ebc:	87 95       	ror	r24
    5ebe:	97 f9       	bld	r25, 7
    5ec0:	08 95       	ret

00005ec2 <__fp_cmp>:
    5ec2:	99 0f       	add	r25, r25
    5ec4:	00 08       	sbc	r0, r0
    5ec6:	55 0f       	add	r21, r21
    5ec8:	aa 0b       	sbc	r26, r26
    5eca:	e0 e8       	ldi	r30, 0x80	; 128
    5ecc:	fe ef       	ldi	r31, 0xFE	; 254
    5ece:	16 16       	cp	r1, r22
    5ed0:	17 06       	cpc	r1, r23
    5ed2:	e8 07       	cpc	r30, r24
    5ed4:	f9 07       	cpc	r31, r25
    5ed6:	c0 f0       	brcs	.+48     	; 0x5f08 <__fp_cmp+0x46>
    5ed8:	12 16       	cp	r1, r18
    5eda:	13 06       	cpc	r1, r19
    5edc:	e4 07       	cpc	r30, r20
    5ede:	f5 07       	cpc	r31, r21
    5ee0:	98 f0       	brcs	.+38     	; 0x5f08 <__fp_cmp+0x46>
    5ee2:	62 1b       	sub	r22, r18
    5ee4:	73 0b       	sbc	r23, r19
    5ee6:	84 0b       	sbc	r24, r20
    5ee8:	95 0b       	sbc	r25, r21
    5eea:	39 f4       	brne	.+14     	; 0x5efa <__fp_cmp+0x38>
    5eec:	0a 26       	eor	r0, r26
    5eee:	61 f0       	breq	.+24     	; 0x5f08 <__fp_cmp+0x46>
    5ef0:	23 2b       	or	r18, r19
    5ef2:	24 2b       	or	r18, r20
    5ef4:	25 2b       	or	r18, r21
    5ef6:	21 f4       	brne	.+8      	; 0x5f00 <__fp_cmp+0x3e>
    5ef8:	08 95       	ret
    5efa:	0a 26       	eor	r0, r26
    5efc:	09 f4       	brne	.+2      	; 0x5f00 <__fp_cmp+0x3e>
    5efe:	a1 40       	sbci	r26, 0x01	; 1
    5f00:	a6 95       	lsr	r26
    5f02:	8f ef       	ldi	r24, 0xFF	; 255
    5f04:	81 1d       	adc	r24, r1
    5f06:	81 1d       	adc	r24, r1
    5f08:	08 95       	ret

00005f0a <__fp_inf>:
    5f0a:	97 f9       	bld	r25, 7
    5f0c:	9f 67       	ori	r25, 0x7F	; 127
    5f0e:	80 e8       	ldi	r24, 0x80	; 128
    5f10:	70 e0       	ldi	r23, 0x00	; 0
    5f12:	60 e0       	ldi	r22, 0x00	; 0
    5f14:	08 95       	ret

00005f16 <__fp_nan>:
    5f16:	9f ef       	ldi	r25, 0xFF	; 255
    5f18:	80 ec       	ldi	r24, 0xC0	; 192
    5f1a:	08 95       	ret

00005f1c <__fp_pscA>:
    5f1c:	00 24       	eor	r0, r0
    5f1e:	0a 94       	dec	r0
    5f20:	16 16       	cp	r1, r22
    5f22:	17 06       	cpc	r1, r23
    5f24:	18 06       	cpc	r1, r24
    5f26:	09 06       	cpc	r0, r25
    5f28:	08 95       	ret

00005f2a <__fp_pscB>:
    5f2a:	00 24       	eor	r0, r0
    5f2c:	0a 94       	dec	r0
    5f2e:	12 16       	cp	r1, r18
    5f30:	13 06       	cpc	r1, r19
    5f32:	14 06       	cpc	r1, r20
    5f34:	05 06       	cpc	r0, r21
    5f36:	08 95       	ret

00005f38 <__fp_round>:
    5f38:	09 2e       	mov	r0, r25
    5f3a:	03 94       	inc	r0
    5f3c:	00 0c       	add	r0, r0
    5f3e:	11 f4       	brne	.+4      	; 0x5f44 <__fp_round+0xc>
    5f40:	88 23       	and	r24, r24
    5f42:	52 f0       	brmi	.+20     	; 0x5f58 <__fp_round+0x20>
    5f44:	bb 0f       	add	r27, r27
    5f46:	40 f4       	brcc	.+16     	; 0x5f58 <__fp_round+0x20>
    5f48:	bf 2b       	or	r27, r31
    5f4a:	11 f4       	brne	.+4      	; 0x5f50 <__fp_round+0x18>
    5f4c:	60 ff       	sbrs	r22, 0
    5f4e:	04 c0       	rjmp	.+8      	; 0x5f58 <__fp_round+0x20>
    5f50:	6f 5f       	subi	r22, 0xFF	; 255
    5f52:	7f 4f       	sbci	r23, 0xFF	; 255
    5f54:	8f 4f       	sbci	r24, 0xFF	; 255
    5f56:	9f 4f       	sbci	r25, 0xFF	; 255
    5f58:	08 95       	ret

00005f5a <__fp_split3>:
    5f5a:	57 fd       	sbrc	r21, 7
    5f5c:	90 58       	subi	r25, 0x80	; 128
    5f5e:	44 0f       	add	r20, r20
    5f60:	55 1f       	adc	r21, r21
    5f62:	59 f0       	breq	.+22     	; 0x5f7a <__fp_splitA+0x10>
    5f64:	5f 3f       	cpi	r21, 0xFF	; 255
    5f66:	71 f0       	breq	.+28     	; 0x5f84 <__fp_splitA+0x1a>
    5f68:	47 95       	ror	r20

00005f6a <__fp_splitA>:
    5f6a:	88 0f       	add	r24, r24
    5f6c:	97 fb       	bst	r25, 7
    5f6e:	99 1f       	adc	r25, r25
    5f70:	61 f0       	breq	.+24     	; 0x5f8a <__fp_splitA+0x20>
    5f72:	9f 3f       	cpi	r25, 0xFF	; 255
    5f74:	79 f0       	breq	.+30     	; 0x5f94 <__fp_splitA+0x2a>
    5f76:	87 95       	ror	r24
    5f78:	08 95       	ret
    5f7a:	12 16       	cp	r1, r18
    5f7c:	13 06       	cpc	r1, r19
    5f7e:	14 06       	cpc	r1, r20
    5f80:	55 1f       	adc	r21, r21
    5f82:	f2 cf       	rjmp	.-28     	; 0x5f68 <__fp_split3+0xe>
    5f84:	46 95       	lsr	r20
    5f86:	f1 df       	rcall	.-30     	; 0x5f6a <__fp_splitA>
    5f88:	08 c0       	rjmp	.+16     	; 0x5f9a <__fp_splitA+0x30>
    5f8a:	16 16       	cp	r1, r22
    5f8c:	17 06       	cpc	r1, r23
    5f8e:	18 06       	cpc	r1, r24
    5f90:	99 1f       	adc	r25, r25
    5f92:	f1 cf       	rjmp	.-30     	; 0x5f76 <__fp_splitA+0xc>
    5f94:	86 95       	lsr	r24
    5f96:	71 05       	cpc	r23, r1
    5f98:	61 05       	cpc	r22, r1
    5f9a:	08 94       	sec
    5f9c:	08 95       	ret

00005f9e <__fp_zero>:
    5f9e:	e8 94       	clt

00005fa0 <__fp_szero>:
    5fa0:	bb 27       	eor	r27, r27
    5fa2:	66 27       	eor	r22, r22
    5fa4:	77 27       	eor	r23, r23
    5fa6:	cb 01       	movw	r24, r22
    5fa8:	97 f9       	bld	r25, 7
    5faa:	08 95       	ret

00005fac <__gesf2>:
    5fac:	8a df       	rcall	.-236    	; 0x5ec2 <__fp_cmp>
    5fae:	08 f4       	brcc	.+2      	; 0x5fb2 <__gesf2+0x6>
    5fb0:	8f ef       	ldi	r24, 0xFF	; 255
    5fb2:	08 95       	ret

00005fb4 <lrint>:
    5fb4:	da df       	rcall	.-76     	; 0x5f6a <__fp_splitA>
    5fb6:	a8 f1       	brcs	.+106    	; 0x6022 <lrint+0x6e>
    5fb8:	9e 57       	subi	r25, 0x7E	; 126
    5fba:	a8 f1       	brcs	.+106    	; 0x6026 <lrint+0x72>
    5fbc:	98 51       	subi	r25, 0x18	; 24
    5fbe:	60 f0       	brcs	.+24     	; 0x5fd8 <lrint+0x24>
    5fc0:	39 f1       	breq	.+78     	; 0x6010 <lrint+0x5c>
    5fc2:	98 30       	cpi	r25, 0x08	; 8
    5fc4:	70 f5       	brcc	.+92     	; 0x6022 <lrint+0x6e>
    5fc6:	09 2e       	mov	r0, r25
    5fc8:	99 27       	eor	r25, r25
    5fca:	66 0f       	add	r22, r22
    5fcc:	77 1f       	adc	r23, r23
    5fce:	88 1f       	adc	r24, r24
    5fd0:	99 1f       	adc	r25, r25
    5fd2:	0a 94       	dec	r0
    5fd4:	d1 f7       	brne	.-12     	; 0x5fca <lrint+0x16>
    5fd6:	1c c0       	rjmp	.+56     	; 0x6010 <lrint+0x5c>
    5fd8:	bb 27       	eor	r27, r27
    5fda:	99 3f       	cpi	r25, 0xF9	; 249
    5fdc:	4c f4       	brge	.+18     	; 0x5ff0 <lrint+0x3c>
    5fde:	b1 11       	cpse	r27, r1
    5fe0:	b1 e0       	ldi	r27, 0x01	; 1
    5fe2:	b6 2b       	or	r27, r22
    5fe4:	67 2f       	mov	r22, r23
    5fe6:	78 2f       	mov	r23, r24
    5fe8:	88 27       	eor	r24, r24
    5fea:	98 5f       	subi	r25, 0xF8	; 248
    5fec:	b1 f7       	brne	.-20     	; 0x5fda <lrint+0x26>
    5fee:	08 c0       	rjmp	.+16     	; 0x6000 <lrint+0x4c>
    5ff0:	86 95       	lsr	r24
    5ff2:	77 95       	ror	r23
    5ff4:	67 95       	ror	r22
    5ff6:	b7 95       	ror	r27
    5ff8:	08 f4       	brcc	.+2      	; 0x5ffc <lrint+0x48>
    5ffa:	b1 60       	ori	r27, 0x01	; 1
    5ffc:	93 95       	inc	r25
    5ffe:	c1 f7       	brne	.-16     	; 0x5ff0 <lrint+0x3c>
    6000:	bb 0f       	add	r27, r27
    6002:	30 f4       	brcc	.+12     	; 0x6010 <lrint+0x5c>
    6004:	11 f4       	brne	.+4      	; 0x600a <lrint+0x56>
    6006:	60 ff       	sbrs	r22, 0
    6008:	03 c0       	rjmp	.+6      	; 0x6010 <lrint+0x5c>
    600a:	6f 5f       	subi	r22, 0xFF	; 255
    600c:	7f 4f       	sbci	r23, 0xFF	; 255
    600e:	8f 4f       	sbci	r24, 0xFF	; 255
    6010:	3e f4       	brtc	.+14     	; 0x6020 <lrint+0x6c>
    6012:	90 95       	com	r25
    6014:	80 95       	com	r24
    6016:	70 95       	com	r23
    6018:	61 95       	neg	r22
    601a:	7f 4f       	sbci	r23, 0xFF	; 255
    601c:	8f 4f       	sbci	r24, 0xFF	; 255
    601e:	9f 4f       	sbci	r25, 0xFF	; 255
    6020:	08 95       	ret
    6022:	68 94       	set
    6024:	bd cf       	rjmp	.-134    	; 0x5fa0 <__fp_szero>
    6026:	bb cf       	rjmp	.-138    	; 0x5f9e <__fp_zero>

00006028 <__mulsf3>:
    6028:	0b d0       	rcall	.+22     	; 0x6040 <__mulsf3x>
    602a:	86 cf       	rjmp	.-244    	; 0x5f38 <__fp_round>
    602c:	77 df       	rcall	.-274    	; 0x5f1c <__fp_pscA>
    602e:	28 f0       	brcs	.+10     	; 0x603a <__mulsf3+0x12>
    6030:	7c df       	rcall	.-264    	; 0x5f2a <__fp_pscB>
    6032:	18 f0       	brcs	.+6      	; 0x603a <__mulsf3+0x12>
    6034:	95 23       	and	r25, r21
    6036:	09 f0       	breq	.+2      	; 0x603a <__mulsf3+0x12>
    6038:	68 cf       	rjmp	.-304    	; 0x5f0a <__fp_inf>
    603a:	6d cf       	rjmp	.-294    	; 0x5f16 <__fp_nan>
    603c:	11 24       	eor	r1, r1
    603e:	b0 cf       	rjmp	.-160    	; 0x5fa0 <__fp_szero>

00006040 <__mulsf3x>:
    6040:	8c df       	rcall	.-232    	; 0x5f5a <__fp_split3>
    6042:	a0 f3       	brcs	.-24     	; 0x602c <__mulsf3+0x4>

00006044 <__mulsf3_pse>:
    6044:	95 9f       	mul	r25, r21
    6046:	d1 f3       	breq	.-12     	; 0x603c <__mulsf3+0x14>
    6048:	95 0f       	add	r25, r21
    604a:	50 e0       	ldi	r21, 0x00	; 0
    604c:	55 1f       	adc	r21, r21
    604e:	62 9f       	mul	r22, r18
    6050:	f0 01       	movw	r30, r0
    6052:	72 9f       	mul	r23, r18
    6054:	bb 27       	eor	r27, r27
    6056:	f0 0d       	add	r31, r0
    6058:	b1 1d       	adc	r27, r1
    605a:	63 9f       	mul	r22, r19
    605c:	aa 27       	eor	r26, r26
    605e:	f0 0d       	add	r31, r0
    6060:	b1 1d       	adc	r27, r1
    6062:	aa 1f       	adc	r26, r26
    6064:	64 9f       	mul	r22, r20
    6066:	66 27       	eor	r22, r22
    6068:	b0 0d       	add	r27, r0
    606a:	a1 1d       	adc	r26, r1
    606c:	66 1f       	adc	r22, r22
    606e:	82 9f       	mul	r24, r18
    6070:	22 27       	eor	r18, r18
    6072:	b0 0d       	add	r27, r0
    6074:	a1 1d       	adc	r26, r1
    6076:	62 1f       	adc	r22, r18
    6078:	73 9f       	mul	r23, r19
    607a:	b0 0d       	add	r27, r0
    607c:	a1 1d       	adc	r26, r1
    607e:	62 1f       	adc	r22, r18
    6080:	83 9f       	mul	r24, r19
    6082:	a0 0d       	add	r26, r0
    6084:	61 1d       	adc	r22, r1
    6086:	22 1f       	adc	r18, r18
    6088:	74 9f       	mul	r23, r20
    608a:	33 27       	eor	r19, r19
    608c:	a0 0d       	add	r26, r0
    608e:	61 1d       	adc	r22, r1
    6090:	23 1f       	adc	r18, r19
    6092:	84 9f       	mul	r24, r20
    6094:	60 0d       	add	r22, r0
    6096:	21 1d       	adc	r18, r1
    6098:	82 2f       	mov	r24, r18
    609a:	76 2f       	mov	r23, r22
    609c:	6a 2f       	mov	r22, r26
    609e:	11 24       	eor	r1, r1
    60a0:	9f 57       	subi	r25, 0x7F	; 127
    60a2:	50 40       	sbci	r21, 0x00	; 0
    60a4:	8a f0       	brmi	.+34     	; 0x60c8 <__mulsf3_pse+0x84>
    60a6:	e1 f0       	breq	.+56     	; 0x60e0 <__mulsf3_pse+0x9c>
    60a8:	88 23       	and	r24, r24
    60aa:	4a f0       	brmi	.+18     	; 0x60be <__mulsf3_pse+0x7a>
    60ac:	ee 0f       	add	r30, r30
    60ae:	ff 1f       	adc	r31, r31
    60b0:	bb 1f       	adc	r27, r27
    60b2:	66 1f       	adc	r22, r22
    60b4:	77 1f       	adc	r23, r23
    60b6:	88 1f       	adc	r24, r24
    60b8:	91 50       	subi	r25, 0x01	; 1
    60ba:	50 40       	sbci	r21, 0x00	; 0
    60bc:	a9 f7       	brne	.-22     	; 0x60a8 <__mulsf3_pse+0x64>
    60be:	9e 3f       	cpi	r25, 0xFE	; 254
    60c0:	51 05       	cpc	r21, r1
    60c2:	70 f0       	brcs	.+28     	; 0x60e0 <__mulsf3_pse+0x9c>
    60c4:	22 cf       	rjmp	.-444    	; 0x5f0a <__fp_inf>
    60c6:	6c cf       	rjmp	.-296    	; 0x5fa0 <__fp_szero>
    60c8:	5f 3f       	cpi	r21, 0xFF	; 255
    60ca:	ec f3       	brlt	.-6      	; 0x60c6 <__mulsf3_pse+0x82>
    60cc:	98 3e       	cpi	r25, 0xE8	; 232
    60ce:	dc f3       	brlt	.-10     	; 0x60c6 <__mulsf3_pse+0x82>
    60d0:	86 95       	lsr	r24
    60d2:	77 95       	ror	r23
    60d4:	67 95       	ror	r22
    60d6:	b7 95       	ror	r27
    60d8:	f7 95       	ror	r31
    60da:	e7 95       	ror	r30
    60dc:	9f 5f       	subi	r25, 0xFF	; 255
    60de:	c1 f7       	brne	.-16     	; 0x60d0 <__mulsf3_pse+0x8c>
    60e0:	fe 2b       	or	r31, r30
    60e2:	88 0f       	add	r24, r24
    60e4:	91 1d       	adc	r25, r1
    60e6:	96 95       	lsr	r25
    60e8:	87 95       	ror	r24
    60ea:	97 f9       	bld	r25, 7
    60ec:	08 95       	ret

000060ee <pow>:
    60ee:	fa 01       	movw	r30, r20
    60f0:	ee 0f       	add	r30, r30
    60f2:	ff 1f       	adc	r31, r31
    60f4:	30 96       	adiw	r30, 0x00	; 0
    60f6:	21 05       	cpc	r18, r1
    60f8:	31 05       	cpc	r19, r1
    60fa:	99 f1       	breq	.+102    	; 0x6162 <pow+0x74>
    60fc:	61 15       	cp	r22, r1
    60fe:	71 05       	cpc	r23, r1
    6100:	61 f4       	brne	.+24     	; 0x611a <pow+0x2c>
    6102:	80 38       	cpi	r24, 0x80	; 128
    6104:	bf e3       	ldi	r27, 0x3F	; 63
    6106:	9b 07       	cpc	r25, r27
    6108:	49 f1       	breq	.+82     	; 0x615c <pow+0x6e>
    610a:	68 94       	set
    610c:	90 38       	cpi	r25, 0x80	; 128
    610e:	81 05       	cpc	r24, r1
    6110:	61 f0       	breq	.+24     	; 0x612a <pow+0x3c>
    6112:	80 38       	cpi	r24, 0x80	; 128
    6114:	bf ef       	ldi	r27, 0xFF	; 255
    6116:	9b 07       	cpc	r25, r27
    6118:	41 f0       	breq	.+16     	; 0x612a <pow+0x3c>
    611a:	99 23       	and	r25, r25
    611c:	42 f5       	brpl	.+80     	; 0x616e <pow+0x80>
    611e:	ff 3f       	cpi	r31, 0xFF	; 255
    6120:	e1 05       	cpc	r30, r1
    6122:	31 05       	cpc	r19, r1
    6124:	21 05       	cpc	r18, r1
    6126:	11 f1       	breq	.+68     	; 0x616c <pow+0x7e>
    6128:	e8 94       	clt
    612a:	08 94       	sec
    612c:	e7 95       	ror	r30
    612e:	d9 01       	movw	r26, r18
    6130:	aa 23       	and	r26, r26
    6132:	29 f4       	brne	.+10     	; 0x613e <pow+0x50>
    6134:	ab 2f       	mov	r26, r27
    6136:	be 2f       	mov	r27, r30
    6138:	f8 5f       	subi	r31, 0xF8	; 248
    613a:	d0 f3       	brcs	.-12     	; 0x6130 <pow+0x42>
    613c:	10 c0       	rjmp	.+32     	; 0x615e <pow+0x70>
    613e:	ff 5f       	subi	r31, 0xFF	; 255
    6140:	70 f4       	brcc	.+28     	; 0x615e <pow+0x70>
    6142:	a6 95       	lsr	r26
    6144:	e0 f7       	brcc	.-8      	; 0x613e <pow+0x50>
    6146:	f7 39       	cpi	r31, 0x97	; 151
    6148:	50 f0       	brcs	.+20     	; 0x615e <pow+0x70>
    614a:	19 f0       	breq	.+6      	; 0x6152 <pow+0x64>
    614c:	ff 3a       	cpi	r31, 0xAF	; 175
    614e:	38 f4       	brcc	.+14     	; 0x615e <pow+0x70>
    6150:	9f 77       	andi	r25, 0x7F	; 127
    6152:	9f 93       	push	r25
    6154:	0c d0       	rcall	.+24     	; 0x616e <pow+0x80>
    6156:	0f 90       	pop	r0
    6158:	07 fc       	sbrc	r0, 7
    615a:	90 58       	subi	r25, 0x80	; 128
    615c:	08 95       	ret
    615e:	3e f0       	brts	.+14     	; 0x616e <pow+0x80>
    6160:	da ce       	rjmp	.-588    	; 0x5f16 <__fp_nan>
    6162:	60 e0       	ldi	r22, 0x00	; 0
    6164:	70 e0       	ldi	r23, 0x00	; 0
    6166:	80 e8       	ldi	r24, 0x80	; 128
    6168:	9f e3       	ldi	r25, 0x3F	; 63
    616a:	08 95       	ret
    616c:	4f e7       	ldi	r20, 0x7F	; 127
    616e:	9f 77       	andi	r25, 0x7F	; 127
    6170:	5f 93       	push	r21
    6172:	4f 93       	push	r20
    6174:	3f 93       	push	r19
    6176:	2f 93       	push	r18
    6178:	9e d0       	rcall	.+316    	; 0x62b6 <log>
    617a:	2f 91       	pop	r18
    617c:	3f 91       	pop	r19
    617e:	4f 91       	pop	r20
    6180:	5f 91       	pop	r21
    6182:	52 df       	rcall	.-348    	; 0x6028 <__mulsf3>
    6184:	05 c0       	rjmp	.+10     	; 0x6190 <exp>
    6186:	19 f4       	brne	.+6      	; 0x618e <pow+0xa0>
    6188:	0e f0       	brts	.+2      	; 0x618c <pow+0x9e>
    618a:	bf ce       	rjmp	.-642    	; 0x5f0a <__fp_inf>
    618c:	08 cf       	rjmp	.-496    	; 0x5f9e <__fp_zero>
    618e:	c3 ce       	rjmp	.-634    	; 0x5f16 <__fp_nan>

00006190 <exp>:
    6190:	ec de       	rcall	.-552    	; 0x5f6a <__fp_splitA>
    6192:	c8 f3       	brcs	.-14     	; 0x6186 <pow+0x98>
    6194:	96 38       	cpi	r25, 0x86	; 134
    6196:	c0 f7       	brcc	.-16     	; 0x6188 <pow+0x9a>
    6198:	07 f8       	bld	r0, 7
    619a:	0f 92       	push	r0
    619c:	e8 94       	clt
    619e:	2b e3       	ldi	r18, 0x3B	; 59
    61a0:	3a ea       	ldi	r19, 0xAA	; 170
    61a2:	48 eb       	ldi	r20, 0xB8	; 184
    61a4:	5f e7       	ldi	r21, 0x7F	; 127
    61a6:	4e df       	rcall	.-356    	; 0x6044 <__mulsf3_pse>
    61a8:	0f 92       	push	r0
    61aa:	0f 92       	push	r0
    61ac:	0f 92       	push	r0
    61ae:	4d b7       	in	r20, 0x3d	; 61
    61b0:	5e b7       	in	r21, 0x3e	; 62
    61b2:	0f 92       	push	r0
    61b4:	c0 d0       	rcall	.+384    	; 0x6336 <modf>
    61b6:	e8 ec       	ldi	r30, 0xC8	; 200
    61b8:	f0 e0       	ldi	r31, 0x00	; 0
    61ba:	16 d0       	rcall	.+44     	; 0x61e8 <__fp_powser>
    61bc:	4f 91       	pop	r20
    61be:	5f 91       	pop	r21
    61c0:	ef 91       	pop	r30
    61c2:	ff 91       	pop	r31
    61c4:	e5 95       	asr	r30
    61c6:	ee 1f       	adc	r30, r30
    61c8:	ff 1f       	adc	r31, r31
    61ca:	49 f0       	breq	.+18     	; 0x61de <exp+0x4e>
    61cc:	fe 57       	subi	r31, 0x7E	; 126
    61ce:	e0 68       	ori	r30, 0x80	; 128
    61d0:	44 27       	eor	r20, r20
    61d2:	ee 0f       	add	r30, r30
    61d4:	44 1f       	adc	r20, r20
    61d6:	fa 95       	dec	r31
    61d8:	e1 f7       	brne	.-8      	; 0x61d2 <exp+0x42>
    61da:	41 95       	neg	r20
    61dc:	55 0b       	sbc	r21, r21
    61de:	32 d0       	rcall	.+100    	; 0x6244 <ldexp>
    61e0:	0f 90       	pop	r0
    61e2:	07 fe       	sbrs	r0, 7
    61e4:	26 c0       	rjmp	.+76     	; 0x6232 <inverse>
    61e6:	08 95       	ret

000061e8 <__fp_powser>:
    61e8:	df 93       	push	r29
    61ea:	cf 93       	push	r28
    61ec:	1f 93       	push	r17
    61ee:	0f 93       	push	r16
    61f0:	ff 92       	push	r15
    61f2:	ef 92       	push	r14
    61f4:	df 92       	push	r13
    61f6:	7b 01       	movw	r14, r22
    61f8:	8c 01       	movw	r16, r24
    61fa:	68 94       	set
    61fc:	05 c0       	rjmp	.+10     	; 0x6208 <__fp_powser+0x20>
    61fe:	da 2e       	mov	r13, r26
    6200:	ef 01       	movw	r28, r30
    6202:	1e df       	rcall	.-452    	; 0x6040 <__mulsf3x>
    6204:	fe 01       	movw	r30, r28
    6206:	e8 94       	clt
    6208:	a5 91       	lpm	r26, Z+
    620a:	25 91       	lpm	r18, Z+
    620c:	35 91       	lpm	r19, Z+
    620e:	45 91       	lpm	r20, Z+
    6210:	55 91       	lpm	r21, Z+
    6212:	ae f3       	brts	.-22     	; 0x61fe <__fp_powser+0x16>
    6214:	ef 01       	movw	r28, r30
    6216:	28 dd       	rcall	.-1456   	; 0x5c68 <__addsf3x>
    6218:	fe 01       	movw	r30, r28
    621a:	97 01       	movw	r18, r14
    621c:	a8 01       	movw	r20, r16
    621e:	da 94       	dec	r13
    6220:	79 f7       	brne	.-34     	; 0x6200 <__fp_powser+0x18>
    6222:	df 90       	pop	r13
    6224:	ef 90       	pop	r14
    6226:	ff 90       	pop	r15
    6228:	0f 91       	pop	r16
    622a:	1f 91       	pop	r17
    622c:	cf 91       	pop	r28
    622e:	df 91       	pop	r29
    6230:	08 95       	ret

00006232 <inverse>:
    6232:	9b 01       	movw	r18, r22
    6234:	ac 01       	movw	r20, r24
    6236:	60 e0       	ldi	r22, 0x00	; 0
    6238:	70 e0       	ldi	r23, 0x00	; 0
    623a:	80 e8       	ldi	r24, 0x80	; 128
    623c:	9f e3       	ldi	r25, 0x3F	; 63
    623e:	6b cd       	rjmp	.-1322   	; 0x5d16 <__divsf3>
    6240:	64 ce       	rjmp	.-824    	; 0x5f0a <__fp_inf>
    6242:	ac c0       	rjmp	.+344    	; 0x639c <__fp_mpack>

00006244 <ldexp>:
    6244:	92 de       	rcall	.-732    	; 0x5f6a <__fp_splitA>
    6246:	e8 f3       	brcs	.-6      	; 0x6242 <inverse+0x10>
    6248:	99 23       	and	r25, r25
    624a:	d9 f3       	breq	.-10     	; 0x6242 <inverse+0x10>
    624c:	94 0f       	add	r25, r20
    624e:	51 1d       	adc	r21, r1
    6250:	bb f3       	brvs	.-18     	; 0x6240 <inverse+0xe>
    6252:	91 50       	subi	r25, 0x01	; 1
    6254:	50 40       	sbci	r21, 0x00	; 0
    6256:	94 f0       	brlt	.+36     	; 0x627c <ldexp+0x38>
    6258:	59 f0       	breq	.+22     	; 0x6270 <ldexp+0x2c>
    625a:	88 23       	and	r24, r24
    625c:	32 f0       	brmi	.+12     	; 0x626a <ldexp+0x26>
    625e:	66 0f       	add	r22, r22
    6260:	77 1f       	adc	r23, r23
    6262:	88 1f       	adc	r24, r24
    6264:	91 50       	subi	r25, 0x01	; 1
    6266:	50 40       	sbci	r21, 0x00	; 0
    6268:	c1 f7       	brne	.-16     	; 0x625a <ldexp+0x16>
    626a:	9e 3f       	cpi	r25, 0xFE	; 254
    626c:	51 05       	cpc	r21, r1
    626e:	44 f7       	brge	.-48     	; 0x6240 <inverse+0xe>
    6270:	88 0f       	add	r24, r24
    6272:	91 1d       	adc	r25, r1
    6274:	96 95       	lsr	r25
    6276:	87 95       	ror	r24
    6278:	97 f9       	bld	r25, 7
    627a:	08 95       	ret
    627c:	5f 3f       	cpi	r21, 0xFF	; 255
    627e:	ac f0       	brlt	.+42     	; 0x62aa <ldexp+0x66>
    6280:	98 3e       	cpi	r25, 0xE8	; 232
    6282:	9c f0       	brlt	.+38     	; 0x62aa <ldexp+0x66>
    6284:	bb 27       	eor	r27, r27
    6286:	86 95       	lsr	r24
    6288:	77 95       	ror	r23
    628a:	67 95       	ror	r22
    628c:	b7 95       	ror	r27
    628e:	08 f4       	brcc	.+2      	; 0x6292 <ldexp+0x4e>
    6290:	b1 60       	ori	r27, 0x01	; 1
    6292:	93 95       	inc	r25
    6294:	c1 f7       	brne	.-16     	; 0x6286 <ldexp+0x42>
    6296:	bb 0f       	add	r27, r27
    6298:	58 f7       	brcc	.-42     	; 0x6270 <ldexp+0x2c>
    629a:	11 f4       	brne	.+4      	; 0x62a0 <ldexp+0x5c>
    629c:	60 ff       	sbrs	r22, 0
    629e:	e8 cf       	rjmp	.-48     	; 0x6270 <ldexp+0x2c>
    62a0:	6f 5f       	subi	r22, 0xFF	; 255
    62a2:	7f 4f       	sbci	r23, 0xFF	; 255
    62a4:	8f 4f       	sbci	r24, 0xFF	; 255
    62a6:	9f 4f       	sbci	r25, 0xFF	; 255
    62a8:	e3 cf       	rjmp	.-58     	; 0x6270 <ldexp+0x2c>
    62aa:	7a ce       	rjmp	.-780    	; 0x5fa0 <__fp_szero>
    62ac:	0e f0       	brts	.+2      	; 0x62b0 <ldexp+0x6c>
    62ae:	76 c0       	rjmp	.+236    	; 0x639c <__fp_mpack>
    62b0:	32 ce       	rjmp	.-924    	; 0x5f16 <__fp_nan>
    62b2:	68 94       	set
    62b4:	2a ce       	rjmp	.-940    	; 0x5f0a <__fp_inf>

000062b6 <log>:
    62b6:	59 de       	rcall	.-846    	; 0x5f6a <__fp_splitA>
    62b8:	c8 f3       	brcs	.-14     	; 0x62ac <ldexp+0x68>
    62ba:	99 23       	and	r25, r25
    62bc:	d1 f3       	breq	.-12     	; 0x62b2 <ldexp+0x6e>
    62be:	c6 f3       	brts	.-16     	; 0x62b0 <ldexp+0x6c>
    62c0:	df 93       	push	r29
    62c2:	cf 93       	push	r28
    62c4:	1f 93       	push	r17
    62c6:	0f 93       	push	r16
    62c8:	ff 92       	push	r15
    62ca:	c9 2f       	mov	r28, r25
    62cc:	dd 27       	eor	r29, r29
    62ce:	88 23       	and	r24, r24
    62d0:	2a f0       	brmi	.+10     	; 0x62dc <log+0x26>
    62d2:	21 97       	sbiw	r28, 0x01	; 1
    62d4:	66 0f       	add	r22, r22
    62d6:	77 1f       	adc	r23, r23
    62d8:	88 1f       	adc	r24, r24
    62da:	da f7       	brpl	.-10     	; 0x62d2 <log+0x1c>
    62dc:	20 e0       	ldi	r18, 0x00	; 0
    62de:	30 e0       	ldi	r19, 0x00	; 0
    62e0:	40 e8       	ldi	r20, 0x80	; 128
    62e2:	5f eb       	ldi	r21, 0xBF	; 191
    62e4:	9f e3       	ldi	r25, 0x3F	; 63
    62e6:	88 39       	cpi	r24, 0x98	; 152
    62e8:	20 f0       	brcs	.+8      	; 0x62f2 <log+0x3c>
    62ea:	80 3e       	cpi	r24, 0xE0	; 224
    62ec:	30 f0       	brcs	.+12     	; 0x62fa <log+0x44>
    62ee:	21 96       	adiw	r28, 0x01	; 1
    62f0:	8f 77       	andi	r24, 0x7F	; 127
    62f2:	a9 dc       	rcall	.-1710   	; 0x5c46 <__addsf3>
    62f4:	e0 ef       	ldi	r30, 0xF0	; 240
    62f6:	f0 e0       	ldi	r31, 0x00	; 0
    62f8:	03 c0       	rjmp	.+6      	; 0x6300 <log+0x4a>
    62fa:	a5 dc       	rcall	.-1718   	; 0x5c46 <__addsf3>
    62fc:	ed e1       	ldi	r30, 0x1D	; 29
    62fe:	f1 e0       	ldi	r31, 0x01	; 1
    6300:	73 df       	rcall	.-282    	; 0x61e8 <__fp_powser>
    6302:	8b 01       	movw	r16, r22
    6304:	be 01       	movw	r22, r28
    6306:	ec 01       	movw	r28, r24
    6308:	fb 2e       	mov	r15, r27
    630a:	6f 57       	subi	r22, 0x7F	; 127
    630c:	71 09       	sbc	r23, r1
    630e:	75 95       	asr	r23
    6310:	77 1f       	adc	r23, r23
    6312:	88 0b       	sbc	r24, r24
    6314:	99 0b       	sbc	r25, r25
    6316:	9a dd       	rcall	.-1228   	; 0x5e4c <__floatsisf>
    6318:	28 e1       	ldi	r18, 0x18	; 24
    631a:	32 e7       	ldi	r19, 0x72	; 114
    631c:	41 e3       	ldi	r20, 0x31	; 49
    631e:	5f e3       	ldi	r21, 0x3F	; 63
    6320:	8f de       	rcall	.-738    	; 0x6040 <__mulsf3x>
    6322:	af 2d       	mov	r26, r15
    6324:	98 01       	movw	r18, r16
    6326:	ae 01       	movw	r20, r28
    6328:	ff 90       	pop	r15
    632a:	0f 91       	pop	r16
    632c:	1f 91       	pop	r17
    632e:	cf 91       	pop	r28
    6330:	df 91       	pop	r29
    6332:	9a dc       	rcall	.-1740   	; 0x5c68 <__addsf3x>
    6334:	01 ce       	rjmp	.-1022   	; 0x5f38 <__fp_round>

00006336 <modf>:
    6336:	fa 01       	movw	r30, r20
    6338:	dc 01       	movw	r26, r24
    633a:	aa 0f       	add	r26, r26
    633c:	bb 1f       	adc	r27, r27
    633e:	9b 01       	movw	r18, r22
    6340:	ac 01       	movw	r20, r24
    6342:	bf 57       	subi	r27, 0x7F	; 127
    6344:	28 f4       	brcc	.+10     	; 0x6350 <modf+0x1a>
    6346:	22 27       	eor	r18, r18
    6348:	33 27       	eor	r19, r19
    634a:	44 27       	eor	r20, r20
    634c:	50 78       	andi	r21, 0x80	; 128
    634e:	1f c0       	rjmp	.+62     	; 0x638e <modf+0x58>
    6350:	b7 51       	subi	r27, 0x17	; 23
    6352:	88 f4       	brcc	.+34     	; 0x6376 <modf+0x40>
    6354:	ab 2f       	mov	r26, r27
    6356:	00 24       	eor	r0, r0
    6358:	46 95       	lsr	r20
    635a:	37 95       	ror	r19
    635c:	27 95       	ror	r18
    635e:	01 1c       	adc	r0, r1
    6360:	a3 95       	inc	r26
    6362:	d2 f3       	brmi	.-12     	; 0x6358 <modf+0x22>
    6364:	00 20       	and	r0, r0
    6366:	69 f0       	breq	.+26     	; 0x6382 <modf+0x4c>
    6368:	22 0f       	add	r18, r18
    636a:	33 1f       	adc	r19, r19
    636c:	44 1f       	adc	r20, r20
    636e:	b3 95       	inc	r27
    6370:	da f3       	brmi	.-10     	; 0x6368 <modf+0x32>
    6372:	0d d0       	rcall	.+26     	; 0x638e <modf+0x58>
    6374:	67 cc       	rjmp	.-1842   	; 0x5c44 <__subsf3>
    6376:	61 30       	cpi	r22, 0x01	; 1
    6378:	71 05       	cpc	r23, r1
    637a:	a0 e8       	ldi	r26, 0x80	; 128
    637c:	8a 07       	cpc	r24, r26
    637e:	b9 46       	sbci	r27, 0x69	; 105
    6380:	30 f4       	brcc	.+12     	; 0x638e <modf+0x58>
    6382:	9b 01       	movw	r18, r22
    6384:	ac 01       	movw	r20, r24
    6386:	66 27       	eor	r22, r22
    6388:	77 27       	eor	r23, r23
    638a:	88 27       	eor	r24, r24
    638c:	90 78       	andi	r25, 0x80	; 128
    638e:	30 96       	adiw	r30, 0x00	; 0
    6390:	21 f0       	breq	.+8      	; 0x639a <modf+0x64>
    6392:	20 83       	st	Z, r18
    6394:	31 83       	std	Z+1, r19	; 0x01
    6396:	42 83       	std	Z+2, r20	; 0x02
    6398:	53 83       	std	Z+3, r21	; 0x03
    639a:	08 95       	ret

0000639c <__fp_mpack>:
    639c:	9f 3f       	cpi	r25, 0xFF	; 255
    639e:	31 f0       	breq	.+12     	; 0x63ac <__fp_mpack_finite+0xc>

000063a0 <__fp_mpack_finite>:
    63a0:	91 50       	subi	r25, 0x01	; 1
    63a2:	20 f4       	brcc	.+8      	; 0x63ac <__fp_mpack_finite+0xc>
    63a4:	87 95       	ror	r24
    63a6:	77 95       	ror	r23
    63a8:	67 95       	ror	r22
    63aa:	b7 95       	ror	r27
    63ac:	88 0f       	add	r24, r24
    63ae:	91 1d       	adc	r25, r1
    63b0:	96 95       	lsr	r25
    63b2:	87 95       	ror	r24
    63b4:	97 f9       	bld	r25, 7
    63b6:	08 95       	ret

000063b8 <vfprintf>:
    63b8:	a1 e1       	ldi	r26, 0x11	; 17
    63ba:	b0 e0       	ldi	r27, 0x00	; 0
    63bc:	e1 ee       	ldi	r30, 0xE1	; 225
    63be:	f1 e3       	ldi	r31, 0x31	; 49
    63c0:	a4 c3       	rjmp	.+1864   	; 0x6b0a <__prologue_saves__>
    63c2:	3c 01       	movw	r6, r24
    63c4:	7f 87       	std	Y+15, r23	; 0x0f
    63c6:	6e 87       	std	Y+14, r22	; 0x0e
    63c8:	6a 01       	movw	r12, r20
    63ca:	fc 01       	movw	r30, r24
    63cc:	17 82       	std	Z+7, r1	; 0x07
    63ce:	16 82       	std	Z+6, r1	; 0x06
    63d0:	83 81       	ldd	r24, Z+3	; 0x03
    63d2:	81 fd       	sbrc	r24, 1
    63d4:	03 c0       	rjmp	.+6      	; 0x63dc <vfprintf+0x24>
    63d6:	6f ef       	ldi	r22, 0xFF	; 255
    63d8:	7f ef       	ldi	r23, 0xFF	; 255
    63da:	52 c3       	rjmp	.+1700   	; 0x6a80 <vfprintf+0x6c8>
    63dc:	9e 01       	movw	r18, r28
    63de:	2f 5f       	subi	r18, 0xFF	; 255
    63e0:	3f 4f       	sbci	r19, 0xFF	; 255
    63e2:	39 8b       	std	Y+17, r19	; 0x11
    63e4:	28 8b       	std	Y+16, r18	; 0x10
    63e6:	f3 01       	movw	r30, r6
    63e8:	23 81       	ldd	r18, Z+3	; 0x03
    63ea:	ee 85       	ldd	r30, Y+14	; 0x0e
    63ec:	ff 85       	ldd	r31, Y+15	; 0x0f
    63ee:	23 fd       	sbrc	r18, 3
    63f0:	85 91       	lpm	r24, Z+
    63f2:	23 ff       	sbrs	r18, 3
    63f4:	81 91       	ld	r24, Z+
    63f6:	ff 87       	std	Y+15, r31	; 0x0f
    63f8:	ee 87       	std	Y+14, r30	; 0x0e
    63fa:	88 23       	and	r24, r24
    63fc:	09 f4       	brne	.+2      	; 0x6400 <vfprintf+0x48>
    63fe:	3d c3       	rjmp	.+1658   	; 0x6a7a <vfprintf+0x6c2>
    6400:	85 32       	cpi	r24, 0x25	; 37
    6402:	51 f4       	brne	.+20     	; 0x6418 <vfprintf+0x60>
    6404:	ee 85       	ldd	r30, Y+14	; 0x0e
    6406:	ff 85       	ldd	r31, Y+15	; 0x0f
    6408:	23 fd       	sbrc	r18, 3
    640a:	85 91       	lpm	r24, Z+
    640c:	23 ff       	sbrs	r18, 3
    640e:	81 91       	ld	r24, Z+
    6410:	ff 87       	std	Y+15, r31	; 0x0f
    6412:	ee 87       	std	Y+14, r30	; 0x0e
    6414:	85 32       	cpi	r24, 0x25	; 37
    6416:	21 f4       	brne	.+8      	; 0x6420 <vfprintf+0x68>
    6418:	90 e0       	ldi	r25, 0x00	; 0
    641a:	b3 01       	movw	r22, r6
    641c:	a0 d5       	rcall	.+2880   	; 0x6f5e <fputc>
    641e:	e3 cf       	rjmp	.-58     	; 0x63e6 <vfprintf+0x2e>
    6420:	98 2f       	mov	r25, r24
    6422:	10 e0       	ldi	r17, 0x00	; 0
    6424:	88 24       	eor	r8, r8
    6426:	99 24       	eor	r9, r9
    6428:	10 32       	cpi	r17, 0x20	; 32
    642a:	b0 f4       	brcc	.+44     	; 0x6458 <vfprintf+0xa0>
    642c:	9b 32       	cpi	r25, 0x2B	; 43
    642e:	69 f0       	breq	.+26     	; 0x644a <vfprintf+0x92>
    6430:	9c 32       	cpi	r25, 0x2C	; 44
    6432:	28 f4       	brcc	.+10     	; 0x643e <vfprintf+0x86>
    6434:	90 32       	cpi	r25, 0x20	; 32
    6436:	51 f0       	breq	.+20     	; 0x644c <vfprintf+0x94>
    6438:	93 32       	cpi	r25, 0x23	; 35
    643a:	71 f4       	brne	.+28     	; 0x6458 <vfprintf+0xa0>
    643c:	0b c0       	rjmp	.+22     	; 0x6454 <vfprintf+0x9c>
    643e:	9d 32       	cpi	r25, 0x2D	; 45
    6440:	39 f0       	breq	.+14     	; 0x6450 <vfprintf+0x98>
    6442:	90 33       	cpi	r25, 0x30	; 48
    6444:	49 f4       	brne	.+18     	; 0x6458 <vfprintf+0xa0>
    6446:	11 60       	ori	r17, 0x01	; 1
    6448:	28 c0       	rjmp	.+80     	; 0x649a <vfprintf+0xe2>
    644a:	12 60       	ori	r17, 0x02	; 2
    644c:	14 60       	ori	r17, 0x04	; 4
    644e:	25 c0       	rjmp	.+74     	; 0x649a <vfprintf+0xe2>
    6450:	18 60       	ori	r17, 0x08	; 8
    6452:	23 c0       	rjmp	.+70     	; 0x649a <vfprintf+0xe2>
    6454:	10 61       	ori	r17, 0x10	; 16
    6456:	21 c0       	rjmp	.+66     	; 0x649a <vfprintf+0xe2>
    6458:	17 fd       	sbrc	r17, 7
    645a:	2a c0       	rjmp	.+84     	; 0x64b0 <vfprintf+0xf8>
    645c:	89 2f       	mov	r24, r25
    645e:	80 53       	subi	r24, 0x30	; 48
    6460:	8a 30       	cpi	r24, 0x0A	; 10
    6462:	78 f4       	brcc	.+30     	; 0x6482 <vfprintf+0xca>
    6464:	16 ff       	sbrs	r17, 6
    6466:	06 c0       	rjmp	.+12     	; 0x6474 <vfprintf+0xbc>
    6468:	fa e0       	ldi	r31, 0x0A	; 10
    646a:	9f 9e       	mul	r9, r31
    646c:	90 2c       	mov	r9, r0
    646e:	11 24       	eor	r1, r1
    6470:	98 0e       	add	r9, r24
    6472:	13 c0       	rjmp	.+38     	; 0x649a <vfprintf+0xe2>
    6474:	3a e0       	ldi	r19, 0x0A	; 10
    6476:	83 9e       	mul	r8, r19
    6478:	80 2c       	mov	r8, r0
    647a:	11 24       	eor	r1, r1
    647c:	88 0e       	add	r8, r24
    647e:	10 62       	ori	r17, 0x20	; 32
    6480:	0c c0       	rjmp	.+24     	; 0x649a <vfprintf+0xe2>
    6482:	9e 32       	cpi	r25, 0x2E	; 46
    6484:	21 f4       	brne	.+8      	; 0x648e <vfprintf+0xd6>
    6486:	16 fd       	sbrc	r17, 6
    6488:	f8 c2       	rjmp	.+1520   	; 0x6a7a <vfprintf+0x6c2>
    648a:	10 64       	ori	r17, 0x40	; 64
    648c:	06 c0       	rjmp	.+12     	; 0x649a <vfprintf+0xe2>
    648e:	9c 36       	cpi	r25, 0x6C	; 108
    6490:	11 f4       	brne	.+4      	; 0x6496 <vfprintf+0xde>
    6492:	10 68       	ori	r17, 0x80	; 128
    6494:	02 c0       	rjmp	.+4      	; 0x649a <vfprintf+0xe2>
    6496:	98 36       	cpi	r25, 0x68	; 104
    6498:	59 f4       	brne	.+22     	; 0x64b0 <vfprintf+0xf8>
    649a:	ee 85       	ldd	r30, Y+14	; 0x0e
    649c:	ff 85       	ldd	r31, Y+15	; 0x0f
    649e:	23 fd       	sbrc	r18, 3
    64a0:	95 91       	lpm	r25, Z+
    64a2:	23 ff       	sbrs	r18, 3
    64a4:	91 91       	ld	r25, Z+
    64a6:	ff 87       	std	Y+15, r31	; 0x0f
    64a8:	ee 87       	std	Y+14, r30	; 0x0e
    64aa:	99 23       	and	r25, r25
    64ac:	09 f0       	breq	.+2      	; 0x64b0 <vfprintf+0xf8>
    64ae:	bc cf       	rjmp	.-136    	; 0x6428 <vfprintf+0x70>
    64b0:	89 2f       	mov	r24, r25
    64b2:	85 54       	subi	r24, 0x45	; 69
    64b4:	83 30       	cpi	r24, 0x03	; 3
    64b6:	20 f4       	brcc	.+8      	; 0x64c0 <vfprintf+0x108>
    64b8:	81 2f       	mov	r24, r17
    64ba:	80 61       	ori	r24, 0x10	; 16
    64bc:	90 5e       	subi	r25, 0xE0	; 224
    64be:	07 c0       	rjmp	.+14     	; 0x64ce <vfprintf+0x116>
    64c0:	89 2f       	mov	r24, r25
    64c2:	85 56       	subi	r24, 0x65	; 101
    64c4:	83 30       	cpi	r24, 0x03	; 3
    64c6:	08 f0       	brcs	.+2      	; 0x64ca <vfprintf+0x112>
    64c8:	8f c1       	rjmp	.+798    	; 0x67e8 <vfprintf+0x430>
    64ca:	81 2f       	mov	r24, r17
    64cc:	8f 7e       	andi	r24, 0xEF	; 239
    64ce:	86 fd       	sbrc	r24, 6
    64d0:	02 c0       	rjmp	.+4      	; 0x64d6 <vfprintf+0x11e>
    64d2:	76 e0       	ldi	r23, 0x06	; 6
    64d4:	97 2e       	mov	r9, r23
    64d6:	6f e3       	ldi	r22, 0x3F	; 63
    64d8:	f6 2e       	mov	r15, r22
    64da:	f8 22       	and	r15, r24
    64dc:	95 36       	cpi	r25, 0x65	; 101
    64de:	19 f4       	brne	.+6      	; 0x64e6 <vfprintf+0x12e>
    64e0:	f0 e4       	ldi	r31, 0x40	; 64
    64e2:	ff 2a       	or	r15, r31
    64e4:	07 c0       	rjmp	.+14     	; 0x64f4 <vfprintf+0x13c>
    64e6:	96 36       	cpi	r25, 0x66	; 102
    64e8:	19 f4       	brne	.+6      	; 0x64f0 <vfprintf+0x138>
    64ea:	20 e8       	ldi	r18, 0x80	; 128
    64ec:	f2 2a       	or	r15, r18
    64ee:	02 c0       	rjmp	.+4      	; 0x64f4 <vfprintf+0x13c>
    64f0:	91 10       	cpse	r9, r1
    64f2:	9a 94       	dec	r9
    64f4:	f7 fe       	sbrs	r15, 7
    64f6:	0a c0       	rjmp	.+20     	; 0x650c <vfprintf+0x154>
    64f8:	3b e3       	ldi	r19, 0x3B	; 59
    64fa:	39 15       	cp	r19, r9
    64fc:	18 f4       	brcc	.+6      	; 0x6504 <vfprintf+0x14c>
    64fe:	5c e3       	ldi	r21, 0x3C	; 60
    6500:	b5 2e       	mov	r11, r21
    6502:	02 c0       	rjmp	.+4      	; 0x6508 <vfprintf+0x150>
    6504:	b9 2c       	mov	r11, r9
    6506:	b3 94       	inc	r11
    6508:	27 e0       	ldi	r18, 0x07	; 7
    650a:	09 c0       	rjmp	.+18     	; 0x651e <vfprintf+0x166>
    650c:	47 e0       	ldi	r20, 0x07	; 7
    650e:	49 15       	cp	r20, r9
    6510:	20 f4       	brcc	.+8      	; 0x651a <vfprintf+0x162>
    6512:	bb 24       	eor	r11, r11
    6514:	47 e0       	ldi	r20, 0x07	; 7
    6516:	94 2e       	mov	r9, r20
    6518:	f7 cf       	rjmp	.-18     	; 0x6508 <vfprintf+0x150>
    651a:	29 2d       	mov	r18, r9
    651c:	bb 24       	eor	r11, r11
    651e:	c6 01       	movw	r24, r12
    6520:	04 96       	adiw	r24, 0x04	; 4
    6522:	9d 87       	std	Y+13, r25	; 0x0d
    6524:	8c 87       	std	Y+12, r24	; 0x0c
    6526:	f6 01       	movw	r30, r12
    6528:	60 81       	ld	r22, Z
    652a:	71 81       	ldd	r23, Z+1	; 0x01
    652c:	82 81       	ldd	r24, Z+2	; 0x02
    652e:	93 81       	ldd	r25, Z+3	; 0x03
    6530:	ae 01       	movw	r20, r28
    6532:	4f 5f       	subi	r20, 0xFF	; 255
    6534:	5f 4f       	sbci	r21, 0xFF	; 255
    6536:	0b 2d       	mov	r16, r11
    6538:	24 d4       	rcall	.+2120   	; 0x6d82 <__ftoa_engine>
    653a:	6c 01       	movw	r12, r24
    653c:	09 81       	ldd	r16, Y+1	; 0x01
    653e:	20 2e       	mov	r2, r16
    6540:	33 24       	eor	r3, r3
    6542:	00 ff       	sbrs	r16, 0
    6544:	04 c0       	rjmp	.+8      	; 0x654e <vfprintf+0x196>
    6546:	03 fd       	sbrc	r16, 3
    6548:	02 c0       	rjmp	.+4      	; 0x654e <vfprintf+0x196>
    654a:	1d e2       	ldi	r17, 0x2D	; 45
    654c:	09 c0       	rjmp	.+18     	; 0x6560 <vfprintf+0x1a8>
    654e:	f1 fe       	sbrs	r15, 1
    6550:	02 c0       	rjmp	.+4      	; 0x6556 <vfprintf+0x19e>
    6552:	1b e2       	ldi	r17, 0x2B	; 43
    6554:	05 c0       	rjmp	.+10     	; 0x6560 <vfprintf+0x1a8>
    6556:	f2 fc       	sbrc	r15, 2
    6558:	02 c0       	rjmp	.+4      	; 0x655e <vfprintf+0x1a6>
    655a:	10 e0       	ldi	r17, 0x00	; 0
    655c:	01 c0       	rjmp	.+2      	; 0x6560 <vfprintf+0x1a8>
    655e:	10 e2       	ldi	r17, 0x20	; 32
    6560:	c1 01       	movw	r24, r2
    6562:	8c 70       	andi	r24, 0x0C	; 12
    6564:	90 70       	andi	r25, 0x00	; 0
    6566:	89 2b       	or	r24, r25
    6568:	a1 f1       	breq	.+104    	; 0x65d2 <vfprintf+0x21a>
    656a:	11 23       	and	r17, r17
    656c:	11 f4       	brne	.+4      	; 0x6572 <vfprintf+0x1ba>
    656e:	83 e0       	ldi	r24, 0x03	; 3
    6570:	01 c0       	rjmp	.+2      	; 0x6574 <vfprintf+0x1bc>
    6572:	84 e0       	ldi	r24, 0x04	; 4
    6574:	88 15       	cp	r24, r8
    6576:	10 f0       	brcs	.+4      	; 0x657c <vfprintf+0x1c4>
    6578:	88 24       	eor	r8, r8
    657a:	09 c0       	rjmp	.+18     	; 0x658e <vfprintf+0x1d6>
    657c:	88 1a       	sub	r8, r24
    657e:	f3 fc       	sbrc	r15, 3
    6580:	06 c0       	rjmp	.+12     	; 0x658e <vfprintf+0x1d6>
    6582:	80 e2       	ldi	r24, 0x20	; 32
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	b3 01       	movw	r22, r6
    6588:	ea d4       	rcall	.+2516   	; 0x6f5e <fputc>
    658a:	8a 94       	dec	r8
    658c:	d1 f7       	brne	.-12     	; 0x6582 <vfprintf+0x1ca>
    658e:	11 23       	and	r17, r17
    6590:	21 f0       	breq	.+8      	; 0x659a <vfprintf+0x1e2>
    6592:	81 2f       	mov	r24, r17
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	b3 01       	movw	r22, r6
    6598:	e2 d4       	rcall	.+2500   	; 0x6f5e <fputc>
    659a:	23 fe       	sbrs	r2, 3
    659c:	03 c0       	rjmp	.+6      	; 0x65a4 <vfprintf+0x1ec>
    659e:	0f e5       	ldi	r16, 0x5F	; 95
    65a0:	15 e0       	ldi	r17, 0x05	; 5
    65a2:	0d c0       	rjmp	.+26     	; 0x65be <vfprintf+0x206>
    65a4:	03 e6       	ldi	r16, 0x63	; 99
    65a6:	15 e0       	ldi	r17, 0x05	; 5
    65a8:	0a c0       	rjmp	.+20     	; 0x65be <vfprintf+0x206>
    65aa:	e1 14       	cp	r14, r1
    65ac:	f1 04       	cpc	r15, r1
    65ae:	09 f0       	breq	.+2      	; 0x65b2 <vfprintf+0x1fa>
    65b0:	80 52       	subi	r24, 0x20	; 32
    65b2:	90 e0       	ldi	r25, 0x00	; 0
    65b4:	b3 01       	movw	r22, r6
    65b6:	d3 d4       	rcall	.+2470   	; 0x6f5e <fputc>
    65b8:	0f 5f       	subi	r16, 0xFF	; 255
    65ba:	1f 4f       	sbci	r17, 0xFF	; 255
    65bc:	05 c0       	rjmp	.+10     	; 0x65c8 <vfprintf+0x210>
    65be:	ef 2c       	mov	r14, r15
    65c0:	ff 24       	eor	r15, r15
    65c2:	f0 e1       	ldi	r31, 0x10	; 16
    65c4:	ef 22       	and	r14, r31
    65c6:	ff 24       	eor	r15, r15
    65c8:	f8 01       	movw	r30, r16
    65ca:	84 91       	lpm	r24, Z+
    65cc:	88 23       	and	r24, r24
    65ce:	69 f7       	brne	.-38     	; 0x65aa <vfprintf+0x1f2>
    65d0:	08 c1       	rjmp	.+528    	; 0x67e2 <vfprintf+0x42a>
    65d2:	f7 fe       	sbrs	r15, 7
    65d4:	12 c0       	rjmp	.+36     	; 0x65fa <vfprintf+0x242>
    65d6:	bc 0c       	add	r11, r12
    65d8:	24 fe       	sbrs	r2, 4
    65da:	04 c0       	rjmp	.+8      	; 0x65e4 <vfprintf+0x22c>
    65dc:	8a 81       	ldd	r24, Y+2	; 0x02
    65de:	81 33       	cpi	r24, 0x31	; 49
    65e0:	09 f4       	brne	.+2      	; 0x65e4 <vfprintf+0x22c>
    65e2:	ba 94       	dec	r11
    65e4:	1b 14       	cp	r1, r11
    65e6:	1c f0       	brlt	.+6      	; 0x65ee <vfprintf+0x236>
    65e8:	bb 24       	eor	r11, r11
    65ea:	b3 94       	inc	r11
    65ec:	2d c0       	rjmp	.+90     	; 0x6648 <vfprintf+0x290>
    65ee:	f8 e0       	ldi	r31, 0x08	; 8
    65f0:	fb 15       	cp	r31, r11
    65f2:	50 f5       	brcc	.+84     	; 0x6648 <vfprintf+0x290>
    65f4:	38 e0       	ldi	r19, 0x08	; 8
    65f6:	b3 2e       	mov	r11, r19
    65f8:	27 c0       	rjmp	.+78     	; 0x6648 <vfprintf+0x290>
    65fa:	f6 fc       	sbrc	r15, 6
    65fc:	25 c0       	rjmp	.+74     	; 0x6648 <vfprintf+0x290>
    65fe:	89 2d       	mov	r24, r9
    6600:	90 e0       	ldi	r25, 0x00	; 0
    6602:	8c 15       	cp	r24, r12
    6604:	9d 05       	cpc	r25, r13
    6606:	4c f0       	brlt	.+18     	; 0x661a <vfprintf+0x262>
    6608:	2c ef       	ldi	r18, 0xFC	; 252
    660a:	c2 16       	cp	r12, r18
    660c:	2f ef       	ldi	r18, 0xFF	; 255
    660e:	d2 06       	cpc	r13, r18
    6610:	24 f0       	brlt	.+8      	; 0x661a <vfprintf+0x262>
    6612:	30 e8       	ldi	r19, 0x80	; 128
    6614:	f3 2a       	or	r15, r19
    6616:	01 c0       	rjmp	.+2      	; 0x661a <vfprintf+0x262>
    6618:	9a 94       	dec	r9
    661a:	99 20       	and	r9, r9
    661c:	49 f0       	breq	.+18     	; 0x6630 <vfprintf+0x278>
    661e:	e2 e0       	ldi	r30, 0x02	; 2
    6620:	f0 e0       	ldi	r31, 0x00	; 0
    6622:	ec 0f       	add	r30, r28
    6624:	fd 1f       	adc	r31, r29
    6626:	e9 0d       	add	r30, r9
    6628:	f1 1d       	adc	r31, r1
    662a:	80 81       	ld	r24, Z
    662c:	80 33       	cpi	r24, 0x30	; 48
    662e:	a1 f3       	breq	.-24     	; 0x6618 <vfprintf+0x260>
    6630:	f7 fe       	sbrs	r15, 7
    6632:	0a c0       	rjmp	.+20     	; 0x6648 <vfprintf+0x290>
    6634:	b9 2c       	mov	r11, r9
    6636:	b3 94       	inc	r11
    6638:	89 2d       	mov	r24, r9
    663a:	90 e0       	ldi	r25, 0x00	; 0
    663c:	c8 16       	cp	r12, r24
    663e:	d9 06       	cpc	r13, r25
    6640:	14 f0       	brlt	.+4      	; 0x6646 <vfprintf+0x28e>
    6642:	99 24       	eor	r9, r9
    6644:	01 c0       	rjmp	.+2      	; 0x6648 <vfprintf+0x290>
    6646:	9c 18       	sub	r9, r12
    6648:	f7 fc       	sbrc	r15, 7
    664a:	03 c0       	rjmp	.+6      	; 0x6652 <vfprintf+0x29a>
    664c:	25 e0       	ldi	r18, 0x05	; 5
    664e:	30 e0       	ldi	r19, 0x00	; 0
    6650:	09 c0       	rjmp	.+18     	; 0x6664 <vfprintf+0x2ac>
    6652:	1c 14       	cp	r1, r12
    6654:	1d 04       	cpc	r1, r13
    6656:	1c f0       	brlt	.+6      	; 0x665e <vfprintf+0x2a6>
    6658:	21 e0       	ldi	r18, 0x01	; 1
    665a:	30 e0       	ldi	r19, 0x00	; 0
    665c:	03 c0       	rjmp	.+6      	; 0x6664 <vfprintf+0x2ac>
    665e:	96 01       	movw	r18, r12
    6660:	2f 5f       	subi	r18, 0xFF	; 255
    6662:	3f 4f       	sbci	r19, 0xFF	; 255
    6664:	11 23       	and	r17, r17
    6666:	11 f0       	breq	.+4      	; 0x666c <vfprintf+0x2b4>
    6668:	2f 5f       	subi	r18, 0xFF	; 255
    666a:	3f 4f       	sbci	r19, 0xFF	; 255
    666c:	99 20       	and	r9, r9
    666e:	29 f0       	breq	.+10     	; 0x667a <vfprintf+0x2c2>
    6670:	89 2d       	mov	r24, r9
    6672:	90 e0       	ldi	r25, 0x00	; 0
    6674:	01 96       	adiw	r24, 0x01	; 1
    6676:	28 0f       	add	r18, r24
    6678:	39 1f       	adc	r19, r25
    667a:	88 2d       	mov	r24, r8
    667c:	90 e0       	ldi	r25, 0x00	; 0
    667e:	28 17       	cp	r18, r24
    6680:	39 07       	cpc	r19, r25
    6682:	14 f0       	brlt	.+4      	; 0x6688 <vfprintf+0x2d0>
    6684:	88 24       	eor	r8, r8
    6686:	01 c0       	rjmp	.+2      	; 0x668a <vfprintf+0x2d2>
    6688:	82 1a       	sub	r8, r18
    668a:	4f 2c       	mov	r4, r15
    668c:	55 24       	eor	r5, r5
    668e:	c2 01       	movw	r24, r4
    6690:	89 70       	andi	r24, 0x09	; 9
    6692:	90 70       	andi	r25, 0x00	; 0
    6694:	89 2b       	or	r24, r25
    6696:	31 f0       	breq	.+12     	; 0x66a4 <vfprintf+0x2ec>
    6698:	07 c0       	rjmp	.+14     	; 0x66a8 <vfprintf+0x2f0>
    669a:	80 e2       	ldi	r24, 0x20	; 32
    669c:	90 e0       	ldi	r25, 0x00	; 0
    669e:	b3 01       	movw	r22, r6
    66a0:	5e d4       	rcall	.+2236   	; 0x6f5e <fputc>
    66a2:	8a 94       	dec	r8
    66a4:	88 20       	and	r8, r8
    66a6:	c9 f7       	brne	.-14     	; 0x669a <vfprintf+0x2e2>
    66a8:	11 23       	and	r17, r17
    66aa:	21 f0       	breq	.+8      	; 0x66b4 <vfprintf+0x2fc>
    66ac:	81 2f       	mov	r24, r17
    66ae:	90 e0       	ldi	r25, 0x00	; 0
    66b0:	b3 01       	movw	r22, r6
    66b2:	55 d4       	rcall	.+2218   	; 0x6f5e <fputc>
    66b4:	43 fe       	sbrs	r4, 3
    66b6:	06 c0       	rjmp	.+12     	; 0x66c4 <vfprintf+0x30c>
    66b8:	07 c0       	rjmp	.+14     	; 0x66c8 <vfprintf+0x310>
    66ba:	80 e3       	ldi	r24, 0x30	; 48
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	b3 01       	movw	r22, r6
    66c0:	4e d4       	rcall	.+2204   	; 0x6f5e <fputc>
    66c2:	8a 94       	dec	r8
    66c4:	88 20       	and	r8, r8
    66c6:	c9 f7       	brne	.-14     	; 0x66ba <vfprintf+0x302>
    66c8:	f7 fe       	sbrs	r15, 7
    66ca:	44 c0       	rjmp	.+136    	; 0x6754 <vfprintf+0x39c>
    66cc:	86 01       	movw	r16, r12
    66ce:	d7 fe       	sbrs	r13, 7
    66d0:	02 c0       	rjmp	.+4      	; 0x66d6 <vfprintf+0x31e>
    66d2:	00 e0       	ldi	r16, 0x00	; 0
    66d4:	10 e0       	ldi	r17, 0x00	; 0
    66d6:	76 01       	movw	r14, r12
    66d8:	08 94       	sec
    66da:	e1 1c       	adc	r14, r1
    66dc:	f1 1c       	adc	r15, r1
    66de:	e0 1a       	sub	r14, r16
    66e0:	f1 0a       	sbc	r15, r17
    66e2:	41 e0       	ldi	r20, 0x01	; 1
    66e4:	50 e0       	ldi	r21, 0x00	; 0
    66e6:	4c 0f       	add	r20, r28
    66e8:	5d 1f       	adc	r21, r29
    66ea:	e4 0e       	add	r14, r20
    66ec:	f5 1e       	adc	r15, r21
    66ee:	26 01       	movw	r4, r12
    66f0:	4b 18       	sub	r4, r11
    66f2:	51 08       	sbc	r5, r1
    66f4:	89 2d       	mov	r24, r9
    66f6:	90 e0       	ldi	r25, 0x00	; 0
    66f8:	aa 24       	eor	r10, r10
    66fa:	bb 24       	eor	r11, r11
    66fc:	a8 1a       	sub	r10, r24
    66fe:	b9 0a       	sbc	r11, r25
    6700:	5f ef       	ldi	r21, 0xFF	; 255
    6702:	0f 3f       	cpi	r16, 0xFF	; 255
    6704:	15 07       	cpc	r17, r21
    6706:	21 f4       	brne	.+8      	; 0x6710 <vfprintf+0x358>
    6708:	8e e2       	ldi	r24, 0x2E	; 46
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	b3 01       	movw	r22, r6
    670e:	27 d4       	rcall	.+2126   	; 0x6f5e <fputc>
    6710:	c0 16       	cp	r12, r16
    6712:	d1 06       	cpc	r13, r17
    6714:	34 f0       	brlt	.+12     	; 0x6722 <vfprintf+0x36a>
    6716:	40 16       	cp	r4, r16
    6718:	51 06       	cpc	r5, r17
    671a:	1c f4       	brge	.+6      	; 0x6722 <vfprintf+0x36a>
    671c:	f7 01       	movw	r30, r14
    671e:	80 81       	ld	r24, Z
    6720:	01 c0       	rjmp	.+2      	; 0x6724 <vfprintf+0x36c>
    6722:	80 e3       	ldi	r24, 0x30	; 48
    6724:	01 50       	subi	r16, 0x01	; 1
    6726:	10 40       	sbci	r17, 0x00	; 0
    6728:	08 94       	sec
    672a:	e1 1c       	adc	r14, r1
    672c:	f1 1c       	adc	r15, r1
    672e:	0a 15       	cp	r16, r10
    6730:	1b 05       	cpc	r17, r11
    6732:	24 f0       	brlt	.+8      	; 0x673c <vfprintf+0x384>
    6734:	90 e0       	ldi	r25, 0x00	; 0
    6736:	b3 01       	movw	r22, r6
    6738:	12 d4       	rcall	.+2084   	; 0x6f5e <fputc>
    673a:	e2 cf       	rjmp	.-60     	; 0x6700 <vfprintf+0x348>
    673c:	0c 15       	cp	r16, r12
    673e:	1d 05       	cpc	r17, r13
    6740:	39 f4       	brne	.+14     	; 0x6750 <vfprintf+0x398>
    6742:	9a 81       	ldd	r25, Y+2	; 0x02
    6744:	96 33       	cpi	r25, 0x36	; 54
    6746:	18 f4       	brcc	.+6      	; 0x674e <vfprintf+0x396>
    6748:	95 33       	cpi	r25, 0x35	; 53
    674a:	11 f4       	brne	.+4      	; 0x6750 <vfprintf+0x398>
    674c:	24 fe       	sbrs	r2, 4
    674e:	81 e3       	ldi	r24, 0x31	; 49
    6750:	90 e0       	ldi	r25, 0x00	; 0
    6752:	45 c0       	rjmp	.+138    	; 0x67de <vfprintf+0x426>
    6754:	8a 81       	ldd	r24, Y+2	; 0x02
    6756:	81 33       	cpi	r24, 0x31	; 49
    6758:	09 f0       	breq	.+2      	; 0x675c <vfprintf+0x3a4>
    675a:	0f 7e       	andi	r16, 0xEF	; 239
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	b3 01       	movw	r22, r6
    6760:	fe d3       	rcall	.+2044   	; 0x6f5e <fputc>
    6762:	99 20       	and	r9, r9
    6764:	91 f0       	breq	.+36     	; 0x678a <vfprintf+0x3d2>
    6766:	8e e2       	ldi	r24, 0x2E	; 46
    6768:	90 e0       	ldi	r25, 0x00	; 0
    676a:	b3 01       	movw	r22, r6
    676c:	f8 d3       	rcall	.+2032   	; 0x6f5e <fputc>
    676e:	12 e0       	ldi	r17, 0x02	; 2
    6770:	e1 e0       	ldi	r30, 0x01	; 1
    6772:	f0 e0       	ldi	r31, 0x00	; 0
    6774:	ec 0f       	add	r30, r28
    6776:	fd 1f       	adc	r31, r29
    6778:	e1 0f       	add	r30, r17
    677a:	f1 1d       	adc	r31, r1
    677c:	1f 5f       	subi	r17, 0xFF	; 255
    677e:	80 81       	ld	r24, Z
    6780:	90 e0       	ldi	r25, 0x00	; 0
    6782:	b3 01       	movw	r22, r6
    6784:	ec d3       	rcall	.+2008   	; 0x6f5e <fputc>
    6786:	9a 94       	dec	r9
    6788:	99 f7       	brne	.-26     	; 0x6770 <vfprintf+0x3b8>
    678a:	44 fc       	sbrc	r4, 4
    678c:	03 c0       	rjmp	.+6      	; 0x6794 <vfprintf+0x3dc>
    678e:	85 e6       	ldi	r24, 0x65	; 101
    6790:	90 e0       	ldi	r25, 0x00	; 0
    6792:	02 c0       	rjmp	.+4      	; 0x6798 <vfprintf+0x3e0>
    6794:	85 e4       	ldi	r24, 0x45	; 69
    6796:	90 e0       	ldi	r25, 0x00	; 0
    6798:	b3 01       	movw	r22, r6
    679a:	e1 d3       	rcall	.+1986   	; 0x6f5e <fputc>
    679c:	d7 fc       	sbrc	r13, 7
    679e:	05 c0       	rjmp	.+10     	; 0x67aa <vfprintf+0x3f2>
    67a0:	c1 14       	cp	r12, r1
    67a2:	d1 04       	cpc	r13, r1
    67a4:	41 f4       	brne	.+16     	; 0x67b6 <vfprintf+0x3fe>
    67a6:	04 ff       	sbrs	r16, 4
    67a8:	06 c0       	rjmp	.+12     	; 0x67b6 <vfprintf+0x3fe>
    67aa:	d0 94       	com	r13
    67ac:	c1 94       	neg	r12
    67ae:	d1 08       	sbc	r13, r1
    67b0:	d3 94       	inc	r13
    67b2:	8d e2       	ldi	r24, 0x2D	; 45
    67b4:	01 c0       	rjmp	.+2      	; 0x67b8 <vfprintf+0x400>
    67b6:	8b e2       	ldi	r24, 0x2B	; 43
    67b8:	90 e0       	ldi	r25, 0x00	; 0
    67ba:	b3 01       	movw	r22, r6
    67bc:	d0 d3       	rcall	.+1952   	; 0x6f5e <fputc>
    67be:	80 e3       	ldi	r24, 0x30	; 48
    67c0:	05 c0       	rjmp	.+10     	; 0x67cc <vfprintf+0x414>
    67c2:	8f 5f       	subi	r24, 0xFF	; 255
    67c4:	26 ef       	ldi	r18, 0xF6	; 246
    67c6:	3f ef       	ldi	r19, 0xFF	; 255
    67c8:	c2 0e       	add	r12, r18
    67ca:	d3 1e       	adc	r13, r19
    67cc:	3a e0       	ldi	r19, 0x0A	; 10
    67ce:	c3 16       	cp	r12, r19
    67d0:	d1 04       	cpc	r13, r1
    67d2:	bc f7       	brge	.-18     	; 0x67c2 <vfprintf+0x40a>
    67d4:	90 e0       	ldi	r25, 0x00	; 0
    67d6:	b3 01       	movw	r22, r6
    67d8:	c2 d3       	rcall	.+1924   	; 0x6f5e <fputc>
    67da:	c6 01       	movw	r24, r12
    67dc:	c0 96       	adiw	r24, 0x30	; 48
    67de:	b3 01       	movw	r22, r6
    67e0:	be d3       	rcall	.+1916   	; 0x6f5e <fputc>
    67e2:	cc 84       	ldd	r12, Y+12	; 0x0c
    67e4:	dd 84       	ldd	r13, Y+13	; 0x0d
    67e6:	46 c1       	rjmp	.+652    	; 0x6a74 <vfprintf+0x6bc>
    67e8:	93 36       	cpi	r25, 0x63	; 99
    67ea:	31 f0       	breq	.+12     	; 0x67f8 <vfprintf+0x440>
    67ec:	93 37       	cpi	r25, 0x73	; 115
    67ee:	99 f0       	breq	.+38     	; 0x6816 <vfprintf+0x45e>
    67f0:	93 35       	cpi	r25, 0x53	; 83
    67f2:	09 f0       	breq	.+2      	; 0x67f6 <vfprintf+0x43e>
    67f4:	55 c0       	rjmp	.+170    	; 0x68a0 <vfprintf+0x4e8>
    67f6:	22 c0       	rjmp	.+68     	; 0x683c <vfprintf+0x484>
    67f8:	f6 01       	movw	r30, r12
    67fa:	80 81       	ld	r24, Z
    67fc:	89 83       	std	Y+1, r24	; 0x01
    67fe:	5e 01       	movw	r10, r28
    6800:	08 94       	sec
    6802:	a1 1c       	adc	r10, r1
    6804:	b1 1c       	adc	r11, r1
    6806:	22 e0       	ldi	r18, 0x02	; 2
    6808:	30 e0       	ldi	r19, 0x00	; 0
    680a:	c2 0e       	add	r12, r18
    680c:	d3 1e       	adc	r13, r19
    680e:	21 e0       	ldi	r18, 0x01	; 1
    6810:	e2 2e       	mov	r14, r18
    6812:	f1 2c       	mov	r15, r1
    6814:	11 c0       	rjmp	.+34     	; 0x6838 <vfprintf+0x480>
    6816:	f6 01       	movw	r30, r12
    6818:	a0 80       	ld	r10, Z
    681a:	b1 80       	ldd	r11, Z+1	; 0x01
    681c:	16 fd       	sbrc	r17, 6
    681e:	03 c0       	rjmp	.+6      	; 0x6826 <vfprintf+0x46e>
    6820:	6f ef       	ldi	r22, 0xFF	; 255
    6822:	7f ef       	ldi	r23, 0xFF	; 255
    6824:	02 c0       	rjmp	.+4      	; 0x682a <vfprintf+0x472>
    6826:	69 2d       	mov	r22, r9
    6828:	70 e0       	ldi	r23, 0x00	; 0
    682a:	22 e0       	ldi	r18, 0x02	; 2
    682c:	30 e0       	ldi	r19, 0x00	; 0
    682e:	c2 0e       	add	r12, r18
    6830:	d3 1e       	adc	r13, r19
    6832:	c5 01       	movw	r24, r10
    6834:	89 d3       	rcall	.+1810   	; 0x6f48 <strnlen>
    6836:	7c 01       	movw	r14, r24
    6838:	1f 77       	andi	r17, 0x7F	; 127
    683a:	12 c0       	rjmp	.+36     	; 0x6860 <vfprintf+0x4a8>
    683c:	f6 01       	movw	r30, r12
    683e:	a0 80       	ld	r10, Z
    6840:	b1 80       	ldd	r11, Z+1	; 0x01
    6842:	16 fd       	sbrc	r17, 6
    6844:	03 c0       	rjmp	.+6      	; 0x684c <vfprintf+0x494>
    6846:	6f ef       	ldi	r22, 0xFF	; 255
    6848:	7f ef       	ldi	r23, 0xFF	; 255
    684a:	02 c0       	rjmp	.+4      	; 0x6850 <vfprintf+0x498>
    684c:	69 2d       	mov	r22, r9
    684e:	70 e0       	ldi	r23, 0x00	; 0
    6850:	22 e0       	ldi	r18, 0x02	; 2
    6852:	30 e0       	ldi	r19, 0x00	; 0
    6854:	c2 0e       	add	r12, r18
    6856:	d3 1e       	adc	r13, r19
    6858:	c5 01       	movw	r24, r10
    685a:	6b d3       	rcall	.+1750   	; 0x6f32 <strnlen_P>
    685c:	7c 01       	movw	r14, r24
    685e:	10 68       	ori	r17, 0x80	; 128
    6860:	13 ff       	sbrs	r17, 3
    6862:	06 c0       	rjmp	.+12     	; 0x6870 <vfprintf+0x4b8>
    6864:	19 c0       	rjmp	.+50     	; 0x6898 <vfprintf+0x4e0>
    6866:	80 e2       	ldi	r24, 0x20	; 32
    6868:	90 e0       	ldi	r25, 0x00	; 0
    686a:	b3 01       	movw	r22, r6
    686c:	78 d3       	rcall	.+1776   	; 0x6f5e <fputc>
    686e:	8a 94       	dec	r8
    6870:	88 2d       	mov	r24, r8
    6872:	90 e0       	ldi	r25, 0x00	; 0
    6874:	e8 16       	cp	r14, r24
    6876:	f9 06       	cpc	r15, r25
    6878:	b0 f3       	brcs	.-20     	; 0x6866 <vfprintf+0x4ae>
    687a:	0e c0       	rjmp	.+28     	; 0x6898 <vfprintf+0x4e0>
    687c:	f5 01       	movw	r30, r10
    687e:	17 fd       	sbrc	r17, 7
    6880:	85 91       	lpm	r24, Z+
    6882:	17 ff       	sbrs	r17, 7
    6884:	81 91       	ld	r24, Z+
    6886:	5f 01       	movw	r10, r30
    6888:	90 e0       	ldi	r25, 0x00	; 0
    688a:	b3 01       	movw	r22, r6
    688c:	68 d3       	rcall	.+1744   	; 0x6f5e <fputc>
    688e:	81 10       	cpse	r8, r1
    6890:	8a 94       	dec	r8
    6892:	08 94       	sec
    6894:	e1 08       	sbc	r14, r1
    6896:	f1 08       	sbc	r15, r1
    6898:	e1 14       	cp	r14, r1
    689a:	f1 04       	cpc	r15, r1
    689c:	79 f7       	brne	.-34     	; 0x687c <vfprintf+0x4c4>
    689e:	ea c0       	rjmp	.+468    	; 0x6a74 <vfprintf+0x6bc>
    68a0:	94 36       	cpi	r25, 0x64	; 100
    68a2:	11 f0       	breq	.+4      	; 0x68a8 <vfprintf+0x4f0>
    68a4:	99 36       	cpi	r25, 0x69	; 105
    68a6:	81 f5       	brne	.+96     	; 0x6908 <vfprintf+0x550>
    68a8:	17 ff       	sbrs	r17, 7
    68aa:	08 c0       	rjmp	.+16     	; 0x68bc <vfprintf+0x504>
    68ac:	f6 01       	movw	r30, r12
    68ae:	20 81       	ld	r18, Z
    68b0:	31 81       	ldd	r19, Z+1	; 0x01
    68b2:	42 81       	ldd	r20, Z+2	; 0x02
    68b4:	53 81       	ldd	r21, Z+3	; 0x03
    68b6:	84 e0       	ldi	r24, 0x04	; 4
    68b8:	90 e0       	ldi	r25, 0x00	; 0
    68ba:	0a c0       	rjmp	.+20     	; 0x68d0 <vfprintf+0x518>
    68bc:	f6 01       	movw	r30, r12
    68be:	80 81       	ld	r24, Z
    68c0:	91 81       	ldd	r25, Z+1	; 0x01
    68c2:	9c 01       	movw	r18, r24
    68c4:	44 27       	eor	r20, r20
    68c6:	37 fd       	sbrc	r19, 7
    68c8:	40 95       	com	r20
    68ca:	54 2f       	mov	r21, r20
    68cc:	82 e0       	ldi	r24, 0x02	; 2
    68ce:	90 e0       	ldi	r25, 0x00	; 0
    68d0:	c8 0e       	add	r12, r24
    68d2:	d9 1e       	adc	r13, r25
    68d4:	9f e6       	ldi	r25, 0x6F	; 111
    68d6:	f9 2e       	mov	r15, r25
    68d8:	f1 22       	and	r15, r17
    68da:	57 ff       	sbrs	r21, 7
    68dc:	09 c0       	rjmp	.+18     	; 0x68f0 <vfprintf+0x538>
    68de:	50 95       	com	r21
    68e0:	40 95       	com	r20
    68e2:	30 95       	com	r19
    68e4:	21 95       	neg	r18
    68e6:	3f 4f       	sbci	r19, 0xFF	; 255
    68e8:	4f 4f       	sbci	r20, 0xFF	; 255
    68ea:	5f 4f       	sbci	r21, 0xFF	; 255
    68ec:	90 e8       	ldi	r25, 0x80	; 128
    68ee:	f9 2a       	or	r15, r25
    68f0:	ca 01       	movw	r24, r20
    68f2:	b9 01       	movw	r22, r18
    68f4:	ae 01       	movw	r20, r28
    68f6:	4f 5f       	subi	r20, 0xFF	; 255
    68f8:	5f 4f       	sbci	r21, 0xFF	; 255
    68fa:	2a e0       	ldi	r18, 0x0A	; 10
    68fc:	30 e0       	ldi	r19, 0x00	; 0
    68fe:	a2 d3       	rcall	.+1860   	; 0x7044 <__ultoa_invert>
    6900:	e8 2e       	mov	r14, r24
    6902:	e8 89       	ldd	r30, Y+16	; 0x10
    6904:	ee 1a       	sub	r14, r30
    6906:	40 c0       	rjmp	.+128    	; 0x6988 <vfprintf+0x5d0>
    6908:	95 37       	cpi	r25, 0x75	; 117
    690a:	21 f4       	brne	.+8      	; 0x6914 <vfprintf+0x55c>
    690c:	1f 7e       	andi	r17, 0xEF	; 239
    690e:	2a e0       	ldi	r18, 0x0A	; 10
    6910:	30 e0       	ldi	r19, 0x00	; 0
    6912:	1c c0       	rjmp	.+56     	; 0x694c <vfprintf+0x594>
    6914:	19 7f       	andi	r17, 0xF9	; 249
    6916:	9f 36       	cpi	r25, 0x6F	; 111
    6918:	61 f0       	breq	.+24     	; 0x6932 <vfprintf+0x57a>
    691a:	90 37       	cpi	r25, 0x70	; 112
    691c:	20 f4       	brcc	.+8      	; 0x6926 <vfprintf+0x56e>
    691e:	98 35       	cpi	r25, 0x58	; 88
    6920:	09 f0       	breq	.+2      	; 0x6924 <vfprintf+0x56c>
    6922:	ab c0       	rjmp	.+342    	; 0x6a7a <vfprintf+0x6c2>
    6924:	0f c0       	rjmp	.+30     	; 0x6944 <vfprintf+0x58c>
    6926:	90 37       	cpi	r25, 0x70	; 112
    6928:	39 f0       	breq	.+14     	; 0x6938 <vfprintf+0x580>
    692a:	98 37       	cpi	r25, 0x78	; 120
    692c:	09 f0       	breq	.+2      	; 0x6930 <vfprintf+0x578>
    692e:	a5 c0       	rjmp	.+330    	; 0x6a7a <vfprintf+0x6c2>
    6930:	04 c0       	rjmp	.+8      	; 0x693a <vfprintf+0x582>
    6932:	28 e0       	ldi	r18, 0x08	; 8
    6934:	30 e0       	ldi	r19, 0x00	; 0
    6936:	0a c0       	rjmp	.+20     	; 0x694c <vfprintf+0x594>
    6938:	10 61       	ori	r17, 0x10	; 16
    693a:	14 fd       	sbrc	r17, 4
    693c:	14 60       	ori	r17, 0x04	; 4
    693e:	20 e1       	ldi	r18, 0x10	; 16
    6940:	30 e0       	ldi	r19, 0x00	; 0
    6942:	04 c0       	rjmp	.+8      	; 0x694c <vfprintf+0x594>
    6944:	14 fd       	sbrc	r17, 4
    6946:	16 60       	ori	r17, 0x06	; 6
    6948:	20 e1       	ldi	r18, 0x10	; 16
    694a:	32 e0       	ldi	r19, 0x02	; 2
    694c:	17 ff       	sbrs	r17, 7
    694e:	08 c0       	rjmp	.+16     	; 0x6960 <vfprintf+0x5a8>
    6950:	f6 01       	movw	r30, r12
    6952:	60 81       	ld	r22, Z
    6954:	71 81       	ldd	r23, Z+1	; 0x01
    6956:	82 81       	ldd	r24, Z+2	; 0x02
    6958:	93 81       	ldd	r25, Z+3	; 0x03
    695a:	44 e0       	ldi	r20, 0x04	; 4
    695c:	50 e0       	ldi	r21, 0x00	; 0
    695e:	08 c0       	rjmp	.+16     	; 0x6970 <vfprintf+0x5b8>
    6960:	f6 01       	movw	r30, r12
    6962:	80 81       	ld	r24, Z
    6964:	91 81       	ldd	r25, Z+1	; 0x01
    6966:	bc 01       	movw	r22, r24
    6968:	80 e0       	ldi	r24, 0x00	; 0
    696a:	90 e0       	ldi	r25, 0x00	; 0
    696c:	42 e0       	ldi	r20, 0x02	; 2
    696e:	50 e0       	ldi	r21, 0x00	; 0
    6970:	c4 0e       	add	r12, r20
    6972:	d5 1e       	adc	r13, r21
    6974:	ae 01       	movw	r20, r28
    6976:	4f 5f       	subi	r20, 0xFF	; 255
    6978:	5f 4f       	sbci	r21, 0xFF	; 255
    697a:	64 d3       	rcall	.+1736   	; 0x7044 <__ultoa_invert>
    697c:	e8 2e       	mov	r14, r24
    697e:	58 89       	ldd	r21, Y+16	; 0x10
    6980:	e5 1a       	sub	r14, r21
    6982:	8f e7       	ldi	r24, 0x7F	; 127
    6984:	f8 2e       	mov	r15, r24
    6986:	f1 22       	and	r15, r17
    6988:	f6 fe       	sbrs	r15, 6
    698a:	0b c0       	rjmp	.+22     	; 0x69a2 <vfprintf+0x5ea>
    698c:	8e ef       	ldi	r24, 0xFE	; 254
    698e:	f8 22       	and	r15, r24
    6990:	e9 14       	cp	r14, r9
    6992:	38 f4       	brcc	.+14     	; 0x69a2 <vfprintf+0x5ea>
    6994:	f4 fe       	sbrs	r15, 4
    6996:	07 c0       	rjmp	.+14     	; 0x69a6 <vfprintf+0x5ee>
    6998:	f2 fc       	sbrc	r15, 2
    699a:	05 c0       	rjmp	.+10     	; 0x69a6 <vfprintf+0x5ee>
    699c:	9f ee       	ldi	r25, 0xEF	; 239
    699e:	f9 22       	and	r15, r25
    69a0:	02 c0       	rjmp	.+4      	; 0x69a6 <vfprintf+0x5ee>
    69a2:	1e 2d       	mov	r17, r14
    69a4:	01 c0       	rjmp	.+2      	; 0x69a8 <vfprintf+0x5f0>
    69a6:	19 2d       	mov	r17, r9
    69a8:	f4 fe       	sbrs	r15, 4
    69aa:	0d c0       	rjmp	.+26     	; 0x69c6 <vfprintf+0x60e>
    69ac:	fe 01       	movw	r30, r28
    69ae:	ee 0d       	add	r30, r14
    69b0:	f1 1d       	adc	r31, r1
    69b2:	80 81       	ld	r24, Z
    69b4:	80 33       	cpi	r24, 0x30	; 48
    69b6:	19 f4       	brne	.+6      	; 0x69be <vfprintf+0x606>
    69b8:	e9 ee       	ldi	r30, 0xE9	; 233
    69ba:	fe 22       	and	r15, r30
    69bc:	08 c0       	rjmp	.+16     	; 0x69ce <vfprintf+0x616>
    69be:	1f 5f       	subi	r17, 0xFF	; 255
    69c0:	f2 fe       	sbrs	r15, 2
    69c2:	05 c0       	rjmp	.+10     	; 0x69ce <vfprintf+0x616>
    69c4:	03 c0       	rjmp	.+6      	; 0x69cc <vfprintf+0x614>
    69c6:	8f 2d       	mov	r24, r15
    69c8:	86 78       	andi	r24, 0x86	; 134
    69ca:	09 f0       	breq	.+2      	; 0x69ce <vfprintf+0x616>
    69cc:	1f 5f       	subi	r17, 0xFF	; 255
    69ce:	0f 2d       	mov	r16, r15
    69d0:	f3 fc       	sbrc	r15, 3
    69d2:	13 c0       	rjmp	.+38     	; 0x69fa <vfprintf+0x642>
    69d4:	f0 fe       	sbrs	r15, 0
    69d6:	0e c0       	rjmp	.+28     	; 0x69f4 <vfprintf+0x63c>
    69d8:	18 15       	cp	r17, r8
    69da:	10 f0       	brcs	.+4      	; 0x69e0 <vfprintf+0x628>
    69dc:	9e 2c       	mov	r9, r14
    69de:	0a c0       	rjmp	.+20     	; 0x69f4 <vfprintf+0x63c>
    69e0:	9e 2c       	mov	r9, r14
    69e2:	98 0c       	add	r9, r8
    69e4:	91 1a       	sub	r9, r17
    69e6:	18 2d       	mov	r17, r8
    69e8:	05 c0       	rjmp	.+10     	; 0x69f4 <vfprintf+0x63c>
    69ea:	80 e2       	ldi	r24, 0x20	; 32
    69ec:	90 e0       	ldi	r25, 0x00	; 0
    69ee:	b3 01       	movw	r22, r6
    69f0:	b6 d2       	rcall	.+1388   	; 0x6f5e <fputc>
    69f2:	1f 5f       	subi	r17, 0xFF	; 255
    69f4:	18 15       	cp	r17, r8
    69f6:	c8 f3       	brcs	.-14     	; 0x69ea <vfprintf+0x632>
    69f8:	04 c0       	rjmp	.+8      	; 0x6a02 <vfprintf+0x64a>
    69fa:	18 15       	cp	r17, r8
    69fc:	10 f4       	brcc	.+4      	; 0x6a02 <vfprintf+0x64a>
    69fe:	81 1a       	sub	r8, r17
    6a00:	01 c0       	rjmp	.+2      	; 0x6a04 <vfprintf+0x64c>
    6a02:	88 24       	eor	r8, r8
    6a04:	04 ff       	sbrs	r16, 4
    6a06:	0e c0       	rjmp	.+28     	; 0x6a24 <vfprintf+0x66c>
    6a08:	80 e3       	ldi	r24, 0x30	; 48
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
    6a0c:	b3 01       	movw	r22, r6
    6a0e:	a7 d2       	rcall	.+1358   	; 0x6f5e <fputc>
    6a10:	02 ff       	sbrs	r16, 2
    6a12:	1b c0       	rjmp	.+54     	; 0x6a4a <vfprintf+0x692>
    6a14:	01 fd       	sbrc	r16, 1
    6a16:	03 c0       	rjmp	.+6      	; 0x6a1e <vfprintf+0x666>
    6a18:	88 e7       	ldi	r24, 0x78	; 120
    6a1a:	90 e0       	ldi	r25, 0x00	; 0
    6a1c:	0e c0       	rjmp	.+28     	; 0x6a3a <vfprintf+0x682>
    6a1e:	88 e5       	ldi	r24, 0x58	; 88
    6a20:	90 e0       	ldi	r25, 0x00	; 0
    6a22:	0b c0       	rjmp	.+22     	; 0x6a3a <vfprintf+0x682>
    6a24:	80 2f       	mov	r24, r16
    6a26:	86 78       	andi	r24, 0x86	; 134
    6a28:	81 f0       	breq	.+32     	; 0x6a4a <vfprintf+0x692>
    6a2a:	01 ff       	sbrs	r16, 1
    6a2c:	02 c0       	rjmp	.+4      	; 0x6a32 <vfprintf+0x67a>
    6a2e:	8b e2       	ldi	r24, 0x2B	; 43
    6a30:	01 c0       	rjmp	.+2      	; 0x6a34 <vfprintf+0x67c>
    6a32:	80 e2       	ldi	r24, 0x20	; 32
    6a34:	f7 fc       	sbrc	r15, 7
    6a36:	8d e2       	ldi	r24, 0x2D	; 45
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	b3 01       	movw	r22, r6
    6a3c:	90 d2       	rcall	.+1312   	; 0x6f5e <fputc>
    6a3e:	05 c0       	rjmp	.+10     	; 0x6a4a <vfprintf+0x692>
    6a40:	80 e3       	ldi	r24, 0x30	; 48
    6a42:	90 e0       	ldi	r25, 0x00	; 0
    6a44:	b3 01       	movw	r22, r6
    6a46:	8b d2       	rcall	.+1302   	; 0x6f5e <fputc>
    6a48:	9a 94       	dec	r9
    6a4a:	e9 14       	cp	r14, r9
    6a4c:	c8 f3       	brcs	.-14     	; 0x6a40 <vfprintf+0x688>
    6a4e:	ea 94       	dec	r14
    6a50:	e1 e0       	ldi	r30, 0x01	; 1
    6a52:	f0 e0       	ldi	r31, 0x00	; 0
    6a54:	ec 0f       	add	r30, r28
    6a56:	fd 1f       	adc	r31, r29
    6a58:	ee 0d       	add	r30, r14
    6a5a:	f1 1d       	adc	r31, r1
    6a5c:	80 81       	ld	r24, Z
    6a5e:	90 e0       	ldi	r25, 0x00	; 0
    6a60:	b3 01       	movw	r22, r6
    6a62:	7d d2       	rcall	.+1274   	; 0x6f5e <fputc>
    6a64:	ee 20       	and	r14, r14
    6a66:	99 f7       	brne	.-26     	; 0x6a4e <vfprintf+0x696>
    6a68:	05 c0       	rjmp	.+10     	; 0x6a74 <vfprintf+0x6bc>
    6a6a:	80 e2       	ldi	r24, 0x20	; 32
    6a6c:	90 e0       	ldi	r25, 0x00	; 0
    6a6e:	b3 01       	movw	r22, r6
    6a70:	76 d2       	rcall	.+1260   	; 0x6f5e <fputc>
    6a72:	8a 94       	dec	r8
    6a74:	88 20       	and	r8, r8
    6a76:	c9 f7       	brne	.-14     	; 0x6a6a <vfprintf+0x6b2>
    6a78:	b6 cc       	rjmp	.-1684   	; 0x63e6 <vfprintf+0x2e>
    6a7a:	f3 01       	movw	r30, r6
    6a7c:	66 81       	ldd	r22, Z+6	; 0x06
    6a7e:	77 81       	ldd	r23, Z+7	; 0x07
    6a80:	cb 01       	movw	r24, r22
    6a82:	61 96       	adiw	r28, 0x11	; 17
    6a84:	e2 e1       	ldi	r30, 0x12	; 18
    6a86:	5d c0       	rjmp	.+186    	; 0x6b42 <__epilogue_restores__>

00006a88 <__mulsi3>:
    6a88:	62 9f       	mul	r22, r18
    6a8a:	d0 01       	movw	r26, r0
    6a8c:	73 9f       	mul	r23, r19
    6a8e:	f0 01       	movw	r30, r0
    6a90:	82 9f       	mul	r24, r18
    6a92:	e0 0d       	add	r30, r0
    6a94:	f1 1d       	adc	r31, r1
    6a96:	64 9f       	mul	r22, r20
    6a98:	e0 0d       	add	r30, r0
    6a9a:	f1 1d       	adc	r31, r1
    6a9c:	92 9f       	mul	r25, r18
    6a9e:	f0 0d       	add	r31, r0
    6aa0:	83 9f       	mul	r24, r19
    6aa2:	f0 0d       	add	r31, r0
    6aa4:	74 9f       	mul	r23, r20
    6aa6:	f0 0d       	add	r31, r0
    6aa8:	65 9f       	mul	r22, r21
    6aaa:	f0 0d       	add	r31, r0
    6aac:	99 27       	eor	r25, r25
    6aae:	72 9f       	mul	r23, r18
    6ab0:	b0 0d       	add	r27, r0
    6ab2:	e1 1d       	adc	r30, r1
    6ab4:	f9 1f       	adc	r31, r25
    6ab6:	63 9f       	mul	r22, r19
    6ab8:	b0 0d       	add	r27, r0
    6aba:	e1 1d       	adc	r30, r1
    6abc:	f9 1f       	adc	r31, r25
    6abe:	bd 01       	movw	r22, r26
    6ac0:	cf 01       	movw	r24, r30
    6ac2:	11 24       	eor	r1, r1
    6ac4:	08 95       	ret

00006ac6 <__udivmodsi4>:
    6ac6:	a1 e2       	ldi	r26, 0x21	; 33
    6ac8:	1a 2e       	mov	r1, r26
    6aca:	aa 1b       	sub	r26, r26
    6acc:	bb 1b       	sub	r27, r27
    6ace:	fd 01       	movw	r30, r26
    6ad0:	0d c0       	rjmp	.+26     	; 0x6aec <__udivmodsi4_ep>

00006ad2 <__udivmodsi4_loop>:
    6ad2:	aa 1f       	adc	r26, r26
    6ad4:	bb 1f       	adc	r27, r27
    6ad6:	ee 1f       	adc	r30, r30
    6ad8:	ff 1f       	adc	r31, r31
    6ada:	a2 17       	cp	r26, r18
    6adc:	b3 07       	cpc	r27, r19
    6ade:	e4 07       	cpc	r30, r20
    6ae0:	f5 07       	cpc	r31, r21
    6ae2:	20 f0       	brcs	.+8      	; 0x6aec <__udivmodsi4_ep>
    6ae4:	a2 1b       	sub	r26, r18
    6ae6:	b3 0b       	sbc	r27, r19
    6ae8:	e4 0b       	sbc	r30, r20
    6aea:	f5 0b       	sbc	r31, r21

00006aec <__udivmodsi4_ep>:
    6aec:	66 1f       	adc	r22, r22
    6aee:	77 1f       	adc	r23, r23
    6af0:	88 1f       	adc	r24, r24
    6af2:	99 1f       	adc	r25, r25
    6af4:	1a 94       	dec	r1
    6af6:	69 f7       	brne	.-38     	; 0x6ad2 <__udivmodsi4_loop>
    6af8:	60 95       	com	r22
    6afa:	70 95       	com	r23
    6afc:	80 95       	com	r24
    6afe:	90 95       	com	r25
    6b00:	9b 01       	movw	r18, r22
    6b02:	ac 01       	movw	r20, r24
    6b04:	bd 01       	movw	r22, r26
    6b06:	cf 01       	movw	r24, r30
    6b08:	08 95       	ret

00006b0a <__prologue_saves__>:
    6b0a:	2f 92       	push	r2
    6b0c:	3f 92       	push	r3
    6b0e:	4f 92       	push	r4
    6b10:	5f 92       	push	r5
    6b12:	6f 92       	push	r6
    6b14:	7f 92       	push	r7
    6b16:	8f 92       	push	r8
    6b18:	9f 92       	push	r9
    6b1a:	af 92       	push	r10
    6b1c:	bf 92       	push	r11
    6b1e:	cf 92       	push	r12
    6b20:	df 92       	push	r13
    6b22:	ef 92       	push	r14
    6b24:	ff 92       	push	r15
    6b26:	0f 93       	push	r16
    6b28:	1f 93       	push	r17
    6b2a:	cf 93       	push	r28
    6b2c:	df 93       	push	r29
    6b2e:	cd b7       	in	r28, 0x3d	; 61
    6b30:	de b7       	in	r29, 0x3e	; 62
    6b32:	ca 1b       	sub	r28, r26
    6b34:	db 0b       	sbc	r29, r27
    6b36:	0f b6       	in	r0, 0x3f	; 63
    6b38:	f8 94       	cli
    6b3a:	de bf       	out	0x3e, r29	; 62
    6b3c:	0f be       	out	0x3f, r0	; 63
    6b3e:	cd bf       	out	0x3d, r28	; 61
    6b40:	09 94       	ijmp

00006b42 <__epilogue_restores__>:
    6b42:	2a 88       	ldd	r2, Y+18	; 0x12
    6b44:	39 88       	ldd	r3, Y+17	; 0x11
    6b46:	48 88       	ldd	r4, Y+16	; 0x10
    6b48:	5f 84       	ldd	r5, Y+15	; 0x0f
    6b4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    6b4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    6b4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6b50:	9b 84       	ldd	r9, Y+11	; 0x0b
    6b52:	aa 84       	ldd	r10, Y+10	; 0x0a
    6b54:	b9 84       	ldd	r11, Y+9	; 0x09
    6b56:	c8 84       	ldd	r12, Y+8	; 0x08
    6b58:	df 80       	ldd	r13, Y+7	; 0x07
    6b5a:	ee 80       	ldd	r14, Y+6	; 0x06
    6b5c:	fd 80       	ldd	r15, Y+5	; 0x05
    6b5e:	0c 81       	ldd	r16, Y+4	; 0x04
    6b60:	1b 81       	ldd	r17, Y+3	; 0x03
    6b62:	aa 81       	ldd	r26, Y+2	; 0x02
    6b64:	b9 81       	ldd	r27, Y+1	; 0x01
    6b66:	ce 0f       	add	r28, r30
    6b68:	d1 1d       	adc	r29, r1
    6b6a:	0f b6       	in	r0, 0x3f	; 63
    6b6c:	f8 94       	cli
    6b6e:	de bf       	out	0x3e, r29	; 62
    6b70:	0f be       	out	0x3f, r0	; 63
    6b72:	cd bf       	out	0x3d, r28	; 61
    6b74:	ed 01       	movw	r28, r26
    6b76:	08 95       	ret

00006b78 <malloc>:
    6b78:	cf 93       	push	r28
    6b7a:	df 93       	push	r29
    6b7c:	bc 01       	movw	r22, r24
    6b7e:	82 30       	cpi	r24, 0x02	; 2
    6b80:	91 05       	cpc	r25, r1
    6b82:	10 f4       	brcc	.+4      	; 0x6b88 <malloc+0x10>
    6b84:	62 e0       	ldi	r22, 0x02	; 2
    6b86:	70 e0       	ldi	r23, 0x00	; 0
    6b88:	a0 91 28 08 	lds	r26, 0x0828
    6b8c:	b0 91 29 08 	lds	r27, 0x0829
    6b90:	ed 01       	movw	r28, r26
    6b92:	e0 e0       	ldi	r30, 0x00	; 0
    6b94:	f0 e0       	ldi	r31, 0x00	; 0
    6b96:	40 e0       	ldi	r20, 0x00	; 0
    6b98:	50 e0       	ldi	r21, 0x00	; 0
    6b9a:	21 c0       	rjmp	.+66     	; 0x6bde <malloc+0x66>
    6b9c:	88 81       	ld	r24, Y
    6b9e:	99 81       	ldd	r25, Y+1	; 0x01
    6ba0:	86 17       	cp	r24, r22
    6ba2:	97 07       	cpc	r25, r23
    6ba4:	69 f4       	brne	.+26     	; 0x6bc0 <malloc+0x48>
    6ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    6ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    6baa:	30 97       	sbiw	r30, 0x00	; 0
    6bac:	19 f0       	breq	.+6      	; 0x6bb4 <malloc+0x3c>
    6bae:	93 83       	std	Z+3, r25	; 0x03
    6bb0:	82 83       	std	Z+2, r24	; 0x02
    6bb2:	04 c0       	rjmp	.+8      	; 0x6bbc <malloc+0x44>
    6bb4:	90 93 29 08 	sts	0x0829, r25
    6bb8:	80 93 28 08 	sts	0x0828, r24
    6bbc:	fe 01       	movw	r30, r28
    6bbe:	34 c0       	rjmp	.+104    	; 0x6c28 <malloc+0xb0>
    6bc0:	68 17       	cp	r22, r24
    6bc2:	79 07       	cpc	r23, r25
    6bc4:	38 f4       	brcc	.+14     	; 0x6bd4 <malloc+0x5c>
    6bc6:	41 15       	cp	r20, r1
    6bc8:	51 05       	cpc	r21, r1
    6bca:	19 f0       	breq	.+6      	; 0x6bd2 <malloc+0x5a>
    6bcc:	84 17       	cp	r24, r20
    6bce:	95 07       	cpc	r25, r21
    6bd0:	08 f4       	brcc	.+2      	; 0x6bd4 <malloc+0x5c>
    6bd2:	ac 01       	movw	r20, r24
    6bd4:	fe 01       	movw	r30, r28
    6bd6:	8a 81       	ldd	r24, Y+2	; 0x02
    6bd8:	9b 81       	ldd	r25, Y+3	; 0x03
    6bda:	9c 01       	movw	r18, r24
    6bdc:	e9 01       	movw	r28, r18
    6bde:	20 97       	sbiw	r28, 0x00	; 0
    6be0:	e9 f6       	brne	.-70     	; 0x6b9c <malloc+0x24>
    6be2:	41 15       	cp	r20, r1
    6be4:	51 05       	cpc	r21, r1
    6be6:	a9 f1       	breq	.+106    	; 0x6c52 <malloc+0xda>
    6be8:	ca 01       	movw	r24, r20
    6bea:	86 1b       	sub	r24, r22
    6bec:	97 0b       	sbc	r25, r23
    6bee:	04 97       	sbiw	r24, 0x04	; 4
    6bf0:	08 f4       	brcc	.+2      	; 0x6bf4 <malloc+0x7c>
    6bf2:	ba 01       	movw	r22, r20
    6bf4:	e0 e0       	ldi	r30, 0x00	; 0
    6bf6:	f0 e0       	ldi	r31, 0x00	; 0
    6bf8:	2a c0       	rjmp	.+84     	; 0x6c4e <malloc+0xd6>
    6bfa:	8d 91       	ld	r24, X+
    6bfc:	9c 91       	ld	r25, X
    6bfe:	11 97       	sbiw	r26, 0x01	; 1
    6c00:	84 17       	cp	r24, r20
    6c02:	95 07       	cpc	r25, r21
    6c04:	f9 f4       	brne	.+62     	; 0x6c44 <malloc+0xcc>
    6c06:	64 17       	cp	r22, r20
    6c08:	75 07       	cpc	r23, r21
    6c0a:	81 f4       	brne	.+32     	; 0x6c2c <malloc+0xb4>
    6c0c:	12 96       	adiw	r26, 0x02	; 2
    6c0e:	8d 91       	ld	r24, X+
    6c10:	9c 91       	ld	r25, X
    6c12:	13 97       	sbiw	r26, 0x03	; 3
    6c14:	30 97       	sbiw	r30, 0x00	; 0
    6c16:	19 f0       	breq	.+6      	; 0x6c1e <malloc+0xa6>
    6c18:	93 83       	std	Z+3, r25	; 0x03
    6c1a:	82 83       	std	Z+2, r24	; 0x02
    6c1c:	04 c0       	rjmp	.+8      	; 0x6c26 <malloc+0xae>
    6c1e:	90 93 29 08 	sts	0x0829, r25
    6c22:	80 93 28 08 	sts	0x0828, r24
    6c26:	fd 01       	movw	r30, r26
    6c28:	32 96       	adiw	r30, 0x02	; 2
    6c2a:	4f c0       	rjmp	.+158    	; 0x6cca <malloc+0x152>
    6c2c:	ca 01       	movw	r24, r20
    6c2e:	86 1b       	sub	r24, r22
    6c30:	97 0b       	sbc	r25, r23
    6c32:	fd 01       	movw	r30, r26
    6c34:	e8 0f       	add	r30, r24
    6c36:	f9 1f       	adc	r31, r25
    6c38:	61 93       	st	Z+, r22
    6c3a:	71 93       	st	Z+, r23
    6c3c:	02 97       	sbiw	r24, 0x02	; 2
    6c3e:	8d 93       	st	X+, r24
    6c40:	9c 93       	st	X, r25
    6c42:	43 c0       	rjmp	.+134    	; 0x6cca <malloc+0x152>
    6c44:	fd 01       	movw	r30, r26
    6c46:	82 81       	ldd	r24, Z+2	; 0x02
    6c48:	93 81       	ldd	r25, Z+3	; 0x03
    6c4a:	9c 01       	movw	r18, r24
    6c4c:	d9 01       	movw	r26, r18
    6c4e:	10 97       	sbiw	r26, 0x00	; 0
    6c50:	a1 f6       	brne	.-88     	; 0x6bfa <malloc+0x82>
    6c52:	80 91 26 08 	lds	r24, 0x0826
    6c56:	90 91 27 08 	lds	r25, 0x0827
    6c5a:	89 2b       	or	r24, r25
    6c5c:	41 f4       	brne	.+16     	; 0x6c6e <malloc+0xf6>
    6c5e:	80 91 54 04 	lds	r24, 0x0454
    6c62:	90 91 55 04 	lds	r25, 0x0455
    6c66:	90 93 27 08 	sts	0x0827, r25
    6c6a:	80 93 26 08 	sts	0x0826, r24
    6c6e:	40 91 56 04 	lds	r20, 0x0456
    6c72:	50 91 57 04 	lds	r21, 0x0457
    6c76:	41 15       	cp	r20, r1
    6c78:	51 05       	cpc	r21, r1
    6c7a:	41 f4       	brne	.+16     	; 0x6c8c <malloc+0x114>
    6c7c:	4d b7       	in	r20, 0x3d	; 61
    6c7e:	5e b7       	in	r21, 0x3e	; 62
    6c80:	80 91 52 04 	lds	r24, 0x0452
    6c84:	90 91 53 04 	lds	r25, 0x0453
    6c88:	48 1b       	sub	r20, r24
    6c8a:	59 0b       	sbc	r21, r25
    6c8c:	20 91 26 08 	lds	r18, 0x0826
    6c90:	30 91 27 08 	lds	r19, 0x0827
    6c94:	24 17       	cp	r18, r20
    6c96:	35 07       	cpc	r19, r21
    6c98:	b0 f4       	brcc	.+44     	; 0x6cc6 <malloc+0x14e>
    6c9a:	ca 01       	movw	r24, r20
    6c9c:	82 1b       	sub	r24, r18
    6c9e:	93 0b       	sbc	r25, r19
    6ca0:	86 17       	cp	r24, r22
    6ca2:	97 07       	cpc	r25, r23
    6ca4:	80 f0       	brcs	.+32     	; 0x6cc6 <malloc+0x14e>
    6ca6:	ab 01       	movw	r20, r22
    6ca8:	4e 5f       	subi	r20, 0xFE	; 254
    6caa:	5f 4f       	sbci	r21, 0xFF	; 255
    6cac:	84 17       	cp	r24, r20
    6cae:	95 07       	cpc	r25, r21
    6cb0:	50 f0       	brcs	.+20     	; 0x6cc6 <malloc+0x14e>
    6cb2:	42 0f       	add	r20, r18
    6cb4:	53 1f       	adc	r21, r19
    6cb6:	50 93 27 08 	sts	0x0827, r21
    6cba:	40 93 26 08 	sts	0x0826, r20
    6cbe:	f9 01       	movw	r30, r18
    6cc0:	61 93       	st	Z+, r22
    6cc2:	71 93       	st	Z+, r23
    6cc4:	02 c0       	rjmp	.+4      	; 0x6cca <malloc+0x152>
    6cc6:	e0 e0       	ldi	r30, 0x00	; 0
    6cc8:	f0 e0       	ldi	r31, 0x00	; 0
    6cca:	cf 01       	movw	r24, r30
    6ccc:	df 91       	pop	r29
    6cce:	cf 91       	pop	r28
    6cd0:	08 95       	ret

00006cd2 <free>:
    6cd2:	cf 93       	push	r28
    6cd4:	df 93       	push	r29
    6cd6:	00 97       	sbiw	r24, 0x00	; 0
    6cd8:	09 f4       	brne	.+2      	; 0x6cdc <free+0xa>
    6cda:	50 c0       	rjmp	.+160    	; 0x6d7c <free+0xaa>
    6cdc:	ec 01       	movw	r28, r24
    6cde:	22 97       	sbiw	r28, 0x02	; 2
    6ce0:	1b 82       	std	Y+3, r1	; 0x03
    6ce2:	1a 82       	std	Y+2, r1	; 0x02
    6ce4:	a0 91 28 08 	lds	r26, 0x0828
    6ce8:	b0 91 29 08 	lds	r27, 0x0829
    6cec:	10 97       	sbiw	r26, 0x00	; 0
    6cee:	09 f1       	breq	.+66     	; 0x6d32 <free+0x60>
    6cf0:	40 e0       	ldi	r20, 0x00	; 0
    6cf2:	50 e0       	ldi	r21, 0x00	; 0
    6cf4:	ac 17       	cp	r26, r28
    6cf6:	bd 07       	cpc	r27, r29
    6cf8:	08 f1       	brcs	.+66     	; 0x6d3c <free+0x6a>
    6cfa:	bb 83       	std	Y+3, r27	; 0x03
    6cfc:	aa 83       	std	Y+2, r26	; 0x02
    6cfe:	fe 01       	movw	r30, r28
    6d00:	21 91       	ld	r18, Z+
    6d02:	31 91       	ld	r19, Z+
    6d04:	e2 0f       	add	r30, r18
    6d06:	f3 1f       	adc	r31, r19
    6d08:	ae 17       	cp	r26, r30
    6d0a:	bf 07       	cpc	r27, r31
    6d0c:	79 f4       	brne	.+30     	; 0x6d2c <free+0x5a>
    6d0e:	8d 91       	ld	r24, X+
    6d10:	9c 91       	ld	r25, X
    6d12:	11 97       	sbiw	r26, 0x01	; 1
    6d14:	28 0f       	add	r18, r24
    6d16:	39 1f       	adc	r19, r25
    6d18:	2e 5f       	subi	r18, 0xFE	; 254
    6d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    6d1c:	39 83       	std	Y+1, r19	; 0x01
    6d1e:	28 83       	st	Y, r18
    6d20:	12 96       	adiw	r26, 0x02	; 2
    6d22:	8d 91       	ld	r24, X+
    6d24:	9c 91       	ld	r25, X
    6d26:	13 97       	sbiw	r26, 0x03	; 3
    6d28:	9b 83       	std	Y+3, r25	; 0x03
    6d2a:	8a 83       	std	Y+2, r24	; 0x02
    6d2c:	41 15       	cp	r20, r1
    6d2e:	51 05       	cpc	r21, r1
    6d30:	71 f4       	brne	.+28     	; 0x6d4e <free+0x7c>
    6d32:	d0 93 29 08 	sts	0x0829, r29
    6d36:	c0 93 28 08 	sts	0x0828, r28
    6d3a:	20 c0       	rjmp	.+64     	; 0x6d7c <free+0xaa>
    6d3c:	12 96       	adiw	r26, 0x02	; 2
    6d3e:	8d 91       	ld	r24, X+
    6d40:	9c 91       	ld	r25, X
    6d42:	13 97       	sbiw	r26, 0x03	; 3
    6d44:	ad 01       	movw	r20, r26
    6d46:	00 97       	sbiw	r24, 0x00	; 0
    6d48:	11 f0       	breq	.+4      	; 0x6d4e <free+0x7c>
    6d4a:	dc 01       	movw	r26, r24
    6d4c:	d3 cf       	rjmp	.-90     	; 0x6cf4 <free+0x22>
    6d4e:	fa 01       	movw	r30, r20
    6d50:	d3 83       	std	Z+3, r29	; 0x03
    6d52:	c2 83       	std	Z+2, r28	; 0x02
    6d54:	21 91       	ld	r18, Z+
    6d56:	31 91       	ld	r19, Z+
    6d58:	e2 0f       	add	r30, r18
    6d5a:	f3 1f       	adc	r31, r19
    6d5c:	ce 17       	cp	r28, r30
    6d5e:	df 07       	cpc	r29, r31
    6d60:	69 f4       	brne	.+26     	; 0x6d7c <free+0xaa>
    6d62:	88 81       	ld	r24, Y
    6d64:	99 81       	ldd	r25, Y+1	; 0x01
    6d66:	28 0f       	add	r18, r24
    6d68:	39 1f       	adc	r19, r25
    6d6a:	2e 5f       	subi	r18, 0xFE	; 254
    6d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d6e:	fa 01       	movw	r30, r20
    6d70:	31 83       	std	Z+1, r19	; 0x01
    6d72:	20 83       	st	Z, r18
    6d74:	8a 81       	ldd	r24, Y+2	; 0x02
    6d76:	9b 81       	ldd	r25, Y+3	; 0x03
    6d78:	93 83       	std	Z+3, r25	; 0x03
    6d7a:	82 83       	std	Z+2, r24	; 0x02
    6d7c:	df 91       	pop	r29
    6d7e:	cf 91       	pop	r28
    6d80:	08 95       	ret

00006d82 <__ftoa_engine>:
    6d82:	28 30       	cpi	r18, 0x08	; 8
    6d84:	08 f0       	brcs	.+2      	; 0x6d88 <__ftoa_engine+0x6>
    6d86:	27 e0       	ldi	r18, 0x07	; 7
    6d88:	33 27       	eor	r19, r19
    6d8a:	da 01       	movw	r26, r20
    6d8c:	99 0f       	add	r25, r25
    6d8e:	31 1d       	adc	r19, r1
    6d90:	87 fd       	sbrc	r24, 7
    6d92:	91 60       	ori	r25, 0x01	; 1
    6d94:	00 96       	adiw	r24, 0x00	; 0
    6d96:	61 05       	cpc	r22, r1
    6d98:	71 05       	cpc	r23, r1
    6d9a:	39 f4       	brne	.+14     	; 0x6daa <__ftoa_engine+0x28>
    6d9c:	32 60       	ori	r19, 0x02	; 2
    6d9e:	2e 5f       	subi	r18, 0xFE	; 254
    6da0:	3d 93       	st	X+, r19
    6da2:	30 e3       	ldi	r19, 0x30	; 48
    6da4:	2a 95       	dec	r18
    6da6:	e1 f7       	brne	.-8      	; 0x6da0 <__ftoa_engine+0x1e>
    6da8:	08 95       	ret
    6daa:	9f 3f       	cpi	r25, 0xFF	; 255
    6dac:	30 f0       	brcs	.+12     	; 0x6dba <__ftoa_engine+0x38>
    6dae:	80 38       	cpi	r24, 0x80	; 128
    6db0:	71 05       	cpc	r23, r1
    6db2:	61 05       	cpc	r22, r1
    6db4:	09 f0       	breq	.+2      	; 0x6db8 <__ftoa_engine+0x36>
    6db6:	3c 5f       	subi	r19, 0xFC	; 252
    6db8:	3c 5f       	subi	r19, 0xFC	; 252
    6dba:	3d 93       	st	X+, r19
    6dbc:	91 30       	cpi	r25, 0x01	; 1
    6dbe:	08 f0       	brcs	.+2      	; 0x6dc2 <__ftoa_engine+0x40>
    6dc0:	80 68       	ori	r24, 0x80	; 128
    6dc2:	91 1d       	adc	r25, r1
    6dc4:	df 93       	push	r29
    6dc6:	cf 93       	push	r28
    6dc8:	1f 93       	push	r17
    6dca:	0f 93       	push	r16
    6dcc:	ff 92       	push	r15
    6dce:	ef 92       	push	r14
    6dd0:	19 2f       	mov	r17, r25
    6dd2:	98 7f       	andi	r25, 0xF8	; 248
    6dd4:	96 95       	lsr	r25
    6dd6:	e9 2f       	mov	r30, r25
    6dd8:	96 95       	lsr	r25
    6dda:	96 95       	lsr	r25
    6ddc:	e9 0f       	add	r30, r25
    6dde:	ff 27       	eor	r31, r31
    6de0:	ef 53       	subi	r30, 0x3F	; 63
    6de2:	fa 4f       	sbci	r31, 0xFA	; 250
    6de4:	99 27       	eor	r25, r25
    6de6:	33 27       	eor	r19, r19
    6de8:	ee 24       	eor	r14, r14
    6dea:	ff 24       	eor	r15, r15
    6dec:	a7 01       	movw	r20, r14
    6dee:	e7 01       	movw	r28, r14
    6df0:	05 90       	lpm	r0, Z+
    6df2:	08 94       	sec
    6df4:	07 94       	ror	r0
    6df6:	28 f4       	brcc	.+10     	; 0x6e02 <__ftoa_engine+0x80>
    6df8:	36 0f       	add	r19, r22
    6dfa:	e7 1e       	adc	r14, r23
    6dfc:	f8 1e       	adc	r15, r24
    6dfe:	49 1f       	adc	r20, r25
    6e00:	51 1d       	adc	r21, r1
    6e02:	66 0f       	add	r22, r22
    6e04:	77 1f       	adc	r23, r23
    6e06:	88 1f       	adc	r24, r24
    6e08:	99 1f       	adc	r25, r25
    6e0a:	06 94       	lsr	r0
    6e0c:	a1 f7       	brne	.-24     	; 0x6df6 <__ftoa_engine+0x74>
    6e0e:	05 90       	lpm	r0, Z+
    6e10:	07 94       	ror	r0
    6e12:	28 f4       	brcc	.+10     	; 0x6e1e <__ftoa_engine+0x9c>
    6e14:	e7 0e       	add	r14, r23
    6e16:	f8 1e       	adc	r15, r24
    6e18:	49 1f       	adc	r20, r25
    6e1a:	56 1f       	adc	r21, r22
    6e1c:	c1 1d       	adc	r28, r1
    6e1e:	77 0f       	add	r23, r23
    6e20:	88 1f       	adc	r24, r24
    6e22:	99 1f       	adc	r25, r25
    6e24:	66 1f       	adc	r22, r22
    6e26:	06 94       	lsr	r0
    6e28:	a1 f7       	brne	.-24     	; 0x6e12 <__ftoa_engine+0x90>
    6e2a:	05 90       	lpm	r0, Z+
    6e2c:	07 94       	ror	r0
    6e2e:	28 f4       	brcc	.+10     	; 0x6e3a <__ftoa_engine+0xb8>
    6e30:	f8 0e       	add	r15, r24
    6e32:	49 1f       	adc	r20, r25
    6e34:	56 1f       	adc	r21, r22
    6e36:	c7 1f       	adc	r28, r23
    6e38:	d1 1d       	adc	r29, r1
    6e3a:	88 0f       	add	r24, r24
    6e3c:	99 1f       	adc	r25, r25
    6e3e:	66 1f       	adc	r22, r22
    6e40:	77 1f       	adc	r23, r23
    6e42:	06 94       	lsr	r0
    6e44:	a1 f7       	brne	.-24     	; 0x6e2e <__ftoa_engine+0xac>
    6e46:	05 90       	lpm	r0, Z+
    6e48:	07 94       	ror	r0
    6e4a:	20 f4       	brcc	.+8      	; 0x6e54 <__ftoa_engine+0xd2>
    6e4c:	49 0f       	add	r20, r25
    6e4e:	56 1f       	adc	r21, r22
    6e50:	c7 1f       	adc	r28, r23
    6e52:	d8 1f       	adc	r29, r24
    6e54:	99 0f       	add	r25, r25
    6e56:	66 1f       	adc	r22, r22
    6e58:	77 1f       	adc	r23, r23
    6e5a:	88 1f       	adc	r24, r24
    6e5c:	06 94       	lsr	r0
    6e5e:	a9 f7       	brne	.-22     	; 0x6e4a <__ftoa_engine+0xc8>
    6e60:	84 91       	lpm	r24, Z+
    6e62:	10 95       	com	r17
    6e64:	17 70       	andi	r17, 0x07	; 7
    6e66:	41 f0       	breq	.+16     	; 0x6e78 <__ftoa_engine+0xf6>
    6e68:	d6 95       	lsr	r29
    6e6a:	c7 95       	ror	r28
    6e6c:	57 95       	ror	r21
    6e6e:	47 95       	ror	r20
    6e70:	f7 94       	ror	r15
    6e72:	e7 94       	ror	r14
    6e74:	1a 95       	dec	r17
    6e76:	c1 f7       	brne	.-16     	; 0x6e68 <__ftoa_engine+0xe6>
    6e78:	e7 e6       	ldi	r30, 0x67	; 103
    6e7a:	f5 e0       	ldi	r31, 0x05	; 5
    6e7c:	68 94       	set
    6e7e:	15 90       	lpm	r1, Z+
    6e80:	15 91       	lpm	r17, Z+
    6e82:	35 91       	lpm	r19, Z+
    6e84:	65 91       	lpm	r22, Z+
    6e86:	95 91       	lpm	r25, Z+
    6e88:	05 90       	lpm	r0, Z+
    6e8a:	7f e2       	ldi	r23, 0x2F	; 47
    6e8c:	73 95       	inc	r23
    6e8e:	e1 18       	sub	r14, r1
    6e90:	f1 0a       	sbc	r15, r17
    6e92:	43 0b       	sbc	r20, r19
    6e94:	56 0b       	sbc	r21, r22
    6e96:	c9 0b       	sbc	r28, r25
    6e98:	d0 09       	sbc	r29, r0
    6e9a:	c0 f7       	brcc	.-16     	; 0x6e8c <__ftoa_engine+0x10a>
    6e9c:	e1 0c       	add	r14, r1
    6e9e:	f1 1e       	adc	r15, r17
    6ea0:	43 1f       	adc	r20, r19
    6ea2:	56 1f       	adc	r21, r22
    6ea4:	c9 1f       	adc	r28, r25
    6ea6:	d0 1d       	adc	r29, r0
    6ea8:	7e f4       	brtc	.+30     	; 0x6ec8 <__ftoa_engine+0x146>
    6eaa:	70 33       	cpi	r23, 0x30	; 48
    6eac:	11 f4       	brne	.+4      	; 0x6eb2 <__ftoa_engine+0x130>
    6eae:	8a 95       	dec	r24
    6eb0:	e6 cf       	rjmp	.-52     	; 0x6e7e <__ftoa_engine+0xfc>
    6eb2:	e8 94       	clt
    6eb4:	01 50       	subi	r16, 0x01	; 1
    6eb6:	30 f0       	brcs	.+12     	; 0x6ec4 <__ftoa_engine+0x142>
    6eb8:	08 0f       	add	r16, r24
    6eba:	0a f4       	brpl	.+2      	; 0x6ebe <__ftoa_engine+0x13c>
    6ebc:	00 27       	eor	r16, r16
    6ebe:	02 17       	cp	r16, r18
    6ec0:	08 f4       	brcc	.+2      	; 0x6ec4 <__ftoa_engine+0x142>
    6ec2:	20 2f       	mov	r18, r16
    6ec4:	23 95       	inc	r18
    6ec6:	02 2f       	mov	r16, r18
    6ec8:	7a 33       	cpi	r23, 0x3A	; 58
    6eca:	28 f0       	brcs	.+10     	; 0x6ed6 <__ftoa_engine+0x154>
    6ecc:	79 e3       	ldi	r23, 0x39	; 57
    6ece:	7d 93       	st	X+, r23
    6ed0:	2a 95       	dec	r18
    6ed2:	e9 f7       	brne	.-6      	; 0x6ece <__ftoa_engine+0x14c>
    6ed4:	10 c0       	rjmp	.+32     	; 0x6ef6 <__ftoa_engine+0x174>
    6ed6:	7d 93       	st	X+, r23
    6ed8:	2a 95       	dec	r18
    6eda:	89 f6       	brne	.-94     	; 0x6e7e <__ftoa_engine+0xfc>
    6edc:	06 94       	lsr	r0
    6ede:	97 95       	ror	r25
    6ee0:	67 95       	ror	r22
    6ee2:	37 95       	ror	r19
    6ee4:	17 95       	ror	r17
    6ee6:	17 94       	ror	r1
    6ee8:	e1 18       	sub	r14, r1
    6eea:	f1 0a       	sbc	r15, r17
    6eec:	43 0b       	sbc	r20, r19
    6eee:	56 0b       	sbc	r21, r22
    6ef0:	c9 0b       	sbc	r28, r25
    6ef2:	d0 09       	sbc	r29, r0
    6ef4:	98 f0       	brcs	.+38     	; 0x6f1c <__ftoa_engine+0x19a>
    6ef6:	23 95       	inc	r18
    6ef8:	7e 91       	ld	r23, -X
    6efa:	73 95       	inc	r23
    6efc:	7a 33       	cpi	r23, 0x3A	; 58
    6efe:	08 f0       	brcs	.+2      	; 0x6f02 <__ftoa_engine+0x180>
    6f00:	70 e3       	ldi	r23, 0x30	; 48
    6f02:	7c 93       	st	X, r23
    6f04:	20 13       	cpse	r18, r16
    6f06:	b8 f7       	brcc	.-18     	; 0x6ef6 <__ftoa_engine+0x174>
    6f08:	7e 91       	ld	r23, -X
    6f0a:	70 61       	ori	r23, 0x10	; 16
    6f0c:	7d 93       	st	X+, r23
    6f0e:	30 f0       	brcs	.+12     	; 0x6f1c <__ftoa_engine+0x19a>
    6f10:	83 95       	inc	r24
    6f12:	71 e3       	ldi	r23, 0x31	; 49
    6f14:	7d 93       	st	X+, r23
    6f16:	70 e3       	ldi	r23, 0x30	; 48
    6f18:	2a 95       	dec	r18
    6f1a:	e1 f7       	brne	.-8      	; 0x6f14 <__ftoa_engine+0x192>
    6f1c:	11 24       	eor	r1, r1
    6f1e:	ef 90       	pop	r14
    6f20:	ff 90       	pop	r15
    6f22:	0f 91       	pop	r16
    6f24:	1f 91       	pop	r17
    6f26:	cf 91       	pop	r28
    6f28:	df 91       	pop	r29
    6f2a:	99 27       	eor	r25, r25
    6f2c:	87 fd       	sbrc	r24, 7
    6f2e:	90 95       	com	r25
    6f30:	08 95       	ret

00006f32 <strnlen_P>:
    6f32:	fc 01       	movw	r30, r24
    6f34:	05 90       	lpm	r0, Z+
    6f36:	61 50       	subi	r22, 0x01	; 1
    6f38:	70 40       	sbci	r23, 0x00	; 0
    6f3a:	01 10       	cpse	r0, r1
    6f3c:	d8 f7       	brcc	.-10     	; 0x6f34 <strnlen_P+0x2>
    6f3e:	80 95       	com	r24
    6f40:	90 95       	com	r25
    6f42:	8e 0f       	add	r24, r30
    6f44:	9f 1f       	adc	r25, r31
    6f46:	08 95       	ret

00006f48 <strnlen>:
    6f48:	fc 01       	movw	r30, r24
    6f4a:	61 50       	subi	r22, 0x01	; 1
    6f4c:	70 40       	sbci	r23, 0x00	; 0
    6f4e:	01 90       	ld	r0, Z+
    6f50:	01 10       	cpse	r0, r1
    6f52:	d8 f7       	brcc	.-10     	; 0x6f4a <strnlen+0x2>
    6f54:	80 95       	com	r24
    6f56:	90 95       	com	r25
    6f58:	8e 0f       	add	r24, r30
    6f5a:	9f 1f       	adc	r25, r31
    6f5c:	08 95       	ret

00006f5e <fputc>:
    6f5e:	0f 93       	push	r16
    6f60:	1f 93       	push	r17
    6f62:	cf 93       	push	r28
    6f64:	df 93       	push	r29
    6f66:	8c 01       	movw	r16, r24
    6f68:	eb 01       	movw	r28, r22
    6f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    6f6c:	81 ff       	sbrs	r24, 1
    6f6e:	1b c0       	rjmp	.+54     	; 0x6fa6 <fputc+0x48>
    6f70:	82 ff       	sbrs	r24, 2
    6f72:	0d c0       	rjmp	.+26     	; 0x6f8e <fputc+0x30>
    6f74:	2e 81       	ldd	r18, Y+6	; 0x06
    6f76:	3f 81       	ldd	r19, Y+7	; 0x07
    6f78:	8c 81       	ldd	r24, Y+4	; 0x04
    6f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    6f7c:	28 17       	cp	r18, r24
    6f7e:	39 07       	cpc	r19, r25
    6f80:	64 f4       	brge	.+24     	; 0x6f9a <fputc+0x3c>
    6f82:	e8 81       	ld	r30, Y
    6f84:	f9 81       	ldd	r31, Y+1	; 0x01
    6f86:	01 93       	st	Z+, r16
    6f88:	f9 83       	std	Y+1, r31	; 0x01
    6f8a:	e8 83       	st	Y, r30
    6f8c:	06 c0       	rjmp	.+12     	; 0x6f9a <fputc+0x3c>
    6f8e:	e8 85       	ldd	r30, Y+8	; 0x08
    6f90:	f9 85       	ldd	r31, Y+9	; 0x09
    6f92:	80 2f       	mov	r24, r16
    6f94:	09 95       	icall
    6f96:	89 2b       	or	r24, r25
    6f98:	31 f4       	brne	.+12     	; 0x6fa6 <fputc+0x48>
    6f9a:	8e 81       	ldd	r24, Y+6	; 0x06
    6f9c:	9f 81       	ldd	r25, Y+7	; 0x07
    6f9e:	01 96       	adiw	r24, 0x01	; 1
    6fa0:	9f 83       	std	Y+7, r25	; 0x07
    6fa2:	8e 83       	std	Y+6, r24	; 0x06
    6fa4:	02 c0       	rjmp	.+4      	; 0x6faa <fputc+0x4c>
    6fa6:	0f ef       	ldi	r16, 0xFF	; 255
    6fa8:	1f ef       	ldi	r17, 0xFF	; 255
    6faa:	c8 01       	movw	r24, r16
    6fac:	df 91       	pop	r29
    6fae:	cf 91       	pop	r28
    6fb0:	1f 91       	pop	r17
    6fb2:	0f 91       	pop	r16
    6fb4:	08 95       	ret

00006fb6 <printf>:
    6fb6:	a0 e0       	ldi	r26, 0x00	; 0
    6fb8:	b0 e0       	ldi	r27, 0x00	; 0
    6fba:	e0 ee       	ldi	r30, 0xE0	; 224
    6fbc:	f7 e3       	ldi	r31, 0x37	; 55
    6fbe:	b5 cd       	rjmp	.-1174   	; 0x6b2a <__prologue_saves__+0x20>
    6fc0:	fe 01       	movw	r30, r28
    6fc2:	35 96       	adiw	r30, 0x05	; 5
    6fc4:	61 91       	ld	r22, Z+
    6fc6:	71 91       	ld	r23, Z+
    6fc8:	80 91 2c 08 	lds	r24, 0x082C
    6fcc:	90 91 2d 08 	lds	r25, 0x082D
    6fd0:	af 01       	movw	r20, r30
    6fd2:	f2 d9       	rcall	.-3100   	; 0x63b8 <vfprintf>
    6fd4:	20 96       	adiw	r28, 0x00	; 0
    6fd6:	e2 e0       	ldi	r30, 0x02	; 2
    6fd8:	c4 cd       	rjmp	.-1144   	; 0x6b62 <__epilogue_restores__+0x20>

00006fda <puts>:
    6fda:	0f 93       	push	r16
    6fdc:	1f 93       	push	r17
    6fde:	cf 93       	push	r28
    6fe0:	df 93       	push	r29
    6fe2:	8c 01       	movw	r16, r24
    6fe4:	e0 91 2c 08 	lds	r30, 0x082C
    6fe8:	f0 91 2d 08 	lds	r31, 0x082D
    6fec:	83 81       	ldd	r24, Z+3	; 0x03
    6fee:	81 ff       	sbrs	r24, 1
    6ff0:	21 c0       	rjmp	.+66     	; 0x7034 <puts+0x5a>
    6ff2:	c0 e0       	ldi	r28, 0x00	; 0
    6ff4:	d0 e0       	ldi	r29, 0x00	; 0
    6ff6:	0d c0       	rjmp	.+26     	; 0x7012 <puts+0x38>
    6ff8:	e0 91 2c 08 	lds	r30, 0x082C
    6ffc:	f0 91 2d 08 	lds	r31, 0x082D
    7000:	20 85       	ldd	r18, Z+8	; 0x08
    7002:	31 85       	ldd	r19, Z+9	; 0x09
    7004:	bf 01       	movw	r22, r30
    7006:	f9 01       	movw	r30, r18
    7008:	09 95       	icall
    700a:	89 2b       	or	r24, r25
    700c:	11 f0       	breq	.+4      	; 0x7012 <puts+0x38>
    700e:	cf ef       	ldi	r28, 0xFF	; 255
    7010:	df ef       	ldi	r29, 0xFF	; 255
    7012:	f8 01       	movw	r30, r16
    7014:	81 91       	ld	r24, Z+
    7016:	8f 01       	movw	r16, r30
    7018:	88 23       	and	r24, r24
    701a:	71 f7       	brne	.-36     	; 0x6ff8 <puts+0x1e>
    701c:	e0 91 2c 08 	lds	r30, 0x082C
    7020:	f0 91 2d 08 	lds	r31, 0x082D
    7024:	20 85       	ldd	r18, Z+8	; 0x08
    7026:	31 85       	ldd	r19, Z+9	; 0x09
    7028:	8a e0       	ldi	r24, 0x0A	; 10
    702a:	bf 01       	movw	r22, r30
    702c:	f9 01       	movw	r30, r18
    702e:	09 95       	icall
    7030:	89 2b       	or	r24, r25
    7032:	11 f0       	breq	.+4      	; 0x7038 <puts+0x5e>
    7034:	cf ef       	ldi	r28, 0xFF	; 255
    7036:	df ef       	ldi	r29, 0xFF	; 255
    7038:	ce 01       	movw	r24, r28
    703a:	df 91       	pop	r29
    703c:	cf 91       	pop	r28
    703e:	1f 91       	pop	r17
    7040:	0f 91       	pop	r16
    7042:	08 95       	ret

00007044 <__ultoa_invert>:
    7044:	fa 01       	movw	r30, r20
    7046:	aa 27       	eor	r26, r26
    7048:	28 30       	cpi	r18, 0x08	; 8
    704a:	51 f1       	breq	.+84     	; 0x70a0 <__ultoa_invert+0x5c>
    704c:	20 31       	cpi	r18, 0x10	; 16
    704e:	81 f1       	breq	.+96     	; 0x70b0 <__ultoa_invert+0x6c>
    7050:	e8 94       	clt
    7052:	6f 93       	push	r22
    7054:	6e 7f       	andi	r22, 0xFE	; 254
    7056:	6e 5f       	subi	r22, 0xFE	; 254
    7058:	7f 4f       	sbci	r23, 0xFF	; 255
    705a:	8f 4f       	sbci	r24, 0xFF	; 255
    705c:	9f 4f       	sbci	r25, 0xFF	; 255
    705e:	af 4f       	sbci	r26, 0xFF	; 255
    7060:	b1 e0       	ldi	r27, 0x01	; 1
    7062:	3e d0       	rcall	.+124    	; 0x70e0 <__ultoa_invert+0x9c>
    7064:	b4 e0       	ldi	r27, 0x04	; 4
    7066:	3c d0       	rcall	.+120    	; 0x70e0 <__ultoa_invert+0x9c>
    7068:	67 0f       	add	r22, r23
    706a:	78 1f       	adc	r23, r24
    706c:	89 1f       	adc	r24, r25
    706e:	9a 1f       	adc	r25, r26
    7070:	a1 1d       	adc	r26, r1
    7072:	68 0f       	add	r22, r24
    7074:	79 1f       	adc	r23, r25
    7076:	8a 1f       	adc	r24, r26
    7078:	91 1d       	adc	r25, r1
    707a:	a1 1d       	adc	r26, r1
    707c:	6a 0f       	add	r22, r26
    707e:	71 1d       	adc	r23, r1
    7080:	81 1d       	adc	r24, r1
    7082:	91 1d       	adc	r25, r1
    7084:	a1 1d       	adc	r26, r1
    7086:	20 d0       	rcall	.+64     	; 0x70c8 <__ultoa_invert+0x84>
    7088:	09 f4       	brne	.+2      	; 0x708c <__ultoa_invert+0x48>
    708a:	68 94       	set
    708c:	3f 91       	pop	r19
    708e:	2a e0       	ldi	r18, 0x0A	; 10
    7090:	26 9f       	mul	r18, r22
    7092:	11 24       	eor	r1, r1
    7094:	30 19       	sub	r19, r0
    7096:	30 5d       	subi	r19, 0xD0	; 208
    7098:	31 93       	st	Z+, r19
    709a:	de f6       	brtc	.-74     	; 0x7052 <__ultoa_invert+0xe>
    709c:	cf 01       	movw	r24, r30
    709e:	08 95       	ret
    70a0:	46 2f       	mov	r20, r22
    70a2:	47 70       	andi	r20, 0x07	; 7
    70a4:	40 5d       	subi	r20, 0xD0	; 208
    70a6:	41 93       	st	Z+, r20
    70a8:	b3 e0       	ldi	r27, 0x03	; 3
    70aa:	0f d0       	rcall	.+30     	; 0x70ca <__ultoa_invert+0x86>
    70ac:	c9 f7       	brne	.-14     	; 0x70a0 <__ultoa_invert+0x5c>
    70ae:	f6 cf       	rjmp	.-20     	; 0x709c <__ultoa_invert+0x58>
    70b0:	46 2f       	mov	r20, r22
    70b2:	4f 70       	andi	r20, 0x0F	; 15
    70b4:	40 5d       	subi	r20, 0xD0	; 208
    70b6:	4a 33       	cpi	r20, 0x3A	; 58
    70b8:	18 f0       	brcs	.+6      	; 0x70c0 <__ultoa_invert+0x7c>
    70ba:	49 5d       	subi	r20, 0xD9	; 217
    70bc:	31 fd       	sbrc	r19, 1
    70be:	40 52       	subi	r20, 0x20	; 32
    70c0:	41 93       	st	Z+, r20
    70c2:	02 d0       	rcall	.+4      	; 0x70c8 <__ultoa_invert+0x84>
    70c4:	a9 f7       	brne	.-22     	; 0x70b0 <__ultoa_invert+0x6c>
    70c6:	ea cf       	rjmp	.-44     	; 0x709c <__ultoa_invert+0x58>
    70c8:	b4 e0       	ldi	r27, 0x04	; 4
    70ca:	a6 95       	lsr	r26
    70cc:	97 95       	ror	r25
    70ce:	87 95       	ror	r24
    70d0:	77 95       	ror	r23
    70d2:	67 95       	ror	r22
    70d4:	ba 95       	dec	r27
    70d6:	c9 f7       	brne	.-14     	; 0x70ca <__ultoa_invert+0x86>
    70d8:	00 97       	sbiw	r24, 0x00	; 0
    70da:	61 05       	cpc	r22, r1
    70dc:	71 05       	cpc	r23, r1
    70de:	08 95       	ret
    70e0:	9b 01       	movw	r18, r22
    70e2:	ac 01       	movw	r20, r24
    70e4:	0a 2e       	mov	r0, r26
    70e6:	06 94       	lsr	r0
    70e8:	57 95       	ror	r21
    70ea:	47 95       	ror	r20
    70ec:	37 95       	ror	r19
    70ee:	27 95       	ror	r18
    70f0:	ba 95       	dec	r27
    70f2:	c9 f7       	brne	.-14     	; 0x70e6 <__ultoa_invert+0xa2>
    70f4:	62 0f       	add	r22, r18
    70f6:	73 1f       	adc	r23, r19
    70f8:	84 1f       	adc	r24, r20
    70fa:	95 1f       	adc	r25, r21
    70fc:	a0 1d       	adc	r26, r0
    70fe:	08 95       	ret

00007100 <_exit>:
    7100:	f8 94       	cli

00007102 <__stop_program>:
    7102:	ff cf       	rjmp	.-2      	; 0x7102 <__stop_program>
