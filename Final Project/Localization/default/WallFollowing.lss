
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000302  00800100  0000758a  0000761e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000758a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d8  00800402  00800402  00007920  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00007920  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000087b  00000000  00000000  00007980  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001f06  00000000  00000000  000081fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000049d  00000000  00000000  0000a101  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b90  00000000  00000000  0000a59e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  0000c130  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e4f  00000000  00000000  0000c480  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014d8  00000000  00000000  0000d2cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <__vector_4>
      14:	0c 94 99 27 	jmp	0x4f32	; 0x4f32 <__vector_5>
      18:	0c 94 c2 27 	jmp	0x4f84	; 0x4f84 <__vector_6>
      1c:	0c 94 eb 27 	jmp	0x4fd6	; 0x4fd6 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 51 26 	jmp	0x4ca2	; 0x4ca2 <__vector_9>
      28:	0c 94 7a 26 	jmp	0x4cf4	; 0x4cf4 <__vector_10>
      2c:	0c 94 a3 26 	jmp	0x4d46	; 0x4d46 <__vector_11>
      30:	0c 94 1e 27 	jmp	0x4e3c	; 0x4e3c <__vector_12>
      34:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <__vector_13>
      38:	0c 94 f5 26 	jmp	0x4dea	; 0x4dea <__vector_14>
      3c:	0c 94 47 27 	jmp	0x4e8e	; 0x4e8e <__vector_15>
      40:	0c 94 d6 25 	jmp	0x4bac	; 0x4bac <__vector_16>
      44:	0c 94 ff 25 	jmp	0x4bfe	; 0x4bfe <__vector_17>
      48:	0c 94 28 26 	jmp	0x4c50	; 0x4c50 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	3b 23       	and	r19, r27
      7e:	3e 23       	and	r19, r30
      80:	41 23       	and	r20, r17
      82:	44 23       	and	r20, r20
      84:	4d 23       	and	r20, r29
      86:	47 23       	and	r20, r23
      88:	4a 23       	and	r20, r26
      8a:	50 23       	and	r21, r16
      8c:	53 23       	and	r21, r19
      8e:	56 23       	and	r21, r22
      90:	59 23       	and	r21, r25
      92:	5c 23       	and	r21, r28
      94:	5f 23       	and	r21, r31
      96:	62 23       	and	r22, r18
      98:	65 23       	and	r22, r21
      9a:	68 23       	and	r22, r24
      9c:	6b 23       	and	r22, r27
      9e:	6e 23       	and	r22, r30
      a0:	71 23       	and	r23, r17
      a2:	82 23       	and	r24, r18
      a4:	85 23       	and	r24, r21
      a6:	88 23       	and	r24, r24
      a8:	8b 23       	and	r24, r27
      aa:	94 23       	and	r25, r20
      ac:	8e 23       	and	r24, r30
      ae:	91 23       	and	r25, r17
      b0:	97 23       	and	r25, r23
      b2:	9a 23       	and	r25, r26
      b4:	9d 23       	and	r25, r29
      b6:	a0 23       	and	r26, r16
      b8:	a3 23       	and	r26, r19
      ba:	a6 23       	and	r26, r22
      bc:	a9 23       	and	r26, r25
      be:	ac 23       	and	r26, r28
      c0:	af 23       	and	r26, r31
      c2:	b2 23       	and	r27, r18
      c4:	b5 23       	and	r27, r21
      c6:	b8 23       	and	r27, r24
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ea e8       	ldi	r30, 0x8A	; 138
     676:	f5 e7       	ldi	r31, 0x75	; 117
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a2 30       	cpi	r26, 0x02	; 2
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	a2 e0       	ldi	r26, 0x02	; 2
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	aa 3d       	cpi	r26, 0xDA	; 218
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <main>
     698:	0c 94 c3 3a 	jmp	0x7586	; 0x7586 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 14 25 	call	0x4a28	; 0x4a28 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 80 25 	call	0x4b00	; 0x4b00 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 65 30 	call	0x60ca	; 0x60ca <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 65 30 	call	0x60ca	; 0x60ca <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 65 30 	call	0x60ca	; 0x60ca <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 65 30 	call	0x60ca	; 0x60ca <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 46 1d 	call	0x3a8c	; 0x3a8c <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 9e 04 	sts	0x049E, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 9e 04 	sts	0x049E, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 ec 23 	call	0x47d8	; 0x47d8 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 30 3a 	call	0x7460	; 0x7460 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 30 3a 	call	0x7460	; 0x7460 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 30 3a 	call	0x7460	; 0x7460 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	83 e1       	ldi	r24, 0x13	; 19
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	a7 e3       	ldi	r26, 0x37	; 55
     c56:	b7 e0       	ldi	r27, 0x07	; 7
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	ee e2       	ldi	r30, 0x2E	; 46
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	8b e9       	ldi	r24, 0x9B	; 155
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 be 06 	lds	r10, 0x06BE
     c9e:	b0 90 bf 06 	lds	r11, 0x06BF
     ca2:	c0 90 c0 06 	lds	r12, 0x06C0
     ca6:	d0 90 c1 06 	lds	r13, 0x06C1
			rtIR_old[i] = rtIR;
     caa:	e0 90 c3 06 	lds	r14, 0x06C3
     cae:	f0 90 c4 06 	lds	r15, 0x06C4
     cb2:	00 91 c5 06 	lds	r16, 0x06C5
     cb6:	10 91 c6 06 	lds	r17, 0x06C6
			ftIR_old[i] = ftIR;
     cba:	20 90 1b 05 	lds	r2, 0x051B
     cbe:	30 90 1c 05 	lds	r3, 0x051C
     cc2:	40 90 1d 05 	lds	r4, 0x051D
     cc6:	50 90 1e 05 	lds	r5, 0x051E
			bkIR_old[i] = bkIR;
     cca:	20 91 25 05 	lds	r18, 0x0525
     cce:	30 91 26 05 	lds	r19, 0x0526
     cd2:	40 91 27 05 	lds	r20, 0x0527
     cd6:	50 91 28 05 	lds	r21, 0x0528
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	ed 55       	subi	r30, 0x5D	; 93
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e9 53       	subi	r30, 0x39	; 57
     cf0:	f9 4f       	sbci	r31, 0xF9	; 249
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e2 54       	subi	r30, 0x42	; 66
     cfe:	fa 4f       	sbci	r31, 0xFA	; 250
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e5 5d       	subi	r30, 0xD5	; 213
     d0c:	fa 4f       	sbci	r31, 0xFA	; 250
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	ab 59       	subi	r26, 0x9B	; 155
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 be 06 	lds	r24, 0x06BE
     e0c:	90 91 bf 06 	lds	r25, 0x06BF
     e10:	a0 91 c0 06 	lds	r26, 0x06C0
     e14:	b0 91 c1 06 	lds	r27, 0x06C1
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 c3 06 	lds	r24, 0x06C3
     e28:	90 91 c4 06 	lds	r25, 0x06C4
     e2c:	a0 91 c5 06 	lds	r26, 0x06C5
     e30:	b0 91 c6 06 	lds	r27, 0x06C6
     e34:	80 93 c7 06 	sts	0x06C7, r24
     e38:	90 93 c8 06 	sts	0x06C8, r25
     e3c:	a0 93 c9 06 	sts	0x06C9, r26
     e40:	b0 93 ca 06 	sts	0x06CA, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 1b 05 	lds	r24, 0x051B
     e48:	90 91 1c 05 	lds	r25, 0x051C
     e4c:	a0 91 1d 05 	lds	r26, 0x051D
     e50:	b0 91 1e 05 	lds	r27, 0x051E
     e54:	80 93 be 05 	sts	0x05BE, r24
     e58:	90 93 bf 05 	sts	0x05BF, r25
     e5c:	a0 93 c0 05 	sts	0x05C0, r26
     e60:	b0 93 c1 05 	sts	0x05C1, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 25 05 	lds	r24, 0x0525
     e68:	90 91 26 05 	lds	r25, 0x0526
     e6c:	a0 91 27 05 	lds	r26, 0x0527
     e70:	b0 91 28 05 	lds	r27, 0x0528
     e74:	80 93 2b 05 	sts	0x052B, r24
     e78:	90 93 2c 05 	sts	0x052C, r25
     e7c:	a0 93 2d 05 	sts	0x052D, r26
     e80:	b0 93 2e 05 	sts	0x052E, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
     e94:	60 93 be 06 	sts	0x06BE, r22
     e98:	70 93 bf 06 	sts	0x06BF, r23
     e9c:	80 93 c0 06 	sts	0x06C0, r24
     ea0:	90 93 c1 06 	sts	0x06C1, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
     eb8:	60 93 c3 06 	sts	0x06C3, r22
     ebc:	70 93 c4 06 	sts	0x06C4, r23
     ec0:	80 93 c5 06 	sts	0x06C5, r24
     ec4:	90 93 c6 06 	sts	0x06C6, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
     edc:	60 93 1b 05 	sts	0x051B, r22
     ee0:	70 93 1c 05 	sts	0x051C, r23
     ee4:	80 93 1d 05 	sts	0x051D, r24
     ee8:	90 93 1e 05 	sts	0x051E, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
     f00:	60 93 25 05 	sts	0x0525, r22
     f04:	70 93 26 05 	sts	0x0526, r23
     f08:	80 93 27 05 	sts	0x0527, r24
     f0c:	90 93 28 05 	sts	0x0528, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 1f 05 	sts	0x051F, r24
     f66:	90 93 20 05 	sts	0x0520, r25
     f6a:	a0 93 21 05 	sts	0x0521, r26
     f6e:	b0 93 22 05 	sts	0x0522, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 1f 05 	lds	r18, 0x051F
     f7a:	30 91 20 05 	lds	r19, 0x0520
     f7e:	40 91 21 05 	lds	r20, 0x0521
     f82:	50 91 22 05 	lds	r21, 0x0522
     f86:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 1f 05 	sts	0x051F, r22
     f92:	70 93 20 05 	sts	0x0520, r23
     f96:	80 93 21 05 	sts	0x0521, r24
     f9a:	90 93 22 05 	sts	0x0522, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 ba 05 	lds	r18, 0x05BA
     fa6:	30 91 bb 05 	lds	r19, 0x05BB
     faa:	40 91 bc 05 	lds	r20, 0x05BC
     fae:	50 91 bd 05 	lds	r21, 0x05BD
     fb2:	0e 94 65 30 	call	0x60ca	; 0x60ca <__subsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a0 97       	sbiw	r28, 0x20	; 32
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	2d 83       	std	Y+5, r18	; 0x05
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	e9 86       	std	Y+9, r14	; 0x09
    106c:	fa 86       	std	Y+10, r15	; 0x0a
    106e:	0b 87       	std	Y+11, r16	; 0x0b
    1070:	1c 87       	std	Y+12, r17	; 0x0c
    1072:	ad 86       	std	Y+13, r10	; 0x0d
    1074:	be 86       	std	Y+14, r11	; 0x0e
    1076:	cf 86       	std	Y+15, r12	; 0x0f
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    107c:	33 24       	eor	r3, r3
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 19 32 	call	0x6432	; 0x6432 <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	14 f4       	brge	.+4      	; 0x1096 <move_arc_stnb+0x6c>
    1092:	33 24       	eor	r3, r3
    1094:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1096:	6d 81       	ldd	r22, Y+5	; 0x05
    1098:	7e 81       	ldd	r23, Y+6	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	2c ed       	ldi	r18, 0xDC	; 220
    10a0:	38 eb       	ldi	r19, 0xB8	; 184
    10a2:	48 e0       	ldi	r20, 0x08	; 8
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    10aa:	0e 94 36 31 	call	0x626c	; 0x626c <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	77 ff       	sbrs	r23, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <move_arc_stnb+0x90>
    10b4:	30 95       	com	r19
    10b6:	21 95       	neg	r18
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	b9 01       	movw	r22, r18
    10bc:	88 27       	eor	r24, r24
    10be:	77 fd       	sbrc	r23, 7
    10c0:	80 95       	com	r24
    10c2:	98 2f       	mov	r25, r24
    10c4:	0e 94 69 31 	call	0x62d2	; 0x62d2 <__floatsisf>
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    10d0:	69 85       	ldd	r22, Y+9	; 0x09
    10d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	2c ed       	ldi	r18, 0xDC	; 220
    10da:	38 eb       	ldi	r19, 0xB8	; 184
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    10e4:	0e 94 36 31 	call	0x626c	; 0x626c <__fixsfsi>
    10e8:	9b 01       	movw	r18, r22
    10ea:	77 ff       	sbrs	r23, 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <move_arc_stnb+0xca>
    10ee:	30 95       	com	r19
    10f0:	21 95       	neg	r18
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 69 31 	call	0x62d2	; 0x62d2 <__floatsisf>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1106:	6d 85       	ldd	r22, Y+13	; 0x0d
    1108:	7e 85       	ldd	r23, Y+14	; 0x0e
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	2c ed       	ldi	r18, 0xDC	; 220
    1110:	38 eb       	ldi	r19, 0xB8	; 184
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	5e e3       	ldi	r21, 0x3E	; 62
    1116:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    111a:	0e 94 36 31 	call	0x626c	; 0x626c <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	77 ff       	sbrs	r23, 7
    1122:	03 c0       	rjmp	.+6      	; 0x112a <move_arc_stnb+0x100>
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 69 31 	call	0x62d2	; 0x62d2 <__floatsisf>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	5f e4       	ldi	r21, 0x4F	; 79
    1148:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	a1 f5       	brne	.+104    	; 0x11b8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	2d b7       	in	r18, 0x3d	; 61
    117a:	3e b7       	in	r19, 0x3e	; 62
    117c:	29 50       	subi	r18, 0x09	; 9
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	3e bf       	out	0x3e, r19	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	2d bf       	out	0x3d, r18	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	ad b7       	in	r26, 0x3d	; 61
    1192:	be b7       	in	r27, 0x3e	; 62
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	5c 92       	st	X, r5
    1198:	4e 92       	st	-X, r4
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	93 82       	std	Z+3, r9	; 0x03
    119e:	82 82       	std	Z+2, r8	; 0x02
    11a0:	75 83       	std	Z+5, r23	; 0x05
    11a2:	64 83       	std	Z+4, r22	; 0x04
    11a4:	26 82       	std	Z+6, r2	; 0x06
    11a6:	10 86       	std	Z+8, r1	; 0x08
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	43 2d       	mov	r20, r3
    11b0:	92 01       	movw	r18, r4
    11b2:	84 01       	movw	r16, r8
    11b4:	76 01       	movw	r14, r12
    11b6:	c1 c1       	rjmp	.+898    	; 0x153a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	e9 f5       	brne	.+122    	; 0x1246 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    11d8:	3b 01       	movw	r6, r22
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    11e2:	8b 01       	movw	r16, r22
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    11ec:	7b 01       	movw	r14, r22
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	29 50       	subi	r18, 0x09	; 9
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	3e bf       	out	0x3e, r19	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	2d bf       	out	0x3d, r18	; 61
    1200:	ed b7       	in	r30, 0x3d	; 61
    1202:	fe b7       	in	r31, 0x3e	; 62
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <move_arc_stnb+0x1e4>
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	71 82       	std	Z+1, r7	; 0x01
    1210:	60 82       	st	Z, r6
    1212:	13 83       	std	Z+3, r17	; 0x03
    1214:	02 83       	std	Z+2, r16	; 0x02
    1216:	f5 82       	std	Z+5, r15	; 0x05
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	26 82       	std	Z+6, r2	; 0x06
    121c:	10 86       	std	Z+8, r1	; 0x08
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	93 01       	movw	r18, r6
    1226:	c2 2c       	mov	r12, r2
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	83 2c       	mov	r8, r3
    122e:	0e 94 8f 20 	call	0x411e	; 0x411e <STEPPER_move>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	be bf       	out	0x3e, r27	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ad bf       	out	0x3d, r26	; 61
    1244:	89 c1       	rjmp	.+786    	; 0x1558 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1246:	c3 01       	movw	r24, r6
    1248:	b2 01       	movw	r22, r4
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 19 32 	call	0x6432	; 0x6432 <__gesf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <move_arc_stnb+0x232>
    125a:	b1 c0       	rjmp	.+354    	; 0x13be <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    125c:	66 e6       	ldi	r22, 0x66	; 102
    125e:	76 e6       	ldi	r23, 0x66	; 102
    1260:	8a ea       	ldi	r24, 0xAA	; 170
    1262:	91 ec       	ldi	r25, 0xC1	; 193
    1264:	a3 01       	movw	r20, r6
    1266:	92 01       	movw	r18, r4
    1268:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    127c:	66 e6       	ldi	r22, 0x66	; 102
    127e:	76 e6       	ldi	r23, 0x66	; 102
    1280:	8a ea       	ldi	r24, 0xAA	; 170
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	a3 01       	movw	r20, r6
    1286:	92 01       	movw	r18, r4
    1288:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	39 97       	sbiw	r30, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8d b6       	in	r8, 0x3d	; 61
    12ae:	9e b6       	in	r9, 0x3e	; 62
    12b0:	08 94       	sec
    12b2:	81 1c       	adc	r8, r1
    12b4:	91 1c       	adc	r9, r1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	a8 01       	movw	r20, r16
    12c0:	97 01       	movw	r18, r14
    12c2:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    12c6:	2c ed       	ldi	r18, 0xDC	; 220
    12c8:	38 eb       	ldi	r19, 0xB8	; 184
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    12d2:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    12d6:	69 8b       	std	Y+17, r22	; 0x11
    12d8:	7a 8b       	std	Y+18, r23	; 0x12
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    12ee:	2c ed       	ldi	r18, 0xDC	; 220
    12f0:	38 eb       	ldi	r19, 0xB8	; 184
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	5e e3       	ldi	r21, 0x3E	; 62
    12f6:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    12fa:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	6d 85       	ldd	r22, Y+13	; 0x0d
    1308:	7e 85       	ldd	r23, Y+14	; 0x0e
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	a8 01       	movw	r20, r16
    1310:	97 01       	movw	r18, r14
    1312:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1316:	2c ed       	ldi	r18, 0xDC	; 220
    1318:	38 eb       	ldi	r19, 0xB8	; 184
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1322:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1326:	2b 01       	movw	r4, r22
    1328:	3c 01       	movw	r6, r24
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	7e 81       	ldd	r23, Y+6	; 0x06
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a6 01       	movw	r20, r12
    1334:	95 01       	movw	r18, r10
    1336:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    133a:	2c ed       	ldi	r18, 0xDC	; 220
    133c:	38 eb       	ldi	r19, 0xB8	; 184
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1346:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    134a:	d4 01       	movw	r26, r8
    134c:	6d 93       	st	X+, r22
    134e:	7c 93       	st	X, r23
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1360:	2c ed       	ldi	r18, 0xDC	; 220
    1362:	38 eb       	ldi	r19, 0xB8	; 184
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	5e e3       	ldi	r21, 0x3E	; 62
    1368:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    136c:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1370:	f4 01       	movw	r30, r8
    1372:	73 83       	std	Z+3, r23	; 0x03
    1374:	62 83       	std	Z+2, r22	; 0x02
    1376:	6d 85       	ldd	r22, Y+13	; 0x0d
    1378:	7e 85       	ldd	r23, Y+14	; 0x0e
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	a6 01       	movw	r20, r12
    1380:	95 01       	movw	r18, r10
    1382:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1386:	2c ed       	ldi	r18, 0xDC	; 220
    1388:	38 eb       	ldi	r19, 0xB8	; 184
    138a:	48 e0       	ldi	r20, 0x08	; 8
    138c:	5e e3       	ldi	r21, 0x3E	; 62
    138e:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1392:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1396:	d4 01       	movw	r26, r8
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	7c 93       	st	X, r23
    139c:	6e 93       	st	-X, r22
    139e:	14 97       	sbiw	r26, 0x04	; 4
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2c 92       	st	X, r2
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	1c 92       	st	X, r1
    13aa:	1e 92       	st	-X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	43 2d       	mov	r20, r3
    13b4:	29 89       	ldd	r18, Y+17	; 0x11
    13b6:	3a 89       	ldd	r19, Y+18	; 0x12
    13b8:	0d 89       	ldd	r16, Y+21	; 0x15
    13ba:	1e 89       	ldd	r17, Y+22	; 0x16
    13bc:	bd c0       	rjmp	.+378    	; 0x1538 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    13ce:	87 fd       	sbrc	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <move_arc_stnb+0x3ac>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	c1 c0       	rjmp	.+386    	; 0x1558 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    13d6:	66 e6       	ldi	r22, 0x66	; 102
    13d8:	76 e6       	ldi	r23, 0x66	; 102
    13da:	8a ea       	ldi	r24, 0xAA	; 170
    13dc:	91 e4       	ldi	r25, 0x41	; 65
    13de:	a3 01       	movw	r20, r6
    13e0:	92 01       	movw	r18, r4
    13e2:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    13f6:	66 e6       	ldi	r22, 0x66	; 102
    13f8:	76 e6       	ldi	r23, 0x66	; 102
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	91 ec       	ldi	r25, 0xC1	; 193
    13fe:	a3 01       	movw	r20, r6
    1400:	92 01       	movw	r18, r4
    1402:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    1412:	5b 01       	movw	r10, r22
    1414:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1416:	2d b7       	in	r18, 0x3d	; 61
    1418:	3e b7       	in	r19, 0x3e	; 62
    141a:	29 50       	subi	r18, 0x09	; 9
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	3e bf       	out	0x3e, r19	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	2d bf       	out	0x3d, r18	; 61
    1428:	8d b6       	in	r8, 0x3d	; 61
    142a:	9e b6       	in	r9, 0x3e	; 62
    142c:	08 94       	sec
    142e:	81 1c       	adc	r8, r1
    1430:	91 1c       	adc	r9, r1
    1432:	6d 81       	ldd	r22, Y+5	; 0x05
    1434:	7e 81       	ldd	r23, Y+6	; 0x06
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1442:	2c ed       	ldi	r18, 0xDC	; 220
    1444:	38 eb       	ldi	r19, 0xB8	; 184
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    144e:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1452:	69 8f       	std	Y+25, r22	; 0x19
    1454:	7a 8f       	std	Y+26, r23	; 0x1a
    1456:	8b 8f       	std	Y+27, r24	; 0x1b
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	69 85       	ldd	r22, Y+9	; 0x09
    145c:	7a 85       	ldd	r23, Y+10	; 0x0a
    145e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1460:	9c 85       	ldd	r25, Y+12	; 0x0c
    1462:	a8 01       	movw	r20, r16
    1464:	97 01       	movw	r18, r14
    1466:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    146a:	2c ed       	ldi	r18, 0xDC	; 220
    146c:	38 eb       	ldi	r19, 0xB8	; 184
    146e:	48 e0       	ldi	r20, 0x08	; 8
    1470:	5e e3       	ldi	r21, 0x3E	; 62
    1472:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1476:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    147a:	6d 8f       	std	Y+29, r22	; 0x1d
    147c:	7e 8f       	std	Y+30, r23	; 0x1e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	a8 01       	movw	r20, r16
    148c:	97 01       	movw	r18, r14
    148e:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1492:	2c ed       	ldi	r18, 0xDC	; 220
    1494:	38 eb       	ldi	r19, 0xB8	; 184
    1496:	48 e0       	ldi	r20, 0x08	; 8
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    149e:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    14a2:	2b 01       	movw	r4, r22
    14a4:	3c 01       	movw	r6, r24
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	a6 01       	movw	r20, r12
    14b0:	95 01       	movw	r18, r10
    14b2:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    14b6:	2c ed       	ldi	r18, 0xDC	; 220
    14b8:	38 eb       	ldi	r19, 0xB8	; 184
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    14c2:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    14c6:	d4 01       	movw	r26, r8
    14c8:	6d 93       	st	X+, r22
    14ca:	7c 93       	st	X, r23
    14cc:	69 85       	ldd	r22, Y+9	; 0x09
    14ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d4:	a6 01       	movw	r20, r12
    14d6:	95 01       	movw	r18, r10
    14d8:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    14dc:	2c ed       	ldi	r18, 0xDC	; 220
    14de:	38 eb       	ldi	r19, 0xB8	; 184
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	5e e3       	ldi	r21, 0x3E	; 62
    14e4:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    14e8:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    14ec:	f4 01       	movw	r30, r8
    14ee:	73 83       	std	Z+3, r23	; 0x03
    14f0:	62 83       	std	Z+2, r22	; 0x02
    14f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1502:	2c ed       	ldi	r18, 0xDC	; 220
    1504:	38 eb       	ldi	r19, 0xB8	; 184
    1506:	48 e0       	ldi	r20, 0x08	; 8
    1508:	5e e3       	ldi	r21, 0x3E	; 62
    150a:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    150e:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1512:	d4 01       	movw	r26, r8
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	7c 93       	st	X, r23
    1518:	6e 93       	st	-X, r22
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	16 96       	adiw	r26, 0x06	; 6
    151e:	2c 92       	st	X, r2
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	18 96       	adiw	r26, 0x08	; 8
    1524:	1c 92       	st	X, r1
    1526:	1e 92       	st	-X, r1
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	43 2d       	mov	r20, r3
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1534:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1536:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1538:	72 01       	movw	r14, r4
    153a:	c2 2c       	mov	r12, r2
    153c:	aa 24       	eor	r10, r10
    153e:	bb 24       	eor	r11, r11
    1540:	83 2c       	mov	r8, r3
    1542:	0e 94 8f 20 	call	0x411e	; 0x411e <STEPPER_move>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	39 96       	adiw	r30, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	fe bf       	out	0x3e, r31	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	2b 01       	movw	r4, r22
    15c0:	3c 01       	movw	r6, r24
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	e9 86       	std	Y+9, r14	; 0x09
    15cc:	fa 86       	std	Y+10, r15	; 0x0a
    15ce:	0b 87       	std	Y+11, r16	; 0x0b
    15d0:	1c 87       	std	Y+12, r17	; 0x0c
    15d2:	ad 86       	std	Y+13, r10	; 0x0d
    15d4:	be 86       	std	Y+14, r11	; 0x0e
    15d6:	cf 86       	std	Y+15, r12	; 0x0f
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    15dc:	33 24       	eor	r3, r3
    15de:	ca 01       	movw	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 19 32 	call	0x6432	; 0x6432 <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	14 f4       	brge	.+4      	; 0x15f6 <move_arc_stwt+0x6c>
    15f2:	33 24       	eor	r3, r3
    15f4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	2c ed       	ldi	r18, 0xDC	; 220
    1600:	38 eb       	ldi	r19, 0xB8	; 184
    1602:	48 e0       	ldi	r20, 0x08	; 8
    1604:	5e e3       	ldi	r21, 0x3E	; 62
    1606:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    160a:	0e 94 36 31 	call	0x626c	; 0x626c <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	77 ff       	sbrs	r23, 7
    1612:	03 c0       	rjmp	.+6      	; 0x161a <move_arc_stwt+0x90>
    1614:	30 95       	com	r19
    1616:	21 95       	neg	r18
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	b9 01       	movw	r22, r18
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	0e 94 69 31 	call	0x62d2	; 0x62d2 <__floatsisf>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	2c ed       	ldi	r18, 0xDC	; 220
    163a:	38 eb       	ldi	r19, 0xB8	; 184
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	5e e3       	ldi	r21, 0x3E	; 62
    1640:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1644:	0e 94 36 31 	call	0x626c	; 0x626c <__fixsfsi>
    1648:	9b 01       	movw	r18, r22
    164a:	77 ff       	sbrs	r23, 7
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <move_arc_stwt+0xca>
    164e:	30 95       	com	r19
    1650:	21 95       	neg	r18
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	b9 01       	movw	r22, r18
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 69 31 	call	0x62d2	; 0x62d2 <__floatsisf>
    1662:	4b 01       	movw	r8, r22
    1664:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1666:	6d 85       	ldd	r22, Y+13	; 0x0d
    1668:	7e 85       	ldd	r23, Y+14	; 0x0e
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	2c ed       	ldi	r18, 0xDC	; 220
    1670:	38 eb       	ldi	r19, 0xB8	; 184
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	5e e3       	ldi	r21, 0x3E	; 62
    1676:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    167a:	0e 94 36 31 	call	0x626c	; 0x626c <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 ff       	sbrs	r23, 7
    1682:	03 c0       	rjmp	.+6      	; 0x168a <move_arc_stwt+0x100>
    1684:	30 95       	com	r19
    1686:	21 95       	neg	r18
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	0e 94 69 31 	call	0x62d2	; 0x62d2 <__floatsisf>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	5f e4       	ldi	r21, 0x4F	; 79
    16a8:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	a1 f5       	brne	.+104    	; 0x1718 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    16b0:	69 81       	ldd	r22, Y+1	; 0x01
    16b2:	7a 81       	ldd	r23, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	c5 01       	movw	r24, r10
    16c2:	b4 01       	movw	r22, r8
    16c4:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	29 50       	subi	r18, 0x09	; 9
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	3e bf       	out	0x3e, r19	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	2d bf       	out	0x3d, r18	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ad b7       	in	r26, 0x3d	; 61
    16f2:	be b7       	in	r27, 0x3e	; 62
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	5c 92       	st	X, r5
    16f8:	4e 92       	st	-X, r4
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	93 82       	std	Z+3, r9	; 0x03
    16fe:	82 82       	std	Z+2, r8	; 0x02
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    1704:	26 82       	std	Z+6, r2	; 0x06
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	43 2d       	mov	r20, r3
    1710:	92 01       	movw	r18, r4
    1712:	84 01       	movw	r16, r8
    1714:	76 01       	movw	r14, r12
    1716:	c1 c1       	rjmp	.+898    	; 0x1a9a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	e9 f5       	brne	.+122    	; 0x17a6 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1738:	3b 01       	movw	r6, r22
    173a:	c5 01       	movw	r24, r10
    173c:	b4 01       	movw	r22, r8
    173e:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1742:	8b 01       	movw	r16, r22
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    174c:	7b 01       	movw	r14, r22
    174e:	2d b7       	in	r18, 0x3d	; 61
    1750:	3e b7       	in	r19, 0x3e	; 62
    1752:	29 50       	subi	r18, 0x09	; 9
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	2d bf       	out	0x3d, r18	; 61
    1760:	ed b7       	in	r30, 0x3d	; 61
    1762:	fe b7       	in	r31, 0x3e	; 62
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	33 20       	and	r3, r3
    176a:	09 f4       	brne	.+2      	; 0x176e <move_arc_stwt+0x1e4>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	71 82       	std	Z+1, r7	; 0x01
    1770:	60 82       	st	Z, r6
    1772:	13 83       	std	Z+3, r17	; 0x03
    1774:	02 83       	std	Z+2, r16	; 0x02
    1776:	f5 82       	std	Z+5, r15	; 0x05
    1778:	e4 82       	std	Z+4, r14	; 0x04
    177a:	26 82       	std	Z+6, r2	; 0x06
    177c:	10 86       	std	Z+8, r1	; 0x08
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	93 01       	movw	r18, r6
    1786:	c2 2c       	mov	r12, r2
    1788:	aa 24       	eor	r10, r10
    178a:	bb 24       	eor	r11, r11
    178c:	83 2c       	mov	r8, r3
    178e:	0e 94 8f 20 	call	0x411e	; 0x411e <STEPPER_move>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	19 96       	adiw	r26, 0x09	; 9
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	be bf       	out	0x3e, r27	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	ad bf       	out	0x3d, r26	; 61
    17a4:	89 c1       	rjmp	.+786    	; 0x1ab8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 19 32 	call	0x6432	; 0x6432 <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <move_arc_stwt+0x232>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17bc:	66 e6       	ldi	r22, 0x66	; 102
    17be:	76 e6       	ldi	r23, 0x66	; 102
    17c0:	8a ea       	ldi	r24, 0xAA	; 170
    17c2:	91 ec       	ldi	r25, 0xC1	; 193
    17c4:	a3 01       	movw	r20, r6
    17c6:	92 01       	movw	r18, r4
    17c8:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    17d8:	7b 01       	movw	r14, r22
    17da:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17dc:	66 e6       	ldi	r22, 0x66	; 102
    17de:	76 e6       	ldi	r23, 0x66	; 102
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	91 e4       	ldi	r25, 0x41	; 65
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    17f8:	5b 01       	movw	r10, r22
    17fa:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    17fc:	ed b7       	in	r30, 0x3d	; 61
    17fe:	fe b7       	in	r31, 0x3e	; 62
    1800:	39 97       	sbiw	r30, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	8d b6       	in	r8, 0x3d	; 61
    180e:	9e b6       	in	r9, 0x3e	; 62
    1810:	08 94       	sec
    1812:	81 1c       	adc	r8, r1
    1814:	91 1c       	adc	r9, r1
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	a8 01       	movw	r20, r16
    1820:	97 01       	movw	r18, r14
    1822:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1826:	2c ed       	ldi	r18, 0xDC	; 220
    1828:	38 eb       	ldi	r19, 0xB8	; 184
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	5e e3       	ldi	r21, 0x3E	; 62
    182e:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1832:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1836:	69 8b       	std	Y+17, r22	; 0x11
    1838:	7a 8b       	std	Y+18, r23	; 0x12
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	69 85       	ldd	r22, Y+9	; 0x09
    1840:	7a 85       	ldd	r23, Y+10	; 0x0a
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	a8 01       	movw	r20, r16
    1848:	97 01       	movw	r18, r14
    184a:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    184e:	2c ed       	ldi	r18, 0xDC	; 220
    1850:	38 eb       	ldi	r19, 0xB8	; 184
    1852:	48 e0       	ldi	r20, 0x08	; 8
    1854:	5e e3       	ldi	r21, 0x3E	; 62
    1856:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    185a:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	6d 85       	ldd	r22, Y+13	; 0x0d
    1868:	7e 85       	ldd	r23, Y+14	; 0x0e
    186a:	8f 85       	ldd	r24, Y+15	; 0x0f
    186c:	98 89       	ldd	r25, Y+16	; 0x10
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1876:	2c ed       	ldi	r18, 0xDC	; 220
    1878:	38 eb       	ldi	r19, 0xB8	; 184
    187a:	48 e0       	ldi	r20, 0x08	; 8
    187c:	5e e3       	ldi	r21, 0x3E	; 62
    187e:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1882:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1886:	2b 01       	movw	r4, r22
    1888:	3c 01       	movw	r6, r24
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	a6 01       	movw	r20, r12
    1894:	95 01       	movw	r18, r10
    1896:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    189a:	2c ed       	ldi	r18, 0xDC	; 220
    189c:	38 eb       	ldi	r19, 0xB8	; 184
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    18a6:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    18aa:	d4 01       	movw	r26, r8
    18ac:	6d 93       	st	X+, r22
    18ae:	7c 93       	st	X, r23
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    18c0:	2c ed       	ldi	r18, 0xDC	; 220
    18c2:	38 eb       	ldi	r19, 0xB8	; 184
    18c4:	48 e0       	ldi	r20, 0x08	; 8
    18c6:	5e e3       	ldi	r21, 0x3E	; 62
    18c8:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    18cc:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    18d0:	f4 01       	movw	r30, r8
    18d2:	73 83       	std	Z+3, r23	; 0x03
    18d4:	62 83       	std	Z+2, r22	; 0x02
    18d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	a6 01       	movw	r20, r12
    18e0:	95 01       	movw	r18, r10
    18e2:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    18e6:	2c ed       	ldi	r18, 0xDC	; 220
    18e8:	38 eb       	ldi	r19, 0xB8	; 184
    18ea:	48 e0       	ldi	r20, 0x08	; 8
    18ec:	5e e3       	ldi	r21, 0x3E	; 62
    18ee:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    18f2:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    18f6:	d4 01       	movw	r26, r8
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	7c 93       	st	X, r23
    18fc:	6e 93       	st	-X, r22
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	2c 92       	st	X, r2
    1904:	16 97       	sbiw	r26, 0x06	; 6
    1906:	18 96       	adiw	r26, 0x08	; 8
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	43 2d       	mov	r20, r3
    1914:	29 89       	ldd	r18, Y+17	; 0x11
    1916:	3a 89       	ldd	r19, Y+18	; 0x12
    1918:	0d 89       	ldd	r16, Y+21	; 0x15
    191a:	1e 89       	ldd	r17, Y+22	; 0x16
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    192e:	87 fd       	sbrc	r24, 7
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <move_arc_stwt+0x3ac>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c1 c0       	rjmp	.+386    	; 0x1ab8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1936:	66 e6       	ldi	r22, 0x66	; 102
    1938:	76 e6       	ldi	r23, 0x66	; 102
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	91 e4       	ldi	r25, 0x41	; 65
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1956:	66 e6       	ldi	r22, 0x66	; 102
    1958:	76 e6       	ldi	r23, 0x66	; 102
    195a:	8a ea       	ldi	r24, 0xAA	; 170
    195c:	91 ec       	ldi	r25, 0xC1	; 193
    195e:	a3 01       	movw	r20, r6
    1960:	92 01       	movw	r18, r4
    1962:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    1972:	5b 01       	movw	r10, r22
    1974:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1976:	2d b7       	in	r18, 0x3d	; 61
    1978:	3e b7       	in	r19, 0x3e	; 62
    197a:	29 50       	subi	r18, 0x09	; 9
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	3e bf       	out	0x3e, r19	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	2d bf       	out	0x3d, r18	; 61
    1988:	8d b6       	in	r8, 0x3d	; 61
    198a:	9e b6       	in	r9, 0x3e	; 62
    198c:	08 94       	sec
    198e:	81 1c       	adc	r8, r1
    1990:	91 1c       	adc	r9, r1
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	a8 01       	movw	r20, r16
    199c:	97 01       	movw	r18, r14
    199e:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    19a2:	2c ed       	ldi	r18, 0xDC	; 220
    19a4:	38 eb       	ldi	r19, 0xB8	; 184
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	5e e3       	ldi	r21, 0x3E	; 62
    19aa:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    19ae:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    19b2:	69 8f       	std	Y+25, r22	; 0x19
    19b4:	7a 8f       	std	Y+26, r23	; 0x1a
    19b6:	8b 8f       	std	Y+27, r24	; 0x1b
    19b8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	a8 01       	movw	r20, r16
    19c4:	97 01       	movw	r18, r14
    19c6:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    19ca:	2c ed       	ldi	r18, 0xDC	; 220
    19cc:	38 eb       	ldi	r19, 0xB8	; 184
    19ce:	48 e0       	ldi	r20, 0x08	; 8
    19d0:	5e e3       	ldi	r21, 0x3E	; 62
    19d2:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    19d6:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    19da:	6d 8f       	std	Y+29, r22	; 0x1d
    19dc:	7e 8f       	std	Y+30, r23	; 0x1e
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	a8 01       	movw	r20, r16
    19ec:	97 01       	movw	r18, r14
    19ee:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    19f2:	2c ed       	ldi	r18, 0xDC	; 220
    19f4:	38 eb       	ldi	r19, 0xB8	; 184
    19f6:	48 e0       	ldi	r20, 0x08	; 8
    19f8:	5e e3       	ldi	r21, 0x3E	; 62
    19fa:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    19fe:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1a02:	2b 01       	movw	r4, r22
    1a04:	3c 01       	movw	r6, r24
    1a06:	6d 81       	ldd	r22, Y+5	; 0x05
    1a08:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1a16:	2c ed       	ldi	r18, 0xDC	; 220
    1a18:	38 eb       	ldi	r19, 0xB8	; 184
    1a1a:	48 e0       	ldi	r20, 0x08	; 8
    1a1c:	5e e3       	ldi	r21, 0x3E	; 62
    1a1e:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1a22:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1a26:	d4 01       	movw	r26, r8
    1a28:	6d 93       	st	X+, r22
    1a2a:	7c 93       	st	X, r23
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1a3c:	2c ed       	ldi	r18, 0xDC	; 220
    1a3e:	38 eb       	ldi	r19, 0xB8	; 184
    1a40:	48 e0       	ldi	r20, 0x08	; 8
    1a42:	5e e3       	ldi	r21, 0x3E	; 62
    1a44:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1a48:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	73 83       	std	Z+3, r23	; 0x03
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1a62:	2c ed       	ldi	r18, 0xDC	; 220
    1a64:	38 eb       	ldi	r19, 0xB8	; 184
    1a66:	48 e0       	ldi	r20, 0x08	; 8
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    1a6e:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    1a72:	d4 01       	movw	r26, r8
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	7c 93       	st	X, r23
    1a78:	6e 93       	st	-X, r22
    1a7a:	14 97       	sbiw	r26, 0x04	; 4
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	2c 92       	st	X, r2
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	18 96       	adiw	r26, 0x08	; 8
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	17 97       	sbiw	r26, 0x07	; 7
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	43 2d       	mov	r20, r3
    1a90:	29 8d       	ldd	r18, Y+25	; 0x19
    1a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a94:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a98:	72 01       	movw	r14, r4
    1a9a:	c2 2c       	mov	r12, r2
    1a9c:	aa 24       	eor	r10, r10
    1a9e:	bb 24       	eor	r11, r11
    1aa0:	83 2c       	mov	r8, r3
    1aa2:	0e 94 8f 20 	call	0x411e	; 0x411e <STEPPER_move>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	39 96       	adiw	r30, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ab8:	a0 96       	adiw	r28, 0x20	; 32
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1aea:	0e 94 bb 23 	call	0x4776	; 0x4776 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1aee:	28 2f       	mov	r18, r24
    1af0:	21 70       	andi	r18, 0x01	; 1
    1af2:	20 93 bc 06 	sts	0x06BC, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	82 70       	andi	r24, 0x02	; 2
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	95 95       	asr	r25
    1afe:	87 95       	ror	r24
    1b00:	80 93 bd 06 	sts	0x06BD, r24
}
    1b04:	08 95       	ret

00001b06 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1b06:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1b0a:	60 93 b3 05 	sts	0x05B3, r22
    1b0e:	70 93 b4 05 	sts	0x05B4, r23
    1b12:	80 93 b5 05 	sts	0x05B5, r24
    1b16:	90 93 b6 05 	sts	0x05B6, r25
	leftLightVolt = getLeftLight();
    1b1a:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1b1e:	60 93 4b 07 	sts	0x074B, r22
    1b22:	70 93 4c 07 	sts	0x074C, r23
    1b26:	80 93 4d 07 	sts	0x074D, r24
    1b2a:	90 93 4e 07 	sts	0x074E, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1b2e:	08 95       	ret

00001b30 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1b30:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1b34:	60 93 1b 05 	sts	0x051B, r22
    1b38:	70 93 1c 05 	sts	0x051C, r23
    1b3c:	80 93 1d 05 	sts	0x051D, r24
    1b40:	90 93 1e 05 	sts	0x051E, r25
	bkIR = getBackIR();
    1b44:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1b48:	60 93 25 05 	sts	0x0525, r22
    1b4c:	70 93 26 05 	sts	0x0526, r23
    1b50:	80 93 27 05 	sts	0x0527, r24
    1b54:	90 93 28 05 	sts	0x0528, r25
	ltIR = getLeftIR();
    1b58:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1b5c:	60 93 be 06 	sts	0x06BE, r22
    1b60:	70 93 bf 06 	sts	0x06BF, r23
    1b64:	80 93 c0 06 	sts	0x06C0, r24
    1b68:	90 93 c1 06 	sts	0x06C1, r25
	rtIR = getRightIR();
    1b6c:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1b70:	60 93 c3 06 	sts	0x06C3, r22
    1b74:	70 93 c4 06 	sts	0x06C4, r23
    1b78:	80 93 c5 06 	sts	0x06C5, r24
    1b7c:	90 93 c6 06 	sts	0x06C6, r25
}
    1b80:	08 95       	ret

00001b82 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	16 2f       	mov	r17, r22
    1b94:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1b96:	5f e1       	ldi	r21, 0x1F	; 31
    1b98:	f5 2e       	mov	r15, r21
    1b9a:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1b9c:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1b9e:	0f 2d       	mov	r16, r15
    1ba0:	06 95       	lsr	r16
    1ba2:	06 95       	lsr	r16
    1ba4:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1ba6:	c0 2f       	mov	r28, r16
    1ba8:	d0 e0       	ldi	r29, 0x00	; 0
    1baa:	c1 2e       	mov	r12, r17
    1bac:	dd 24       	eor	r13, r13
    1bae:	ce 01       	movw	r24, r28
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1bb6:	80 2f       	mov	r24, r16
    1bb8:	61 2f       	mov	r22, r17
    1bba:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <LCD_set_next_PGC>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	45 e0       	ldi	r20, 0x05	; 5
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	4a 95       	dec	r20
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <LCD_set_pixel+0x40>
    1bca:	2f 2d       	mov	r18, r15
    1bcc:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1bce:	ee 20       	and	r14, r14
    1bd0:	89 f0       	breq	.+34     	; 0x1bf4 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1bd2:	ec 0d       	add	r30, r12
    1bd4:	fd 1d       	adc	r31, r13
    1bd6:	ea 5c       	subi	r30, 0xCA	; 202
    1bd8:	f9 4f       	sbci	r31, 0xF9	; 249
    1bda:	27 70       	andi	r18, 0x07	; 7
    1bdc:	30 70       	andi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <LCD_set_pixel+0x66>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	2a 95       	dec	r18
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <LCD_set_pixel+0x62>
    1bec:	20 81       	ld	r18, Z
    1bee:	28 2b       	or	r18, r24
    1bf0:	20 83       	st	Z, r18
    1bf2:	11 c0       	rjmp	.+34     	; 0x1c16 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1bf4:	ec 0d       	add	r30, r12
    1bf6:	fd 1d       	adc	r31, r13
    1bf8:	ea 5c       	subi	r30, 0xCA	; 202
    1bfa:	f9 4f       	sbci	r31, 0xF9	; 249
    1bfc:	27 70       	andi	r18, 0x07	; 7
    1bfe:	30 70       	andi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <LCD_set_pixel+0x88>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	2a 95       	dec	r18
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <LCD_set_pixel+0x84>
    1c0e:	80 95       	com	r24
    1c10:	20 81       	ld	r18, Z
    1c12:	82 23       	and	r24, r18
    1c14:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1c16:	35 e0       	ldi	r19, 0x05	; 5
    1c18:	cc 0f       	add	r28, r28
    1c1a:	dd 1f       	adc	r29, r29
    1c1c:	3a 95       	dec	r19
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <LCD_set_pixel+0x96>
    1c20:	cc 0d       	add	r28, r12
    1c22:	dd 1d       	adc	r29, r13
    1c24:	ca 5c       	subi	r28, 0xCA	; 202
    1c26:	d9 4f       	sbci	r29, 0xF9	; 249
    1c28:	88 81       	ld	r24, Y
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	08 95       	ret

00001c42 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1c42:	7f 92       	push	r7
    1c44:	8f 92       	push	r8
    1c46:	9f 92       	push	r9
    1c48:	af 92       	push	r10
    1c4a:	bf 92       	push	r11
    1c4c:	cf 92       	push	r12
    1c4e:	df 92       	push	r13
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	98 2e       	mov	r9, r24
    1c5a:	b6 2e       	mov	r11, r22
    1c5c:	c4 2e       	mov	r12, r20
    1c5e:	a2 2e       	mov	r10, r18
    1c60:	80 2e       	mov	r8, r16
    1c62:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1c64:	bb 0c       	add	r11, r11
    1c66:	bb 0c       	add	r11, r11
    1c68:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1c6a:	dd 24       	eor	r13, r13
    1c6c:	23 e0       	ldi	r18, 0x03	; 3
    1c6e:	cc 0c       	add	r12, r12
    1c70:	dd 1c       	adc	r13, r13
    1c72:	2a 95       	dec	r18
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <printCell+0x2c>
    1c76:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1c78:	0f e1       	ldi	r16, 0x1F	; 31
    1c7a:	0b 19       	sub	r16, r11
    1c7c:	80 2f       	mov	r24, r16
    1c7e:	6c 2d       	mov	r22, r12
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1c86:	98 e1       	ldi	r25, 0x18	; 24
    1c88:	e9 2e       	mov	r14, r25
    1c8a:	eb 18       	sub	r14, r11
    1c8c:	8e 2d       	mov	r24, r14
    1c8e:	6c 2d       	mov	r22, r12
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1c96:	87 e0       	ldi	r24, 0x07	; 7
    1c98:	f8 2e       	mov	r15, r24
    1c9a:	fc 0c       	add	r15, r12
    1c9c:	80 2f       	mov	r24, r16
    1c9e:	6f 2d       	mov	r22, r15
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1ca6:	8e 2d       	mov	r24, r14
    1ca8:	6f 2d       	mov	r22, r15
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	
	if(cell&0b1000){
    1cb0:	c9 2c       	mov	r12, r9
    1cb2:	93 fe       	sbrs	r9, 3
    1cb4:	24 c0       	rjmp	.+72     	; 0x1cfe <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1cb6:	61 2f       	mov	r22, r17
    1cb8:	6f 5f       	subi	r22, 0xFF	; 255
    1cba:	80 2f       	mov	r24, r16
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1cc2:	61 2f       	mov	r22, r17
    1cc4:	6e 5f       	subi	r22, 0xFE	; 254
    1cc6:	80 2f       	mov	r24, r16
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1cce:	61 2f       	mov	r22, r17
    1cd0:	6d 5f       	subi	r22, 0xFD	; 253
    1cd2:	80 2f       	mov	r24, r16
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1cda:	61 2f       	mov	r22, r17
    1cdc:	6c 5f       	subi	r22, 0xFC	; 252
    1cde:	80 2f       	mov	r24, r16
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1ce6:	61 2f       	mov	r22, r17
    1ce8:	6b 5f       	subi	r22, 0xFB	; 251
    1cea:	80 2f       	mov	r24, r16
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1cf2:	61 2f       	mov	r22, r17
    1cf4:	6a 5f       	subi	r22, 0xFA	; 250
    1cf6:	80 2f       	mov	r24, r16
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0100){
    1cfe:	c2 fe       	sbrs	r12, 2
    1d00:	25 c0       	rjmp	.+74     	; 0x1d4c <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1d02:	8b 2d       	mov	r24, r11
    1d04:	80 95       	com	r24
    1d06:	81 5e       	subi	r24, 0xE1	; 225
    1d08:	6f 2d       	mov	r22, r15
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1d10:	8d e1       	ldi	r24, 0x1D	; 29
    1d12:	8b 19       	sub	r24, r11
    1d14:	6f 2d       	mov	r22, r15
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1d1c:	8c e1       	ldi	r24, 0x1C	; 28
    1d1e:	8b 19       	sub	r24, r11
    1d20:	6f 2d       	mov	r22, r15
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1d28:	8b e1       	ldi	r24, 0x1B	; 27
    1d2a:	8b 19       	sub	r24, r11
    1d2c:	6f 2d       	mov	r22, r15
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1d34:	8a e1       	ldi	r24, 0x1A	; 26
    1d36:	8b 19       	sub	r24, r11
    1d38:	6f 2d       	mov	r22, r15
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1d40:	89 e1       	ldi	r24, 0x19	; 25
    1d42:	8b 19       	sub	r24, r11
    1d44:	6f 2d       	mov	r22, r15
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0010){
    1d4c:	c1 fe       	sbrs	r12, 1
    1d4e:	24 c0       	rjmp	.+72     	; 0x1d98 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1d50:	61 2f       	mov	r22, r17
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	8e 2d       	mov	r24, r14
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1d5c:	61 2f       	mov	r22, r17
    1d5e:	6e 5f       	subi	r22, 0xFE	; 254
    1d60:	8e 2d       	mov	r24, r14
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1d68:	61 2f       	mov	r22, r17
    1d6a:	6d 5f       	subi	r22, 0xFD	; 253
    1d6c:	8e 2d       	mov	r24, r14
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1d74:	61 2f       	mov	r22, r17
    1d76:	6c 5f       	subi	r22, 0xFC	; 252
    1d78:	8e 2d       	mov	r24, r14
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1d80:	61 2f       	mov	r22, r17
    1d82:	6b 5f       	subi	r22, 0xFB	; 251
    1d84:	8e 2d       	mov	r24, r14
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1d8c:	61 2f       	mov	r22, r17
    1d8e:	6a 5f       	subi	r22, 0xFA	; 250
    1d90:	8e 2d       	mov	r24, r14
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0001){
    1d98:	c0 fe       	sbrs	r12, 0
    1d9a:	25 c0       	rjmp	.+74     	; 0x1de6 <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1d9c:	8b 2d       	mov	r24, r11
    1d9e:	80 95       	com	r24
    1da0:	81 5e       	subi	r24, 0xE1	; 225
    1da2:	61 2f       	mov	r22, r17
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1daa:	8d e1       	ldi	r24, 0x1D	; 29
    1dac:	8b 19       	sub	r24, r11
    1dae:	61 2f       	mov	r22, r17
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1db6:	8c e1       	ldi	r24, 0x1C	; 28
    1db8:	8b 19       	sub	r24, r11
    1dba:	61 2f       	mov	r22, r17
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1dc2:	8b e1       	ldi	r24, 0x1B	; 27
    1dc4:	8b 19       	sub	r24, r11
    1dc6:	61 2f       	mov	r22, r17
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1dce:	8a e1       	ldi	r24, 0x1A	; 26
    1dd0:	8b 19       	sub	r24, r11
    1dd2:	61 2f       	mov	r22, r17
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1dda:	89 e1       	ldi	r24, 0x19	; 25
    1ddc:	8b 19       	sub	r24, r11
    1dde:	61 2f       	mov	r22, r17
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}	
	if(isrobot){
    1de6:	aa 20       	and	r10, r10
    1de8:	e1 f1       	breq	.+120    	; 0x1e62 <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1dea:	bc e1       	ldi	r27, 0x1C	; 28
    1dec:	eb 2e       	mov	r14, r27
    1dee:	eb 18       	sub	r14, r11
    1df0:	a3 e0       	ldi	r26, 0x03	; 3
    1df2:	ca 2e       	mov	r12, r26
    1df4:	c1 0e       	add	r12, r17
    1df6:	8e 2d       	mov	r24, r14
    1df8:	6c 2d       	mov	r22, r12
    1dfa:	4a 2d       	mov	r20, r10
    1dfc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1e00:	fb e1       	ldi	r31, 0x1B	; 27
    1e02:	ff 2e       	mov	r15, r31
    1e04:	fb 18       	sub	r15, r11
    1e06:	8f 2d       	mov	r24, r15
    1e08:	6c 2d       	mov	r22, r12
    1e0a:	4a 2d       	mov	r20, r10
    1e0c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1e10:	01 2f       	mov	r16, r17
    1e12:	0c 5f       	subi	r16, 0xFC	; 252
    1e14:	8e 2d       	mov	r24, r14
    1e16:	60 2f       	mov	r22, r16
    1e18:	4a 2d       	mov	r20, r10
    1e1a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1e1e:	8f 2d       	mov	r24, r15
    1e20:	60 2f       	mov	r22, r16
    1e22:	4a 2d       	mov	r20, r10
    1e24:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		
		switch(orent){
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	88 16       	cp	r8, r24
    1e2c:	71 f0       	breq	.+28     	; 0x1e4a <printCell+0x208>
    1e2e:	88 16       	cp	r8, r24
    1e30:	40 f0       	brcs	.+16     	; 0x1e42 <printCell+0x200>
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	88 16       	cp	r8, r24
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <printCell+0x20e>
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	88 16       	cp	r8, r24
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <printCell+0x1fe>
    1e3e:	4a c0       	rjmp	.+148    	; 0x1ed4 <printCell+0x292>
    1e40:	0b c0       	rjmp	.+22     	; 0x1e58 <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1e42:	8d e1       	ldi	r24, 0x1D	; 29
    1e44:	8b 19       	sub	r24, r11
    1e46:	6c 2d       	mov	r22, r12
    1e48:	0a c0       	rjmp	.+20     	; 0x1e5e <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1e4a:	1b 5f       	subi	r17, 0xFB	; 251
    1e4c:	8e 2d       	mov	r24, r14
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    1e50:	8a e1       	ldi	r24, 0x1A	; 26
    1e52:	8b 19       	sub	r24, r11
    1e54:	60 2f       	mov	r22, r16
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    1e58:	1e 5f       	subi	r17, 0xFE	; 254
    1e5a:	8f 2d       	mov	r24, r15
    1e5c:	61 2f       	mov	r22, r17
    1e5e:	4a 2d       	mov	r20, r10
    1e60:	37 c0       	rjmp	.+110    	; 0x1ed0 <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    1e62:	77 20       	and	r7, r7
    1e64:	b9 f1       	breq	.+110    	; 0x1ed4 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1e66:	ec e1       	ldi	r30, 0x1C	; 28
    1e68:	ce 2e       	mov	r12, r30
    1e6a:	cb 18       	sub	r12, r11
    1e6c:	73 e0       	ldi	r23, 0x03	; 3
    1e6e:	e7 2e       	mov	r14, r23
    1e70:	e1 0e       	add	r14, r17
    1e72:	8c 2d       	mov	r24, r12
    1e74:	6e 2d       	mov	r22, r14
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1e7c:	0b e1       	ldi	r16, 0x1B	; 27
    1e7e:	0b 19       	sub	r16, r11
    1e80:	80 2f       	mov	r24, r16
    1e82:	6e 2d       	mov	r22, r14
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1e8a:	64 e0       	ldi	r22, 0x04	; 4
    1e8c:	f6 2e       	mov	r15, r22
    1e8e:	f1 0e       	add	r15, r17
    1e90:	8c 2d       	mov	r24, r12
    1e92:	6f 2d       	mov	r22, r15
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1e9a:	80 2f       	mov	r24, r16
    1e9c:	6f 2d       	mov	r22, r15
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1ea4:	8d e1       	ldi	r24, 0x1D	; 29
    1ea6:	8b 19       	sub	r24, r11
    1ea8:	6e 2d       	mov	r22, r14
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1eb0:	1b 5f       	subi	r17, 0xFB	; 251
    1eb2:	8c 2d       	mov	r24, r12
    1eb4:	61 2f       	mov	r22, r17
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    1ebc:	8a e1       	ldi	r24, 0x1A	; 26
    1ebe:	8b 19       	sub	r24, r11
    1ec0:	6f 2d       	mov	r22, r15
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    1ec8:	13 50       	subi	r17, 0x03	; 3
    1eca:	80 2f       	mov	r24, r16
    1ecc:	61 2f       	mov	r22, r17
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		}
}
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	bf 90       	pop	r11
    1ee2:	af 90       	pop	r10
    1ee4:	9f 90       	pop	r9
    1ee6:	8f 90       	pop	r8
    1ee8:	7f 90       	pop	r7
    1eea:	08 95       	ret

00001eec <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    1eec:	9f 92       	push	r9
    1eee:	af 92       	push	r10
    1ef0:	bf 92       	push	r11
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1f04:	80 91 ba 06 	lds	r24, 0x06BA
    1f08:	a8 2e       	mov	r10, r24
    1f0a:	a6 94       	lsr	r10
    1f0c:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    1f0e:	43 e0       	ldi	r20, 0x03	; 3
    1f10:	b4 2e       	mov	r11, r20
    1f12:	b8 22       	and	r11, r24
    1f14:	cc 24       	eor	r12, r12
    1f16:	dd 24       	eor	r13, r13
    1f18:	1e c0       	rjmp	.+60     	; 0x1f56 <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1f1a:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    1f1c:	fa 14       	cp	r15, r10
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <printMap+0x3a>
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	06 c0       	rjmp	.+12     	; 0x1f32 <printMap+0x46>
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	1b 15       	cp	r17, r11
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <printMap+0x46>
    1f2e:	21 e0       	ldi	r18, 0x01	; 1
    1f30:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    1f32:	6f 2d       	mov	r22, r15
    1f34:	41 2f       	mov	r20, r17
    1f36:	00 91 b8 05 	lds	r16, 0x05B8
    1f3a:	e9 2c       	mov	r14, r9
    1f3c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1f40:	1f 5f       	subi	r17, 0xFF	; 255
    1f42:	21 96       	adiw	r28, 0x01	; 1
    1f44:	14 30       	cpi	r17, 0x04	; 4
    1f46:	49 f7       	brne	.-46     	; 0x1f1a <printMap+0x2e>
    1f48:	08 94       	sec
    1f4a:	c1 1c       	adc	r12, r1
    1f4c:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1f4e:	84 e0       	ldi	r24, 0x04	; 4
    1f50:	c8 16       	cp	r12, r24
    1f52:	d1 04       	cpc	r13, r1
    1f54:	51 f0       	breq	.+20     	; 0x1f6a <printMap+0x7e>
    1f56:	fc 2c       	mov	r15, r12
    1f58:	e6 01       	movw	r28, r12
    1f5a:	cc 0f       	add	r28, r28
    1f5c:	dd 1f       	adc	r29, r29
    1f5e:	cc 0f       	add	r28, r28
    1f60:	dd 1f       	adc	r29, r29
    1f62:	c9 57       	subi	r28, 0x79	; 121
    1f64:	dc 4f       	sbci	r29, 0xFC	; 252
    1f66:	10 e0       	ldi	r17, 0x00	; 0
    1f68:	d8 cf       	rjmp	.-80     	; 0x1f1a <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	bf 90       	pop	r11
    1f7c:	af 90       	pop	r10
    1f7e:	9f 90       	pop	r9
    1f80:	08 95       	ret

00001f82 <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
    1f82:	1f 93       	push	r17
    1f84:	18 2f       	mov	r17, r24
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	
	// AT START: odometry is REALLY SMALL & odometryTrigger is at approx 343
	// Suggest breaking apart the IF case?
	if((odometry > odometryTrigger))
    1f86:	60 91 4f 07 	lds	r22, 0x074F
    1f8a:	70 91 50 07 	lds	r23, 0x0750
    1f8e:	80 91 51 07 	lds	r24, 0x0751
    1f92:	90 91 52 07 	lds	r25, 0x0752
    1f96:	20 91 9f 04 	lds	r18, 0x049F
    1f9a:	30 91 a0 04 	lds	r19, 0x04A0
    1f9e:	40 91 a1 04 	lds	r20, 0x04A1
    1fa2:	50 91 a2 04 	lds	r21, 0x04A2
    1fa6:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	5f e3       	ldi	r21, 0x3F	; 63
    1fb2:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1fb6:	2c ed       	ldi	r18, 0xDC	; 220
    1fb8:	38 eb       	ldi	r19, 0xB8	; 184
    1fba:	48 e0       	ldi	r20, 0x08	; 8
    1fbc:	5e e3       	ldi	r21, 0x3E	; 62
    1fbe:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    1fc2:	20 91 a3 05 	lds	r18, 0x05A3
    1fc6:	30 91 a4 05 	lds	r19, 0x05A4
    1fca:	40 91 a5 05 	lds	r20, 0x05A5
    1fce:	50 91 a6 05 	lds	r21, 0x05A6
    1fd2:	0e 94 19 32 	call	0x6432	; 0x6432 <__gesf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	bc f4       	brge	.+46     	; 0x2008 <checkOdometry+0x86>
	{
		odometryFlag = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	80 93 c2 06 	sts	0x06C2, r24
		odometryStepL = 0;
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e0       	ldi	r26, 0x00	; 0
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	80 93 4f 07 	sts	0x074F, r24
    1fec:	90 93 50 07 	sts	0x0750, r25
    1ff0:	a0 93 51 07 	sts	0x0751, r26
    1ff4:	b0 93 52 07 	sts	0x0752, r27
		odometryStepR = 0;
    1ff8:	80 93 9f 04 	sts	0x049F, r24
    1ffc:	90 93 a0 04 	sts	0x04A0, r25
    2000:	a0 93 a1 04 	sts	0x04A1, r26
    2004:	b0 93 a2 04 	sts	0x04A2, r27
	}
	if (reset){
    2008:	11 23       	and	r17, r17
    200a:	d9 f0       	breq	.+54     	; 0x2042 <checkOdometry+0xc0>
		STEPPER_set_steps(STEPPER_BOTH,0);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 12 22 	call	0x4424	; 0x4424 <STEPPER_set_steps>
		odometryFlag = 0;
    2016:	10 92 c2 06 	sts	0x06C2, r1
		odometryStepL = 0;
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	80 93 4f 07 	sts	0x074F, r24
    2026:	90 93 50 07 	sts	0x0750, r25
    202a:	a0 93 51 07 	sts	0x0751, r26
    202e:	b0 93 52 07 	sts	0x0752, r27
		odometryStepR = 0;
    2032:	80 93 9f 04 	sts	0x049F, r24
    2036:	90 93 a0 04 	sts	0x04A0, r25
    203a:	a0 93 a1 04 	sts	0x04A1, r26
    203e:	b0 93 a2 04 	sts	0x04A2, r27
	
	// // Else the flag RESETS to ZERO?!
	// else{
		// odometryFlag = 0;
	// }
}
    2042:	1f 91       	pop	r17
    2044:	08 95       	ret

00002046 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2046:	0e 94 3a 24 	call	0x4874	; 0x4874 <ATTINY_open>
    204a:	90 93 9e 04 	sts	0x049E, r25
    204e:	80 93 9d 04 	sts	0x049D, r24
	LEopstat = LED_open(); //open the LED module
    2052:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <LED_open>
    2056:	90 93 9c 04 	sts	0x049C, r25
    205a:	80 93 9b 04 	sts	0x049B, r24
	LCopstat = LCD_open(); //open the LCD module
    205e:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <LCD_open>
    2062:	90 93 9a 04 	sts	0x049A, r25
    2066:	80 93 99 04 	sts	0x0499, r24
	STEPPER_open(); // Open STEPPER module for use
    206a:	0e 94 36 21 	call	0x426c	; 0x426c <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <SPKR_open>
	
	LED_open();
    2074:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <LED_open>
	I2C_open();
    2078:	0e 94 94 25 	call	0x4b28	; 0x4b28 <I2C_open>
	ADC_open();//open the ADC module
    207c:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    2086:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <checkIR>
	prefilter(1);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    2090:	8f ee       	ldi	r24, 0xEF	; 239
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a5 e8       	ldi	r26, 0x85	; 133
    2096:	b1 e4       	ldi	r27, 0x41	; 65
    2098:	80 93 a3 05 	sts	0x05A3, r24
    209c:	90 93 a4 05 	sts	0x05A4, r25
    20a0:	a0 93 a5 05 	sts	0x05A5, r26
    20a4:	b0 93 a6 05 	sts	0x05A6, r27
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	0a c0       	rjmp	.+20     	; 0x20c2 <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    20ae:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	80 32       	cpi	r24, 0x20	; 32
    20b4:	91 05       	cpc	r25, r1
    20b6:	d9 f7       	brne	.-10     	; 0x20ae <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	24 30       	cpi	r18, 0x04	; 4
    20be:	31 05       	cpc	r19, r1
    20c0:	59 f0       	breq	.+22     	; 0x20d8 <initializeRobot+0x92>
    20c2:	f9 01       	movw	r30, r18
    20c4:	55 e0       	ldi	r21, 0x05	; 5
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	5a 95       	dec	r21
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <initializeRobot+0x80>
    20ce:	ea 5c       	subi	r30, 0xCA	; 202
    20d0:	f9 4f       	sbci	r31, 0xF9	; 249
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	eb cf       	rjmp	.-42     	; 0x20ae <initializeRobot+0x68>
    20d8:	08 95       	ret

000020da <fourNeighborSearch>:
* Output Return:	unsigned char
* Overview:			searches the four-neighboring cells in the 
*					wavefront map
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	28 2f       	mov	r18, r24
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    20e0:	38 2f       	mov	r19, r24
    20e2:	36 95       	lsr	r19
    20e4:	36 95       	lsr	r19
	unsigned char curCol = (curCell&0b0011);
    20e6:	68 2f       	mov	r22, r24
    20e8:	63 70       	andi	r22, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 0){
    20ea:	c3 2f       	mov	r28, r19
    20ec:	d0 e0       	ldi	r29, 0x00	; 0
    20ee:	46 2f       	mov	r20, r22
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	de 01       	movw	r26, r28
    20f4:	aa 0f       	add	r26, r26
    20f6:	bb 1f       	adc	r27, r27
    20f8:	aa 0f       	add	r26, r26
    20fa:	bb 1f       	adc	r27, r27
    20fc:	fd 01       	movw	r30, r26
    20fe:	e4 0f       	add	r30, r20
    2100:	f5 1f       	adc	r31, r21
    2102:	ee 5e       	subi	r30, 0xEE	; 238
    2104:	fb 4f       	sbci	r31, 0xFB	; 251
    2106:	80 81       	ld	r24, Z
    2108:	88 23       	and	r24, r24
    210a:	11 f4       	brne	.+4      	; 0x2110 <fourNeighborSearch+0x36>
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	3f c1       	rjmp	.+638    	; 0x238e <fourNeighborSearch+0x2b4>
	
	// Perform a 4-neighbor search and store the lowest value
	// Robot in four-corners (2-neighbors to worry about)
	
	// Top-left corner
	if(curCell==0b0000){
    2110:	22 23       	and	r18, r18
    2112:	a1 f4       	brne	.+40     	; 0x213c <fourNeighborSearch+0x62>
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
		if(rightVal<botVal){
    2114:	ae 5e       	subi	r26, 0xEE	; 238
    2116:	bb 4f       	sbci	r27, 0xFB	; 251
    2118:	a4 0f       	add	r26, r20
    211a:	b5 1f       	adc	r27, r21
    211c:	fe 01       	movw	r30, r28
    211e:	31 96       	adiw	r30, 0x01	; 1
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	e4 0f       	add	r30, r20
    212a:	f5 1f       	adc	r31, r21
    212c:	ee 5e       	subi	r30, 0xEE	; 238
    212e:	fb 4f       	sbci	r31, 0xFB	; 251
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	9c 91       	ld	r25, X
    2134:	80 81       	ld	r24, Z
    2136:	98 17       	cp	r25, r24
    2138:	c0 f4       	brcc	.+48     	; 0x216a <fourNeighborSearch+0x90>
    213a:	2e c0       	rjmp	.+92     	; 0x2198 <fourNeighborSearch+0xbe>
			nextOrientation = SOUTH;
		}
	}
	
	// Top-right corner
	if(curCell==0b0011){
    213c:	23 30       	cpi	r18, 0x03	; 3
    213e:	b9 f4       	brne	.+46     	; 0x216e <fourNeighborSearch+0x94>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
		if(leftVal<botVal){
    2140:	a4 0f       	add	r26, r20
    2142:	b5 1f       	adc	r27, r21
    2144:	af 5e       	subi	r26, 0xEF	; 239
    2146:	bb 4f       	sbci	r27, 0xFB	; 251
    2148:	fe 01       	movw	r30, r28
    214a:	31 96       	adiw	r30, 0x01	; 1
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	e4 0f       	add	r30, r20
    2156:	f5 1f       	adc	r31, r21
    2158:	ee 5e       	subi	r30, 0xEE	; 238
    215a:	fb 4f       	sbci	r31, 0xFB	; 251
    215c:	9c 91       	ld	r25, X
    215e:	80 81       	ld	r24, Z
    2160:	98 17       	cp	r25, r24
    2162:	18 f4       	brcc	.+6      	; 0x216a <fourNeighborSearch+0x90>
			minVal=leftVal;
			nextOrientation = WEST;
    2164:	20 93 b9 05 	sts	0x05B9, r18
    2168:	34 c0       	rjmp	.+104    	; 0x21d2 <fourNeighborSearch+0xf8>
		}
		else{
			minVal=botVal;
			nextOrientation = SOUTH;
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	16 c0       	rjmp	.+44     	; 0x219a <fourNeighborSearch+0xc0>
		}
	}
	
	// Bottom-left corner
	if(curCell==0b1100){
    216e:	2c 30       	cpi	r18, 0x0C	; 12
    2170:	d1 f4       	brne	.+52     	; 0x21a6 <fourNeighborSearch+0xcc>
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
		if(rightVal<topVal){
    2172:	ae 5e       	subi	r26, 0xEE	; 238
    2174:	bb 4f       	sbci	r27, 0xFB	; 251
    2176:	a4 0f       	add	r26, r20
    2178:	b5 1f       	adc	r27, r21
    217a:	fe 01       	movw	r30, r28
    217c:	31 97       	sbiw	r30, 0x01	; 1
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	e4 0f       	add	r30, r20
    2188:	f5 1f       	adc	r31, r21
    218a:	ee 5e       	subi	r30, 0xEE	; 238
    218c:	fb 4f       	sbci	r31, 0xFB	; 251
    218e:	11 96       	adiw	r26, 0x01	; 1
    2190:	9c 91       	ld	r25, X
    2192:	80 81       	ld	r24, Z
    2194:	98 17       	cp	r25, r24
    2196:	20 f4       	brcc	.+8      	; 0x21a0 <fourNeighborSearch+0xc6>
			minVal=rightVal;
			nextOrientation = EAST;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	80 93 b9 05 	sts	0x05B9, r24
    219e:	19 c0       	rjmp	.+50     	; 0x21d2 <fourNeighborSearch+0xf8>
		}
		else{
			minVal=topVal;
			nextOrientation = NORTH;
    21a0:	10 92 b9 05 	sts	0x05B9, r1
    21a4:	16 c0       	rjmp	.+44     	; 0x21d2 <fourNeighborSearch+0xf8>
		}
	}
	
	// Bottom-right corner
	if(curCell==0b1111){
    21a6:	2f 30       	cpi	r18, 0x0F	; 15
    21a8:	a1 f4       	brne	.+40     	; 0x21d2 <fourNeighborSearch+0xf8>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
		if(leftVal<topVal){
    21aa:	a4 0f       	add	r26, r20
    21ac:	b5 1f       	adc	r27, r21
    21ae:	af 5e       	subi	r26, 0xEF	; 239
    21b0:	bb 4f       	sbci	r27, 0xFB	; 251
    21b2:	21 97       	sbiw	r28, 0x01	; 1
    21b4:	cc 0f       	add	r28, r28
    21b6:	dd 1f       	adc	r29, r29
    21b8:	cc 0f       	add	r28, r28
    21ba:	dd 1f       	adc	r29, r29
    21bc:	c4 0f       	add	r28, r20
    21be:	d5 1f       	adc	r29, r21
    21c0:	ce 5e       	subi	r28, 0xEE	; 238
    21c2:	db 4f       	sbci	r29, 0xFB	; 251
    21c4:	9c 91       	ld	r25, X
    21c6:	88 81       	ld	r24, Y
    21c8:	98 17       	cp	r25, r24
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <fourNeighborSearch+0xf4>
    21cc:	b7 c0       	rjmp	.+366    	; 0x233c <fourNeighborSearch+0x262>
			minVal=leftVal;
			nextOrientation = WEST;
    21ce:	83 e0       	ldi	r24, 0x03	; 3
    21d0:	db c0       	rjmp	.+438    	; 0x2388 <fourNeighborSearch+0x2ae>
			nextOrientation = NORTH;
		}
	}
	
	// Robot on top boundary of world (row = 0)
	else if(curRow == 0){
    21d2:	33 23       	and	r19, r19
    21d4:	e9 f4       	brne	.+58     	; 0x2210 <fourNeighborSearch+0x136>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
    21d6:	fe 01       	movw	r30, r28
    21d8:	ee 0f       	add	r30, r30
    21da:	ff 1f       	adc	r31, r31
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	ee 5e       	subi	r30, 0xEE	; 238
    21e2:	fb 4f       	sbci	r31, 0xFB	; 251
    21e4:	e4 0f       	add	r30, r20
    21e6:	f5 1f       	adc	r31, r21
    21e8:	22 91       	ld	r18, -Z
    21ea:	31 96       	adiw	r30, 0x01	; 1
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
    21ee:	21 96       	adiw	r28, 0x01	; 1
    21f0:	cc 0f       	add	r28, r28
    21f2:	dd 1f       	adc	r29, r29
    21f4:	cc 0f       	add	r28, r28
    21f6:	dd 1f       	adc	r29, r29
    21f8:	c4 0f       	add	r28, r20
    21fa:	d5 1f       	adc	r29, r21
    21fc:	ce 5e       	subi	r28, 0xEE	; 238
    21fe:	db 4f       	sbci	r29, 0xFB	; 251
    2200:	88 81       	ld	r24, Y
		if((leftVal<rightVal)&&(leftVal<botVal)){
			minVal = leftVal;
			nextOrientation = WEST;
		}
		if((rightVal<leftVal)&&(rightVal<botVal)){
    2202:	92 17       	cp	r25, r18
    2204:	08 f0       	brcs	.+2      	; 0x2208 <fourNeighborSearch+0x12e>
    2206:	bd c0       	rjmp	.+378    	; 0x2382 <fourNeighborSearch+0x2a8>
    2208:	98 17       	cp	r25, r24
    220a:	08 f0       	brcs	.+2      	; 0x220e <fourNeighborSearch+0x134>
    220c:	ba c0       	rjmp	.+372    	; 0x2382 <fourNeighborSearch+0x2a8>
    220e:	bb c0       	rjmp	.+374    	; 0x2386 <fourNeighborSearch+0x2ac>
		}
		
	}
	
	// Robot on left boundary of world (col = 0)
	else if(curCol == 0){
    2210:	66 23       	and	r22, r22
    2212:	31 f5       	brne	.+76     	; 0x2260 <fourNeighborSearch+0x186>
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
    2214:	fe 01       	movw	r30, r28
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	ee 5e       	subi	r30, 0xEE	; 238
    2220:	fb 4f       	sbci	r31, 0xFB	; 251
    2222:	e4 0f       	add	r30, r20
    2224:	f5 1f       	adc	r31, r21
    2226:	91 81       	ldd	r25, Z+1	; 0x01
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
    2228:	21 96       	adiw	r28, 0x01	; 1
    222a:	fe 01       	movw	r30, r28
    222c:	ee 0f       	add	r30, r30
    222e:	ff 1f       	adc	r31, r31
    2230:	ee 0f       	add	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	e4 0f       	add	r30, r20
    2236:	f5 1f       	adc	r31, r21
    2238:	ee 5e       	subi	r30, 0xEE	; 238
    223a:	fb 4f       	sbci	r31, 0xFB	; 251
    223c:	e0 81       	ld	r30, Z
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
    223e:	22 97       	sbiw	r28, 0x02	; 2
    2240:	cc 0f       	add	r28, r28
    2242:	dd 1f       	adc	r29, r29
    2244:	cc 0f       	add	r28, r28
    2246:	dd 1f       	adc	r29, r29
    2248:	c4 0f       	add	r28, r20
    224a:	d5 1f       	adc	r29, r21
    224c:	ce 5e       	subi	r28, 0xEE	; 238
    224e:	db 4f       	sbci	r29, 0xFB	; 251
    2250:	88 81       	ld	r24, Y
		if((rightVal<botVal)&&(rightVal<topVal)){
			minVal = rightVal;
			nextOrientation = EAST;
		}
		if((botVal<rightVal)&&(botVal<topVal)){
    2252:	e9 17       	cp	r30, r25
    2254:	08 f0       	brcs	.+2      	; 0x2258 <fourNeighborSearch+0x17e>
    2256:	72 c0       	rjmp	.+228    	; 0x233c <fourNeighborSearch+0x262>
    2258:	e8 17       	cp	r30, r24
    225a:	08 f0       	brcs	.+2      	; 0x225e <fourNeighborSearch+0x184>
    225c:	6f c0       	rjmp	.+222    	; 0x233c <fourNeighborSearch+0x262>
    225e:	91 c0       	rjmp	.+290    	; 0x2382 <fourNeighborSearch+0x2a8>
			nextOrientation = NORTH;
		}
	}
	
	// Robot on bottom boundary of world (row = 3)
	else if(curRow == 3){
    2260:	33 30       	cpi	r19, 0x03	; 3
    2262:	09 f0       	breq	.+2      	; 0x2266 <fourNeighborSearch+0x18c>
    2264:	44 c0       	rjmp	.+136    	; 0x22ee <fourNeighborSearch+0x214>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
    2266:	41 50       	subi	r20, 0x01	; 1
    2268:	50 40       	sbci	r21, 0x00	; 0
    226a:	de 01       	movw	r26, r28
    226c:	aa 0f       	add	r26, r26
    226e:	bb 1f       	adc	r27, r27
    2270:	aa 0f       	add	r26, r26
    2272:	bb 1f       	adc	r27, r27
    2274:	cd 01       	movw	r24, r26
    2276:	84 0f       	add	r24, r20
    2278:	95 1f       	adc	r25, r21
    227a:	4f 5f       	subi	r20, 0xFF	; 255
    227c:	5f 4f       	sbci	r21, 0xFF	; 255
    227e:	fc 01       	movw	r30, r24
    2280:	ee 5e       	subi	r30, 0xEE	; 238
    2282:	fb 4f       	sbci	r31, 0xFB	; 251
    2284:	30 81       	ld	r19, Z
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
    2286:	ba 01       	movw	r22, r20
    2288:	6f 5f       	subi	r22, 0xFF	; 255
    228a:	7f 4f       	sbci	r23, 0xFF	; 255
    228c:	a6 0f       	add	r26, r22
    228e:	b7 1f       	adc	r27, r23
    2290:	ae 5e       	subi	r26, 0xEE	; 238
    2292:	bb 4f       	sbci	r27, 0xFB	; 251
    2294:	2c 91       	ld	r18, X
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
    2296:	de 01       	movw	r26, r28
    2298:	11 97       	sbiw	r26, 0x01	; 1
    229a:	fd 01       	movw	r30, r26
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	e4 0f       	add	r30, r20
    22a6:	f5 1f       	adc	r31, r21
    22a8:	ee 5e       	subi	r30, 0xEE	; 238
    22aa:	fb 4f       	sbci	r31, 0xFB	; 251
    22ac:	e0 81       	ld	r30, Z
		if((leftVal<rightVal)&&(leftVal<topVal)){
    22ae:	32 17       	cp	r19, r18
    22b0:	30 f4       	brcc	.+12     	; 0x22be <fourNeighborSearch+0x1e4>
    22b2:	3e 17       	cp	r19, r30
    22b4:	20 f4       	brcc	.+8      	; 0x22be <fourNeighborSearch+0x1e4>
			minVal = leftVal;
			return minInd=WORLD_CELL[curRow][curCol-1];
    22b6:	89 56       	subi	r24, 0x69	; 105
    22b8:	9c 4f       	sbci	r25, 0xFC	; 252
    22ba:	ec 01       	movw	r28, r24
    22bc:	0c c0       	rjmp	.+24     	; 0x22d6 <fourNeighborSearch+0x1fc>
		}
		if((rightVal<leftVal)&&(rightVal<topVal)){
    22be:	23 17       	cp	r18, r19
    22c0:	60 f4       	brcc	.+24     	; 0x22da <fourNeighborSearch+0x200>
    22c2:	2e 17       	cp	r18, r30
    22c4:	50 f4       	brcc	.+20     	; 0x22da <fourNeighborSearch+0x200>
			minVal = rightVal;
			return minInd=WORLD_CELL[curRow][curCol+1];
    22c6:	cc 0f       	add	r28, r28
    22c8:	dd 1f       	adc	r29, r29
    22ca:	cc 0f       	add	r28, r28
    22cc:	dd 1f       	adc	r29, r29
    22ce:	c6 0f       	add	r28, r22
    22d0:	d7 1f       	adc	r29, r23
    22d2:	c9 56       	subi	r28, 0x69	; 105
    22d4:	dc 4f       	sbci	r29, 0xFC	; 252
    22d6:	88 81       	ld	r24, Y
    22d8:	5a c0       	rjmp	.+180    	; 0x238e <fourNeighborSearch+0x2b4>
		}
		else{
			minVal = topVal;
			return minInd=WORLD_CELL[curRow-1][curCol]; 
    22da:	aa 0f       	add	r26, r26
    22dc:	bb 1f       	adc	r27, r27
    22de:	aa 0f       	add	r26, r26
    22e0:	bb 1f       	adc	r27, r27
    22e2:	a4 0f       	add	r26, r20
    22e4:	b5 1f       	adc	r27, r21
    22e6:	a9 56       	subi	r26, 0x69	; 105
    22e8:	bc 4f       	sbci	r27, 0xFC	; 252
    22ea:	8c 91       	ld	r24, X
    22ec:	50 c0       	rjmp	.+160    	; 0x238e <fourNeighborSearch+0x2b4>
    22ee:	9e 01       	movw	r18, r28
    22f0:	22 0f       	add	r18, r18
    22f2:	33 1f       	adc	r19, r19
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	de 01       	movw	r26, r28
    22fa:	11 96       	adiw	r26, 0x01	; 1
    22fc:	fe 01       	movw	r30, r28
    22fe:	31 97       	sbiw	r30, 0x01	; 1
		}
	}
	
	// Robot on right boundary of world (col = 3)
	else if(curCol == 3){
    2300:	63 30       	cpi	r22, 0x03	; 3
    2302:	f9 f4       	brne	.+62     	; 0x2342 <fourNeighborSearch+0x268>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
    2304:	24 0f       	add	r18, r20
    2306:	35 1f       	adc	r19, r21
    2308:	2f 5e       	subi	r18, 0xEF	; 239
    230a:	3b 4f       	sbci	r19, 0xFB	; 251
    230c:	e9 01       	movw	r28, r18
    230e:	88 81       	ld	r24, Y
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	e4 0f       	add	r30, r20
    231a:	f5 1f       	adc	r31, r21
    231c:	ee 5e       	subi	r30, 0xEE	; 238
    231e:	fb 4f       	sbci	r31, 0xFB	; 251
    2320:	e0 81       	ld	r30, Z
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
    2322:	aa 0f       	add	r26, r26
    2324:	bb 1f       	adc	r27, r27
    2326:	aa 0f       	add	r26, r26
    2328:	bb 1f       	adc	r27, r27
    232a:	a4 0f       	add	r26, r20
    232c:	b5 1f       	adc	r27, r21
    232e:	ae 5e       	subi	r26, 0xEE	; 238
    2330:	bb 4f       	sbci	r27, 0xFB	; 251
    2332:	9c 91       	ld	r25, X
		if((leftVal<topVal)&&(leftVal<botVal)){
			minVal = leftVal;
			nextOrientation = WEST;
		}
		if((topVal<leftVal)&&(topVal<botVal)){
    2334:	e8 17       	cp	r30, r24
    2336:	28 f5       	brcc	.+74     	; 0x2382 <fourNeighborSearch+0x2a8>
    2338:	e9 17       	cp	r30, r25
    233a:	18 f5       	brcc	.+70     	; 0x2382 <fourNeighborSearch+0x2a8>
			minVal = topVal;
			nextOrientation = NORTH;
    233c:	10 92 b9 05 	sts	0x05B9, r1
    2340:	25 c0       	rjmp	.+74     	; 0x238c <fourNeighborSearch+0x2b2>
		}
	}
	
	// // Else the robot is inside the world with four-neighboring cells
	else{
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	e4 0f       	add	r30, r20
    234c:	f5 1f       	adc	r31, r21
    234e:	ee 5e       	subi	r30, 0xEE	; 238
    2350:	fb 4f       	sbci	r31, 0xFB	; 251
    2352:	60 81       	ld	r22, Z
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
    2354:	f9 01       	movw	r30, r18
    2356:	ee 5e       	subi	r30, 0xEE	; 238
    2358:	fb 4f       	sbci	r31, 0xFB	; 251
    235a:	e4 0f       	add	r30, r20
    235c:	f5 1f       	adc	r31, r21
    235e:	22 91       	ld	r18, -Z
    2360:	31 96       	adiw	r30, 0x01	; 1
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
    2362:	aa 0f       	add	r26, r26
    2364:	bb 1f       	adc	r27, r27
    2366:	aa 0f       	add	r26, r26
    2368:	bb 1f       	adc	r27, r27
    236a:	a4 0f       	add	r26, r20
    236c:	b5 1f       	adc	r27, r21
    236e:	ae 5e       	subi	r26, 0xEE	; 238
    2370:	bb 4f       	sbci	r27, 0xFB	; 251
    2372:	9c 91       	ld	r25, X
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
    2374:	81 81       	ldd	r24, Z+1	; 0x01
		}
		if((leftVal<topVal)&&(leftVal<botVal)&&(leftVal<rightVal)){
			minVal = leftVal;
			nextOrientation = WEST;
		}
		if((botVal<topVal)&&(botVal<leftVal)&&(botVal<rightVal)){
    2376:	96 17       	cp	r25, r22
    2378:	30 f4       	brcc	.+12     	; 0x2386 <fourNeighborSearch+0x2ac>
    237a:	92 17       	cp	r25, r18
    237c:	20 f4       	brcc	.+8      	; 0x2386 <fourNeighborSearch+0x2ac>
    237e:	98 17       	cp	r25, r24
    2380:	10 f4       	brcc	.+4      	; 0x2386 <fourNeighborSearch+0x2ac>
			minVal = botVal;
			nextOrientation = SOUTH;
    2382:	82 e0       	ldi	r24, 0x02	; 2
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <fourNeighborSearch+0x2ae>
		}
		else{
			minVal = rightVal;
			nextOrientation = EAST;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	80 93 b9 05 	sts	0x05B9, r24
    238c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
void wavefrontMake(void)
{
    2394:	8f 92       	push	r8
    2396:	9f 92       	push	r9
    2398:	bf 92       	push	r11
    239a:	cf 92       	push	r12
    239c:	df 92       	push	r13
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
	// User-defined goal location
	// unsigned char goalLocation = currentGoalWorld;
	// Extract x and y goal location
	int rowGoal = (currentGoalWorld>>2);
    23aa:	90 91 29 05 	lds	r25, 0x0529
    23ae:	89 2f       	mov	r24, r25
    23b0:	86 95       	lsr	r24
    23b2:	86 95       	lsr	r24
    23b4:	c8 2e       	mov	r12, r24
    23b6:	dd 24       	eor	r13, r13
	int colGoal = (currentGoalWorld&0b0011);
    23b8:	e9 2e       	mov	r14, r25
    23ba:	ff 24       	eor	r15, r15
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	e8 22       	and	r14, r24
    23c0:	ff 24       	eor	r15, r15
    23c2:	c0 e0       	ldi	r28, 0x00	; 0
    23c4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
				ROBOT_METRIC_WORLD[row][col] = 99;
    23c6:	43 e6       	ldi	r20, 0x63	; 99
    23c8:	b4 2e       	mov	r11, r20
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <wavefrontMake+0xb6>
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
    23cc:	d8 01       	movw	r26, r16
    23ce:	8c 91       	ld	r24, X
    23d0:	8f 30       	cpi	r24, 0x0F	; 15
    23d2:	11 f4       	brne	.+4      	; 0x23d8 <wavefrontMake+0x44>
				ROBOT_METRIC_WORLD[row][col] = 99;
    23d4:	b0 82       	st	Z, r11
    23d6:	2a c0       	rjmp	.+84     	; 0x242c <wavefrontMake+0x98>
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs((WORLD_CELL[row][col]>>2) - rowGoal);
    23d8:	d4 01       	movw	r26, r8
    23da:	9c 91       	ld	r25, X
    23dc:	89 2f       	mov	r24, r25
    23de:	86 95       	lsr	r24
    23e0:	86 95       	lsr	r24
    23e2:	48 2f       	mov	r20, r24
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	4c 19       	sub	r20, r12
    23e8:	5d 09       	sbc	r21, r13
    23ea:	57 ff       	sbrs	r21, 7
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <wavefrontMake+0x60>
    23ee:	50 95       	com	r21
    23f0:	41 95       	neg	r20
    23f2:	5f 4f       	sbci	r21, 0xFF	; 255
				colDelta = abs((WORLD_CELL[row][col]&0b0011) - colGoal);
    23f4:	29 2f       	mov	r18, r25
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	23 70       	andi	r18, 0x03	; 3
    23fa:	30 70       	andi	r19, 0x00	; 0
    23fc:	2e 19       	sub	r18, r14
    23fe:	3f 09       	sbc	r19, r15
    2400:	37 ff       	sbrs	r19, 7
    2402:	03 c0       	rjmp	.+6      	; 0x240a <wavefrontMake+0x76>
    2404:	30 95       	com	r19
    2406:	21 95       	neg	r18
    2408:	3f 4f       	sbci	r19, 0xFF	; 255
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
    240a:	22 9f       	mul	r18, r18
    240c:	c0 01       	movw	r24, r0
    240e:	23 9f       	mul	r18, r19
    2410:	90 0d       	add	r25, r0
    2412:	32 9f       	mul	r19, r18
    2414:	90 0d       	add	r25, r0
    2416:	11 24       	eor	r1, r1
    2418:	44 9f       	mul	r20, r20
    241a:	90 01       	movw	r18, r0
    241c:	45 9f       	mul	r20, r21
    241e:	30 0d       	add	r19, r0
    2420:	54 9f       	mul	r21, r20
    2422:	30 0d       	add	r19, r0
    2424:	11 24       	eor	r1, r1
    2426:	82 0f       	add	r24, r18
    2428:	93 1f       	adc	r25, r19
    242a:	80 83       	st	Z, r24
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
    242c:	6f 5f       	subi	r22, 0xFF	; 255
    242e:	7f 4f       	sbci	r23, 0xFF	; 255
    2430:	0f 5f       	subi	r16, 0xFF	; 255
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	31 96       	adiw	r30, 0x01	; 1
    2436:	08 94       	sec
    2438:	81 1c       	adc	r8, r1
    243a:	91 1c       	adc	r9, r1
    243c:	64 30       	cpi	r22, 0x04	; 4
    243e:	71 05       	cpc	r23, r1
    2440:	29 f6       	brne	.-118    	; 0x23cc <wavefrontMake+0x38>
	unsigned int rowDelta, colDelta;
	int row, col;
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
    2442:	21 96       	adiw	r28, 0x01	; 1
    2444:	c4 30       	cpi	r28, 0x04	; 4
    2446:	d1 05       	cpc	r29, r1
    2448:	a1 f0       	breq	.+40     	; 0x2472 <wavefrontMake+0xde>
    244a:	ce 01       	movw	r24, r28
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	8c 01       	movw	r16, r24
    2456:	09 57       	subi	r16, 0x79	; 121
    2458:	1c 4f       	sbci	r17, 0xFC	; 252
    245a:	fc 01       	movw	r30, r24
    245c:	ee 5e       	subi	r30, 0xEE	; 238
    245e:	fb 4f       	sbci	r31, 0xFB	; 251
    2460:	27 e9       	ldi	r18, 0x97	; 151
    2462:	82 2e       	mov	r8, r18
    2464:	23 e0       	ldi	r18, 0x03	; 3
    2466:	92 2e       	mov	r9, r18
    2468:	88 0e       	add	r8, r24
    246a:	99 1e       	adc	r9, r25
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	ad cf       	rjmp	.-166    	; 0x23cc <wavefrontMake+0x38>
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
			}
		}
	}
}
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	df 90       	pop	r13
    2480:	cf 90       	pop	r12
    2482:	bf 90       	pop	r11
    2484:	9f 90       	pop	r9
    2486:	8f 90       	pop	r8
    2488:	08 95       	ret

0000248a <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    2492:	60 91 1b 05 	lds	r22, 0x051B
    2496:	70 91 1c 05 	lds	r23, 0x051C
    249a:	80 91 1d 05 	lds	r24, 0x051D
    249e:	90 91 1e 05 	lds	r25, 0x051E
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e5       	ldi	r20, 0x50	; 80
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    24ae:	f8 2e       	mov	r15, r24
    24b0:	ff 1c       	adc	r15, r15
    24b2:	ff 24       	eor	r15, r15
    24b4:	ff 1c       	adc	r15, r15
    24b6:	ff 0c       	add	r15, r15
    24b8:	ff 0c       	add	r15, r15
    24ba:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    24bc:	60 91 be 06 	lds	r22, 0x06BE
    24c0:	70 91 bf 06 	lds	r23, 0x06BF
    24c4:	80 91 c0 06 	lds	r24, 0x06C0
    24c8:	90 91 c1 06 	lds	r25, 0x06C1
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 ef       	ldi	r20, 0xF0	; 240
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    24d8:	08 2f       	mov	r16, r24
    24da:	00 1f       	adc	r16, r16
    24dc:	00 27       	eor	r16, r16
    24de:	00 1f       	adc	r16, r16
    24e0:	00 0f       	add	r16, r16
    24e2:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    24e4:	60 91 25 05 	lds	r22, 0x0525
    24e8:	70 91 26 05 	lds	r23, 0x0526
    24ec:	80 91 27 05 	lds	r24, 0x0527
    24f0:	90 91 28 05 	lds	r25, 0x0528
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4c e0       	ldi	r20, 0x0C	; 12
    24fa:	52 e4       	ldi	r21, 0x42	; 66
    24fc:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    2500:	18 2f       	mov	r17, r24
    2502:	11 1f       	adc	r17, r17
    2504:	11 27       	eor	r17, r17
    2506:	11 1f       	adc	r17, r17
    2508:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    250a:	ee 24       	eor	r14, r14
    250c:	60 91 c3 06 	lds	r22, 0x06C3
    2510:	70 91 c4 06 	lds	r23, 0x06C4
    2514:	80 91 c5 06 	lds	r24, 0x06C5
    2518:	90 91 c6 06 	lds	r25, 0x06C6
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 ef       	ldi	r20, 0xF0	; 240
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    2528:	88 23       	and	r24, r24
    252a:	14 f4       	brge	.+4      	; 0x2530 <checkWorld+0xa6>
    252c:	ee 24       	eor	r14, r14
    252e:	e3 94       	inc	r14
    2530:	8f 2d       	mov	r24, r15
    2532:	8e 0d       	add	r24, r14
    2534:	80 0f       	add	r24, r16
    2536:	81 0f       	add	r24, r17
    2538:	80 93 23 05 	sts	0x0523, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    253c:	20 91 24 05 	lds	r18, 0x0524
    2540:	e2 2f       	mov	r30, r18
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	e1 5c       	subi	r30, 0xC1	; 193
    2546:	f8 4f       	sbci	r31, 0xF8	; 248
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	90 93 2a 05 	sts	0x052A, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    254e:	89 17       	cp	r24, r25
    2550:	19 f4       	brne	.+6      	; 0x2558 <checkWorld+0xce>
		currentMoveWorld += 1;
    2552:	2f 5f       	subi	r18, 0xFF	; 255
    2554:	20 93 24 05 	sts	0x0524, r18
	}
}
    2558:	1f 91       	pop	r17
    255a:	0f 91       	pop	r16
    255c:	ff 90       	pop	r15
    255e:	ef 90       	pop	r14
    2560:	08 95       	ret

00002562 <moveWallOld>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWallOld( void )
{	
    2562:	2f 92       	push	r2
    2564:	3f 92       	push	r3
    2566:	4f 92       	push	r4
    2568:	5f 92       	push	r5
    256a:	6f 92       	push	r6
    256c:	7f 92       	push	r7
    256e:	8f 92       	push	r8
    2570:	9f 92       	push	r9
    2572:	af 92       	push	r10
    2574:	bf 92       	push	r11
    2576:	cf 92       	push	r12
    2578:	df 92       	push	r13
    257a:	ef 92       	push	r14
    257c:	ff 92       	push	r15
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    2582:	e0 90 1b 05 	lds	r14, 0x051B
    2586:	f0 90 1c 05 	lds	r15, 0x051C
    258a:	00 91 1d 05 	lds	r16, 0x051D
    258e:	10 91 1e 05 	lds	r17, 0x051E
    2592:	33 24       	eor	r3, r3
    2594:	c8 01       	movw	r24, r16
    2596:	b7 01       	movw	r22, r14
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	14 f4       	brge	.+4      	; 0x25ac <moveWallOld+0x4a>
    25a8:	33 24       	eor	r3, r3
    25aa:	33 94       	inc	r3
    25ac:	a0 90 c3 06 	lds	r10, 0x06C3
    25b0:	b0 90 c4 06 	lds	r11, 0x06C4
    25b4:	c0 90 c5 06 	lds	r12, 0x06C5
    25b8:	d0 90 c6 06 	lds	r13, 0x06C6
    25bc:	40 90 be 06 	lds	r4, 0x06BE
    25c0:	50 90 bf 06 	lds	r5, 0x06BF
    25c4:	60 90 c0 06 	lds	r6, 0x06C0
    25c8:	70 90 c1 06 	lds	r7, 0x06C1
    25cc:	88 24       	eor	r8, r8
    25ce:	60 91 25 05 	lds	r22, 0x0525
    25d2:	70 91 26 05 	lds	r23, 0x0526
    25d6:	80 91 27 05 	lds	r24, 0x0527
    25da:	90 91 28 05 	lds	r25, 0x0528
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e7       	ldi	r20, 0x70	; 112
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    25ea:	88 23       	and	r24, r24
    25ec:	14 f4       	brge	.+4      	; 0x25f2 <moveWallOld+0x90>
    25ee:	88 24       	eor	r8, r8
    25f0:	83 94       	inc	r8
    25f2:	93 2c       	mov	r9, r3
    25f4:	98 28       	or	r9, r8
    25f6:	88 24       	eor	r8, r8
    25f8:	c6 01       	movw	r24, r12
    25fa:	b5 01       	movw	r22, r10
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e7       	ldi	r20, 0x70	; 112
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    2608:	88 23       	and	r24, r24
    260a:	14 f4       	brge	.+4      	; 0x2610 <moveWallOld+0xae>
    260c:	88 24       	eor	r8, r8
    260e:	83 94       	inc	r8
    2610:	98 28       	or	r9, r8
    2612:	88 24       	eor	r8, r8
    2614:	c3 01       	movw	r24, r6
    2616:	b2 01       	movw	r22, r4
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e7       	ldi	r20, 0x70	; 112
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    2624:	88 23       	and	r24, r24
    2626:	14 f4       	brge	.+4      	; 0x262c <moveWallOld+0xca>
    2628:	88 24       	eor	r8, r8
    262a:	83 94       	inc	r8
    262c:	29 2c       	mov	r2, r9
    262e:	28 28       	or	r2, r8
	if(!isWall){	
    2630:	81 f4       	brne	.+32     	; 0x2652 <moveWallOld+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	9f e4       	ldi	r25, 0x4F	; 79
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	79 01       	movw	r14, r18
    2644:	8a 01       	movw	r16, r20
    2646:	59 01       	movw	r10, r18
    2648:	6a 01       	movw	r12, r20
    264a:	88 24       	eor	r8, r8
    264c:	0e 94 15 08 	call	0x102a	; 0x102a <move_arc_stnb>
    2650:	f7 c0       	rjmp	.+494    	; 0x2840 <moveWallOld+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2652:	c6 01       	movw	r24, r12
    2654:	b5 01       	movw	r22, r10
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e7       	ldi	r20, 0x70	; 112
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 19 32 	call	0x6432	; 0x6432 <__gesf2>
    2662:	18 16       	cp	r1, r24
    2664:	64 f4       	brge	.+24     	; 0x267e <moveWallOld+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a0 e4       	ldi	r26, 0x40	; 64
    266c:	b0 ec       	ldi	r27, 0xC0	; 192
    266e:	80 93 c3 06 	sts	0x06C3, r24
    2672:	90 93 c4 06 	sts	0x06C4, r25
    2676:	a0 93 c5 06 	sts	0x06C5, r26
    267a:	b0 93 c6 06 	sts	0x06C6, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    267e:	c3 01       	movw	r24, r6
    2680:	b2 01       	movw	r22, r4
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e7       	ldi	r20, 0x70	; 112
    2688:	51 e4       	ldi	r21, 0x41	; 65
    268a:	0e 94 19 32 	call	0x6432	; 0x6432 <__gesf2>
    268e:	18 16       	cp	r1, r24
    2690:	14 f0       	brlt	.+4      	; 0x2696 <moveWallOld+0x134>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	0d c0       	rjmp	.+26     	; 0x26b0 <moveWallOld+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	a0 e4       	ldi	r26, 0x40	; 64
    269c:	b0 ec       	ldi	r27, 0xC0	; 192
    269e:	80 93 be 06 	sts	0x06BE, r24
    26a2:	90 93 bf 06 	sts	0x06BF, r25
    26a6:	a0 93 c0 06 	sts	0x06C0, r26
    26aa:	b0 93 c1 06 	sts	0x06C1, r27
    26ae:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    26b0:	33 20       	and	r3, r3
    26b2:	21 f1       	breq	.+72     	; 0x26fc <moveWallOld+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    26b4:	88 23       	and	r24, r24
    26b6:	29 f0       	breq	.+10     	; 0x26c2 <moveWallOld+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	8a e7       	ldi	r24, 0x7A	; 122
    26be:	94 e4       	ldi	r25, 0x44	; 68
    26c0:	04 c0       	rjmp	.+8      	; 0x26ca <moveWallOld+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	8a e7       	ldi	r24, 0x7A	; 122
    26c8:	94 ec       	ldi	r25, 0xC4	; 196
    26ca:	a8 01       	movw	r20, r16
    26cc:	97 01       	movw	r18, r14
    26ce:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    26d2:	20 91 be 06 	lds	r18, 0x06BE
    26d6:	30 91 bf 06 	lds	r19, 0x06BF
    26da:	40 91 c0 06 	lds	r20, 0x06C0
    26de:	50 91 c1 06 	lds	r21, 0x06C1
    26e2:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    26e6:	9b 01       	movw	r18, r22
    26e8:	ac 01       	movw	r20, r24
    26ea:	60 91 c3 06 	lds	r22, 0x06C3
    26ee:	70 91 c4 06 	lds	r23, 0x06C4
    26f2:	80 91 c5 06 	lds	r24, 0x06C5
    26f6:	90 91 c6 06 	lds	r25, 0x06C6
    26fa:	10 c0       	rjmp	.+32     	; 0x271c <moveWallOld+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    26fc:	60 91 c3 06 	lds	r22, 0x06C3
    2700:	70 91 c4 06 	lds	r23, 0x06C4
    2704:	80 91 c5 06 	lds	r24, 0x06C5
    2708:	90 91 c6 06 	lds	r25, 0x06C6
    270c:	20 91 be 06 	lds	r18, 0x06BE
    2710:	30 91 bf 06 	lds	r19, 0x06BF
    2714:	40 91 c0 06 	lds	r20, 0x06C0
    2718:	50 91 c1 06 	lds	r21, 0x06C1
    271c:	0e 94 65 30 	call	0x60ca	; 0x60ca <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2720:	90 58       	subi	r25, 0x80	; 128
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2728:	6b 01       	movw	r12, r22
    272a:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    272c:	0e 94 36 31 	call	0x626c	; 0x626c <__fixsfsi>
    2730:	8b 01       	movw	r16, r22
    2732:	77 ff       	sbrs	r23, 7
    2734:	03 c0       	rjmp	.+6      	; 0x273c <moveWallOld+0x1da>
    2736:	10 95       	com	r17
    2738:	01 95       	neg	r16
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	05 36       	cpi	r16, 0x65	; 101
    273e:	11 05       	cpc	r17, r1
    2740:	fc f0       	brlt	.+62     	; 0x2780 <moveWallOld+0x21e>
    2742:	c7 01       	movw	r24, r14
    2744:	b6 01       	movw	r22, r12
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    2752:	88 23       	and	r24, r24
    2754:	a9 f0       	breq	.+42     	; 0x2780 <moveWallOld+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    2756:	b8 01       	movw	r22, r16
    2758:	88 27       	eor	r24, r24
    275a:	77 fd       	sbrc	r23, 7
    275c:	80 95       	com	r24
    275e:	98 2f       	mov	r25, r24
    2760:	0e 94 69 31 	call	0x62d2	; 0x62d2 <__floatsisf>
    2764:	9b 01       	movw	r18, r22
    2766:	ac 01       	movw	r20, r24
    2768:	c7 01       	movw	r24, r14
    276a:	b6 01       	movw	r22, r12
    276c:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	48 ec       	ldi	r20, 0xC8	; 200
    2776:	52 e4       	ldi	r21, 0x42	; 66
    2778:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    277c:	6b 01       	movw	r12, r22
    277e:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2780:	c7 01       	movw	r24, r14
    2782:	b6 01       	movw	r22, r12
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	48 ec       	ldi	r20, 0xC8	; 200
    278a:	52 e4       	ldi	r21, 0x42	; 66
    278c:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    2790:	6b 01       	movw	r12, r22
    2792:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    2794:	8d b7       	in	r24, 0x3d	; 61
    2796:	9e b7       	in	r25, 0x3e	; 62
    2798:	09 97       	sbiw	r24, 0x09	; 9
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	9e bf       	out	0x3e, r25	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	8d bf       	out	0x3d, r24	; 61
    27a4:	0d b7       	in	r16, 0x3d	; 61
    27a6:	1e b7       	in	r17, 0x3e	; 62
    27a8:	0f 5f       	subi	r16, 0xFF	; 255
    27aa:	1f 4f       	sbci	r17, 0xFF	; 255
    27ac:	c7 01       	movw	r24, r14
    27ae:	b6 01       	movw	r22, r12
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	48 ec       	ldi	r20, 0xC8	; 200
    27b6:	52 e4       	ldi	r21, 0x42	; 66
    27b8:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	48 ec       	ldi	r20, 0xC8	; 200
    27c2:	52 e4       	ldi	r21, 0x42	; 66
    27c4:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    27c8:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    27cc:	4b 01       	movw	r8, r22
    27ce:	5c 01       	movw	r10, r24
    27d0:	82 e3       	ldi	r24, 0x32	; 50
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	f8 01       	movw	r30, r16
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
    27da:	c7 01       	movw	r24, r14
    27dc:	b6 01       	movw	r22, r12
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	48 ec       	ldi	r20, 0xC8	; 200
    27e4:	52 ec       	ldi	r21, 0xC2	; 194
    27e6:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	48 ec       	ldi	r20, 0xC8	; 200
    27f0:	52 e4       	ldi	r21, 0x42	; 66
    27f2:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    27f6:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    27fa:	f8 01       	movw	r30, r16
    27fc:	73 83       	std	Z+3, r23	; 0x03
    27fe:	62 83       	std	Z+2, r22	; 0x02
    2800:	82 ec       	ldi	r24, 0xC2	; 194
    2802:	91 e0       	ldi	r25, 0x01	; 1
    2804:	95 83       	std	Z+5, r25	; 0x05
    2806:	84 83       	std	Z+4, r24	; 0x04
    2808:	16 82       	std	Z+6, r1	; 0x06
    280a:	10 86       	std	Z+8, r1	; 0x08
    280c:	17 82       	std	Z+7, r1	; 0x07
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	62 e0       	ldi	r22, 0x02	; 2
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	22 e3       	ldi	r18, 0x32	; 50
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	84 01       	movw	r16, r8
    281a:	52 ec       	ldi	r21, 0xC2	; 194
    281c:	e5 2e       	mov	r14, r21
    281e:	51 e0       	ldi	r21, 0x01	; 1
    2820:	f5 2e       	mov	r15, r21
    2822:	cc 24       	eor	r12, r12
    2824:	aa 24       	eor	r10, r10
    2826:	bb 24       	eor	r11, r11
    2828:	88 24       	eor	r8, r8
    282a:	83 94       	inc	r8
    282c:	0e 94 8f 20 	call	0x411e	; 0x411e <STEPPER_move>
    2830:	8d b7       	in	r24, 0x3d	; 61
    2832:	9e b7       	in	r25, 0x3e	; 62
    2834:	09 96       	adiw	r24, 0x09	; 9
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	9e bf       	out	0x3e, r25	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2840:	82 2d       	mov	r24, r2
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	bf 90       	pop	r11
    2850:	af 90       	pop	r10
    2852:	9f 90       	pop	r9
    2854:	8f 90       	pop	r8
    2856:	7f 90       	pop	r7
    2858:	6f 90       	pop	r6
    285a:	5f 90       	pop	r5
    285c:	4f 90       	pop	r4
    285e:	3f 90       	pop	r3
    2860:	2f 90       	pop	r2
    2862:	08 95       	ret

00002864 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    2864:	2f 92       	push	r2
    2866:	3f 92       	push	r3
    2868:	4f 92       	push	r4
    286a:	5f 92       	push	r5
    286c:	6f 92       	push	r6
    286e:	7f 92       	push	r7
    2870:	8f 92       	push	r8
    2872:	9f 92       	push	r9
    2874:	af 92       	push	r10
    2876:	bf 92       	push	r11
    2878:	cf 92       	push	r12
    287a:	df 92       	push	r13
    287c:	ef 92       	push	r14
    287e:	ff 92       	push	r15
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    2884:	e0 90 1b 05 	lds	r14, 0x051B
    2888:	f0 90 1c 05 	lds	r15, 0x051C
    288c:	00 91 1d 05 	lds	r16, 0x051D
    2890:	10 91 1e 05 	lds	r17, 0x051E
    2894:	33 24       	eor	r3, r3
    2896:	c8 01       	movw	r24, r16
    2898:	b7 01       	movw	r22, r14
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    28a6:	88 23       	and	r24, r24
    28a8:	14 f4       	brge	.+4      	; 0x28ae <moveWall+0x4a>
    28aa:	33 24       	eor	r3, r3
    28ac:	33 94       	inc	r3
    28ae:	a0 90 c3 06 	lds	r10, 0x06C3
    28b2:	b0 90 c4 06 	lds	r11, 0x06C4
    28b6:	c0 90 c5 06 	lds	r12, 0x06C5
    28ba:	d0 90 c6 06 	lds	r13, 0x06C6
    28be:	40 90 be 06 	lds	r4, 0x06BE
    28c2:	50 90 bf 06 	lds	r5, 0x06BF
    28c6:	60 90 c0 06 	lds	r6, 0x06C0
    28ca:	70 90 c1 06 	lds	r7, 0x06C1
    28ce:	88 24       	eor	r8, r8
    28d0:	60 91 25 05 	lds	r22, 0x0525
    28d4:	70 91 26 05 	lds	r23, 0x0526
    28d8:	80 91 27 05 	lds	r24, 0x0527
    28dc:	90 91 28 05 	lds	r25, 0x0528
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e7       	ldi	r20, 0x70	; 112
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	14 f4       	brge	.+4      	; 0x28f4 <moveWall+0x90>
    28f0:	88 24       	eor	r8, r8
    28f2:	83 94       	inc	r8
    28f4:	93 2c       	mov	r9, r3
    28f6:	98 28       	or	r9, r8
    28f8:	88 24       	eor	r8, r8
    28fa:	c6 01       	movw	r24, r12
    28fc:	b5 01       	movw	r22, r10
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e7       	ldi	r20, 0x70	; 112
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    290a:	88 23       	and	r24, r24
    290c:	14 f4       	brge	.+4      	; 0x2912 <moveWall+0xae>
    290e:	88 24       	eor	r8, r8
    2910:	83 94       	inc	r8
    2912:	98 28       	or	r9, r8
    2914:	88 24       	eor	r8, r8
    2916:	c3 01       	movw	r24, r6
    2918:	b2 01       	movw	r22, r4
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e7       	ldi	r20, 0x70	; 112
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    2926:	88 23       	and	r24, r24
    2928:	14 f4       	brge	.+4      	; 0x292e <moveWall+0xca>
    292a:	88 24       	eor	r8, r8
    292c:	83 94       	inc	r8
    292e:	29 2c       	mov	r2, r9
    2930:	28 28       	or	r2, r8
	if(!isWall){
    2932:	09 f0       	breq	.+2      	; 0x2936 <moveWall+0xd2>
    2934:	8a c0       	rjmp	.+276    	; 0x2a4a <moveWall+0x1e6>
	
		// Update odometry
		curr_step = STEPPER_get_nSteps();
    2936:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <STEPPER_get_nSteps>
    293a:	60 93 b6 06 	sts	0x06B6, r22
    293e:	70 93 b7 06 	sts	0x06B7, r23
    2942:	80 93 b8 06 	sts	0x06B8, r24
    2946:	90 93 b9 06 	sts	0x06B9, r25
		
		if(curr_step.left != 0){
    294a:	cb 01       	movw	r24, r22
    294c:	61 15       	cp	r22, r1
    294e:	71 05       	cpc	r23, r1
    2950:	e1 f0       	breq	.+56     	; 0x298a <moveWall+0x126>
			odometryStepL += WALL_STEP - curr_step.left;
    2952:	64 e1       	ldi	r22, 0x14	; 20
    2954:	70 e0       	ldi	r23, 0x00	; 0
    2956:	68 1b       	sub	r22, r24
    2958:	79 0b       	sbc	r23, r25
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
    2962:	9b 01       	movw	r18, r22
    2964:	ac 01       	movw	r20, r24
    2966:	60 91 4f 07 	lds	r22, 0x074F
    296a:	70 91 50 07 	lds	r23, 0x0750
    296e:	80 91 51 07 	lds	r24, 0x0751
    2972:	90 91 52 07 	lds	r25, 0x0752
    2976:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    297a:	60 93 4f 07 	sts	0x074F, r22
    297e:	70 93 50 07 	sts	0x0750, r23
    2982:	80 93 51 07 	sts	0x0751, r24
    2986:	90 93 52 07 	sts	0x0752, r25
		}
		if(curr_step.right != 0){
    298a:	80 91 b8 06 	lds	r24, 0x06B8
    298e:	90 91 b9 06 	lds	r25, 0x06B9
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	e1 f0       	breq	.+56     	; 0x29ce <moveWall+0x16a>
			odometryStepR += WALL_STEP - curr_step.right;
    2996:	64 e1       	ldi	r22, 0x14	; 20
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	68 1b       	sub	r22, r24
    299c:	79 0b       	sbc	r23, r25
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
    29a6:	9b 01       	movw	r18, r22
    29a8:	ac 01       	movw	r20, r24
    29aa:	60 91 9f 04 	lds	r22, 0x049F
    29ae:	70 91 a0 04 	lds	r23, 0x04A0
    29b2:	80 91 a1 04 	lds	r24, 0x04A1
    29b6:	90 91 a2 04 	lds	r25, 0x04A2
    29ba:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    29be:	60 93 9f 04 	sts	0x049F, r22
    29c2:	70 93 a0 04 	sts	0x04A0, r23
    29c6:	80 93 a1 04 	sts	0x04A1, r24
    29ca:	90 93 a2 04 	sts	0x04A2, r25
		}
		
		STEPPER_set_steps(STEPPER_BOTH,0);
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	70 e0       	ldi	r23, 0x00	; 0
    29d4:	0e 94 12 22 	call	0x4424	; 0x4424 <STEPPER_set_steps>
	
		// Move with wall
		STEPPER_move_stnb( STEPPER_BOTH, 
    29d8:	8d b7       	in	r24, 0x3d	; 61
    29da:	9e b7       	in	r25, 0x3e	; 62
    29dc:	09 97       	sbiw	r24, 0x09	; 9
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	9e bf       	out	0x3e, r25	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	8d bf       	out	0x3d, r24	; 61
    29e8:	ed b7       	in	r30, 0x3d	; 61
    29ea:	fe b7       	in	r31, 0x3e	; 62
    29ec:	31 96       	adiw	r30, 0x01	; 1
    29ee:	84 e1       	ldi	r24, 0x14	; 20
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	ad b7       	in	r26, 0x3d	; 61
    29f4:	be b7       	in	r27, 0x3e	; 62
    29f6:	12 96       	adiw	r26, 0x02	; 2
    29f8:	9c 93       	st	X, r25
    29fa:	8e 93       	st	-X, r24
    29fc:	11 97       	sbiw	r26, 0x01	; 1
    29fe:	88 ec       	ldi	r24, 0xC8	; 200
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	93 83       	std	Z+3, r25	; 0x03
    2a04:	82 83       	std	Z+2, r24	; 0x02
    2a06:	82 ec       	ldi	r24, 0xC2	; 194
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	95 83       	std	Z+5, r25	; 0x05
    2a0c:	84 83       	std	Z+4, r24	; 0x04
    2a0e:	16 82       	std	Z+6, r1	; 0x06
    2a10:	10 86       	std	Z+8, r1	; 0x08
    2a12:	17 82       	std	Z+7, r1	; 0x07
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	62 e0       	ldi	r22, 0x02	; 2
    2a18:	41 e0       	ldi	r20, 0x01	; 1
    2a1a:	24 e1       	ldi	r18, 0x14	; 20
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	08 ec       	ldi	r16, 0xC8	; 200
    2a20:	10 e0       	ldi	r17, 0x00	; 0
    2a22:	e2 ec       	ldi	r30, 0xC2	; 194
    2a24:	ee 2e       	mov	r14, r30
    2a26:	e1 e0       	ldi	r30, 0x01	; 1
    2a28:	fe 2e       	mov	r15, r30
    2a2a:	cc 24       	eor	r12, r12
    2a2c:	aa 24       	eor	r10, r10
    2a2e:	bb 24       	eor	r11, r11
    2a30:	88 24       	eor	r8, r8
    2a32:	83 94       	inc	r8
    2a34:	0e 94 8f 20 	call	0x411e	; 0x411e <STEPPER_move>
    2a38:	ed b7       	in	r30, 0x3d	; 61
    2a3a:	fe b7       	in	r31, 0x3e	; 62
    2a3c:	39 96       	adiw	r30, 0x09	; 9
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	fe bf       	out	0x3e, r31	; 62
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	ed bf       	out	0x3d, r30	; 61
    2a48:	48 c1       	rjmp	.+656    	; 0x2cda <moveWall+0x476>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2a4a:	c6 01       	movw	r24, r12
    2a4c:	b5 01       	movw	r22, r10
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e7       	ldi	r20, 0x70	; 112
    2a54:	51 e4       	ldi	r21, 0x41	; 65
    2a56:	0e 94 19 32 	call	0x6432	; 0x6432 <__gesf2>
    2a5a:	18 16       	cp	r1, r24
    2a5c:	64 f4       	brge	.+24     	; 0x2a76 <moveWall+0x212>
		rtIR = IR_WALL_R_THRESH-18;
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e4       	ldi	r26, 0x40	; 64
    2a64:	b0 ec       	ldi	r27, 0xC0	; 192
    2a66:	80 93 c3 06 	sts	0x06C3, r24
    2a6a:	90 93 c4 06 	sts	0x06C4, r25
    2a6e:	a0 93 c5 06 	sts	0x06C5, r26
    2a72:	b0 93 c6 06 	sts	0x06C6, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2a76:	c3 01       	movw	r24, r6
    2a78:	b2 01       	movw	r22, r4
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e7       	ldi	r20, 0x70	; 112
    2a80:	51 e4       	ldi	r21, 0x41	; 65
    2a82:	0e 94 19 32 	call	0x6432	; 0x6432 <__gesf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	14 f0       	brlt	.+4      	; 0x2a8e <moveWall+0x22a>
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	0d c0       	rjmp	.+26     	; 0x2aa8 <moveWall+0x244>
		ltIR = IR_WALL_L_THRESH-18;
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	a0 e4       	ldi	r26, 0x40	; 64
    2a94:	b0 ec       	ldi	r27, 0xC0	; 192
    2a96:	80 93 be 06 	sts	0x06BE, r24
    2a9a:	90 93 bf 06 	sts	0x06BF, r25
    2a9e:	a0 93 c0 06 	sts	0x06C0, r26
    2aa2:	b0 93 c1 06 	sts	0x06C1, r27
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2aa8:	33 20       	and	r3, r3
    2aaa:	21 f1       	breq	.+72     	; 0x2af4 <moveWall+0x290>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2aac:	88 23       	and	r24, r24
    2aae:	29 f0       	breq	.+10     	; 0x2aba <moveWall+0x256>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	70 e0       	ldi	r23, 0x00	; 0
    2ab4:	8a e7       	ldi	r24, 0x7A	; 122
    2ab6:	94 e4       	ldi	r25, 0x44	; 68
    2ab8:	04 c0       	rjmp	.+8      	; 0x2ac2 <moveWall+0x25e>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	8a e7       	ldi	r24, 0x7A	; 122
    2ac0:	94 ec       	ldi	r25, 0xC4	; 196
    2ac2:	a8 01       	movw	r20, r16
    2ac4:	97 01       	movw	r18, r14
    2ac6:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    2aca:	20 91 be 06 	lds	r18, 0x06BE
    2ace:	30 91 bf 06 	lds	r19, 0x06BF
    2ad2:	40 91 c0 06 	lds	r20, 0x06C0
    2ad6:	50 91 c1 06 	lds	r21, 0x06C1
    2ada:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    2ade:	9b 01       	movw	r18, r22
    2ae0:	ac 01       	movw	r20, r24
    2ae2:	60 91 c3 06 	lds	r22, 0x06C3
    2ae6:	70 91 c4 06 	lds	r23, 0x06C4
    2aea:	80 91 c5 06 	lds	r24, 0x06C5
    2aee:	90 91 c6 06 	lds	r25, 0x06C6
    2af2:	10 c0       	rjmp	.+32     	; 0x2b14 <moveWall+0x2b0>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2af4:	60 91 c3 06 	lds	r22, 0x06C3
    2af8:	70 91 c4 06 	lds	r23, 0x06C4
    2afc:	80 91 c5 06 	lds	r24, 0x06C5
    2b00:	90 91 c6 06 	lds	r25, 0x06C6
    2b04:	20 91 be 06 	lds	r18, 0x06BE
    2b08:	30 91 bf 06 	lds	r19, 0x06BF
    2b0c:	40 91 c0 06 	lds	r20, 0x06C0
    2b10:	50 91 c1 06 	lds	r21, 0x06C1
    2b14:	0e 94 65 30 	call	0x60ca	; 0x60ca <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2b18:	90 58       	subi	r25, 0x80	; 128
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2b20:	6b 01       	movw	r12, r22
    2b22:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2b24:	0e 94 36 31 	call	0x626c	; 0x626c <__fixsfsi>
    2b28:	8b 01       	movw	r16, r22
    2b2a:	77 ff       	sbrs	r23, 7
    2b2c:	03 c0       	rjmp	.+6      	; 0x2b34 <moveWall+0x2d0>
    2b2e:	10 95       	com	r17
    2b30:	01 95       	neg	r16
    2b32:	1f 4f       	sbci	r17, 0xFF	; 255
    2b34:	05 36       	cpi	r16, 0x65	; 101
    2b36:	11 05       	cpc	r17, r1
    2b38:	fc f0       	brlt	.+62     	; 0x2b78 <moveWall+0x314>
    2b3a:	c7 01       	movw	r24, r14
    2b3c:	b6 01       	movw	r22, r12
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	50 e0       	ldi	r21, 0x00	; 0
    2b46:	0e 94 ca 30 	call	0x6194	; 0x6194 <__cmpsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	a9 f0       	breq	.+42     	; 0x2b78 <moveWall+0x314>
		effort = MAX_EFFORT*(effort/abs(effort));
    2b4e:	b8 01       	movw	r22, r16
    2b50:	88 27       	eor	r24, r24
    2b52:	77 fd       	sbrc	r23, 7
    2b54:	80 95       	com	r24
    2b56:	98 2f       	mov	r25, r24
    2b58:	0e 94 69 31 	call	0x62d2	; 0x62d2 <__floatsisf>
    2b5c:	9b 01       	movw	r18, r22
    2b5e:	ac 01       	movw	r20, r24
    2b60:	c7 01       	movw	r24, r14
    2b62:	b6 01       	movw	r22, r12
    2b64:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	48 ec       	ldi	r20, 0xC8	; 200
    2b6e:	52 e4       	ldi	r21, 0x42	; 66
    2b70:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    2b74:	6b 01       	movw	r12, r22
    2b76:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2b78:	c7 01       	movw	r24, r14
    2b7a:	b6 01       	movw	r22, r12
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	48 ec       	ldi	r20, 0xC8	; 200
    2b82:	52 e4       	ldi	r21, 0x42	; 66
    2b84:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    2b88:	4b 01       	movw	r8, r22
    2b8a:	5c 01       	movw	r10, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    2b8c:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <STEPPER_get_nSteps>
    2b90:	60 93 b6 06 	sts	0x06B6, r22
    2b94:	70 93 b7 06 	sts	0x06B7, r23
    2b98:	80 93 b8 06 	sts	0x06B8, r24
    2b9c:	90 93 b9 06 	sts	0x06B9, r25
	
	if(curr_step.left != 0){
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	61 15       	cp	r22, r1
    2ba4:	71 05       	cpc	r23, r1
    2ba6:	e1 f0       	breq	.+56     	; 0x2be0 <moveWall+0x37c>
		odometryStepL += WALL_STEP - (curr_step.left);
    2ba8:	64 e1       	ldi	r22, 0x14	; 20
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	68 1b       	sub	r22, r24
    2bae:	79 0b       	sbc	r23, r25
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
    2bb8:	9b 01       	movw	r18, r22
    2bba:	ac 01       	movw	r20, r24
    2bbc:	60 91 4f 07 	lds	r22, 0x074F
    2bc0:	70 91 50 07 	lds	r23, 0x0750
    2bc4:	80 91 51 07 	lds	r24, 0x0751
    2bc8:	90 91 52 07 	lds	r25, 0x0752
    2bcc:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    2bd0:	60 93 4f 07 	sts	0x074F, r22
    2bd4:	70 93 50 07 	sts	0x0750, r23
    2bd8:	80 93 51 07 	sts	0x0751, r24
    2bdc:	90 93 52 07 	sts	0x0752, r25
	}
	if(curr_step.right != 0){
    2be0:	80 91 b8 06 	lds	r24, 0x06B8
    2be4:	90 91 b9 06 	lds	r25, 0x06B9
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	e1 f0       	breq	.+56     	; 0x2c24 <moveWall+0x3c0>
		odometryStepR += WALL_STEP - (curr_step.right);
    2bec:	64 e1       	ldi	r22, 0x14	; 20
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	68 1b       	sub	r22, r24
    2bf2:	79 0b       	sbc	r23, r25
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
    2bfc:	9b 01       	movw	r18, r22
    2bfe:	ac 01       	movw	r20, r24
    2c00:	60 91 9f 04 	lds	r22, 0x049F
    2c04:	70 91 a0 04 	lds	r23, 0x04A0
    2c08:	80 91 a1 04 	lds	r24, 0x04A1
    2c0c:	90 91 a2 04 	lds	r25, 0x04A2
    2c10:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    2c14:	60 93 9f 04 	sts	0x049F, r22
    2c18:	70 93 a0 04 	sts	0x04A0, r23
    2c1c:	80 93 a1 04 	sts	0x04A1, r24
    2c20:	90 93 a2 04 	sts	0x04A2, r25
	}
	
	STEPPER_set_steps(STEPPER_BOTH,0);
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	0e 94 12 22 	call	0x4424	; 0x4424 <STEPPER_set_steps>
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    2c2e:	8d b7       	in	r24, 0x3d	; 61
    2c30:	9e b7       	in	r25, 0x3e	; 62
    2c32:	09 97       	sbiw	r24, 0x09	; 9
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	9e bf       	out	0x3e, r25	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	8d bf       	out	0x3d, r24	; 61
    2c3e:	0d b7       	in	r16, 0x3d	; 61
    2c40:	1e b7       	in	r17, 0x3e	; 62
    2c42:	0f 5f       	subi	r16, 0xFF	; 255
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255
    2c46:	c5 01       	movw	r24, r10
    2c48:	b4 01       	movw	r22, r8
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	48 ec       	ldi	r20, 0xC8	; 200
    2c50:	52 e4       	ldi	r21, 0x42	; 66
    2c52:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	48 ec       	ldi	r20, 0xC8	; 200
    2c5c:	52 e4       	ldi	r21, 0x42	; 66
    2c5e:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    2c62:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    2c66:	6b 01       	movw	r12, r22
    2c68:	7c 01       	movw	r14, r24
    2c6a:	84 e1       	ldi	r24, 0x14	; 20
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	d8 01       	movw	r26, r16
    2c70:	8d 93       	st	X+, r24
    2c72:	9c 93       	st	X, r25
    2c74:	c5 01       	movw	r24, r10
    2c76:	b4 01       	movw	r22, r8
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	48 ec       	ldi	r20, 0xC8	; 200
    2c7e:	52 ec       	ldi	r21, 0xC2	; 194
    2c80:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	48 ec       	ldi	r20, 0xC8	; 200
    2c8a:	52 e4       	ldi	r21, 0x42	; 66
    2c8c:	0e 94 66 30 	call	0x60cc	; 0x60cc <__addsf3>
    2c90:	0e 94 3b 31 	call	0x6276	; 0x6276 <__fixunssfsi>
    2c94:	f8 01       	movw	r30, r16
    2c96:	73 83       	std	Z+3, r23	; 0x03
    2c98:	62 83       	std	Z+2, r22	; 0x02
    2c9a:	82 ec       	ldi	r24, 0xC2	; 194
    2c9c:	91 e0       	ldi	r25, 0x01	; 1
    2c9e:	95 83       	std	Z+5, r25	; 0x05
    2ca0:	84 83       	std	Z+4, r24	; 0x04
    2ca2:	16 82       	std	Z+6, r1	; 0x06
    2ca4:	10 86       	std	Z+8, r1	; 0x08
    2ca6:	17 82       	std	Z+7, r1	; 0x07
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	62 e0       	ldi	r22, 0x02	; 2
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	24 e1       	ldi	r18, 0x14	; 20
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	86 01       	movw	r16, r12
    2cb4:	72 ec       	ldi	r23, 0xC2	; 194
    2cb6:	e7 2e       	mov	r14, r23
    2cb8:	71 e0       	ldi	r23, 0x01	; 1
    2cba:	f7 2e       	mov	r15, r23
    2cbc:	cc 24       	eor	r12, r12
    2cbe:	aa 24       	eor	r10, r10
    2cc0:	bb 24       	eor	r11, r11
    2cc2:	88 24       	eor	r8, r8
    2cc4:	83 94       	inc	r8
    2cc6:	0e 94 8f 20 	call	0x411e	; 0x411e <STEPPER_move>
    2cca:	8d b7       	in	r24, 0x3d	; 61
    2ccc:	9e b7       	in	r25, 0x3e	; 62
    2cce:	09 96       	adiw	r24, 0x09	; 9
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	9e bf       	out	0x3e, r25	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2cda:	82 2d       	mov	r24, r2
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	ff 90       	pop	r15
    2ce2:	ef 90       	pop	r14
    2ce4:	df 90       	pop	r13
    2ce6:	cf 90       	pop	r12
    2ce8:	bf 90       	pop	r11
    2cea:	af 90       	pop	r10
    2cec:	9f 90       	pop	r9
    2cee:	8f 90       	pop	r8
    2cf0:	7f 90       	pop	r7
    2cf2:	6f 90       	pop	r6
    2cf4:	5f 90       	pop	r5
    2cf6:	4f 90       	pop	r4
    2cf8:	3f 90       	pop	r3
    2cfa:	2f 90       	pop	r2
    2cfc:	08 95       	ret

00002cfe <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    2cfe:	ff 92       	push	r15
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    2d06:	08 2f       	mov	r16, r24
    2d08:	06 95       	lsr	r16
    2d0a:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    2d0c:	f3 e0       	ldi	r31, 0x03	; 3
    2d0e:	ff 2e       	mov	r15, r31
    2d10:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(curMove){
    2d12:	62 30       	cpi	r22, 0x02	; 2
    2d14:	31 f0       	breq	.+12     	; 0x2d22 <shiftMap+0x24>
    2d16:	63 30       	cpi	r22, 0x03	; 3
    2d18:	a9 f0       	breq	.+42     	; 0x2d44 <shiftMap+0x46>
    2d1a:	61 30       	cpi	r22, 0x01	; 1
    2d1c:	b1 f4       	brne	.+44     	; 0x2d4a <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2d1e:	11 50       	subi	r17, 0x01	; 1
    2d20:	12 c0       	rjmp	.+36     	; 0x2d46 <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2d22:	41 30       	cpi	r20, 0x01	; 1
    2d24:	49 f0       	breq	.+18     	; 0x2d38 <shiftMap+0x3a>
    2d26:	41 30       	cpi	r20, 0x01	; 1
    2d28:	28 f0       	brcs	.+10     	; 0x2d34 <shiftMap+0x36>
    2d2a:	42 30       	cpi	r20, 0x02	; 2
    2d2c:	39 f0       	breq	.+14     	; 0x2d3c <shiftMap+0x3e>
    2d2e:	43 30       	cpi	r20, 0x03	; 3
    2d30:	b9 f4       	brne	.+46     	; 0x2d60 <shiftMap+0x62>
    2d32:	06 c0       	rjmp	.+12     	; 0x2d40 <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    2d34:	01 50       	subi	r16, 0x01	; 1
    2d36:	14 c0       	rjmp	.+40     	; 0x2d60 <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    2d38:	f3 94       	inc	r15
    2d3a:	12 c0       	rjmp	.+36     	; 0x2d60 <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    2d3c:	0f 5f       	subi	r16, 0xFF	; 255
    2d3e:	10 c0       	rjmp	.+32     	; 0x2d60 <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    2d40:	fa 94       	dec	r15
    2d42:	0e c0       	rjmp	.+28     	; 0x2d60 <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2d44:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    2d46:	13 70       	andi	r17, 0x03	; 3
    2d48:	0b c0       	rjmp	.+22     	; 0x2d60 <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    2d4a:	00 d0       	rcall	.+0      	; 0x2d4c <shiftMap+0x4e>
    2d4c:	84 e4       	ldi	r24, 0x44	; 68
    2d4e:	91 e0       	ldi	r25, 0x01	; 1
    2d50:	ed b7       	in	r30, 0x3d	; 61
    2d52:	fe b7       	in	r31, 0x3e	; 62
    2d54:	92 83       	std	Z+2, r25	; 0x02
    2d56:	81 83       	std	Z+1, r24	; 0x01
    2d58:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    2d60:	10 93 b8 05 	sts	0x05B8, r17
    2d64:	00 0f       	add	r16, r16
    2d66:	00 0f       	add	r16, r16
	return currentCell;
}
    2d68:	80 2f       	mov	r24, r16
    2d6a:	8f 0d       	add	r24, r15
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	ff 90       	pop	r15
    2d72:	08 95       	ret

00002d74 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2d74:	8f 92       	push	r8
    2d76:	af 92       	push	r10
    2d78:	bf 92       	push	r11
    2d7a:	cf 92       	push	r12
    2d7c:	df 92       	push	r13
    2d7e:	ef 92       	push	r14
    2d80:	ff 92       	push	r15
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
	switch(currentMove){
    2d86:	80 91 53 07 	lds	r24, 0x0753
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	69 f0       	breq	.+26     	; 0x2da8 <moveMap+0x34>
    2d8e:	83 30       	cpi	r24, 0x03	; 3
    2d90:	a1 f0       	breq	.+40     	; 0x2dba <moveMap+0x46>
    2d92:	81 30       	cpi	r24, 0x01	; 1
    2d94:	51 f5       	brne	.+84     	; 0x2dea <moveMap+0x76>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	70 e0       	ldi	r23, 0x00	; 0
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	4c e8       	ldi	r20, 0x8C	; 140
    2da4:	51 ec       	ldi	r21, 0xC1	; 193
    2da6:	11 c0       	rjmp	.+34     	; 0x2dca <moveMap+0x56>
			// while(!odometryFlag){
				// moveWall();
				// checkOdometry(0);
			// }
			
			move_arc_stwt(NO_TURN, 45, 10, 10, 0);
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	9f e4       	ldi	r25, 0x4F	; 79
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	44 e3       	ldi	r20, 0x34	; 52
    2db6:	52 e4       	ldi	r21, 0x42	; 66
    2db8:	08 c0       	rjmp	.+16     	; 0x2dca <moveMap+0x56>
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2dba:	60 e0       	ldi	r22, 0x00	; 0
    2dbc:	70 e0       	ldi	r23, 0x00	; 0
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4c e8       	ldi	r20, 0x8C	; 140
    2dc8:	51 e4       	ldi	r21, 0x41	; 65
    2dca:	0f 2e       	mov	r0, r31
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	ef 2e       	mov	r14, r31
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	ff 2e       	mov	r15, r31
    2dd4:	f0 e2       	ldi	r31, 0x20	; 32
    2dd6:	0f 2f       	mov	r16, r31
    2dd8:	f1 e4       	ldi	r31, 0x41	; 65
    2dda:	1f 2f       	mov	r17, r31
    2ddc:	f0 2d       	mov	r31, r0
    2dde:	57 01       	movw	r10, r14
    2de0:	68 01       	movw	r12, r16
    2de2:	88 24       	eor	r8, r8
    2de4:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2de8:	0b c0       	rjmp	.+22     	; 0x2e00 <moveMap+0x8c>
			break;
		default:
			LCD_printf("Whatz2?!");
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <moveMap+0x78>
    2dec:	8d e4       	ldi	r24, 0x4D	; 77
    2dee:	91 e0       	ldi	r25, 0x01	; 1
    2df0:	ed b7       	in	r30, 0x3d	; 61
    2df2:	fe b7       	in	r31, 0x3e	; 62
    2df4:	92 83       	std	Z+2, r25	; 0x02
    2df6:	81 83       	std	Z+1, r24	; 0x01
    2df8:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
			break;
	}
}
    2e00:	1f 91       	pop	r17
    2e02:	0f 91       	pop	r16
    2e04:	ff 90       	pop	r15
    2e06:	ef 90       	pop	r14
    2e08:	df 90       	pop	r13
    2e0a:	cf 90       	pop	r12
    2e0c:	bf 90       	pop	r11
    2e0e:	af 90       	pop	r10
    2e10:	8f 90       	pop	r8
    2e12:	08 95       	ret

00002e14 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    2e14:	80 91 23 05 	lds	r24, 0x0523
    2e18:	80 fd       	sbrc	r24, 0
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    2e20:	83 fd       	sbrc	r24, 3
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    2e24:	82 e0       	ldi	r24, 0x02	; 2
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    2e28:	83 e0       	ldi	r24, 0x03	; 3
    2e2a:	80 93 53 07 	sts	0x0753, r24
	}
	
	switch(oldMove){
    2e2e:	80 91 54 07 	lds	r24, 0x0754
    2e32:	81 30       	cpi	r24, 0x01	; 1
    2e34:	29 f0       	breq	.+10     	; 0x2e40 <planMap+0x2c>
    2e36:	81 30       	cpi	r24, 0x01	; 1
    2e38:	38 f0       	brcs	.+14     	; 0x2e48 <planMap+0x34>
    2e3a:	84 30       	cpi	r24, 0x04	; 4
    2e3c:	28 f4       	brcc	.+10     	; 0x2e48 <planMap+0x34>
    2e3e:	0f c0       	rjmp	.+30     	; 0x2e5e <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	80 93 53 07 	sts	0x0753, r24
    2e46:	0b c0       	rjmp	.+22     	; 0x2e5e <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <planMap+0x36>
    2e4a:	86 e5       	ldi	r24, 0x56	; 86
    2e4c:	91 e0       	ldi	r25, 0x01	; 1
    2e4e:	ed b7       	in	r30, 0x3d	; 61
    2e50:	fe b7       	in	r31, 0x3e	; 62
    2e52:	92 83       	std	Z+2, r25	; 0x02
    2e54:	81 83       	std	Z+1, r24	; 0x01
    2e56:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    2e5e:	80 91 53 07 	lds	r24, 0x0753
    2e62:	80 93 54 07 	sts	0x0754, r24
}
    2e66:	08 95       	ret

00002e68 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    2e68:	80 91 11 04 	lds	r24, 0x0411
    2e6c:	85 30       	cpi	r24, 0x05	; 5
    2e6e:	80 f0       	brcs	.+32     	; 0x2e90 <planGateway+0x28>
    2e70:	e2 e0       	ldi	r30, 0x02	; 2
    2e72:	f4 e0       	ldi	r31, 0x04	; 4
		for(i = 0; i<=(BRANCH_MAX-1); i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    2e74:	81 81       	ldd	r24, Z+1	; 0x01
    2e76:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2e78:	86 81       	ldd	r24, Z+6	; 0x06
    2e7a:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2e7c:	83 85       	ldd	r24, Z+11	; 0x0b
    2e7e:	82 87       	std	Z+10, r24	; 0x0a
    2e80:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<=(BRANCH_MAX-1); i++){
    2e82:	84 e0       	ldi	r24, 0x04	; 4
    2e84:	e7 30       	cpi	r30, 0x07	; 7
    2e86:	f8 07       	cpc	r31, r24
    2e88:	a9 f7       	brne	.-22     	; 0x2e74 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2e8a:	84 e0       	ldi	r24, 0x04	; 4
    2e8c:	80 93 11 04 	sts	0x0411, r24
	}
	
	// Decide what the current move should be
	planMap();
    2e90:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    2e94:	e0 91 11 04 	lds	r30, 0x0411
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	ee 5f       	subi	r30, 0xFE	; 254
    2e9c:	fb 4f       	sbci	r31, 0xFB	; 251
    2e9e:	80 91 23 05 	lds	r24, 0x0523
    2ea2:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2ea4:	90 91 53 07 	lds	r25, 0x0753
    2ea8:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2eaa:	80 91 b8 05 	lds	r24, 0x05B8
    2eae:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2eb0:	91 30       	cpi	r25, 0x01	; 1
    2eb2:	19 f0       	breq	.+6      	; 0x2eba <planGateway+0x52>
    2eb4:	93 30       	cpi	r25, 0x03	; 3
    2eb6:	41 f4       	brne	.+16     	; 0x2ec8 <planGateway+0x60>
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <planGateway+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2eba:	81 50       	subi	r24, 0x01	; 1
    2ebc:	01 c0       	rjmp	.+2      	; 0x2ec0 <planGateway+0x58>
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	83 70       	andi	r24, 0x03	; 3
    2ec2:	80 93 b8 05 	sts	0x05B8, r24
    2ec6:	0b c0       	rjmp	.+22     	; 0x2ede <planGateway+0x76>
			break;
		default:
			LCD_printf("Whatz2?!");
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <planGateway+0x62>
    2eca:	8d e4       	ldi	r24, 0x4D	; 77
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	ed b7       	in	r30, 0x3d	; 61
    2ed0:	fe b7       	in	r31, 0x3e	; 62
    2ed2:	92 83       	std	Z+2, r25	; 0x02
    2ed4:	81 83       	std	Z+1, r24	; 0x01
    2ed6:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2ede:	80 91 11 04 	lds	r24, 0x0411
    2ee2:	8f 5f       	subi	r24, 0xFF	; 255
    2ee4:	80 93 11 04 	sts	0x0411, r24
}
    2ee8:	08 95       	ret

00002eea <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    2eea:	90 91 b8 05 	lds	r25, 0x05B8
    2eee:	91 30       	cpi	r25, 0x01	; 1
    2ef0:	91 f0       	breq	.+36     	; 0x2f16 <planMetric+0x2c>
    2ef2:	91 30       	cpi	r25, 0x01	; 1
    2ef4:	28 f0       	brcs	.+10     	; 0x2f00 <planMetric+0x16>
    2ef6:	92 30       	cpi	r25, 0x02	; 2
    2ef8:	d9 f0       	breq	.+54     	; 0x2f30 <planMetric+0x46>
    2efa:	93 30       	cpi	r25, 0x03	; 3
    2efc:	c1 f5       	brne	.+112    	; 0x2f6e <planMetric+0x84>
    2efe:	23 c0       	rjmp	.+70     	; 0x2f46 <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    2f00:	80 91 b9 05 	lds	r24, 0x05B9
    2f04:	81 30       	cpi	r24, 0x01	; 1
    2f06:	91 f0       	breq	.+36     	; 0x2f2c <planMetric+0x42>
    2f08:	81 30       	cpi	r24, 0x01	; 1
    2f0a:	68 f1       	brcs	.+90     	; 0x2f66 <planMetric+0x7c>
    2f0c:	82 30       	cpi	r24, 0x02	; 2
    2f0e:	49 f1       	breq	.+82     	; 0x2f62 <planMetric+0x78>
    2f10:	83 30       	cpi	r24, 0x03	; 3
    2f12:	69 f5       	brne	.+90     	; 0x2f6e <planMetric+0x84>
    2f14:	26 c0       	rjmp	.+76     	; 0x2f62 <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    2f16:	80 91 b9 05 	lds	r24, 0x05B9
    2f1a:	81 30       	cpi	r24, 0x01	; 1
    2f1c:	21 f1       	breq	.+72     	; 0x2f66 <planMetric+0x7c>
    2f1e:	81 30       	cpi	r24, 0x01	; 1
    2f20:	e8 f0       	brcs	.+58     	; 0x2f5c <planMetric+0x72>
    2f22:	82 30       	cpi	r24, 0x02	; 2
    2f24:	19 f0       	breq	.+6      	; 0x2f2c <planMetric+0x42>
    2f26:	83 30       	cpi	r24, 0x03	; 3
    2f28:	11 f5       	brne	.+68     	; 0x2f6e <planMetric+0x84>
    2f2a:	18 c0       	rjmp	.+48     	; 0x2f5c <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    2f2c:	83 e0       	ldi	r24, 0x03	; 3
    2f2e:	1c c0       	rjmp	.+56     	; 0x2f68 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    2f30:	80 91 b9 05 	lds	r24, 0x05B9
    2f34:	81 30       	cpi	r24, 0x01	; 1
    2f36:	c1 f0       	breq	.+48     	; 0x2f68 <planMetric+0x7e>
    2f38:	81 30       	cpi	r24, 0x01	; 1
    2f3a:	98 f0       	brcs	.+38     	; 0x2f62 <planMetric+0x78>
    2f3c:	82 30       	cpi	r24, 0x02	; 2
    2f3e:	a1 f0       	breq	.+40     	; 0x2f68 <planMetric+0x7e>
    2f40:	83 30       	cpi	r24, 0x03	; 3
    2f42:	a9 f4       	brne	.+42     	; 0x2f6e <planMetric+0x84>
    2f44:	11 c0       	rjmp	.+34     	; 0x2f68 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    2f46:	80 91 b9 05 	lds	r24, 0x05B9
    2f4a:	81 30       	cpi	r24, 0x01	; 1
    2f4c:	69 f0       	breq	.+26     	; 0x2f68 <planMetric+0x7e>
    2f4e:	81 30       	cpi	r24, 0x01	; 1
    2f50:	28 f0       	brcs	.+10     	; 0x2f5c <planMetric+0x72>
    2f52:	82 30       	cpi	r24, 0x02	; 2
    2f54:	31 f0       	breq	.+12     	; 0x2f62 <planMetric+0x78>
    2f56:	83 30       	cpi	r24, 0x03	; 3
    2f58:	51 f4       	brne	.+20     	; 0x2f6e <planMetric+0x84>
    2f5a:	05 c0       	rjmp	.+10     	; 0x2f66 <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    2f5c:	90 93 53 07 	sts	0x0753, r25
    2f60:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	01 c0       	rjmp	.+2      	; 0x2f68 <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	80 93 53 07 	sts	0x0753, r24
    2f6c:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <planMetric+0x86>
    2f70:	8f e5       	ldi	r24, 0x5F	; 95
    2f72:	91 e0       	ldi	r25, 0x01	; 1
    2f74:	ed b7       	in	r30, 0x3d	; 61
    2f76:	fe b7       	in	r31, 0x3e	; 62
    2f78:	92 83       	std	Z+2, r25	; 0x02
    2f7a:	81 83       	std	Z+1, r24	; 0x01
    2f7c:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	08 95       	ret

00002f86 <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    2f86:	8f 92       	push	r8
    2f88:	af 92       	push	r10
    2f8a:	bf 92       	push	r11
    2f8c:	cf 92       	push	r12
    2f8e:	df 92       	push	r13
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
	LCD_clear();
    2f98:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    2f9c:	e0 91 24 05 	lds	r30, 0x0524
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	e9 55       	subi	r30, 0x59	; 89
    2fa4:	fa 4f       	sbci	r31, 0xFA	; 250
    2fa6:	e0 81       	ld	r30, Z
    2fa8:	e0 93 53 07 	sts	0x0753, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	e1 30       	cpi	r30, 0x01	; 1
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <moveWorld+0x2e>
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	e3 30       	cpi	r30, 0x03	; 3
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <moveWorld+0x36>
    2fba:	91 e0       	ldi	r25, 0x01	; 1
    2fbc:	89 2b       	or	r24, r25
    2fbe:	28 2f       	mov	r18, r24
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	80 91 54 07 	lds	r24, 0x0754
    2fca:	82 30       	cpi	r24, 0x02	; 2
    2fcc:	11 f4       	brne	.+4      	; 0x2fd2 <moveWorld+0x4c>
    2fce:	41 e0       	ldi	r20, 0x01	; 1
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	24 23       	and	r18, r20
    2fd4:	35 23       	and	r19, r21
    2fd6:	23 2b       	or	r18, r19
    2fd8:	b9 f0       	breq	.+46     	; 0x3008 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	9f e4       	ldi	r25, 0x4F	; 79
    2fe2:	28 e4       	ldi	r18, 0x48	; 72
    2fe4:	31 ee       	ldi	r19, 0xE1	; 225
    2fe6:	46 eb       	ldi	r20, 0xB6	; 182
    2fe8:	51 e4       	ldi	r21, 0x41	; 65
    2fea:	0f 2e       	mov	r0, r31
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	ef 2e       	mov	r14, r31
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	ff 2e       	mov	r15, r31
    2ff4:	f0 e2       	ldi	r31, 0x20	; 32
    2ff6:	0f 2f       	mov	r16, r31
    2ff8:	f1 e4       	ldi	r31, 0x41	; 65
    2ffa:	1f 2f       	mov	r17, r31
    2ffc:	f0 2d       	mov	r31, r0
    2ffe:	57 01       	movw	r10, r14
    3000:	68 01       	movw	r12, r16
    3002:	88 24       	eor	r8, r8
    3004:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    3008:	20 91 54 07 	lds	r18, 0x0754
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	21 30       	cpi	r18, 0x01	; 1
    3010:	09 f4       	brne	.+2      	; 0x3014 <moveWorld+0x8e>
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	23 30       	cpi	r18, 0x03	; 3
    3018:	09 f4       	brne	.+2      	; 0x301c <moveWorld+0x96>
    301a:	91 e0       	ldi	r25, 0x01	; 1
    301c:	89 2b       	or	r24, r25
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	80 91 53 07 	lds	r24, 0x0753
    302a:	82 30       	cpi	r24, 0x02	; 2
    302c:	11 f4       	brne	.+4      	; 0x3032 <moveWorld+0xac>
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	24 23       	and	r18, r20
    3034:	35 23       	and	r19, r21
    3036:	23 2b       	or	r18, r19
    3038:	b9 f0       	breq	.+46     	; 0x3068 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    303a:	60 e0       	ldi	r22, 0x00	; 0
    303c:	70 e0       	ldi	r23, 0x00	; 0
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	9f e4       	ldi	r25, 0x4F	; 79
    3042:	25 e3       	ldi	r18, 0x35	; 53
    3044:	3f ee       	ldi	r19, 0xEF	; 239
    3046:	40 ea       	ldi	r20, 0xA0	; 160
    3048:	51 e4       	ldi	r21, 0x41	; 65
    304a:	0f 2e       	mov	r0, r31
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	ef 2e       	mov	r14, r31
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	ff 2e       	mov	r15, r31
    3054:	f0 e2       	ldi	r31, 0x20	; 32
    3056:	0f 2f       	mov	r16, r31
    3058:	f1 e4       	ldi	r31, 0x41	; 65
    305a:	1f 2f       	mov	r17, r31
    305c:	f0 2d       	mov	r31, r0
    305e:	57 01       	movw	r10, r14
    3060:	68 01       	movw	r12, r16
    3062:	88 24       	eor	r8, r8
    3064:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	switch(currentMove){
    3068:	80 91 53 07 	lds	r24, 0x0753
    306c:	82 30       	cpi	r24, 0x02	; 2
    306e:	c1 f1       	breq	.+112    	; 0x30e0 <moveWorld+0x15a>
    3070:	83 30       	cpi	r24, 0x03	; 3
    3072:	09 f4       	brne	.+2      	; 0x3076 <moveWorld+0xf0>
    3074:	61 c0       	rjmp	.+194    	; 0x3138 <moveWorld+0x1b2>
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	09 f0       	breq	.+2      	; 0x307c <moveWorld+0xf6>
    307a:	9f c0       	rjmp	.+318    	; 0x31ba <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    307c:	8d b7       	in	r24, 0x3d	; 61
    307e:	9e b7       	in	r25, 0x3e	; 62
    3080:	08 97       	sbiw	r24, 0x08	; 8
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	9e bf       	out	0x3e, r25	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	8d bf       	out	0x3d, r24	; 61
    308c:	ed b7       	in	r30, 0x3d	; 61
    308e:	fe b7       	in	r31, 0x3e	; 62
    3090:	31 96       	adiw	r30, 0x01	; 1
    3092:	88 e6       	ldi	r24, 0x68	; 104
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	ad b7       	in	r26, 0x3d	; 61
    3098:	be b7       	in	r27, 0x3e	; 62
    309a:	12 96       	adiw	r26, 0x02	; 2
    309c:	9c 93       	st	X, r25
    309e:	8e 93       	st	-X, r24
    30a0:	11 97       	sbiw	r26, 0x01	; 1
    30a2:	80 91 24 05 	lds	r24, 0x0524
    30a6:	82 83       	std	Z+2, r24	; 0x02
    30a8:	13 82       	std	Z+3, r1	; 0x03
    30aa:	80 91 23 05 	lds	r24, 0x0523
    30ae:	84 83       	std	Z+4, r24	; 0x04
    30b0:	15 82       	std	Z+5, r1	; 0x05
    30b2:	80 91 2a 05 	lds	r24, 0x052A
    30b6:	86 83       	std	Z+6, r24	; 0x06
    30b8:	17 82       	std	Z+7, r1	; 0x07
    30ba:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    30be:	ed b7       	in	r30, 0x3d	; 61
    30c0:	fe b7       	in	r31, 0x3e	; 62
    30c2:	38 96       	adiw	r30, 0x08	; 8
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	fe bf       	out	0x3e, r31	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	ed bf       	out	0x3d, r30	; 61
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	4c e8       	ldi	r20, 0x8C	; 140
    30dc:	51 ec       	ldi	r21, 0xC1	; 193
    30de:	5d c0       	rjmp	.+186    	; 0x319a <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    30e0:	8d b7       	in	r24, 0x3d	; 61
    30e2:	9e b7       	in	r25, 0x3e	; 62
    30e4:	08 97       	sbiw	r24, 0x08	; 8
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	9e bf       	out	0x3e, r25	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	8d bf       	out	0x3d, r24	; 61
    30f0:	ed b7       	in	r30, 0x3d	; 61
    30f2:	fe b7       	in	r31, 0x3e	; 62
    30f4:	31 96       	adiw	r30, 0x01	; 1
    30f6:	83 e9       	ldi	r24, 0x93	; 147
    30f8:	91 e0       	ldi	r25, 0x01	; 1
    30fa:	ad b7       	in	r26, 0x3d	; 61
    30fc:	be b7       	in	r27, 0x3e	; 62
    30fe:	12 96       	adiw	r26, 0x02	; 2
    3100:	9c 93       	st	X, r25
    3102:	8e 93       	st	-X, r24
    3104:	11 97       	sbiw	r26, 0x01	; 1
    3106:	80 91 24 05 	lds	r24, 0x0524
    310a:	82 83       	std	Z+2, r24	; 0x02
    310c:	13 82       	std	Z+3, r1	; 0x03
    310e:	80 91 23 05 	lds	r24, 0x0523
    3112:	84 83       	std	Z+4, r24	; 0x04
    3114:	15 82       	std	Z+5, r1	; 0x05
    3116:	80 91 2a 05 	lds	r24, 0x052A
    311a:	86 83       	std	Z+6, r24	; 0x06
    311c:	17 82       	std	Z+7, r1	; 0x07
    311e:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWallOld();
    3122:	ed b7       	in	r30, 0x3d	; 61
    3124:	fe b7       	in	r31, 0x3e	; 62
    3126:	38 96       	adiw	r30, 0x08	; 8
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	fe bf       	out	0x3e, r31	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	ed bf       	out	0x3d, r30	; 61
    3132:	0e 94 b1 12 	call	0x2562	; 0x2562 <moveWallOld>
    3136:	53 c0       	rjmp	.+166    	; 0x31de <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    3138:	8d b7       	in	r24, 0x3d	; 61
    313a:	9e b7       	in	r25, 0x3e	; 62
    313c:	08 97       	sbiw	r24, 0x08	; 8
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	9e bf       	out	0x3e, r25	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	8d bf       	out	0x3d, r24	; 61
    3148:	ed b7       	in	r30, 0x3d	; 61
    314a:	fe b7       	in	r31, 0x3e	; 62
    314c:	31 96       	adiw	r30, 0x01	; 1
    314e:	81 ec       	ldi	r24, 0xC1	; 193
    3150:	91 e0       	ldi	r25, 0x01	; 1
    3152:	ad b7       	in	r26, 0x3d	; 61
    3154:	be b7       	in	r27, 0x3e	; 62
    3156:	12 96       	adiw	r26, 0x02	; 2
    3158:	9c 93       	st	X, r25
    315a:	8e 93       	st	-X, r24
    315c:	11 97       	sbiw	r26, 0x01	; 1
    315e:	80 91 24 05 	lds	r24, 0x0524
    3162:	82 83       	std	Z+2, r24	; 0x02
    3164:	13 82       	std	Z+3, r1	; 0x03
    3166:	80 91 23 05 	lds	r24, 0x0523
    316a:	84 83       	std	Z+4, r24	; 0x04
    316c:	15 82       	std	Z+5, r1	; 0x05
    316e:	80 91 2a 05 	lds	r24, 0x052A
    3172:	86 83       	std	Z+6, r24	; 0x06
    3174:	17 82       	std	Z+7, r1	; 0x07
    3176:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    317a:	ed b7       	in	r30, 0x3d	; 61
    317c:	fe b7       	in	r31, 0x3e	; 62
    317e:	38 96       	adiw	r30, 0x08	; 8
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	fe bf       	out	0x3e, r31	; 62
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	ed bf       	out	0x3d, r30	; 61
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	4c e8       	ldi	r20, 0x8C	; 140
    3198:	51 e4       	ldi	r21, 0x41	; 65
    319a:	0f 2e       	mov	r0, r31
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	ef 2e       	mov	r14, r31
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	ff 2e       	mov	r15, r31
    31a4:	f0 e2       	ldi	r31, 0x20	; 32
    31a6:	0f 2f       	mov	r16, r31
    31a8:	f1 e4       	ldi	r31, 0x41	; 65
    31aa:	1f 2f       	mov	r17, r31
    31ac:	f0 2d       	mov	r31, r0
    31ae:	57 01       	movw	r10, r14
    31b0:	68 01       	movw	r12, r16
    31b2:	88 24       	eor	r8, r8
    31b4:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    31b8:	12 c0       	rjmp	.+36     	; 0x31de <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <moveWorld+0x236>
    31bc:	8d ee       	ldi	r24, 0xED	; 237
    31be:	91 e0       	ldi	r25, 0x01	; 1
    31c0:	ad b7       	in	r26, 0x3d	; 61
    31c2:	be b7       	in	r27, 0x3e	; 62
    31c4:	12 96       	adiw	r26, 0x02	; 2
    31c6:	9c 93       	st	X, r25
    31c8:	8e 93       	st	-X, r24
    31ca:	11 97       	sbiw	r26, 0x01	; 1
    31cc:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	82 e0       	ldi	r24, 0x02	; 2
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	0e 94 b9 22 	call	0x4572	; 0x4572 <STEPPER_stop>
    31dc:	ff cf       	rjmp	.-2      	; 0x31dc <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    31de:	80 91 53 07 	lds	r24, 0x0753
    31e2:	80 93 54 07 	sts	0x0754, r24
	return 1;
}
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	ff 90       	pop	r15
    31ee:	ef 90       	pop	r14
    31f0:	df 90       	pop	r13
    31f2:	cf 90       	pop	r12
    31f4:	bf 90       	pop	r11
    31f6:	af 90       	pop	r10
    31f8:	8f 90       	pop	r8
    31fa:	08 95       	ret

000031fc <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    31fc:	ff 92       	push	r15
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	cf 93       	push	r28
    3204:	df 93       	push	r29
    3206:	ff 24       	eor	r15, r15
    3208:	f3 94       	inc	r15
    320a:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    320c:	c6 ef       	ldi	r28, 0xF6	; 246
    320e:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    3210:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    3214:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	21 f0       	breq	.+8      	; 0x3222 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    321a:	82 30       	cpi	r24, 0x02	; 2
    321c:	11 f0       	breq	.+4      	; 0x3222 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    321e:	83 30       	cpi	r24, 0x03	; 3
    3220:	39 f4       	brne	.+14     	; 0x3230 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    3222:	e1 2f       	mov	r30, r17
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	e9 55       	subi	r30, 0x59	; 89
    3228:	fa 4f       	sbci	r31, 0xFA	; 250
    322a:	00 83       	st	Z, r16
			i++;
    322c:	1f 5f       	subi	r17, 0xFF	; 255
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <movesInput+0x38>
		}

		if (btnHolder != 0){
    3230:	88 23       	and	r24, r24
    3232:	21 f1       	breq	.+72     	; 0x327c <movesInput+0x80>
			LCD_clear();
    3234:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    3238:	8d b7       	in	r24, 0x3d	; 61
    323a:	9e b7       	in	r25, 0x3e	; 62
    323c:	08 97       	sbiw	r24, 0x08	; 8
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	9e bf       	out	0x3e, r25	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	8d bf       	out	0x3d, r24	; 61
    3248:	ed b7       	in	r30, 0x3d	; 61
    324a:	fe b7       	in	r31, 0x3e	; 62
    324c:	31 96       	adiw	r30, 0x01	; 1
    324e:	ad b7       	in	r26, 0x3d	; 61
    3250:	be b7       	in	r27, 0x3e	; 62
    3252:	12 96       	adiw	r26, 0x02	; 2
    3254:	dc 93       	st	X, r29
    3256:	ce 93       	st	-X, r28
    3258:	11 97       	sbiw	r26, 0x01	; 1
    325a:	f2 82       	std	Z+2, r15	; 0x02
    325c:	13 82       	std	Z+3, r1	; 0x03
    325e:	04 83       	std	Z+4, r16	; 0x04
    3260:	15 82       	std	Z+5, r1	; 0x05
    3262:	16 83       	std	Z+6, r17	; 0x06
    3264:	17 82       	std	Z+7, r1	; 0x07
    3266:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    326a:	f0 2e       	mov	r15, r16
    326c:	8d b7       	in	r24, 0x3d	; 61
    326e:	9e b7       	in	r25, 0x3e	; 62
    3270:	08 96       	adiw	r24, 0x08	; 8
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	9e bf       	out	0x3e, r25	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    327c:	84 ef       	ldi	r24, 0xF4	; 244
    327e:	91 e0       	ldi	r25, 0x01	; 1
    3280:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    3284:	1b 30       	cpi	r17, 0x0B	; 11
    3286:	20 f2       	brcs	.-120    	; 0x3210 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    3288:	1f 5f       	subi	r17, 0xFF	; 255
    328a:	e1 2f       	mov	r30, r17
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	e9 55       	subi	r30, 0x59	; 89
    3290:	fa 4f       	sbci	r31, 0xFA	; 250
    3292:	84 e0       	ldi	r24, 0x04	; 4
    3294:	80 83       	st	Z, r24
}
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	08 95       	ret

000032a2 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    32a2:	1f 93       	push	r17
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    32aa:	c7 e2       	ldi	r28, 0x27	; 39
    32ac:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    32ae:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    32b2:	81 30       	cpi	r24, 0x01	; 1
    32b4:	21 f4       	brne	.+8      	; 0x32be <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    32b6:	80 91 ba 06 	lds	r24, 0x06BA
    32ba:	88 0f       	add	r24, r24
    32bc:	06 c0       	rjmp	.+12     	; 0x32ca <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    32be:	82 30       	cpi	r24, 0x02	; 2
    32c0:	39 f4       	brne	.+14     	; 0x32d0 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    32c2:	80 91 ba 06 	lds	r24, 0x06BA
    32c6:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    32c8:	8f 5f       	subi	r24, 0xFF	; 255
    32ca:	80 93 ba 06 	sts	0x06BA, r24
			i++;
    32ce:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    32d0:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <worldInput+0x34>
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <worldInput+0x36>
    32d8:	00 d0       	rcall	.+0      	; 0x32da <worldInput+0x38>
    32da:	ed b7       	in	r30, 0x3d	; 61
    32dc:	fe b7       	in	r31, 0x3e	; 62
    32de:	31 96       	adiw	r30, 0x01	; 1
    32e0:	ad b7       	in	r26, 0x3d	; 61
    32e2:	be b7       	in	r27, 0x3e	; 62
    32e4:	12 96       	adiw	r26, 0x02	; 2
    32e6:	dc 93       	st	X, r29
    32e8:	ce 93       	st	-X, r28
    32ea:	11 97       	sbiw	r26, 0x01	; 1
    32ec:	80 91 ba 06 	lds	r24, 0x06BA
    32f0:	82 83       	std	Z+2, r24	; 0x02
    32f2:	13 82       	std	Z+3, r1	; 0x03
    32f4:	14 83       	std	Z+4, r17	; 0x04
    32f6:	15 82       	std	Z+5, r1	; 0x05
    32f8:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    32fc:	8d b7       	in	r24, 0x3d	; 61
    32fe:	9e b7       	in	r25, 0x3e	; 62
    3300:	06 96       	adiw	r24, 0x06	; 6
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	9e bf       	out	0x3e, r25	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	8d bf       	out	0x3d, r24	; 61
    330c:	84 ef       	ldi	r24, 0xF4	; 244
    330e:	91 e0       	ldi	r25, 0x01	; 1
    3310:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    3314:	14 30       	cpi	r17, 0x04	; 4
    3316:	58 f2       	brcs	.-106    	; 0x32ae <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    3318:	80 91 ba 06 	lds	r24, 0x06BA
    331c:	80 93 bb 06 	sts	0x06BB, r24
}
    3320:	df 91       	pop	r29
    3322:	cf 91       	pop	r28
    3324:	1f 91       	pop	r17
    3326:	08 95       	ret

00003328 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    3328:	1f 93       	push	r17
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    3330:	cf e4       	ldi	r28, 0x4F	; 79
    3332:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    3334:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    3338:	81 30       	cpi	r24, 0x01	; 1
    333a:	21 f4       	brne	.+8      	; 0x3344 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    333c:	80 91 b8 05 	lds	r24, 0x05B8
    3340:	88 0f       	add	r24, r24
    3342:	06 c0       	rjmp	.+12     	; 0x3350 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    3344:	82 30       	cpi	r24, 0x02	; 2
    3346:	41 f4       	brne	.+16     	; 0x3358 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    3348:	80 91 b8 05 	lds	r24, 0x05B8
    334c:	88 0f       	add	r24, r24
			currentOrientation += 1;
    334e:	8f 5f       	subi	r24, 0xFF	; 255
    3350:	80 93 b8 05 	sts	0x05B8, r24
			i++;
    3354:	1f 5f       	subi	r17, 0xFF	; 255
    3356:	02 c0       	rjmp	.+4      	; 0x335c <orientationInput+0x34>
		}

		if (btnHolder != 0){
    3358:	88 23       	and	r24, r24
    335a:	f1 f0       	breq	.+60     	; 0x3398 <orientationInput+0x70>
			LCD_clear();
    335c:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    3360:	00 d0       	rcall	.+0      	; 0x3362 <orientationInput+0x3a>
    3362:	00 d0       	rcall	.+0      	; 0x3364 <orientationInput+0x3c>
    3364:	00 d0       	rcall	.+0      	; 0x3366 <orientationInput+0x3e>
    3366:	ed b7       	in	r30, 0x3d	; 61
    3368:	fe b7       	in	r31, 0x3e	; 62
    336a:	31 96       	adiw	r30, 0x01	; 1
    336c:	ad b7       	in	r26, 0x3d	; 61
    336e:	be b7       	in	r27, 0x3e	; 62
    3370:	12 96       	adiw	r26, 0x02	; 2
    3372:	dc 93       	st	X, r29
    3374:	ce 93       	st	-X, r28
    3376:	11 97       	sbiw	r26, 0x01	; 1
    3378:	80 91 b8 05 	lds	r24, 0x05B8
    337c:	82 83       	std	Z+2, r24	; 0x02
    337e:	13 82       	std	Z+3, r1	; 0x03
    3380:	14 83       	std	Z+4, r17	; 0x04
    3382:	15 82       	std	Z+5, r1	; 0x05
    3384:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    3388:	8d b7       	in	r24, 0x3d	; 61
    338a:	9e b7       	in	r25, 0x3e	; 62
    338c:	06 96       	adiw	r24, 0x06	; 6
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	9e bf       	out	0x3e, r25	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    3398:	84 ef       	ldi	r24, 0xF4	; 244
    339a:	91 e0       	ldi	r25, 0x01	; 1
    339c:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    33a0:	12 30       	cpi	r17, 0x02	; 2
    33a2:	40 f2       	brcs	.-112    	; 0x3334 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    33a4:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
	switch(currentOrientation){
    33a8:	80 91 b8 05 	lds	r24, 0x05B8
    33ac:	81 30       	cpi	r24, 0x01	; 1
    33ae:	51 f0       	breq	.+20     	; 0x33c4 <orientationInput+0x9c>
    33b0:	81 30       	cpi	r24, 0x01	; 1
    33b2:	28 f0       	brcs	.+10     	; 0x33be <orientationInput+0x96>
    33b4:	82 30       	cpi	r24, 0x02	; 2
    33b6:	49 f0       	breq	.+18     	; 0x33ca <orientationInput+0xa2>
    33b8:	83 30       	cpi	r24, 0x03	; 3
    33ba:	71 f4       	brne	.+28     	; 0x33d8 <orientationInput+0xb0>
    33bc:	09 c0       	rjmp	.+18     	; 0x33d0 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    33be:	8e e7       	ldi	r24, 0x7E	; 126
    33c0:	92 e0       	ldi	r25, 0x02	; 2
    33c2:	08 c0       	rjmp	.+16     	; 0x33d4 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    33c4:	80 ea       	ldi	r24, 0xA0	; 160
    33c6:	92 e0       	ldi	r25, 0x02	; 2
    33c8:	05 c0       	rjmp	.+10     	; 0x33d4 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    33ca:	81 ec       	ldi	r24, 0xC1	; 193
    33cc:	92 e0       	ldi	r25, 0x02	; 2
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    33d0:	83 ee       	ldi	r24, 0xE3	; 227
    33d2:	92 e0       	ldi	r25, 0x02	; 2
    33d4:	0e 94 30 3a 	call	0x7460	; 0x7460 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    33d8:	80 91 b8 05 	lds	r24, 0x05B8
    33dc:	80 93 b7 05 	sts	0x05B7, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    33e0:	84 ef       	ldi	r24, 0xF4	; 244
    33e2:	91 e0       	ldi	r25, 0x01	; 1
    33e4:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
}
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	08 95       	ret

000033f0 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    33f0:	cf 92       	push	r12
    33f2:	df 92       	push	r13
    33f4:	ef 92       	push	r14
    33f6:	ff 92       	push	r15
    33f8:	0f 93       	push	r16
    33fa:	1f 93       	push	r17
    33fc:	df 93       	push	r29
    33fe:	cf 93       	push	r28
    3400:	0f 92       	push	r0
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    3406:	80 91 ba 06 	lds	r24, 0x06BA
    340a:	f8 2e       	mov	r15, r24
    340c:	f6 94       	lsr	r15
    340e:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    3410:	98 2f       	mov	r25, r24
    3412:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    3414:	00 91 b8 05 	lds	r16, 0x05B8
    3418:	cc 24       	eor	r12, r12
    341a:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    341c:	f6 01       	movw	r30, r12
    341e:	e9 55       	subi	r30, 0x59	; 89
    3420:	fa 4f       	sbci	r31, 0xFA	; 250
    3422:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    3424:	ef 2d       	mov	r30, r15
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	ee 0f       	add	r30, r30
    342a:	ff 1f       	adc	r31, r31
    342c:	ee 0f       	add	r30, r30
    342e:	ff 1f       	adc	r31, r31
    3430:	e9 0f       	add	r30, r25
    3432:	f1 1d       	adc	r31, r1
    3434:	e9 57       	subi	r30, 0x79	; 121
    3436:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    3438:	80 81       	ld	r24, Z
    343a:	60 2f       	mov	r22, r16
    343c:	41 e0       	ldi	r20, 0x01	; 1
    343e:	99 83       	std	Y+1, r25	; 0x01
    3440:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    3444:	f6 01       	movw	r30, r12
    3446:	e1 5c       	subi	r30, 0xC1	; 193
    3448:	f8 4f       	sbci	r31, 0xF8	; 248
    344a:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    344c:	99 81       	ldd	r25, Y+1	; 0x01
    344e:	12 30       	cpi	r17, 0x02	; 2
    3450:	89 f4       	brne	.+34     	; 0x3474 <getGateways+0x84>
			switch(curOrient){
    3452:	01 30       	cpi	r16, 0x01	; 1
    3454:	49 f0       	breq	.+18     	; 0x3468 <getGateways+0x78>
    3456:	01 30       	cpi	r16, 0x01	; 1
    3458:	28 f0       	brcs	.+10     	; 0x3464 <getGateways+0x74>
    345a:	02 30       	cpi	r16, 0x02	; 2
    345c:	39 f0       	breq	.+14     	; 0x346c <getGateways+0x7c>
    345e:	03 30       	cpi	r16, 0x03	; 3
    3460:	89 f4       	brne	.+34     	; 0x3484 <getGateways+0x94>
    3462:	06 c0       	rjmp	.+12     	; 0x3470 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    3464:	fa 94       	dec	r15
    3466:	0e c0       	rjmp	.+28     	; 0x3484 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    3468:	9f 5f       	subi	r25, 0xFF	; 255
    346a:	0c c0       	rjmp	.+24     	; 0x3484 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    346c:	f3 94       	inc	r15
    346e:	0a c0       	rjmp	.+20     	; 0x3484 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    3470:	91 50       	subi	r25, 0x01	; 1
    3472:	08 c0       	rjmp	.+16     	; 0x3484 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    3474:	13 30       	cpi	r17, 0x03	; 3
    3476:	11 f4       	brne	.+4      	; 0x347c <getGateways+0x8c>
			curOrient++;
    3478:	0f 5f       	subi	r16, 0xFF	; 255
    347a:	03 c0       	rjmp	.+6      	; 0x3482 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    347c:	11 30       	cpi	r17, 0x01	; 1
    347e:	11 f4       	brne	.+4      	; 0x3484 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    3480:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    3482:	03 70       	andi	r16, 0x03	; 3
    3484:	08 94       	sec
    3486:	c1 1c       	adc	r12, r1
    3488:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    348a:	8d e0       	ldi	r24, 0x0D	; 13
    348c:	c8 16       	cp	r12, r24
    348e:	d1 04       	cpc	r13, r1
    3490:	29 f6       	brne	.-118    	; 0x341c <getGateways+0x2c>
    3492:	cc 24       	eor	r12, r12
    3494:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    3496:	74 e0       	ldi	r23, 0x04	; 4
    3498:	e7 2e       	mov	r14, r23
    349a:	73 e0       	ldi	r23, 0x03	; 3
    349c:	f7 2e       	mov	r15, r23
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    349e:	f6 01       	movw	r30, r12
    34a0:	e1 5c       	subi	r30, 0xC1	; 193
    34a2:	f8 4f       	sbci	r31, 0xF8	; 248
    34a4:	00 81       	ld	r16, Z
		LCD_clear();
    34a6:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    34aa:	20 2f       	mov	r18, r16
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	ad b7       	in	r26, 0x3d	; 61
    34b0:	be b7       	in	r27, 0x3e	; 62
    34b2:	54 97       	sbiw	r26, 0x14	; 20
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	be bf       	out	0x3e, r27	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	ad bf       	out	0x3d, r26	; 61
    34be:	ed b7       	in	r30, 0x3d	; 61
    34c0:	fe b7       	in	r31, 0x3e	; 62
    34c2:	31 96       	adiw	r30, 0x01	; 1
    34c4:	12 96       	adiw	r26, 0x02	; 2
    34c6:	fc 92       	st	X, r15
    34c8:	ee 92       	st	-X, r14
    34ca:	11 97       	sbiw	r26, 0x01	; 1
    34cc:	d3 82       	std	Z+3, r13	; 0x03
    34ce:	c2 82       	std	Z+2, r12	; 0x02
    34d0:	11 27       	eor	r17, r17
    34d2:	07 fd       	sbrc	r16, 7
    34d4:	10 95       	com	r17
    34d6:	00 27       	eor	r16, r16
    34d8:	11 0f       	add	r17, r17
    34da:	00 1f       	adc	r16, r16
    34dc:	11 27       	eor	r17, r17
    34de:	15 83       	std	Z+5, r17	; 0x05
    34e0:	04 83       	std	Z+4, r16	; 0x04
    34e2:	c9 01       	movw	r24, r18
    34e4:	56 e0       	ldi	r21, 0x06	; 6
    34e6:	96 95       	lsr	r25
    34e8:	87 95       	ror	r24
    34ea:	5a 95       	dec	r21
    34ec:	e1 f7       	brne	.-8      	; 0x34e6 <getGateways+0xf6>
    34ee:	81 70       	andi	r24, 0x01	; 1
    34f0:	90 70       	andi	r25, 0x00	; 0
    34f2:	97 83       	std	Z+7, r25	; 0x07
    34f4:	86 83       	std	Z+6, r24	; 0x06
    34f6:	c9 01       	movw	r24, r18
    34f8:	45 e0       	ldi	r20, 0x05	; 5
    34fa:	96 95       	lsr	r25
    34fc:	87 95       	ror	r24
    34fe:	4a 95       	dec	r20
    3500:	e1 f7       	brne	.-8      	; 0x34fa <getGateways+0x10a>
    3502:	81 70       	andi	r24, 0x01	; 1
    3504:	90 70       	andi	r25, 0x00	; 0
    3506:	91 87       	std	Z+9, r25	; 0x09
    3508:	80 87       	std	Z+8, r24	; 0x08
    350a:	c9 01       	movw	r24, r18
    350c:	04 e0       	ldi	r16, 0x04	; 4
    350e:	96 95       	lsr	r25
    3510:	87 95       	ror	r24
    3512:	0a 95       	dec	r16
    3514:	e1 f7       	brne	.-8      	; 0x350e <getGateways+0x11e>
    3516:	81 70       	andi	r24, 0x01	; 1
    3518:	90 70       	andi	r25, 0x00	; 0
    351a:	93 87       	std	Z+11, r25	; 0x0b
    351c:	82 87       	std	Z+10, r24	; 0x0a
    351e:	c9 01       	movw	r24, r18
    3520:	13 e0       	ldi	r17, 0x03	; 3
    3522:	96 95       	lsr	r25
    3524:	87 95       	ror	r24
    3526:	1a 95       	dec	r17
    3528:	e1 f7       	brne	.-8      	; 0x3522 <getGateways+0x132>
    352a:	81 70       	andi	r24, 0x01	; 1
    352c:	90 70       	andi	r25, 0x00	; 0
    352e:	95 87       	std	Z+13, r25	; 0x0d
    3530:	84 87       	std	Z+12, r24	; 0x0c
    3532:	c9 01       	movw	r24, r18
    3534:	96 95       	lsr	r25
    3536:	87 95       	ror	r24
    3538:	96 95       	lsr	r25
    353a:	87 95       	ror	r24
    353c:	81 70       	andi	r24, 0x01	; 1
    353e:	90 70       	andi	r25, 0x00	; 0
    3540:	97 87       	std	Z+15, r25	; 0x0f
    3542:	86 87       	std	Z+14, r24	; 0x0e
    3544:	c9 01       	movw	r24, r18
    3546:	96 95       	lsr	r25
    3548:	87 95       	ror	r24
    354a:	81 70       	andi	r24, 0x01	; 1
    354c:	90 70       	andi	r25, 0x00	; 0
    354e:	91 8b       	std	Z+17, r25	; 0x11
    3550:	80 8b       	std	Z+16, r24	; 0x10
    3552:	21 70       	andi	r18, 0x01	; 1
    3554:	30 70       	andi	r19, 0x00	; 0
    3556:	33 8b       	std	Z+19, r19	; 0x13
    3558:	22 8b       	std	Z+18, r18	; 0x12
    355a:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		TMRSRVC_delay(1000);//wait 1 second
    355e:	ed b7       	in	r30, 0x3d	; 61
    3560:	fe b7       	in	r31, 0x3e	; 62
    3562:	74 96       	adiw	r30, 0x14	; 20
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	fe bf       	out	0x3e, r31	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	ed bf       	out	0x3d, r30	; 61
    356e:	88 ee       	ldi	r24, 0xE8	; 232
    3570:	93 e0       	ldi	r25, 0x03	; 3
    3572:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
    3576:	08 94       	sec
    3578:	c1 1c       	adc	r12, r1
    357a:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    357c:	fd e0       	ldi	r31, 0x0D	; 13
    357e:	cf 16       	cp	r12, r31
    3580:	d1 04       	cpc	r13, r1
    3582:	09 f0       	breq	.+2      	; 0x3586 <getGateways+0x196>
    3584:	8c cf       	rjmp	.-232    	; 0x349e <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    3586:	0f 90       	pop	r0
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	ff 90       	pop	r15
    3592:	ef 90       	pop	r14
    3594:	df 90       	pop	r13
    3596:	cf 90       	pop	r12
    3598:	08 95       	ret

0000359a <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    359a:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    359c:	10 91 ba 06 	lds	r17, 0x06BA
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    35a0:	80 91 23 05 	lds	r24, 0x0523
    35a4:	60 91 b8 05 	lds	r22, 0x05B8
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    35ae:	e1 2f       	mov	r30, r17
    35b0:	e6 95       	lsr	r30
    35b2:	e6 95       	lsr	r30
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	ee 0f       	add	r30, r30
    35b8:	ff 1f       	adc	r31, r31
    35ba:	ee 0f       	add	r30, r30
    35bc:	ff 1f       	adc	r31, r31
    35be:	13 70       	andi	r17, 0x03	; 3
    35c0:	e1 0f       	add	r30, r17
    35c2:	f1 1d       	adc	r31, r1
    35c4:	e9 57       	subi	r30, 0x79	; 121
    35c6:	fc 4f       	sbci	r31, 0xFC	; 252
    35c8:	80 83       	st	Z, r24
}
    35ca:	1f 91       	pop	r17
    35cc:	08 95       	ret

000035ce <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    35ce:	df 92       	push	r13
    35d0:	ef 92       	push	r14
    35d2:	ff 92       	push	r15
    35d4:	0f 93       	push	r16
    35d6:	1f 93       	push	r17
    35d8:	06 2f       	mov	r16, r22
    35da:	14 2f       	mov	r17, r20
    35dc:	ff 24       	eor	r15, r15
    35de:	2e c0       	rjmp	.+92     	; 0x363c <matchBranch+0x6e>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    35e0:	05 30       	cpi	r16, 0x05	; 5
    35e2:	90 f5       	brcc	.+100    	; 0x3648 <matchBranch+0x7a>
    35e4:	15 30       	cpi	r17, 0x05	; 5
    35e6:	80 f5       	brcc	.+96     	; 0x3648 <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    35e8:	ef 2d       	mov	r30, r15
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	ee 5f       	subi	r30, 0xFE	; 254
    35ee:	fb 4f       	sbci	r31, 0xFB	; 251
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    35f0:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    35f2:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    35f4:	80 81       	ld	r24, Z
    35f6:	6e 2d       	mov	r22, r14
    35f8:	40 e0       	ldi	r20, 0x00	; 0
    35fa:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    35fe:	e0 2f       	mov	r30, r16
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	ee 0f       	add	r30, r30
    3604:	ff 1f       	adc	r31, r31
    3606:	ee 0f       	add	r30, r30
    3608:	ff 1f       	adc	r31, r31
    360a:	e1 0f       	add	r30, r17
    360c:	f1 1d       	adc	r31, r1
    360e:	e9 57       	subi	r30, 0x79	; 121
    3610:	fc 4f       	sbci	r31, 0xFC	; 252
    3612:	90 81       	ld	r25, Z
    3614:	89 17       	cp	r24, r25
    3616:	c1 f4       	brne	.+48     	; 0x3648 <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		currentCellWorld = (curRow << 2) + curCol;
    3618:	80 2f       	mov	r24, r16
    361a:	88 0f       	add	r24, r24
    361c:	88 0f       	add	r24, r24
    361e:	81 0f       	add	r24, r17
    3620:	80 93 ba 06 	sts	0x06BA, r24
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		currentCellWorld = shiftMap(currentCellWorld, curMove, curOrnt);
    3624:	6d 2d       	mov	r22, r13
    3626:	4e 2d       	mov	r20, r14
    3628:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <shiftMap>
    362c:	80 93 ba 06 	sts	0x06BA, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = currentCellWorld >> 2;
    3630:	08 2f       	mov	r16, r24
    3632:	06 95       	lsr	r16
    3634:	06 95       	lsr	r16
		curCol = currentCellWorld & 0b0011;
    3636:	18 2f       	mov	r17, r24
    3638:	13 70       	andi	r17, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    363a:	f3 94       	inc	r15
    363c:	80 91 11 04 	lds	r24, 0x0411
    3640:	f8 16       	cp	r15, r24
    3642:	70 f2       	brcs	.-100    	; 0x35e0 <matchBranch+0x12>
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	01 c0       	rjmp	.+2      	; 0x364a <matchBranch+0x7c>
    3648:	80 e0       	ldi	r24, 0x00	; 0
		curCol = currentCellWorld & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	return SUCCESS;
}
    364a:	1f 91       	pop	r17
    364c:	0f 91       	pop	r16
    364e:	ff 90       	pop	r15
    3650:	ef 90       	pop	r14
    3652:	df 90       	pop	r13
    3654:	08 95       	ret

00003656 <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    3656:	df 92       	push	r13
    3658:	ef 92       	push	r14
    365a:	ff 92       	push	r15
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    3664:	d0 90 02 04 	lds	r13, 0x0402
	// Local variables for nested for loops 
	unsigned char row, col;
	// Stores the number of matching seeds
	matchSeeds = 0;
    3668:	10 92 56 07 	sts	0x0756, r1
    366c:	00 e0       	ldi	r16, 0x00	; 0
    366e:	10 e0       	ldi	r17, 0x00	; 0
    3670:	1a c0       	rjmp	.+52     	; 0x36a6 <localizeGateway+0x50>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    3672:	88 81       	ld	r24, Y
    3674:	d8 16       	cp	r13, r24
    3676:	69 f4       	brne	.+26     	; 0x3692 <localizeGateway+0x3c>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    3678:	87 e8       	ldi	r24, 0x87	; 135
    367a:	93 e0       	ldi	r25, 0x03	; 3
    367c:	6e 2d       	mov	r22, r14
    367e:	4f 2d       	mov	r20, r15
    3680:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <matchBranch>
    3684:	88 23       	and	r24, r24
    3686:	29 f0       	breq	.+10     	; 0x3692 <localizeGateway+0x3c>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    3688:	80 91 56 07 	lds	r24, 0x0756
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	80 93 56 07 	sts	0x0756, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    3692:	f3 94       	inc	r15
    3694:	21 96       	adiw	r28, 0x01	; 1
    3696:	84 e0       	ldi	r24, 0x04	; 4
    3698:	f8 16       	cp	r15, r24
    369a:	59 f7       	brne	.-42     	; 0x3672 <localizeGateway+0x1c>
    369c:	0f 5f       	subi	r16, 0xFF	; 255
    369e:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    36a0:	04 30       	cpi	r16, 0x04	; 4
    36a2:	11 05       	cpc	r17, r1
    36a4:	51 f0       	breq	.+20     	; 0x36ba <localizeGateway+0x64>
    36a6:	e0 2e       	mov	r14, r16
    36a8:	e8 01       	movw	r28, r16
    36aa:	cc 0f       	add	r28, r28
    36ac:	dd 1f       	adc	r29, r29
    36ae:	cc 0f       	add	r28, r28
    36b0:	dd 1f       	adc	r29, r29
    36b2:	c9 57       	subi	r28, 0x79	; 121
    36b4:	dc 4f       	sbci	r29, 0xFC	; 252
    36b6:	ff 24       	eor	r15, r15
    36b8:	dc cf       	rjmp	.-72     	; 0x3672 <localizeGateway+0x1c>
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	80 91 56 07 	lds	r24, 0x0756
    36c0:	81 30       	cpi	r24, 0x01	; 1
    36c2:	09 f0       	breq	.+2      	; 0x36c6 <localizeGateway+0x70>
    36c4:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    36c6:	89 2f       	mov	r24, r25
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ff 90       	pop	r15
    36d2:	ef 90       	pop	r14
    36d4:	df 90       	pop	r13
    36d6:	08 95       	ret

000036d8 <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    36d8:	8f 92       	push	r8
    36da:	9f 92       	push	r9
    36dc:	af 92       	push	r10
    36de:	bf 92       	push	r11
    36e0:	cf 92       	push	r12
    36e2:	df 92       	push	r13
    36e4:	ef 92       	push	r14
    36e6:	ff 92       	push	r15
    36e8:	0f 93       	push	r16
    36ea:	1f 93       	push	r17
    36ec:	cf 93       	push	r28
    36ee:	df 93       	push	r29
	// initialize the robot
	initializeRobot();
    36f0:	0e 94 23 10 	call	0x2046	; 0x2046 <initializeRobot>
	
	// Loop variables for print debug
	unsigned char i, branch, move, orent;
	
	// Display the map
	LCD_clear();
    36f4:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    36f8:	86 e2       	ldi	r24, 0x26	; 38
    36fa:	93 e0       	ldi	r25, 0x03	; 3
    36fc:	0e 94 30 3a 	call	0x7460	; 0x7460 <puts>
	printMap(RESET);
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	0e 94 76 0f 	call	0x1eec	; 0x1eec <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    3706:	88 ee       	ldi	r24, 0xE8	; 232
    3708:	93 e0       	ldi	r25, 0x03	; 3
    370a:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
	LCD_clear();
    370e:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
		//Localize from Gateways?
		isLost = localizeGateway();
				
		//Print Tree		
		LCD_clear();
		LCD_printf("Branch");
    3712:	67 e3       	ldi	r22, 0x37	; 55
    3714:	86 2e       	mov	r8, r22
    3716:	63 e0       	ldi	r22, 0x03	; 3
    3718:	96 2e       	mov	r9, r22
		for(i = 0; i<BRANCH_MAX; i++){
			branch = localizeGateways[0][i];
			LCD_printf("%3d", branch);
    371a:	ce e3       	ldi	r28, 0x3E	; 62
    371c:	d3 e0       	ldi	r29, 0x03	; 3
		}
		LCD_printf("Move  ");
    371e:	52 e4       	ldi	r21, 0x42	; 66
    3720:	a5 2e       	mov	r10, r21
    3722:	53 e0       	ldi	r21, 0x03	; 3
    3724:	b5 2e       	mov	r11, r21
		for(i = 0; i<BRANCH_MAX; i++){
			move = localizeGateways[1][i];
			LCD_printf("%3d", move);
		}
		LCD_printf("Ornt  ");
    3726:	49 e4       	ldi	r20, 0x49	; 73
    3728:	c4 2e       	mov	r12, r20
    372a:	43 e0       	ldi	r20, 0x03	; 3
    372c:	d4 2e       	mov	r13, r20
		for(i = 0; i<BRANCH_MAX; i++){
			orent = localizeGateways[2][i];
			LCD_printf("%3d", orent);
		}
		LCD_printf("isLost %1d ",isLost);
    372e:	30 e5       	ldi	r19, 0x50	; 80
    3730:	e3 2e       	mov	r14, r19
    3732:	33 e0       	ldi	r19, 0x03	; 3
    3734:	f3 2e       	mov	r15, r19
		LCD_printf("seeds: %1d", matchSeeds);
    3736:	0c e5       	ldi	r16, 0x5C	; 92
    3738:	13 e0       	ldi	r17, 0x03	; 3
    373a:	35 c1       	rjmp	.+618    	; 0x39a6 <CBOT_main+0x2ce>
	
	// Localization Loop 
	while(isLost)
	{	
		//Sense Gateway
		checkIR();	
    373c:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <checkIR>
		checkWorld();
    3740:	0e 94 45 12 	call	0x248a	; 0x248a <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    3744:	0e 94 34 17 	call	0x2e68	; 0x2e68 <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    3748:	0e 94 2b 1b 	call	0x3656	; 0x3656 <localizeGateway>
    374c:	80 93 86 03 	sts	0x0386, r24
				
		//Print Tree		
		LCD_clear();
    3750:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
		LCD_printf("Branch");
    3754:	00 d0       	rcall	.+0      	; 0x3756 <CBOT_main+0x7e>
    3756:	ad b7       	in	r26, 0x3d	; 61
    3758:	be b7       	in	r27, 0x3e	; 62
    375a:	12 96       	adiw	r26, 0x02	; 2
    375c:	9c 92       	st	X, r9
    375e:	8e 92       	st	-X, r8
    3760:	11 97       	sbiw	r26, 0x01	; 1
    3762:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			branch = localizeGateways[0][i];
			LCD_printf("%3d", branch);
    3766:	00 d0       	rcall	.+0      	; 0x3768 <CBOT_main+0x90>
    3768:	ed b7       	in	r30, 0x3d	; 61
    376a:	fe b7       	in	r31, 0x3e	; 62
    376c:	31 96       	adiw	r30, 0x01	; 1
    376e:	ad b7       	in	r26, 0x3d	; 61
    3770:	be b7       	in	r27, 0x3e	; 62
    3772:	12 96       	adiw	r26, 0x02	; 2
    3774:	dc 93       	st	X, r29
    3776:	ce 93       	st	-X, r28
    3778:	11 97       	sbiw	r26, 0x01	; 1
    377a:	80 91 02 04 	lds	r24, 0x0402
    377e:	82 83       	std	Z+2, r24	; 0x02
    3780:	13 82       	std	Z+3, r1	; 0x03
    3782:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    3786:	ed b7       	in	r30, 0x3d	; 61
    3788:	fe b7       	in	r31, 0x3e	; 62
    378a:	31 96       	adiw	r30, 0x01	; 1
    378c:	ad b7       	in	r26, 0x3d	; 61
    378e:	be b7       	in	r27, 0x3e	; 62
    3790:	12 96       	adiw	r26, 0x02	; 2
    3792:	dc 93       	st	X, r29
    3794:	ce 93       	st	-X, r28
    3796:	11 97       	sbiw	r26, 0x01	; 1
    3798:	80 91 03 04 	lds	r24, 0x0403
    379c:	82 83       	std	Z+2, r24	; 0x02
    379e:	13 82       	std	Z+3, r1	; 0x03
    37a0:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    37a4:	ed b7       	in	r30, 0x3d	; 61
    37a6:	fe b7       	in	r31, 0x3e	; 62
    37a8:	31 96       	adiw	r30, 0x01	; 1
    37aa:	ad b7       	in	r26, 0x3d	; 61
    37ac:	be b7       	in	r27, 0x3e	; 62
    37ae:	12 96       	adiw	r26, 0x02	; 2
    37b0:	dc 93       	st	X, r29
    37b2:	ce 93       	st	-X, r28
    37b4:	11 97       	sbiw	r26, 0x01	; 1
    37b6:	80 91 04 04 	lds	r24, 0x0404
    37ba:	82 83       	std	Z+2, r24	; 0x02
    37bc:	13 82       	std	Z+3, r1	; 0x03
    37be:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    37c2:	ed b7       	in	r30, 0x3d	; 61
    37c4:	fe b7       	in	r31, 0x3e	; 62
    37c6:	31 96       	adiw	r30, 0x01	; 1
    37c8:	ad b7       	in	r26, 0x3d	; 61
    37ca:	be b7       	in	r27, 0x3e	; 62
    37cc:	12 96       	adiw	r26, 0x02	; 2
    37ce:	dc 93       	st	X, r29
    37d0:	ce 93       	st	-X, r28
    37d2:	11 97       	sbiw	r26, 0x01	; 1
    37d4:	80 91 05 04 	lds	r24, 0x0405
    37d8:	82 83       	std	Z+2, r24	; 0x02
    37da:	13 82       	std	Z+3, r1	; 0x03
    37dc:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    37e0:	ed b7       	in	r30, 0x3d	; 61
    37e2:	fe b7       	in	r31, 0x3e	; 62
    37e4:	31 96       	adiw	r30, 0x01	; 1
    37e6:	ad b7       	in	r26, 0x3d	; 61
    37e8:	be b7       	in	r27, 0x3e	; 62
    37ea:	12 96       	adiw	r26, 0x02	; 2
    37ec:	dc 93       	st	X, r29
    37ee:	ce 93       	st	-X, r28
    37f0:	11 97       	sbiw	r26, 0x01	; 1
    37f2:	80 91 06 04 	lds	r24, 0x0406
    37f6:	82 83       	std	Z+2, r24	; 0x02
    37f8:	13 82       	std	Z+3, r1	; 0x03
    37fa:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		}
		LCD_printf("Move  ");
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	ed b7       	in	r30, 0x3d	; 61
    3804:	fe b7       	in	r31, 0x3e	; 62
    3806:	b2 82       	std	Z+2, r11	; 0x02
    3808:	a1 82       	std	Z+1, r10	; 0x01
    380a:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			move = localizeGateways[1][i];
			LCD_printf("%3d", move);
    380e:	00 d0       	rcall	.+0      	; 0x3810 <CBOT_main+0x138>
    3810:	ed b7       	in	r30, 0x3d	; 61
    3812:	fe b7       	in	r31, 0x3e	; 62
    3814:	31 96       	adiw	r30, 0x01	; 1
    3816:	ad b7       	in	r26, 0x3d	; 61
    3818:	be b7       	in	r27, 0x3e	; 62
    381a:	12 96       	adiw	r26, 0x02	; 2
    381c:	dc 93       	st	X, r29
    381e:	ce 93       	st	-X, r28
    3820:	11 97       	sbiw	r26, 0x01	; 1
    3822:	80 91 07 04 	lds	r24, 0x0407
    3826:	82 83       	std	Z+2, r24	; 0x02
    3828:	13 82       	std	Z+3, r1	; 0x03
    382a:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    382e:	ed b7       	in	r30, 0x3d	; 61
    3830:	fe b7       	in	r31, 0x3e	; 62
    3832:	31 96       	adiw	r30, 0x01	; 1
    3834:	ad b7       	in	r26, 0x3d	; 61
    3836:	be b7       	in	r27, 0x3e	; 62
    3838:	12 96       	adiw	r26, 0x02	; 2
    383a:	dc 93       	st	X, r29
    383c:	ce 93       	st	-X, r28
    383e:	11 97       	sbiw	r26, 0x01	; 1
    3840:	80 91 08 04 	lds	r24, 0x0408
    3844:	82 83       	std	Z+2, r24	; 0x02
    3846:	13 82       	std	Z+3, r1	; 0x03
    3848:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    384c:	ed b7       	in	r30, 0x3d	; 61
    384e:	fe b7       	in	r31, 0x3e	; 62
    3850:	31 96       	adiw	r30, 0x01	; 1
    3852:	ad b7       	in	r26, 0x3d	; 61
    3854:	be b7       	in	r27, 0x3e	; 62
    3856:	12 96       	adiw	r26, 0x02	; 2
    3858:	dc 93       	st	X, r29
    385a:	ce 93       	st	-X, r28
    385c:	11 97       	sbiw	r26, 0x01	; 1
    385e:	80 91 09 04 	lds	r24, 0x0409
    3862:	82 83       	std	Z+2, r24	; 0x02
    3864:	13 82       	std	Z+3, r1	; 0x03
    3866:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    386a:	ed b7       	in	r30, 0x3d	; 61
    386c:	fe b7       	in	r31, 0x3e	; 62
    386e:	31 96       	adiw	r30, 0x01	; 1
    3870:	ad b7       	in	r26, 0x3d	; 61
    3872:	be b7       	in	r27, 0x3e	; 62
    3874:	12 96       	adiw	r26, 0x02	; 2
    3876:	dc 93       	st	X, r29
    3878:	ce 93       	st	-X, r28
    387a:	11 97       	sbiw	r26, 0x01	; 1
    387c:	80 91 0a 04 	lds	r24, 0x040A
    3880:	82 83       	std	Z+2, r24	; 0x02
    3882:	13 82       	std	Z+3, r1	; 0x03
    3884:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    3888:	ed b7       	in	r30, 0x3d	; 61
    388a:	fe b7       	in	r31, 0x3e	; 62
    388c:	31 96       	adiw	r30, 0x01	; 1
    388e:	ad b7       	in	r26, 0x3d	; 61
    3890:	be b7       	in	r27, 0x3e	; 62
    3892:	12 96       	adiw	r26, 0x02	; 2
    3894:	dc 93       	st	X, r29
    3896:	ce 93       	st	-X, r28
    3898:	11 97       	sbiw	r26, 0x01	; 1
    389a:	80 91 0b 04 	lds	r24, 0x040B
    389e:	82 83       	std	Z+2, r24	; 0x02
    38a0:	13 82       	std	Z+3, r1	; 0x03
    38a2:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		}
		LCD_printf("Ornt  ");
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	ed b7       	in	r30, 0x3d	; 61
    38ac:	fe b7       	in	r31, 0x3e	; 62
    38ae:	d2 82       	std	Z+2, r13	; 0x02
    38b0:	c1 82       	std	Z+1, r12	; 0x01
    38b2:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			orent = localizeGateways[2][i];
			LCD_printf("%3d", orent);
    38b6:	00 d0       	rcall	.+0      	; 0x38b8 <CBOT_main+0x1e0>
    38b8:	ed b7       	in	r30, 0x3d	; 61
    38ba:	fe b7       	in	r31, 0x3e	; 62
    38bc:	31 96       	adiw	r30, 0x01	; 1
    38be:	ad b7       	in	r26, 0x3d	; 61
    38c0:	be b7       	in	r27, 0x3e	; 62
    38c2:	12 96       	adiw	r26, 0x02	; 2
    38c4:	dc 93       	st	X, r29
    38c6:	ce 93       	st	-X, r28
    38c8:	11 97       	sbiw	r26, 0x01	; 1
    38ca:	80 91 0c 04 	lds	r24, 0x040C
    38ce:	82 83       	std	Z+2, r24	; 0x02
    38d0:	13 82       	std	Z+3, r1	; 0x03
    38d2:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    38d6:	ed b7       	in	r30, 0x3d	; 61
    38d8:	fe b7       	in	r31, 0x3e	; 62
    38da:	31 96       	adiw	r30, 0x01	; 1
    38dc:	ad b7       	in	r26, 0x3d	; 61
    38de:	be b7       	in	r27, 0x3e	; 62
    38e0:	12 96       	adiw	r26, 0x02	; 2
    38e2:	dc 93       	st	X, r29
    38e4:	ce 93       	st	-X, r28
    38e6:	11 97       	sbiw	r26, 0x01	; 1
    38e8:	80 91 0d 04 	lds	r24, 0x040D
    38ec:	82 83       	std	Z+2, r24	; 0x02
    38ee:	13 82       	std	Z+3, r1	; 0x03
    38f0:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    38f4:	ed b7       	in	r30, 0x3d	; 61
    38f6:	fe b7       	in	r31, 0x3e	; 62
    38f8:	31 96       	adiw	r30, 0x01	; 1
    38fa:	ad b7       	in	r26, 0x3d	; 61
    38fc:	be b7       	in	r27, 0x3e	; 62
    38fe:	12 96       	adiw	r26, 0x02	; 2
    3900:	dc 93       	st	X, r29
    3902:	ce 93       	st	-X, r28
    3904:	11 97       	sbiw	r26, 0x01	; 1
    3906:	80 91 0e 04 	lds	r24, 0x040E
    390a:	82 83       	std	Z+2, r24	; 0x02
    390c:	13 82       	std	Z+3, r1	; 0x03
    390e:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    3912:	ed b7       	in	r30, 0x3d	; 61
    3914:	fe b7       	in	r31, 0x3e	; 62
    3916:	31 96       	adiw	r30, 0x01	; 1
    3918:	ad b7       	in	r26, 0x3d	; 61
    391a:	be b7       	in	r27, 0x3e	; 62
    391c:	12 96       	adiw	r26, 0x02	; 2
    391e:	dc 93       	st	X, r29
    3920:	ce 93       	st	-X, r28
    3922:	11 97       	sbiw	r26, 0x01	; 1
    3924:	80 91 0f 04 	lds	r24, 0x040F
    3928:	82 83       	std	Z+2, r24	; 0x02
    392a:	13 82       	std	Z+3, r1	; 0x03
    392c:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
    3930:	ed b7       	in	r30, 0x3d	; 61
    3932:	fe b7       	in	r31, 0x3e	; 62
    3934:	31 96       	adiw	r30, 0x01	; 1
    3936:	ad b7       	in	r26, 0x3d	; 61
    3938:	be b7       	in	r27, 0x3e	; 62
    393a:	12 96       	adiw	r26, 0x02	; 2
    393c:	dc 93       	st	X, r29
    393e:	ce 93       	st	-X, r28
    3940:	11 97       	sbiw	r26, 0x01	; 1
    3942:	80 91 10 04 	lds	r24, 0x0410
    3946:	82 83       	std	Z+2, r24	; 0x02
    3948:	13 82       	std	Z+3, r1	; 0x03
    394a:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		}
		LCD_printf("isLost %1d ",isLost);
    394e:	ed b7       	in	r30, 0x3d	; 61
    3950:	fe b7       	in	r31, 0x3e	; 62
    3952:	31 96       	adiw	r30, 0x01	; 1
    3954:	ad b7       	in	r26, 0x3d	; 61
    3956:	be b7       	in	r27, 0x3e	; 62
    3958:	12 96       	adiw	r26, 0x02	; 2
    395a:	fc 92       	st	X, r15
    395c:	ee 92       	st	-X, r14
    395e:	11 97       	sbiw	r26, 0x01	; 1
    3960:	80 91 86 03 	lds	r24, 0x0386
    3964:	82 83       	std	Z+2, r24	; 0x02
    3966:	13 82       	std	Z+3, r1	; 0x03
    3968:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		LCD_printf("seeds: %1d", matchSeeds);
    396c:	ed b7       	in	r30, 0x3d	; 61
    396e:	fe b7       	in	r31, 0x3e	; 62
    3970:	31 96       	adiw	r30, 0x01	; 1
    3972:	ad b7       	in	r26, 0x3d	; 61
    3974:	be b7       	in	r27, 0x3e	; 62
    3976:	12 96       	adiw	r26, 0x02	; 2
    3978:	1c 93       	st	X, r17
    397a:	0e 93       	st	-X, r16
    397c:	11 97       	sbiw	r26, 0x01	; 1
    397e:	80 91 56 07 	lds	r24, 0x0756
    3982:	82 83       	std	Z+2, r24	; 0x02
    3984:	13 82       	std	Z+3, r1	; 0x03
    3986:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
		TMRSRVC_delay(2000);//wait 3 seconds
    398a:	0f 90       	pop	r0
    398c:	0f 90       	pop	r0
    398e:	0f 90       	pop	r0
    3990:	0f 90       	pop	r0
    3992:	80 ed       	ldi	r24, 0xD0	; 208
    3994:	97 e0       	ldi	r25, 0x07	; 7
    3996:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
		
		//Act on the Gateway
		moveMap();
    399a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <moveMap>
		
		// Break if not isLost
		if(!isLost){
    399e:	80 91 86 03 	lds	r24, 0x0386
    39a2:	88 23       	and	r24, r24
    39a4:	29 f0       	breq	.+10     	; 0x39b0 <CBOT_main+0x2d8>
	printMap(RESET);
	TMRSRVC_delay(1000);//wait 1 seconds
	LCD_clear();
	
	// Localization Loop 
	while(isLost)
    39a6:	80 91 86 03 	lds	r24, 0x0386
    39aa:	88 23       	and	r24, r24
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <CBOT_main+0x2d8>
    39ae:	c6 ce       	rjmp	.-628    	; 0x373c <CBOT_main+0x64>
		// LCD_printf("%5.5f\n%5.5f\n",odometryStepL,odometryStepL);
		// TMRSRVC_delay(1000);//wait 3 seconds
	}
	**/
	
	LCD_clear();
    39b0:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
	LCD_printf("LOLZ\nI'm found!");
    39b4:	00 d0       	rcall	.+0      	; 0x39b6 <CBOT_main+0x2de>
    39b6:	87 e6       	ldi	r24, 0x67	; 103
    39b8:	93 e0       	ldi	r25, 0x03	; 3
    39ba:	ed b7       	in	r30, 0x3d	; 61
    39bc:	fe b7       	in	r31, 0x3e	; 62
    39be:	92 83       	std	Z+2, r25	; 0x02
    39c0:	81 83       	std	Z+1, r24	; 0x01
    39c2:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
	TMRSRVC_delay(3000);//wait 3 seconds
    39c6:	0f 90       	pop	r0
    39c8:	0f 90       	pop	r0
    39ca:	88 eb       	ldi	r24, 0xB8	; 184
    39cc:	9b e0       	ldi	r25, 0x0B	; 11
    39ce:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
	
	LCD_clear();
    39d2:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    39d6:	86 e2       	ldi	r24, 0x26	; 38
    39d8:	93 e0       	ldi	r25, 0x03	; 3
    39da:	0e 94 30 3a 	call	0x7460	; 0x7460 <puts>
	printMap(RESET);
    39de:	81 e0       	ldi	r24, 0x01	; 1
    39e0:	0e 94 76 0f 	call	0x1eec	; 0x1eec <printMap>
	TMRSRVC_delay(10000);//wait 10 seconds
    39e4:	80 e1       	ldi	r24, 0x10	; 16
    39e6:	97 e2       	ldi	r25, 0x27	; 39
    39e8:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
	LCD_clear();
    39ec:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
	
	// Make metric map
	wavefrontMake();
    39f0:	0e 94 ca 11 	call	0x2394	; 0x2394 <wavefrontMake>
	
	currentGoalWorld = 12;
    39f4:	8c e0       	ldi	r24, 0x0C	; 12
    39f6:	80 93 29 05 	sts	0x0529, r24
    39fa:	16 c0       	rjmp	.+44     	; 0x3a28 <CBOT_main+0x350>
	
	while(!isGoal){
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    39fc:	80 91 ba 06 	lds	r24, 0x06BA
    3a00:	0e 94 6d 10 	call	0x20da	; 0x20da <fourNeighborSearch>
    3a04:	80 93 55 07 	sts	0x0755, r24
		if(isGoal){
    3a08:	88 23       	and	r24, r24
    3a0a:	91 f4       	brne	.+36     	; 0x3a30 <CBOT_main+0x358>
			break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    3a0c:	0e 94 75 17 	call	0x2eea	; 0x2eea <planMetric>
		
		// Act on the move
		moveMap();
    3a10:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    3a14:	80 91 ba 06 	lds	r24, 0x06BA
    3a18:	60 91 53 07 	lds	r22, 0x0753
    3a1c:	40 91 b8 05 	lds	r20, 0x05B8
    3a20:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <shiftMap>
    3a24:	80 93 ba 06 	sts	0x06BA, r24
	// Make metric map
	wavefrontMake();
	
	currentGoalWorld = 12;
	
	while(!isGoal){
    3a28:	80 91 55 07 	lds	r24, 0x0755
    3a2c:	88 23       	and	r24, r24
    3a2e:	31 f3       	breq	.-52     	; 0x39fc <CBOT_main+0x324>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
	}
	
	LCD_clear();
    3a30:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
	LCD_printf("LOLZ\nI'm here!");
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <CBOT_main+0x35e>
    3a36:	87 e7       	ldi	r24, 0x77	; 119
    3a38:	93 e0       	ldi	r25, 0x03	; 3
    3a3a:	ad b7       	in	r26, 0x3d	; 61
    3a3c:	be b7       	in	r27, 0x3e	; 62
    3a3e:	12 96       	adiw	r26, 0x02	; 2
    3a40:	9c 93       	st	X, r25
    3a42:	8e 93       	st	-X, r24
    3a44:	11 97       	sbiw	r26, 0x01	; 1
    3a46:	0e 94 1e 3a 	call	0x743c	; 0x743c <printf>
	TMRSRVC_delay(5000);//wait 3 seconds
    3a4a:	0f 90       	pop	r0
    3a4c:	0f 90       	pop	r0
    3a4e:	88 e8       	ldi	r24, 0x88	; 136
    3a50:	93 e1       	ldi	r25, 0x13	; 19
    3a52:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
		// LCD_clear();
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/
}// end the CBOT_main()
    3a56:	df 91       	pop	r29
    3a58:	cf 91       	pop	r28
    3a5a:	1f 91       	pop	r17
    3a5c:	0f 91       	pop	r16
    3a5e:	ff 90       	pop	r15
    3a60:	ef 90       	pop	r14
    3a62:	df 90       	pop	r13
    3a64:	cf 90       	pop	r12
    3a66:	bf 90       	pop	r11
    3a68:	af 90       	pop	r10
    3a6a:	9f 90       	pop	r9
    3a6c:	8f 90       	pop	r8
    3a6e:	08 95       	ret

00003a70 <ADC_open>:
    3a70:	8f e0       	ldi	r24, 0x0F	; 15
    3a72:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3a76:	88 23       	and	r24, r24
    3a78:	31 f4       	brne	.+12     	; 0x3a86 <ADC_open+0x16>
    3a7a:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <__ADC_init>
    3a7e:	8f e0       	ldi	r24, 0x0F	; 15
    3a80:	61 e0       	ldi	r22, 0x01	; 1
    3a82:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    3a86:	8f e0       	ldi	r24, 0x0F	; 15
    3a88:	91 e0       	ldi	r25, 0x01	; 1
    3a8a:	08 95       	ret

00003a8c <ADC_sample>:
    3a8c:	8f e0       	ldi	r24, 0x0F	; 15
    3a8e:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3a92:	81 30       	cpi	r24, 0x01	; 1
    3a94:	19 f0       	breq	.+6      	; 0x3a9c <ADC_sample+0x10>
    3a96:	20 e0       	ldi	r18, 0x00	; 0
    3a98:	30 e0       	ldi	r19, 0x00	; 0
    3a9a:	13 c0       	rjmp	.+38     	; 0x3ac2 <ADC_sample+0x36>
    3a9c:	80 91 7a 00 	lds	r24, 0x007A
    3aa0:	80 64       	ori	r24, 0x40	; 64
    3aa2:	80 93 7a 00 	sts	0x007A, r24
    3aa6:	80 91 7a 00 	lds	r24, 0x007A
    3aaa:	86 fd       	sbrc	r24, 6
    3aac:	fc cf       	rjmp	.-8      	; 0x3aa6 <ADC_sample+0x1a>
    3aae:	30 91 78 00 	lds	r19, 0x0078
    3ab2:	20 91 79 00 	lds	r18, 0x0079
    3ab6:	92 2f       	mov	r25, r18
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	23 2f       	mov	r18, r19
    3abc:	30 e0       	ldi	r19, 0x00	; 0
    3abe:	28 2b       	or	r18, r24
    3ac0:	39 2b       	or	r19, r25
    3ac2:	c9 01       	movw	r24, r18
    3ac4:	08 95       	ret

00003ac6 <ADC_set_channel>:
    3ac6:	58 2f       	mov	r21, r24
    3ac8:	80 91 a7 03 	lds	r24, 0x03A7
    3acc:	88 30       	cpi	r24, 0x08	; 8
    3ace:	d8 f4       	brcc	.+54     	; 0x3b06 <ADC_set_channel+0x40>
    3ad0:	40 91 7e 00 	lds	r20, 0x007E
    3ad4:	21 e0       	ldi	r18, 0x01	; 1
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	b9 01       	movw	r22, r18
    3ada:	02 c0       	rjmp	.+4      	; 0x3ae0 <ADC_set_channel+0x1a>
    3adc:	66 0f       	add	r22, r22
    3ade:	77 1f       	adc	r23, r23
    3ae0:	8a 95       	dec	r24
    3ae2:	e2 f7       	brpl	.-8      	; 0x3adc <ADC_set_channel+0x16>
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	80 95       	com	r24
    3ae8:	84 23       	and	r24, r20
    3aea:	80 93 7e 00 	sts	0x007E, r24
    3aee:	80 91 7e 00 	lds	r24, 0x007E
    3af2:	05 2e       	mov	r0, r21
    3af4:	02 c0       	rjmp	.+4      	; 0x3afa <ADC_set_channel+0x34>
    3af6:	22 0f       	add	r18, r18
    3af8:	33 1f       	adc	r19, r19
    3afa:	0a 94       	dec	r0
    3afc:	e2 f7       	brpl	.-8      	; 0x3af6 <ADC_set_channel+0x30>
    3afe:	82 2b       	or	r24, r18
    3b00:	80 93 7e 00 	sts	0x007E, r24
    3b04:	0d c0       	rjmp	.+26     	; 0x3b20 <ADC_set_channel+0x5a>
    3b06:	20 91 7e 00 	lds	r18, 0x007E
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	90 e0       	ldi	r25, 0x00	; 0
    3b0e:	05 2e       	mov	r0, r21
    3b10:	02 c0       	rjmp	.+4      	; 0x3b16 <ADC_set_channel+0x50>
    3b12:	88 0f       	add	r24, r24
    3b14:	99 1f       	adc	r25, r25
    3b16:	0a 94       	dec	r0
    3b18:	e2 f7       	brpl	.-8      	; 0x3b12 <ADC_set_channel+0x4c>
    3b1a:	28 2b       	or	r18, r24
    3b1c:	20 93 7e 00 	sts	0x007E, r18
    3b20:	50 93 a7 03 	sts	0x03A7, r21
    3b24:	80 91 7c 00 	lds	r24, 0x007C
    3b28:	5f 71       	andi	r21, 0x1F	; 31
    3b2a:	80 7e       	andi	r24, 0xE0	; 224
    3b2c:	85 2b       	or	r24, r21
    3b2e:	80 93 7c 00 	sts	0x007C, r24
    3b32:	08 95       	ret

00003b34 <ADC_set_VREF>:
    3b34:	ec e7       	ldi	r30, 0x7C	; 124
    3b36:	f0 e0       	ldi	r31, 0x00	; 0
    3b38:	90 81       	ld	r25, Z
    3b3a:	82 95       	swap	r24
    3b3c:	88 0f       	add	r24, r24
    3b3e:	88 0f       	add	r24, r24
    3b40:	80 7c       	andi	r24, 0xC0	; 192
    3b42:	9f 73       	andi	r25, 0x3F	; 63
    3b44:	98 2b       	or	r25, r24
    3b46:	90 83       	st	Z, r25
    3b48:	08 95       	ret

00003b4a <main>:
    3b4a:	0e 94 d4 25 	call	0x4ba8	; 0x4ba8 <CBOT_ISR_init>
    3b4e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CBOT_init>
    3b52:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <CBOT_main>
    3b56:	80 e0       	ldi	r24, 0x00	; 0
    3b58:	90 e0       	ldi	r25, 0x00	; 0
    3b5a:	08 95       	ret

00003b5c <LCD_clear>:
    3b5c:	0f 93       	push	r16
    3b5e:	1f 93       	push	r17
    3b60:	80 e4       	ldi	r24, 0x40	; 64
    3b62:	60 e0       	ldi	r22, 0x00	; 0
    3b64:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3b68:	00 e0       	ldi	r16, 0x00	; 0
    3b6a:	80 2f       	mov	r24, r16
    3b6c:	60 e0       	ldi	r22, 0x00	; 0
    3b6e:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <LCD_set_PGC_addr>
    3b72:	10 e0       	ldi	r17, 0x00	; 0
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	61 e0       	ldi	r22, 0x01	; 1
    3b78:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3b7c:	1f 5f       	subi	r17, 0xFF	; 255
    3b7e:	10 38       	cpi	r17, 0x80	; 128
    3b80:	c9 f7       	brne	.-14     	; 0x3b74 <LCD_clear+0x18>
    3b82:	0f 5f       	subi	r16, 0xFF	; 255
    3b84:	04 30       	cpi	r16, 0x04	; 4
    3b86:	89 f7       	brne	.-30     	; 0x3b6a <LCD_clear+0xe>
    3b88:	83 e0       	ldi	r24, 0x03	; 3
    3b8a:	60 e0       	ldi	r22, 0x00	; 0
    3b8c:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <LCD_set_next_PGC>
    3b90:	1f 91       	pop	r17
    3b92:	0f 91       	pop	r16
    3b94:	08 95       	ret

00003b96 <LCD_open>:
    3b96:	0f 93       	push	r16
    3b98:	1f 93       	push	r17
    3b9a:	82 e0       	ldi	r24, 0x02	; 2
    3b9c:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3ba0:	88 23       	and	r24, r24
    3ba2:	11 f4       	brne	.+4      	; 0x3ba8 <LCD_open+0x12>
    3ba4:	82 e0       	ldi	r24, 0x02	; 2
    3ba6:	06 c0       	rjmp	.+12     	; 0x3bb4 <LCD_open+0x1e>
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3bae:	88 23       	and	r24, r24
    3bb0:	19 f4       	brne	.+6      	; 0x3bb8 <LCD_open+0x22>
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	6d c0       	rjmp	.+218    	; 0x3c92 <LCD_open+0xfc>
    3bb8:	0e 94 3c 28 	call	0x5078	; 0x5078 <__LCD_init>
    3bbc:	85 e0       	ldi	r24, 0x05	; 5
    3bbe:	61 e0       	ldi	r22, 0x01	; 1
    3bc0:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    3bc4:	8e ea       	ldi	r24, 0xAE	; 174
    3bc6:	60 e0       	ldi	r22, 0x00	; 0
    3bc8:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3bcc:	82 ea       	ldi	r24, 0xA2	; 162
    3bce:	60 e0       	ldi	r22, 0x00	; 0
    3bd0:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3bd4:	80 ea       	ldi	r24, 0xA0	; 160
    3bd6:	60 e0       	ldi	r22, 0x00	; 0
    3bd8:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3bdc:	00 e5       	ldi	r16, 0x50	; 80
    3bde:	13 ec       	ldi	r17, 0xC3	; 195
    3be0:	c8 01       	movw	r24, r16
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	f1 f7       	brne	.-4      	; 0x3be2 <LCD_open+0x4c>
    3be6:	80 ec       	ldi	r24, 0xC0	; 192
    3be8:	60 e0       	ldi	r22, 0x00	; 0
    3bea:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3bee:	8f e2       	ldi	r24, 0x2F	; 47
    3bf0:	60 e0       	ldi	r22, 0x00	; 0
    3bf2:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3bf6:	81 e8       	ldi	r24, 0x81	; 129
    3bf8:	60 e0       	ldi	r22, 0x00	; 0
    3bfa:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3bfe:	86 e1       	ldi	r24, 0x16	; 22
    3c00:	60 e0       	ldi	r22, 0x00	; 0
    3c02:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3c06:	82 e2       	ldi	r24, 0x22	; 34
    3c08:	60 e0       	ldi	r22, 0x00	; 0
    3c0a:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3c0e:	c8 01       	movw	r24, r16
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	f1 f7       	brne	.-4      	; 0x3c10 <LCD_open+0x7a>
    3c14:	8f ea       	ldi	r24, 0xAF	; 175
    3c16:	60 e0       	ldi	r22, 0x00	; 0
    3c18:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3c1c:	86 ea       	ldi	r24, 0xA6	; 166
    3c1e:	60 e0       	ldi	r22, 0x00	; 0
    3c20:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3c24:	85 ea       	ldi	r24, 0xA5	; 165
    3c26:	60 e0       	ldi	r22, 0x00	; 0
    3c28:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	28 e8       	ldi	r18, 0x88	; 136
    3c32:	33 e1       	ldi	r19, 0x13	; 19
    3c34:	f9 01       	movw	r30, r18
    3c36:	31 97       	sbiw	r30, 0x01	; 1
    3c38:	f1 f7       	brne	.-4      	; 0x3c36 <LCD_open+0xa0>
    3c3a:	01 96       	adiw	r24, 0x01	; 1
    3c3c:	43 e0       	ldi	r20, 0x03	; 3
    3c3e:	88 3e       	cpi	r24, 0xE8	; 232
    3c40:	94 07       	cpc	r25, r20
    3c42:	c1 f7       	brne	.-16     	; 0x3c34 <LCD_open+0x9e>
    3c44:	83 eb       	ldi	r24, 0xB3	; 179
    3c46:	60 e0       	ldi	r22, 0x00	; 0
    3c48:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3c4c:	80 e4       	ldi	r24, 0x40	; 64
    3c4e:	60 e0       	ldi	r22, 0x00	; 0
    3c50:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3c54:	83 e0       	ldi	r24, 0x03	; 3
    3c56:	60 e0       	ldi	r22, 0x00	; 0
    3c58:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <LCD_set_PGC_addr>
    3c5c:	83 e0       	ldi	r24, 0x03	; 3
    3c5e:	60 e0       	ldi	r22, 0x00	; 0
    3c60:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <LCD_set_next_PGC>
    3c64:	10 92 a6 07 	sts	0x07A6, r1
    3c68:	10 92 a8 07 	sts	0x07A8, r1
    3c6c:	10 92 a7 07 	sts	0x07A7, r1
    3c70:	86 eb       	ldi	r24, 0xB6	; 182
    3c72:	93 e0       	ldi	r25, 0x03	; 3
    3c74:	90 93 d7 07 	sts	0x07D7, r25
    3c78:	80 93 d6 07 	sts	0x07D6, r24
    3c7c:	88 e1       	ldi	r24, 0x18	; 24
    3c7e:	0e 94 4c 1e 	call	0x3c98	; 0x3c98 <LCD_set_backlight>
    3c82:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
    3c86:	84 ea       	ldi	r24, 0xA4	; 164
    3c88:	60 e0       	ldi	r22, 0x00	; 0
    3c8a:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3c8e:	85 e0       	ldi	r24, 0x05	; 5
    3c90:	91 e0       	ldi	r25, 0x01	; 1
    3c92:	1f 91       	pop	r17
    3c94:	0f 91       	pop	r16
    3c96:	08 95       	ret

00003c98 <LCD_set_backlight>:
    3c98:	1f 93       	push	r17
    3c9a:	18 2f       	mov	r17, r24
    3c9c:	85 e0       	ldi	r24, 0x05	; 5
    3c9e:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3ca2:	81 30       	cpi	r24, 0x01	; 1
    3ca4:	c1 f4       	brne	.+48     	; 0x3cd6 <LCD_set_backlight+0x3e>
    3ca6:	87 e0       	ldi	r24, 0x07	; 7
    3ca8:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <SPI_set_slave_addr>
    3cac:	82 e0       	ldi	r24, 0x02	; 2
    3cae:	6a e0       	ldi	r22, 0x0A	; 10
    3cb0:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <SPI_transmit>
    3cb4:	82 e0       	ldi	r24, 0x02	; 2
    3cb6:	61 eb       	ldi	r22, 0xB1	; 177
    3cb8:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <SPI_transmit>
    3cbc:	61 2f       	mov	r22, r17
    3cbe:	11 32       	cpi	r17, 0x21	; 33
    3cc0:	08 f0       	brcs	.+2      	; 0x3cc4 <LCD_set_backlight+0x2c>
    3cc2:	60 e2       	ldi	r22, 0x20	; 32
    3cc4:	82 e0       	ldi	r24, 0x02	; 2
    3cc6:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <SPI_transmit>
    3cca:	89 ee       	ldi	r24, 0xE9	; 233
    3ccc:	8a 95       	dec	r24
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <LCD_set_backlight+0x34>
    3cd0:	87 e0       	ldi	r24, 0x07	; 7
    3cd2:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <SPI_set_slave_addr>
    3cd6:	1f 91       	pop	r17
    3cd8:	08 95       	ret

00003cda <LCD_set_next_PGC>:
    3cda:	83 70       	andi	r24, 0x03	; 3
    3cdc:	6f 77       	andi	r22, 0x7F	; 127
    3cde:	60 93 a4 07 	sts	0x07A4, r22
    3ce2:	80 93 a5 07 	sts	0x07A5, r24
    3ce6:	08 95       	ret

00003ce8 <LCD_set_PGC_addr>:
    3ce8:	0f 93       	push	r16
    3cea:	1f 93       	push	r17
    3cec:	06 2f       	mov	r16, r22
    3cee:	16 2f       	mov	r17, r22
    3cf0:	1f 77       	andi	r17, 0x7F	; 127
    3cf2:	83 70       	andi	r24, 0x03	; 3
    3cf4:	80 6b       	ori	r24, 0xB0	; 176
    3cf6:	60 e0       	ldi	r22, 0x00	; 0
    3cf8:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3cfc:	12 95       	swap	r17
    3cfe:	1f 70       	andi	r17, 0x0F	; 15
    3d00:	81 2f       	mov	r24, r17
    3d02:	80 61       	ori	r24, 0x10	; 16
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3d0a:	80 2f       	mov	r24, r16
    3d0c:	8f 70       	andi	r24, 0x0F	; 15
    3d0e:	60 e0       	ldi	r22, 0x00	; 0
    3d10:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    3d14:	1f 91       	pop	r17
    3d16:	0f 91       	pop	r16
    3d18:	08 95       	ret

00003d1a <LCD_write>:
    3d1a:	0f 93       	push	r16
    3d1c:	1f 93       	push	r17
    3d1e:	08 2f       	mov	r16, r24
    3d20:	16 2f       	mov	r17, r22
    3d22:	85 e0       	ldi	r24, 0x05	; 5
    3d24:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3d28:	81 30       	cpi	r24, 0x01	; 1
    3d2a:	79 f4       	brne	.+30     	; 0x3d4a <LCD_write+0x30>
    3d2c:	11 23       	and	r17, r17
    3d2e:	19 f0       	breq	.+6      	; 0x3d36 <LCD_write+0x1c>
    3d30:	11 30       	cpi	r17, 0x01	; 1
    3d32:	21 f4       	brne	.+8      	; 0x3d3c <LCD_write+0x22>
    3d34:	02 c0       	rjmp	.+4      	; 0x3d3a <LCD_write+0x20>
    3d36:	2b 98       	cbi	0x05, 3	; 5
    3d38:	01 c0       	rjmp	.+2      	; 0x3d3c <LCD_write+0x22>
    3d3a:	2b 9a       	sbi	0x05, 3	; 5
    3d3c:	86 e0       	ldi	r24, 0x06	; 6
    3d3e:	8a 95       	dec	r24
    3d40:	f1 f7       	brne	.-4      	; 0x3d3e <LCD_write+0x24>
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	60 2f       	mov	r22, r16
    3d46:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <SPI_transmit>
    3d4a:	1f 91       	pop	r17
    3d4c:	0f 91       	pop	r16
    3d4e:	08 95       	ret

00003d50 <LED_clr_pattern>:
    3d50:	1f 93       	push	r17
    3d52:	18 2f       	mov	r17, r24
    3d54:	86 e0       	ldi	r24, 0x06	; 6
    3d56:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3d5a:	81 30       	cpi	r24, 0x01	; 1
    3d5c:	19 f4       	brne	.+6      	; 0x3d64 <LED_clr_pattern+0x14>
    3d5e:	81 2f       	mov	r24, r17
    3d60:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__LED_clr_pattern>
    3d64:	1f 91       	pop	r17
    3d66:	08 95       	ret

00003d68 <LED_open>:
    3d68:	0e 94 f0 28 	call	0x51e0	; 0x51e0 <__LED_init>
    3d6c:	86 e0       	ldi	r24, 0x06	; 6
    3d6e:	61 e0       	ldi	r22, 0x01	; 1
    3d70:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    3d74:	86 e0       	ldi	r24, 0x06	; 6
    3d76:	91 e0       	ldi	r25, 0x01	; 1
    3d78:	08 95       	ret

00003d7a <LED_set_pattern>:
    3d7a:	1f 93       	push	r17
    3d7c:	18 2f       	mov	r17, r24
    3d7e:	86 e0       	ldi	r24, 0x06	; 6
    3d80:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3d84:	81 30       	cpi	r24, 0x01	; 1
    3d86:	19 f4       	brne	.+6      	; 0x3d8e <LED_set_pattern+0x14>
    3d88:	81 2f       	mov	r24, r17
    3d8a:	0e 94 f3 28 	call	0x51e6	; 0x51e6 <__LED_set_pattern>
    3d8e:	1f 91       	pop	r17
    3d90:	08 95       	ret

00003d92 <SPI_set_slave_addr>:
    3d92:	1f 93       	push	r17
    3d94:	18 2f       	mov	r17, r24
    3d96:	82 e0       	ldi	r24, 0x02	; 2
    3d98:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3d9c:	81 30       	cpi	r24, 0x01	; 1
    3d9e:	09 f0       	breq	.+2      	; 0x3da2 <SPI_set_slave_addr+0x10>
    3da0:	47 c0       	rjmp	.+142    	; 0x3e30 <SPI_set_slave_addr+0x9e>
    3da2:	91 2f       	mov	r25, r17
    3da4:	97 70       	andi	r25, 0x07	; 7
    3da6:	80 91 a9 07 	lds	r24, 0x07A9
    3daa:	98 17       	cp	r25, r24
    3dac:	09 f4       	brne	.+2      	; 0x3db0 <SPI_set_slave_addr+0x1e>
    3dae:	40 c0       	rjmp	.+128    	; 0x3e30 <SPI_set_slave_addr+0x9e>
    3db0:	90 93 a9 07 	sts	0x07A9, r25
    3db4:	85 b1       	in	r24, 0x05	; 5
    3db6:	88 7f       	andi	r24, 0xF8	; 248
    3db8:	89 2b       	or	r24, r25
    3dba:	85 b9       	out	0x05, r24	; 5
    3dbc:	93 30       	cpi	r25, 0x03	; 3
    3dbe:	11 f1       	breq	.+68     	; 0x3e04 <SPI_set_slave_addr+0x72>
    3dc0:	94 30       	cpi	r25, 0x04	; 4
    3dc2:	28 f4       	brcc	.+10     	; 0x3dce <SPI_set_slave_addr+0x3c>
    3dc4:	91 30       	cpi	r25, 0x01	; 1
    3dc6:	51 f0       	breq	.+20     	; 0x3ddc <SPI_set_slave_addr+0x4a>
    3dc8:	92 30       	cpi	r25, 0x02	; 2
    3dca:	90 f4       	brcc	.+36     	; 0x3df0 <SPI_set_slave_addr+0x5e>
    3dcc:	0c c0       	rjmp	.+24     	; 0x3de6 <SPI_set_slave_addr+0x54>
    3dce:	95 30       	cpi	r25, 0x05	; 5
    3dd0:	19 f1       	breq	.+70     	; 0x3e18 <SPI_set_slave_addr+0x86>
    3dd2:	95 30       	cpi	r25, 0x05	; 5
    3dd4:	e0 f0       	brcs	.+56     	; 0x3e0e <SPI_set_slave_addr+0x7c>
    3dd6:	96 30       	cpi	r25, 0x06	; 6
    3dd8:	21 f5       	brne	.+72     	; 0x3e22 <SPI_set_slave_addr+0x90>
    3dda:	0f c0       	rjmp	.+30     	; 0x3dfa <SPI_set_slave_addr+0x68>
    3ddc:	e0 91 74 04 	lds	r30, 0x0474
    3de0:	f0 91 75 04 	lds	r31, 0x0475
    3de4:	22 c0       	rjmp	.+68     	; 0x3e2a <SPI_set_slave_addr+0x98>
    3de6:	e0 91 72 04 	lds	r30, 0x0472
    3dea:	f0 91 73 04 	lds	r31, 0x0473
    3dee:	1d c0       	rjmp	.+58     	; 0x3e2a <SPI_set_slave_addr+0x98>
    3df0:	e0 91 76 04 	lds	r30, 0x0476
    3df4:	f0 91 77 04 	lds	r31, 0x0477
    3df8:	18 c0       	rjmp	.+48     	; 0x3e2a <SPI_set_slave_addr+0x98>
    3dfa:	e0 91 7e 04 	lds	r30, 0x047E
    3dfe:	f0 91 7f 04 	lds	r31, 0x047F
    3e02:	13 c0       	rjmp	.+38     	; 0x3e2a <SPI_set_slave_addr+0x98>
    3e04:	e0 91 78 04 	lds	r30, 0x0478
    3e08:	f0 91 79 04 	lds	r31, 0x0479
    3e0c:	0e c0       	rjmp	.+28     	; 0x3e2a <SPI_set_slave_addr+0x98>
    3e0e:	e0 91 7a 04 	lds	r30, 0x047A
    3e12:	f0 91 7b 04 	lds	r31, 0x047B
    3e16:	09 c0       	rjmp	.+18     	; 0x3e2a <SPI_set_slave_addr+0x98>
    3e18:	e0 91 7c 04 	lds	r30, 0x047C
    3e1c:	f0 91 7d 04 	lds	r31, 0x047D
    3e20:	04 c0       	rjmp	.+8      	; 0x3e2a <SPI_set_slave_addr+0x98>
    3e22:	e0 91 80 04 	lds	r30, 0x0480
    3e26:	f0 91 81 04 	lds	r31, 0x0481
    3e2a:	30 97       	sbiw	r30, 0x00	; 0
    3e2c:	09 f0       	breq	.+2      	; 0x3e30 <SPI_set_slave_addr+0x9e>
    3e2e:	09 95       	icall
    3e30:	1f 91       	pop	r17
    3e32:	08 95       	ret

00003e34 <SPI_transmit>:
    3e34:	1f 93       	push	r17
    3e36:	16 2f       	mov	r17, r22
    3e38:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <SPI_set_slave_addr>
    3e3c:	82 e0       	ldi	r24, 0x02	; 2
    3e3e:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3e42:	81 30       	cpi	r24, 0x01	; 1
    3e44:	21 f4       	brne	.+8      	; 0x3e4e <SPI_transmit+0x1a>
    3e46:	1e bd       	out	0x2e, r17	; 46
    3e48:	0d b4       	in	r0, 0x2d	; 45
    3e4a:	07 fe       	sbrs	r0, 7
    3e4c:	fd cf       	rjmp	.-6      	; 0x3e48 <SPI_transmit+0x14>
    3e4e:	1f 91       	pop	r17
    3e50:	08 95       	ret

00003e52 <__SPKR_set_up_freq_LUT>:
    3e52:	0f 93       	push	r16
    3e54:	1f 93       	push	r17
    3e56:	cf 93       	push	r28
    3e58:	df 93       	push	r29
    3e5a:	80 e2       	ldi	r24, 0x20	; 32
    3e5c:	91 e0       	ldi	r25, 0x01	; 1
    3e5e:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <malloc>
    3e62:	9c 01       	movw	r18, r24
    3e64:	90 93 91 04 	sts	0x0491, r25
    3e68:	80 93 90 04 	sts	0x0490, r24
    3e6c:	89 2b       	or	r24, r25
    3e6e:	11 f4       	brne	.+4      	; 0x3e74 <__SPKR_set_up_freq_LUT+0x22>
    3e70:	80 e0       	ldi	r24, 0x00	; 0
    3e72:	39 c0       	rjmp	.+114    	; 0x3ee6 <__SPKR_set_up_freq_LUT+0x94>
    3e74:	89 01       	movw	r16, r18
    3e76:	c0 e0       	ldi	r28, 0x00	; 0
    3e78:	d0 e0       	ldi	r29, 0x00	; 0
    3e7a:	be 01       	movw	r22, r28
    3e7c:	80 e0       	ldi	r24, 0x00	; 0
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	0e 94 67 31 	call	0x62ce	; 0x62ce <__floatunsisf>
    3e84:	20 e0       	ldi	r18, 0x00	; 0
    3e86:	30 e0       	ldi	r19, 0x00	; 0
    3e88:	40 ea       	ldi	r20, 0xA0	; 160
    3e8a:	51 e4       	ldi	r21, 0x41	; 65
    3e8c:	0e 94 ce 30 	call	0x619c	; 0x619c <__divsf3>
    3e90:	27 ef       	ldi	r18, 0xF7	; 247
    3e92:	35 e7       	ldi	r19, 0x75	; 117
    3e94:	40 e0       	ldi	r20, 0x00	; 0
    3e96:	5f e3       	ldi	r21, 0x3F	; 63
    3e98:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3e9c:	9b 01       	movw	r18, r22
    3e9e:	ac 01       	movw	r20, r24
    3ea0:	60 e0       	ldi	r22, 0x00	; 0
    3ea2:	70 e0       	ldi	r23, 0x00	; 0
    3ea4:	80 e2       	ldi	r24, 0x20	; 32
    3ea6:	91 e4       	ldi	r25, 0x41	; 65
    3ea8:	0e 94 ba 32 	call	0x6574	; 0x6574 <pow>
    3eac:	9b 01       	movw	r18, r22
    3eae:	ac 01       	movw	r20, r24
    3eb0:	ca 01       	movw	r24, r20
    3eb2:	b9 01       	movw	r22, r18
    3eb4:	2d ec       	ldi	r18, 0xCD	; 205
    3eb6:	3c ec       	ldi	r19, 0xCC	; 204
    3eb8:	42 e8       	ldi	r20, 0x82	; 130
    3eba:	51 e4       	ldi	r21, 0x41	; 65
    3ebc:	0e 94 57 32 	call	0x64ae	; 0x64ae <__mulsf3>
    3ec0:	0e 94 1d 32 	call	0x643a	; 0x643a <lrint>
    3ec4:	2a e0       	ldi	r18, 0x0A	; 10
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	50 e0       	ldi	r21, 0x00	; 0
    3ecc:	0e 94 87 37 	call	0x6f0e	; 0x6f0e <__mulsi3>
    3ed0:	f8 01       	movw	r30, r16
    3ed2:	61 93       	st	Z+, r22
    3ed4:	71 93       	st	Z+, r23
    3ed6:	81 93       	st	Z+, r24
    3ed8:	91 93       	st	Z+, r25
    3eda:	8f 01       	movw	r16, r30
    3edc:	21 96       	adiw	r28, 0x01	; 1
    3ede:	c8 34       	cpi	r28, 0x48	; 72
    3ee0:	d1 05       	cpc	r29, r1
    3ee2:	59 f6       	brne	.-106    	; 0x3e7a <__SPKR_set_up_freq_LUT+0x28>
    3ee4:	81 e0       	ldi	r24, 0x01	; 1
    3ee6:	df 91       	pop	r29
    3ee8:	cf 91       	pop	r28
    3eea:	1f 91       	pop	r17
    3eec:	0f 91       	pop	r16
    3eee:	08 95       	ret

00003ef0 <__SPKR_open_beep_mode>:
    3ef0:	8a e0       	ldi	r24, 0x0A	; 10
    3ef2:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3ef6:	88 23       	and	r24, r24
    3ef8:	71 f4       	brne	.+28     	; 0x3f16 <__SPKR_open_beep_mode+0x26>
    3efa:	10 92 8d 04 	sts	0x048D, r1
    3efe:	10 92 8c 04 	sts	0x048C, r1
    3f02:	81 e0       	ldi	r24, 0x01	; 1
    3f04:	0e 94 2e 2a 	call	0x545c	; 0x545c <__SPKR_init>
    3f08:	81 e0       	ldi	r24, 0x01	; 1
    3f0a:	80 93 83 04 	sts	0x0483, r24
    3f0e:	8a e0       	ldi	r24, 0x0A	; 10
    3f10:	61 e0       	ldi	r22, 0x01	; 1
    3f12:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    3f16:	8a e0       	ldi	r24, 0x0A	; 10
    3f18:	91 e0       	ldi	r25, 0x01	; 1
    3f1a:	08 95       	ret

00003f1c <__SPKR_open_tone_mode>:
    3f1c:	1f 93       	push	r17
    3f1e:	8b e0       	ldi	r24, 0x0B	; 11
    3f20:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3f24:	88 23       	and	r24, r24
    3f26:	11 f0       	breq	.+4      	; 0x3f2c <__SPKR_open_tone_mode+0x10>
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	21 c0       	rjmp	.+66     	; 0x3f6e <__SPKR_open_tone_mode+0x52>
    3f2c:	89 e0       	ldi	r24, 0x09	; 9
    3f2e:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    3f32:	88 23       	and	r24, r24
    3f34:	d9 f4       	brne	.+54     	; 0x3f6c <__SPKR_open_tone_mode+0x50>
    3f36:	0e 94 29 1f 	call	0x3e52	; 0x3e52 <__SPKR_set_up_freq_LUT>
    3f3a:	18 2f       	mov	r17, r24
    3f3c:	81 30       	cpi	r24, 0x01	; 1
    3f3e:	b1 f4       	brne	.+44     	; 0x3f6c <__SPKR_open_tone_mode+0x50>
    3f40:	10 92 84 04 	sts	0x0484, r1
    3f44:	10 92 85 04 	sts	0x0485, r1
    3f48:	10 92 86 04 	sts	0x0486, r1
    3f4c:	10 92 87 04 	sts	0x0487, r1
    3f50:	8d e0       	ldi	r24, 0x0D	; 13
    3f52:	61 eb       	ldi	r22, 0xB1	; 177
    3f54:	79 e2       	ldi	r23, 0x29	; 41
    3f56:	0e 94 14 28 	call	0x5028	; 0x5028 <ISR_attach>
    3f5a:	82 e0       	ldi	r24, 0x02	; 2
    3f5c:	0e 94 2e 2a 	call	0x545c	; 0x545c <__SPKR_init>
    3f60:	10 93 82 04 	sts	0x0482, r17
    3f64:	89 e0       	ldi	r24, 0x09	; 9
    3f66:	61 e0       	ldi	r22, 0x01	; 1
    3f68:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    3f6c:	91 e0       	ldi	r25, 0x01	; 1
    3f6e:	89 e0       	ldi	r24, 0x09	; 9
    3f70:	1f 91       	pop	r17
    3f72:	08 95       	ret

00003f74 <SPKR_open>:
    3f74:	81 30       	cpi	r24, 0x01	; 1
    3f76:	29 f0       	breq	.+10     	; 0x3f82 <SPKR_open+0xe>
    3f78:	82 30       	cpi	r24, 0x02	; 2
    3f7a:	31 f0       	breq	.+12     	; 0x3f88 <SPKR_open+0x14>
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	89 e0       	ldi	r24, 0x09	; 9
    3f80:	08 95       	ret
    3f82:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <__SPKR_open_beep_mode>
    3f86:	08 95       	ret
    3f88:	0e 94 8e 1f 	call	0x3f1c	; 0x3f1c <__SPKR_open_tone_mode>
    3f8c:	08 95       	ret

00003f8e <STEPPER_get_nSteps>:
    3f8e:	80 91 6a 07 	lds	r24, 0x076A
    3f92:	90 91 6b 07 	lds	r25, 0x076B
    3f96:	20 91 6c 07 	lds	r18, 0x076C
    3f9a:	30 91 6d 07 	lds	r19, 0x076D
    3f9e:	bc 01       	movw	r22, r24
    3fa0:	c9 01       	movw	r24, r18
    3fa2:	08 95       	ret

00003fa4 <STEPPER_stepmode>:
    3fa4:	2f 92       	push	r2
    3fa6:	3f 92       	push	r3
    3fa8:	4f 92       	push	r4
    3faa:	5f 92       	push	r5
    3fac:	6f 92       	push	r6
    3fae:	7f 92       	push	r7
    3fb0:	8f 92       	push	r8
    3fb2:	9f 92       	push	r9
    3fb4:	af 92       	push	r10
    3fb6:	bf 92       	push	r11
    3fb8:	cf 92       	push	r12
    3fba:	df 92       	push	r13
    3fbc:	ef 92       	push	r14
    3fbe:	ff 92       	push	r15
    3fc0:	0f 93       	push	r16
    3fc2:	1f 93       	push	r17
    3fc4:	df 93       	push	r29
    3fc6:	cf 93       	push	r28
    3fc8:	cd b7       	in	r28, 0x3d	; 61
    3fca:	de b7       	in	r29, 0x3e	; 62
    3fcc:	58 2e       	mov	r5, r24
    3fce:	96 2e       	mov	r9, r22
    3fd0:	44 2e       	mov	r4, r20
    3fd2:	39 01       	movw	r6, r18
    3fd4:	3c 2c       	mov	r3, r12
    3fd6:	c9 8c       	ldd	r12, Y+25	; 0x19
    3fd8:	da 8c       	ldd	r13, Y+26	; 0x1a
    3fda:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3fdc:	81 e0       	ldi	r24, 0x01	; 1
    3fde:	68 17       	cp	r22, r24
    3fe0:	39 f1       	breq	.+78     	; 0x4030 <STEPPER_stepmode+0x8c>
    3fe2:	68 17       	cp	r22, r24
    3fe4:	28 f0       	brcs	.+10     	; 0x3ff0 <STEPPER_stepmode+0x4c>
    3fe6:	92 e0       	ldi	r25, 0x02	; 2
    3fe8:	69 17       	cp	r22, r25
    3fea:	09 f0       	breq	.+2      	; 0x3fee <STEPPER_stepmode+0x4a>
    3fec:	85 c0       	rjmp	.+266    	; 0x40f8 <STEPPER_stepmode+0x154>
    3fee:	49 c0       	rjmp	.+146    	; 0x4082 <STEPPER_stepmode+0xde>
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	61 e0       	ldi	r22, 0x01	; 1
    3ff4:	0e 94 db 21 	call	0x43b6	; 0x43b6 <STEPPER_set_mode>
    3ff8:	80 e0       	ldi	r24, 0x00	; 0
    3ffa:	b7 01       	movw	r22, r14
    3ffc:	0e 94 a4 21 	call	0x4348	; 0x4348 <STEPPER_set_accel>
    4000:	80 e0       	ldi	r24, 0x00	; 0
    4002:	64 2d       	mov	r22, r4
    4004:	a3 01       	movw	r20, r6
    4006:	98 01       	movw	r18, r16
    4008:	03 2d       	mov	r16, r3
    400a:	ee 24       	eor	r14, r14
    400c:	e3 94       	inc	r14
    400e:	ef e8       	ldi	r30, 0x8F	; 143
    4010:	ce 2e       	mov	r12, r30
    4012:	e7 e0       	ldi	r30, 0x07	; 7
    4014:	de 2e       	mov	r13, r30
    4016:	0e 94 2d 22 	call	0x445a	; 0x445a <STEPPER_step>
    401a:	55 20       	and	r5, r5
    401c:	09 f0       	breq	.+2      	; 0x4020 <STEPPER_stepmode+0x7c>
    401e:	6c c0       	rjmp	.+216    	; 0x40f8 <STEPPER_stepmode+0x154>
    4020:	00 d0       	rcall	.+0      	; 0x4022 <STEPPER_stepmode+0x7e>
    4022:	0f 92       	push	r0
    4024:	ed b7       	in	r30, 0x3d	; 61
    4026:	fe b7       	in	r31, 0x3e	; 62
    4028:	11 82       	std	Z+1, r1	; 0x01
    402a:	b3 82       	std	Z+3, r11	; 0x03
    402c:	a2 82       	std	Z+2, r10	; 0x02
    402e:	23 c0       	rjmp	.+70     	; 0x4076 <STEPPER_stepmode+0xd2>
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	61 e0       	ldi	r22, 0x01	; 1
    4034:	0e 94 db 21 	call	0x43b6	; 0x43b6 <STEPPER_set_mode>
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	b6 01       	movw	r22, r12
    403c:	0e 94 a4 21 	call	0x4348	; 0x4348 <STEPPER_set_accel>
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	68 2d       	mov	r22, r8
    4044:	4d 89       	ldd	r20, Y+21	; 0x15
    4046:	5e 89       	ldd	r21, Y+22	; 0x16
    4048:	2f 89       	ldd	r18, Y+23	; 0x17
    404a:	38 8d       	ldd	r19, Y+24	; 0x18
    404c:	02 2d       	mov	r16, r2
    404e:	ee 24       	eor	r14, r14
    4050:	e3 94       	inc	r14
    4052:	7f e8       	ldi	r23, 0x8F	; 143
    4054:	c7 2e       	mov	r12, r23
    4056:	77 e0       	ldi	r23, 0x07	; 7
    4058:	d7 2e       	mov	r13, r23
    405a:	0e 94 2d 22 	call	0x445a	; 0x445a <STEPPER_step>
    405e:	55 20       	and	r5, r5
    4060:	09 f0       	breq	.+2      	; 0x4064 <STEPPER_stepmode+0xc0>
    4062:	4a c0       	rjmp	.+148    	; 0x40f8 <STEPPER_stepmode+0x154>
    4064:	00 d0       	rcall	.+0      	; 0x4066 <STEPPER_stepmode+0xc2>
    4066:	0f 92       	push	r0
    4068:	ed b7       	in	r30, 0x3d	; 61
    406a:	fe b7       	in	r31, 0x3e	; 62
    406c:	91 82       	std	Z+1, r9	; 0x01
    406e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4070:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4072:	93 83       	std	Z+3, r25	; 0x03
    4074:	82 83       	std	Z+2, r24	; 0x02
    4076:	0e 94 de 22 	call	0x45bc	; 0x45bc <STEPPER_wait_and_then>
    407a:	0f 90       	pop	r0
    407c:	0f 90       	pop	r0
    407e:	0f 90       	pop	r0
    4080:	3b c0       	rjmp	.+118    	; 0x40f8 <STEPPER_stepmode+0x154>
    4082:	82 e0       	ldi	r24, 0x02	; 2
    4084:	61 e0       	ldi	r22, 0x01	; 1
    4086:	0e 94 db 21 	call	0x43b6	; 0x43b6 <STEPPER_set_mode>
    408a:	80 e0       	ldi	r24, 0x00	; 0
    408c:	b7 01       	movw	r22, r14
    408e:	0e 94 a4 21 	call	0x4348	; 0x4348 <STEPPER_set_accel>
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	b6 01       	movw	r22, r12
    4096:	0e 94 a4 21 	call	0x4348	; 0x4348 <STEPPER_set_accel>
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	64 2d       	mov	r22, r4
    409e:	a3 01       	movw	r20, r6
    40a0:	98 01       	movw	r18, r16
    40a2:	03 2d       	mov	r16, r3
    40a4:	ee 24       	eor	r14, r14
    40a6:	e3 94       	inc	r14
    40a8:	9f e8       	ldi	r25, 0x8F	; 143
    40aa:	c9 2e       	mov	r12, r25
    40ac:	97 e0       	ldi	r25, 0x07	; 7
    40ae:	d9 2e       	mov	r13, r25
    40b0:	0e 94 2d 22 	call	0x445a	; 0x445a <STEPPER_step>
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	68 2d       	mov	r22, r8
    40b8:	4d 89       	ldd	r20, Y+21	; 0x15
    40ba:	5e 89       	ldd	r21, Y+22	; 0x16
    40bc:	2f 89       	ldd	r18, Y+23	; 0x17
    40be:	38 8d       	ldd	r19, Y+24	; 0x18
    40c0:	02 2d       	mov	r16, r2
    40c2:	0e 94 2d 22 	call	0x445a	; 0x445a <STEPPER_step>
    40c6:	55 20       	and	r5, r5
    40c8:	b9 f4       	brne	.+46     	; 0x40f8 <STEPPER_stepmode+0x154>
    40ca:	00 d0       	rcall	.+0      	; 0x40cc <STEPPER_stepmode+0x128>
    40cc:	00 d0       	rcall	.+0      	; 0x40ce <STEPPER_stepmode+0x12a>
    40ce:	0f 92       	push	r0
    40d0:	ad b7       	in	r26, 0x3d	; 61
    40d2:	be b7       	in	r27, 0x3e	; 62
    40d4:	11 96       	adiw	r26, 0x01	; 1
    40d6:	ed b7       	in	r30, 0x3d	; 61
    40d8:	fe b7       	in	r31, 0x3e	; 62
    40da:	91 82       	std	Z+1, r9	; 0x01
    40dc:	fd 01       	movw	r30, r26
    40de:	b2 82       	std	Z+2, r11	; 0x02
    40e0:	a1 82       	std	Z+1, r10	; 0x01
    40e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    40e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    40e6:	94 83       	std	Z+4, r25	; 0x04
    40e8:	83 83       	std	Z+3, r24	; 0x03
    40ea:	0e 94 de 22 	call	0x45bc	; 0x45bc <STEPPER_wait_and_then>
    40ee:	0f 90       	pop	r0
    40f0:	0f 90       	pop	r0
    40f2:	0f 90       	pop	r0
    40f4:	0f 90       	pop	r0
    40f6:	0f 90       	pop	r0
    40f8:	cf 91       	pop	r28
    40fa:	df 91       	pop	r29
    40fc:	1f 91       	pop	r17
    40fe:	0f 91       	pop	r16
    4100:	ff 90       	pop	r15
    4102:	ef 90       	pop	r14
    4104:	df 90       	pop	r13
    4106:	cf 90       	pop	r12
    4108:	bf 90       	pop	r11
    410a:	af 90       	pop	r10
    410c:	9f 90       	pop	r9
    410e:	8f 90       	pop	r8
    4110:	7f 90       	pop	r7
    4112:	6f 90       	pop	r6
    4114:	5f 90       	pop	r5
    4116:	4f 90       	pop	r4
    4118:	3f 90       	pop	r3
    411a:	2f 90       	pop	r2
    411c:	08 95       	ret

0000411e <STEPPER_move>:
    411e:	6f 92       	push	r6
    4120:	7f 92       	push	r7
    4122:	8f 92       	push	r8
    4124:	9f 92       	push	r9
    4126:	af 92       	push	r10
    4128:	bf 92       	push	r11
    412a:	cf 92       	push	r12
    412c:	df 92       	push	r13
    412e:	ef 92       	push	r14
    4130:	ff 92       	push	r15
    4132:	0f 93       	push	r16
    4134:	1f 93       	push	r17
    4136:	df 93       	push	r29
    4138:	cf 93       	push	r28
    413a:	cd b7       	in	r28, 0x3d	; 61
    413c:	de b7       	in	r29, 0x3e	; 62
    413e:	94 2e       	mov	r9, r20
    4140:	7c 2d       	mov	r23, r12
    4142:	d5 01       	movw	r26, r10
    4144:	49 89       	ldd	r20, Y+17	; 0x11
    4146:	5a 89       	ldd	r21, Y+18	; 0x12
    4148:	ab 88       	ldd	r10, Y+19	; 0x13
    414a:	bc 88       	ldd	r11, Y+20	; 0x14
    414c:	cd 88       	ldd	r12, Y+21	; 0x15
    414e:	de 88       	ldd	r13, Y+22	; 0x16
    4150:	9f 89       	ldd	r25, Y+23	; 0x17
    4152:	81 30       	cpi	r24, 0x01	; 1
    4154:	09 f4       	brne	.+2      	; 0x4158 <STEPPER_move+0x3a>
    4156:	57 c0       	rjmp	.+174    	; 0x4206 <STEPPER_move+0xe8>
    4158:	81 30       	cpi	r24, 0x01	; 1
    415a:	b8 f1       	brcs	.+110    	; 0x41ca <STEPPER_move+0xac>
    415c:	82 30       	cpi	r24, 0x02	; 2
    415e:	09 f0       	breq	.+2      	; 0x4162 <STEPPER_move+0x44>
    4160:	76 c0       	rjmp	.+236    	; 0x424e <STEPPER_move+0x130>
    4162:	61 30       	cpi	r22, 0x01	; 1
    4164:	91 f0       	breq	.+36     	; 0x418a <STEPPER_move+0x6c>
    4166:	61 30       	cpi	r22, 0x01	; 1
    4168:	20 f0       	brcs	.+8      	; 0x4172 <STEPPER_move+0x54>
    416a:	62 30       	cpi	r22, 0x02	; 2
    416c:	09 f0       	breq	.+2      	; 0x4170 <STEPPER_move+0x52>
    416e:	6f c0       	rjmp	.+222    	; 0x424e <STEPPER_move+0x130>
    4170:	15 c0       	rjmp	.+42     	; 0x419c <STEPPER_move+0x7e>
    4172:	80 e0       	ldi	r24, 0x00	; 0
    4174:	60 e0       	ldi	r22, 0x00	; 0
    4176:	0e 94 db 21 	call	0x43b6	; 0x43b6 <STEPPER_set_mode>
    417a:	80 e0       	ldi	r24, 0x00	; 0
    417c:	b7 01       	movw	r22, r14
    417e:	0e 94 a4 21 	call	0x4348	; 0x4348 <STEPPER_set_accel>
    4182:	80 e0       	ldi	r24, 0x00	; 0
    4184:	69 2d       	mov	r22, r9
    4186:	a8 01       	movw	r20, r16
    4188:	1d c0       	rjmp	.+58     	; 0x41c4 <STEPPER_move+0xa6>
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	60 e0       	ldi	r22, 0x00	; 0
    418e:	0e 94 db 21 	call	0x43b6	; 0x43b6 <STEPPER_set_mode>
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	b6 01       	movw	r22, r12
    4196:	0e 94 a4 21 	call	0x4348	; 0x4348 <STEPPER_set_accel>
    419a:	11 c0       	rjmp	.+34     	; 0x41be <STEPPER_move+0xa0>
    419c:	82 e0       	ldi	r24, 0x02	; 2
    419e:	60 e0       	ldi	r22, 0x00	; 0
    41a0:	0e 94 db 21 	call	0x43b6	; 0x43b6 <STEPPER_set_mode>
    41a4:	80 e0       	ldi	r24, 0x00	; 0
    41a6:	b7 01       	movw	r22, r14
    41a8:	0e 94 a4 21 	call	0x4348	; 0x4348 <STEPPER_set_accel>
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	b6 01       	movw	r22, r12
    41b0:	0e 94 a4 21 	call	0x4348	; 0x4348 <STEPPER_set_accel>
    41b4:	80 e0       	ldi	r24, 0x00	; 0
    41b6:	69 2d       	mov	r22, r9
    41b8:	a8 01       	movw	r20, r16
    41ba:	0e 94 8d 21 	call	0x431a	; 0x431a <STEPPER_run>
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	68 2d       	mov	r22, r8
    41c2:	a5 01       	movw	r20, r10
    41c4:	0e 94 8d 21 	call	0x431a	; 0x431a <STEPPER_run>
    41c8:	42 c0       	rjmp	.+132    	; 0x424e <STEPPER_move+0x130>
    41ca:	ed b7       	in	r30, 0x3d	; 61
    41cc:	fe b7       	in	r31, 0x3e	; 62
    41ce:	39 97       	sbiw	r30, 0x09	; 9
    41d0:	0f b6       	in	r0, 0x3f	; 63
    41d2:	f8 94       	cli
    41d4:	fe bf       	out	0x3e, r31	; 62
    41d6:	0f be       	out	0x3f, r0	; 63
    41d8:	ed bf       	out	0x3d, r30	; 61
    41da:	6d b6       	in	r6, 0x3d	; 61
    41dc:	7e b6       	in	r7, 0x3e	; 62
    41de:	08 94       	sec
    41e0:	61 1c       	adc	r6, r1
    41e2:	71 1c       	adc	r7, r1
    41e4:	52 83       	std	Z+2, r21	; 0x02
    41e6:	41 83       	std	Z+1, r20	; 0x01
    41e8:	f3 01       	movw	r30, r6
    41ea:	b3 82       	std	Z+3, r11	; 0x03
    41ec:	a2 82       	std	Z+2, r10	; 0x02
    41ee:	d5 82       	std	Z+5, r13	; 0x05
    41f0:	c4 82       	std	Z+4, r12	; 0x04
    41f2:	96 83       	std	Z+6, r25	; 0x06
    41f4:	88 8d       	ldd	r24, Y+24	; 0x18
    41f6:	99 8d       	ldd	r25, Y+25	; 0x19
    41f8:	90 87       	std	Z+8, r25	; 0x08
    41fa:	87 83       	std	Z+7, r24	; 0x07
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	49 2d       	mov	r20, r9
    4200:	c7 2e       	mov	r12, r23
    4202:	5d 01       	movw	r10, r26
    4204:	1a c0       	rjmp	.+52     	; 0x423a <STEPPER_move+0x11c>
    4206:	ed b7       	in	r30, 0x3d	; 61
    4208:	fe b7       	in	r31, 0x3e	; 62
    420a:	39 97       	sbiw	r30, 0x09	; 9
    420c:	0f b6       	in	r0, 0x3f	; 63
    420e:	f8 94       	cli
    4210:	fe bf       	out	0x3e, r31	; 62
    4212:	0f be       	out	0x3f, r0	; 63
    4214:	ed bf       	out	0x3d, r30	; 61
    4216:	ad b7       	in	r26, 0x3d	; 61
    4218:	be b7       	in	r27, 0x3e	; 62
    421a:	11 96       	adiw	r26, 0x01	; 1
    421c:	52 83       	std	Z+2, r21	; 0x02
    421e:	41 83       	std	Z+1, r20	; 0x01
    4220:	fd 01       	movw	r30, r26
    4222:	b3 82       	std	Z+3, r11	; 0x03
    4224:	a2 82       	std	Z+2, r10	; 0x02
    4226:	d5 82       	std	Z+5, r13	; 0x05
    4228:	c4 82       	std	Z+4, r12	; 0x04
    422a:	96 83       	std	Z+6, r25	; 0x06
    422c:	10 86       	std	Z+8, r1	; 0x08
    422e:	17 82       	std	Z+7, r1	; 0x07
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	49 2d       	mov	r20, r9
    4234:	c7 2e       	mov	r12, r23
    4236:	aa 24       	eor	r10, r10
    4238:	bb 24       	eor	r11, r11
    423a:	0e 94 d2 1f 	call	0x3fa4	; 0x3fa4 <STEPPER_stepmode>
    423e:	8d b7       	in	r24, 0x3d	; 61
    4240:	9e b7       	in	r25, 0x3e	; 62
    4242:	09 96       	adiw	r24, 0x09	; 9
    4244:	0f b6       	in	r0, 0x3f	; 63
    4246:	f8 94       	cli
    4248:	9e bf       	out	0x3e, r25	; 62
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	8d bf       	out	0x3d, r24	; 61
    424e:	cf 91       	pop	r28
    4250:	df 91       	pop	r29
    4252:	1f 91       	pop	r17
    4254:	0f 91       	pop	r16
    4256:	ff 90       	pop	r15
    4258:	ef 90       	pop	r14
    425a:	df 90       	pop	r13
    425c:	cf 90       	pop	r12
    425e:	bf 90       	pop	r11
    4260:	af 90       	pop	r10
    4262:	9f 90       	pop	r9
    4264:	8f 90       	pop	r8
    4266:	7f 90       	pop	r7
    4268:	6f 90       	pop	r6
    426a:	08 95       	ret

0000426c <STEPPER_open>:
    426c:	0e 94 c0 2a 	call	0x5580	; 0x5580 <__STEPPER_init>
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	80 93 8e 07 	sts	0x078E, r24
    4276:	e8 e5       	ldi	r30, 0x58	; 88
    4278:	f7 e0       	ldi	r31, 0x07	; 7
    427a:	11 92       	st	Z+, r1
    427c:	11 92       	st	Z+, r1
    427e:	11 82       	std	Z+1, r1	; 0x01
    4280:	10 82       	st	Z, r1
    4282:	32 96       	adiw	r30, 0x02	; 2
    4284:	11 82       	std	Z+1, r1	; 0x01
    4286:	10 82       	st	Z, r1
    4288:	32 96       	adiw	r30, 0x02	; 2
    428a:	11 82       	std	Z+1, r1	; 0x01
    428c:	10 82       	st	Z, r1
    428e:	32 96       	adiw	r30, 0x02	; 2
    4290:	11 82       	std	Z+1, r1	; 0x01
    4292:	10 82       	st	Z, r1
    4294:	32 96       	adiw	r30, 0x02	; 2
    4296:	11 82       	std	Z+1, r1	; 0x01
    4298:	10 82       	st	Z, r1
    429a:	32 96       	adiw	r30, 0x02	; 2
    429c:	11 82       	std	Z+1, r1	; 0x01
    429e:	10 82       	st	Z, r1
    42a0:	32 96       	adiw	r30, 0x02	; 2
    42a2:	11 82       	std	Z+1, r1	; 0x01
    42a4:	10 82       	st	Z, r1
    42a6:	32 96       	adiw	r30, 0x02	; 2
    42a8:	11 82       	std	Z+1, r1	; 0x01
    42aa:	10 82       	st	Z, r1
    42ac:	32 96       	adiw	r30, 0x02	; 2
    42ae:	11 82       	std	Z+1, r1	; 0x01
    42b0:	10 82       	st	Z, r1
    42b2:	32 96       	adiw	r30, 0x02	; 2
    42b4:	11 82       	std	Z+1, r1	; 0x01
    42b6:	10 82       	st	Z, r1
    42b8:	32 96       	adiw	r30, 0x02	; 2
    42ba:	11 82       	std	Z+1, r1	; 0x01
    42bc:	10 82       	st	Z, r1
    42be:	32 96       	adiw	r30, 0x02	; 2
    42c0:	11 82       	std	Z+1, r1	; 0x01
    42c2:	10 82       	st	Z, r1
    42c4:	36 96       	adiw	r30, 0x06	; 6
    42c6:	11 92       	st	Z+, r1
    42c8:	11 92       	st	Z+, r1
    42ca:	11 92       	st	Z+, r1
    42cc:	10 82       	st	Z, r1
    42ce:	32 96       	adiw	r30, 0x02	; 2
    42d0:	11 92       	st	Z+, r1
    42d2:	11 92       	st	Z+, r1
    42d4:	11 92       	st	Z+, r1
    42d6:	11 92       	st	Z+, r1
    42d8:	11 92       	st	Z+, r1
    42da:	11 92       	st	Z+, r1
    42dc:	11 92       	st	Z+, r1
    42de:	11 82       	std	Z+1, r1	; 0x01
    42e0:	10 82       	st	Z, r1
    42e2:	32 96       	adiw	r30, 0x02	; 2
    42e4:	11 82       	std	Z+1, r1	; 0x01
    42e6:	10 82       	st	Z, r1
    42e8:	32 96       	adiw	r30, 0x02	; 2
    42ea:	11 82       	std	Z+1, r1	; 0x01
    42ec:	10 82       	st	Z, r1
    42ee:	32 96       	adiw	r30, 0x02	; 2
    42f0:	11 82       	std	Z+1, r1	; 0x01
    42f2:	10 82       	st	Z, r1
    42f4:	76 97       	sbiw	r30, 0x16	; 22
    42f6:	11 82       	std	Z+1, r1	; 0x01
    42f8:	10 82       	st	Z, r1
    42fa:	32 96       	adiw	r30, 0x02	; 2
    42fc:	11 82       	std	Z+1, r1	; 0x01
    42fe:	10 82       	st	Z, r1
    4300:	10 92 8d 07 	sts	0x078D, r1
    4304:	10 92 8c 07 	sts	0x078C, r1
    4308:	10 92 8e 07 	sts	0x078E, r1
    430c:	87 e0       	ldi	r24, 0x07	; 7
    430e:	61 e0       	ldi	r22, 0x01	; 1
    4310:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    4314:	87 e0       	ldi	r24, 0x07	; 7
    4316:	91 e0       	ldi	r25, 0x01	; 1
    4318:	08 95       	ret

0000431a <STEPPER_run>:
    431a:	ef 92       	push	r14
    431c:	ff 92       	push	r15
    431e:	0f 93       	push	r16
    4320:	1f 93       	push	r17
    4322:	18 2f       	mov	r17, r24
    4324:	06 2f       	mov	r16, r22
    4326:	7a 01       	movw	r14, r20
    4328:	60 e0       	ldi	r22, 0x00	; 0
    432a:	0e 94 db 21 	call	0x43b6	; 0x43b6 <STEPPER_set_mode>
    432e:	81 2f       	mov	r24, r17
    4330:	60 2f       	mov	r22, r16
    4332:	0e 94 c6 21 	call	0x438c	; 0x438c <STEPPER_set_dir>
    4336:	81 2f       	mov	r24, r17
    4338:	b7 01       	movw	r22, r14
    433a:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <STEPPER_set_speed>
    433e:	1f 91       	pop	r17
    4340:	0f 91       	pop	r16
    4342:	ff 90       	pop	r15
    4344:	ef 90       	pop	r14
    4346:	08 95       	ret

00004348 <STEPPER_set_accel>:
    4348:	48 2f       	mov	r20, r24
    434a:	81 e0       	ldi	r24, 0x01	; 1
    434c:	80 93 8e 07 	sts	0x078E, r24
    4350:	cb 01       	movw	r24, r22
    4352:	23 e0       	ldi	r18, 0x03	; 3
    4354:	69 3e       	cpi	r22, 0xE9	; 233
    4356:	72 07       	cpc	r23, r18
    4358:	10 f0       	brcs	.+4      	; 0x435e <STEPPER_set_accel+0x16>
    435a:	88 ee       	ldi	r24, 0xE8	; 232
    435c:	93 e0       	ldi	r25, 0x03	; 3
    435e:	41 30       	cpi	r20, 0x01	; 1
    4360:	71 f0       	breq	.+28     	; 0x437e <STEPPER_set_accel+0x36>
    4362:	41 30       	cpi	r20, 0x01	; 1
    4364:	18 f0       	brcs	.+6      	; 0x436c <STEPPER_set_accel+0x24>
    4366:	42 30       	cpi	r20, 0x02	; 2
    4368:	71 f4       	brne	.+28     	; 0x4386 <STEPPER_set_accel+0x3e>
    436a:	05 c0       	rjmp	.+10     	; 0x4376 <STEPPER_set_accel+0x2e>
    436c:	90 93 63 07 	sts	0x0763, r25
    4370:	80 93 62 07 	sts	0x0762, r24
    4374:	08 c0       	rjmp	.+16     	; 0x4386 <STEPPER_set_accel+0x3e>
    4376:	90 93 63 07 	sts	0x0763, r25
    437a:	80 93 62 07 	sts	0x0762, r24
    437e:	90 93 65 07 	sts	0x0765, r25
    4382:	80 93 64 07 	sts	0x0764, r24
    4386:	10 92 8e 07 	sts	0x078E, r1
    438a:	08 95       	ret

0000438c <STEPPER_set_dir>:
    438c:	98 2f       	mov	r25, r24
    438e:	81 e0       	ldi	r24, 0x01	; 1
    4390:	80 93 8e 07 	sts	0x078E, r24
    4394:	91 30       	cpi	r25, 0x01	; 1
    4396:	51 f0       	breq	.+20     	; 0x43ac <STEPPER_set_dir+0x20>
    4398:	91 30       	cpi	r25, 0x01	; 1
    439a:	18 f0       	brcs	.+6      	; 0x43a2 <STEPPER_set_dir+0x16>
    439c:	92 30       	cpi	r25, 0x02	; 2
    439e:	41 f4       	brne	.+16     	; 0x43b0 <STEPPER_set_dir+0x24>
    43a0:	03 c0       	rjmp	.+6      	; 0x43a8 <STEPPER_set_dir+0x1c>
    43a2:	60 93 7b 07 	sts	0x077B, r22
    43a6:	04 c0       	rjmp	.+8      	; 0x43b0 <STEPPER_set_dir+0x24>
    43a8:	60 93 7b 07 	sts	0x077B, r22
    43ac:	60 93 7c 07 	sts	0x077C, r22
    43b0:	10 92 8e 07 	sts	0x078E, r1
    43b4:	08 95       	ret

000043b6 <STEPPER_set_mode>:
    43b6:	98 2f       	mov	r25, r24
    43b8:	81 e0       	ldi	r24, 0x01	; 1
    43ba:	80 93 8e 07 	sts	0x078E, r24
    43be:	91 30       	cpi	r25, 0x01	; 1
    43c0:	51 f0       	breq	.+20     	; 0x43d6 <STEPPER_set_mode+0x20>
    43c2:	91 30       	cpi	r25, 0x01	; 1
    43c4:	18 f0       	brcs	.+6      	; 0x43cc <STEPPER_set_mode+0x16>
    43c6:	92 30       	cpi	r25, 0x02	; 2
    43c8:	41 f4       	brne	.+16     	; 0x43da <STEPPER_set_mode+0x24>
    43ca:	03 c0       	rjmp	.+6      	; 0x43d2 <STEPPER_set_mode+0x1c>
    43cc:	60 93 58 07 	sts	0x0758, r22
    43d0:	04 c0       	rjmp	.+8      	; 0x43da <STEPPER_set_mode+0x24>
    43d2:	60 93 58 07 	sts	0x0758, r22
    43d6:	60 93 59 07 	sts	0x0759, r22
    43da:	10 92 8e 07 	sts	0x078E, r1
    43de:	08 95       	ret

000043e0 <STEPPER_set_speed>:
    43e0:	48 2f       	mov	r20, r24
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	80 93 8e 07 	sts	0x078E, r24
    43e8:	cb 01       	movw	r24, r22
    43ea:	21 e0       	ldi	r18, 0x01	; 1
    43ec:	61 39       	cpi	r22, 0x91	; 145
    43ee:	72 07       	cpc	r23, r18
    43f0:	10 f0       	brcs	.+4      	; 0x43f6 <STEPPER_set_speed+0x16>
    43f2:	80 e9       	ldi	r24, 0x90	; 144
    43f4:	91 e0       	ldi	r25, 0x01	; 1
    43f6:	41 30       	cpi	r20, 0x01	; 1
    43f8:	71 f0       	breq	.+28     	; 0x4416 <STEPPER_set_speed+0x36>
    43fa:	41 30       	cpi	r20, 0x01	; 1
    43fc:	18 f0       	brcs	.+6      	; 0x4404 <STEPPER_set_speed+0x24>
    43fe:	42 30       	cpi	r20, 0x02	; 2
    4400:	71 f4       	brne	.+28     	; 0x441e <STEPPER_set_speed+0x3e>
    4402:	05 c0       	rjmp	.+10     	; 0x440e <STEPPER_set_speed+0x2e>
    4404:	90 93 5b 07 	sts	0x075B, r25
    4408:	80 93 5a 07 	sts	0x075A, r24
    440c:	08 c0       	rjmp	.+16     	; 0x441e <STEPPER_set_speed+0x3e>
    440e:	90 93 5b 07 	sts	0x075B, r25
    4412:	80 93 5a 07 	sts	0x075A, r24
    4416:	90 93 5d 07 	sts	0x075D, r25
    441a:	80 93 5c 07 	sts	0x075C, r24
    441e:	10 92 8e 07 	sts	0x078E, r1
    4422:	08 95       	ret

00004424 <STEPPER_set_steps>:
    4424:	98 2f       	mov	r25, r24
    4426:	81 e0       	ldi	r24, 0x01	; 1
    4428:	80 93 8e 07 	sts	0x078E, r24
    442c:	91 30       	cpi	r25, 0x01	; 1
    442e:	71 f0       	breq	.+28     	; 0x444c <STEPPER_set_steps+0x28>
    4430:	91 30       	cpi	r25, 0x01	; 1
    4432:	18 f0       	brcs	.+6      	; 0x443a <STEPPER_set_steps+0x16>
    4434:	92 30       	cpi	r25, 0x02	; 2
    4436:	71 f4       	brne	.+28     	; 0x4454 <STEPPER_set_steps+0x30>
    4438:	05 c0       	rjmp	.+10     	; 0x4444 <STEPPER_set_steps+0x20>
    443a:	70 93 6b 07 	sts	0x076B, r23
    443e:	60 93 6a 07 	sts	0x076A, r22
    4442:	08 c0       	rjmp	.+16     	; 0x4454 <STEPPER_set_steps+0x30>
    4444:	70 93 6b 07 	sts	0x076B, r23
    4448:	60 93 6a 07 	sts	0x076A, r22
    444c:	70 93 6d 07 	sts	0x076D, r23
    4450:	60 93 6c 07 	sts	0x076C, r22
    4454:	10 92 8e 07 	sts	0x078E, r1
    4458:	08 95       	ret

0000445a <STEPPER_step>:
    445a:	8f 92       	push	r8
    445c:	9f 92       	push	r9
    445e:	af 92       	push	r10
    4460:	bf 92       	push	r11
    4462:	cf 92       	push	r12
    4464:	df 92       	push	r13
    4466:	ef 92       	push	r14
    4468:	ff 92       	push	r15
    446a:	0f 93       	push	r16
    446c:	1f 93       	push	r17
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
    4472:	18 2f       	mov	r17, r24
    4474:	f6 2e       	mov	r15, r22
    4476:	5a 01       	movw	r10, r20
    4478:	49 01       	movw	r8, r18
    447a:	e6 01       	movw	r28, r12
    447c:	61 e0       	ldi	r22, 0x01	; 1
    447e:	0e 94 db 21 	call	0x43b6	; 0x43b6 <STEPPER_set_mode>
    4482:	81 2f       	mov	r24, r17
    4484:	b5 01       	movw	r22, r10
    4486:	a4 01       	movw	r20, r8
    4488:	0e 94 df 2a 	call	0x55be	; 0x55be <STEPPER_setup_decels>
    448c:	81 2f       	mov	r24, r17
    448e:	6f 2d       	mov	r22, r15
    4490:	0e 94 c6 21 	call	0x438c	; 0x438c <STEPPER_set_dir>
    4494:	81 2f       	mov	r24, r17
    4496:	60 2f       	mov	r22, r16
    4498:	0e 94 ca 2a 	call	0x5594	; 0x5594 <STEPPER_set_stop_mode>
    449c:	81 2f       	mov	r24, r17
    449e:	b5 01       	movw	r22, r10
    44a0:	0e 94 12 22 	call	0x4424	; 0x4424 <STEPPER_set_steps>
    44a4:	c1 14       	cp	r12, r1
    44a6:	d1 04       	cpc	r13, r1
    44a8:	99 f0       	breq	.+38     	; 0x44d0 <STEPPER_step+0x76>
    44aa:	11 30       	cpi	r17, 0x01	; 1
    44ac:	49 f0       	breq	.+18     	; 0x44c0 <STEPPER_step+0x66>
    44ae:	11 30       	cpi	r17, 0x01	; 1
    44b0:	18 f0       	brcs	.+6      	; 0x44b8 <STEPPER_step+0x5e>
    44b2:	12 30       	cpi	r17, 0x02	; 2
    44b4:	69 f4       	brne	.+26     	; 0x44d0 <STEPPER_step+0x76>
    44b6:	06 c0       	rjmp	.+12     	; 0x44c4 <STEPPER_step+0x6a>
    44b8:	18 82       	st	Y, r1
    44ba:	10 92 8a 07 	sts	0x078A, r1
    44be:	08 c0       	rjmp	.+16     	; 0x44d0 <STEPPER_step+0x76>
    44c0:	19 82       	std	Y+1, r1	; 0x01
    44c2:	04 c0       	rjmp	.+8      	; 0x44cc <STEPPER_step+0x72>
    44c4:	18 82       	st	Y, r1
    44c6:	19 82       	std	Y+1, r1	; 0x01
    44c8:	10 92 8a 07 	sts	0x078A, r1
    44cc:	10 92 8b 07 	sts	0x078B, r1
    44d0:	d0 93 8d 07 	sts	0x078D, r29
    44d4:	c0 93 8c 07 	sts	0x078C, r28
    44d8:	ee 20       	and	r14, r14
    44da:	b9 f5       	brne	.+110    	; 0x454a <STEPPER_step+0xf0>
    44dc:	82 e2       	ldi	r24, 0x22	; 34
    44de:	94 e0       	ldi	r25, 0x04	; 4
    44e0:	90 93 8d 07 	sts	0x078D, r25
    44e4:	80 93 8c 07 	sts	0x078C, r24
    44e8:	81 2f       	mov	r24, r17
    44ea:	b4 01       	movw	r22, r8
    44ec:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <STEPPER_set_speed>
    44f0:	81 2f       	mov	r24, r17
    44f2:	0e 94 ab 2a 	call	0x5556	; 0x5556 <STEPPER_go>
    44f6:	11 30       	cpi	r17, 0x01	; 1
    44f8:	71 f0       	breq	.+28     	; 0x4516 <STEPPER_step+0xbc>
    44fa:	11 30       	cpi	r17, 0x01	; 1
    44fc:	18 f0       	brcs	.+6      	; 0x4504 <STEPPER_step+0xaa>
    44fe:	12 30       	cpi	r17, 0x02	; 2
    4500:	59 f5       	brne	.+86     	; 0x4558 <STEPPER_step+0xfe>
    4502:	12 c0       	rjmp	.+36     	; 0x4528 <STEPPER_step+0xce>
    4504:	10 92 22 04 	sts	0x0422, r1
    4508:	10 92 8a 07 	sts	0x078A, r1
    450c:	80 91 22 04 	lds	r24, 0x0422
    4510:	88 23       	and	r24, r24
    4512:	e1 f3       	breq	.-8      	; 0x450c <STEPPER_step+0xb2>
    4514:	21 c0       	rjmp	.+66     	; 0x4558 <STEPPER_step+0xfe>
    4516:	10 92 23 04 	sts	0x0423, r1
    451a:	10 92 8b 07 	sts	0x078B, r1
    451e:	80 91 23 04 	lds	r24, 0x0423
    4522:	88 23       	and	r24, r24
    4524:	e1 f3       	breq	.-8      	; 0x451e <STEPPER_step+0xc4>
    4526:	18 c0       	rjmp	.+48     	; 0x4558 <STEPPER_step+0xfe>
    4528:	10 92 22 04 	sts	0x0422, r1
    452c:	10 92 23 04 	sts	0x0423, r1
    4530:	10 92 8a 07 	sts	0x078A, r1
    4534:	10 92 8b 07 	sts	0x078B, r1
    4538:	80 91 22 04 	lds	r24, 0x0422
    453c:	88 23       	and	r24, r24
    453e:	e1 f3       	breq	.-8      	; 0x4538 <STEPPER_step+0xde>
    4540:	80 91 23 04 	lds	r24, 0x0423
    4544:	88 23       	and	r24, r24
    4546:	c1 f3       	breq	.-16     	; 0x4538 <STEPPER_step+0xde>
    4548:	07 c0       	rjmp	.+14     	; 0x4558 <STEPPER_step+0xfe>
    454a:	81 2f       	mov	r24, r17
    454c:	b4 01       	movw	r22, r8
    454e:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <STEPPER_set_speed>
    4552:	81 2f       	mov	r24, r17
    4554:	0e 94 ab 2a 	call	0x5556	; 0x5556 <STEPPER_go>
    4558:	df 91       	pop	r29
    455a:	cf 91       	pop	r28
    455c:	1f 91       	pop	r17
    455e:	0f 91       	pop	r16
    4560:	ff 90       	pop	r15
    4562:	ef 90       	pop	r14
    4564:	df 90       	pop	r13
    4566:	cf 90       	pop	r12
    4568:	bf 90       	pop	r11
    456a:	af 90       	pop	r10
    456c:	9f 90       	pop	r9
    456e:	8f 90       	pop	r8
    4570:	08 95       	ret

00004572 <STEPPER_stop>:
    4572:	0f 93       	push	r16
    4574:	1f 93       	push	r17
    4576:	18 2f       	mov	r17, r24
    4578:	06 2f       	mov	r16, r22
    457a:	66 23       	and	r22, r22
    457c:	49 f4       	brne	.+18     	; 0x4590 <STEPPER_stop+0x1e>
    457e:	60 e0       	ldi	r22, 0x00	; 0
    4580:	70 e0       	ldi	r23, 0x00	; 0
    4582:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <STEPPER_set_speed>
    4586:	81 2f       	mov	r24, r17
    4588:	60 e0       	ldi	r22, 0x00	; 0
    458a:	70 e0       	ldi	r23, 0x00	; 0
    458c:	0e 94 12 22 	call	0x4424	; 0x4424 <STEPPER_set_steps>
    4590:	81 e0       	ldi	r24, 0x01	; 1
    4592:	80 93 8e 07 	sts	0x078E, r24
    4596:	11 30       	cpi	r17, 0x01	; 1
    4598:	51 f0       	breq	.+20     	; 0x45ae <STEPPER_stop+0x3c>
    459a:	11 30       	cpi	r17, 0x01	; 1
    459c:	18 f0       	brcs	.+6      	; 0x45a4 <STEPPER_stop+0x32>
    459e:	12 30       	cpi	r17, 0x02	; 2
    45a0:	41 f4       	brne	.+16     	; 0x45b2 <STEPPER_stop+0x40>
    45a2:	03 c0       	rjmp	.+6      	; 0x45aa <STEPPER_stop+0x38>
    45a4:	00 93 76 07 	sts	0x0776, r16
    45a8:	04 c0       	rjmp	.+8      	; 0x45b2 <STEPPER_stop+0x40>
    45aa:	00 93 76 07 	sts	0x0776, r16
    45ae:	00 93 77 07 	sts	0x0777, r16
    45b2:	10 92 8e 07 	sts	0x078E, r1
    45b6:	1f 91       	pop	r17
    45b8:	0f 91       	pop	r16
    45ba:	08 95       	ret

000045bc <STEPPER_wait_and_then>:
    45bc:	cf 92       	push	r12
    45be:	df 92       	push	r13
    45c0:	ef 92       	push	r14
    45c2:	ff 92       	push	r15
    45c4:	0f 93       	push	r16
    45c6:	1f 93       	push	r17
    45c8:	df 93       	push	r29
    45ca:	cf 93       	push	r28
    45cc:	cd b7       	in	r28, 0x3d	; 61
    45ce:	de b7       	in	r29, 0x3e	; 62
    45d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    45d2:	81 30       	cpi	r24, 0x01	; 1
    45d4:	61 f0       	breq	.+24     	; 0x45ee <STEPPER_wait_and_then+0x32>
    45d6:	81 30       	cpi	r24, 0x01	; 1
    45d8:	18 f0       	brcs	.+6      	; 0x45e0 <STEPPER_wait_and_then+0x24>
    45da:	82 30       	cpi	r24, 0x02	; 2
    45dc:	a1 f5       	brne	.+104    	; 0x4646 <STEPPER_wait_and_then+0x8a>
    45de:	11 c0       	rjmp	.+34     	; 0x4602 <STEPPER_wait_and_then+0x46>
    45e0:	ec 85       	ldd	r30, Y+12	; 0x0c
    45e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    45e4:	80 91 8f 07 	lds	r24, 0x078F
    45e8:	88 23       	and	r24, r24
    45ea:	e1 f3       	breq	.-8      	; 0x45e4 <STEPPER_wait_and_then+0x28>
    45ec:	06 c0       	rjmp	.+12     	; 0x45fa <STEPPER_wait_and_then+0x3e>
    45ee:	ec 85       	ldd	r30, Y+12	; 0x0c
    45f0:	fd 85       	ldd	r31, Y+13	; 0x0d
    45f2:	80 91 90 07 	lds	r24, 0x0790
    45f6:	88 23       	and	r24, r24
    45f8:	e1 f3       	breq	.-8      	; 0x45f2 <STEPPER_wait_and_then+0x36>
    45fa:	30 97       	sbiw	r30, 0x00	; 0
    45fc:	21 f1       	breq	.+72     	; 0x4646 <STEPPER_wait_and_then+0x8a>
    45fe:	09 95       	icall
    4600:	22 c0       	rjmp	.+68     	; 0x4646 <STEPPER_wait_and_then+0x8a>
    4602:	cc 84       	ldd	r12, Y+12	; 0x0c
    4604:	dd 84       	ldd	r13, Y+13	; 0x0d
    4606:	ee 84       	ldd	r14, Y+14	; 0x0e
    4608:	ff 84       	ldd	r15, Y+15	; 0x0f
    460a:	00 e0       	ldi	r16, 0x00	; 0
    460c:	10 e0       	ldi	r17, 0x00	; 0
    460e:	00 23       	and	r16, r16
    4610:	51 f4       	brne	.+20     	; 0x4626 <STEPPER_wait_and_then+0x6a>
    4612:	80 91 8f 07 	lds	r24, 0x078F
    4616:	88 23       	and	r24, r24
    4618:	31 f0       	breq	.+12     	; 0x4626 <STEPPER_wait_and_then+0x6a>
    461a:	c1 14       	cp	r12, r1
    461c:	d1 04       	cpc	r13, r1
    461e:	11 f0       	breq	.+4      	; 0x4624 <STEPPER_wait_and_then+0x68>
    4620:	f6 01       	movw	r30, r12
    4622:	09 95       	icall
    4624:	01 e0       	ldi	r16, 0x01	; 1
    4626:	11 23       	and	r17, r17
    4628:	51 f4       	brne	.+20     	; 0x463e <STEPPER_wait_and_then+0x82>
    462a:	80 91 90 07 	lds	r24, 0x0790
    462e:	88 23       	and	r24, r24
    4630:	31 f0       	breq	.+12     	; 0x463e <STEPPER_wait_and_then+0x82>
    4632:	e1 14       	cp	r14, r1
    4634:	f1 04       	cpc	r15, r1
    4636:	11 f0       	breq	.+4      	; 0x463c <STEPPER_wait_and_then+0x80>
    4638:	f7 01       	movw	r30, r14
    463a:	09 95       	icall
    463c:	11 e0       	ldi	r17, 0x01	; 1
    463e:	00 23       	and	r16, r16
    4640:	31 f3       	breq	.-52     	; 0x460e <STEPPER_wait_and_then+0x52>
    4642:	11 23       	and	r17, r17
    4644:	21 f3       	breq	.-56     	; 0x460e <STEPPER_wait_and_then+0x52>
    4646:	cf 91       	pop	r28
    4648:	df 91       	pop	r29
    464a:	1f 91       	pop	r17
    464c:	0f 91       	pop	r16
    464e:	ff 90       	pop	r15
    4650:	ef 90       	pop	r14
    4652:	df 90       	pop	r13
    4654:	cf 90       	pop	r12
    4656:	08 95       	ret

00004658 <SYS_get_state>:
    4658:	e8 2f       	mov	r30, r24
    465a:	f0 e0       	ldi	r31, 0x00	; 0
    465c:	e3 31       	cpi	r30, 0x13	; 19
    465e:	f1 05       	cpc	r31, r1
    4660:	40 f4       	brcc	.+16     	; 0x4672 <SYS_get_state+0x1a>
    4662:	e2 5c       	subi	r30, 0xC2	; 194
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	ee 0f       	add	r30, r30
    4668:	ff 1f       	adc	r31, r31
    466a:	05 90       	lpm	r0, Z+
    466c:	f4 91       	lpm	r31, Z+
    466e:	e0 2d       	mov	r30, r0
    4670:	09 94       	ijmp
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	08 95       	ret
    4676:	80 91 91 07 	lds	r24, 0x0791
    467a:	08 95       	ret
    467c:	80 91 92 07 	lds	r24, 0x0792
    4680:	08 95       	ret
    4682:	80 91 93 07 	lds	r24, 0x0793
    4686:	08 95       	ret
    4688:	80 91 94 07 	lds	r24, 0x0794
    468c:	08 95       	ret
    468e:	80 91 95 07 	lds	r24, 0x0795
    4692:	08 95       	ret
    4694:	80 91 97 07 	lds	r24, 0x0797
    4698:	08 95       	ret
    469a:	80 91 96 07 	lds	r24, 0x0796
    469e:	08 95       	ret
    46a0:	80 91 98 07 	lds	r24, 0x0798
    46a4:	08 95       	ret
    46a6:	80 91 99 07 	lds	r24, 0x0799
    46aa:	08 95       	ret
    46ac:	80 91 9a 07 	lds	r24, 0x079A
    46b0:	08 95       	ret
    46b2:	80 91 9b 07 	lds	r24, 0x079B
    46b6:	08 95       	ret
    46b8:	80 91 9c 07 	lds	r24, 0x079C
    46bc:	08 95       	ret
    46be:	80 91 9d 07 	lds	r24, 0x079D
    46c2:	08 95       	ret
    46c4:	80 91 9e 07 	lds	r24, 0x079E
    46c8:	08 95       	ret
    46ca:	80 91 9f 07 	lds	r24, 0x079F
    46ce:	08 95       	ret
    46d0:	80 91 a0 07 	lds	r24, 0x07A0
    46d4:	08 95       	ret
    46d6:	80 91 a1 07 	lds	r24, 0x07A1
    46da:	08 95       	ret
    46dc:	80 91 a2 07 	lds	r24, 0x07A2
    46e0:	08 95       	ret
    46e2:	80 91 a3 07 	lds	r24, 0x07A3
    46e6:	08 95       	ret

000046e8 <SYS_set_state>:
    46e8:	e8 2f       	mov	r30, r24
    46ea:	f0 e0       	ldi	r31, 0x00	; 0
    46ec:	e3 31       	cpi	r30, 0x13	; 19
    46ee:	f1 05       	cpc	r31, r1
    46f0:	08 f0       	brcs	.+2      	; 0x46f4 <SYS_set_state+0xc>
    46f2:	40 c0       	rjmp	.+128    	; 0x4774 <SYS_set_state+0x8c>
    46f4:	ef 5a       	subi	r30, 0xAF	; 175
    46f6:	ff 4f       	sbci	r31, 0xFF	; 255
    46f8:	ee 0f       	add	r30, r30
    46fa:	ff 1f       	adc	r31, r31
    46fc:	05 90       	lpm	r0, Z+
    46fe:	f4 91       	lpm	r31, Z+
    4700:	e0 2d       	mov	r30, r0
    4702:	09 94       	ijmp
    4704:	60 93 91 07 	sts	0x0791, r22
    4708:	08 95       	ret
    470a:	60 93 92 07 	sts	0x0792, r22
    470e:	08 95       	ret
    4710:	60 93 93 07 	sts	0x0793, r22
    4714:	08 95       	ret
    4716:	60 93 94 07 	sts	0x0794, r22
    471a:	08 95       	ret
    471c:	60 93 95 07 	sts	0x0795, r22
    4720:	08 95       	ret
    4722:	60 93 97 07 	sts	0x0797, r22
    4726:	08 95       	ret
    4728:	60 93 96 07 	sts	0x0796, r22
    472c:	08 95       	ret
    472e:	60 93 98 07 	sts	0x0798, r22
    4732:	08 95       	ret
    4734:	60 93 99 07 	sts	0x0799, r22
    4738:	08 95       	ret
    473a:	60 93 9a 07 	sts	0x079A, r22
    473e:	08 95       	ret
    4740:	60 93 9b 07 	sts	0x079B, r22
    4744:	08 95       	ret
    4746:	60 93 9c 07 	sts	0x079C, r22
    474a:	08 95       	ret
    474c:	60 93 9d 07 	sts	0x079D, r22
    4750:	08 95       	ret
    4752:	60 93 9e 07 	sts	0x079E, r22
    4756:	08 95       	ret
    4758:	60 93 9f 07 	sts	0x079F, r22
    475c:	08 95       	ret
    475e:	60 93 a0 07 	sts	0x07A0, r22
    4762:	08 95       	ret
    4764:	60 93 a1 07 	sts	0x07A1, r22
    4768:	08 95       	ret
    476a:	60 93 a2 07 	sts	0x07A2, r22
    476e:	08 95       	ret
    4770:	60 93 a1 07 	sts	0x07A1, r22
    4774:	08 95       	ret

00004776 <ATTINY_get_sensors>:
    4776:	0f 93       	push	r16
    4778:	1f 93       	push	r17
    477a:	81 e0       	ldi	r24, 0x01	; 1
    477c:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    4780:	81 30       	cpi	r24, 0x01	; 1
    4782:	11 f0       	breq	.+4      	; 0x4788 <ATTINY_get_sensors+0x12>
    4784:	00 e0       	ldi	r16, 0x00	; 0
    4786:	24 c0       	rjmp	.+72     	; 0x47d0 <ATTINY_get_sensors+0x5a>
    4788:	87 e0       	ldi	r24, 0x07	; 7
    478a:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <SPI_set_slave_addr>
    478e:	82 e0       	ldi	r24, 0x02	; 2
    4790:	6a e0       	ldi	r22, 0x0A	; 10
    4792:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <SPI_transmit>
    4796:	82 e0       	ldi	r24, 0x02	; 2
    4798:	62 eb       	ldi	r22, 0xB2	; 178
    479a:	0e 94 1a 1f 	call	0x3e34	; 0x3e34 <SPI_transmit>
    479e:	18 ec       	ldi	r17, 0xC8	; 200
    47a0:	81 2f       	mov	r24, r17
    47a2:	8a 95       	dec	r24
    47a4:	f1 f7       	brne	.-4      	; 0x47a2 <ATTINY_get_sensors+0x2c>
    47a6:	82 e0       	ldi	r24, 0x02	; 2
    47a8:	60 e0       	ldi	r22, 0x00	; 0
    47aa:	0e 94 96 29 	call	0x532c	; 0x532c <SPI_receive>
    47ae:	08 2f       	mov	r16, r24
    47b0:	81 2f       	mov	r24, r17
    47b2:	8a 95       	dec	r24
    47b4:	f1 f7       	brne	.-4      	; 0x47b2 <ATTINY_get_sensors+0x3c>
    47b6:	82 e0       	ldi	r24, 0x02	; 2
    47b8:	60 e0       	ldi	r22, 0x00	; 0
    47ba:	0e 94 96 29 	call	0x532c	; 0x532c <SPI_receive>
    47be:	1a 95       	dec	r17
    47c0:	f1 f7       	brne	.-4      	; 0x47be <ATTINY_get_sensors+0x48>
    47c2:	87 e0       	ldi	r24, 0x07	; 7
    47c4:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <SPI_set_slave_addr>
    47c8:	88 e8       	ldi	r24, 0x88	; 136
    47ca:	93 e1       	ldi	r25, 0x13	; 19
    47cc:	01 97       	sbiw	r24, 0x01	; 1
    47ce:	f1 f7       	brne	.-4      	; 0x47cc <ATTINY_get_sensors+0x56>
    47d0:	80 2f       	mov	r24, r16
    47d2:	1f 91       	pop	r17
    47d4:	0f 91       	pop	r16
    47d6:	08 95       	ret

000047d8 <ATTINY_get_SW_state>:
    47d8:	1f 93       	push	r17
    47da:	cf 93       	push	r28
    47dc:	df 93       	push	r29
    47de:	18 2f       	mov	r17, r24
    47e0:	80 91 25 04 	lds	r24, 0x0425
    47e4:	88 23       	and	r24, r24
    47e6:	41 f0       	breq	.+16     	; 0x47f8 <ATTINY_get_SW_state+0x20>
    47e8:	80 91 2f 04 	lds	r24, 0x042F
    47ec:	88 23       	and	r24, r24
    47ee:	99 f0       	breq	.+38     	; 0x4816 <ATTINY_get_SW_state+0x3e>
    47f0:	10 92 25 04 	sts	0x0425, r1
    47f4:	10 92 2f 04 	sts	0x042F, r1
    47f8:	0e 94 bb 23 	call	0x4776	; 0x4776 <ATTINY_get_sensors>
    47fc:	80 93 24 04 	sts	0x0424, r24
    4800:	89 e2       	ldi	r24, 0x29	; 41
    4802:	94 e0       	ldi	r25, 0x04	; 4
    4804:	61 e0       	ldi	r22, 0x01	; 1
    4806:	40 e0       	ldi	r20, 0x00	; 0
    4808:	22 e3       	ldi	r18, 0x32	; 50
    480a:	30 e0       	ldi	r19, 0x00	; 0
    480c:	0e 94 aa 24 	call	0x4954	; 0x4954 <TMRSRVC_new>
    4810:	81 e0       	ldi	r24, 0x01	; 1
    4812:	80 93 25 04 	sts	0x0425, r24
    4816:	90 91 24 04 	lds	r25, 0x0424
    481a:	a1 2f       	mov	r26, r17
    481c:	b0 e0       	ldi	r27, 0x00	; 0
    481e:	ed 01       	movw	r28, r26
    4820:	c0 55       	subi	r28, 0x50	; 80
    4822:	dc 4f       	sbci	r29, 0xFC	; 252
    4824:	88 81       	ld	r24, Y
    4826:	88 23       	and	r24, r24
    4828:	69 f0       	breq	.+26     	; 0x4844 <ATTINY_get_SW_state+0x6c>
    482a:	fd 01       	movw	r30, r26
    482c:	ed 54       	subi	r30, 0x4D	; 77
    482e:	fc 4f       	sbci	r31, 0xFC	; 252
    4830:	80 81       	ld	r24, Z
    4832:	98 23       	and	r25, r24
    4834:	c1 f0       	breq	.+48     	; 0x4866 <ATTINY_get_SW_state+0x8e>
    4836:	fd 01       	movw	r30, r26
    4838:	ea 5d       	subi	r30, 0xDA	; 218
    483a:	fb 4f       	sbci	r31, 0xFB	; 251
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	80 83       	st	Z, r24
    4840:	18 82       	st	Y, r1
    4842:	11 c0       	rjmp	.+34     	; 0x4866 <ATTINY_get_SW_state+0x8e>
    4844:	fd 01       	movw	r30, r26
    4846:	ea 5d       	subi	r30, 0xDA	; 218
    4848:	fb 4f       	sbci	r31, 0xFB	; 251
    484a:	80 81       	ld	r24, Z
    484c:	81 11       	cpse	r24, r1
    484e:	10 82       	st	Z, r1
    4850:	fd 01       	movw	r30, r26
    4852:	ed 54       	subi	r30, 0x4D	; 77
    4854:	fc 4f       	sbci	r31, 0xFC	; 252
    4856:	80 81       	ld	r24, Z
    4858:	98 23       	and	r25, r24
    485a:	29 f4       	brne	.+10     	; 0x4866 <ATTINY_get_SW_state+0x8e>
    485c:	fd 01       	movw	r30, r26
    485e:	e0 55       	subi	r30, 0x50	; 80
    4860:	fc 4f       	sbci	r31, 0xFC	; 252
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	80 83       	st	Z, r24
    4866:	aa 5d       	subi	r26, 0xDA	; 218
    4868:	bb 4f       	sbci	r27, 0xFB	; 251
    486a:	8c 91       	ld	r24, X
    486c:	df 91       	pop	r29
    486e:	cf 91       	pop	r28
    4870:	1f 91       	pop	r17
    4872:	08 95       	ret

00004874 <ATTINY_open>:
    4874:	82 e0       	ldi	r24, 0x02	; 2
    4876:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    487a:	88 23       	and	r24, r24
    487c:	19 f4       	brne	.+6      	; 0x4884 <ATTINY_open+0x10>
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	82 e0       	ldi	r24, 0x02	; 2
    4882:	08 95       	ret
    4884:	10 92 bf 07 	sts	0x07BF, r1
    4888:	10 92 be 07 	sts	0x07BE, r1
    488c:	10 92 c1 07 	sts	0x07C1, r1
    4890:	10 92 c0 07 	sts	0x07C0, r1
    4894:	10 92 c3 07 	sts	0x07C3, r1
    4898:	10 92 c2 07 	sts	0x07C2, r1
    489c:	10 92 c5 07 	sts	0x07C5, r1
    48a0:	10 92 c4 07 	sts	0x07C4, r1
    48a4:	10 92 c7 07 	sts	0x07C7, r1
    48a8:	10 92 c6 07 	sts	0x07C6, r1
    48ac:	80 e9       	ldi	r24, 0x90	; 144
    48ae:	91 e0       	ldi	r25, 0x01	; 1
    48b0:	90 93 ab 07 	sts	0x07AB, r25
    48b4:	80 93 aa 07 	sts	0x07AA, r24
    48b8:	90 93 ad 07 	sts	0x07AD, r25
    48bc:	80 93 ac 07 	sts	0x07AC, r24
    48c0:	90 93 af 07 	sts	0x07AF, r25
    48c4:	80 93 ae 07 	sts	0x07AE, r24
    48c8:	90 93 b1 07 	sts	0x07B1, r25
    48cc:	80 93 b0 07 	sts	0x07B0, r24
    48d0:	90 93 b3 07 	sts	0x07B3, r25
    48d4:	80 93 b2 07 	sts	0x07B2, r24
    48d8:	84 e3       	ldi	r24, 0x34	; 52
    48da:	98 e0       	ldi	r25, 0x08	; 8
    48dc:	90 93 b5 07 	sts	0x07B5, r25
    48e0:	80 93 b4 07 	sts	0x07B4, r24
    48e4:	90 93 b7 07 	sts	0x07B7, r25
    48e8:	80 93 b6 07 	sts	0x07B6, r24
    48ec:	90 93 b9 07 	sts	0x07B9, r25
    48f0:	80 93 b8 07 	sts	0x07B8, r24
    48f4:	90 93 bb 07 	sts	0x07BB, r25
    48f8:	80 93 ba 07 	sts	0x07BA, r24
    48fc:	90 93 bd 07 	sts	0x07BD, r25
    4900:	80 93 bc 07 	sts	0x07BC, r24
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	61 e0       	ldi	r22, 0x01	; 1
    4908:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    490c:	91 e0       	ldi	r25, 0x01	; 1
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	08 95       	ret

00004912 <TMRSRVC_delay>:
    4912:	df 93       	push	r29
    4914:	cf 93       	push	r28
    4916:	cd b7       	in	r28, 0x3d	; 61
    4918:	de b7       	in	r29, 0x3e	; 62
    491a:	29 97       	sbiw	r28, 0x09	; 9
    491c:	0f b6       	in	r0, 0x3f	; 63
    491e:	f8 94       	cli
    4920:	de bf       	out	0x3e, r29	; 62
    4922:	0f be       	out	0x3f, r0	; 63
    4924:	cd bf       	out	0x3d, r28	; 61
    4926:	9c 01       	movw	r18, r24
    4928:	ce 01       	movw	r24, r28
    492a:	01 96       	adiw	r24, 0x01	; 1
    492c:	61 e0       	ldi	r22, 0x01	; 1
    492e:	40 e0       	ldi	r20, 0x00	; 0
    4930:	0e 94 aa 24 	call	0x4954	; 0x4954 <TMRSRVC_new>
    4934:	98 2f       	mov	r25, r24
    4936:	88 23       	and	r24, r24
    4938:	19 f4       	brne	.+6      	; 0x4940 <TMRSRVC_delay+0x2e>
    493a:	8f 81       	ldd	r24, Y+7	; 0x07
    493c:	88 23       	and	r24, r24
    493e:	e9 f3       	breq	.-6      	; 0x493a <TMRSRVC_delay+0x28>
    4940:	89 2f       	mov	r24, r25
    4942:	29 96       	adiw	r28, 0x09	; 9
    4944:	0f b6       	in	r0, 0x3f	; 63
    4946:	f8 94       	cli
    4948:	de bf       	out	0x3e, r29	; 62
    494a:	0f be       	out	0x3f, r0	; 63
    494c:	cd bf       	out	0x3d, r28	; 61
    494e:	cf 91       	pop	r28
    4950:	df 91       	pop	r29
    4952:	08 95       	ret

00004954 <TMRSRVC_new>:
    4954:	ef 92       	push	r14
    4956:	ff 92       	push	r15
    4958:	0f 93       	push	r16
    495a:	1f 93       	push	r17
    495c:	cf 93       	push	r28
    495e:	df 93       	push	r29
    4960:	ec 01       	movw	r28, r24
    4962:	f6 2e       	mov	r15, r22
    4964:	e4 2e       	mov	r14, r20
    4966:	89 01       	movw	r16, r18
    4968:	88 e0       	ldi	r24, 0x08	; 8
    496a:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    496e:	81 30       	cpi	r24, 0x01	; 1
    4970:	11 f0       	breq	.+4      	; 0x4976 <TMRSRVC_new+0x22>
    4972:	81 e0       	ldi	r24, 0x01	; 1
    4974:	26 c0       	rjmp	.+76     	; 0x49c2 <TMRSRVC_new+0x6e>
    4976:	84 e0       	ldi	r24, 0x04	; 4
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	0e 94 ff 37 	call	0x6ffe	; 0x6ffe <malloc>
    497e:	fc 01       	movw	r30, r24
    4980:	00 97       	sbiw	r24, 0x00	; 0
    4982:	11 f4       	brne	.+4      	; 0x4988 <TMRSRVC_new+0x34>
    4984:	82 e0       	ldi	r24, 0x02	; 2
    4986:	1d c0       	rjmp	.+58     	; 0x49c2 <TMRSRVC_new+0x6e>
    4988:	f9 82       	std	Y+1, r15	; 0x01
    498a:	f0 fc       	sbrc	r15, 0
    498c:	1e 82       	std	Y+6, r1	; 0x06
    498e:	81 e0       	ldi	r24, 0x01	; 1
    4990:	e8 16       	cp	r14, r24
    4992:	19 f4       	brne	.+6      	; 0x499a <TMRSRVC_new+0x46>
    4994:	89 81       	ldd	r24, Y+1	; 0x01
    4996:	84 60       	ori	r24, 0x04	; 4
    4998:	89 83       	std	Y+1, r24	; 0x01
    499a:	89 81       	ldd	r24, Y+1	; 0x01
    499c:	88 60       	ori	r24, 0x08	; 8
    499e:	89 83       	std	Y+1, r24	; 0x01
    49a0:	1b 83       	std	Y+3, r17	; 0x03
    49a2:	0a 83       	std	Y+2, r16	; 0x02
    49a4:	1d 83       	std	Y+5, r17	; 0x05
    49a6:	0c 83       	std	Y+4, r16	; 0x04
    49a8:	d1 83       	std	Z+1, r29	; 0x01
    49aa:	c0 83       	st	Z, r28
    49ac:	13 82       	std	Z+3, r1	; 0x03
    49ae:	12 82       	std	Z+2, r1	; 0x02
    49b0:	81 e0       	ldi	r24, 0x01	; 1
    49b2:	80 93 92 04 	sts	0x0492, r24
    49b6:	cf 01       	movw	r24, r30
    49b8:	0e 94 3f 2b 	call	0x567e	; 0x567e <TMRSRVC_insert>
    49bc:	10 92 92 04 	sts	0x0492, r1
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	df 91       	pop	r29
    49c4:	cf 91       	pop	r28
    49c6:	1f 91       	pop	r17
    49c8:	0f 91       	pop	r16
    49ca:	ff 90       	pop	r15
    49cc:	ef 90       	pop	r14
    49ce:	08 95       	ret

000049d0 <I2C_MSTR_get>:
    49d0:	fc 01       	movw	r30, r24
    49d2:	80 91 cb 07 	lds	r24, 0x07CB
    49d6:	81 30       	cpi	r24, 0x01	; 1
    49d8:	11 f0       	breq	.+4      	; 0x49de <I2C_MSTR_get+0xe>
    49da:	85 e0       	ldi	r24, 0x05	; 5
    49dc:	08 95       	ret
    49de:	80 91 cc 07 	lds	r24, 0x07CC
    49e2:	81 30       	cpi	r24, 0x01	; 1
    49e4:	11 f0       	breq	.+4      	; 0x49ea <I2C_MSTR_get+0x1a>
    49e6:	8a e0       	ldi	r24, 0x0A	; 10
    49e8:	08 95       	ret
    49ea:	61 30       	cpi	r22, 0x01	; 1
    49ec:	11 f4       	brne	.+4      	; 0x49f2 <I2C_MSTR_get+0x22>
    49ee:	84 ec       	ldi	r24, 0xC4	; 196
    49f0:	01 c0       	rjmp	.+2      	; 0x49f4 <I2C_MSTR_get+0x24>
    49f2:	84 e8       	ldi	r24, 0x84	; 132
    49f4:	80 93 bc 00 	sts	0x00BC, r24
    49f8:	80 91 bc 00 	lds	r24, 0x00BC
    49fc:	87 ff       	sbrs	r24, 7
    49fe:	fc cf       	rjmp	.-8      	; 0x49f8 <I2C_MSTR_get+0x28>
    4a00:	61 30       	cpi	r22, 0x01	; 1
    4a02:	31 f4       	brne	.+12     	; 0x4a10 <I2C_MSTR_get+0x40>
    4a04:	80 91 b9 00 	lds	r24, 0x00B9
    4a08:	88 7f       	andi	r24, 0xF8	; 248
    4a0a:	80 35       	cpi	r24, 0x50	; 80
    4a0c:	59 f4       	brne	.+22     	; 0x4a24 <I2C_MSTR_get+0x54>
    4a0e:	05 c0       	rjmp	.+10     	; 0x4a1a <I2C_MSTR_get+0x4a>
    4a10:	80 91 b9 00 	lds	r24, 0x00B9
    4a14:	88 7f       	andi	r24, 0xF8	; 248
    4a16:	88 35       	cpi	r24, 0x58	; 88
    4a18:	29 f4       	brne	.+10     	; 0x4a24 <I2C_MSTR_get+0x54>
    4a1a:	80 91 bb 00 	lds	r24, 0x00BB
    4a1e:	80 83       	st	Z, r24
    4a20:	80 e0       	ldi	r24, 0x00	; 0
    4a22:	08 95       	ret
    4a24:	82 e0       	ldi	r24, 0x02	; 2
    4a26:	08 95       	ret

00004a28 <I2C_MSTR_send>:
    4a28:	98 2f       	mov	r25, r24
    4a2a:	80 91 cb 07 	lds	r24, 0x07CB
    4a2e:	81 30       	cpi	r24, 0x01	; 1
    4a30:	11 f0       	breq	.+4      	; 0x4a36 <I2C_MSTR_send+0xe>
    4a32:	85 e0       	ldi	r24, 0x05	; 5
    4a34:	08 95       	ret
    4a36:	80 91 cc 07 	lds	r24, 0x07CC
    4a3a:	81 30       	cpi	r24, 0x01	; 1
    4a3c:	11 f0       	breq	.+4      	; 0x4a42 <I2C_MSTR_send+0x1a>
    4a3e:	8a e0       	ldi	r24, 0x0A	; 10
    4a40:	08 95       	ret
    4a42:	90 93 bb 00 	sts	0x00BB, r25
    4a46:	84 e8       	ldi	r24, 0x84	; 132
    4a48:	80 93 bc 00 	sts	0x00BC, r24
    4a4c:	80 91 bc 00 	lds	r24, 0x00BC
    4a50:	87 ff       	sbrs	r24, 7
    4a52:	fc cf       	rjmp	.-8      	; 0x4a4c <I2C_MSTR_send+0x24>
    4a54:	80 91 b9 00 	lds	r24, 0x00B9
    4a58:	90 e0       	ldi	r25, 0x00	; 0
    4a5a:	88 7f       	andi	r24, 0xF8	; 248
    4a5c:	90 70       	andi	r25, 0x00	; 0
    4a5e:	88 32       	cpi	r24, 0x28	; 40
    4a60:	91 05       	cpc	r25, r1
    4a62:	21 f0       	breq	.+8      	; 0x4a6c <I2C_MSTR_send+0x44>
    4a64:	c0 97       	sbiw	r24, 0x30	; 48
    4a66:	21 f4       	brne	.+8      	; 0x4a70 <I2C_MSTR_send+0x48>
    4a68:	83 e0       	ldi	r24, 0x03	; 3
    4a6a:	08 95       	ret
    4a6c:	80 e0       	ldi	r24, 0x00	; 0
    4a6e:	08 95       	ret
    4a70:	8c e0       	ldi	r24, 0x0C	; 12
    4a72:	08 95       	ret

00004a74 <I2C_MSTR_start>:
    4a74:	98 2f       	mov	r25, r24
    4a76:	20 91 cb 07 	lds	r18, 0x07CB
    4a7a:	21 30       	cpi	r18, 0x01	; 1
    4a7c:	11 f0       	breq	.+4      	; 0x4a82 <I2C_MSTR_start+0xe>
    4a7e:	85 e0       	ldi	r24, 0x05	; 5
    4a80:	08 95       	ret
    4a82:	80 91 cd 07 	lds	r24, 0x07CD
    4a86:	81 30       	cpi	r24, 0x01	; 1
    4a88:	11 f4       	brne	.+4      	; 0x4a8e <I2C_MSTR_start+0x1a>
    4a8a:	89 e0       	ldi	r24, 0x09	; 9
    4a8c:	08 95       	ret
    4a8e:	20 93 cc 07 	sts	0x07CC, r18
    4a92:	84 ea       	ldi	r24, 0xA4	; 164
    4a94:	80 93 bc 00 	sts	0x00BC, r24
    4a98:	80 91 bc 00 	lds	r24, 0x00BC
    4a9c:	87 ff       	sbrs	r24, 7
    4a9e:	fc cf       	rjmp	.-8      	; 0x4a98 <I2C_MSTR_start+0x24>
    4aa0:	80 91 b9 00 	lds	r24, 0x00B9
    4aa4:	88 7f       	andi	r24, 0xF8	; 248
    4aa6:	88 30       	cpi	r24, 0x08	; 8
    4aa8:	39 f0       	breq	.+14     	; 0x4ab8 <I2C_MSTR_start+0x44>
    4aaa:	80 91 b9 00 	lds	r24, 0x00B9
    4aae:	88 7f       	andi	r24, 0xF8	; 248
    4ab0:	80 31       	cpi	r24, 0x10	; 16
    4ab2:	11 f0       	breq	.+4      	; 0x4ab8 <I2C_MSTR_start+0x44>
    4ab4:	81 e0       	ldi	r24, 0x01	; 1
    4ab6:	08 95       	ret
    4ab8:	61 30       	cpi	r22, 0x01	; 1
    4aba:	19 f4       	brne	.+6      	; 0x4ac2 <I2C_MSTR_start+0x4e>
    4abc:	99 0f       	add	r25, r25
    4abe:	91 60       	ori	r25, 0x01	; 1
    4ac0:	03 c0       	rjmp	.+6      	; 0x4ac8 <I2C_MSTR_start+0x54>
    4ac2:	66 23       	and	r22, r22
    4ac4:	19 f4       	brne	.+6      	; 0x4acc <I2C_MSTR_start+0x58>
    4ac6:	99 0f       	add	r25, r25
    4ac8:	90 93 bb 00 	sts	0x00BB, r25
    4acc:	84 e8       	ldi	r24, 0x84	; 132
    4ace:	80 93 bc 00 	sts	0x00BC, r24
    4ad2:	80 91 bc 00 	lds	r24, 0x00BC
    4ad6:	87 ff       	sbrs	r24, 7
    4ad8:	fc cf       	rjmp	.-8      	; 0x4ad2 <I2C_MSTR_start+0x5e>
    4ada:	61 30       	cpi	r22, 0x01	; 1
    4adc:	31 f4       	brne	.+12     	; 0x4aea <I2C_MSTR_start+0x76>
    4ade:	80 91 b9 00 	lds	r24, 0x00B9
    4ae2:	88 7f       	andi	r24, 0xF8	; 248
    4ae4:	80 34       	cpi	r24, 0x40	; 64
    4ae6:	41 f4       	brne	.+16     	; 0x4af8 <I2C_MSTR_start+0x84>
    4ae8:	09 c0       	rjmp	.+18     	; 0x4afc <I2C_MSTR_start+0x88>
    4aea:	66 23       	and	r22, r22
    4aec:	39 f4       	brne	.+14     	; 0x4afc <I2C_MSTR_start+0x88>
    4aee:	80 91 b9 00 	lds	r24, 0x00B9
    4af2:	88 7f       	andi	r24, 0xF8	; 248
    4af4:	88 31       	cpi	r24, 0x18	; 24
    4af6:	11 f0       	breq	.+4      	; 0x4afc <I2C_MSTR_start+0x88>
    4af8:	82 e0       	ldi	r24, 0x02	; 2
    4afa:	08 95       	ret
    4afc:	80 e0       	ldi	r24, 0x00	; 0
    4afe:	08 95       	ret

00004b00 <I2C_MSTR_stop>:
    4b00:	80 91 cc 07 	lds	r24, 0x07CC
    4b04:	81 30       	cpi	r24, 0x01	; 1
    4b06:	11 f0       	breq	.+4      	; 0x4b0c <I2C_MSTR_stop+0xc>
    4b08:	8a e0       	ldi	r24, 0x0A	; 10
    4b0a:	08 95       	ret
    4b0c:	80 91 ce 07 	lds	r24, 0x07CE
    4b10:	81 30       	cpi	r24, 0x01	; 1
    4b12:	29 f4       	brne	.+10     	; 0x4b1e <I2C_MSTR_stop+0x1e>
    4b14:	85 e9       	ldi	r24, 0x95	; 149
    4b16:	80 93 bc 00 	sts	0x00BC, r24
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	08 95       	ret
    4b1e:	84 e9       	ldi	r24, 0x94	; 148
    4b20:	80 93 bc 00 	sts	0x00BC, r24
    4b24:	80 e0       	ldi	r24, 0x00	; 0
    4b26:	08 95       	ret

00004b28 <I2C_open>:
    4b28:	82 e1       	ldi	r24, 0x12	; 18
    4b2a:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    4b2e:	88 23       	and	r24, r24
    4b30:	b1 f4       	brne	.+44     	; 0x4b5e <I2C_open+0x36>
    4b32:	10 92 cb 07 	sts	0x07CB, r1
    4b36:	10 92 cc 07 	sts	0x07CC, r1
    4b3a:	10 92 cd 07 	sts	0x07CD, r1
    4b3e:	10 92 ce 07 	sts	0x07CE, r1
    4b42:	10 92 cf 07 	sts	0x07CF, r1
    4b46:	0e 94 db 2b 	call	0x57b6	; 0x57b6 <__I2C_init>
    4b4a:	87 e1       	ldi	r24, 0x17	; 23
    4b4c:	60 e0       	ldi	r22, 0x00	; 0
    4b4e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <I2C_set_BRG>
    4b52:	0e 94 d1 2b 	call	0x57a2	; 0x57a2 <I2C_enable>
    4b56:	82 e1       	ldi	r24, 0x12	; 18
    4b58:	61 e0       	ldi	r22, 0x01	; 1
    4b5a:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    4b5e:	82 e1       	ldi	r24, 0x12	; 18
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	08 95       	ret

00004b64 <I2C_set_BRG>:
    4b64:	63 70       	andi	r22, 0x03	; 3
    4b66:	60 93 b9 00 	sts	0x00B9, r22
    4b6a:	80 93 b8 00 	sts	0x00B8, r24
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	80 93 cb 07 	sts	0x07CB, r24
    4b74:	08 95       	ret

00004b76 <__ADC_init>:
    4b76:	8f e1       	ldi	r24, 0x1F	; 31
    4b78:	80 93 7c 00 	sts	0x007C, r24
    4b7c:	ea e7       	ldi	r30, 0x7A	; 122
    4b7e:	f0 e0       	ldi	r31, 0x00	; 0
    4b80:	87 e0       	ldi	r24, 0x07	; 7
    4b82:	80 83       	st	Z, r24
    4b84:	80 81       	ld	r24, Z
    4b86:	80 68       	ori	r24, 0x80	; 128
    4b88:	80 83       	st	Z, r24
    4b8a:	08 95       	ret

00004b8c <CBOT_init>:
    4b8c:	0e 94 1c 2b 	call	0x5638	; 0x5638 <SYS_init>
    4b90:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <ATMEGA_open>
    4b94:	0e 94 28 28 	call	0x5050	; 0x5050 <ISR_open>
    4b98:	0e 94 a8 2b 	call	0x5750	; 0x5750 <TMRSRVC_open>
    4b9c:	0e 94 5d 29 	call	0x52ba	; 0x52ba <SPI_open>
    4ba0:	0e 94 3a 24 	call	0x4874	; 0x4874 <ATTINY_open>
    4ba4:	78 94       	sei
    4ba6:	08 95       	ret

00004ba8 <CBOT_ISR_init>:
    4ba8:	00 00       	nop
    4baa:	08 95       	ret

00004bac <__vector_16>:
    4bac:	1f 92       	push	r1
    4bae:	0f 92       	push	r0
    4bb0:	0f b6       	in	r0, 0x3f	; 63
    4bb2:	0f 92       	push	r0
    4bb4:	11 24       	eor	r1, r1
    4bb6:	2f 93       	push	r18
    4bb8:	3f 93       	push	r19
    4bba:	4f 93       	push	r20
    4bbc:	5f 93       	push	r21
    4bbe:	6f 93       	push	r22
    4bc0:	7f 93       	push	r23
    4bc2:	8f 93       	push	r24
    4bc4:	9f 93       	push	r25
    4bc6:	af 93       	push	r26
    4bc8:	bf 93       	push	r27
    4bca:	ef 93       	push	r30
    4bcc:	ff 93       	push	r31
    4bce:	e0 91 52 04 	lds	r30, 0x0452
    4bd2:	f0 91 53 04 	lds	r31, 0x0453
    4bd6:	30 97       	sbiw	r30, 0x00	; 0
    4bd8:	09 f0       	breq	.+2      	; 0x4bdc <__vector_16+0x30>
    4bda:	09 95       	icall
    4bdc:	ff 91       	pop	r31
    4bde:	ef 91       	pop	r30
    4be0:	bf 91       	pop	r27
    4be2:	af 91       	pop	r26
    4be4:	9f 91       	pop	r25
    4be6:	8f 91       	pop	r24
    4be8:	7f 91       	pop	r23
    4bea:	6f 91       	pop	r22
    4bec:	5f 91       	pop	r21
    4bee:	4f 91       	pop	r20
    4bf0:	3f 91       	pop	r19
    4bf2:	2f 91       	pop	r18
    4bf4:	0f 90       	pop	r0
    4bf6:	0f be       	out	0x3f, r0	; 63
    4bf8:	0f 90       	pop	r0
    4bfa:	1f 90       	pop	r1
    4bfc:	18 95       	reti

00004bfe <__vector_17>:
    4bfe:	1f 92       	push	r1
    4c00:	0f 92       	push	r0
    4c02:	0f b6       	in	r0, 0x3f	; 63
    4c04:	0f 92       	push	r0
    4c06:	11 24       	eor	r1, r1
    4c08:	2f 93       	push	r18
    4c0a:	3f 93       	push	r19
    4c0c:	4f 93       	push	r20
    4c0e:	5f 93       	push	r21
    4c10:	6f 93       	push	r22
    4c12:	7f 93       	push	r23
    4c14:	8f 93       	push	r24
    4c16:	9f 93       	push	r25
    4c18:	af 93       	push	r26
    4c1a:	bf 93       	push	r27
    4c1c:	ef 93       	push	r30
    4c1e:	ff 93       	push	r31
    4c20:	e0 91 54 04 	lds	r30, 0x0454
    4c24:	f0 91 55 04 	lds	r31, 0x0455
    4c28:	30 97       	sbiw	r30, 0x00	; 0
    4c2a:	09 f0       	breq	.+2      	; 0x4c2e <__vector_17+0x30>
    4c2c:	09 95       	icall
    4c2e:	ff 91       	pop	r31
    4c30:	ef 91       	pop	r30
    4c32:	bf 91       	pop	r27
    4c34:	af 91       	pop	r26
    4c36:	9f 91       	pop	r25
    4c38:	8f 91       	pop	r24
    4c3a:	7f 91       	pop	r23
    4c3c:	6f 91       	pop	r22
    4c3e:	5f 91       	pop	r21
    4c40:	4f 91       	pop	r20
    4c42:	3f 91       	pop	r19
    4c44:	2f 91       	pop	r18
    4c46:	0f 90       	pop	r0
    4c48:	0f be       	out	0x3f, r0	; 63
    4c4a:	0f 90       	pop	r0
    4c4c:	1f 90       	pop	r1
    4c4e:	18 95       	reti

00004c50 <__vector_18>:
    4c50:	1f 92       	push	r1
    4c52:	0f 92       	push	r0
    4c54:	0f b6       	in	r0, 0x3f	; 63
    4c56:	0f 92       	push	r0
    4c58:	11 24       	eor	r1, r1
    4c5a:	2f 93       	push	r18
    4c5c:	3f 93       	push	r19
    4c5e:	4f 93       	push	r20
    4c60:	5f 93       	push	r21
    4c62:	6f 93       	push	r22
    4c64:	7f 93       	push	r23
    4c66:	8f 93       	push	r24
    4c68:	9f 93       	push	r25
    4c6a:	af 93       	push	r26
    4c6c:	bf 93       	push	r27
    4c6e:	ef 93       	push	r30
    4c70:	ff 93       	push	r31
    4c72:	e0 91 56 04 	lds	r30, 0x0456
    4c76:	f0 91 57 04 	lds	r31, 0x0457
    4c7a:	30 97       	sbiw	r30, 0x00	; 0
    4c7c:	09 f0       	breq	.+2      	; 0x4c80 <__vector_18+0x30>
    4c7e:	09 95       	icall
    4c80:	ff 91       	pop	r31
    4c82:	ef 91       	pop	r30
    4c84:	bf 91       	pop	r27
    4c86:	af 91       	pop	r26
    4c88:	9f 91       	pop	r25
    4c8a:	8f 91       	pop	r24
    4c8c:	7f 91       	pop	r23
    4c8e:	6f 91       	pop	r22
    4c90:	5f 91       	pop	r21
    4c92:	4f 91       	pop	r20
    4c94:	3f 91       	pop	r19
    4c96:	2f 91       	pop	r18
    4c98:	0f 90       	pop	r0
    4c9a:	0f be       	out	0x3f, r0	; 63
    4c9c:	0f 90       	pop	r0
    4c9e:	1f 90       	pop	r1
    4ca0:	18 95       	reti

00004ca2 <__vector_9>:
    4ca2:	1f 92       	push	r1
    4ca4:	0f 92       	push	r0
    4ca6:	0f b6       	in	r0, 0x3f	; 63
    4ca8:	0f 92       	push	r0
    4caa:	11 24       	eor	r1, r1
    4cac:	2f 93       	push	r18
    4cae:	3f 93       	push	r19
    4cb0:	4f 93       	push	r20
    4cb2:	5f 93       	push	r21
    4cb4:	6f 93       	push	r22
    4cb6:	7f 93       	push	r23
    4cb8:	8f 93       	push	r24
    4cba:	9f 93       	push	r25
    4cbc:	af 93       	push	r26
    4cbe:	bf 93       	push	r27
    4cc0:	ef 93       	push	r30
    4cc2:	ff 93       	push	r31
    4cc4:	e0 91 44 04 	lds	r30, 0x0444
    4cc8:	f0 91 45 04 	lds	r31, 0x0445
    4ccc:	30 97       	sbiw	r30, 0x00	; 0
    4cce:	09 f0       	breq	.+2      	; 0x4cd2 <__vector_9+0x30>
    4cd0:	09 95       	icall
    4cd2:	ff 91       	pop	r31
    4cd4:	ef 91       	pop	r30
    4cd6:	bf 91       	pop	r27
    4cd8:	af 91       	pop	r26
    4cda:	9f 91       	pop	r25
    4cdc:	8f 91       	pop	r24
    4cde:	7f 91       	pop	r23
    4ce0:	6f 91       	pop	r22
    4ce2:	5f 91       	pop	r21
    4ce4:	4f 91       	pop	r20
    4ce6:	3f 91       	pop	r19
    4ce8:	2f 91       	pop	r18
    4cea:	0f 90       	pop	r0
    4cec:	0f be       	out	0x3f, r0	; 63
    4cee:	0f 90       	pop	r0
    4cf0:	1f 90       	pop	r1
    4cf2:	18 95       	reti

00004cf4 <__vector_10>:
    4cf4:	1f 92       	push	r1
    4cf6:	0f 92       	push	r0
    4cf8:	0f b6       	in	r0, 0x3f	; 63
    4cfa:	0f 92       	push	r0
    4cfc:	11 24       	eor	r1, r1
    4cfe:	2f 93       	push	r18
    4d00:	3f 93       	push	r19
    4d02:	4f 93       	push	r20
    4d04:	5f 93       	push	r21
    4d06:	6f 93       	push	r22
    4d08:	7f 93       	push	r23
    4d0a:	8f 93       	push	r24
    4d0c:	9f 93       	push	r25
    4d0e:	af 93       	push	r26
    4d10:	bf 93       	push	r27
    4d12:	ef 93       	push	r30
    4d14:	ff 93       	push	r31
    4d16:	e0 91 46 04 	lds	r30, 0x0446
    4d1a:	f0 91 47 04 	lds	r31, 0x0447
    4d1e:	30 97       	sbiw	r30, 0x00	; 0
    4d20:	09 f0       	breq	.+2      	; 0x4d24 <__vector_10+0x30>
    4d22:	09 95       	icall
    4d24:	ff 91       	pop	r31
    4d26:	ef 91       	pop	r30
    4d28:	bf 91       	pop	r27
    4d2a:	af 91       	pop	r26
    4d2c:	9f 91       	pop	r25
    4d2e:	8f 91       	pop	r24
    4d30:	7f 91       	pop	r23
    4d32:	6f 91       	pop	r22
    4d34:	5f 91       	pop	r21
    4d36:	4f 91       	pop	r20
    4d38:	3f 91       	pop	r19
    4d3a:	2f 91       	pop	r18
    4d3c:	0f 90       	pop	r0
    4d3e:	0f be       	out	0x3f, r0	; 63
    4d40:	0f 90       	pop	r0
    4d42:	1f 90       	pop	r1
    4d44:	18 95       	reti

00004d46 <__vector_11>:
    4d46:	1f 92       	push	r1
    4d48:	0f 92       	push	r0
    4d4a:	0f b6       	in	r0, 0x3f	; 63
    4d4c:	0f 92       	push	r0
    4d4e:	11 24       	eor	r1, r1
    4d50:	2f 93       	push	r18
    4d52:	3f 93       	push	r19
    4d54:	4f 93       	push	r20
    4d56:	5f 93       	push	r21
    4d58:	6f 93       	push	r22
    4d5a:	7f 93       	push	r23
    4d5c:	8f 93       	push	r24
    4d5e:	9f 93       	push	r25
    4d60:	af 93       	push	r26
    4d62:	bf 93       	push	r27
    4d64:	ef 93       	push	r30
    4d66:	ff 93       	push	r31
    4d68:	e0 91 48 04 	lds	r30, 0x0448
    4d6c:	f0 91 49 04 	lds	r31, 0x0449
    4d70:	30 97       	sbiw	r30, 0x00	; 0
    4d72:	09 f0       	breq	.+2      	; 0x4d76 <__vector_11+0x30>
    4d74:	09 95       	icall
    4d76:	ff 91       	pop	r31
    4d78:	ef 91       	pop	r30
    4d7a:	bf 91       	pop	r27
    4d7c:	af 91       	pop	r26
    4d7e:	9f 91       	pop	r25
    4d80:	8f 91       	pop	r24
    4d82:	7f 91       	pop	r23
    4d84:	6f 91       	pop	r22
    4d86:	5f 91       	pop	r21
    4d88:	4f 91       	pop	r20
    4d8a:	3f 91       	pop	r19
    4d8c:	2f 91       	pop	r18
    4d8e:	0f 90       	pop	r0
    4d90:	0f be       	out	0x3f, r0	; 63
    4d92:	0f 90       	pop	r0
    4d94:	1f 90       	pop	r1
    4d96:	18 95       	reti

00004d98 <__vector_13>:
    4d98:	1f 92       	push	r1
    4d9a:	0f 92       	push	r0
    4d9c:	0f b6       	in	r0, 0x3f	; 63
    4d9e:	0f 92       	push	r0
    4da0:	11 24       	eor	r1, r1
    4da2:	2f 93       	push	r18
    4da4:	3f 93       	push	r19
    4da6:	4f 93       	push	r20
    4da8:	5f 93       	push	r21
    4daa:	6f 93       	push	r22
    4dac:	7f 93       	push	r23
    4dae:	8f 93       	push	r24
    4db0:	9f 93       	push	r25
    4db2:	af 93       	push	r26
    4db4:	bf 93       	push	r27
    4db6:	ef 93       	push	r30
    4db8:	ff 93       	push	r31
    4dba:	e0 91 4c 04 	lds	r30, 0x044C
    4dbe:	f0 91 4d 04 	lds	r31, 0x044D
    4dc2:	30 97       	sbiw	r30, 0x00	; 0
    4dc4:	09 f0       	breq	.+2      	; 0x4dc8 <__vector_13+0x30>
    4dc6:	09 95       	icall
    4dc8:	ff 91       	pop	r31
    4dca:	ef 91       	pop	r30
    4dcc:	bf 91       	pop	r27
    4dce:	af 91       	pop	r26
    4dd0:	9f 91       	pop	r25
    4dd2:	8f 91       	pop	r24
    4dd4:	7f 91       	pop	r23
    4dd6:	6f 91       	pop	r22
    4dd8:	5f 91       	pop	r21
    4dda:	4f 91       	pop	r20
    4ddc:	3f 91       	pop	r19
    4dde:	2f 91       	pop	r18
    4de0:	0f 90       	pop	r0
    4de2:	0f be       	out	0x3f, r0	; 63
    4de4:	0f 90       	pop	r0
    4de6:	1f 90       	pop	r1
    4de8:	18 95       	reti

00004dea <__vector_14>:
    4dea:	1f 92       	push	r1
    4dec:	0f 92       	push	r0
    4dee:	0f b6       	in	r0, 0x3f	; 63
    4df0:	0f 92       	push	r0
    4df2:	11 24       	eor	r1, r1
    4df4:	2f 93       	push	r18
    4df6:	3f 93       	push	r19
    4df8:	4f 93       	push	r20
    4dfa:	5f 93       	push	r21
    4dfc:	6f 93       	push	r22
    4dfe:	7f 93       	push	r23
    4e00:	8f 93       	push	r24
    4e02:	9f 93       	push	r25
    4e04:	af 93       	push	r26
    4e06:	bf 93       	push	r27
    4e08:	ef 93       	push	r30
    4e0a:	ff 93       	push	r31
    4e0c:	e0 91 4e 04 	lds	r30, 0x044E
    4e10:	f0 91 4f 04 	lds	r31, 0x044F
    4e14:	30 97       	sbiw	r30, 0x00	; 0
    4e16:	09 f0       	breq	.+2      	; 0x4e1a <__vector_14+0x30>
    4e18:	09 95       	icall
    4e1a:	ff 91       	pop	r31
    4e1c:	ef 91       	pop	r30
    4e1e:	bf 91       	pop	r27
    4e20:	af 91       	pop	r26
    4e22:	9f 91       	pop	r25
    4e24:	8f 91       	pop	r24
    4e26:	7f 91       	pop	r23
    4e28:	6f 91       	pop	r22
    4e2a:	5f 91       	pop	r21
    4e2c:	4f 91       	pop	r20
    4e2e:	3f 91       	pop	r19
    4e30:	2f 91       	pop	r18
    4e32:	0f 90       	pop	r0
    4e34:	0f be       	out	0x3f, r0	; 63
    4e36:	0f 90       	pop	r0
    4e38:	1f 90       	pop	r1
    4e3a:	18 95       	reti

00004e3c <__vector_12>:
    4e3c:	1f 92       	push	r1
    4e3e:	0f 92       	push	r0
    4e40:	0f b6       	in	r0, 0x3f	; 63
    4e42:	0f 92       	push	r0
    4e44:	11 24       	eor	r1, r1
    4e46:	2f 93       	push	r18
    4e48:	3f 93       	push	r19
    4e4a:	4f 93       	push	r20
    4e4c:	5f 93       	push	r21
    4e4e:	6f 93       	push	r22
    4e50:	7f 93       	push	r23
    4e52:	8f 93       	push	r24
    4e54:	9f 93       	push	r25
    4e56:	af 93       	push	r26
    4e58:	bf 93       	push	r27
    4e5a:	ef 93       	push	r30
    4e5c:	ff 93       	push	r31
    4e5e:	e0 91 4a 04 	lds	r30, 0x044A
    4e62:	f0 91 4b 04 	lds	r31, 0x044B
    4e66:	30 97       	sbiw	r30, 0x00	; 0
    4e68:	09 f0       	breq	.+2      	; 0x4e6c <__vector_12+0x30>
    4e6a:	09 95       	icall
    4e6c:	ff 91       	pop	r31
    4e6e:	ef 91       	pop	r30
    4e70:	bf 91       	pop	r27
    4e72:	af 91       	pop	r26
    4e74:	9f 91       	pop	r25
    4e76:	8f 91       	pop	r24
    4e78:	7f 91       	pop	r23
    4e7a:	6f 91       	pop	r22
    4e7c:	5f 91       	pop	r21
    4e7e:	4f 91       	pop	r20
    4e80:	3f 91       	pop	r19
    4e82:	2f 91       	pop	r18
    4e84:	0f 90       	pop	r0
    4e86:	0f be       	out	0x3f, r0	; 63
    4e88:	0f 90       	pop	r0
    4e8a:	1f 90       	pop	r1
    4e8c:	18 95       	reti

00004e8e <__vector_15>:
    4e8e:	1f 92       	push	r1
    4e90:	0f 92       	push	r0
    4e92:	0f b6       	in	r0, 0x3f	; 63
    4e94:	0f 92       	push	r0
    4e96:	11 24       	eor	r1, r1
    4e98:	2f 93       	push	r18
    4e9a:	3f 93       	push	r19
    4e9c:	4f 93       	push	r20
    4e9e:	5f 93       	push	r21
    4ea0:	6f 93       	push	r22
    4ea2:	7f 93       	push	r23
    4ea4:	8f 93       	push	r24
    4ea6:	9f 93       	push	r25
    4ea8:	af 93       	push	r26
    4eaa:	bf 93       	push	r27
    4eac:	ef 93       	push	r30
    4eae:	ff 93       	push	r31
    4eb0:	e0 91 50 04 	lds	r30, 0x0450
    4eb4:	f0 91 51 04 	lds	r31, 0x0451
    4eb8:	30 97       	sbiw	r30, 0x00	; 0
    4eba:	09 f0       	breq	.+2      	; 0x4ebe <__vector_15+0x30>
    4ebc:	09 95       	icall
    4ebe:	ff 91       	pop	r31
    4ec0:	ef 91       	pop	r30
    4ec2:	bf 91       	pop	r27
    4ec4:	af 91       	pop	r26
    4ec6:	9f 91       	pop	r25
    4ec8:	8f 91       	pop	r24
    4eca:	7f 91       	pop	r23
    4ecc:	6f 91       	pop	r22
    4ece:	5f 91       	pop	r21
    4ed0:	4f 91       	pop	r20
    4ed2:	3f 91       	pop	r19
    4ed4:	2f 91       	pop	r18
    4ed6:	0f 90       	pop	r0
    4ed8:	0f be       	out	0x3f, r0	; 63
    4eda:	0f 90       	pop	r0
    4edc:	1f 90       	pop	r1
    4ede:	18 95       	reti

00004ee0 <__vector_4>:
    4ee0:	1f 92       	push	r1
    4ee2:	0f 92       	push	r0
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	0f 92       	push	r0
    4ee8:	11 24       	eor	r1, r1
    4eea:	2f 93       	push	r18
    4eec:	3f 93       	push	r19
    4eee:	4f 93       	push	r20
    4ef0:	5f 93       	push	r21
    4ef2:	6f 93       	push	r22
    4ef4:	7f 93       	push	r23
    4ef6:	8f 93       	push	r24
    4ef8:	9f 93       	push	r25
    4efa:	af 93       	push	r26
    4efc:	bf 93       	push	r27
    4efe:	ef 93       	push	r30
    4f00:	ff 93       	push	r31
    4f02:	e0 91 3a 04 	lds	r30, 0x043A
    4f06:	f0 91 3b 04 	lds	r31, 0x043B
    4f0a:	30 97       	sbiw	r30, 0x00	; 0
    4f0c:	09 f0       	breq	.+2      	; 0x4f10 <__vector_4+0x30>
    4f0e:	09 95       	icall
    4f10:	ff 91       	pop	r31
    4f12:	ef 91       	pop	r30
    4f14:	bf 91       	pop	r27
    4f16:	af 91       	pop	r26
    4f18:	9f 91       	pop	r25
    4f1a:	8f 91       	pop	r24
    4f1c:	7f 91       	pop	r23
    4f1e:	6f 91       	pop	r22
    4f20:	5f 91       	pop	r21
    4f22:	4f 91       	pop	r20
    4f24:	3f 91       	pop	r19
    4f26:	2f 91       	pop	r18
    4f28:	0f 90       	pop	r0
    4f2a:	0f be       	out	0x3f, r0	; 63
    4f2c:	0f 90       	pop	r0
    4f2e:	1f 90       	pop	r1
    4f30:	18 95       	reti

00004f32 <__vector_5>:
    4f32:	1f 92       	push	r1
    4f34:	0f 92       	push	r0
    4f36:	0f b6       	in	r0, 0x3f	; 63
    4f38:	0f 92       	push	r0
    4f3a:	11 24       	eor	r1, r1
    4f3c:	2f 93       	push	r18
    4f3e:	3f 93       	push	r19
    4f40:	4f 93       	push	r20
    4f42:	5f 93       	push	r21
    4f44:	6f 93       	push	r22
    4f46:	7f 93       	push	r23
    4f48:	8f 93       	push	r24
    4f4a:	9f 93       	push	r25
    4f4c:	af 93       	push	r26
    4f4e:	bf 93       	push	r27
    4f50:	ef 93       	push	r30
    4f52:	ff 93       	push	r31
    4f54:	e0 91 3c 04 	lds	r30, 0x043C
    4f58:	f0 91 3d 04 	lds	r31, 0x043D
    4f5c:	30 97       	sbiw	r30, 0x00	; 0
    4f5e:	09 f0       	breq	.+2      	; 0x4f62 <__vector_5+0x30>
    4f60:	09 95       	icall
    4f62:	ff 91       	pop	r31
    4f64:	ef 91       	pop	r30
    4f66:	bf 91       	pop	r27
    4f68:	af 91       	pop	r26
    4f6a:	9f 91       	pop	r25
    4f6c:	8f 91       	pop	r24
    4f6e:	7f 91       	pop	r23
    4f70:	6f 91       	pop	r22
    4f72:	5f 91       	pop	r21
    4f74:	4f 91       	pop	r20
    4f76:	3f 91       	pop	r19
    4f78:	2f 91       	pop	r18
    4f7a:	0f 90       	pop	r0
    4f7c:	0f be       	out	0x3f, r0	; 63
    4f7e:	0f 90       	pop	r0
    4f80:	1f 90       	pop	r1
    4f82:	18 95       	reti

00004f84 <__vector_6>:
    4f84:	1f 92       	push	r1
    4f86:	0f 92       	push	r0
    4f88:	0f b6       	in	r0, 0x3f	; 63
    4f8a:	0f 92       	push	r0
    4f8c:	11 24       	eor	r1, r1
    4f8e:	2f 93       	push	r18
    4f90:	3f 93       	push	r19
    4f92:	4f 93       	push	r20
    4f94:	5f 93       	push	r21
    4f96:	6f 93       	push	r22
    4f98:	7f 93       	push	r23
    4f9a:	8f 93       	push	r24
    4f9c:	9f 93       	push	r25
    4f9e:	af 93       	push	r26
    4fa0:	bf 93       	push	r27
    4fa2:	ef 93       	push	r30
    4fa4:	ff 93       	push	r31
    4fa6:	e0 91 3e 04 	lds	r30, 0x043E
    4faa:	f0 91 3f 04 	lds	r31, 0x043F
    4fae:	30 97       	sbiw	r30, 0x00	; 0
    4fb0:	09 f0       	breq	.+2      	; 0x4fb4 <__vector_6+0x30>
    4fb2:	09 95       	icall
    4fb4:	ff 91       	pop	r31
    4fb6:	ef 91       	pop	r30
    4fb8:	bf 91       	pop	r27
    4fba:	af 91       	pop	r26
    4fbc:	9f 91       	pop	r25
    4fbe:	8f 91       	pop	r24
    4fc0:	7f 91       	pop	r23
    4fc2:	6f 91       	pop	r22
    4fc4:	5f 91       	pop	r21
    4fc6:	4f 91       	pop	r20
    4fc8:	3f 91       	pop	r19
    4fca:	2f 91       	pop	r18
    4fcc:	0f 90       	pop	r0
    4fce:	0f be       	out	0x3f, r0	; 63
    4fd0:	0f 90       	pop	r0
    4fd2:	1f 90       	pop	r1
    4fd4:	18 95       	reti

00004fd6 <__vector_7>:
    4fd6:	1f 92       	push	r1
    4fd8:	0f 92       	push	r0
    4fda:	0f b6       	in	r0, 0x3f	; 63
    4fdc:	0f 92       	push	r0
    4fde:	11 24       	eor	r1, r1
    4fe0:	2f 93       	push	r18
    4fe2:	3f 93       	push	r19
    4fe4:	4f 93       	push	r20
    4fe6:	5f 93       	push	r21
    4fe8:	6f 93       	push	r22
    4fea:	7f 93       	push	r23
    4fec:	8f 93       	push	r24
    4fee:	9f 93       	push	r25
    4ff0:	af 93       	push	r26
    4ff2:	bf 93       	push	r27
    4ff4:	ef 93       	push	r30
    4ff6:	ff 93       	push	r31
    4ff8:	e0 91 40 04 	lds	r30, 0x0440
    4ffc:	f0 91 41 04 	lds	r31, 0x0441
    5000:	30 97       	sbiw	r30, 0x00	; 0
    5002:	09 f0       	breq	.+2      	; 0x5006 <__vector_7+0x30>
    5004:	09 95       	icall
    5006:	ff 91       	pop	r31
    5008:	ef 91       	pop	r30
    500a:	bf 91       	pop	r27
    500c:	af 91       	pop	r26
    500e:	9f 91       	pop	r25
    5010:	8f 91       	pop	r24
    5012:	7f 91       	pop	r23
    5014:	6f 91       	pop	r22
    5016:	5f 91       	pop	r21
    5018:	4f 91       	pop	r20
    501a:	3f 91       	pop	r19
    501c:	2f 91       	pop	r18
    501e:	0f 90       	pop	r0
    5020:	0f be       	out	0x3f, r0	; 63
    5022:	0f 90       	pop	r0
    5024:	1f 90       	pop	r1
    5026:	18 95       	reti

00005028 <ISR_attach>:
    5028:	e8 2f       	mov	r30, r24
    502a:	80 32       	cpi	r24, 0x20	; 32
    502c:	68 f4       	brcc	.+26     	; 0x5048 <ISR_attach+0x20>
    502e:	80 51       	subi	r24, 0x10	; 16
    5030:	83 30       	cpi	r24, 0x03	; 3
    5032:	50 f0       	brcs	.+20     	; 0x5048 <ISR_attach+0x20>
    5034:	f0 e0       	ldi	r31, 0x00	; 0
    5036:	ee 0f       	add	r30, r30
    5038:	ff 1f       	adc	r31, r31
    503a:	ee 5c       	subi	r30, 0xCE	; 206
    503c:	fb 4f       	sbci	r31, 0xFB	; 251
    503e:	20 81       	ld	r18, Z
    5040:	31 81       	ldd	r19, Z+1	; 0x01
    5042:	71 83       	std	Z+1, r23	; 0x01
    5044:	60 83       	st	Z, r22
    5046:	02 c0       	rjmp	.+4      	; 0x504c <ISR_attach+0x24>
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	30 e0       	ldi	r19, 0x00	; 0
    504c:	c9 01       	movw	r24, r18
    504e:	08 95       	ret

00005050 <ISR_open>:
    5050:	80 e1       	ldi	r24, 0x10	; 16
    5052:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    5056:	88 23       	and	r24, r24
    5058:	61 f4       	brne	.+24     	; 0x5072 <ISR_open+0x22>
    505a:	e2 e3       	ldi	r30, 0x32	; 50
    505c:	f4 e0       	ldi	r31, 0x04	; 4
    505e:	11 92       	st	Z+, r1
    5060:	11 92       	st	Z+, r1
    5062:	84 e0       	ldi	r24, 0x04	; 4
    5064:	e2 37       	cpi	r30, 0x72	; 114
    5066:	f8 07       	cpc	r31, r24
    5068:	d1 f7       	brne	.-12     	; 0x505e <ISR_open+0xe>
    506a:	80 e1       	ldi	r24, 0x10	; 16
    506c:	61 e0       	ldi	r22, 0x01	; 1
    506e:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    5072:	80 e1       	ldi	r24, 0x10	; 16
    5074:	91 e0       	ldi	r25, 0x01	; 1
    5076:	08 95       	ret

00005078 <__LCD_init>:
    5078:	23 9a       	sbi	0x04, 3	; 4
    507a:	08 95       	ret

0000507c <__LCD_putchar>:
    507c:	ff 92       	push	r15
    507e:	0f 93       	push	r16
    5080:	1f 93       	push	r17
    5082:	cf 93       	push	r28
    5084:	df 93       	push	r29
    5086:	f8 2e       	mov	r15, r24
    5088:	8a e0       	ldi	r24, 0x0A	; 10
    508a:	f8 16       	cp	r15, r24
    508c:	b1 f0       	breq	.+44     	; 0x50ba <__LCD_putchar+0x3e>
    508e:	8f 15       	cp	r24, r15
    5090:	48 f0       	brcs	.+18     	; 0x50a4 <__LCD_putchar+0x28>
    5092:	e8 e0       	ldi	r30, 0x08	; 8
    5094:	fe 16       	cp	r15, r30
    5096:	b9 f1       	breq	.+110    	; 0x5106 <__LCD_putchar+0x8a>
    5098:	ef 15       	cp	r30, r15
    509a:	38 f1       	brcs	.+78     	; 0x50ea <__LCD_putchar+0x6e>
    509c:	f7 e0       	ldi	r31, 0x07	; 7
    509e:	ff 16       	cp	r15, r31
    50a0:	51 f4       	brne	.+20     	; 0x50b6 <__LCD_putchar+0x3a>
    50a2:	3b c0       	rjmp	.+118    	; 0x511a <__LCD_putchar+0x9e>
    50a4:	8d e0       	ldi	r24, 0x0D	; 13
    50a6:	f8 16       	cp	r15, r24
    50a8:	59 f0       	breq	.+22     	; 0x50c0 <__LCD_putchar+0x44>
    50aa:	eb e1       	ldi	r30, 0x1B	; 27
    50ac:	fe 16       	cp	r15, r30
    50ae:	89 f0       	breq	.+34     	; 0x50d2 <__LCD_putchar+0x56>
    50b0:	fc e0       	ldi	r31, 0x0C	; 12
    50b2:	ff 16       	cp	r15, r31
    50b4:	41 f0       	breq	.+16     	; 0x50c6 <__LCD_putchar+0x4a>
    50b6:	01 e0       	ldi	r16, 0x01	; 1
    50b8:	41 c0       	rjmp	.+130    	; 0x513c <__LCD_putchar+0xc0>
    50ba:	10 92 a4 07 	sts	0x07A4, r1
    50be:	03 c0       	rjmp	.+6      	; 0x50c6 <__LCD_putchar+0x4a>
    50c0:	10 92 a4 07 	sts	0x07A4, r1
    50c4:	3a c0       	rjmp	.+116    	; 0x513a <__LCD_putchar+0xbe>
    50c6:	80 91 a5 07 	lds	r24, 0x07A5
    50ca:	81 50       	subi	r24, 0x01	; 1
    50cc:	80 93 a5 07 	sts	0x07A5, r24
    50d0:	34 c0       	rjmp	.+104    	; 0x513a <__LCD_putchar+0xbe>
    50d2:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <LCD_clear>
    50d6:	14 c0       	rjmp	.+40     	; 0x5100 <__LCD_putchar+0x84>
    50d8:	80 e0       	ldi	r24, 0x00	; 0
    50da:	61 e0       	ldi	r22, 0x01	; 1
    50dc:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    50e0:	80 91 a4 07 	lds	r24, 0x07A4
    50e4:	8f 5f       	subi	r24, 0xFF	; 255
    50e6:	80 93 a4 07 	sts	0x07A4, r24
    50ea:	80 91 a4 07 	lds	r24, 0x07A4
    50ee:	87 ff       	sbrs	r24, 7
    50f0:	f3 cf       	rjmp	.-26     	; 0x50d8 <__LCD_putchar+0x5c>
    50f2:	10 92 a4 07 	sts	0x07A4, r1
    50f6:	80 91 a5 07 	lds	r24, 0x07A5
    50fa:	81 50       	subi	r24, 0x01	; 1
    50fc:	80 93 a5 07 	sts	0x07A5, r24
    5100:	00 e0       	ldi	r16, 0x00	; 0
    5102:	11 e0       	ldi	r17, 0x01	; 1
    5104:	1c c0       	rjmp	.+56     	; 0x513e <__LCD_putchar+0xc2>
    5106:	80 91 a4 07 	lds	r24, 0x07A4
    510a:	88 23       	and	r24, r24
    510c:	b1 f0       	breq	.+44     	; 0x513a <__LCD_putchar+0xbe>
    510e:	80 91 a4 07 	lds	r24, 0x07A4
    5112:	86 50       	subi	r24, 0x06	; 6
    5114:	80 93 a4 07 	sts	0x07A4, r24
    5118:	10 c0       	rjmp	.+32     	; 0x513a <__LCD_putchar+0xbe>
    511a:	81 e0       	ldi	r24, 0x01	; 1
    511c:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <SPKR_open>
    5120:	64 ef       	ldi	r22, 0xF4	; 244
    5122:	71 e0       	ldi	r23, 0x01	; 1
    5124:	80 e0       	ldi	r24, 0x00	; 0
    5126:	90 e0       	ldi	r25, 0x00	; 0
    5128:	4d e7       	ldi	r20, 0x7D	; 125
    512a:	50 e0       	ldi	r21, 0x00	; 0
    512c:	24 e6       	ldi	r18, 0x64	; 100
    512e:	30 e0       	ldi	r19, 0x00	; 0
    5130:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <SPKR_play_beep>
    5134:	81 e0       	ldi	r24, 0x01	; 1
    5136:	0e 94 24 2a 	call	0x5448	; 0x5448 <SPKR_close>
    513a:	00 e0       	ldi	r16, 0x00	; 0
    513c:	10 e0       	ldi	r17, 0x00	; 0
    513e:	80 91 a5 07 	lds	r24, 0x07A5
    5142:	60 91 a4 07 	lds	r22, 0x07A4
    5146:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <LCD_set_PGC_addr>
    514a:	00 23       	and	r16, r16
    514c:	51 f1       	breq	.+84     	; 0x51a2 <__LCD_putchar+0x126>
    514e:	85 e0       	ldi	r24, 0x05	; 5
    5150:	f8 9e       	mul	r15, r24
    5152:	c0 01       	movw	r24, r0
    5154:	11 24       	eor	r1, r1
    5156:	ec 01       	movw	r28, r24
    5158:	c3 55       	subi	r28, 0x53	; 83
    515a:	df 4f       	sbci	r29, 0xFF	; 255
    515c:	8c 01       	movw	r16, r24
    515e:	0e 54       	subi	r16, 0x4E	; 78
    5160:	1f 4f       	sbci	r17, 0xFF	; 255
    5162:	fe 01       	movw	r30, r28
    5164:	84 91       	lpm	r24, Z+
    5166:	61 e0       	ldi	r22, 0x01	; 1
    5168:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    516c:	21 96       	adiw	r28, 0x01	; 1
    516e:	c0 17       	cp	r28, r16
    5170:	d1 07       	cpc	r29, r17
    5172:	b9 f7       	brne	.-18     	; 0x5162 <__LCD_putchar+0xe6>
    5174:	80 e0       	ldi	r24, 0x00	; 0
    5176:	61 e0       	ldi	r22, 0x01	; 1
    5178:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <LCD_write>
    517c:	80 91 a4 07 	lds	r24, 0x07A4
    5180:	8a 5f       	subi	r24, 0xFA	; 250
    5182:	80 93 a4 07 	sts	0x07A4, r24
    5186:	80 91 a4 07 	lds	r24, 0x07A4
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	8c 37       	cpi	r24, 0x7C	; 124
    518e:	91 05       	cpc	r25, r1
    5190:	3c f0       	brlt	.+14     	; 0x51a0 <__LCD_putchar+0x124>
    5192:	10 92 a4 07 	sts	0x07A4, r1
    5196:	80 91 a5 07 	lds	r24, 0x07A5
    519a:	81 50       	subi	r24, 0x01	; 1
    519c:	80 93 a5 07 	sts	0x07A5, r24
    51a0:	11 e0       	ldi	r17, 0x01	; 1
    51a2:	80 91 a5 07 	lds	r24, 0x07A5
    51a6:	83 70       	andi	r24, 0x03	; 3
    51a8:	80 93 a5 07 	sts	0x07A5, r24
    51ac:	11 30       	cpi	r17, 0x01	; 1
    51ae:	59 f4       	brne	.+22     	; 0x51c6 <__LCD_putchar+0x14a>
    51b0:	80 91 a6 07 	lds	r24, 0x07A6
    51b4:	81 30       	cpi	r24, 0x01	; 1
    51b6:	39 f4       	brne	.+14     	; 0x51c6 <__LCD_putchar+0x14a>
    51b8:	e0 91 a7 07 	lds	r30, 0x07A7
    51bc:	f0 91 a8 07 	lds	r31, 0x07A8
    51c0:	30 97       	sbiw	r30, 0x00	; 0
    51c2:	09 f0       	breq	.+2      	; 0x51c6 <__LCD_putchar+0x14a>
    51c4:	09 95       	icall
    51c6:	80 e0       	ldi	r24, 0x00	; 0
    51c8:	90 e0       	ldi	r25, 0x00	; 0
    51ca:	df 91       	pop	r29
    51cc:	cf 91       	pop	r28
    51ce:	1f 91       	pop	r17
    51d0:	0f 91       	pop	r16
    51d2:	ff 90       	pop	r15
    51d4:	08 95       	ret

000051d6 <__LED_clr_pattern>:
    51d6:	85 fd       	sbrc	r24, 5
    51d8:	5d 98       	cbi	0x0b, 5	; 11
    51da:	86 fd       	sbrc	r24, 6
    51dc:	5e 98       	cbi	0x0b, 6	; 11
    51de:	08 95       	ret

000051e0 <__LED_init>:
    51e0:	55 9a       	sbi	0x0a, 5	; 10
    51e2:	56 9a       	sbi	0x0a, 6	; 10
    51e4:	08 95       	ret

000051e6 <__LED_set_pattern>:
    51e6:	85 fd       	sbrc	r24, 5
    51e8:	5d 9a       	sbi	0x0b, 5	; 11
    51ea:	86 fd       	sbrc	r24, 6
    51ec:	5e 9a       	sbi	0x0b, 6	; 11
    51ee:	08 95       	ret

000051f0 <ATMEGA_open>:
    51f0:	80 e0       	ldi	r24, 0x00	; 0
    51f2:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    51f6:	88 23       	and	r24, r24
    51f8:	51 f4       	brne	.+20     	; 0x520e <ATMEGA_open+0x1e>
    51fa:	f8 94       	cli
    51fc:	0e 94 ef 2b 	call	0x57de	; 0x57de <__ATMEGA_init>
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	0e 94 0a 29 	call	0x5214	; 0x5214 <ATMEGA_set_clk_mode>
    5206:	80 e0       	ldi	r24, 0x00	; 0
    5208:	61 e0       	ldi	r22, 0x01	; 1
    520a:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    520e:	80 e0       	ldi	r24, 0x00	; 0
    5210:	91 e0       	ldi	r25, 0x01	; 1
    5212:	08 95       	ret

00005214 <ATMEGA_set_clk_mode>:
    5214:	81 30       	cpi	r24, 0x01	; 1
    5216:	49 f0       	breq	.+18     	; 0x522a <ATMEGA_set_clk_mode+0x16>
    5218:	f8 94       	cli
    521a:	81 30       	cpi	r24, 0x01	; 1
    521c:	20 f1       	brcs	.+72     	; 0x5266 <ATMEGA_set_clk_mode+0x52>
    521e:	82 30       	cpi	r24, 0x02	; 2
    5220:	b1 f0       	breq	.+44     	; 0x524e <ATMEGA_set_clk_mode+0x3a>
    5222:	83 30       	cpi	r24, 0x03	; 3
    5224:	09 f0       	breq	.+2      	; 0x5228 <ATMEGA_set_clk_mode+0x14>
    5226:	45 c0       	rjmp	.+138    	; 0x52b2 <ATMEGA_set_clk_mode+0x9e>
    5228:	17 c0       	rjmp	.+46     	; 0x5258 <ATMEGA_set_clk_mode+0x44>
    522a:	2c 9a       	sbi	0x05, 4	; 5
    522c:	80 e8       	ldi	r24, 0x80	; 128
    522e:	80 93 61 00 	sts	0x0061, r24
    5232:	10 92 61 00 	sts	0x0061, r1
    5236:	80 e0       	ldi	r24, 0x00	; 0
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	00 00       	nop
    523c:	01 96       	adiw	r24, 0x01	; 1
    523e:	88 32       	cpi	r24, 0x28	; 40
    5240:	91 05       	cpc	r25, r1
    5242:	d9 f7       	brne	.-10     	; 0x523a <ATMEGA_set_clk_mode+0x26>
    5244:	10 92 68 00 	sts	0x0068, r1
    5248:	10 92 6b 00 	sts	0x006B, r1
    524c:	08 95       	ret
    524e:	80 e8       	ldi	r24, 0x80	; 128
    5250:	80 93 61 00 	sts	0x0061, r24
    5254:	83 e0       	ldi	r24, 0x03	; 3
    5256:	04 c0       	rjmp	.+8      	; 0x5260 <ATMEGA_set_clk_mode+0x4c>
    5258:	80 e8       	ldi	r24, 0x80	; 128
    525a:	80 93 61 00 	sts	0x0061, r24
    525e:	88 e0       	ldi	r24, 0x08	; 8
    5260:	80 93 61 00 	sts	0x0061, r24
    5264:	28 c0       	rjmp	.+80     	; 0x52b6 <ATMEGA_set_clk_mode+0xa2>
    5266:	80 e0       	ldi	r24, 0x00	; 0
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	00 00       	nop
    526c:	01 96       	adiw	r24, 0x01	; 1
    526e:	2d e6       	ldi	r18, 0x6D	; 109
    5270:	80 36       	cpi	r24, 0x60	; 96
    5272:	92 07       	cpc	r25, r18
    5274:	d1 f7       	brne	.-12     	; 0x526a <ATMEGA_set_clk_mode+0x56>
    5276:	2c 98       	cbi	0x05, 4	; 5
    5278:	80 e0       	ldi	r24, 0x00	; 0
    527a:	90 e0       	ldi	r25, 0x00	; 0
    527c:	00 00       	nop
    527e:	01 96       	adiw	r24, 0x01	; 1
    5280:	2d e6       	ldi	r18, 0x6D	; 109
    5282:	80 36       	cpi	r24, 0x60	; 96
    5284:	92 07       	cpc	r25, r18
    5286:	d1 f7       	brne	.-12     	; 0x527c <ATMEGA_set_clk_mode+0x68>
    5288:	10 92 7a 00 	sts	0x007A, r1
    528c:	8f ef       	ldi	r24, 0xFF	; 255
    528e:	80 93 64 00 	sts	0x0064, r24
    5292:	80 91 68 00 	lds	r24, 0x0068
    5296:	81 60       	ori	r24, 0x01	; 1
    5298:	80 93 68 00 	sts	0x0068, r24
    529c:	80 91 6b 00 	lds	r24, 0x006B
    52a0:	84 60       	ori	r24, 0x04	; 4
    52a2:	80 93 6b 00 	sts	0x006B, r24
    52a6:	78 94       	sei
    52a8:	83 b7       	in	r24, 0x33	; 51
    52aa:	81 60       	ori	r24, 0x01	; 1
    52ac:	83 bf       	out	0x33, r24	; 51
    52ae:	88 95       	sleep
    52b0:	08 95       	ret
    52b2:	82 30       	cpi	r24, 0x02	; 2
    52b4:	08 f0       	brcs	.+2      	; 0x52b8 <ATMEGA_set_clk_mode+0xa4>
    52b6:	78 94       	sei
    52b8:	08 95       	ret

000052ba <SPI_open>:
    52ba:	0f 93       	push	r16
    52bc:	1f 93       	push	r17
    52be:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__SPI_init>
    52c2:	80 e0       	ldi	r24, 0x00	; 0
    52c4:	6a e0       	ldi	r22, 0x0A	; 10
    52c6:	7c e2       	ldi	r23, 0x2C	; 44
    52c8:	0e 94 a8 29 	call	0x5350	; 0x5350 <SPI_set_config_func>
    52cc:	81 e0       	ldi	r24, 0x01	; 1
    52ce:	62 e0       	ldi	r22, 0x02	; 2
    52d0:	7c e2       	ldi	r23, 0x2C	; 44
    52d2:	0e 94 a8 29 	call	0x5350	; 0x5350 <SPI_set_config_func>
    52d6:	82 e0       	ldi	r24, 0x02	; 2
    52d8:	6a ef       	ldi	r22, 0xFA	; 250
    52da:	7b e2       	ldi	r23, 0x2B	; 43
    52dc:	0e 94 a8 29 	call	0x5350	; 0x5350 <SPI_set_config_func>
    52e0:	86 e0       	ldi	r24, 0x06	; 6
    52e2:	62 e1       	ldi	r22, 0x12	; 18
    52e4:	7c e2       	ldi	r23, 0x2C	; 44
    52e6:	0e 94 a8 29 	call	0x5350	; 0x5350 <SPI_set_config_func>
    52ea:	02 ef       	ldi	r16, 0xF2	; 242
    52ec:	1b e2       	ldi	r17, 0x2B	; 43
    52ee:	83 e0       	ldi	r24, 0x03	; 3
    52f0:	b8 01       	movw	r22, r16
    52f2:	0e 94 a8 29 	call	0x5350	; 0x5350 <SPI_set_config_func>
    52f6:	84 e0       	ldi	r24, 0x04	; 4
    52f8:	b8 01       	movw	r22, r16
    52fa:	0e 94 a8 29 	call	0x5350	; 0x5350 <SPI_set_config_func>
    52fe:	85 e0       	ldi	r24, 0x05	; 5
    5300:	b8 01       	movw	r22, r16
    5302:	0e 94 a8 29 	call	0x5350	; 0x5350 <SPI_set_config_func>
    5306:	87 e0       	ldi	r24, 0x07	; 7
    5308:	b8 01       	movw	r22, r16
    530a:	0e 94 a8 29 	call	0x5350	; 0x5350 <SPI_set_config_func>
    530e:	82 e0       	ldi	r24, 0x02	; 2
    5310:	61 e0       	ldi	r22, 0x01	; 1
    5312:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    5316:	8f ef       	ldi	r24, 0xFF	; 255
    5318:	80 93 a9 07 	sts	0x07A9, r24
    531c:	87 e0       	ldi	r24, 0x07	; 7
    531e:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <SPI_set_slave_addr>
    5322:	82 e0       	ldi	r24, 0x02	; 2
    5324:	91 e0       	ldi	r25, 0x01	; 1
    5326:	1f 91       	pop	r17
    5328:	0f 91       	pop	r16
    532a:	08 95       	ret

0000532c <SPI_receive>:
    532c:	1f 93       	push	r17
    532e:	16 2f       	mov	r17, r22
    5330:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <SPI_set_slave_addr>
    5334:	82 e0       	ldi	r24, 0x02	; 2
    5336:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    533a:	81 30       	cpi	r24, 0x01	; 1
    533c:	11 f0       	breq	.+4      	; 0x5342 <SPI_receive+0x16>
    533e:	80 e0       	ldi	r24, 0x00	; 0
    5340:	05 c0       	rjmp	.+10     	; 0x534c <SPI_receive+0x20>
    5342:	1e bd       	out	0x2e, r17	; 46
    5344:	0d b4       	in	r0, 0x2d	; 45
    5346:	07 fe       	sbrs	r0, 7
    5348:	fd cf       	rjmp	.-6      	; 0x5344 <SPI_receive+0x18>
    534a:	8e b5       	in	r24, 0x2e	; 46
    534c:	1f 91       	pop	r17
    534e:	08 95       	ret

00005350 <SPI_set_config_func>:
    5350:	e8 2f       	mov	r30, r24
    5352:	f0 e0       	ldi	r31, 0x00	; 0
    5354:	ee 0f       	add	r30, r30
    5356:	ff 1f       	adc	r31, r31
    5358:	ee 58       	subi	r30, 0x8E	; 142
    535a:	fb 4f       	sbci	r31, 0xFB	; 251
    535c:	71 83       	std	Z+1, r23	; 0x01
    535e:	60 83       	st	Z, r22
    5360:	08 95       	ret

00005362 <__SPKR_TIMER1_COMPA_vect>:
    5362:	0e 94 b4 29 	call	0x5368	; 0x5368 <SPKR_clk>
    5366:	08 95       	ret

00005368 <SPKR_clk>:
    5368:	80 91 84 04 	lds	r24, 0x0484
    536c:	90 91 85 04 	lds	r25, 0x0485
    5370:	a0 91 86 04 	lds	r26, 0x0486
    5374:	b0 91 87 04 	lds	r27, 0x0487
    5378:	20 91 88 04 	lds	r18, 0x0488
    537c:	30 91 89 04 	lds	r19, 0x0489
    5380:	40 91 8a 04 	lds	r20, 0x048A
    5384:	50 91 8b 04 	lds	r21, 0x048B
    5388:	28 0f       	add	r18, r24
    538a:	39 1f       	adc	r19, r25
    538c:	4a 1f       	adc	r20, r26
    538e:	5b 1f       	adc	r21, r27
    5390:	20 93 84 04 	sts	0x0484, r18
    5394:	30 93 85 04 	sts	0x0485, r19
    5398:	40 93 86 04 	sts	0x0486, r20
    539c:	50 93 87 04 	sts	0x0487, r21
    53a0:	80 91 84 04 	lds	r24, 0x0484
    53a4:	90 91 85 04 	lds	r25, 0x0485
    53a8:	a0 91 86 04 	lds	r26, 0x0486
    53ac:	b0 91 87 04 	lds	r27, 0x0487
    53b0:	88 51       	subi	r24, 0x18	; 24
    53b2:	96 4f       	sbci	r25, 0xF6	; 246
    53b4:	a0 40       	sbci	r26, 0x00	; 0
    53b6:	b0 40       	sbci	r27, 0x00	; 0
    53b8:	bc f0       	brlt	.+46     	; 0x53e8 <SPKR_clk+0x80>
    53ba:	8b b1       	in	r24, 0x0b	; 11
    53bc:	80 58       	subi	r24, 0x80	; 128
    53be:	8b b9       	out	0x0b, r24	; 11
    53c0:	80 91 84 04 	lds	r24, 0x0484
    53c4:	90 91 85 04 	lds	r25, 0x0485
    53c8:	a0 91 86 04 	lds	r26, 0x0486
    53cc:	b0 91 87 04 	lds	r27, 0x0487
    53d0:	88 51       	subi	r24, 0x18	; 24
    53d2:	96 4f       	sbci	r25, 0xF6	; 246
    53d4:	a0 40       	sbci	r26, 0x00	; 0
    53d6:	b0 40       	sbci	r27, 0x00	; 0
    53d8:	80 93 84 04 	sts	0x0484, r24
    53dc:	90 93 85 04 	sts	0x0485, r25
    53e0:	a0 93 86 04 	sts	0x0486, r26
    53e4:	b0 93 87 04 	sts	0x0487, r27
    53e8:	08 95       	ret

000053ea <__SPKR_close_beep_mode>:
    53ea:	8a e0       	ldi	r24, 0x0A	; 10
    53ec:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    53f0:	81 30       	cpi	r24, 0x01	; 1
    53f2:	41 f4       	brne	.+16     	; 0x5404 <__SPKR_close_beep_mode+0x1a>
    53f4:	0e 94 39 2c 	call	0x5872	; 0x5872 <__SPKR_close>
    53f8:	10 92 83 04 	sts	0x0483, r1
    53fc:	8a e0       	ldi	r24, 0x0A	; 10
    53fe:	60 e0       	ldi	r22, 0x00	; 0
    5400:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    5404:	08 95       	ret

00005406 <__SPKR_close_tone_mode>:
    5406:	89 e0       	ldi	r24, 0x09	; 9
    5408:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    540c:	81 30       	cpi	r24, 0x01	; 1
    540e:	d9 f4       	brne	.+54     	; 0x5446 <__SPKR_close_tone_mode+0x40>
    5410:	80 91 82 04 	lds	r24, 0x0482
    5414:	88 23       	and	r24, r24
    5416:	11 f0       	breq	.+4      	; 0x541c <__SPKR_close_tone_mode+0x16>
    5418:	0e 94 a5 2a 	call	0x554a	; 0x554a <__SPKR_stop>
    541c:	82 e0       	ldi	r24, 0x02	; 2
    541e:	0e 94 39 2c 	call	0x5872	; 0x5872 <__SPKR_close>
    5422:	80 91 90 04 	lds	r24, 0x0490
    5426:	90 91 91 04 	lds	r25, 0x0491
    542a:	00 97       	sbiw	r24, 0x00	; 0
    542c:	31 f0       	breq	.+12     	; 0x543a <__SPKR_close_tone_mode+0x34>
    542e:	0e 94 ac 38 	call	0x7158	; 0x7158 <free>
    5432:	10 92 91 04 	sts	0x0491, r1
    5436:	10 92 90 04 	sts	0x0490, r1
    543a:	10 92 82 04 	sts	0x0482, r1
    543e:	89 e0       	ldi	r24, 0x09	; 9
    5440:	60 e0       	ldi	r22, 0x00	; 0
    5442:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    5446:	08 95       	ret

00005448 <SPKR_close>:
    5448:	81 30       	cpi	r24, 0x01	; 1
    544a:	29 f0       	breq	.+10     	; 0x5456 <SPKR_close+0xe>
    544c:	82 30       	cpi	r24, 0x02	; 2
    544e:	29 f4       	brne	.+10     	; 0x545a <SPKR_close+0x12>
    5450:	0e 94 03 2a 	call	0x5406	; 0x5406 <__SPKR_close_tone_mode>
    5454:	08 95       	ret
    5456:	0e 94 f5 29 	call	0x53ea	; 0x53ea <__SPKR_close_beep_mode>
    545a:	08 95       	ret

0000545c <__SPKR_init>:
    545c:	98 2f       	mov	r25, r24
    545e:	80 91 82 04 	lds	r24, 0x0482
    5462:	88 23       	and	r24, r24
    5464:	31 f4       	brne	.+12     	; 0x5472 <__SPKR_init+0x16>
    5466:	80 91 83 04 	lds	r24, 0x0483
    546a:	88 23       	and	r24, r24
    546c:	11 f4       	brne	.+4      	; 0x5472 <__SPKR_init+0x16>
    546e:	57 9a       	sbi	0x0a, 7	; 10
    5470:	5f 98       	cbi	0x0b, 7	; 11
    5472:	80 91 82 04 	lds	r24, 0x0482
    5476:	88 23       	and	r24, r24
    5478:	d1 f4       	brne	.+52     	; 0x54ae <__SPKR_init+0x52>
    547a:	92 30       	cpi	r25, 0x02	; 2
    547c:	c1 f4       	brne	.+48     	; 0x54ae <__SPKR_init+0x52>
    547e:	10 92 80 00 	sts	0x0080, r1
    5482:	10 92 81 00 	sts	0x0081, r1
    5486:	80 91 81 00 	lds	r24, 0x0081
    548a:	88 60       	ori	r24, 0x08	; 8
    548c:	80 93 81 00 	sts	0x0081, r24
    5490:	80 91 81 00 	lds	r24, 0x0081
    5494:	81 60       	ori	r24, 0x01	; 1
    5496:	80 93 81 00 	sts	0x0081, r24
    549a:	10 92 85 00 	sts	0x0085, r1
    549e:	10 92 84 00 	sts	0x0084, r1
    54a2:	81 e0       	ldi	r24, 0x01	; 1
    54a4:	80 93 89 00 	sts	0x0089, r24
    54a8:	80 e9       	ldi	r24, 0x90	; 144
    54aa:	80 93 88 00 	sts	0x0088, r24
    54ae:	08 95       	ret

000054b0 <SPKR_play_beep>:
    54b0:	8f 92       	push	r8
    54b2:	9f 92       	push	r9
    54b4:	af 92       	push	r10
    54b6:	bf 92       	push	r11
    54b8:	cf 92       	push	r12
    54ba:	df 92       	push	r13
    54bc:	ef 92       	push	r14
    54be:	ff 92       	push	r15
    54c0:	0f 93       	push	r16
    54c2:	1f 93       	push	r17
    54c4:	cf 93       	push	r28
    54c6:	df 93       	push	r29
    54c8:	4b 01       	movw	r8, r22
    54ca:	5c 01       	movw	r10, r24
    54cc:	ea 01       	movw	r28, r20
    54ce:	b9 01       	movw	r22, r18
    54d0:	21 15       	cp	r18, r1
    54d2:	31 05       	cpc	r19, r1
    54d4:	39 f1       	breq	.+78     	; 0x5524 <SPKR_play_beep+0x74>
    54d6:	9e 01       	movw	r18, r28
    54d8:	44 27       	eor	r20, r20
    54da:	37 fd       	sbrc	r19, 7
    54dc:	40 95       	com	r20
    54de:	54 2f       	mov	r21, r20
    54e0:	65 36       	cpi	r22, 0x65	; 101
    54e2:	71 05       	cpc	r23, r1
    54e4:	10 f0       	brcs	.+4      	; 0x54ea <SPKR_play_beep+0x3a>
    54e6:	64 e6       	ldi	r22, 0x64	; 100
    54e8:	70 e0       	ldi	r23, 0x00	; 0
    54ea:	80 e0       	ldi	r24, 0x00	; 0
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	0e 94 87 37 	call	0x6f0e	; 0x6f0e <__mulsi3>
    54f2:	24 e6       	ldi	r18, 0x64	; 100
    54f4:	30 e0       	ldi	r19, 0x00	; 0
    54f6:	40 e0       	ldi	r20, 0x00	; 0
    54f8:	50 e0       	ldi	r21, 0x00	; 0
    54fa:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <__udivmodsi4>
    54fe:	79 01       	movw	r14, r18
    5500:	8a 01       	movw	r16, r20
    5502:	c5 01       	movw	r24, r10
    5504:	b4 01       	movw	r22, r8
    5506:	0e 94 22 2c 	call	0x5844	; 0x5844 <SPKR_beep>
    550a:	c7 01       	movw	r24, r14
    550c:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
    5510:	60 e0       	ldi	r22, 0x00	; 0
    5512:	70 e0       	ldi	r23, 0x00	; 0
    5514:	80 e0       	ldi	r24, 0x00	; 0
    5516:	90 e0       	ldi	r25, 0x00	; 0
    5518:	0e 94 22 2c 	call	0x5844	; 0x5844 <SPKR_beep>
    551c:	ce 01       	movw	r24, r28
    551e:	8e 19       	sub	r24, r14
    5520:	9f 09       	sbc	r25, r15
    5522:	04 c0       	rjmp	.+8      	; 0x552c <SPKR_play_beep+0x7c>
    5524:	41 15       	cp	r20, r1
    5526:	51 05       	cpc	r21, r1
    5528:	19 f0       	breq	.+6      	; 0x5530 <SPKR_play_beep+0x80>
    552a:	ca 01       	movw	r24, r20
    552c:	0e 94 89 24 	call	0x4912	; 0x4912 <TMRSRVC_delay>
    5530:	df 91       	pop	r29
    5532:	cf 91       	pop	r28
    5534:	1f 91       	pop	r17
    5536:	0f 91       	pop	r16
    5538:	ff 90       	pop	r15
    553a:	ef 90       	pop	r14
    553c:	df 90       	pop	r13
    553e:	cf 90       	pop	r12
    5540:	bf 90       	pop	r11
    5542:	af 90       	pop	r10
    5544:	9f 90       	pop	r9
    5546:	8f 90       	pop	r8
    5548:	08 95       	ret

0000554a <__SPKR_stop>:
    554a:	ef e6       	ldi	r30, 0x6F	; 111
    554c:	f0 e0       	ldi	r31, 0x00	; 0
    554e:	80 81       	ld	r24, Z
    5550:	8d 7f       	andi	r24, 0xFD	; 253
    5552:	80 83       	st	Z, r24
    5554:	08 95       	ret

00005556 <STEPPER_go>:
    5556:	98 2f       	mov	r25, r24
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	80 93 8e 07 	sts	0x078E, r24
    555e:	91 30       	cpi	r25, 0x01	; 1
    5560:	51 f0       	breq	.+20     	; 0x5576 <STEPPER_go+0x20>
    5562:	91 30       	cpi	r25, 0x01	; 1
    5564:	18 f0       	brcs	.+6      	; 0x556c <STEPPER_go+0x16>
    5566:	92 30       	cpi	r25, 0x02	; 2
    5568:	41 f4       	brne	.+16     	; 0x557a <STEPPER_go+0x24>
    556a:	03 c0       	rjmp	.+6      	; 0x5572 <STEPPER_go+0x1c>
    556c:	10 92 76 07 	sts	0x0776, r1
    5570:	04 c0       	rjmp	.+8      	; 0x557a <STEPPER_go+0x24>
    5572:	10 92 76 07 	sts	0x0776, r1
    5576:	10 92 77 07 	sts	0x0777, r1
    557a:	10 92 8e 07 	sts	0x078E, r1
    557e:	08 95       	ret

00005580 <__STEPPER_init>:
    5580:	3a 9a       	sbi	0x07, 2	; 7
    5582:	3b 9a       	sbi	0x07, 3	; 7
    5584:	3c 9a       	sbi	0x07, 4	; 7
    5586:	3d 9a       	sbi	0x07, 5	; 7
    5588:	3e 9a       	sbi	0x07, 6	; 7
    558a:	3f 9a       	sbi	0x07, 7	; 7
    558c:	88 b1       	in	r24, 0x08	; 8
    558e:	83 70       	andi	r24, 0x03	; 3
    5590:	88 b9       	out	0x08, r24	; 8
    5592:	08 95       	ret

00005594 <STEPPER_set_stop_mode>:
    5594:	98 2f       	mov	r25, r24
    5596:	81 e0       	ldi	r24, 0x01	; 1
    5598:	80 93 8e 07 	sts	0x078E, r24
    559c:	91 30       	cpi	r25, 0x01	; 1
    559e:	51 f0       	breq	.+20     	; 0x55b4 <STEPPER_set_stop_mode+0x20>
    55a0:	91 30       	cpi	r25, 0x01	; 1
    55a2:	18 f0       	brcs	.+6      	; 0x55aa <STEPPER_set_stop_mode+0x16>
    55a4:	92 30       	cpi	r25, 0x02	; 2
    55a6:	41 f4       	brne	.+16     	; 0x55b8 <STEPPER_set_stop_mode+0x24>
    55a8:	03 c0       	rjmp	.+6      	; 0x55b0 <STEPPER_set_stop_mode+0x1c>
    55aa:	60 93 78 07 	sts	0x0778, r22
    55ae:	04 c0       	rjmp	.+8      	; 0x55b8 <STEPPER_set_stop_mode+0x24>
    55b0:	60 93 78 07 	sts	0x0778, r22
    55b4:	60 93 79 07 	sts	0x0779, r22
    55b8:	10 92 8e 07 	sts	0x078E, r1
    55bc:	08 95       	ret

000055be <STEPPER_setup_decels>:
    55be:	0f 93       	push	r16
    55c0:	1f 93       	push	r17
    55c2:	cf 93       	push	r28
    55c4:	df 93       	push	r29
    55c6:	eb 01       	movw	r28, r22
    55c8:	8a 01       	movw	r16, r20
    55ca:	81 30       	cpi	r24, 0x01	; 1
    55cc:	01 f1       	breq	.+64     	; 0x560e <STEPPER_setup_decels+0x50>
    55ce:	81 30       	cpi	r24, 0x01	; 1
    55d0:	18 f0       	brcs	.+6      	; 0x55d8 <STEPPER_setup_decels+0x1a>
    55d2:	82 30       	cpi	r24, 0x02	; 2
    55d4:	61 f5       	brne	.+88     	; 0x562e <STEPPER_setup_decels+0x70>
    55d6:	0d c0       	rjmp	.+26     	; 0x55f2 <STEPPER_setup_decels+0x34>
    55d8:	80 91 62 07 	lds	r24, 0x0762
    55dc:	90 91 63 07 	lds	r25, 0x0763
    55e0:	89 2b       	or	r24, r25
    55e2:	11 f0       	breq	.+4      	; 0x55e8 <STEPPER_setup_decels+0x2a>
    55e4:	80 e0       	ldi	r24, 0x00	; 0
    55e6:	1a c0       	rjmp	.+52     	; 0x561c <STEPPER_setup_decels+0x5e>
    55e8:	10 92 6f 07 	sts	0x076F, r1
    55ec:	10 92 6e 07 	sts	0x076E, r1
    55f0:	1e c0       	rjmp	.+60     	; 0x562e <STEPPER_setup_decels+0x70>
    55f2:	80 91 62 07 	lds	r24, 0x0762
    55f6:	90 91 63 07 	lds	r25, 0x0763
    55fa:	89 2b       	or	r24, r25
    55fc:	21 f0       	breq	.+8      	; 0x5606 <STEPPER_setup_decels+0x48>
    55fe:	80 e0       	ldi	r24, 0x00	; 0
    5600:	0e 94 55 2c 	call	0x58aa	; 0x58aa <STEPPER_set_decel_step_values>
    5604:	04 c0       	rjmp	.+8      	; 0x560e <STEPPER_setup_decels+0x50>
    5606:	10 92 6f 07 	sts	0x076F, r1
    560a:	10 92 6e 07 	sts	0x076E, r1
    560e:	80 91 64 07 	lds	r24, 0x0764
    5612:	90 91 65 07 	lds	r25, 0x0765
    5616:	89 2b       	or	r24, r25
    5618:	31 f0       	breq	.+12     	; 0x5626 <STEPPER_setup_decels+0x68>
    561a:	81 e0       	ldi	r24, 0x01	; 1
    561c:	be 01       	movw	r22, r28
    561e:	a8 01       	movw	r20, r16
    5620:	0e 94 55 2c 	call	0x58aa	; 0x58aa <STEPPER_set_decel_step_values>
    5624:	04 c0       	rjmp	.+8      	; 0x562e <STEPPER_setup_decels+0x70>
    5626:	10 92 71 07 	sts	0x0771, r1
    562a:	10 92 70 07 	sts	0x0770, r1
    562e:	df 91       	pop	r29
    5630:	cf 91       	pop	r28
    5632:	1f 91       	pop	r17
    5634:	0f 91       	pop	r16
    5636:	08 95       	ret

00005638 <SYS_init>:
    5638:	10 92 91 07 	sts	0x0791, r1
    563c:	10 92 92 07 	sts	0x0792, r1
    5640:	10 92 96 07 	sts	0x0796, r1
    5644:	10 92 93 07 	sts	0x0793, r1
    5648:	10 92 95 07 	sts	0x0795, r1
    564c:	10 92 97 07 	sts	0x0797, r1
    5650:	10 92 98 07 	sts	0x0798, r1
    5654:	10 92 99 07 	sts	0x0799, r1
    5658:	10 92 9a 07 	sts	0x079A, r1
    565c:	10 92 9b 07 	sts	0x079B, r1
    5660:	10 92 9c 07 	sts	0x079C, r1
    5664:	10 92 9d 07 	sts	0x079D, r1
    5668:	10 92 9e 07 	sts	0x079E, r1
    566c:	10 92 9f 07 	sts	0x079F, r1
    5670:	10 92 a0 07 	sts	0x07A0, r1
    5674:	10 92 a1 07 	sts	0x07A1, r1
    5678:	10 92 a2 07 	sts	0x07A2, r1
    567c:	08 95       	ret

0000567e <TMRSRVC_insert>:
    567e:	cf 92       	push	r12
    5680:	df 92       	push	r13
    5682:	ef 92       	push	r14
    5684:	ff 92       	push	r15
    5686:	0f 93       	push	r16
    5688:	1f 93       	push	r17
    568a:	cf 93       	push	r28
    568c:	df 93       	push	r29
    568e:	ec 01       	movw	r28, r24
    5690:	80 91 c8 07 	lds	r24, 0x07C8
    5694:	88 23       	and	r24, r24
    5696:	39 f4       	brne	.+14     	; 0x56a6 <TMRSRVC_insert+0x28>
    5698:	d0 93 ca 07 	sts	0x07CA, r29
    569c:	c0 93 c9 07 	sts	0x07C9, r28
    56a0:	0e 94 cd 2b 	call	0x579a	; 0x579a <TMRSRVC_start>
    56a4:	47 c0       	rjmp	.+142    	; 0x5734 <TMRSRVC_insert+0xb6>
    56a6:	c0 90 c9 07 	lds	r12, 0x07C9
    56aa:	d0 90 ca 07 	lds	r13, 0x07CA
    56ae:	00 e0       	ldi	r16, 0x00	; 0
    56b0:	10 e0       	ldi	r17, 0x00	; 0
    56b2:	ee 24       	eor	r14, r14
    56b4:	ff 24       	eor	r15, r15
    56b6:	37 c0       	rjmp	.+110    	; 0x5726 <TMRSRVC_insert+0xa8>
    56b8:	a8 81       	ld	r26, Y
    56ba:	b9 81       	ldd	r27, Y+1	; 0x01
    56bc:	fd 01       	movw	r30, r26
    56be:	64 81       	ldd	r22, Z+4	; 0x04
    56c0:	75 81       	ldd	r23, Z+5	; 0x05
    56c2:	f6 01       	movw	r30, r12
    56c4:	40 81       	ld	r20, Z
    56c6:	51 81       	ldd	r21, Z+1	; 0x01
    56c8:	fa 01       	movw	r30, r20
    56ca:	84 81       	ldd	r24, Z+4	; 0x04
    56cc:	95 81       	ldd	r25, Z+5	; 0x05
    56ce:	9b 01       	movw	r18, r22
    56d0:	28 1b       	sub	r18, r24
    56d2:	39 0b       	sbc	r19, r25
    56d4:	37 ff       	sbrs	r19, 7
    56d6:	0f c0       	rjmp	.+30     	; 0x56f6 <TMRSRVC_insert+0x78>
    56d8:	86 1b       	sub	r24, r22
    56da:	97 0b       	sbc	r25, r23
    56dc:	95 83       	std	Z+5, r25	; 0x05
    56de:	84 83       	std	Z+4, r24	; 0x04
    56e0:	db 82       	std	Y+3, r13	; 0x03
    56e2:	ca 82       	std	Y+2, r12	; 0x02
    56e4:	01 2b       	or	r16, r17
    56e6:	29 f4       	brne	.+10     	; 0x56f2 <TMRSRVC_insert+0x74>
    56e8:	d0 93 ca 07 	sts	0x07CA, r29
    56ec:	c0 93 c9 07 	sts	0x07C9, r28
    56f0:	21 c0       	rjmp	.+66     	; 0x5734 <TMRSRVC_insert+0xb6>
    56f2:	f7 01       	movw	r30, r14
    56f4:	0c c0       	rjmp	.+24     	; 0x570e <TMRSRVC_insert+0x90>
    56f6:	f6 01       	movw	r30, r12
    56f8:	82 81       	ldd	r24, Z+2	; 0x02
    56fa:	93 81       	ldd	r25, Z+3	; 0x03
    56fc:	21 15       	cp	r18, r1
    56fe:	31 05       	cpc	r19, r1
    5700:	49 f4       	brne	.+18     	; 0x5714 <TMRSRVC_insert+0x96>
    5702:	fd 01       	movw	r30, r26
    5704:	15 82       	std	Z+5, r1	; 0x05
    5706:	14 82       	std	Z+4, r1	; 0x04
    5708:	9b 83       	std	Y+3, r25	; 0x03
    570a:	8a 83       	std	Y+2, r24	; 0x02
    570c:	f6 01       	movw	r30, r12
    570e:	d3 83       	std	Z+3, r29	; 0x03
    5710:	c2 83       	std	Z+2, r28	; 0x02
    5712:	10 c0       	rjmp	.+32     	; 0x5734 <TMRSRVC_insert+0xb6>
    5714:	fd 01       	movw	r30, r26
    5716:	35 83       	std	Z+5, r19	; 0x05
    5718:	24 83       	std	Z+4, r18	; 0x04
    571a:	00 97       	sbiw	r24, 0x00	; 0
    571c:	b9 f3       	breq	.-18     	; 0x570c <TMRSRVC_insert+0x8e>
    571e:	0f 5f       	subi	r16, 0xFF	; 255
    5720:	1f 4f       	sbci	r17, 0xFF	; 255
    5722:	76 01       	movw	r14, r12
    5724:	6c 01       	movw	r12, r24
    5726:	80 91 c8 07 	lds	r24, 0x07C8
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	08 17       	cp	r16, r24
    572e:	19 07       	cpc	r17, r25
    5730:	18 f2       	brcs	.-122    	; 0x56b8 <TMRSRVC_insert+0x3a>
    5732:	ec cf       	rjmp	.-40     	; 0x570c <TMRSRVC_insert+0x8e>
    5734:	80 91 c8 07 	lds	r24, 0x07C8
    5738:	8f 5f       	subi	r24, 0xFF	; 255
    573a:	80 93 c8 07 	sts	0x07C8, r24
    573e:	df 91       	pop	r29
    5740:	cf 91       	pop	r28
    5742:	1f 91       	pop	r17
    5744:	0f 91       	pop	r16
    5746:	ff 90       	pop	r15
    5748:	ef 90       	pop	r14
    574a:	df 90       	pop	r13
    574c:	cf 90       	pop	r12
    574e:	08 95       	ret

00005750 <TMRSRVC_open>:
    5750:	88 e0       	ldi	r24, 0x08	; 8
    5752:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    5756:	88 23       	and	r24, r24
    5758:	b9 f4       	brne	.+46     	; 0x5788 <TMRSRVC_open+0x38>
    575a:	10 92 c8 07 	sts	0x07C8, r1
    575e:	10 92 ca 07 	sts	0x07CA, r1
    5762:	10 92 c9 07 	sts	0x07C9, r1
    5766:	10 92 92 04 	sts	0x0492, r1
    576a:	10 92 93 04 	sts	0x0493, r1
    576e:	80 e1       	ldi	r24, 0x10	; 16
    5770:	62 ec       	ldi	r22, 0xC2	; 194
    5772:	7c e2       	ldi	r23, 0x2C	; 44
    5774:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__ISR_attach>
    5778:	0e 94 c9 2c 	call	0x5992	; 0x5992 <__TMRSRVC_init>
    577c:	0e 94 c7 2b 	call	0x578e	; 0x578e <__TMRSRVC_start>
    5780:	88 e0       	ldi	r24, 0x08	; 8
    5782:	61 e0       	ldi	r22, 0x01	; 1
    5784:	0e 94 74 23 	call	0x46e8	; 0x46e8 <SYS_set_state>
    5788:	88 e0       	ldi	r24, 0x08	; 8
    578a:	91 e0       	ldi	r25, 0x01	; 1
    578c:	08 95       	ret

0000578e <__TMRSRVC_start>:
    578e:	ee e6       	ldi	r30, 0x6E	; 110
    5790:	f0 e0       	ldi	r31, 0x00	; 0
    5792:	80 81       	ld	r24, Z
    5794:	82 60       	ori	r24, 0x02	; 2
    5796:	80 83       	st	Z, r24
    5798:	08 95       	ret

0000579a <TMRSRVC_start>:
    579a:	81 e0       	ldi	r24, 0x01	; 1
    579c:	80 93 93 04 	sts	0x0493, r24
    57a0:	08 95       	ret

000057a2 <I2C_enable>:
    57a2:	80 91 cb 07 	lds	r24, 0x07CB
    57a6:	81 30       	cpi	r24, 0x01	; 1
    57a8:	29 f4       	brne	.+10     	; 0x57b4 <I2C_enable+0x12>
    57aa:	80 91 bc 00 	lds	r24, 0x00BC
    57ae:	84 60       	ori	r24, 0x04	; 4
    57b0:	80 93 bc 00 	sts	0x00BC, r24
    57b4:	08 95       	ret

000057b6 <__I2C_init>:
    57b6:	38 98       	cbi	0x07, 0	; 7
    57b8:	39 98       	cbi	0x07, 1	; 7
    57ba:	08 95       	ret

000057bc <__ISR_attach>:
    57bc:	80 32       	cpi	r24, 0x20	; 32
    57be:	18 f0       	brcs	.+6      	; 0x57c6 <__ISR_attach+0xa>
    57c0:	20 e0       	ldi	r18, 0x00	; 0
    57c2:	30 e0       	ldi	r19, 0x00	; 0
    57c4:	0a c0       	rjmp	.+20     	; 0x57da <__ISR_attach+0x1e>
    57c6:	e8 2f       	mov	r30, r24
    57c8:	f0 e0       	ldi	r31, 0x00	; 0
    57ca:	ee 0f       	add	r30, r30
    57cc:	ff 1f       	adc	r31, r31
    57ce:	ee 5c       	subi	r30, 0xCE	; 206
    57d0:	fb 4f       	sbci	r31, 0xFB	; 251
    57d2:	20 81       	ld	r18, Z
    57d4:	31 81       	ldd	r19, Z+1	; 0x01
    57d6:	71 83       	std	Z+1, r23	; 0x01
    57d8:	60 83       	st	Z, r22
    57da:	c9 01       	movw	r24, r18
    57dc:	08 95       	ret

000057de <__ATMEGA_init>:
    57de:	24 9a       	sbi	0x04, 4	; 4
    57e0:	2c 9a       	sbi	0x05, 4	; 5
    57e2:	08 95       	ret

000057e4 <SPI_default_config>:
    57e4:	83 e5       	ldi	r24, 0x53	; 83
    57e6:	8c bd       	out	0x2c, r24	; 44
    57e8:	81 e0       	ldi	r24, 0x01	; 1
    57ea:	8d bd       	out	0x2d, r24	; 45
    57ec:	8d e0       	ldi	r24, 0x0D	; 13
    57ee:	8a 95       	dec	r24
    57f0:	f1 f7       	brne	.-4      	; 0x57ee <SPI_default_config+0xa>
    57f2:	08 95       	ret

000057f4 <SPI_ATtiny0_config>:
    57f4:	83 e5       	ldi	r24, 0x53	; 83
    57f6:	8c bd       	out	0x2c, r24	; 44
    57f8:	1d bc       	out	0x2d, r1	; 45
    57fa:	84 ef       	ldi	r24, 0xF4	; 244
    57fc:	91 e0       	ldi	r25, 0x01	; 1
    57fe:	01 97       	sbiw	r24, 0x01	; 1
    5800:	f1 f7       	brne	.-4      	; 0x57fe <SPI_ATtiny0_config+0xa>
    5802:	08 95       	ret

00005804 <SPI_PSXC_config>:
    5804:	8f e7       	ldi	r24, 0x7F	; 127
    5806:	8c bd       	out	0x2c, r24	; 44
    5808:	1d bc       	out	0x2d, r1	; 45
    580a:	84 ef       	ldi	r24, 0xF4	; 244
    580c:	91 e0       	ldi	r25, 0x01	; 1
    580e:	01 97       	sbiw	r24, 0x01	; 1
    5810:	f1 f7       	brne	.-4      	; 0x580e <SPI_PSXC_config+0xa>
    5812:	08 95       	ret

00005814 <SPI_LCD_config>:
    5814:	83 e5       	ldi	r24, 0x53	; 83
    5816:	8c bd       	out	0x2c, r24	; 44
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	8d bd       	out	0x2d, r24	; 45
    581c:	8d e0       	ldi	r24, 0x0D	; 13
    581e:	8a 95       	dec	r24
    5820:	f1 f7       	brne	.-4      	; 0x581e <SPI_LCD_config+0xa>
    5822:	08 95       	ret

00005824 <SPI_FLASH_config>:
    5824:	83 e5       	ldi	r24, 0x53	; 83
    5826:	8c bd       	out	0x2c, r24	; 44
    5828:	81 e0       	ldi	r24, 0x01	; 1
    582a:	8d bd       	out	0x2d, r24	; 45
    582c:	84 ef       	ldi	r24, 0xF4	; 244
    582e:	91 e0       	ldi	r25, 0x01	; 1
    5830:	01 97       	sbiw	r24, 0x01	; 1
    5832:	f1 f7       	brne	.-4      	; 0x5830 <SPI_FLASH_config+0xc>
    5834:	08 95       	ret

00005836 <__SPI_init>:
    5836:	25 9a       	sbi	0x04, 5	; 4
    5838:	26 98       	cbi	0x04, 6	; 4
    583a:	27 9a       	sbi	0x04, 7	; 4
    583c:	20 9a       	sbi	0x04, 0	; 4
    583e:	21 9a       	sbi	0x04, 1	; 4
    5840:	22 9a       	sbi	0x04, 2	; 4
    5842:	08 95       	ret

00005844 <SPKR_beep>:
    5844:	9b 01       	movw	r18, r22
    5846:	ac 01       	movw	r20, r24
    5848:	80 91 83 04 	lds	r24, 0x0483
    584c:	88 23       	and	r24, r24
    584e:	81 f0       	breq	.+32     	; 0x5870 <SPKR_beep+0x2c>
    5850:	da 01       	movw	r26, r20
    5852:	c9 01       	movw	r24, r18
    5854:	88 0f       	add	r24, r24
    5856:	99 1f       	adc	r25, r25
    5858:	aa 1f       	adc	r26, r26
    585a:	bb 1f       	adc	r27, r27
    585c:	90 93 8f 04 	sts	0x048F, r25
    5860:	80 93 8e 04 	sts	0x048E, r24
    5864:	21 15       	cp	r18, r1
    5866:	31 05       	cpc	r19, r1
    5868:	41 05       	cpc	r20, r1
    586a:	51 05       	cpc	r21, r1
    586c:	09 f4       	brne	.+2      	; 0x5870 <SPKR_beep+0x2c>
    586e:	5f 98       	cbi	0x0b, 7	; 11
    5870:	08 95       	ret

00005872 <__SPKR_close>:
    5872:	82 30       	cpi	r24, 0x02	; 2
    5874:	29 f4       	brne	.+10     	; 0x5880 <__SPKR_close+0xe>
    5876:	80 91 81 00 	lds	r24, 0x0081
    587a:	8e 7f       	andi	r24, 0xFE	; 254
    587c:	80 93 81 00 	sts	0x0081, r24
    5880:	80 91 82 04 	lds	r24, 0x0482
    5884:	81 30       	cpi	r24, 0x01	; 1
    5886:	31 f4       	brne	.+12     	; 0x5894 <__SPKR_close+0x22>
    5888:	80 91 83 04 	lds	r24, 0x0483
    588c:	81 30       	cpi	r24, 0x01	; 1
    588e:	11 f4       	brne	.+4      	; 0x5894 <__SPKR_close+0x22>
    5890:	00 00       	nop
    5892:	08 95       	ret
    5894:	80 91 82 04 	lds	r24, 0x0482
    5898:	81 30       	cpi	r24, 0x01	; 1
    589a:	21 f0       	breq	.+8      	; 0x58a4 <__SPKR_close+0x32>
    589c:	80 91 83 04 	lds	r24, 0x0483
    58a0:	81 30       	cpi	r24, 0x01	; 1
    58a2:	11 f4       	brne	.+4      	; 0x58a8 <__SPKR_close+0x36>
    58a4:	5f 98       	cbi	0x0b, 7	; 11
    58a6:	57 98       	cbi	0x0a, 7	; 10
    58a8:	08 95       	ret

000058aa <STEPPER_set_decel_step_values>:
    58aa:	ef 92       	push	r14
    58ac:	ff 92       	push	r15
    58ae:	0f 93       	push	r16
    58b0:	1f 93       	push	r17
    58b2:	cf 93       	push	r28
    58b4:	df 93       	push	r29
    58b6:	eb 01       	movw	r28, r22
    58b8:	88 23       	and	r24, r24
    58ba:	21 f0       	breq	.+8      	; 0x58c4 <STEPPER_set_decel_step_values+0x1a>
    58bc:	81 30       	cpi	r24, 0x01	; 1
    58be:	09 f0       	breq	.+2      	; 0x58c2 <STEPPER_set_decel_step_values+0x18>
    58c0:	5a c0       	rjmp	.+180    	; 0x5976 <STEPPER_set_decel_step_values+0xcc>
    58c2:	2d c0       	rjmp	.+90     	; 0x591e <STEPPER_set_decel_step_values+0x74>
    58c4:	9a 01       	movw	r18, r20
    58c6:	40 e0       	ldi	r20, 0x00	; 0
    58c8:	50 e0       	ldi	r21, 0x00	; 0
    58ca:	ca 01       	movw	r24, r20
    58cc:	b9 01       	movw	r22, r18
    58ce:	0e 94 87 37 	call	0x6f0e	; 0x6f0e <__mulsi3>
    58d2:	20 91 62 07 	lds	r18, 0x0762
    58d6:	30 91 63 07 	lds	r19, 0x0763
    58da:	22 0f       	add	r18, r18
    58dc:	33 1f       	adc	r19, r19
    58de:	40 e0       	ldi	r20, 0x00	; 0
    58e0:	50 e0       	ldi	r21, 0x00	; 0
    58e2:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <__udivmodsi4>
    58e6:	79 01       	movw	r14, r18
    58e8:	8a 01       	movw	r16, r20
    58ea:	a8 01       	movw	r20, r16
    58ec:	97 01       	movw	r18, r14
    58ee:	22 0f       	add	r18, r18
    58f0:	33 1f       	adc	r19, r19
    58f2:	44 1f       	adc	r20, r20
    58f4:	55 1f       	adc	r21, r21
    58f6:	ce 01       	movw	r24, r28
    58f8:	a0 e0       	ldi	r26, 0x00	; 0
    58fa:	b0 e0       	ldi	r27, 0x00	; 0
    58fc:	82 17       	cp	r24, r18
    58fe:	93 07       	cpc	r25, r19
    5900:	a4 07       	cpc	r26, r20
    5902:	b5 07       	cpc	r27, r21
    5904:	28 f0       	brcs	.+10     	; 0x5910 <STEPPER_set_decel_step_values+0x66>
    5906:	f0 92 6f 07 	sts	0x076F, r15
    590a:	e0 92 6e 07 	sts	0x076E, r14
    590e:	33 c0       	rjmp	.+102    	; 0x5976 <STEPPER_set_decel_step_values+0xcc>
    5910:	d6 95       	lsr	r29
    5912:	c7 95       	ror	r28
    5914:	d0 93 6f 07 	sts	0x076F, r29
    5918:	c0 93 6e 07 	sts	0x076E, r28
    591c:	2c c0       	rjmp	.+88     	; 0x5976 <STEPPER_set_decel_step_values+0xcc>
    591e:	9a 01       	movw	r18, r20
    5920:	40 e0       	ldi	r20, 0x00	; 0
    5922:	50 e0       	ldi	r21, 0x00	; 0
    5924:	ca 01       	movw	r24, r20
    5926:	b9 01       	movw	r22, r18
    5928:	0e 94 87 37 	call	0x6f0e	; 0x6f0e <__mulsi3>
    592c:	20 91 64 07 	lds	r18, 0x0764
    5930:	30 91 65 07 	lds	r19, 0x0765
    5934:	22 0f       	add	r18, r18
    5936:	33 1f       	adc	r19, r19
    5938:	40 e0       	ldi	r20, 0x00	; 0
    593a:	50 e0       	ldi	r21, 0x00	; 0
    593c:	0e 94 a6 37 	call	0x6f4c	; 0x6f4c <__udivmodsi4>
    5940:	79 01       	movw	r14, r18
    5942:	8a 01       	movw	r16, r20
    5944:	a8 01       	movw	r20, r16
    5946:	97 01       	movw	r18, r14
    5948:	22 0f       	add	r18, r18
    594a:	33 1f       	adc	r19, r19
    594c:	44 1f       	adc	r20, r20
    594e:	55 1f       	adc	r21, r21
    5950:	ce 01       	movw	r24, r28
    5952:	a0 e0       	ldi	r26, 0x00	; 0
    5954:	b0 e0       	ldi	r27, 0x00	; 0
    5956:	82 17       	cp	r24, r18
    5958:	93 07       	cpc	r25, r19
    595a:	a4 07       	cpc	r26, r20
    595c:	b5 07       	cpc	r27, r21
    595e:	28 f0       	brcs	.+10     	; 0x596a <STEPPER_set_decel_step_values+0xc0>
    5960:	f0 92 71 07 	sts	0x0771, r15
    5964:	e0 92 70 07 	sts	0x0770, r14
    5968:	06 c0       	rjmp	.+12     	; 0x5976 <STEPPER_set_decel_step_values+0xcc>
    596a:	d6 95       	lsr	r29
    596c:	c7 95       	ror	r28
    596e:	d0 93 71 07 	sts	0x0771, r29
    5972:	c0 93 70 07 	sts	0x0770, r28
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	1f 91       	pop	r17
    597c:	0f 91       	pop	r16
    597e:	ff 90       	pop	r15
    5980:	ef 90       	pop	r14
    5982:	08 95       	ret

00005984 <__TIMER0_COMPA_vect>:
    5984:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <TMRSRVC_tick>
    5988:	0e 94 12 2d 	call	0x5a24	; 0x5a24 <STEPPER_clk>
    598c:	0e 94 eb 2c 	call	0x59d6	; 0x59d6 <SPKR_beep_clk>
    5990:	08 95       	ret

00005992 <__TMRSRVC_init>:
    5992:	84 b5       	in	r24, 0x24	; 36
    5994:	82 60       	ori	r24, 0x02	; 2
    5996:	84 bd       	out	0x24, r24	; 36
    5998:	85 b5       	in	r24, 0x25	; 37
    599a:	84 60       	ori	r24, 0x04	; 4
    599c:	85 bd       	out	0x25, r24	; 37
    599e:	8e e4       	ldi	r24, 0x4E	; 78
    59a0:	87 bd       	out	0x27, r24	; 39
    59a2:	08 95       	ret

000059a4 <TMRSRVC_tick>:
    59a4:	88 e0       	ldi	r24, 0x08	; 8
    59a6:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    59aa:	88 23       	and	r24, r24
    59ac:	11 f4       	brne	.+4      	; 0x59b2 <TMRSRVC_tick+0xe>
    59ae:	84 e0       	ldi	r24, 0x04	; 4
    59b0:	08 95       	ret
    59b2:	80 91 93 04 	lds	r24, 0x0493
    59b6:	88 23       	and	r24, r24
    59b8:	11 f4       	brne	.+4      	; 0x59be <TMRSRVC_tick+0x1a>
    59ba:	83 e0       	ldi	r24, 0x03	; 3
    59bc:	08 95       	ret
    59be:	80 91 92 04 	lds	r24, 0x0492
    59c2:	88 23       	and	r24, r24
    59c4:	11 f0       	breq	.+4      	; 0x59ca <TMRSRVC_tick+0x26>
    59c6:	82 e0       	ldi	r24, 0x02	; 2
    59c8:	08 95       	ret
    59ca:	0e 94 5f 2f 	call	0x5ebe	; 0x5ebe <TMRSRVC_process>
    59ce:	81 30       	cpi	r24, 0x01	; 1
    59d0:	e1 f3       	breq	.-8      	; 0x59ca <TMRSRVC_tick+0x26>
    59d2:	80 e0       	ldi	r24, 0x00	; 0
    59d4:	08 95       	ret

000059d6 <SPKR_beep_clk>:
    59d6:	80 91 83 04 	lds	r24, 0x0483
    59da:	81 30       	cpi	r24, 0x01	; 1
    59dc:	11 f5       	brne	.+68     	; 0x5a22 <SPKR_beep_clk+0x4c>
    59de:	80 91 8c 04 	lds	r24, 0x048C
    59e2:	90 91 8d 04 	lds	r25, 0x048D
    59e6:	20 91 8e 04 	lds	r18, 0x048E
    59ea:	30 91 8f 04 	lds	r19, 0x048F
    59ee:	28 0f       	add	r18, r24
    59f0:	39 1f       	adc	r19, r25
    59f2:	30 93 8d 04 	sts	0x048D, r19
    59f6:	20 93 8c 04 	sts	0x048C, r18
    59fa:	80 91 8c 04 	lds	r24, 0x048C
    59fe:	90 91 8d 04 	lds	r25, 0x048D
    5a02:	88 5e       	subi	r24, 0xE8	; 232
    5a04:	93 40       	sbci	r25, 0x03	; 3
    5a06:	6c f0       	brlt	.+26     	; 0x5a22 <SPKR_beep_clk+0x4c>
    5a08:	8b b1       	in	r24, 0x0b	; 11
    5a0a:	80 58       	subi	r24, 0x80	; 128
    5a0c:	8b b9       	out	0x0b, r24	; 11
    5a0e:	80 91 8c 04 	lds	r24, 0x048C
    5a12:	90 91 8d 04 	lds	r25, 0x048D
    5a16:	88 5e       	subi	r24, 0xE8	; 232
    5a18:	93 40       	sbci	r25, 0x03	; 3
    5a1a:	90 93 8d 04 	sts	0x048D, r25
    5a1e:	80 93 8c 04 	sts	0x048C, r24
    5a22:	08 95       	ret

00005a24 <STEPPER_clk>:
    5a24:	87 e0       	ldi	r24, 0x07	; 7
    5a26:	0e 94 2c 23 	call	0x4658	; 0x4658 <SYS_get_state>
    5a2a:	81 30       	cpi	r24, 0x01	; 1
    5a2c:	09 f0       	breq	.+2      	; 0x5a30 <STEPPER_clk+0xc>
    5a2e:	aa c0       	rjmp	.+340    	; 0x5b84 <STEPPER_clk+0x160>
    5a30:	80 91 62 07 	lds	r24, 0x0762
    5a34:	90 91 63 07 	lds	r25, 0x0763
    5a38:	89 2b       	or	r24, r25
    5a3a:	09 f1       	breq	.+66     	; 0x5a7e <STEPPER_clk+0x5a>
    5a3c:	80 91 86 07 	lds	r24, 0x0786
    5a40:	90 91 87 07 	lds	r25, 0x0787
    5a44:	20 91 62 07 	lds	r18, 0x0762
    5a48:	30 91 63 07 	lds	r19, 0x0763
    5a4c:	82 0f       	add	r24, r18
    5a4e:	93 1f       	adc	r25, r19
    5a50:	90 93 87 07 	sts	0x0787, r25
    5a54:	80 93 86 07 	sts	0x0786, r24
    5a58:	80 91 86 07 	lds	r24, 0x0786
    5a5c:	90 91 87 07 	lds	r25, 0x0787
    5a60:	88 5e       	subi	r24, 0xE8	; 232
    5a62:	93 40       	sbci	r25, 0x03	; 3
    5a64:	a4 f0       	brlt	.+40     	; 0x5a8e <STEPPER_clk+0x6a>
    5a66:	80 91 86 07 	lds	r24, 0x0786
    5a6a:	90 91 87 07 	lds	r25, 0x0787
    5a6e:	88 5e       	subi	r24, 0xE8	; 232
    5a70:	93 40       	sbci	r25, 0x03	; 3
    5a72:	90 93 87 07 	sts	0x0787, r25
    5a76:	80 93 86 07 	sts	0x0786, r24
    5a7a:	41 e0       	ldi	r20, 0x01	; 1
    5a7c:	09 c0       	rjmp	.+18     	; 0x5a90 <STEPPER_clk+0x6c>
    5a7e:	80 91 5a 07 	lds	r24, 0x075A
    5a82:	90 91 5b 07 	lds	r25, 0x075B
    5a86:	90 93 5f 07 	sts	0x075F, r25
    5a8a:	80 93 5e 07 	sts	0x075E, r24
    5a8e:	40 e0       	ldi	r20, 0x00	; 0
    5a90:	80 91 64 07 	lds	r24, 0x0764
    5a94:	90 91 65 07 	lds	r25, 0x0765
    5a98:	89 2b       	or	r24, r25
    5a9a:	09 f1       	breq	.+66     	; 0x5ade <STEPPER_clk+0xba>
    5a9c:	80 91 88 07 	lds	r24, 0x0788
    5aa0:	90 91 89 07 	lds	r25, 0x0789
    5aa4:	20 91 64 07 	lds	r18, 0x0764
    5aa8:	30 91 65 07 	lds	r19, 0x0765
    5aac:	82 0f       	add	r24, r18
    5aae:	93 1f       	adc	r25, r19
    5ab0:	90 93 89 07 	sts	0x0789, r25
    5ab4:	80 93 88 07 	sts	0x0788, r24
    5ab8:	80 91 88 07 	lds	r24, 0x0788
    5abc:	90 91 89 07 	lds	r25, 0x0789
    5ac0:	88 5e       	subi	r24, 0xE8	; 232
    5ac2:	93 40       	sbci	r25, 0x03	; 3
    5ac4:	a4 f0       	brlt	.+40     	; 0x5aee <STEPPER_clk+0xca>
    5ac6:	80 91 88 07 	lds	r24, 0x0788
    5aca:	90 91 89 07 	lds	r25, 0x0789
    5ace:	88 5e       	subi	r24, 0xE8	; 232
    5ad0:	93 40       	sbci	r25, 0x03	; 3
    5ad2:	90 93 89 07 	sts	0x0789, r25
    5ad6:	80 93 88 07 	sts	0x0788, r24
    5ada:	61 e0       	ldi	r22, 0x01	; 1
    5adc:	09 c0       	rjmp	.+18     	; 0x5af0 <STEPPER_clk+0xcc>
    5ade:	80 91 5c 07 	lds	r24, 0x075C
    5ae2:	90 91 5d 07 	lds	r25, 0x075D
    5ae6:	90 93 61 07 	sts	0x0761, r25
    5aea:	80 93 60 07 	sts	0x0760, r24
    5aee:	60 e0       	ldi	r22, 0x00	; 0
    5af0:	84 2f       	mov	r24, r20
    5af2:	0e 94 c3 2d 	call	0x5b86	; 0x5b86 <STEPPER_process_accel>
    5af6:	80 91 82 07 	lds	r24, 0x0782
    5afa:	90 91 83 07 	lds	r25, 0x0783
    5afe:	20 91 5e 07 	lds	r18, 0x075E
    5b02:	30 91 5f 07 	lds	r19, 0x075F
    5b06:	28 0f       	add	r18, r24
    5b08:	39 1f       	adc	r19, r25
    5b0a:	30 93 83 07 	sts	0x0783, r19
    5b0e:	20 93 82 07 	sts	0x0782, r18
    5b12:	80 91 82 07 	lds	r24, 0x0782
    5b16:	90 91 83 07 	lds	r25, 0x0783
    5b1a:	88 5e       	subi	r24, 0xE8	; 232
    5b1c:	93 40       	sbci	r25, 0x03	; 3
    5b1e:	14 f4       	brge	.+4      	; 0x5b24 <STEPPER_clk+0x100>
    5b20:	40 e0       	ldi	r20, 0x00	; 0
    5b22:	0b c0       	rjmp	.+22     	; 0x5b3a <STEPPER_clk+0x116>
    5b24:	80 91 82 07 	lds	r24, 0x0782
    5b28:	90 91 83 07 	lds	r25, 0x0783
    5b2c:	88 5e       	subi	r24, 0xE8	; 232
    5b2e:	93 40       	sbci	r25, 0x03	; 3
    5b30:	90 93 83 07 	sts	0x0783, r25
    5b34:	80 93 82 07 	sts	0x0782, r24
    5b38:	41 e0       	ldi	r20, 0x01	; 1
    5b3a:	80 91 84 07 	lds	r24, 0x0784
    5b3e:	90 91 85 07 	lds	r25, 0x0785
    5b42:	20 91 60 07 	lds	r18, 0x0760
    5b46:	30 91 61 07 	lds	r19, 0x0761
    5b4a:	28 0f       	add	r18, r24
    5b4c:	39 1f       	adc	r19, r25
    5b4e:	30 93 85 07 	sts	0x0785, r19
    5b52:	20 93 84 07 	sts	0x0784, r18
    5b56:	80 91 84 07 	lds	r24, 0x0784
    5b5a:	90 91 85 07 	lds	r25, 0x0785
    5b5e:	88 5e       	subi	r24, 0xE8	; 232
    5b60:	93 40       	sbci	r25, 0x03	; 3
    5b62:	14 f4       	brge	.+4      	; 0x5b68 <STEPPER_clk+0x144>
    5b64:	60 e0       	ldi	r22, 0x00	; 0
    5b66:	0b c0       	rjmp	.+22     	; 0x5b7e <STEPPER_clk+0x15a>
    5b68:	80 91 84 07 	lds	r24, 0x0784
    5b6c:	90 91 85 07 	lds	r25, 0x0785
    5b70:	88 5e       	subi	r24, 0xE8	; 232
    5b72:	93 40       	sbci	r25, 0x03	; 3
    5b74:	90 93 85 07 	sts	0x0785, r25
    5b78:	80 93 84 07 	sts	0x0784, r24
    5b7c:	61 e0       	ldi	r22, 0x01	; 1
    5b7e:	84 2f       	mov	r24, r20
    5b80:	0e 94 08 2e 	call	0x5c10	; 0x5c10 <STEPPER_process_run_mode>
    5b84:	08 95       	ret

00005b86 <STEPPER_process_accel>:
    5b86:	88 23       	and	r24, r24
    5b88:	f1 f0       	breq	.+60     	; 0x5bc6 <STEPPER_process_accel+0x40>
    5b8a:	20 91 5a 07 	lds	r18, 0x075A
    5b8e:	30 91 5b 07 	lds	r19, 0x075B
    5b92:	80 91 5e 07 	lds	r24, 0x075E
    5b96:	90 91 5f 07 	lds	r25, 0x075F
    5b9a:	28 1b       	sub	r18, r24
    5b9c:	39 0b       	sbc	r19, r25
    5b9e:	12 16       	cp	r1, r18
    5ba0:	13 06       	cpc	r1, r19
    5ba2:	34 f4       	brge	.+12     	; 0x5bb0 <STEPPER_process_accel+0x2a>
    5ba4:	80 91 5e 07 	lds	r24, 0x075E
    5ba8:	90 91 5f 07 	lds	r25, 0x075F
    5bac:	01 96       	adiw	r24, 0x01	; 1
    5bae:	07 c0       	rjmp	.+14     	; 0x5bbe <STEPPER_process_accel+0x38>
    5bb0:	23 2b       	or	r18, r19
    5bb2:	49 f0       	breq	.+18     	; 0x5bc6 <STEPPER_process_accel+0x40>
    5bb4:	80 91 5e 07 	lds	r24, 0x075E
    5bb8:	90 91 5f 07 	lds	r25, 0x075F
    5bbc:	01 97       	sbiw	r24, 0x01	; 1
    5bbe:	90 93 5f 07 	sts	0x075F, r25
    5bc2:	80 93 5e 07 	sts	0x075E, r24
    5bc6:	66 23       	and	r22, r22
    5bc8:	11 f1       	breq	.+68     	; 0x5c0e <STEPPER_process_accel+0x88>
    5bca:	20 91 5c 07 	lds	r18, 0x075C
    5bce:	30 91 5d 07 	lds	r19, 0x075D
    5bd2:	80 91 60 07 	lds	r24, 0x0760
    5bd6:	90 91 61 07 	lds	r25, 0x0761
    5bda:	28 1b       	sub	r18, r24
    5bdc:	39 0b       	sbc	r19, r25
    5bde:	12 16       	cp	r1, r18
    5be0:	13 06       	cpc	r1, r19
    5be2:	54 f4       	brge	.+20     	; 0x5bf8 <STEPPER_process_accel+0x72>
    5be4:	80 91 60 07 	lds	r24, 0x0760
    5be8:	90 91 61 07 	lds	r25, 0x0761
    5bec:	01 96       	adiw	r24, 0x01	; 1
    5bee:	90 93 61 07 	sts	0x0761, r25
    5bf2:	80 93 60 07 	sts	0x0760, r24
    5bf6:	08 95       	ret
    5bf8:	23 2b       	or	r18, r19
    5bfa:	49 f0       	breq	.+18     	; 0x5c0e <STEPPER_process_accel+0x88>
    5bfc:	80 91 60 07 	lds	r24, 0x0760
    5c00:	90 91 61 07 	lds	r25, 0x0761
    5c04:	01 97       	sbiw	r24, 0x01	; 1
    5c06:	90 93 61 07 	sts	0x0761, r25
    5c0a:	80 93 60 07 	sts	0x0760, r24
    5c0e:	08 95       	ret

00005c10 <STEPPER_process_run_mode>:
    5c10:	0f 93       	push	r16
    5c12:	1f 93       	push	r17
    5c14:	18 2f       	mov	r17, r24
    5c16:	06 2f       	mov	r16, r22
    5c18:	80 91 8e 07 	lds	r24, 0x078E
    5c1c:	88 23       	and	r24, r24
    5c1e:	09 f0       	breq	.+2      	; 0x5c22 <STEPPER_process_run_mode+0x12>
    5c20:	e7 c0       	rjmp	.+462    	; 0x5df0 <STEPPER_process_run_mode+0x1e0>
    5c22:	80 91 76 07 	lds	r24, 0x0776
    5c26:	88 23       	and	r24, r24
    5c28:	09 f0       	breq	.+2      	; 0x5c2c <STEPPER_process_run_mode+0x1c>
    5c2a:	5a c0       	rjmp	.+180    	; 0x5ce0 <STEPPER_process_run_mode+0xd0>
    5c2c:	80 91 5e 07 	lds	r24, 0x075E
    5c30:	90 91 5f 07 	lds	r25, 0x075F
    5c34:	89 2b       	or	r24, r25
    5c36:	e9 f4       	brne	.+58     	; 0x5c72 <STEPPER_process_run_mode+0x62>
    5c38:	80 91 94 04 	lds	r24, 0x0494
    5c3c:	83 7e       	andi	r24, 0xE3	; 227
    5c3e:	80 93 94 04 	sts	0x0494, r24
    5c42:	10 92 7f 07 	sts	0x077F, r1
    5c46:	80 91 8a 07 	lds	r24, 0x078A
    5c4a:	88 23       	and	r24, r24
    5c4c:	09 f4       	brne	.+2      	; 0x5c50 <STEPPER_process_run_mode+0x40>
    5c4e:	5d c0       	rjmp	.+186    	; 0x5d0a <STEPPER_process_run_mode+0xfa>
    5c50:	60 91 78 07 	lds	r22, 0x0778
    5c54:	80 e0       	ldi	r24, 0x00	; 0
    5c56:	0e 94 b9 22 	call	0x4572	; 0x4572 <STEPPER_stop>
    5c5a:	e0 91 8c 07 	lds	r30, 0x078C
    5c5e:	f0 91 8d 07 	lds	r31, 0x078D
    5c62:	30 97       	sbiw	r30, 0x00	; 0
    5c64:	09 f4       	brne	.+2      	; 0x5c68 <STEPPER_process_run_mode+0x58>
    5c66:	51 c0       	rjmp	.+162    	; 0x5d0a <STEPPER_process_run_mode+0xfa>
    5c68:	81 e0       	ldi	r24, 0x01	; 1
    5c6a:	80 83       	st	Z, r24
    5c6c:	10 92 8a 07 	sts	0x078A, r1
    5c70:	4c c0       	rjmp	.+152    	; 0x5d0a <STEPPER_process_run_mode+0xfa>
    5c72:	80 91 58 07 	lds	r24, 0x0758
    5c76:	81 30       	cpi	r24, 0x01	; 1
    5c78:	41 f4       	brne	.+16     	; 0x5c8a <STEPPER_process_run_mode+0x7a>
    5c7a:	80 91 6a 07 	lds	r24, 0x076A
    5c7e:	90 91 6b 07 	lds	r25, 0x076B
    5c82:	01 97       	sbiw	r24, 0x01	; 1
    5c84:	11 f4       	brne	.+4      	; 0x5c8a <STEPPER_process_run_mode+0x7a>
    5c86:	11 e0       	ldi	r17, 0x01	; 1
    5c88:	02 c0       	rjmp	.+4      	; 0x5c8e <STEPPER_process_run_mode+0x7e>
    5c8a:	11 23       	and	r17, r17
    5c8c:	f1 f1       	breq	.+124    	; 0x5d0a <STEPPER_process_run_mode+0xfa>
    5c8e:	e0 91 7d 07 	lds	r30, 0x077D
    5c92:	f0 e0       	ldi	r31, 0x00	; 0
    5c94:	e8 55       	subi	r30, 0x58	; 88
    5c96:	fc 4f       	sbci	r31, 0xFC	; 252
    5c98:	90 91 94 04 	lds	r25, 0x0494
    5c9c:	93 7e       	andi	r25, 0xE3	; 227
    5c9e:	80 81       	ld	r24, Z
    5ca0:	89 2b       	or	r24, r25
    5ca2:	80 93 94 04 	sts	0x0494, r24
    5ca6:	80 91 7b 07 	lds	r24, 0x077B
    5caa:	88 23       	and	r24, r24
    5cac:	21 f4       	brne	.+8      	; 0x5cb6 <STEPPER_process_run_mode+0xa6>
    5cae:	80 91 7d 07 	lds	r24, 0x077D
    5cb2:	8f 5f       	subi	r24, 0xFF	; 255
    5cb4:	03 c0       	rjmp	.+6      	; 0x5cbc <STEPPER_process_run_mode+0xac>
    5cb6:	80 91 7d 07 	lds	r24, 0x077D
    5cba:	81 50       	subi	r24, 0x01	; 1
    5cbc:	80 93 7d 07 	sts	0x077D, r24
    5cc0:	80 91 7d 07 	lds	r24, 0x077D
    5cc4:	83 70       	andi	r24, 0x03	; 3
    5cc6:	80 93 7d 07 	sts	0x077D, r24
    5cca:	81 e0       	ldi	r24, 0x01	; 1
    5ccc:	80 93 7f 07 	sts	0x077F, r24
    5cd0:	80 91 58 07 	lds	r24, 0x0758
    5cd4:	81 30       	cpi	r24, 0x01	; 1
    5cd6:	c9 f4       	brne	.+50     	; 0x5d0a <STEPPER_process_run_mode+0xfa>
    5cd8:	80 e0       	ldi	r24, 0x00	; 0
    5cda:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <STEPPER_process_step_mode>
    5cde:	15 c0       	rjmp	.+42     	; 0x5d0a <STEPPER_process_run_mode+0xfa>
    5ce0:	90 91 94 04 	lds	r25, 0x0494
    5ce4:	93 7e       	andi	r25, 0xE3	; 227
    5ce6:	90 93 94 04 	sts	0x0494, r25
    5cea:	e0 91 7d 07 	lds	r30, 0x077D
    5cee:	f0 e0       	ldi	r31, 0x00	; 0
    5cf0:	e8 55       	subi	r30, 0x58	; 88
    5cf2:	fc 4f       	sbci	r31, 0xFC	; 252
    5cf4:	80 81       	ld	r24, Z
    5cf6:	89 2b       	or	r24, r25
    5cf8:	80 93 94 04 	sts	0x0494, r24
    5cfc:	82 e0       	ldi	r24, 0x02	; 2
    5cfe:	80 93 7f 07 	sts	0x077F, r24
    5d02:	10 92 5f 07 	sts	0x075F, r1
    5d06:	10 92 5e 07 	sts	0x075E, r1
    5d0a:	80 91 77 07 	lds	r24, 0x0777
    5d0e:	88 23       	and	r24, r24
    5d10:	09 f0       	breq	.+2      	; 0x5d14 <STEPPER_process_run_mode+0x104>
    5d12:	59 c0       	rjmp	.+178    	; 0x5dc6 <STEPPER_process_run_mode+0x1b6>
    5d14:	80 91 60 07 	lds	r24, 0x0760
    5d18:	90 91 61 07 	lds	r25, 0x0761
    5d1c:	89 2b       	or	r24, r25
    5d1e:	e9 f4       	brne	.+58     	; 0x5d5a <STEPPER_process_run_mode+0x14a>
    5d20:	80 91 94 04 	lds	r24, 0x0494
    5d24:	8f 71       	andi	r24, 0x1F	; 31
    5d26:	80 93 94 04 	sts	0x0494, r24
    5d2a:	10 92 80 07 	sts	0x0780, r1
    5d2e:	80 91 8b 07 	lds	r24, 0x078B
    5d32:	88 23       	and	r24, r24
    5d34:	09 f4       	brne	.+2      	; 0x5d38 <STEPPER_process_run_mode+0x128>
    5d36:	5c c0       	rjmp	.+184    	; 0x5df0 <STEPPER_process_run_mode+0x1e0>
    5d38:	60 91 79 07 	lds	r22, 0x0779
    5d3c:	81 e0       	ldi	r24, 0x01	; 1
    5d3e:	0e 94 b9 22 	call	0x4572	; 0x4572 <STEPPER_stop>
    5d42:	e0 91 8c 07 	lds	r30, 0x078C
    5d46:	f0 91 8d 07 	lds	r31, 0x078D
    5d4a:	30 97       	sbiw	r30, 0x00	; 0
    5d4c:	09 f4       	brne	.+2      	; 0x5d50 <STEPPER_process_run_mode+0x140>
    5d4e:	50 c0       	rjmp	.+160    	; 0x5df0 <STEPPER_process_run_mode+0x1e0>
    5d50:	81 e0       	ldi	r24, 0x01	; 1
    5d52:	81 83       	std	Z+1, r24	; 0x01
    5d54:	10 92 8b 07 	sts	0x078B, r1
    5d58:	4b c0       	rjmp	.+150    	; 0x5df0 <STEPPER_process_run_mode+0x1e0>
    5d5a:	80 91 59 07 	lds	r24, 0x0759
    5d5e:	81 30       	cpi	r24, 0x01	; 1
    5d60:	41 f4       	brne	.+16     	; 0x5d72 <STEPPER_process_run_mode+0x162>
    5d62:	80 91 6c 07 	lds	r24, 0x076C
    5d66:	90 91 6d 07 	lds	r25, 0x076D
    5d6a:	01 97       	sbiw	r24, 0x01	; 1
    5d6c:	11 f4       	brne	.+4      	; 0x5d72 <STEPPER_process_run_mode+0x162>
    5d6e:	01 e0       	ldi	r16, 0x01	; 1
    5d70:	02 c0       	rjmp	.+4      	; 0x5d76 <STEPPER_process_run_mode+0x166>
    5d72:	00 23       	and	r16, r16
    5d74:	e9 f1       	breq	.+122    	; 0x5df0 <STEPPER_process_run_mode+0x1e0>
    5d76:	e0 91 7e 07 	lds	r30, 0x077E
    5d7a:	f0 e0       	ldi	r31, 0x00	; 0
    5d7c:	e4 55       	subi	r30, 0x54	; 84
    5d7e:	fc 4f       	sbci	r31, 0xFC	; 252
    5d80:	90 91 94 04 	lds	r25, 0x0494
    5d84:	9f 71       	andi	r25, 0x1F	; 31
    5d86:	80 81       	ld	r24, Z
    5d88:	89 2b       	or	r24, r25
    5d8a:	80 93 94 04 	sts	0x0494, r24
    5d8e:	80 91 7c 07 	lds	r24, 0x077C
    5d92:	88 23       	and	r24, r24
    5d94:	21 f4       	brne	.+8      	; 0x5d9e <STEPPER_process_run_mode+0x18e>
    5d96:	80 91 7e 07 	lds	r24, 0x077E
    5d9a:	8f 5f       	subi	r24, 0xFF	; 255
    5d9c:	03 c0       	rjmp	.+6      	; 0x5da4 <STEPPER_process_run_mode+0x194>
    5d9e:	80 91 7e 07 	lds	r24, 0x077E
    5da2:	81 50       	subi	r24, 0x01	; 1
    5da4:	80 93 7e 07 	sts	0x077E, r24
    5da8:	80 91 7e 07 	lds	r24, 0x077E
    5dac:	83 70       	andi	r24, 0x03	; 3
    5dae:	80 93 7e 07 	sts	0x077E, r24
    5db2:	81 e0       	ldi	r24, 0x01	; 1
    5db4:	80 93 80 07 	sts	0x0780, r24
    5db8:	80 91 59 07 	lds	r24, 0x0759
    5dbc:	81 30       	cpi	r24, 0x01	; 1
    5dbe:	c1 f4       	brne	.+48     	; 0x5df0 <STEPPER_process_run_mode+0x1e0>
    5dc0:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <STEPPER_process_step_mode>
    5dc4:	15 c0       	rjmp	.+42     	; 0x5df0 <STEPPER_process_run_mode+0x1e0>
    5dc6:	90 91 94 04 	lds	r25, 0x0494
    5dca:	9f 71       	andi	r25, 0x1F	; 31
    5dcc:	90 93 94 04 	sts	0x0494, r25
    5dd0:	e0 91 7e 07 	lds	r30, 0x077E
    5dd4:	f0 e0       	ldi	r31, 0x00	; 0
    5dd6:	e4 55       	subi	r30, 0x54	; 84
    5dd8:	fc 4f       	sbci	r31, 0xFC	; 252
    5dda:	80 81       	ld	r24, Z
    5ddc:	89 2b       	or	r24, r25
    5dde:	80 93 94 04 	sts	0x0494, r24
    5de2:	82 e0       	ldi	r24, 0x02	; 2
    5de4:	80 93 80 07 	sts	0x0780, r24
    5de8:	10 92 61 07 	sts	0x0761, r1
    5dec:	10 92 60 07 	sts	0x0760, r1
    5df0:	80 91 81 07 	lds	r24, 0x0781
    5df4:	88 23       	and	r24, r24
    5df6:	31 f4       	brne	.+12     	; 0x5e04 <STEPPER_process_run_mode+0x1f4>
    5df8:	84 e9       	ldi	r24, 0x94	; 148
    5dfa:	94 e0       	ldi	r25, 0x04	; 4
    5dfc:	61 2f       	mov	r22, r17
    5dfe:	40 2f       	mov	r20, r16
    5e00:	0e 94 cd 2f 	call	0x5f9a	; 0x5f9a <STEPPER_process_pwm>
    5e04:	88 b1       	in	r24, 0x08	; 8
    5e06:	83 70       	andi	r24, 0x03	; 3
    5e08:	90 91 94 04 	lds	r25, 0x0494
    5e0c:	89 2b       	or	r24, r25
    5e0e:	88 b9       	out	0x08, r24	; 8
    5e10:	1f 91       	pop	r17
    5e12:	0f 91       	pop	r16
    5e14:	08 95       	ret

00005e16 <STEPPER_process_step_mode>:
    5e16:	88 23       	and	r24, r24
    5e18:	21 f0       	breq	.+8      	; 0x5e22 <STEPPER_process_step_mode+0xc>
    5e1a:	81 30       	cpi	r24, 0x01	; 1
    5e1c:	09 f0       	breq	.+2      	; 0x5e20 <STEPPER_process_step_mode+0xa>
    5e1e:	4e c0       	rjmp	.+156    	; 0x5ebc <STEPPER_process_step_mode+0xa6>
    5e20:	27 c0       	rjmp	.+78     	; 0x5e70 <STEPPER_process_step_mode+0x5a>
    5e22:	80 91 6a 07 	lds	r24, 0x076A
    5e26:	90 91 6b 07 	lds	r25, 0x076B
    5e2a:	89 2b       	or	r24, r25
    5e2c:	49 f0       	breq	.+18     	; 0x5e40 <STEPPER_process_step_mode+0x2a>
    5e2e:	80 91 6a 07 	lds	r24, 0x076A
    5e32:	90 91 6b 07 	lds	r25, 0x076B
    5e36:	01 97       	sbiw	r24, 0x01	; 1
    5e38:	90 93 6b 07 	sts	0x076B, r25
    5e3c:	80 93 6a 07 	sts	0x076A, r24
    5e40:	80 91 8a 07 	lds	r24, 0x078A
    5e44:	88 23       	and	r24, r24
    5e46:	d1 f5       	brne	.+116    	; 0x5ebc <STEPPER_process_step_mode+0xa6>
    5e48:	20 91 6a 07 	lds	r18, 0x076A
    5e4c:	30 91 6b 07 	lds	r19, 0x076B
    5e50:	80 91 6e 07 	lds	r24, 0x076E
    5e54:	90 91 6f 07 	lds	r25, 0x076F
    5e58:	28 17       	cp	r18, r24
    5e5a:	39 07       	cpc	r19, r25
    5e5c:	79 f5       	brne	.+94     	; 0x5ebc <STEPPER_process_step_mode+0xa6>
    5e5e:	80 e0       	ldi	r24, 0x00	; 0
    5e60:	60 e0       	ldi	r22, 0x00	; 0
    5e62:	70 e0       	ldi	r23, 0x00	; 0
    5e64:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <STEPPER_set_speed>
    5e68:	81 e0       	ldi	r24, 0x01	; 1
    5e6a:	80 93 8a 07 	sts	0x078A, r24
    5e6e:	08 95       	ret
    5e70:	80 91 6c 07 	lds	r24, 0x076C
    5e74:	90 91 6d 07 	lds	r25, 0x076D
    5e78:	89 2b       	or	r24, r25
    5e7a:	49 f0       	breq	.+18     	; 0x5e8e <STEPPER_process_step_mode+0x78>
    5e7c:	80 91 6c 07 	lds	r24, 0x076C
    5e80:	90 91 6d 07 	lds	r25, 0x076D
    5e84:	01 97       	sbiw	r24, 0x01	; 1
    5e86:	90 93 6d 07 	sts	0x076D, r25
    5e8a:	80 93 6c 07 	sts	0x076C, r24
    5e8e:	80 91 8b 07 	lds	r24, 0x078B
    5e92:	88 23       	and	r24, r24
    5e94:	99 f4       	brne	.+38     	; 0x5ebc <STEPPER_process_step_mode+0xa6>
    5e96:	20 91 6c 07 	lds	r18, 0x076C
    5e9a:	30 91 6d 07 	lds	r19, 0x076D
    5e9e:	80 91 70 07 	lds	r24, 0x0770
    5ea2:	90 91 71 07 	lds	r25, 0x0771
    5ea6:	28 17       	cp	r18, r24
    5ea8:	39 07       	cpc	r19, r25
    5eaa:	41 f4       	brne	.+16     	; 0x5ebc <STEPPER_process_step_mode+0xa6>
    5eac:	81 e0       	ldi	r24, 0x01	; 1
    5eae:	60 e0       	ldi	r22, 0x00	; 0
    5eb0:	70 e0       	ldi	r23, 0x00	; 0
    5eb2:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <STEPPER_set_speed>
    5eb6:	81 e0       	ldi	r24, 0x01	; 1
    5eb8:	80 93 8b 07 	sts	0x078B, r24
    5ebc:	08 95       	ret

00005ebe <TMRSRVC_process>:
    5ebe:	ff 92       	push	r15
    5ec0:	0f 93       	push	r16
    5ec2:	1f 93       	push	r17
    5ec4:	cf 93       	push	r28
    5ec6:	df 93       	push	r29
    5ec8:	80 91 c8 07 	lds	r24, 0x07C8
    5ecc:	88 23       	and	r24, r24
    5ece:	09 f4       	brne	.+2      	; 0x5ed2 <TMRSRVC_process+0x14>
    5ed0:	59 c0       	rjmp	.+178    	; 0x5f84 <TMRSRVC_process+0xc6>
    5ed2:	00 91 c9 07 	lds	r16, 0x07C9
    5ed6:	10 91 ca 07 	lds	r17, 0x07CA
    5eda:	f8 01       	movw	r30, r16
    5edc:	c0 81       	ld	r28, Z
    5ede:	d1 81       	ldd	r29, Z+1	; 0x01
    5ee0:	8c 81       	ldd	r24, Y+4	; 0x04
    5ee2:	9d 81       	ldd	r25, Y+5	; 0x05
    5ee4:	01 97       	sbiw	r24, 0x01	; 1
    5ee6:	9d 83       	std	Y+5, r25	; 0x05
    5ee8:	8c 83       	std	Y+4, r24	; 0x04
    5eea:	18 16       	cp	r1, r24
    5eec:	19 06       	cpc	r1, r25
    5eee:	0c f4       	brge	.+2      	; 0x5ef2 <TMRSRVC_process+0x34>
    5ef0:	49 c0       	rjmp	.+146    	; 0x5f84 <TMRSRVC_process+0xc6>
    5ef2:	89 81       	ldd	r24, Y+1	; 0x01
    5ef4:	80 ff       	sbrs	r24, 0
    5ef6:	05 c0       	rjmp	.+10     	; 0x5f02 <TMRSRVC_process+0x44>
    5ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    5efa:	88 23       	and	r24, r24
    5efc:	11 f4       	brne	.+4      	; 0x5f02 <TMRSRVC_process+0x44>
    5efe:	81 e0       	ldi	r24, 0x01	; 1
    5f00:	8e 83       	std	Y+6, r24	; 0x06
    5f02:	89 81       	ldd	r24, Y+1	; 0x01
    5f04:	81 ff       	sbrs	r24, 1
    5f06:	03 c0       	rjmp	.+6      	; 0x5f0e <TMRSRVC_process+0x50>
    5f08:	ef 81       	ldd	r30, Y+7	; 0x07
    5f0a:	f8 85       	ldd	r31, Y+8	; 0x08
    5f0c:	09 95       	icall
    5f0e:	80 91 c8 07 	lds	r24, 0x07C8
    5f12:	82 30       	cpi	r24, 0x02	; 2
    5f14:	a8 f0       	brcs	.+42     	; 0x5f40 <TMRSRVC_process+0x82>
    5f16:	f8 01       	movw	r30, r16
    5f18:	82 81       	ldd	r24, Z+2	; 0x02
    5f1a:	93 81       	ldd	r25, Z+3	; 0x03
    5f1c:	90 93 ca 07 	sts	0x07CA, r25
    5f20:	80 93 c9 07 	sts	0x07C9, r24
    5f24:	13 82       	std	Z+3, r1	; 0x03
    5f26:	12 82       	std	Z+2, r1	; 0x02
    5f28:	e0 91 00 00 	lds	r30, 0x0000
    5f2c:	f0 91 01 00 	lds	r31, 0x0001
    5f30:	84 81       	ldd	r24, Z+4	; 0x04
    5f32:	95 81       	ldd	r25, Z+5	; 0x05
    5f34:	18 16       	cp	r1, r24
    5f36:	19 06       	cpc	r1, r25
    5f38:	3c f0       	brlt	.+14     	; 0x5f48 <TMRSRVC_process+0x8a>
    5f3a:	ff 24       	eor	r15, r15
    5f3c:	f3 94       	inc	r15
    5f3e:	05 c0       	rjmp	.+10     	; 0x5f4a <TMRSRVC_process+0x8c>
    5f40:	10 92 ca 07 	sts	0x07CA, r1
    5f44:	10 92 c9 07 	sts	0x07C9, r1
    5f48:	ff 24       	eor	r15, r15
    5f4a:	80 91 c8 07 	lds	r24, 0x07C8
    5f4e:	81 50       	subi	r24, 0x01	; 1
    5f50:	80 93 c8 07 	sts	0x07C8, r24
    5f54:	80 91 c8 07 	lds	r24, 0x07C8
    5f58:	88 23       	and	r24, r24
    5f5a:	11 f4       	brne	.+4      	; 0x5f60 <TMRSRVC_process+0xa2>
    5f5c:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <TMRSRVC_stop>
    5f60:	89 81       	ldd	r24, Y+1	; 0x01
    5f62:	82 ff       	sbrs	r24, 2
    5f64:	08 c0       	rjmp	.+16     	; 0x5f76 <TMRSRVC_process+0xb8>
    5f66:	8a 81       	ldd	r24, Y+2	; 0x02
    5f68:	9b 81       	ldd	r25, Y+3	; 0x03
    5f6a:	9d 83       	std	Y+5, r25	; 0x05
    5f6c:	8c 83       	std	Y+4, r24	; 0x04
    5f6e:	c8 01       	movw	r24, r16
    5f70:	0e 94 3f 2b 	call	0x567e	; 0x567e <TMRSRVC_insert>
    5f74:	08 c0       	rjmp	.+16     	; 0x5f86 <TMRSRVC_process+0xc8>
    5f76:	c8 01       	movw	r24, r16
    5f78:	0e 94 ac 38 	call	0x7158	; 0x7158 <free>
    5f7c:	89 81       	ldd	r24, Y+1	; 0x01
    5f7e:	8f 7e       	andi	r24, 0xEF	; 239
    5f80:	89 83       	std	Y+1, r24	; 0x01
    5f82:	01 c0       	rjmp	.+2      	; 0x5f86 <TMRSRVC_process+0xc8>
    5f84:	ff 24       	eor	r15, r15
    5f86:	8f 2d       	mov	r24, r15
    5f88:	df 91       	pop	r29
    5f8a:	cf 91       	pop	r28
    5f8c:	1f 91       	pop	r17
    5f8e:	0f 91       	pop	r16
    5f90:	ff 90       	pop	r15
    5f92:	08 95       	ret

00005f94 <TMRSRVC_stop>:
    5f94:	10 92 93 04 	sts	0x0493, r1
    5f98:	08 95       	ret

00005f9a <STEPPER_process_pwm>:
    5f9a:	fc 01       	movw	r30, r24
    5f9c:	80 91 7f 07 	lds	r24, 0x077F
    5fa0:	82 30       	cpi	r24, 0x02	; 2
    5fa2:	69 f4       	brne	.+26     	; 0x5fbe <STEPPER_process_pwm+0x24>
    5fa4:	80 91 98 04 	lds	r24, 0x0498
    5fa8:	91 e0       	ldi	r25, 0x01	; 1
    5faa:	89 27       	eor	r24, r25
    5fac:	80 93 98 04 	sts	0x0498, r24
    5fb0:	88 23       	and	r24, r24
    5fb2:	09 f0       	breq	.+2      	; 0x5fb6 <STEPPER_process_pwm+0x1c>
    5fb4:	3e c0       	rjmp	.+124    	; 0x6032 <STEPPER_process_pwm+0x98>
    5fb6:	80 81       	ld	r24, Z
    5fb8:	83 7e       	andi	r24, 0xE3	; 227
    5fba:	80 83       	st	Z, r24
    5fbc:	3a c0       	rjmp	.+116    	; 0x6032 <STEPPER_process_pwm+0x98>
    5fbe:	80 91 5e 07 	lds	r24, 0x075E
    5fc2:	90 91 5f 07 	lds	r25, 0x075F
    5fc6:	c3 97       	sbiw	r24, 0x33	; 51
    5fc8:	a4 f5       	brge	.+104    	; 0x6032 <STEPPER_process_pwm+0x98>
    5fca:	66 23       	and	r22, r22
    5fcc:	d1 f0       	breq	.+52     	; 0x6002 <STEPPER_process_pwm+0x68>
    5fce:	20 91 5e 07 	lds	r18, 0x075E
    5fd2:	30 91 5f 07 	lds	r19, 0x075F
    5fd6:	80 e6       	ldi	r24, 0x60	; 96
    5fd8:	90 e0       	ldi	r25, 0x00	; 0
    5fda:	bc 01       	movw	r22, r24
    5fdc:	26 9f       	mul	r18, r22
    5fde:	c0 01       	movw	r24, r0
    5fe0:	27 9f       	mul	r18, r23
    5fe2:	90 0d       	add	r25, r0
    5fe4:	36 9f       	mul	r19, r22
    5fe6:	90 0d       	add	r25, r0
    5fe8:	11 24       	eor	r1, r1
    5fea:	88 0f       	add	r24, r24
    5fec:	89 2f       	mov	r24, r25
    5fee:	88 1f       	adc	r24, r24
    5ff0:	99 0b       	sbc	r25, r25
    5ff2:	90 93 73 07 	sts	0x0773, r25
    5ff6:	80 93 72 07 	sts	0x0772, r24
    5ffa:	81 e0       	ldi	r24, 0x01	; 1
    5ffc:	80 93 96 04 	sts	0x0496, r24
    6000:	18 c0       	rjmp	.+48     	; 0x6032 <STEPPER_process_pwm+0x98>
    6002:	80 91 96 04 	lds	r24, 0x0496
    6006:	88 23       	and	r24, r24
    6008:	a1 f0       	breq	.+40     	; 0x6032 <STEPPER_process_pwm+0x98>
    600a:	80 91 72 07 	lds	r24, 0x0772
    600e:	90 91 73 07 	lds	r25, 0x0773
    6012:	01 97       	sbiw	r24, 0x01	; 1
    6014:	90 93 73 07 	sts	0x0773, r25
    6018:	80 93 72 07 	sts	0x0772, r24
    601c:	80 91 72 07 	lds	r24, 0x0772
    6020:	90 91 73 07 	lds	r25, 0x0773
    6024:	89 2b       	or	r24, r25
    6026:	29 f4       	brne	.+10     	; 0x6032 <STEPPER_process_pwm+0x98>
    6028:	80 81       	ld	r24, Z
    602a:	83 7e       	andi	r24, 0xE3	; 227
    602c:	80 83       	st	Z, r24
    602e:	10 92 96 04 	sts	0x0496, r1
    6032:	80 91 80 07 	lds	r24, 0x0780
    6036:	82 30       	cpi	r24, 0x02	; 2
    6038:	69 f4       	brne	.+26     	; 0x6054 <STEPPER_process_pwm+0xba>
    603a:	80 91 97 04 	lds	r24, 0x0497
    603e:	91 e0       	ldi	r25, 0x01	; 1
    6040:	89 27       	eor	r24, r25
    6042:	80 93 97 04 	sts	0x0497, r24
    6046:	88 23       	and	r24, r24
    6048:	09 f0       	breq	.+2      	; 0x604c <STEPPER_process_pwm+0xb2>
    604a:	3e c0       	rjmp	.+124    	; 0x60c8 <STEPPER_process_pwm+0x12e>
    604c:	80 81       	ld	r24, Z
    604e:	8f 71       	andi	r24, 0x1F	; 31
    6050:	80 83       	st	Z, r24
    6052:	08 95       	ret
    6054:	80 91 60 07 	lds	r24, 0x0760
    6058:	90 91 61 07 	lds	r25, 0x0761
    605c:	c3 97       	sbiw	r24, 0x33	; 51
    605e:	a4 f5       	brge	.+104    	; 0x60c8 <STEPPER_process_pwm+0x12e>
    6060:	44 23       	and	r20, r20
    6062:	d1 f0       	breq	.+52     	; 0x6098 <STEPPER_process_pwm+0xfe>
    6064:	20 91 60 07 	lds	r18, 0x0760
    6068:	30 91 61 07 	lds	r19, 0x0761
    606c:	80 e6       	ldi	r24, 0x60	; 96
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	ac 01       	movw	r20, r24
    6072:	24 9f       	mul	r18, r20
    6074:	c0 01       	movw	r24, r0
    6076:	25 9f       	mul	r18, r21
    6078:	90 0d       	add	r25, r0
    607a:	34 9f       	mul	r19, r20
    607c:	90 0d       	add	r25, r0
    607e:	11 24       	eor	r1, r1
    6080:	88 0f       	add	r24, r24
    6082:	89 2f       	mov	r24, r25
    6084:	88 1f       	adc	r24, r24
    6086:	99 0b       	sbc	r25, r25
    6088:	90 93 75 07 	sts	0x0775, r25
    608c:	80 93 74 07 	sts	0x0774, r24
    6090:	81 e0       	ldi	r24, 0x01	; 1
    6092:	80 93 95 04 	sts	0x0495, r24
    6096:	08 95       	ret
    6098:	80 91 95 04 	lds	r24, 0x0495
    609c:	88 23       	and	r24, r24
    609e:	a1 f0       	breq	.+40     	; 0x60c8 <STEPPER_process_pwm+0x12e>
    60a0:	80 91 74 07 	lds	r24, 0x0774
    60a4:	90 91 75 07 	lds	r25, 0x0775
    60a8:	01 97       	sbiw	r24, 0x01	; 1
    60aa:	90 93 75 07 	sts	0x0775, r25
    60ae:	80 93 74 07 	sts	0x0774, r24
    60b2:	80 91 74 07 	lds	r24, 0x0774
    60b6:	90 91 75 07 	lds	r25, 0x0775
    60ba:	89 2b       	or	r24, r25
    60bc:	29 f4       	brne	.+10     	; 0x60c8 <STEPPER_process_pwm+0x12e>
    60be:	80 81       	ld	r24, Z
    60c0:	8f 71       	andi	r24, 0x1F	; 31
    60c2:	80 83       	st	Z, r24
    60c4:	10 92 95 04 	sts	0x0495, r1
    60c8:	08 95       	ret

000060ca <__subsf3>:
    60ca:	50 58       	subi	r21, 0x80	; 128

000060cc <__addsf3>:
    60cc:	bb 27       	eor	r27, r27
    60ce:	aa 27       	eor	r26, r26
    60d0:	0e d0       	rcall	.+28     	; 0x60ee <__addsf3x>
    60d2:	75 c1       	rjmp	.+746    	; 0x63be <__fp_round>
    60d4:	66 d1       	rcall	.+716    	; 0x63a2 <__fp_pscA>
    60d6:	30 f0       	brcs	.+12     	; 0x60e4 <__addsf3+0x18>
    60d8:	6b d1       	rcall	.+726    	; 0x63b0 <__fp_pscB>
    60da:	20 f0       	brcs	.+8      	; 0x60e4 <__addsf3+0x18>
    60dc:	31 f4       	brne	.+12     	; 0x60ea <__addsf3+0x1e>
    60de:	9f 3f       	cpi	r25, 0xFF	; 255
    60e0:	11 f4       	brne	.+4      	; 0x60e6 <__addsf3+0x1a>
    60e2:	1e f4       	brtc	.+6      	; 0x60ea <__addsf3+0x1e>
    60e4:	5b c1       	rjmp	.+694    	; 0x639c <__fp_nan>
    60e6:	0e f4       	brtc	.+2      	; 0x60ea <__addsf3+0x1e>
    60e8:	e0 95       	com	r30
    60ea:	e7 fb       	bst	r30, 7
    60ec:	51 c1       	rjmp	.+674    	; 0x6390 <__fp_inf>

000060ee <__addsf3x>:
    60ee:	e9 2f       	mov	r30, r25
    60f0:	77 d1       	rcall	.+750    	; 0x63e0 <__fp_split3>
    60f2:	80 f3       	brcs	.-32     	; 0x60d4 <__addsf3+0x8>
    60f4:	ba 17       	cp	r27, r26
    60f6:	62 07       	cpc	r22, r18
    60f8:	73 07       	cpc	r23, r19
    60fa:	84 07       	cpc	r24, r20
    60fc:	95 07       	cpc	r25, r21
    60fe:	18 f0       	brcs	.+6      	; 0x6106 <__addsf3x+0x18>
    6100:	71 f4       	brne	.+28     	; 0x611e <__addsf3x+0x30>
    6102:	9e f5       	brtc	.+102    	; 0x616a <__addsf3x+0x7c>
    6104:	8f c1       	rjmp	.+798    	; 0x6424 <__fp_zero>
    6106:	0e f4       	brtc	.+2      	; 0x610a <__addsf3x+0x1c>
    6108:	e0 95       	com	r30
    610a:	0b 2e       	mov	r0, r27
    610c:	ba 2f       	mov	r27, r26
    610e:	a0 2d       	mov	r26, r0
    6110:	0b 01       	movw	r0, r22
    6112:	b9 01       	movw	r22, r18
    6114:	90 01       	movw	r18, r0
    6116:	0c 01       	movw	r0, r24
    6118:	ca 01       	movw	r24, r20
    611a:	a0 01       	movw	r20, r0
    611c:	11 24       	eor	r1, r1
    611e:	ff 27       	eor	r31, r31
    6120:	59 1b       	sub	r21, r25
    6122:	99 f0       	breq	.+38     	; 0x614a <__addsf3x+0x5c>
    6124:	59 3f       	cpi	r21, 0xF9	; 249
    6126:	50 f4       	brcc	.+20     	; 0x613c <__addsf3x+0x4e>
    6128:	50 3e       	cpi	r21, 0xE0	; 224
    612a:	68 f1       	brcs	.+90     	; 0x6186 <__addsf3x+0x98>
    612c:	1a 16       	cp	r1, r26
    612e:	f0 40       	sbci	r31, 0x00	; 0
    6130:	a2 2f       	mov	r26, r18
    6132:	23 2f       	mov	r18, r19
    6134:	34 2f       	mov	r19, r20
    6136:	44 27       	eor	r20, r20
    6138:	58 5f       	subi	r21, 0xF8	; 248
    613a:	f3 cf       	rjmp	.-26     	; 0x6122 <__addsf3x+0x34>
    613c:	46 95       	lsr	r20
    613e:	37 95       	ror	r19
    6140:	27 95       	ror	r18
    6142:	a7 95       	ror	r26
    6144:	f0 40       	sbci	r31, 0x00	; 0
    6146:	53 95       	inc	r21
    6148:	c9 f7       	brne	.-14     	; 0x613c <__addsf3x+0x4e>
    614a:	7e f4       	brtc	.+30     	; 0x616a <__addsf3x+0x7c>
    614c:	1f 16       	cp	r1, r31
    614e:	ba 0b       	sbc	r27, r26
    6150:	62 0b       	sbc	r22, r18
    6152:	73 0b       	sbc	r23, r19
    6154:	84 0b       	sbc	r24, r20
    6156:	ba f0       	brmi	.+46     	; 0x6186 <__addsf3x+0x98>
    6158:	91 50       	subi	r25, 0x01	; 1
    615a:	a1 f0       	breq	.+40     	; 0x6184 <__addsf3x+0x96>
    615c:	ff 0f       	add	r31, r31
    615e:	bb 1f       	adc	r27, r27
    6160:	66 1f       	adc	r22, r22
    6162:	77 1f       	adc	r23, r23
    6164:	88 1f       	adc	r24, r24
    6166:	c2 f7       	brpl	.-16     	; 0x6158 <__addsf3x+0x6a>
    6168:	0e c0       	rjmp	.+28     	; 0x6186 <__addsf3x+0x98>
    616a:	ba 0f       	add	r27, r26
    616c:	62 1f       	adc	r22, r18
    616e:	73 1f       	adc	r23, r19
    6170:	84 1f       	adc	r24, r20
    6172:	48 f4       	brcc	.+18     	; 0x6186 <__addsf3x+0x98>
    6174:	87 95       	ror	r24
    6176:	77 95       	ror	r23
    6178:	67 95       	ror	r22
    617a:	b7 95       	ror	r27
    617c:	f7 95       	ror	r31
    617e:	9e 3f       	cpi	r25, 0xFE	; 254
    6180:	08 f0       	brcs	.+2      	; 0x6184 <__addsf3x+0x96>
    6182:	b3 cf       	rjmp	.-154    	; 0x60ea <__addsf3+0x1e>
    6184:	93 95       	inc	r25
    6186:	88 0f       	add	r24, r24
    6188:	08 f0       	brcs	.+2      	; 0x618c <__addsf3x+0x9e>
    618a:	99 27       	eor	r25, r25
    618c:	ee 0f       	add	r30, r30
    618e:	97 95       	ror	r25
    6190:	87 95       	ror	r24
    6192:	08 95       	ret

00006194 <__cmpsf2>:
    6194:	d9 d0       	rcall	.+434    	; 0x6348 <__fp_cmp>
    6196:	08 f4       	brcc	.+2      	; 0x619a <__cmpsf2+0x6>
    6198:	81 e0       	ldi	r24, 0x01	; 1
    619a:	08 95       	ret

0000619c <__divsf3>:
    619c:	0c d0       	rcall	.+24     	; 0x61b6 <__divsf3x>
    619e:	0f c1       	rjmp	.+542    	; 0x63be <__fp_round>
    61a0:	07 d1       	rcall	.+526    	; 0x63b0 <__fp_pscB>
    61a2:	40 f0       	brcs	.+16     	; 0x61b4 <__divsf3+0x18>
    61a4:	fe d0       	rcall	.+508    	; 0x63a2 <__fp_pscA>
    61a6:	30 f0       	brcs	.+12     	; 0x61b4 <__divsf3+0x18>
    61a8:	21 f4       	brne	.+8      	; 0x61b2 <__divsf3+0x16>
    61aa:	5f 3f       	cpi	r21, 0xFF	; 255
    61ac:	19 f0       	breq	.+6      	; 0x61b4 <__divsf3+0x18>
    61ae:	f0 c0       	rjmp	.+480    	; 0x6390 <__fp_inf>
    61b0:	51 11       	cpse	r21, r1
    61b2:	39 c1       	rjmp	.+626    	; 0x6426 <__fp_szero>
    61b4:	f3 c0       	rjmp	.+486    	; 0x639c <__fp_nan>

000061b6 <__divsf3x>:
    61b6:	14 d1       	rcall	.+552    	; 0x63e0 <__fp_split3>
    61b8:	98 f3       	brcs	.-26     	; 0x61a0 <__divsf3+0x4>

000061ba <__divsf3_pse>:
    61ba:	99 23       	and	r25, r25
    61bc:	c9 f3       	breq	.-14     	; 0x61b0 <__divsf3+0x14>
    61be:	55 23       	and	r21, r21
    61c0:	b1 f3       	breq	.-20     	; 0x61ae <__divsf3+0x12>
    61c2:	95 1b       	sub	r25, r21
    61c4:	55 0b       	sbc	r21, r21
    61c6:	bb 27       	eor	r27, r27
    61c8:	aa 27       	eor	r26, r26
    61ca:	62 17       	cp	r22, r18
    61cc:	73 07       	cpc	r23, r19
    61ce:	84 07       	cpc	r24, r20
    61d0:	38 f0       	brcs	.+14     	; 0x61e0 <__divsf3_pse+0x26>
    61d2:	9f 5f       	subi	r25, 0xFF	; 255
    61d4:	5f 4f       	sbci	r21, 0xFF	; 255
    61d6:	22 0f       	add	r18, r18
    61d8:	33 1f       	adc	r19, r19
    61da:	44 1f       	adc	r20, r20
    61dc:	aa 1f       	adc	r26, r26
    61de:	a9 f3       	breq	.-22     	; 0x61ca <__divsf3_pse+0x10>
    61e0:	33 d0       	rcall	.+102    	; 0x6248 <__divsf3_pse+0x8e>
    61e2:	0e 2e       	mov	r0, r30
    61e4:	3a f0       	brmi	.+14     	; 0x61f4 <__divsf3_pse+0x3a>
    61e6:	e0 e8       	ldi	r30, 0x80	; 128
    61e8:	30 d0       	rcall	.+96     	; 0x624a <__divsf3_pse+0x90>
    61ea:	91 50       	subi	r25, 0x01	; 1
    61ec:	50 40       	sbci	r21, 0x00	; 0
    61ee:	e6 95       	lsr	r30
    61f0:	00 1c       	adc	r0, r0
    61f2:	ca f7       	brpl	.-14     	; 0x61e6 <__divsf3_pse+0x2c>
    61f4:	29 d0       	rcall	.+82     	; 0x6248 <__divsf3_pse+0x8e>
    61f6:	fe 2f       	mov	r31, r30
    61f8:	27 d0       	rcall	.+78     	; 0x6248 <__divsf3_pse+0x8e>
    61fa:	66 0f       	add	r22, r22
    61fc:	77 1f       	adc	r23, r23
    61fe:	88 1f       	adc	r24, r24
    6200:	bb 1f       	adc	r27, r27
    6202:	26 17       	cp	r18, r22
    6204:	37 07       	cpc	r19, r23
    6206:	48 07       	cpc	r20, r24
    6208:	ab 07       	cpc	r26, r27
    620a:	b0 e8       	ldi	r27, 0x80	; 128
    620c:	09 f0       	breq	.+2      	; 0x6210 <__divsf3_pse+0x56>
    620e:	bb 0b       	sbc	r27, r27
    6210:	80 2d       	mov	r24, r0
    6212:	bf 01       	movw	r22, r30
    6214:	ff 27       	eor	r31, r31
    6216:	93 58       	subi	r25, 0x83	; 131
    6218:	5f 4f       	sbci	r21, 0xFF	; 255
    621a:	2a f0       	brmi	.+10     	; 0x6226 <__divsf3_pse+0x6c>
    621c:	9e 3f       	cpi	r25, 0xFE	; 254
    621e:	51 05       	cpc	r21, r1
    6220:	68 f0       	brcs	.+26     	; 0x623c <__divsf3_pse+0x82>
    6222:	b6 c0       	rjmp	.+364    	; 0x6390 <__fp_inf>
    6224:	00 c1       	rjmp	.+512    	; 0x6426 <__fp_szero>
    6226:	5f 3f       	cpi	r21, 0xFF	; 255
    6228:	ec f3       	brlt	.-6      	; 0x6224 <__divsf3_pse+0x6a>
    622a:	98 3e       	cpi	r25, 0xE8	; 232
    622c:	dc f3       	brlt	.-10     	; 0x6224 <__divsf3_pse+0x6a>
    622e:	86 95       	lsr	r24
    6230:	77 95       	ror	r23
    6232:	67 95       	ror	r22
    6234:	b7 95       	ror	r27
    6236:	f7 95       	ror	r31
    6238:	9f 5f       	subi	r25, 0xFF	; 255
    623a:	c9 f7       	brne	.-14     	; 0x622e <__divsf3_pse+0x74>
    623c:	88 0f       	add	r24, r24
    623e:	91 1d       	adc	r25, r1
    6240:	96 95       	lsr	r25
    6242:	87 95       	ror	r24
    6244:	97 f9       	bld	r25, 7
    6246:	08 95       	ret
    6248:	e1 e0       	ldi	r30, 0x01	; 1
    624a:	66 0f       	add	r22, r22
    624c:	77 1f       	adc	r23, r23
    624e:	88 1f       	adc	r24, r24
    6250:	bb 1f       	adc	r27, r27
    6252:	62 17       	cp	r22, r18
    6254:	73 07       	cpc	r23, r19
    6256:	84 07       	cpc	r24, r20
    6258:	ba 07       	cpc	r27, r26
    625a:	20 f0       	brcs	.+8      	; 0x6264 <__divsf3_pse+0xaa>
    625c:	62 1b       	sub	r22, r18
    625e:	73 0b       	sbc	r23, r19
    6260:	84 0b       	sbc	r24, r20
    6262:	ba 0b       	sbc	r27, r26
    6264:	ee 1f       	adc	r30, r30
    6266:	88 f7       	brcc	.-30     	; 0x624a <__divsf3_pse+0x90>
    6268:	e0 95       	com	r30
    626a:	08 95       	ret

0000626c <__fixsfsi>:
    626c:	04 d0       	rcall	.+8      	; 0x6276 <__fixunssfsi>
    626e:	68 94       	set
    6270:	b1 11       	cpse	r27, r1
    6272:	d9 c0       	rjmp	.+434    	; 0x6426 <__fp_szero>
    6274:	08 95       	ret

00006276 <__fixunssfsi>:
    6276:	bc d0       	rcall	.+376    	; 0x63f0 <__fp_splitA>
    6278:	88 f0       	brcs	.+34     	; 0x629c <__fixunssfsi+0x26>
    627a:	9f 57       	subi	r25, 0x7F	; 127
    627c:	90 f0       	brcs	.+36     	; 0x62a2 <__fixunssfsi+0x2c>
    627e:	b9 2f       	mov	r27, r25
    6280:	99 27       	eor	r25, r25
    6282:	b7 51       	subi	r27, 0x17	; 23
    6284:	a0 f0       	brcs	.+40     	; 0x62ae <__fixunssfsi+0x38>
    6286:	d1 f0       	breq	.+52     	; 0x62bc <__fixunssfsi+0x46>
    6288:	66 0f       	add	r22, r22
    628a:	77 1f       	adc	r23, r23
    628c:	88 1f       	adc	r24, r24
    628e:	99 1f       	adc	r25, r25
    6290:	1a f0       	brmi	.+6      	; 0x6298 <__fixunssfsi+0x22>
    6292:	ba 95       	dec	r27
    6294:	c9 f7       	brne	.-14     	; 0x6288 <__fixunssfsi+0x12>
    6296:	12 c0       	rjmp	.+36     	; 0x62bc <__fixunssfsi+0x46>
    6298:	b1 30       	cpi	r27, 0x01	; 1
    629a:	81 f0       	breq	.+32     	; 0x62bc <__fixunssfsi+0x46>
    629c:	c3 d0       	rcall	.+390    	; 0x6424 <__fp_zero>
    629e:	b1 e0       	ldi	r27, 0x01	; 1
    62a0:	08 95       	ret
    62a2:	c0 c0       	rjmp	.+384    	; 0x6424 <__fp_zero>
    62a4:	67 2f       	mov	r22, r23
    62a6:	78 2f       	mov	r23, r24
    62a8:	88 27       	eor	r24, r24
    62aa:	b8 5f       	subi	r27, 0xF8	; 248
    62ac:	39 f0       	breq	.+14     	; 0x62bc <__fixunssfsi+0x46>
    62ae:	b9 3f       	cpi	r27, 0xF9	; 249
    62b0:	cc f3       	brlt	.-14     	; 0x62a4 <__fixunssfsi+0x2e>
    62b2:	86 95       	lsr	r24
    62b4:	77 95       	ror	r23
    62b6:	67 95       	ror	r22
    62b8:	b3 95       	inc	r27
    62ba:	d9 f7       	brne	.-10     	; 0x62b2 <__fixunssfsi+0x3c>
    62bc:	3e f4       	brtc	.+14     	; 0x62cc <__fixunssfsi+0x56>
    62be:	90 95       	com	r25
    62c0:	80 95       	com	r24
    62c2:	70 95       	com	r23
    62c4:	61 95       	neg	r22
    62c6:	7f 4f       	sbci	r23, 0xFF	; 255
    62c8:	8f 4f       	sbci	r24, 0xFF	; 255
    62ca:	9f 4f       	sbci	r25, 0xFF	; 255
    62cc:	08 95       	ret

000062ce <__floatunsisf>:
    62ce:	e8 94       	clt
    62d0:	09 c0       	rjmp	.+18     	; 0x62e4 <__floatsisf+0x12>

000062d2 <__floatsisf>:
    62d2:	97 fb       	bst	r25, 7
    62d4:	3e f4       	brtc	.+14     	; 0x62e4 <__floatsisf+0x12>
    62d6:	90 95       	com	r25
    62d8:	80 95       	com	r24
    62da:	70 95       	com	r23
    62dc:	61 95       	neg	r22
    62de:	7f 4f       	sbci	r23, 0xFF	; 255
    62e0:	8f 4f       	sbci	r24, 0xFF	; 255
    62e2:	9f 4f       	sbci	r25, 0xFF	; 255
    62e4:	99 23       	and	r25, r25
    62e6:	a9 f0       	breq	.+42     	; 0x6312 <__floatsisf+0x40>
    62e8:	f9 2f       	mov	r31, r25
    62ea:	96 e9       	ldi	r25, 0x96	; 150
    62ec:	bb 27       	eor	r27, r27
    62ee:	93 95       	inc	r25
    62f0:	f6 95       	lsr	r31
    62f2:	87 95       	ror	r24
    62f4:	77 95       	ror	r23
    62f6:	67 95       	ror	r22
    62f8:	b7 95       	ror	r27
    62fa:	f1 11       	cpse	r31, r1
    62fc:	f8 cf       	rjmp	.-16     	; 0x62ee <__floatsisf+0x1c>
    62fe:	fa f4       	brpl	.+62     	; 0x633e <__floatsisf+0x6c>
    6300:	bb 0f       	add	r27, r27
    6302:	11 f4       	brne	.+4      	; 0x6308 <__floatsisf+0x36>
    6304:	60 ff       	sbrs	r22, 0
    6306:	1b c0       	rjmp	.+54     	; 0x633e <__floatsisf+0x6c>
    6308:	6f 5f       	subi	r22, 0xFF	; 255
    630a:	7f 4f       	sbci	r23, 0xFF	; 255
    630c:	8f 4f       	sbci	r24, 0xFF	; 255
    630e:	9f 4f       	sbci	r25, 0xFF	; 255
    6310:	16 c0       	rjmp	.+44     	; 0x633e <__floatsisf+0x6c>
    6312:	88 23       	and	r24, r24
    6314:	11 f0       	breq	.+4      	; 0x631a <__floatsisf+0x48>
    6316:	96 e9       	ldi	r25, 0x96	; 150
    6318:	11 c0       	rjmp	.+34     	; 0x633c <__floatsisf+0x6a>
    631a:	77 23       	and	r23, r23
    631c:	21 f0       	breq	.+8      	; 0x6326 <__floatsisf+0x54>
    631e:	9e e8       	ldi	r25, 0x8E	; 142
    6320:	87 2f       	mov	r24, r23
    6322:	76 2f       	mov	r23, r22
    6324:	05 c0       	rjmp	.+10     	; 0x6330 <__floatsisf+0x5e>
    6326:	66 23       	and	r22, r22
    6328:	71 f0       	breq	.+28     	; 0x6346 <__floatsisf+0x74>
    632a:	96 e8       	ldi	r25, 0x86	; 134
    632c:	86 2f       	mov	r24, r22
    632e:	70 e0       	ldi	r23, 0x00	; 0
    6330:	60 e0       	ldi	r22, 0x00	; 0
    6332:	2a f0       	brmi	.+10     	; 0x633e <__floatsisf+0x6c>
    6334:	9a 95       	dec	r25
    6336:	66 0f       	add	r22, r22
    6338:	77 1f       	adc	r23, r23
    633a:	88 1f       	adc	r24, r24
    633c:	da f7       	brpl	.-10     	; 0x6334 <__floatsisf+0x62>
    633e:	88 0f       	add	r24, r24
    6340:	96 95       	lsr	r25
    6342:	87 95       	ror	r24
    6344:	97 f9       	bld	r25, 7
    6346:	08 95       	ret

00006348 <__fp_cmp>:
    6348:	99 0f       	add	r25, r25
    634a:	00 08       	sbc	r0, r0
    634c:	55 0f       	add	r21, r21
    634e:	aa 0b       	sbc	r26, r26
    6350:	e0 e8       	ldi	r30, 0x80	; 128
    6352:	fe ef       	ldi	r31, 0xFE	; 254
    6354:	16 16       	cp	r1, r22
    6356:	17 06       	cpc	r1, r23
    6358:	e8 07       	cpc	r30, r24
    635a:	f9 07       	cpc	r31, r25
    635c:	c0 f0       	brcs	.+48     	; 0x638e <__fp_cmp+0x46>
    635e:	12 16       	cp	r1, r18
    6360:	13 06       	cpc	r1, r19
    6362:	e4 07       	cpc	r30, r20
    6364:	f5 07       	cpc	r31, r21
    6366:	98 f0       	brcs	.+38     	; 0x638e <__fp_cmp+0x46>
    6368:	62 1b       	sub	r22, r18
    636a:	73 0b       	sbc	r23, r19
    636c:	84 0b       	sbc	r24, r20
    636e:	95 0b       	sbc	r25, r21
    6370:	39 f4       	brne	.+14     	; 0x6380 <__fp_cmp+0x38>
    6372:	0a 26       	eor	r0, r26
    6374:	61 f0       	breq	.+24     	; 0x638e <__fp_cmp+0x46>
    6376:	23 2b       	or	r18, r19
    6378:	24 2b       	or	r18, r20
    637a:	25 2b       	or	r18, r21
    637c:	21 f4       	brne	.+8      	; 0x6386 <__fp_cmp+0x3e>
    637e:	08 95       	ret
    6380:	0a 26       	eor	r0, r26
    6382:	09 f4       	brne	.+2      	; 0x6386 <__fp_cmp+0x3e>
    6384:	a1 40       	sbci	r26, 0x01	; 1
    6386:	a6 95       	lsr	r26
    6388:	8f ef       	ldi	r24, 0xFF	; 255
    638a:	81 1d       	adc	r24, r1
    638c:	81 1d       	adc	r24, r1
    638e:	08 95       	ret

00006390 <__fp_inf>:
    6390:	97 f9       	bld	r25, 7
    6392:	9f 67       	ori	r25, 0x7F	; 127
    6394:	80 e8       	ldi	r24, 0x80	; 128
    6396:	70 e0       	ldi	r23, 0x00	; 0
    6398:	60 e0       	ldi	r22, 0x00	; 0
    639a:	08 95       	ret

0000639c <__fp_nan>:
    639c:	9f ef       	ldi	r25, 0xFF	; 255
    639e:	80 ec       	ldi	r24, 0xC0	; 192
    63a0:	08 95       	ret

000063a2 <__fp_pscA>:
    63a2:	00 24       	eor	r0, r0
    63a4:	0a 94       	dec	r0
    63a6:	16 16       	cp	r1, r22
    63a8:	17 06       	cpc	r1, r23
    63aa:	18 06       	cpc	r1, r24
    63ac:	09 06       	cpc	r0, r25
    63ae:	08 95       	ret

000063b0 <__fp_pscB>:
    63b0:	00 24       	eor	r0, r0
    63b2:	0a 94       	dec	r0
    63b4:	12 16       	cp	r1, r18
    63b6:	13 06       	cpc	r1, r19
    63b8:	14 06       	cpc	r1, r20
    63ba:	05 06       	cpc	r0, r21
    63bc:	08 95       	ret

000063be <__fp_round>:
    63be:	09 2e       	mov	r0, r25
    63c0:	03 94       	inc	r0
    63c2:	00 0c       	add	r0, r0
    63c4:	11 f4       	brne	.+4      	; 0x63ca <__fp_round+0xc>
    63c6:	88 23       	and	r24, r24
    63c8:	52 f0       	brmi	.+20     	; 0x63de <__fp_round+0x20>
    63ca:	bb 0f       	add	r27, r27
    63cc:	40 f4       	brcc	.+16     	; 0x63de <__fp_round+0x20>
    63ce:	bf 2b       	or	r27, r31
    63d0:	11 f4       	brne	.+4      	; 0x63d6 <__fp_round+0x18>
    63d2:	60 ff       	sbrs	r22, 0
    63d4:	04 c0       	rjmp	.+8      	; 0x63de <__fp_round+0x20>
    63d6:	6f 5f       	subi	r22, 0xFF	; 255
    63d8:	7f 4f       	sbci	r23, 0xFF	; 255
    63da:	8f 4f       	sbci	r24, 0xFF	; 255
    63dc:	9f 4f       	sbci	r25, 0xFF	; 255
    63de:	08 95       	ret

000063e0 <__fp_split3>:
    63e0:	57 fd       	sbrc	r21, 7
    63e2:	90 58       	subi	r25, 0x80	; 128
    63e4:	44 0f       	add	r20, r20
    63e6:	55 1f       	adc	r21, r21
    63e8:	59 f0       	breq	.+22     	; 0x6400 <__fp_splitA+0x10>
    63ea:	5f 3f       	cpi	r21, 0xFF	; 255
    63ec:	71 f0       	breq	.+28     	; 0x640a <__fp_splitA+0x1a>
    63ee:	47 95       	ror	r20

000063f0 <__fp_splitA>:
    63f0:	88 0f       	add	r24, r24
    63f2:	97 fb       	bst	r25, 7
    63f4:	99 1f       	adc	r25, r25
    63f6:	61 f0       	breq	.+24     	; 0x6410 <__fp_splitA+0x20>
    63f8:	9f 3f       	cpi	r25, 0xFF	; 255
    63fa:	79 f0       	breq	.+30     	; 0x641a <__fp_splitA+0x2a>
    63fc:	87 95       	ror	r24
    63fe:	08 95       	ret
    6400:	12 16       	cp	r1, r18
    6402:	13 06       	cpc	r1, r19
    6404:	14 06       	cpc	r1, r20
    6406:	55 1f       	adc	r21, r21
    6408:	f2 cf       	rjmp	.-28     	; 0x63ee <__fp_split3+0xe>
    640a:	46 95       	lsr	r20
    640c:	f1 df       	rcall	.-30     	; 0x63f0 <__fp_splitA>
    640e:	08 c0       	rjmp	.+16     	; 0x6420 <__fp_splitA+0x30>
    6410:	16 16       	cp	r1, r22
    6412:	17 06       	cpc	r1, r23
    6414:	18 06       	cpc	r1, r24
    6416:	99 1f       	adc	r25, r25
    6418:	f1 cf       	rjmp	.-30     	; 0x63fc <__fp_splitA+0xc>
    641a:	86 95       	lsr	r24
    641c:	71 05       	cpc	r23, r1
    641e:	61 05       	cpc	r22, r1
    6420:	08 94       	sec
    6422:	08 95       	ret

00006424 <__fp_zero>:
    6424:	e8 94       	clt

00006426 <__fp_szero>:
    6426:	bb 27       	eor	r27, r27
    6428:	66 27       	eor	r22, r22
    642a:	77 27       	eor	r23, r23
    642c:	cb 01       	movw	r24, r22
    642e:	97 f9       	bld	r25, 7
    6430:	08 95       	ret

00006432 <__gesf2>:
    6432:	8a df       	rcall	.-236    	; 0x6348 <__fp_cmp>
    6434:	08 f4       	brcc	.+2      	; 0x6438 <__gesf2+0x6>
    6436:	8f ef       	ldi	r24, 0xFF	; 255
    6438:	08 95       	ret

0000643a <lrint>:
    643a:	da df       	rcall	.-76     	; 0x63f0 <__fp_splitA>
    643c:	a8 f1       	brcs	.+106    	; 0x64a8 <lrint+0x6e>
    643e:	9e 57       	subi	r25, 0x7E	; 126
    6440:	a8 f1       	brcs	.+106    	; 0x64ac <lrint+0x72>
    6442:	98 51       	subi	r25, 0x18	; 24
    6444:	60 f0       	brcs	.+24     	; 0x645e <lrint+0x24>
    6446:	39 f1       	breq	.+78     	; 0x6496 <lrint+0x5c>
    6448:	98 30       	cpi	r25, 0x08	; 8
    644a:	70 f5       	brcc	.+92     	; 0x64a8 <lrint+0x6e>
    644c:	09 2e       	mov	r0, r25
    644e:	99 27       	eor	r25, r25
    6450:	66 0f       	add	r22, r22
    6452:	77 1f       	adc	r23, r23
    6454:	88 1f       	adc	r24, r24
    6456:	99 1f       	adc	r25, r25
    6458:	0a 94       	dec	r0
    645a:	d1 f7       	brne	.-12     	; 0x6450 <lrint+0x16>
    645c:	1c c0       	rjmp	.+56     	; 0x6496 <lrint+0x5c>
    645e:	bb 27       	eor	r27, r27
    6460:	99 3f       	cpi	r25, 0xF9	; 249
    6462:	4c f4       	brge	.+18     	; 0x6476 <lrint+0x3c>
    6464:	b1 11       	cpse	r27, r1
    6466:	b1 e0       	ldi	r27, 0x01	; 1
    6468:	b6 2b       	or	r27, r22
    646a:	67 2f       	mov	r22, r23
    646c:	78 2f       	mov	r23, r24
    646e:	88 27       	eor	r24, r24
    6470:	98 5f       	subi	r25, 0xF8	; 248
    6472:	b1 f7       	brne	.-20     	; 0x6460 <lrint+0x26>
    6474:	08 c0       	rjmp	.+16     	; 0x6486 <lrint+0x4c>
    6476:	86 95       	lsr	r24
    6478:	77 95       	ror	r23
    647a:	67 95       	ror	r22
    647c:	b7 95       	ror	r27
    647e:	08 f4       	brcc	.+2      	; 0x6482 <lrint+0x48>
    6480:	b1 60       	ori	r27, 0x01	; 1
    6482:	93 95       	inc	r25
    6484:	c1 f7       	brne	.-16     	; 0x6476 <lrint+0x3c>
    6486:	bb 0f       	add	r27, r27
    6488:	30 f4       	brcc	.+12     	; 0x6496 <lrint+0x5c>
    648a:	11 f4       	brne	.+4      	; 0x6490 <lrint+0x56>
    648c:	60 ff       	sbrs	r22, 0
    648e:	03 c0       	rjmp	.+6      	; 0x6496 <lrint+0x5c>
    6490:	6f 5f       	subi	r22, 0xFF	; 255
    6492:	7f 4f       	sbci	r23, 0xFF	; 255
    6494:	8f 4f       	sbci	r24, 0xFF	; 255
    6496:	3e f4       	brtc	.+14     	; 0x64a6 <lrint+0x6c>
    6498:	90 95       	com	r25
    649a:	80 95       	com	r24
    649c:	70 95       	com	r23
    649e:	61 95       	neg	r22
    64a0:	7f 4f       	sbci	r23, 0xFF	; 255
    64a2:	8f 4f       	sbci	r24, 0xFF	; 255
    64a4:	9f 4f       	sbci	r25, 0xFF	; 255
    64a6:	08 95       	ret
    64a8:	68 94       	set
    64aa:	bd cf       	rjmp	.-134    	; 0x6426 <__fp_szero>
    64ac:	bb cf       	rjmp	.-138    	; 0x6424 <__fp_zero>

000064ae <__mulsf3>:
    64ae:	0b d0       	rcall	.+22     	; 0x64c6 <__mulsf3x>
    64b0:	86 cf       	rjmp	.-244    	; 0x63be <__fp_round>
    64b2:	77 df       	rcall	.-274    	; 0x63a2 <__fp_pscA>
    64b4:	28 f0       	brcs	.+10     	; 0x64c0 <__mulsf3+0x12>
    64b6:	7c df       	rcall	.-264    	; 0x63b0 <__fp_pscB>
    64b8:	18 f0       	brcs	.+6      	; 0x64c0 <__mulsf3+0x12>
    64ba:	95 23       	and	r25, r21
    64bc:	09 f0       	breq	.+2      	; 0x64c0 <__mulsf3+0x12>
    64be:	68 cf       	rjmp	.-304    	; 0x6390 <__fp_inf>
    64c0:	6d cf       	rjmp	.-294    	; 0x639c <__fp_nan>
    64c2:	11 24       	eor	r1, r1
    64c4:	b0 cf       	rjmp	.-160    	; 0x6426 <__fp_szero>

000064c6 <__mulsf3x>:
    64c6:	8c df       	rcall	.-232    	; 0x63e0 <__fp_split3>
    64c8:	a0 f3       	brcs	.-24     	; 0x64b2 <__mulsf3+0x4>

000064ca <__mulsf3_pse>:
    64ca:	95 9f       	mul	r25, r21
    64cc:	d1 f3       	breq	.-12     	; 0x64c2 <__mulsf3+0x14>
    64ce:	95 0f       	add	r25, r21
    64d0:	50 e0       	ldi	r21, 0x00	; 0
    64d2:	55 1f       	adc	r21, r21
    64d4:	62 9f       	mul	r22, r18
    64d6:	f0 01       	movw	r30, r0
    64d8:	72 9f       	mul	r23, r18
    64da:	bb 27       	eor	r27, r27
    64dc:	f0 0d       	add	r31, r0
    64de:	b1 1d       	adc	r27, r1
    64e0:	63 9f       	mul	r22, r19
    64e2:	aa 27       	eor	r26, r26
    64e4:	f0 0d       	add	r31, r0
    64e6:	b1 1d       	adc	r27, r1
    64e8:	aa 1f       	adc	r26, r26
    64ea:	64 9f       	mul	r22, r20
    64ec:	66 27       	eor	r22, r22
    64ee:	b0 0d       	add	r27, r0
    64f0:	a1 1d       	adc	r26, r1
    64f2:	66 1f       	adc	r22, r22
    64f4:	82 9f       	mul	r24, r18
    64f6:	22 27       	eor	r18, r18
    64f8:	b0 0d       	add	r27, r0
    64fa:	a1 1d       	adc	r26, r1
    64fc:	62 1f       	adc	r22, r18
    64fe:	73 9f       	mul	r23, r19
    6500:	b0 0d       	add	r27, r0
    6502:	a1 1d       	adc	r26, r1
    6504:	62 1f       	adc	r22, r18
    6506:	83 9f       	mul	r24, r19
    6508:	a0 0d       	add	r26, r0
    650a:	61 1d       	adc	r22, r1
    650c:	22 1f       	adc	r18, r18
    650e:	74 9f       	mul	r23, r20
    6510:	33 27       	eor	r19, r19
    6512:	a0 0d       	add	r26, r0
    6514:	61 1d       	adc	r22, r1
    6516:	23 1f       	adc	r18, r19
    6518:	84 9f       	mul	r24, r20
    651a:	60 0d       	add	r22, r0
    651c:	21 1d       	adc	r18, r1
    651e:	82 2f       	mov	r24, r18
    6520:	76 2f       	mov	r23, r22
    6522:	6a 2f       	mov	r22, r26
    6524:	11 24       	eor	r1, r1
    6526:	9f 57       	subi	r25, 0x7F	; 127
    6528:	50 40       	sbci	r21, 0x00	; 0
    652a:	8a f0       	brmi	.+34     	; 0x654e <__mulsf3_pse+0x84>
    652c:	e1 f0       	breq	.+56     	; 0x6566 <__mulsf3_pse+0x9c>
    652e:	88 23       	and	r24, r24
    6530:	4a f0       	brmi	.+18     	; 0x6544 <__mulsf3_pse+0x7a>
    6532:	ee 0f       	add	r30, r30
    6534:	ff 1f       	adc	r31, r31
    6536:	bb 1f       	adc	r27, r27
    6538:	66 1f       	adc	r22, r22
    653a:	77 1f       	adc	r23, r23
    653c:	88 1f       	adc	r24, r24
    653e:	91 50       	subi	r25, 0x01	; 1
    6540:	50 40       	sbci	r21, 0x00	; 0
    6542:	a9 f7       	brne	.-22     	; 0x652e <__mulsf3_pse+0x64>
    6544:	9e 3f       	cpi	r25, 0xFE	; 254
    6546:	51 05       	cpc	r21, r1
    6548:	70 f0       	brcs	.+28     	; 0x6566 <__mulsf3_pse+0x9c>
    654a:	22 cf       	rjmp	.-444    	; 0x6390 <__fp_inf>
    654c:	6c cf       	rjmp	.-296    	; 0x6426 <__fp_szero>
    654e:	5f 3f       	cpi	r21, 0xFF	; 255
    6550:	ec f3       	brlt	.-6      	; 0x654c <__mulsf3_pse+0x82>
    6552:	98 3e       	cpi	r25, 0xE8	; 232
    6554:	dc f3       	brlt	.-10     	; 0x654c <__mulsf3_pse+0x82>
    6556:	86 95       	lsr	r24
    6558:	77 95       	ror	r23
    655a:	67 95       	ror	r22
    655c:	b7 95       	ror	r27
    655e:	f7 95       	ror	r31
    6560:	e7 95       	ror	r30
    6562:	9f 5f       	subi	r25, 0xFF	; 255
    6564:	c1 f7       	brne	.-16     	; 0x6556 <__mulsf3_pse+0x8c>
    6566:	fe 2b       	or	r31, r30
    6568:	88 0f       	add	r24, r24
    656a:	91 1d       	adc	r25, r1
    656c:	96 95       	lsr	r25
    656e:	87 95       	ror	r24
    6570:	97 f9       	bld	r25, 7
    6572:	08 95       	ret

00006574 <pow>:
    6574:	fa 01       	movw	r30, r20
    6576:	ee 0f       	add	r30, r30
    6578:	ff 1f       	adc	r31, r31
    657a:	30 96       	adiw	r30, 0x00	; 0
    657c:	21 05       	cpc	r18, r1
    657e:	31 05       	cpc	r19, r1
    6580:	99 f1       	breq	.+102    	; 0x65e8 <pow+0x74>
    6582:	61 15       	cp	r22, r1
    6584:	71 05       	cpc	r23, r1
    6586:	61 f4       	brne	.+24     	; 0x65a0 <pow+0x2c>
    6588:	80 38       	cpi	r24, 0x80	; 128
    658a:	bf e3       	ldi	r27, 0x3F	; 63
    658c:	9b 07       	cpc	r25, r27
    658e:	49 f1       	breq	.+82     	; 0x65e2 <pow+0x6e>
    6590:	68 94       	set
    6592:	90 38       	cpi	r25, 0x80	; 128
    6594:	81 05       	cpc	r24, r1
    6596:	61 f0       	breq	.+24     	; 0x65b0 <pow+0x3c>
    6598:	80 38       	cpi	r24, 0x80	; 128
    659a:	bf ef       	ldi	r27, 0xFF	; 255
    659c:	9b 07       	cpc	r25, r27
    659e:	41 f0       	breq	.+16     	; 0x65b0 <pow+0x3c>
    65a0:	99 23       	and	r25, r25
    65a2:	42 f5       	brpl	.+80     	; 0x65f4 <pow+0x80>
    65a4:	ff 3f       	cpi	r31, 0xFF	; 255
    65a6:	e1 05       	cpc	r30, r1
    65a8:	31 05       	cpc	r19, r1
    65aa:	21 05       	cpc	r18, r1
    65ac:	11 f1       	breq	.+68     	; 0x65f2 <pow+0x7e>
    65ae:	e8 94       	clt
    65b0:	08 94       	sec
    65b2:	e7 95       	ror	r30
    65b4:	d9 01       	movw	r26, r18
    65b6:	aa 23       	and	r26, r26
    65b8:	29 f4       	brne	.+10     	; 0x65c4 <pow+0x50>
    65ba:	ab 2f       	mov	r26, r27
    65bc:	be 2f       	mov	r27, r30
    65be:	f8 5f       	subi	r31, 0xF8	; 248
    65c0:	d0 f3       	brcs	.-12     	; 0x65b6 <pow+0x42>
    65c2:	10 c0       	rjmp	.+32     	; 0x65e4 <pow+0x70>
    65c4:	ff 5f       	subi	r31, 0xFF	; 255
    65c6:	70 f4       	brcc	.+28     	; 0x65e4 <pow+0x70>
    65c8:	a6 95       	lsr	r26
    65ca:	e0 f7       	brcc	.-8      	; 0x65c4 <pow+0x50>
    65cc:	f7 39       	cpi	r31, 0x97	; 151
    65ce:	50 f0       	brcs	.+20     	; 0x65e4 <pow+0x70>
    65d0:	19 f0       	breq	.+6      	; 0x65d8 <pow+0x64>
    65d2:	ff 3a       	cpi	r31, 0xAF	; 175
    65d4:	38 f4       	brcc	.+14     	; 0x65e4 <pow+0x70>
    65d6:	9f 77       	andi	r25, 0x7F	; 127
    65d8:	9f 93       	push	r25
    65da:	0c d0       	rcall	.+24     	; 0x65f4 <pow+0x80>
    65dc:	0f 90       	pop	r0
    65de:	07 fc       	sbrc	r0, 7
    65e0:	90 58       	subi	r25, 0x80	; 128
    65e2:	08 95       	ret
    65e4:	3e f0       	brts	.+14     	; 0x65f4 <pow+0x80>
    65e6:	da ce       	rjmp	.-588    	; 0x639c <__fp_nan>
    65e8:	60 e0       	ldi	r22, 0x00	; 0
    65ea:	70 e0       	ldi	r23, 0x00	; 0
    65ec:	80 e8       	ldi	r24, 0x80	; 128
    65ee:	9f e3       	ldi	r25, 0x3F	; 63
    65f0:	08 95       	ret
    65f2:	4f e7       	ldi	r20, 0x7F	; 127
    65f4:	9f 77       	andi	r25, 0x7F	; 127
    65f6:	5f 93       	push	r21
    65f8:	4f 93       	push	r20
    65fa:	3f 93       	push	r19
    65fc:	2f 93       	push	r18
    65fe:	9e d0       	rcall	.+316    	; 0x673c <log>
    6600:	2f 91       	pop	r18
    6602:	3f 91       	pop	r19
    6604:	4f 91       	pop	r20
    6606:	5f 91       	pop	r21
    6608:	52 df       	rcall	.-348    	; 0x64ae <__mulsf3>
    660a:	05 c0       	rjmp	.+10     	; 0x6616 <exp>
    660c:	19 f4       	brne	.+6      	; 0x6614 <pow+0xa0>
    660e:	0e f0       	brts	.+2      	; 0x6612 <pow+0x9e>
    6610:	bf ce       	rjmp	.-642    	; 0x6390 <__fp_inf>
    6612:	08 cf       	rjmp	.-496    	; 0x6424 <__fp_zero>
    6614:	c3 ce       	rjmp	.-634    	; 0x639c <__fp_nan>

00006616 <exp>:
    6616:	ec de       	rcall	.-552    	; 0x63f0 <__fp_splitA>
    6618:	c8 f3       	brcs	.-14     	; 0x660c <pow+0x98>
    661a:	96 38       	cpi	r25, 0x86	; 134
    661c:	c0 f7       	brcc	.-16     	; 0x660e <pow+0x9a>
    661e:	07 f8       	bld	r0, 7
    6620:	0f 92       	push	r0
    6622:	e8 94       	clt
    6624:	2b e3       	ldi	r18, 0x3B	; 59
    6626:	3a ea       	ldi	r19, 0xAA	; 170
    6628:	48 eb       	ldi	r20, 0xB8	; 184
    662a:	5f e7       	ldi	r21, 0x7F	; 127
    662c:	4e df       	rcall	.-356    	; 0x64ca <__mulsf3_pse>
    662e:	0f 92       	push	r0
    6630:	0f 92       	push	r0
    6632:	0f 92       	push	r0
    6634:	4d b7       	in	r20, 0x3d	; 61
    6636:	5e b7       	in	r21, 0x3e	; 62
    6638:	0f 92       	push	r0
    663a:	c0 d0       	rcall	.+384    	; 0x67bc <modf>
    663c:	e8 ec       	ldi	r30, 0xC8	; 200
    663e:	f0 e0       	ldi	r31, 0x00	; 0
    6640:	16 d0       	rcall	.+44     	; 0x666e <__fp_powser>
    6642:	4f 91       	pop	r20
    6644:	5f 91       	pop	r21
    6646:	ef 91       	pop	r30
    6648:	ff 91       	pop	r31
    664a:	e5 95       	asr	r30
    664c:	ee 1f       	adc	r30, r30
    664e:	ff 1f       	adc	r31, r31
    6650:	49 f0       	breq	.+18     	; 0x6664 <exp+0x4e>
    6652:	fe 57       	subi	r31, 0x7E	; 126
    6654:	e0 68       	ori	r30, 0x80	; 128
    6656:	44 27       	eor	r20, r20
    6658:	ee 0f       	add	r30, r30
    665a:	44 1f       	adc	r20, r20
    665c:	fa 95       	dec	r31
    665e:	e1 f7       	brne	.-8      	; 0x6658 <exp+0x42>
    6660:	41 95       	neg	r20
    6662:	55 0b       	sbc	r21, r21
    6664:	32 d0       	rcall	.+100    	; 0x66ca <ldexp>
    6666:	0f 90       	pop	r0
    6668:	07 fe       	sbrs	r0, 7
    666a:	26 c0       	rjmp	.+76     	; 0x66b8 <inverse>
    666c:	08 95       	ret

0000666e <__fp_powser>:
    666e:	df 93       	push	r29
    6670:	cf 93       	push	r28
    6672:	1f 93       	push	r17
    6674:	0f 93       	push	r16
    6676:	ff 92       	push	r15
    6678:	ef 92       	push	r14
    667a:	df 92       	push	r13
    667c:	7b 01       	movw	r14, r22
    667e:	8c 01       	movw	r16, r24
    6680:	68 94       	set
    6682:	05 c0       	rjmp	.+10     	; 0x668e <__fp_powser+0x20>
    6684:	da 2e       	mov	r13, r26
    6686:	ef 01       	movw	r28, r30
    6688:	1e df       	rcall	.-452    	; 0x64c6 <__mulsf3x>
    668a:	fe 01       	movw	r30, r28
    668c:	e8 94       	clt
    668e:	a5 91       	lpm	r26, Z+
    6690:	25 91       	lpm	r18, Z+
    6692:	35 91       	lpm	r19, Z+
    6694:	45 91       	lpm	r20, Z+
    6696:	55 91       	lpm	r21, Z+
    6698:	ae f3       	brts	.-22     	; 0x6684 <__fp_powser+0x16>
    669a:	ef 01       	movw	r28, r30
    669c:	28 dd       	rcall	.-1456   	; 0x60ee <__addsf3x>
    669e:	fe 01       	movw	r30, r28
    66a0:	97 01       	movw	r18, r14
    66a2:	a8 01       	movw	r20, r16
    66a4:	da 94       	dec	r13
    66a6:	79 f7       	brne	.-34     	; 0x6686 <__fp_powser+0x18>
    66a8:	df 90       	pop	r13
    66aa:	ef 90       	pop	r14
    66ac:	ff 90       	pop	r15
    66ae:	0f 91       	pop	r16
    66b0:	1f 91       	pop	r17
    66b2:	cf 91       	pop	r28
    66b4:	df 91       	pop	r29
    66b6:	08 95       	ret

000066b8 <inverse>:
    66b8:	9b 01       	movw	r18, r22
    66ba:	ac 01       	movw	r20, r24
    66bc:	60 e0       	ldi	r22, 0x00	; 0
    66be:	70 e0       	ldi	r23, 0x00	; 0
    66c0:	80 e8       	ldi	r24, 0x80	; 128
    66c2:	9f e3       	ldi	r25, 0x3F	; 63
    66c4:	6b cd       	rjmp	.-1322   	; 0x619c <__divsf3>
    66c6:	64 ce       	rjmp	.-824    	; 0x6390 <__fp_inf>
    66c8:	ac c0       	rjmp	.+344    	; 0x6822 <__fp_mpack>

000066ca <ldexp>:
    66ca:	92 de       	rcall	.-732    	; 0x63f0 <__fp_splitA>
    66cc:	e8 f3       	brcs	.-6      	; 0x66c8 <inverse+0x10>
    66ce:	99 23       	and	r25, r25
    66d0:	d9 f3       	breq	.-10     	; 0x66c8 <inverse+0x10>
    66d2:	94 0f       	add	r25, r20
    66d4:	51 1d       	adc	r21, r1
    66d6:	bb f3       	brvs	.-18     	; 0x66c6 <inverse+0xe>
    66d8:	91 50       	subi	r25, 0x01	; 1
    66da:	50 40       	sbci	r21, 0x00	; 0
    66dc:	94 f0       	brlt	.+36     	; 0x6702 <ldexp+0x38>
    66de:	59 f0       	breq	.+22     	; 0x66f6 <ldexp+0x2c>
    66e0:	88 23       	and	r24, r24
    66e2:	32 f0       	brmi	.+12     	; 0x66f0 <ldexp+0x26>
    66e4:	66 0f       	add	r22, r22
    66e6:	77 1f       	adc	r23, r23
    66e8:	88 1f       	adc	r24, r24
    66ea:	91 50       	subi	r25, 0x01	; 1
    66ec:	50 40       	sbci	r21, 0x00	; 0
    66ee:	c1 f7       	brne	.-16     	; 0x66e0 <ldexp+0x16>
    66f0:	9e 3f       	cpi	r25, 0xFE	; 254
    66f2:	51 05       	cpc	r21, r1
    66f4:	44 f7       	brge	.-48     	; 0x66c6 <inverse+0xe>
    66f6:	88 0f       	add	r24, r24
    66f8:	91 1d       	adc	r25, r1
    66fa:	96 95       	lsr	r25
    66fc:	87 95       	ror	r24
    66fe:	97 f9       	bld	r25, 7
    6700:	08 95       	ret
    6702:	5f 3f       	cpi	r21, 0xFF	; 255
    6704:	ac f0       	brlt	.+42     	; 0x6730 <ldexp+0x66>
    6706:	98 3e       	cpi	r25, 0xE8	; 232
    6708:	9c f0       	brlt	.+38     	; 0x6730 <ldexp+0x66>
    670a:	bb 27       	eor	r27, r27
    670c:	86 95       	lsr	r24
    670e:	77 95       	ror	r23
    6710:	67 95       	ror	r22
    6712:	b7 95       	ror	r27
    6714:	08 f4       	brcc	.+2      	; 0x6718 <ldexp+0x4e>
    6716:	b1 60       	ori	r27, 0x01	; 1
    6718:	93 95       	inc	r25
    671a:	c1 f7       	brne	.-16     	; 0x670c <ldexp+0x42>
    671c:	bb 0f       	add	r27, r27
    671e:	58 f7       	brcc	.-42     	; 0x66f6 <ldexp+0x2c>
    6720:	11 f4       	brne	.+4      	; 0x6726 <ldexp+0x5c>
    6722:	60 ff       	sbrs	r22, 0
    6724:	e8 cf       	rjmp	.-48     	; 0x66f6 <ldexp+0x2c>
    6726:	6f 5f       	subi	r22, 0xFF	; 255
    6728:	7f 4f       	sbci	r23, 0xFF	; 255
    672a:	8f 4f       	sbci	r24, 0xFF	; 255
    672c:	9f 4f       	sbci	r25, 0xFF	; 255
    672e:	e3 cf       	rjmp	.-58     	; 0x66f6 <ldexp+0x2c>
    6730:	7a ce       	rjmp	.-780    	; 0x6426 <__fp_szero>
    6732:	0e f0       	brts	.+2      	; 0x6736 <ldexp+0x6c>
    6734:	76 c0       	rjmp	.+236    	; 0x6822 <__fp_mpack>
    6736:	32 ce       	rjmp	.-924    	; 0x639c <__fp_nan>
    6738:	68 94       	set
    673a:	2a ce       	rjmp	.-940    	; 0x6390 <__fp_inf>

0000673c <log>:
    673c:	59 de       	rcall	.-846    	; 0x63f0 <__fp_splitA>
    673e:	c8 f3       	brcs	.-14     	; 0x6732 <ldexp+0x68>
    6740:	99 23       	and	r25, r25
    6742:	d1 f3       	breq	.-12     	; 0x6738 <ldexp+0x6e>
    6744:	c6 f3       	brts	.-16     	; 0x6736 <ldexp+0x6c>
    6746:	df 93       	push	r29
    6748:	cf 93       	push	r28
    674a:	1f 93       	push	r17
    674c:	0f 93       	push	r16
    674e:	ff 92       	push	r15
    6750:	c9 2f       	mov	r28, r25
    6752:	dd 27       	eor	r29, r29
    6754:	88 23       	and	r24, r24
    6756:	2a f0       	brmi	.+10     	; 0x6762 <log+0x26>
    6758:	21 97       	sbiw	r28, 0x01	; 1
    675a:	66 0f       	add	r22, r22
    675c:	77 1f       	adc	r23, r23
    675e:	88 1f       	adc	r24, r24
    6760:	da f7       	brpl	.-10     	; 0x6758 <log+0x1c>
    6762:	20 e0       	ldi	r18, 0x00	; 0
    6764:	30 e0       	ldi	r19, 0x00	; 0
    6766:	40 e8       	ldi	r20, 0x80	; 128
    6768:	5f eb       	ldi	r21, 0xBF	; 191
    676a:	9f e3       	ldi	r25, 0x3F	; 63
    676c:	88 39       	cpi	r24, 0x98	; 152
    676e:	20 f0       	brcs	.+8      	; 0x6778 <log+0x3c>
    6770:	80 3e       	cpi	r24, 0xE0	; 224
    6772:	30 f0       	brcs	.+12     	; 0x6780 <log+0x44>
    6774:	21 96       	adiw	r28, 0x01	; 1
    6776:	8f 77       	andi	r24, 0x7F	; 127
    6778:	a9 dc       	rcall	.-1710   	; 0x60cc <__addsf3>
    677a:	e0 ef       	ldi	r30, 0xF0	; 240
    677c:	f0 e0       	ldi	r31, 0x00	; 0
    677e:	03 c0       	rjmp	.+6      	; 0x6786 <log+0x4a>
    6780:	a5 dc       	rcall	.-1718   	; 0x60cc <__addsf3>
    6782:	ed e1       	ldi	r30, 0x1D	; 29
    6784:	f1 e0       	ldi	r31, 0x01	; 1
    6786:	73 df       	rcall	.-282    	; 0x666e <__fp_powser>
    6788:	8b 01       	movw	r16, r22
    678a:	be 01       	movw	r22, r28
    678c:	ec 01       	movw	r28, r24
    678e:	fb 2e       	mov	r15, r27
    6790:	6f 57       	subi	r22, 0x7F	; 127
    6792:	71 09       	sbc	r23, r1
    6794:	75 95       	asr	r23
    6796:	77 1f       	adc	r23, r23
    6798:	88 0b       	sbc	r24, r24
    679a:	99 0b       	sbc	r25, r25
    679c:	9a dd       	rcall	.-1228   	; 0x62d2 <__floatsisf>
    679e:	28 e1       	ldi	r18, 0x18	; 24
    67a0:	32 e7       	ldi	r19, 0x72	; 114
    67a2:	41 e3       	ldi	r20, 0x31	; 49
    67a4:	5f e3       	ldi	r21, 0x3F	; 63
    67a6:	8f de       	rcall	.-738    	; 0x64c6 <__mulsf3x>
    67a8:	af 2d       	mov	r26, r15
    67aa:	98 01       	movw	r18, r16
    67ac:	ae 01       	movw	r20, r28
    67ae:	ff 90       	pop	r15
    67b0:	0f 91       	pop	r16
    67b2:	1f 91       	pop	r17
    67b4:	cf 91       	pop	r28
    67b6:	df 91       	pop	r29
    67b8:	9a dc       	rcall	.-1740   	; 0x60ee <__addsf3x>
    67ba:	01 ce       	rjmp	.-1022   	; 0x63be <__fp_round>

000067bc <modf>:
    67bc:	fa 01       	movw	r30, r20
    67be:	dc 01       	movw	r26, r24
    67c0:	aa 0f       	add	r26, r26
    67c2:	bb 1f       	adc	r27, r27
    67c4:	9b 01       	movw	r18, r22
    67c6:	ac 01       	movw	r20, r24
    67c8:	bf 57       	subi	r27, 0x7F	; 127
    67ca:	28 f4       	brcc	.+10     	; 0x67d6 <modf+0x1a>
    67cc:	22 27       	eor	r18, r18
    67ce:	33 27       	eor	r19, r19
    67d0:	44 27       	eor	r20, r20
    67d2:	50 78       	andi	r21, 0x80	; 128
    67d4:	1f c0       	rjmp	.+62     	; 0x6814 <modf+0x58>
    67d6:	b7 51       	subi	r27, 0x17	; 23
    67d8:	88 f4       	brcc	.+34     	; 0x67fc <modf+0x40>
    67da:	ab 2f       	mov	r26, r27
    67dc:	00 24       	eor	r0, r0
    67de:	46 95       	lsr	r20
    67e0:	37 95       	ror	r19
    67e2:	27 95       	ror	r18
    67e4:	01 1c       	adc	r0, r1
    67e6:	a3 95       	inc	r26
    67e8:	d2 f3       	brmi	.-12     	; 0x67de <modf+0x22>
    67ea:	00 20       	and	r0, r0
    67ec:	69 f0       	breq	.+26     	; 0x6808 <modf+0x4c>
    67ee:	22 0f       	add	r18, r18
    67f0:	33 1f       	adc	r19, r19
    67f2:	44 1f       	adc	r20, r20
    67f4:	b3 95       	inc	r27
    67f6:	da f3       	brmi	.-10     	; 0x67ee <modf+0x32>
    67f8:	0d d0       	rcall	.+26     	; 0x6814 <modf+0x58>
    67fa:	67 cc       	rjmp	.-1842   	; 0x60ca <__subsf3>
    67fc:	61 30       	cpi	r22, 0x01	; 1
    67fe:	71 05       	cpc	r23, r1
    6800:	a0 e8       	ldi	r26, 0x80	; 128
    6802:	8a 07       	cpc	r24, r26
    6804:	b9 46       	sbci	r27, 0x69	; 105
    6806:	30 f4       	brcc	.+12     	; 0x6814 <modf+0x58>
    6808:	9b 01       	movw	r18, r22
    680a:	ac 01       	movw	r20, r24
    680c:	66 27       	eor	r22, r22
    680e:	77 27       	eor	r23, r23
    6810:	88 27       	eor	r24, r24
    6812:	90 78       	andi	r25, 0x80	; 128
    6814:	30 96       	adiw	r30, 0x00	; 0
    6816:	21 f0       	breq	.+8      	; 0x6820 <modf+0x64>
    6818:	20 83       	st	Z, r18
    681a:	31 83       	std	Z+1, r19	; 0x01
    681c:	42 83       	std	Z+2, r20	; 0x02
    681e:	53 83       	std	Z+3, r21	; 0x03
    6820:	08 95       	ret

00006822 <__fp_mpack>:
    6822:	9f 3f       	cpi	r25, 0xFF	; 255
    6824:	31 f0       	breq	.+12     	; 0x6832 <__fp_mpack_finite+0xc>

00006826 <__fp_mpack_finite>:
    6826:	91 50       	subi	r25, 0x01	; 1
    6828:	20 f4       	brcc	.+8      	; 0x6832 <__fp_mpack_finite+0xc>
    682a:	87 95       	ror	r24
    682c:	77 95       	ror	r23
    682e:	67 95       	ror	r22
    6830:	b7 95       	ror	r27
    6832:	88 0f       	add	r24, r24
    6834:	91 1d       	adc	r25, r1
    6836:	96 95       	lsr	r25
    6838:	87 95       	ror	r24
    683a:	97 f9       	bld	r25, 7
    683c:	08 95       	ret

0000683e <vfprintf>:
    683e:	a1 e1       	ldi	r26, 0x11	; 17
    6840:	b0 e0       	ldi	r27, 0x00	; 0
    6842:	e4 e2       	ldi	r30, 0x24	; 36
    6844:	f4 e3       	ldi	r31, 0x34	; 52
    6846:	a4 c3       	rjmp	.+1864   	; 0x6f90 <__prologue_saves__>
    6848:	3c 01       	movw	r6, r24
    684a:	7f 87       	std	Y+15, r23	; 0x0f
    684c:	6e 87       	std	Y+14, r22	; 0x0e
    684e:	6a 01       	movw	r12, r20
    6850:	fc 01       	movw	r30, r24
    6852:	17 82       	std	Z+7, r1	; 0x07
    6854:	16 82       	std	Z+6, r1	; 0x06
    6856:	83 81       	ldd	r24, Z+3	; 0x03
    6858:	81 fd       	sbrc	r24, 1
    685a:	03 c0       	rjmp	.+6      	; 0x6862 <vfprintf+0x24>
    685c:	6f ef       	ldi	r22, 0xFF	; 255
    685e:	7f ef       	ldi	r23, 0xFF	; 255
    6860:	52 c3       	rjmp	.+1700   	; 0x6f06 <vfprintf+0x6c8>
    6862:	9e 01       	movw	r18, r28
    6864:	2f 5f       	subi	r18, 0xFF	; 255
    6866:	3f 4f       	sbci	r19, 0xFF	; 255
    6868:	39 8b       	std	Y+17, r19	; 0x11
    686a:	28 8b       	std	Y+16, r18	; 0x10
    686c:	f3 01       	movw	r30, r6
    686e:	23 81       	ldd	r18, Z+3	; 0x03
    6870:	ee 85       	ldd	r30, Y+14	; 0x0e
    6872:	ff 85       	ldd	r31, Y+15	; 0x0f
    6874:	23 fd       	sbrc	r18, 3
    6876:	85 91       	lpm	r24, Z+
    6878:	23 ff       	sbrs	r18, 3
    687a:	81 91       	ld	r24, Z+
    687c:	ff 87       	std	Y+15, r31	; 0x0f
    687e:	ee 87       	std	Y+14, r30	; 0x0e
    6880:	88 23       	and	r24, r24
    6882:	09 f4       	brne	.+2      	; 0x6886 <vfprintf+0x48>
    6884:	3d c3       	rjmp	.+1658   	; 0x6f00 <vfprintf+0x6c2>
    6886:	85 32       	cpi	r24, 0x25	; 37
    6888:	51 f4       	brne	.+20     	; 0x689e <vfprintf+0x60>
    688a:	ee 85       	ldd	r30, Y+14	; 0x0e
    688c:	ff 85       	ldd	r31, Y+15	; 0x0f
    688e:	23 fd       	sbrc	r18, 3
    6890:	85 91       	lpm	r24, Z+
    6892:	23 ff       	sbrs	r18, 3
    6894:	81 91       	ld	r24, Z+
    6896:	ff 87       	std	Y+15, r31	; 0x0f
    6898:	ee 87       	std	Y+14, r30	; 0x0e
    689a:	85 32       	cpi	r24, 0x25	; 37
    689c:	21 f4       	brne	.+8      	; 0x68a6 <vfprintf+0x68>
    689e:	90 e0       	ldi	r25, 0x00	; 0
    68a0:	b3 01       	movw	r22, r6
    68a2:	a0 d5       	rcall	.+2880   	; 0x73e4 <fputc>
    68a4:	e3 cf       	rjmp	.-58     	; 0x686c <vfprintf+0x2e>
    68a6:	98 2f       	mov	r25, r24
    68a8:	10 e0       	ldi	r17, 0x00	; 0
    68aa:	88 24       	eor	r8, r8
    68ac:	99 24       	eor	r9, r9
    68ae:	10 32       	cpi	r17, 0x20	; 32
    68b0:	b0 f4       	brcc	.+44     	; 0x68de <vfprintf+0xa0>
    68b2:	9b 32       	cpi	r25, 0x2B	; 43
    68b4:	69 f0       	breq	.+26     	; 0x68d0 <vfprintf+0x92>
    68b6:	9c 32       	cpi	r25, 0x2C	; 44
    68b8:	28 f4       	brcc	.+10     	; 0x68c4 <vfprintf+0x86>
    68ba:	90 32       	cpi	r25, 0x20	; 32
    68bc:	51 f0       	breq	.+20     	; 0x68d2 <vfprintf+0x94>
    68be:	93 32       	cpi	r25, 0x23	; 35
    68c0:	71 f4       	brne	.+28     	; 0x68de <vfprintf+0xa0>
    68c2:	0b c0       	rjmp	.+22     	; 0x68da <vfprintf+0x9c>
    68c4:	9d 32       	cpi	r25, 0x2D	; 45
    68c6:	39 f0       	breq	.+14     	; 0x68d6 <vfprintf+0x98>
    68c8:	90 33       	cpi	r25, 0x30	; 48
    68ca:	49 f4       	brne	.+18     	; 0x68de <vfprintf+0xa0>
    68cc:	11 60       	ori	r17, 0x01	; 1
    68ce:	28 c0       	rjmp	.+80     	; 0x6920 <vfprintf+0xe2>
    68d0:	12 60       	ori	r17, 0x02	; 2
    68d2:	14 60       	ori	r17, 0x04	; 4
    68d4:	25 c0       	rjmp	.+74     	; 0x6920 <vfprintf+0xe2>
    68d6:	18 60       	ori	r17, 0x08	; 8
    68d8:	23 c0       	rjmp	.+70     	; 0x6920 <vfprintf+0xe2>
    68da:	10 61       	ori	r17, 0x10	; 16
    68dc:	21 c0       	rjmp	.+66     	; 0x6920 <vfprintf+0xe2>
    68de:	17 fd       	sbrc	r17, 7
    68e0:	2a c0       	rjmp	.+84     	; 0x6936 <vfprintf+0xf8>
    68e2:	89 2f       	mov	r24, r25
    68e4:	80 53       	subi	r24, 0x30	; 48
    68e6:	8a 30       	cpi	r24, 0x0A	; 10
    68e8:	78 f4       	brcc	.+30     	; 0x6908 <vfprintf+0xca>
    68ea:	16 ff       	sbrs	r17, 6
    68ec:	06 c0       	rjmp	.+12     	; 0x68fa <vfprintf+0xbc>
    68ee:	fa e0       	ldi	r31, 0x0A	; 10
    68f0:	9f 9e       	mul	r9, r31
    68f2:	90 2c       	mov	r9, r0
    68f4:	11 24       	eor	r1, r1
    68f6:	98 0e       	add	r9, r24
    68f8:	13 c0       	rjmp	.+38     	; 0x6920 <vfprintf+0xe2>
    68fa:	3a e0       	ldi	r19, 0x0A	; 10
    68fc:	83 9e       	mul	r8, r19
    68fe:	80 2c       	mov	r8, r0
    6900:	11 24       	eor	r1, r1
    6902:	88 0e       	add	r8, r24
    6904:	10 62       	ori	r17, 0x20	; 32
    6906:	0c c0       	rjmp	.+24     	; 0x6920 <vfprintf+0xe2>
    6908:	9e 32       	cpi	r25, 0x2E	; 46
    690a:	21 f4       	brne	.+8      	; 0x6914 <vfprintf+0xd6>
    690c:	16 fd       	sbrc	r17, 6
    690e:	f8 c2       	rjmp	.+1520   	; 0x6f00 <vfprintf+0x6c2>
    6910:	10 64       	ori	r17, 0x40	; 64
    6912:	06 c0       	rjmp	.+12     	; 0x6920 <vfprintf+0xe2>
    6914:	9c 36       	cpi	r25, 0x6C	; 108
    6916:	11 f4       	brne	.+4      	; 0x691c <vfprintf+0xde>
    6918:	10 68       	ori	r17, 0x80	; 128
    691a:	02 c0       	rjmp	.+4      	; 0x6920 <vfprintf+0xe2>
    691c:	98 36       	cpi	r25, 0x68	; 104
    691e:	59 f4       	brne	.+22     	; 0x6936 <vfprintf+0xf8>
    6920:	ee 85       	ldd	r30, Y+14	; 0x0e
    6922:	ff 85       	ldd	r31, Y+15	; 0x0f
    6924:	23 fd       	sbrc	r18, 3
    6926:	95 91       	lpm	r25, Z+
    6928:	23 ff       	sbrs	r18, 3
    692a:	91 91       	ld	r25, Z+
    692c:	ff 87       	std	Y+15, r31	; 0x0f
    692e:	ee 87       	std	Y+14, r30	; 0x0e
    6930:	99 23       	and	r25, r25
    6932:	09 f0       	breq	.+2      	; 0x6936 <vfprintf+0xf8>
    6934:	bc cf       	rjmp	.-136    	; 0x68ae <vfprintf+0x70>
    6936:	89 2f       	mov	r24, r25
    6938:	85 54       	subi	r24, 0x45	; 69
    693a:	83 30       	cpi	r24, 0x03	; 3
    693c:	20 f4       	brcc	.+8      	; 0x6946 <vfprintf+0x108>
    693e:	81 2f       	mov	r24, r17
    6940:	80 61       	ori	r24, 0x10	; 16
    6942:	90 5e       	subi	r25, 0xE0	; 224
    6944:	07 c0       	rjmp	.+14     	; 0x6954 <vfprintf+0x116>
    6946:	89 2f       	mov	r24, r25
    6948:	85 56       	subi	r24, 0x65	; 101
    694a:	83 30       	cpi	r24, 0x03	; 3
    694c:	08 f0       	brcs	.+2      	; 0x6950 <vfprintf+0x112>
    694e:	8f c1       	rjmp	.+798    	; 0x6c6e <vfprintf+0x430>
    6950:	81 2f       	mov	r24, r17
    6952:	8f 7e       	andi	r24, 0xEF	; 239
    6954:	86 fd       	sbrc	r24, 6
    6956:	02 c0       	rjmp	.+4      	; 0x695c <vfprintf+0x11e>
    6958:	76 e0       	ldi	r23, 0x06	; 6
    695a:	97 2e       	mov	r9, r23
    695c:	6f e3       	ldi	r22, 0x3F	; 63
    695e:	f6 2e       	mov	r15, r22
    6960:	f8 22       	and	r15, r24
    6962:	95 36       	cpi	r25, 0x65	; 101
    6964:	19 f4       	brne	.+6      	; 0x696c <vfprintf+0x12e>
    6966:	f0 e4       	ldi	r31, 0x40	; 64
    6968:	ff 2a       	or	r15, r31
    696a:	07 c0       	rjmp	.+14     	; 0x697a <vfprintf+0x13c>
    696c:	96 36       	cpi	r25, 0x66	; 102
    696e:	19 f4       	brne	.+6      	; 0x6976 <vfprintf+0x138>
    6970:	20 e8       	ldi	r18, 0x80	; 128
    6972:	f2 2a       	or	r15, r18
    6974:	02 c0       	rjmp	.+4      	; 0x697a <vfprintf+0x13c>
    6976:	91 10       	cpse	r9, r1
    6978:	9a 94       	dec	r9
    697a:	f7 fe       	sbrs	r15, 7
    697c:	0a c0       	rjmp	.+20     	; 0x6992 <vfprintf+0x154>
    697e:	3b e3       	ldi	r19, 0x3B	; 59
    6980:	39 15       	cp	r19, r9
    6982:	18 f4       	brcc	.+6      	; 0x698a <vfprintf+0x14c>
    6984:	5c e3       	ldi	r21, 0x3C	; 60
    6986:	b5 2e       	mov	r11, r21
    6988:	02 c0       	rjmp	.+4      	; 0x698e <vfprintf+0x150>
    698a:	b9 2c       	mov	r11, r9
    698c:	b3 94       	inc	r11
    698e:	27 e0       	ldi	r18, 0x07	; 7
    6990:	09 c0       	rjmp	.+18     	; 0x69a4 <vfprintf+0x166>
    6992:	47 e0       	ldi	r20, 0x07	; 7
    6994:	49 15       	cp	r20, r9
    6996:	20 f4       	brcc	.+8      	; 0x69a0 <vfprintf+0x162>
    6998:	bb 24       	eor	r11, r11
    699a:	47 e0       	ldi	r20, 0x07	; 7
    699c:	94 2e       	mov	r9, r20
    699e:	f7 cf       	rjmp	.-18     	; 0x698e <vfprintf+0x150>
    69a0:	29 2d       	mov	r18, r9
    69a2:	bb 24       	eor	r11, r11
    69a4:	c6 01       	movw	r24, r12
    69a6:	04 96       	adiw	r24, 0x04	; 4
    69a8:	9d 87       	std	Y+13, r25	; 0x0d
    69aa:	8c 87       	std	Y+12, r24	; 0x0c
    69ac:	f6 01       	movw	r30, r12
    69ae:	60 81       	ld	r22, Z
    69b0:	71 81       	ldd	r23, Z+1	; 0x01
    69b2:	82 81       	ldd	r24, Z+2	; 0x02
    69b4:	93 81       	ldd	r25, Z+3	; 0x03
    69b6:	ae 01       	movw	r20, r28
    69b8:	4f 5f       	subi	r20, 0xFF	; 255
    69ba:	5f 4f       	sbci	r21, 0xFF	; 255
    69bc:	0b 2d       	mov	r16, r11
    69be:	24 d4       	rcall	.+2120   	; 0x7208 <__ftoa_engine>
    69c0:	6c 01       	movw	r12, r24
    69c2:	09 81       	ldd	r16, Y+1	; 0x01
    69c4:	20 2e       	mov	r2, r16
    69c6:	33 24       	eor	r3, r3
    69c8:	00 ff       	sbrs	r16, 0
    69ca:	04 c0       	rjmp	.+8      	; 0x69d4 <vfprintf+0x196>
    69cc:	03 fd       	sbrc	r16, 3
    69ce:	02 c0       	rjmp	.+4      	; 0x69d4 <vfprintf+0x196>
    69d0:	1d e2       	ldi	r17, 0x2D	; 45
    69d2:	09 c0       	rjmp	.+18     	; 0x69e6 <vfprintf+0x1a8>
    69d4:	f1 fe       	sbrs	r15, 1
    69d6:	02 c0       	rjmp	.+4      	; 0x69dc <vfprintf+0x19e>
    69d8:	1b e2       	ldi	r17, 0x2B	; 43
    69da:	05 c0       	rjmp	.+10     	; 0x69e6 <vfprintf+0x1a8>
    69dc:	f2 fc       	sbrc	r15, 2
    69de:	02 c0       	rjmp	.+4      	; 0x69e4 <vfprintf+0x1a6>
    69e0:	10 e0       	ldi	r17, 0x00	; 0
    69e2:	01 c0       	rjmp	.+2      	; 0x69e6 <vfprintf+0x1a8>
    69e4:	10 e2       	ldi	r17, 0x20	; 32
    69e6:	c1 01       	movw	r24, r2
    69e8:	8c 70       	andi	r24, 0x0C	; 12
    69ea:	90 70       	andi	r25, 0x00	; 0
    69ec:	89 2b       	or	r24, r25
    69ee:	a1 f1       	breq	.+104    	; 0x6a58 <vfprintf+0x21a>
    69f0:	11 23       	and	r17, r17
    69f2:	11 f4       	brne	.+4      	; 0x69f8 <vfprintf+0x1ba>
    69f4:	83 e0       	ldi	r24, 0x03	; 3
    69f6:	01 c0       	rjmp	.+2      	; 0x69fa <vfprintf+0x1bc>
    69f8:	84 e0       	ldi	r24, 0x04	; 4
    69fa:	88 15       	cp	r24, r8
    69fc:	10 f0       	brcs	.+4      	; 0x6a02 <vfprintf+0x1c4>
    69fe:	88 24       	eor	r8, r8
    6a00:	09 c0       	rjmp	.+18     	; 0x6a14 <vfprintf+0x1d6>
    6a02:	88 1a       	sub	r8, r24
    6a04:	f3 fc       	sbrc	r15, 3
    6a06:	06 c0       	rjmp	.+12     	; 0x6a14 <vfprintf+0x1d6>
    6a08:	80 e2       	ldi	r24, 0x20	; 32
    6a0a:	90 e0       	ldi	r25, 0x00	; 0
    6a0c:	b3 01       	movw	r22, r6
    6a0e:	ea d4       	rcall	.+2516   	; 0x73e4 <fputc>
    6a10:	8a 94       	dec	r8
    6a12:	d1 f7       	brne	.-12     	; 0x6a08 <vfprintf+0x1ca>
    6a14:	11 23       	and	r17, r17
    6a16:	21 f0       	breq	.+8      	; 0x6a20 <vfprintf+0x1e2>
    6a18:	81 2f       	mov	r24, r17
    6a1a:	90 e0       	ldi	r25, 0x00	; 0
    6a1c:	b3 01       	movw	r22, r6
    6a1e:	e2 d4       	rcall	.+2500   	; 0x73e4 <fputc>
    6a20:	23 fe       	sbrs	r2, 3
    6a22:	03 c0       	rjmp	.+6      	; 0x6a2a <vfprintf+0x1ec>
    6a24:	0f e5       	ldi	r16, 0x5F	; 95
    6a26:	15 e0       	ldi	r17, 0x05	; 5
    6a28:	0d c0       	rjmp	.+26     	; 0x6a44 <vfprintf+0x206>
    6a2a:	03 e6       	ldi	r16, 0x63	; 99
    6a2c:	15 e0       	ldi	r17, 0x05	; 5
    6a2e:	0a c0       	rjmp	.+20     	; 0x6a44 <vfprintf+0x206>
    6a30:	e1 14       	cp	r14, r1
    6a32:	f1 04       	cpc	r15, r1
    6a34:	09 f0       	breq	.+2      	; 0x6a38 <vfprintf+0x1fa>
    6a36:	80 52       	subi	r24, 0x20	; 32
    6a38:	90 e0       	ldi	r25, 0x00	; 0
    6a3a:	b3 01       	movw	r22, r6
    6a3c:	d3 d4       	rcall	.+2470   	; 0x73e4 <fputc>
    6a3e:	0f 5f       	subi	r16, 0xFF	; 255
    6a40:	1f 4f       	sbci	r17, 0xFF	; 255
    6a42:	05 c0       	rjmp	.+10     	; 0x6a4e <vfprintf+0x210>
    6a44:	ef 2c       	mov	r14, r15
    6a46:	ff 24       	eor	r15, r15
    6a48:	f0 e1       	ldi	r31, 0x10	; 16
    6a4a:	ef 22       	and	r14, r31
    6a4c:	ff 24       	eor	r15, r15
    6a4e:	f8 01       	movw	r30, r16
    6a50:	84 91       	lpm	r24, Z+
    6a52:	88 23       	and	r24, r24
    6a54:	69 f7       	brne	.-38     	; 0x6a30 <vfprintf+0x1f2>
    6a56:	08 c1       	rjmp	.+528    	; 0x6c68 <vfprintf+0x42a>
    6a58:	f7 fe       	sbrs	r15, 7
    6a5a:	12 c0       	rjmp	.+36     	; 0x6a80 <vfprintf+0x242>
    6a5c:	bc 0c       	add	r11, r12
    6a5e:	24 fe       	sbrs	r2, 4
    6a60:	04 c0       	rjmp	.+8      	; 0x6a6a <vfprintf+0x22c>
    6a62:	8a 81       	ldd	r24, Y+2	; 0x02
    6a64:	81 33       	cpi	r24, 0x31	; 49
    6a66:	09 f4       	brne	.+2      	; 0x6a6a <vfprintf+0x22c>
    6a68:	ba 94       	dec	r11
    6a6a:	1b 14       	cp	r1, r11
    6a6c:	1c f0       	brlt	.+6      	; 0x6a74 <vfprintf+0x236>
    6a6e:	bb 24       	eor	r11, r11
    6a70:	b3 94       	inc	r11
    6a72:	2d c0       	rjmp	.+90     	; 0x6ace <vfprintf+0x290>
    6a74:	f8 e0       	ldi	r31, 0x08	; 8
    6a76:	fb 15       	cp	r31, r11
    6a78:	50 f5       	brcc	.+84     	; 0x6ace <vfprintf+0x290>
    6a7a:	38 e0       	ldi	r19, 0x08	; 8
    6a7c:	b3 2e       	mov	r11, r19
    6a7e:	27 c0       	rjmp	.+78     	; 0x6ace <vfprintf+0x290>
    6a80:	f6 fc       	sbrc	r15, 6
    6a82:	25 c0       	rjmp	.+74     	; 0x6ace <vfprintf+0x290>
    6a84:	89 2d       	mov	r24, r9
    6a86:	90 e0       	ldi	r25, 0x00	; 0
    6a88:	8c 15       	cp	r24, r12
    6a8a:	9d 05       	cpc	r25, r13
    6a8c:	4c f0       	brlt	.+18     	; 0x6aa0 <vfprintf+0x262>
    6a8e:	2c ef       	ldi	r18, 0xFC	; 252
    6a90:	c2 16       	cp	r12, r18
    6a92:	2f ef       	ldi	r18, 0xFF	; 255
    6a94:	d2 06       	cpc	r13, r18
    6a96:	24 f0       	brlt	.+8      	; 0x6aa0 <vfprintf+0x262>
    6a98:	30 e8       	ldi	r19, 0x80	; 128
    6a9a:	f3 2a       	or	r15, r19
    6a9c:	01 c0       	rjmp	.+2      	; 0x6aa0 <vfprintf+0x262>
    6a9e:	9a 94       	dec	r9
    6aa0:	99 20       	and	r9, r9
    6aa2:	49 f0       	breq	.+18     	; 0x6ab6 <vfprintf+0x278>
    6aa4:	e2 e0       	ldi	r30, 0x02	; 2
    6aa6:	f0 e0       	ldi	r31, 0x00	; 0
    6aa8:	ec 0f       	add	r30, r28
    6aaa:	fd 1f       	adc	r31, r29
    6aac:	e9 0d       	add	r30, r9
    6aae:	f1 1d       	adc	r31, r1
    6ab0:	80 81       	ld	r24, Z
    6ab2:	80 33       	cpi	r24, 0x30	; 48
    6ab4:	a1 f3       	breq	.-24     	; 0x6a9e <vfprintf+0x260>
    6ab6:	f7 fe       	sbrs	r15, 7
    6ab8:	0a c0       	rjmp	.+20     	; 0x6ace <vfprintf+0x290>
    6aba:	b9 2c       	mov	r11, r9
    6abc:	b3 94       	inc	r11
    6abe:	89 2d       	mov	r24, r9
    6ac0:	90 e0       	ldi	r25, 0x00	; 0
    6ac2:	c8 16       	cp	r12, r24
    6ac4:	d9 06       	cpc	r13, r25
    6ac6:	14 f0       	brlt	.+4      	; 0x6acc <vfprintf+0x28e>
    6ac8:	99 24       	eor	r9, r9
    6aca:	01 c0       	rjmp	.+2      	; 0x6ace <vfprintf+0x290>
    6acc:	9c 18       	sub	r9, r12
    6ace:	f7 fc       	sbrc	r15, 7
    6ad0:	03 c0       	rjmp	.+6      	; 0x6ad8 <vfprintf+0x29a>
    6ad2:	25 e0       	ldi	r18, 0x05	; 5
    6ad4:	30 e0       	ldi	r19, 0x00	; 0
    6ad6:	09 c0       	rjmp	.+18     	; 0x6aea <vfprintf+0x2ac>
    6ad8:	1c 14       	cp	r1, r12
    6ada:	1d 04       	cpc	r1, r13
    6adc:	1c f0       	brlt	.+6      	; 0x6ae4 <vfprintf+0x2a6>
    6ade:	21 e0       	ldi	r18, 0x01	; 1
    6ae0:	30 e0       	ldi	r19, 0x00	; 0
    6ae2:	03 c0       	rjmp	.+6      	; 0x6aea <vfprintf+0x2ac>
    6ae4:	96 01       	movw	r18, r12
    6ae6:	2f 5f       	subi	r18, 0xFF	; 255
    6ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    6aea:	11 23       	and	r17, r17
    6aec:	11 f0       	breq	.+4      	; 0x6af2 <vfprintf+0x2b4>
    6aee:	2f 5f       	subi	r18, 0xFF	; 255
    6af0:	3f 4f       	sbci	r19, 0xFF	; 255
    6af2:	99 20       	and	r9, r9
    6af4:	29 f0       	breq	.+10     	; 0x6b00 <vfprintf+0x2c2>
    6af6:	89 2d       	mov	r24, r9
    6af8:	90 e0       	ldi	r25, 0x00	; 0
    6afa:	01 96       	adiw	r24, 0x01	; 1
    6afc:	28 0f       	add	r18, r24
    6afe:	39 1f       	adc	r19, r25
    6b00:	88 2d       	mov	r24, r8
    6b02:	90 e0       	ldi	r25, 0x00	; 0
    6b04:	28 17       	cp	r18, r24
    6b06:	39 07       	cpc	r19, r25
    6b08:	14 f0       	brlt	.+4      	; 0x6b0e <vfprintf+0x2d0>
    6b0a:	88 24       	eor	r8, r8
    6b0c:	01 c0       	rjmp	.+2      	; 0x6b10 <vfprintf+0x2d2>
    6b0e:	82 1a       	sub	r8, r18
    6b10:	4f 2c       	mov	r4, r15
    6b12:	55 24       	eor	r5, r5
    6b14:	c2 01       	movw	r24, r4
    6b16:	89 70       	andi	r24, 0x09	; 9
    6b18:	90 70       	andi	r25, 0x00	; 0
    6b1a:	89 2b       	or	r24, r25
    6b1c:	31 f0       	breq	.+12     	; 0x6b2a <vfprintf+0x2ec>
    6b1e:	07 c0       	rjmp	.+14     	; 0x6b2e <vfprintf+0x2f0>
    6b20:	80 e2       	ldi	r24, 0x20	; 32
    6b22:	90 e0       	ldi	r25, 0x00	; 0
    6b24:	b3 01       	movw	r22, r6
    6b26:	5e d4       	rcall	.+2236   	; 0x73e4 <fputc>
    6b28:	8a 94       	dec	r8
    6b2a:	88 20       	and	r8, r8
    6b2c:	c9 f7       	brne	.-14     	; 0x6b20 <vfprintf+0x2e2>
    6b2e:	11 23       	and	r17, r17
    6b30:	21 f0       	breq	.+8      	; 0x6b3a <vfprintf+0x2fc>
    6b32:	81 2f       	mov	r24, r17
    6b34:	90 e0       	ldi	r25, 0x00	; 0
    6b36:	b3 01       	movw	r22, r6
    6b38:	55 d4       	rcall	.+2218   	; 0x73e4 <fputc>
    6b3a:	43 fe       	sbrs	r4, 3
    6b3c:	06 c0       	rjmp	.+12     	; 0x6b4a <vfprintf+0x30c>
    6b3e:	07 c0       	rjmp	.+14     	; 0x6b4e <vfprintf+0x310>
    6b40:	80 e3       	ldi	r24, 0x30	; 48
    6b42:	90 e0       	ldi	r25, 0x00	; 0
    6b44:	b3 01       	movw	r22, r6
    6b46:	4e d4       	rcall	.+2204   	; 0x73e4 <fputc>
    6b48:	8a 94       	dec	r8
    6b4a:	88 20       	and	r8, r8
    6b4c:	c9 f7       	brne	.-14     	; 0x6b40 <vfprintf+0x302>
    6b4e:	f7 fe       	sbrs	r15, 7
    6b50:	44 c0       	rjmp	.+136    	; 0x6bda <vfprintf+0x39c>
    6b52:	86 01       	movw	r16, r12
    6b54:	d7 fe       	sbrs	r13, 7
    6b56:	02 c0       	rjmp	.+4      	; 0x6b5c <vfprintf+0x31e>
    6b58:	00 e0       	ldi	r16, 0x00	; 0
    6b5a:	10 e0       	ldi	r17, 0x00	; 0
    6b5c:	76 01       	movw	r14, r12
    6b5e:	08 94       	sec
    6b60:	e1 1c       	adc	r14, r1
    6b62:	f1 1c       	adc	r15, r1
    6b64:	e0 1a       	sub	r14, r16
    6b66:	f1 0a       	sbc	r15, r17
    6b68:	41 e0       	ldi	r20, 0x01	; 1
    6b6a:	50 e0       	ldi	r21, 0x00	; 0
    6b6c:	4c 0f       	add	r20, r28
    6b6e:	5d 1f       	adc	r21, r29
    6b70:	e4 0e       	add	r14, r20
    6b72:	f5 1e       	adc	r15, r21
    6b74:	26 01       	movw	r4, r12
    6b76:	4b 18       	sub	r4, r11
    6b78:	51 08       	sbc	r5, r1
    6b7a:	89 2d       	mov	r24, r9
    6b7c:	90 e0       	ldi	r25, 0x00	; 0
    6b7e:	aa 24       	eor	r10, r10
    6b80:	bb 24       	eor	r11, r11
    6b82:	a8 1a       	sub	r10, r24
    6b84:	b9 0a       	sbc	r11, r25
    6b86:	5f ef       	ldi	r21, 0xFF	; 255
    6b88:	0f 3f       	cpi	r16, 0xFF	; 255
    6b8a:	15 07       	cpc	r17, r21
    6b8c:	21 f4       	brne	.+8      	; 0x6b96 <vfprintf+0x358>
    6b8e:	8e e2       	ldi	r24, 0x2E	; 46
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	b3 01       	movw	r22, r6
    6b94:	27 d4       	rcall	.+2126   	; 0x73e4 <fputc>
    6b96:	c0 16       	cp	r12, r16
    6b98:	d1 06       	cpc	r13, r17
    6b9a:	34 f0       	brlt	.+12     	; 0x6ba8 <vfprintf+0x36a>
    6b9c:	40 16       	cp	r4, r16
    6b9e:	51 06       	cpc	r5, r17
    6ba0:	1c f4       	brge	.+6      	; 0x6ba8 <vfprintf+0x36a>
    6ba2:	f7 01       	movw	r30, r14
    6ba4:	80 81       	ld	r24, Z
    6ba6:	01 c0       	rjmp	.+2      	; 0x6baa <vfprintf+0x36c>
    6ba8:	80 e3       	ldi	r24, 0x30	; 48
    6baa:	01 50       	subi	r16, 0x01	; 1
    6bac:	10 40       	sbci	r17, 0x00	; 0
    6bae:	08 94       	sec
    6bb0:	e1 1c       	adc	r14, r1
    6bb2:	f1 1c       	adc	r15, r1
    6bb4:	0a 15       	cp	r16, r10
    6bb6:	1b 05       	cpc	r17, r11
    6bb8:	24 f0       	brlt	.+8      	; 0x6bc2 <vfprintf+0x384>
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	b3 01       	movw	r22, r6
    6bbe:	12 d4       	rcall	.+2084   	; 0x73e4 <fputc>
    6bc0:	e2 cf       	rjmp	.-60     	; 0x6b86 <vfprintf+0x348>
    6bc2:	0c 15       	cp	r16, r12
    6bc4:	1d 05       	cpc	r17, r13
    6bc6:	39 f4       	brne	.+14     	; 0x6bd6 <vfprintf+0x398>
    6bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    6bca:	96 33       	cpi	r25, 0x36	; 54
    6bcc:	18 f4       	brcc	.+6      	; 0x6bd4 <vfprintf+0x396>
    6bce:	95 33       	cpi	r25, 0x35	; 53
    6bd0:	11 f4       	brne	.+4      	; 0x6bd6 <vfprintf+0x398>
    6bd2:	24 fe       	sbrs	r2, 4
    6bd4:	81 e3       	ldi	r24, 0x31	; 49
    6bd6:	90 e0       	ldi	r25, 0x00	; 0
    6bd8:	45 c0       	rjmp	.+138    	; 0x6c64 <vfprintf+0x426>
    6bda:	8a 81       	ldd	r24, Y+2	; 0x02
    6bdc:	81 33       	cpi	r24, 0x31	; 49
    6bde:	09 f0       	breq	.+2      	; 0x6be2 <vfprintf+0x3a4>
    6be0:	0f 7e       	andi	r16, 0xEF	; 239
    6be2:	90 e0       	ldi	r25, 0x00	; 0
    6be4:	b3 01       	movw	r22, r6
    6be6:	fe d3       	rcall	.+2044   	; 0x73e4 <fputc>
    6be8:	99 20       	and	r9, r9
    6bea:	91 f0       	breq	.+36     	; 0x6c10 <vfprintf+0x3d2>
    6bec:	8e e2       	ldi	r24, 0x2E	; 46
    6bee:	90 e0       	ldi	r25, 0x00	; 0
    6bf0:	b3 01       	movw	r22, r6
    6bf2:	f8 d3       	rcall	.+2032   	; 0x73e4 <fputc>
    6bf4:	12 e0       	ldi	r17, 0x02	; 2
    6bf6:	e1 e0       	ldi	r30, 0x01	; 1
    6bf8:	f0 e0       	ldi	r31, 0x00	; 0
    6bfa:	ec 0f       	add	r30, r28
    6bfc:	fd 1f       	adc	r31, r29
    6bfe:	e1 0f       	add	r30, r17
    6c00:	f1 1d       	adc	r31, r1
    6c02:	1f 5f       	subi	r17, 0xFF	; 255
    6c04:	80 81       	ld	r24, Z
    6c06:	90 e0       	ldi	r25, 0x00	; 0
    6c08:	b3 01       	movw	r22, r6
    6c0a:	ec d3       	rcall	.+2008   	; 0x73e4 <fputc>
    6c0c:	9a 94       	dec	r9
    6c0e:	99 f7       	brne	.-26     	; 0x6bf6 <vfprintf+0x3b8>
    6c10:	44 fc       	sbrc	r4, 4
    6c12:	03 c0       	rjmp	.+6      	; 0x6c1a <vfprintf+0x3dc>
    6c14:	85 e6       	ldi	r24, 0x65	; 101
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	02 c0       	rjmp	.+4      	; 0x6c1e <vfprintf+0x3e0>
    6c1a:	85 e4       	ldi	r24, 0x45	; 69
    6c1c:	90 e0       	ldi	r25, 0x00	; 0
    6c1e:	b3 01       	movw	r22, r6
    6c20:	e1 d3       	rcall	.+1986   	; 0x73e4 <fputc>
    6c22:	d7 fc       	sbrc	r13, 7
    6c24:	05 c0       	rjmp	.+10     	; 0x6c30 <vfprintf+0x3f2>
    6c26:	c1 14       	cp	r12, r1
    6c28:	d1 04       	cpc	r13, r1
    6c2a:	41 f4       	brne	.+16     	; 0x6c3c <vfprintf+0x3fe>
    6c2c:	04 ff       	sbrs	r16, 4
    6c2e:	06 c0       	rjmp	.+12     	; 0x6c3c <vfprintf+0x3fe>
    6c30:	d0 94       	com	r13
    6c32:	c1 94       	neg	r12
    6c34:	d1 08       	sbc	r13, r1
    6c36:	d3 94       	inc	r13
    6c38:	8d e2       	ldi	r24, 0x2D	; 45
    6c3a:	01 c0       	rjmp	.+2      	; 0x6c3e <vfprintf+0x400>
    6c3c:	8b e2       	ldi	r24, 0x2B	; 43
    6c3e:	90 e0       	ldi	r25, 0x00	; 0
    6c40:	b3 01       	movw	r22, r6
    6c42:	d0 d3       	rcall	.+1952   	; 0x73e4 <fputc>
    6c44:	80 e3       	ldi	r24, 0x30	; 48
    6c46:	05 c0       	rjmp	.+10     	; 0x6c52 <vfprintf+0x414>
    6c48:	8f 5f       	subi	r24, 0xFF	; 255
    6c4a:	26 ef       	ldi	r18, 0xF6	; 246
    6c4c:	3f ef       	ldi	r19, 0xFF	; 255
    6c4e:	c2 0e       	add	r12, r18
    6c50:	d3 1e       	adc	r13, r19
    6c52:	3a e0       	ldi	r19, 0x0A	; 10
    6c54:	c3 16       	cp	r12, r19
    6c56:	d1 04       	cpc	r13, r1
    6c58:	bc f7       	brge	.-18     	; 0x6c48 <vfprintf+0x40a>
    6c5a:	90 e0       	ldi	r25, 0x00	; 0
    6c5c:	b3 01       	movw	r22, r6
    6c5e:	c2 d3       	rcall	.+1924   	; 0x73e4 <fputc>
    6c60:	c6 01       	movw	r24, r12
    6c62:	c0 96       	adiw	r24, 0x30	; 48
    6c64:	b3 01       	movw	r22, r6
    6c66:	be d3       	rcall	.+1916   	; 0x73e4 <fputc>
    6c68:	cc 84       	ldd	r12, Y+12	; 0x0c
    6c6a:	dd 84       	ldd	r13, Y+13	; 0x0d
    6c6c:	46 c1       	rjmp	.+652    	; 0x6efa <vfprintf+0x6bc>
    6c6e:	93 36       	cpi	r25, 0x63	; 99
    6c70:	31 f0       	breq	.+12     	; 0x6c7e <vfprintf+0x440>
    6c72:	93 37       	cpi	r25, 0x73	; 115
    6c74:	99 f0       	breq	.+38     	; 0x6c9c <vfprintf+0x45e>
    6c76:	93 35       	cpi	r25, 0x53	; 83
    6c78:	09 f0       	breq	.+2      	; 0x6c7c <vfprintf+0x43e>
    6c7a:	55 c0       	rjmp	.+170    	; 0x6d26 <vfprintf+0x4e8>
    6c7c:	22 c0       	rjmp	.+68     	; 0x6cc2 <vfprintf+0x484>
    6c7e:	f6 01       	movw	r30, r12
    6c80:	80 81       	ld	r24, Z
    6c82:	89 83       	std	Y+1, r24	; 0x01
    6c84:	5e 01       	movw	r10, r28
    6c86:	08 94       	sec
    6c88:	a1 1c       	adc	r10, r1
    6c8a:	b1 1c       	adc	r11, r1
    6c8c:	22 e0       	ldi	r18, 0x02	; 2
    6c8e:	30 e0       	ldi	r19, 0x00	; 0
    6c90:	c2 0e       	add	r12, r18
    6c92:	d3 1e       	adc	r13, r19
    6c94:	21 e0       	ldi	r18, 0x01	; 1
    6c96:	e2 2e       	mov	r14, r18
    6c98:	f1 2c       	mov	r15, r1
    6c9a:	11 c0       	rjmp	.+34     	; 0x6cbe <vfprintf+0x480>
    6c9c:	f6 01       	movw	r30, r12
    6c9e:	a0 80       	ld	r10, Z
    6ca0:	b1 80       	ldd	r11, Z+1	; 0x01
    6ca2:	16 fd       	sbrc	r17, 6
    6ca4:	03 c0       	rjmp	.+6      	; 0x6cac <vfprintf+0x46e>
    6ca6:	6f ef       	ldi	r22, 0xFF	; 255
    6ca8:	7f ef       	ldi	r23, 0xFF	; 255
    6caa:	02 c0       	rjmp	.+4      	; 0x6cb0 <vfprintf+0x472>
    6cac:	69 2d       	mov	r22, r9
    6cae:	70 e0       	ldi	r23, 0x00	; 0
    6cb0:	22 e0       	ldi	r18, 0x02	; 2
    6cb2:	30 e0       	ldi	r19, 0x00	; 0
    6cb4:	c2 0e       	add	r12, r18
    6cb6:	d3 1e       	adc	r13, r19
    6cb8:	c5 01       	movw	r24, r10
    6cba:	89 d3       	rcall	.+1810   	; 0x73ce <strnlen>
    6cbc:	7c 01       	movw	r14, r24
    6cbe:	1f 77       	andi	r17, 0x7F	; 127
    6cc0:	12 c0       	rjmp	.+36     	; 0x6ce6 <vfprintf+0x4a8>
    6cc2:	f6 01       	movw	r30, r12
    6cc4:	a0 80       	ld	r10, Z
    6cc6:	b1 80       	ldd	r11, Z+1	; 0x01
    6cc8:	16 fd       	sbrc	r17, 6
    6cca:	03 c0       	rjmp	.+6      	; 0x6cd2 <vfprintf+0x494>
    6ccc:	6f ef       	ldi	r22, 0xFF	; 255
    6cce:	7f ef       	ldi	r23, 0xFF	; 255
    6cd0:	02 c0       	rjmp	.+4      	; 0x6cd6 <vfprintf+0x498>
    6cd2:	69 2d       	mov	r22, r9
    6cd4:	70 e0       	ldi	r23, 0x00	; 0
    6cd6:	22 e0       	ldi	r18, 0x02	; 2
    6cd8:	30 e0       	ldi	r19, 0x00	; 0
    6cda:	c2 0e       	add	r12, r18
    6cdc:	d3 1e       	adc	r13, r19
    6cde:	c5 01       	movw	r24, r10
    6ce0:	6b d3       	rcall	.+1750   	; 0x73b8 <strnlen_P>
    6ce2:	7c 01       	movw	r14, r24
    6ce4:	10 68       	ori	r17, 0x80	; 128
    6ce6:	13 ff       	sbrs	r17, 3
    6ce8:	06 c0       	rjmp	.+12     	; 0x6cf6 <vfprintf+0x4b8>
    6cea:	19 c0       	rjmp	.+50     	; 0x6d1e <vfprintf+0x4e0>
    6cec:	80 e2       	ldi	r24, 0x20	; 32
    6cee:	90 e0       	ldi	r25, 0x00	; 0
    6cf0:	b3 01       	movw	r22, r6
    6cf2:	78 d3       	rcall	.+1776   	; 0x73e4 <fputc>
    6cf4:	8a 94       	dec	r8
    6cf6:	88 2d       	mov	r24, r8
    6cf8:	90 e0       	ldi	r25, 0x00	; 0
    6cfa:	e8 16       	cp	r14, r24
    6cfc:	f9 06       	cpc	r15, r25
    6cfe:	b0 f3       	brcs	.-20     	; 0x6cec <vfprintf+0x4ae>
    6d00:	0e c0       	rjmp	.+28     	; 0x6d1e <vfprintf+0x4e0>
    6d02:	f5 01       	movw	r30, r10
    6d04:	17 fd       	sbrc	r17, 7
    6d06:	85 91       	lpm	r24, Z+
    6d08:	17 ff       	sbrs	r17, 7
    6d0a:	81 91       	ld	r24, Z+
    6d0c:	5f 01       	movw	r10, r30
    6d0e:	90 e0       	ldi	r25, 0x00	; 0
    6d10:	b3 01       	movw	r22, r6
    6d12:	68 d3       	rcall	.+1744   	; 0x73e4 <fputc>
    6d14:	81 10       	cpse	r8, r1
    6d16:	8a 94       	dec	r8
    6d18:	08 94       	sec
    6d1a:	e1 08       	sbc	r14, r1
    6d1c:	f1 08       	sbc	r15, r1
    6d1e:	e1 14       	cp	r14, r1
    6d20:	f1 04       	cpc	r15, r1
    6d22:	79 f7       	brne	.-34     	; 0x6d02 <vfprintf+0x4c4>
    6d24:	ea c0       	rjmp	.+468    	; 0x6efa <vfprintf+0x6bc>
    6d26:	94 36       	cpi	r25, 0x64	; 100
    6d28:	11 f0       	breq	.+4      	; 0x6d2e <vfprintf+0x4f0>
    6d2a:	99 36       	cpi	r25, 0x69	; 105
    6d2c:	81 f5       	brne	.+96     	; 0x6d8e <vfprintf+0x550>
    6d2e:	17 ff       	sbrs	r17, 7
    6d30:	08 c0       	rjmp	.+16     	; 0x6d42 <vfprintf+0x504>
    6d32:	f6 01       	movw	r30, r12
    6d34:	20 81       	ld	r18, Z
    6d36:	31 81       	ldd	r19, Z+1	; 0x01
    6d38:	42 81       	ldd	r20, Z+2	; 0x02
    6d3a:	53 81       	ldd	r21, Z+3	; 0x03
    6d3c:	84 e0       	ldi	r24, 0x04	; 4
    6d3e:	90 e0       	ldi	r25, 0x00	; 0
    6d40:	0a c0       	rjmp	.+20     	; 0x6d56 <vfprintf+0x518>
    6d42:	f6 01       	movw	r30, r12
    6d44:	80 81       	ld	r24, Z
    6d46:	91 81       	ldd	r25, Z+1	; 0x01
    6d48:	9c 01       	movw	r18, r24
    6d4a:	44 27       	eor	r20, r20
    6d4c:	37 fd       	sbrc	r19, 7
    6d4e:	40 95       	com	r20
    6d50:	54 2f       	mov	r21, r20
    6d52:	82 e0       	ldi	r24, 0x02	; 2
    6d54:	90 e0       	ldi	r25, 0x00	; 0
    6d56:	c8 0e       	add	r12, r24
    6d58:	d9 1e       	adc	r13, r25
    6d5a:	9f e6       	ldi	r25, 0x6F	; 111
    6d5c:	f9 2e       	mov	r15, r25
    6d5e:	f1 22       	and	r15, r17
    6d60:	57 ff       	sbrs	r21, 7
    6d62:	09 c0       	rjmp	.+18     	; 0x6d76 <vfprintf+0x538>
    6d64:	50 95       	com	r21
    6d66:	40 95       	com	r20
    6d68:	30 95       	com	r19
    6d6a:	21 95       	neg	r18
    6d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    6d6e:	4f 4f       	sbci	r20, 0xFF	; 255
    6d70:	5f 4f       	sbci	r21, 0xFF	; 255
    6d72:	90 e8       	ldi	r25, 0x80	; 128
    6d74:	f9 2a       	or	r15, r25
    6d76:	ca 01       	movw	r24, r20
    6d78:	b9 01       	movw	r22, r18
    6d7a:	ae 01       	movw	r20, r28
    6d7c:	4f 5f       	subi	r20, 0xFF	; 255
    6d7e:	5f 4f       	sbci	r21, 0xFF	; 255
    6d80:	2a e0       	ldi	r18, 0x0A	; 10
    6d82:	30 e0       	ldi	r19, 0x00	; 0
    6d84:	a2 d3       	rcall	.+1860   	; 0x74ca <__ultoa_invert>
    6d86:	e8 2e       	mov	r14, r24
    6d88:	e8 89       	ldd	r30, Y+16	; 0x10
    6d8a:	ee 1a       	sub	r14, r30
    6d8c:	40 c0       	rjmp	.+128    	; 0x6e0e <vfprintf+0x5d0>
    6d8e:	95 37       	cpi	r25, 0x75	; 117
    6d90:	21 f4       	brne	.+8      	; 0x6d9a <vfprintf+0x55c>
    6d92:	1f 7e       	andi	r17, 0xEF	; 239
    6d94:	2a e0       	ldi	r18, 0x0A	; 10
    6d96:	30 e0       	ldi	r19, 0x00	; 0
    6d98:	1c c0       	rjmp	.+56     	; 0x6dd2 <vfprintf+0x594>
    6d9a:	19 7f       	andi	r17, 0xF9	; 249
    6d9c:	9f 36       	cpi	r25, 0x6F	; 111
    6d9e:	61 f0       	breq	.+24     	; 0x6db8 <vfprintf+0x57a>
    6da0:	90 37       	cpi	r25, 0x70	; 112
    6da2:	20 f4       	brcc	.+8      	; 0x6dac <vfprintf+0x56e>
    6da4:	98 35       	cpi	r25, 0x58	; 88
    6da6:	09 f0       	breq	.+2      	; 0x6daa <vfprintf+0x56c>
    6da8:	ab c0       	rjmp	.+342    	; 0x6f00 <vfprintf+0x6c2>
    6daa:	0f c0       	rjmp	.+30     	; 0x6dca <vfprintf+0x58c>
    6dac:	90 37       	cpi	r25, 0x70	; 112
    6dae:	39 f0       	breq	.+14     	; 0x6dbe <vfprintf+0x580>
    6db0:	98 37       	cpi	r25, 0x78	; 120
    6db2:	09 f0       	breq	.+2      	; 0x6db6 <vfprintf+0x578>
    6db4:	a5 c0       	rjmp	.+330    	; 0x6f00 <vfprintf+0x6c2>
    6db6:	04 c0       	rjmp	.+8      	; 0x6dc0 <vfprintf+0x582>
    6db8:	28 e0       	ldi	r18, 0x08	; 8
    6dba:	30 e0       	ldi	r19, 0x00	; 0
    6dbc:	0a c0       	rjmp	.+20     	; 0x6dd2 <vfprintf+0x594>
    6dbe:	10 61       	ori	r17, 0x10	; 16
    6dc0:	14 fd       	sbrc	r17, 4
    6dc2:	14 60       	ori	r17, 0x04	; 4
    6dc4:	20 e1       	ldi	r18, 0x10	; 16
    6dc6:	30 e0       	ldi	r19, 0x00	; 0
    6dc8:	04 c0       	rjmp	.+8      	; 0x6dd2 <vfprintf+0x594>
    6dca:	14 fd       	sbrc	r17, 4
    6dcc:	16 60       	ori	r17, 0x06	; 6
    6dce:	20 e1       	ldi	r18, 0x10	; 16
    6dd0:	32 e0       	ldi	r19, 0x02	; 2
    6dd2:	17 ff       	sbrs	r17, 7
    6dd4:	08 c0       	rjmp	.+16     	; 0x6de6 <vfprintf+0x5a8>
    6dd6:	f6 01       	movw	r30, r12
    6dd8:	60 81       	ld	r22, Z
    6dda:	71 81       	ldd	r23, Z+1	; 0x01
    6ddc:	82 81       	ldd	r24, Z+2	; 0x02
    6dde:	93 81       	ldd	r25, Z+3	; 0x03
    6de0:	44 e0       	ldi	r20, 0x04	; 4
    6de2:	50 e0       	ldi	r21, 0x00	; 0
    6de4:	08 c0       	rjmp	.+16     	; 0x6df6 <vfprintf+0x5b8>
    6de6:	f6 01       	movw	r30, r12
    6de8:	80 81       	ld	r24, Z
    6dea:	91 81       	ldd	r25, Z+1	; 0x01
    6dec:	bc 01       	movw	r22, r24
    6dee:	80 e0       	ldi	r24, 0x00	; 0
    6df0:	90 e0       	ldi	r25, 0x00	; 0
    6df2:	42 e0       	ldi	r20, 0x02	; 2
    6df4:	50 e0       	ldi	r21, 0x00	; 0
    6df6:	c4 0e       	add	r12, r20
    6df8:	d5 1e       	adc	r13, r21
    6dfa:	ae 01       	movw	r20, r28
    6dfc:	4f 5f       	subi	r20, 0xFF	; 255
    6dfe:	5f 4f       	sbci	r21, 0xFF	; 255
    6e00:	64 d3       	rcall	.+1736   	; 0x74ca <__ultoa_invert>
    6e02:	e8 2e       	mov	r14, r24
    6e04:	58 89       	ldd	r21, Y+16	; 0x10
    6e06:	e5 1a       	sub	r14, r21
    6e08:	8f e7       	ldi	r24, 0x7F	; 127
    6e0a:	f8 2e       	mov	r15, r24
    6e0c:	f1 22       	and	r15, r17
    6e0e:	f6 fe       	sbrs	r15, 6
    6e10:	0b c0       	rjmp	.+22     	; 0x6e28 <vfprintf+0x5ea>
    6e12:	8e ef       	ldi	r24, 0xFE	; 254
    6e14:	f8 22       	and	r15, r24
    6e16:	e9 14       	cp	r14, r9
    6e18:	38 f4       	brcc	.+14     	; 0x6e28 <vfprintf+0x5ea>
    6e1a:	f4 fe       	sbrs	r15, 4
    6e1c:	07 c0       	rjmp	.+14     	; 0x6e2c <vfprintf+0x5ee>
    6e1e:	f2 fc       	sbrc	r15, 2
    6e20:	05 c0       	rjmp	.+10     	; 0x6e2c <vfprintf+0x5ee>
    6e22:	9f ee       	ldi	r25, 0xEF	; 239
    6e24:	f9 22       	and	r15, r25
    6e26:	02 c0       	rjmp	.+4      	; 0x6e2c <vfprintf+0x5ee>
    6e28:	1e 2d       	mov	r17, r14
    6e2a:	01 c0       	rjmp	.+2      	; 0x6e2e <vfprintf+0x5f0>
    6e2c:	19 2d       	mov	r17, r9
    6e2e:	f4 fe       	sbrs	r15, 4
    6e30:	0d c0       	rjmp	.+26     	; 0x6e4c <vfprintf+0x60e>
    6e32:	fe 01       	movw	r30, r28
    6e34:	ee 0d       	add	r30, r14
    6e36:	f1 1d       	adc	r31, r1
    6e38:	80 81       	ld	r24, Z
    6e3a:	80 33       	cpi	r24, 0x30	; 48
    6e3c:	19 f4       	brne	.+6      	; 0x6e44 <vfprintf+0x606>
    6e3e:	e9 ee       	ldi	r30, 0xE9	; 233
    6e40:	fe 22       	and	r15, r30
    6e42:	08 c0       	rjmp	.+16     	; 0x6e54 <vfprintf+0x616>
    6e44:	1f 5f       	subi	r17, 0xFF	; 255
    6e46:	f2 fe       	sbrs	r15, 2
    6e48:	05 c0       	rjmp	.+10     	; 0x6e54 <vfprintf+0x616>
    6e4a:	03 c0       	rjmp	.+6      	; 0x6e52 <vfprintf+0x614>
    6e4c:	8f 2d       	mov	r24, r15
    6e4e:	86 78       	andi	r24, 0x86	; 134
    6e50:	09 f0       	breq	.+2      	; 0x6e54 <vfprintf+0x616>
    6e52:	1f 5f       	subi	r17, 0xFF	; 255
    6e54:	0f 2d       	mov	r16, r15
    6e56:	f3 fc       	sbrc	r15, 3
    6e58:	13 c0       	rjmp	.+38     	; 0x6e80 <vfprintf+0x642>
    6e5a:	f0 fe       	sbrs	r15, 0
    6e5c:	0e c0       	rjmp	.+28     	; 0x6e7a <vfprintf+0x63c>
    6e5e:	18 15       	cp	r17, r8
    6e60:	10 f0       	brcs	.+4      	; 0x6e66 <vfprintf+0x628>
    6e62:	9e 2c       	mov	r9, r14
    6e64:	0a c0       	rjmp	.+20     	; 0x6e7a <vfprintf+0x63c>
    6e66:	9e 2c       	mov	r9, r14
    6e68:	98 0c       	add	r9, r8
    6e6a:	91 1a       	sub	r9, r17
    6e6c:	18 2d       	mov	r17, r8
    6e6e:	05 c0       	rjmp	.+10     	; 0x6e7a <vfprintf+0x63c>
    6e70:	80 e2       	ldi	r24, 0x20	; 32
    6e72:	90 e0       	ldi	r25, 0x00	; 0
    6e74:	b3 01       	movw	r22, r6
    6e76:	b6 d2       	rcall	.+1388   	; 0x73e4 <fputc>
    6e78:	1f 5f       	subi	r17, 0xFF	; 255
    6e7a:	18 15       	cp	r17, r8
    6e7c:	c8 f3       	brcs	.-14     	; 0x6e70 <vfprintf+0x632>
    6e7e:	04 c0       	rjmp	.+8      	; 0x6e88 <vfprintf+0x64a>
    6e80:	18 15       	cp	r17, r8
    6e82:	10 f4       	brcc	.+4      	; 0x6e88 <vfprintf+0x64a>
    6e84:	81 1a       	sub	r8, r17
    6e86:	01 c0       	rjmp	.+2      	; 0x6e8a <vfprintf+0x64c>
    6e88:	88 24       	eor	r8, r8
    6e8a:	04 ff       	sbrs	r16, 4
    6e8c:	0e c0       	rjmp	.+28     	; 0x6eaa <vfprintf+0x66c>
    6e8e:	80 e3       	ldi	r24, 0x30	; 48
    6e90:	90 e0       	ldi	r25, 0x00	; 0
    6e92:	b3 01       	movw	r22, r6
    6e94:	a7 d2       	rcall	.+1358   	; 0x73e4 <fputc>
    6e96:	02 ff       	sbrs	r16, 2
    6e98:	1b c0       	rjmp	.+54     	; 0x6ed0 <vfprintf+0x692>
    6e9a:	01 fd       	sbrc	r16, 1
    6e9c:	03 c0       	rjmp	.+6      	; 0x6ea4 <vfprintf+0x666>
    6e9e:	88 e7       	ldi	r24, 0x78	; 120
    6ea0:	90 e0       	ldi	r25, 0x00	; 0
    6ea2:	0e c0       	rjmp	.+28     	; 0x6ec0 <vfprintf+0x682>
    6ea4:	88 e5       	ldi	r24, 0x58	; 88
    6ea6:	90 e0       	ldi	r25, 0x00	; 0
    6ea8:	0b c0       	rjmp	.+22     	; 0x6ec0 <vfprintf+0x682>
    6eaa:	80 2f       	mov	r24, r16
    6eac:	86 78       	andi	r24, 0x86	; 134
    6eae:	81 f0       	breq	.+32     	; 0x6ed0 <vfprintf+0x692>
    6eb0:	01 ff       	sbrs	r16, 1
    6eb2:	02 c0       	rjmp	.+4      	; 0x6eb8 <vfprintf+0x67a>
    6eb4:	8b e2       	ldi	r24, 0x2B	; 43
    6eb6:	01 c0       	rjmp	.+2      	; 0x6eba <vfprintf+0x67c>
    6eb8:	80 e2       	ldi	r24, 0x20	; 32
    6eba:	f7 fc       	sbrc	r15, 7
    6ebc:	8d e2       	ldi	r24, 0x2D	; 45
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	b3 01       	movw	r22, r6
    6ec2:	90 d2       	rcall	.+1312   	; 0x73e4 <fputc>
    6ec4:	05 c0       	rjmp	.+10     	; 0x6ed0 <vfprintf+0x692>
    6ec6:	80 e3       	ldi	r24, 0x30	; 48
    6ec8:	90 e0       	ldi	r25, 0x00	; 0
    6eca:	b3 01       	movw	r22, r6
    6ecc:	8b d2       	rcall	.+1302   	; 0x73e4 <fputc>
    6ece:	9a 94       	dec	r9
    6ed0:	e9 14       	cp	r14, r9
    6ed2:	c8 f3       	brcs	.-14     	; 0x6ec6 <vfprintf+0x688>
    6ed4:	ea 94       	dec	r14
    6ed6:	e1 e0       	ldi	r30, 0x01	; 1
    6ed8:	f0 e0       	ldi	r31, 0x00	; 0
    6eda:	ec 0f       	add	r30, r28
    6edc:	fd 1f       	adc	r31, r29
    6ede:	ee 0d       	add	r30, r14
    6ee0:	f1 1d       	adc	r31, r1
    6ee2:	80 81       	ld	r24, Z
    6ee4:	90 e0       	ldi	r25, 0x00	; 0
    6ee6:	b3 01       	movw	r22, r6
    6ee8:	7d d2       	rcall	.+1274   	; 0x73e4 <fputc>
    6eea:	ee 20       	and	r14, r14
    6eec:	99 f7       	brne	.-26     	; 0x6ed4 <vfprintf+0x696>
    6eee:	05 c0       	rjmp	.+10     	; 0x6efa <vfprintf+0x6bc>
    6ef0:	80 e2       	ldi	r24, 0x20	; 32
    6ef2:	90 e0       	ldi	r25, 0x00	; 0
    6ef4:	b3 01       	movw	r22, r6
    6ef6:	76 d2       	rcall	.+1260   	; 0x73e4 <fputc>
    6ef8:	8a 94       	dec	r8
    6efa:	88 20       	and	r8, r8
    6efc:	c9 f7       	brne	.-14     	; 0x6ef0 <vfprintf+0x6b2>
    6efe:	b6 cc       	rjmp	.-1684   	; 0x686c <vfprintf+0x2e>
    6f00:	f3 01       	movw	r30, r6
    6f02:	66 81       	ldd	r22, Z+6	; 0x06
    6f04:	77 81       	ldd	r23, Z+7	; 0x07
    6f06:	cb 01       	movw	r24, r22
    6f08:	61 96       	adiw	r28, 0x11	; 17
    6f0a:	e2 e1       	ldi	r30, 0x12	; 18
    6f0c:	5d c0       	rjmp	.+186    	; 0x6fc8 <__epilogue_restores__>

00006f0e <__mulsi3>:
    6f0e:	62 9f       	mul	r22, r18
    6f10:	d0 01       	movw	r26, r0
    6f12:	73 9f       	mul	r23, r19
    6f14:	f0 01       	movw	r30, r0
    6f16:	82 9f       	mul	r24, r18
    6f18:	e0 0d       	add	r30, r0
    6f1a:	f1 1d       	adc	r31, r1
    6f1c:	64 9f       	mul	r22, r20
    6f1e:	e0 0d       	add	r30, r0
    6f20:	f1 1d       	adc	r31, r1
    6f22:	92 9f       	mul	r25, r18
    6f24:	f0 0d       	add	r31, r0
    6f26:	83 9f       	mul	r24, r19
    6f28:	f0 0d       	add	r31, r0
    6f2a:	74 9f       	mul	r23, r20
    6f2c:	f0 0d       	add	r31, r0
    6f2e:	65 9f       	mul	r22, r21
    6f30:	f0 0d       	add	r31, r0
    6f32:	99 27       	eor	r25, r25
    6f34:	72 9f       	mul	r23, r18
    6f36:	b0 0d       	add	r27, r0
    6f38:	e1 1d       	adc	r30, r1
    6f3a:	f9 1f       	adc	r31, r25
    6f3c:	63 9f       	mul	r22, r19
    6f3e:	b0 0d       	add	r27, r0
    6f40:	e1 1d       	adc	r30, r1
    6f42:	f9 1f       	adc	r31, r25
    6f44:	bd 01       	movw	r22, r26
    6f46:	cf 01       	movw	r24, r30
    6f48:	11 24       	eor	r1, r1
    6f4a:	08 95       	ret

00006f4c <__udivmodsi4>:
    6f4c:	a1 e2       	ldi	r26, 0x21	; 33
    6f4e:	1a 2e       	mov	r1, r26
    6f50:	aa 1b       	sub	r26, r26
    6f52:	bb 1b       	sub	r27, r27
    6f54:	fd 01       	movw	r30, r26
    6f56:	0d c0       	rjmp	.+26     	; 0x6f72 <__udivmodsi4_ep>

00006f58 <__udivmodsi4_loop>:
    6f58:	aa 1f       	adc	r26, r26
    6f5a:	bb 1f       	adc	r27, r27
    6f5c:	ee 1f       	adc	r30, r30
    6f5e:	ff 1f       	adc	r31, r31
    6f60:	a2 17       	cp	r26, r18
    6f62:	b3 07       	cpc	r27, r19
    6f64:	e4 07       	cpc	r30, r20
    6f66:	f5 07       	cpc	r31, r21
    6f68:	20 f0       	brcs	.+8      	; 0x6f72 <__udivmodsi4_ep>
    6f6a:	a2 1b       	sub	r26, r18
    6f6c:	b3 0b       	sbc	r27, r19
    6f6e:	e4 0b       	sbc	r30, r20
    6f70:	f5 0b       	sbc	r31, r21

00006f72 <__udivmodsi4_ep>:
    6f72:	66 1f       	adc	r22, r22
    6f74:	77 1f       	adc	r23, r23
    6f76:	88 1f       	adc	r24, r24
    6f78:	99 1f       	adc	r25, r25
    6f7a:	1a 94       	dec	r1
    6f7c:	69 f7       	brne	.-38     	; 0x6f58 <__udivmodsi4_loop>
    6f7e:	60 95       	com	r22
    6f80:	70 95       	com	r23
    6f82:	80 95       	com	r24
    6f84:	90 95       	com	r25
    6f86:	9b 01       	movw	r18, r22
    6f88:	ac 01       	movw	r20, r24
    6f8a:	bd 01       	movw	r22, r26
    6f8c:	cf 01       	movw	r24, r30
    6f8e:	08 95       	ret

00006f90 <__prologue_saves__>:
    6f90:	2f 92       	push	r2
    6f92:	3f 92       	push	r3
    6f94:	4f 92       	push	r4
    6f96:	5f 92       	push	r5
    6f98:	6f 92       	push	r6
    6f9a:	7f 92       	push	r7
    6f9c:	8f 92       	push	r8
    6f9e:	9f 92       	push	r9
    6fa0:	af 92       	push	r10
    6fa2:	bf 92       	push	r11
    6fa4:	cf 92       	push	r12
    6fa6:	df 92       	push	r13
    6fa8:	ef 92       	push	r14
    6faa:	ff 92       	push	r15
    6fac:	0f 93       	push	r16
    6fae:	1f 93       	push	r17
    6fb0:	cf 93       	push	r28
    6fb2:	df 93       	push	r29
    6fb4:	cd b7       	in	r28, 0x3d	; 61
    6fb6:	de b7       	in	r29, 0x3e	; 62
    6fb8:	ca 1b       	sub	r28, r26
    6fba:	db 0b       	sbc	r29, r27
    6fbc:	0f b6       	in	r0, 0x3f	; 63
    6fbe:	f8 94       	cli
    6fc0:	de bf       	out	0x3e, r29	; 62
    6fc2:	0f be       	out	0x3f, r0	; 63
    6fc4:	cd bf       	out	0x3d, r28	; 61
    6fc6:	09 94       	ijmp

00006fc8 <__epilogue_restores__>:
    6fc8:	2a 88       	ldd	r2, Y+18	; 0x12
    6fca:	39 88       	ldd	r3, Y+17	; 0x11
    6fcc:	48 88       	ldd	r4, Y+16	; 0x10
    6fce:	5f 84       	ldd	r5, Y+15	; 0x0f
    6fd0:	6e 84       	ldd	r6, Y+14	; 0x0e
    6fd2:	7d 84       	ldd	r7, Y+13	; 0x0d
    6fd4:	8c 84       	ldd	r8, Y+12	; 0x0c
    6fd6:	9b 84       	ldd	r9, Y+11	; 0x0b
    6fd8:	aa 84       	ldd	r10, Y+10	; 0x0a
    6fda:	b9 84       	ldd	r11, Y+9	; 0x09
    6fdc:	c8 84       	ldd	r12, Y+8	; 0x08
    6fde:	df 80       	ldd	r13, Y+7	; 0x07
    6fe0:	ee 80       	ldd	r14, Y+6	; 0x06
    6fe2:	fd 80       	ldd	r15, Y+5	; 0x05
    6fe4:	0c 81       	ldd	r16, Y+4	; 0x04
    6fe6:	1b 81       	ldd	r17, Y+3	; 0x03
    6fe8:	aa 81       	ldd	r26, Y+2	; 0x02
    6fea:	b9 81       	ldd	r27, Y+1	; 0x01
    6fec:	ce 0f       	add	r28, r30
    6fee:	d1 1d       	adc	r29, r1
    6ff0:	0f b6       	in	r0, 0x3f	; 63
    6ff2:	f8 94       	cli
    6ff4:	de bf       	out	0x3e, r29	; 62
    6ff6:	0f be       	out	0x3f, r0	; 63
    6ff8:	cd bf       	out	0x3d, r28	; 61
    6ffa:	ed 01       	movw	r28, r26
    6ffc:	08 95       	ret

00006ffe <malloc>:
    6ffe:	cf 93       	push	r28
    7000:	df 93       	push	r29
    7002:	bc 01       	movw	r22, r24
    7004:	82 30       	cpi	r24, 0x02	; 2
    7006:	91 05       	cpc	r25, r1
    7008:	10 f4       	brcc	.+4      	; 0x700e <malloc+0x10>
    700a:	62 e0       	ldi	r22, 0x02	; 2
    700c:	70 e0       	ldi	r23, 0x00	; 0
    700e:	a0 91 d2 07 	lds	r26, 0x07D2
    7012:	b0 91 d3 07 	lds	r27, 0x07D3
    7016:	ed 01       	movw	r28, r26
    7018:	e0 e0       	ldi	r30, 0x00	; 0
    701a:	f0 e0       	ldi	r31, 0x00	; 0
    701c:	40 e0       	ldi	r20, 0x00	; 0
    701e:	50 e0       	ldi	r21, 0x00	; 0
    7020:	21 c0       	rjmp	.+66     	; 0x7064 <malloc+0x66>
    7022:	88 81       	ld	r24, Y
    7024:	99 81       	ldd	r25, Y+1	; 0x01
    7026:	86 17       	cp	r24, r22
    7028:	97 07       	cpc	r25, r23
    702a:	69 f4       	brne	.+26     	; 0x7046 <malloc+0x48>
    702c:	8a 81       	ldd	r24, Y+2	; 0x02
    702e:	9b 81       	ldd	r25, Y+3	; 0x03
    7030:	30 97       	sbiw	r30, 0x00	; 0
    7032:	19 f0       	breq	.+6      	; 0x703a <malloc+0x3c>
    7034:	93 83       	std	Z+3, r25	; 0x03
    7036:	82 83       	std	Z+2, r24	; 0x02
    7038:	04 c0       	rjmp	.+8      	; 0x7042 <malloc+0x44>
    703a:	90 93 d3 07 	sts	0x07D3, r25
    703e:	80 93 d2 07 	sts	0x07D2, r24
    7042:	fe 01       	movw	r30, r28
    7044:	34 c0       	rjmp	.+104    	; 0x70ae <malloc+0xb0>
    7046:	68 17       	cp	r22, r24
    7048:	79 07       	cpc	r23, r25
    704a:	38 f4       	brcc	.+14     	; 0x705a <malloc+0x5c>
    704c:	41 15       	cp	r20, r1
    704e:	51 05       	cpc	r21, r1
    7050:	19 f0       	breq	.+6      	; 0x7058 <malloc+0x5a>
    7052:	84 17       	cp	r24, r20
    7054:	95 07       	cpc	r25, r21
    7056:	08 f4       	brcc	.+2      	; 0x705a <malloc+0x5c>
    7058:	ac 01       	movw	r20, r24
    705a:	fe 01       	movw	r30, r28
    705c:	8a 81       	ldd	r24, Y+2	; 0x02
    705e:	9b 81       	ldd	r25, Y+3	; 0x03
    7060:	9c 01       	movw	r18, r24
    7062:	e9 01       	movw	r28, r18
    7064:	20 97       	sbiw	r28, 0x00	; 0
    7066:	e9 f6       	brne	.-70     	; 0x7022 <malloc+0x24>
    7068:	41 15       	cp	r20, r1
    706a:	51 05       	cpc	r21, r1
    706c:	a9 f1       	breq	.+106    	; 0x70d8 <malloc+0xda>
    706e:	ca 01       	movw	r24, r20
    7070:	86 1b       	sub	r24, r22
    7072:	97 0b       	sbc	r25, r23
    7074:	04 97       	sbiw	r24, 0x04	; 4
    7076:	08 f4       	brcc	.+2      	; 0x707a <malloc+0x7c>
    7078:	ba 01       	movw	r22, r20
    707a:	e0 e0       	ldi	r30, 0x00	; 0
    707c:	f0 e0       	ldi	r31, 0x00	; 0
    707e:	2a c0       	rjmp	.+84     	; 0x70d4 <malloc+0xd6>
    7080:	8d 91       	ld	r24, X+
    7082:	9c 91       	ld	r25, X
    7084:	11 97       	sbiw	r26, 0x01	; 1
    7086:	84 17       	cp	r24, r20
    7088:	95 07       	cpc	r25, r21
    708a:	f9 f4       	brne	.+62     	; 0x70ca <malloc+0xcc>
    708c:	64 17       	cp	r22, r20
    708e:	75 07       	cpc	r23, r21
    7090:	81 f4       	brne	.+32     	; 0x70b2 <malloc+0xb4>
    7092:	12 96       	adiw	r26, 0x02	; 2
    7094:	8d 91       	ld	r24, X+
    7096:	9c 91       	ld	r25, X
    7098:	13 97       	sbiw	r26, 0x03	; 3
    709a:	30 97       	sbiw	r30, 0x00	; 0
    709c:	19 f0       	breq	.+6      	; 0x70a4 <malloc+0xa6>
    709e:	93 83       	std	Z+3, r25	; 0x03
    70a0:	82 83       	std	Z+2, r24	; 0x02
    70a2:	04 c0       	rjmp	.+8      	; 0x70ac <malloc+0xae>
    70a4:	90 93 d3 07 	sts	0x07D3, r25
    70a8:	80 93 d2 07 	sts	0x07D2, r24
    70ac:	fd 01       	movw	r30, r26
    70ae:	32 96       	adiw	r30, 0x02	; 2
    70b0:	4f c0       	rjmp	.+158    	; 0x7150 <malloc+0x152>
    70b2:	ca 01       	movw	r24, r20
    70b4:	86 1b       	sub	r24, r22
    70b6:	97 0b       	sbc	r25, r23
    70b8:	fd 01       	movw	r30, r26
    70ba:	e8 0f       	add	r30, r24
    70bc:	f9 1f       	adc	r31, r25
    70be:	61 93       	st	Z+, r22
    70c0:	71 93       	st	Z+, r23
    70c2:	02 97       	sbiw	r24, 0x02	; 2
    70c4:	8d 93       	st	X+, r24
    70c6:	9c 93       	st	X, r25
    70c8:	43 c0       	rjmp	.+134    	; 0x7150 <malloc+0x152>
    70ca:	fd 01       	movw	r30, r26
    70cc:	82 81       	ldd	r24, Z+2	; 0x02
    70ce:	93 81       	ldd	r25, Z+3	; 0x03
    70d0:	9c 01       	movw	r18, r24
    70d2:	d9 01       	movw	r26, r18
    70d4:	10 97       	sbiw	r26, 0x00	; 0
    70d6:	a1 f6       	brne	.-88     	; 0x7080 <malloc+0x82>
    70d8:	80 91 d0 07 	lds	r24, 0x07D0
    70dc:	90 91 d1 07 	lds	r25, 0x07D1
    70e0:	89 2b       	or	r24, r25
    70e2:	41 f4       	brne	.+16     	; 0x70f4 <malloc+0xf6>
    70e4:	80 91 fe 03 	lds	r24, 0x03FE
    70e8:	90 91 ff 03 	lds	r25, 0x03FF
    70ec:	90 93 d1 07 	sts	0x07D1, r25
    70f0:	80 93 d0 07 	sts	0x07D0, r24
    70f4:	40 91 00 04 	lds	r20, 0x0400
    70f8:	50 91 01 04 	lds	r21, 0x0401
    70fc:	41 15       	cp	r20, r1
    70fe:	51 05       	cpc	r21, r1
    7100:	41 f4       	brne	.+16     	; 0x7112 <malloc+0x114>
    7102:	4d b7       	in	r20, 0x3d	; 61
    7104:	5e b7       	in	r21, 0x3e	; 62
    7106:	80 91 fc 03 	lds	r24, 0x03FC
    710a:	90 91 fd 03 	lds	r25, 0x03FD
    710e:	48 1b       	sub	r20, r24
    7110:	59 0b       	sbc	r21, r25
    7112:	20 91 d0 07 	lds	r18, 0x07D0
    7116:	30 91 d1 07 	lds	r19, 0x07D1
    711a:	24 17       	cp	r18, r20
    711c:	35 07       	cpc	r19, r21
    711e:	b0 f4       	brcc	.+44     	; 0x714c <malloc+0x14e>
    7120:	ca 01       	movw	r24, r20
    7122:	82 1b       	sub	r24, r18
    7124:	93 0b       	sbc	r25, r19
    7126:	86 17       	cp	r24, r22
    7128:	97 07       	cpc	r25, r23
    712a:	80 f0       	brcs	.+32     	; 0x714c <malloc+0x14e>
    712c:	ab 01       	movw	r20, r22
    712e:	4e 5f       	subi	r20, 0xFE	; 254
    7130:	5f 4f       	sbci	r21, 0xFF	; 255
    7132:	84 17       	cp	r24, r20
    7134:	95 07       	cpc	r25, r21
    7136:	50 f0       	brcs	.+20     	; 0x714c <malloc+0x14e>
    7138:	42 0f       	add	r20, r18
    713a:	53 1f       	adc	r21, r19
    713c:	50 93 d1 07 	sts	0x07D1, r21
    7140:	40 93 d0 07 	sts	0x07D0, r20
    7144:	f9 01       	movw	r30, r18
    7146:	61 93       	st	Z+, r22
    7148:	71 93       	st	Z+, r23
    714a:	02 c0       	rjmp	.+4      	; 0x7150 <malloc+0x152>
    714c:	e0 e0       	ldi	r30, 0x00	; 0
    714e:	f0 e0       	ldi	r31, 0x00	; 0
    7150:	cf 01       	movw	r24, r30
    7152:	df 91       	pop	r29
    7154:	cf 91       	pop	r28
    7156:	08 95       	ret

00007158 <free>:
    7158:	cf 93       	push	r28
    715a:	df 93       	push	r29
    715c:	00 97       	sbiw	r24, 0x00	; 0
    715e:	09 f4       	brne	.+2      	; 0x7162 <free+0xa>
    7160:	50 c0       	rjmp	.+160    	; 0x7202 <free+0xaa>
    7162:	ec 01       	movw	r28, r24
    7164:	22 97       	sbiw	r28, 0x02	; 2
    7166:	1b 82       	std	Y+3, r1	; 0x03
    7168:	1a 82       	std	Y+2, r1	; 0x02
    716a:	a0 91 d2 07 	lds	r26, 0x07D2
    716e:	b0 91 d3 07 	lds	r27, 0x07D3
    7172:	10 97       	sbiw	r26, 0x00	; 0
    7174:	09 f1       	breq	.+66     	; 0x71b8 <free+0x60>
    7176:	40 e0       	ldi	r20, 0x00	; 0
    7178:	50 e0       	ldi	r21, 0x00	; 0
    717a:	ac 17       	cp	r26, r28
    717c:	bd 07       	cpc	r27, r29
    717e:	08 f1       	brcs	.+66     	; 0x71c2 <free+0x6a>
    7180:	bb 83       	std	Y+3, r27	; 0x03
    7182:	aa 83       	std	Y+2, r26	; 0x02
    7184:	fe 01       	movw	r30, r28
    7186:	21 91       	ld	r18, Z+
    7188:	31 91       	ld	r19, Z+
    718a:	e2 0f       	add	r30, r18
    718c:	f3 1f       	adc	r31, r19
    718e:	ae 17       	cp	r26, r30
    7190:	bf 07       	cpc	r27, r31
    7192:	79 f4       	brne	.+30     	; 0x71b2 <free+0x5a>
    7194:	8d 91       	ld	r24, X+
    7196:	9c 91       	ld	r25, X
    7198:	11 97       	sbiw	r26, 0x01	; 1
    719a:	28 0f       	add	r18, r24
    719c:	39 1f       	adc	r19, r25
    719e:	2e 5f       	subi	r18, 0xFE	; 254
    71a0:	3f 4f       	sbci	r19, 0xFF	; 255
    71a2:	39 83       	std	Y+1, r19	; 0x01
    71a4:	28 83       	st	Y, r18
    71a6:	12 96       	adiw	r26, 0x02	; 2
    71a8:	8d 91       	ld	r24, X+
    71aa:	9c 91       	ld	r25, X
    71ac:	13 97       	sbiw	r26, 0x03	; 3
    71ae:	9b 83       	std	Y+3, r25	; 0x03
    71b0:	8a 83       	std	Y+2, r24	; 0x02
    71b2:	41 15       	cp	r20, r1
    71b4:	51 05       	cpc	r21, r1
    71b6:	71 f4       	brne	.+28     	; 0x71d4 <free+0x7c>
    71b8:	d0 93 d3 07 	sts	0x07D3, r29
    71bc:	c0 93 d2 07 	sts	0x07D2, r28
    71c0:	20 c0       	rjmp	.+64     	; 0x7202 <free+0xaa>
    71c2:	12 96       	adiw	r26, 0x02	; 2
    71c4:	8d 91       	ld	r24, X+
    71c6:	9c 91       	ld	r25, X
    71c8:	13 97       	sbiw	r26, 0x03	; 3
    71ca:	ad 01       	movw	r20, r26
    71cc:	00 97       	sbiw	r24, 0x00	; 0
    71ce:	11 f0       	breq	.+4      	; 0x71d4 <free+0x7c>
    71d0:	dc 01       	movw	r26, r24
    71d2:	d3 cf       	rjmp	.-90     	; 0x717a <free+0x22>
    71d4:	fa 01       	movw	r30, r20
    71d6:	d3 83       	std	Z+3, r29	; 0x03
    71d8:	c2 83       	std	Z+2, r28	; 0x02
    71da:	21 91       	ld	r18, Z+
    71dc:	31 91       	ld	r19, Z+
    71de:	e2 0f       	add	r30, r18
    71e0:	f3 1f       	adc	r31, r19
    71e2:	ce 17       	cp	r28, r30
    71e4:	df 07       	cpc	r29, r31
    71e6:	69 f4       	brne	.+26     	; 0x7202 <free+0xaa>
    71e8:	88 81       	ld	r24, Y
    71ea:	99 81       	ldd	r25, Y+1	; 0x01
    71ec:	28 0f       	add	r18, r24
    71ee:	39 1f       	adc	r19, r25
    71f0:	2e 5f       	subi	r18, 0xFE	; 254
    71f2:	3f 4f       	sbci	r19, 0xFF	; 255
    71f4:	fa 01       	movw	r30, r20
    71f6:	31 83       	std	Z+1, r19	; 0x01
    71f8:	20 83       	st	Z, r18
    71fa:	8a 81       	ldd	r24, Y+2	; 0x02
    71fc:	9b 81       	ldd	r25, Y+3	; 0x03
    71fe:	93 83       	std	Z+3, r25	; 0x03
    7200:	82 83       	std	Z+2, r24	; 0x02
    7202:	df 91       	pop	r29
    7204:	cf 91       	pop	r28
    7206:	08 95       	ret

00007208 <__ftoa_engine>:
    7208:	28 30       	cpi	r18, 0x08	; 8
    720a:	08 f0       	brcs	.+2      	; 0x720e <__ftoa_engine+0x6>
    720c:	27 e0       	ldi	r18, 0x07	; 7
    720e:	33 27       	eor	r19, r19
    7210:	da 01       	movw	r26, r20
    7212:	99 0f       	add	r25, r25
    7214:	31 1d       	adc	r19, r1
    7216:	87 fd       	sbrc	r24, 7
    7218:	91 60       	ori	r25, 0x01	; 1
    721a:	00 96       	adiw	r24, 0x00	; 0
    721c:	61 05       	cpc	r22, r1
    721e:	71 05       	cpc	r23, r1
    7220:	39 f4       	brne	.+14     	; 0x7230 <__ftoa_engine+0x28>
    7222:	32 60       	ori	r19, 0x02	; 2
    7224:	2e 5f       	subi	r18, 0xFE	; 254
    7226:	3d 93       	st	X+, r19
    7228:	30 e3       	ldi	r19, 0x30	; 48
    722a:	2a 95       	dec	r18
    722c:	e1 f7       	brne	.-8      	; 0x7226 <__ftoa_engine+0x1e>
    722e:	08 95       	ret
    7230:	9f 3f       	cpi	r25, 0xFF	; 255
    7232:	30 f0       	brcs	.+12     	; 0x7240 <__ftoa_engine+0x38>
    7234:	80 38       	cpi	r24, 0x80	; 128
    7236:	71 05       	cpc	r23, r1
    7238:	61 05       	cpc	r22, r1
    723a:	09 f0       	breq	.+2      	; 0x723e <__ftoa_engine+0x36>
    723c:	3c 5f       	subi	r19, 0xFC	; 252
    723e:	3c 5f       	subi	r19, 0xFC	; 252
    7240:	3d 93       	st	X+, r19
    7242:	91 30       	cpi	r25, 0x01	; 1
    7244:	08 f0       	brcs	.+2      	; 0x7248 <__ftoa_engine+0x40>
    7246:	80 68       	ori	r24, 0x80	; 128
    7248:	91 1d       	adc	r25, r1
    724a:	df 93       	push	r29
    724c:	cf 93       	push	r28
    724e:	1f 93       	push	r17
    7250:	0f 93       	push	r16
    7252:	ff 92       	push	r15
    7254:	ef 92       	push	r14
    7256:	19 2f       	mov	r17, r25
    7258:	98 7f       	andi	r25, 0xF8	; 248
    725a:	96 95       	lsr	r25
    725c:	e9 2f       	mov	r30, r25
    725e:	96 95       	lsr	r25
    7260:	96 95       	lsr	r25
    7262:	e9 0f       	add	r30, r25
    7264:	ff 27       	eor	r31, r31
    7266:	ef 53       	subi	r30, 0x3F	; 63
    7268:	fa 4f       	sbci	r31, 0xFA	; 250
    726a:	99 27       	eor	r25, r25
    726c:	33 27       	eor	r19, r19
    726e:	ee 24       	eor	r14, r14
    7270:	ff 24       	eor	r15, r15
    7272:	a7 01       	movw	r20, r14
    7274:	e7 01       	movw	r28, r14
    7276:	05 90       	lpm	r0, Z+
    7278:	08 94       	sec
    727a:	07 94       	ror	r0
    727c:	28 f4       	brcc	.+10     	; 0x7288 <__ftoa_engine+0x80>
    727e:	36 0f       	add	r19, r22
    7280:	e7 1e       	adc	r14, r23
    7282:	f8 1e       	adc	r15, r24
    7284:	49 1f       	adc	r20, r25
    7286:	51 1d       	adc	r21, r1
    7288:	66 0f       	add	r22, r22
    728a:	77 1f       	adc	r23, r23
    728c:	88 1f       	adc	r24, r24
    728e:	99 1f       	adc	r25, r25
    7290:	06 94       	lsr	r0
    7292:	a1 f7       	brne	.-24     	; 0x727c <__ftoa_engine+0x74>
    7294:	05 90       	lpm	r0, Z+
    7296:	07 94       	ror	r0
    7298:	28 f4       	brcc	.+10     	; 0x72a4 <__ftoa_engine+0x9c>
    729a:	e7 0e       	add	r14, r23
    729c:	f8 1e       	adc	r15, r24
    729e:	49 1f       	adc	r20, r25
    72a0:	56 1f       	adc	r21, r22
    72a2:	c1 1d       	adc	r28, r1
    72a4:	77 0f       	add	r23, r23
    72a6:	88 1f       	adc	r24, r24
    72a8:	99 1f       	adc	r25, r25
    72aa:	66 1f       	adc	r22, r22
    72ac:	06 94       	lsr	r0
    72ae:	a1 f7       	brne	.-24     	; 0x7298 <__ftoa_engine+0x90>
    72b0:	05 90       	lpm	r0, Z+
    72b2:	07 94       	ror	r0
    72b4:	28 f4       	brcc	.+10     	; 0x72c0 <__ftoa_engine+0xb8>
    72b6:	f8 0e       	add	r15, r24
    72b8:	49 1f       	adc	r20, r25
    72ba:	56 1f       	adc	r21, r22
    72bc:	c7 1f       	adc	r28, r23
    72be:	d1 1d       	adc	r29, r1
    72c0:	88 0f       	add	r24, r24
    72c2:	99 1f       	adc	r25, r25
    72c4:	66 1f       	adc	r22, r22
    72c6:	77 1f       	adc	r23, r23
    72c8:	06 94       	lsr	r0
    72ca:	a1 f7       	brne	.-24     	; 0x72b4 <__ftoa_engine+0xac>
    72cc:	05 90       	lpm	r0, Z+
    72ce:	07 94       	ror	r0
    72d0:	20 f4       	brcc	.+8      	; 0x72da <__ftoa_engine+0xd2>
    72d2:	49 0f       	add	r20, r25
    72d4:	56 1f       	adc	r21, r22
    72d6:	c7 1f       	adc	r28, r23
    72d8:	d8 1f       	adc	r29, r24
    72da:	99 0f       	add	r25, r25
    72dc:	66 1f       	adc	r22, r22
    72de:	77 1f       	adc	r23, r23
    72e0:	88 1f       	adc	r24, r24
    72e2:	06 94       	lsr	r0
    72e4:	a9 f7       	brne	.-22     	; 0x72d0 <__ftoa_engine+0xc8>
    72e6:	84 91       	lpm	r24, Z+
    72e8:	10 95       	com	r17
    72ea:	17 70       	andi	r17, 0x07	; 7
    72ec:	41 f0       	breq	.+16     	; 0x72fe <__ftoa_engine+0xf6>
    72ee:	d6 95       	lsr	r29
    72f0:	c7 95       	ror	r28
    72f2:	57 95       	ror	r21
    72f4:	47 95       	ror	r20
    72f6:	f7 94       	ror	r15
    72f8:	e7 94       	ror	r14
    72fa:	1a 95       	dec	r17
    72fc:	c1 f7       	brne	.-16     	; 0x72ee <__ftoa_engine+0xe6>
    72fe:	e7 e6       	ldi	r30, 0x67	; 103
    7300:	f5 e0       	ldi	r31, 0x05	; 5
    7302:	68 94       	set
    7304:	15 90       	lpm	r1, Z+
    7306:	15 91       	lpm	r17, Z+
    7308:	35 91       	lpm	r19, Z+
    730a:	65 91       	lpm	r22, Z+
    730c:	95 91       	lpm	r25, Z+
    730e:	05 90       	lpm	r0, Z+
    7310:	7f e2       	ldi	r23, 0x2F	; 47
    7312:	73 95       	inc	r23
    7314:	e1 18       	sub	r14, r1
    7316:	f1 0a       	sbc	r15, r17
    7318:	43 0b       	sbc	r20, r19
    731a:	56 0b       	sbc	r21, r22
    731c:	c9 0b       	sbc	r28, r25
    731e:	d0 09       	sbc	r29, r0
    7320:	c0 f7       	brcc	.-16     	; 0x7312 <__ftoa_engine+0x10a>
    7322:	e1 0c       	add	r14, r1
    7324:	f1 1e       	adc	r15, r17
    7326:	43 1f       	adc	r20, r19
    7328:	56 1f       	adc	r21, r22
    732a:	c9 1f       	adc	r28, r25
    732c:	d0 1d       	adc	r29, r0
    732e:	7e f4       	brtc	.+30     	; 0x734e <__ftoa_engine+0x146>
    7330:	70 33       	cpi	r23, 0x30	; 48
    7332:	11 f4       	brne	.+4      	; 0x7338 <__ftoa_engine+0x130>
    7334:	8a 95       	dec	r24
    7336:	e6 cf       	rjmp	.-52     	; 0x7304 <__ftoa_engine+0xfc>
    7338:	e8 94       	clt
    733a:	01 50       	subi	r16, 0x01	; 1
    733c:	30 f0       	brcs	.+12     	; 0x734a <__ftoa_engine+0x142>
    733e:	08 0f       	add	r16, r24
    7340:	0a f4       	brpl	.+2      	; 0x7344 <__ftoa_engine+0x13c>
    7342:	00 27       	eor	r16, r16
    7344:	02 17       	cp	r16, r18
    7346:	08 f4       	brcc	.+2      	; 0x734a <__ftoa_engine+0x142>
    7348:	20 2f       	mov	r18, r16
    734a:	23 95       	inc	r18
    734c:	02 2f       	mov	r16, r18
    734e:	7a 33       	cpi	r23, 0x3A	; 58
    7350:	28 f0       	brcs	.+10     	; 0x735c <__ftoa_engine+0x154>
    7352:	79 e3       	ldi	r23, 0x39	; 57
    7354:	7d 93       	st	X+, r23
    7356:	2a 95       	dec	r18
    7358:	e9 f7       	brne	.-6      	; 0x7354 <__ftoa_engine+0x14c>
    735a:	10 c0       	rjmp	.+32     	; 0x737c <__ftoa_engine+0x174>
    735c:	7d 93       	st	X+, r23
    735e:	2a 95       	dec	r18
    7360:	89 f6       	brne	.-94     	; 0x7304 <__ftoa_engine+0xfc>
    7362:	06 94       	lsr	r0
    7364:	97 95       	ror	r25
    7366:	67 95       	ror	r22
    7368:	37 95       	ror	r19
    736a:	17 95       	ror	r17
    736c:	17 94       	ror	r1
    736e:	e1 18       	sub	r14, r1
    7370:	f1 0a       	sbc	r15, r17
    7372:	43 0b       	sbc	r20, r19
    7374:	56 0b       	sbc	r21, r22
    7376:	c9 0b       	sbc	r28, r25
    7378:	d0 09       	sbc	r29, r0
    737a:	98 f0       	brcs	.+38     	; 0x73a2 <__ftoa_engine+0x19a>
    737c:	23 95       	inc	r18
    737e:	7e 91       	ld	r23, -X
    7380:	73 95       	inc	r23
    7382:	7a 33       	cpi	r23, 0x3A	; 58
    7384:	08 f0       	brcs	.+2      	; 0x7388 <__ftoa_engine+0x180>
    7386:	70 e3       	ldi	r23, 0x30	; 48
    7388:	7c 93       	st	X, r23
    738a:	20 13       	cpse	r18, r16
    738c:	b8 f7       	brcc	.-18     	; 0x737c <__ftoa_engine+0x174>
    738e:	7e 91       	ld	r23, -X
    7390:	70 61       	ori	r23, 0x10	; 16
    7392:	7d 93       	st	X+, r23
    7394:	30 f0       	brcs	.+12     	; 0x73a2 <__ftoa_engine+0x19a>
    7396:	83 95       	inc	r24
    7398:	71 e3       	ldi	r23, 0x31	; 49
    739a:	7d 93       	st	X+, r23
    739c:	70 e3       	ldi	r23, 0x30	; 48
    739e:	2a 95       	dec	r18
    73a0:	e1 f7       	brne	.-8      	; 0x739a <__ftoa_engine+0x192>
    73a2:	11 24       	eor	r1, r1
    73a4:	ef 90       	pop	r14
    73a6:	ff 90       	pop	r15
    73a8:	0f 91       	pop	r16
    73aa:	1f 91       	pop	r17
    73ac:	cf 91       	pop	r28
    73ae:	df 91       	pop	r29
    73b0:	99 27       	eor	r25, r25
    73b2:	87 fd       	sbrc	r24, 7
    73b4:	90 95       	com	r25
    73b6:	08 95       	ret

000073b8 <strnlen_P>:
    73b8:	fc 01       	movw	r30, r24
    73ba:	05 90       	lpm	r0, Z+
    73bc:	61 50       	subi	r22, 0x01	; 1
    73be:	70 40       	sbci	r23, 0x00	; 0
    73c0:	01 10       	cpse	r0, r1
    73c2:	d8 f7       	brcc	.-10     	; 0x73ba <strnlen_P+0x2>
    73c4:	80 95       	com	r24
    73c6:	90 95       	com	r25
    73c8:	8e 0f       	add	r24, r30
    73ca:	9f 1f       	adc	r25, r31
    73cc:	08 95       	ret

000073ce <strnlen>:
    73ce:	fc 01       	movw	r30, r24
    73d0:	61 50       	subi	r22, 0x01	; 1
    73d2:	70 40       	sbci	r23, 0x00	; 0
    73d4:	01 90       	ld	r0, Z+
    73d6:	01 10       	cpse	r0, r1
    73d8:	d8 f7       	brcc	.-10     	; 0x73d0 <strnlen+0x2>
    73da:	80 95       	com	r24
    73dc:	90 95       	com	r25
    73de:	8e 0f       	add	r24, r30
    73e0:	9f 1f       	adc	r25, r31
    73e2:	08 95       	ret

000073e4 <fputc>:
    73e4:	0f 93       	push	r16
    73e6:	1f 93       	push	r17
    73e8:	cf 93       	push	r28
    73ea:	df 93       	push	r29
    73ec:	8c 01       	movw	r16, r24
    73ee:	eb 01       	movw	r28, r22
    73f0:	8b 81       	ldd	r24, Y+3	; 0x03
    73f2:	81 ff       	sbrs	r24, 1
    73f4:	1b c0       	rjmp	.+54     	; 0x742c <fputc+0x48>
    73f6:	82 ff       	sbrs	r24, 2
    73f8:	0d c0       	rjmp	.+26     	; 0x7414 <fputc+0x30>
    73fa:	2e 81       	ldd	r18, Y+6	; 0x06
    73fc:	3f 81       	ldd	r19, Y+7	; 0x07
    73fe:	8c 81       	ldd	r24, Y+4	; 0x04
    7400:	9d 81       	ldd	r25, Y+5	; 0x05
    7402:	28 17       	cp	r18, r24
    7404:	39 07       	cpc	r19, r25
    7406:	64 f4       	brge	.+24     	; 0x7420 <fputc+0x3c>
    7408:	e8 81       	ld	r30, Y
    740a:	f9 81       	ldd	r31, Y+1	; 0x01
    740c:	01 93       	st	Z+, r16
    740e:	f9 83       	std	Y+1, r31	; 0x01
    7410:	e8 83       	st	Y, r30
    7412:	06 c0       	rjmp	.+12     	; 0x7420 <fputc+0x3c>
    7414:	e8 85       	ldd	r30, Y+8	; 0x08
    7416:	f9 85       	ldd	r31, Y+9	; 0x09
    7418:	80 2f       	mov	r24, r16
    741a:	09 95       	icall
    741c:	89 2b       	or	r24, r25
    741e:	31 f4       	brne	.+12     	; 0x742c <fputc+0x48>
    7420:	8e 81       	ldd	r24, Y+6	; 0x06
    7422:	9f 81       	ldd	r25, Y+7	; 0x07
    7424:	01 96       	adiw	r24, 0x01	; 1
    7426:	9f 83       	std	Y+7, r25	; 0x07
    7428:	8e 83       	std	Y+6, r24	; 0x06
    742a:	02 c0       	rjmp	.+4      	; 0x7430 <fputc+0x4c>
    742c:	0f ef       	ldi	r16, 0xFF	; 255
    742e:	1f ef       	ldi	r17, 0xFF	; 255
    7430:	c8 01       	movw	r24, r16
    7432:	df 91       	pop	r29
    7434:	cf 91       	pop	r28
    7436:	1f 91       	pop	r17
    7438:	0f 91       	pop	r16
    743a:	08 95       	ret

0000743c <printf>:
    743c:	a0 e0       	ldi	r26, 0x00	; 0
    743e:	b0 e0       	ldi	r27, 0x00	; 0
    7440:	e3 e2       	ldi	r30, 0x23	; 35
    7442:	fa e3       	ldi	r31, 0x3A	; 58
    7444:	b5 cd       	rjmp	.-1174   	; 0x6fb0 <__prologue_saves__+0x20>
    7446:	fe 01       	movw	r30, r28
    7448:	35 96       	adiw	r30, 0x05	; 5
    744a:	61 91       	ld	r22, Z+
    744c:	71 91       	ld	r23, Z+
    744e:	80 91 d6 07 	lds	r24, 0x07D6
    7452:	90 91 d7 07 	lds	r25, 0x07D7
    7456:	af 01       	movw	r20, r30
    7458:	f2 d9       	rcall	.-3100   	; 0x683e <vfprintf>
    745a:	20 96       	adiw	r28, 0x00	; 0
    745c:	e2 e0       	ldi	r30, 0x02	; 2
    745e:	c4 cd       	rjmp	.-1144   	; 0x6fe8 <__epilogue_restores__+0x20>

00007460 <puts>:
    7460:	0f 93       	push	r16
    7462:	1f 93       	push	r17
    7464:	cf 93       	push	r28
    7466:	df 93       	push	r29
    7468:	8c 01       	movw	r16, r24
    746a:	e0 91 d6 07 	lds	r30, 0x07D6
    746e:	f0 91 d7 07 	lds	r31, 0x07D7
    7472:	83 81       	ldd	r24, Z+3	; 0x03
    7474:	81 ff       	sbrs	r24, 1
    7476:	21 c0       	rjmp	.+66     	; 0x74ba <puts+0x5a>
    7478:	c0 e0       	ldi	r28, 0x00	; 0
    747a:	d0 e0       	ldi	r29, 0x00	; 0
    747c:	0d c0       	rjmp	.+26     	; 0x7498 <puts+0x38>
    747e:	e0 91 d6 07 	lds	r30, 0x07D6
    7482:	f0 91 d7 07 	lds	r31, 0x07D7
    7486:	20 85       	ldd	r18, Z+8	; 0x08
    7488:	31 85       	ldd	r19, Z+9	; 0x09
    748a:	bf 01       	movw	r22, r30
    748c:	f9 01       	movw	r30, r18
    748e:	09 95       	icall
    7490:	89 2b       	or	r24, r25
    7492:	11 f0       	breq	.+4      	; 0x7498 <puts+0x38>
    7494:	cf ef       	ldi	r28, 0xFF	; 255
    7496:	df ef       	ldi	r29, 0xFF	; 255
    7498:	f8 01       	movw	r30, r16
    749a:	81 91       	ld	r24, Z+
    749c:	8f 01       	movw	r16, r30
    749e:	88 23       	and	r24, r24
    74a0:	71 f7       	brne	.-36     	; 0x747e <puts+0x1e>
    74a2:	e0 91 d6 07 	lds	r30, 0x07D6
    74a6:	f0 91 d7 07 	lds	r31, 0x07D7
    74aa:	20 85       	ldd	r18, Z+8	; 0x08
    74ac:	31 85       	ldd	r19, Z+9	; 0x09
    74ae:	8a e0       	ldi	r24, 0x0A	; 10
    74b0:	bf 01       	movw	r22, r30
    74b2:	f9 01       	movw	r30, r18
    74b4:	09 95       	icall
    74b6:	89 2b       	or	r24, r25
    74b8:	11 f0       	breq	.+4      	; 0x74be <puts+0x5e>
    74ba:	cf ef       	ldi	r28, 0xFF	; 255
    74bc:	df ef       	ldi	r29, 0xFF	; 255
    74be:	ce 01       	movw	r24, r28
    74c0:	df 91       	pop	r29
    74c2:	cf 91       	pop	r28
    74c4:	1f 91       	pop	r17
    74c6:	0f 91       	pop	r16
    74c8:	08 95       	ret

000074ca <__ultoa_invert>:
    74ca:	fa 01       	movw	r30, r20
    74cc:	aa 27       	eor	r26, r26
    74ce:	28 30       	cpi	r18, 0x08	; 8
    74d0:	51 f1       	breq	.+84     	; 0x7526 <__ultoa_invert+0x5c>
    74d2:	20 31       	cpi	r18, 0x10	; 16
    74d4:	81 f1       	breq	.+96     	; 0x7536 <__ultoa_invert+0x6c>
    74d6:	e8 94       	clt
    74d8:	6f 93       	push	r22
    74da:	6e 7f       	andi	r22, 0xFE	; 254
    74dc:	6e 5f       	subi	r22, 0xFE	; 254
    74de:	7f 4f       	sbci	r23, 0xFF	; 255
    74e0:	8f 4f       	sbci	r24, 0xFF	; 255
    74e2:	9f 4f       	sbci	r25, 0xFF	; 255
    74e4:	af 4f       	sbci	r26, 0xFF	; 255
    74e6:	b1 e0       	ldi	r27, 0x01	; 1
    74e8:	3e d0       	rcall	.+124    	; 0x7566 <__ultoa_invert+0x9c>
    74ea:	b4 e0       	ldi	r27, 0x04	; 4
    74ec:	3c d0       	rcall	.+120    	; 0x7566 <__ultoa_invert+0x9c>
    74ee:	67 0f       	add	r22, r23
    74f0:	78 1f       	adc	r23, r24
    74f2:	89 1f       	adc	r24, r25
    74f4:	9a 1f       	adc	r25, r26
    74f6:	a1 1d       	adc	r26, r1
    74f8:	68 0f       	add	r22, r24
    74fa:	79 1f       	adc	r23, r25
    74fc:	8a 1f       	adc	r24, r26
    74fe:	91 1d       	adc	r25, r1
    7500:	a1 1d       	adc	r26, r1
    7502:	6a 0f       	add	r22, r26
    7504:	71 1d       	adc	r23, r1
    7506:	81 1d       	adc	r24, r1
    7508:	91 1d       	adc	r25, r1
    750a:	a1 1d       	adc	r26, r1
    750c:	20 d0       	rcall	.+64     	; 0x754e <__ultoa_invert+0x84>
    750e:	09 f4       	brne	.+2      	; 0x7512 <__ultoa_invert+0x48>
    7510:	68 94       	set
    7512:	3f 91       	pop	r19
    7514:	2a e0       	ldi	r18, 0x0A	; 10
    7516:	26 9f       	mul	r18, r22
    7518:	11 24       	eor	r1, r1
    751a:	30 19       	sub	r19, r0
    751c:	30 5d       	subi	r19, 0xD0	; 208
    751e:	31 93       	st	Z+, r19
    7520:	de f6       	brtc	.-74     	; 0x74d8 <__ultoa_invert+0xe>
    7522:	cf 01       	movw	r24, r30
    7524:	08 95       	ret
    7526:	46 2f       	mov	r20, r22
    7528:	47 70       	andi	r20, 0x07	; 7
    752a:	40 5d       	subi	r20, 0xD0	; 208
    752c:	41 93       	st	Z+, r20
    752e:	b3 e0       	ldi	r27, 0x03	; 3
    7530:	0f d0       	rcall	.+30     	; 0x7550 <__ultoa_invert+0x86>
    7532:	c9 f7       	brne	.-14     	; 0x7526 <__ultoa_invert+0x5c>
    7534:	f6 cf       	rjmp	.-20     	; 0x7522 <__ultoa_invert+0x58>
    7536:	46 2f       	mov	r20, r22
    7538:	4f 70       	andi	r20, 0x0F	; 15
    753a:	40 5d       	subi	r20, 0xD0	; 208
    753c:	4a 33       	cpi	r20, 0x3A	; 58
    753e:	18 f0       	brcs	.+6      	; 0x7546 <__ultoa_invert+0x7c>
    7540:	49 5d       	subi	r20, 0xD9	; 217
    7542:	31 fd       	sbrc	r19, 1
    7544:	40 52       	subi	r20, 0x20	; 32
    7546:	41 93       	st	Z+, r20
    7548:	02 d0       	rcall	.+4      	; 0x754e <__ultoa_invert+0x84>
    754a:	a9 f7       	brne	.-22     	; 0x7536 <__ultoa_invert+0x6c>
    754c:	ea cf       	rjmp	.-44     	; 0x7522 <__ultoa_invert+0x58>
    754e:	b4 e0       	ldi	r27, 0x04	; 4
    7550:	a6 95       	lsr	r26
    7552:	97 95       	ror	r25
    7554:	87 95       	ror	r24
    7556:	77 95       	ror	r23
    7558:	67 95       	ror	r22
    755a:	ba 95       	dec	r27
    755c:	c9 f7       	brne	.-14     	; 0x7550 <__ultoa_invert+0x86>
    755e:	00 97       	sbiw	r24, 0x00	; 0
    7560:	61 05       	cpc	r22, r1
    7562:	71 05       	cpc	r23, r1
    7564:	08 95       	ret
    7566:	9b 01       	movw	r18, r22
    7568:	ac 01       	movw	r20, r24
    756a:	0a 2e       	mov	r0, r26
    756c:	06 94       	lsr	r0
    756e:	57 95       	ror	r21
    7570:	47 95       	ror	r20
    7572:	37 95       	ror	r19
    7574:	27 95       	ror	r18
    7576:	ba 95       	dec	r27
    7578:	c9 f7       	brne	.-14     	; 0x756c <__ultoa_invert+0xa2>
    757a:	62 0f       	add	r22, r18
    757c:	73 1f       	adc	r23, r19
    757e:	84 1f       	adc	r24, r20
    7580:	95 1f       	adc	r25, r21
    7582:	a0 1d       	adc	r26, r0
    7584:	08 95       	ret

00007586 <_exit>:
    7586:	f8 94       	cli

00007588 <__stop_program>:
    7588:	ff cf       	rjmp	.-2      	; 0x7588 <__stop_program>
