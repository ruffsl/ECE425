
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036a  00800100  00006fc2  00007056  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006fc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003cf  0080046a  0080046a  000073c0  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000073c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000821  00000000  00000000  00007420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e66  00000000  00000000  00007c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000491  00000000  00000000  00009aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001aaa  00000000  00000000  00009f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  0000b9e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e0a  00000000  00000000  0000bd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001354  00000000  00000000  0000cb4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 8c 24 	jmp	0x4918	; 0x4918 <__vector_4>
      14:	0c 94 b5 24 	jmp	0x496a	; 0x496a <__vector_5>
      18:	0c 94 de 24 	jmp	0x49bc	; 0x49bc <__vector_6>
      1c:	0c 94 07 25 	jmp	0x4a0e	; 0x4a0e <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 6d 23 	jmp	0x46da	; 0x46da <__vector_9>
      28:	0c 94 96 23 	jmp	0x472c	; 0x472c <__vector_10>
      2c:	0c 94 bf 23 	jmp	0x477e	; 0x477e <__vector_11>
      30:	0c 94 3a 24 	jmp	0x4874	; 0x4874 <__vector_12>
      34:	0c 94 e8 23 	jmp	0x47d0	; 0x47d0 <__vector_13>
      38:	0c 94 11 24 	jmp	0x4822	; 0x4822 <__vector_14>
      3c:	0c 94 63 24 	jmp	0x48c6	; 0x48c6 <__vector_15>
      40:	0c 94 f2 22 	jmp	0x45e4	; 0x45e4 <__vector_16>
      44:	0c 94 1b 23 	jmp	0x4636	; 0x4636 <__vector_17>
      48:	0c 94 44 23 	jmp	0x4688	; 0x4688 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	57 20       	and	r5, r7
      7e:	5a 20       	and	r5, r10
      80:	5d 20       	and	r5, r13
      82:	60 20       	and	r6, r0
      84:	69 20       	and	r6, r9
      86:	63 20       	and	r6, r3
      88:	66 20       	and	r6, r6
      8a:	6c 20       	and	r6, r12
      8c:	6f 20       	and	r6, r15
      8e:	72 20       	and	r7, r2
      90:	75 20       	and	r7, r5
      92:	78 20       	and	r7, r8
      94:	7b 20       	and	r7, r11
      96:	7e 20       	and	r7, r14
      98:	81 20       	and	r8, r1
      9a:	84 20       	and	r8, r4
      9c:	87 20       	and	r8, r7
      9e:	8a 20       	and	r8, r10
      a0:	8d 20       	and	r8, r13
      a2:	9e 20       	and	r9, r14
      a4:	a1 20       	and	r10, r1
      a6:	a4 20       	and	r10, r4
      a8:	a7 20       	and	r10, r7
      aa:	b0 20       	and	r11, r0
      ac:	aa 20       	and	r10, r10
      ae:	ad 20       	and	r10, r13
      b0:	b3 20       	and	r11, r3
      b2:	b6 20       	and	r11, r6
      b4:	b9 20       	and	r11, r9
      b6:	bc 20       	and	r11, r12
      b8:	bf 20       	and	r11, r15
      ba:	c2 20       	and	r12, r2
      bc:	c5 20       	and	r12, r5
      be:	c8 20       	and	r12, r8
      c0:	cb 20       	and	r12, r11
      c2:	ce 20       	and	r12, r14
      c4:	d1 20       	and	r13, r1
      c6:	d4 20       	and	r13, r4
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e2 ec       	ldi	r30, 0xC2	; 194
     676:	ff e6       	ldi	r31, 0x6F	; 111
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	aa 36       	cpi	r26, 0x6A	; 106
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	aa e6       	ldi	r26, 0x6A	; 106
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a9 33       	cpi	r26, 0x39	; 57
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 c1 1a 	call	0x3582	; 0x3582 <main>
     698:	0c 94 df 37 	jmp	0x6fbe	; 0x6fbe <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 30 22 	call	0x4460	; 0x4460 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 56 22 	call	0x44ac	; 0x44ac <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 04 22 	call	0x4408	; 0x4408 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 9c 22 	call	0x4538	; 0x4538 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 b6 1a 	call	0x356c	; 0x356c <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 b6 1a 	call	0x356c	; 0x356c <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 b6 1a 	call	0x356c	; 0x356c <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 b6 1a 	call	0x356c	; 0x356c <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 b6 1a 	call	0x356c	; 0x356c <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 b6 1a 	call	0x356c	; 0x356c <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 62 1a 	call	0x34c4	; 0x34c4 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 06 05 	sts	0x0506, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 08 21 	call	0x4210	; 0x4210 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 08 21 	call	0x4210	; 0x4210 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 08 21 	call	0x4210	; 0x4210 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 06 05 	sts	0x0506, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 08 21 	call	0x4210	; 0x4210 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 08 21 	call	0x4210	; 0x4210 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 08 21 	call	0x4210	; 0x4210 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 c4 1b 	call	0x3788	; 0x3788 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 c4 1b 	call	0x3788	; 0x3788 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 c4 1b 	call	0x3788	; 0x3788 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 c4 1b 	call	0x3788	; 0x3788 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 c4 1b 	call	0x3788	; 0x3788 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 c4 1b 	call	0x3788	; 0x3788 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	87 e7       	ldi	r24, 0x77	; 119
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	aa e9       	ldi	r26, 0x9A	; 154
     c56:	b7 e0       	ldi	r27, 0x07	; 7
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e2 e9       	ldi	r30, 0x92	; 146
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 22 07 	lds	r10, 0x0722
     c9e:	b0 90 23 07 	lds	r11, 0x0723
     ca2:	c0 90 24 07 	lds	r12, 0x0724
     ca6:	d0 90 25 07 	lds	r13, 0x0725
			rtIR_old[i] = rtIR;
     caa:	e0 90 26 07 	lds	r14, 0x0726
     cae:	f0 90 27 07 	lds	r15, 0x0727
     cb2:	00 91 28 07 	lds	r16, 0x0728
     cb6:	10 91 29 07 	lds	r17, 0x0729
			ftIR_old[i] = ftIR;
     cba:	20 90 7f 05 	lds	r2, 0x057F
     cbe:	30 90 80 05 	lds	r3, 0x0580
     cc2:	40 90 81 05 	lds	r4, 0x0581
     cc6:	50 90 82 05 	lds	r5, 0x0582
			bkIR_old[i] = bkIR;
     cca:	20 91 89 05 	lds	r18, 0x0589
     cce:	30 91 8a 05 	lds	r19, 0x058A
     cd2:	40 91 8b 05 	lds	r20, 0x058B
     cd6:	50 91 8c 05 	lds	r21, 0x058C
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e9 5f       	subi	r30, 0xF9	; 249
     ce2:	fa 4f       	sbci	r31, 0xFA	; 250
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e6 5d       	subi	r30, 0xD6	; 214
     cf0:	f8 4f       	sbci	r31, 0xF8	; 248
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	ee 5d       	subi	r30, 0xDE	; 222
     cfe:	f9 4f       	sbci	r31, 0xF9	; 249
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e1 57       	subi	r30, 0x71	; 113
     d0c:	fa 4f       	sbci	r31, 0xFA	; 250
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	af 5f       	subi	r26, 0xFF	; 255
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 22 07 	lds	r24, 0x0722
     e0c:	90 91 23 07 	lds	r25, 0x0723
     e10:	a0 91 24 07 	lds	r26, 0x0724
     e14:	b0 91 25 07 	lds	r27, 0x0725
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 26 07 	lds	r24, 0x0726
     e28:	90 91 27 07 	lds	r25, 0x0727
     e2c:	a0 91 28 07 	lds	r26, 0x0728
     e30:	b0 91 29 07 	lds	r27, 0x0729
     e34:	80 93 2a 07 	sts	0x072A, r24
     e38:	90 93 2b 07 	sts	0x072B, r25
     e3c:	a0 93 2c 07 	sts	0x072C, r26
     e40:	b0 93 2d 07 	sts	0x072D, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 7f 05 	lds	r24, 0x057F
     e48:	90 91 80 05 	lds	r25, 0x0580
     e4c:	a0 91 81 05 	lds	r26, 0x0581
     e50:	b0 91 82 05 	lds	r27, 0x0582
     e54:	80 93 22 06 	sts	0x0622, r24
     e58:	90 93 23 06 	sts	0x0623, r25
     e5c:	a0 93 24 06 	sts	0x0624, r26
     e60:	b0 93 25 06 	sts	0x0625, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 89 05 	lds	r24, 0x0589
     e68:	90 91 8a 05 	lds	r25, 0x058A
     e6c:	a0 91 8b 05 	lds	r26, 0x058B
     e70:	b0 91 8c 05 	lds	r27, 0x058C
     e74:	80 93 8f 05 	sts	0x058F, r24
     e78:	90 93 90 05 	sts	0x0590, r25
     e7c:	a0 93 91 05 	sts	0x0591, r26
     e80:	b0 93 92 05 	sts	0x0592, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
     e94:	60 93 22 07 	sts	0x0722, r22
     e98:	70 93 23 07 	sts	0x0723, r23
     e9c:	80 93 24 07 	sts	0x0724, r24
     ea0:	90 93 25 07 	sts	0x0725, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
     eb8:	60 93 26 07 	sts	0x0726, r22
     ebc:	70 93 27 07 	sts	0x0727, r23
     ec0:	80 93 28 07 	sts	0x0728, r24
     ec4:	90 93 29 07 	sts	0x0729, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
     edc:	60 93 7f 05 	sts	0x057F, r22
     ee0:	70 93 80 05 	sts	0x0580, r23
     ee4:	80 93 81 05 	sts	0x0581, r24
     ee8:	90 93 82 05 	sts	0x0582, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
     f00:	60 93 89 05 	sts	0x0589, r22
     f04:	70 93 8a 05 	sts	0x058A, r23
     f08:	80 93 8b 05 	sts	0x058B, r24
     f0c:	90 93 8c 05 	sts	0x058C, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 83 05 	sts	0x0583, r24
     f66:	90 93 84 05 	sts	0x0584, r25
     f6a:	a0 93 85 05 	sts	0x0585, r26
     f6e:	b0 93 86 05 	sts	0x0586, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 83 05 	lds	r18, 0x0583
     f7a:	30 91 84 05 	lds	r19, 0x0584
     f7e:	40 91 85 05 	lds	r20, 0x0585
     f82:	50 91 86 05 	lds	r21, 0x0586
     f86:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 83 05 	sts	0x0583, r22
     f92:	70 93 84 05 	sts	0x0584, r23
     f96:	80 93 85 05 	sts	0x0585, r24
     f9a:	90 93 86 05 	sts	0x0586, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 1e 06 	lds	r18, 0x061E
     fa6:	30 91 1f 06 	lds	r19, 0x061F
     faa:	40 91 20 06 	lds	r20, 0x0620
     fae:	50 91 21 06 	lds	r21, 0x0621
     fb2:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <__subsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a0 97       	sbiw	r28, 0x20	; 32
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	2d 83       	std	Y+5, r18	; 0x05
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	e9 86       	std	Y+9, r14	; 0x09
    106c:	fa 86       	std	Y+10, r15	; 0x0a
    106e:	0b 87       	std	Y+11, r16	; 0x0b
    1070:	1c 87       	std	Y+12, r17	; 0x0c
    1072:	ad 86       	std	Y+13, r10	; 0x0d
    1074:	be 86       	std	Y+14, r11	; 0x0e
    1076:	cf 86       	std	Y+15, r12	; 0x0f
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    107c:	33 24       	eor	r3, r3
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	14 f4       	brge	.+4      	; 0x1096 <move_arc_stnb+0x6c>
    1092:	33 24       	eor	r3, r3
    1094:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1096:	6d 81       	ldd	r22, Y+5	; 0x05
    1098:	7e 81       	ldd	r23, Y+6	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	2c ed       	ldi	r18, 0xDC	; 220
    10a0:	38 eb       	ldi	r19, 0xB8	; 184
    10a2:	48 e0       	ldi	r20, 0x08	; 8
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    10aa:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	77 ff       	sbrs	r23, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <move_arc_stnb+0x90>
    10b4:	30 95       	com	r19
    10b6:	21 95       	neg	r18
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	b9 01       	movw	r22, r18
    10bc:	88 27       	eor	r24, r24
    10be:	77 fd       	sbrc	r23, 7
    10c0:	80 95       	com	r24
    10c2:	98 2f       	mov	r25, r24
    10c4:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatsisf>
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    10d0:	69 85       	ldd	r22, Y+9	; 0x09
    10d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	2c ed       	ldi	r18, 0xDC	; 220
    10da:	38 eb       	ldi	r19, 0xB8	; 184
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    10e4:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <__fixsfsi>
    10e8:	9b 01       	movw	r18, r22
    10ea:	77 ff       	sbrs	r23, 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <move_arc_stnb+0xca>
    10ee:	30 95       	com	r19
    10f0:	21 95       	neg	r18
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatsisf>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1106:	6d 85       	ldd	r22, Y+13	; 0x0d
    1108:	7e 85       	ldd	r23, Y+14	; 0x0e
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	2c ed       	ldi	r18, 0xDC	; 220
    1110:	38 eb       	ldi	r19, 0xB8	; 184
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	5e e3       	ldi	r21, 0x3E	; 62
    1116:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    111a:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	77 ff       	sbrs	r23, 7
    1122:	03 c0       	rjmp	.+6      	; 0x112a <move_arc_stnb+0x100>
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatsisf>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	5f e4       	ldi	r21, 0x4F	; 79
    1148:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	a1 f5       	brne	.+104    	; 0x11b8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	2d b7       	in	r18, 0x3d	; 61
    117a:	3e b7       	in	r19, 0x3e	; 62
    117c:	29 50       	subi	r18, 0x09	; 9
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	3e bf       	out	0x3e, r19	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	2d bf       	out	0x3d, r18	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	ad b7       	in	r26, 0x3d	; 61
    1192:	be b7       	in	r27, 0x3e	; 62
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	5c 92       	st	X, r5
    1198:	4e 92       	st	-X, r4
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	93 82       	std	Z+3, r9	; 0x03
    119e:	82 82       	std	Z+2, r8	; 0x02
    11a0:	75 83       	std	Z+5, r23	; 0x05
    11a2:	64 83       	std	Z+4, r22	; 0x04
    11a4:	26 82       	std	Z+6, r2	; 0x06
    11a6:	10 86       	std	Z+8, r1	; 0x08
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	43 2d       	mov	r20, r3
    11b0:	92 01       	movw	r18, r4
    11b2:	84 01       	movw	r16, r8
    11b4:	76 01       	movw	r14, r12
    11b6:	c1 c1       	rjmp	.+898    	; 0x153a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	e9 f5       	brne	.+122    	; 0x1246 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    11d8:	3b 01       	movw	r6, r22
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    11e2:	8b 01       	movw	r16, r22
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    11ec:	7b 01       	movw	r14, r22
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	29 50       	subi	r18, 0x09	; 9
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	3e bf       	out	0x3e, r19	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	2d bf       	out	0x3d, r18	; 61
    1200:	ed b7       	in	r30, 0x3d	; 61
    1202:	fe b7       	in	r31, 0x3e	; 62
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <move_arc_stnb+0x1e4>
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	71 82       	std	Z+1, r7	; 0x01
    1210:	60 82       	st	Z, r6
    1212:	13 83       	std	Z+3, r17	; 0x03
    1214:	02 83       	std	Z+2, r16	; 0x02
    1216:	f5 82       	std	Z+5, r15	; 0x05
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	26 82       	std	Z+6, r2	; 0x06
    121c:	10 86       	std	Z+8, r1	; 0x08
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	93 01       	movw	r18, r6
    1226:	c2 2c       	mov	r12, r2
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	83 2c       	mov	r8, r3
    122e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <STEPPER_move>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	be bf       	out	0x3e, r27	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ad bf       	out	0x3d, r26	; 61
    1244:	89 c1       	rjmp	.+786    	; 0x1558 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1246:	c3 01       	movw	r24, r6
    1248:	b2 01       	movw	r22, r4
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__gesf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <move_arc_stnb+0x232>
    125a:	b1 c0       	rjmp	.+354    	; 0x13be <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    125c:	66 e6       	ldi	r22, 0x66	; 102
    125e:	76 e6       	ldi	r23, 0x66	; 102
    1260:	8a ea       	ldi	r24, 0xAA	; 170
    1262:	91 ec       	ldi	r25, 0xC1	; 193
    1264:	a3 01       	movw	r20, r6
    1266:	92 01       	movw	r18, r4
    1268:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    127c:	66 e6       	ldi	r22, 0x66	; 102
    127e:	76 e6       	ldi	r23, 0x66	; 102
    1280:	8a ea       	ldi	r24, 0xAA	; 170
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	a3 01       	movw	r20, r6
    1286:	92 01       	movw	r18, r4
    1288:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	39 97       	sbiw	r30, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8d b6       	in	r8, 0x3d	; 61
    12ae:	9e b6       	in	r9, 0x3e	; 62
    12b0:	08 94       	sec
    12b2:	81 1c       	adc	r8, r1
    12b4:	91 1c       	adc	r9, r1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	a8 01       	movw	r20, r16
    12c0:	97 01       	movw	r18, r14
    12c2:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    12c6:	2c ed       	ldi	r18, 0xDC	; 220
    12c8:	38 eb       	ldi	r19, 0xB8	; 184
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    12d2:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    12d6:	69 8b       	std	Y+17, r22	; 0x11
    12d8:	7a 8b       	std	Y+18, r23	; 0x12
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    12ee:	2c ed       	ldi	r18, 0xDC	; 220
    12f0:	38 eb       	ldi	r19, 0xB8	; 184
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	5e e3       	ldi	r21, 0x3E	; 62
    12f6:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    12fa:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	6d 85       	ldd	r22, Y+13	; 0x0d
    1308:	7e 85       	ldd	r23, Y+14	; 0x0e
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	a8 01       	movw	r20, r16
    1310:	97 01       	movw	r18, r14
    1312:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1316:	2c ed       	ldi	r18, 0xDC	; 220
    1318:	38 eb       	ldi	r19, 0xB8	; 184
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1322:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1326:	2b 01       	movw	r4, r22
    1328:	3c 01       	movw	r6, r24
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	7e 81       	ldd	r23, Y+6	; 0x06
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a6 01       	movw	r20, r12
    1334:	95 01       	movw	r18, r10
    1336:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    133a:	2c ed       	ldi	r18, 0xDC	; 220
    133c:	38 eb       	ldi	r19, 0xB8	; 184
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1346:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    134a:	d4 01       	movw	r26, r8
    134c:	6d 93       	st	X+, r22
    134e:	7c 93       	st	X, r23
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1360:	2c ed       	ldi	r18, 0xDC	; 220
    1362:	38 eb       	ldi	r19, 0xB8	; 184
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	5e e3       	ldi	r21, 0x3E	; 62
    1368:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    136c:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1370:	f4 01       	movw	r30, r8
    1372:	73 83       	std	Z+3, r23	; 0x03
    1374:	62 83       	std	Z+2, r22	; 0x02
    1376:	6d 85       	ldd	r22, Y+13	; 0x0d
    1378:	7e 85       	ldd	r23, Y+14	; 0x0e
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	a6 01       	movw	r20, r12
    1380:	95 01       	movw	r18, r10
    1382:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1386:	2c ed       	ldi	r18, 0xDC	; 220
    1388:	38 eb       	ldi	r19, 0xB8	; 184
    138a:	48 e0       	ldi	r20, 0x08	; 8
    138c:	5e e3       	ldi	r21, 0x3E	; 62
    138e:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1392:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1396:	d4 01       	movw	r26, r8
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	7c 93       	st	X, r23
    139c:	6e 93       	st	-X, r22
    139e:	14 97       	sbiw	r26, 0x04	; 4
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2c 92       	st	X, r2
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	1c 92       	st	X, r1
    13aa:	1e 92       	st	-X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	43 2d       	mov	r20, r3
    13b4:	29 89       	ldd	r18, Y+17	; 0x11
    13b6:	3a 89       	ldd	r19, Y+18	; 0x12
    13b8:	0d 89       	ldd	r16, Y+21	; 0x15
    13ba:	1e 89       	ldd	r17, Y+22	; 0x16
    13bc:	bd c0       	rjmp	.+378    	; 0x1538 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    13ce:	87 fd       	sbrc	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <move_arc_stnb+0x3ac>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	c1 c0       	rjmp	.+386    	; 0x1558 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    13d6:	66 e6       	ldi	r22, 0x66	; 102
    13d8:	76 e6       	ldi	r23, 0x66	; 102
    13da:	8a ea       	ldi	r24, 0xAA	; 170
    13dc:	91 e4       	ldi	r25, 0x41	; 65
    13de:	a3 01       	movw	r20, r6
    13e0:	92 01       	movw	r18, r4
    13e2:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    13f6:	66 e6       	ldi	r22, 0x66	; 102
    13f8:	76 e6       	ldi	r23, 0x66	; 102
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	91 ec       	ldi	r25, 0xC1	; 193
    13fe:	a3 01       	movw	r20, r6
    1400:	92 01       	movw	r18, r4
    1402:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    1412:	5b 01       	movw	r10, r22
    1414:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1416:	2d b7       	in	r18, 0x3d	; 61
    1418:	3e b7       	in	r19, 0x3e	; 62
    141a:	29 50       	subi	r18, 0x09	; 9
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	3e bf       	out	0x3e, r19	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	2d bf       	out	0x3d, r18	; 61
    1428:	8d b6       	in	r8, 0x3d	; 61
    142a:	9e b6       	in	r9, 0x3e	; 62
    142c:	08 94       	sec
    142e:	81 1c       	adc	r8, r1
    1430:	91 1c       	adc	r9, r1
    1432:	6d 81       	ldd	r22, Y+5	; 0x05
    1434:	7e 81       	ldd	r23, Y+6	; 0x06
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1442:	2c ed       	ldi	r18, 0xDC	; 220
    1444:	38 eb       	ldi	r19, 0xB8	; 184
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    144e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1452:	69 8f       	std	Y+25, r22	; 0x19
    1454:	7a 8f       	std	Y+26, r23	; 0x1a
    1456:	8b 8f       	std	Y+27, r24	; 0x1b
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	69 85       	ldd	r22, Y+9	; 0x09
    145c:	7a 85       	ldd	r23, Y+10	; 0x0a
    145e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1460:	9c 85       	ldd	r25, Y+12	; 0x0c
    1462:	a8 01       	movw	r20, r16
    1464:	97 01       	movw	r18, r14
    1466:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    146a:	2c ed       	ldi	r18, 0xDC	; 220
    146c:	38 eb       	ldi	r19, 0xB8	; 184
    146e:	48 e0       	ldi	r20, 0x08	; 8
    1470:	5e e3       	ldi	r21, 0x3E	; 62
    1472:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1476:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    147a:	6d 8f       	std	Y+29, r22	; 0x1d
    147c:	7e 8f       	std	Y+30, r23	; 0x1e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	a8 01       	movw	r20, r16
    148c:	97 01       	movw	r18, r14
    148e:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1492:	2c ed       	ldi	r18, 0xDC	; 220
    1494:	38 eb       	ldi	r19, 0xB8	; 184
    1496:	48 e0       	ldi	r20, 0x08	; 8
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    149e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    14a2:	2b 01       	movw	r4, r22
    14a4:	3c 01       	movw	r6, r24
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	a6 01       	movw	r20, r12
    14b0:	95 01       	movw	r18, r10
    14b2:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    14b6:	2c ed       	ldi	r18, 0xDC	; 220
    14b8:	38 eb       	ldi	r19, 0xB8	; 184
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    14c2:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    14c6:	d4 01       	movw	r26, r8
    14c8:	6d 93       	st	X+, r22
    14ca:	7c 93       	st	X, r23
    14cc:	69 85       	ldd	r22, Y+9	; 0x09
    14ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d4:	a6 01       	movw	r20, r12
    14d6:	95 01       	movw	r18, r10
    14d8:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    14dc:	2c ed       	ldi	r18, 0xDC	; 220
    14de:	38 eb       	ldi	r19, 0xB8	; 184
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	5e e3       	ldi	r21, 0x3E	; 62
    14e4:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    14e8:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    14ec:	f4 01       	movw	r30, r8
    14ee:	73 83       	std	Z+3, r23	; 0x03
    14f0:	62 83       	std	Z+2, r22	; 0x02
    14f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1502:	2c ed       	ldi	r18, 0xDC	; 220
    1504:	38 eb       	ldi	r19, 0xB8	; 184
    1506:	48 e0       	ldi	r20, 0x08	; 8
    1508:	5e e3       	ldi	r21, 0x3E	; 62
    150a:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    150e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1512:	d4 01       	movw	r26, r8
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	7c 93       	st	X, r23
    1518:	6e 93       	st	-X, r22
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	16 96       	adiw	r26, 0x06	; 6
    151e:	2c 92       	st	X, r2
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	18 96       	adiw	r26, 0x08	; 8
    1524:	1c 92       	st	X, r1
    1526:	1e 92       	st	-X, r1
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	43 2d       	mov	r20, r3
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1534:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1536:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1538:	72 01       	movw	r14, r4
    153a:	c2 2c       	mov	r12, r2
    153c:	aa 24       	eor	r10, r10
    153e:	bb 24       	eor	r11, r11
    1540:	83 2c       	mov	r8, r3
    1542:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <STEPPER_move>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	39 96       	adiw	r30, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	fe bf       	out	0x3e, r31	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	2b 01       	movw	r4, r22
    15c0:	3c 01       	movw	r6, r24
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	e9 86       	std	Y+9, r14	; 0x09
    15cc:	fa 86       	std	Y+10, r15	; 0x0a
    15ce:	0b 87       	std	Y+11, r16	; 0x0b
    15d0:	1c 87       	std	Y+12, r17	; 0x0c
    15d2:	ad 86       	std	Y+13, r10	; 0x0d
    15d4:	be 86       	std	Y+14, r11	; 0x0e
    15d6:	cf 86       	std	Y+15, r12	; 0x0f
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    15dc:	33 24       	eor	r3, r3
    15de:	ca 01       	movw	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	14 f4       	brge	.+4      	; 0x15f6 <move_arc_stwt+0x6c>
    15f2:	33 24       	eor	r3, r3
    15f4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	2c ed       	ldi	r18, 0xDC	; 220
    1600:	38 eb       	ldi	r19, 0xB8	; 184
    1602:	48 e0       	ldi	r20, 0x08	; 8
    1604:	5e e3       	ldi	r21, 0x3E	; 62
    1606:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    160a:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	77 ff       	sbrs	r23, 7
    1612:	03 c0       	rjmp	.+6      	; 0x161a <move_arc_stwt+0x90>
    1614:	30 95       	com	r19
    1616:	21 95       	neg	r18
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	b9 01       	movw	r22, r18
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatsisf>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	2c ed       	ldi	r18, 0xDC	; 220
    163a:	38 eb       	ldi	r19, 0xB8	; 184
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	5e e3       	ldi	r21, 0x3E	; 62
    1640:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1644:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <__fixsfsi>
    1648:	9b 01       	movw	r18, r22
    164a:	77 ff       	sbrs	r23, 7
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <move_arc_stwt+0xca>
    164e:	30 95       	com	r19
    1650:	21 95       	neg	r18
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	b9 01       	movw	r22, r18
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatsisf>
    1662:	4b 01       	movw	r8, r22
    1664:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1666:	6d 85       	ldd	r22, Y+13	; 0x0d
    1668:	7e 85       	ldd	r23, Y+14	; 0x0e
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	2c ed       	ldi	r18, 0xDC	; 220
    1670:	38 eb       	ldi	r19, 0xB8	; 184
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	5e e3       	ldi	r21, 0x3E	; 62
    1676:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    167a:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 ff       	sbrs	r23, 7
    1682:	03 c0       	rjmp	.+6      	; 0x168a <move_arc_stwt+0x100>
    1684:	30 95       	com	r19
    1686:	21 95       	neg	r18
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatsisf>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	5f e4       	ldi	r21, 0x4F	; 79
    16a8:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	a1 f5       	brne	.+104    	; 0x1718 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    16b0:	69 81       	ldd	r22, Y+1	; 0x01
    16b2:	7a 81       	ldd	r23, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	c5 01       	movw	r24, r10
    16c2:	b4 01       	movw	r22, r8
    16c4:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	29 50       	subi	r18, 0x09	; 9
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	3e bf       	out	0x3e, r19	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	2d bf       	out	0x3d, r18	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ad b7       	in	r26, 0x3d	; 61
    16f2:	be b7       	in	r27, 0x3e	; 62
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	5c 92       	st	X, r5
    16f8:	4e 92       	st	-X, r4
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	93 82       	std	Z+3, r9	; 0x03
    16fe:	82 82       	std	Z+2, r8	; 0x02
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    1704:	26 82       	std	Z+6, r2	; 0x06
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	43 2d       	mov	r20, r3
    1710:	92 01       	movw	r18, r4
    1712:	84 01       	movw	r16, r8
    1714:	76 01       	movw	r14, r12
    1716:	c1 c1       	rjmp	.+898    	; 0x1a9a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	e9 f5       	brne	.+122    	; 0x17a6 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1738:	3b 01       	movw	r6, r22
    173a:	c5 01       	movw	r24, r10
    173c:	b4 01       	movw	r22, r8
    173e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1742:	8b 01       	movw	r16, r22
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    174c:	7b 01       	movw	r14, r22
    174e:	2d b7       	in	r18, 0x3d	; 61
    1750:	3e b7       	in	r19, 0x3e	; 62
    1752:	29 50       	subi	r18, 0x09	; 9
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	2d bf       	out	0x3d, r18	; 61
    1760:	ed b7       	in	r30, 0x3d	; 61
    1762:	fe b7       	in	r31, 0x3e	; 62
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	33 20       	and	r3, r3
    176a:	09 f4       	brne	.+2      	; 0x176e <move_arc_stwt+0x1e4>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	71 82       	std	Z+1, r7	; 0x01
    1770:	60 82       	st	Z, r6
    1772:	13 83       	std	Z+3, r17	; 0x03
    1774:	02 83       	std	Z+2, r16	; 0x02
    1776:	f5 82       	std	Z+5, r15	; 0x05
    1778:	e4 82       	std	Z+4, r14	; 0x04
    177a:	26 82       	std	Z+6, r2	; 0x06
    177c:	10 86       	std	Z+8, r1	; 0x08
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	93 01       	movw	r18, r6
    1786:	c2 2c       	mov	r12, r2
    1788:	aa 24       	eor	r10, r10
    178a:	bb 24       	eor	r11, r11
    178c:	83 2c       	mov	r8, r3
    178e:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <STEPPER_move>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	19 96       	adiw	r26, 0x09	; 9
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	be bf       	out	0x3e, r27	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	ad bf       	out	0x3d, r26	; 61
    17a4:	89 c1       	rjmp	.+786    	; 0x1ab8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <move_arc_stwt+0x232>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17bc:	66 e6       	ldi	r22, 0x66	; 102
    17be:	76 e6       	ldi	r23, 0x66	; 102
    17c0:	8a ea       	ldi	r24, 0xAA	; 170
    17c2:	91 ec       	ldi	r25, 0xC1	; 193
    17c4:	a3 01       	movw	r20, r6
    17c6:	92 01       	movw	r18, r4
    17c8:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    17d8:	7b 01       	movw	r14, r22
    17da:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17dc:	66 e6       	ldi	r22, 0x66	; 102
    17de:	76 e6       	ldi	r23, 0x66	; 102
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	91 e4       	ldi	r25, 0x41	; 65
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    17f8:	5b 01       	movw	r10, r22
    17fa:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    17fc:	ed b7       	in	r30, 0x3d	; 61
    17fe:	fe b7       	in	r31, 0x3e	; 62
    1800:	39 97       	sbiw	r30, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	8d b6       	in	r8, 0x3d	; 61
    180e:	9e b6       	in	r9, 0x3e	; 62
    1810:	08 94       	sec
    1812:	81 1c       	adc	r8, r1
    1814:	91 1c       	adc	r9, r1
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	a8 01       	movw	r20, r16
    1820:	97 01       	movw	r18, r14
    1822:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1826:	2c ed       	ldi	r18, 0xDC	; 220
    1828:	38 eb       	ldi	r19, 0xB8	; 184
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	5e e3       	ldi	r21, 0x3E	; 62
    182e:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1832:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1836:	69 8b       	std	Y+17, r22	; 0x11
    1838:	7a 8b       	std	Y+18, r23	; 0x12
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	69 85       	ldd	r22, Y+9	; 0x09
    1840:	7a 85       	ldd	r23, Y+10	; 0x0a
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	a8 01       	movw	r20, r16
    1848:	97 01       	movw	r18, r14
    184a:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    184e:	2c ed       	ldi	r18, 0xDC	; 220
    1850:	38 eb       	ldi	r19, 0xB8	; 184
    1852:	48 e0       	ldi	r20, 0x08	; 8
    1854:	5e e3       	ldi	r21, 0x3E	; 62
    1856:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    185a:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	6d 85       	ldd	r22, Y+13	; 0x0d
    1868:	7e 85       	ldd	r23, Y+14	; 0x0e
    186a:	8f 85       	ldd	r24, Y+15	; 0x0f
    186c:	98 89       	ldd	r25, Y+16	; 0x10
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1876:	2c ed       	ldi	r18, 0xDC	; 220
    1878:	38 eb       	ldi	r19, 0xB8	; 184
    187a:	48 e0       	ldi	r20, 0x08	; 8
    187c:	5e e3       	ldi	r21, 0x3E	; 62
    187e:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1882:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1886:	2b 01       	movw	r4, r22
    1888:	3c 01       	movw	r6, r24
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	a6 01       	movw	r20, r12
    1894:	95 01       	movw	r18, r10
    1896:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    189a:	2c ed       	ldi	r18, 0xDC	; 220
    189c:	38 eb       	ldi	r19, 0xB8	; 184
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    18a6:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    18aa:	d4 01       	movw	r26, r8
    18ac:	6d 93       	st	X+, r22
    18ae:	7c 93       	st	X, r23
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    18c0:	2c ed       	ldi	r18, 0xDC	; 220
    18c2:	38 eb       	ldi	r19, 0xB8	; 184
    18c4:	48 e0       	ldi	r20, 0x08	; 8
    18c6:	5e e3       	ldi	r21, 0x3E	; 62
    18c8:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    18cc:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    18d0:	f4 01       	movw	r30, r8
    18d2:	73 83       	std	Z+3, r23	; 0x03
    18d4:	62 83       	std	Z+2, r22	; 0x02
    18d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	a6 01       	movw	r20, r12
    18e0:	95 01       	movw	r18, r10
    18e2:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    18e6:	2c ed       	ldi	r18, 0xDC	; 220
    18e8:	38 eb       	ldi	r19, 0xB8	; 184
    18ea:	48 e0       	ldi	r20, 0x08	; 8
    18ec:	5e e3       	ldi	r21, 0x3E	; 62
    18ee:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    18f2:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    18f6:	d4 01       	movw	r26, r8
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	7c 93       	st	X, r23
    18fc:	6e 93       	st	-X, r22
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	2c 92       	st	X, r2
    1904:	16 97       	sbiw	r26, 0x06	; 6
    1906:	18 96       	adiw	r26, 0x08	; 8
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	43 2d       	mov	r20, r3
    1914:	29 89       	ldd	r18, Y+17	; 0x11
    1916:	3a 89       	ldd	r19, Y+18	; 0x12
    1918:	0d 89       	ldd	r16, Y+21	; 0x15
    191a:	1e 89       	ldd	r17, Y+22	; 0x16
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    192e:	87 fd       	sbrc	r24, 7
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <move_arc_stwt+0x3ac>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c1 c0       	rjmp	.+386    	; 0x1ab8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1936:	66 e6       	ldi	r22, 0x66	; 102
    1938:	76 e6       	ldi	r23, 0x66	; 102
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	91 e4       	ldi	r25, 0x41	; 65
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1956:	66 e6       	ldi	r22, 0x66	; 102
    1958:	76 e6       	ldi	r23, 0x66	; 102
    195a:	8a ea       	ldi	r24, 0xAA	; 170
    195c:	91 ec       	ldi	r25, 0xC1	; 193
    195e:	a3 01       	movw	r20, r6
    1960:	92 01       	movw	r18, r4
    1962:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    1972:	5b 01       	movw	r10, r22
    1974:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1976:	2d b7       	in	r18, 0x3d	; 61
    1978:	3e b7       	in	r19, 0x3e	; 62
    197a:	29 50       	subi	r18, 0x09	; 9
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	3e bf       	out	0x3e, r19	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	2d bf       	out	0x3d, r18	; 61
    1988:	8d b6       	in	r8, 0x3d	; 61
    198a:	9e b6       	in	r9, 0x3e	; 62
    198c:	08 94       	sec
    198e:	81 1c       	adc	r8, r1
    1990:	91 1c       	adc	r9, r1
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	a8 01       	movw	r20, r16
    199c:	97 01       	movw	r18, r14
    199e:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    19a2:	2c ed       	ldi	r18, 0xDC	; 220
    19a4:	38 eb       	ldi	r19, 0xB8	; 184
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	5e e3       	ldi	r21, 0x3E	; 62
    19aa:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    19ae:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    19b2:	69 8f       	std	Y+25, r22	; 0x19
    19b4:	7a 8f       	std	Y+26, r23	; 0x1a
    19b6:	8b 8f       	std	Y+27, r24	; 0x1b
    19b8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	a8 01       	movw	r20, r16
    19c4:	97 01       	movw	r18, r14
    19c6:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    19ca:	2c ed       	ldi	r18, 0xDC	; 220
    19cc:	38 eb       	ldi	r19, 0xB8	; 184
    19ce:	48 e0       	ldi	r20, 0x08	; 8
    19d0:	5e e3       	ldi	r21, 0x3E	; 62
    19d2:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    19d6:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    19da:	6d 8f       	std	Y+29, r22	; 0x1d
    19dc:	7e 8f       	std	Y+30, r23	; 0x1e
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	a8 01       	movw	r20, r16
    19ec:	97 01       	movw	r18, r14
    19ee:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    19f2:	2c ed       	ldi	r18, 0xDC	; 220
    19f4:	38 eb       	ldi	r19, 0xB8	; 184
    19f6:	48 e0       	ldi	r20, 0x08	; 8
    19f8:	5e e3       	ldi	r21, 0x3E	; 62
    19fa:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    19fe:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1a02:	2b 01       	movw	r4, r22
    1a04:	3c 01       	movw	r6, r24
    1a06:	6d 81       	ldd	r22, Y+5	; 0x05
    1a08:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1a16:	2c ed       	ldi	r18, 0xDC	; 220
    1a18:	38 eb       	ldi	r19, 0xB8	; 184
    1a1a:	48 e0       	ldi	r20, 0x08	; 8
    1a1c:	5e e3       	ldi	r21, 0x3E	; 62
    1a1e:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1a22:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1a26:	d4 01       	movw	r26, r8
    1a28:	6d 93       	st	X+, r22
    1a2a:	7c 93       	st	X, r23
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1a3c:	2c ed       	ldi	r18, 0xDC	; 220
    1a3e:	38 eb       	ldi	r19, 0xB8	; 184
    1a40:	48 e0       	ldi	r20, 0x08	; 8
    1a42:	5e e3       	ldi	r21, 0x3E	; 62
    1a44:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1a48:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	73 83       	std	Z+3, r23	; 0x03
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    1a62:	2c ed       	ldi	r18, 0xDC	; 220
    1a64:	38 eb       	ldi	r19, 0xB8	; 184
    1a66:	48 e0       	ldi	r20, 0x08	; 8
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    1a6e:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1a72:	d4 01       	movw	r26, r8
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	7c 93       	st	X, r23
    1a78:	6e 93       	st	-X, r22
    1a7a:	14 97       	sbiw	r26, 0x04	; 4
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	2c 92       	st	X, r2
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	18 96       	adiw	r26, 0x08	; 8
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	17 97       	sbiw	r26, 0x07	; 7
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	43 2d       	mov	r20, r3
    1a90:	29 8d       	ldd	r18, Y+25	; 0x19
    1a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a94:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a98:	72 01       	movw	r14, r4
    1a9a:	c2 2c       	mov	r12, r2
    1a9c:	aa 24       	eor	r10, r10
    1a9e:	bb 24       	eor	r11, r11
    1aa0:	83 2c       	mov	r8, r3
    1aa2:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <STEPPER_move>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	39 96       	adiw	r30, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ab8:	a0 96       	adiw	r28, 0x20	; 32
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <setOdometry>:
* Input Variables:	void
* Output Return:	float odometry 
* Overview:		    Sets the odometry to move
********************************************************************/
void setOdometry( float odometry )
{	
    1aea:	8f 92       	push	r8
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
	// Set the gloable odometryTrigger
	odometryTrigger = odometry;
    1afa:	60 93 07 06 	sts	0x0607, r22
    1afe:	70 93 08 06 	sts	0x0608, r23
    1b02:	80 93 09 06 	sts	0x0609, r24
    1b06:	90 93 0a 06 	sts	0x060A, r25

	// Set the stepers
	STEPPER_move_stnb( STEPPER_BOTH, 
    1b0a:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    1b0e:	8b 01       	movw	r16, r22
    1b10:	9c 01       	movw	r18, r24
    1b12:	8d b7       	in	r24, 0x3d	; 61
    1b14:	9e b7       	in	r25, 0x3e	; 62
    1b16:	09 97       	sbiw	r24, 0x09	; 9
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	9e bf       	out	0x3e, r25	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	8d bf       	out	0x3d, r24	; 61
    1b22:	ed b7       	in	r30, 0x3d	; 61
    1b24:	fe b7       	in	r31, 0x3e	; 62
    1b26:	31 96       	adiw	r30, 0x01	; 1
    1b28:	ad b7       	in	r26, 0x3d	; 61
    1b2a:	be b7       	in	r27, 0x3e	; 62
    1b2c:	12 96       	adiw	r26, 0x02	; 2
    1b2e:	1c 93       	st	X, r17
    1b30:	0e 93       	st	-X, r16
    1b32:	11 97       	sbiw	r26, 0x01	; 1
    1b34:	80 e9       	ldi	r24, 0x90	; 144
    1b36:	91 e0       	ldi	r25, 0x01	; 1
    1b38:	93 83       	std	Z+3, r25	; 0x03
    1b3a:	82 83       	std	Z+2, r24	; 0x02
    1b3c:	82 ec       	ldi	r24, 0xC2	; 194
    1b3e:	91 e0       	ldi	r25, 0x01	; 1
    1b40:	95 83       	std	Z+5, r25	; 0x05
    1b42:	84 83       	std	Z+4, r24	; 0x04
    1b44:	16 82       	std	Z+6, r1	; 0x06
    1b46:	10 86       	std	Z+8, r1	; 0x08
    1b48:	17 82       	std	Z+7, r1	; 0x07
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	62 e0       	ldi	r22, 0x02	; 2
    1b4e:	41 e0       	ldi	r20, 0x01	; 1
    1b50:	98 01       	movw	r18, r16
    1b52:	00 e9       	ldi	r16, 0x90	; 144
    1b54:	11 e0       	ldi	r17, 0x01	; 1
    1b56:	92 ec       	ldi	r25, 0xC2	; 194
    1b58:	e9 2e       	mov	r14, r25
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	f9 2e       	mov	r15, r25
    1b5e:	cc 24       	eor	r12, r12
    1b60:	aa 24       	eor	r10, r10
    1b62:	bb 24       	eor	r11, r11
    1b64:	88 24       	eor	r8, r8
    1b66:	83 94       	inc	r8
    1b68:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <STEPPER_move>
    1b6c:	8d b7       	in	r24, 0x3d	; 61
    1b6e:	9e b7       	in	r25, 0x3e	; 62
    1b70:	09 96       	adiw	r24, 0x09	; 9
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	9e bf       	out	0x3e, r25	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	8d bf       	out	0x3d, r24	; 61
	STEPPER_REV, odometryTrigger, MAX_SPEED, MAX_ACL, STEPPER_BRK_OFF, // Left
	STEPPER_REV, odometryTrigger, MAX_SPEED, MAX_ACL, STEPPER_BRK_OFF ); // Right
}
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	8f 90       	pop	r8
    1b8c:	08 95       	ret

00001b8e <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1b8e:	0e 94 d7 20 	call	0x41ae	; 0x41ae <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1b92:	28 2f       	mov	r18, r24
    1b94:	21 70       	andi	r18, 0x01	; 1
    1b96:	20 93 20 07 	sts	0x0720, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	82 70       	andi	r24, 0x02	; 2
    1b9e:	90 70       	andi	r25, 0x00	; 0
    1ba0:	95 95       	asr	r25
    1ba2:	87 95       	ror	r24
    1ba4:	80 93 21 07 	sts	0x0721, r24
}
    1ba8:	08 95       	ret

00001baa <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1baa:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1bae:	60 93 17 06 	sts	0x0617, r22
    1bb2:	70 93 18 06 	sts	0x0618, r23
    1bb6:	80 93 19 06 	sts	0x0619, r24
    1bba:	90 93 1a 06 	sts	0x061A, r25
	leftLightVolt = getLeftLight();
    1bbe:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1bc2:	60 93 ae 07 	sts	0x07AE, r22
    1bc6:	70 93 af 07 	sts	0x07AF, r23
    1bca:	80 93 b0 07 	sts	0x07B0, r24
    1bce:	90 93 b1 07 	sts	0x07B1, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1bd2:	08 95       	ret

00001bd4 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1bd4:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1bd8:	60 93 7f 05 	sts	0x057F, r22
    1bdc:	70 93 80 05 	sts	0x0580, r23
    1be0:	80 93 81 05 	sts	0x0581, r24
    1be4:	90 93 82 05 	sts	0x0582, r25
	bkIR = getBackIR();
    1be8:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1bec:	60 93 89 05 	sts	0x0589, r22
    1bf0:	70 93 8a 05 	sts	0x058A, r23
    1bf4:	80 93 8b 05 	sts	0x058B, r24
    1bf8:	90 93 8c 05 	sts	0x058C, r25
	ltIR = getLeftIR();
    1bfc:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1c00:	60 93 22 07 	sts	0x0722, r22
    1c04:	70 93 23 07 	sts	0x0723, r23
    1c08:	80 93 24 07 	sts	0x0724, r24
    1c0c:	90 93 25 07 	sts	0x0725, r25
	rtIR = getRightIR();
    1c10:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1c14:	60 93 26 07 	sts	0x0726, r22
    1c18:	70 93 27 07 	sts	0x0727, r23
    1c1c:	80 93 28 07 	sts	0x0728, r24
    1c20:	90 93 29 07 	sts	0x0729, r25
}
    1c24:	08 95       	ret

00001c26 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1c26:	cf 92       	push	r12
    1c28:	df 92       	push	r13
    1c2a:	ef 92       	push	r14
    1c2c:	ff 92       	push	r15
    1c2e:	0f 93       	push	r16
    1c30:	1f 93       	push	r17
    1c32:	cf 93       	push	r28
    1c34:	df 93       	push	r29
    1c36:	16 2f       	mov	r17, r22
    1c38:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1c3a:	5f e1       	ldi	r21, 0x1F	; 31
    1c3c:	f5 2e       	mov	r15, r21
    1c3e:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1c40:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1c42:	0f 2d       	mov	r16, r15
    1c44:	06 95       	lsr	r16
    1c46:	06 95       	lsr	r16
    1c48:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1c4a:	c0 2f       	mov	r28, r16
    1c4c:	d0 e0       	ldi	r29, 0x00	; 0
    1c4e:	c1 2e       	mov	r12, r17
    1c50:	dd 24       	eor	r13, r13
    1c52:	ce 01       	movw	r24, r28
    1c54:	b6 01       	movw	r22, r12
    1c56:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1c5a:	80 2f       	mov	r24, r16
    1c5c:	61 2f       	mov	r22, r17
    1c5e:	0e 94 89 1b 	call	0x3712	; 0x3712 <LCD_set_next_PGC>
    1c62:	fe 01       	movw	r30, r28
    1c64:	45 e0       	ldi	r20, 0x05	; 5
    1c66:	ee 0f       	add	r30, r30
    1c68:	ff 1f       	adc	r31, r31
    1c6a:	4a 95       	dec	r20
    1c6c:	e1 f7       	brne	.-8      	; 0x1c66 <LCD_set_pixel+0x40>
    1c6e:	2f 2d       	mov	r18, r15
    1c70:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1c72:	ee 20       	and	r14, r14
    1c74:	89 f0       	breq	.+34     	; 0x1c98 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1c76:	ec 0d       	add	r30, r12
    1c78:	fd 1d       	adc	r31, r13
    1c7a:	e6 56       	subi	r30, 0x66	; 102
    1c7c:	f9 4f       	sbci	r31, 0xF9	; 249
    1c7e:	27 70       	andi	r18, 0x07	; 7
    1c80:	30 70       	andi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <LCD_set_pixel+0x66>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	2a 95       	dec	r18
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <LCD_set_pixel+0x62>
    1c90:	20 81       	ld	r18, Z
    1c92:	28 2b       	or	r18, r24
    1c94:	20 83       	st	Z, r18
    1c96:	11 c0       	rjmp	.+34     	; 0x1cba <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1c98:	ec 0d       	add	r30, r12
    1c9a:	fd 1d       	adc	r31, r13
    1c9c:	e6 56       	subi	r30, 0x66	; 102
    1c9e:	f9 4f       	sbci	r31, 0xF9	; 249
    1ca0:	27 70       	andi	r18, 0x07	; 7
    1ca2:	30 70       	andi	r19, 0x00	; 0
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <LCD_set_pixel+0x88>
    1caa:	88 0f       	add	r24, r24
    1cac:	99 1f       	adc	r25, r25
    1cae:	2a 95       	dec	r18
    1cb0:	e2 f7       	brpl	.-8      	; 0x1caa <LCD_set_pixel+0x84>
    1cb2:	80 95       	com	r24
    1cb4:	20 81       	ld	r18, Z
    1cb6:	82 23       	and	r24, r18
    1cb8:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1cba:	35 e0       	ldi	r19, 0x05	; 5
    1cbc:	cc 0f       	add	r28, r28
    1cbe:	dd 1f       	adc	r29, r29
    1cc0:	3a 95       	dec	r19
    1cc2:	e1 f7       	brne	.-8      	; 0x1cbc <LCD_set_pixel+0x96>
    1cc4:	cc 0d       	add	r28, r12
    1cc6:	dd 1d       	adc	r29, r13
    1cc8:	c6 56       	subi	r28, 0x66	; 102
    1cca:	d9 4f       	sbci	r29, 0xF9	; 249
    1ccc:	88 81       	ld	r24, Y
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
}
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	df 90       	pop	r13
    1ce2:	cf 90       	pop	r12
    1ce4:	08 95       	ret

00001ce6 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1ce6:	7f 92       	push	r7
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	98 2e       	mov	r9, r24
    1cfe:	b6 2e       	mov	r11, r22
    1d00:	c4 2e       	mov	r12, r20
    1d02:	a2 2e       	mov	r10, r18
    1d04:	80 2e       	mov	r8, r16
    1d06:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1d08:	bb 0c       	add	r11, r11
    1d0a:	bb 0c       	add	r11, r11
    1d0c:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1d0e:	dd 24       	eor	r13, r13
    1d10:	23 e0       	ldi	r18, 0x03	; 3
    1d12:	cc 0c       	add	r12, r12
    1d14:	dd 1c       	adc	r13, r13
    1d16:	2a 95       	dec	r18
    1d18:	e1 f7       	brne	.-8      	; 0x1d12 <printCell+0x2c>
    1d1a:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1d1c:	0f e1       	ldi	r16, 0x1F	; 31
    1d1e:	0b 19       	sub	r16, r11
    1d20:	80 2f       	mov	r24, r16
    1d22:	6c 2d       	mov	r22, r12
    1d24:	41 e0       	ldi	r20, 0x01	; 1
    1d26:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1d2a:	98 e1       	ldi	r25, 0x18	; 24
    1d2c:	e9 2e       	mov	r14, r25
    1d2e:	eb 18       	sub	r14, r11
    1d30:	8e 2d       	mov	r24, r14
    1d32:	6c 2d       	mov	r22, r12
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1d3a:	87 e0       	ldi	r24, 0x07	; 7
    1d3c:	f8 2e       	mov	r15, r24
    1d3e:	fc 0c       	add	r15, r12
    1d40:	80 2f       	mov	r24, r16
    1d42:	6f 2d       	mov	r22, r15
    1d44:	41 e0       	ldi	r20, 0x01	; 1
    1d46:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1d4a:	8e 2d       	mov	r24, r14
    1d4c:	6f 2d       	mov	r22, r15
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	
	if(cell&0b1000){
    1d54:	c9 2c       	mov	r12, r9
    1d56:	93 fe       	sbrs	r9, 3
    1d58:	24 c0       	rjmp	.+72     	; 0x1da2 <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1d5a:	61 2f       	mov	r22, r17
    1d5c:	6f 5f       	subi	r22, 0xFF	; 255
    1d5e:	80 2f       	mov	r24, r16
    1d60:	41 e0       	ldi	r20, 0x01	; 1
    1d62:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1d66:	61 2f       	mov	r22, r17
    1d68:	6e 5f       	subi	r22, 0xFE	; 254
    1d6a:	80 2f       	mov	r24, r16
    1d6c:	41 e0       	ldi	r20, 0x01	; 1
    1d6e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1d72:	61 2f       	mov	r22, r17
    1d74:	6d 5f       	subi	r22, 0xFD	; 253
    1d76:	80 2f       	mov	r24, r16
    1d78:	41 e0       	ldi	r20, 0x01	; 1
    1d7a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1d7e:	61 2f       	mov	r22, r17
    1d80:	6c 5f       	subi	r22, 0xFC	; 252
    1d82:	80 2f       	mov	r24, r16
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1d8a:	61 2f       	mov	r22, r17
    1d8c:	6b 5f       	subi	r22, 0xFB	; 251
    1d8e:	80 2f       	mov	r24, r16
    1d90:	41 e0       	ldi	r20, 0x01	; 1
    1d92:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1d96:	61 2f       	mov	r22, r17
    1d98:	6a 5f       	subi	r22, 0xFA	; 250
    1d9a:	80 2f       	mov	r24, r16
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}
	if(cell&0b0100){
    1da2:	c2 fe       	sbrs	r12, 2
    1da4:	25 c0       	rjmp	.+74     	; 0x1df0 <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1da6:	8b 2d       	mov	r24, r11
    1da8:	80 95       	com	r24
    1daa:	81 5e       	subi	r24, 0xE1	; 225
    1dac:	6f 2d       	mov	r22, r15
    1dae:	41 e0       	ldi	r20, 0x01	; 1
    1db0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1db4:	8d e1       	ldi	r24, 0x1D	; 29
    1db6:	8b 19       	sub	r24, r11
    1db8:	6f 2d       	mov	r22, r15
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1dc0:	8c e1       	ldi	r24, 0x1C	; 28
    1dc2:	8b 19       	sub	r24, r11
    1dc4:	6f 2d       	mov	r22, r15
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1dcc:	8b e1       	ldi	r24, 0x1B	; 27
    1dce:	8b 19       	sub	r24, r11
    1dd0:	6f 2d       	mov	r22, r15
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1dd8:	8a e1       	ldi	r24, 0x1A	; 26
    1dda:	8b 19       	sub	r24, r11
    1ddc:	6f 2d       	mov	r22, r15
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1de4:	89 e1       	ldi	r24, 0x19	; 25
    1de6:	8b 19       	sub	r24, r11
    1de8:	6f 2d       	mov	r22, r15
    1dea:	41 e0       	ldi	r20, 0x01	; 1
    1dec:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}
	if(cell&0b0010){
    1df0:	c1 fe       	sbrs	r12, 1
    1df2:	24 c0       	rjmp	.+72     	; 0x1e3c <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1df4:	61 2f       	mov	r22, r17
    1df6:	6f 5f       	subi	r22, 0xFF	; 255
    1df8:	8e 2d       	mov	r24, r14
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1e00:	61 2f       	mov	r22, r17
    1e02:	6e 5f       	subi	r22, 0xFE	; 254
    1e04:	8e 2d       	mov	r24, r14
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1e0c:	61 2f       	mov	r22, r17
    1e0e:	6d 5f       	subi	r22, 0xFD	; 253
    1e10:	8e 2d       	mov	r24, r14
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1e18:	61 2f       	mov	r22, r17
    1e1a:	6c 5f       	subi	r22, 0xFC	; 252
    1e1c:	8e 2d       	mov	r24, r14
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1e24:	61 2f       	mov	r22, r17
    1e26:	6b 5f       	subi	r22, 0xFB	; 251
    1e28:	8e 2d       	mov	r24, r14
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1e30:	61 2f       	mov	r22, r17
    1e32:	6a 5f       	subi	r22, 0xFA	; 250
    1e34:	8e 2d       	mov	r24, r14
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}
	if(cell&0b0001){
    1e3c:	c0 fe       	sbrs	r12, 0
    1e3e:	25 c0       	rjmp	.+74     	; 0x1e8a <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1e40:	8b 2d       	mov	r24, r11
    1e42:	80 95       	com	r24
    1e44:	81 5e       	subi	r24, 0xE1	; 225
    1e46:	61 2f       	mov	r22, r17
    1e48:	41 e0       	ldi	r20, 0x01	; 1
    1e4a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1e4e:	8d e1       	ldi	r24, 0x1D	; 29
    1e50:	8b 19       	sub	r24, r11
    1e52:	61 2f       	mov	r22, r17
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1e5a:	8c e1       	ldi	r24, 0x1C	; 28
    1e5c:	8b 19       	sub	r24, r11
    1e5e:	61 2f       	mov	r22, r17
    1e60:	41 e0       	ldi	r20, 0x01	; 1
    1e62:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1e66:	8b e1       	ldi	r24, 0x1B	; 27
    1e68:	8b 19       	sub	r24, r11
    1e6a:	61 2f       	mov	r22, r17
    1e6c:	41 e0       	ldi	r20, 0x01	; 1
    1e6e:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1e72:	8a e1       	ldi	r24, 0x1A	; 26
    1e74:	8b 19       	sub	r24, r11
    1e76:	61 2f       	mov	r22, r17
    1e78:	41 e0       	ldi	r20, 0x01	; 1
    1e7a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1e7e:	89 e1       	ldi	r24, 0x19	; 25
    1e80:	8b 19       	sub	r24, r11
    1e82:	61 2f       	mov	r22, r17
    1e84:	41 e0       	ldi	r20, 0x01	; 1
    1e86:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
	}	
	if(isrobot){
    1e8a:	aa 20       	and	r10, r10
    1e8c:	e1 f1       	breq	.+120    	; 0x1f06 <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1e8e:	bc e1       	ldi	r27, 0x1C	; 28
    1e90:	eb 2e       	mov	r14, r27
    1e92:	eb 18       	sub	r14, r11
    1e94:	a3 e0       	ldi	r26, 0x03	; 3
    1e96:	ca 2e       	mov	r12, r26
    1e98:	c1 0e       	add	r12, r17
    1e9a:	8e 2d       	mov	r24, r14
    1e9c:	6c 2d       	mov	r22, r12
    1e9e:	4a 2d       	mov	r20, r10
    1ea0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1ea4:	fb e1       	ldi	r31, 0x1B	; 27
    1ea6:	ff 2e       	mov	r15, r31
    1ea8:	fb 18       	sub	r15, r11
    1eaa:	8f 2d       	mov	r24, r15
    1eac:	6c 2d       	mov	r22, r12
    1eae:	4a 2d       	mov	r20, r10
    1eb0:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1eb4:	01 2f       	mov	r16, r17
    1eb6:	0c 5f       	subi	r16, 0xFC	; 252
    1eb8:	8e 2d       	mov	r24, r14
    1eba:	60 2f       	mov	r22, r16
    1ebc:	4a 2d       	mov	r20, r10
    1ebe:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1ec2:	8f 2d       	mov	r24, r15
    1ec4:	60 2f       	mov	r22, r16
    1ec6:	4a 2d       	mov	r20, r10
    1ec8:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		
		switch(orent){
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	88 16       	cp	r8, r24
    1ed0:	71 f0       	breq	.+28     	; 0x1eee <printCell+0x208>
    1ed2:	88 16       	cp	r8, r24
    1ed4:	40 f0       	brcs	.+16     	; 0x1ee6 <printCell+0x200>
    1ed6:	82 e0       	ldi	r24, 0x02	; 2
    1ed8:	88 16       	cp	r8, r24
    1eda:	61 f0       	breq	.+24     	; 0x1ef4 <printCell+0x20e>
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	88 16       	cp	r8, r24
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <printCell+0x1fe>
    1ee2:	4a c0       	rjmp	.+148    	; 0x1f78 <printCell+0x292>
    1ee4:	0b c0       	rjmp	.+22     	; 0x1efc <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1ee6:	8d e1       	ldi	r24, 0x1D	; 29
    1ee8:	8b 19       	sub	r24, r11
    1eea:	6c 2d       	mov	r22, r12
    1eec:	0a c0       	rjmp	.+20     	; 0x1f02 <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1eee:	1b 5f       	subi	r17, 0xFB	; 251
    1ef0:	8e 2d       	mov	r24, r14
    1ef2:	06 c0       	rjmp	.+12     	; 0x1f00 <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    1ef4:	8a e1       	ldi	r24, 0x1A	; 26
    1ef6:	8b 19       	sub	r24, r11
    1ef8:	60 2f       	mov	r22, r16
    1efa:	03 c0       	rjmp	.+6      	; 0x1f02 <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    1efc:	1e 5f       	subi	r17, 0xFE	; 254
    1efe:	8f 2d       	mov	r24, r15
    1f00:	61 2f       	mov	r22, r17
    1f02:	4a 2d       	mov	r20, r10
    1f04:	37 c0       	rjmp	.+110    	; 0x1f74 <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    1f06:	77 20       	and	r7, r7
    1f08:	b9 f1       	breq	.+110    	; 0x1f78 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1f0a:	ec e1       	ldi	r30, 0x1C	; 28
    1f0c:	ce 2e       	mov	r12, r30
    1f0e:	cb 18       	sub	r12, r11
    1f10:	73 e0       	ldi	r23, 0x03	; 3
    1f12:	e7 2e       	mov	r14, r23
    1f14:	e1 0e       	add	r14, r17
    1f16:	8c 2d       	mov	r24, r12
    1f18:	6e 2d       	mov	r22, r14
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1f20:	0b e1       	ldi	r16, 0x1B	; 27
    1f22:	0b 19       	sub	r16, r11
    1f24:	80 2f       	mov	r24, r16
    1f26:	6e 2d       	mov	r22, r14
    1f28:	40 e0       	ldi	r20, 0x00	; 0
    1f2a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1f2e:	64 e0       	ldi	r22, 0x04	; 4
    1f30:	f6 2e       	mov	r15, r22
    1f32:	f1 0e       	add	r15, r17
    1f34:	8c 2d       	mov	r24, r12
    1f36:	6f 2d       	mov	r22, r15
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1f3e:	80 2f       	mov	r24, r16
    1f40:	6f 2d       	mov	r22, r15
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1f48:	8d e1       	ldi	r24, 0x1D	; 29
    1f4a:	8b 19       	sub	r24, r11
    1f4c:	6e 2d       	mov	r22, r14
    1f4e:	40 e0       	ldi	r20, 0x00	; 0
    1f50:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1f54:	1b 5f       	subi	r17, 0xFB	; 251
    1f56:	8c 2d       	mov	r24, r12
    1f58:	61 2f       	mov	r22, r17
    1f5a:	40 e0       	ldi	r20, 0x00	; 0
    1f5c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    1f60:	8a e1       	ldi	r24, 0x1A	; 26
    1f62:	8b 19       	sub	r24, r11
    1f64:	6f 2d       	mov	r22, r15
    1f66:	40 e0       	ldi	r20, 0x00	; 0
    1f68:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    1f6c:	13 50       	subi	r17, 0x03	; 3
    1f6e:	80 2f       	mov	r24, r16
    1f70:	61 2f       	mov	r22, r17
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <LCD_set_pixel>
		}
}
    1f78:	1f 91       	pop	r17
    1f7a:	0f 91       	pop	r16
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	bf 90       	pop	r11
    1f86:	af 90       	pop	r10
    1f88:	9f 90       	pop	r9
    1f8a:	8f 90       	pop	r8
    1f8c:	7f 90       	pop	r7
    1f8e:	08 95       	ret

00001f90 <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1fa8:	80 91 1e 07 	lds	r24, 0x071E
    1fac:	a8 2e       	mov	r10, r24
    1fae:	a6 94       	lsr	r10
    1fb0:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    1fb2:	43 e0       	ldi	r20, 0x03	; 3
    1fb4:	b4 2e       	mov	r11, r20
    1fb6:	b8 22       	and	r11, r24
    1fb8:	cc 24       	eor	r12, r12
    1fba:	dd 24       	eor	r13, r13
    1fbc:	1e c0       	rjmp	.+60     	; 0x1ffa <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1fbe:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    1fc0:	fa 14       	cp	r15, r10
    1fc2:	19 f0       	breq	.+6      	; 0x1fca <printMap+0x3a>
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	06 c0       	rjmp	.+12     	; 0x1fd6 <printMap+0x46>
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	1b 15       	cp	r17, r11
    1fd0:	11 f4       	brne	.+4      	; 0x1fd6 <printMap+0x46>
    1fd2:	21 e0       	ldi	r18, 0x01	; 1
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    1fd6:	6f 2d       	mov	r22, r15
    1fd8:	41 2f       	mov	r20, r17
    1fda:	00 91 1c 06 	lds	r16, 0x061C
    1fde:	e9 2c       	mov	r14, r9
    1fe0:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1fe4:	1f 5f       	subi	r17, 0xFF	; 255
    1fe6:	21 96       	adiw	r28, 0x01	; 1
    1fe8:	14 30       	cpi	r17, 0x04	; 4
    1fea:	49 f7       	brne	.-46     	; 0x1fbe <printMap+0x2e>
    1fec:	08 94       	sec
    1fee:	c1 1c       	adc	r12, r1
    1ff0:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1ff2:	84 e0       	ldi	r24, 0x04	; 4
    1ff4:	c8 16       	cp	r12, r24
    1ff6:	d1 04       	cpc	r13, r1
    1ff8:	51 f0       	breq	.+20     	; 0x200e <printMap+0x7e>
    1ffa:	fc 2c       	mov	r15, r12
    1ffc:	e6 01       	movw	r28, r12
    1ffe:	cc 0f       	add	r28, r28
    2000:	dd 1f       	adc	r29, r29
    2002:	cc 0f       	add	r28, r28
    2004:	dd 1f       	adc	r29, r29
    2006:	c2 50       	subi	r28, 0x02	; 2
    2008:	dc 4f       	sbci	r29, 0xFC	; 252
    200a:	10 e0       	ldi	r17, 0x00	; 0
    200c:	d8 cf       	rjmp	.-80     	; 0x1fbe <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    200e:	df 91       	pop	r29
    2010:	cf 91       	pop	r28
    2012:	1f 91       	pop	r17
    2014:	0f 91       	pop	r16
    2016:	ff 90       	pop	r15
    2018:	ef 90       	pop	r14
    201a:	df 90       	pop	r13
    201c:	cf 90       	pop	r12
    201e:	bf 90       	pop	r11
    2020:	af 90       	pop	r10
    2022:	9f 90       	pop	r9
    2024:	08 95       	ret

00002026 <checkOdometry>:
*					sets the flag whe appropriate
********************************************************************/
char checkOdometry( char reset )
{	
	// Check for a reset
	if (reset){
    2026:	88 23       	and	r24, r24
    2028:	91 f0       	breq	.+36     	; 0x204e <checkOdometry+0x28>
		odometryTrigger = 0;
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e0       	ldi	r26, 0x00	; 0
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	80 93 07 06 	sts	0x0607, r24
    2036:	90 93 08 06 	sts	0x0608, r25
    203a:	a0 93 09 06 	sts	0x0609, r26
    203e:	b0 93 0a 06 	sts	0x060A, r27
		STEPPER_set_steps(STEPPER_BOTH,odometryTrigger);
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	60 e0       	ldi	r22, 0x00	; 0
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <STEPPER_set_steps>
    204c:	17 c0       	rjmp	.+46     	; 0x207c <checkOdometry+0x56>
		return SUCCESS;
	}

	// Get the current number of steps
	curr_step = STEPPER_get_nSteps();
    204e:	0e 94 e3 1c 	call	0x39c6	; 0x39c6 <STEPPER_get_nSteps>
    2052:	60 93 1a 07 	sts	0x071A, r22
    2056:	70 93 1b 07 	sts	0x071B, r23
    205a:	80 93 1c 07 	sts	0x071C, r24
    205e:	90 93 1d 07 	sts	0x071D, r25
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	80 91 1c 07 	lds	r24, 0x071C
    2068:	90 91 1d 07 	lds	r25, 0x071D
    206c:	20 91 1a 07 	lds	r18, 0x071A
    2070:	30 91 1b 07 	lds	r19, 0x071B
    2074:	82 0f       	add	r24, r18
    2076:	93 1f       	adc	r25, r19
    2078:	89 2b       	or	r24, r25
    207a:	09 f4       	brne	.+2      	; 0x207e <checkOdometry+0x58>
    207c:	41 e0       	ldi	r20, 0x01	; 1
	}

	// But if not zero
	//then return fial
	return FAIL;
}
    207e:	84 2f       	mov	r24, r20
    2080:	08 95       	ret

00002082 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{
    2082:	5f 92       	push	r5
    2084:	6f 92       	push	r6
    2086:	7f 92       	push	r7
    2088:	8f 92       	push	r8
    208a:	9f 92       	push	r9
    208c:	af 92       	push	r10
    208e:	bf 92       	push	r11
    2090:	cf 92       	push	r12
    2092:	df 92       	push	r13
    2094:	ef 92       	push	r14
    2096:	ff 92       	push	r15
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
	// Check for collision
	if(ftIR <= IR_OBST_F_THRESH){
    20a0:	e0 90 7f 05 	lds	r14, 0x057F
    20a4:	f0 90 80 05 	lds	r15, 0x0580
    20a8:	00 91 81 05 	lds	r16, 0x0581
    20ac:	10 91 82 05 	lds	r17, 0x0582
    20b0:	c8 01       	movw	r24, r16
    20b2:	b7 01       	movw	r22, r14
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	40 e2       	ldi	r20, 0x20	; 32
    20ba:	51 e4       	ldi	r21, 0x41	; 65
    20bc:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    20c0:	18 16       	cp	r1, r24
    20c2:	14 f0       	brlt	.+4      	; 0x20c8 <moveWall+0x46>
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	15 c1       	rjmp	.+554    	; 0x22f2 <moveWall+0x270>
		return SUCCESS;
	}

	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    20c8:	55 24       	eor	r5, r5
    20ca:	c8 01       	movw	r24, r16
    20cc:	b7 01       	movw	r22, r14
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e0       	ldi	r20, 0x00	; 0
    20d4:	50 e0       	ldi	r21, 0x00	; 0
    20d6:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    20da:	88 23       	and	r24, r24
    20dc:	14 f4       	brge	.+4      	; 0x20e2 <moveWall+0x60>
    20de:	55 24       	eor	r5, r5
    20e0:	53 94       	inc	r5
    20e2:	a0 90 26 07 	lds	r10, 0x0726
    20e6:	b0 90 27 07 	lds	r11, 0x0727
    20ea:	c0 90 28 07 	lds	r12, 0x0728
    20ee:	d0 90 29 07 	lds	r13, 0x0729
    20f2:	60 90 22 07 	lds	r6, 0x0722
    20f6:	70 90 23 07 	lds	r7, 0x0723
    20fa:	80 90 24 07 	lds	r8, 0x0724
    20fe:	90 90 25 07 	lds	r9, 0x0725
	if(!isWall){
    2102:	55 20       	and	r5, r5
    2104:	41 f5       	brne	.+80     	; 0x2156 <moveWall+0xd4>
    2106:	60 91 89 05 	lds	r22, 0x0589
    210a:	70 91 8a 05 	lds	r23, 0x058A
    210e:	80 91 8b 05 	lds	r24, 0x058B
    2112:	90 91 8c 05 	lds	r25, 0x058C
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 e7       	ldi	r20, 0x70	; 112
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    2122:	87 fd       	sbrc	r24, 7
    2124:	18 c0       	rjmp	.+48     	; 0x2156 <moveWall+0xd4>
    2126:	c6 01       	movw	r24, r12
    2128:	b5 01       	movw	r22, r10
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e7       	ldi	r20, 0x70	; 112
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    2136:	87 fd       	sbrc	r24, 7
    2138:	0e c0       	rjmp	.+28     	; 0x2156 <moveWall+0xd4>
    213a:	c4 01       	movw	r24, r8
    213c:	b3 01       	movw	r22, r6
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e7       	ldi	r20, 0x70	; 112
    2144:	51 e4       	ldi	r21, 0x41	; 65
    2146:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    214a:	87 fd       	sbrc	r24, 7
    214c:	04 c0       	rjmp	.+8      	; 0x2156 <moveWall+0xd4>
	
		// Update the speeds the same to go forward
		STEPPER_set_speed(STEPPER_BOTH, MAX_SPEED);
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	60 e9       	ldi	r22, 0x90	; 144
    2152:	71 e0       	ldi	r23, 0x01	; 1
    2154:	c9 c0       	rjmp	.+402    	; 0x22e8 <moveWall+0x266>
	BOOL isLEFT;
	float error;	
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2156:	c6 01       	movw	r24, r12
    2158:	b5 01       	movw	r22, r10
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e7       	ldi	r20, 0x70	; 112
    2160:	51 e4       	ldi	r21, 0x41	; 65
    2162:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__gesf2>
    2166:	18 16       	cp	r1, r24
    2168:	64 f4       	brge	.+24     	; 0x2182 <moveWall+0x100>
		rtIR = IR_WALL_R_THRESH-18;
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	a0 e4       	ldi	r26, 0x40	; 64
    2170:	b0 ec       	ldi	r27, 0xC0	; 192
    2172:	80 93 26 07 	sts	0x0726, r24
    2176:	90 93 27 07 	sts	0x0727, r25
    217a:	a0 93 28 07 	sts	0x0728, r26
    217e:	b0 93 29 07 	sts	0x0729, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2182:	c4 01       	movw	r24, r8
    2184:	b3 01       	movw	r22, r6
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e7       	ldi	r20, 0x70	; 112
    218c:	51 e4       	ldi	r21, 0x41	; 65
    218e:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__gesf2>
    2192:	18 16       	cp	r1, r24
    2194:	14 f0       	brlt	.+4      	; 0x219a <moveWall+0x118>
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	0d c0       	rjmp	.+26     	; 0x21b4 <moveWall+0x132>
		ltIR = IR_WALL_L_THRESH-18;
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e4       	ldi	r26, 0x40	; 64
    21a0:	b0 ec       	ldi	r27, 0xC0	; 192
    21a2:	80 93 22 07 	sts	0x0722, r24
    21a6:	90 93 23 07 	sts	0x0723, r25
    21aa:	a0 93 24 07 	sts	0x0724, r26
    21ae:	b0 93 25 07 	sts	0x0725, r27
    21b2:	81 e0       	ldi	r24, 0x01	; 1
		isLEFT = 1;
	}
	
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    21b4:	55 20       	and	r5, r5
    21b6:	21 f1       	breq	.+72     	; 0x2200 <moveWall+0x17e>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    21b8:	88 23       	and	r24, r24
    21ba:	29 f0       	breq	.+10     	; 0x21c6 <moveWall+0x144>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    21bc:	60 e0       	ldi	r22, 0x00	; 0
    21be:	70 e0       	ldi	r23, 0x00	; 0
    21c0:	8a e7       	ldi	r24, 0x7A	; 122
    21c2:	94 e4       	ldi	r25, 0x44	; 68
    21c4:	04 c0       	rjmp	.+8      	; 0x21ce <moveWall+0x14c>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	70 e0       	ldi	r23, 0x00	; 0
    21ca:	8a e7       	ldi	r24, 0x7A	; 122
    21cc:	94 ec       	ldi	r25, 0xC4	; 196
    21ce:	a8 01       	movw	r20, r16
    21d0:	97 01       	movw	r18, r14
    21d2:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    21d6:	20 91 22 07 	lds	r18, 0x0722
    21da:	30 91 23 07 	lds	r19, 0x0723
    21de:	40 91 24 07 	lds	r20, 0x0724
    21e2:	50 91 25 07 	lds	r21, 0x0725
    21e6:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    21ea:	9b 01       	movw	r18, r22
    21ec:	ac 01       	movw	r20, r24
    21ee:	60 91 26 07 	lds	r22, 0x0726
    21f2:	70 91 27 07 	lds	r23, 0x0727
    21f6:	80 91 28 07 	lds	r24, 0x0728
    21fa:	90 91 29 07 	lds	r25, 0x0729
    21fe:	10 c0       	rjmp	.+32     	; 0x2220 <moveWall+0x19e>
	// the error is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2200:	60 91 26 07 	lds	r22, 0x0726
    2204:	70 91 27 07 	lds	r23, 0x0727
    2208:	80 91 28 07 	lds	r24, 0x0728
    220c:	90 91 29 07 	lds	r25, 0x0729
    2210:	20 91 22 07 	lds	r18, 0x0722
    2214:	30 91 23 07 	lds	r19, 0x0723
    2218:	40 91 24 07 	lds	r20, 0x0724
    221c:	50 91 25 07 	lds	r21, 0x0725
    2220:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2224:	90 58       	subi	r25, 0x80	; 128
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    222c:	7b 01       	movw	r14, r22
    222e:	8c 01       	movw	r16, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2230:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <__fixsfsi>
    2234:	eb 01       	movw	r28, r22
    2236:	77 ff       	sbrs	r23, 7
    2238:	03 c0       	rjmp	.+6      	; 0x2240 <moveWall+0x1be>
    223a:	d0 95       	com	r29
    223c:	c1 95       	neg	r28
    223e:	df 4f       	sbci	r29, 0xFF	; 255
    2240:	c5 36       	cpi	r28, 0x65	; 101
    2242:	d1 05       	cpc	r29, r1
    2244:	fc f0       	brlt	.+62     	; 0x2284 <moveWall+0x202>
    2246:	c8 01       	movw	r24, r16
    2248:	b7 01       	movw	r22, r14
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	50 e0       	ldi	r21, 0x00	; 0
    2252:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    2256:	88 23       	and	r24, r24
    2258:	a9 f0       	breq	.+42     	; 0x2284 <moveWall+0x202>
		effort = MAX_EFFORT*(effort/abs(effort));
    225a:	be 01       	movw	r22, r28
    225c:	88 27       	eor	r24, r24
    225e:	77 fd       	sbrc	r23, 7
    2260:	80 95       	com	r24
    2262:	98 2f       	mov	r25, r24
    2264:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatsisf>
    2268:	9b 01       	movw	r18, r22
    226a:	ac 01       	movw	r20, r24
    226c:	c8 01       	movw	r24, r16
    226e:	b7 01       	movw	r22, r14
    2270:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	48 ec       	ldi	r20, 0xC8	; 200
    227a:	52 e4       	ldi	r21, 0x42	; 66
    227c:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    2280:	7b 01       	movw	r14, r22
    2282:	8c 01       	movw	r16, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2284:	c8 01       	movw	r24, r16
    2286:	b7 01       	movw	r22, r14
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	48 ec       	ldi	r20, 0xC8	; 200
    228e:	52 e4       	ldi	r21, 0x42	; 66
    2290:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    2294:	7b 01       	movw	r14, r22
    2296:	8c 01       	movw	r16, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update the speeds the same to move with wall
	STEPPER_set_speed(STEPPER_LEFT, stepper_speed_L);
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	48 e4       	ldi	r20, 0x48	; 72
    229e:	53 e4       	ldi	r21, 0x43	; 67
    22a0:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	48 e4       	ldi	r20, 0x48	; 72
    22aa:	53 e4       	ldi	r21, 0x43	; 67
    22ac:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    22b0:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    22b4:	9b 01       	movw	r18, r22
    22b6:	ac 01       	movw	r20, r24
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	b9 01       	movw	r22, r18
    22bc:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <STEPPER_set_speed>
	STEPPER_set_speed(STEPPER_RIGHT, stepper_speed_R);
    22c0:	c8 01       	movw	r24, r16
    22c2:	b7 01       	movw	r22, r14
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	48 e4       	ldi	r20, 0x48	; 72
    22ca:	53 ec       	ldi	r21, 0xC3	; 195
    22cc:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	48 e4       	ldi	r20, 0x48	; 72
    22d6:	53 e4       	ldi	r21, 0x43	; 67
    22d8:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    22dc:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    22e0:	9b 01       	movw	r18, r22
    22e2:	ac 01       	movw	r20, r24
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	b9 01       	movw	r22, r18
    22e8:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <STEPPER_set_speed>
	
	// Return weather or not we are finished
	return checkOdometry(NO_RESET);
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	0e 94 13 10 	call	0x2026	; 0x2026 <checkOdometry>
}
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	1f 91       	pop	r17
    22f8:	0f 91       	pop	r16
    22fa:	ff 90       	pop	r15
    22fc:	ef 90       	pop	r14
    22fe:	df 90       	pop	r13
    2300:	cf 90       	pop	r12
    2302:	bf 90       	pop	r11
    2304:	af 90       	pop	r10
    2306:	9f 90       	pop	r9
    2308:	8f 90       	pop	r8
    230a:	7f 90       	pop	r7
    230c:	6f 90       	pop	r6
    230e:	5f 90       	pop	r5
    2310:	08 95       	ret

00002312 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2312:	0e 94 56 21 	call	0x42ac	; 0x42ac <ATTINY_open>
    2316:	90 93 06 05 	sts	0x0506, r25
    231a:	80 93 05 05 	sts	0x0505, r24
	LEopstat = LED_open(); //open the LED module
    231e:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <LED_open>
    2322:	90 93 04 05 	sts	0x0504, r25
    2326:	80 93 03 05 	sts	0x0503, r24
	LCopstat = LCD_open(); //open the LCD module
    232a:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <LCD_open>
    232e:	90 93 02 05 	sts	0x0502, r25
    2332:	80 93 01 05 	sts	0x0501, r24
	STEPPER_open(); // Open STEPPER module for use
    2336:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <SPKR_open>
	
	LED_open();
    2340:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <LED_open>
	I2C_open();
    2344:	0e 94 b0 22 	call	0x4560	; 0x4560 <I2C_open>
	ADC_open();//open the ADC module
    2348:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	0e 94 b6 1a 	call	0x356c	; 0x356c <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    2352:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <checkIR>
	prefilter(1);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    235c:	8f ee       	ldi	r24, 0xEF	; 239
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a5 e8       	ldi	r26, 0x85	; 133
    2362:	b1 e4       	ldi	r27, 0x41	; 65
    2364:	80 93 07 06 	sts	0x0607, r24
    2368:	90 93 08 06 	sts	0x0608, r25
    236c:	a0 93 09 06 	sts	0x0609, r26
    2370:	b0 93 0a 06 	sts	0x060A, r27
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	0a c0       	rjmp	.+20     	; 0x238e <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    237a:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	80 32       	cpi	r24, 0x20	; 32
    2380:	91 05       	cpc	r25, r1
    2382:	d9 f7       	brne	.-10     	; 0x237a <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    2384:	2f 5f       	subi	r18, 0xFF	; 255
    2386:	3f 4f       	sbci	r19, 0xFF	; 255
    2388:	24 30       	cpi	r18, 0x04	; 4
    238a:	31 05       	cpc	r19, r1
    238c:	59 f0       	breq	.+22     	; 0x23a4 <initializeRobot+0x92>
    238e:	f9 01       	movw	r30, r18
    2390:	55 e0       	ldi	r21, 0x05	; 5
    2392:	ee 0f       	add	r30, r30
    2394:	ff 1f       	adc	r31, r31
    2396:	5a 95       	dec	r21
    2398:	e1 f7       	brne	.-8      	; 0x2392 <initializeRobot+0x80>
    239a:	e6 56       	subi	r30, 0x66	; 102
    239c:	f9 4f       	sbci	r31, 0xF9	; 249
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	eb cf       	rjmp	.-42     	; 0x237a <initializeRobot+0x68>
    23a4:	08 95       	ret

000023a6 <fourNeighborSearch>:
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    23a6:	48 2f       	mov	r20, r24
    23a8:	46 95       	lsr	r20
    23aa:	46 95       	lsr	r20
	unsigned char curCol = (curCell&0b0011);
    23ac:	58 2f       	mov	r21, r24
    23ae:	53 70       	andi	r21, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 0){
    23b0:	a4 2f       	mov	r26, r20
    23b2:	b0 e0       	ldi	r27, 0x00	; 0
    23b4:	25 2f       	mov	r18, r21
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	fd 01       	movw	r30, r26
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	ee 0f       	add	r30, r30
    23c0:	ff 1f       	adc	r31, r31
    23c2:	e2 0f       	add	r30, r18
    23c4:	f3 1f       	adc	r31, r19
    23c6:	e6 58       	subi	r30, 0x86	; 134
    23c8:	fb 4f       	sbci	r31, 0xFB	; 251
    23ca:	80 81       	ld	r24, Z
    23cc:	88 23       	and	r24, r24
    23ce:	11 f4       	brne	.+4      	; 0x23d4 <fourNeighborSearch+0x2e>
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	08 95       	ret
	
	// Perform a 4-neighbor search and store the lowest value
	
	// LCD_clear();
	//Check the north cell
	curRow--;
    23d4:	e4 2f       	mov	r30, r20
    23d6:	e1 50       	subi	r30, 0x01	; 1
	if((curRow)<WORLD_ROW_SIZE){
    23d8:	e4 30       	cpi	r30, 0x04	; 4
    23da:	80 f4       	brcc	.+32     	; 0x23fc <fourNeighborSearch+0x56>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	ee 0f       	add	r30, r30
    23e4:	ff 1f       	adc	r31, r31
    23e6:	e2 0f       	add	r30, r18
    23e8:	f3 1f       	adc	r31, r19
    23ea:	e6 58       	subi	r30, 0x86	; 134
    23ec:	fb 4f       	sbci	r31, 0xFB	; 251
    23ee:	e0 81       	ld	r30, Z
		// LCD_printf("NORTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    23f0:	e4 36       	cpi	r30, 0x64	; 100
    23f2:	20 f4       	brcc	.+8      	; 0x23fc <fourNeighborSearch+0x56>
			minVal = curVal;
			nextOrientation = NORTH;
    23f4:	10 92 1d 06 	sts	0x061D, r1
    23f8:	9e 2f       	mov	r25, r30
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <fourNeighborSearch+0x58>
    23fc:	94 e6       	ldi	r25, 0x64	; 100
		}
	}
	
	curRow++;
	curRow++;
    23fe:	84 2f       	mov	r24, r20
    2400:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the south cell
	if((curRow)<WORLD_ROW_SIZE){
    2402:	84 30       	cpi	r24, 0x04	; 4
    2404:	88 f4       	brcc	.+34     	; 0x2428 <fourNeighborSearch+0x82>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    2406:	e8 2f       	mov	r30, r24
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	ee 0f       	add	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	e2 0f       	add	r30, r18
    2414:	f3 1f       	adc	r31, r19
    2416:	e6 58       	subi	r30, 0x86	; 134
    2418:	fb 4f       	sbci	r31, 0xFB	; 251
    241a:	e0 81       	ld	r30, Z
		// LCD_printf("SOUTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    241c:	e9 17       	cp	r30, r25
    241e:	20 f4       	brcc	.+8      	; 0x2428 <fourNeighborSearch+0x82>
			minVal = curVal;
			nextOrientation = SOUTH;
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	80 93 1d 06 	sts	0x061D, r24
    2426:	9e 2f       	mov	r25, r30
		}
	}
	
	curRow--;
	curCol++;
    2428:	85 2f       	mov	r24, r21
    242a:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the east cell
	if((curCol)<WORLD_COLUMN_SIZE){
    242c:	84 30       	cpi	r24, 0x04	; 4
    242e:	81 f0       	breq	.+32     	; 0x2450 <fourNeighborSearch+0xaa>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
    2430:	fd 01       	movw	r30, r26
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	e8 0f       	add	r30, r24
    243c:	f1 1d       	adc	r31, r1
    243e:	e6 58       	subi	r30, 0x86	; 134
    2440:	fb 4f       	sbci	r31, 0xFB	; 251
    2442:	e0 81       	ld	r30, Z
		// LCD_printf("EAST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2444:	e9 17       	cp	r30, r25
    2446:	20 f4       	brcc	.+8      	; 0x2450 <fourNeighborSearch+0xaa>
			minVal = curVal;
			nextOrientation = EAST;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	80 93 1d 06 	sts	0x061D, r24
    244e:	9e 2f       	mov	r25, r30
		}
	}
	
	curCol--;
	curCol--;
    2450:	85 2f       	mov	r24, r21
    2452:	81 50       	subi	r24, 0x01	; 1
	// Check the west cell
	if((curCol)<WORLD_COLUMN_SIZE){
    2454:	84 30       	cpi	r24, 0x04	; 4
    2456:	80 f4       	brcc	.+32     	; 0x2478 <fourNeighborSearch+0xd2>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
		// LCD_printf("WEST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2458:	aa 0f       	add	r26, r26
    245a:	bb 1f       	adc	r27, r27
    245c:	aa 0f       	add	r26, r26
    245e:	bb 1f       	adc	r27, r27
    2460:	a8 0f       	add	r26, r24
    2462:	b1 1d       	adc	r27, r1
    2464:	a6 58       	subi	r26, 0x86	; 134
    2466:	bb 4f       	sbci	r27, 0xFB	; 251
    2468:	8c 91       	ld	r24, X
    246a:	89 17       	cp	r24, r25
    246c:	28 f4       	brcc	.+10     	; 0x2478 <fourNeighborSearch+0xd2>
			minVal = curVal;
			nextOrientation = WEST;
    246e:	83 e0       	ldi	r24, 0x03	; 3
    2470:	80 93 1d 06 	sts	0x061D, r24
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	08 95       	ret
    2478:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    247a:	08 95       	ret

0000247c <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
void wavefrontMake(void)
{
    247c:	bf 92       	push	r11
    247e:	cf 92       	push	r12
    2480:	df 92       	push	r13
    2482:	ef 92       	push	r14
    2484:	ff 92       	push	r15
    2486:	0f 93       	push	r16
    2488:	1f 93       	push	r17
    248a:	cf 93       	push	r28
    248c:	df 93       	push	r29
	// User-defined goal location
	// unsigned char goalLocation = currentGoalWorld;
	// Extract x and y goal location
	int rowGoal = (currentGoalWorld>>2);
    248e:	80 91 8d 05 	lds	r24, 0x058D
	int colGoal = (currentGoalWorld&0b0011);
    2492:	28 2f       	mov	r18, r24
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	23 70       	andi	r18, 0x03	; 3
    2498:	30 70       	andi	r19, 0x00	; 0
    249a:	86 95       	lsr	r24
    249c:	86 95       	lsr	r24
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	cc 27       	eor	r28, r28
    24a2:	dd 27       	eor	r29, r29
    24a4:	c8 1b       	sub	r28, r24
    24a6:	d9 0b       	sbc	r29, r25
    24a8:	00 e0       	ldi	r16, 0x00	; 0
    24aa:	10 e0       	ldi	r17, 0x00	; 0
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    24ac:	cc 24       	eor	r12, r12
    24ae:	dd 24       	eor	r13, r13
    24b0:	c2 1a       	sub	r12, r18
    24b2:	d3 0a       	sbc	r13, r19
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
				ROBOT_METRIC_WORLD[row][col] = 99;
    24b4:	f3 e6       	ldi	r31, 0x63	; 99
    24b6:	bf 2e       	mov	r11, r31
    24b8:	25 c0       	rjmp	.+74     	; 0x2504 <wavefrontMake+0x88>
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
    24ba:	8c 91       	ld	r24, X
    24bc:	8f 30       	cpi	r24, 0x0F	; 15
    24be:	11 f4       	brne	.+4      	; 0x24c4 <wavefrontMake+0x48>
				ROBOT_METRIC_WORLD[row][col] = 99;
    24c0:	b0 82       	st	Z, r11
    24c2:	11 c0       	rjmp	.+34     	; 0x24e6 <wavefrontMake+0x6a>
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
    24c4:	9a 01       	movw	r18, r20
    24c6:	57 ff       	sbrs	r21, 7
    24c8:	04 c0       	rjmp	.+8      	; 0x24d2 <wavefrontMake+0x56>
    24ca:	22 27       	eor	r18, r18
    24cc:	33 27       	eor	r19, r19
    24ce:	24 1b       	sub	r18, r20
    24d0:	35 0b       	sbc	r19, r21
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
    24d2:	22 9f       	mul	r18, r18
    24d4:	c0 01       	movw	r24, r0
    24d6:	23 9f       	mul	r18, r19
    24d8:	90 0d       	add	r25, r0
    24da:	32 9f       	mul	r19, r18
    24dc:	90 0d       	add	r25, r0
    24de:	11 24       	eor	r1, r1
    24e0:	8e 0d       	add	r24, r14
    24e2:	9f 1d       	adc	r25, r15
    24e4:	80 83       	st	Z, r24
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
    24e6:	6f 5f       	subi	r22, 0xFF	; 255
    24e8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ea:	11 96       	adiw	r26, 0x01	; 1
    24ec:	31 96       	adiw	r30, 0x01	; 1
    24ee:	4f 5f       	subi	r20, 0xFF	; 255
    24f0:	5f 4f       	sbci	r21, 0xFF	; 255
    24f2:	64 30       	cpi	r22, 0x04	; 4
    24f4:	71 05       	cpc	r23, r1
    24f6:	09 f7       	brne	.-62     	; 0x24ba <wavefrontMake+0x3e>
	unsigned int rowDelta, colDelta;
	int row, col;
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
    24f8:	0f 5f       	subi	r16, 0xFF	; 255
    24fa:	1f 4f       	sbci	r17, 0xFF	; 255
    24fc:	21 96       	adiw	r28, 0x01	; 1
    24fe:	04 30       	cpi	r16, 0x04	; 4
    2500:	11 05       	cpc	r17, r1
    2502:	e9 f0       	breq	.+58     	; 0x253e <wavefrontMake+0xc2>
				ROBOT_METRIC_WORLD[row][col] = 99;
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
    2504:	ce 01       	movw	r24, r28
    2506:	d7 ff       	sbrs	r29, 7
    2508:	04 c0       	rjmp	.+8      	; 0x2512 <wavefrontMake+0x96>
    250a:	88 27       	eor	r24, r24
    250c:	99 27       	eor	r25, r25
    250e:	8c 1b       	sub	r24, r28
    2510:	9d 0b       	sbc	r25, r29
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    2512:	88 9f       	mul	r24, r24
    2514:	70 01       	movw	r14, r0
    2516:	89 9f       	mul	r24, r25
    2518:	f0 0c       	add	r15, r0
    251a:	98 9f       	mul	r25, r24
    251c:	f0 0c       	add	r15, r0
    251e:	11 24       	eor	r1, r1
    2520:	c8 01       	movw	r24, r16
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	88 0f       	add	r24, r24
    2528:	99 1f       	adc	r25, r25
    252a:	dc 01       	movw	r26, r24
    252c:	a2 50       	subi	r26, 0x02	; 2
    252e:	bc 4f       	sbci	r27, 0xFC	; 252
    2530:	fc 01       	movw	r30, r24
    2532:	e6 58       	subi	r30, 0x86	; 134
    2534:	fb 4f       	sbci	r31, 0xFB	; 251
    2536:	a6 01       	movw	r20, r12
    2538:	60 e0       	ldi	r22, 0x00	; 0
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	be cf       	rjmp	.-132    	; 0x24ba <wavefrontMake+0x3e>
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
			}
		}
	}
}
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	cf 90       	pop	r12
    254e:	bf 90       	pop	r11
    2550:	08 95       	ret

00002552 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    2552:	ef 92       	push	r14
    2554:	ff 92       	push	r15
    2556:	0f 93       	push	r16
    2558:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    255a:	60 91 7f 05 	lds	r22, 0x057F
    255e:	70 91 80 05 	lds	r23, 0x0580
    2562:	80 91 81 05 	lds	r24, 0x0581
    2566:	90 91 82 05 	lds	r25, 0x0582
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e5       	ldi	r20, 0x50	; 80
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    2576:	f8 2e       	mov	r15, r24
    2578:	ff 1c       	adc	r15, r15
    257a:	ff 24       	eor	r15, r15
    257c:	ff 1c       	adc	r15, r15
    257e:	ff 0c       	add	r15, r15
    2580:	ff 0c       	add	r15, r15
    2582:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    2584:	60 91 22 07 	lds	r22, 0x0722
    2588:	70 91 23 07 	lds	r23, 0x0723
    258c:	80 91 24 07 	lds	r24, 0x0724
    2590:	90 91 25 07 	lds	r25, 0x0725
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	40 ef       	ldi	r20, 0xF0	; 240
    259a:	51 e4       	ldi	r21, 0x41	; 65
    259c:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    25a0:	08 2f       	mov	r16, r24
    25a2:	00 1f       	adc	r16, r16
    25a4:	00 27       	eor	r16, r16
    25a6:	00 1f       	adc	r16, r16
    25a8:	00 0f       	add	r16, r16
    25aa:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    25ac:	60 91 89 05 	lds	r22, 0x0589
    25b0:	70 91 8a 05 	lds	r23, 0x058A
    25b4:	80 91 8b 05 	lds	r24, 0x058B
    25b8:	90 91 8c 05 	lds	r25, 0x058C
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	4c e0       	ldi	r20, 0x0C	; 12
    25c2:	52 e4       	ldi	r21, 0x42	; 66
    25c4:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    25c8:	18 2f       	mov	r17, r24
    25ca:	11 1f       	adc	r17, r17
    25cc:	11 27       	eor	r17, r17
    25ce:	11 1f       	adc	r17, r17
    25d0:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    25d2:	ee 24       	eor	r14, r14
    25d4:	60 91 26 07 	lds	r22, 0x0726
    25d8:	70 91 27 07 	lds	r23, 0x0727
    25dc:	80 91 28 07 	lds	r24, 0x0728
    25e0:	90 91 29 07 	lds	r25, 0x0729
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 ef       	ldi	r20, 0xF0	; 240
    25ea:	51 e4       	ldi	r21, 0x41	; 65
    25ec:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    25f0:	88 23       	and	r24, r24
    25f2:	14 f4       	brge	.+4      	; 0x25f8 <checkWorld+0xa6>
    25f4:	ee 24       	eor	r14, r14
    25f6:	e3 94       	inc	r14
    25f8:	8f 2d       	mov	r24, r15
    25fa:	8e 0d       	add	r24, r14
    25fc:	80 0f       	add	r24, r16
    25fe:	81 0f       	add	r24, r17
    2600:	80 93 87 05 	sts	0x0587, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    2604:	20 91 88 05 	lds	r18, 0x0588
    2608:	e2 2f       	mov	r30, r18
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	ee 55       	subi	r30, 0x5E	; 94
    260e:	f8 4f       	sbci	r31, 0xF8	; 248
    2610:	91 81       	ldd	r25, Z+1	; 0x01
    2612:	90 93 8e 05 	sts	0x058E, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    2616:	89 17       	cp	r24, r25
    2618:	19 f4       	brne	.+6      	; 0x2620 <checkWorld+0xce>
		currentMoveWorld += 1;
    261a:	2f 5f       	subi	r18, 0xFF	; 255
    261c:	20 93 88 05 	sts	0x0588, r18
	}
}
    2620:	1f 91       	pop	r17
    2622:	0f 91       	pop	r16
    2624:	ff 90       	pop	r15
    2626:	ef 90       	pop	r14
    2628:	08 95       	ret

0000262a <moveWallOld>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWallOld( void )
{	
    262a:	2f 92       	push	r2
    262c:	3f 92       	push	r3
    262e:	4f 92       	push	r4
    2630:	5f 92       	push	r5
    2632:	6f 92       	push	r6
    2634:	7f 92       	push	r7
    2636:	8f 92       	push	r8
    2638:	9f 92       	push	r9
    263a:	af 92       	push	r10
    263c:	bf 92       	push	r11
    263e:	cf 92       	push	r12
    2640:	df 92       	push	r13
    2642:	ef 92       	push	r14
    2644:	ff 92       	push	r15
    2646:	0f 93       	push	r16
    2648:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    264a:	e0 90 7f 05 	lds	r14, 0x057F
    264e:	f0 90 80 05 	lds	r15, 0x0580
    2652:	00 91 81 05 	lds	r16, 0x0581
    2656:	10 91 82 05 	lds	r17, 0x0582
    265a:	33 24       	eor	r3, r3
    265c:	c8 01       	movw	r24, r16
    265e:	b7 01       	movw	r22, r14
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	30 e0       	ldi	r19, 0x00	; 0
    2664:	40 e0       	ldi	r20, 0x00	; 0
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    266c:	88 23       	and	r24, r24
    266e:	14 f4       	brge	.+4      	; 0x2674 <moveWallOld+0x4a>
    2670:	33 24       	eor	r3, r3
    2672:	33 94       	inc	r3
    2674:	a0 90 26 07 	lds	r10, 0x0726
    2678:	b0 90 27 07 	lds	r11, 0x0727
    267c:	c0 90 28 07 	lds	r12, 0x0728
    2680:	d0 90 29 07 	lds	r13, 0x0729
    2684:	40 90 22 07 	lds	r4, 0x0722
    2688:	50 90 23 07 	lds	r5, 0x0723
    268c:	60 90 24 07 	lds	r6, 0x0724
    2690:	70 90 25 07 	lds	r7, 0x0725
    2694:	88 24       	eor	r8, r8
    2696:	60 91 89 05 	lds	r22, 0x0589
    269a:	70 91 8a 05 	lds	r23, 0x058A
    269e:	80 91 8b 05 	lds	r24, 0x058B
    26a2:	90 91 8c 05 	lds	r25, 0x058C
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e7       	ldi	r20, 0x70	; 112
    26ac:	51 e4       	ldi	r21, 0x41	; 65
    26ae:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	14 f4       	brge	.+4      	; 0x26ba <moveWallOld+0x90>
    26b6:	88 24       	eor	r8, r8
    26b8:	83 94       	inc	r8
    26ba:	93 2c       	mov	r9, r3
    26bc:	98 28       	or	r9, r8
    26be:	88 24       	eor	r8, r8
    26c0:	c6 01       	movw	r24, r12
    26c2:	b5 01       	movw	r22, r10
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	30 e0       	ldi	r19, 0x00	; 0
    26c8:	40 e7       	ldi	r20, 0x70	; 112
    26ca:	51 e4       	ldi	r21, 0x41	; 65
    26cc:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    26d0:	88 23       	and	r24, r24
    26d2:	14 f4       	brge	.+4      	; 0x26d8 <moveWallOld+0xae>
    26d4:	88 24       	eor	r8, r8
    26d6:	83 94       	inc	r8
    26d8:	98 28       	or	r9, r8
    26da:	88 24       	eor	r8, r8
    26dc:	c3 01       	movw	r24, r6
    26de:	b2 01       	movw	r22, r4
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e7       	ldi	r20, 0x70	; 112
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    26ec:	88 23       	and	r24, r24
    26ee:	14 f4       	brge	.+4      	; 0x26f4 <moveWallOld+0xca>
    26f0:	88 24       	eor	r8, r8
    26f2:	83 94       	inc	r8
    26f4:	29 2c       	mov	r2, r9
    26f6:	28 28       	or	r2, r8
	if(!isWall){	
    26f8:	81 f4       	brne	.+32     	; 0x271a <moveWallOld+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	70 e0       	ldi	r23, 0x00	; 0
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	9f e4       	ldi	r25, 0x4F	; 79
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e2       	ldi	r20, 0x20	; 32
    2708:	51 e4       	ldi	r21, 0x41	; 65
    270a:	79 01       	movw	r14, r18
    270c:	8a 01       	movw	r16, r20
    270e:	59 01       	movw	r10, r18
    2710:	6a 01       	movw	r12, r20
    2712:	88 24       	eor	r8, r8
    2714:	0e 94 15 08 	call	0x102a	; 0x102a <move_arc_stnb>
    2718:	f7 c0       	rjmp	.+494    	; 0x2908 <moveWallOld+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    271a:	c6 01       	movw	r24, r12
    271c:	b5 01       	movw	r22, r10
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e7       	ldi	r20, 0x70	; 112
    2724:	51 e4       	ldi	r21, 0x41	; 65
    2726:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__gesf2>
    272a:	18 16       	cp	r1, r24
    272c:	64 f4       	brge	.+24     	; 0x2746 <moveWallOld+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	a0 e4       	ldi	r26, 0x40	; 64
    2734:	b0 ec       	ldi	r27, 0xC0	; 192
    2736:	80 93 26 07 	sts	0x0726, r24
    273a:	90 93 27 07 	sts	0x0727, r25
    273e:	a0 93 28 07 	sts	0x0728, r26
    2742:	b0 93 29 07 	sts	0x0729, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2746:	c3 01       	movw	r24, r6
    2748:	b2 01       	movw	r22, r4
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e7       	ldi	r20, 0x70	; 112
    2750:	51 e4       	ldi	r21, 0x41	; 65
    2752:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__gesf2>
    2756:	18 16       	cp	r1, r24
    2758:	14 f0       	brlt	.+4      	; 0x275e <moveWallOld+0x134>
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	0d c0       	rjmp	.+26     	; 0x2778 <moveWallOld+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	a0 e4       	ldi	r26, 0x40	; 64
    2764:	b0 ec       	ldi	r27, 0xC0	; 192
    2766:	80 93 22 07 	sts	0x0722, r24
    276a:	90 93 23 07 	sts	0x0723, r25
    276e:	a0 93 24 07 	sts	0x0724, r26
    2772:	b0 93 25 07 	sts	0x0725, r27
    2776:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2778:	33 20       	and	r3, r3
    277a:	21 f1       	breq	.+72     	; 0x27c4 <moveWallOld+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    277c:	88 23       	and	r24, r24
    277e:	29 f0       	breq	.+10     	; 0x278a <moveWallOld+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2780:	60 e0       	ldi	r22, 0x00	; 0
    2782:	70 e0       	ldi	r23, 0x00	; 0
    2784:	8a e7       	ldi	r24, 0x7A	; 122
    2786:	94 e4       	ldi	r25, 0x44	; 68
    2788:	04 c0       	rjmp	.+8      	; 0x2792 <moveWallOld+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    278a:	60 e0       	ldi	r22, 0x00	; 0
    278c:	70 e0       	ldi	r23, 0x00	; 0
    278e:	8a e7       	ldi	r24, 0x7A	; 122
    2790:	94 ec       	ldi	r25, 0xC4	; 196
    2792:	a8 01       	movw	r20, r16
    2794:	97 01       	movw	r18, r14
    2796:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    279a:	20 91 22 07 	lds	r18, 0x0722
    279e:	30 91 23 07 	lds	r19, 0x0723
    27a2:	40 91 24 07 	lds	r20, 0x0724
    27a6:	50 91 25 07 	lds	r21, 0x0725
    27aa:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    27ae:	9b 01       	movw	r18, r22
    27b0:	ac 01       	movw	r20, r24
    27b2:	60 91 26 07 	lds	r22, 0x0726
    27b6:	70 91 27 07 	lds	r23, 0x0727
    27ba:	80 91 28 07 	lds	r24, 0x0728
    27be:	90 91 29 07 	lds	r25, 0x0729
    27c2:	10 c0       	rjmp	.+32     	; 0x27e4 <moveWallOld+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    27c4:	60 91 26 07 	lds	r22, 0x0726
    27c8:	70 91 27 07 	lds	r23, 0x0727
    27cc:	80 91 28 07 	lds	r24, 0x0728
    27d0:	90 91 29 07 	lds	r25, 0x0729
    27d4:	20 91 22 07 	lds	r18, 0x0722
    27d8:	30 91 23 07 	lds	r19, 0x0723
    27dc:	40 91 24 07 	lds	r20, 0x0724
    27e0:	50 91 25 07 	lds	r21, 0x0725
    27e4:	0e 94 81 2d 	call	0x5b02	; 0x5b02 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    27e8:	90 58       	subi	r25, 0x80	; 128
    27ea:	40 e0       	ldi	r20, 0x00	; 0
    27ec:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    27f0:	6b 01       	movw	r12, r22
    27f2:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    27f4:	0e 94 52 2e 	call	0x5ca4	; 0x5ca4 <__fixsfsi>
    27f8:	8b 01       	movw	r16, r22
    27fa:	77 ff       	sbrs	r23, 7
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <moveWallOld+0x1da>
    27fe:	10 95       	com	r17
    2800:	01 95       	neg	r16
    2802:	1f 4f       	sbci	r17, 0xFF	; 255
    2804:	05 36       	cpi	r16, 0x65	; 101
    2806:	11 05       	cpc	r17, r1
    2808:	fc f0       	brlt	.+62     	; 0x2848 <moveWallOld+0x21e>
    280a:	c7 01       	movw	r24, r14
    280c:	b6 01       	movw	r22, r12
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	0e 94 e6 2d 	call	0x5bcc	; 0x5bcc <__cmpsf2>
    281a:	88 23       	and	r24, r24
    281c:	a9 f0       	breq	.+42     	; 0x2848 <moveWallOld+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    281e:	b8 01       	movw	r22, r16
    2820:	88 27       	eor	r24, r24
    2822:	77 fd       	sbrc	r23, 7
    2824:	80 95       	com	r24
    2826:	98 2f       	mov	r25, r24
    2828:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <__floatsisf>
    282c:	9b 01       	movw	r18, r22
    282e:	ac 01       	movw	r20, r24
    2830:	c7 01       	movw	r24, r14
    2832:	b6 01       	movw	r22, r12
    2834:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	48 ec       	ldi	r20, 0xC8	; 200
    283e:	52 e4       	ldi	r21, 0x42	; 66
    2840:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    2844:	6b 01       	movw	r12, r22
    2846:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2848:	c7 01       	movw	r24, r14
    284a:	b6 01       	movw	r22, r12
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	48 ec       	ldi	r20, 0xC8	; 200
    2852:	52 e4       	ldi	r21, 0x42	; 66
    2854:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    2858:	6b 01       	movw	r12, r22
    285a:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    285c:	8d b7       	in	r24, 0x3d	; 61
    285e:	9e b7       	in	r25, 0x3e	; 62
    2860:	09 97       	sbiw	r24, 0x09	; 9
    2862:	0f b6       	in	r0, 0x3f	; 63
    2864:	f8 94       	cli
    2866:	9e bf       	out	0x3e, r25	; 62
    2868:	0f be       	out	0x3f, r0	; 63
    286a:	8d bf       	out	0x3d, r24	; 61
    286c:	0d b7       	in	r16, 0x3d	; 61
    286e:	1e b7       	in	r17, 0x3e	; 62
    2870:	0f 5f       	subi	r16, 0xFF	; 255
    2872:	1f 4f       	sbci	r17, 0xFF	; 255
    2874:	c7 01       	movw	r24, r14
    2876:	b6 01       	movw	r22, r12
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	48 e4       	ldi	r20, 0x48	; 72
    287e:	53 e4       	ldi	r21, 0x43	; 67
    2880:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	48 e4       	ldi	r20, 0x48	; 72
    288a:	53 e4       	ldi	r21, 0x43	; 67
    288c:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    2890:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    2894:	4b 01       	movw	r8, r22
    2896:	5c 01       	movw	r10, r24
    2898:	82 e3       	ldi	r24, 0x32	; 50
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	f8 01       	movw	r30, r16
    289e:	91 83       	std	Z+1, r25	; 0x01
    28a0:	80 83       	st	Z, r24
    28a2:	c7 01       	movw	r24, r14
    28a4:	b6 01       	movw	r22, r12
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	48 e4       	ldi	r20, 0x48	; 72
    28ac:	53 ec       	ldi	r21, 0xC3	; 195
    28ae:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	48 e4       	ldi	r20, 0x48	; 72
    28b8:	53 e4       	ldi	r21, 0x43	; 67
    28ba:	0e 94 82 2d 	call	0x5b04	; 0x5b04 <__addsf3>
    28be:	0e 94 57 2e 	call	0x5cae	; 0x5cae <__fixunssfsi>
    28c2:	f8 01       	movw	r30, r16
    28c4:	73 83       	std	Z+3, r23	; 0x03
    28c6:	62 83       	std	Z+2, r22	; 0x02
    28c8:	82 ec       	ldi	r24, 0xC2	; 194
    28ca:	91 e0       	ldi	r25, 0x01	; 1
    28cc:	95 83       	std	Z+5, r25	; 0x05
    28ce:	84 83       	std	Z+4, r24	; 0x04
    28d0:	16 82       	std	Z+6, r1	; 0x06
    28d2:	10 86       	std	Z+8, r1	; 0x08
    28d4:	17 82       	std	Z+7, r1	; 0x07
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	62 e0       	ldi	r22, 0x02	; 2
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	22 e3       	ldi	r18, 0x32	; 50
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	84 01       	movw	r16, r8
    28e2:	a2 ec       	ldi	r26, 0xC2	; 194
    28e4:	ea 2e       	mov	r14, r26
    28e6:	a1 e0       	ldi	r26, 0x01	; 1
    28e8:	fa 2e       	mov	r15, r26
    28ea:	cc 24       	eor	r12, r12
    28ec:	aa 24       	eor	r10, r10
    28ee:	bb 24       	eor	r11, r11
    28f0:	88 24       	eor	r8, r8
    28f2:	83 94       	inc	r8
    28f4:	0e 94 ab 1d 	call	0x3b56	; 0x3b56 <STEPPER_move>
    28f8:	8d b7       	in	r24, 0x3d	; 61
    28fa:	9e b7       	in	r25, 0x3e	; 62
    28fc:	09 96       	adiw	r24, 0x09	; 9
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	9e bf       	out	0x3e, r25	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2908:	82 2d       	mov	r24, r2
    290a:	1f 91       	pop	r17
    290c:	0f 91       	pop	r16
    290e:	ff 90       	pop	r15
    2910:	ef 90       	pop	r14
    2912:	df 90       	pop	r13
    2914:	cf 90       	pop	r12
    2916:	bf 90       	pop	r11
    2918:	af 90       	pop	r10
    291a:	9f 90       	pop	r9
    291c:	8f 90       	pop	r8
    291e:	7f 90       	pop	r7
    2920:	6f 90       	pop	r6
    2922:	5f 90       	pop	r5
    2924:	4f 90       	pop	r4
    2926:	3f 90       	pop	r3
    2928:	2f 90       	pop	r2
    292a:	08 95       	ret

0000292c <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    292c:	ff 92       	push	r15
    292e:	0f 93       	push	r16
    2930:	1f 93       	push	r17
    2932:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    2934:	08 2f       	mov	r16, r24
    2936:	06 95       	lsr	r16
    2938:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    293a:	b3 e0       	ldi	r27, 0x03	; 3
    293c:	fb 2e       	mov	r15, r27
    293e:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(curMove){
    2940:	62 30       	cpi	r22, 0x02	; 2
    2942:	31 f0       	breq	.+12     	; 0x2950 <shiftMap+0x24>
    2944:	63 30       	cpi	r22, 0x03	; 3
    2946:	a9 f0       	breq	.+42     	; 0x2972 <shiftMap+0x46>
    2948:	61 30       	cpi	r22, 0x01	; 1
    294a:	b1 f4       	brne	.+44     	; 0x2978 <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    294c:	11 50       	subi	r17, 0x01	; 1
    294e:	12 c0       	rjmp	.+36     	; 0x2974 <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2950:	41 30       	cpi	r20, 0x01	; 1
    2952:	49 f0       	breq	.+18     	; 0x2966 <shiftMap+0x3a>
    2954:	41 30       	cpi	r20, 0x01	; 1
    2956:	28 f0       	brcs	.+10     	; 0x2962 <shiftMap+0x36>
    2958:	42 30       	cpi	r20, 0x02	; 2
    295a:	39 f0       	breq	.+14     	; 0x296a <shiftMap+0x3e>
    295c:	43 30       	cpi	r20, 0x03	; 3
    295e:	b9 f4       	brne	.+46     	; 0x298e <shiftMap+0x62>
    2960:	06 c0       	rjmp	.+12     	; 0x296e <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    2962:	01 50       	subi	r16, 0x01	; 1
    2964:	14 c0       	rjmp	.+40     	; 0x298e <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    2966:	f3 94       	inc	r15
    2968:	12 c0       	rjmp	.+36     	; 0x298e <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    296a:	0f 5f       	subi	r16, 0xFF	; 255
    296c:	10 c0       	rjmp	.+32     	; 0x298e <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    296e:	fa 94       	dec	r15
    2970:	0e c0       	rjmp	.+28     	; 0x298e <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2972:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    2974:	13 70       	andi	r17, 0x03	; 3
    2976:	0b c0       	rjmp	.+22     	; 0x298e <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    2978:	00 d0       	rcall	.+0      	; 0x297a <shiftMap+0x4e>
    297a:	84 e4       	ldi	r24, 0x44	; 68
    297c:	91 e0       	ldi	r25, 0x01	; 1
    297e:	ed b7       	in	r30, 0x3d	; 61
    2980:	fe b7       	in	r31, 0x3e	; 62
    2982:	92 83       	std	Z+2, r25	; 0x02
    2984:	81 83       	std	Z+1, r24	; 0x01
    2986:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    298e:	10 93 1c 06 	sts	0x061C, r17
    2992:	00 0f       	add	r16, r16
    2994:	00 0f       	add	r16, r16
	return currentCell;
}
    2996:	80 2f       	mov	r24, r16
    2998:	8f 0d       	add	r24, r15
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	ff 90       	pop	r15
    29a0:	08 95       	ret

000029a2 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    29a2:	80 91 87 05 	lds	r24, 0x0587
    29a6:	80 fd       	sbrc	r24, 0
    29a8:	02 c0       	rjmp	.+4      	; 0x29ae <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	05 c0       	rjmp	.+10     	; 0x29b8 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    29ae:	83 fd       	sbrc	r24, 3
    29b0:	02 c0       	rjmp	.+4      	; 0x29b6 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    29b2:	82 e0       	ldi	r24, 0x02	; 2
    29b4:	01 c0       	rjmp	.+2      	; 0x29b8 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    29b6:	83 e0       	ldi	r24, 0x03	; 3
    29b8:	80 93 b2 07 	sts	0x07B2, r24
	}
	
	switch(oldMove){
    29bc:	80 91 b3 07 	lds	r24, 0x07B3
    29c0:	81 30       	cpi	r24, 0x01	; 1
    29c2:	29 f0       	breq	.+10     	; 0x29ce <planMap+0x2c>
    29c4:	81 30       	cpi	r24, 0x01	; 1
    29c6:	38 f0       	brcs	.+14     	; 0x29d6 <planMap+0x34>
    29c8:	84 30       	cpi	r24, 0x04	; 4
    29ca:	28 f4       	brcc	.+10     	; 0x29d6 <planMap+0x34>
    29cc:	0f c0       	rjmp	.+30     	; 0x29ec <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	80 93 b2 07 	sts	0x07B2, r24
    29d4:	0b c0       	rjmp	.+22     	; 0x29ec <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <planMap+0x36>
    29d8:	8d e4       	ldi	r24, 0x4D	; 77
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	ed b7       	in	r30, 0x3d	; 61
    29de:	fe b7       	in	r31, 0x3e	; 62
    29e0:	92 83       	std	Z+2, r25	; 0x02
    29e2:	81 83       	std	Z+1, r24	; 0x01
    29e4:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
    29e8:	0f 90       	pop	r0
    29ea:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    29ec:	80 91 b2 07 	lds	r24, 0x07B2
    29f0:	80 93 b3 07 	sts	0x07B3, r24
}
    29f4:	08 95       	ret

000029f6 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    29f6:	80 91 79 04 	lds	r24, 0x0479
    29fa:	85 30       	cpi	r24, 0x05	; 5
    29fc:	80 f0       	brcs	.+32     	; 0x2a1e <planGateway+0x28>
    29fe:	ea e6       	ldi	r30, 0x6A	; 106
    2a00:	f4 e0       	ldi	r31, 0x04	; 4
		for(i = 0; i<=(BRANCH_MAX-1); i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    2a02:	81 81       	ldd	r24, Z+1	; 0x01
    2a04:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2a06:	86 81       	ldd	r24, Z+6	; 0x06
    2a08:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2a0a:	83 85       	ldd	r24, Z+11	; 0x0b
    2a0c:	82 87       	std	Z+10, r24	; 0x0a
    2a0e:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<=(BRANCH_MAX-1); i++){
    2a10:	84 e0       	ldi	r24, 0x04	; 4
    2a12:	ef 36       	cpi	r30, 0x6F	; 111
    2a14:	f8 07       	cpc	r31, r24
    2a16:	a9 f7       	brne	.-22     	; 0x2a02 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2a18:	84 e0       	ldi	r24, 0x04	; 4
    2a1a:	80 93 79 04 	sts	0x0479, r24
	}
	
	// Decide what the current move should be
	planMap();
    2a1e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    2a22:	e0 91 79 04 	lds	r30, 0x0479
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	e6 59       	subi	r30, 0x96	; 150
    2a2a:	fb 4f       	sbci	r31, 0xFB	; 251
    2a2c:	80 91 87 05 	lds	r24, 0x0587
    2a30:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2a32:	90 91 b2 07 	lds	r25, 0x07B2
    2a36:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2a38:	80 91 1c 06 	lds	r24, 0x061C
    2a3c:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2a3e:	91 30       	cpi	r25, 0x01	; 1
    2a40:	19 f0       	breq	.+6      	; 0x2a48 <planGateway+0x52>
    2a42:	93 30       	cpi	r25, 0x03	; 3
    2a44:	41 f4       	brne	.+16     	; 0x2a56 <planGateway+0x60>
    2a46:	02 c0       	rjmp	.+4      	; 0x2a4c <planGateway+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2a48:	81 50       	subi	r24, 0x01	; 1
    2a4a:	01 c0       	rjmp	.+2      	; 0x2a4e <planGateway+0x58>
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2a4c:	8f 5f       	subi	r24, 0xFF	; 255
    2a4e:	83 70       	andi	r24, 0x03	; 3
    2a50:	80 93 1c 06 	sts	0x061C, r24
    2a54:	0b c0       	rjmp	.+22     	; 0x2a6c <planGateway+0x76>
			break;
		default:
			LCD_printf("Whatz2?!");
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <planGateway+0x62>
    2a58:	86 e5       	ldi	r24, 0x56	; 86
    2a5a:	91 e0       	ldi	r25, 0x01	; 1
    2a5c:	ed b7       	in	r30, 0x3d	; 61
    2a5e:	fe b7       	in	r31, 0x3e	; 62
    2a60:	92 83       	std	Z+2, r25	; 0x02
    2a62:	81 83       	std	Z+1, r24	; 0x01
    2a64:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2a6c:	80 91 79 04 	lds	r24, 0x0479
    2a70:	8f 5f       	subi	r24, 0xFF	; 255
    2a72:	80 93 79 04 	sts	0x0479, r24
}
    2a76:	08 95       	ret

00002a78 <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    2a78:	90 91 1c 06 	lds	r25, 0x061C
    2a7c:	91 30       	cpi	r25, 0x01	; 1
    2a7e:	91 f0       	breq	.+36     	; 0x2aa4 <planMetric+0x2c>
    2a80:	91 30       	cpi	r25, 0x01	; 1
    2a82:	28 f0       	brcs	.+10     	; 0x2a8e <planMetric+0x16>
    2a84:	92 30       	cpi	r25, 0x02	; 2
    2a86:	d9 f0       	breq	.+54     	; 0x2abe <planMetric+0x46>
    2a88:	93 30       	cpi	r25, 0x03	; 3
    2a8a:	c1 f5       	brne	.+112    	; 0x2afc <planMetric+0x84>
    2a8c:	23 c0       	rjmp	.+70     	; 0x2ad4 <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    2a8e:	80 91 1d 06 	lds	r24, 0x061D
    2a92:	81 30       	cpi	r24, 0x01	; 1
    2a94:	91 f0       	breq	.+36     	; 0x2aba <planMetric+0x42>
    2a96:	81 30       	cpi	r24, 0x01	; 1
    2a98:	68 f1       	brcs	.+90     	; 0x2af4 <planMetric+0x7c>
    2a9a:	82 30       	cpi	r24, 0x02	; 2
    2a9c:	49 f1       	breq	.+82     	; 0x2af0 <planMetric+0x78>
    2a9e:	83 30       	cpi	r24, 0x03	; 3
    2aa0:	69 f5       	brne	.+90     	; 0x2afc <planMetric+0x84>
    2aa2:	26 c0       	rjmp	.+76     	; 0x2af0 <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    2aa4:	80 91 1d 06 	lds	r24, 0x061D
    2aa8:	81 30       	cpi	r24, 0x01	; 1
    2aaa:	21 f1       	breq	.+72     	; 0x2af4 <planMetric+0x7c>
    2aac:	81 30       	cpi	r24, 0x01	; 1
    2aae:	e8 f0       	brcs	.+58     	; 0x2aea <planMetric+0x72>
    2ab0:	82 30       	cpi	r24, 0x02	; 2
    2ab2:	19 f0       	breq	.+6      	; 0x2aba <planMetric+0x42>
    2ab4:	83 30       	cpi	r24, 0x03	; 3
    2ab6:	11 f5       	brne	.+68     	; 0x2afc <planMetric+0x84>
    2ab8:	18 c0       	rjmp	.+48     	; 0x2aea <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    2aba:	83 e0       	ldi	r24, 0x03	; 3
    2abc:	1c c0       	rjmp	.+56     	; 0x2af6 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    2abe:	80 91 1d 06 	lds	r24, 0x061D
    2ac2:	81 30       	cpi	r24, 0x01	; 1
    2ac4:	c1 f0       	breq	.+48     	; 0x2af6 <planMetric+0x7e>
    2ac6:	81 30       	cpi	r24, 0x01	; 1
    2ac8:	98 f0       	brcs	.+38     	; 0x2af0 <planMetric+0x78>
    2aca:	82 30       	cpi	r24, 0x02	; 2
    2acc:	a1 f0       	breq	.+40     	; 0x2af6 <planMetric+0x7e>
    2ace:	83 30       	cpi	r24, 0x03	; 3
    2ad0:	a9 f4       	brne	.+42     	; 0x2afc <planMetric+0x84>
    2ad2:	11 c0       	rjmp	.+34     	; 0x2af6 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    2ad4:	80 91 1d 06 	lds	r24, 0x061D
    2ad8:	81 30       	cpi	r24, 0x01	; 1
    2ada:	69 f0       	breq	.+26     	; 0x2af6 <planMetric+0x7e>
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	28 f0       	brcs	.+10     	; 0x2aea <planMetric+0x72>
    2ae0:	82 30       	cpi	r24, 0x02	; 2
    2ae2:	31 f0       	breq	.+12     	; 0x2af0 <planMetric+0x78>
    2ae4:	83 30       	cpi	r24, 0x03	; 3
    2ae6:	51 f4       	brne	.+20     	; 0x2afc <planMetric+0x84>
    2ae8:	05 c0       	rjmp	.+10     	; 0x2af4 <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    2aea:	90 93 b2 07 	sts	0x07B2, r25
    2aee:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    2af4:	82 e0       	ldi	r24, 0x02	; 2
    2af6:	80 93 b2 07 	sts	0x07B2, r24
    2afa:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <planMetric+0x86>
    2afe:	8f e5       	ldi	r24, 0x5F	; 95
    2b00:	91 e0       	ldi	r25, 0x01	; 1
    2b02:	ed b7       	in	r30, 0x3d	; 61
    2b04:	fe b7       	in	r31, 0x3e	; 62
    2b06:	92 83       	std	Z+2, r25	; 0x02
    2b08:	81 83       	std	Z+1, r24	; 0x01
    2b0a:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	08 95       	ret

00002b14 <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    2b14:	8f 92       	push	r8
    2b16:	af 92       	push	r10
    2b18:	bf 92       	push	r11
    2b1a:	cf 92       	push	r12
    2b1c:	df 92       	push	r13
    2b1e:	ef 92       	push	r14
    2b20:	ff 92       	push	r15
    2b22:	0f 93       	push	r16
    2b24:	1f 93       	push	r17
	LCD_clear();
    2b26:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    2b2a:	e0 91 88 05 	lds	r30, 0x0588
    2b2e:	f0 e0       	ldi	r31, 0x00	; 0
    2b30:	e5 5f       	subi	r30, 0xF5	; 245
    2b32:	f9 4f       	sbci	r31, 0xF9	; 249
    2b34:	e0 81       	ld	r30, Z
    2b36:	e0 93 b2 07 	sts	0x07B2, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	e1 30       	cpi	r30, 0x01	; 1
    2b3e:	09 f4       	brne	.+2      	; 0x2b42 <moveWorld+0x2e>
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	e3 30       	cpi	r30, 0x03	; 3
    2b46:	09 f4       	brne	.+2      	; 0x2b4a <moveWorld+0x36>
    2b48:	91 e0       	ldi	r25, 0x01	; 1
    2b4a:	89 2b       	or	r24, r25
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e0       	ldi	r20, 0x00	; 0
    2b52:	50 e0       	ldi	r21, 0x00	; 0
    2b54:	80 91 b3 07 	lds	r24, 0x07B3
    2b58:	82 30       	cpi	r24, 0x02	; 2
    2b5a:	11 f4       	brne	.+4      	; 0x2b60 <moveWorld+0x4c>
    2b5c:	41 e0       	ldi	r20, 0x01	; 1
    2b5e:	50 e0       	ldi	r21, 0x00	; 0
    2b60:	24 23       	and	r18, r20
    2b62:	35 23       	and	r19, r21
    2b64:	23 2b       	or	r18, r19
    2b66:	b9 f0       	breq	.+46     	; 0x2b96 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2b68:	60 e0       	ldi	r22, 0x00	; 0
    2b6a:	70 e0       	ldi	r23, 0x00	; 0
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	9f e4       	ldi	r25, 0x4F	; 79
    2b70:	28 e4       	ldi	r18, 0x48	; 72
    2b72:	31 ee       	ldi	r19, 0xE1	; 225
    2b74:	46 eb       	ldi	r20, 0xB6	; 182
    2b76:	51 e4       	ldi	r21, 0x41	; 65
    2b78:	0f 2e       	mov	r0, r31
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	ef 2e       	mov	r14, r31
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	ff 2e       	mov	r15, r31
    2b82:	f0 e2       	ldi	r31, 0x20	; 32
    2b84:	0f 2f       	mov	r16, r31
    2b86:	f1 e4       	ldi	r31, 0x41	; 65
    2b88:	1f 2f       	mov	r17, r31
    2b8a:	f0 2d       	mov	r31, r0
    2b8c:	57 01       	movw	r10, r14
    2b8e:	68 01       	movw	r12, r16
    2b90:	88 24       	eor	r8, r8
    2b92:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    2b96:	20 91 b3 07 	lds	r18, 0x07B3
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	21 30       	cpi	r18, 0x01	; 1
    2b9e:	09 f4       	brne	.+2      	; 0x2ba2 <moveWorld+0x8e>
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	23 30       	cpi	r18, 0x03	; 3
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <moveWorld+0x96>
    2ba8:	91 e0       	ldi	r25, 0x01	; 1
    2baa:	89 2b       	or	r24, r25
    2bac:	28 2f       	mov	r18, r24
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e0       	ldi	r20, 0x00	; 0
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	80 91 b2 07 	lds	r24, 0x07B2
    2bb8:	82 30       	cpi	r24, 0x02	; 2
    2bba:	11 f4       	brne	.+4      	; 0x2bc0 <moveWorld+0xac>
    2bbc:	41 e0       	ldi	r20, 0x01	; 1
    2bbe:	50 e0       	ldi	r21, 0x00	; 0
    2bc0:	24 23       	and	r18, r20
    2bc2:	35 23       	and	r19, r21
    2bc4:	23 2b       	or	r18, r19
    2bc6:	b9 f0       	breq	.+46     	; 0x2bf6 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	80 e0       	ldi	r24, 0x00	; 0
    2bce:	9f e4       	ldi	r25, 0x4F	; 79
    2bd0:	25 e3       	ldi	r18, 0x35	; 53
    2bd2:	3f ee       	ldi	r19, 0xEF	; 239
    2bd4:	40 ea       	ldi	r20, 0xA0	; 160
    2bd6:	51 e4       	ldi	r21, 0x41	; 65
    2bd8:	0f 2e       	mov	r0, r31
    2bda:	f0 e0       	ldi	r31, 0x00	; 0
    2bdc:	ef 2e       	mov	r14, r31
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	ff 2e       	mov	r15, r31
    2be2:	f0 e2       	ldi	r31, 0x20	; 32
    2be4:	0f 2f       	mov	r16, r31
    2be6:	f1 e4       	ldi	r31, 0x41	; 65
    2be8:	1f 2f       	mov	r17, r31
    2bea:	f0 2d       	mov	r31, r0
    2bec:	57 01       	movw	r10, r14
    2bee:	68 01       	movw	r12, r16
    2bf0:	88 24       	eor	r8, r8
    2bf2:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	switch(currentMove){
    2bf6:	80 91 b2 07 	lds	r24, 0x07B2
    2bfa:	82 30       	cpi	r24, 0x02	; 2
    2bfc:	c1 f1       	breq	.+112    	; 0x2c6e <moveWorld+0x15a>
    2bfe:	83 30       	cpi	r24, 0x03	; 3
    2c00:	09 f4       	brne	.+2      	; 0x2c04 <moveWorld+0xf0>
    2c02:	61 c0       	rjmp	.+194    	; 0x2cc6 <moveWorld+0x1b2>
    2c04:	81 30       	cpi	r24, 0x01	; 1
    2c06:	09 f0       	breq	.+2      	; 0x2c0a <moveWorld+0xf6>
    2c08:	9f c0       	rjmp	.+318    	; 0x2d48 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2c0a:	8d b7       	in	r24, 0x3d	; 61
    2c0c:	9e b7       	in	r25, 0x3e	; 62
    2c0e:	08 97       	sbiw	r24, 0x08	; 8
    2c10:	0f b6       	in	r0, 0x3f	; 63
    2c12:	f8 94       	cli
    2c14:	9e bf       	out	0x3e, r25	; 62
    2c16:	0f be       	out	0x3f, r0	; 63
    2c18:	8d bf       	out	0x3d, r24	; 61
    2c1a:	ed b7       	in	r30, 0x3d	; 61
    2c1c:	fe b7       	in	r31, 0x3e	; 62
    2c1e:	31 96       	adiw	r30, 0x01	; 1
    2c20:	88 e6       	ldi	r24, 0x68	; 104
    2c22:	91 e0       	ldi	r25, 0x01	; 1
    2c24:	ad b7       	in	r26, 0x3d	; 61
    2c26:	be b7       	in	r27, 0x3e	; 62
    2c28:	12 96       	adiw	r26, 0x02	; 2
    2c2a:	9c 93       	st	X, r25
    2c2c:	8e 93       	st	-X, r24
    2c2e:	11 97       	sbiw	r26, 0x01	; 1
    2c30:	80 91 88 05 	lds	r24, 0x0588
    2c34:	82 83       	std	Z+2, r24	; 0x02
    2c36:	13 82       	std	Z+3, r1	; 0x03
    2c38:	80 91 87 05 	lds	r24, 0x0587
    2c3c:	84 83       	std	Z+4, r24	; 0x04
    2c3e:	15 82       	std	Z+5, r1	; 0x05
    2c40:	80 91 8e 05 	lds	r24, 0x058E
    2c44:	86 83       	std	Z+6, r24	; 0x06
    2c46:	17 82       	std	Z+7, r1	; 0x07
    2c48:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2c4c:	ed b7       	in	r30, 0x3d	; 61
    2c4e:	fe b7       	in	r31, 0x3e	; 62
    2c50:	38 96       	adiw	r30, 0x08	; 8
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	fe bf       	out	0x3e, r31	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	ed bf       	out	0x3d, r30	; 61
    2c5c:	60 e0       	ldi	r22, 0x00	; 0
    2c5e:	70 e0       	ldi	r23, 0x00	; 0
    2c60:	80 e0       	ldi	r24, 0x00	; 0
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4c e8       	ldi	r20, 0x8C	; 140
    2c6a:	51 ec       	ldi	r21, 0xC1	; 193
    2c6c:	5d c0       	rjmp	.+186    	; 0x2d28 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2c6e:	8d b7       	in	r24, 0x3d	; 61
    2c70:	9e b7       	in	r25, 0x3e	; 62
    2c72:	08 97       	sbiw	r24, 0x08	; 8
    2c74:	0f b6       	in	r0, 0x3f	; 63
    2c76:	f8 94       	cli
    2c78:	9e bf       	out	0x3e, r25	; 62
    2c7a:	0f be       	out	0x3f, r0	; 63
    2c7c:	8d bf       	out	0x3d, r24	; 61
    2c7e:	ed b7       	in	r30, 0x3d	; 61
    2c80:	fe b7       	in	r31, 0x3e	; 62
    2c82:	31 96       	adiw	r30, 0x01	; 1
    2c84:	83 e9       	ldi	r24, 0x93	; 147
    2c86:	91 e0       	ldi	r25, 0x01	; 1
    2c88:	ad b7       	in	r26, 0x3d	; 61
    2c8a:	be b7       	in	r27, 0x3e	; 62
    2c8c:	12 96       	adiw	r26, 0x02	; 2
    2c8e:	9c 93       	st	X, r25
    2c90:	8e 93       	st	-X, r24
    2c92:	11 97       	sbiw	r26, 0x01	; 1
    2c94:	80 91 88 05 	lds	r24, 0x0588
    2c98:	82 83       	std	Z+2, r24	; 0x02
    2c9a:	13 82       	std	Z+3, r1	; 0x03
    2c9c:	80 91 87 05 	lds	r24, 0x0587
    2ca0:	84 83       	std	Z+4, r24	; 0x04
    2ca2:	15 82       	std	Z+5, r1	; 0x05
    2ca4:	80 91 8e 05 	lds	r24, 0x058E
    2ca8:	86 83       	std	Z+6, r24	; 0x06
    2caa:	17 82       	std	Z+7, r1	; 0x07
    2cac:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWallOld();
    2cb0:	ed b7       	in	r30, 0x3d	; 61
    2cb2:	fe b7       	in	r31, 0x3e	; 62
    2cb4:	38 96       	adiw	r30, 0x08	; 8
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	fe bf       	out	0x3e, r31	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	ed bf       	out	0x3d, r30	; 61
    2cc0:	0e 94 15 13 	call	0x262a	; 0x262a <moveWallOld>
    2cc4:	53 c0       	rjmp	.+166    	; 0x2d6c <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2cc6:	8d b7       	in	r24, 0x3d	; 61
    2cc8:	9e b7       	in	r25, 0x3e	; 62
    2cca:	08 97       	sbiw	r24, 0x08	; 8
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	9e bf       	out	0x3e, r25	; 62
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	8d bf       	out	0x3d, r24	; 61
    2cd6:	ed b7       	in	r30, 0x3d	; 61
    2cd8:	fe b7       	in	r31, 0x3e	; 62
    2cda:	31 96       	adiw	r30, 0x01	; 1
    2cdc:	81 ec       	ldi	r24, 0xC1	; 193
    2cde:	91 e0       	ldi	r25, 0x01	; 1
    2ce0:	ad b7       	in	r26, 0x3d	; 61
    2ce2:	be b7       	in	r27, 0x3e	; 62
    2ce4:	12 96       	adiw	r26, 0x02	; 2
    2ce6:	9c 93       	st	X, r25
    2ce8:	8e 93       	st	-X, r24
    2cea:	11 97       	sbiw	r26, 0x01	; 1
    2cec:	80 91 88 05 	lds	r24, 0x0588
    2cf0:	82 83       	std	Z+2, r24	; 0x02
    2cf2:	13 82       	std	Z+3, r1	; 0x03
    2cf4:	80 91 87 05 	lds	r24, 0x0587
    2cf8:	84 83       	std	Z+4, r24	; 0x04
    2cfa:	15 82       	std	Z+5, r1	; 0x05
    2cfc:	80 91 8e 05 	lds	r24, 0x058E
    2d00:	86 83       	std	Z+6, r24	; 0x06
    2d02:	17 82       	std	Z+7, r1	; 0x07
    2d04:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2d08:	ed b7       	in	r30, 0x3d	; 61
    2d0a:	fe b7       	in	r31, 0x3e	; 62
    2d0c:	38 96       	adiw	r30, 0x08	; 8
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	fe bf       	out	0x3e, r31	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	ed bf       	out	0x3d, r30	; 61
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	70 e0       	ldi	r23, 0x00	; 0
    2d1c:	80 e0       	ldi	r24, 0x00	; 0
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	30 e0       	ldi	r19, 0x00	; 0
    2d24:	4c e8       	ldi	r20, 0x8C	; 140
    2d26:	51 e4       	ldi	r21, 0x41	; 65
    2d28:	0f 2e       	mov	r0, r31
    2d2a:	f0 e0       	ldi	r31, 0x00	; 0
    2d2c:	ef 2e       	mov	r14, r31
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	ff 2e       	mov	r15, r31
    2d32:	f0 e2       	ldi	r31, 0x20	; 32
    2d34:	0f 2f       	mov	r16, r31
    2d36:	f1 e4       	ldi	r31, 0x41	; 65
    2d38:	1f 2f       	mov	r17, r31
    2d3a:	f0 2d       	mov	r31, r0
    2d3c:	57 01       	movw	r10, r14
    2d3e:	68 01       	movw	r12, r16
    2d40:	88 24       	eor	r8, r8
    2d42:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2d46:	12 c0       	rjmp	.+36     	; 0x2d6c <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    2d48:	00 d0       	rcall	.+0      	; 0x2d4a <moveWorld+0x236>
    2d4a:	8d ee       	ldi	r24, 0xED	; 237
    2d4c:	91 e0       	ldi	r25, 0x01	; 1
    2d4e:	ad b7       	in	r26, 0x3d	; 61
    2d50:	be b7       	in	r27, 0x3e	; 62
    2d52:	12 96       	adiw	r26, 0x02	; 2
    2d54:	9c 93       	st	X, r25
    2d56:	8e 93       	st	-X, r24
    2d58:	11 97       	sbiw	r26, 0x01	; 1
    2d5a:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	82 e0       	ldi	r24, 0x02	; 2
    2d64:	60 e0       	ldi	r22, 0x00	; 0
    2d66:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <STEPPER_stop>
    2d6a:	ff cf       	rjmp	.-2      	; 0x2d6a <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2d6c:	80 91 b2 07 	lds	r24, 0x07B2
    2d70:	80 93 b3 07 	sts	0x07B3, r24
	return 1;
}
    2d74:	81 e0       	ldi	r24, 0x01	; 1
    2d76:	1f 91       	pop	r17
    2d78:	0f 91       	pop	r16
    2d7a:	ff 90       	pop	r15
    2d7c:	ef 90       	pop	r14
    2d7e:	df 90       	pop	r13
    2d80:	cf 90       	pop	r12
    2d82:	bf 90       	pop	r11
    2d84:	af 90       	pop	r10
    2d86:	8f 90       	pop	r8
    2d88:	08 95       	ret

00002d8a <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    2d8a:	ff 92       	push	r15
    2d8c:	0f 93       	push	r16
    2d8e:	1f 93       	push	r17
    2d90:	cf 93       	push	r28
    2d92:	df 93       	push	r29
    2d94:	ff 24       	eor	r15, r15
    2d96:	f3 94       	inc	r15
    2d98:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2d9a:	c6 ef       	ldi	r28, 0xF6	; 246
    2d9c:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    2d9e:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    2da2:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    2da4:	81 30       	cpi	r24, 0x01	; 1
    2da6:	21 f0       	breq	.+8      	; 0x2db0 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2da8:	82 30       	cpi	r24, 0x02	; 2
    2daa:	11 f0       	breq	.+4      	; 0x2db0 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    2dac:	83 30       	cpi	r24, 0x03	; 3
    2dae:	39 f4       	brne	.+14     	; 0x2dbe <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    2db0:	e1 2f       	mov	r30, r17
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	e5 5f       	subi	r30, 0xF5	; 245
    2db6:	f9 4f       	sbci	r31, 0xF9	; 249
    2db8:	00 83       	st	Z, r16
			i++;
    2dba:	1f 5f       	subi	r17, 0xFF	; 255
    2dbc:	02 c0       	rjmp	.+4      	; 0x2dc2 <movesInput+0x38>
		}

		if (btnHolder != 0){
    2dbe:	88 23       	and	r24, r24
    2dc0:	21 f1       	breq	.+72     	; 0x2e0a <movesInput+0x80>
			LCD_clear();
    2dc2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2dc6:	8d b7       	in	r24, 0x3d	; 61
    2dc8:	9e b7       	in	r25, 0x3e	; 62
    2dca:	08 97       	sbiw	r24, 0x08	; 8
    2dcc:	0f b6       	in	r0, 0x3f	; 63
    2dce:	f8 94       	cli
    2dd0:	9e bf       	out	0x3e, r25	; 62
    2dd2:	0f be       	out	0x3f, r0	; 63
    2dd4:	8d bf       	out	0x3d, r24	; 61
    2dd6:	ed b7       	in	r30, 0x3d	; 61
    2dd8:	fe b7       	in	r31, 0x3e	; 62
    2dda:	31 96       	adiw	r30, 0x01	; 1
    2ddc:	ad b7       	in	r26, 0x3d	; 61
    2dde:	be b7       	in	r27, 0x3e	; 62
    2de0:	12 96       	adiw	r26, 0x02	; 2
    2de2:	dc 93       	st	X, r29
    2de4:	ce 93       	st	-X, r28
    2de6:	11 97       	sbiw	r26, 0x01	; 1
    2de8:	f2 82       	std	Z+2, r15	; 0x02
    2dea:	13 82       	std	Z+3, r1	; 0x03
    2dec:	04 83       	std	Z+4, r16	; 0x04
    2dee:	15 82       	std	Z+5, r1	; 0x05
    2df0:	16 83       	std	Z+6, r17	; 0x06
    2df2:	17 82       	std	Z+7, r1	; 0x07
    2df4:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
    2df8:	f0 2e       	mov	r15, r16
    2dfa:	8d b7       	in	r24, 0x3d	; 61
    2dfc:	9e b7       	in	r25, 0x3e	; 62
    2dfe:	08 96       	adiw	r24, 0x08	; 8
    2e00:	0f b6       	in	r0, 0x3f	; 63
    2e02:	f8 94       	cli
    2e04:	9e bf       	out	0x3e, r25	; 62
    2e06:	0f be       	out	0x3f, r0	; 63
    2e08:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2e0a:	84 ef       	ldi	r24, 0xF4	; 244
    2e0c:	91 e0       	ldi	r25, 0x01	; 1
    2e0e:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    2e12:	1b 30       	cpi	r17, 0x0B	; 11
    2e14:	20 f2       	brcs	.-120    	; 0x2d9e <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    2e16:	1f 5f       	subi	r17, 0xFF	; 255
    2e18:	e1 2f       	mov	r30, r17
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	e5 5f       	subi	r30, 0xF5	; 245
    2e1e:	f9 4f       	sbci	r31, 0xF9	; 249
    2e20:	84 e0       	ldi	r24, 0x04	; 4
    2e22:	80 83       	st	Z, r24
}
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	1f 91       	pop	r17
    2e2a:	0f 91       	pop	r16
    2e2c:	ff 90       	pop	r15
    2e2e:	08 95       	ret

00002e30 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    2e30:	1f 93       	push	r17
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2e38:	c7 e2       	ldi	r28, 0x27	; 39
    2e3a:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    2e3c:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2e40:	81 30       	cpi	r24, 0x01	; 1
    2e42:	21 f4       	brne	.+8      	; 0x2e4c <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    2e44:	80 91 1e 07 	lds	r24, 0x071E
    2e48:	88 0f       	add	r24, r24
    2e4a:	06 c0       	rjmp	.+12     	; 0x2e58 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2e4c:	82 30       	cpi	r24, 0x02	; 2
    2e4e:	39 f4       	brne	.+14     	; 0x2e5e <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    2e50:	80 91 1e 07 	lds	r24, 0x071E
    2e54:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    2e56:	8f 5f       	subi	r24, 0xFF	; 255
    2e58:	80 93 1e 07 	sts	0x071E, r24
			i++;
    2e5c:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    2e5e:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <worldInput+0x34>
    2e64:	00 d0       	rcall	.+0      	; 0x2e66 <worldInput+0x36>
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <worldInput+0x38>
    2e68:	ed b7       	in	r30, 0x3d	; 61
    2e6a:	fe b7       	in	r31, 0x3e	; 62
    2e6c:	31 96       	adiw	r30, 0x01	; 1
    2e6e:	ad b7       	in	r26, 0x3d	; 61
    2e70:	be b7       	in	r27, 0x3e	; 62
    2e72:	12 96       	adiw	r26, 0x02	; 2
    2e74:	dc 93       	st	X, r29
    2e76:	ce 93       	st	-X, r28
    2e78:	11 97       	sbiw	r26, 0x01	; 1
    2e7a:	80 91 1e 07 	lds	r24, 0x071E
    2e7e:	82 83       	std	Z+2, r24	; 0x02
    2e80:	13 82       	std	Z+3, r1	; 0x03
    2e82:	14 83       	std	Z+4, r17	; 0x04
    2e84:	15 82       	std	Z+5, r1	; 0x05
    2e86:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2e8a:	8d b7       	in	r24, 0x3d	; 61
    2e8c:	9e b7       	in	r25, 0x3e	; 62
    2e8e:	06 96       	adiw	r24, 0x06	; 6
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	9e bf       	out	0x3e, r25	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	8d bf       	out	0x3d, r24	; 61
    2e9a:	84 ef       	ldi	r24, 0xF4	; 244
    2e9c:	91 e0       	ldi	r25, 0x01	; 1
    2e9e:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    2ea2:	14 30       	cpi	r17, 0x04	; 4
    2ea4:	58 f2       	brcs	.-106    	; 0x2e3c <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    2ea6:	80 91 1e 07 	lds	r24, 0x071E
    2eaa:	80 93 1f 07 	sts	0x071F, r24
}
    2eae:	df 91       	pop	r29
    2eb0:	cf 91       	pop	r28
    2eb2:	1f 91       	pop	r17
    2eb4:	08 95       	ret

00002eb6 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    2eb6:	1f 93       	push	r17
    2eb8:	cf 93       	push	r28
    2eba:	df 93       	push	r29
    2ebc:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2ebe:	cf e4       	ldi	r28, 0x4F	; 79
    2ec0:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    2ec2:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	21 f4       	brne	.+8      	; 0x2ed2 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    2eca:	80 91 1c 06 	lds	r24, 0x061C
    2ece:	88 0f       	add	r24, r24
    2ed0:	06 c0       	rjmp	.+12     	; 0x2ede <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2ed2:	82 30       	cpi	r24, 0x02	; 2
    2ed4:	41 f4       	brne	.+16     	; 0x2ee6 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    2ed6:	80 91 1c 06 	lds	r24, 0x061C
    2eda:	88 0f       	add	r24, r24
			currentOrientation += 1;
    2edc:	8f 5f       	subi	r24, 0xFF	; 255
    2ede:	80 93 1c 06 	sts	0x061C, r24
			i++;
    2ee2:	1f 5f       	subi	r17, 0xFF	; 255
    2ee4:	02 c0       	rjmp	.+4      	; 0x2eea <orientationInput+0x34>
		}

		if (btnHolder != 0){
    2ee6:	88 23       	and	r24, r24
    2ee8:	f1 f0       	breq	.+60     	; 0x2f26 <orientationInput+0x70>
			LCD_clear();
    2eea:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2eee:	00 d0       	rcall	.+0      	; 0x2ef0 <orientationInput+0x3a>
    2ef0:	00 d0       	rcall	.+0      	; 0x2ef2 <orientationInput+0x3c>
    2ef2:	00 d0       	rcall	.+0      	; 0x2ef4 <orientationInput+0x3e>
    2ef4:	ed b7       	in	r30, 0x3d	; 61
    2ef6:	fe b7       	in	r31, 0x3e	; 62
    2ef8:	31 96       	adiw	r30, 0x01	; 1
    2efa:	ad b7       	in	r26, 0x3d	; 61
    2efc:	be b7       	in	r27, 0x3e	; 62
    2efe:	12 96       	adiw	r26, 0x02	; 2
    2f00:	dc 93       	st	X, r29
    2f02:	ce 93       	st	-X, r28
    2f04:	11 97       	sbiw	r26, 0x01	; 1
    2f06:	80 91 1c 06 	lds	r24, 0x061C
    2f0a:	82 83       	std	Z+2, r24	; 0x02
    2f0c:	13 82       	std	Z+3, r1	; 0x03
    2f0e:	14 83       	std	Z+4, r17	; 0x04
    2f10:	15 82       	std	Z+5, r1	; 0x05
    2f12:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
    2f16:	8d b7       	in	r24, 0x3d	; 61
    2f18:	9e b7       	in	r25, 0x3e	; 62
    2f1a:	06 96       	adiw	r24, 0x06	; 6
    2f1c:	0f b6       	in	r0, 0x3f	; 63
    2f1e:	f8 94       	cli
    2f20:	9e bf       	out	0x3e, r25	; 62
    2f22:	0f be       	out	0x3f, r0	; 63
    2f24:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2f26:	84 ef       	ldi	r24, 0xF4	; 244
    2f28:	91 e0       	ldi	r25, 0x01	; 1
    2f2a:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    2f2e:	12 30       	cpi	r17, 0x02	; 2
    2f30:	40 f2       	brcs	.-112    	; 0x2ec2 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    2f32:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
	switch(currentOrientation){
    2f36:	80 91 1c 06 	lds	r24, 0x061C
    2f3a:	81 30       	cpi	r24, 0x01	; 1
    2f3c:	51 f0       	breq	.+20     	; 0x2f52 <orientationInput+0x9c>
    2f3e:	81 30       	cpi	r24, 0x01	; 1
    2f40:	28 f0       	brcs	.+10     	; 0x2f4c <orientationInput+0x96>
    2f42:	82 30       	cpi	r24, 0x02	; 2
    2f44:	49 f0       	breq	.+18     	; 0x2f58 <orientationInput+0xa2>
    2f46:	83 30       	cpi	r24, 0x03	; 3
    2f48:	71 f4       	brne	.+28     	; 0x2f66 <orientationInput+0xb0>
    2f4a:	09 c0       	rjmp	.+18     	; 0x2f5e <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    2f4c:	8e e7       	ldi	r24, 0x7E	; 126
    2f4e:	92 e0       	ldi	r25, 0x02	; 2
    2f50:	08 c0       	rjmp	.+16     	; 0x2f62 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    2f52:	80 ea       	ldi	r24, 0xA0	; 160
    2f54:	92 e0       	ldi	r25, 0x02	; 2
    2f56:	05 c0       	rjmp	.+10     	; 0x2f62 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    2f58:	81 ec       	ldi	r24, 0xC1	; 193
    2f5a:	92 e0       	ldi	r25, 0x02	; 2
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    2f5e:	83 ee       	ldi	r24, 0xE3	; 227
    2f60:	92 e0       	ldi	r25, 0x02	; 2
    2f62:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    2f66:	80 91 1c 06 	lds	r24, 0x061C
    2f6a:	80 93 1b 06 	sts	0x061B, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    2f6e:	84 ef       	ldi	r24, 0xF4	; 244
    2f70:	91 e0       	ldi	r25, 0x01	; 1
    2f72:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
}
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	08 95       	ret

00002f7e <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2f7e:	cf 92       	push	r12
    2f80:	df 92       	push	r13
    2f82:	ef 92       	push	r14
    2f84:	ff 92       	push	r15
    2f86:	0f 93       	push	r16
    2f88:	1f 93       	push	r17
    2f8a:	df 93       	push	r29
    2f8c:	cf 93       	push	r28
    2f8e:	0f 92       	push	r0
    2f90:	cd b7       	in	r28, 0x3d	; 61
    2f92:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2f94:	80 91 1e 07 	lds	r24, 0x071E
    2f98:	f8 2e       	mov	r15, r24
    2f9a:	f6 94       	lsr	r15
    2f9c:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2f9e:	98 2f       	mov	r25, r24
    2fa0:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2fa2:	00 91 1c 06 	lds	r16, 0x061C
    2fa6:	cc 24       	eor	r12, r12
    2fa8:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2faa:	f6 01       	movw	r30, r12
    2fac:	e5 5f       	subi	r30, 0xF5	; 245
    2fae:	f9 4f       	sbci	r31, 0xF9	; 249
    2fb0:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2fb2:	ef 2d       	mov	r30, r15
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	ee 0f       	add	r30, r30
    2fb8:	ff 1f       	adc	r31, r31
    2fba:	ee 0f       	add	r30, r30
    2fbc:	ff 1f       	adc	r31, r31
    2fbe:	e9 0f       	add	r30, r25
    2fc0:	f1 1d       	adc	r31, r1
    2fc2:	e2 50       	subi	r30, 0x02	; 2
    2fc4:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2fc6:	80 81       	ld	r24, Z
    2fc8:	60 2f       	mov	r22, r16
    2fca:	41 e0       	ldi	r20, 0x01	; 1
    2fcc:	99 83       	std	Y+1, r25	; 0x01
    2fce:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2fd2:	f6 01       	movw	r30, r12
    2fd4:	ee 55       	subi	r30, 0x5E	; 94
    2fd6:	f8 4f       	sbci	r31, 0xF8	; 248
    2fd8:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2fda:	99 81       	ldd	r25, Y+1	; 0x01
    2fdc:	12 30       	cpi	r17, 0x02	; 2
    2fde:	89 f4       	brne	.+34     	; 0x3002 <getGateways+0x84>
			switch(curOrient){
    2fe0:	01 30       	cpi	r16, 0x01	; 1
    2fe2:	49 f0       	breq	.+18     	; 0x2ff6 <getGateways+0x78>
    2fe4:	01 30       	cpi	r16, 0x01	; 1
    2fe6:	28 f0       	brcs	.+10     	; 0x2ff2 <getGateways+0x74>
    2fe8:	02 30       	cpi	r16, 0x02	; 2
    2fea:	39 f0       	breq	.+14     	; 0x2ffa <getGateways+0x7c>
    2fec:	03 30       	cpi	r16, 0x03	; 3
    2fee:	89 f4       	brne	.+34     	; 0x3012 <getGateways+0x94>
    2ff0:	06 c0       	rjmp	.+12     	; 0x2ffe <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    2ff2:	fa 94       	dec	r15
    2ff4:	0e c0       	rjmp	.+28     	; 0x3012 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    2ff6:	9f 5f       	subi	r25, 0xFF	; 255
    2ff8:	0c c0       	rjmp	.+24     	; 0x3012 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    2ffa:	f3 94       	inc	r15
    2ffc:	0a c0       	rjmp	.+20     	; 0x3012 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    2ffe:	91 50       	subi	r25, 0x01	; 1
    3000:	08 c0       	rjmp	.+16     	; 0x3012 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    3002:	13 30       	cpi	r17, 0x03	; 3
    3004:	11 f4       	brne	.+4      	; 0x300a <getGateways+0x8c>
			curOrient++;
    3006:	0f 5f       	subi	r16, 0xFF	; 255
    3008:	03 c0       	rjmp	.+6      	; 0x3010 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    300a:	11 30       	cpi	r17, 0x01	; 1
    300c:	11 f4       	brne	.+4      	; 0x3012 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    300e:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    3010:	03 70       	andi	r16, 0x03	; 3
    3012:	08 94       	sec
    3014:	c1 1c       	adc	r12, r1
    3016:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    3018:	8d e0       	ldi	r24, 0x0D	; 13
    301a:	c8 16       	cp	r12, r24
    301c:	d1 04       	cpc	r13, r1
    301e:	29 f6       	brne	.-118    	; 0x2faa <getGateways+0x2c>
    3020:	cc 24       	eor	r12, r12
    3022:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    3024:	b4 e0       	ldi	r27, 0x04	; 4
    3026:	eb 2e       	mov	r14, r27
    3028:	b3 e0       	ldi	r27, 0x03	; 3
    302a:	fb 2e       	mov	r15, r27
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    302c:	f6 01       	movw	r30, r12
    302e:	ee 55       	subi	r30, 0x5E	; 94
    3030:	f8 4f       	sbci	r31, 0xF8	; 248
    3032:	00 81       	ld	r16, Z
		LCD_clear();
    3034:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    3038:	20 2f       	mov	r18, r16
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	ad b7       	in	r26, 0x3d	; 61
    303e:	be b7       	in	r27, 0x3e	; 62
    3040:	54 97       	sbiw	r26, 0x14	; 20
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	be bf       	out	0x3e, r27	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	ad bf       	out	0x3d, r26	; 61
    304c:	ed b7       	in	r30, 0x3d	; 61
    304e:	fe b7       	in	r31, 0x3e	; 62
    3050:	31 96       	adiw	r30, 0x01	; 1
    3052:	12 96       	adiw	r26, 0x02	; 2
    3054:	fc 92       	st	X, r15
    3056:	ee 92       	st	-X, r14
    3058:	11 97       	sbiw	r26, 0x01	; 1
    305a:	d3 82       	std	Z+3, r13	; 0x03
    305c:	c2 82       	std	Z+2, r12	; 0x02
    305e:	11 27       	eor	r17, r17
    3060:	07 fd       	sbrc	r16, 7
    3062:	10 95       	com	r17
    3064:	00 27       	eor	r16, r16
    3066:	11 0f       	add	r17, r17
    3068:	00 1f       	adc	r16, r16
    306a:	11 27       	eor	r17, r17
    306c:	15 83       	std	Z+5, r17	; 0x05
    306e:	04 83       	std	Z+4, r16	; 0x04
    3070:	c9 01       	movw	r24, r18
    3072:	76 e0       	ldi	r23, 0x06	; 6
    3074:	96 95       	lsr	r25
    3076:	87 95       	ror	r24
    3078:	7a 95       	dec	r23
    307a:	e1 f7       	brne	.-8      	; 0x3074 <getGateways+0xf6>
    307c:	81 70       	andi	r24, 0x01	; 1
    307e:	90 70       	andi	r25, 0x00	; 0
    3080:	97 83       	std	Z+7, r25	; 0x07
    3082:	86 83       	std	Z+6, r24	; 0x06
    3084:	c9 01       	movw	r24, r18
    3086:	65 e0       	ldi	r22, 0x05	; 5
    3088:	96 95       	lsr	r25
    308a:	87 95       	ror	r24
    308c:	6a 95       	dec	r22
    308e:	e1 f7       	brne	.-8      	; 0x3088 <getGateways+0x10a>
    3090:	81 70       	andi	r24, 0x01	; 1
    3092:	90 70       	andi	r25, 0x00	; 0
    3094:	91 87       	std	Z+9, r25	; 0x09
    3096:	80 87       	std	Z+8, r24	; 0x08
    3098:	c9 01       	movw	r24, r18
    309a:	54 e0       	ldi	r21, 0x04	; 4
    309c:	96 95       	lsr	r25
    309e:	87 95       	ror	r24
    30a0:	5a 95       	dec	r21
    30a2:	e1 f7       	brne	.-8      	; 0x309c <getGateways+0x11e>
    30a4:	81 70       	andi	r24, 0x01	; 1
    30a6:	90 70       	andi	r25, 0x00	; 0
    30a8:	93 87       	std	Z+11, r25	; 0x0b
    30aa:	82 87       	std	Z+10, r24	; 0x0a
    30ac:	c9 01       	movw	r24, r18
    30ae:	43 e0       	ldi	r20, 0x03	; 3
    30b0:	96 95       	lsr	r25
    30b2:	87 95       	ror	r24
    30b4:	4a 95       	dec	r20
    30b6:	e1 f7       	brne	.-8      	; 0x30b0 <getGateways+0x132>
    30b8:	81 70       	andi	r24, 0x01	; 1
    30ba:	90 70       	andi	r25, 0x00	; 0
    30bc:	95 87       	std	Z+13, r25	; 0x0d
    30be:	84 87       	std	Z+12, r24	; 0x0c
    30c0:	c9 01       	movw	r24, r18
    30c2:	96 95       	lsr	r25
    30c4:	87 95       	ror	r24
    30c6:	96 95       	lsr	r25
    30c8:	87 95       	ror	r24
    30ca:	81 70       	andi	r24, 0x01	; 1
    30cc:	90 70       	andi	r25, 0x00	; 0
    30ce:	97 87       	std	Z+15, r25	; 0x0f
    30d0:	86 87       	std	Z+14, r24	; 0x0e
    30d2:	c9 01       	movw	r24, r18
    30d4:	96 95       	lsr	r25
    30d6:	87 95       	ror	r24
    30d8:	81 70       	andi	r24, 0x01	; 1
    30da:	90 70       	andi	r25, 0x00	; 0
    30dc:	91 8b       	std	Z+17, r25	; 0x11
    30de:	80 8b       	std	Z+16, r24	; 0x10
    30e0:	21 70       	andi	r18, 0x01	; 1
    30e2:	30 70       	andi	r19, 0x00	; 0
    30e4:	33 8b       	std	Z+19, r19	; 0x13
    30e6:	22 8b       	std	Z+18, r18	; 0x12
    30e8:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    30ec:	ed b7       	in	r30, 0x3d	; 61
    30ee:	fe b7       	in	r31, 0x3e	; 62
    30f0:	74 96       	adiw	r30, 0x14	; 20
    30f2:	0f b6       	in	r0, 0x3f	; 63
    30f4:	f8 94       	cli
    30f6:	fe bf       	out	0x3e, r31	; 62
    30f8:	0f be       	out	0x3f, r0	; 63
    30fa:	ed bf       	out	0x3d, r30	; 61
    30fc:	88 ee       	ldi	r24, 0xE8	; 232
    30fe:	93 e0       	ldi	r25, 0x03	; 3
    3100:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
    3104:	08 94       	sec
    3106:	c1 1c       	adc	r12, r1
    3108:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    310a:	fd e0       	ldi	r31, 0x0D	; 13
    310c:	cf 16       	cp	r12, r31
    310e:	d1 04       	cpc	r13, r1
    3110:	09 f0       	breq	.+2      	; 0x3114 <getGateways+0x196>
    3112:	8c cf       	rjmp	.-232    	; 0x302c <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    3114:	0f 90       	pop	r0
    3116:	cf 91       	pop	r28
    3118:	df 91       	pop	r29
    311a:	1f 91       	pop	r17
    311c:	0f 91       	pop	r16
    311e:	ff 90       	pop	r15
    3120:	ef 90       	pop	r14
    3122:	df 90       	pop	r13
    3124:	cf 90       	pop	r12
    3126:	08 95       	ret

00003128 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    3128:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    312a:	10 91 1e 07 	lds	r17, 0x071E
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    312e:	80 91 87 05 	lds	r24, 0x0587
    3132:	60 91 1c 06 	lds	r22, 0x061C
    3136:	40 e0       	ldi	r20, 0x00	; 0
    3138:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    313c:	e1 2f       	mov	r30, r17
    313e:	e6 95       	lsr	r30
    3140:	e6 95       	lsr	r30
    3142:	f0 e0       	ldi	r31, 0x00	; 0
    3144:	ee 0f       	add	r30, r30
    3146:	ff 1f       	adc	r31, r31
    3148:	ee 0f       	add	r30, r30
    314a:	ff 1f       	adc	r31, r31
    314c:	13 70       	andi	r17, 0x03	; 3
    314e:	e1 0f       	add	r30, r17
    3150:	f1 1d       	adc	r31, r1
    3152:	e2 50       	subi	r30, 0x02	; 2
    3154:	fc 4f       	sbci	r31, 0xFC	; 252
    3156:	80 83       	st	Z, r24
}
    3158:	1f 91       	pop	r17
    315a:	08 95       	ret

0000315c <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    315c:	df 92       	push	r13
    315e:	ef 92       	push	r14
    3160:	ff 92       	push	r15
    3162:	0f 93       	push	r16
    3164:	1f 93       	push	r17
    3166:	06 2f       	mov	r16, r22
    3168:	14 2f       	mov	r17, r20
    316a:	ff 24       	eor	r15, r15
    316c:	2e c0       	rjmp	.+92     	; 0x31ca <matchBranch+0x6e>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    316e:	05 30       	cpi	r16, 0x05	; 5
    3170:	90 f5       	brcc	.+100    	; 0x31d6 <matchBranch+0x7a>
    3172:	15 30       	cpi	r17, 0x05	; 5
    3174:	80 f5       	brcc	.+96     	; 0x31d6 <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    3176:	ef 2d       	mov	r30, r15
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	e6 59       	subi	r30, 0x96	; 150
    317c:	fb 4f       	sbci	r31, 0xFB	; 251
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    317e:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    3180:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    3182:	80 81       	ld	r24, Z
    3184:	6e 2d       	mov	r22, r14
    3186:	40 e0       	ldi	r20, 0x00	; 0
    3188:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    318c:	e0 2f       	mov	r30, r16
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	ee 0f       	add	r30, r30
    3192:	ff 1f       	adc	r31, r31
    3194:	ee 0f       	add	r30, r30
    3196:	ff 1f       	adc	r31, r31
    3198:	e1 0f       	add	r30, r17
    319a:	f1 1d       	adc	r31, r1
    319c:	e2 50       	subi	r30, 0x02	; 2
    319e:	fc 4f       	sbci	r31, 0xFC	; 252
    31a0:	90 81       	ld	r25, Z
    31a2:	89 17       	cp	r24, r25
    31a4:	c1 f4       	brne	.+48     	; 0x31d6 <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		currentCellWorld = (curRow << 2) + curCol;
    31a6:	80 2f       	mov	r24, r16
    31a8:	88 0f       	add	r24, r24
    31aa:	88 0f       	add	r24, r24
    31ac:	81 0f       	add	r24, r17
    31ae:	80 93 1e 07 	sts	0x071E, r24
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		currentCellWorld = shiftMap(currentCellWorld, curMove, curOrnt);
    31b2:	6d 2d       	mov	r22, r13
    31b4:	4e 2d       	mov	r20, r14
    31b6:	0e 94 96 14 	call	0x292c	; 0x292c <shiftMap>
    31ba:	80 93 1e 07 	sts	0x071E, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = currentCellWorld >> 2;
    31be:	08 2f       	mov	r16, r24
    31c0:	06 95       	lsr	r16
    31c2:	06 95       	lsr	r16
		curCol = currentCellWorld & 0b0011;
    31c4:	18 2f       	mov	r17, r24
    31c6:	13 70       	andi	r17, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    31c8:	f3 94       	inc	r15
    31ca:	80 91 79 04 	lds	r24, 0x0479
    31ce:	f8 16       	cp	r15, r24
    31d0:	70 f2       	brcs	.-100    	; 0x316e <matchBranch+0x12>
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	01 c0       	rjmp	.+2      	; 0x31d8 <matchBranch+0x7c>
    31d6:	80 e0       	ldi	r24, 0x00	; 0
		curCol = currentCellWorld & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	return SUCCESS;
}
    31d8:	1f 91       	pop	r17
    31da:	0f 91       	pop	r16
    31dc:	ff 90       	pop	r15
    31de:	ef 90       	pop	r14
    31e0:	df 90       	pop	r13
    31e2:	08 95       	ret

000031e4 <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    31e4:	df 92       	push	r13
    31e6:	ef 92       	push	r14
    31e8:	ff 92       	push	r15
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	cf 93       	push	r28
    31f0:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    31f2:	d0 90 6a 04 	lds	r13, 0x046A
	// Local variables for nested for loops 
	unsigned char row, col;
	// Stores the number of matching seeds
	matchSeeds = 0;
    31f6:	10 92 b5 07 	sts	0x07B5, r1
    31fa:	00 e0       	ldi	r16, 0x00	; 0
    31fc:	10 e0       	ldi	r17, 0x00	; 0
    31fe:	1a c0       	rjmp	.+52     	; 0x3234 <localizeGateway+0x50>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    3200:	88 81       	ld	r24, Y
    3202:	d8 16       	cp	r13, r24
    3204:	69 f4       	brne	.+26     	; 0x3220 <localizeGateway+0x3c>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    3206:	8e ef       	ldi	r24, 0xFE	; 254
    3208:	93 e0       	ldi	r25, 0x03	; 3
    320a:	6e 2d       	mov	r22, r14
    320c:	4f 2d       	mov	r20, r15
    320e:	0e 94 ae 18 	call	0x315c	; 0x315c <matchBranch>
    3212:	88 23       	and	r24, r24
    3214:	29 f0       	breq	.+10     	; 0x3220 <localizeGateway+0x3c>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    3216:	80 91 b5 07 	lds	r24, 0x07B5
    321a:	8f 5f       	subi	r24, 0xFF	; 255
    321c:	80 93 b5 07 	sts	0x07B5, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    3220:	f3 94       	inc	r15
    3222:	21 96       	adiw	r28, 0x01	; 1
    3224:	84 e0       	ldi	r24, 0x04	; 4
    3226:	f8 16       	cp	r15, r24
    3228:	59 f7       	brne	.-42     	; 0x3200 <localizeGateway+0x1c>
    322a:	0f 5f       	subi	r16, 0xFF	; 255
    322c:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    322e:	04 30       	cpi	r16, 0x04	; 4
    3230:	11 05       	cpc	r17, r1
    3232:	51 f0       	breq	.+20     	; 0x3248 <localizeGateway+0x64>
    3234:	e0 2e       	mov	r14, r16
    3236:	e8 01       	movw	r28, r16
    3238:	cc 0f       	add	r28, r28
    323a:	dd 1f       	adc	r29, r29
    323c:	cc 0f       	add	r28, r28
    323e:	dd 1f       	adc	r29, r29
    3240:	c2 50       	subi	r28, 0x02	; 2
    3242:	dc 4f       	sbci	r29, 0xFC	; 252
    3244:	ff 24       	eor	r15, r15
    3246:	dc cf       	rjmp	.-72     	; 0x3200 <localizeGateway+0x1c>
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	80 91 b5 07 	lds	r24, 0x07B5
    324e:	81 30       	cpi	r24, 0x01	; 1
    3250:	09 f0       	breq	.+2      	; 0x3254 <localizeGateway+0x70>
    3252:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    3254:	89 2f       	mov	r24, r25
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	ff 90       	pop	r15
    3260:	ef 90       	pop	r14
    3262:	df 90       	pop	r13
    3264:	08 95       	ret

00003266 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    3266:	8f 92       	push	r8
    3268:	af 92       	push	r10
    326a:	bf 92       	push	r11
    326c:	cf 92       	push	r12
    326e:	df 92       	push	r13
    3270:	ef 92       	push	r14
    3272:	ff 92       	push	r15
    3274:	0f 93       	push	r16
    3276:	1f 93       	push	r17
	char isDone = 0;
	
	switch(currentMove){
    3278:	80 91 b2 07 	lds	r24, 0x07B2
    327c:	82 30       	cpi	r24, 0x02	; 2
    327e:	69 f0       	breq	.+26     	; 0x329a <moveMap+0x34>
    3280:	83 30       	cpi	r24, 0x03	; 3
    3282:	21 f1       	breq	.+72     	; 0x32cc <moveMap+0x66>
    3284:	81 30       	cpi	r24, 0x01	; 1
    3286:	d1 f5       	brne	.+116    	; 0x32fc <moveMap+0x96>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    3288:	60 e0       	ldi	r22, 0x00	; 0
    328a:	70 e0       	ldi	r23, 0x00	; 0
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	20 e0       	ldi	r18, 0x00	; 0
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	4c e8       	ldi	r20, 0x8C	; 140
    3296:	51 ec       	ldi	r21, 0xC1	; 193
    3298:	21 c0       	rjmp	.+66     	; 0x32dc <moveMap+0x76>
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
    329a:	63 ec       	ldi	r22, 0xC3	; 195
    329c:	75 e3       	ldi	r23, 0x35	; 53
    329e:	8b ea       	ldi	r24, 0xAB	; 171
    32a0:	93 e4       	ldi	r25, 0x43	; 67
    32a2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <setOdometry>
			while(!isDone){
				checkIR();
    32a6:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <checkIR>
				isDone = moveWall();
    32aa:	0e 94 41 10 	call	0x2082	; 0x2082 <moveWall>
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
			while(!isDone){
    32ae:	88 23       	and	r24, r24
    32b0:	d1 f3       	breq	.-12     	; 0x32a6 <moveMap+0x40>
				checkIR();
				isDone = moveWall();
			}
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_ON);
    32b2:	82 e0       	ldi	r24, 0x02	; 2
    32b4:	61 e0       	ldi	r22, 0x01	; 1
    32b6:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <STEPPER_stop>
			TMRSRVC_delay(100);//wait .1 seconds
    32ba:	84 e6       	ldi	r24, 0x64	; 100
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    32c2:	82 e0       	ldi	r24, 0x02	; 2
    32c4:	60 e0       	ldi	r22, 0x00	; 0
    32c6:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <STEPPER_stop>
    32ca:	23 c0       	rjmp	.+70     	; 0x3312 <moveMap+0xac>
			
			// move_arc_stwt(NO_TURN, 45, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    32cc:	60 e0       	ldi	r22, 0x00	; 0
    32ce:	70 e0       	ldi	r23, 0x00	; 0
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	4c e8       	ldi	r20, 0x8C	; 140
    32da:	51 e4       	ldi	r21, 0x41	; 65
    32dc:	0f 2e       	mov	r0, r31
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	ef 2e       	mov	r14, r31
    32e2:	f0 e0       	ldi	r31, 0x00	; 0
    32e4:	ff 2e       	mov	r15, r31
    32e6:	f0 e2       	ldi	r31, 0x20	; 32
    32e8:	0f 2f       	mov	r16, r31
    32ea:	f1 e4       	ldi	r31, 0x41	; 65
    32ec:	1f 2f       	mov	r17, r31
    32ee:	f0 2d       	mov	r31, r0
    32f0:	57 01       	movw	r10, r14
    32f2:	68 01       	movw	r12, r16
    32f4:	88 24       	eor	r8, r8
    32f6:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    32fa:	0b c0       	rjmp	.+22     	; 0x3312 <moveMap+0xac>
			break;
		default:
			LCD_printf("Whatz2?!");
    32fc:	00 d0       	rcall	.+0      	; 0x32fe <moveMap+0x98>
    32fe:	86 e5       	ldi	r24, 0x56	; 86
    3300:	91 e0       	ldi	r25, 0x01	; 1
    3302:	ed b7       	in	r30, 0x3d	; 61
    3304:	fe b7       	in	r31, 0x3e	; 62
    3306:	92 83       	std	Z+2, r25	; 0x02
    3308:	81 83       	std	Z+1, r24	; 0x01
    330a:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
			break;
	}
}
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	df 90       	pop	r13
    331c:	cf 90       	pop	r12
    331e:	bf 90       	pop	r11
    3320:	af 90       	pop	r10
    3322:	8f 90       	pop	r8
    3324:	08 95       	ret

00003326 <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    3326:	0e 94 89 11 	call	0x2312	; 0x2312 <initializeRobot>
	
	// // Loop variables for print debug
	// unsigned char i, branch, move, orent;
	
	// Display the map
	LCD_clear();
    332a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    332e:	86 e2       	ldi	r24, 0x26	; 38
    3330:	93 e0       	ldi	r25, 0x03	; 3
    3332:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <puts>
	printMap(RESET);
    3336:	81 e0       	ldi	r24, 0x01	; 1
    3338:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    333c:	88 ee       	ldi	r24, 0xE8	; 232
    333e:	93 e0       	ldi	r25, 0x03	; 3
    3340:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
	LCD_clear();
    3344:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
    3348:	10 c0       	rjmp	.+32     	; 0x336a <CBOT_main+0x44>
	
	// Localization Loop 
	while(isLost)
	{	
		//Sense Gateway
		checkIR();	
    334a:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <checkIR>
		checkWorld();
    334e:	0e 94 a9 12 	call	0x2552	; 0x2552 <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    3352:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    3356:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <localizeGateway>
    335a:	80 93 fd 03 	sts	0x03FD, r24
		// LCD_printf("seeds: %1d", matchSeeds);
		
		// TMRSRVC_delay(5000);//wait 5 seconds
		
		//Act on the Gateway
		moveMap();
    335e:	0e 94 33 19 	call	0x3266	; 0x3266 <moveMap>
		
		// Break if not isLost
		if(!isLost){
    3362:	80 91 fd 03 	lds	r24, 0x03FD
    3366:	88 23       	and	r24, r24
    3368:	21 f0       	breq	.+8      	; 0x3372 <CBOT_main+0x4c>
	printMap(RESET);
	TMRSRVC_delay(1000);//wait 1 seconds
	LCD_clear();
	
	// Localization Loop 
	while(isLost)
    336a:	80 91 fd 03 	lds	r24, 0x03FD
    336e:	88 23       	and	r24, r24
    3370:	61 f7       	brne	.-40     	; 0x334a <CBOT_main+0x24>
			break;
		}
	}
	
	
	LCD_clear();
    3372:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
	LCD_printf("LOLZ\nI'm found!");
    3376:	00 d0       	rcall	.+0      	; 0x3378 <CBOT_main+0x52>
    3378:	87 e3       	ldi	r24, 0x37	; 55
    337a:	93 e0       	ldi	r25, 0x03	; 3
    337c:	ed b7       	in	r30, 0x3d	; 61
    337e:	fe b7       	in	r31, 0x3e	; 62
    3380:	92 83       	std	Z+2, r25	; 0x02
    3382:	81 83       	std	Z+1, r24	; 0x01
    3384:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
	TMRSRVC_delay(3000);//wait 3 seconds
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	88 eb       	ldi	r24, 0xB8	; 184
    338e:	9b e0       	ldi	r25, 0x0B	; 11
    3390:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
	
	LCD_clear();
    3394:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    3398:	86 e2       	ldi	r24, 0x26	; 38
    339a:	93 e0       	ldi	r25, 0x03	; 3
    339c:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <puts>
	printMap(RESET);
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <printMap>
	TMRSRVC_delay(5000);//wait 5 seconds
    33a6:	88 e8       	ldi	r24, 0x88	; 136
    33a8:	93 e1       	ldi	r25, 0x13	; 19
    33aa:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
	LCD_clear();
    33ae:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
	
	// currentCellWorld = 0b0000;
	currentGoalWorld = 0b1111;
    33b2:	8f e0       	ldi	r24, 0x0F	; 15
    33b4:	80 93 8d 05 	sts	0x058D, r24
	
	// Make metric map
	wavefrontMake();
    33b8:	0e 94 3e 12 	call	0x247c	; 0x247c <wavefrontMake>
    33bc:	5a c0       	rjmp	.+180    	; 0x3472 <CBOT_main+0x14c>
	
	// Metric Loop 
	while(!isGoal){
	
		LCD_clear();
    33be:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
		switch(currentOrientation){
    33c2:	80 91 1c 06 	lds	r24, 0x061C
    33c6:	81 30       	cpi	r24, 0x01	; 1
    33c8:	51 f0       	breq	.+20     	; 0x33de <CBOT_main+0xb8>
    33ca:	81 30       	cpi	r24, 0x01	; 1
    33cc:	28 f0       	brcs	.+10     	; 0x33d8 <CBOT_main+0xb2>
    33ce:	82 30       	cpi	r24, 0x02	; 2
    33d0:	49 f0       	breq	.+18     	; 0x33e4 <CBOT_main+0xbe>
    33d2:	83 30       	cpi	r24, 0x03	; 3
    33d4:	71 f4       	brne	.+28     	; 0x33f2 <CBOT_main+0xcc>
    33d6:	09 c0       	rjmp	.+18     	; 0x33ea <CBOT_main+0xc4>
			case NORTH:
				LCD_printf("CurtOrent:NORTH\n");
    33d8:	87 e4       	ldi	r24, 0x47	; 71
    33da:	93 e0       	ldi	r25, 0x03	; 3
    33dc:	08 c0       	rjmp	.+16     	; 0x33ee <CBOT_main+0xc8>
				break;
			case EAST:
				LCD_printf("CurtOrent:EAST\n");
    33de:	87 e5       	ldi	r24, 0x57	; 87
    33e0:	93 e0       	ldi	r25, 0x03	; 3
    33e2:	05 c0       	rjmp	.+10     	; 0x33ee <CBOT_main+0xc8>
				break;
			case SOUTH:
				LCD_printf("CurtOrent:SOUTH\n");
    33e4:	86 e6       	ldi	r24, 0x66	; 102
    33e6:	93 e0       	ldi	r25, 0x03	; 3
    33e8:	02 c0       	rjmp	.+4      	; 0x33ee <CBOT_main+0xc8>
				break;
			case WEST:
				LCD_printf("CurtOrent:WEST\n");
    33ea:	86 e7       	ldi	r24, 0x76	; 118
    33ec:	93 e0       	ldi	r25, 0x03	; 3
    33ee:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <puts>
			default:
				break;
		}
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    33f2:	80 91 1e 07 	lds	r24, 0x071E
    33f6:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <fourNeighborSearch>
    33fa:	80 93 b4 07 	sts	0x07B4, r24
		if(isGoal){
    33fe:	88 23       	and	r24, r24
    3400:	e9 f5       	brne	.+122    	; 0x347c <CBOT_main+0x156>
		
		// if(nextOrientation != SOUTH){
			// break;
		// }
				
		switch(nextOrientation){
    3402:	80 91 1d 06 	lds	r24, 0x061D
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	51 f0       	breq	.+20     	; 0x341e <CBOT_main+0xf8>
    340a:	81 30       	cpi	r24, 0x01	; 1
    340c:	28 f0       	brcs	.+10     	; 0x3418 <CBOT_main+0xf2>
    340e:	82 30       	cpi	r24, 0x02	; 2
    3410:	49 f0       	breq	.+18     	; 0x3424 <CBOT_main+0xfe>
    3412:	83 30       	cpi	r24, 0x03	; 3
    3414:	71 f4       	brne	.+28     	; 0x3432 <CBOT_main+0x10c>
    3416:	09 c0       	rjmp	.+18     	; 0x342a <CBOT_main+0x104>
			case NORTH:
				LCD_printf("NextOrent:NORTH\n");
    3418:	85 e8       	ldi	r24, 0x85	; 133
    341a:	93 e0       	ldi	r25, 0x03	; 3
    341c:	08 c0       	rjmp	.+16     	; 0x342e <CBOT_main+0x108>
				break;
			case EAST:
				LCD_printf("NextOrent:EAST\n");
    341e:	85 e9       	ldi	r24, 0x95	; 149
    3420:	93 e0       	ldi	r25, 0x03	; 3
    3422:	05 c0       	rjmp	.+10     	; 0x342e <CBOT_main+0x108>
				break;
			case SOUTH:
				LCD_printf("NextOrent:SOUTH\n");
    3424:	84 ea       	ldi	r24, 0xA4	; 164
    3426:	93 e0       	ldi	r25, 0x03	; 3
    3428:	02 c0       	rjmp	.+4      	; 0x342e <CBOT_main+0x108>
				break;
			case WEST:
				LCD_printf("NextOrent:WEST\n");
    342a:	84 eb       	ldi	r24, 0xB4	; 180
    342c:	93 e0       	ldi	r25, 0x03	; 3
    342e:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <puts>
				break;
			default:
				break;
		}
		
		switch(currentMove){
    3432:	80 91 b2 07 	lds	r24, 0x07B2
    3436:	82 30       	cpi	r24, 0x02	; 2
    3438:	51 f0       	breq	.+20     	; 0x344e <CBOT_main+0x128>
    343a:	83 30       	cpi	r24, 0x03	; 3
    343c:	29 f0       	breq	.+10     	; 0x3448 <CBOT_main+0x122>
    343e:	81 30       	cpi	r24, 0x01	; 1
    3440:	51 f4       	brne	.+20     	; 0x3456 <CBOT_main+0x130>
			case MOVE_LEFT:
				LCD_printf("CurMOVE:LEFT\n");
    3442:	83 ec       	ldi	r24, 0xC3	; 195
    3444:	93 e0       	ldi	r25, 0x03	; 3
    3446:	05 c0       	rjmp	.+10     	; 0x3452 <CBOT_main+0x12c>
				break;
			case MOVE_RIGHT:
				LCD_printf("CurMOVE:RIGHT\n");
    3448:	80 ed       	ldi	r24, 0xD0	; 208
    344a:	93 e0       	ldi	r25, 0x03	; 3
    344c:	02 c0       	rjmp	.+4      	; 0x3452 <CBOT_main+0x12c>
				break;
			case MOVE_FORWARD:
				LCD_printf("CurMOVE:FORWARD\n");
    344e:	8e ed       	ldi	r24, 0xDE	; 222
    3450:	93 e0       	ldi	r25, 0x03	; 3
    3452:	0e 94 4c 37 	call	0x6e98	; 0x6e98 <puts>
			default:
				break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    3456:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <planMetric>
		
		// Act on the move
		moveMap();
    345a:	0e 94 33 19 	call	0x3266	; 0x3266 <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    345e:	80 91 1e 07 	lds	r24, 0x071E
    3462:	60 91 b2 07 	lds	r22, 0x07B2
    3466:	40 91 1c 06 	lds	r20, 0x061C
    346a:	0e 94 96 14 	call	0x292c	; 0x292c <shiftMap>
    346e:	80 93 1e 07 	sts	0x071E, r24
	
	// Make metric map
	wavefrontMake();
	
	// Metric Loop 
	while(!isGoal){
    3472:	80 91 b4 07 	lds	r24, 0x07B4
    3476:	88 23       	and	r24, r24
    3478:	09 f4       	brne	.+2      	; 0x347c <CBOT_main+0x156>
    347a:	a1 cf       	rjmp	.-190    	; 0x33be <CBOT_main+0x98>
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
		// TMRSRVC_delay(2000);//wait 1 seconds
	}
	
	LCD_clear();
    347c:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
	LCD_printf("LOLZ\nI'm here!");
    3480:	00 d0       	rcall	.+0      	; 0x3482 <CBOT_main+0x15c>
    3482:	8e ee       	ldi	r24, 0xEE	; 238
    3484:	93 e0       	ldi	r25, 0x03	; 3
    3486:	ed b7       	in	r30, 0x3d	; 61
    3488:	fe b7       	in	r31, 0x3e	; 62
    348a:	92 83       	std	Z+2, r25	; 0x02
    348c:	81 83       	std	Z+1, r24	; 0x01
    348e:	0e 94 3a 37 	call	0x6e74	; 0x6e74 <printf>
	STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	82 e0       	ldi	r24, 0x02	; 2
    3498:	60 e0       	ldi	r22, 0x00	; 0
    349a:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <STEPPER_stop>
	TMRSRVC_delay(5000);//wait 3 seconds
    349e:	88 e8       	ldi	r24, 0x88	; 136
    34a0:	93 e1       	ldi	r25, 0x13	; 19
    34a2:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
		// LCD_clear();
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/
}// end the CBOT_main()
    34a6:	08 95       	ret

000034a8 <ADC_open>:
    34a8:	8f e0       	ldi	r24, 0x0F	; 15
    34aa:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    34ae:	88 23       	and	r24, r24
    34b0:	31 f4       	brne	.+12     	; 0x34be <ADC_open+0x16>
    34b2:	0e 94 d7 22 	call	0x45ae	; 0x45ae <__ADC_init>
    34b6:	8f e0       	ldi	r24, 0x0F	; 15
    34b8:	61 e0       	ldi	r22, 0x01	; 1
    34ba:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    34be:	8f e0       	ldi	r24, 0x0F	; 15
    34c0:	91 e0       	ldi	r25, 0x01	; 1
    34c2:	08 95       	ret

000034c4 <ADC_sample>:
    34c4:	8f e0       	ldi	r24, 0x0F	; 15
    34c6:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    34ca:	81 30       	cpi	r24, 0x01	; 1
    34cc:	19 f0       	breq	.+6      	; 0x34d4 <ADC_sample+0x10>
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	13 c0       	rjmp	.+38     	; 0x34fa <ADC_sample+0x36>
    34d4:	80 91 7a 00 	lds	r24, 0x007A
    34d8:	80 64       	ori	r24, 0x40	; 64
    34da:	80 93 7a 00 	sts	0x007A, r24
    34de:	80 91 7a 00 	lds	r24, 0x007A
    34e2:	86 fd       	sbrc	r24, 6
    34e4:	fc cf       	rjmp	.-8      	; 0x34de <ADC_sample+0x1a>
    34e6:	30 91 78 00 	lds	r19, 0x0078
    34ea:	20 91 79 00 	lds	r18, 0x0079
    34ee:	92 2f       	mov	r25, r18
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	23 2f       	mov	r18, r19
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	28 2b       	or	r18, r24
    34f8:	39 2b       	or	r19, r25
    34fa:	c9 01       	movw	r24, r18
    34fc:	08 95       	ret

000034fe <ADC_set_channel>:
    34fe:	58 2f       	mov	r21, r24
    3500:	80 91 0e 04 	lds	r24, 0x040E
    3504:	88 30       	cpi	r24, 0x08	; 8
    3506:	d8 f4       	brcc	.+54     	; 0x353e <ADC_set_channel+0x40>
    3508:	40 91 7e 00 	lds	r20, 0x007E
    350c:	21 e0       	ldi	r18, 0x01	; 1
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	b9 01       	movw	r22, r18
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <ADC_set_channel+0x1a>
    3514:	66 0f       	add	r22, r22
    3516:	77 1f       	adc	r23, r23
    3518:	8a 95       	dec	r24
    351a:	e2 f7       	brpl	.-8      	; 0x3514 <ADC_set_channel+0x16>
    351c:	cb 01       	movw	r24, r22
    351e:	80 95       	com	r24
    3520:	84 23       	and	r24, r20
    3522:	80 93 7e 00 	sts	0x007E, r24
    3526:	80 91 7e 00 	lds	r24, 0x007E
    352a:	05 2e       	mov	r0, r21
    352c:	02 c0       	rjmp	.+4      	; 0x3532 <ADC_set_channel+0x34>
    352e:	22 0f       	add	r18, r18
    3530:	33 1f       	adc	r19, r19
    3532:	0a 94       	dec	r0
    3534:	e2 f7       	brpl	.-8      	; 0x352e <ADC_set_channel+0x30>
    3536:	82 2b       	or	r24, r18
    3538:	80 93 7e 00 	sts	0x007E, r24
    353c:	0d c0       	rjmp	.+26     	; 0x3558 <ADC_set_channel+0x5a>
    353e:	20 91 7e 00 	lds	r18, 0x007E
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	05 2e       	mov	r0, r21
    3548:	02 c0       	rjmp	.+4      	; 0x354e <ADC_set_channel+0x50>
    354a:	88 0f       	add	r24, r24
    354c:	99 1f       	adc	r25, r25
    354e:	0a 94       	dec	r0
    3550:	e2 f7       	brpl	.-8      	; 0x354a <ADC_set_channel+0x4c>
    3552:	28 2b       	or	r18, r24
    3554:	20 93 7e 00 	sts	0x007E, r18
    3558:	50 93 0e 04 	sts	0x040E, r21
    355c:	80 91 7c 00 	lds	r24, 0x007C
    3560:	5f 71       	andi	r21, 0x1F	; 31
    3562:	80 7e       	andi	r24, 0xE0	; 224
    3564:	85 2b       	or	r24, r21
    3566:	80 93 7c 00 	sts	0x007C, r24
    356a:	08 95       	ret

0000356c <ADC_set_VREF>:
    356c:	ec e7       	ldi	r30, 0x7C	; 124
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	90 81       	ld	r25, Z
    3572:	82 95       	swap	r24
    3574:	88 0f       	add	r24, r24
    3576:	88 0f       	add	r24, r24
    3578:	80 7c       	andi	r24, 0xC0	; 192
    357a:	9f 73       	andi	r25, 0x3F	; 63
    357c:	98 2b       	or	r25, r24
    357e:	90 83       	st	Z, r25
    3580:	08 95       	ret

00003582 <main>:
    3582:	0e 94 f0 22 	call	0x45e0	; 0x45e0 <CBOT_ISR_init>
    3586:	0e 94 e2 22 	call	0x45c4	; 0x45c4 <CBOT_init>
    358a:	0e 94 93 19 	call	0x3326	; 0x3326 <CBOT_main>
    358e:	80 e0       	ldi	r24, 0x00	; 0
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	08 95       	ret

00003594 <LCD_clear>:
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	80 e4       	ldi	r24, 0x40	; 64
    359a:	60 e0       	ldi	r22, 0x00	; 0
    359c:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    35a0:	00 e0       	ldi	r16, 0x00	; 0
    35a2:	80 2f       	mov	r24, r16
    35a4:	60 e0       	ldi	r22, 0x00	; 0
    35a6:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_set_PGC_addr>
    35aa:	10 e0       	ldi	r17, 0x00	; 0
    35ac:	80 e0       	ldi	r24, 0x00	; 0
    35ae:	61 e0       	ldi	r22, 0x01	; 1
    35b0:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    35b4:	1f 5f       	subi	r17, 0xFF	; 255
    35b6:	10 38       	cpi	r17, 0x80	; 128
    35b8:	c9 f7       	brne	.-14     	; 0x35ac <LCD_clear+0x18>
    35ba:	0f 5f       	subi	r16, 0xFF	; 255
    35bc:	04 30       	cpi	r16, 0x04	; 4
    35be:	89 f7       	brne	.-30     	; 0x35a2 <LCD_clear+0xe>
    35c0:	83 e0       	ldi	r24, 0x03	; 3
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	0e 94 89 1b 	call	0x3712	; 0x3712 <LCD_set_next_PGC>
    35c8:	1f 91       	pop	r17
    35ca:	0f 91       	pop	r16
    35cc:	08 95       	ret

000035ce <LCD_open>:
    35ce:	0f 93       	push	r16
    35d0:	1f 93       	push	r17
    35d2:	82 e0       	ldi	r24, 0x02	; 2
    35d4:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    35d8:	88 23       	and	r24, r24
    35da:	11 f4       	brne	.+4      	; 0x35e0 <LCD_open+0x12>
    35dc:	82 e0       	ldi	r24, 0x02	; 2
    35de:	06 c0       	rjmp	.+12     	; 0x35ec <LCD_open+0x1e>
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    35e6:	88 23       	and	r24, r24
    35e8:	19 f4       	brne	.+6      	; 0x35f0 <LCD_open+0x22>
    35ea:	81 e0       	ldi	r24, 0x01	; 1
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	6d c0       	rjmp	.+218    	; 0x36ca <LCD_open+0xfc>
    35f0:	0e 94 58 25 	call	0x4ab0	; 0x4ab0 <__LCD_init>
    35f4:	85 e0       	ldi	r24, 0x05	; 5
    35f6:	61 e0       	ldi	r22, 0x01	; 1
    35f8:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    35fc:	8e ea       	ldi	r24, 0xAE	; 174
    35fe:	60 e0       	ldi	r22, 0x00	; 0
    3600:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3604:	82 ea       	ldi	r24, 0xA2	; 162
    3606:	60 e0       	ldi	r22, 0x00	; 0
    3608:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    360c:	80 ea       	ldi	r24, 0xA0	; 160
    360e:	60 e0       	ldi	r22, 0x00	; 0
    3610:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3614:	00 e5       	ldi	r16, 0x50	; 80
    3616:	13 ec       	ldi	r17, 0xC3	; 195
    3618:	c8 01       	movw	r24, r16
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	f1 f7       	brne	.-4      	; 0x361a <LCD_open+0x4c>
    361e:	80 ec       	ldi	r24, 0xC0	; 192
    3620:	60 e0       	ldi	r22, 0x00	; 0
    3622:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3626:	8f e2       	ldi	r24, 0x2F	; 47
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    362e:	81 e8       	ldi	r24, 0x81	; 129
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3636:	86 e1       	ldi	r24, 0x16	; 22
    3638:	60 e0       	ldi	r22, 0x00	; 0
    363a:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    363e:	82 e2       	ldi	r24, 0x22	; 34
    3640:	60 e0       	ldi	r22, 0x00	; 0
    3642:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3646:	c8 01       	movw	r24, r16
    3648:	01 97       	sbiw	r24, 0x01	; 1
    364a:	f1 f7       	brne	.-4      	; 0x3648 <LCD_open+0x7a>
    364c:	8f ea       	ldi	r24, 0xAF	; 175
    364e:	60 e0       	ldi	r22, 0x00	; 0
    3650:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3654:	86 ea       	ldi	r24, 0xA6	; 166
    3656:	60 e0       	ldi	r22, 0x00	; 0
    3658:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    365c:	85 ea       	ldi	r24, 0xA5	; 165
    365e:	60 e0       	ldi	r22, 0x00	; 0
    3660:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3664:	80 e0       	ldi	r24, 0x00	; 0
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	28 e8       	ldi	r18, 0x88	; 136
    366a:	33 e1       	ldi	r19, 0x13	; 19
    366c:	f9 01       	movw	r30, r18
    366e:	31 97       	sbiw	r30, 0x01	; 1
    3670:	f1 f7       	brne	.-4      	; 0x366e <LCD_open+0xa0>
    3672:	01 96       	adiw	r24, 0x01	; 1
    3674:	43 e0       	ldi	r20, 0x03	; 3
    3676:	88 3e       	cpi	r24, 0xE8	; 232
    3678:	94 07       	cpc	r25, r20
    367a:	c1 f7       	brne	.-16     	; 0x366c <LCD_open+0x9e>
    367c:	83 eb       	ldi	r24, 0xB3	; 179
    367e:	60 e0       	ldi	r22, 0x00	; 0
    3680:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3684:	80 e4       	ldi	r24, 0x40	; 64
    3686:	60 e0       	ldi	r22, 0x00	; 0
    3688:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    368c:	83 e0       	ldi	r24, 0x03	; 3
    368e:	60 e0       	ldi	r22, 0x00	; 0
    3690:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_set_PGC_addr>
    3694:	83 e0       	ldi	r24, 0x03	; 3
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	0e 94 89 1b 	call	0x3712	; 0x3712 <LCD_set_next_PGC>
    369c:	10 92 05 08 	sts	0x0805, r1
    36a0:	10 92 07 08 	sts	0x0807, r1
    36a4:	10 92 06 08 	sts	0x0806, r1
    36a8:	8d e1       	ldi	r24, 0x1D	; 29
    36aa:	94 e0       	ldi	r25, 0x04	; 4
    36ac:	90 93 36 08 	sts	0x0836, r25
    36b0:	80 93 35 08 	sts	0x0835, r24
    36b4:	88 e1       	ldi	r24, 0x18	; 24
    36b6:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <LCD_set_backlight>
    36ba:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
    36be:	84 ea       	ldi	r24, 0xA4	; 164
    36c0:	60 e0       	ldi	r22, 0x00	; 0
    36c2:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    36c6:	85 e0       	ldi	r24, 0x05	; 5
    36c8:	91 e0       	ldi	r25, 0x01	; 1
    36ca:	1f 91       	pop	r17
    36cc:	0f 91       	pop	r16
    36ce:	08 95       	ret

000036d0 <LCD_set_backlight>:
    36d0:	1f 93       	push	r17
    36d2:	18 2f       	mov	r17, r24
    36d4:	85 e0       	ldi	r24, 0x05	; 5
    36d6:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    36da:	81 30       	cpi	r24, 0x01	; 1
    36dc:	c1 f4       	brne	.+48     	; 0x370e <LCD_set_backlight+0x3e>
    36de:	87 e0       	ldi	r24, 0x07	; 7
    36e0:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <SPI_set_slave_addr>
    36e4:	82 e0       	ldi	r24, 0x02	; 2
    36e6:	6a e0       	ldi	r22, 0x0A	; 10
    36e8:	0e 94 36 1c 	call	0x386c	; 0x386c <SPI_transmit>
    36ec:	82 e0       	ldi	r24, 0x02	; 2
    36ee:	61 eb       	ldi	r22, 0xB1	; 177
    36f0:	0e 94 36 1c 	call	0x386c	; 0x386c <SPI_transmit>
    36f4:	61 2f       	mov	r22, r17
    36f6:	11 32       	cpi	r17, 0x21	; 33
    36f8:	08 f0       	brcs	.+2      	; 0x36fc <LCD_set_backlight+0x2c>
    36fa:	60 e2       	ldi	r22, 0x20	; 32
    36fc:	82 e0       	ldi	r24, 0x02	; 2
    36fe:	0e 94 36 1c 	call	0x386c	; 0x386c <SPI_transmit>
    3702:	89 ee       	ldi	r24, 0xE9	; 233
    3704:	8a 95       	dec	r24
    3706:	f1 f7       	brne	.-4      	; 0x3704 <LCD_set_backlight+0x34>
    3708:	87 e0       	ldi	r24, 0x07	; 7
    370a:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <SPI_set_slave_addr>
    370e:	1f 91       	pop	r17
    3710:	08 95       	ret

00003712 <LCD_set_next_PGC>:
    3712:	83 70       	andi	r24, 0x03	; 3
    3714:	6f 77       	andi	r22, 0x7F	; 127
    3716:	60 93 03 08 	sts	0x0803, r22
    371a:	80 93 04 08 	sts	0x0804, r24
    371e:	08 95       	ret

00003720 <LCD_set_PGC_addr>:
    3720:	0f 93       	push	r16
    3722:	1f 93       	push	r17
    3724:	06 2f       	mov	r16, r22
    3726:	16 2f       	mov	r17, r22
    3728:	1f 77       	andi	r17, 0x7F	; 127
    372a:	83 70       	andi	r24, 0x03	; 3
    372c:	80 6b       	ori	r24, 0xB0	; 176
    372e:	60 e0       	ldi	r22, 0x00	; 0
    3730:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3734:	12 95       	swap	r17
    3736:	1f 70       	andi	r17, 0x0F	; 15
    3738:	81 2f       	mov	r24, r17
    373a:	80 61       	ori	r24, 0x10	; 16
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    3742:	80 2f       	mov	r24, r16
    3744:	8f 70       	andi	r24, 0x0F	; 15
    3746:	60 e0       	ldi	r22, 0x00	; 0
    3748:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    374c:	1f 91       	pop	r17
    374e:	0f 91       	pop	r16
    3750:	08 95       	ret

00003752 <LCD_write>:
    3752:	0f 93       	push	r16
    3754:	1f 93       	push	r17
    3756:	08 2f       	mov	r16, r24
    3758:	16 2f       	mov	r17, r22
    375a:	85 e0       	ldi	r24, 0x05	; 5
    375c:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    3760:	81 30       	cpi	r24, 0x01	; 1
    3762:	79 f4       	brne	.+30     	; 0x3782 <LCD_write+0x30>
    3764:	11 23       	and	r17, r17
    3766:	19 f0       	breq	.+6      	; 0x376e <LCD_write+0x1c>
    3768:	11 30       	cpi	r17, 0x01	; 1
    376a:	21 f4       	brne	.+8      	; 0x3774 <LCD_write+0x22>
    376c:	02 c0       	rjmp	.+4      	; 0x3772 <LCD_write+0x20>
    376e:	2b 98       	cbi	0x05, 3	; 5
    3770:	01 c0       	rjmp	.+2      	; 0x3774 <LCD_write+0x22>
    3772:	2b 9a       	sbi	0x05, 3	; 5
    3774:	86 e0       	ldi	r24, 0x06	; 6
    3776:	8a 95       	dec	r24
    3778:	f1 f7       	brne	.-4      	; 0x3776 <LCD_write+0x24>
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	60 2f       	mov	r22, r16
    377e:	0e 94 36 1c 	call	0x386c	; 0x386c <SPI_transmit>
    3782:	1f 91       	pop	r17
    3784:	0f 91       	pop	r16
    3786:	08 95       	ret

00003788 <LED_clr_pattern>:
    3788:	1f 93       	push	r17
    378a:	18 2f       	mov	r17, r24
    378c:	86 e0       	ldi	r24, 0x06	; 6
    378e:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    3792:	81 30       	cpi	r24, 0x01	; 1
    3794:	19 f4       	brne	.+6      	; 0x379c <LED_clr_pattern+0x14>
    3796:	81 2f       	mov	r24, r17
    3798:	0e 94 07 26 	call	0x4c0e	; 0x4c0e <__LED_clr_pattern>
    379c:	1f 91       	pop	r17
    379e:	08 95       	ret

000037a0 <LED_open>:
    37a0:	0e 94 0c 26 	call	0x4c18	; 0x4c18 <__LED_init>
    37a4:	86 e0       	ldi	r24, 0x06	; 6
    37a6:	61 e0       	ldi	r22, 0x01	; 1
    37a8:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    37ac:	86 e0       	ldi	r24, 0x06	; 6
    37ae:	91 e0       	ldi	r25, 0x01	; 1
    37b0:	08 95       	ret

000037b2 <LED_set_pattern>:
    37b2:	1f 93       	push	r17
    37b4:	18 2f       	mov	r17, r24
    37b6:	86 e0       	ldi	r24, 0x06	; 6
    37b8:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    37bc:	81 30       	cpi	r24, 0x01	; 1
    37be:	19 f4       	brne	.+6      	; 0x37c6 <LED_set_pattern+0x14>
    37c0:	81 2f       	mov	r24, r17
    37c2:	0e 94 0f 26 	call	0x4c1e	; 0x4c1e <__LED_set_pattern>
    37c6:	1f 91       	pop	r17
    37c8:	08 95       	ret

000037ca <SPI_set_slave_addr>:
    37ca:	1f 93       	push	r17
    37cc:	18 2f       	mov	r17, r24
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    37d4:	81 30       	cpi	r24, 0x01	; 1
    37d6:	09 f0       	breq	.+2      	; 0x37da <SPI_set_slave_addr+0x10>
    37d8:	47 c0       	rjmp	.+142    	; 0x3868 <SPI_set_slave_addr+0x9e>
    37da:	91 2f       	mov	r25, r17
    37dc:	97 70       	andi	r25, 0x07	; 7
    37de:	80 91 08 08 	lds	r24, 0x0808
    37e2:	98 17       	cp	r25, r24
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <SPI_set_slave_addr+0x1e>
    37e6:	40 c0       	rjmp	.+128    	; 0x3868 <SPI_set_slave_addr+0x9e>
    37e8:	90 93 08 08 	sts	0x0808, r25
    37ec:	85 b1       	in	r24, 0x05	; 5
    37ee:	88 7f       	andi	r24, 0xF8	; 248
    37f0:	89 2b       	or	r24, r25
    37f2:	85 b9       	out	0x05, r24	; 5
    37f4:	93 30       	cpi	r25, 0x03	; 3
    37f6:	11 f1       	breq	.+68     	; 0x383c <SPI_set_slave_addr+0x72>
    37f8:	94 30       	cpi	r25, 0x04	; 4
    37fa:	28 f4       	brcc	.+10     	; 0x3806 <SPI_set_slave_addr+0x3c>
    37fc:	91 30       	cpi	r25, 0x01	; 1
    37fe:	51 f0       	breq	.+20     	; 0x3814 <SPI_set_slave_addr+0x4a>
    3800:	92 30       	cpi	r25, 0x02	; 2
    3802:	90 f4       	brcc	.+36     	; 0x3828 <SPI_set_slave_addr+0x5e>
    3804:	0c c0       	rjmp	.+24     	; 0x381e <SPI_set_slave_addr+0x54>
    3806:	95 30       	cpi	r25, 0x05	; 5
    3808:	19 f1       	breq	.+70     	; 0x3850 <SPI_set_slave_addr+0x86>
    380a:	95 30       	cpi	r25, 0x05	; 5
    380c:	e0 f0       	brcs	.+56     	; 0x3846 <SPI_set_slave_addr+0x7c>
    380e:	96 30       	cpi	r25, 0x06	; 6
    3810:	21 f5       	brne	.+72     	; 0x385a <SPI_set_slave_addr+0x90>
    3812:	0f c0       	rjmp	.+30     	; 0x3832 <SPI_set_slave_addr+0x68>
    3814:	e0 91 dc 04 	lds	r30, 0x04DC
    3818:	f0 91 dd 04 	lds	r31, 0x04DD
    381c:	22 c0       	rjmp	.+68     	; 0x3862 <SPI_set_slave_addr+0x98>
    381e:	e0 91 da 04 	lds	r30, 0x04DA
    3822:	f0 91 db 04 	lds	r31, 0x04DB
    3826:	1d c0       	rjmp	.+58     	; 0x3862 <SPI_set_slave_addr+0x98>
    3828:	e0 91 de 04 	lds	r30, 0x04DE
    382c:	f0 91 df 04 	lds	r31, 0x04DF
    3830:	18 c0       	rjmp	.+48     	; 0x3862 <SPI_set_slave_addr+0x98>
    3832:	e0 91 e6 04 	lds	r30, 0x04E6
    3836:	f0 91 e7 04 	lds	r31, 0x04E7
    383a:	13 c0       	rjmp	.+38     	; 0x3862 <SPI_set_slave_addr+0x98>
    383c:	e0 91 e0 04 	lds	r30, 0x04E0
    3840:	f0 91 e1 04 	lds	r31, 0x04E1
    3844:	0e c0       	rjmp	.+28     	; 0x3862 <SPI_set_slave_addr+0x98>
    3846:	e0 91 e2 04 	lds	r30, 0x04E2
    384a:	f0 91 e3 04 	lds	r31, 0x04E3
    384e:	09 c0       	rjmp	.+18     	; 0x3862 <SPI_set_slave_addr+0x98>
    3850:	e0 91 e4 04 	lds	r30, 0x04E4
    3854:	f0 91 e5 04 	lds	r31, 0x04E5
    3858:	04 c0       	rjmp	.+8      	; 0x3862 <SPI_set_slave_addr+0x98>
    385a:	e0 91 e8 04 	lds	r30, 0x04E8
    385e:	f0 91 e9 04 	lds	r31, 0x04E9
    3862:	30 97       	sbiw	r30, 0x00	; 0
    3864:	09 f0       	breq	.+2      	; 0x3868 <SPI_set_slave_addr+0x9e>
    3866:	09 95       	icall
    3868:	1f 91       	pop	r17
    386a:	08 95       	ret

0000386c <SPI_transmit>:
    386c:	1f 93       	push	r17
    386e:	16 2f       	mov	r17, r22
    3870:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <SPI_set_slave_addr>
    3874:	82 e0       	ldi	r24, 0x02	; 2
    3876:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    387a:	81 30       	cpi	r24, 0x01	; 1
    387c:	21 f4       	brne	.+8      	; 0x3886 <SPI_transmit+0x1a>
    387e:	1e bd       	out	0x2e, r17	; 46
    3880:	0d b4       	in	r0, 0x2d	; 45
    3882:	07 fe       	sbrs	r0, 7
    3884:	fd cf       	rjmp	.-6      	; 0x3880 <SPI_transmit+0x14>
    3886:	1f 91       	pop	r17
    3888:	08 95       	ret

0000388a <__SPKR_set_up_freq_LUT>:
    388a:	0f 93       	push	r16
    388c:	1f 93       	push	r17
    388e:	cf 93       	push	r28
    3890:	df 93       	push	r29
    3892:	80 e2       	ldi	r24, 0x20	; 32
    3894:	91 e0       	ldi	r25, 0x01	; 1
    3896:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <malloc>
    389a:	9c 01       	movw	r18, r24
    389c:	90 93 f9 04 	sts	0x04F9, r25
    38a0:	80 93 f8 04 	sts	0x04F8, r24
    38a4:	89 2b       	or	r24, r25
    38a6:	11 f4       	brne	.+4      	; 0x38ac <__SPKR_set_up_freq_LUT+0x22>
    38a8:	80 e0       	ldi	r24, 0x00	; 0
    38aa:	39 c0       	rjmp	.+114    	; 0x391e <__SPKR_set_up_freq_LUT+0x94>
    38ac:	89 01       	movw	r16, r18
    38ae:	c0 e0       	ldi	r28, 0x00	; 0
    38b0:	d0 e0       	ldi	r29, 0x00	; 0
    38b2:	be 01       	movw	r22, r28
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <__floatunsisf>
    38bc:	20 e0       	ldi	r18, 0x00	; 0
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	40 ea       	ldi	r20, 0xA0	; 160
    38c2:	51 e4       	ldi	r21, 0x41	; 65
    38c4:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__divsf3>
    38c8:	27 ef       	ldi	r18, 0xF7	; 247
    38ca:	35 e7       	ldi	r19, 0x75	; 117
    38cc:	40 e0       	ldi	r20, 0x00	; 0
    38ce:	5f e3       	ldi	r21, 0x3F	; 63
    38d0:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    38d4:	9b 01       	movw	r18, r22
    38d6:	ac 01       	movw	r20, r24
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	70 e0       	ldi	r23, 0x00	; 0
    38dc:	80 e2       	ldi	r24, 0x20	; 32
    38de:	91 e4       	ldi	r25, 0x41	; 65
    38e0:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <pow>
    38e4:	9b 01       	movw	r18, r22
    38e6:	ac 01       	movw	r20, r24
    38e8:	ca 01       	movw	r24, r20
    38ea:	b9 01       	movw	r22, r18
    38ec:	2d ec       	ldi	r18, 0xCD	; 205
    38ee:	3c ec       	ldi	r19, 0xCC	; 204
    38f0:	42 e8       	ldi	r20, 0x82	; 130
    38f2:	51 e4       	ldi	r21, 0x41	; 65
    38f4:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <__mulsf3>
    38f8:	0e 94 39 2f 	call	0x5e72	; 0x5e72 <lrint>
    38fc:	2a e0       	ldi	r18, 0x0A	; 10
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e0       	ldi	r20, 0x00	; 0
    3902:	50 e0       	ldi	r21, 0x00	; 0
    3904:	0e 94 a3 34 	call	0x6946	; 0x6946 <__mulsi3>
    3908:	f8 01       	movw	r30, r16
    390a:	61 93       	st	Z+, r22
    390c:	71 93       	st	Z+, r23
    390e:	81 93       	st	Z+, r24
    3910:	91 93       	st	Z+, r25
    3912:	8f 01       	movw	r16, r30
    3914:	21 96       	adiw	r28, 0x01	; 1
    3916:	c8 34       	cpi	r28, 0x48	; 72
    3918:	d1 05       	cpc	r29, r1
    391a:	59 f6       	brne	.-106    	; 0x38b2 <__SPKR_set_up_freq_LUT+0x28>
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	df 91       	pop	r29
    3920:	cf 91       	pop	r28
    3922:	1f 91       	pop	r17
    3924:	0f 91       	pop	r16
    3926:	08 95       	ret

00003928 <__SPKR_open_beep_mode>:
    3928:	8a e0       	ldi	r24, 0x0A	; 10
    392a:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    392e:	88 23       	and	r24, r24
    3930:	71 f4       	brne	.+28     	; 0x394e <__SPKR_open_beep_mode+0x26>
    3932:	10 92 f5 04 	sts	0x04F5, r1
    3936:	10 92 f4 04 	sts	0x04F4, r1
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__SPKR_init>
    3940:	81 e0       	ldi	r24, 0x01	; 1
    3942:	80 93 eb 04 	sts	0x04EB, r24
    3946:	8a e0       	ldi	r24, 0x0A	; 10
    3948:	61 e0       	ldi	r22, 0x01	; 1
    394a:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    394e:	8a e0       	ldi	r24, 0x0A	; 10
    3950:	91 e0       	ldi	r25, 0x01	; 1
    3952:	08 95       	ret

00003954 <__SPKR_open_tone_mode>:
    3954:	1f 93       	push	r17
    3956:	8b e0       	ldi	r24, 0x0B	; 11
    3958:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    395c:	88 23       	and	r24, r24
    395e:	11 f0       	breq	.+4      	; 0x3964 <__SPKR_open_tone_mode+0x10>
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	21 c0       	rjmp	.+66     	; 0x39a6 <__SPKR_open_tone_mode+0x52>
    3964:	89 e0       	ldi	r24, 0x09	; 9
    3966:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    396a:	88 23       	and	r24, r24
    396c:	d9 f4       	brne	.+54     	; 0x39a4 <__SPKR_open_tone_mode+0x50>
    396e:	0e 94 45 1c 	call	0x388a	; 0x388a <__SPKR_set_up_freq_LUT>
    3972:	18 2f       	mov	r17, r24
    3974:	81 30       	cpi	r24, 0x01	; 1
    3976:	b1 f4       	brne	.+44     	; 0x39a4 <__SPKR_open_tone_mode+0x50>
    3978:	10 92 ec 04 	sts	0x04EC, r1
    397c:	10 92 ed 04 	sts	0x04ED, r1
    3980:	10 92 ee 04 	sts	0x04EE, r1
    3984:	10 92 ef 04 	sts	0x04EF, r1
    3988:	8d e0       	ldi	r24, 0x0D	; 13
    398a:	6d ec       	ldi	r22, 0xCD	; 205
    398c:	76 e2       	ldi	r23, 0x26	; 38
    398e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <ISR_attach>
    3992:	82 e0       	ldi	r24, 0x02	; 2
    3994:	0e 94 4a 27 	call	0x4e94	; 0x4e94 <__SPKR_init>
    3998:	10 93 ea 04 	sts	0x04EA, r17
    399c:	89 e0       	ldi	r24, 0x09	; 9
    399e:	61 e0       	ldi	r22, 0x01	; 1
    39a0:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    39a4:	91 e0       	ldi	r25, 0x01	; 1
    39a6:	89 e0       	ldi	r24, 0x09	; 9
    39a8:	1f 91       	pop	r17
    39aa:	08 95       	ret

000039ac <SPKR_open>:
    39ac:	81 30       	cpi	r24, 0x01	; 1
    39ae:	29 f0       	breq	.+10     	; 0x39ba <SPKR_open+0xe>
    39b0:	82 30       	cpi	r24, 0x02	; 2
    39b2:	31 f0       	breq	.+12     	; 0x39c0 <SPKR_open+0x14>
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	89 e0       	ldi	r24, 0x09	; 9
    39b8:	08 95       	ret
    39ba:	0e 94 94 1c 	call	0x3928	; 0x3928 <__SPKR_open_beep_mode>
    39be:	08 95       	ret
    39c0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <__SPKR_open_tone_mode>
    39c4:	08 95       	ret

000039c6 <STEPPER_get_nSteps>:
    39c6:	80 91 c9 07 	lds	r24, 0x07C9
    39ca:	90 91 ca 07 	lds	r25, 0x07CA
    39ce:	20 91 cb 07 	lds	r18, 0x07CB
    39d2:	30 91 cc 07 	lds	r19, 0x07CC
    39d6:	bc 01       	movw	r22, r24
    39d8:	c9 01       	movw	r24, r18
    39da:	08 95       	ret

000039dc <STEPPER_stepmode>:
    39dc:	2f 92       	push	r2
    39de:	3f 92       	push	r3
    39e0:	4f 92       	push	r4
    39e2:	5f 92       	push	r5
    39e4:	6f 92       	push	r6
    39e6:	7f 92       	push	r7
    39e8:	8f 92       	push	r8
    39ea:	9f 92       	push	r9
    39ec:	af 92       	push	r10
    39ee:	bf 92       	push	r11
    39f0:	cf 92       	push	r12
    39f2:	df 92       	push	r13
    39f4:	ef 92       	push	r14
    39f6:	ff 92       	push	r15
    39f8:	0f 93       	push	r16
    39fa:	1f 93       	push	r17
    39fc:	df 93       	push	r29
    39fe:	cf 93       	push	r28
    3a00:	cd b7       	in	r28, 0x3d	; 61
    3a02:	de b7       	in	r29, 0x3e	; 62
    3a04:	58 2e       	mov	r5, r24
    3a06:	96 2e       	mov	r9, r22
    3a08:	44 2e       	mov	r4, r20
    3a0a:	39 01       	movw	r6, r18
    3a0c:	3c 2c       	mov	r3, r12
    3a0e:	c9 8c       	ldd	r12, Y+25	; 0x19
    3a10:	da 8c       	ldd	r13, Y+26	; 0x1a
    3a12:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	68 17       	cp	r22, r24
    3a18:	39 f1       	breq	.+78     	; 0x3a68 <STEPPER_stepmode+0x8c>
    3a1a:	68 17       	cp	r22, r24
    3a1c:	28 f0       	brcs	.+10     	; 0x3a28 <STEPPER_stepmode+0x4c>
    3a1e:	92 e0       	ldi	r25, 0x02	; 2
    3a20:	69 17       	cp	r22, r25
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <STEPPER_stepmode+0x4a>
    3a24:	85 c0       	rjmp	.+266    	; 0x3b30 <STEPPER_stepmode+0x154>
    3a26:	49 c0       	rjmp	.+146    	; 0x3aba <STEPPER_stepmode+0xde>
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	61 e0       	ldi	r22, 0x01	; 1
    3a2c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_set_mode>
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	b7 01       	movw	r22, r14
    3a34:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_accel>
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	64 2d       	mov	r22, r4
    3a3c:	a3 01       	movw	r20, r6
    3a3e:	98 01       	movw	r18, r16
    3a40:	03 2d       	mov	r16, r3
    3a42:	ee 24       	eor	r14, r14
    3a44:	e3 94       	inc	r14
    3a46:	ee ee       	ldi	r30, 0xEE	; 238
    3a48:	ce 2e       	mov	r12, r30
    3a4a:	e7 e0       	ldi	r30, 0x07	; 7
    3a4c:	de 2e       	mov	r13, r30
    3a4e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <STEPPER_step>
    3a52:	55 20       	and	r5, r5
    3a54:	09 f0       	breq	.+2      	; 0x3a58 <STEPPER_stepmode+0x7c>
    3a56:	6c c0       	rjmp	.+216    	; 0x3b30 <STEPPER_stepmode+0x154>
    3a58:	00 d0       	rcall	.+0      	; 0x3a5a <STEPPER_stepmode+0x7e>
    3a5a:	0f 92       	push	r0
    3a5c:	ed b7       	in	r30, 0x3d	; 61
    3a5e:	fe b7       	in	r31, 0x3e	; 62
    3a60:	11 82       	std	Z+1, r1	; 0x01
    3a62:	b3 82       	std	Z+3, r11	; 0x03
    3a64:	a2 82       	std	Z+2, r10	; 0x02
    3a66:	23 c0       	rjmp	.+70     	; 0x3aae <STEPPER_stepmode+0xd2>
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	61 e0       	ldi	r22, 0x01	; 1
    3a6c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_set_mode>
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	b6 01       	movw	r22, r12
    3a74:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_accel>
    3a78:	81 e0       	ldi	r24, 0x01	; 1
    3a7a:	68 2d       	mov	r22, r8
    3a7c:	4d 89       	ldd	r20, Y+21	; 0x15
    3a7e:	5e 89       	ldd	r21, Y+22	; 0x16
    3a80:	2f 89       	ldd	r18, Y+23	; 0x17
    3a82:	38 8d       	ldd	r19, Y+24	; 0x18
    3a84:	02 2d       	mov	r16, r2
    3a86:	ee 24       	eor	r14, r14
    3a88:	e3 94       	inc	r14
    3a8a:	7e ee       	ldi	r23, 0xEE	; 238
    3a8c:	c7 2e       	mov	r12, r23
    3a8e:	77 e0       	ldi	r23, 0x07	; 7
    3a90:	d7 2e       	mov	r13, r23
    3a92:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <STEPPER_step>
    3a96:	55 20       	and	r5, r5
    3a98:	09 f0       	breq	.+2      	; 0x3a9c <STEPPER_stepmode+0xc0>
    3a9a:	4a c0       	rjmp	.+148    	; 0x3b30 <STEPPER_stepmode+0x154>
    3a9c:	00 d0       	rcall	.+0      	; 0x3a9e <STEPPER_stepmode+0xc2>
    3a9e:	0f 92       	push	r0
    3aa0:	ed b7       	in	r30, 0x3d	; 61
    3aa2:	fe b7       	in	r31, 0x3e	; 62
    3aa4:	91 82       	std	Z+1, r9	; 0x01
    3aa6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3aa8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3aaa:	93 83       	std	Z+3, r25	; 0x03
    3aac:	82 83       	std	Z+2, r24	; 0x02
    3aae:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <STEPPER_wait_and_then>
    3ab2:	0f 90       	pop	r0
    3ab4:	0f 90       	pop	r0
    3ab6:	0f 90       	pop	r0
    3ab8:	3b c0       	rjmp	.+118    	; 0x3b30 <STEPPER_stepmode+0x154>
    3aba:	82 e0       	ldi	r24, 0x02	; 2
    3abc:	61 e0       	ldi	r22, 0x01	; 1
    3abe:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_set_mode>
    3ac2:	80 e0       	ldi	r24, 0x00	; 0
    3ac4:	b7 01       	movw	r22, r14
    3ac6:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_accel>
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	b6 01       	movw	r22, r12
    3ace:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_accel>
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	64 2d       	mov	r22, r4
    3ad6:	a3 01       	movw	r20, r6
    3ad8:	98 01       	movw	r18, r16
    3ada:	03 2d       	mov	r16, r3
    3adc:	ee 24       	eor	r14, r14
    3ade:	e3 94       	inc	r14
    3ae0:	9e ee       	ldi	r25, 0xEE	; 238
    3ae2:	c9 2e       	mov	r12, r25
    3ae4:	97 e0       	ldi	r25, 0x07	; 7
    3ae6:	d9 2e       	mov	r13, r25
    3ae8:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <STEPPER_step>
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	68 2d       	mov	r22, r8
    3af0:	4d 89       	ldd	r20, Y+21	; 0x15
    3af2:	5e 89       	ldd	r21, Y+22	; 0x16
    3af4:	2f 89       	ldd	r18, Y+23	; 0x17
    3af6:	38 8d       	ldd	r19, Y+24	; 0x18
    3af8:	02 2d       	mov	r16, r2
    3afa:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <STEPPER_step>
    3afe:	55 20       	and	r5, r5
    3b00:	b9 f4       	brne	.+46     	; 0x3b30 <STEPPER_stepmode+0x154>
    3b02:	00 d0       	rcall	.+0      	; 0x3b04 <STEPPER_stepmode+0x128>
    3b04:	00 d0       	rcall	.+0      	; 0x3b06 <STEPPER_stepmode+0x12a>
    3b06:	0f 92       	push	r0
    3b08:	ad b7       	in	r26, 0x3d	; 61
    3b0a:	be b7       	in	r27, 0x3e	; 62
    3b0c:	11 96       	adiw	r26, 0x01	; 1
    3b0e:	ed b7       	in	r30, 0x3d	; 61
    3b10:	fe b7       	in	r31, 0x3e	; 62
    3b12:	91 82       	std	Z+1, r9	; 0x01
    3b14:	fd 01       	movw	r30, r26
    3b16:	b2 82       	std	Z+2, r11	; 0x02
    3b18:	a1 82       	std	Z+1, r10	; 0x01
    3b1a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b1c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b1e:	94 83       	std	Z+4, r25	; 0x04
    3b20:	83 83       	std	Z+3, r24	; 0x03
    3b22:	0e 94 fa 1f 	call	0x3ff4	; 0x3ff4 <STEPPER_wait_and_then>
    3b26:	0f 90       	pop	r0
    3b28:	0f 90       	pop	r0
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	0f 90       	pop	r0
    3b30:	cf 91       	pop	r28
    3b32:	df 91       	pop	r29
    3b34:	1f 91       	pop	r17
    3b36:	0f 91       	pop	r16
    3b38:	ff 90       	pop	r15
    3b3a:	ef 90       	pop	r14
    3b3c:	df 90       	pop	r13
    3b3e:	cf 90       	pop	r12
    3b40:	bf 90       	pop	r11
    3b42:	af 90       	pop	r10
    3b44:	9f 90       	pop	r9
    3b46:	8f 90       	pop	r8
    3b48:	7f 90       	pop	r7
    3b4a:	6f 90       	pop	r6
    3b4c:	5f 90       	pop	r5
    3b4e:	4f 90       	pop	r4
    3b50:	3f 90       	pop	r3
    3b52:	2f 90       	pop	r2
    3b54:	08 95       	ret

00003b56 <STEPPER_move>:
    3b56:	6f 92       	push	r6
    3b58:	7f 92       	push	r7
    3b5a:	8f 92       	push	r8
    3b5c:	9f 92       	push	r9
    3b5e:	af 92       	push	r10
    3b60:	bf 92       	push	r11
    3b62:	cf 92       	push	r12
    3b64:	df 92       	push	r13
    3b66:	ef 92       	push	r14
    3b68:	ff 92       	push	r15
    3b6a:	0f 93       	push	r16
    3b6c:	1f 93       	push	r17
    3b6e:	df 93       	push	r29
    3b70:	cf 93       	push	r28
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	94 2e       	mov	r9, r20
    3b78:	7c 2d       	mov	r23, r12
    3b7a:	d5 01       	movw	r26, r10
    3b7c:	49 89       	ldd	r20, Y+17	; 0x11
    3b7e:	5a 89       	ldd	r21, Y+18	; 0x12
    3b80:	ab 88       	ldd	r10, Y+19	; 0x13
    3b82:	bc 88       	ldd	r11, Y+20	; 0x14
    3b84:	cd 88       	ldd	r12, Y+21	; 0x15
    3b86:	de 88       	ldd	r13, Y+22	; 0x16
    3b88:	9f 89       	ldd	r25, Y+23	; 0x17
    3b8a:	81 30       	cpi	r24, 0x01	; 1
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <STEPPER_move+0x3a>
    3b8e:	57 c0       	rjmp	.+174    	; 0x3c3e <STEPPER_move+0xe8>
    3b90:	81 30       	cpi	r24, 0x01	; 1
    3b92:	b8 f1       	brcs	.+110    	; 0x3c02 <STEPPER_move+0xac>
    3b94:	82 30       	cpi	r24, 0x02	; 2
    3b96:	09 f0       	breq	.+2      	; 0x3b9a <STEPPER_move+0x44>
    3b98:	76 c0       	rjmp	.+236    	; 0x3c86 <STEPPER_move+0x130>
    3b9a:	61 30       	cpi	r22, 0x01	; 1
    3b9c:	91 f0       	breq	.+36     	; 0x3bc2 <STEPPER_move+0x6c>
    3b9e:	61 30       	cpi	r22, 0x01	; 1
    3ba0:	20 f0       	brcs	.+8      	; 0x3baa <STEPPER_move+0x54>
    3ba2:	62 30       	cpi	r22, 0x02	; 2
    3ba4:	09 f0       	breq	.+2      	; 0x3ba8 <STEPPER_move+0x52>
    3ba6:	6f c0       	rjmp	.+222    	; 0x3c86 <STEPPER_move+0x130>
    3ba8:	15 c0       	rjmp	.+42     	; 0x3bd4 <STEPPER_move+0x7e>
    3baa:	80 e0       	ldi	r24, 0x00	; 0
    3bac:	60 e0       	ldi	r22, 0x00	; 0
    3bae:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_set_mode>
    3bb2:	80 e0       	ldi	r24, 0x00	; 0
    3bb4:	b7 01       	movw	r22, r14
    3bb6:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_accel>
    3bba:	80 e0       	ldi	r24, 0x00	; 0
    3bbc:	69 2d       	mov	r22, r9
    3bbe:	a8 01       	movw	r20, r16
    3bc0:	1d c0       	rjmp	.+58     	; 0x3bfc <STEPPER_move+0xa6>
    3bc2:	81 e0       	ldi	r24, 0x01	; 1
    3bc4:	60 e0       	ldi	r22, 0x00	; 0
    3bc6:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_set_mode>
    3bca:	81 e0       	ldi	r24, 0x01	; 1
    3bcc:	b6 01       	movw	r22, r12
    3bce:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_accel>
    3bd2:	11 c0       	rjmp	.+34     	; 0x3bf6 <STEPPER_move+0xa0>
    3bd4:	82 e0       	ldi	r24, 0x02	; 2
    3bd6:	60 e0       	ldi	r22, 0x00	; 0
    3bd8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_set_mode>
    3bdc:	80 e0       	ldi	r24, 0x00	; 0
    3bde:	b7 01       	movw	r22, r14
    3be0:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_accel>
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	b6 01       	movw	r22, r12
    3be8:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <STEPPER_set_accel>
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	69 2d       	mov	r22, r9
    3bf0:	a8 01       	movw	r20, r16
    3bf2:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <STEPPER_run>
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	68 2d       	mov	r22, r8
    3bfa:	a5 01       	movw	r20, r10
    3bfc:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <STEPPER_run>
    3c00:	42 c0       	rjmp	.+132    	; 0x3c86 <STEPPER_move+0x130>
    3c02:	ed b7       	in	r30, 0x3d	; 61
    3c04:	fe b7       	in	r31, 0x3e	; 62
    3c06:	39 97       	sbiw	r30, 0x09	; 9
    3c08:	0f b6       	in	r0, 0x3f	; 63
    3c0a:	f8 94       	cli
    3c0c:	fe bf       	out	0x3e, r31	; 62
    3c0e:	0f be       	out	0x3f, r0	; 63
    3c10:	ed bf       	out	0x3d, r30	; 61
    3c12:	6d b6       	in	r6, 0x3d	; 61
    3c14:	7e b6       	in	r7, 0x3e	; 62
    3c16:	08 94       	sec
    3c18:	61 1c       	adc	r6, r1
    3c1a:	71 1c       	adc	r7, r1
    3c1c:	52 83       	std	Z+2, r21	; 0x02
    3c1e:	41 83       	std	Z+1, r20	; 0x01
    3c20:	f3 01       	movw	r30, r6
    3c22:	b3 82       	std	Z+3, r11	; 0x03
    3c24:	a2 82       	std	Z+2, r10	; 0x02
    3c26:	d5 82       	std	Z+5, r13	; 0x05
    3c28:	c4 82       	std	Z+4, r12	; 0x04
    3c2a:	96 83       	std	Z+6, r25	; 0x06
    3c2c:	88 8d       	ldd	r24, Y+24	; 0x18
    3c2e:	99 8d       	ldd	r25, Y+25	; 0x19
    3c30:	90 87       	std	Z+8, r25	; 0x08
    3c32:	87 83       	std	Z+7, r24	; 0x07
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	49 2d       	mov	r20, r9
    3c38:	c7 2e       	mov	r12, r23
    3c3a:	5d 01       	movw	r10, r26
    3c3c:	1a c0       	rjmp	.+52     	; 0x3c72 <STEPPER_move+0x11c>
    3c3e:	ed b7       	in	r30, 0x3d	; 61
    3c40:	fe b7       	in	r31, 0x3e	; 62
    3c42:	39 97       	sbiw	r30, 0x09	; 9
    3c44:	0f b6       	in	r0, 0x3f	; 63
    3c46:	f8 94       	cli
    3c48:	fe bf       	out	0x3e, r31	; 62
    3c4a:	0f be       	out	0x3f, r0	; 63
    3c4c:	ed bf       	out	0x3d, r30	; 61
    3c4e:	ad b7       	in	r26, 0x3d	; 61
    3c50:	be b7       	in	r27, 0x3e	; 62
    3c52:	11 96       	adiw	r26, 0x01	; 1
    3c54:	52 83       	std	Z+2, r21	; 0x02
    3c56:	41 83       	std	Z+1, r20	; 0x01
    3c58:	fd 01       	movw	r30, r26
    3c5a:	b3 82       	std	Z+3, r11	; 0x03
    3c5c:	a2 82       	std	Z+2, r10	; 0x02
    3c5e:	d5 82       	std	Z+5, r13	; 0x05
    3c60:	c4 82       	std	Z+4, r12	; 0x04
    3c62:	96 83       	std	Z+6, r25	; 0x06
    3c64:	10 86       	std	Z+8, r1	; 0x08
    3c66:	17 82       	std	Z+7, r1	; 0x07
    3c68:	81 e0       	ldi	r24, 0x01	; 1
    3c6a:	49 2d       	mov	r20, r9
    3c6c:	c7 2e       	mov	r12, r23
    3c6e:	aa 24       	eor	r10, r10
    3c70:	bb 24       	eor	r11, r11
    3c72:	0e 94 ee 1c 	call	0x39dc	; 0x39dc <STEPPER_stepmode>
    3c76:	8d b7       	in	r24, 0x3d	; 61
    3c78:	9e b7       	in	r25, 0x3e	; 62
    3c7a:	09 96       	adiw	r24, 0x09	; 9
    3c7c:	0f b6       	in	r0, 0x3f	; 63
    3c7e:	f8 94       	cli
    3c80:	9e bf       	out	0x3e, r25	; 62
    3c82:	0f be       	out	0x3f, r0	; 63
    3c84:	8d bf       	out	0x3d, r24	; 61
    3c86:	cf 91       	pop	r28
    3c88:	df 91       	pop	r29
    3c8a:	1f 91       	pop	r17
    3c8c:	0f 91       	pop	r16
    3c8e:	ff 90       	pop	r15
    3c90:	ef 90       	pop	r14
    3c92:	df 90       	pop	r13
    3c94:	cf 90       	pop	r12
    3c96:	bf 90       	pop	r11
    3c98:	af 90       	pop	r10
    3c9a:	9f 90       	pop	r9
    3c9c:	8f 90       	pop	r8
    3c9e:	7f 90       	pop	r7
    3ca0:	6f 90       	pop	r6
    3ca2:	08 95       	ret

00003ca4 <STEPPER_open>:
    3ca4:	0e 94 dc 27 	call	0x4fb8	; 0x4fb8 <__STEPPER_init>
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	80 93 ed 07 	sts	0x07ED, r24
    3cae:	e7 eb       	ldi	r30, 0xB7	; 183
    3cb0:	f7 e0       	ldi	r31, 0x07	; 7
    3cb2:	11 92       	st	Z+, r1
    3cb4:	11 92       	st	Z+, r1
    3cb6:	11 82       	std	Z+1, r1	; 0x01
    3cb8:	10 82       	st	Z, r1
    3cba:	32 96       	adiw	r30, 0x02	; 2
    3cbc:	11 82       	std	Z+1, r1	; 0x01
    3cbe:	10 82       	st	Z, r1
    3cc0:	32 96       	adiw	r30, 0x02	; 2
    3cc2:	11 82       	std	Z+1, r1	; 0x01
    3cc4:	10 82       	st	Z, r1
    3cc6:	32 96       	adiw	r30, 0x02	; 2
    3cc8:	11 82       	std	Z+1, r1	; 0x01
    3cca:	10 82       	st	Z, r1
    3ccc:	32 96       	adiw	r30, 0x02	; 2
    3cce:	11 82       	std	Z+1, r1	; 0x01
    3cd0:	10 82       	st	Z, r1
    3cd2:	32 96       	adiw	r30, 0x02	; 2
    3cd4:	11 82       	std	Z+1, r1	; 0x01
    3cd6:	10 82       	st	Z, r1
    3cd8:	32 96       	adiw	r30, 0x02	; 2
    3cda:	11 82       	std	Z+1, r1	; 0x01
    3cdc:	10 82       	st	Z, r1
    3cde:	32 96       	adiw	r30, 0x02	; 2
    3ce0:	11 82       	std	Z+1, r1	; 0x01
    3ce2:	10 82       	st	Z, r1
    3ce4:	32 96       	adiw	r30, 0x02	; 2
    3ce6:	11 82       	std	Z+1, r1	; 0x01
    3ce8:	10 82       	st	Z, r1
    3cea:	32 96       	adiw	r30, 0x02	; 2
    3cec:	11 82       	std	Z+1, r1	; 0x01
    3cee:	10 82       	st	Z, r1
    3cf0:	32 96       	adiw	r30, 0x02	; 2
    3cf2:	11 82       	std	Z+1, r1	; 0x01
    3cf4:	10 82       	st	Z, r1
    3cf6:	32 96       	adiw	r30, 0x02	; 2
    3cf8:	11 82       	std	Z+1, r1	; 0x01
    3cfa:	10 82       	st	Z, r1
    3cfc:	36 96       	adiw	r30, 0x06	; 6
    3cfe:	11 92       	st	Z+, r1
    3d00:	11 92       	st	Z+, r1
    3d02:	11 92       	st	Z+, r1
    3d04:	10 82       	st	Z, r1
    3d06:	32 96       	adiw	r30, 0x02	; 2
    3d08:	11 92       	st	Z+, r1
    3d0a:	11 92       	st	Z+, r1
    3d0c:	11 92       	st	Z+, r1
    3d0e:	11 92       	st	Z+, r1
    3d10:	11 92       	st	Z+, r1
    3d12:	11 92       	st	Z+, r1
    3d14:	11 92       	st	Z+, r1
    3d16:	11 82       	std	Z+1, r1	; 0x01
    3d18:	10 82       	st	Z, r1
    3d1a:	32 96       	adiw	r30, 0x02	; 2
    3d1c:	11 82       	std	Z+1, r1	; 0x01
    3d1e:	10 82       	st	Z, r1
    3d20:	32 96       	adiw	r30, 0x02	; 2
    3d22:	11 82       	std	Z+1, r1	; 0x01
    3d24:	10 82       	st	Z, r1
    3d26:	32 96       	adiw	r30, 0x02	; 2
    3d28:	11 82       	std	Z+1, r1	; 0x01
    3d2a:	10 82       	st	Z, r1
    3d2c:	76 97       	sbiw	r30, 0x16	; 22
    3d2e:	11 82       	std	Z+1, r1	; 0x01
    3d30:	10 82       	st	Z, r1
    3d32:	32 96       	adiw	r30, 0x02	; 2
    3d34:	11 82       	std	Z+1, r1	; 0x01
    3d36:	10 82       	st	Z, r1
    3d38:	10 92 ec 07 	sts	0x07EC, r1
    3d3c:	10 92 eb 07 	sts	0x07EB, r1
    3d40:	10 92 ed 07 	sts	0x07ED, r1
    3d44:	87 e0       	ldi	r24, 0x07	; 7
    3d46:	61 e0       	ldi	r22, 0x01	; 1
    3d48:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    3d4c:	87 e0       	ldi	r24, 0x07	; 7
    3d4e:	91 e0       	ldi	r25, 0x01	; 1
    3d50:	08 95       	ret

00003d52 <STEPPER_run>:
    3d52:	ef 92       	push	r14
    3d54:	ff 92       	push	r15
    3d56:	0f 93       	push	r16
    3d58:	1f 93       	push	r17
    3d5a:	18 2f       	mov	r17, r24
    3d5c:	06 2f       	mov	r16, r22
    3d5e:	7a 01       	movw	r14, r20
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_set_mode>
    3d66:	81 2f       	mov	r24, r17
    3d68:	60 2f       	mov	r22, r16
    3d6a:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <STEPPER_set_dir>
    3d6e:	81 2f       	mov	r24, r17
    3d70:	b7 01       	movw	r22, r14
    3d72:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <STEPPER_set_speed>
    3d76:	1f 91       	pop	r17
    3d78:	0f 91       	pop	r16
    3d7a:	ff 90       	pop	r15
    3d7c:	ef 90       	pop	r14
    3d7e:	08 95       	ret

00003d80 <STEPPER_set_accel>:
    3d80:	48 2f       	mov	r20, r24
    3d82:	81 e0       	ldi	r24, 0x01	; 1
    3d84:	80 93 ed 07 	sts	0x07ED, r24
    3d88:	cb 01       	movw	r24, r22
    3d8a:	23 e0       	ldi	r18, 0x03	; 3
    3d8c:	69 3e       	cpi	r22, 0xE9	; 233
    3d8e:	72 07       	cpc	r23, r18
    3d90:	10 f0       	brcs	.+4      	; 0x3d96 <STEPPER_set_accel+0x16>
    3d92:	88 ee       	ldi	r24, 0xE8	; 232
    3d94:	93 e0       	ldi	r25, 0x03	; 3
    3d96:	41 30       	cpi	r20, 0x01	; 1
    3d98:	71 f0       	breq	.+28     	; 0x3db6 <STEPPER_set_accel+0x36>
    3d9a:	41 30       	cpi	r20, 0x01	; 1
    3d9c:	18 f0       	brcs	.+6      	; 0x3da4 <STEPPER_set_accel+0x24>
    3d9e:	42 30       	cpi	r20, 0x02	; 2
    3da0:	71 f4       	brne	.+28     	; 0x3dbe <STEPPER_set_accel+0x3e>
    3da2:	05 c0       	rjmp	.+10     	; 0x3dae <STEPPER_set_accel+0x2e>
    3da4:	90 93 c2 07 	sts	0x07C2, r25
    3da8:	80 93 c1 07 	sts	0x07C1, r24
    3dac:	08 c0       	rjmp	.+16     	; 0x3dbe <STEPPER_set_accel+0x3e>
    3dae:	90 93 c2 07 	sts	0x07C2, r25
    3db2:	80 93 c1 07 	sts	0x07C1, r24
    3db6:	90 93 c4 07 	sts	0x07C4, r25
    3dba:	80 93 c3 07 	sts	0x07C3, r24
    3dbe:	10 92 ed 07 	sts	0x07ED, r1
    3dc2:	08 95       	ret

00003dc4 <STEPPER_set_dir>:
    3dc4:	98 2f       	mov	r25, r24
    3dc6:	81 e0       	ldi	r24, 0x01	; 1
    3dc8:	80 93 ed 07 	sts	0x07ED, r24
    3dcc:	91 30       	cpi	r25, 0x01	; 1
    3dce:	51 f0       	breq	.+20     	; 0x3de4 <STEPPER_set_dir+0x20>
    3dd0:	91 30       	cpi	r25, 0x01	; 1
    3dd2:	18 f0       	brcs	.+6      	; 0x3dda <STEPPER_set_dir+0x16>
    3dd4:	92 30       	cpi	r25, 0x02	; 2
    3dd6:	41 f4       	brne	.+16     	; 0x3de8 <STEPPER_set_dir+0x24>
    3dd8:	03 c0       	rjmp	.+6      	; 0x3de0 <STEPPER_set_dir+0x1c>
    3dda:	60 93 da 07 	sts	0x07DA, r22
    3dde:	04 c0       	rjmp	.+8      	; 0x3de8 <STEPPER_set_dir+0x24>
    3de0:	60 93 da 07 	sts	0x07DA, r22
    3de4:	60 93 db 07 	sts	0x07DB, r22
    3de8:	10 92 ed 07 	sts	0x07ED, r1
    3dec:	08 95       	ret

00003dee <STEPPER_set_mode>:
    3dee:	98 2f       	mov	r25, r24
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	80 93 ed 07 	sts	0x07ED, r24
    3df6:	91 30       	cpi	r25, 0x01	; 1
    3df8:	51 f0       	breq	.+20     	; 0x3e0e <STEPPER_set_mode+0x20>
    3dfa:	91 30       	cpi	r25, 0x01	; 1
    3dfc:	18 f0       	brcs	.+6      	; 0x3e04 <STEPPER_set_mode+0x16>
    3dfe:	92 30       	cpi	r25, 0x02	; 2
    3e00:	41 f4       	brne	.+16     	; 0x3e12 <STEPPER_set_mode+0x24>
    3e02:	03 c0       	rjmp	.+6      	; 0x3e0a <STEPPER_set_mode+0x1c>
    3e04:	60 93 b7 07 	sts	0x07B7, r22
    3e08:	04 c0       	rjmp	.+8      	; 0x3e12 <STEPPER_set_mode+0x24>
    3e0a:	60 93 b7 07 	sts	0x07B7, r22
    3e0e:	60 93 b8 07 	sts	0x07B8, r22
    3e12:	10 92 ed 07 	sts	0x07ED, r1
    3e16:	08 95       	ret

00003e18 <STEPPER_set_speed>:
    3e18:	48 2f       	mov	r20, r24
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	80 93 ed 07 	sts	0x07ED, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	21 e0       	ldi	r18, 0x01	; 1
    3e24:	61 39       	cpi	r22, 0x91	; 145
    3e26:	72 07       	cpc	r23, r18
    3e28:	10 f0       	brcs	.+4      	; 0x3e2e <STEPPER_set_speed+0x16>
    3e2a:	80 e9       	ldi	r24, 0x90	; 144
    3e2c:	91 e0       	ldi	r25, 0x01	; 1
    3e2e:	41 30       	cpi	r20, 0x01	; 1
    3e30:	71 f0       	breq	.+28     	; 0x3e4e <STEPPER_set_speed+0x36>
    3e32:	41 30       	cpi	r20, 0x01	; 1
    3e34:	18 f0       	brcs	.+6      	; 0x3e3c <STEPPER_set_speed+0x24>
    3e36:	42 30       	cpi	r20, 0x02	; 2
    3e38:	71 f4       	brne	.+28     	; 0x3e56 <STEPPER_set_speed+0x3e>
    3e3a:	05 c0       	rjmp	.+10     	; 0x3e46 <STEPPER_set_speed+0x2e>
    3e3c:	90 93 ba 07 	sts	0x07BA, r25
    3e40:	80 93 b9 07 	sts	0x07B9, r24
    3e44:	08 c0       	rjmp	.+16     	; 0x3e56 <STEPPER_set_speed+0x3e>
    3e46:	90 93 ba 07 	sts	0x07BA, r25
    3e4a:	80 93 b9 07 	sts	0x07B9, r24
    3e4e:	90 93 bc 07 	sts	0x07BC, r25
    3e52:	80 93 bb 07 	sts	0x07BB, r24
    3e56:	10 92 ed 07 	sts	0x07ED, r1
    3e5a:	08 95       	ret

00003e5c <STEPPER_set_steps>:
    3e5c:	98 2f       	mov	r25, r24
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	80 93 ed 07 	sts	0x07ED, r24
    3e64:	91 30       	cpi	r25, 0x01	; 1
    3e66:	71 f0       	breq	.+28     	; 0x3e84 <STEPPER_set_steps+0x28>
    3e68:	91 30       	cpi	r25, 0x01	; 1
    3e6a:	18 f0       	brcs	.+6      	; 0x3e72 <STEPPER_set_steps+0x16>
    3e6c:	92 30       	cpi	r25, 0x02	; 2
    3e6e:	71 f4       	brne	.+28     	; 0x3e8c <STEPPER_set_steps+0x30>
    3e70:	05 c0       	rjmp	.+10     	; 0x3e7c <STEPPER_set_steps+0x20>
    3e72:	70 93 ca 07 	sts	0x07CA, r23
    3e76:	60 93 c9 07 	sts	0x07C9, r22
    3e7a:	08 c0       	rjmp	.+16     	; 0x3e8c <STEPPER_set_steps+0x30>
    3e7c:	70 93 ca 07 	sts	0x07CA, r23
    3e80:	60 93 c9 07 	sts	0x07C9, r22
    3e84:	70 93 cc 07 	sts	0x07CC, r23
    3e88:	60 93 cb 07 	sts	0x07CB, r22
    3e8c:	10 92 ed 07 	sts	0x07ED, r1
    3e90:	08 95       	ret

00003e92 <STEPPER_step>:
    3e92:	8f 92       	push	r8
    3e94:	9f 92       	push	r9
    3e96:	af 92       	push	r10
    3e98:	bf 92       	push	r11
    3e9a:	cf 92       	push	r12
    3e9c:	df 92       	push	r13
    3e9e:	ef 92       	push	r14
    3ea0:	ff 92       	push	r15
    3ea2:	0f 93       	push	r16
    3ea4:	1f 93       	push	r17
    3ea6:	cf 93       	push	r28
    3ea8:	df 93       	push	r29
    3eaa:	18 2f       	mov	r17, r24
    3eac:	f6 2e       	mov	r15, r22
    3eae:	5a 01       	movw	r10, r20
    3eb0:	49 01       	movw	r8, r18
    3eb2:	e6 01       	movw	r28, r12
    3eb4:	61 e0       	ldi	r22, 0x01	; 1
    3eb6:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <STEPPER_set_mode>
    3eba:	81 2f       	mov	r24, r17
    3ebc:	b5 01       	movw	r22, r10
    3ebe:	a4 01       	movw	r20, r8
    3ec0:	0e 94 fb 27 	call	0x4ff6	; 0x4ff6 <STEPPER_setup_decels>
    3ec4:	81 2f       	mov	r24, r17
    3ec6:	6f 2d       	mov	r22, r15
    3ec8:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <STEPPER_set_dir>
    3ecc:	81 2f       	mov	r24, r17
    3ece:	60 2f       	mov	r22, r16
    3ed0:	0e 94 e6 27 	call	0x4fcc	; 0x4fcc <STEPPER_set_stop_mode>
    3ed4:	81 2f       	mov	r24, r17
    3ed6:	b5 01       	movw	r22, r10
    3ed8:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <STEPPER_set_steps>
    3edc:	c1 14       	cp	r12, r1
    3ede:	d1 04       	cpc	r13, r1
    3ee0:	99 f0       	breq	.+38     	; 0x3f08 <STEPPER_step+0x76>
    3ee2:	11 30       	cpi	r17, 0x01	; 1
    3ee4:	49 f0       	breq	.+18     	; 0x3ef8 <STEPPER_step+0x66>
    3ee6:	11 30       	cpi	r17, 0x01	; 1
    3ee8:	18 f0       	brcs	.+6      	; 0x3ef0 <STEPPER_step+0x5e>
    3eea:	12 30       	cpi	r17, 0x02	; 2
    3eec:	69 f4       	brne	.+26     	; 0x3f08 <STEPPER_step+0x76>
    3eee:	06 c0       	rjmp	.+12     	; 0x3efc <STEPPER_step+0x6a>
    3ef0:	18 82       	st	Y, r1
    3ef2:	10 92 e9 07 	sts	0x07E9, r1
    3ef6:	08 c0       	rjmp	.+16     	; 0x3f08 <STEPPER_step+0x76>
    3ef8:	19 82       	std	Y+1, r1	; 0x01
    3efa:	04 c0       	rjmp	.+8      	; 0x3f04 <STEPPER_step+0x72>
    3efc:	18 82       	st	Y, r1
    3efe:	19 82       	std	Y+1, r1	; 0x01
    3f00:	10 92 e9 07 	sts	0x07E9, r1
    3f04:	10 92 ea 07 	sts	0x07EA, r1
    3f08:	d0 93 ec 07 	sts	0x07EC, r29
    3f0c:	c0 93 eb 07 	sts	0x07EB, r28
    3f10:	ee 20       	and	r14, r14
    3f12:	b9 f5       	brne	.+110    	; 0x3f82 <STEPPER_step+0xf0>
    3f14:	8a e8       	ldi	r24, 0x8A	; 138
    3f16:	94 e0       	ldi	r25, 0x04	; 4
    3f18:	90 93 ec 07 	sts	0x07EC, r25
    3f1c:	80 93 eb 07 	sts	0x07EB, r24
    3f20:	81 2f       	mov	r24, r17
    3f22:	b4 01       	movw	r22, r8
    3f24:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <STEPPER_set_speed>
    3f28:	81 2f       	mov	r24, r17
    3f2a:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <STEPPER_go>
    3f2e:	11 30       	cpi	r17, 0x01	; 1
    3f30:	71 f0       	breq	.+28     	; 0x3f4e <STEPPER_step+0xbc>
    3f32:	11 30       	cpi	r17, 0x01	; 1
    3f34:	18 f0       	brcs	.+6      	; 0x3f3c <STEPPER_step+0xaa>
    3f36:	12 30       	cpi	r17, 0x02	; 2
    3f38:	59 f5       	brne	.+86     	; 0x3f90 <STEPPER_step+0xfe>
    3f3a:	12 c0       	rjmp	.+36     	; 0x3f60 <STEPPER_step+0xce>
    3f3c:	10 92 8a 04 	sts	0x048A, r1
    3f40:	10 92 e9 07 	sts	0x07E9, r1
    3f44:	80 91 8a 04 	lds	r24, 0x048A
    3f48:	88 23       	and	r24, r24
    3f4a:	e1 f3       	breq	.-8      	; 0x3f44 <STEPPER_step+0xb2>
    3f4c:	21 c0       	rjmp	.+66     	; 0x3f90 <STEPPER_step+0xfe>
    3f4e:	10 92 8b 04 	sts	0x048B, r1
    3f52:	10 92 ea 07 	sts	0x07EA, r1
    3f56:	80 91 8b 04 	lds	r24, 0x048B
    3f5a:	88 23       	and	r24, r24
    3f5c:	e1 f3       	breq	.-8      	; 0x3f56 <STEPPER_step+0xc4>
    3f5e:	18 c0       	rjmp	.+48     	; 0x3f90 <STEPPER_step+0xfe>
    3f60:	10 92 8a 04 	sts	0x048A, r1
    3f64:	10 92 8b 04 	sts	0x048B, r1
    3f68:	10 92 e9 07 	sts	0x07E9, r1
    3f6c:	10 92 ea 07 	sts	0x07EA, r1
    3f70:	80 91 8a 04 	lds	r24, 0x048A
    3f74:	88 23       	and	r24, r24
    3f76:	e1 f3       	breq	.-8      	; 0x3f70 <STEPPER_step+0xde>
    3f78:	80 91 8b 04 	lds	r24, 0x048B
    3f7c:	88 23       	and	r24, r24
    3f7e:	c1 f3       	breq	.-16     	; 0x3f70 <STEPPER_step+0xde>
    3f80:	07 c0       	rjmp	.+14     	; 0x3f90 <STEPPER_step+0xfe>
    3f82:	81 2f       	mov	r24, r17
    3f84:	b4 01       	movw	r22, r8
    3f86:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <STEPPER_set_speed>
    3f8a:	81 2f       	mov	r24, r17
    3f8c:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <STEPPER_go>
    3f90:	df 91       	pop	r29
    3f92:	cf 91       	pop	r28
    3f94:	1f 91       	pop	r17
    3f96:	0f 91       	pop	r16
    3f98:	ff 90       	pop	r15
    3f9a:	ef 90       	pop	r14
    3f9c:	df 90       	pop	r13
    3f9e:	cf 90       	pop	r12
    3fa0:	bf 90       	pop	r11
    3fa2:	af 90       	pop	r10
    3fa4:	9f 90       	pop	r9
    3fa6:	8f 90       	pop	r8
    3fa8:	08 95       	ret

00003faa <STEPPER_stop>:
    3faa:	0f 93       	push	r16
    3fac:	1f 93       	push	r17
    3fae:	18 2f       	mov	r17, r24
    3fb0:	06 2f       	mov	r16, r22
    3fb2:	66 23       	and	r22, r22
    3fb4:	49 f4       	brne	.+18     	; 0x3fc8 <STEPPER_stop+0x1e>
    3fb6:	60 e0       	ldi	r22, 0x00	; 0
    3fb8:	70 e0       	ldi	r23, 0x00	; 0
    3fba:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <STEPPER_set_speed>
    3fbe:	81 2f       	mov	r24, r17
    3fc0:	60 e0       	ldi	r22, 0x00	; 0
    3fc2:	70 e0       	ldi	r23, 0x00	; 0
    3fc4:	0e 94 2e 1f 	call	0x3e5c	; 0x3e5c <STEPPER_set_steps>
    3fc8:	81 e0       	ldi	r24, 0x01	; 1
    3fca:	80 93 ed 07 	sts	0x07ED, r24
    3fce:	11 30       	cpi	r17, 0x01	; 1
    3fd0:	51 f0       	breq	.+20     	; 0x3fe6 <STEPPER_stop+0x3c>
    3fd2:	11 30       	cpi	r17, 0x01	; 1
    3fd4:	18 f0       	brcs	.+6      	; 0x3fdc <STEPPER_stop+0x32>
    3fd6:	12 30       	cpi	r17, 0x02	; 2
    3fd8:	41 f4       	brne	.+16     	; 0x3fea <STEPPER_stop+0x40>
    3fda:	03 c0       	rjmp	.+6      	; 0x3fe2 <STEPPER_stop+0x38>
    3fdc:	00 93 d5 07 	sts	0x07D5, r16
    3fe0:	04 c0       	rjmp	.+8      	; 0x3fea <STEPPER_stop+0x40>
    3fe2:	00 93 d5 07 	sts	0x07D5, r16
    3fe6:	00 93 d6 07 	sts	0x07D6, r16
    3fea:	10 92 ed 07 	sts	0x07ED, r1
    3fee:	1f 91       	pop	r17
    3ff0:	0f 91       	pop	r16
    3ff2:	08 95       	ret

00003ff4 <STEPPER_wait_and_then>:
    3ff4:	cf 92       	push	r12
    3ff6:	df 92       	push	r13
    3ff8:	ef 92       	push	r14
    3ffa:	ff 92       	push	r15
    3ffc:	0f 93       	push	r16
    3ffe:	1f 93       	push	r17
    4000:	df 93       	push	r29
    4002:	cf 93       	push	r28
    4004:	cd b7       	in	r28, 0x3d	; 61
    4006:	de b7       	in	r29, 0x3e	; 62
    4008:	8b 85       	ldd	r24, Y+11	; 0x0b
    400a:	81 30       	cpi	r24, 0x01	; 1
    400c:	61 f0       	breq	.+24     	; 0x4026 <STEPPER_wait_and_then+0x32>
    400e:	81 30       	cpi	r24, 0x01	; 1
    4010:	18 f0       	brcs	.+6      	; 0x4018 <STEPPER_wait_and_then+0x24>
    4012:	82 30       	cpi	r24, 0x02	; 2
    4014:	a1 f5       	brne	.+104    	; 0x407e <STEPPER_wait_and_then+0x8a>
    4016:	11 c0       	rjmp	.+34     	; 0x403a <STEPPER_wait_and_then+0x46>
    4018:	ec 85       	ldd	r30, Y+12	; 0x0c
    401a:	fd 85       	ldd	r31, Y+13	; 0x0d
    401c:	80 91 ee 07 	lds	r24, 0x07EE
    4020:	88 23       	and	r24, r24
    4022:	e1 f3       	breq	.-8      	; 0x401c <STEPPER_wait_and_then+0x28>
    4024:	06 c0       	rjmp	.+12     	; 0x4032 <STEPPER_wait_and_then+0x3e>
    4026:	ec 85       	ldd	r30, Y+12	; 0x0c
    4028:	fd 85       	ldd	r31, Y+13	; 0x0d
    402a:	80 91 ef 07 	lds	r24, 0x07EF
    402e:	88 23       	and	r24, r24
    4030:	e1 f3       	breq	.-8      	; 0x402a <STEPPER_wait_and_then+0x36>
    4032:	30 97       	sbiw	r30, 0x00	; 0
    4034:	21 f1       	breq	.+72     	; 0x407e <STEPPER_wait_and_then+0x8a>
    4036:	09 95       	icall
    4038:	22 c0       	rjmp	.+68     	; 0x407e <STEPPER_wait_and_then+0x8a>
    403a:	cc 84       	ldd	r12, Y+12	; 0x0c
    403c:	dd 84       	ldd	r13, Y+13	; 0x0d
    403e:	ee 84       	ldd	r14, Y+14	; 0x0e
    4040:	ff 84       	ldd	r15, Y+15	; 0x0f
    4042:	00 e0       	ldi	r16, 0x00	; 0
    4044:	10 e0       	ldi	r17, 0x00	; 0
    4046:	00 23       	and	r16, r16
    4048:	51 f4       	brne	.+20     	; 0x405e <STEPPER_wait_and_then+0x6a>
    404a:	80 91 ee 07 	lds	r24, 0x07EE
    404e:	88 23       	and	r24, r24
    4050:	31 f0       	breq	.+12     	; 0x405e <STEPPER_wait_and_then+0x6a>
    4052:	c1 14       	cp	r12, r1
    4054:	d1 04       	cpc	r13, r1
    4056:	11 f0       	breq	.+4      	; 0x405c <STEPPER_wait_and_then+0x68>
    4058:	f6 01       	movw	r30, r12
    405a:	09 95       	icall
    405c:	01 e0       	ldi	r16, 0x01	; 1
    405e:	11 23       	and	r17, r17
    4060:	51 f4       	brne	.+20     	; 0x4076 <STEPPER_wait_and_then+0x82>
    4062:	80 91 ef 07 	lds	r24, 0x07EF
    4066:	88 23       	and	r24, r24
    4068:	31 f0       	breq	.+12     	; 0x4076 <STEPPER_wait_and_then+0x82>
    406a:	e1 14       	cp	r14, r1
    406c:	f1 04       	cpc	r15, r1
    406e:	11 f0       	breq	.+4      	; 0x4074 <STEPPER_wait_and_then+0x80>
    4070:	f7 01       	movw	r30, r14
    4072:	09 95       	icall
    4074:	11 e0       	ldi	r17, 0x01	; 1
    4076:	00 23       	and	r16, r16
    4078:	31 f3       	breq	.-52     	; 0x4046 <STEPPER_wait_and_then+0x52>
    407a:	11 23       	and	r17, r17
    407c:	21 f3       	breq	.-56     	; 0x4046 <STEPPER_wait_and_then+0x52>
    407e:	cf 91       	pop	r28
    4080:	df 91       	pop	r29
    4082:	1f 91       	pop	r17
    4084:	0f 91       	pop	r16
    4086:	ff 90       	pop	r15
    4088:	ef 90       	pop	r14
    408a:	df 90       	pop	r13
    408c:	cf 90       	pop	r12
    408e:	08 95       	ret

00004090 <SYS_get_state>:
    4090:	e8 2f       	mov	r30, r24
    4092:	f0 e0       	ldi	r31, 0x00	; 0
    4094:	e3 31       	cpi	r30, 0x13	; 19
    4096:	f1 05       	cpc	r31, r1
    4098:	40 f4       	brcc	.+16     	; 0x40aa <SYS_get_state+0x1a>
    409a:	e2 5c       	subi	r30, 0xC2	; 194
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	ee 0f       	add	r30, r30
    40a0:	ff 1f       	adc	r31, r31
    40a2:	05 90       	lpm	r0, Z+
    40a4:	f4 91       	lpm	r31, Z+
    40a6:	e0 2d       	mov	r30, r0
    40a8:	09 94       	ijmp
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	08 95       	ret
    40ae:	80 91 f0 07 	lds	r24, 0x07F0
    40b2:	08 95       	ret
    40b4:	80 91 f1 07 	lds	r24, 0x07F1
    40b8:	08 95       	ret
    40ba:	80 91 f2 07 	lds	r24, 0x07F2
    40be:	08 95       	ret
    40c0:	80 91 f3 07 	lds	r24, 0x07F3
    40c4:	08 95       	ret
    40c6:	80 91 f4 07 	lds	r24, 0x07F4
    40ca:	08 95       	ret
    40cc:	80 91 f6 07 	lds	r24, 0x07F6
    40d0:	08 95       	ret
    40d2:	80 91 f5 07 	lds	r24, 0x07F5
    40d6:	08 95       	ret
    40d8:	80 91 f7 07 	lds	r24, 0x07F7
    40dc:	08 95       	ret
    40de:	80 91 f8 07 	lds	r24, 0x07F8
    40e2:	08 95       	ret
    40e4:	80 91 f9 07 	lds	r24, 0x07F9
    40e8:	08 95       	ret
    40ea:	80 91 fa 07 	lds	r24, 0x07FA
    40ee:	08 95       	ret
    40f0:	80 91 fb 07 	lds	r24, 0x07FB
    40f4:	08 95       	ret
    40f6:	80 91 fc 07 	lds	r24, 0x07FC
    40fa:	08 95       	ret
    40fc:	80 91 fd 07 	lds	r24, 0x07FD
    4100:	08 95       	ret
    4102:	80 91 fe 07 	lds	r24, 0x07FE
    4106:	08 95       	ret
    4108:	80 91 ff 07 	lds	r24, 0x07FF
    410c:	08 95       	ret
    410e:	80 91 00 08 	lds	r24, 0x0800
    4112:	08 95       	ret
    4114:	80 91 01 08 	lds	r24, 0x0801
    4118:	08 95       	ret
    411a:	80 91 02 08 	lds	r24, 0x0802
    411e:	08 95       	ret

00004120 <SYS_set_state>:
    4120:	e8 2f       	mov	r30, r24
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	e3 31       	cpi	r30, 0x13	; 19
    4126:	f1 05       	cpc	r31, r1
    4128:	08 f0       	brcs	.+2      	; 0x412c <SYS_set_state+0xc>
    412a:	40 c0       	rjmp	.+128    	; 0x41ac <SYS_set_state+0x8c>
    412c:	ef 5a       	subi	r30, 0xAF	; 175
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	ee 0f       	add	r30, r30
    4132:	ff 1f       	adc	r31, r31
    4134:	05 90       	lpm	r0, Z+
    4136:	f4 91       	lpm	r31, Z+
    4138:	e0 2d       	mov	r30, r0
    413a:	09 94       	ijmp
    413c:	60 93 f0 07 	sts	0x07F0, r22
    4140:	08 95       	ret
    4142:	60 93 f1 07 	sts	0x07F1, r22
    4146:	08 95       	ret
    4148:	60 93 f2 07 	sts	0x07F2, r22
    414c:	08 95       	ret
    414e:	60 93 f3 07 	sts	0x07F3, r22
    4152:	08 95       	ret
    4154:	60 93 f4 07 	sts	0x07F4, r22
    4158:	08 95       	ret
    415a:	60 93 f6 07 	sts	0x07F6, r22
    415e:	08 95       	ret
    4160:	60 93 f5 07 	sts	0x07F5, r22
    4164:	08 95       	ret
    4166:	60 93 f7 07 	sts	0x07F7, r22
    416a:	08 95       	ret
    416c:	60 93 f8 07 	sts	0x07F8, r22
    4170:	08 95       	ret
    4172:	60 93 f9 07 	sts	0x07F9, r22
    4176:	08 95       	ret
    4178:	60 93 fa 07 	sts	0x07FA, r22
    417c:	08 95       	ret
    417e:	60 93 fb 07 	sts	0x07FB, r22
    4182:	08 95       	ret
    4184:	60 93 fc 07 	sts	0x07FC, r22
    4188:	08 95       	ret
    418a:	60 93 fd 07 	sts	0x07FD, r22
    418e:	08 95       	ret
    4190:	60 93 fe 07 	sts	0x07FE, r22
    4194:	08 95       	ret
    4196:	60 93 ff 07 	sts	0x07FF, r22
    419a:	08 95       	ret
    419c:	60 93 00 08 	sts	0x0800, r22
    41a0:	08 95       	ret
    41a2:	60 93 01 08 	sts	0x0801, r22
    41a6:	08 95       	ret
    41a8:	60 93 00 08 	sts	0x0800, r22
    41ac:	08 95       	ret

000041ae <ATTINY_get_sensors>:
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    41b8:	81 30       	cpi	r24, 0x01	; 1
    41ba:	11 f0       	breq	.+4      	; 0x41c0 <ATTINY_get_sensors+0x12>
    41bc:	00 e0       	ldi	r16, 0x00	; 0
    41be:	24 c0       	rjmp	.+72     	; 0x4208 <ATTINY_get_sensors+0x5a>
    41c0:	87 e0       	ldi	r24, 0x07	; 7
    41c2:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <SPI_set_slave_addr>
    41c6:	82 e0       	ldi	r24, 0x02	; 2
    41c8:	6a e0       	ldi	r22, 0x0A	; 10
    41ca:	0e 94 36 1c 	call	0x386c	; 0x386c <SPI_transmit>
    41ce:	82 e0       	ldi	r24, 0x02	; 2
    41d0:	62 eb       	ldi	r22, 0xB2	; 178
    41d2:	0e 94 36 1c 	call	0x386c	; 0x386c <SPI_transmit>
    41d6:	18 ec       	ldi	r17, 0xC8	; 200
    41d8:	81 2f       	mov	r24, r17
    41da:	8a 95       	dec	r24
    41dc:	f1 f7       	brne	.-4      	; 0x41da <ATTINY_get_sensors+0x2c>
    41de:	82 e0       	ldi	r24, 0x02	; 2
    41e0:	60 e0       	ldi	r22, 0x00	; 0
    41e2:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <SPI_receive>
    41e6:	08 2f       	mov	r16, r24
    41e8:	81 2f       	mov	r24, r17
    41ea:	8a 95       	dec	r24
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <ATTINY_get_sensors+0x3c>
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	60 e0       	ldi	r22, 0x00	; 0
    41f2:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <SPI_receive>
    41f6:	1a 95       	dec	r17
    41f8:	f1 f7       	brne	.-4      	; 0x41f6 <ATTINY_get_sensors+0x48>
    41fa:	87 e0       	ldi	r24, 0x07	; 7
    41fc:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <SPI_set_slave_addr>
    4200:	88 e8       	ldi	r24, 0x88	; 136
    4202:	93 e1       	ldi	r25, 0x13	; 19
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <ATTINY_get_sensors+0x56>
    4208:	80 2f       	mov	r24, r16
    420a:	1f 91       	pop	r17
    420c:	0f 91       	pop	r16
    420e:	08 95       	ret

00004210 <ATTINY_get_SW_state>:
    4210:	1f 93       	push	r17
    4212:	cf 93       	push	r28
    4214:	df 93       	push	r29
    4216:	18 2f       	mov	r17, r24
    4218:	80 91 8d 04 	lds	r24, 0x048D
    421c:	88 23       	and	r24, r24
    421e:	41 f0       	breq	.+16     	; 0x4230 <ATTINY_get_SW_state+0x20>
    4220:	80 91 97 04 	lds	r24, 0x0497
    4224:	88 23       	and	r24, r24
    4226:	99 f0       	breq	.+38     	; 0x424e <ATTINY_get_SW_state+0x3e>
    4228:	10 92 8d 04 	sts	0x048D, r1
    422c:	10 92 97 04 	sts	0x0497, r1
    4230:	0e 94 d7 20 	call	0x41ae	; 0x41ae <ATTINY_get_sensors>
    4234:	80 93 8c 04 	sts	0x048C, r24
    4238:	81 e9       	ldi	r24, 0x91	; 145
    423a:	94 e0       	ldi	r25, 0x04	; 4
    423c:	61 e0       	ldi	r22, 0x01	; 1
    423e:	40 e0       	ldi	r20, 0x00	; 0
    4240:	22 e3       	ldi	r18, 0x32	; 50
    4242:	30 e0       	ldi	r19, 0x00	; 0
    4244:	0e 94 c6 21 	call	0x438c	; 0x438c <TMRSRVC_new>
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	80 93 8d 04 	sts	0x048D, r24
    424e:	90 91 8c 04 	lds	r25, 0x048C
    4252:	a1 2f       	mov	r26, r17
    4254:	b0 e0       	ldi	r27, 0x00	; 0
    4256:	ed 01       	movw	r28, r26
    4258:	c9 5e       	subi	r28, 0xE9	; 233
    425a:	db 4f       	sbci	r29, 0xFB	; 251
    425c:	88 81       	ld	r24, Y
    425e:	88 23       	and	r24, r24
    4260:	69 f0       	breq	.+26     	; 0x427c <ATTINY_get_SW_state+0x6c>
    4262:	fd 01       	movw	r30, r26
    4264:	e6 5e       	subi	r30, 0xE6	; 230
    4266:	fb 4f       	sbci	r31, 0xFB	; 251
    4268:	80 81       	ld	r24, Z
    426a:	98 23       	and	r25, r24
    426c:	c1 f0       	breq	.+48     	; 0x429e <ATTINY_get_SW_state+0x8e>
    426e:	fd 01       	movw	r30, r26
    4270:	e2 57       	subi	r30, 0x72	; 114
    4272:	fb 4f       	sbci	r31, 0xFB	; 251
    4274:	81 e0       	ldi	r24, 0x01	; 1
    4276:	80 83       	st	Z, r24
    4278:	18 82       	st	Y, r1
    427a:	11 c0       	rjmp	.+34     	; 0x429e <ATTINY_get_SW_state+0x8e>
    427c:	fd 01       	movw	r30, r26
    427e:	e2 57       	subi	r30, 0x72	; 114
    4280:	fb 4f       	sbci	r31, 0xFB	; 251
    4282:	80 81       	ld	r24, Z
    4284:	81 11       	cpse	r24, r1
    4286:	10 82       	st	Z, r1
    4288:	fd 01       	movw	r30, r26
    428a:	e6 5e       	subi	r30, 0xE6	; 230
    428c:	fb 4f       	sbci	r31, 0xFB	; 251
    428e:	80 81       	ld	r24, Z
    4290:	98 23       	and	r25, r24
    4292:	29 f4       	brne	.+10     	; 0x429e <ATTINY_get_SW_state+0x8e>
    4294:	fd 01       	movw	r30, r26
    4296:	e9 5e       	subi	r30, 0xE9	; 233
    4298:	fb 4f       	sbci	r31, 0xFB	; 251
    429a:	81 e0       	ldi	r24, 0x01	; 1
    429c:	80 83       	st	Z, r24
    429e:	a2 57       	subi	r26, 0x72	; 114
    42a0:	bb 4f       	sbci	r27, 0xFB	; 251
    42a2:	8c 91       	ld	r24, X
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	08 95       	ret

000042ac <ATTINY_open>:
    42ac:	82 e0       	ldi	r24, 0x02	; 2
    42ae:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    42b2:	88 23       	and	r24, r24
    42b4:	19 f4       	brne	.+6      	; 0x42bc <ATTINY_open+0x10>
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	82 e0       	ldi	r24, 0x02	; 2
    42ba:	08 95       	ret
    42bc:	10 92 1e 08 	sts	0x081E, r1
    42c0:	10 92 1d 08 	sts	0x081D, r1
    42c4:	10 92 20 08 	sts	0x0820, r1
    42c8:	10 92 1f 08 	sts	0x081F, r1
    42cc:	10 92 22 08 	sts	0x0822, r1
    42d0:	10 92 21 08 	sts	0x0821, r1
    42d4:	10 92 24 08 	sts	0x0824, r1
    42d8:	10 92 23 08 	sts	0x0823, r1
    42dc:	10 92 26 08 	sts	0x0826, r1
    42e0:	10 92 25 08 	sts	0x0825, r1
    42e4:	80 e9       	ldi	r24, 0x90	; 144
    42e6:	91 e0       	ldi	r25, 0x01	; 1
    42e8:	90 93 0a 08 	sts	0x080A, r25
    42ec:	80 93 09 08 	sts	0x0809, r24
    42f0:	90 93 0c 08 	sts	0x080C, r25
    42f4:	80 93 0b 08 	sts	0x080B, r24
    42f8:	90 93 0e 08 	sts	0x080E, r25
    42fc:	80 93 0d 08 	sts	0x080D, r24
    4300:	90 93 10 08 	sts	0x0810, r25
    4304:	80 93 0f 08 	sts	0x080F, r24
    4308:	90 93 12 08 	sts	0x0812, r25
    430c:	80 93 11 08 	sts	0x0811, r24
    4310:	84 e3       	ldi	r24, 0x34	; 52
    4312:	98 e0       	ldi	r25, 0x08	; 8
    4314:	90 93 14 08 	sts	0x0814, r25
    4318:	80 93 13 08 	sts	0x0813, r24
    431c:	90 93 16 08 	sts	0x0816, r25
    4320:	80 93 15 08 	sts	0x0815, r24
    4324:	90 93 18 08 	sts	0x0818, r25
    4328:	80 93 17 08 	sts	0x0817, r24
    432c:	90 93 1a 08 	sts	0x081A, r25
    4330:	80 93 19 08 	sts	0x0819, r24
    4334:	90 93 1c 08 	sts	0x081C, r25
    4338:	80 93 1b 08 	sts	0x081B, r24
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	61 e0       	ldi	r22, 0x01	; 1
    4340:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    4344:	91 e0       	ldi	r25, 0x01	; 1
    4346:	81 e0       	ldi	r24, 0x01	; 1
    4348:	08 95       	ret

0000434a <TMRSRVC_delay>:
    434a:	df 93       	push	r29
    434c:	cf 93       	push	r28
    434e:	cd b7       	in	r28, 0x3d	; 61
    4350:	de b7       	in	r29, 0x3e	; 62
    4352:	29 97       	sbiw	r28, 0x09	; 9
    4354:	0f b6       	in	r0, 0x3f	; 63
    4356:	f8 94       	cli
    4358:	de bf       	out	0x3e, r29	; 62
    435a:	0f be       	out	0x3f, r0	; 63
    435c:	cd bf       	out	0x3d, r28	; 61
    435e:	9c 01       	movw	r18, r24
    4360:	ce 01       	movw	r24, r28
    4362:	01 96       	adiw	r24, 0x01	; 1
    4364:	61 e0       	ldi	r22, 0x01	; 1
    4366:	40 e0       	ldi	r20, 0x00	; 0
    4368:	0e 94 c6 21 	call	0x438c	; 0x438c <TMRSRVC_new>
    436c:	98 2f       	mov	r25, r24
    436e:	88 23       	and	r24, r24
    4370:	19 f4       	brne	.+6      	; 0x4378 <TMRSRVC_delay+0x2e>
    4372:	8f 81       	ldd	r24, Y+7	; 0x07
    4374:	88 23       	and	r24, r24
    4376:	e9 f3       	breq	.-6      	; 0x4372 <TMRSRVC_delay+0x28>
    4378:	89 2f       	mov	r24, r25
    437a:	29 96       	adiw	r28, 0x09	; 9
    437c:	0f b6       	in	r0, 0x3f	; 63
    437e:	f8 94       	cli
    4380:	de bf       	out	0x3e, r29	; 62
    4382:	0f be       	out	0x3f, r0	; 63
    4384:	cd bf       	out	0x3d, r28	; 61
    4386:	cf 91       	pop	r28
    4388:	df 91       	pop	r29
    438a:	08 95       	ret

0000438c <TMRSRVC_new>:
    438c:	ef 92       	push	r14
    438e:	ff 92       	push	r15
    4390:	0f 93       	push	r16
    4392:	1f 93       	push	r17
    4394:	cf 93       	push	r28
    4396:	df 93       	push	r29
    4398:	ec 01       	movw	r28, r24
    439a:	f6 2e       	mov	r15, r22
    439c:	e4 2e       	mov	r14, r20
    439e:	89 01       	movw	r16, r18
    43a0:	88 e0       	ldi	r24, 0x08	; 8
    43a2:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    43a6:	81 30       	cpi	r24, 0x01	; 1
    43a8:	11 f0       	breq	.+4      	; 0x43ae <TMRSRVC_new+0x22>
    43aa:	81 e0       	ldi	r24, 0x01	; 1
    43ac:	26 c0       	rjmp	.+76     	; 0x43fa <TMRSRVC_new+0x6e>
    43ae:	84 e0       	ldi	r24, 0x04	; 4
    43b0:	90 e0       	ldi	r25, 0x00	; 0
    43b2:	0e 94 1b 35 	call	0x6a36	; 0x6a36 <malloc>
    43b6:	fc 01       	movw	r30, r24
    43b8:	00 97       	sbiw	r24, 0x00	; 0
    43ba:	11 f4       	brne	.+4      	; 0x43c0 <TMRSRVC_new+0x34>
    43bc:	82 e0       	ldi	r24, 0x02	; 2
    43be:	1d c0       	rjmp	.+58     	; 0x43fa <TMRSRVC_new+0x6e>
    43c0:	f9 82       	std	Y+1, r15	; 0x01
    43c2:	f0 fc       	sbrc	r15, 0
    43c4:	1e 82       	std	Y+6, r1	; 0x06
    43c6:	81 e0       	ldi	r24, 0x01	; 1
    43c8:	e8 16       	cp	r14, r24
    43ca:	19 f4       	brne	.+6      	; 0x43d2 <TMRSRVC_new+0x46>
    43cc:	89 81       	ldd	r24, Y+1	; 0x01
    43ce:	84 60       	ori	r24, 0x04	; 4
    43d0:	89 83       	std	Y+1, r24	; 0x01
    43d2:	89 81       	ldd	r24, Y+1	; 0x01
    43d4:	88 60       	ori	r24, 0x08	; 8
    43d6:	89 83       	std	Y+1, r24	; 0x01
    43d8:	1b 83       	std	Y+3, r17	; 0x03
    43da:	0a 83       	std	Y+2, r16	; 0x02
    43dc:	1d 83       	std	Y+5, r17	; 0x05
    43de:	0c 83       	std	Y+4, r16	; 0x04
    43e0:	d1 83       	std	Z+1, r29	; 0x01
    43e2:	c0 83       	st	Z, r28
    43e4:	13 82       	std	Z+3, r1	; 0x03
    43e6:	12 82       	std	Z+2, r1	; 0x02
    43e8:	81 e0       	ldi	r24, 0x01	; 1
    43ea:	80 93 fa 04 	sts	0x04FA, r24
    43ee:	cf 01       	movw	r24, r30
    43f0:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <TMRSRVC_insert>
    43f4:	10 92 fa 04 	sts	0x04FA, r1
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	df 91       	pop	r29
    43fc:	cf 91       	pop	r28
    43fe:	1f 91       	pop	r17
    4400:	0f 91       	pop	r16
    4402:	ff 90       	pop	r15
    4404:	ef 90       	pop	r14
    4406:	08 95       	ret

00004408 <I2C_MSTR_get>:
    4408:	fc 01       	movw	r30, r24
    440a:	80 91 2a 08 	lds	r24, 0x082A
    440e:	81 30       	cpi	r24, 0x01	; 1
    4410:	11 f0       	breq	.+4      	; 0x4416 <I2C_MSTR_get+0xe>
    4412:	85 e0       	ldi	r24, 0x05	; 5
    4414:	08 95       	ret
    4416:	80 91 2b 08 	lds	r24, 0x082B
    441a:	81 30       	cpi	r24, 0x01	; 1
    441c:	11 f0       	breq	.+4      	; 0x4422 <I2C_MSTR_get+0x1a>
    441e:	8a e0       	ldi	r24, 0x0A	; 10
    4420:	08 95       	ret
    4422:	61 30       	cpi	r22, 0x01	; 1
    4424:	11 f4       	brne	.+4      	; 0x442a <I2C_MSTR_get+0x22>
    4426:	84 ec       	ldi	r24, 0xC4	; 196
    4428:	01 c0       	rjmp	.+2      	; 0x442c <I2C_MSTR_get+0x24>
    442a:	84 e8       	ldi	r24, 0x84	; 132
    442c:	80 93 bc 00 	sts	0x00BC, r24
    4430:	80 91 bc 00 	lds	r24, 0x00BC
    4434:	87 ff       	sbrs	r24, 7
    4436:	fc cf       	rjmp	.-8      	; 0x4430 <I2C_MSTR_get+0x28>
    4438:	61 30       	cpi	r22, 0x01	; 1
    443a:	31 f4       	brne	.+12     	; 0x4448 <I2C_MSTR_get+0x40>
    443c:	80 91 b9 00 	lds	r24, 0x00B9
    4440:	88 7f       	andi	r24, 0xF8	; 248
    4442:	80 35       	cpi	r24, 0x50	; 80
    4444:	59 f4       	brne	.+22     	; 0x445c <I2C_MSTR_get+0x54>
    4446:	05 c0       	rjmp	.+10     	; 0x4452 <I2C_MSTR_get+0x4a>
    4448:	80 91 b9 00 	lds	r24, 0x00B9
    444c:	88 7f       	andi	r24, 0xF8	; 248
    444e:	88 35       	cpi	r24, 0x58	; 88
    4450:	29 f4       	brne	.+10     	; 0x445c <I2C_MSTR_get+0x54>
    4452:	80 91 bb 00 	lds	r24, 0x00BB
    4456:	80 83       	st	Z, r24
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	08 95       	ret
    445c:	82 e0       	ldi	r24, 0x02	; 2
    445e:	08 95       	ret

00004460 <I2C_MSTR_send>:
    4460:	98 2f       	mov	r25, r24
    4462:	80 91 2a 08 	lds	r24, 0x082A
    4466:	81 30       	cpi	r24, 0x01	; 1
    4468:	11 f0       	breq	.+4      	; 0x446e <I2C_MSTR_send+0xe>
    446a:	85 e0       	ldi	r24, 0x05	; 5
    446c:	08 95       	ret
    446e:	80 91 2b 08 	lds	r24, 0x082B
    4472:	81 30       	cpi	r24, 0x01	; 1
    4474:	11 f0       	breq	.+4      	; 0x447a <I2C_MSTR_send+0x1a>
    4476:	8a e0       	ldi	r24, 0x0A	; 10
    4478:	08 95       	ret
    447a:	90 93 bb 00 	sts	0x00BB, r25
    447e:	84 e8       	ldi	r24, 0x84	; 132
    4480:	80 93 bc 00 	sts	0x00BC, r24
    4484:	80 91 bc 00 	lds	r24, 0x00BC
    4488:	87 ff       	sbrs	r24, 7
    448a:	fc cf       	rjmp	.-8      	; 0x4484 <I2C_MSTR_send+0x24>
    448c:	80 91 b9 00 	lds	r24, 0x00B9
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	88 7f       	andi	r24, 0xF8	; 248
    4494:	90 70       	andi	r25, 0x00	; 0
    4496:	88 32       	cpi	r24, 0x28	; 40
    4498:	91 05       	cpc	r25, r1
    449a:	21 f0       	breq	.+8      	; 0x44a4 <I2C_MSTR_send+0x44>
    449c:	c0 97       	sbiw	r24, 0x30	; 48
    449e:	21 f4       	brne	.+8      	; 0x44a8 <I2C_MSTR_send+0x48>
    44a0:	83 e0       	ldi	r24, 0x03	; 3
    44a2:	08 95       	ret
    44a4:	80 e0       	ldi	r24, 0x00	; 0
    44a6:	08 95       	ret
    44a8:	8c e0       	ldi	r24, 0x0C	; 12
    44aa:	08 95       	ret

000044ac <I2C_MSTR_start>:
    44ac:	98 2f       	mov	r25, r24
    44ae:	20 91 2a 08 	lds	r18, 0x082A
    44b2:	21 30       	cpi	r18, 0x01	; 1
    44b4:	11 f0       	breq	.+4      	; 0x44ba <I2C_MSTR_start+0xe>
    44b6:	85 e0       	ldi	r24, 0x05	; 5
    44b8:	08 95       	ret
    44ba:	80 91 2c 08 	lds	r24, 0x082C
    44be:	81 30       	cpi	r24, 0x01	; 1
    44c0:	11 f4       	brne	.+4      	; 0x44c6 <I2C_MSTR_start+0x1a>
    44c2:	89 e0       	ldi	r24, 0x09	; 9
    44c4:	08 95       	ret
    44c6:	20 93 2b 08 	sts	0x082B, r18
    44ca:	84 ea       	ldi	r24, 0xA4	; 164
    44cc:	80 93 bc 00 	sts	0x00BC, r24
    44d0:	80 91 bc 00 	lds	r24, 0x00BC
    44d4:	87 ff       	sbrs	r24, 7
    44d6:	fc cf       	rjmp	.-8      	; 0x44d0 <I2C_MSTR_start+0x24>
    44d8:	80 91 b9 00 	lds	r24, 0x00B9
    44dc:	88 7f       	andi	r24, 0xF8	; 248
    44de:	88 30       	cpi	r24, 0x08	; 8
    44e0:	39 f0       	breq	.+14     	; 0x44f0 <I2C_MSTR_start+0x44>
    44e2:	80 91 b9 00 	lds	r24, 0x00B9
    44e6:	88 7f       	andi	r24, 0xF8	; 248
    44e8:	80 31       	cpi	r24, 0x10	; 16
    44ea:	11 f0       	breq	.+4      	; 0x44f0 <I2C_MSTR_start+0x44>
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	08 95       	ret
    44f0:	61 30       	cpi	r22, 0x01	; 1
    44f2:	19 f4       	brne	.+6      	; 0x44fa <I2C_MSTR_start+0x4e>
    44f4:	99 0f       	add	r25, r25
    44f6:	91 60       	ori	r25, 0x01	; 1
    44f8:	03 c0       	rjmp	.+6      	; 0x4500 <I2C_MSTR_start+0x54>
    44fa:	66 23       	and	r22, r22
    44fc:	19 f4       	brne	.+6      	; 0x4504 <I2C_MSTR_start+0x58>
    44fe:	99 0f       	add	r25, r25
    4500:	90 93 bb 00 	sts	0x00BB, r25
    4504:	84 e8       	ldi	r24, 0x84	; 132
    4506:	80 93 bc 00 	sts	0x00BC, r24
    450a:	80 91 bc 00 	lds	r24, 0x00BC
    450e:	87 ff       	sbrs	r24, 7
    4510:	fc cf       	rjmp	.-8      	; 0x450a <I2C_MSTR_start+0x5e>
    4512:	61 30       	cpi	r22, 0x01	; 1
    4514:	31 f4       	brne	.+12     	; 0x4522 <I2C_MSTR_start+0x76>
    4516:	80 91 b9 00 	lds	r24, 0x00B9
    451a:	88 7f       	andi	r24, 0xF8	; 248
    451c:	80 34       	cpi	r24, 0x40	; 64
    451e:	41 f4       	brne	.+16     	; 0x4530 <I2C_MSTR_start+0x84>
    4520:	09 c0       	rjmp	.+18     	; 0x4534 <I2C_MSTR_start+0x88>
    4522:	66 23       	and	r22, r22
    4524:	39 f4       	brne	.+14     	; 0x4534 <I2C_MSTR_start+0x88>
    4526:	80 91 b9 00 	lds	r24, 0x00B9
    452a:	88 7f       	andi	r24, 0xF8	; 248
    452c:	88 31       	cpi	r24, 0x18	; 24
    452e:	11 f0       	breq	.+4      	; 0x4534 <I2C_MSTR_start+0x88>
    4530:	82 e0       	ldi	r24, 0x02	; 2
    4532:	08 95       	ret
    4534:	80 e0       	ldi	r24, 0x00	; 0
    4536:	08 95       	ret

00004538 <I2C_MSTR_stop>:
    4538:	80 91 2b 08 	lds	r24, 0x082B
    453c:	81 30       	cpi	r24, 0x01	; 1
    453e:	11 f0       	breq	.+4      	; 0x4544 <I2C_MSTR_stop+0xc>
    4540:	8a e0       	ldi	r24, 0x0A	; 10
    4542:	08 95       	ret
    4544:	80 91 2d 08 	lds	r24, 0x082D
    4548:	81 30       	cpi	r24, 0x01	; 1
    454a:	29 f4       	brne	.+10     	; 0x4556 <I2C_MSTR_stop+0x1e>
    454c:	85 e9       	ldi	r24, 0x95	; 149
    454e:	80 93 bc 00 	sts	0x00BC, r24
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	08 95       	ret
    4556:	84 e9       	ldi	r24, 0x94	; 148
    4558:	80 93 bc 00 	sts	0x00BC, r24
    455c:	80 e0       	ldi	r24, 0x00	; 0
    455e:	08 95       	ret

00004560 <I2C_open>:
    4560:	82 e1       	ldi	r24, 0x12	; 18
    4562:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    4566:	88 23       	and	r24, r24
    4568:	b1 f4       	brne	.+44     	; 0x4596 <I2C_open+0x36>
    456a:	10 92 2a 08 	sts	0x082A, r1
    456e:	10 92 2b 08 	sts	0x082B, r1
    4572:	10 92 2c 08 	sts	0x082C, r1
    4576:	10 92 2d 08 	sts	0x082D, r1
    457a:	10 92 2e 08 	sts	0x082E, r1
    457e:	0e 94 f7 28 	call	0x51ee	; 0x51ee <__I2C_init>
    4582:	87 e1       	ldi	r24, 0x17	; 23
    4584:	60 e0       	ldi	r22, 0x00	; 0
    4586:	0e 94 ce 22 	call	0x459c	; 0x459c <I2C_set_BRG>
    458a:	0e 94 ed 28 	call	0x51da	; 0x51da <I2C_enable>
    458e:	82 e1       	ldi	r24, 0x12	; 18
    4590:	61 e0       	ldi	r22, 0x01	; 1
    4592:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    4596:	82 e1       	ldi	r24, 0x12	; 18
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	08 95       	ret

0000459c <I2C_set_BRG>:
    459c:	63 70       	andi	r22, 0x03	; 3
    459e:	60 93 b9 00 	sts	0x00B9, r22
    45a2:	80 93 b8 00 	sts	0x00B8, r24
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	80 93 2a 08 	sts	0x082A, r24
    45ac:	08 95       	ret

000045ae <__ADC_init>:
    45ae:	8f e1       	ldi	r24, 0x1F	; 31
    45b0:	80 93 7c 00 	sts	0x007C, r24
    45b4:	ea e7       	ldi	r30, 0x7A	; 122
    45b6:	f0 e0       	ldi	r31, 0x00	; 0
    45b8:	87 e0       	ldi	r24, 0x07	; 7
    45ba:	80 83       	st	Z, r24
    45bc:	80 81       	ld	r24, Z
    45be:	80 68       	ori	r24, 0x80	; 128
    45c0:	80 83       	st	Z, r24
    45c2:	08 95       	ret

000045c4 <CBOT_init>:
    45c4:	0e 94 38 28 	call	0x5070	; 0x5070 <SYS_init>
    45c8:	0e 94 14 26 	call	0x4c28	; 0x4c28 <ATMEGA_open>
    45cc:	0e 94 44 25 	call	0x4a88	; 0x4a88 <ISR_open>
    45d0:	0e 94 c4 28 	call	0x5188	; 0x5188 <TMRSRVC_open>
    45d4:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <SPI_open>
    45d8:	0e 94 56 21 	call	0x42ac	; 0x42ac <ATTINY_open>
    45dc:	78 94       	sei
    45de:	08 95       	ret

000045e0 <CBOT_ISR_init>:
    45e0:	00 00       	nop
    45e2:	08 95       	ret

000045e4 <__vector_16>:
    45e4:	1f 92       	push	r1
    45e6:	0f 92       	push	r0
    45e8:	0f b6       	in	r0, 0x3f	; 63
    45ea:	0f 92       	push	r0
    45ec:	11 24       	eor	r1, r1
    45ee:	2f 93       	push	r18
    45f0:	3f 93       	push	r19
    45f2:	4f 93       	push	r20
    45f4:	5f 93       	push	r21
    45f6:	6f 93       	push	r22
    45f8:	7f 93       	push	r23
    45fa:	8f 93       	push	r24
    45fc:	9f 93       	push	r25
    45fe:	af 93       	push	r26
    4600:	bf 93       	push	r27
    4602:	ef 93       	push	r30
    4604:	ff 93       	push	r31
    4606:	e0 91 ba 04 	lds	r30, 0x04BA
    460a:	f0 91 bb 04 	lds	r31, 0x04BB
    460e:	30 97       	sbiw	r30, 0x00	; 0
    4610:	09 f0       	breq	.+2      	; 0x4614 <__vector_16+0x30>
    4612:	09 95       	icall
    4614:	ff 91       	pop	r31
    4616:	ef 91       	pop	r30
    4618:	bf 91       	pop	r27
    461a:	af 91       	pop	r26
    461c:	9f 91       	pop	r25
    461e:	8f 91       	pop	r24
    4620:	7f 91       	pop	r23
    4622:	6f 91       	pop	r22
    4624:	5f 91       	pop	r21
    4626:	4f 91       	pop	r20
    4628:	3f 91       	pop	r19
    462a:	2f 91       	pop	r18
    462c:	0f 90       	pop	r0
    462e:	0f be       	out	0x3f, r0	; 63
    4630:	0f 90       	pop	r0
    4632:	1f 90       	pop	r1
    4634:	18 95       	reti

00004636 <__vector_17>:
    4636:	1f 92       	push	r1
    4638:	0f 92       	push	r0
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	0f 92       	push	r0
    463e:	11 24       	eor	r1, r1
    4640:	2f 93       	push	r18
    4642:	3f 93       	push	r19
    4644:	4f 93       	push	r20
    4646:	5f 93       	push	r21
    4648:	6f 93       	push	r22
    464a:	7f 93       	push	r23
    464c:	8f 93       	push	r24
    464e:	9f 93       	push	r25
    4650:	af 93       	push	r26
    4652:	bf 93       	push	r27
    4654:	ef 93       	push	r30
    4656:	ff 93       	push	r31
    4658:	e0 91 bc 04 	lds	r30, 0x04BC
    465c:	f0 91 bd 04 	lds	r31, 0x04BD
    4660:	30 97       	sbiw	r30, 0x00	; 0
    4662:	09 f0       	breq	.+2      	; 0x4666 <__vector_17+0x30>
    4664:	09 95       	icall
    4666:	ff 91       	pop	r31
    4668:	ef 91       	pop	r30
    466a:	bf 91       	pop	r27
    466c:	af 91       	pop	r26
    466e:	9f 91       	pop	r25
    4670:	8f 91       	pop	r24
    4672:	7f 91       	pop	r23
    4674:	6f 91       	pop	r22
    4676:	5f 91       	pop	r21
    4678:	4f 91       	pop	r20
    467a:	3f 91       	pop	r19
    467c:	2f 91       	pop	r18
    467e:	0f 90       	pop	r0
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	0f 90       	pop	r0
    4684:	1f 90       	pop	r1
    4686:	18 95       	reti

00004688 <__vector_18>:
    4688:	1f 92       	push	r1
    468a:	0f 92       	push	r0
    468c:	0f b6       	in	r0, 0x3f	; 63
    468e:	0f 92       	push	r0
    4690:	11 24       	eor	r1, r1
    4692:	2f 93       	push	r18
    4694:	3f 93       	push	r19
    4696:	4f 93       	push	r20
    4698:	5f 93       	push	r21
    469a:	6f 93       	push	r22
    469c:	7f 93       	push	r23
    469e:	8f 93       	push	r24
    46a0:	9f 93       	push	r25
    46a2:	af 93       	push	r26
    46a4:	bf 93       	push	r27
    46a6:	ef 93       	push	r30
    46a8:	ff 93       	push	r31
    46aa:	e0 91 be 04 	lds	r30, 0x04BE
    46ae:	f0 91 bf 04 	lds	r31, 0x04BF
    46b2:	30 97       	sbiw	r30, 0x00	; 0
    46b4:	09 f0       	breq	.+2      	; 0x46b8 <__vector_18+0x30>
    46b6:	09 95       	icall
    46b8:	ff 91       	pop	r31
    46ba:	ef 91       	pop	r30
    46bc:	bf 91       	pop	r27
    46be:	af 91       	pop	r26
    46c0:	9f 91       	pop	r25
    46c2:	8f 91       	pop	r24
    46c4:	7f 91       	pop	r23
    46c6:	6f 91       	pop	r22
    46c8:	5f 91       	pop	r21
    46ca:	4f 91       	pop	r20
    46cc:	3f 91       	pop	r19
    46ce:	2f 91       	pop	r18
    46d0:	0f 90       	pop	r0
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	0f 90       	pop	r0
    46d6:	1f 90       	pop	r1
    46d8:	18 95       	reti

000046da <__vector_9>:
    46da:	1f 92       	push	r1
    46dc:	0f 92       	push	r0
    46de:	0f b6       	in	r0, 0x3f	; 63
    46e0:	0f 92       	push	r0
    46e2:	11 24       	eor	r1, r1
    46e4:	2f 93       	push	r18
    46e6:	3f 93       	push	r19
    46e8:	4f 93       	push	r20
    46ea:	5f 93       	push	r21
    46ec:	6f 93       	push	r22
    46ee:	7f 93       	push	r23
    46f0:	8f 93       	push	r24
    46f2:	9f 93       	push	r25
    46f4:	af 93       	push	r26
    46f6:	bf 93       	push	r27
    46f8:	ef 93       	push	r30
    46fa:	ff 93       	push	r31
    46fc:	e0 91 ac 04 	lds	r30, 0x04AC
    4700:	f0 91 ad 04 	lds	r31, 0x04AD
    4704:	30 97       	sbiw	r30, 0x00	; 0
    4706:	09 f0       	breq	.+2      	; 0x470a <__vector_9+0x30>
    4708:	09 95       	icall
    470a:	ff 91       	pop	r31
    470c:	ef 91       	pop	r30
    470e:	bf 91       	pop	r27
    4710:	af 91       	pop	r26
    4712:	9f 91       	pop	r25
    4714:	8f 91       	pop	r24
    4716:	7f 91       	pop	r23
    4718:	6f 91       	pop	r22
    471a:	5f 91       	pop	r21
    471c:	4f 91       	pop	r20
    471e:	3f 91       	pop	r19
    4720:	2f 91       	pop	r18
    4722:	0f 90       	pop	r0
    4724:	0f be       	out	0x3f, r0	; 63
    4726:	0f 90       	pop	r0
    4728:	1f 90       	pop	r1
    472a:	18 95       	reti

0000472c <__vector_10>:
    472c:	1f 92       	push	r1
    472e:	0f 92       	push	r0
    4730:	0f b6       	in	r0, 0x3f	; 63
    4732:	0f 92       	push	r0
    4734:	11 24       	eor	r1, r1
    4736:	2f 93       	push	r18
    4738:	3f 93       	push	r19
    473a:	4f 93       	push	r20
    473c:	5f 93       	push	r21
    473e:	6f 93       	push	r22
    4740:	7f 93       	push	r23
    4742:	8f 93       	push	r24
    4744:	9f 93       	push	r25
    4746:	af 93       	push	r26
    4748:	bf 93       	push	r27
    474a:	ef 93       	push	r30
    474c:	ff 93       	push	r31
    474e:	e0 91 ae 04 	lds	r30, 0x04AE
    4752:	f0 91 af 04 	lds	r31, 0x04AF
    4756:	30 97       	sbiw	r30, 0x00	; 0
    4758:	09 f0       	breq	.+2      	; 0x475c <__vector_10+0x30>
    475a:	09 95       	icall
    475c:	ff 91       	pop	r31
    475e:	ef 91       	pop	r30
    4760:	bf 91       	pop	r27
    4762:	af 91       	pop	r26
    4764:	9f 91       	pop	r25
    4766:	8f 91       	pop	r24
    4768:	7f 91       	pop	r23
    476a:	6f 91       	pop	r22
    476c:	5f 91       	pop	r21
    476e:	4f 91       	pop	r20
    4770:	3f 91       	pop	r19
    4772:	2f 91       	pop	r18
    4774:	0f 90       	pop	r0
    4776:	0f be       	out	0x3f, r0	; 63
    4778:	0f 90       	pop	r0
    477a:	1f 90       	pop	r1
    477c:	18 95       	reti

0000477e <__vector_11>:
    477e:	1f 92       	push	r1
    4780:	0f 92       	push	r0
    4782:	0f b6       	in	r0, 0x3f	; 63
    4784:	0f 92       	push	r0
    4786:	11 24       	eor	r1, r1
    4788:	2f 93       	push	r18
    478a:	3f 93       	push	r19
    478c:	4f 93       	push	r20
    478e:	5f 93       	push	r21
    4790:	6f 93       	push	r22
    4792:	7f 93       	push	r23
    4794:	8f 93       	push	r24
    4796:	9f 93       	push	r25
    4798:	af 93       	push	r26
    479a:	bf 93       	push	r27
    479c:	ef 93       	push	r30
    479e:	ff 93       	push	r31
    47a0:	e0 91 b0 04 	lds	r30, 0x04B0
    47a4:	f0 91 b1 04 	lds	r31, 0x04B1
    47a8:	30 97       	sbiw	r30, 0x00	; 0
    47aa:	09 f0       	breq	.+2      	; 0x47ae <__vector_11+0x30>
    47ac:	09 95       	icall
    47ae:	ff 91       	pop	r31
    47b0:	ef 91       	pop	r30
    47b2:	bf 91       	pop	r27
    47b4:	af 91       	pop	r26
    47b6:	9f 91       	pop	r25
    47b8:	8f 91       	pop	r24
    47ba:	7f 91       	pop	r23
    47bc:	6f 91       	pop	r22
    47be:	5f 91       	pop	r21
    47c0:	4f 91       	pop	r20
    47c2:	3f 91       	pop	r19
    47c4:	2f 91       	pop	r18
    47c6:	0f 90       	pop	r0
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	0f 90       	pop	r0
    47cc:	1f 90       	pop	r1
    47ce:	18 95       	reti

000047d0 <__vector_13>:
    47d0:	1f 92       	push	r1
    47d2:	0f 92       	push	r0
    47d4:	0f b6       	in	r0, 0x3f	; 63
    47d6:	0f 92       	push	r0
    47d8:	11 24       	eor	r1, r1
    47da:	2f 93       	push	r18
    47dc:	3f 93       	push	r19
    47de:	4f 93       	push	r20
    47e0:	5f 93       	push	r21
    47e2:	6f 93       	push	r22
    47e4:	7f 93       	push	r23
    47e6:	8f 93       	push	r24
    47e8:	9f 93       	push	r25
    47ea:	af 93       	push	r26
    47ec:	bf 93       	push	r27
    47ee:	ef 93       	push	r30
    47f0:	ff 93       	push	r31
    47f2:	e0 91 b4 04 	lds	r30, 0x04B4
    47f6:	f0 91 b5 04 	lds	r31, 0x04B5
    47fa:	30 97       	sbiw	r30, 0x00	; 0
    47fc:	09 f0       	breq	.+2      	; 0x4800 <__vector_13+0x30>
    47fe:	09 95       	icall
    4800:	ff 91       	pop	r31
    4802:	ef 91       	pop	r30
    4804:	bf 91       	pop	r27
    4806:	af 91       	pop	r26
    4808:	9f 91       	pop	r25
    480a:	8f 91       	pop	r24
    480c:	7f 91       	pop	r23
    480e:	6f 91       	pop	r22
    4810:	5f 91       	pop	r21
    4812:	4f 91       	pop	r20
    4814:	3f 91       	pop	r19
    4816:	2f 91       	pop	r18
    4818:	0f 90       	pop	r0
    481a:	0f be       	out	0x3f, r0	; 63
    481c:	0f 90       	pop	r0
    481e:	1f 90       	pop	r1
    4820:	18 95       	reti

00004822 <__vector_14>:
    4822:	1f 92       	push	r1
    4824:	0f 92       	push	r0
    4826:	0f b6       	in	r0, 0x3f	; 63
    4828:	0f 92       	push	r0
    482a:	11 24       	eor	r1, r1
    482c:	2f 93       	push	r18
    482e:	3f 93       	push	r19
    4830:	4f 93       	push	r20
    4832:	5f 93       	push	r21
    4834:	6f 93       	push	r22
    4836:	7f 93       	push	r23
    4838:	8f 93       	push	r24
    483a:	9f 93       	push	r25
    483c:	af 93       	push	r26
    483e:	bf 93       	push	r27
    4840:	ef 93       	push	r30
    4842:	ff 93       	push	r31
    4844:	e0 91 b6 04 	lds	r30, 0x04B6
    4848:	f0 91 b7 04 	lds	r31, 0x04B7
    484c:	30 97       	sbiw	r30, 0x00	; 0
    484e:	09 f0       	breq	.+2      	; 0x4852 <__vector_14+0x30>
    4850:	09 95       	icall
    4852:	ff 91       	pop	r31
    4854:	ef 91       	pop	r30
    4856:	bf 91       	pop	r27
    4858:	af 91       	pop	r26
    485a:	9f 91       	pop	r25
    485c:	8f 91       	pop	r24
    485e:	7f 91       	pop	r23
    4860:	6f 91       	pop	r22
    4862:	5f 91       	pop	r21
    4864:	4f 91       	pop	r20
    4866:	3f 91       	pop	r19
    4868:	2f 91       	pop	r18
    486a:	0f 90       	pop	r0
    486c:	0f be       	out	0x3f, r0	; 63
    486e:	0f 90       	pop	r0
    4870:	1f 90       	pop	r1
    4872:	18 95       	reti

00004874 <__vector_12>:
    4874:	1f 92       	push	r1
    4876:	0f 92       	push	r0
    4878:	0f b6       	in	r0, 0x3f	; 63
    487a:	0f 92       	push	r0
    487c:	11 24       	eor	r1, r1
    487e:	2f 93       	push	r18
    4880:	3f 93       	push	r19
    4882:	4f 93       	push	r20
    4884:	5f 93       	push	r21
    4886:	6f 93       	push	r22
    4888:	7f 93       	push	r23
    488a:	8f 93       	push	r24
    488c:	9f 93       	push	r25
    488e:	af 93       	push	r26
    4890:	bf 93       	push	r27
    4892:	ef 93       	push	r30
    4894:	ff 93       	push	r31
    4896:	e0 91 b2 04 	lds	r30, 0x04B2
    489a:	f0 91 b3 04 	lds	r31, 0x04B3
    489e:	30 97       	sbiw	r30, 0x00	; 0
    48a0:	09 f0       	breq	.+2      	; 0x48a4 <__vector_12+0x30>
    48a2:	09 95       	icall
    48a4:	ff 91       	pop	r31
    48a6:	ef 91       	pop	r30
    48a8:	bf 91       	pop	r27
    48aa:	af 91       	pop	r26
    48ac:	9f 91       	pop	r25
    48ae:	8f 91       	pop	r24
    48b0:	7f 91       	pop	r23
    48b2:	6f 91       	pop	r22
    48b4:	5f 91       	pop	r21
    48b6:	4f 91       	pop	r20
    48b8:	3f 91       	pop	r19
    48ba:	2f 91       	pop	r18
    48bc:	0f 90       	pop	r0
    48be:	0f be       	out	0x3f, r0	; 63
    48c0:	0f 90       	pop	r0
    48c2:	1f 90       	pop	r1
    48c4:	18 95       	reti

000048c6 <__vector_15>:
    48c6:	1f 92       	push	r1
    48c8:	0f 92       	push	r0
    48ca:	0f b6       	in	r0, 0x3f	; 63
    48cc:	0f 92       	push	r0
    48ce:	11 24       	eor	r1, r1
    48d0:	2f 93       	push	r18
    48d2:	3f 93       	push	r19
    48d4:	4f 93       	push	r20
    48d6:	5f 93       	push	r21
    48d8:	6f 93       	push	r22
    48da:	7f 93       	push	r23
    48dc:	8f 93       	push	r24
    48de:	9f 93       	push	r25
    48e0:	af 93       	push	r26
    48e2:	bf 93       	push	r27
    48e4:	ef 93       	push	r30
    48e6:	ff 93       	push	r31
    48e8:	e0 91 b8 04 	lds	r30, 0x04B8
    48ec:	f0 91 b9 04 	lds	r31, 0x04B9
    48f0:	30 97       	sbiw	r30, 0x00	; 0
    48f2:	09 f0       	breq	.+2      	; 0x48f6 <__vector_15+0x30>
    48f4:	09 95       	icall
    48f6:	ff 91       	pop	r31
    48f8:	ef 91       	pop	r30
    48fa:	bf 91       	pop	r27
    48fc:	af 91       	pop	r26
    48fe:	9f 91       	pop	r25
    4900:	8f 91       	pop	r24
    4902:	7f 91       	pop	r23
    4904:	6f 91       	pop	r22
    4906:	5f 91       	pop	r21
    4908:	4f 91       	pop	r20
    490a:	3f 91       	pop	r19
    490c:	2f 91       	pop	r18
    490e:	0f 90       	pop	r0
    4910:	0f be       	out	0x3f, r0	; 63
    4912:	0f 90       	pop	r0
    4914:	1f 90       	pop	r1
    4916:	18 95       	reti

00004918 <__vector_4>:
    4918:	1f 92       	push	r1
    491a:	0f 92       	push	r0
    491c:	0f b6       	in	r0, 0x3f	; 63
    491e:	0f 92       	push	r0
    4920:	11 24       	eor	r1, r1
    4922:	2f 93       	push	r18
    4924:	3f 93       	push	r19
    4926:	4f 93       	push	r20
    4928:	5f 93       	push	r21
    492a:	6f 93       	push	r22
    492c:	7f 93       	push	r23
    492e:	8f 93       	push	r24
    4930:	9f 93       	push	r25
    4932:	af 93       	push	r26
    4934:	bf 93       	push	r27
    4936:	ef 93       	push	r30
    4938:	ff 93       	push	r31
    493a:	e0 91 a2 04 	lds	r30, 0x04A2
    493e:	f0 91 a3 04 	lds	r31, 0x04A3
    4942:	30 97       	sbiw	r30, 0x00	; 0
    4944:	09 f0       	breq	.+2      	; 0x4948 <__vector_4+0x30>
    4946:	09 95       	icall
    4948:	ff 91       	pop	r31
    494a:	ef 91       	pop	r30
    494c:	bf 91       	pop	r27
    494e:	af 91       	pop	r26
    4950:	9f 91       	pop	r25
    4952:	8f 91       	pop	r24
    4954:	7f 91       	pop	r23
    4956:	6f 91       	pop	r22
    4958:	5f 91       	pop	r21
    495a:	4f 91       	pop	r20
    495c:	3f 91       	pop	r19
    495e:	2f 91       	pop	r18
    4960:	0f 90       	pop	r0
    4962:	0f be       	out	0x3f, r0	; 63
    4964:	0f 90       	pop	r0
    4966:	1f 90       	pop	r1
    4968:	18 95       	reti

0000496a <__vector_5>:
    496a:	1f 92       	push	r1
    496c:	0f 92       	push	r0
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	0f 92       	push	r0
    4972:	11 24       	eor	r1, r1
    4974:	2f 93       	push	r18
    4976:	3f 93       	push	r19
    4978:	4f 93       	push	r20
    497a:	5f 93       	push	r21
    497c:	6f 93       	push	r22
    497e:	7f 93       	push	r23
    4980:	8f 93       	push	r24
    4982:	9f 93       	push	r25
    4984:	af 93       	push	r26
    4986:	bf 93       	push	r27
    4988:	ef 93       	push	r30
    498a:	ff 93       	push	r31
    498c:	e0 91 a4 04 	lds	r30, 0x04A4
    4990:	f0 91 a5 04 	lds	r31, 0x04A5
    4994:	30 97       	sbiw	r30, 0x00	; 0
    4996:	09 f0       	breq	.+2      	; 0x499a <__vector_5+0x30>
    4998:	09 95       	icall
    499a:	ff 91       	pop	r31
    499c:	ef 91       	pop	r30
    499e:	bf 91       	pop	r27
    49a0:	af 91       	pop	r26
    49a2:	9f 91       	pop	r25
    49a4:	8f 91       	pop	r24
    49a6:	7f 91       	pop	r23
    49a8:	6f 91       	pop	r22
    49aa:	5f 91       	pop	r21
    49ac:	4f 91       	pop	r20
    49ae:	3f 91       	pop	r19
    49b0:	2f 91       	pop	r18
    49b2:	0f 90       	pop	r0
    49b4:	0f be       	out	0x3f, r0	; 63
    49b6:	0f 90       	pop	r0
    49b8:	1f 90       	pop	r1
    49ba:	18 95       	reti

000049bc <__vector_6>:
    49bc:	1f 92       	push	r1
    49be:	0f 92       	push	r0
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	0f 92       	push	r0
    49c4:	11 24       	eor	r1, r1
    49c6:	2f 93       	push	r18
    49c8:	3f 93       	push	r19
    49ca:	4f 93       	push	r20
    49cc:	5f 93       	push	r21
    49ce:	6f 93       	push	r22
    49d0:	7f 93       	push	r23
    49d2:	8f 93       	push	r24
    49d4:	9f 93       	push	r25
    49d6:	af 93       	push	r26
    49d8:	bf 93       	push	r27
    49da:	ef 93       	push	r30
    49dc:	ff 93       	push	r31
    49de:	e0 91 a6 04 	lds	r30, 0x04A6
    49e2:	f0 91 a7 04 	lds	r31, 0x04A7
    49e6:	30 97       	sbiw	r30, 0x00	; 0
    49e8:	09 f0       	breq	.+2      	; 0x49ec <__vector_6+0x30>
    49ea:	09 95       	icall
    49ec:	ff 91       	pop	r31
    49ee:	ef 91       	pop	r30
    49f0:	bf 91       	pop	r27
    49f2:	af 91       	pop	r26
    49f4:	9f 91       	pop	r25
    49f6:	8f 91       	pop	r24
    49f8:	7f 91       	pop	r23
    49fa:	6f 91       	pop	r22
    49fc:	5f 91       	pop	r21
    49fe:	4f 91       	pop	r20
    4a00:	3f 91       	pop	r19
    4a02:	2f 91       	pop	r18
    4a04:	0f 90       	pop	r0
    4a06:	0f be       	out	0x3f, r0	; 63
    4a08:	0f 90       	pop	r0
    4a0a:	1f 90       	pop	r1
    4a0c:	18 95       	reti

00004a0e <__vector_7>:
    4a0e:	1f 92       	push	r1
    4a10:	0f 92       	push	r0
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	0f 92       	push	r0
    4a16:	11 24       	eor	r1, r1
    4a18:	2f 93       	push	r18
    4a1a:	3f 93       	push	r19
    4a1c:	4f 93       	push	r20
    4a1e:	5f 93       	push	r21
    4a20:	6f 93       	push	r22
    4a22:	7f 93       	push	r23
    4a24:	8f 93       	push	r24
    4a26:	9f 93       	push	r25
    4a28:	af 93       	push	r26
    4a2a:	bf 93       	push	r27
    4a2c:	ef 93       	push	r30
    4a2e:	ff 93       	push	r31
    4a30:	e0 91 a8 04 	lds	r30, 0x04A8
    4a34:	f0 91 a9 04 	lds	r31, 0x04A9
    4a38:	30 97       	sbiw	r30, 0x00	; 0
    4a3a:	09 f0       	breq	.+2      	; 0x4a3e <__vector_7+0x30>
    4a3c:	09 95       	icall
    4a3e:	ff 91       	pop	r31
    4a40:	ef 91       	pop	r30
    4a42:	bf 91       	pop	r27
    4a44:	af 91       	pop	r26
    4a46:	9f 91       	pop	r25
    4a48:	8f 91       	pop	r24
    4a4a:	7f 91       	pop	r23
    4a4c:	6f 91       	pop	r22
    4a4e:	5f 91       	pop	r21
    4a50:	4f 91       	pop	r20
    4a52:	3f 91       	pop	r19
    4a54:	2f 91       	pop	r18
    4a56:	0f 90       	pop	r0
    4a58:	0f be       	out	0x3f, r0	; 63
    4a5a:	0f 90       	pop	r0
    4a5c:	1f 90       	pop	r1
    4a5e:	18 95       	reti

00004a60 <ISR_attach>:
    4a60:	e8 2f       	mov	r30, r24
    4a62:	80 32       	cpi	r24, 0x20	; 32
    4a64:	68 f4       	brcc	.+26     	; 0x4a80 <ISR_attach+0x20>
    4a66:	80 51       	subi	r24, 0x10	; 16
    4a68:	83 30       	cpi	r24, 0x03	; 3
    4a6a:	50 f0       	brcs	.+20     	; 0x4a80 <ISR_attach+0x20>
    4a6c:	f0 e0       	ldi	r31, 0x00	; 0
    4a6e:	ee 0f       	add	r30, r30
    4a70:	ff 1f       	adc	r31, r31
    4a72:	e6 56       	subi	r30, 0x66	; 102
    4a74:	fb 4f       	sbci	r31, 0xFB	; 251
    4a76:	20 81       	ld	r18, Z
    4a78:	31 81       	ldd	r19, Z+1	; 0x01
    4a7a:	71 83       	std	Z+1, r23	; 0x01
    4a7c:	60 83       	st	Z, r22
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <ISR_attach+0x24>
    4a80:	20 e0       	ldi	r18, 0x00	; 0
    4a82:	30 e0       	ldi	r19, 0x00	; 0
    4a84:	c9 01       	movw	r24, r18
    4a86:	08 95       	ret

00004a88 <ISR_open>:
    4a88:	80 e1       	ldi	r24, 0x10	; 16
    4a8a:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    4a8e:	88 23       	and	r24, r24
    4a90:	61 f4       	brne	.+24     	; 0x4aaa <ISR_open+0x22>
    4a92:	ea e9       	ldi	r30, 0x9A	; 154
    4a94:	f4 e0       	ldi	r31, 0x04	; 4
    4a96:	11 92       	st	Z+, r1
    4a98:	11 92       	st	Z+, r1
    4a9a:	84 e0       	ldi	r24, 0x04	; 4
    4a9c:	ea 3d       	cpi	r30, 0xDA	; 218
    4a9e:	f8 07       	cpc	r31, r24
    4aa0:	d1 f7       	brne	.-12     	; 0x4a96 <ISR_open+0xe>
    4aa2:	80 e1       	ldi	r24, 0x10	; 16
    4aa4:	61 e0       	ldi	r22, 0x01	; 1
    4aa6:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    4aaa:	80 e1       	ldi	r24, 0x10	; 16
    4aac:	91 e0       	ldi	r25, 0x01	; 1
    4aae:	08 95       	ret

00004ab0 <__LCD_init>:
    4ab0:	23 9a       	sbi	0x04, 3	; 4
    4ab2:	08 95       	ret

00004ab4 <__LCD_putchar>:
    4ab4:	ff 92       	push	r15
    4ab6:	0f 93       	push	r16
    4ab8:	1f 93       	push	r17
    4aba:	cf 93       	push	r28
    4abc:	df 93       	push	r29
    4abe:	f8 2e       	mov	r15, r24
    4ac0:	8a e0       	ldi	r24, 0x0A	; 10
    4ac2:	f8 16       	cp	r15, r24
    4ac4:	b1 f0       	breq	.+44     	; 0x4af2 <__LCD_putchar+0x3e>
    4ac6:	8f 15       	cp	r24, r15
    4ac8:	48 f0       	brcs	.+18     	; 0x4adc <__LCD_putchar+0x28>
    4aca:	e8 e0       	ldi	r30, 0x08	; 8
    4acc:	fe 16       	cp	r15, r30
    4ace:	b9 f1       	breq	.+110    	; 0x4b3e <__LCD_putchar+0x8a>
    4ad0:	ef 15       	cp	r30, r15
    4ad2:	38 f1       	brcs	.+78     	; 0x4b22 <__LCD_putchar+0x6e>
    4ad4:	f7 e0       	ldi	r31, 0x07	; 7
    4ad6:	ff 16       	cp	r15, r31
    4ad8:	51 f4       	brne	.+20     	; 0x4aee <__LCD_putchar+0x3a>
    4ada:	3b c0       	rjmp	.+118    	; 0x4b52 <__LCD_putchar+0x9e>
    4adc:	8d e0       	ldi	r24, 0x0D	; 13
    4ade:	f8 16       	cp	r15, r24
    4ae0:	59 f0       	breq	.+22     	; 0x4af8 <__LCD_putchar+0x44>
    4ae2:	eb e1       	ldi	r30, 0x1B	; 27
    4ae4:	fe 16       	cp	r15, r30
    4ae6:	89 f0       	breq	.+34     	; 0x4b0a <__LCD_putchar+0x56>
    4ae8:	fc e0       	ldi	r31, 0x0C	; 12
    4aea:	ff 16       	cp	r15, r31
    4aec:	41 f0       	breq	.+16     	; 0x4afe <__LCD_putchar+0x4a>
    4aee:	01 e0       	ldi	r16, 0x01	; 1
    4af0:	41 c0       	rjmp	.+130    	; 0x4b74 <__LCD_putchar+0xc0>
    4af2:	10 92 03 08 	sts	0x0803, r1
    4af6:	03 c0       	rjmp	.+6      	; 0x4afe <__LCD_putchar+0x4a>
    4af8:	10 92 03 08 	sts	0x0803, r1
    4afc:	3a c0       	rjmp	.+116    	; 0x4b72 <__LCD_putchar+0xbe>
    4afe:	80 91 04 08 	lds	r24, 0x0804
    4b02:	81 50       	subi	r24, 0x01	; 1
    4b04:	80 93 04 08 	sts	0x0804, r24
    4b08:	34 c0       	rjmp	.+104    	; 0x4b72 <__LCD_putchar+0xbe>
    4b0a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <LCD_clear>
    4b0e:	14 c0       	rjmp	.+40     	; 0x4b38 <__LCD_putchar+0x84>
    4b10:	80 e0       	ldi	r24, 0x00	; 0
    4b12:	61 e0       	ldi	r22, 0x01	; 1
    4b14:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    4b18:	80 91 03 08 	lds	r24, 0x0803
    4b1c:	8f 5f       	subi	r24, 0xFF	; 255
    4b1e:	80 93 03 08 	sts	0x0803, r24
    4b22:	80 91 03 08 	lds	r24, 0x0803
    4b26:	87 ff       	sbrs	r24, 7
    4b28:	f3 cf       	rjmp	.-26     	; 0x4b10 <__LCD_putchar+0x5c>
    4b2a:	10 92 03 08 	sts	0x0803, r1
    4b2e:	80 91 04 08 	lds	r24, 0x0804
    4b32:	81 50       	subi	r24, 0x01	; 1
    4b34:	80 93 04 08 	sts	0x0804, r24
    4b38:	00 e0       	ldi	r16, 0x00	; 0
    4b3a:	11 e0       	ldi	r17, 0x01	; 1
    4b3c:	1c c0       	rjmp	.+56     	; 0x4b76 <__LCD_putchar+0xc2>
    4b3e:	80 91 03 08 	lds	r24, 0x0803
    4b42:	88 23       	and	r24, r24
    4b44:	b1 f0       	breq	.+44     	; 0x4b72 <__LCD_putchar+0xbe>
    4b46:	80 91 03 08 	lds	r24, 0x0803
    4b4a:	86 50       	subi	r24, 0x06	; 6
    4b4c:	80 93 03 08 	sts	0x0803, r24
    4b50:	10 c0       	rjmp	.+32     	; 0x4b72 <__LCD_putchar+0xbe>
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <SPKR_open>
    4b58:	64 ef       	ldi	r22, 0xF4	; 244
    4b5a:	71 e0       	ldi	r23, 0x01	; 1
    4b5c:	80 e0       	ldi	r24, 0x00	; 0
    4b5e:	90 e0       	ldi	r25, 0x00	; 0
    4b60:	4d e7       	ldi	r20, 0x7D	; 125
    4b62:	50 e0       	ldi	r21, 0x00	; 0
    4b64:	24 e6       	ldi	r18, 0x64	; 100
    4b66:	30 e0       	ldi	r19, 0x00	; 0
    4b68:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <SPKR_play_beep>
    4b6c:	81 e0       	ldi	r24, 0x01	; 1
    4b6e:	0e 94 40 27 	call	0x4e80	; 0x4e80 <SPKR_close>
    4b72:	00 e0       	ldi	r16, 0x00	; 0
    4b74:	10 e0       	ldi	r17, 0x00	; 0
    4b76:	80 91 04 08 	lds	r24, 0x0804
    4b7a:	60 91 03 08 	lds	r22, 0x0803
    4b7e:	0e 94 90 1b 	call	0x3720	; 0x3720 <LCD_set_PGC_addr>
    4b82:	00 23       	and	r16, r16
    4b84:	51 f1       	breq	.+84     	; 0x4bda <__LCD_putchar+0x126>
    4b86:	85 e0       	ldi	r24, 0x05	; 5
    4b88:	f8 9e       	mul	r15, r24
    4b8a:	c0 01       	movw	r24, r0
    4b8c:	11 24       	eor	r1, r1
    4b8e:	ec 01       	movw	r28, r24
    4b90:	c3 55       	subi	r28, 0x53	; 83
    4b92:	df 4f       	sbci	r29, 0xFF	; 255
    4b94:	8c 01       	movw	r16, r24
    4b96:	0e 54       	subi	r16, 0x4E	; 78
    4b98:	1f 4f       	sbci	r17, 0xFF	; 255
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	84 91       	lpm	r24, Z+
    4b9e:	61 e0       	ldi	r22, 0x01	; 1
    4ba0:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    4ba4:	21 96       	adiw	r28, 0x01	; 1
    4ba6:	c0 17       	cp	r28, r16
    4ba8:	d1 07       	cpc	r29, r17
    4baa:	b9 f7       	brne	.-18     	; 0x4b9a <__LCD_putchar+0xe6>
    4bac:	80 e0       	ldi	r24, 0x00	; 0
    4bae:	61 e0       	ldi	r22, 0x01	; 1
    4bb0:	0e 94 a9 1b 	call	0x3752	; 0x3752 <LCD_write>
    4bb4:	80 91 03 08 	lds	r24, 0x0803
    4bb8:	8a 5f       	subi	r24, 0xFA	; 250
    4bba:	80 93 03 08 	sts	0x0803, r24
    4bbe:	80 91 03 08 	lds	r24, 0x0803
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	8c 37       	cpi	r24, 0x7C	; 124
    4bc6:	91 05       	cpc	r25, r1
    4bc8:	3c f0       	brlt	.+14     	; 0x4bd8 <__LCD_putchar+0x124>
    4bca:	10 92 03 08 	sts	0x0803, r1
    4bce:	80 91 04 08 	lds	r24, 0x0804
    4bd2:	81 50       	subi	r24, 0x01	; 1
    4bd4:	80 93 04 08 	sts	0x0804, r24
    4bd8:	11 e0       	ldi	r17, 0x01	; 1
    4bda:	80 91 04 08 	lds	r24, 0x0804
    4bde:	83 70       	andi	r24, 0x03	; 3
    4be0:	80 93 04 08 	sts	0x0804, r24
    4be4:	11 30       	cpi	r17, 0x01	; 1
    4be6:	59 f4       	brne	.+22     	; 0x4bfe <__LCD_putchar+0x14a>
    4be8:	80 91 05 08 	lds	r24, 0x0805
    4bec:	81 30       	cpi	r24, 0x01	; 1
    4bee:	39 f4       	brne	.+14     	; 0x4bfe <__LCD_putchar+0x14a>
    4bf0:	e0 91 06 08 	lds	r30, 0x0806
    4bf4:	f0 91 07 08 	lds	r31, 0x0807
    4bf8:	30 97       	sbiw	r30, 0x00	; 0
    4bfa:	09 f0       	breq	.+2      	; 0x4bfe <__LCD_putchar+0x14a>
    4bfc:	09 95       	icall
    4bfe:	80 e0       	ldi	r24, 0x00	; 0
    4c00:	90 e0       	ldi	r25, 0x00	; 0
    4c02:	df 91       	pop	r29
    4c04:	cf 91       	pop	r28
    4c06:	1f 91       	pop	r17
    4c08:	0f 91       	pop	r16
    4c0a:	ff 90       	pop	r15
    4c0c:	08 95       	ret

00004c0e <__LED_clr_pattern>:
    4c0e:	85 fd       	sbrc	r24, 5
    4c10:	5d 98       	cbi	0x0b, 5	; 11
    4c12:	86 fd       	sbrc	r24, 6
    4c14:	5e 98       	cbi	0x0b, 6	; 11
    4c16:	08 95       	ret

00004c18 <__LED_init>:
    4c18:	55 9a       	sbi	0x0a, 5	; 10
    4c1a:	56 9a       	sbi	0x0a, 6	; 10
    4c1c:	08 95       	ret

00004c1e <__LED_set_pattern>:
    4c1e:	85 fd       	sbrc	r24, 5
    4c20:	5d 9a       	sbi	0x0b, 5	; 11
    4c22:	86 fd       	sbrc	r24, 6
    4c24:	5e 9a       	sbi	0x0b, 6	; 11
    4c26:	08 95       	ret

00004c28 <ATMEGA_open>:
    4c28:	80 e0       	ldi	r24, 0x00	; 0
    4c2a:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    4c2e:	88 23       	and	r24, r24
    4c30:	51 f4       	brne	.+20     	; 0x4c46 <ATMEGA_open+0x1e>
    4c32:	f8 94       	cli
    4c34:	0e 94 0b 29 	call	0x5216	; 0x5216 <__ATMEGA_init>
    4c38:	81 e0       	ldi	r24, 0x01	; 1
    4c3a:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <ATMEGA_set_clk_mode>
    4c3e:	80 e0       	ldi	r24, 0x00	; 0
    4c40:	61 e0       	ldi	r22, 0x01	; 1
    4c42:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    4c46:	80 e0       	ldi	r24, 0x00	; 0
    4c48:	91 e0       	ldi	r25, 0x01	; 1
    4c4a:	08 95       	ret

00004c4c <ATMEGA_set_clk_mode>:
    4c4c:	81 30       	cpi	r24, 0x01	; 1
    4c4e:	49 f0       	breq	.+18     	; 0x4c62 <ATMEGA_set_clk_mode+0x16>
    4c50:	f8 94       	cli
    4c52:	81 30       	cpi	r24, 0x01	; 1
    4c54:	20 f1       	brcs	.+72     	; 0x4c9e <ATMEGA_set_clk_mode+0x52>
    4c56:	82 30       	cpi	r24, 0x02	; 2
    4c58:	b1 f0       	breq	.+44     	; 0x4c86 <ATMEGA_set_clk_mode+0x3a>
    4c5a:	83 30       	cpi	r24, 0x03	; 3
    4c5c:	09 f0       	breq	.+2      	; 0x4c60 <ATMEGA_set_clk_mode+0x14>
    4c5e:	45 c0       	rjmp	.+138    	; 0x4cea <ATMEGA_set_clk_mode+0x9e>
    4c60:	17 c0       	rjmp	.+46     	; 0x4c90 <ATMEGA_set_clk_mode+0x44>
    4c62:	2c 9a       	sbi	0x05, 4	; 5
    4c64:	80 e8       	ldi	r24, 0x80	; 128
    4c66:	80 93 61 00 	sts	0x0061, r24
    4c6a:	10 92 61 00 	sts	0x0061, r1
    4c6e:	80 e0       	ldi	r24, 0x00	; 0
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	00 00       	nop
    4c74:	01 96       	adiw	r24, 0x01	; 1
    4c76:	88 32       	cpi	r24, 0x28	; 40
    4c78:	91 05       	cpc	r25, r1
    4c7a:	d9 f7       	brne	.-10     	; 0x4c72 <ATMEGA_set_clk_mode+0x26>
    4c7c:	10 92 68 00 	sts	0x0068, r1
    4c80:	10 92 6b 00 	sts	0x006B, r1
    4c84:	08 95       	ret
    4c86:	80 e8       	ldi	r24, 0x80	; 128
    4c88:	80 93 61 00 	sts	0x0061, r24
    4c8c:	83 e0       	ldi	r24, 0x03	; 3
    4c8e:	04 c0       	rjmp	.+8      	; 0x4c98 <ATMEGA_set_clk_mode+0x4c>
    4c90:	80 e8       	ldi	r24, 0x80	; 128
    4c92:	80 93 61 00 	sts	0x0061, r24
    4c96:	88 e0       	ldi	r24, 0x08	; 8
    4c98:	80 93 61 00 	sts	0x0061, r24
    4c9c:	28 c0       	rjmp	.+80     	; 0x4cee <ATMEGA_set_clk_mode+0xa2>
    4c9e:	80 e0       	ldi	r24, 0x00	; 0
    4ca0:	90 e0       	ldi	r25, 0x00	; 0
    4ca2:	00 00       	nop
    4ca4:	01 96       	adiw	r24, 0x01	; 1
    4ca6:	2d e6       	ldi	r18, 0x6D	; 109
    4ca8:	80 36       	cpi	r24, 0x60	; 96
    4caa:	92 07       	cpc	r25, r18
    4cac:	d1 f7       	brne	.-12     	; 0x4ca2 <ATMEGA_set_clk_mode+0x56>
    4cae:	2c 98       	cbi	0x05, 4	; 5
    4cb0:	80 e0       	ldi	r24, 0x00	; 0
    4cb2:	90 e0       	ldi	r25, 0x00	; 0
    4cb4:	00 00       	nop
    4cb6:	01 96       	adiw	r24, 0x01	; 1
    4cb8:	2d e6       	ldi	r18, 0x6D	; 109
    4cba:	80 36       	cpi	r24, 0x60	; 96
    4cbc:	92 07       	cpc	r25, r18
    4cbe:	d1 f7       	brne	.-12     	; 0x4cb4 <ATMEGA_set_clk_mode+0x68>
    4cc0:	10 92 7a 00 	sts	0x007A, r1
    4cc4:	8f ef       	ldi	r24, 0xFF	; 255
    4cc6:	80 93 64 00 	sts	0x0064, r24
    4cca:	80 91 68 00 	lds	r24, 0x0068
    4cce:	81 60       	ori	r24, 0x01	; 1
    4cd0:	80 93 68 00 	sts	0x0068, r24
    4cd4:	80 91 6b 00 	lds	r24, 0x006B
    4cd8:	84 60       	ori	r24, 0x04	; 4
    4cda:	80 93 6b 00 	sts	0x006B, r24
    4cde:	78 94       	sei
    4ce0:	83 b7       	in	r24, 0x33	; 51
    4ce2:	81 60       	ori	r24, 0x01	; 1
    4ce4:	83 bf       	out	0x33, r24	; 51
    4ce6:	88 95       	sleep
    4ce8:	08 95       	ret
    4cea:	82 30       	cpi	r24, 0x02	; 2
    4cec:	08 f0       	brcs	.+2      	; 0x4cf0 <ATMEGA_set_clk_mode+0xa4>
    4cee:	78 94       	sei
    4cf0:	08 95       	ret

00004cf2 <SPI_open>:
    4cf2:	0f 93       	push	r16
    4cf4:	1f 93       	push	r17
    4cf6:	0e 94 37 29 	call	0x526e	; 0x526e <__SPI_init>
    4cfa:	80 e0       	ldi	r24, 0x00	; 0
    4cfc:	66 e2       	ldi	r22, 0x26	; 38
    4cfe:	79 e2       	ldi	r23, 0x29	; 41
    4d00:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <SPI_set_config_func>
    4d04:	81 e0       	ldi	r24, 0x01	; 1
    4d06:	6e e1       	ldi	r22, 0x1E	; 30
    4d08:	79 e2       	ldi	r23, 0x29	; 41
    4d0a:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <SPI_set_config_func>
    4d0e:	82 e0       	ldi	r24, 0x02	; 2
    4d10:	66 e1       	ldi	r22, 0x16	; 22
    4d12:	79 e2       	ldi	r23, 0x29	; 41
    4d14:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <SPI_set_config_func>
    4d18:	86 e0       	ldi	r24, 0x06	; 6
    4d1a:	6e e2       	ldi	r22, 0x2E	; 46
    4d1c:	79 e2       	ldi	r23, 0x29	; 41
    4d1e:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <SPI_set_config_func>
    4d22:	0e e0       	ldi	r16, 0x0E	; 14
    4d24:	19 e2       	ldi	r17, 0x29	; 41
    4d26:	83 e0       	ldi	r24, 0x03	; 3
    4d28:	b8 01       	movw	r22, r16
    4d2a:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <SPI_set_config_func>
    4d2e:	84 e0       	ldi	r24, 0x04	; 4
    4d30:	b8 01       	movw	r22, r16
    4d32:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <SPI_set_config_func>
    4d36:	85 e0       	ldi	r24, 0x05	; 5
    4d38:	b8 01       	movw	r22, r16
    4d3a:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <SPI_set_config_func>
    4d3e:	87 e0       	ldi	r24, 0x07	; 7
    4d40:	b8 01       	movw	r22, r16
    4d42:	0e 94 c4 26 	call	0x4d88	; 0x4d88 <SPI_set_config_func>
    4d46:	82 e0       	ldi	r24, 0x02	; 2
    4d48:	61 e0       	ldi	r22, 0x01	; 1
    4d4a:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    4d4e:	8f ef       	ldi	r24, 0xFF	; 255
    4d50:	80 93 08 08 	sts	0x0808, r24
    4d54:	87 e0       	ldi	r24, 0x07	; 7
    4d56:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <SPI_set_slave_addr>
    4d5a:	82 e0       	ldi	r24, 0x02	; 2
    4d5c:	91 e0       	ldi	r25, 0x01	; 1
    4d5e:	1f 91       	pop	r17
    4d60:	0f 91       	pop	r16
    4d62:	08 95       	ret

00004d64 <SPI_receive>:
    4d64:	1f 93       	push	r17
    4d66:	16 2f       	mov	r17, r22
    4d68:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <SPI_set_slave_addr>
    4d6c:	82 e0       	ldi	r24, 0x02	; 2
    4d6e:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    4d72:	81 30       	cpi	r24, 0x01	; 1
    4d74:	11 f0       	breq	.+4      	; 0x4d7a <SPI_receive+0x16>
    4d76:	80 e0       	ldi	r24, 0x00	; 0
    4d78:	05 c0       	rjmp	.+10     	; 0x4d84 <SPI_receive+0x20>
    4d7a:	1e bd       	out	0x2e, r17	; 46
    4d7c:	0d b4       	in	r0, 0x2d	; 45
    4d7e:	07 fe       	sbrs	r0, 7
    4d80:	fd cf       	rjmp	.-6      	; 0x4d7c <SPI_receive+0x18>
    4d82:	8e b5       	in	r24, 0x2e	; 46
    4d84:	1f 91       	pop	r17
    4d86:	08 95       	ret

00004d88 <SPI_set_config_func>:
    4d88:	e8 2f       	mov	r30, r24
    4d8a:	f0 e0       	ldi	r31, 0x00	; 0
    4d8c:	ee 0f       	add	r30, r30
    4d8e:	ff 1f       	adc	r31, r31
    4d90:	e6 52       	subi	r30, 0x26	; 38
    4d92:	fb 4f       	sbci	r31, 0xFB	; 251
    4d94:	71 83       	std	Z+1, r23	; 0x01
    4d96:	60 83       	st	Z, r22
    4d98:	08 95       	ret

00004d9a <__SPKR_TIMER1_COMPA_vect>:
    4d9a:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <SPKR_clk>
    4d9e:	08 95       	ret

00004da0 <SPKR_clk>:
    4da0:	80 91 ec 04 	lds	r24, 0x04EC
    4da4:	90 91 ed 04 	lds	r25, 0x04ED
    4da8:	a0 91 ee 04 	lds	r26, 0x04EE
    4dac:	b0 91 ef 04 	lds	r27, 0x04EF
    4db0:	20 91 f0 04 	lds	r18, 0x04F0
    4db4:	30 91 f1 04 	lds	r19, 0x04F1
    4db8:	40 91 f2 04 	lds	r20, 0x04F2
    4dbc:	50 91 f3 04 	lds	r21, 0x04F3
    4dc0:	28 0f       	add	r18, r24
    4dc2:	39 1f       	adc	r19, r25
    4dc4:	4a 1f       	adc	r20, r26
    4dc6:	5b 1f       	adc	r21, r27
    4dc8:	20 93 ec 04 	sts	0x04EC, r18
    4dcc:	30 93 ed 04 	sts	0x04ED, r19
    4dd0:	40 93 ee 04 	sts	0x04EE, r20
    4dd4:	50 93 ef 04 	sts	0x04EF, r21
    4dd8:	80 91 ec 04 	lds	r24, 0x04EC
    4ddc:	90 91 ed 04 	lds	r25, 0x04ED
    4de0:	a0 91 ee 04 	lds	r26, 0x04EE
    4de4:	b0 91 ef 04 	lds	r27, 0x04EF
    4de8:	88 51       	subi	r24, 0x18	; 24
    4dea:	96 4f       	sbci	r25, 0xF6	; 246
    4dec:	a0 40       	sbci	r26, 0x00	; 0
    4dee:	b0 40       	sbci	r27, 0x00	; 0
    4df0:	bc f0       	brlt	.+46     	; 0x4e20 <SPKR_clk+0x80>
    4df2:	8b b1       	in	r24, 0x0b	; 11
    4df4:	80 58       	subi	r24, 0x80	; 128
    4df6:	8b b9       	out	0x0b, r24	; 11
    4df8:	80 91 ec 04 	lds	r24, 0x04EC
    4dfc:	90 91 ed 04 	lds	r25, 0x04ED
    4e00:	a0 91 ee 04 	lds	r26, 0x04EE
    4e04:	b0 91 ef 04 	lds	r27, 0x04EF
    4e08:	88 51       	subi	r24, 0x18	; 24
    4e0a:	96 4f       	sbci	r25, 0xF6	; 246
    4e0c:	a0 40       	sbci	r26, 0x00	; 0
    4e0e:	b0 40       	sbci	r27, 0x00	; 0
    4e10:	80 93 ec 04 	sts	0x04EC, r24
    4e14:	90 93 ed 04 	sts	0x04ED, r25
    4e18:	a0 93 ee 04 	sts	0x04EE, r26
    4e1c:	b0 93 ef 04 	sts	0x04EF, r27
    4e20:	08 95       	ret

00004e22 <__SPKR_close_beep_mode>:
    4e22:	8a e0       	ldi	r24, 0x0A	; 10
    4e24:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    4e28:	81 30       	cpi	r24, 0x01	; 1
    4e2a:	41 f4       	brne	.+16     	; 0x4e3c <__SPKR_close_beep_mode+0x1a>
    4e2c:	0e 94 55 29 	call	0x52aa	; 0x52aa <__SPKR_close>
    4e30:	10 92 eb 04 	sts	0x04EB, r1
    4e34:	8a e0       	ldi	r24, 0x0A	; 10
    4e36:	60 e0       	ldi	r22, 0x00	; 0
    4e38:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    4e3c:	08 95       	ret

00004e3e <__SPKR_close_tone_mode>:
    4e3e:	89 e0       	ldi	r24, 0x09	; 9
    4e40:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    4e44:	81 30       	cpi	r24, 0x01	; 1
    4e46:	d9 f4       	brne	.+54     	; 0x4e7e <__SPKR_close_tone_mode+0x40>
    4e48:	80 91 ea 04 	lds	r24, 0x04EA
    4e4c:	88 23       	and	r24, r24
    4e4e:	11 f0       	breq	.+4      	; 0x4e54 <__SPKR_close_tone_mode+0x16>
    4e50:	0e 94 c1 27 	call	0x4f82	; 0x4f82 <__SPKR_stop>
    4e54:	82 e0       	ldi	r24, 0x02	; 2
    4e56:	0e 94 55 29 	call	0x52aa	; 0x52aa <__SPKR_close>
    4e5a:	80 91 f8 04 	lds	r24, 0x04F8
    4e5e:	90 91 f9 04 	lds	r25, 0x04F9
    4e62:	00 97       	sbiw	r24, 0x00	; 0
    4e64:	31 f0       	breq	.+12     	; 0x4e72 <__SPKR_close_tone_mode+0x34>
    4e66:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <free>
    4e6a:	10 92 f9 04 	sts	0x04F9, r1
    4e6e:	10 92 f8 04 	sts	0x04F8, r1
    4e72:	10 92 ea 04 	sts	0x04EA, r1
    4e76:	89 e0       	ldi	r24, 0x09	; 9
    4e78:	60 e0       	ldi	r22, 0x00	; 0
    4e7a:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    4e7e:	08 95       	ret

00004e80 <SPKR_close>:
    4e80:	81 30       	cpi	r24, 0x01	; 1
    4e82:	29 f0       	breq	.+10     	; 0x4e8e <SPKR_close+0xe>
    4e84:	82 30       	cpi	r24, 0x02	; 2
    4e86:	29 f4       	brne	.+10     	; 0x4e92 <SPKR_close+0x12>
    4e88:	0e 94 1f 27 	call	0x4e3e	; 0x4e3e <__SPKR_close_tone_mode>
    4e8c:	08 95       	ret
    4e8e:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__SPKR_close_beep_mode>
    4e92:	08 95       	ret

00004e94 <__SPKR_init>:
    4e94:	98 2f       	mov	r25, r24
    4e96:	80 91 ea 04 	lds	r24, 0x04EA
    4e9a:	88 23       	and	r24, r24
    4e9c:	31 f4       	brne	.+12     	; 0x4eaa <__SPKR_init+0x16>
    4e9e:	80 91 eb 04 	lds	r24, 0x04EB
    4ea2:	88 23       	and	r24, r24
    4ea4:	11 f4       	brne	.+4      	; 0x4eaa <__SPKR_init+0x16>
    4ea6:	57 9a       	sbi	0x0a, 7	; 10
    4ea8:	5f 98       	cbi	0x0b, 7	; 11
    4eaa:	80 91 ea 04 	lds	r24, 0x04EA
    4eae:	88 23       	and	r24, r24
    4eb0:	d1 f4       	brne	.+52     	; 0x4ee6 <__SPKR_init+0x52>
    4eb2:	92 30       	cpi	r25, 0x02	; 2
    4eb4:	c1 f4       	brne	.+48     	; 0x4ee6 <__SPKR_init+0x52>
    4eb6:	10 92 80 00 	sts	0x0080, r1
    4eba:	10 92 81 00 	sts	0x0081, r1
    4ebe:	80 91 81 00 	lds	r24, 0x0081
    4ec2:	88 60       	ori	r24, 0x08	; 8
    4ec4:	80 93 81 00 	sts	0x0081, r24
    4ec8:	80 91 81 00 	lds	r24, 0x0081
    4ecc:	81 60       	ori	r24, 0x01	; 1
    4ece:	80 93 81 00 	sts	0x0081, r24
    4ed2:	10 92 85 00 	sts	0x0085, r1
    4ed6:	10 92 84 00 	sts	0x0084, r1
    4eda:	81 e0       	ldi	r24, 0x01	; 1
    4edc:	80 93 89 00 	sts	0x0089, r24
    4ee0:	80 e9       	ldi	r24, 0x90	; 144
    4ee2:	80 93 88 00 	sts	0x0088, r24
    4ee6:	08 95       	ret

00004ee8 <SPKR_play_beep>:
    4ee8:	8f 92       	push	r8
    4eea:	9f 92       	push	r9
    4eec:	af 92       	push	r10
    4eee:	bf 92       	push	r11
    4ef0:	cf 92       	push	r12
    4ef2:	df 92       	push	r13
    4ef4:	ef 92       	push	r14
    4ef6:	ff 92       	push	r15
    4ef8:	0f 93       	push	r16
    4efa:	1f 93       	push	r17
    4efc:	cf 93       	push	r28
    4efe:	df 93       	push	r29
    4f00:	4b 01       	movw	r8, r22
    4f02:	5c 01       	movw	r10, r24
    4f04:	ea 01       	movw	r28, r20
    4f06:	b9 01       	movw	r22, r18
    4f08:	21 15       	cp	r18, r1
    4f0a:	31 05       	cpc	r19, r1
    4f0c:	39 f1       	breq	.+78     	; 0x4f5c <SPKR_play_beep+0x74>
    4f0e:	9e 01       	movw	r18, r28
    4f10:	44 27       	eor	r20, r20
    4f12:	37 fd       	sbrc	r19, 7
    4f14:	40 95       	com	r20
    4f16:	54 2f       	mov	r21, r20
    4f18:	65 36       	cpi	r22, 0x65	; 101
    4f1a:	71 05       	cpc	r23, r1
    4f1c:	10 f0       	brcs	.+4      	; 0x4f22 <SPKR_play_beep+0x3a>
    4f1e:	64 e6       	ldi	r22, 0x64	; 100
    4f20:	70 e0       	ldi	r23, 0x00	; 0
    4f22:	80 e0       	ldi	r24, 0x00	; 0
    4f24:	90 e0       	ldi	r25, 0x00	; 0
    4f26:	0e 94 a3 34 	call	0x6946	; 0x6946 <__mulsi3>
    4f2a:	24 e6       	ldi	r18, 0x64	; 100
    4f2c:	30 e0       	ldi	r19, 0x00	; 0
    4f2e:	40 e0       	ldi	r20, 0x00	; 0
    4f30:	50 e0       	ldi	r21, 0x00	; 0
    4f32:	0e 94 c2 34 	call	0x6984	; 0x6984 <__udivmodsi4>
    4f36:	79 01       	movw	r14, r18
    4f38:	8a 01       	movw	r16, r20
    4f3a:	c5 01       	movw	r24, r10
    4f3c:	b4 01       	movw	r22, r8
    4f3e:	0e 94 3e 29 	call	0x527c	; 0x527c <SPKR_beep>
    4f42:	c7 01       	movw	r24, r14
    4f44:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
    4f48:	60 e0       	ldi	r22, 0x00	; 0
    4f4a:	70 e0       	ldi	r23, 0x00	; 0
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	0e 94 3e 29 	call	0x527c	; 0x527c <SPKR_beep>
    4f54:	ce 01       	movw	r24, r28
    4f56:	8e 19       	sub	r24, r14
    4f58:	9f 09       	sbc	r25, r15
    4f5a:	04 c0       	rjmp	.+8      	; 0x4f64 <SPKR_play_beep+0x7c>
    4f5c:	41 15       	cp	r20, r1
    4f5e:	51 05       	cpc	r21, r1
    4f60:	19 f0       	breq	.+6      	; 0x4f68 <SPKR_play_beep+0x80>
    4f62:	ca 01       	movw	r24, r20
    4f64:	0e 94 a5 21 	call	0x434a	; 0x434a <TMRSRVC_delay>
    4f68:	df 91       	pop	r29
    4f6a:	cf 91       	pop	r28
    4f6c:	1f 91       	pop	r17
    4f6e:	0f 91       	pop	r16
    4f70:	ff 90       	pop	r15
    4f72:	ef 90       	pop	r14
    4f74:	df 90       	pop	r13
    4f76:	cf 90       	pop	r12
    4f78:	bf 90       	pop	r11
    4f7a:	af 90       	pop	r10
    4f7c:	9f 90       	pop	r9
    4f7e:	8f 90       	pop	r8
    4f80:	08 95       	ret

00004f82 <__SPKR_stop>:
    4f82:	ef e6       	ldi	r30, 0x6F	; 111
    4f84:	f0 e0       	ldi	r31, 0x00	; 0
    4f86:	80 81       	ld	r24, Z
    4f88:	8d 7f       	andi	r24, 0xFD	; 253
    4f8a:	80 83       	st	Z, r24
    4f8c:	08 95       	ret

00004f8e <STEPPER_go>:
    4f8e:	98 2f       	mov	r25, r24
    4f90:	81 e0       	ldi	r24, 0x01	; 1
    4f92:	80 93 ed 07 	sts	0x07ED, r24
    4f96:	91 30       	cpi	r25, 0x01	; 1
    4f98:	51 f0       	breq	.+20     	; 0x4fae <STEPPER_go+0x20>
    4f9a:	91 30       	cpi	r25, 0x01	; 1
    4f9c:	18 f0       	brcs	.+6      	; 0x4fa4 <STEPPER_go+0x16>
    4f9e:	92 30       	cpi	r25, 0x02	; 2
    4fa0:	41 f4       	brne	.+16     	; 0x4fb2 <STEPPER_go+0x24>
    4fa2:	03 c0       	rjmp	.+6      	; 0x4faa <STEPPER_go+0x1c>
    4fa4:	10 92 d5 07 	sts	0x07D5, r1
    4fa8:	04 c0       	rjmp	.+8      	; 0x4fb2 <STEPPER_go+0x24>
    4faa:	10 92 d5 07 	sts	0x07D5, r1
    4fae:	10 92 d6 07 	sts	0x07D6, r1
    4fb2:	10 92 ed 07 	sts	0x07ED, r1
    4fb6:	08 95       	ret

00004fb8 <__STEPPER_init>:
    4fb8:	3a 9a       	sbi	0x07, 2	; 7
    4fba:	3b 9a       	sbi	0x07, 3	; 7
    4fbc:	3c 9a       	sbi	0x07, 4	; 7
    4fbe:	3d 9a       	sbi	0x07, 5	; 7
    4fc0:	3e 9a       	sbi	0x07, 6	; 7
    4fc2:	3f 9a       	sbi	0x07, 7	; 7
    4fc4:	88 b1       	in	r24, 0x08	; 8
    4fc6:	83 70       	andi	r24, 0x03	; 3
    4fc8:	88 b9       	out	0x08, r24	; 8
    4fca:	08 95       	ret

00004fcc <STEPPER_set_stop_mode>:
    4fcc:	98 2f       	mov	r25, r24
    4fce:	81 e0       	ldi	r24, 0x01	; 1
    4fd0:	80 93 ed 07 	sts	0x07ED, r24
    4fd4:	91 30       	cpi	r25, 0x01	; 1
    4fd6:	51 f0       	breq	.+20     	; 0x4fec <STEPPER_set_stop_mode+0x20>
    4fd8:	91 30       	cpi	r25, 0x01	; 1
    4fda:	18 f0       	brcs	.+6      	; 0x4fe2 <STEPPER_set_stop_mode+0x16>
    4fdc:	92 30       	cpi	r25, 0x02	; 2
    4fde:	41 f4       	brne	.+16     	; 0x4ff0 <STEPPER_set_stop_mode+0x24>
    4fe0:	03 c0       	rjmp	.+6      	; 0x4fe8 <STEPPER_set_stop_mode+0x1c>
    4fe2:	60 93 d7 07 	sts	0x07D7, r22
    4fe6:	04 c0       	rjmp	.+8      	; 0x4ff0 <STEPPER_set_stop_mode+0x24>
    4fe8:	60 93 d7 07 	sts	0x07D7, r22
    4fec:	60 93 d8 07 	sts	0x07D8, r22
    4ff0:	10 92 ed 07 	sts	0x07ED, r1
    4ff4:	08 95       	ret

00004ff6 <STEPPER_setup_decels>:
    4ff6:	0f 93       	push	r16
    4ff8:	1f 93       	push	r17
    4ffa:	cf 93       	push	r28
    4ffc:	df 93       	push	r29
    4ffe:	eb 01       	movw	r28, r22
    5000:	8a 01       	movw	r16, r20
    5002:	81 30       	cpi	r24, 0x01	; 1
    5004:	01 f1       	breq	.+64     	; 0x5046 <STEPPER_setup_decels+0x50>
    5006:	81 30       	cpi	r24, 0x01	; 1
    5008:	18 f0       	brcs	.+6      	; 0x5010 <STEPPER_setup_decels+0x1a>
    500a:	82 30       	cpi	r24, 0x02	; 2
    500c:	61 f5       	brne	.+88     	; 0x5066 <STEPPER_setup_decels+0x70>
    500e:	0d c0       	rjmp	.+26     	; 0x502a <STEPPER_setup_decels+0x34>
    5010:	80 91 c1 07 	lds	r24, 0x07C1
    5014:	90 91 c2 07 	lds	r25, 0x07C2
    5018:	89 2b       	or	r24, r25
    501a:	11 f0       	breq	.+4      	; 0x5020 <STEPPER_setup_decels+0x2a>
    501c:	80 e0       	ldi	r24, 0x00	; 0
    501e:	1a c0       	rjmp	.+52     	; 0x5054 <STEPPER_setup_decels+0x5e>
    5020:	10 92 ce 07 	sts	0x07CE, r1
    5024:	10 92 cd 07 	sts	0x07CD, r1
    5028:	1e c0       	rjmp	.+60     	; 0x5066 <STEPPER_setup_decels+0x70>
    502a:	80 91 c1 07 	lds	r24, 0x07C1
    502e:	90 91 c2 07 	lds	r25, 0x07C2
    5032:	89 2b       	or	r24, r25
    5034:	21 f0       	breq	.+8      	; 0x503e <STEPPER_setup_decels+0x48>
    5036:	80 e0       	ldi	r24, 0x00	; 0
    5038:	0e 94 71 29 	call	0x52e2	; 0x52e2 <STEPPER_set_decel_step_values>
    503c:	04 c0       	rjmp	.+8      	; 0x5046 <STEPPER_setup_decels+0x50>
    503e:	10 92 ce 07 	sts	0x07CE, r1
    5042:	10 92 cd 07 	sts	0x07CD, r1
    5046:	80 91 c3 07 	lds	r24, 0x07C3
    504a:	90 91 c4 07 	lds	r25, 0x07C4
    504e:	89 2b       	or	r24, r25
    5050:	31 f0       	breq	.+12     	; 0x505e <STEPPER_setup_decels+0x68>
    5052:	81 e0       	ldi	r24, 0x01	; 1
    5054:	be 01       	movw	r22, r28
    5056:	a8 01       	movw	r20, r16
    5058:	0e 94 71 29 	call	0x52e2	; 0x52e2 <STEPPER_set_decel_step_values>
    505c:	04 c0       	rjmp	.+8      	; 0x5066 <STEPPER_setup_decels+0x70>
    505e:	10 92 d0 07 	sts	0x07D0, r1
    5062:	10 92 cf 07 	sts	0x07CF, r1
    5066:	df 91       	pop	r29
    5068:	cf 91       	pop	r28
    506a:	1f 91       	pop	r17
    506c:	0f 91       	pop	r16
    506e:	08 95       	ret

00005070 <SYS_init>:
    5070:	10 92 f0 07 	sts	0x07F0, r1
    5074:	10 92 f1 07 	sts	0x07F1, r1
    5078:	10 92 f5 07 	sts	0x07F5, r1
    507c:	10 92 f2 07 	sts	0x07F2, r1
    5080:	10 92 f4 07 	sts	0x07F4, r1
    5084:	10 92 f6 07 	sts	0x07F6, r1
    5088:	10 92 f7 07 	sts	0x07F7, r1
    508c:	10 92 f8 07 	sts	0x07F8, r1
    5090:	10 92 f9 07 	sts	0x07F9, r1
    5094:	10 92 fa 07 	sts	0x07FA, r1
    5098:	10 92 fb 07 	sts	0x07FB, r1
    509c:	10 92 fc 07 	sts	0x07FC, r1
    50a0:	10 92 fd 07 	sts	0x07FD, r1
    50a4:	10 92 fe 07 	sts	0x07FE, r1
    50a8:	10 92 ff 07 	sts	0x07FF, r1
    50ac:	10 92 00 08 	sts	0x0800, r1
    50b0:	10 92 01 08 	sts	0x0801, r1
    50b4:	08 95       	ret

000050b6 <TMRSRVC_insert>:
    50b6:	cf 92       	push	r12
    50b8:	df 92       	push	r13
    50ba:	ef 92       	push	r14
    50bc:	ff 92       	push	r15
    50be:	0f 93       	push	r16
    50c0:	1f 93       	push	r17
    50c2:	cf 93       	push	r28
    50c4:	df 93       	push	r29
    50c6:	ec 01       	movw	r28, r24
    50c8:	80 91 27 08 	lds	r24, 0x0827
    50cc:	88 23       	and	r24, r24
    50ce:	39 f4       	brne	.+14     	; 0x50de <TMRSRVC_insert+0x28>
    50d0:	d0 93 29 08 	sts	0x0829, r29
    50d4:	c0 93 28 08 	sts	0x0828, r28
    50d8:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <TMRSRVC_start>
    50dc:	47 c0       	rjmp	.+142    	; 0x516c <TMRSRVC_insert+0xb6>
    50de:	c0 90 28 08 	lds	r12, 0x0828
    50e2:	d0 90 29 08 	lds	r13, 0x0829
    50e6:	00 e0       	ldi	r16, 0x00	; 0
    50e8:	10 e0       	ldi	r17, 0x00	; 0
    50ea:	ee 24       	eor	r14, r14
    50ec:	ff 24       	eor	r15, r15
    50ee:	37 c0       	rjmp	.+110    	; 0x515e <TMRSRVC_insert+0xa8>
    50f0:	a8 81       	ld	r26, Y
    50f2:	b9 81       	ldd	r27, Y+1	; 0x01
    50f4:	fd 01       	movw	r30, r26
    50f6:	64 81       	ldd	r22, Z+4	; 0x04
    50f8:	75 81       	ldd	r23, Z+5	; 0x05
    50fa:	f6 01       	movw	r30, r12
    50fc:	40 81       	ld	r20, Z
    50fe:	51 81       	ldd	r21, Z+1	; 0x01
    5100:	fa 01       	movw	r30, r20
    5102:	84 81       	ldd	r24, Z+4	; 0x04
    5104:	95 81       	ldd	r25, Z+5	; 0x05
    5106:	9b 01       	movw	r18, r22
    5108:	28 1b       	sub	r18, r24
    510a:	39 0b       	sbc	r19, r25
    510c:	37 ff       	sbrs	r19, 7
    510e:	0f c0       	rjmp	.+30     	; 0x512e <TMRSRVC_insert+0x78>
    5110:	86 1b       	sub	r24, r22
    5112:	97 0b       	sbc	r25, r23
    5114:	95 83       	std	Z+5, r25	; 0x05
    5116:	84 83       	std	Z+4, r24	; 0x04
    5118:	db 82       	std	Y+3, r13	; 0x03
    511a:	ca 82       	std	Y+2, r12	; 0x02
    511c:	01 2b       	or	r16, r17
    511e:	29 f4       	brne	.+10     	; 0x512a <TMRSRVC_insert+0x74>
    5120:	d0 93 29 08 	sts	0x0829, r29
    5124:	c0 93 28 08 	sts	0x0828, r28
    5128:	21 c0       	rjmp	.+66     	; 0x516c <TMRSRVC_insert+0xb6>
    512a:	f7 01       	movw	r30, r14
    512c:	0c c0       	rjmp	.+24     	; 0x5146 <TMRSRVC_insert+0x90>
    512e:	f6 01       	movw	r30, r12
    5130:	82 81       	ldd	r24, Z+2	; 0x02
    5132:	93 81       	ldd	r25, Z+3	; 0x03
    5134:	21 15       	cp	r18, r1
    5136:	31 05       	cpc	r19, r1
    5138:	49 f4       	brne	.+18     	; 0x514c <TMRSRVC_insert+0x96>
    513a:	fd 01       	movw	r30, r26
    513c:	15 82       	std	Z+5, r1	; 0x05
    513e:	14 82       	std	Z+4, r1	; 0x04
    5140:	9b 83       	std	Y+3, r25	; 0x03
    5142:	8a 83       	std	Y+2, r24	; 0x02
    5144:	f6 01       	movw	r30, r12
    5146:	d3 83       	std	Z+3, r29	; 0x03
    5148:	c2 83       	std	Z+2, r28	; 0x02
    514a:	10 c0       	rjmp	.+32     	; 0x516c <TMRSRVC_insert+0xb6>
    514c:	fd 01       	movw	r30, r26
    514e:	35 83       	std	Z+5, r19	; 0x05
    5150:	24 83       	std	Z+4, r18	; 0x04
    5152:	00 97       	sbiw	r24, 0x00	; 0
    5154:	b9 f3       	breq	.-18     	; 0x5144 <TMRSRVC_insert+0x8e>
    5156:	0f 5f       	subi	r16, 0xFF	; 255
    5158:	1f 4f       	sbci	r17, 0xFF	; 255
    515a:	76 01       	movw	r14, r12
    515c:	6c 01       	movw	r12, r24
    515e:	80 91 27 08 	lds	r24, 0x0827
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	08 17       	cp	r16, r24
    5166:	19 07       	cpc	r17, r25
    5168:	18 f2       	brcs	.-122    	; 0x50f0 <TMRSRVC_insert+0x3a>
    516a:	ec cf       	rjmp	.-40     	; 0x5144 <TMRSRVC_insert+0x8e>
    516c:	80 91 27 08 	lds	r24, 0x0827
    5170:	8f 5f       	subi	r24, 0xFF	; 255
    5172:	80 93 27 08 	sts	0x0827, r24
    5176:	df 91       	pop	r29
    5178:	cf 91       	pop	r28
    517a:	1f 91       	pop	r17
    517c:	0f 91       	pop	r16
    517e:	ff 90       	pop	r15
    5180:	ef 90       	pop	r14
    5182:	df 90       	pop	r13
    5184:	cf 90       	pop	r12
    5186:	08 95       	ret

00005188 <TMRSRVC_open>:
    5188:	88 e0       	ldi	r24, 0x08	; 8
    518a:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    518e:	88 23       	and	r24, r24
    5190:	b9 f4       	brne	.+46     	; 0x51c0 <TMRSRVC_open+0x38>
    5192:	10 92 27 08 	sts	0x0827, r1
    5196:	10 92 29 08 	sts	0x0829, r1
    519a:	10 92 28 08 	sts	0x0828, r1
    519e:	10 92 fa 04 	sts	0x04FA, r1
    51a2:	10 92 fb 04 	sts	0x04FB, r1
    51a6:	80 e1       	ldi	r24, 0x10	; 16
    51a8:	6e ed       	ldi	r22, 0xDE	; 222
    51aa:	79 e2       	ldi	r23, 0x29	; 41
    51ac:	0e 94 fa 28 	call	0x51f4	; 0x51f4 <__ISR_attach>
    51b0:	0e 94 e5 29 	call	0x53ca	; 0x53ca <__TMRSRVC_init>
    51b4:	0e 94 e3 28 	call	0x51c6	; 0x51c6 <__TMRSRVC_start>
    51b8:	88 e0       	ldi	r24, 0x08	; 8
    51ba:	61 e0       	ldi	r22, 0x01	; 1
    51bc:	0e 94 90 20 	call	0x4120	; 0x4120 <SYS_set_state>
    51c0:	88 e0       	ldi	r24, 0x08	; 8
    51c2:	91 e0       	ldi	r25, 0x01	; 1
    51c4:	08 95       	ret

000051c6 <__TMRSRVC_start>:
    51c6:	ee e6       	ldi	r30, 0x6E	; 110
    51c8:	f0 e0       	ldi	r31, 0x00	; 0
    51ca:	80 81       	ld	r24, Z
    51cc:	82 60       	ori	r24, 0x02	; 2
    51ce:	80 83       	st	Z, r24
    51d0:	08 95       	ret

000051d2 <TMRSRVC_start>:
    51d2:	81 e0       	ldi	r24, 0x01	; 1
    51d4:	80 93 fb 04 	sts	0x04FB, r24
    51d8:	08 95       	ret

000051da <I2C_enable>:
    51da:	80 91 2a 08 	lds	r24, 0x082A
    51de:	81 30       	cpi	r24, 0x01	; 1
    51e0:	29 f4       	brne	.+10     	; 0x51ec <I2C_enable+0x12>
    51e2:	80 91 bc 00 	lds	r24, 0x00BC
    51e6:	84 60       	ori	r24, 0x04	; 4
    51e8:	80 93 bc 00 	sts	0x00BC, r24
    51ec:	08 95       	ret

000051ee <__I2C_init>:
    51ee:	38 98       	cbi	0x07, 0	; 7
    51f0:	39 98       	cbi	0x07, 1	; 7
    51f2:	08 95       	ret

000051f4 <__ISR_attach>:
    51f4:	80 32       	cpi	r24, 0x20	; 32
    51f6:	18 f0       	brcs	.+6      	; 0x51fe <__ISR_attach+0xa>
    51f8:	20 e0       	ldi	r18, 0x00	; 0
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	0a c0       	rjmp	.+20     	; 0x5212 <__ISR_attach+0x1e>
    51fe:	e8 2f       	mov	r30, r24
    5200:	f0 e0       	ldi	r31, 0x00	; 0
    5202:	ee 0f       	add	r30, r30
    5204:	ff 1f       	adc	r31, r31
    5206:	e6 56       	subi	r30, 0x66	; 102
    5208:	fb 4f       	sbci	r31, 0xFB	; 251
    520a:	20 81       	ld	r18, Z
    520c:	31 81       	ldd	r19, Z+1	; 0x01
    520e:	71 83       	std	Z+1, r23	; 0x01
    5210:	60 83       	st	Z, r22
    5212:	c9 01       	movw	r24, r18
    5214:	08 95       	ret

00005216 <__ATMEGA_init>:
    5216:	24 9a       	sbi	0x04, 4	; 4
    5218:	2c 9a       	sbi	0x05, 4	; 5
    521a:	08 95       	ret

0000521c <SPI_default_config>:
    521c:	83 e5       	ldi	r24, 0x53	; 83
    521e:	8c bd       	out	0x2c, r24	; 44
    5220:	81 e0       	ldi	r24, 0x01	; 1
    5222:	8d bd       	out	0x2d, r24	; 45
    5224:	8d e0       	ldi	r24, 0x0D	; 13
    5226:	8a 95       	dec	r24
    5228:	f1 f7       	brne	.-4      	; 0x5226 <SPI_default_config+0xa>
    522a:	08 95       	ret

0000522c <SPI_ATtiny0_config>:
    522c:	83 e5       	ldi	r24, 0x53	; 83
    522e:	8c bd       	out	0x2c, r24	; 44
    5230:	1d bc       	out	0x2d, r1	; 45
    5232:	84 ef       	ldi	r24, 0xF4	; 244
    5234:	91 e0       	ldi	r25, 0x01	; 1
    5236:	01 97       	sbiw	r24, 0x01	; 1
    5238:	f1 f7       	brne	.-4      	; 0x5236 <SPI_ATtiny0_config+0xa>
    523a:	08 95       	ret

0000523c <SPI_PSXC_config>:
    523c:	8f e7       	ldi	r24, 0x7F	; 127
    523e:	8c bd       	out	0x2c, r24	; 44
    5240:	1d bc       	out	0x2d, r1	; 45
    5242:	84 ef       	ldi	r24, 0xF4	; 244
    5244:	91 e0       	ldi	r25, 0x01	; 1
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	f1 f7       	brne	.-4      	; 0x5246 <SPI_PSXC_config+0xa>
    524a:	08 95       	ret

0000524c <SPI_LCD_config>:
    524c:	83 e5       	ldi	r24, 0x53	; 83
    524e:	8c bd       	out	0x2c, r24	; 44
    5250:	81 e0       	ldi	r24, 0x01	; 1
    5252:	8d bd       	out	0x2d, r24	; 45
    5254:	8d e0       	ldi	r24, 0x0D	; 13
    5256:	8a 95       	dec	r24
    5258:	f1 f7       	brne	.-4      	; 0x5256 <SPI_LCD_config+0xa>
    525a:	08 95       	ret

0000525c <SPI_FLASH_config>:
    525c:	83 e5       	ldi	r24, 0x53	; 83
    525e:	8c bd       	out	0x2c, r24	; 44
    5260:	81 e0       	ldi	r24, 0x01	; 1
    5262:	8d bd       	out	0x2d, r24	; 45
    5264:	84 ef       	ldi	r24, 0xF4	; 244
    5266:	91 e0       	ldi	r25, 0x01	; 1
    5268:	01 97       	sbiw	r24, 0x01	; 1
    526a:	f1 f7       	brne	.-4      	; 0x5268 <SPI_FLASH_config+0xc>
    526c:	08 95       	ret

0000526e <__SPI_init>:
    526e:	25 9a       	sbi	0x04, 5	; 4
    5270:	26 98       	cbi	0x04, 6	; 4
    5272:	27 9a       	sbi	0x04, 7	; 4
    5274:	20 9a       	sbi	0x04, 0	; 4
    5276:	21 9a       	sbi	0x04, 1	; 4
    5278:	22 9a       	sbi	0x04, 2	; 4
    527a:	08 95       	ret

0000527c <SPKR_beep>:
    527c:	9b 01       	movw	r18, r22
    527e:	ac 01       	movw	r20, r24
    5280:	80 91 eb 04 	lds	r24, 0x04EB
    5284:	88 23       	and	r24, r24
    5286:	81 f0       	breq	.+32     	; 0x52a8 <SPKR_beep+0x2c>
    5288:	da 01       	movw	r26, r20
    528a:	c9 01       	movw	r24, r18
    528c:	88 0f       	add	r24, r24
    528e:	99 1f       	adc	r25, r25
    5290:	aa 1f       	adc	r26, r26
    5292:	bb 1f       	adc	r27, r27
    5294:	90 93 f7 04 	sts	0x04F7, r25
    5298:	80 93 f6 04 	sts	0x04F6, r24
    529c:	21 15       	cp	r18, r1
    529e:	31 05       	cpc	r19, r1
    52a0:	41 05       	cpc	r20, r1
    52a2:	51 05       	cpc	r21, r1
    52a4:	09 f4       	brne	.+2      	; 0x52a8 <SPKR_beep+0x2c>
    52a6:	5f 98       	cbi	0x0b, 7	; 11
    52a8:	08 95       	ret

000052aa <__SPKR_close>:
    52aa:	82 30       	cpi	r24, 0x02	; 2
    52ac:	29 f4       	brne	.+10     	; 0x52b8 <__SPKR_close+0xe>
    52ae:	80 91 81 00 	lds	r24, 0x0081
    52b2:	8e 7f       	andi	r24, 0xFE	; 254
    52b4:	80 93 81 00 	sts	0x0081, r24
    52b8:	80 91 ea 04 	lds	r24, 0x04EA
    52bc:	81 30       	cpi	r24, 0x01	; 1
    52be:	31 f4       	brne	.+12     	; 0x52cc <__SPKR_close+0x22>
    52c0:	80 91 eb 04 	lds	r24, 0x04EB
    52c4:	81 30       	cpi	r24, 0x01	; 1
    52c6:	11 f4       	brne	.+4      	; 0x52cc <__SPKR_close+0x22>
    52c8:	00 00       	nop
    52ca:	08 95       	ret
    52cc:	80 91 ea 04 	lds	r24, 0x04EA
    52d0:	81 30       	cpi	r24, 0x01	; 1
    52d2:	21 f0       	breq	.+8      	; 0x52dc <__SPKR_close+0x32>
    52d4:	80 91 eb 04 	lds	r24, 0x04EB
    52d8:	81 30       	cpi	r24, 0x01	; 1
    52da:	11 f4       	brne	.+4      	; 0x52e0 <__SPKR_close+0x36>
    52dc:	5f 98       	cbi	0x0b, 7	; 11
    52de:	57 98       	cbi	0x0a, 7	; 10
    52e0:	08 95       	ret

000052e2 <STEPPER_set_decel_step_values>:
    52e2:	ef 92       	push	r14
    52e4:	ff 92       	push	r15
    52e6:	0f 93       	push	r16
    52e8:	1f 93       	push	r17
    52ea:	cf 93       	push	r28
    52ec:	df 93       	push	r29
    52ee:	eb 01       	movw	r28, r22
    52f0:	88 23       	and	r24, r24
    52f2:	21 f0       	breq	.+8      	; 0x52fc <STEPPER_set_decel_step_values+0x1a>
    52f4:	81 30       	cpi	r24, 0x01	; 1
    52f6:	09 f0       	breq	.+2      	; 0x52fa <STEPPER_set_decel_step_values+0x18>
    52f8:	5a c0       	rjmp	.+180    	; 0x53ae <STEPPER_set_decel_step_values+0xcc>
    52fa:	2d c0       	rjmp	.+90     	; 0x5356 <STEPPER_set_decel_step_values+0x74>
    52fc:	9a 01       	movw	r18, r20
    52fe:	40 e0       	ldi	r20, 0x00	; 0
    5300:	50 e0       	ldi	r21, 0x00	; 0
    5302:	ca 01       	movw	r24, r20
    5304:	b9 01       	movw	r22, r18
    5306:	0e 94 a3 34 	call	0x6946	; 0x6946 <__mulsi3>
    530a:	20 91 c1 07 	lds	r18, 0x07C1
    530e:	30 91 c2 07 	lds	r19, 0x07C2
    5312:	22 0f       	add	r18, r18
    5314:	33 1f       	adc	r19, r19
    5316:	40 e0       	ldi	r20, 0x00	; 0
    5318:	50 e0       	ldi	r21, 0x00	; 0
    531a:	0e 94 c2 34 	call	0x6984	; 0x6984 <__udivmodsi4>
    531e:	79 01       	movw	r14, r18
    5320:	8a 01       	movw	r16, r20
    5322:	a8 01       	movw	r20, r16
    5324:	97 01       	movw	r18, r14
    5326:	22 0f       	add	r18, r18
    5328:	33 1f       	adc	r19, r19
    532a:	44 1f       	adc	r20, r20
    532c:	55 1f       	adc	r21, r21
    532e:	ce 01       	movw	r24, r28
    5330:	a0 e0       	ldi	r26, 0x00	; 0
    5332:	b0 e0       	ldi	r27, 0x00	; 0
    5334:	82 17       	cp	r24, r18
    5336:	93 07       	cpc	r25, r19
    5338:	a4 07       	cpc	r26, r20
    533a:	b5 07       	cpc	r27, r21
    533c:	28 f0       	brcs	.+10     	; 0x5348 <STEPPER_set_decel_step_values+0x66>
    533e:	f0 92 ce 07 	sts	0x07CE, r15
    5342:	e0 92 cd 07 	sts	0x07CD, r14
    5346:	33 c0       	rjmp	.+102    	; 0x53ae <STEPPER_set_decel_step_values+0xcc>
    5348:	d6 95       	lsr	r29
    534a:	c7 95       	ror	r28
    534c:	d0 93 ce 07 	sts	0x07CE, r29
    5350:	c0 93 cd 07 	sts	0x07CD, r28
    5354:	2c c0       	rjmp	.+88     	; 0x53ae <STEPPER_set_decel_step_values+0xcc>
    5356:	9a 01       	movw	r18, r20
    5358:	40 e0       	ldi	r20, 0x00	; 0
    535a:	50 e0       	ldi	r21, 0x00	; 0
    535c:	ca 01       	movw	r24, r20
    535e:	b9 01       	movw	r22, r18
    5360:	0e 94 a3 34 	call	0x6946	; 0x6946 <__mulsi3>
    5364:	20 91 c3 07 	lds	r18, 0x07C3
    5368:	30 91 c4 07 	lds	r19, 0x07C4
    536c:	22 0f       	add	r18, r18
    536e:	33 1f       	adc	r19, r19
    5370:	40 e0       	ldi	r20, 0x00	; 0
    5372:	50 e0       	ldi	r21, 0x00	; 0
    5374:	0e 94 c2 34 	call	0x6984	; 0x6984 <__udivmodsi4>
    5378:	79 01       	movw	r14, r18
    537a:	8a 01       	movw	r16, r20
    537c:	a8 01       	movw	r20, r16
    537e:	97 01       	movw	r18, r14
    5380:	22 0f       	add	r18, r18
    5382:	33 1f       	adc	r19, r19
    5384:	44 1f       	adc	r20, r20
    5386:	55 1f       	adc	r21, r21
    5388:	ce 01       	movw	r24, r28
    538a:	a0 e0       	ldi	r26, 0x00	; 0
    538c:	b0 e0       	ldi	r27, 0x00	; 0
    538e:	82 17       	cp	r24, r18
    5390:	93 07       	cpc	r25, r19
    5392:	a4 07       	cpc	r26, r20
    5394:	b5 07       	cpc	r27, r21
    5396:	28 f0       	brcs	.+10     	; 0x53a2 <STEPPER_set_decel_step_values+0xc0>
    5398:	f0 92 d0 07 	sts	0x07D0, r15
    539c:	e0 92 cf 07 	sts	0x07CF, r14
    53a0:	06 c0       	rjmp	.+12     	; 0x53ae <STEPPER_set_decel_step_values+0xcc>
    53a2:	d6 95       	lsr	r29
    53a4:	c7 95       	ror	r28
    53a6:	d0 93 d0 07 	sts	0x07D0, r29
    53aa:	c0 93 cf 07 	sts	0x07CF, r28
    53ae:	df 91       	pop	r29
    53b0:	cf 91       	pop	r28
    53b2:	1f 91       	pop	r17
    53b4:	0f 91       	pop	r16
    53b6:	ff 90       	pop	r15
    53b8:	ef 90       	pop	r14
    53ba:	08 95       	ret

000053bc <__TIMER0_COMPA_vect>:
    53bc:	0e 94 ee 29 	call	0x53dc	; 0x53dc <TMRSRVC_tick>
    53c0:	0e 94 2e 2a 	call	0x545c	; 0x545c <STEPPER_clk>
    53c4:	0e 94 07 2a 	call	0x540e	; 0x540e <SPKR_beep_clk>
    53c8:	08 95       	ret

000053ca <__TMRSRVC_init>:
    53ca:	84 b5       	in	r24, 0x24	; 36
    53cc:	82 60       	ori	r24, 0x02	; 2
    53ce:	84 bd       	out	0x24, r24	; 36
    53d0:	85 b5       	in	r24, 0x25	; 37
    53d2:	84 60       	ori	r24, 0x04	; 4
    53d4:	85 bd       	out	0x25, r24	; 37
    53d6:	8e e4       	ldi	r24, 0x4E	; 78
    53d8:	87 bd       	out	0x27, r24	; 39
    53da:	08 95       	ret

000053dc <TMRSRVC_tick>:
    53dc:	88 e0       	ldi	r24, 0x08	; 8
    53de:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    53e2:	88 23       	and	r24, r24
    53e4:	11 f4       	brne	.+4      	; 0x53ea <TMRSRVC_tick+0xe>
    53e6:	84 e0       	ldi	r24, 0x04	; 4
    53e8:	08 95       	ret
    53ea:	80 91 fb 04 	lds	r24, 0x04FB
    53ee:	88 23       	and	r24, r24
    53f0:	11 f4       	brne	.+4      	; 0x53f6 <TMRSRVC_tick+0x1a>
    53f2:	83 e0       	ldi	r24, 0x03	; 3
    53f4:	08 95       	ret
    53f6:	80 91 fa 04 	lds	r24, 0x04FA
    53fa:	88 23       	and	r24, r24
    53fc:	11 f0       	breq	.+4      	; 0x5402 <TMRSRVC_tick+0x26>
    53fe:	82 e0       	ldi	r24, 0x02	; 2
    5400:	08 95       	ret
    5402:	0e 94 7b 2c 	call	0x58f6	; 0x58f6 <TMRSRVC_process>
    5406:	81 30       	cpi	r24, 0x01	; 1
    5408:	e1 f3       	breq	.-8      	; 0x5402 <TMRSRVC_tick+0x26>
    540a:	80 e0       	ldi	r24, 0x00	; 0
    540c:	08 95       	ret

0000540e <SPKR_beep_clk>:
    540e:	80 91 eb 04 	lds	r24, 0x04EB
    5412:	81 30       	cpi	r24, 0x01	; 1
    5414:	11 f5       	brne	.+68     	; 0x545a <SPKR_beep_clk+0x4c>
    5416:	80 91 f4 04 	lds	r24, 0x04F4
    541a:	90 91 f5 04 	lds	r25, 0x04F5
    541e:	20 91 f6 04 	lds	r18, 0x04F6
    5422:	30 91 f7 04 	lds	r19, 0x04F7
    5426:	28 0f       	add	r18, r24
    5428:	39 1f       	adc	r19, r25
    542a:	30 93 f5 04 	sts	0x04F5, r19
    542e:	20 93 f4 04 	sts	0x04F4, r18
    5432:	80 91 f4 04 	lds	r24, 0x04F4
    5436:	90 91 f5 04 	lds	r25, 0x04F5
    543a:	88 5e       	subi	r24, 0xE8	; 232
    543c:	93 40       	sbci	r25, 0x03	; 3
    543e:	6c f0       	brlt	.+26     	; 0x545a <SPKR_beep_clk+0x4c>
    5440:	8b b1       	in	r24, 0x0b	; 11
    5442:	80 58       	subi	r24, 0x80	; 128
    5444:	8b b9       	out	0x0b, r24	; 11
    5446:	80 91 f4 04 	lds	r24, 0x04F4
    544a:	90 91 f5 04 	lds	r25, 0x04F5
    544e:	88 5e       	subi	r24, 0xE8	; 232
    5450:	93 40       	sbci	r25, 0x03	; 3
    5452:	90 93 f5 04 	sts	0x04F5, r25
    5456:	80 93 f4 04 	sts	0x04F4, r24
    545a:	08 95       	ret

0000545c <STEPPER_clk>:
    545c:	87 e0       	ldi	r24, 0x07	; 7
    545e:	0e 94 48 20 	call	0x4090	; 0x4090 <SYS_get_state>
    5462:	81 30       	cpi	r24, 0x01	; 1
    5464:	09 f0       	breq	.+2      	; 0x5468 <STEPPER_clk+0xc>
    5466:	aa c0       	rjmp	.+340    	; 0x55bc <STEPPER_clk+0x160>
    5468:	80 91 c1 07 	lds	r24, 0x07C1
    546c:	90 91 c2 07 	lds	r25, 0x07C2
    5470:	89 2b       	or	r24, r25
    5472:	09 f1       	breq	.+66     	; 0x54b6 <STEPPER_clk+0x5a>
    5474:	80 91 e5 07 	lds	r24, 0x07E5
    5478:	90 91 e6 07 	lds	r25, 0x07E6
    547c:	20 91 c1 07 	lds	r18, 0x07C1
    5480:	30 91 c2 07 	lds	r19, 0x07C2
    5484:	82 0f       	add	r24, r18
    5486:	93 1f       	adc	r25, r19
    5488:	90 93 e6 07 	sts	0x07E6, r25
    548c:	80 93 e5 07 	sts	0x07E5, r24
    5490:	80 91 e5 07 	lds	r24, 0x07E5
    5494:	90 91 e6 07 	lds	r25, 0x07E6
    5498:	88 5e       	subi	r24, 0xE8	; 232
    549a:	93 40       	sbci	r25, 0x03	; 3
    549c:	a4 f0       	brlt	.+40     	; 0x54c6 <STEPPER_clk+0x6a>
    549e:	80 91 e5 07 	lds	r24, 0x07E5
    54a2:	90 91 e6 07 	lds	r25, 0x07E6
    54a6:	88 5e       	subi	r24, 0xE8	; 232
    54a8:	93 40       	sbci	r25, 0x03	; 3
    54aa:	90 93 e6 07 	sts	0x07E6, r25
    54ae:	80 93 e5 07 	sts	0x07E5, r24
    54b2:	41 e0       	ldi	r20, 0x01	; 1
    54b4:	09 c0       	rjmp	.+18     	; 0x54c8 <STEPPER_clk+0x6c>
    54b6:	80 91 b9 07 	lds	r24, 0x07B9
    54ba:	90 91 ba 07 	lds	r25, 0x07BA
    54be:	90 93 be 07 	sts	0x07BE, r25
    54c2:	80 93 bd 07 	sts	0x07BD, r24
    54c6:	40 e0       	ldi	r20, 0x00	; 0
    54c8:	80 91 c3 07 	lds	r24, 0x07C3
    54cc:	90 91 c4 07 	lds	r25, 0x07C4
    54d0:	89 2b       	or	r24, r25
    54d2:	09 f1       	breq	.+66     	; 0x5516 <STEPPER_clk+0xba>
    54d4:	80 91 e7 07 	lds	r24, 0x07E7
    54d8:	90 91 e8 07 	lds	r25, 0x07E8
    54dc:	20 91 c3 07 	lds	r18, 0x07C3
    54e0:	30 91 c4 07 	lds	r19, 0x07C4
    54e4:	82 0f       	add	r24, r18
    54e6:	93 1f       	adc	r25, r19
    54e8:	90 93 e8 07 	sts	0x07E8, r25
    54ec:	80 93 e7 07 	sts	0x07E7, r24
    54f0:	80 91 e7 07 	lds	r24, 0x07E7
    54f4:	90 91 e8 07 	lds	r25, 0x07E8
    54f8:	88 5e       	subi	r24, 0xE8	; 232
    54fa:	93 40       	sbci	r25, 0x03	; 3
    54fc:	a4 f0       	brlt	.+40     	; 0x5526 <STEPPER_clk+0xca>
    54fe:	80 91 e7 07 	lds	r24, 0x07E7
    5502:	90 91 e8 07 	lds	r25, 0x07E8
    5506:	88 5e       	subi	r24, 0xE8	; 232
    5508:	93 40       	sbci	r25, 0x03	; 3
    550a:	90 93 e8 07 	sts	0x07E8, r25
    550e:	80 93 e7 07 	sts	0x07E7, r24
    5512:	61 e0       	ldi	r22, 0x01	; 1
    5514:	09 c0       	rjmp	.+18     	; 0x5528 <STEPPER_clk+0xcc>
    5516:	80 91 bb 07 	lds	r24, 0x07BB
    551a:	90 91 bc 07 	lds	r25, 0x07BC
    551e:	90 93 c0 07 	sts	0x07C0, r25
    5522:	80 93 bf 07 	sts	0x07BF, r24
    5526:	60 e0       	ldi	r22, 0x00	; 0
    5528:	84 2f       	mov	r24, r20
    552a:	0e 94 df 2a 	call	0x55be	; 0x55be <STEPPER_process_accel>
    552e:	80 91 e1 07 	lds	r24, 0x07E1
    5532:	90 91 e2 07 	lds	r25, 0x07E2
    5536:	20 91 bd 07 	lds	r18, 0x07BD
    553a:	30 91 be 07 	lds	r19, 0x07BE
    553e:	28 0f       	add	r18, r24
    5540:	39 1f       	adc	r19, r25
    5542:	30 93 e2 07 	sts	0x07E2, r19
    5546:	20 93 e1 07 	sts	0x07E1, r18
    554a:	80 91 e1 07 	lds	r24, 0x07E1
    554e:	90 91 e2 07 	lds	r25, 0x07E2
    5552:	88 5e       	subi	r24, 0xE8	; 232
    5554:	93 40       	sbci	r25, 0x03	; 3
    5556:	14 f4       	brge	.+4      	; 0x555c <STEPPER_clk+0x100>
    5558:	40 e0       	ldi	r20, 0x00	; 0
    555a:	0b c0       	rjmp	.+22     	; 0x5572 <STEPPER_clk+0x116>
    555c:	80 91 e1 07 	lds	r24, 0x07E1
    5560:	90 91 e2 07 	lds	r25, 0x07E2
    5564:	88 5e       	subi	r24, 0xE8	; 232
    5566:	93 40       	sbci	r25, 0x03	; 3
    5568:	90 93 e2 07 	sts	0x07E2, r25
    556c:	80 93 e1 07 	sts	0x07E1, r24
    5570:	41 e0       	ldi	r20, 0x01	; 1
    5572:	80 91 e3 07 	lds	r24, 0x07E3
    5576:	90 91 e4 07 	lds	r25, 0x07E4
    557a:	20 91 bf 07 	lds	r18, 0x07BF
    557e:	30 91 c0 07 	lds	r19, 0x07C0
    5582:	28 0f       	add	r18, r24
    5584:	39 1f       	adc	r19, r25
    5586:	30 93 e4 07 	sts	0x07E4, r19
    558a:	20 93 e3 07 	sts	0x07E3, r18
    558e:	80 91 e3 07 	lds	r24, 0x07E3
    5592:	90 91 e4 07 	lds	r25, 0x07E4
    5596:	88 5e       	subi	r24, 0xE8	; 232
    5598:	93 40       	sbci	r25, 0x03	; 3
    559a:	14 f4       	brge	.+4      	; 0x55a0 <STEPPER_clk+0x144>
    559c:	60 e0       	ldi	r22, 0x00	; 0
    559e:	0b c0       	rjmp	.+22     	; 0x55b6 <STEPPER_clk+0x15a>
    55a0:	80 91 e3 07 	lds	r24, 0x07E3
    55a4:	90 91 e4 07 	lds	r25, 0x07E4
    55a8:	88 5e       	subi	r24, 0xE8	; 232
    55aa:	93 40       	sbci	r25, 0x03	; 3
    55ac:	90 93 e4 07 	sts	0x07E4, r25
    55b0:	80 93 e3 07 	sts	0x07E3, r24
    55b4:	61 e0       	ldi	r22, 0x01	; 1
    55b6:	84 2f       	mov	r24, r20
    55b8:	0e 94 24 2b 	call	0x5648	; 0x5648 <STEPPER_process_run_mode>
    55bc:	08 95       	ret

000055be <STEPPER_process_accel>:
    55be:	88 23       	and	r24, r24
    55c0:	f1 f0       	breq	.+60     	; 0x55fe <STEPPER_process_accel+0x40>
    55c2:	20 91 b9 07 	lds	r18, 0x07B9
    55c6:	30 91 ba 07 	lds	r19, 0x07BA
    55ca:	80 91 bd 07 	lds	r24, 0x07BD
    55ce:	90 91 be 07 	lds	r25, 0x07BE
    55d2:	28 1b       	sub	r18, r24
    55d4:	39 0b       	sbc	r19, r25
    55d6:	12 16       	cp	r1, r18
    55d8:	13 06       	cpc	r1, r19
    55da:	34 f4       	brge	.+12     	; 0x55e8 <STEPPER_process_accel+0x2a>
    55dc:	80 91 bd 07 	lds	r24, 0x07BD
    55e0:	90 91 be 07 	lds	r25, 0x07BE
    55e4:	01 96       	adiw	r24, 0x01	; 1
    55e6:	07 c0       	rjmp	.+14     	; 0x55f6 <STEPPER_process_accel+0x38>
    55e8:	23 2b       	or	r18, r19
    55ea:	49 f0       	breq	.+18     	; 0x55fe <STEPPER_process_accel+0x40>
    55ec:	80 91 bd 07 	lds	r24, 0x07BD
    55f0:	90 91 be 07 	lds	r25, 0x07BE
    55f4:	01 97       	sbiw	r24, 0x01	; 1
    55f6:	90 93 be 07 	sts	0x07BE, r25
    55fa:	80 93 bd 07 	sts	0x07BD, r24
    55fe:	66 23       	and	r22, r22
    5600:	11 f1       	breq	.+68     	; 0x5646 <STEPPER_process_accel+0x88>
    5602:	20 91 bb 07 	lds	r18, 0x07BB
    5606:	30 91 bc 07 	lds	r19, 0x07BC
    560a:	80 91 bf 07 	lds	r24, 0x07BF
    560e:	90 91 c0 07 	lds	r25, 0x07C0
    5612:	28 1b       	sub	r18, r24
    5614:	39 0b       	sbc	r19, r25
    5616:	12 16       	cp	r1, r18
    5618:	13 06       	cpc	r1, r19
    561a:	54 f4       	brge	.+20     	; 0x5630 <STEPPER_process_accel+0x72>
    561c:	80 91 bf 07 	lds	r24, 0x07BF
    5620:	90 91 c0 07 	lds	r25, 0x07C0
    5624:	01 96       	adiw	r24, 0x01	; 1
    5626:	90 93 c0 07 	sts	0x07C0, r25
    562a:	80 93 bf 07 	sts	0x07BF, r24
    562e:	08 95       	ret
    5630:	23 2b       	or	r18, r19
    5632:	49 f0       	breq	.+18     	; 0x5646 <STEPPER_process_accel+0x88>
    5634:	80 91 bf 07 	lds	r24, 0x07BF
    5638:	90 91 c0 07 	lds	r25, 0x07C0
    563c:	01 97       	sbiw	r24, 0x01	; 1
    563e:	90 93 c0 07 	sts	0x07C0, r25
    5642:	80 93 bf 07 	sts	0x07BF, r24
    5646:	08 95       	ret

00005648 <STEPPER_process_run_mode>:
    5648:	0f 93       	push	r16
    564a:	1f 93       	push	r17
    564c:	18 2f       	mov	r17, r24
    564e:	06 2f       	mov	r16, r22
    5650:	80 91 ed 07 	lds	r24, 0x07ED
    5654:	88 23       	and	r24, r24
    5656:	09 f0       	breq	.+2      	; 0x565a <STEPPER_process_run_mode+0x12>
    5658:	e7 c0       	rjmp	.+462    	; 0x5828 <STEPPER_process_run_mode+0x1e0>
    565a:	80 91 d5 07 	lds	r24, 0x07D5
    565e:	88 23       	and	r24, r24
    5660:	09 f0       	breq	.+2      	; 0x5664 <STEPPER_process_run_mode+0x1c>
    5662:	5a c0       	rjmp	.+180    	; 0x5718 <STEPPER_process_run_mode+0xd0>
    5664:	80 91 bd 07 	lds	r24, 0x07BD
    5668:	90 91 be 07 	lds	r25, 0x07BE
    566c:	89 2b       	or	r24, r25
    566e:	e9 f4       	brne	.+58     	; 0x56aa <STEPPER_process_run_mode+0x62>
    5670:	80 91 fc 04 	lds	r24, 0x04FC
    5674:	83 7e       	andi	r24, 0xE3	; 227
    5676:	80 93 fc 04 	sts	0x04FC, r24
    567a:	10 92 de 07 	sts	0x07DE, r1
    567e:	80 91 e9 07 	lds	r24, 0x07E9
    5682:	88 23       	and	r24, r24
    5684:	09 f4       	brne	.+2      	; 0x5688 <STEPPER_process_run_mode+0x40>
    5686:	5d c0       	rjmp	.+186    	; 0x5742 <STEPPER_process_run_mode+0xfa>
    5688:	60 91 d7 07 	lds	r22, 0x07D7
    568c:	80 e0       	ldi	r24, 0x00	; 0
    568e:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <STEPPER_stop>
    5692:	e0 91 eb 07 	lds	r30, 0x07EB
    5696:	f0 91 ec 07 	lds	r31, 0x07EC
    569a:	30 97       	sbiw	r30, 0x00	; 0
    569c:	09 f4       	brne	.+2      	; 0x56a0 <STEPPER_process_run_mode+0x58>
    569e:	51 c0       	rjmp	.+162    	; 0x5742 <STEPPER_process_run_mode+0xfa>
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	80 83       	st	Z, r24
    56a4:	10 92 e9 07 	sts	0x07E9, r1
    56a8:	4c c0       	rjmp	.+152    	; 0x5742 <STEPPER_process_run_mode+0xfa>
    56aa:	80 91 b7 07 	lds	r24, 0x07B7
    56ae:	81 30       	cpi	r24, 0x01	; 1
    56b0:	41 f4       	brne	.+16     	; 0x56c2 <STEPPER_process_run_mode+0x7a>
    56b2:	80 91 c9 07 	lds	r24, 0x07C9
    56b6:	90 91 ca 07 	lds	r25, 0x07CA
    56ba:	01 97       	sbiw	r24, 0x01	; 1
    56bc:	11 f4       	brne	.+4      	; 0x56c2 <STEPPER_process_run_mode+0x7a>
    56be:	11 e0       	ldi	r17, 0x01	; 1
    56c0:	02 c0       	rjmp	.+4      	; 0x56c6 <STEPPER_process_run_mode+0x7e>
    56c2:	11 23       	and	r17, r17
    56c4:	f1 f1       	breq	.+124    	; 0x5742 <STEPPER_process_run_mode+0xfa>
    56c6:	e0 91 dc 07 	lds	r30, 0x07DC
    56ca:	f0 e0       	ldi	r31, 0x00	; 0
    56cc:	e1 5f       	subi	r30, 0xF1	; 241
    56ce:	fb 4f       	sbci	r31, 0xFB	; 251
    56d0:	90 91 fc 04 	lds	r25, 0x04FC
    56d4:	93 7e       	andi	r25, 0xE3	; 227
    56d6:	80 81       	ld	r24, Z
    56d8:	89 2b       	or	r24, r25
    56da:	80 93 fc 04 	sts	0x04FC, r24
    56de:	80 91 da 07 	lds	r24, 0x07DA
    56e2:	88 23       	and	r24, r24
    56e4:	21 f4       	brne	.+8      	; 0x56ee <STEPPER_process_run_mode+0xa6>
    56e6:	80 91 dc 07 	lds	r24, 0x07DC
    56ea:	8f 5f       	subi	r24, 0xFF	; 255
    56ec:	03 c0       	rjmp	.+6      	; 0x56f4 <STEPPER_process_run_mode+0xac>
    56ee:	80 91 dc 07 	lds	r24, 0x07DC
    56f2:	81 50       	subi	r24, 0x01	; 1
    56f4:	80 93 dc 07 	sts	0x07DC, r24
    56f8:	80 91 dc 07 	lds	r24, 0x07DC
    56fc:	83 70       	andi	r24, 0x03	; 3
    56fe:	80 93 dc 07 	sts	0x07DC, r24
    5702:	81 e0       	ldi	r24, 0x01	; 1
    5704:	80 93 de 07 	sts	0x07DE, r24
    5708:	80 91 b7 07 	lds	r24, 0x07B7
    570c:	81 30       	cpi	r24, 0x01	; 1
    570e:	c9 f4       	brne	.+50     	; 0x5742 <STEPPER_process_run_mode+0xfa>
    5710:	80 e0       	ldi	r24, 0x00	; 0
    5712:	0e 94 27 2c 	call	0x584e	; 0x584e <STEPPER_process_step_mode>
    5716:	15 c0       	rjmp	.+42     	; 0x5742 <STEPPER_process_run_mode+0xfa>
    5718:	90 91 fc 04 	lds	r25, 0x04FC
    571c:	93 7e       	andi	r25, 0xE3	; 227
    571e:	90 93 fc 04 	sts	0x04FC, r25
    5722:	e0 91 dc 07 	lds	r30, 0x07DC
    5726:	f0 e0       	ldi	r31, 0x00	; 0
    5728:	e1 5f       	subi	r30, 0xF1	; 241
    572a:	fb 4f       	sbci	r31, 0xFB	; 251
    572c:	80 81       	ld	r24, Z
    572e:	89 2b       	or	r24, r25
    5730:	80 93 fc 04 	sts	0x04FC, r24
    5734:	82 e0       	ldi	r24, 0x02	; 2
    5736:	80 93 de 07 	sts	0x07DE, r24
    573a:	10 92 be 07 	sts	0x07BE, r1
    573e:	10 92 bd 07 	sts	0x07BD, r1
    5742:	80 91 d6 07 	lds	r24, 0x07D6
    5746:	88 23       	and	r24, r24
    5748:	09 f0       	breq	.+2      	; 0x574c <STEPPER_process_run_mode+0x104>
    574a:	59 c0       	rjmp	.+178    	; 0x57fe <STEPPER_process_run_mode+0x1b6>
    574c:	80 91 bf 07 	lds	r24, 0x07BF
    5750:	90 91 c0 07 	lds	r25, 0x07C0
    5754:	89 2b       	or	r24, r25
    5756:	e9 f4       	brne	.+58     	; 0x5792 <STEPPER_process_run_mode+0x14a>
    5758:	80 91 fc 04 	lds	r24, 0x04FC
    575c:	8f 71       	andi	r24, 0x1F	; 31
    575e:	80 93 fc 04 	sts	0x04FC, r24
    5762:	10 92 df 07 	sts	0x07DF, r1
    5766:	80 91 ea 07 	lds	r24, 0x07EA
    576a:	88 23       	and	r24, r24
    576c:	09 f4       	brne	.+2      	; 0x5770 <STEPPER_process_run_mode+0x128>
    576e:	5c c0       	rjmp	.+184    	; 0x5828 <STEPPER_process_run_mode+0x1e0>
    5770:	60 91 d8 07 	lds	r22, 0x07D8
    5774:	81 e0       	ldi	r24, 0x01	; 1
    5776:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <STEPPER_stop>
    577a:	e0 91 eb 07 	lds	r30, 0x07EB
    577e:	f0 91 ec 07 	lds	r31, 0x07EC
    5782:	30 97       	sbiw	r30, 0x00	; 0
    5784:	09 f4       	brne	.+2      	; 0x5788 <STEPPER_process_run_mode+0x140>
    5786:	50 c0       	rjmp	.+160    	; 0x5828 <STEPPER_process_run_mode+0x1e0>
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	81 83       	std	Z+1, r24	; 0x01
    578c:	10 92 ea 07 	sts	0x07EA, r1
    5790:	4b c0       	rjmp	.+150    	; 0x5828 <STEPPER_process_run_mode+0x1e0>
    5792:	80 91 b8 07 	lds	r24, 0x07B8
    5796:	81 30       	cpi	r24, 0x01	; 1
    5798:	41 f4       	brne	.+16     	; 0x57aa <STEPPER_process_run_mode+0x162>
    579a:	80 91 cb 07 	lds	r24, 0x07CB
    579e:	90 91 cc 07 	lds	r25, 0x07CC
    57a2:	01 97       	sbiw	r24, 0x01	; 1
    57a4:	11 f4       	brne	.+4      	; 0x57aa <STEPPER_process_run_mode+0x162>
    57a6:	01 e0       	ldi	r16, 0x01	; 1
    57a8:	02 c0       	rjmp	.+4      	; 0x57ae <STEPPER_process_run_mode+0x166>
    57aa:	00 23       	and	r16, r16
    57ac:	e9 f1       	breq	.+122    	; 0x5828 <STEPPER_process_run_mode+0x1e0>
    57ae:	e0 91 dd 07 	lds	r30, 0x07DD
    57b2:	f0 e0       	ldi	r31, 0x00	; 0
    57b4:	ed 5e       	subi	r30, 0xED	; 237
    57b6:	fb 4f       	sbci	r31, 0xFB	; 251
    57b8:	90 91 fc 04 	lds	r25, 0x04FC
    57bc:	9f 71       	andi	r25, 0x1F	; 31
    57be:	80 81       	ld	r24, Z
    57c0:	89 2b       	or	r24, r25
    57c2:	80 93 fc 04 	sts	0x04FC, r24
    57c6:	80 91 db 07 	lds	r24, 0x07DB
    57ca:	88 23       	and	r24, r24
    57cc:	21 f4       	brne	.+8      	; 0x57d6 <STEPPER_process_run_mode+0x18e>
    57ce:	80 91 dd 07 	lds	r24, 0x07DD
    57d2:	8f 5f       	subi	r24, 0xFF	; 255
    57d4:	03 c0       	rjmp	.+6      	; 0x57dc <STEPPER_process_run_mode+0x194>
    57d6:	80 91 dd 07 	lds	r24, 0x07DD
    57da:	81 50       	subi	r24, 0x01	; 1
    57dc:	80 93 dd 07 	sts	0x07DD, r24
    57e0:	80 91 dd 07 	lds	r24, 0x07DD
    57e4:	83 70       	andi	r24, 0x03	; 3
    57e6:	80 93 dd 07 	sts	0x07DD, r24
    57ea:	81 e0       	ldi	r24, 0x01	; 1
    57ec:	80 93 df 07 	sts	0x07DF, r24
    57f0:	80 91 b8 07 	lds	r24, 0x07B8
    57f4:	81 30       	cpi	r24, 0x01	; 1
    57f6:	c1 f4       	brne	.+48     	; 0x5828 <STEPPER_process_run_mode+0x1e0>
    57f8:	0e 94 27 2c 	call	0x584e	; 0x584e <STEPPER_process_step_mode>
    57fc:	15 c0       	rjmp	.+42     	; 0x5828 <STEPPER_process_run_mode+0x1e0>
    57fe:	90 91 fc 04 	lds	r25, 0x04FC
    5802:	9f 71       	andi	r25, 0x1F	; 31
    5804:	90 93 fc 04 	sts	0x04FC, r25
    5808:	e0 91 dd 07 	lds	r30, 0x07DD
    580c:	f0 e0       	ldi	r31, 0x00	; 0
    580e:	ed 5e       	subi	r30, 0xED	; 237
    5810:	fb 4f       	sbci	r31, 0xFB	; 251
    5812:	80 81       	ld	r24, Z
    5814:	89 2b       	or	r24, r25
    5816:	80 93 fc 04 	sts	0x04FC, r24
    581a:	82 e0       	ldi	r24, 0x02	; 2
    581c:	80 93 df 07 	sts	0x07DF, r24
    5820:	10 92 c0 07 	sts	0x07C0, r1
    5824:	10 92 bf 07 	sts	0x07BF, r1
    5828:	80 91 e0 07 	lds	r24, 0x07E0
    582c:	88 23       	and	r24, r24
    582e:	31 f4       	brne	.+12     	; 0x583c <STEPPER_process_run_mode+0x1f4>
    5830:	8c ef       	ldi	r24, 0xFC	; 252
    5832:	94 e0       	ldi	r25, 0x04	; 4
    5834:	61 2f       	mov	r22, r17
    5836:	40 2f       	mov	r20, r16
    5838:	0e 94 e9 2c 	call	0x59d2	; 0x59d2 <STEPPER_process_pwm>
    583c:	88 b1       	in	r24, 0x08	; 8
    583e:	83 70       	andi	r24, 0x03	; 3
    5840:	90 91 fc 04 	lds	r25, 0x04FC
    5844:	89 2b       	or	r24, r25
    5846:	88 b9       	out	0x08, r24	; 8
    5848:	1f 91       	pop	r17
    584a:	0f 91       	pop	r16
    584c:	08 95       	ret

0000584e <STEPPER_process_step_mode>:
    584e:	88 23       	and	r24, r24
    5850:	21 f0       	breq	.+8      	; 0x585a <STEPPER_process_step_mode+0xc>
    5852:	81 30       	cpi	r24, 0x01	; 1
    5854:	09 f0       	breq	.+2      	; 0x5858 <STEPPER_process_step_mode+0xa>
    5856:	4e c0       	rjmp	.+156    	; 0x58f4 <STEPPER_process_step_mode+0xa6>
    5858:	27 c0       	rjmp	.+78     	; 0x58a8 <STEPPER_process_step_mode+0x5a>
    585a:	80 91 c9 07 	lds	r24, 0x07C9
    585e:	90 91 ca 07 	lds	r25, 0x07CA
    5862:	89 2b       	or	r24, r25
    5864:	49 f0       	breq	.+18     	; 0x5878 <STEPPER_process_step_mode+0x2a>
    5866:	80 91 c9 07 	lds	r24, 0x07C9
    586a:	90 91 ca 07 	lds	r25, 0x07CA
    586e:	01 97       	sbiw	r24, 0x01	; 1
    5870:	90 93 ca 07 	sts	0x07CA, r25
    5874:	80 93 c9 07 	sts	0x07C9, r24
    5878:	80 91 e9 07 	lds	r24, 0x07E9
    587c:	88 23       	and	r24, r24
    587e:	d1 f5       	brne	.+116    	; 0x58f4 <STEPPER_process_step_mode+0xa6>
    5880:	20 91 c9 07 	lds	r18, 0x07C9
    5884:	30 91 ca 07 	lds	r19, 0x07CA
    5888:	80 91 cd 07 	lds	r24, 0x07CD
    588c:	90 91 ce 07 	lds	r25, 0x07CE
    5890:	28 17       	cp	r18, r24
    5892:	39 07       	cpc	r19, r25
    5894:	79 f5       	brne	.+94     	; 0x58f4 <STEPPER_process_step_mode+0xa6>
    5896:	80 e0       	ldi	r24, 0x00	; 0
    5898:	60 e0       	ldi	r22, 0x00	; 0
    589a:	70 e0       	ldi	r23, 0x00	; 0
    589c:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <STEPPER_set_speed>
    58a0:	81 e0       	ldi	r24, 0x01	; 1
    58a2:	80 93 e9 07 	sts	0x07E9, r24
    58a6:	08 95       	ret
    58a8:	80 91 cb 07 	lds	r24, 0x07CB
    58ac:	90 91 cc 07 	lds	r25, 0x07CC
    58b0:	89 2b       	or	r24, r25
    58b2:	49 f0       	breq	.+18     	; 0x58c6 <STEPPER_process_step_mode+0x78>
    58b4:	80 91 cb 07 	lds	r24, 0x07CB
    58b8:	90 91 cc 07 	lds	r25, 0x07CC
    58bc:	01 97       	sbiw	r24, 0x01	; 1
    58be:	90 93 cc 07 	sts	0x07CC, r25
    58c2:	80 93 cb 07 	sts	0x07CB, r24
    58c6:	80 91 ea 07 	lds	r24, 0x07EA
    58ca:	88 23       	and	r24, r24
    58cc:	99 f4       	brne	.+38     	; 0x58f4 <STEPPER_process_step_mode+0xa6>
    58ce:	20 91 cb 07 	lds	r18, 0x07CB
    58d2:	30 91 cc 07 	lds	r19, 0x07CC
    58d6:	80 91 cf 07 	lds	r24, 0x07CF
    58da:	90 91 d0 07 	lds	r25, 0x07D0
    58de:	28 17       	cp	r18, r24
    58e0:	39 07       	cpc	r19, r25
    58e2:	41 f4       	brne	.+16     	; 0x58f4 <STEPPER_process_step_mode+0xa6>
    58e4:	81 e0       	ldi	r24, 0x01	; 1
    58e6:	60 e0       	ldi	r22, 0x00	; 0
    58e8:	70 e0       	ldi	r23, 0x00	; 0
    58ea:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <STEPPER_set_speed>
    58ee:	81 e0       	ldi	r24, 0x01	; 1
    58f0:	80 93 ea 07 	sts	0x07EA, r24
    58f4:	08 95       	ret

000058f6 <TMRSRVC_process>:
    58f6:	ff 92       	push	r15
    58f8:	0f 93       	push	r16
    58fa:	1f 93       	push	r17
    58fc:	cf 93       	push	r28
    58fe:	df 93       	push	r29
    5900:	80 91 27 08 	lds	r24, 0x0827
    5904:	88 23       	and	r24, r24
    5906:	09 f4       	brne	.+2      	; 0x590a <TMRSRVC_process+0x14>
    5908:	59 c0       	rjmp	.+178    	; 0x59bc <TMRSRVC_process+0xc6>
    590a:	00 91 28 08 	lds	r16, 0x0828
    590e:	10 91 29 08 	lds	r17, 0x0829
    5912:	f8 01       	movw	r30, r16
    5914:	c0 81       	ld	r28, Z
    5916:	d1 81       	ldd	r29, Z+1	; 0x01
    5918:	8c 81       	ldd	r24, Y+4	; 0x04
    591a:	9d 81       	ldd	r25, Y+5	; 0x05
    591c:	01 97       	sbiw	r24, 0x01	; 1
    591e:	9d 83       	std	Y+5, r25	; 0x05
    5920:	8c 83       	std	Y+4, r24	; 0x04
    5922:	18 16       	cp	r1, r24
    5924:	19 06       	cpc	r1, r25
    5926:	0c f4       	brge	.+2      	; 0x592a <TMRSRVC_process+0x34>
    5928:	49 c0       	rjmp	.+146    	; 0x59bc <TMRSRVC_process+0xc6>
    592a:	89 81       	ldd	r24, Y+1	; 0x01
    592c:	80 ff       	sbrs	r24, 0
    592e:	05 c0       	rjmp	.+10     	; 0x593a <TMRSRVC_process+0x44>
    5930:	8e 81       	ldd	r24, Y+6	; 0x06
    5932:	88 23       	and	r24, r24
    5934:	11 f4       	brne	.+4      	; 0x593a <TMRSRVC_process+0x44>
    5936:	81 e0       	ldi	r24, 0x01	; 1
    5938:	8e 83       	std	Y+6, r24	; 0x06
    593a:	89 81       	ldd	r24, Y+1	; 0x01
    593c:	81 ff       	sbrs	r24, 1
    593e:	03 c0       	rjmp	.+6      	; 0x5946 <TMRSRVC_process+0x50>
    5940:	ef 81       	ldd	r30, Y+7	; 0x07
    5942:	f8 85       	ldd	r31, Y+8	; 0x08
    5944:	09 95       	icall
    5946:	80 91 27 08 	lds	r24, 0x0827
    594a:	82 30       	cpi	r24, 0x02	; 2
    594c:	a8 f0       	brcs	.+42     	; 0x5978 <TMRSRVC_process+0x82>
    594e:	f8 01       	movw	r30, r16
    5950:	82 81       	ldd	r24, Z+2	; 0x02
    5952:	93 81       	ldd	r25, Z+3	; 0x03
    5954:	90 93 29 08 	sts	0x0829, r25
    5958:	80 93 28 08 	sts	0x0828, r24
    595c:	13 82       	std	Z+3, r1	; 0x03
    595e:	12 82       	std	Z+2, r1	; 0x02
    5960:	e0 91 00 00 	lds	r30, 0x0000
    5964:	f0 91 01 00 	lds	r31, 0x0001
    5968:	84 81       	ldd	r24, Z+4	; 0x04
    596a:	95 81       	ldd	r25, Z+5	; 0x05
    596c:	18 16       	cp	r1, r24
    596e:	19 06       	cpc	r1, r25
    5970:	3c f0       	brlt	.+14     	; 0x5980 <TMRSRVC_process+0x8a>
    5972:	ff 24       	eor	r15, r15
    5974:	f3 94       	inc	r15
    5976:	05 c0       	rjmp	.+10     	; 0x5982 <TMRSRVC_process+0x8c>
    5978:	10 92 29 08 	sts	0x0829, r1
    597c:	10 92 28 08 	sts	0x0828, r1
    5980:	ff 24       	eor	r15, r15
    5982:	80 91 27 08 	lds	r24, 0x0827
    5986:	81 50       	subi	r24, 0x01	; 1
    5988:	80 93 27 08 	sts	0x0827, r24
    598c:	80 91 27 08 	lds	r24, 0x0827
    5990:	88 23       	and	r24, r24
    5992:	11 f4       	brne	.+4      	; 0x5998 <TMRSRVC_process+0xa2>
    5994:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <TMRSRVC_stop>
    5998:	89 81       	ldd	r24, Y+1	; 0x01
    599a:	82 ff       	sbrs	r24, 2
    599c:	08 c0       	rjmp	.+16     	; 0x59ae <TMRSRVC_process+0xb8>
    599e:	8a 81       	ldd	r24, Y+2	; 0x02
    59a0:	9b 81       	ldd	r25, Y+3	; 0x03
    59a2:	9d 83       	std	Y+5, r25	; 0x05
    59a4:	8c 83       	std	Y+4, r24	; 0x04
    59a6:	c8 01       	movw	r24, r16
    59a8:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <TMRSRVC_insert>
    59ac:	08 c0       	rjmp	.+16     	; 0x59be <TMRSRVC_process+0xc8>
    59ae:	c8 01       	movw	r24, r16
    59b0:	0e 94 c8 35 	call	0x6b90	; 0x6b90 <free>
    59b4:	89 81       	ldd	r24, Y+1	; 0x01
    59b6:	8f 7e       	andi	r24, 0xEF	; 239
    59b8:	89 83       	std	Y+1, r24	; 0x01
    59ba:	01 c0       	rjmp	.+2      	; 0x59be <TMRSRVC_process+0xc8>
    59bc:	ff 24       	eor	r15, r15
    59be:	8f 2d       	mov	r24, r15
    59c0:	df 91       	pop	r29
    59c2:	cf 91       	pop	r28
    59c4:	1f 91       	pop	r17
    59c6:	0f 91       	pop	r16
    59c8:	ff 90       	pop	r15
    59ca:	08 95       	ret

000059cc <TMRSRVC_stop>:
    59cc:	10 92 fb 04 	sts	0x04FB, r1
    59d0:	08 95       	ret

000059d2 <STEPPER_process_pwm>:
    59d2:	fc 01       	movw	r30, r24
    59d4:	80 91 de 07 	lds	r24, 0x07DE
    59d8:	82 30       	cpi	r24, 0x02	; 2
    59da:	69 f4       	brne	.+26     	; 0x59f6 <STEPPER_process_pwm+0x24>
    59dc:	80 91 00 05 	lds	r24, 0x0500
    59e0:	91 e0       	ldi	r25, 0x01	; 1
    59e2:	89 27       	eor	r24, r25
    59e4:	80 93 00 05 	sts	0x0500, r24
    59e8:	88 23       	and	r24, r24
    59ea:	09 f0       	breq	.+2      	; 0x59ee <STEPPER_process_pwm+0x1c>
    59ec:	3e c0       	rjmp	.+124    	; 0x5a6a <STEPPER_process_pwm+0x98>
    59ee:	80 81       	ld	r24, Z
    59f0:	83 7e       	andi	r24, 0xE3	; 227
    59f2:	80 83       	st	Z, r24
    59f4:	3a c0       	rjmp	.+116    	; 0x5a6a <STEPPER_process_pwm+0x98>
    59f6:	80 91 bd 07 	lds	r24, 0x07BD
    59fa:	90 91 be 07 	lds	r25, 0x07BE
    59fe:	c3 97       	sbiw	r24, 0x33	; 51
    5a00:	a4 f5       	brge	.+104    	; 0x5a6a <STEPPER_process_pwm+0x98>
    5a02:	66 23       	and	r22, r22
    5a04:	d1 f0       	breq	.+52     	; 0x5a3a <STEPPER_process_pwm+0x68>
    5a06:	20 91 bd 07 	lds	r18, 0x07BD
    5a0a:	30 91 be 07 	lds	r19, 0x07BE
    5a0e:	80 e6       	ldi	r24, 0x60	; 96
    5a10:	90 e0       	ldi	r25, 0x00	; 0
    5a12:	bc 01       	movw	r22, r24
    5a14:	26 9f       	mul	r18, r22
    5a16:	c0 01       	movw	r24, r0
    5a18:	27 9f       	mul	r18, r23
    5a1a:	90 0d       	add	r25, r0
    5a1c:	36 9f       	mul	r19, r22
    5a1e:	90 0d       	add	r25, r0
    5a20:	11 24       	eor	r1, r1
    5a22:	88 0f       	add	r24, r24
    5a24:	89 2f       	mov	r24, r25
    5a26:	88 1f       	adc	r24, r24
    5a28:	99 0b       	sbc	r25, r25
    5a2a:	90 93 d2 07 	sts	0x07D2, r25
    5a2e:	80 93 d1 07 	sts	0x07D1, r24
    5a32:	81 e0       	ldi	r24, 0x01	; 1
    5a34:	80 93 fe 04 	sts	0x04FE, r24
    5a38:	18 c0       	rjmp	.+48     	; 0x5a6a <STEPPER_process_pwm+0x98>
    5a3a:	80 91 fe 04 	lds	r24, 0x04FE
    5a3e:	88 23       	and	r24, r24
    5a40:	a1 f0       	breq	.+40     	; 0x5a6a <STEPPER_process_pwm+0x98>
    5a42:	80 91 d1 07 	lds	r24, 0x07D1
    5a46:	90 91 d2 07 	lds	r25, 0x07D2
    5a4a:	01 97       	sbiw	r24, 0x01	; 1
    5a4c:	90 93 d2 07 	sts	0x07D2, r25
    5a50:	80 93 d1 07 	sts	0x07D1, r24
    5a54:	80 91 d1 07 	lds	r24, 0x07D1
    5a58:	90 91 d2 07 	lds	r25, 0x07D2
    5a5c:	89 2b       	or	r24, r25
    5a5e:	29 f4       	brne	.+10     	; 0x5a6a <STEPPER_process_pwm+0x98>
    5a60:	80 81       	ld	r24, Z
    5a62:	83 7e       	andi	r24, 0xE3	; 227
    5a64:	80 83       	st	Z, r24
    5a66:	10 92 fe 04 	sts	0x04FE, r1
    5a6a:	80 91 df 07 	lds	r24, 0x07DF
    5a6e:	82 30       	cpi	r24, 0x02	; 2
    5a70:	69 f4       	brne	.+26     	; 0x5a8c <STEPPER_process_pwm+0xba>
    5a72:	80 91 ff 04 	lds	r24, 0x04FF
    5a76:	91 e0       	ldi	r25, 0x01	; 1
    5a78:	89 27       	eor	r24, r25
    5a7a:	80 93 ff 04 	sts	0x04FF, r24
    5a7e:	88 23       	and	r24, r24
    5a80:	09 f0       	breq	.+2      	; 0x5a84 <STEPPER_process_pwm+0xb2>
    5a82:	3e c0       	rjmp	.+124    	; 0x5b00 <STEPPER_process_pwm+0x12e>
    5a84:	80 81       	ld	r24, Z
    5a86:	8f 71       	andi	r24, 0x1F	; 31
    5a88:	80 83       	st	Z, r24
    5a8a:	08 95       	ret
    5a8c:	80 91 bf 07 	lds	r24, 0x07BF
    5a90:	90 91 c0 07 	lds	r25, 0x07C0
    5a94:	c3 97       	sbiw	r24, 0x33	; 51
    5a96:	a4 f5       	brge	.+104    	; 0x5b00 <STEPPER_process_pwm+0x12e>
    5a98:	44 23       	and	r20, r20
    5a9a:	d1 f0       	breq	.+52     	; 0x5ad0 <STEPPER_process_pwm+0xfe>
    5a9c:	20 91 bf 07 	lds	r18, 0x07BF
    5aa0:	30 91 c0 07 	lds	r19, 0x07C0
    5aa4:	80 e6       	ldi	r24, 0x60	; 96
    5aa6:	90 e0       	ldi	r25, 0x00	; 0
    5aa8:	ac 01       	movw	r20, r24
    5aaa:	24 9f       	mul	r18, r20
    5aac:	c0 01       	movw	r24, r0
    5aae:	25 9f       	mul	r18, r21
    5ab0:	90 0d       	add	r25, r0
    5ab2:	34 9f       	mul	r19, r20
    5ab4:	90 0d       	add	r25, r0
    5ab6:	11 24       	eor	r1, r1
    5ab8:	88 0f       	add	r24, r24
    5aba:	89 2f       	mov	r24, r25
    5abc:	88 1f       	adc	r24, r24
    5abe:	99 0b       	sbc	r25, r25
    5ac0:	90 93 d4 07 	sts	0x07D4, r25
    5ac4:	80 93 d3 07 	sts	0x07D3, r24
    5ac8:	81 e0       	ldi	r24, 0x01	; 1
    5aca:	80 93 fd 04 	sts	0x04FD, r24
    5ace:	08 95       	ret
    5ad0:	80 91 fd 04 	lds	r24, 0x04FD
    5ad4:	88 23       	and	r24, r24
    5ad6:	a1 f0       	breq	.+40     	; 0x5b00 <STEPPER_process_pwm+0x12e>
    5ad8:	80 91 d3 07 	lds	r24, 0x07D3
    5adc:	90 91 d4 07 	lds	r25, 0x07D4
    5ae0:	01 97       	sbiw	r24, 0x01	; 1
    5ae2:	90 93 d4 07 	sts	0x07D4, r25
    5ae6:	80 93 d3 07 	sts	0x07D3, r24
    5aea:	80 91 d3 07 	lds	r24, 0x07D3
    5aee:	90 91 d4 07 	lds	r25, 0x07D4
    5af2:	89 2b       	or	r24, r25
    5af4:	29 f4       	brne	.+10     	; 0x5b00 <STEPPER_process_pwm+0x12e>
    5af6:	80 81       	ld	r24, Z
    5af8:	8f 71       	andi	r24, 0x1F	; 31
    5afa:	80 83       	st	Z, r24
    5afc:	10 92 fd 04 	sts	0x04FD, r1
    5b00:	08 95       	ret

00005b02 <__subsf3>:
    5b02:	50 58       	subi	r21, 0x80	; 128

00005b04 <__addsf3>:
    5b04:	bb 27       	eor	r27, r27
    5b06:	aa 27       	eor	r26, r26
    5b08:	0e d0       	rcall	.+28     	; 0x5b26 <__addsf3x>
    5b0a:	75 c1       	rjmp	.+746    	; 0x5df6 <__fp_round>
    5b0c:	66 d1       	rcall	.+716    	; 0x5dda <__fp_pscA>
    5b0e:	30 f0       	brcs	.+12     	; 0x5b1c <__addsf3+0x18>
    5b10:	6b d1       	rcall	.+726    	; 0x5de8 <__fp_pscB>
    5b12:	20 f0       	brcs	.+8      	; 0x5b1c <__addsf3+0x18>
    5b14:	31 f4       	brne	.+12     	; 0x5b22 <__addsf3+0x1e>
    5b16:	9f 3f       	cpi	r25, 0xFF	; 255
    5b18:	11 f4       	brne	.+4      	; 0x5b1e <__addsf3+0x1a>
    5b1a:	1e f4       	brtc	.+6      	; 0x5b22 <__addsf3+0x1e>
    5b1c:	5b c1       	rjmp	.+694    	; 0x5dd4 <__fp_nan>
    5b1e:	0e f4       	brtc	.+2      	; 0x5b22 <__addsf3+0x1e>
    5b20:	e0 95       	com	r30
    5b22:	e7 fb       	bst	r30, 7
    5b24:	51 c1       	rjmp	.+674    	; 0x5dc8 <__fp_inf>

00005b26 <__addsf3x>:
    5b26:	e9 2f       	mov	r30, r25
    5b28:	77 d1       	rcall	.+750    	; 0x5e18 <__fp_split3>
    5b2a:	80 f3       	brcs	.-32     	; 0x5b0c <__addsf3+0x8>
    5b2c:	ba 17       	cp	r27, r26
    5b2e:	62 07       	cpc	r22, r18
    5b30:	73 07       	cpc	r23, r19
    5b32:	84 07       	cpc	r24, r20
    5b34:	95 07       	cpc	r25, r21
    5b36:	18 f0       	brcs	.+6      	; 0x5b3e <__addsf3x+0x18>
    5b38:	71 f4       	brne	.+28     	; 0x5b56 <__addsf3x+0x30>
    5b3a:	9e f5       	brtc	.+102    	; 0x5ba2 <__addsf3x+0x7c>
    5b3c:	8f c1       	rjmp	.+798    	; 0x5e5c <__fp_zero>
    5b3e:	0e f4       	brtc	.+2      	; 0x5b42 <__addsf3x+0x1c>
    5b40:	e0 95       	com	r30
    5b42:	0b 2e       	mov	r0, r27
    5b44:	ba 2f       	mov	r27, r26
    5b46:	a0 2d       	mov	r26, r0
    5b48:	0b 01       	movw	r0, r22
    5b4a:	b9 01       	movw	r22, r18
    5b4c:	90 01       	movw	r18, r0
    5b4e:	0c 01       	movw	r0, r24
    5b50:	ca 01       	movw	r24, r20
    5b52:	a0 01       	movw	r20, r0
    5b54:	11 24       	eor	r1, r1
    5b56:	ff 27       	eor	r31, r31
    5b58:	59 1b       	sub	r21, r25
    5b5a:	99 f0       	breq	.+38     	; 0x5b82 <__addsf3x+0x5c>
    5b5c:	59 3f       	cpi	r21, 0xF9	; 249
    5b5e:	50 f4       	brcc	.+20     	; 0x5b74 <__addsf3x+0x4e>
    5b60:	50 3e       	cpi	r21, 0xE0	; 224
    5b62:	68 f1       	brcs	.+90     	; 0x5bbe <__addsf3x+0x98>
    5b64:	1a 16       	cp	r1, r26
    5b66:	f0 40       	sbci	r31, 0x00	; 0
    5b68:	a2 2f       	mov	r26, r18
    5b6a:	23 2f       	mov	r18, r19
    5b6c:	34 2f       	mov	r19, r20
    5b6e:	44 27       	eor	r20, r20
    5b70:	58 5f       	subi	r21, 0xF8	; 248
    5b72:	f3 cf       	rjmp	.-26     	; 0x5b5a <__addsf3x+0x34>
    5b74:	46 95       	lsr	r20
    5b76:	37 95       	ror	r19
    5b78:	27 95       	ror	r18
    5b7a:	a7 95       	ror	r26
    5b7c:	f0 40       	sbci	r31, 0x00	; 0
    5b7e:	53 95       	inc	r21
    5b80:	c9 f7       	brne	.-14     	; 0x5b74 <__addsf3x+0x4e>
    5b82:	7e f4       	brtc	.+30     	; 0x5ba2 <__addsf3x+0x7c>
    5b84:	1f 16       	cp	r1, r31
    5b86:	ba 0b       	sbc	r27, r26
    5b88:	62 0b       	sbc	r22, r18
    5b8a:	73 0b       	sbc	r23, r19
    5b8c:	84 0b       	sbc	r24, r20
    5b8e:	ba f0       	brmi	.+46     	; 0x5bbe <__addsf3x+0x98>
    5b90:	91 50       	subi	r25, 0x01	; 1
    5b92:	a1 f0       	breq	.+40     	; 0x5bbc <__addsf3x+0x96>
    5b94:	ff 0f       	add	r31, r31
    5b96:	bb 1f       	adc	r27, r27
    5b98:	66 1f       	adc	r22, r22
    5b9a:	77 1f       	adc	r23, r23
    5b9c:	88 1f       	adc	r24, r24
    5b9e:	c2 f7       	brpl	.-16     	; 0x5b90 <__addsf3x+0x6a>
    5ba0:	0e c0       	rjmp	.+28     	; 0x5bbe <__addsf3x+0x98>
    5ba2:	ba 0f       	add	r27, r26
    5ba4:	62 1f       	adc	r22, r18
    5ba6:	73 1f       	adc	r23, r19
    5ba8:	84 1f       	adc	r24, r20
    5baa:	48 f4       	brcc	.+18     	; 0x5bbe <__addsf3x+0x98>
    5bac:	87 95       	ror	r24
    5bae:	77 95       	ror	r23
    5bb0:	67 95       	ror	r22
    5bb2:	b7 95       	ror	r27
    5bb4:	f7 95       	ror	r31
    5bb6:	9e 3f       	cpi	r25, 0xFE	; 254
    5bb8:	08 f0       	brcs	.+2      	; 0x5bbc <__addsf3x+0x96>
    5bba:	b3 cf       	rjmp	.-154    	; 0x5b22 <__addsf3+0x1e>
    5bbc:	93 95       	inc	r25
    5bbe:	88 0f       	add	r24, r24
    5bc0:	08 f0       	brcs	.+2      	; 0x5bc4 <__addsf3x+0x9e>
    5bc2:	99 27       	eor	r25, r25
    5bc4:	ee 0f       	add	r30, r30
    5bc6:	97 95       	ror	r25
    5bc8:	87 95       	ror	r24
    5bca:	08 95       	ret

00005bcc <__cmpsf2>:
    5bcc:	d9 d0       	rcall	.+434    	; 0x5d80 <__fp_cmp>
    5bce:	08 f4       	brcc	.+2      	; 0x5bd2 <__cmpsf2+0x6>
    5bd0:	81 e0       	ldi	r24, 0x01	; 1
    5bd2:	08 95       	ret

00005bd4 <__divsf3>:
    5bd4:	0c d0       	rcall	.+24     	; 0x5bee <__divsf3x>
    5bd6:	0f c1       	rjmp	.+542    	; 0x5df6 <__fp_round>
    5bd8:	07 d1       	rcall	.+526    	; 0x5de8 <__fp_pscB>
    5bda:	40 f0       	brcs	.+16     	; 0x5bec <__divsf3+0x18>
    5bdc:	fe d0       	rcall	.+508    	; 0x5dda <__fp_pscA>
    5bde:	30 f0       	brcs	.+12     	; 0x5bec <__divsf3+0x18>
    5be0:	21 f4       	brne	.+8      	; 0x5bea <__divsf3+0x16>
    5be2:	5f 3f       	cpi	r21, 0xFF	; 255
    5be4:	19 f0       	breq	.+6      	; 0x5bec <__divsf3+0x18>
    5be6:	f0 c0       	rjmp	.+480    	; 0x5dc8 <__fp_inf>
    5be8:	51 11       	cpse	r21, r1
    5bea:	39 c1       	rjmp	.+626    	; 0x5e5e <__fp_szero>
    5bec:	f3 c0       	rjmp	.+486    	; 0x5dd4 <__fp_nan>

00005bee <__divsf3x>:
    5bee:	14 d1       	rcall	.+552    	; 0x5e18 <__fp_split3>
    5bf0:	98 f3       	brcs	.-26     	; 0x5bd8 <__divsf3+0x4>

00005bf2 <__divsf3_pse>:
    5bf2:	99 23       	and	r25, r25
    5bf4:	c9 f3       	breq	.-14     	; 0x5be8 <__divsf3+0x14>
    5bf6:	55 23       	and	r21, r21
    5bf8:	b1 f3       	breq	.-20     	; 0x5be6 <__divsf3+0x12>
    5bfa:	95 1b       	sub	r25, r21
    5bfc:	55 0b       	sbc	r21, r21
    5bfe:	bb 27       	eor	r27, r27
    5c00:	aa 27       	eor	r26, r26
    5c02:	62 17       	cp	r22, r18
    5c04:	73 07       	cpc	r23, r19
    5c06:	84 07       	cpc	r24, r20
    5c08:	38 f0       	brcs	.+14     	; 0x5c18 <__divsf3_pse+0x26>
    5c0a:	9f 5f       	subi	r25, 0xFF	; 255
    5c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    5c0e:	22 0f       	add	r18, r18
    5c10:	33 1f       	adc	r19, r19
    5c12:	44 1f       	adc	r20, r20
    5c14:	aa 1f       	adc	r26, r26
    5c16:	a9 f3       	breq	.-22     	; 0x5c02 <__divsf3_pse+0x10>
    5c18:	33 d0       	rcall	.+102    	; 0x5c80 <__divsf3_pse+0x8e>
    5c1a:	0e 2e       	mov	r0, r30
    5c1c:	3a f0       	brmi	.+14     	; 0x5c2c <__divsf3_pse+0x3a>
    5c1e:	e0 e8       	ldi	r30, 0x80	; 128
    5c20:	30 d0       	rcall	.+96     	; 0x5c82 <__divsf3_pse+0x90>
    5c22:	91 50       	subi	r25, 0x01	; 1
    5c24:	50 40       	sbci	r21, 0x00	; 0
    5c26:	e6 95       	lsr	r30
    5c28:	00 1c       	adc	r0, r0
    5c2a:	ca f7       	brpl	.-14     	; 0x5c1e <__divsf3_pse+0x2c>
    5c2c:	29 d0       	rcall	.+82     	; 0x5c80 <__divsf3_pse+0x8e>
    5c2e:	fe 2f       	mov	r31, r30
    5c30:	27 d0       	rcall	.+78     	; 0x5c80 <__divsf3_pse+0x8e>
    5c32:	66 0f       	add	r22, r22
    5c34:	77 1f       	adc	r23, r23
    5c36:	88 1f       	adc	r24, r24
    5c38:	bb 1f       	adc	r27, r27
    5c3a:	26 17       	cp	r18, r22
    5c3c:	37 07       	cpc	r19, r23
    5c3e:	48 07       	cpc	r20, r24
    5c40:	ab 07       	cpc	r26, r27
    5c42:	b0 e8       	ldi	r27, 0x80	; 128
    5c44:	09 f0       	breq	.+2      	; 0x5c48 <__divsf3_pse+0x56>
    5c46:	bb 0b       	sbc	r27, r27
    5c48:	80 2d       	mov	r24, r0
    5c4a:	bf 01       	movw	r22, r30
    5c4c:	ff 27       	eor	r31, r31
    5c4e:	93 58       	subi	r25, 0x83	; 131
    5c50:	5f 4f       	sbci	r21, 0xFF	; 255
    5c52:	2a f0       	brmi	.+10     	; 0x5c5e <__divsf3_pse+0x6c>
    5c54:	9e 3f       	cpi	r25, 0xFE	; 254
    5c56:	51 05       	cpc	r21, r1
    5c58:	68 f0       	brcs	.+26     	; 0x5c74 <__divsf3_pse+0x82>
    5c5a:	b6 c0       	rjmp	.+364    	; 0x5dc8 <__fp_inf>
    5c5c:	00 c1       	rjmp	.+512    	; 0x5e5e <__fp_szero>
    5c5e:	5f 3f       	cpi	r21, 0xFF	; 255
    5c60:	ec f3       	brlt	.-6      	; 0x5c5c <__divsf3_pse+0x6a>
    5c62:	98 3e       	cpi	r25, 0xE8	; 232
    5c64:	dc f3       	brlt	.-10     	; 0x5c5c <__divsf3_pse+0x6a>
    5c66:	86 95       	lsr	r24
    5c68:	77 95       	ror	r23
    5c6a:	67 95       	ror	r22
    5c6c:	b7 95       	ror	r27
    5c6e:	f7 95       	ror	r31
    5c70:	9f 5f       	subi	r25, 0xFF	; 255
    5c72:	c9 f7       	brne	.-14     	; 0x5c66 <__divsf3_pse+0x74>
    5c74:	88 0f       	add	r24, r24
    5c76:	91 1d       	adc	r25, r1
    5c78:	96 95       	lsr	r25
    5c7a:	87 95       	ror	r24
    5c7c:	97 f9       	bld	r25, 7
    5c7e:	08 95       	ret
    5c80:	e1 e0       	ldi	r30, 0x01	; 1
    5c82:	66 0f       	add	r22, r22
    5c84:	77 1f       	adc	r23, r23
    5c86:	88 1f       	adc	r24, r24
    5c88:	bb 1f       	adc	r27, r27
    5c8a:	62 17       	cp	r22, r18
    5c8c:	73 07       	cpc	r23, r19
    5c8e:	84 07       	cpc	r24, r20
    5c90:	ba 07       	cpc	r27, r26
    5c92:	20 f0       	brcs	.+8      	; 0x5c9c <__divsf3_pse+0xaa>
    5c94:	62 1b       	sub	r22, r18
    5c96:	73 0b       	sbc	r23, r19
    5c98:	84 0b       	sbc	r24, r20
    5c9a:	ba 0b       	sbc	r27, r26
    5c9c:	ee 1f       	adc	r30, r30
    5c9e:	88 f7       	brcc	.-30     	; 0x5c82 <__divsf3_pse+0x90>
    5ca0:	e0 95       	com	r30
    5ca2:	08 95       	ret

00005ca4 <__fixsfsi>:
    5ca4:	04 d0       	rcall	.+8      	; 0x5cae <__fixunssfsi>
    5ca6:	68 94       	set
    5ca8:	b1 11       	cpse	r27, r1
    5caa:	d9 c0       	rjmp	.+434    	; 0x5e5e <__fp_szero>
    5cac:	08 95       	ret

00005cae <__fixunssfsi>:
    5cae:	bc d0       	rcall	.+376    	; 0x5e28 <__fp_splitA>
    5cb0:	88 f0       	brcs	.+34     	; 0x5cd4 <__fixunssfsi+0x26>
    5cb2:	9f 57       	subi	r25, 0x7F	; 127
    5cb4:	90 f0       	brcs	.+36     	; 0x5cda <__fixunssfsi+0x2c>
    5cb6:	b9 2f       	mov	r27, r25
    5cb8:	99 27       	eor	r25, r25
    5cba:	b7 51       	subi	r27, 0x17	; 23
    5cbc:	a0 f0       	brcs	.+40     	; 0x5ce6 <__fixunssfsi+0x38>
    5cbe:	d1 f0       	breq	.+52     	; 0x5cf4 <__fixunssfsi+0x46>
    5cc0:	66 0f       	add	r22, r22
    5cc2:	77 1f       	adc	r23, r23
    5cc4:	88 1f       	adc	r24, r24
    5cc6:	99 1f       	adc	r25, r25
    5cc8:	1a f0       	brmi	.+6      	; 0x5cd0 <__fixunssfsi+0x22>
    5cca:	ba 95       	dec	r27
    5ccc:	c9 f7       	brne	.-14     	; 0x5cc0 <__fixunssfsi+0x12>
    5cce:	12 c0       	rjmp	.+36     	; 0x5cf4 <__fixunssfsi+0x46>
    5cd0:	b1 30       	cpi	r27, 0x01	; 1
    5cd2:	81 f0       	breq	.+32     	; 0x5cf4 <__fixunssfsi+0x46>
    5cd4:	c3 d0       	rcall	.+390    	; 0x5e5c <__fp_zero>
    5cd6:	b1 e0       	ldi	r27, 0x01	; 1
    5cd8:	08 95       	ret
    5cda:	c0 c0       	rjmp	.+384    	; 0x5e5c <__fp_zero>
    5cdc:	67 2f       	mov	r22, r23
    5cde:	78 2f       	mov	r23, r24
    5ce0:	88 27       	eor	r24, r24
    5ce2:	b8 5f       	subi	r27, 0xF8	; 248
    5ce4:	39 f0       	breq	.+14     	; 0x5cf4 <__fixunssfsi+0x46>
    5ce6:	b9 3f       	cpi	r27, 0xF9	; 249
    5ce8:	cc f3       	brlt	.-14     	; 0x5cdc <__fixunssfsi+0x2e>
    5cea:	86 95       	lsr	r24
    5cec:	77 95       	ror	r23
    5cee:	67 95       	ror	r22
    5cf0:	b3 95       	inc	r27
    5cf2:	d9 f7       	brne	.-10     	; 0x5cea <__fixunssfsi+0x3c>
    5cf4:	3e f4       	brtc	.+14     	; 0x5d04 <__fixunssfsi+0x56>
    5cf6:	90 95       	com	r25
    5cf8:	80 95       	com	r24
    5cfa:	70 95       	com	r23
    5cfc:	61 95       	neg	r22
    5cfe:	7f 4f       	sbci	r23, 0xFF	; 255
    5d00:	8f 4f       	sbci	r24, 0xFF	; 255
    5d02:	9f 4f       	sbci	r25, 0xFF	; 255
    5d04:	08 95       	ret

00005d06 <__floatunsisf>:
    5d06:	e8 94       	clt
    5d08:	09 c0       	rjmp	.+18     	; 0x5d1c <__floatsisf+0x12>

00005d0a <__floatsisf>:
    5d0a:	97 fb       	bst	r25, 7
    5d0c:	3e f4       	brtc	.+14     	; 0x5d1c <__floatsisf+0x12>
    5d0e:	90 95       	com	r25
    5d10:	80 95       	com	r24
    5d12:	70 95       	com	r23
    5d14:	61 95       	neg	r22
    5d16:	7f 4f       	sbci	r23, 0xFF	; 255
    5d18:	8f 4f       	sbci	r24, 0xFF	; 255
    5d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d1c:	99 23       	and	r25, r25
    5d1e:	a9 f0       	breq	.+42     	; 0x5d4a <__floatsisf+0x40>
    5d20:	f9 2f       	mov	r31, r25
    5d22:	96 e9       	ldi	r25, 0x96	; 150
    5d24:	bb 27       	eor	r27, r27
    5d26:	93 95       	inc	r25
    5d28:	f6 95       	lsr	r31
    5d2a:	87 95       	ror	r24
    5d2c:	77 95       	ror	r23
    5d2e:	67 95       	ror	r22
    5d30:	b7 95       	ror	r27
    5d32:	f1 11       	cpse	r31, r1
    5d34:	f8 cf       	rjmp	.-16     	; 0x5d26 <__floatsisf+0x1c>
    5d36:	fa f4       	brpl	.+62     	; 0x5d76 <__floatsisf+0x6c>
    5d38:	bb 0f       	add	r27, r27
    5d3a:	11 f4       	brne	.+4      	; 0x5d40 <__floatsisf+0x36>
    5d3c:	60 ff       	sbrs	r22, 0
    5d3e:	1b c0       	rjmp	.+54     	; 0x5d76 <__floatsisf+0x6c>
    5d40:	6f 5f       	subi	r22, 0xFF	; 255
    5d42:	7f 4f       	sbci	r23, 0xFF	; 255
    5d44:	8f 4f       	sbci	r24, 0xFF	; 255
    5d46:	9f 4f       	sbci	r25, 0xFF	; 255
    5d48:	16 c0       	rjmp	.+44     	; 0x5d76 <__floatsisf+0x6c>
    5d4a:	88 23       	and	r24, r24
    5d4c:	11 f0       	breq	.+4      	; 0x5d52 <__floatsisf+0x48>
    5d4e:	96 e9       	ldi	r25, 0x96	; 150
    5d50:	11 c0       	rjmp	.+34     	; 0x5d74 <__floatsisf+0x6a>
    5d52:	77 23       	and	r23, r23
    5d54:	21 f0       	breq	.+8      	; 0x5d5e <__floatsisf+0x54>
    5d56:	9e e8       	ldi	r25, 0x8E	; 142
    5d58:	87 2f       	mov	r24, r23
    5d5a:	76 2f       	mov	r23, r22
    5d5c:	05 c0       	rjmp	.+10     	; 0x5d68 <__floatsisf+0x5e>
    5d5e:	66 23       	and	r22, r22
    5d60:	71 f0       	breq	.+28     	; 0x5d7e <__floatsisf+0x74>
    5d62:	96 e8       	ldi	r25, 0x86	; 134
    5d64:	86 2f       	mov	r24, r22
    5d66:	70 e0       	ldi	r23, 0x00	; 0
    5d68:	60 e0       	ldi	r22, 0x00	; 0
    5d6a:	2a f0       	brmi	.+10     	; 0x5d76 <__floatsisf+0x6c>
    5d6c:	9a 95       	dec	r25
    5d6e:	66 0f       	add	r22, r22
    5d70:	77 1f       	adc	r23, r23
    5d72:	88 1f       	adc	r24, r24
    5d74:	da f7       	brpl	.-10     	; 0x5d6c <__floatsisf+0x62>
    5d76:	88 0f       	add	r24, r24
    5d78:	96 95       	lsr	r25
    5d7a:	87 95       	ror	r24
    5d7c:	97 f9       	bld	r25, 7
    5d7e:	08 95       	ret

00005d80 <__fp_cmp>:
    5d80:	99 0f       	add	r25, r25
    5d82:	00 08       	sbc	r0, r0
    5d84:	55 0f       	add	r21, r21
    5d86:	aa 0b       	sbc	r26, r26
    5d88:	e0 e8       	ldi	r30, 0x80	; 128
    5d8a:	fe ef       	ldi	r31, 0xFE	; 254
    5d8c:	16 16       	cp	r1, r22
    5d8e:	17 06       	cpc	r1, r23
    5d90:	e8 07       	cpc	r30, r24
    5d92:	f9 07       	cpc	r31, r25
    5d94:	c0 f0       	brcs	.+48     	; 0x5dc6 <__fp_cmp+0x46>
    5d96:	12 16       	cp	r1, r18
    5d98:	13 06       	cpc	r1, r19
    5d9a:	e4 07       	cpc	r30, r20
    5d9c:	f5 07       	cpc	r31, r21
    5d9e:	98 f0       	brcs	.+38     	; 0x5dc6 <__fp_cmp+0x46>
    5da0:	62 1b       	sub	r22, r18
    5da2:	73 0b       	sbc	r23, r19
    5da4:	84 0b       	sbc	r24, r20
    5da6:	95 0b       	sbc	r25, r21
    5da8:	39 f4       	brne	.+14     	; 0x5db8 <__fp_cmp+0x38>
    5daa:	0a 26       	eor	r0, r26
    5dac:	61 f0       	breq	.+24     	; 0x5dc6 <__fp_cmp+0x46>
    5dae:	23 2b       	or	r18, r19
    5db0:	24 2b       	or	r18, r20
    5db2:	25 2b       	or	r18, r21
    5db4:	21 f4       	brne	.+8      	; 0x5dbe <__fp_cmp+0x3e>
    5db6:	08 95       	ret
    5db8:	0a 26       	eor	r0, r26
    5dba:	09 f4       	brne	.+2      	; 0x5dbe <__fp_cmp+0x3e>
    5dbc:	a1 40       	sbci	r26, 0x01	; 1
    5dbe:	a6 95       	lsr	r26
    5dc0:	8f ef       	ldi	r24, 0xFF	; 255
    5dc2:	81 1d       	adc	r24, r1
    5dc4:	81 1d       	adc	r24, r1
    5dc6:	08 95       	ret

00005dc8 <__fp_inf>:
    5dc8:	97 f9       	bld	r25, 7
    5dca:	9f 67       	ori	r25, 0x7F	; 127
    5dcc:	80 e8       	ldi	r24, 0x80	; 128
    5dce:	70 e0       	ldi	r23, 0x00	; 0
    5dd0:	60 e0       	ldi	r22, 0x00	; 0
    5dd2:	08 95       	ret

00005dd4 <__fp_nan>:
    5dd4:	9f ef       	ldi	r25, 0xFF	; 255
    5dd6:	80 ec       	ldi	r24, 0xC0	; 192
    5dd8:	08 95       	ret

00005dda <__fp_pscA>:
    5dda:	00 24       	eor	r0, r0
    5ddc:	0a 94       	dec	r0
    5dde:	16 16       	cp	r1, r22
    5de0:	17 06       	cpc	r1, r23
    5de2:	18 06       	cpc	r1, r24
    5de4:	09 06       	cpc	r0, r25
    5de6:	08 95       	ret

00005de8 <__fp_pscB>:
    5de8:	00 24       	eor	r0, r0
    5dea:	0a 94       	dec	r0
    5dec:	12 16       	cp	r1, r18
    5dee:	13 06       	cpc	r1, r19
    5df0:	14 06       	cpc	r1, r20
    5df2:	05 06       	cpc	r0, r21
    5df4:	08 95       	ret

00005df6 <__fp_round>:
    5df6:	09 2e       	mov	r0, r25
    5df8:	03 94       	inc	r0
    5dfa:	00 0c       	add	r0, r0
    5dfc:	11 f4       	brne	.+4      	; 0x5e02 <__fp_round+0xc>
    5dfe:	88 23       	and	r24, r24
    5e00:	52 f0       	brmi	.+20     	; 0x5e16 <__fp_round+0x20>
    5e02:	bb 0f       	add	r27, r27
    5e04:	40 f4       	brcc	.+16     	; 0x5e16 <__fp_round+0x20>
    5e06:	bf 2b       	or	r27, r31
    5e08:	11 f4       	brne	.+4      	; 0x5e0e <__fp_round+0x18>
    5e0a:	60 ff       	sbrs	r22, 0
    5e0c:	04 c0       	rjmp	.+8      	; 0x5e16 <__fp_round+0x20>
    5e0e:	6f 5f       	subi	r22, 0xFF	; 255
    5e10:	7f 4f       	sbci	r23, 0xFF	; 255
    5e12:	8f 4f       	sbci	r24, 0xFF	; 255
    5e14:	9f 4f       	sbci	r25, 0xFF	; 255
    5e16:	08 95       	ret

00005e18 <__fp_split3>:
    5e18:	57 fd       	sbrc	r21, 7
    5e1a:	90 58       	subi	r25, 0x80	; 128
    5e1c:	44 0f       	add	r20, r20
    5e1e:	55 1f       	adc	r21, r21
    5e20:	59 f0       	breq	.+22     	; 0x5e38 <__fp_splitA+0x10>
    5e22:	5f 3f       	cpi	r21, 0xFF	; 255
    5e24:	71 f0       	breq	.+28     	; 0x5e42 <__fp_splitA+0x1a>
    5e26:	47 95       	ror	r20

00005e28 <__fp_splitA>:
    5e28:	88 0f       	add	r24, r24
    5e2a:	97 fb       	bst	r25, 7
    5e2c:	99 1f       	adc	r25, r25
    5e2e:	61 f0       	breq	.+24     	; 0x5e48 <__fp_splitA+0x20>
    5e30:	9f 3f       	cpi	r25, 0xFF	; 255
    5e32:	79 f0       	breq	.+30     	; 0x5e52 <__fp_splitA+0x2a>
    5e34:	87 95       	ror	r24
    5e36:	08 95       	ret
    5e38:	12 16       	cp	r1, r18
    5e3a:	13 06       	cpc	r1, r19
    5e3c:	14 06       	cpc	r1, r20
    5e3e:	55 1f       	adc	r21, r21
    5e40:	f2 cf       	rjmp	.-28     	; 0x5e26 <__fp_split3+0xe>
    5e42:	46 95       	lsr	r20
    5e44:	f1 df       	rcall	.-30     	; 0x5e28 <__fp_splitA>
    5e46:	08 c0       	rjmp	.+16     	; 0x5e58 <__fp_splitA+0x30>
    5e48:	16 16       	cp	r1, r22
    5e4a:	17 06       	cpc	r1, r23
    5e4c:	18 06       	cpc	r1, r24
    5e4e:	99 1f       	adc	r25, r25
    5e50:	f1 cf       	rjmp	.-30     	; 0x5e34 <__fp_splitA+0xc>
    5e52:	86 95       	lsr	r24
    5e54:	71 05       	cpc	r23, r1
    5e56:	61 05       	cpc	r22, r1
    5e58:	08 94       	sec
    5e5a:	08 95       	ret

00005e5c <__fp_zero>:
    5e5c:	e8 94       	clt

00005e5e <__fp_szero>:
    5e5e:	bb 27       	eor	r27, r27
    5e60:	66 27       	eor	r22, r22
    5e62:	77 27       	eor	r23, r23
    5e64:	cb 01       	movw	r24, r22
    5e66:	97 f9       	bld	r25, 7
    5e68:	08 95       	ret

00005e6a <__gesf2>:
    5e6a:	8a df       	rcall	.-236    	; 0x5d80 <__fp_cmp>
    5e6c:	08 f4       	brcc	.+2      	; 0x5e70 <__gesf2+0x6>
    5e6e:	8f ef       	ldi	r24, 0xFF	; 255
    5e70:	08 95       	ret

00005e72 <lrint>:
    5e72:	da df       	rcall	.-76     	; 0x5e28 <__fp_splitA>
    5e74:	a8 f1       	brcs	.+106    	; 0x5ee0 <lrint+0x6e>
    5e76:	9e 57       	subi	r25, 0x7E	; 126
    5e78:	a8 f1       	brcs	.+106    	; 0x5ee4 <lrint+0x72>
    5e7a:	98 51       	subi	r25, 0x18	; 24
    5e7c:	60 f0       	brcs	.+24     	; 0x5e96 <lrint+0x24>
    5e7e:	39 f1       	breq	.+78     	; 0x5ece <lrint+0x5c>
    5e80:	98 30       	cpi	r25, 0x08	; 8
    5e82:	70 f5       	brcc	.+92     	; 0x5ee0 <lrint+0x6e>
    5e84:	09 2e       	mov	r0, r25
    5e86:	99 27       	eor	r25, r25
    5e88:	66 0f       	add	r22, r22
    5e8a:	77 1f       	adc	r23, r23
    5e8c:	88 1f       	adc	r24, r24
    5e8e:	99 1f       	adc	r25, r25
    5e90:	0a 94       	dec	r0
    5e92:	d1 f7       	brne	.-12     	; 0x5e88 <lrint+0x16>
    5e94:	1c c0       	rjmp	.+56     	; 0x5ece <lrint+0x5c>
    5e96:	bb 27       	eor	r27, r27
    5e98:	99 3f       	cpi	r25, 0xF9	; 249
    5e9a:	4c f4       	brge	.+18     	; 0x5eae <lrint+0x3c>
    5e9c:	b1 11       	cpse	r27, r1
    5e9e:	b1 e0       	ldi	r27, 0x01	; 1
    5ea0:	b6 2b       	or	r27, r22
    5ea2:	67 2f       	mov	r22, r23
    5ea4:	78 2f       	mov	r23, r24
    5ea6:	88 27       	eor	r24, r24
    5ea8:	98 5f       	subi	r25, 0xF8	; 248
    5eaa:	b1 f7       	brne	.-20     	; 0x5e98 <lrint+0x26>
    5eac:	08 c0       	rjmp	.+16     	; 0x5ebe <lrint+0x4c>
    5eae:	86 95       	lsr	r24
    5eb0:	77 95       	ror	r23
    5eb2:	67 95       	ror	r22
    5eb4:	b7 95       	ror	r27
    5eb6:	08 f4       	brcc	.+2      	; 0x5eba <lrint+0x48>
    5eb8:	b1 60       	ori	r27, 0x01	; 1
    5eba:	93 95       	inc	r25
    5ebc:	c1 f7       	brne	.-16     	; 0x5eae <lrint+0x3c>
    5ebe:	bb 0f       	add	r27, r27
    5ec0:	30 f4       	brcc	.+12     	; 0x5ece <lrint+0x5c>
    5ec2:	11 f4       	brne	.+4      	; 0x5ec8 <lrint+0x56>
    5ec4:	60 ff       	sbrs	r22, 0
    5ec6:	03 c0       	rjmp	.+6      	; 0x5ece <lrint+0x5c>
    5ec8:	6f 5f       	subi	r22, 0xFF	; 255
    5eca:	7f 4f       	sbci	r23, 0xFF	; 255
    5ecc:	8f 4f       	sbci	r24, 0xFF	; 255
    5ece:	3e f4       	brtc	.+14     	; 0x5ede <lrint+0x6c>
    5ed0:	90 95       	com	r25
    5ed2:	80 95       	com	r24
    5ed4:	70 95       	com	r23
    5ed6:	61 95       	neg	r22
    5ed8:	7f 4f       	sbci	r23, 0xFF	; 255
    5eda:	8f 4f       	sbci	r24, 0xFF	; 255
    5edc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ede:	08 95       	ret
    5ee0:	68 94       	set
    5ee2:	bd cf       	rjmp	.-134    	; 0x5e5e <__fp_szero>
    5ee4:	bb cf       	rjmp	.-138    	; 0x5e5c <__fp_zero>

00005ee6 <__mulsf3>:
    5ee6:	0b d0       	rcall	.+22     	; 0x5efe <__mulsf3x>
    5ee8:	86 cf       	rjmp	.-244    	; 0x5df6 <__fp_round>
    5eea:	77 df       	rcall	.-274    	; 0x5dda <__fp_pscA>
    5eec:	28 f0       	brcs	.+10     	; 0x5ef8 <__mulsf3+0x12>
    5eee:	7c df       	rcall	.-264    	; 0x5de8 <__fp_pscB>
    5ef0:	18 f0       	brcs	.+6      	; 0x5ef8 <__mulsf3+0x12>
    5ef2:	95 23       	and	r25, r21
    5ef4:	09 f0       	breq	.+2      	; 0x5ef8 <__mulsf3+0x12>
    5ef6:	68 cf       	rjmp	.-304    	; 0x5dc8 <__fp_inf>
    5ef8:	6d cf       	rjmp	.-294    	; 0x5dd4 <__fp_nan>
    5efa:	11 24       	eor	r1, r1
    5efc:	b0 cf       	rjmp	.-160    	; 0x5e5e <__fp_szero>

00005efe <__mulsf3x>:
    5efe:	8c df       	rcall	.-232    	; 0x5e18 <__fp_split3>
    5f00:	a0 f3       	brcs	.-24     	; 0x5eea <__mulsf3+0x4>

00005f02 <__mulsf3_pse>:
    5f02:	95 9f       	mul	r25, r21
    5f04:	d1 f3       	breq	.-12     	; 0x5efa <__mulsf3+0x14>
    5f06:	95 0f       	add	r25, r21
    5f08:	50 e0       	ldi	r21, 0x00	; 0
    5f0a:	55 1f       	adc	r21, r21
    5f0c:	62 9f       	mul	r22, r18
    5f0e:	f0 01       	movw	r30, r0
    5f10:	72 9f       	mul	r23, r18
    5f12:	bb 27       	eor	r27, r27
    5f14:	f0 0d       	add	r31, r0
    5f16:	b1 1d       	adc	r27, r1
    5f18:	63 9f       	mul	r22, r19
    5f1a:	aa 27       	eor	r26, r26
    5f1c:	f0 0d       	add	r31, r0
    5f1e:	b1 1d       	adc	r27, r1
    5f20:	aa 1f       	adc	r26, r26
    5f22:	64 9f       	mul	r22, r20
    5f24:	66 27       	eor	r22, r22
    5f26:	b0 0d       	add	r27, r0
    5f28:	a1 1d       	adc	r26, r1
    5f2a:	66 1f       	adc	r22, r22
    5f2c:	82 9f       	mul	r24, r18
    5f2e:	22 27       	eor	r18, r18
    5f30:	b0 0d       	add	r27, r0
    5f32:	a1 1d       	adc	r26, r1
    5f34:	62 1f       	adc	r22, r18
    5f36:	73 9f       	mul	r23, r19
    5f38:	b0 0d       	add	r27, r0
    5f3a:	a1 1d       	adc	r26, r1
    5f3c:	62 1f       	adc	r22, r18
    5f3e:	83 9f       	mul	r24, r19
    5f40:	a0 0d       	add	r26, r0
    5f42:	61 1d       	adc	r22, r1
    5f44:	22 1f       	adc	r18, r18
    5f46:	74 9f       	mul	r23, r20
    5f48:	33 27       	eor	r19, r19
    5f4a:	a0 0d       	add	r26, r0
    5f4c:	61 1d       	adc	r22, r1
    5f4e:	23 1f       	adc	r18, r19
    5f50:	84 9f       	mul	r24, r20
    5f52:	60 0d       	add	r22, r0
    5f54:	21 1d       	adc	r18, r1
    5f56:	82 2f       	mov	r24, r18
    5f58:	76 2f       	mov	r23, r22
    5f5a:	6a 2f       	mov	r22, r26
    5f5c:	11 24       	eor	r1, r1
    5f5e:	9f 57       	subi	r25, 0x7F	; 127
    5f60:	50 40       	sbci	r21, 0x00	; 0
    5f62:	8a f0       	brmi	.+34     	; 0x5f86 <__mulsf3_pse+0x84>
    5f64:	e1 f0       	breq	.+56     	; 0x5f9e <__mulsf3_pse+0x9c>
    5f66:	88 23       	and	r24, r24
    5f68:	4a f0       	brmi	.+18     	; 0x5f7c <__mulsf3_pse+0x7a>
    5f6a:	ee 0f       	add	r30, r30
    5f6c:	ff 1f       	adc	r31, r31
    5f6e:	bb 1f       	adc	r27, r27
    5f70:	66 1f       	adc	r22, r22
    5f72:	77 1f       	adc	r23, r23
    5f74:	88 1f       	adc	r24, r24
    5f76:	91 50       	subi	r25, 0x01	; 1
    5f78:	50 40       	sbci	r21, 0x00	; 0
    5f7a:	a9 f7       	brne	.-22     	; 0x5f66 <__mulsf3_pse+0x64>
    5f7c:	9e 3f       	cpi	r25, 0xFE	; 254
    5f7e:	51 05       	cpc	r21, r1
    5f80:	70 f0       	brcs	.+28     	; 0x5f9e <__mulsf3_pse+0x9c>
    5f82:	22 cf       	rjmp	.-444    	; 0x5dc8 <__fp_inf>
    5f84:	6c cf       	rjmp	.-296    	; 0x5e5e <__fp_szero>
    5f86:	5f 3f       	cpi	r21, 0xFF	; 255
    5f88:	ec f3       	brlt	.-6      	; 0x5f84 <__mulsf3_pse+0x82>
    5f8a:	98 3e       	cpi	r25, 0xE8	; 232
    5f8c:	dc f3       	brlt	.-10     	; 0x5f84 <__mulsf3_pse+0x82>
    5f8e:	86 95       	lsr	r24
    5f90:	77 95       	ror	r23
    5f92:	67 95       	ror	r22
    5f94:	b7 95       	ror	r27
    5f96:	f7 95       	ror	r31
    5f98:	e7 95       	ror	r30
    5f9a:	9f 5f       	subi	r25, 0xFF	; 255
    5f9c:	c1 f7       	brne	.-16     	; 0x5f8e <__mulsf3_pse+0x8c>
    5f9e:	fe 2b       	or	r31, r30
    5fa0:	88 0f       	add	r24, r24
    5fa2:	91 1d       	adc	r25, r1
    5fa4:	96 95       	lsr	r25
    5fa6:	87 95       	ror	r24
    5fa8:	97 f9       	bld	r25, 7
    5faa:	08 95       	ret

00005fac <pow>:
    5fac:	fa 01       	movw	r30, r20
    5fae:	ee 0f       	add	r30, r30
    5fb0:	ff 1f       	adc	r31, r31
    5fb2:	30 96       	adiw	r30, 0x00	; 0
    5fb4:	21 05       	cpc	r18, r1
    5fb6:	31 05       	cpc	r19, r1
    5fb8:	99 f1       	breq	.+102    	; 0x6020 <pow+0x74>
    5fba:	61 15       	cp	r22, r1
    5fbc:	71 05       	cpc	r23, r1
    5fbe:	61 f4       	brne	.+24     	; 0x5fd8 <pow+0x2c>
    5fc0:	80 38       	cpi	r24, 0x80	; 128
    5fc2:	bf e3       	ldi	r27, 0x3F	; 63
    5fc4:	9b 07       	cpc	r25, r27
    5fc6:	49 f1       	breq	.+82     	; 0x601a <pow+0x6e>
    5fc8:	68 94       	set
    5fca:	90 38       	cpi	r25, 0x80	; 128
    5fcc:	81 05       	cpc	r24, r1
    5fce:	61 f0       	breq	.+24     	; 0x5fe8 <pow+0x3c>
    5fd0:	80 38       	cpi	r24, 0x80	; 128
    5fd2:	bf ef       	ldi	r27, 0xFF	; 255
    5fd4:	9b 07       	cpc	r25, r27
    5fd6:	41 f0       	breq	.+16     	; 0x5fe8 <pow+0x3c>
    5fd8:	99 23       	and	r25, r25
    5fda:	42 f5       	brpl	.+80     	; 0x602c <pow+0x80>
    5fdc:	ff 3f       	cpi	r31, 0xFF	; 255
    5fde:	e1 05       	cpc	r30, r1
    5fe0:	31 05       	cpc	r19, r1
    5fe2:	21 05       	cpc	r18, r1
    5fe4:	11 f1       	breq	.+68     	; 0x602a <pow+0x7e>
    5fe6:	e8 94       	clt
    5fe8:	08 94       	sec
    5fea:	e7 95       	ror	r30
    5fec:	d9 01       	movw	r26, r18
    5fee:	aa 23       	and	r26, r26
    5ff0:	29 f4       	brne	.+10     	; 0x5ffc <pow+0x50>
    5ff2:	ab 2f       	mov	r26, r27
    5ff4:	be 2f       	mov	r27, r30
    5ff6:	f8 5f       	subi	r31, 0xF8	; 248
    5ff8:	d0 f3       	brcs	.-12     	; 0x5fee <pow+0x42>
    5ffa:	10 c0       	rjmp	.+32     	; 0x601c <pow+0x70>
    5ffc:	ff 5f       	subi	r31, 0xFF	; 255
    5ffe:	70 f4       	brcc	.+28     	; 0x601c <pow+0x70>
    6000:	a6 95       	lsr	r26
    6002:	e0 f7       	brcc	.-8      	; 0x5ffc <pow+0x50>
    6004:	f7 39       	cpi	r31, 0x97	; 151
    6006:	50 f0       	brcs	.+20     	; 0x601c <pow+0x70>
    6008:	19 f0       	breq	.+6      	; 0x6010 <pow+0x64>
    600a:	ff 3a       	cpi	r31, 0xAF	; 175
    600c:	38 f4       	brcc	.+14     	; 0x601c <pow+0x70>
    600e:	9f 77       	andi	r25, 0x7F	; 127
    6010:	9f 93       	push	r25
    6012:	0c d0       	rcall	.+24     	; 0x602c <pow+0x80>
    6014:	0f 90       	pop	r0
    6016:	07 fc       	sbrc	r0, 7
    6018:	90 58       	subi	r25, 0x80	; 128
    601a:	08 95       	ret
    601c:	3e f0       	brts	.+14     	; 0x602c <pow+0x80>
    601e:	da ce       	rjmp	.-588    	; 0x5dd4 <__fp_nan>
    6020:	60 e0       	ldi	r22, 0x00	; 0
    6022:	70 e0       	ldi	r23, 0x00	; 0
    6024:	80 e8       	ldi	r24, 0x80	; 128
    6026:	9f e3       	ldi	r25, 0x3F	; 63
    6028:	08 95       	ret
    602a:	4f e7       	ldi	r20, 0x7F	; 127
    602c:	9f 77       	andi	r25, 0x7F	; 127
    602e:	5f 93       	push	r21
    6030:	4f 93       	push	r20
    6032:	3f 93       	push	r19
    6034:	2f 93       	push	r18
    6036:	9e d0       	rcall	.+316    	; 0x6174 <log>
    6038:	2f 91       	pop	r18
    603a:	3f 91       	pop	r19
    603c:	4f 91       	pop	r20
    603e:	5f 91       	pop	r21
    6040:	52 df       	rcall	.-348    	; 0x5ee6 <__mulsf3>
    6042:	05 c0       	rjmp	.+10     	; 0x604e <exp>
    6044:	19 f4       	brne	.+6      	; 0x604c <pow+0xa0>
    6046:	0e f0       	brts	.+2      	; 0x604a <pow+0x9e>
    6048:	bf ce       	rjmp	.-642    	; 0x5dc8 <__fp_inf>
    604a:	08 cf       	rjmp	.-496    	; 0x5e5c <__fp_zero>
    604c:	c3 ce       	rjmp	.-634    	; 0x5dd4 <__fp_nan>

0000604e <exp>:
    604e:	ec de       	rcall	.-552    	; 0x5e28 <__fp_splitA>
    6050:	c8 f3       	brcs	.-14     	; 0x6044 <pow+0x98>
    6052:	96 38       	cpi	r25, 0x86	; 134
    6054:	c0 f7       	brcc	.-16     	; 0x6046 <pow+0x9a>
    6056:	07 f8       	bld	r0, 7
    6058:	0f 92       	push	r0
    605a:	e8 94       	clt
    605c:	2b e3       	ldi	r18, 0x3B	; 59
    605e:	3a ea       	ldi	r19, 0xAA	; 170
    6060:	48 eb       	ldi	r20, 0xB8	; 184
    6062:	5f e7       	ldi	r21, 0x7F	; 127
    6064:	4e df       	rcall	.-356    	; 0x5f02 <__mulsf3_pse>
    6066:	0f 92       	push	r0
    6068:	0f 92       	push	r0
    606a:	0f 92       	push	r0
    606c:	4d b7       	in	r20, 0x3d	; 61
    606e:	5e b7       	in	r21, 0x3e	; 62
    6070:	0f 92       	push	r0
    6072:	c0 d0       	rcall	.+384    	; 0x61f4 <modf>
    6074:	e8 ec       	ldi	r30, 0xC8	; 200
    6076:	f0 e0       	ldi	r31, 0x00	; 0
    6078:	16 d0       	rcall	.+44     	; 0x60a6 <__fp_powser>
    607a:	4f 91       	pop	r20
    607c:	5f 91       	pop	r21
    607e:	ef 91       	pop	r30
    6080:	ff 91       	pop	r31
    6082:	e5 95       	asr	r30
    6084:	ee 1f       	adc	r30, r30
    6086:	ff 1f       	adc	r31, r31
    6088:	49 f0       	breq	.+18     	; 0x609c <exp+0x4e>
    608a:	fe 57       	subi	r31, 0x7E	; 126
    608c:	e0 68       	ori	r30, 0x80	; 128
    608e:	44 27       	eor	r20, r20
    6090:	ee 0f       	add	r30, r30
    6092:	44 1f       	adc	r20, r20
    6094:	fa 95       	dec	r31
    6096:	e1 f7       	brne	.-8      	; 0x6090 <exp+0x42>
    6098:	41 95       	neg	r20
    609a:	55 0b       	sbc	r21, r21
    609c:	32 d0       	rcall	.+100    	; 0x6102 <ldexp>
    609e:	0f 90       	pop	r0
    60a0:	07 fe       	sbrs	r0, 7
    60a2:	26 c0       	rjmp	.+76     	; 0x60f0 <inverse>
    60a4:	08 95       	ret

000060a6 <__fp_powser>:
    60a6:	df 93       	push	r29
    60a8:	cf 93       	push	r28
    60aa:	1f 93       	push	r17
    60ac:	0f 93       	push	r16
    60ae:	ff 92       	push	r15
    60b0:	ef 92       	push	r14
    60b2:	df 92       	push	r13
    60b4:	7b 01       	movw	r14, r22
    60b6:	8c 01       	movw	r16, r24
    60b8:	68 94       	set
    60ba:	05 c0       	rjmp	.+10     	; 0x60c6 <__fp_powser+0x20>
    60bc:	da 2e       	mov	r13, r26
    60be:	ef 01       	movw	r28, r30
    60c0:	1e df       	rcall	.-452    	; 0x5efe <__mulsf3x>
    60c2:	fe 01       	movw	r30, r28
    60c4:	e8 94       	clt
    60c6:	a5 91       	lpm	r26, Z+
    60c8:	25 91       	lpm	r18, Z+
    60ca:	35 91       	lpm	r19, Z+
    60cc:	45 91       	lpm	r20, Z+
    60ce:	55 91       	lpm	r21, Z+
    60d0:	ae f3       	brts	.-22     	; 0x60bc <__fp_powser+0x16>
    60d2:	ef 01       	movw	r28, r30
    60d4:	28 dd       	rcall	.-1456   	; 0x5b26 <__addsf3x>
    60d6:	fe 01       	movw	r30, r28
    60d8:	97 01       	movw	r18, r14
    60da:	a8 01       	movw	r20, r16
    60dc:	da 94       	dec	r13
    60de:	79 f7       	brne	.-34     	; 0x60be <__fp_powser+0x18>
    60e0:	df 90       	pop	r13
    60e2:	ef 90       	pop	r14
    60e4:	ff 90       	pop	r15
    60e6:	0f 91       	pop	r16
    60e8:	1f 91       	pop	r17
    60ea:	cf 91       	pop	r28
    60ec:	df 91       	pop	r29
    60ee:	08 95       	ret

000060f0 <inverse>:
    60f0:	9b 01       	movw	r18, r22
    60f2:	ac 01       	movw	r20, r24
    60f4:	60 e0       	ldi	r22, 0x00	; 0
    60f6:	70 e0       	ldi	r23, 0x00	; 0
    60f8:	80 e8       	ldi	r24, 0x80	; 128
    60fa:	9f e3       	ldi	r25, 0x3F	; 63
    60fc:	6b cd       	rjmp	.-1322   	; 0x5bd4 <__divsf3>
    60fe:	64 ce       	rjmp	.-824    	; 0x5dc8 <__fp_inf>
    6100:	ac c0       	rjmp	.+344    	; 0x625a <__fp_mpack>

00006102 <ldexp>:
    6102:	92 de       	rcall	.-732    	; 0x5e28 <__fp_splitA>
    6104:	e8 f3       	brcs	.-6      	; 0x6100 <inverse+0x10>
    6106:	99 23       	and	r25, r25
    6108:	d9 f3       	breq	.-10     	; 0x6100 <inverse+0x10>
    610a:	94 0f       	add	r25, r20
    610c:	51 1d       	adc	r21, r1
    610e:	bb f3       	brvs	.-18     	; 0x60fe <inverse+0xe>
    6110:	91 50       	subi	r25, 0x01	; 1
    6112:	50 40       	sbci	r21, 0x00	; 0
    6114:	94 f0       	brlt	.+36     	; 0x613a <ldexp+0x38>
    6116:	59 f0       	breq	.+22     	; 0x612e <ldexp+0x2c>
    6118:	88 23       	and	r24, r24
    611a:	32 f0       	brmi	.+12     	; 0x6128 <ldexp+0x26>
    611c:	66 0f       	add	r22, r22
    611e:	77 1f       	adc	r23, r23
    6120:	88 1f       	adc	r24, r24
    6122:	91 50       	subi	r25, 0x01	; 1
    6124:	50 40       	sbci	r21, 0x00	; 0
    6126:	c1 f7       	brne	.-16     	; 0x6118 <ldexp+0x16>
    6128:	9e 3f       	cpi	r25, 0xFE	; 254
    612a:	51 05       	cpc	r21, r1
    612c:	44 f7       	brge	.-48     	; 0x60fe <inverse+0xe>
    612e:	88 0f       	add	r24, r24
    6130:	91 1d       	adc	r25, r1
    6132:	96 95       	lsr	r25
    6134:	87 95       	ror	r24
    6136:	97 f9       	bld	r25, 7
    6138:	08 95       	ret
    613a:	5f 3f       	cpi	r21, 0xFF	; 255
    613c:	ac f0       	brlt	.+42     	; 0x6168 <ldexp+0x66>
    613e:	98 3e       	cpi	r25, 0xE8	; 232
    6140:	9c f0       	brlt	.+38     	; 0x6168 <ldexp+0x66>
    6142:	bb 27       	eor	r27, r27
    6144:	86 95       	lsr	r24
    6146:	77 95       	ror	r23
    6148:	67 95       	ror	r22
    614a:	b7 95       	ror	r27
    614c:	08 f4       	brcc	.+2      	; 0x6150 <ldexp+0x4e>
    614e:	b1 60       	ori	r27, 0x01	; 1
    6150:	93 95       	inc	r25
    6152:	c1 f7       	brne	.-16     	; 0x6144 <ldexp+0x42>
    6154:	bb 0f       	add	r27, r27
    6156:	58 f7       	brcc	.-42     	; 0x612e <ldexp+0x2c>
    6158:	11 f4       	brne	.+4      	; 0x615e <ldexp+0x5c>
    615a:	60 ff       	sbrs	r22, 0
    615c:	e8 cf       	rjmp	.-48     	; 0x612e <ldexp+0x2c>
    615e:	6f 5f       	subi	r22, 0xFF	; 255
    6160:	7f 4f       	sbci	r23, 0xFF	; 255
    6162:	8f 4f       	sbci	r24, 0xFF	; 255
    6164:	9f 4f       	sbci	r25, 0xFF	; 255
    6166:	e3 cf       	rjmp	.-58     	; 0x612e <ldexp+0x2c>
    6168:	7a ce       	rjmp	.-780    	; 0x5e5e <__fp_szero>
    616a:	0e f0       	brts	.+2      	; 0x616e <ldexp+0x6c>
    616c:	76 c0       	rjmp	.+236    	; 0x625a <__fp_mpack>
    616e:	32 ce       	rjmp	.-924    	; 0x5dd4 <__fp_nan>
    6170:	68 94       	set
    6172:	2a ce       	rjmp	.-940    	; 0x5dc8 <__fp_inf>

00006174 <log>:
    6174:	59 de       	rcall	.-846    	; 0x5e28 <__fp_splitA>
    6176:	c8 f3       	brcs	.-14     	; 0x616a <ldexp+0x68>
    6178:	99 23       	and	r25, r25
    617a:	d1 f3       	breq	.-12     	; 0x6170 <ldexp+0x6e>
    617c:	c6 f3       	brts	.-16     	; 0x616e <ldexp+0x6c>
    617e:	df 93       	push	r29
    6180:	cf 93       	push	r28
    6182:	1f 93       	push	r17
    6184:	0f 93       	push	r16
    6186:	ff 92       	push	r15
    6188:	c9 2f       	mov	r28, r25
    618a:	dd 27       	eor	r29, r29
    618c:	88 23       	and	r24, r24
    618e:	2a f0       	brmi	.+10     	; 0x619a <log+0x26>
    6190:	21 97       	sbiw	r28, 0x01	; 1
    6192:	66 0f       	add	r22, r22
    6194:	77 1f       	adc	r23, r23
    6196:	88 1f       	adc	r24, r24
    6198:	da f7       	brpl	.-10     	; 0x6190 <log+0x1c>
    619a:	20 e0       	ldi	r18, 0x00	; 0
    619c:	30 e0       	ldi	r19, 0x00	; 0
    619e:	40 e8       	ldi	r20, 0x80	; 128
    61a0:	5f eb       	ldi	r21, 0xBF	; 191
    61a2:	9f e3       	ldi	r25, 0x3F	; 63
    61a4:	88 39       	cpi	r24, 0x98	; 152
    61a6:	20 f0       	brcs	.+8      	; 0x61b0 <log+0x3c>
    61a8:	80 3e       	cpi	r24, 0xE0	; 224
    61aa:	30 f0       	brcs	.+12     	; 0x61b8 <log+0x44>
    61ac:	21 96       	adiw	r28, 0x01	; 1
    61ae:	8f 77       	andi	r24, 0x7F	; 127
    61b0:	a9 dc       	rcall	.-1710   	; 0x5b04 <__addsf3>
    61b2:	e0 ef       	ldi	r30, 0xF0	; 240
    61b4:	f0 e0       	ldi	r31, 0x00	; 0
    61b6:	03 c0       	rjmp	.+6      	; 0x61be <log+0x4a>
    61b8:	a5 dc       	rcall	.-1718   	; 0x5b04 <__addsf3>
    61ba:	ed e1       	ldi	r30, 0x1D	; 29
    61bc:	f1 e0       	ldi	r31, 0x01	; 1
    61be:	73 df       	rcall	.-282    	; 0x60a6 <__fp_powser>
    61c0:	8b 01       	movw	r16, r22
    61c2:	be 01       	movw	r22, r28
    61c4:	ec 01       	movw	r28, r24
    61c6:	fb 2e       	mov	r15, r27
    61c8:	6f 57       	subi	r22, 0x7F	; 127
    61ca:	71 09       	sbc	r23, r1
    61cc:	75 95       	asr	r23
    61ce:	77 1f       	adc	r23, r23
    61d0:	88 0b       	sbc	r24, r24
    61d2:	99 0b       	sbc	r25, r25
    61d4:	9a dd       	rcall	.-1228   	; 0x5d0a <__floatsisf>
    61d6:	28 e1       	ldi	r18, 0x18	; 24
    61d8:	32 e7       	ldi	r19, 0x72	; 114
    61da:	41 e3       	ldi	r20, 0x31	; 49
    61dc:	5f e3       	ldi	r21, 0x3F	; 63
    61de:	8f de       	rcall	.-738    	; 0x5efe <__mulsf3x>
    61e0:	af 2d       	mov	r26, r15
    61e2:	98 01       	movw	r18, r16
    61e4:	ae 01       	movw	r20, r28
    61e6:	ff 90       	pop	r15
    61e8:	0f 91       	pop	r16
    61ea:	1f 91       	pop	r17
    61ec:	cf 91       	pop	r28
    61ee:	df 91       	pop	r29
    61f0:	9a dc       	rcall	.-1740   	; 0x5b26 <__addsf3x>
    61f2:	01 ce       	rjmp	.-1022   	; 0x5df6 <__fp_round>

000061f4 <modf>:
    61f4:	fa 01       	movw	r30, r20
    61f6:	dc 01       	movw	r26, r24
    61f8:	aa 0f       	add	r26, r26
    61fa:	bb 1f       	adc	r27, r27
    61fc:	9b 01       	movw	r18, r22
    61fe:	ac 01       	movw	r20, r24
    6200:	bf 57       	subi	r27, 0x7F	; 127
    6202:	28 f4       	brcc	.+10     	; 0x620e <modf+0x1a>
    6204:	22 27       	eor	r18, r18
    6206:	33 27       	eor	r19, r19
    6208:	44 27       	eor	r20, r20
    620a:	50 78       	andi	r21, 0x80	; 128
    620c:	1f c0       	rjmp	.+62     	; 0x624c <modf+0x58>
    620e:	b7 51       	subi	r27, 0x17	; 23
    6210:	88 f4       	brcc	.+34     	; 0x6234 <modf+0x40>
    6212:	ab 2f       	mov	r26, r27
    6214:	00 24       	eor	r0, r0
    6216:	46 95       	lsr	r20
    6218:	37 95       	ror	r19
    621a:	27 95       	ror	r18
    621c:	01 1c       	adc	r0, r1
    621e:	a3 95       	inc	r26
    6220:	d2 f3       	brmi	.-12     	; 0x6216 <modf+0x22>
    6222:	00 20       	and	r0, r0
    6224:	69 f0       	breq	.+26     	; 0x6240 <modf+0x4c>
    6226:	22 0f       	add	r18, r18
    6228:	33 1f       	adc	r19, r19
    622a:	44 1f       	adc	r20, r20
    622c:	b3 95       	inc	r27
    622e:	da f3       	brmi	.-10     	; 0x6226 <modf+0x32>
    6230:	0d d0       	rcall	.+26     	; 0x624c <modf+0x58>
    6232:	67 cc       	rjmp	.-1842   	; 0x5b02 <__subsf3>
    6234:	61 30       	cpi	r22, 0x01	; 1
    6236:	71 05       	cpc	r23, r1
    6238:	a0 e8       	ldi	r26, 0x80	; 128
    623a:	8a 07       	cpc	r24, r26
    623c:	b9 46       	sbci	r27, 0x69	; 105
    623e:	30 f4       	brcc	.+12     	; 0x624c <modf+0x58>
    6240:	9b 01       	movw	r18, r22
    6242:	ac 01       	movw	r20, r24
    6244:	66 27       	eor	r22, r22
    6246:	77 27       	eor	r23, r23
    6248:	88 27       	eor	r24, r24
    624a:	90 78       	andi	r25, 0x80	; 128
    624c:	30 96       	adiw	r30, 0x00	; 0
    624e:	21 f0       	breq	.+8      	; 0x6258 <modf+0x64>
    6250:	20 83       	st	Z, r18
    6252:	31 83       	std	Z+1, r19	; 0x01
    6254:	42 83       	std	Z+2, r20	; 0x02
    6256:	53 83       	std	Z+3, r21	; 0x03
    6258:	08 95       	ret

0000625a <__fp_mpack>:
    625a:	9f 3f       	cpi	r25, 0xFF	; 255
    625c:	31 f0       	breq	.+12     	; 0x626a <__fp_mpack_finite+0xc>

0000625e <__fp_mpack_finite>:
    625e:	91 50       	subi	r25, 0x01	; 1
    6260:	20 f4       	brcc	.+8      	; 0x626a <__fp_mpack_finite+0xc>
    6262:	87 95       	ror	r24
    6264:	77 95       	ror	r23
    6266:	67 95       	ror	r22
    6268:	b7 95       	ror	r27
    626a:	88 0f       	add	r24, r24
    626c:	91 1d       	adc	r25, r1
    626e:	96 95       	lsr	r25
    6270:	87 95       	ror	r24
    6272:	97 f9       	bld	r25, 7
    6274:	08 95       	ret

00006276 <vfprintf>:
    6276:	a1 e1       	ldi	r26, 0x11	; 17
    6278:	b0 e0       	ldi	r27, 0x00	; 0
    627a:	e0 e4       	ldi	r30, 0x40	; 64
    627c:	f1 e3       	ldi	r31, 0x31	; 49
    627e:	a4 c3       	rjmp	.+1864   	; 0x69c8 <__prologue_saves__>
    6280:	3c 01       	movw	r6, r24
    6282:	7f 87       	std	Y+15, r23	; 0x0f
    6284:	6e 87       	std	Y+14, r22	; 0x0e
    6286:	6a 01       	movw	r12, r20
    6288:	fc 01       	movw	r30, r24
    628a:	17 82       	std	Z+7, r1	; 0x07
    628c:	16 82       	std	Z+6, r1	; 0x06
    628e:	83 81       	ldd	r24, Z+3	; 0x03
    6290:	81 fd       	sbrc	r24, 1
    6292:	03 c0       	rjmp	.+6      	; 0x629a <vfprintf+0x24>
    6294:	6f ef       	ldi	r22, 0xFF	; 255
    6296:	7f ef       	ldi	r23, 0xFF	; 255
    6298:	52 c3       	rjmp	.+1700   	; 0x693e <vfprintf+0x6c8>
    629a:	9e 01       	movw	r18, r28
    629c:	2f 5f       	subi	r18, 0xFF	; 255
    629e:	3f 4f       	sbci	r19, 0xFF	; 255
    62a0:	39 8b       	std	Y+17, r19	; 0x11
    62a2:	28 8b       	std	Y+16, r18	; 0x10
    62a4:	f3 01       	movw	r30, r6
    62a6:	23 81       	ldd	r18, Z+3	; 0x03
    62a8:	ee 85       	ldd	r30, Y+14	; 0x0e
    62aa:	ff 85       	ldd	r31, Y+15	; 0x0f
    62ac:	23 fd       	sbrc	r18, 3
    62ae:	85 91       	lpm	r24, Z+
    62b0:	23 ff       	sbrs	r18, 3
    62b2:	81 91       	ld	r24, Z+
    62b4:	ff 87       	std	Y+15, r31	; 0x0f
    62b6:	ee 87       	std	Y+14, r30	; 0x0e
    62b8:	88 23       	and	r24, r24
    62ba:	09 f4       	brne	.+2      	; 0x62be <vfprintf+0x48>
    62bc:	3d c3       	rjmp	.+1658   	; 0x6938 <vfprintf+0x6c2>
    62be:	85 32       	cpi	r24, 0x25	; 37
    62c0:	51 f4       	brne	.+20     	; 0x62d6 <vfprintf+0x60>
    62c2:	ee 85       	ldd	r30, Y+14	; 0x0e
    62c4:	ff 85       	ldd	r31, Y+15	; 0x0f
    62c6:	23 fd       	sbrc	r18, 3
    62c8:	85 91       	lpm	r24, Z+
    62ca:	23 ff       	sbrs	r18, 3
    62cc:	81 91       	ld	r24, Z+
    62ce:	ff 87       	std	Y+15, r31	; 0x0f
    62d0:	ee 87       	std	Y+14, r30	; 0x0e
    62d2:	85 32       	cpi	r24, 0x25	; 37
    62d4:	21 f4       	brne	.+8      	; 0x62de <vfprintf+0x68>
    62d6:	90 e0       	ldi	r25, 0x00	; 0
    62d8:	b3 01       	movw	r22, r6
    62da:	a0 d5       	rcall	.+2880   	; 0x6e1c <fputc>
    62dc:	e3 cf       	rjmp	.-58     	; 0x62a4 <vfprintf+0x2e>
    62de:	98 2f       	mov	r25, r24
    62e0:	10 e0       	ldi	r17, 0x00	; 0
    62e2:	88 24       	eor	r8, r8
    62e4:	99 24       	eor	r9, r9
    62e6:	10 32       	cpi	r17, 0x20	; 32
    62e8:	b0 f4       	brcc	.+44     	; 0x6316 <vfprintf+0xa0>
    62ea:	9b 32       	cpi	r25, 0x2B	; 43
    62ec:	69 f0       	breq	.+26     	; 0x6308 <vfprintf+0x92>
    62ee:	9c 32       	cpi	r25, 0x2C	; 44
    62f0:	28 f4       	brcc	.+10     	; 0x62fc <vfprintf+0x86>
    62f2:	90 32       	cpi	r25, 0x20	; 32
    62f4:	51 f0       	breq	.+20     	; 0x630a <vfprintf+0x94>
    62f6:	93 32       	cpi	r25, 0x23	; 35
    62f8:	71 f4       	brne	.+28     	; 0x6316 <vfprintf+0xa0>
    62fa:	0b c0       	rjmp	.+22     	; 0x6312 <vfprintf+0x9c>
    62fc:	9d 32       	cpi	r25, 0x2D	; 45
    62fe:	39 f0       	breq	.+14     	; 0x630e <vfprintf+0x98>
    6300:	90 33       	cpi	r25, 0x30	; 48
    6302:	49 f4       	brne	.+18     	; 0x6316 <vfprintf+0xa0>
    6304:	11 60       	ori	r17, 0x01	; 1
    6306:	28 c0       	rjmp	.+80     	; 0x6358 <vfprintf+0xe2>
    6308:	12 60       	ori	r17, 0x02	; 2
    630a:	14 60       	ori	r17, 0x04	; 4
    630c:	25 c0       	rjmp	.+74     	; 0x6358 <vfprintf+0xe2>
    630e:	18 60       	ori	r17, 0x08	; 8
    6310:	23 c0       	rjmp	.+70     	; 0x6358 <vfprintf+0xe2>
    6312:	10 61       	ori	r17, 0x10	; 16
    6314:	21 c0       	rjmp	.+66     	; 0x6358 <vfprintf+0xe2>
    6316:	17 fd       	sbrc	r17, 7
    6318:	2a c0       	rjmp	.+84     	; 0x636e <vfprintf+0xf8>
    631a:	89 2f       	mov	r24, r25
    631c:	80 53       	subi	r24, 0x30	; 48
    631e:	8a 30       	cpi	r24, 0x0A	; 10
    6320:	78 f4       	brcc	.+30     	; 0x6340 <vfprintf+0xca>
    6322:	16 ff       	sbrs	r17, 6
    6324:	06 c0       	rjmp	.+12     	; 0x6332 <vfprintf+0xbc>
    6326:	fa e0       	ldi	r31, 0x0A	; 10
    6328:	9f 9e       	mul	r9, r31
    632a:	90 2c       	mov	r9, r0
    632c:	11 24       	eor	r1, r1
    632e:	98 0e       	add	r9, r24
    6330:	13 c0       	rjmp	.+38     	; 0x6358 <vfprintf+0xe2>
    6332:	3a e0       	ldi	r19, 0x0A	; 10
    6334:	83 9e       	mul	r8, r19
    6336:	80 2c       	mov	r8, r0
    6338:	11 24       	eor	r1, r1
    633a:	88 0e       	add	r8, r24
    633c:	10 62       	ori	r17, 0x20	; 32
    633e:	0c c0       	rjmp	.+24     	; 0x6358 <vfprintf+0xe2>
    6340:	9e 32       	cpi	r25, 0x2E	; 46
    6342:	21 f4       	brne	.+8      	; 0x634c <vfprintf+0xd6>
    6344:	16 fd       	sbrc	r17, 6
    6346:	f8 c2       	rjmp	.+1520   	; 0x6938 <vfprintf+0x6c2>
    6348:	10 64       	ori	r17, 0x40	; 64
    634a:	06 c0       	rjmp	.+12     	; 0x6358 <vfprintf+0xe2>
    634c:	9c 36       	cpi	r25, 0x6C	; 108
    634e:	11 f4       	brne	.+4      	; 0x6354 <vfprintf+0xde>
    6350:	10 68       	ori	r17, 0x80	; 128
    6352:	02 c0       	rjmp	.+4      	; 0x6358 <vfprintf+0xe2>
    6354:	98 36       	cpi	r25, 0x68	; 104
    6356:	59 f4       	brne	.+22     	; 0x636e <vfprintf+0xf8>
    6358:	ee 85       	ldd	r30, Y+14	; 0x0e
    635a:	ff 85       	ldd	r31, Y+15	; 0x0f
    635c:	23 fd       	sbrc	r18, 3
    635e:	95 91       	lpm	r25, Z+
    6360:	23 ff       	sbrs	r18, 3
    6362:	91 91       	ld	r25, Z+
    6364:	ff 87       	std	Y+15, r31	; 0x0f
    6366:	ee 87       	std	Y+14, r30	; 0x0e
    6368:	99 23       	and	r25, r25
    636a:	09 f0       	breq	.+2      	; 0x636e <vfprintf+0xf8>
    636c:	bc cf       	rjmp	.-136    	; 0x62e6 <vfprintf+0x70>
    636e:	89 2f       	mov	r24, r25
    6370:	85 54       	subi	r24, 0x45	; 69
    6372:	83 30       	cpi	r24, 0x03	; 3
    6374:	20 f4       	brcc	.+8      	; 0x637e <vfprintf+0x108>
    6376:	81 2f       	mov	r24, r17
    6378:	80 61       	ori	r24, 0x10	; 16
    637a:	90 5e       	subi	r25, 0xE0	; 224
    637c:	07 c0       	rjmp	.+14     	; 0x638c <vfprintf+0x116>
    637e:	89 2f       	mov	r24, r25
    6380:	85 56       	subi	r24, 0x65	; 101
    6382:	83 30       	cpi	r24, 0x03	; 3
    6384:	08 f0       	brcs	.+2      	; 0x6388 <vfprintf+0x112>
    6386:	8f c1       	rjmp	.+798    	; 0x66a6 <vfprintf+0x430>
    6388:	81 2f       	mov	r24, r17
    638a:	8f 7e       	andi	r24, 0xEF	; 239
    638c:	86 fd       	sbrc	r24, 6
    638e:	02 c0       	rjmp	.+4      	; 0x6394 <vfprintf+0x11e>
    6390:	76 e0       	ldi	r23, 0x06	; 6
    6392:	97 2e       	mov	r9, r23
    6394:	6f e3       	ldi	r22, 0x3F	; 63
    6396:	f6 2e       	mov	r15, r22
    6398:	f8 22       	and	r15, r24
    639a:	95 36       	cpi	r25, 0x65	; 101
    639c:	19 f4       	brne	.+6      	; 0x63a4 <vfprintf+0x12e>
    639e:	f0 e4       	ldi	r31, 0x40	; 64
    63a0:	ff 2a       	or	r15, r31
    63a2:	07 c0       	rjmp	.+14     	; 0x63b2 <vfprintf+0x13c>
    63a4:	96 36       	cpi	r25, 0x66	; 102
    63a6:	19 f4       	brne	.+6      	; 0x63ae <vfprintf+0x138>
    63a8:	20 e8       	ldi	r18, 0x80	; 128
    63aa:	f2 2a       	or	r15, r18
    63ac:	02 c0       	rjmp	.+4      	; 0x63b2 <vfprintf+0x13c>
    63ae:	91 10       	cpse	r9, r1
    63b0:	9a 94       	dec	r9
    63b2:	f7 fe       	sbrs	r15, 7
    63b4:	0a c0       	rjmp	.+20     	; 0x63ca <vfprintf+0x154>
    63b6:	3b e3       	ldi	r19, 0x3B	; 59
    63b8:	39 15       	cp	r19, r9
    63ba:	18 f4       	brcc	.+6      	; 0x63c2 <vfprintf+0x14c>
    63bc:	5c e3       	ldi	r21, 0x3C	; 60
    63be:	b5 2e       	mov	r11, r21
    63c0:	02 c0       	rjmp	.+4      	; 0x63c6 <vfprintf+0x150>
    63c2:	b9 2c       	mov	r11, r9
    63c4:	b3 94       	inc	r11
    63c6:	27 e0       	ldi	r18, 0x07	; 7
    63c8:	09 c0       	rjmp	.+18     	; 0x63dc <vfprintf+0x166>
    63ca:	47 e0       	ldi	r20, 0x07	; 7
    63cc:	49 15       	cp	r20, r9
    63ce:	20 f4       	brcc	.+8      	; 0x63d8 <vfprintf+0x162>
    63d0:	bb 24       	eor	r11, r11
    63d2:	47 e0       	ldi	r20, 0x07	; 7
    63d4:	94 2e       	mov	r9, r20
    63d6:	f7 cf       	rjmp	.-18     	; 0x63c6 <vfprintf+0x150>
    63d8:	29 2d       	mov	r18, r9
    63da:	bb 24       	eor	r11, r11
    63dc:	c6 01       	movw	r24, r12
    63de:	04 96       	adiw	r24, 0x04	; 4
    63e0:	9d 87       	std	Y+13, r25	; 0x0d
    63e2:	8c 87       	std	Y+12, r24	; 0x0c
    63e4:	f6 01       	movw	r30, r12
    63e6:	60 81       	ld	r22, Z
    63e8:	71 81       	ldd	r23, Z+1	; 0x01
    63ea:	82 81       	ldd	r24, Z+2	; 0x02
    63ec:	93 81       	ldd	r25, Z+3	; 0x03
    63ee:	ae 01       	movw	r20, r28
    63f0:	4f 5f       	subi	r20, 0xFF	; 255
    63f2:	5f 4f       	sbci	r21, 0xFF	; 255
    63f4:	0b 2d       	mov	r16, r11
    63f6:	24 d4       	rcall	.+2120   	; 0x6c40 <__ftoa_engine>
    63f8:	6c 01       	movw	r12, r24
    63fa:	09 81       	ldd	r16, Y+1	; 0x01
    63fc:	20 2e       	mov	r2, r16
    63fe:	33 24       	eor	r3, r3
    6400:	00 ff       	sbrs	r16, 0
    6402:	04 c0       	rjmp	.+8      	; 0x640c <vfprintf+0x196>
    6404:	03 fd       	sbrc	r16, 3
    6406:	02 c0       	rjmp	.+4      	; 0x640c <vfprintf+0x196>
    6408:	1d e2       	ldi	r17, 0x2D	; 45
    640a:	09 c0       	rjmp	.+18     	; 0x641e <vfprintf+0x1a8>
    640c:	f1 fe       	sbrs	r15, 1
    640e:	02 c0       	rjmp	.+4      	; 0x6414 <vfprintf+0x19e>
    6410:	1b e2       	ldi	r17, 0x2B	; 43
    6412:	05 c0       	rjmp	.+10     	; 0x641e <vfprintf+0x1a8>
    6414:	f2 fc       	sbrc	r15, 2
    6416:	02 c0       	rjmp	.+4      	; 0x641c <vfprintf+0x1a6>
    6418:	10 e0       	ldi	r17, 0x00	; 0
    641a:	01 c0       	rjmp	.+2      	; 0x641e <vfprintf+0x1a8>
    641c:	10 e2       	ldi	r17, 0x20	; 32
    641e:	c1 01       	movw	r24, r2
    6420:	8c 70       	andi	r24, 0x0C	; 12
    6422:	90 70       	andi	r25, 0x00	; 0
    6424:	89 2b       	or	r24, r25
    6426:	a1 f1       	breq	.+104    	; 0x6490 <vfprintf+0x21a>
    6428:	11 23       	and	r17, r17
    642a:	11 f4       	brne	.+4      	; 0x6430 <vfprintf+0x1ba>
    642c:	83 e0       	ldi	r24, 0x03	; 3
    642e:	01 c0       	rjmp	.+2      	; 0x6432 <vfprintf+0x1bc>
    6430:	84 e0       	ldi	r24, 0x04	; 4
    6432:	88 15       	cp	r24, r8
    6434:	10 f0       	brcs	.+4      	; 0x643a <vfprintf+0x1c4>
    6436:	88 24       	eor	r8, r8
    6438:	09 c0       	rjmp	.+18     	; 0x644c <vfprintf+0x1d6>
    643a:	88 1a       	sub	r8, r24
    643c:	f3 fc       	sbrc	r15, 3
    643e:	06 c0       	rjmp	.+12     	; 0x644c <vfprintf+0x1d6>
    6440:	80 e2       	ldi	r24, 0x20	; 32
    6442:	90 e0       	ldi	r25, 0x00	; 0
    6444:	b3 01       	movw	r22, r6
    6446:	ea d4       	rcall	.+2516   	; 0x6e1c <fputc>
    6448:	8a 94       	dec	r8
    644a:	d1 f7       	brne	.-12     	; 0x6440 <vfprintf+0x1ca>
    644c:	11 23       	and	r17, r17
    644e:	21 f0       	breq	.+8      	; 0x6458 <vfprintf+0x1e2>
    6450:	81 2f       	mov	r24, r17
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	b3 01       	movw	r22, r6
    6456:	e2 d4       	rcall	.+2500   	; 0x6e1c <fputc>
    6458:	23 fe       	sbrs	r2, 3
    645a:	03 c0       	rjmp	.+6      	; 0x6462 <vfprintf+0x1ec>
    645c:	0f e5       	ldi	r16, 0x5F	; 95
    645e:	15 e0       	ldi	r17, 0x05	; 5
    6460:	0d c0       	rjmp	.+26     	; 0x647c <vfprintf+0x206>
    6462:	03 e6       	ldi	r16, 0x63	; 99
    6464:	15 e0       	ldi	r17, 0x05	; 5
    6466:	0a c0       	rjmp	.+20     	; 0x647c <vfprintf+0x206>
    6468:	e1 14       	cp	r14, r1
    646a:	f1 04       	cpc	r15, r1
    646c:	09 f0       	breq	.+2      	; 0x6470 <vfprintf+0x1fa>
    646e:	80 52       	subi	r24, 0x20	; 32
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	b3 01       	movw	r22, r6
    6474:	d3 d4       	rcall	.+2470   	; 0x6e1c <fputc>
    6476:	0f 5f       	subi	r16, 0xFF	; 255
    6478:	1f 4f       	sbci	r17, 0xFF	; 255
    647a:	05 c0       	rjmp	.+10     	; 0x6486 <vfprintf+0x210>
    647c:	ef 2c       	mov	r14, r15
    647e:	ff 24       	eor	r15, r15
    6480:	f0 e1       	ldi	r31, 0x10	; 16
    6482:	ef 22       	and	r14, r31
    6484:	ff 24       	eor	r15, r15
    6486:	f8 01       	movw	r30, r16
    6488:	84 91       	lpm	r24, Z+
    648a:	88 23       	and	r24, r24
    648c:	69 f7       	brne	.-38     	; 0x6468 <vfprintf+0x1f2>
    648e:	08 c1       	rjmp	.+528    	; 0x66a0 <vfprintf+0x42a>
    6490:	f7 fe       	sbrs	r15, 7
    6492:	12 c0       	rjmp	.+36     	; 0x64b8 <vfprintf+0x242>
    6494:	bc 0c       	add	r11, r12
    6496:	24 fe       	sbrs	r2, 4
    6498:	04 c0       	rjmp	.+8      	; 0x64a2 <vfprintf+0x22c>
    649a:	8a 81       	ldd	r24, Y+2	; 0x02
    649c:	81 33       	cpi	r24, 0x31	; 49
    649e:	09 f4       	brne	.+2      	; 0x64a2 <vfprintf+0x22c>
    64a0:	ba 94       	dec	r11
    64a2:	1b 14       	cp	r1, r11
    64a4:	1c f0       	brlt	.+6      	; 0x64ac <vfprintf+0x236>
    64a6:	bb 24       	eor	r11, r11
    64a8:	b3 94       	inc	r11
    64aa:	2d c0       	rjmp	.+90     	; 0x6506 <vfprintf+0x290>
    64ac:	f8 e0       	ldi	r31, 0x08	; 8
    64ae:	fb 15       	cp	r31, r11
    64b0:	50 f5       	brcc	.+84     	; 0x6506 <vfprintf+0x290>
    64b2:	38 e0       	ldi	r19, 0x08	; 8
    64b4:	b3 2e       	mov	r11, r19
    64b6:	27 c0       	rjmp	.+78     	; 0x6506 <vfprintf+0x290>
    64b8:	f6 fc       	sbrc	r15, 6
    64ba:	25 c0       	rjmp	.+74     	; 0x6506 <vfprintf+0x290>
    64bc:	89 2d       	mov	r24, r9
    64be:	90 e0       	ldi	r25, 0x00	; 0
    64c0:	8c 15       	cp	r24, r12
    64c2:	9d 05       	cpc	r25, r13
    64c4:	4c f0       	brlt	.+18     	; 0x64d8 <vfprintf+0x262>
    64c6:	2c ef       	ldi	r18, 0xFC	; 252
    64c8:	c2 16       	cp	r12, r18
    64ca:	2f ef       	ldi	r18, 0xFF	; 255
    64cc:	d2 06       	cpc	r13, r18
    64ce:	24 f0       	brlt	.+8      	; 0x64d8 <vfprintf+0x262>
    64d0:	30 e8       	ldi	r19, 0x80	; 128
    64d2:	f3 2a       	or	r15, r19
    64d4:	01 c0       	rjmp	.+2      	; 0x64d8 <vfprintf+0x262>
    64d6:	9a 94       	dec	r9
    64d8:	99 20       	and	r9, r9
    64da:	49 f0       	breq	.+18     	; 0x64ee <vfprintf+0x278>
    64dc:	e2 e0       	ldi	r30, 0x02	; 2
    64de:	f0 e0       	ldi	r31, 0x00	; 0
    64e0:	ec 0f       	add	r30, r28
    64e2:	fd 1f       	adc	r31, r29
    64e4:	e9 0d       	add	r30, r9
    64e6:	f1 1d       	adc	r31, r1
    64e8:	80 81       	ld	r24, Z
    64ea:	80 33       	cpi	r24, 0x30	; 48
    64ec:	a1 f3       	breq	.-24     	; 0x64d6 <vfprintf+0x260>
    64ee:	f7 fe       	sbrs	r15, 7
    64f0:	0a c0       	rjmp	.+20     	; 0x6506 <vfprintf+0x290>
    64f2:	b9 2c       	mov	r11, r9
    64f4:	b3 94       	inc	r11
    64f6:	89 2d       	mov	r24, r9
    64f8:	90 e0       	ldi	r25, 0x00	; 0
    64fa:	c8 16       	cp	r12, r24
    64fc:	d9 06       	cpc	r13, r25
    64fe:	14 f0       	brlt	.+4      	; 0x6504 <vfprintf+0x28e>
    6500:	99 24       	eor	r9, r9
    6502:	01 c0       	rjmp	.+2      	; 0x6506 <vfprintf+0x290>
    6504:	9c 18       	sub	r9, r12
    6506:	f7 fc       	sbrc	r15, 7
    6508:	03 c0       	rjmp	.+6      	; 0x6510 <vfprintf+0x29a>
    650a:	25 e0       	ldi	r18, 0x05	; 5
    650c:	30 e0       	ldi	r19, 0x00	; 0
    650e:	09 c0       	rjmp	.+18     	; 0x6522 <vfprintf+0x2ac>
    6510:	1c 14       	cp	r1, r12
    6512:	1d 04       	cpc	r1, r13
    6514:	1c f0       	brlt	.+6      	; 0x651c <vfprintf+0x2a6>
    6516:	21 e0       	ldi	r18, 0x01	; 1
    6518:	30 e0       	ldi	r19, 0x00	; 0
    651a:	03 c0       	rjmp	.+6      	; 0x6522 <vfprintf+0x2ac>
    651c:	96 01       	movw	r18, r12
    651e:	2f 5f       	subi	r18, 0xFF	; 255
    6520:	3f 4f       	sbci	r19, 0xFF	; 255
    6522:	11 23       	and	r17, r17
    6524:	11 f0       	breq	.+4      	; 0x652a <vfprintf+0x2b4>
    6526:	2f 5f       	subi	r18, 0xFF	; 255
    6528:	3f 4f       	sbci	r19, 0xFF	; 255
    652a:	99 20       	and	r9, r9
    652c:	29 f0       	breq	.+10     	; 0x6538 <vfprintf+0x2c2>
    652e:	89 2d       	mov	r24, r9
    6530:	90 e0       	ldi	r25, 0x00	; 0
    6532:	01 96       	adiw	r24, 0x01	; 1
    6534:	28 0f       	add	r18, r24
    6536:	39 1f       	adc	r19, r25
    6538:	88 2d       	mov	r24, r8
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	28 17       	cp	r18, r24
    653e:	39 07       	cpc	r19, r25
    6540:	14 f0       	brlt	.+4      	; 0x6546 <vfprintf+0x2d0>
    6542:	88 24       	eor	r8, r8
    6544:	01 c0       	rjmp	.+2      	; 0x6548 <vfprintf+0x2d2>
    6546:	82 1a       	sub	r8, r18
    6548:	4f 2c       	mov	r4, r15
    654a:	55 24       	eor	r5, r5
    654c:	c2 01       	movw	r24, r4
    654e:	89 70       	andi	r24, 0x09	; 9
    6550:	90 70       	andi	r25, 0x00	; 0
    6552:	89 2b       	or	r24, r25
    6554:	31 f0       	breq	.+12     	; 0x6562 <vfprintf+0x2ec>
    6556:	07 c0       	rjmp	.+14     	; 0x6566 <vfprintf+0x2f0>
    6558:	80 e2       	ldi	r24, 0x20	; 32
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	b3 01       	movw	r22, r6
    655e:	5e d4       	rcall	.+2236   	; 0x6e1c <fputc>
    6560:	8a 94       	dec	r8
    6562:	88 20       	and	r8, r8
    6564:	c9 f7       	brne	.-14     	; 0x6558 <vfprintf+0x2e2>
    6566:	11 23       	and	r17, r17
    6568:	21 f0       	breq	.+8      	; 0x6572 <vfprintf+0x2fc>
    656a:	81 2f       	mov	r24, r17
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	b3 01       	movw	r22, r6
    6570:	55 d4       	rcall	.+2218   	; 0x6e1c <fputc>
    6572:	43 fe       	sbrs	r4, 3
    6574:	06 c0       	rjmp	.+12     	; 0x6582 <vfprintf+0x30c>
    6576:	07 c0       	rjmp	.+14     	; 0x6586 <vfprintf+0x310>
    6578:	80 e3       	ldi	r24, 0x30	; 48
    657a:	90 e0       	ldi	r25, 0x00	; 0
    657c:	b3 01       	movw	r22, r6
    657e:	4e d4       	rcall	.+2204   	; 0x6e1c <fputc>
    6580:	8a 94       	dec	r8
    6582:	88 20       	and	r8, r8
    6584:	c9 f7       	brne	.-14     	; 0x6578 <vfprintf+0x302>
    6586:	f7 fe       	sbrs	r15, 7
    6588:	44 c0       	rjmp	.+136    	; 0x6612 <vfprintf+0x39c>
    658a:	86 01       	movw	r16, r12
    658c:	d7 fe       	sbrs	r13, 7
    658e:	02 c0       	rjmp	.+4      	; 0x6594 <vfprintf+0x31e>
    6590:	00 e0       	ldi	r16, 0x00	; 0
    6592:	10 e0       	ldi	r17, 0x00	; 0
    6594:	76 01       	movw	r14, r12
    6596:	08 94       	sec
    6598:	e1 1c       	adc	r14, r1
    659a:	f1 1c       	adc	r15, r1
    659c:	e0 1a       	sub	r14, r16
    659e:	f1 0a       	sbc	r15, r17
    65a0:	41 e0       	ldi	r20, 0x01	; 1
    65a2:	50 e0       	ldi	r21, 0x00	; 0
    65a4:	4c 0f       	add	r20, r28
    65a6:	5d 1f       	adc	r21, r29
    65a8:	e4 0e       	add	r14, r20
    65aa:	f5 1e       	adc	r15, r21
    65ac:	26 01       	movw	r4, r12
    65ae:	4b 18       	sub	r4, r11
    65b0:	51 08       	sbc	r5, r1
    65b2:	89 2d       	mov	r24, r9
    65b4:	90 e0       	ldi	r25, 0x00	; 0
    65b6:	aa 24       	eor	r10, r10
    65b8:	bb 24       	eor	r11, r11
    65ba:	a8 1a       	sub	r10, r24
    65bc:	b9 0a       	sbc	r11, r25
    65be:	5f ef       	ldi	r21, 0xFF	; 255
    65c0:	0f 3f       	cpi	r16, 0xFF	; 255
    65c2:	15 07       	cpc	r17, r21
    65c4:	21 f4       	brne	.+8      	; 0x65ce <vfprintf+0x358>
    65c6:	8e e2       	ldi	r24, 0x2E	; 46
    65c8:	90 e0       	ldi	r25, 0x00	; 0
    65ca:	b3 01       	movw	r22, r6
    65cc:	27 d4       	rcall	.+2126   	; 0x6e1c <fputc>
    65ce:	c0 16       	cp	r12, r16
    65d0:	d1 06       	cpc	r13, r17
    65d2:	34 f0       	brlt	.+12     	; 0x65e0 <vfprintf+0x36a>
    65d4:	40 16       	cp	r4, r16
    65d6:	51 06       	cpc	r5, r17
    65d8:	1c f4       	brge	.+6      	; 0x65e0 <vfprintf+0x36a>
    65da:	f7 01       	movw	r30, r14
    65dc:	80 81       	ld	r24, Z
    65de:	01 c0       	rjmp	.+2      	; 0x65e2 <vfprintf+0x36c>
    65e0:	80 e3       	ldi	r24, 0x30	; 48
    65e2:	01 50       	subi	r16, 0x01	; 1
    65e4:	10 40       	sbci	r17, 0x00	; 0
    65e6:	08 94       	sec
    65e8:	e1 1c       	adc	r14, r1
    65ea:	f1 1c       	adc	r15, r1
    65ec:	0a 15       	cp	r16, r10
    65ee:	1b 05       	cpc	r17, r11
    65f0:	24 f0       	brlt	.+8      	; 0x65fa <vfprintf+0x384>
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	b3 01       	movw	r22, r6
    65f6:	12 d4       	rcall	.+2084   	; 0x6e1c <fputc>
    65f8:	e2 cf       	rjmp	.-60     	; 0x65be <vfprintf+0x348>
    65fa:	0c 15       	cp	r16, r12
    65fc:	1d 05       	cpc	r17, r13
    65fe:	39 f4       	brne	.+14     	; 0x660e <vfprintf+0x398>
    6600:	9a 81       	ldd	r25, Y+2	; 0x02
    6602:	96 33       	cpi	r25, 0x36	; 54
    6604:	18 f4       	brcc	.+6      	; 0x660c <vfprintf+0x396>
    6606:	95 33       	cpi	r25, 0x35	; 53
    6608:	11 f4       	brne	.+4      	; 0x660e <vfprintf+0x398>
    660a:	24 fe       	sbrs	r2, 4
    660c:	81 e3       	ldi	r24, 0x31	; 49
    660e:	90 e0       	ldi	r25, 0x00	; 0
    6610:	45 c0       	rjmp	.+138    	; 0x669c <vfprintf+0x426>
    6612:	8a 81       	ldd	r24, Y+2	; 0x02
    6614:	81 33       	cpi	r24, 0x31	; 49
    6616:	09 f0       	breq	.+2      	; 0x661a <vfprintf+0x3a4>
    6618:	0f 7e       	andi	r16, 0xEF	; 239
    661a:	90 e0       	ldi	r25, 0x00	; 0
    661c:	b3 01       	movw	r22, r6
    661e:	fe d3       	rcall	.+2044   	; 0x6e1c <fputc>
    6620:	99 20       	and	r9, r9
    6622:	91 f0       	breq	.+36     	; 0x6648 <vfprintf+0x3d2>
    6624:	8e e2       	ldi	r24, 0x2E	; 46
    6626:	90 e0       	ldi	r25, 0x00	; 0
    6628:	b3 01       	movw	r22, r6
    662a:	f8 d3       	rcall	.+2032   	; 0x6e1c <fputc>
    662c:	12 e0       	ldi	r17, 0x02	; 2
    662e:	e1 e0       	ldi	r30, 0x01	; 1
    6630:	f0 e0       	ldi	r31, 0x00	; 0
    6632:	ec 0f       	add	r30, r28
    6634:	fd 1f       	adc	r31, r29
    6636:	e1 0f       	add	r30, r17
    6638:	f1 1d       	adc	r31, r1
    663a:	1f 5f       	subi	r17, 0xFF	; 255
    663c:	80 81       	ld	r24, Z
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	b3 01       	movw	r22, r6
    6642:	ec d3       	rcall	.+2008   	; 0x6e1c <fputc>
    6644:	9a 94       	dec	r9
    6646:	99 f7       	brne	.-26     	; 0x662e <vfprintf+0x3b8>
    6648:	44 fc       	sbrc	r4, 4
    664a:	03 c0       	rjmp	.+6      	; 0x6652 <vfprintf+0x3dc>
    664c:	85 e6       	ldi	r24, 0x65	; 101
    664e:	90 e0       	ldi	r25, 0x00	; 0
    6650:	02 c0       	rjmp	.+4      	; 0x6656 <vfprintf+0x3e0>
    6652:	85 e4       	ldi	r24, 0x45	; 69
    6654:	90 e0       	ldi	r25, 0x00	; 0
    6656:	b3 01       	movw	r22, r6
    6658:	e1 d3       	rcall	.+1986   	; 0x6e1c <fputc>
    665a:	d7 fc       	sbrc	r13, 7
    665c:	05 c0       	rjmp	.+10     	; 0x6668 <vfprintf+0x3f2>
    665e:	c1 14       	cp	r12, r1
    6660:	d1 04       	cpc	r13, r1
    6662:	41 f4       	brne	.+16     	; 0x6674 <vfprintf+0x3fe>
    6664:	04 ff       	sbrs	r16, 4
    6666:	06 c0       	rjmp	.+12     	; 0x6674 <vfprintf+0x3fe>
    6668:	d0 94       	com	r13
    666a:	c1 94       	neg	r12
    666c:	d1 08       	sbc	r13, r1
    666e:	d3 94       	inc	r13
    6670:	8d e2       	ldi	r24, 0x2D	; 45
    6672:	01 c0       	rjmp	.+2      	; 0x6676 <vfprintf+0x400>
    6674:	8b e2       	ldi	r24, 0x2B	; 43
    6676:	90 e0       	ldi	r25, 0x00	; 0
    6678:	b3 01       	movw	r22, r6
    667a:	d0 d3       	rcall	.+1952   	; 0x6e1c <fputc>
    667c:	80 e3       	ldi	r24, 0x30	; 48
    667e:	05 c0       	rjmp	.+10     	; 0x668a <vfprintf+0x414>
    6680:	8f 5f       	subi	r24, 0xFF	; 255
    6682:	26 ef       	ldi	r18, 0xF6	; 246
    6684:	3f ef       	ldi	r19, 0xFF	; 255
    6686:	c2 0e       	add	r12, r18
    6688:	d3 1e       	adc	r13, r19
    668a:	3a e0       	ldi	r19, 0x0A	; 10
    668c:	c3 16       	cp	r12, r19
    668e:	d1 04       	cpc	r13, r1
    6690:	bc f7       	brge	.-18     	; 0x6680 <vfprintf+0x40a>
    6692:	90 e0       	ldi	r25, 0x00	; 0
    6694:	b3 01       	movw	r22, r6
    6696:	c2 d3       	rcall	.+1924   	; 0x6e1c <fputc>
    6698:	c6 01       	movw	r24, r12
    669a:	c0 96       	adiw	r24, 0x30	; 48
    669c:	b3 01       	movw	r22, r6
    669e:	be d3       	rcall	.+1916   	; 0x6e1c <fputc>
    66a0:	cc 84       	ldd	r12, Y+12	; 0x0c
    66a2:	dd 84       	ldd	r13, Y+13	; 0x0d
    66a4:	46 c1       	rjmp	.+652    	; 0x6932 <vfprintf+0x6bc>
    66a6:	93 36       	cpi	r25, 0x63	; 99
    66a8:	31 f0       	breq	.+12     	; 0x66b6 <vfprintf+0x440>
    66aa:	93 37       	cpi	r25, 0x73	; 115
    66ac:	99 f0       	breq	.+38     	; 0x66d4 <vfprintf+0x45e>
    66ae:	93 35       	cpi	r25, 0x53	; 83
    66b0:	09 f0       	breq	.+2      	; 0x66b4 <vfprintf+0x43e>
    66b2:	55 c0       	rjmp	.+170    	; 0x675e <vfprintf+0x4e8>
    66b4:	22 c0       	rjmp	.+68     	; 0x66fa <vfprintf+0x484>
    66b6:	f6 01       	movw	r30, r12
    66b8:	80 81       	ld	r24, Z
    66ba:	89 83       	std	Y+1, r24	; 0x01
    66bc:	5e 01       	movw	r10, r28
    66be:	08 94       	sec
    66c0:	a1 1c       	adc	r10, r1
    66c2:	b1 1c       	adc	r11, r1
    66c4:	22 e0       	ldi	r18, 0x02	; 2
    66c6:	30 e0       	ldi	r19, 0x00	; 0
    66c8:	c2 0e       	add	r12, r18
    66ca:	d3 1e       	adc	r13, r19
    66cc:	21 e0       	ldi	r18, 0x01	; 1
    66ce:	e2 2e       	mov	r14, r18
    66d0:	f1 2c       	mov	r15, r1
    66d2:	11 c0       	rjmp	.+34     	; 0x66f6 <vfprintf+0x480>
    66d4:	f6 01       	movw	r30, r12
    66d6:	a0 80       	ld	r10, Z
    66d8:	b1 80       	ldd	r11, Z+1	; 0x01
    66da:	16 fd       	sbrc	r17, 6
    66dc:	03 c0       	rjmp	.+6      	; 0x66e4 <vfprintf+0x46e>
    66de:	6f ef       	ldi	r22, 0xFF	; 255
    66e0:	7f ef       	ldi	r23, 0xFF	; 255
    66e2:	02 c0       	rjmp	.+4      	; 0x66e8 <vfprintf+0x472>
    66e4:	69 2d       	mov	r22, r9
    66e6:	70 e0       	ldi	r23, 0x00	; 0
    66e8:	22 e0       	ldi	r18, 0x02	; 2
    66ea:	30 e0       	ldi	r19, 0x00	; 0
    66ec:	c2 0e       	add	r12, r18
    66ee:	d3 1e       	adc	r13, r19
    66f0:	c5 01       	movw	r24, r10
    66f2:	89 d3       	rcall	.+1810   	; 0x6e06 <strnlen>
    66f4:	7c 01       	movw	r14, r24
    66f6:	1f 77       	andi	r17, 0x7F	; 127
    66f8:	12 c0       	rjmp	.+36     	; 0x671e <vfprintf+0x4a8>
    66fa:	f6 01       	movw	r30, r12
    66fc:	a0 80       	ld	r10, Z
    66fe:	b1 80       	ldd	r11, Z+1	; 0x01
    6700:	16 fd       	sbrc	r17, 6
    6702:	03 c0       	rjmp	.+6      	; 0x670a <vfprintf+0x494>
    6704:	6f ef       	ldi	r22, 0xFF	; 255
    6706:	7f ef       	ldi	r23, 0xFF	; 255
    6708:	02 c0       	rjmp	.+4      	; 0x670e <vfprintf+0x498>
    670a:	69 2d       	mov	r22, r9
    670c:	70 e0       	ldi	r23, 0x00	; 0
    670e:	22 e0       	ldi	r18, 0x02	; 2
    6710:	30 e0       	ldi	r19, 0x00	; 0
    6712:	c2 0e       	add	r12, r18
    6714:	d3 1e       	adc	r13, r19
    6716:	c5 01       	movw	r24, r10
    6718:	6b d3       	rcall	.+1750   	; 0x6df0 <strnlen_P>
    671a:	7c 01       	movw	r14, r24
    671c:	10 68       	ori	r17, 0x80	; 128
    671e:	13 ff       	sbrs	r17, 3
    6720:	06 c0       	rjmp	.+12     	; 0x672e <vfprintf+0x4b8>
    6722:	19 c0       	rjmp	.+50     	; 0x6756 <vfprintf+0x4e0>
    6724:	80 e2       	ldi	r24, 0x20	; 32
    6726:	90 e0       	ldi	r25, 0x00	; 0
    6728:	b3 01       	movw	r22, r6
    672a:	78 d3       	rcall	.+1776   	; 0x6e1c <fputc>
    672c:	8a 94       	dec	r8
    672e:	88 2d       	mov	r24, r8
    6730:	90 e0       	ldi	r25, 0x00	; 0
    6732:	e8 16       	cp	r14, r24
    6734:	f9 06       	cpc	r15, r25
    6736:	b0 f3       	brcs	.-20     	; 0x6724 <vfprintf+0x4ae>
    6738:	0e c0       	rjmp	.+28     	; 0x6756 <vfprintf+0x4e0>
    673a:	f5 01       	movw	r30, r10
    673c:	17 fd       	sbrc	r17, 7
    673e:	85 91       	lpm	r24, Z+
    6740:	17 ff       	sbrs	r17, 7
    6742:	81 91       	ld	r24, Z+
    6744:	5f 01       	movw	r10, r30
    6746:	90 e0       	ldi	r25, 0x00	; 0
    6748:	b3 01       	movw	r22, r6
    674a:	68 d3       	rcall	.+1744   	; 0x6e1c <fputc>
    674c:	81 10       	cpse	r8, r1
    674e:	8a 94       	dec	r8
    6750:	08 94       	sec
    6752:	e1 08       	sbc	r14, r1
    6754:	f1 08       	sbc	r15, r1
    6756:	e1 14       	cp	r14, r1
    6758:	f1 04       	cpc	r15, r1
    675a:	79 f7       	brne	.-34     	; 0x673a <vfprintf+0x4c4>
    675c:	ea c0       	rjmp	.+468    	; 0x6932 <vfprintf+0x6bc>
    675e:	94 36       	cpi	r25, 0x64	; 100
    6760:	11 f0       	breq	.+4      	; 0x6766 <vfprintf+0x4f0>
    6762:	99 36       	cpi	r25, 0x69	; 105
    6764:	81 f5       	brne	.+96     	; 0x67c6 <vfprintf+0x550>
    6766:	17 ff       	sbrs	r17, 7
    6768:	08 c0       	rjmp	.+16     	; 0x677a <vfprintf+0x504>
    676a:	f6 01       	movw	r30, r12
    676c:	20 81       	ld	r18, Z
    676e:	31 81       	ldd	r19, Z+1	; 0x01
    6770:	42 81       	ldd	r20, Z+2	; 0x02
    6772:	53 81       	ldd	r21, Z+3	; 0x03
    6774:	84 e0       	ldi	r24, 0x04	; 4
    6776:	90 e0       	ldi	r25, 0x00	; 0
    6778:	0a c0       	rjmp	.+20     	; 0x678e <vfprintf+0x518>
    677a:	f6 01       	movw	r30, r12
    677c:	80 81       	ld	r24, Z
    677e:	91 81       	ldd	r25, Z+1	; 0x01
    6780:	9c 01       	movw	r18, r24
    6782:	44 27       	eor	r20, r20
    6784:	37 fd       	sbrc	r19, 7
    6786:	40 95       	com	r20
    6788:	54 2f       	mov	r21, r20
    678a:	82 e0       	ldi	r24, 0x02	; 2
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	c8 0e       	add	r12, r24
    6790:	d9 1e       	adc	r13, r25
    6792:	9f e6       	ldi	r25, 0x6F	; 111
    6794:	f9 2e       	mov	r15, r25
    6796:	f1 22       	and	r15, r17
    6798:	57 ff       	sbrs	r21, 7
    679a:	09 c0       	rjmp	.+18     	; 0x67ae <vfprintf+0x538>
    679c:	50 95       	com	r21
    679e:	40 95       	com	r20
    67a0:	30 95       	com	r19
    67a2:	21 95       	neg	r18
    67a4:	3f 4f       	sbci	r19, 0xFF	; 255
    67a6:	4f 4f       	sbci	r20, 0xFF	; 255
    67a8:	5f 4f       	sbci	r21, 0xFF	; 255
    67aa:	90 e8       	ldi	r25, 0x80	; 128
    67ac:	f9 2a       	or	r15, r25
    67ae:	ca 01       	movw	r24, r20
    67b0:	b9 01       	movw	r22, r18
    67b2:	ae 01       	movw	r20, r28
    67b4:	4f 5f       	subi	r20, 0xFF	; 255
    67b6:	5f 4f       	sbci	r21, 0xFF	; 255
    67b8:	2a e0       	ldi	r18, 0x0A	; 10
    67ba:	30 e0       	ldi	r19, 0x00	; 0
    67bc:	a2 d3       	rcall	.+1860   	; 0x6f02 <__ultoa_invert>
    67be:	e8 2e       	mov	r14, r24
    67c0:	e8 89       	ldd	r30, Y+16	; 0x10
    67c2:	ee 1a       	sub	r14, r30
    67c4:	40 c0       	rjmp	.+128    	; 0x6846 <vfprintf+0x5d0>
    67c6:	95 37       	cpi	r25, 0x75	; 117
    67c8:	21 f4       	brne	.+8      	; 0x67d2 <vfprintf+0x55c>
    67ca:	1f 7e       	andi	r17, 0xEF	; 239
    67cc:	2a e0       	ldi	r18, 0x0A	; 10
    67ce:	30 e0       	ldi	r19, 0x00	; 0
    67d0:	1c c0       	rjmp	.+56     	; 0x680a <vfprintf+0x594>
    67d2:	19 7f       	andi	r17, 0xF9	; 249
    67d4:	9f 36       	cpi	r25, 0x6F	; 111
    67d6:	61 f0       	breq	.+24     	; 0x67f0 <vfprintf+0x57a>
    67d8:	90 37       	cpi	r25, 0x70	; 112
    67da:	20 f4       	brcc	.+8      	; 0x67e4 <vfprintf+0x56e>
    67dc:	98 35       	cpi	r25, 0x58	; 88
    67de:	09 f0       	breq	.+2      	; 0x67e2 <vfprintf+0x56c>
    67e0:	ab c0       	rjmp	.+342    	; 0x6938 <vfprintf+0x6c2>
    67e2:	0f c0       	rjmp	.+30     	; 0x6802 <vfprintf+0x58c>
    67e4:	90 37       	cpi	r25, 0x70	; 112
    67e6:	39 f0       	breq	.+14     	; 0x67f6 <vfprintf+0x580>
    67e8:	98 37       	cpi	r25, 0x78	; 120
    67ea:	09 f0       	breq	.+2      	; 0x67ee <vfprintf+0x578>
    67ec:	a5 c0       	rjmp	.+330    	; 0x6938 <vfprintf+0x6c2>
    67ee:	04 c0       	rjmp	.+8      	; 0x67f8 <vfprintf+0x582>
    67f0:	28 e0       	ldi	r18, 0x08	; 8
    67f2:	30 e0       	ldi	r19, 0x00	; 0
    67f4:	0a c0       	rjmp	.+20     	; 0x680a <vfprintf+0x594>
    67f6:	10 61       	ori	r17, 0x10	; 16
    67f8:	14 fd       	sbrc	r17, 4
    67fa:	14 60       	ori	r17, 0x04	; 4
    67fc:	20 e1       	ldi	r18, 0x10	; 16
    67fe:	30 e0       	ldi	r19, 0x00	; 0
    6800:	04 c0       	rjmp	.+8      	; 0x680a <vfprintf+0x594>
    6802:	14 fd       	sbrc	r17, 4
    6804:	16 60       	ori	r17, 0x06	; 6
    6806:	20 e1       	ldi	r18, 0x10	; 16
    6808:	32 e0       	ldi	r19, 0x02	; 2
    680a:	17 ff       	sbrs	r17, 7
    680c:	08 c0       	rjmp	.+16     	; 0x681e <vfprintf+0x5a8>
    680e:	f6 01       	movw	r30, r12
    6810:	60 81       	ld	r22, Z
    6812:	71 81       	ldd	r23, Z+1	; 0x01
    6814:	82 81       	ldd	r24, Z+2	; 0x02
    6816:	93 81       	ldd	r25, Z+3	; 0x03
    6818:	44 e0       	ldi	r20, 0x04	; 4
    681a:	50 e0       	ldi	r21, 0x00	; 0
    681c:	08 c0       	rjmp	.+16     	; 0x682e <vfprintf+0x5b8>
    681e:	f6 01       	movw	r30, r12
    6820:	80 81       	ld	r24, Z
    6822:	91 81       	ldd	r25, Z+1	; 0x01
    6824:	bc 01       	movw	r22, r24
    6826:	80 e0       	ldi	r24, 0x00	; 0
    6828:	90 e0       	ldi	r25, 0x00	; 0
    682a:	42 e0       	ldi	r20, 0x02	; 2
    682c:	50 e0       	ldi	r21, 0x00	; 0
    682e:	c4 0e       	add	r12, r20
    6830:	d5 1e       	adc	r13, r21
    6832:	ae 01       	movw	r20, r28
    6834:	4f 5f       	subi	r20, 0xFF	; 255
    6836:	5f 4f       	sbci	r21, 0xFF	; 255
    6838:	64 d3       	rcall	.+1736   	; 0x6f02 <__ultoa_invert>
    683a:	e8 2e       	mov	r14, r24
    683c:	58 89       	ldd	r21, Y+16	; 0x10
    683e:	e5 1a       	sub	r14, r21
    6840:	8f e7       	ldi	r24, 0x7F	; 127
    6842:	f8 2e       	mov	r15, r24
    6844:	f1 22       	and	r15, r17
    6846:	f6 fe       	sbrs	r15, 6
    6848:	0b c0       	rjmp	.+22     	; 0x6860 <vfprintf+0x5ea>
    684a:	8e ef       	ldi	r24, 0xFE	; 254
    684c:	f8 22       	and	r15, r24
    684e:	e9 14       	cp	r14, r9
    6850:	38 f4       	brcc	.+14     	; 0x6860 <vfprintf+0x5ea>
    6852:	f4 fe       	sbrs	r15, 4
    6854:	07 c0       	rjmp	.+14     	; 0x6864 <vfprintf+0x5ee>
    6856:	f2 fc       	sbrc	r15, 2
    6858:	05 c0       	rjmp	.+10     	; 0x6864 <vfprintf+0x5ee>
    685a:	9f ee       	ldi	r25, 0xEF	; 239
    685c:	f9 22       	and	r15, r25
    685e:	02 c0       	rjmp	.+4      	; 0x6864 <vfprintf+0x5ee>
    6860:	1e 2d       	mov	r17, r14
    6862:	01 c0       	rjmp	.+2      	; 0x6866 <vfprintf+0x5f0>
    6864:	19 2d       	mov	r17, r9
    6866:	f4 fe       	sbrs	r15, 4
    6868:	0d c0       	rjmp	.+26     	; 0x6884 <vfprintf+0x60e>
    686a:	fe 01       	movw	r30, r28
    686c:	ee 0d       	add	r30, r14
    686e:	f1 1d       	adc	r31, r1
    6870:	80 81       	ld	r24, Z
    6872:	80 33       	cpi	r24, 0x30	; 48
    6874:	19 f4       	brne	.+6      	; 0x687c <vfprintf+0x606>
    6876:	e9 ee       	ldi	r30, 0xE9	; 233
    6878:	fe 22       	and	r15, r30
    687a:	08 c0       	rjmp	.+16     	; 0x688c <vfprintf+0x616>
    687c:	1f 5f       	subi	r17, 0xFF	; 255
    687e:	f2 fe       	sbrs	r15, 2
    6880:	05 c0       	rjmp	.+10     	; 0x688c <vfprintf+0x616>
    6882:	03 c0       	rjmp	.+6      	; 0x688a <vfprintf+0x614>
    6884:	8f 2d       	mov	r24, r15
    6886:	86 78       	andi	r24, 0x86	; 134
    6888:	09 f0       	breq	.+2      	; 0x688c <vfprintf+0x616>
    688a:	1f 5f       	subi	r17, 0xFF	; 255
    688c:	0f 2d       	mov	r16, r15
    688e:	f3 fc       	sbrc	r15, 3
    6890:	13 c0       	rjmp	.+38     	; 0x68b8 <vfprintf+0x642>
    6892:	f0 fe       	sbrs	r15, 0
    6894:	0e c0       	rjmp	.+28     	; 0x68b2 <vfprintf+0x63c>
    6896:	18 15       	cp	r17, r8
    6898:	10 f0       	brcs	.+4      	; 0x689e <vfprintf+0x628>
    689a:	9e 2c       	mov	r9, r14
    689c:	0a c0       	rjmp	.+20     	; 0x68b2 <vfprintf+0x63c>
    689e:	9e 2c       	mov	r9, r14
    68a0:	98 0c       	add	r9, r8
    68a2:	91 1a       	sub	r9, r17
    68a4:	18 2d       	mov	r17, r8
    68a6:	05 c0       	rjmp	.+10     	; 0x68b2 <vfprintf+0x63c>
    68a8:	80 e2       	ldi	r24, 0x20	; 32
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	b3 01       	movw	r22, r6
    68ae:	b6 d2       	rcall	.+1388   	; 0x6e1c <fputc>
    68b0:	1f 5f       	subi	r17, 0xFF	; 255
    68b2:	18 15       	cp	r17, r8
    68b4:	c8 f3       	brcs	.-14     	; 0x68a8 <vfprintf+0x632>
    68b6:	04 c0       	rjmp	.+8      	; 0x68c0 <vfprintf+0x64a>
    68b8:	18 15       	cp	r17, r8
    68ba:	10 f4       	brcc	.+4      	; 0x68c0 <vfprintf+0x64a>
    68bc:	81 1a       	sub	r8, r17
    68be:	01 c0       	rjmp	.+2      	; 0x68c2 <vfprintf+0x64c>
    68c0:	88 24       	eor	r8, r8
    68c2:	04 ff       	sbrs	r16, 4
    68c4:	0e c0       	rjmp	.+28     	; 0x68e2 <vfprintf+0x66c>
    68c6:	80 e3       	ldi	r24, 0x30	; 48
    68c8:	90 e0       	ldi	r25, 0x00	; 0
    68ca:	b3 01       	movw	r22, r6
    68cc:	a7 d2       	rcall	.+1358   	; 0x6e1c <fputc>
    68ce:	02 ff       	sbrs	r16, 2
    68d0:	1b c0       	rjmp	.+54     	; 0x6908 <vfprintf+0x692>
    68d2:	01 fd       	sbrc	r16, 1
    68d4:	03 c0       	rjmp	.+6      	; 0x68dc <vfprintf+0x666>
    68d6:	88 e7       	ldi	r24, 0x78	; 120
    68d8:	90 e0       	ldi	r25, 0x00	; 0
    68da:	0e c0       	rjmp	.+28     	; 0x68f8 <vfprintf+0x682>
    68dc:	88 e5       	ldi	r24, 0x58	; 88
    68de:	90 e0       	ldi	r25, 0x00	; 0
    68e0:	0b c0       	rjmp	.+22     	; 0x68f8 <vfprintf+0x682>
    68e2:	80 2f       	mov	r24, r16
    68e4:	86 78       	andi	r24, 0x86	; 134
    68e6:	81 f0       	breq	.+32     	; 0x6908 <vfprintf+0x692>
    68e8:	01 ff       	sbrs	r16, 1
    68ea:	02 c0       	rjmp	.+4      	; 0x68f0 <vfprintf+0x67a>
    68ec:	8b e2       	ldi	r24, 0x2B	; 43
    68ee:	01 c0       	rjmp	.+2      	; 0x68f2 <vfprintf+0x67c>
    68f0:	80 e2       	ldi	r24, 0x20	; 32
    68f2:	f7 fc       	sbrc	r15, 7
    68f4:	8d e2       	ldi	r24, 0x2D	; 45
    68f6:	90 e0       	ldi	r25, 0x00	; 0
    68f8:	b3 01       	movw	r22, r6
    68fa:	90 d2       	rcall	.+1312   	; 0x6e1c <fputc>
    68fc:	05 c0       	rjmp	.+10     	; 0x6908 <vfprintf+0x692>
    68fe:	80 e3       	ldi	r24, 0x30	; 48
    6900:	90 e0       	ldi	r25, 0x00	; 0
    6902:	b3 01       	movw	r22, r6
    6904:	8b d2       	rcall	.+1302   	; 0x6e1c <fputc>
    6906:	9a 94       	dec	r9
    6908:	e9 14       	cp	r14, r9
    690a:	c8 f3       	brcs	.-14     	; 0x68fe <vfprintf+0x688>
    690c:	ea 94       	dec	r14
    690e:	e1 e0       	ldi	r30, 0x01	; 1
    6910:	f0 e0       	ldi	r31, 0x00	; 0
    6912:	ec 0f       	add	r30, r28
    6914:	fd 1f       	adc	r31, r29
    6916:	ee 0d       	add	r30, r14
    6918:	f1 1d       	adc	r31, r1
    691a:	80 81       	ld	r24, Z
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	b3 01       	movw	r22, r6
    6920:	7d d2       	rcall	.+1274   	; 0x6e1c <fputc>
    6922:	ee 20       	and	r14, r14
    6924:	99 f7       	brne	.-26     	; 0x690c <vfprintf+0x696>
    6926:	05 c0       	rjmp	.+10     	; 0x6932 <vfprintf+0x6bc>
    6928:	80 e2       	ldi	r24, 0x20	; 32
    692a:	90 e0       	ldi	r25, 0x00	; 0
    692c:	b3 01       	movw	r22, r6
    692e:	76 d2       	rcall	.+1260   	; 0x6e1c <fputc>
    6930:	8a 94       	dec	r8
    6932:	88 20       	and	r8, r8
    6934:	c9 f7       	brne	.-14     	; 0x6928 <vfprintf+0x6b2>
    6936:	b6 cc       	rjmp	.-1684   	; 0x62a4 <vfprintf+0x2e>
    6938:	f3 01       	movw	r30, r6
    693a:	66 81       	ldd	r22, Z+6	; 0x06
    693c:	77 81       	ldd	r23, Z+7	; 0x07
    693e:	cb 01       	movw	r24, r22
    6940:	61 96       	adiw	r28, 0x11	; 17
    6942:	e2 e1       	ldi	r30, 0x12	; 18
    6944:	5d c0       	rjmp	.+186    	; 0x6a00 <__epilogue_restores__>

00006946 <__mulsi3>:
    6946:	62 9f       	mul	r22, r18
    6948:	d0 01       	movw	r26, r0
    694a:	73 9f       	mul	r23, r19
    694c:	f0 01       	movw	r30, r0
    694e:	82 9f       	mul	r24, r18
    6950:	e0 0d       	add	r30, r0
    6952:	f1 1d       	adc	r31, r1
    6954:	64 9f       	mul	r22, r20
    6956:	e0 0d       	add	r30, r0
    6958:	f1 1d       	adc	r31, r1
    695a:	92 9f       	mul	r25, r18
    695c:	f0 0d       	add	r31, r0
    695e:	83 9f       	mul	r24, r19
    6960:	f0 0d       	add	r31, r0
    6962:	74 9f       	mul	r23, r20
    6964:	f0 0d       	add	r31, r0
    6966:	65 9f       	mul	r22, r21
    6968:	f0 0d       	add	r31, r0
    696a:	99 27       	eor	r25, r25
    696c:	72 9f       	mul	r23, r18
    696e:	b0 0d       	add	r27, r0
    6970:	e1 1d       	adc	r30, r1
    6972:	f9 1f       	adc	r31, r25
    6974:	63 9f       	mul	r22, r19
    6976:	b0 0d       	add	r27, r0
    6978:	e1 1d       	adc	r30, r1
    697a:	f9 1f       	adc	r31, r25
    697c:	bd 01       	movw	r22, r26
    697e:	cf 01       	movw	r24, r30
    6980:	11 24       	eor	r1, r1
    6982:	08 95       	ret

00006984 <__udivmodsi4>:
    6984:	a1 e2       	ldi	r26, 0x21	; 33
    6986:	1a 2e       	mov	r1, r26
    6988:	aa 1b       	sub	r26, r26
    698a:	bb 1b       	sub	r27, r27
    698c:	fd 01       	movw	r30, r26
    698e:	0d c0       	rjmp	.+26     	; 0x69aa <__udivmodsi4_ep>

00006990 <__udivmodsi4_loop>:
    6990:	aa 1f       	adc	r26, r26
    6992:	bb 1f       	adc	r27, r27
    6994:	ee 1f       	adc	r30, r30
    6996:	ff 1f       	adc	r31, r31
    6998:	a2 17       	cp	r26, r18
    699a:	b3 07       	cpc	r27, r19
    699c:	e4 07       	cpc	r30, r20
    699e:	f5 07       	cpc	r31, r21
    69a0:	20 f0       	brcs	.+8      	; 0x69aa <__udivmodsi4_ep>
    69a2:	a2 1b       	sub	r26, r18
    69a4:	b3 0b       	sbc	r27, r19
    69a6:	e4 0b       	sbc	r30, r20
    69a8:	f5 0b       	sbc	r31, r21

000069aa <__udivmodsi4_ep>:
    69aa:	66 1f       	adc	r22, r22
    69ac:	77 1f       	adc	r23, r23
    69ae:	88 1f       	adc	r24, r24
    69b0:	99 1f       	adc	r25, r25
    69b2:	1a 94       	dec	r1
    69b4:	69 f7       	brne	.-38     	; 0x6990 <__udivmodsi4_loop>
    69b6:	60 95       	com	r22
    69b8:	70 95       	com	r23
    69ba:	80 95       	com	r24
    69bc:	90 95       	com	r25
    69be:	9b 01       	movw	r18, r22
    69c0:	ac 01       	movw	r20, r24
    69c2:	bd 01       	movw	r22, r26
    69c4:	cf 01       	movw	r24, r30
    69c6:	08 95       	ret

000069c8 <__prologue_saves__>:
    69c8:	2f 92       	push	r2
    69ca:	3f 92       	push	r3
    69cc:	4f 92       	push	r4
    69ce:	5f 92       	push	r5
    69d0:	6f 92       	push	r6
    69d2:	7f 92       	push	r7
    69d4:	8f 92       	push	r8
    69d6:	9f 92       	push	r9
    69d8:	af 92       	push	r10
    69da:	bf 92       	push	r11
    69dc:	cf 92       	push	r12
    69de:	df 92       	push	r13
    69e0:	ef 92       	push	r14
    69e2:	ff 92       	push	r15
    69e4:	0f 93       	push	r16
    69e6:	1f 93       	push	r17
    69e8:	cf 93       	push	r28
    69ea:	df 93       	push	r29
    69ec:	cd b7       	in	r28, 0x3d	; 61
    69ee:	de b7       	in	r29, 0x3e	; 62
    69f0:	ca 1b       	sub	r28, r26
    69f2:	db 0b       	sbc	r29, r27
    69f4:	0f b6       	in	r0, 0x3f	; 63
    69f6:	f8 94       	cli
    69f8:	de bf       	out	0x3e, r29	; 62
    69fa:	0f be       	out	0x3f, r0	; 63
    69fc:	cd bf       	out	0x3d, r28	; 61
    69fe:	09 94       	ijmp

00006a00 <__epilogue_restores__>:
    6a00:	2a 88       	ldd	r2, Y+18	; 0x12
    6a02:	39 88       	ldd	r3, Y+17	; 0x11
    6a04:	48 88       	ldd	r4, Y+16	; 0x10
    6a06:	5f 84       	ldd	r5, Y+15	; 0x0f
    6a08:	6e 84       	ldd	r6, Y+14	; 0x0e
    6a0a:	7d 84       	ldd	r7, Y+13	; 0x0d
    6a0c:	8c 84       	ldd	r8, Y+12	; 0x0c
    6a0e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6a10:	aa 84       	ldd	r10, Y+10	; 0x0a
    6a12:	b9 84       	ldd	r11, Y+9	; 0x09
    6a14:	c8 84       	ldd	r12, Y+8	; 0x08
    6a16:	df 80       	ldd	r13, Y+7	; 0x07
    6a18:	ee 80       	ldd	r14, Y+6	; 0x06
    6a1a:	fd 80       	ldd	r15, Y+5	; 0x05
    6a1c:	0c 81       	ldd	r16, Y+4	; 0x04
    6a1e:	1b 81       	ldd	r17, Y+3	; 0x03
    6a20:	aa 81       	ldd	r26, Y+2	; 0x02
    6a22:	b9 81       	ldd	r27, Y+1	; 0x01
    6a24:	ce 0f       	add	r28, r30
    6a26:	d1 1d       	adc	r29, r1
    6a28:	0f b6       	in	r0, 0x3f	; 63
    6a2a:	f8 94       	cli
    6a2c:	de bf       	out	0x3e, r29	; 62
    6a2e:	0f be       	out	0x3f, r0	; 63
    6a30:	cd bf       	out	0x3d, r28	; 61
    6a32:	ed 01       	movw	r28, r26
    6a34:	08 95       	ret

00006a36 <malloc>:
    6a36:	cf 93       	push	r28
    6a38:	df 93       	push	r29
    6a3a:	bc 01       	movw	r22, r24
    6a3c:	82 30       	cpi	r24, 0x02	; 2
    6a3e:	91 05       	cpc	r25, r1
    6a40:	10 f4       	brcc	.+4      	; 0x6a46 <malloc+0x10>
    6a42:	62 e0       	ldi	r22, 0x02	; 2
    6a44:	70 e0       	ldi	r23, 0x00	; 0
    6a46:	a0 91 31 08 	lds	r26, 0x0831
    6a4a:	b0 91 32 08 	lds	r27, 0x0832
    6a4e:	ed 01       	movw	r28, r26
    6a50:	e0 e0       	ldi	r30, 0x00	; 0
    6a52:	f0 e0       	ldi	r31, 0x00	; 0
    6a54:	40 e0       	ldi	r20, 0x00	; 0
    6a56:	50 e0       	ldi	r21, 0x00	; 0
    6a58:	21 c0       	rjmp	.+66     	; 0x6a9c <malloc+0x66>
    6a5a:	88 81       	ld	r24, Y
    6a5c:	99 81       	ldd	r25, Y+1	; 0x01
    6a5e:	86 17       	cp	r24, r22
    6a60:	97 07       	cpc	r25, r23
    6a62:	69 f4       	brne	.+26     	; 0x6a7e <malloc+0x48>
    6a64:	8a 81       	ldd	r24, Y+2	; 0x02
    6a66:	9b 81       	ldd	r25, Y+3	; 0x03
    6a68:	30 97       	sbiw	r30, 0x00	; 0
    6a6a:	19 f0       	breq	.+6      	; 0x6a72 <malloc+0x3c>
    6a6c:	93 83       	std	Z+3, r25	; 0x03
    6a6e:	82 83       	std	Z+2, r24	; 0x02
    6a70:	04 c0       	rjmp	.+8      	; 0x6a7a <malloc+0x44>
    6a72:	90 93 32 08 	sts	0x0832, r25
    6a76:	80 93 31 08 	sts	0x0831, r24
    6a7a:	fe 01       	movw	r30, r28
    6a7c:	34 c0       	rjmp	.+104    	; 0x6ae6 <malloc+0xb0>
    6a7e:	68 17       	cp	r22, r24
    6a80:	79 07       	cpc	r23, r25
    6a82:	38 f4       	brcc	.+14     	; 0x6a92 <malloc+0x5c>
    6a84:	41 15       	cp	r20, r1
    6a86:	51 05       	cpc	r21, r1
    6a88:	19 f0       	breq	.+6      	; 0x6a90 <malloc+0x5a>
    6a8a:	84 17       	cp	r24, r20
    6a8c:	95 07       	cpc	r25, r21
    6a8e:	08 f4       	brcc	.+2      	; 0x6a92 <malloc+0x5c>
    6a90:	ac 01       	movw	r20, r24
    6a92:	fe 01       	movw	r30, r28
    6a94:	8a 81       	ldd	r24, Y+2	; 0x02
    6a96:	9b 81       	ldd	r25, Y+3	; 0x03
    6a98:	9c 01       	movw	r18, r24
    6a9a:	e9 01       	movw	r28, r18
    6a9c:	20 97       	sbiw	r28, 0x00	; 0
    6a9e:	e9 f6       	brne	.-70     	; 0x6a5a <malloc+0x24>
    6aa0:	41 15       	cp	r20, r1
    6aa2:	51 05       	cpc	r21, r1
    6aa4:	a9 f1       	breq	.+106    	; 0x6b10 <malloc+0xda>
    6aa6:	ca 01       	movw	r24, r20
    6aa8:	86 1b       	sub	r24, r22
    6aaa:	97 0b       	sbc	r25, r23
    6aac:	04 97       	sbiw	r24, 0x04	; 4
    6aae:	08 f4       	brcc	.+2      	; 0x6ab2 <malloc+0x7c>
    6ab0:	ba 01       	movw	r22, r20
    6ab2:	e0 e0       	ldi	r30, 0x00	; 0
    6ab4:	f0 e0       	ldi	r31, 0x00	; 0
    6ab6:	2a c0       	rjmp	.+84     	; 0x6b0c <malloc+0xd6>
    6ab8:	8d 91       	ld	r24, X+
    6aba:	9c 91       	ld	r25, X
    6abc:	11 97       	sbiw	r26, 0x01	; 1
    6abe:	84 17       	cp	r24, r20
    6ac0:	95 07       	cpc	r25, r21
    6ac2:	f9 f4       	brne	.+62     	; 0x6b02 <malloc+0xcc>
    6ac4:	64 17       	cp	r22, r20
    6ac6:	75 07       	cpc	r23, r21
    6ac8:	81 f4       	brne	.+32     	; 0x6aea <malloc+0xb4>
    6aca:	12 96       	adiw	r26, 0x02	; 2
    6acc:	8d 91       	ld	r24, X+
    6ace:	9c 91       	ld	r25, X
    6ad0:	13 97       	sbiw	r26, 0x03	; 3
    6ad2:	30 97       	sbiw	r30, 0x00	; 0
    6ad4:	19 f0       	breq	.+6      	; 0x6adc <malloc+0xa6>
    6ad6:	93 83       	std	Z+3, r25	; 0x03
    6ad8:	82 83       	std	Z+2, r24	; 0x02
    6ada:	04 c0       	rjmp	.+8      	; 0x6ae4 <malloc+0xae>
    6adc:	90 93 32 08 	sts	0x0832, r25
    6ae0:	80 93 31 08 	sts	0x0831, r24
    6ae4:	fd 01       	movw	r30, r26
    6ae6:	32 96       	adiw	r30, 0x02	; 2
    6ae8:	4f c0       	rjmp	.+158    	; 0x6b88 <malloc+0x152>
    6aea:	ca 01       	movw	r24, r20
    6aec:	86 1b       	sub	r24, r22
    6aee:	97 0b       	sbc	r25, r23
    6af0:	fd 01       	movw	r30, r26
    6af2:	e8 0f       	add	r30, r24
    6af4:	f9 1f       	adc	r31, r25
    6af6:	61 93       	st	Z+, r22
    6af8:	71 93       	st	Z+, r23
    6afa:	02 97       	sbiw	r24, 0x02	; 2
    6afc:	8d 93       	st	X+, r24
    6afe:	9c 93       	st	X, r25
    6b00:	43 c0       	rjmp	.+134    	; 0x6b88 <malloc+0x152>
    6b02:	fd 01       	movw	r30, r26
    6b04:	82 81       	ldd	r24, Z+2	; 0x02
    6b06:	93 81       	ldd	r25, Z+3	; 0x03
    6b08:	9c 01       	movw	r18, r24
    6b0a:	d9 01       	movw	r26, r18
    6b0c:	10 97       	sbiw	r26, 0x00	; 0
    6b0e:	a1 f6       	brne	.-88     	; 0x6ab8 <malloc+0x82>
    6b10:	80 91 2f 08 	lds	r24, 0x082F
    6b14:	90 91 30 08 	lds	r25, 0x0830
    6b18:	89 2b       	or	r24, r25
    6b1a:	41 f4       	brne	.+16     	; 0x6b2c <malloc+0xf6>
    6b1c:	80 91 65 04 	lds	r24, 0x0465
    6b20:	90 91 66 04 	lds	r25, 0x0466
    6b24:	90 93 30 08 	sts	0x0830, r25
    6b28:	80 93 2f 08 	sts	0x082F, r24
    6b2c:	40 91 67 04 	lds	r20, 0x0467
    6b30:	50 91 68 04 	lds	r21, 0x0468
    6b34:	41 15       	cp	r20, r1
    6b36:	51 05       	cpc	r21, r1
    6b38:	41 f4       	brne	.+16     	; 0x6b4a <malloc+0x114>
    6b3a:	4d b7       	in	r20, 0x3d	; 61
    6b3c:	5e b7       	in	r21, 0x3e	; 62
    6b3e:	80 91 63 04 	lds	r24, 0x0463
    6b42:	90 91 64 04 	lds	r25, 0x0464
    6b46:	48 1b       	sub	r20, r24
    6b48:	59 0b       	sbc	r21, r25
    6b4a:	20 91 2f 08 	lds	r18, 0x082F
    6b4e:	30 91 30 08 	lds	r19, 0x0830
    6b52:	24 17       	cp	r18, r20
    6b54:	35 07       	cpc	r19, r21
    6b56:	b0 f4       	brcc	.+44     	; 0x6b84 <malloc+0x14e>
    6b58:	ca 01       	movw	r24, r20
    6b5a:	82 1b       	sub	r24, r18
    6b5c:	93 0b       	sbc	r25, r19
    6b5e:	86 17       	cp	r24, r22
    6b60:	97 07       	cpc	r25, r23
    6b62:	80 f0       	brcs	.+32     	; 0x6b84 <malloc+0x14e>
    6b64:	ab 01       	movw	r20, r22
    6b66:	4e 5f       	subi	r20, 0xFE	; 254
    6b68:	5f 4f       	sbci	r21, 0xFF	; 255
    6b6a:	84 17       	cp	r24, r20
    6b6c:	95 07       	cpc	r25, r21
    6b6e:	50 f0       	brcs	.+20     	; 0x6b84 <malloc+0x14e>
    6b70:	42 0f       	add	r20, r18
    6b72:	53 1f       	adc	r21, r19
    6b74:	50 93 30 08 	sts	0x0830, r21
    6b78:	40 93 2f 08 	sts	0x082F, r20
    6b7c:	f9 01       	movw	r30, r18
    6b7e:	61 93       	st	Z+, r22
    6b80:	71 93       	st	Z+, r23
    6b82:	02 c0       	rjmp	.+4      	; 0x6b88 <malloc+0x152>
    6b84:	e0 e0       	ldi	r30, 0x00	; 0
    6b86:	f0 e0       	ldi	r31, 0x00	; 0
    6b88:	cf 01       	movw	r24, r30
    6b8a:	df 91       	pop	r29
    6b8c:	cf 91       	pop	r28
    6b8e:	08 95       	ret

00006b90 <free>:
    6b90:	cf 93       	push	r28
    6b92:	df 93       	push	r29
    6b94:	00 97       	sbiw	r24, 0x00	; 0
    6b96:	09 f4       	brne	.+2      	; 0x6b9a <free+0xa>
    6b98:	50 c0       	rjmp	.+160    	; 0x6c3a <free+0xaa>
    6b9a:	ec 01       	movw	r28, r24
    6b9c:	22 97       	sbiw	r28, 0x02	; 2
    6b9e:	1b 82       	std	Y+3, r1	; 0x03
    6ba0:	1a 82       	std	Y+2, r1	; 0x02
    6ba2:	a0 91 31 08 	lds	r26, 0x0831
    6ba6:	b0 91 32 08 	lds	r27, 0x0832
    6baa:	10 97       	sbiw	r26, 0x00	; 0
    6bac:	09 f1       	breq	.+66     	; 0x6bf0 <free+0x60>
    6bae:	40 e0       	ldi	r20, 0x00	; 0
    6bb0:	50 e0       	ldi	r21, 0x00	; 0
    6bb2:	ac 17       	cp	r26, r28
    6bb4:	bd 07       	cpc	r27, r29
    6bb6:	08 f1       	brcs	.+66     	; 0x6bfa <free+0x6a>
    6bb8:	bb 83       	std	Y+3, r27	; 0x03
    6bba:	aa 83       	std	Y+2, r26	; 0x02
    6bbc:	fe 01       	movw	r30, r28
    6bbe:	21 91       	ld	r18, Z+
    6bc0:	31 91       	ld	r19, Z+
    6bc2:	e2 0f       	add	r30, r18
    6bc4:	f3 1f       	adc	r31, r19
    6bc6:	ae 17       	cp	r26, r30
    6bc8:	bf 07       	cpc	r27, r31
    6bca:	79 f4       	brne	.+30     	; 0x6bea <free+0x5a>
    6bcc:	8d 91       	ld	r24, X+
    6bce:	9c 91       	ld	r25, X
    6bd0:	11 97       	sbiw	r26, 0x01	; 1
    6bd2:	28 0f       	add	r18, r24
    6bd4:	39 1f       	adc	r19, r25
    6bd6:	2e 5f       	subi	r18, 0xFE	; 254
    6bd8:	3f 4f       	sbci	r19, 0xFF	; 255
    6bda:	39 83       	std	Y+1, r19	; 0x01
    6bdc:	28 83       	st	Y, r18
    6bde:	12 96       	adiw	r26, 0x02	; 2
    6be0:	8d 91       	ld	r24, X+
    6be2:	9c 91       	ld	r25, X
    6be4:	13 97       	sbiw	r26, 0x03	; 3
    6be6:	9b 83       	std	Y+3, r25	; 0x03
    6be8:	8a 83       	std	Y+2, r24	; 0x02
    6bea:	41 15       	cp	r20, r1
    6bec:	51 05       	cpc	r21, r1
    6bee:	71 f4       	brne	.+28     	; 0x6c0c <free+0x7c>
    6bf0:	d0 93 32 08 	sts	0x0832, r29
    6bf4:	c0 93 31 08 	sts	0x0831, r28
    6bf8:	20 c0       	rjmp	.+64     	; 0x6c3a <free+0xaa>
    6bfa:	12 96       	adiw	r26, 0x02	; 2
    6bfc:	8d 91       	ld	r24, X+
    6bfe:	9c 91       	ld	r25, X
    6c00:	13 97       	sbiw	r26, 0x03	; 3
    6c02:	ad 01       	movw	r20, r26
    6c04:	00 97       	sbiw	r24, 0x00	; 0
    6c06:	11 f0       	breq	.+4      	; 0x6c0c <free+0x7c>
    6c08:	dc 01       	movw	r26, r24
    6c0a:	d3 cf       	rjmp	.-90     	; 0x6bb2 <free+0x22>
    6c0c:	fa 01       	movw	r30, r20
    6c0e:	d3 83       	std	Z+3, r29	; 0x03
    6c10:	c2 83       	std	Z+2, r28	; 0x02
    6c12:	21 91       	ld	r18, Z+
    6c14:	31 91       	ld	r19, Z+
    6c16:	e2 0f       	add	r30, r18
    6c18:	f3 1f       	adc	r31, r19
    6c1a:	ce 17       	cp	r28, r30
    6c1c:	df 07       	cpc	r29, r31
    6c1e:	69 f4       	brne	.+26     	; 0x6c3a <free+0xaa>
    6c20:	88 81       	ld	r24, Y
    6c22:	99 81       	ldd	r25, Y+1	; 0x01
    6c24:	28 0f       	add	r18, r24
    6c26:	39 1f       	adc	r19, r25
    6c28:	2e 5f       	subi	r18, 0xFE	; 254
    6c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c2c:	fa 01       	movw	r30, r20
    6c2e:	31 83       	std	Z+1, r19	; 0x01
    6c30:	20 83       	st	Z, r18
    6c32:	8a 81       	ldd	r24, Y+2	; 0x02
    6c34:	9b 81       	ldd	r25, Y+3	; 0x03
    6c36:	93 83       	std	Z+3, r25	; 0x03
    6c38:	82 83       	std	Z+2, r24	; 0x02
    6c3a:	df 91       	pop	r29
    6c3c:	cf 91       	pop	r28
    6c3e:	08 95       	ret

00006c40 <__ftoa_engine>:
    6c40:	28 30       	cpi	r18, 0x08	; 8
    6c42:	08 f0       	brcs	.+2      	; 0x6c46 <__ftoa_engine+0x6>
    6c44:	27 e0       	ldi	r18, 0x07	; 7
    6c46:	33 27       	eor	r19, r19
    6c48:	da 01       	movw	r26, r20
    6c4a:	99 0f       	add	r25, r25
    6c4c:	31 1d       	adc	r19, r1
    6c4e:	87 fd       	sbrc	r24, 7
    6c50:	91 60       	ori	r25, 0x01	; 1
    6c52:	00 96       	adiw	r24, 0x00	; 0
    6c54:	61 05       	cpc	r22, r1
    6c56:	71 05       	cpc	r23, r1
    6c58:	39 f4       	brne	.+14     	; 0x6c68 <__ftoa_engine+0x28>
    6c5a:	32 60       	ori	r19, 0x02	; 2
    6c5c:	2e 5f       	subi	r18, 0xFE	; 254
    6c5e:	3d 93       	st	X+, r19
    6c60:	30 e3       	ldi	r19, 0x30	; 48
    6c62:	2a 95       	dec	r18
    6c64:	e1 f7       	brne	.-8      	; 0x6c5e <__ftoa_engine+0x1e>
    6c66:	08 95       	ret
    6c68:	9f 3f       	cpi	r25, 0xFF	; 255
    6c6a:	30 f0       	brcs	.+12     	; 0x6c78 <__ftoa_engine+0x38>
    6c6c:	80 38       	cpi	r24, 0x80	; 128
    6c6e:	71 05       	cpc	r23, r1
    6c70:	61 05       	cpc	r22, r1
    6c72:	09 f0       	breq	.+2      	; 0x6c76 <__ftoa_engine+0x36>
    6c74:	3c 5f       	subi	r19, 0xFC	; 252
    6c76:	3c 5f       	subi	r19, 0xFC	; 252
    6c78:	3d 93       	st	X+, r19
    6c7a:	91 30       	cpi	r25, 0x01	; 1
    6c7c:	08 f0       	brcs	.+2      	; 0x6c80 <__ftoa_engine+0x40>
    6c7e:	80 68       	ori	r24, 0x80	; 128
    6c80:	91 1d       	adc	r25, r1
    6c82:	df 93       	push	r29
    6c84:	cf 93       	push	r28
    6c86:	1f 93       	push	r17
    6c88:	0f 93       	push	r16
    6c8a:	ff 92       	push	r15
    6c8c:	ef 92       	push	r14
    6c8e:	19 2f       	mov	r17, r25
    6c90:	98 7f       	andi	r25, 0xF8	; 248
    6c92:	96 95       	lsr	r25
    6c94:	e9 2f       	mov	r30, r25
    6c96:	96 95       	lsr	r25
    6c98:	96 95       	lsr	r25
    6c9a:	e9 0f       	add	r30, r25
    6c9c:	ff 27       	eor	r31, r31
    6c9e:	ef 53       	subi	r30, 0x3F	; 63
    6ca0:	fa 4f       	sbci	r31, 0xFA	; 250
    6ca2:	99 27       	eor	r25, r25
    6ca4:	33 27       	eor	r19, r19
    6ca6:	ee 24       	eor	r14, r14
    6ca8:	ff 24       	eor	r15, r15
    6caa:	a7 01       	movw	r20, r14
    6cac:	e7 01       	movw	r28, r14
    6cae:	05 90       	lpm	r0, Z+
    6cb0:	08 94       	sec
    6cb2:	07 94       	ror	r0
    6cb4:	28 f4       	brcc	.+10     	; 0x6cc0 <__ftoa_engine+0x80>
    6cb6:	36 0f       	add	r19, r22
    6cb8:	e7 1e       	adc	r14, r23
    6cba:	f8 1e       	adc	r15, r24
    6cbc:	49 1f       	adc	r20, r25
    6cbe:	51 1d       	adc	r21, r1
    6cc0:	66 0f       	add	r22, r22
    6cc2:	77 1f       	adc	r23, r23
    6cc4:	88 1f       	adc	r24, r24
    6cc6:	99 1f       	adc	r25, r25
    6cc8:	06 94       	lsr	r0
    6cca:	a1 f7       	brne	.-24     	; 0x6cb4 <__ftoa_engine+0x74>
    6ccc:	05 90       	lpm	r0, Z+
    6cce:	07 94       	ror	r0
    6cd0:	28 f4       	brcc	.+10     	; 0x6cdc <__ftoa_engine+0x9c>
    6cd2:	e7 0e       	add	r14, r23
    6cd4:	f8 1e       	adc	r15, r24
    6cd6:	49 1f       	adc	r20, r25
    6cd8:	56 1f       	adc	r21, r22
    6cda:	c1 1d       	adc	r28, r1
    6cdc:	77 0f       	add	r23, r23
    6cde:	88 1f       	adc	r24, r24
    6ce0:	99 1f       	adc	r25, r25
    6ce2:	66 1f       	adc	r22, r22
    6ce4:	06 94       	lsr	r0
    6ce6:	a1 f7       	brne	.-24     	; 0x6cd0 <__ftoa_engine+0x90>
    6ce8:	05 90       	lpm	r0, Z+
    6cea:	07 94       	ror	r0
    6cec:	28 f4       	brcc	.+10     	; 0x6cf8 <__ftoa_engine+0xb8>
    6cee:	f8 0e       	add	r15, r24
    6cf0:	49 1f       	adc	r20, r25
    6cf2:	56 1f       	adc	r21, r22
    6cf4:	c7 1f       	adc	r28, r23
    6cf6:	d1 1d       	adc	r29, r1
    6cf8:	88 0f       	add	r24, r24
    6cfa:	99 1f       	adc	r25, r25
    6cfc:	66 1f       	adc	r22, r22
    6cfe:	77 1f       	adc	r23, r23
    6d00:	06 94       	lsr	r0
    6d02:	a1 f7       	brne	.-24     	; 0x6cec <__ftoa_engine+0xac>
    6d04:	05 90       	lpm	r0, Z+
    6d06:	07 94       	ror	r0
    6d08:	20 f4       	brcc	.+8      	; 0x6d12 <__ftoa_engine+0xd2>
    6d0a:	49 0f       	add	r20, r25
    6d0c:	56 1f       	adc	r21, r22
    6d0e:	c7 1f       	adc	r28, r23
    6d10:	d8 1f       	adc	r29, r24
    6d12:	99 0f       	add	r25, r25
    6d14:	66 1f       	adc	r22, r22
    6d16:	77 1f       	adc	r23, r23
    6d18:	88 1f       	adc	r24, r24
    6d1a:	06 94       	lsr	r0
    6d1c:	a9 f7       	brne	.-22     	; 0x6d08 <__ftoa_engine+0xc8>
    6d1e:	84 91       	lpm	r24, Z+
    6d20:	10 95       	com	r17
    6d22:	17 70       	andi	r17, 0x07	; 7
    6d24:	41 f0       	breq	.+16     	; 0x6d36 <__ftoa_engine+0xf6>
    6d26:	d6 95       	lsr	r29
    6d28:	c7 95       	ror	r28
    6d2a:	57 95       	ror	r21
    6d2c:	47 95       	ror	r20
    6d2e:	f7 94       	ror	r15
    6d30:	e7 94       	ror	r14
    6d32:	1a 95       	dec	r17
    6d34:	c1 f7       	brne	.-16     	; 0x6d26 <__ftoa_engine+0xe6>
    6d36:	e7 e6       	ldi	r30, 0x67	; 103
    6d38:	f5 e0       	ldi	r31, 0x05	; 5
    6d3a:	68 94       	set
    6d3c:	15 90       	lpm	r1, Z+
    6d3e:	15 91       	lpm	r17, Z+
    6d40:	35 91       	lpm	r19, Z+
    6d42:	65 91       	lpm	r22, Z+
    6d44:	95 91       	lpm	r25, Z+
    6d46:	05 90       	lpm	r0, Z+
    6d48:	7f e2       	ldi	r23, 0x2F	; 47
    6d4a:	73 95       	inc	r23
    6d4c:	e1 18       	sub	r14, r1
    6d4e:	f1 0a       	sbc	r15, r17
    6d50:	43 0b       	sbc	r20, r19
    6d52:	56 0b       	sbc	r21, r22
    6d54:	c9 0b       	sbc	r28, r25
    6d56:	d0 09       	sbc	r29, r0
    6d58:	c0 f7       	brcc	.-16     	; 0x6d4a <__ftoa_engine+0x10a>
    6d5a:	e1 0c       	add	r14, r1
    6d5c:	f1 1e       	adc	r15, r17
    6d5e:	43 1f       	adc	r20, r19
    6d60:	56 1f       	adc	r21, r22
    6d62:	c9 1f       	adc	r28, r25
    6d64:	d0 1d       	adc	r29, r0
    6d66:	7e f4       	brtc	.+30     	; 0x6d86 <__ftoa_engine+0x146>
    6d68:	70 33       	cpi	r23, 0x30	; 48
    6d6a:	11 f4       	brne	.+4      	; 0x6d70 <__ftoa_engine+0x130>
    6d6c:	8a 95       	dec	r24
    6d6e:	e6 cf       	rjmp	.-52     	; 0x6d3c <__ftoa_engine+0xfc>
    6d70:	e8 94       	clt
    6d72:	01 50       	subi	r16, 0x01	; 1
    6d74:	30 f0       	brcs	.+12     	; 0x6d82 <__ftoa_engine+0x142>
    6d76:	08 0f       	add	r16, r24
    6d78:	0a f4       	brpl	.+2      	; 0x6d7c <__ftoa_engine+0x13c>
    6d7a:	00 27       	eor	r16, r16
    6d7c:	02 17       	cp	r16, r18
    6d7e:	08 f4       	brcc	.+2      	; 0x6d82 <__ftoa_engine+0x142>
    6d80:	20 2f       	mov	r18, r16
    6d82:	23 95       	inc	r18
    6d84:	02 2f       	mov	r16, r18
    6d86:	7a 33       	cpi	r23, 0x3A	; 58
    6d88:	28 f0       	brcs	.+10     	; 0x6d94 <__ftoa_engine+0x154>
    6d8a:	79 e3       	ldi	r23, 0x39	; 57
    6d8c:	7d 93       	st	X+, r23
    6d8e:	2a 95       	dec	r18
    6d90:	e9 f7       	brne	.-6      	; 0x6d8c <__ftoa_engine+0x14c>
    6d92:	10 c0       	rjmp	.+32     	; 0x6db4 <__ftoa_engine+0x174>
    6d94:	7d 93       	st	X+, r23
    6d96:	2a 95       	dec	r18
    6d98:	89 f6       	brne	.-94     	; 0x6d3c <__ftoa_engine+0xfc>
    6d9a:	06 94       	lsr	r0
    6d9c:	97 95       	ror	r25
    6d9e:	67 95       	ror	r22
    6da0:	37 95       	ror	r19
    6da2:	17 95       	ror	r17
    6da4:	17 94       	ror	r1
    6da6:	e1 18       	sub	r14, r1
    6da8:	f1 0a       	sbc	r15, r17
    6daa:	43 0b       	sbc	r20, r19
    6dac:	56 0b       	sbc	r21, r22
    6dae:	c9 0b       	sbc	r28, r25
    6db0:	d0 09       	sbc	r29, r0
    6db2:	98 f0       	brcs	.+38     	; 0x6dda <__ftoa_engine+0x19a>
    6db4:	23 95       	inc	r18
    6db6:	7e 91       	ld	r23, -X
    6db8:	73 95       	inc	r23
    6dba:	7a 33       	cpi	r23, 0x3A	; 58
    6dbc:	08 f0       	brcs	.+2      	; 0x6dc0 <__ftoa_engine+0x180>
    6dbe:	70 e3       	ldi	r23, 0x30	; 48
    6dc0:	7c 93       	st	X, r23
    6dc2:	20 13       	cpse	r18, r16
    6dc4:	b8 f7       	brcc	.-18     	; 0x6db4 <__ftoa_engine+0x174>
    6dc6:	7e 91       	ld	r23, -X
    6dc8:	70 61       	ori	r23, 0x10	; 16
    6dca:	7d 93       	st	X+, r23
    6dcc:	30 f0       	brcs	.+12     	; 0x6dda <__ftoa_engine+0x19a>
    6dce:	83 95       	inc	r24
    6dd0:	71 e3       	ldi	r23, 0x31	; 49
    6dd2:	7d 93       	st	X+, r23
    6dd4:	70 e3       	ldi	r23, 0x30	; 48
    6dd6:	2a 95       	dec	r18
    6dd8:	e1 f7       	brne	.-8      	; 0x6dd2 <__ftoa_engine+0x192>
    6dda:	11 24       	eor	r1, r1
    6ddc:	ef 90       	pop	r14
    6dde:	ff 90       	pop	r15
    6de0:	0f 91       	pop	r16
    6de2:	1f 91       	pop	r17
    6de4:	cf 91       	pop	r28
    6de6:	df 91       	pop	r29
    6de8:	99 27       	eor	r25, r25
    6dea:	87 fd       	sbrc	r24, 7
    6dec:	90 95       	com	r25
    6dee:	08 95       	ret

00006df0 <strnlen_P>:
    6df0:	fc 01       	movw	r30, r24
    6df2:	05 90       	lpm	r0, Z+
    6df4:	61 50       	subi	r22, 0x01	; 1
    6df6:	70 40       	sbci	r23, 0x00	; 0
    6df8:	01 10       	cpse	r0, r1
    6dfa:	d8 f7       	brcc	.-10     	; 0x6df2 <strnlen_P+0x2>
    6dfc:	80 95       	com	r24
    6dfe:	90 95       	com	r25
    6e00:	8e 0f       	add	r24, r30
    6e02:	9f 1f       	adc	r25, r31
    6e04:	08 95       	ret

00006e06 <strnlen>:
    6e06:	fc 01       	movw	r30, r24
    6e08:	61 50       	subi	r22, 0x01	; 1
    6e0a:	70 40       	sbci	r23, 0x00	; 0
    6e0c:	01 90       	ld	r0, Z+
    6e0e:	01 10       	cpse	r0, r1
    6e10:	d8 f7       	brcc	.-10     	; 0x6e08 <strnlen+0x2>
    6e12:	80 95       	com	r24
    6e14:	90 95       	com	r25
    6e16:	8e 0f       	add	r24, r30
    6e18:	9f 1f       	adc	r25, r31
    6e1a:	08 95       	ret

00006e1c <fputc>:
    6e1c:	0f 93       	push	r16
    6e1e:	1f 93       	push	r17
    6e20:	cf 93       	push	r28
    6e22:	df 93       	push	r29
    6e24:	8c 01       	movw	r16, r24
    6e26:	eb 01       	movw	r28, r22
    6e28:	8b 81       	ldd	r24, Y+3	; 0x03
    6e2a:	81 ff       	sbrs	r24, 1
    6e2c:	1b c0       	rjmp	.+54     	; 0x6e64 <fputc+0x48>
    6e2e:	82 ff       	sbrs	r24, 2
    6e30:	0d c0       	rjmp	.+26     	; 0x6e4c <fputc+0x30>
    6e32:	2e 81       	ldd	r18, Y+6	; 0x06
    6e34:	3f 81       	ldd	r19, Y+7	; 0x07
    6e36:	8c 81       	ldd	r24, Y+4	; 0x04
    6e38:	9d 81       	ldd	r25, Y+5	; 0x05
    6e3a:	28 17       	cp	r18, r24
    6e3c:	39 07       	cpc	r19, r25
    6e3e:	64 f4       	brge	.+24     	; 0x6e58 <fputc+0x3c>
    6e40:	e8 81       	ld	r30, Y
    6e42:	f9 81       	ldd	r31, Y+1	; 0x01
    6e44:	01 93       	st	Z+, r16
    6e46:	f9 83       	std	Y+1, r31	; 0x01
    6e48:	e8 83       	st	Y, r30
    6e4a:	06 c0       	rjmp	.+12     	; 0x6e58 <fputc+0x3c>
    6e4c:	e8 85       	ldd	r30, Y+8	; 0x08
    6e4e:	f9 85       	ldd	r31, Y+9	; 0x09
    6e50:	80 2f       	mov	r24, r16
    6e52:	09 95       	icall
    6e54:	89 2b       	or	r24, r25
    6e56:	31 f4       	brne	.+12     	; 0x6e64 <fputc+0x48>
    6e58:	8e 81       	ldd	r24, Y+6	; 0x06
    6e5a:	9f 81       	ldd	r25, Y+7	; 0x07
    6e5c:	01 96       	adiw	r24, 0x01	; 1
    6e5e:	9f 83       	std	Y+7, r25	; 0x07
    6e60:	8e 83       	std	Y+6, r24	; 0x06
    6e62:	02 c0       	rjmp	.+4      	; 0x6e68 <fputc+0x4c>
    6e64:	0f ef       	ldi	r16, 0xFF	; 255
    6e66:	1f ef       	ldi	r17, 0xFF	; 255
    6e68:	c8 01       	movw	r24, r16
    6e6a:	df 91       	pop	r29
    6e6c:	cf 91       	pop	r28
    6e6e:	1f 91       	pop	r17
    6e70:	0f 91       	pop	r16
    6e72:	08 95       	ret

00006e74 <printf>:
    6e74:	a0 e0       	ldi	r26, 0x00	; 0
    6e76:	b0 e0       	ldi	r27, 0x00	; 0
    6e78:	ef e3       	ldi	r30, 0x3F	; 63
    6e7a:	f7 e3       	ldi	r31, 0x37	; 55
    6e7c:	b5 cd       	rjmp	.-1174   	; 0x69e8 <__prologue_saves__+0x20>
    6e7e:	fe 01       	movw	r30, r28
    6e80:	35 96       	adiw	r30, 0x05	; 5
    6e82:	61 91       	ld	r22, Z+
    6e84:	71 91       	ld	r23, Z+
    6e86:	80 91 35 08 	lds	r24, 0x0835
    6e8a:	90 91 36 08 	lds	r25, 0x0836
    6e8e:	af 01       	movw	r20, r30
    6e90:	f2 d9       	rcall	.-3100   	; 0x6276 <vfprintf>
    6e92:	20 96       	adiw	r28, 0x00	; 0
    6e94:	e2 e0       	ldi	r30, 0x02	; 2
    6e96:	c4 cd       	rjmp	.-1144   	; 0x6a20 <__epilogue_restores__+0x20>

00006e98 <puts>:
    6e98:	0f 93       	push	r16
    6e9a:	1f 93       	push	r17
    6e9c:	cf 93       	push	r28
    6e9e:	df 93       	push	r29
    6ea0:	8c 01       	movw	r16, r24
    6ea2:	e0 91 35 08 	lds	r30, 0x0835
    6ea6:	f0 91 36 08 	lds	r31, 0x0836
    6eaa:	83 81       	ldd	r24, Z+3	; 0x03
    6eac:	81 ff       	sbrs	r24, 1
    6eae:	21 c0       	rjmp	.+66     	; 0x6ef2 <puts+0x5a>
    6eb0:	c0 e0       	ldi	r28, 0x00	; 0
    6eb2:	d0 e0       	ldi	r29, 0x00	; 0
    6eb4:	0d c0       	rjmp	.+26     	; 0x6ed0 <puts+0x38>
    6eb6:	e0 91 35 08 	lds	r30, 0x0835
    6eba:	f0 91 36 08 	lds	r31, 0x0836
    6ebe:	20 85       	ldd	r18, Z+8	; 0x08
    6ec0:	31 85       	ldd	r19, Z+9	; 0x09
    6ec2:	bf 01       	movw	r22, r30
    6ec4:	f9 01       	movw	r30, r18
    6ec6:	09 95       	icall
    6ec8:	89 2b       	or	r24, r25
    6eca:	11 f0       	breq	.+4      	; 0x6ed0 <puts+0x38>
    6ecc:	cf ef       	ldi	r28, 0xFF	; 255
    6ece:	df ef       	ldi	r29, 0xFF	; 255
    6ed0:	f8 01       	movw	r30, r16
    6ed2:	81 91       	ld	r24, Z+
    6ed4:	8f 01       	movw	r16, r30
    6ed6:	88 23       	and	r24, r24
    6ed8:	71 f7       	brne	.-36     	; 0x6eb6 <puts+0x1e>
    6eda:	e0 91 35 08 	lds	r30, 0x0835
    6ede:	f0 91 36 08 	lds	r31, 0x0836
    6ee2:	20 85       	ldd	r18, Z+8	; 0x08
    6ee4:	31 85       	ldd	r19, Z+9	; 0x09
    6ee6:	8a e0       	ldi	r24, 0x0A	; 10
    6ee8:	bf 01       	movw	r22, r30
    6eea:	f9 01       	movw	r30, r18
    6eec:	09 95       	icall
    6eee:	89 2b       	or	r24, r25
    6ef0:	11 f0       	breq	.+4      	; 0x6ef6 <puts+0x5e>
    6ef2:	cf ef       	ldi	r28, 0xFF	; 255
    6ef4:	df ef       	ldi	r29, 0xFF	; 255
    6ef6:	ce 01       	movw	r24, r28
    6ef8:	df 91       	pop	r29
    6efa:	cf 91       	pop	r28
    6efc:	1f 91       	pop	r17
    6efe:	0f 91       	pop	r16
    6f00:	08 95       	ret

00006f02 <__ultoa_invert>:
    6f02:	fa 01       	movw	r30, r20
    6f04:	aa 27       	eor	r26, r26
    6f06:	28 30       	cpi	r18, 0x08	; 8
    6f08:	51 f1       	breq	.+84     	; 0x6f5e <__ultoa_invert+0x5c>
    6f0a:	20 31       	cpi	r18, 0x10	; 16
    6f0c:	81 f1       	breq	.+96     	; 0x6f6e <__ultoa_invert+0x6c>
    6f0e:	e8 94       	clt
    6f10:	6f 93       	push	r22
    6f12:	6e 7f       	andi	r22, 0xFE	; 254
    6f14:	6e 5f       	subi	r22, 0xFE	; 254
    6f16:	7f 4f       	sbci	r23, 0xFF	; 255
    6f18:	8f 4f       	sbci	r24, 0xFF	; 255
    6f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    6f1c:	af 4f       	sbci	r26, 0xFF	; 255
    6f1e:	b1 e0       	ldi	r27, 0x01	; 1
    6f20:	3e d0       	rcall	.+124    	; 0x6f9e <__ultoa_invert+0x9c>
    6f22:	b4 e0       	ldi	r27, 0x04	; 4
    6f24:	3c d0       	rcall	.+120    	; 0x6f9e <__ultoa_invert+0x9c>
    6f26:	67 0f       	add	r22, r23
    6f28:	78 1f       	adc	r23, r24
    6f2a:	89 1f       	adc	r24, r25
    6f2c:	9a 1f       	adc	r25, r26
    6f2e:	a1 1d       	adc	r26, r1
    6f30:	68 0f       	add	r22, r24
    6f32:	79 1f       	adc	r23, r25
    6f34:	8a 1f       	adc	r24, r26
    6f36:	91 1d       	adc	r25, r1
    6f38:	a1 1d       	adc	r26, r1
    6f3a:	6a 0f       	add	r22, r26
    6f3c:	71 1d       	adc	r23, r1
    6f3e:	81 1d       	adc	r24, r1
    6f40:	91 1d       	adc	r25, r1
    6f42:	a1 1d       	adc	r26, r1
    6f44:	20 d0       	rcall	.+64     	; 0x6f86 <__ultoa_invert+0x84>
    6f46:	09 f4       	brne	.+2      	; 0x6f4a <__ultoa_invert+0x48>
    6f48:	68 94       	set
    6f4a:	3f 91       	pop	r19
    6f4c:	2a e0       	ldi	r18, 0x0A	; 10
    6f4e:	26 9f       	mul	r18, r22
    6f50:	11 24       	eor	r1, r1
    6f52:	30 19       	sub	r19, r0
    6f54:	30 5d       	subi	r19, 0xD0	; 208
    6f56:	31 93       	st	Z+, r19
    6f58:	de f6       	brtc	.-74     	; 0x6f10 <__ultoa_invert+0xe>
    6f5a:	cf 01       	movw	r24, r30
    6f5c:	08 95       	ret
    6f5e:	46 2f       	mov	r20, r22
    6f60:	47 70       	andi	r20, 0x07	; 7
    6f62:	40 5d       	subi	r20, 0xD0	; 208
    6f64:	41 93       	st	Z+, r20
    6f66:	b3 e0       	ldi	r27, 0x03	; 3
    6f68:	0f d0       	rcall	.+30     	; 0x6f88 <__ultoa_invert+0x86>
    6f6a:	c9 f7       	brne	.-14     	; 0x6f5e <__ultoa_invert+0x5c>
    6f6c:	f6 cf       	rjmp	.-20     	; 0x6f5a <__ultoa_invert+0x58>
    6f6e:	46 2f       	mov	r20, r22
    6f70:	4f 70       	andi	r20, 0x0F	; 15
    6f72:	40 5d       	subi	r20, 0xD0	; 208
    6f74:	4a 33       	cpi	r20, 0x3A	; 58
    6f76:	18 f0       	brcs	.+6      	; 0x6f7e <__ultoa_invert+0x7c>
    6f78:	49 5d       	subi	r20, 0xD9	; 217
    6f7a:	31 fd       	sbrc	r19, 1
    6f7c:	40 52       	subi	r20, 0x20	; 32
    6f7e:	41 93       	st	Z+, r20
    6f80:	02 d0       	rcall	.+4      	; 0x6f86 <__ultoa_invert+0x84>
    6f82:	a9 f7       	brne	.-22     	; 0x6f6e <__ultoa_invert+0x6c>
    6f84:	ea cf       	rjmp	.-44     	; 0x6f5a <__ultoa_invert+0x58>
    6f86:	b4 e0       	ldi	r27, 0x04	; 4
    6f88:	a6 95       	lsr	r26
    6f8a:	97 95       	ror	r25
    6f8c:	87 95       	ror	r24
    6f8e:	77 95       	ror	r23
    6f90:	67 95       	ror	r22
    6f92:	ba 95       	dec	r27
    6f94:	c9 f7       	brne	.-14     	; 0x6f88 <__ultoa_invert+0x86>
    6f96:	00 97       	sbiw	r24, 0x00	; 0
    6f98:	61 05       	cpc	r22, r1
    6f9a:	71 05       	cpc	r23, r1
    6f9c:	08 95       	ret
    6f9e:	9b 01       	movw	r18, r22
    6fa0:	ac 01       	movw	r20, r24
    6fa2:	0a 2e       	mov	r0, r26
    6fa4:	06 94       	lsr	r0
    6fa6:	57 95       	ror	r21
    6fa8:	47 95       	ror	r20
    6faa:	37 95       	ror	r19
    6fac:	27 95       	ror	r18
    6fae:	ba 95       	dec	r27
    6fb0:	c9 f7       	brne	.-14     	; 0x6fa4 <__ultoa_invert+0xa2>
    6fb2:	62 0f       	add	r22, r18
    6fb4:	73 1f       	adc	r23, r19
    6fb6:	84 1f       	adc	r24, r20
    6fb8:	95 1f       	adc	r25, r21
    6fba:	a0 1d       	adc	r26, r0
    6fbc:	08 95       	ret

00006fbe <_exit>:
    6fbe:	f8 94       	cli

00006fc0 <__stop_program>:
    6fc0:	ff cf       	rjmp	.-2      	; 0x6fc0 <__stop_program>
